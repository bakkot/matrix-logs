[
{"content":{"body":"does ECMA-262 provide a web-compatible definition of JSON?","msgtype":"m.text"},"ts":1381276927000,"senderName":"jamesr__","senderId":"jamesr__@irc"},
{"content":{"body":"it defers *mostly* to http://www.ietf.org/rfc/rfc4627.txt","msgtype":"m.text"},"ts":1381276963000,"senderName":"jamesr__","senderId":"jamesr__@irc"},
{"content":{"body":"seems like a spec that's published in PDF is inherently incompatible with the web","msgtype":"m.text"},"ts":1381277397000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"there's an html version of ECMA262","msgtype":"m.text"},"ts":1381277409000,"senderName":"jamesr__","senderId":"jamesr__@irc"},
{"content":{"body":"oh, they have PDF in a big bold table, then html quietly in prose underneath it; strange","msgtype":"m.text"},"ts":1381277472000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"http://www.ecma-international.org/ecma-262/5.1/#sec-15.12.3 it's nice that they're defining it algorithmically, but ouch","msgtype":"m.text"},"ts":1381277737000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"rfc4627 says to \\u1234-escape UTF-16; looks like ecma-262 says to just return the surrogate, which appears to be what Chrome does","msgtype":"m.text"},"ts":1381278150000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"... which is strange, actually, since it means to get \"conforming\" utf-16 you need to do postprocessing to escape non-bmp characters, you can't just dump the result into a utf-8 encoder","msgtype":"m.text"},"ts":1381278194000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(i wonder how much of the web actually depends on JSON escaping non-BMP characters, which is pretty nasty)","msgtype":"m.text"},"ts":1381278242000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i guess I should say how much software, given that JSON.stringify *doesn't* escape them","msgtype":"m.text"},"ts":1381278278000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"hi, I'm having an error with this code: http://dpaste.com/1410324/","msgtype":"m.text"},"ts":1381281229000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"All strings must be XML compatible: Unicode or ASCII, no NULL bytes or control characters","msgtype":"m.text"},"ts":1381281277000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"problem is I have no control over the input, so this character pops up from time to time, I don't know why","msgtype":"m.text"},"ts":1381281301000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"aleray: sounds like you need to preprocess the input","msgtype":"m.text"},"ts":1381281379000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith, I found the error. Stupid me","msgtype":"m.text"},"ts":1381281437000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"not sure actually, but good thinking","msgtype":"m.text"},"ts":1381281524000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"MikeSmith, yes it was this: \"SPACE_REGEX.sub(u'\\u2026 \\1', text) to \"SPACE_REGEX.sub(ur'\\u2026 \\1', text)\"","msgtype":"m.text"},"ts":1381282862000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1381282877000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it was introducing the \\x01 control character","msgtype":"m.text"},"ts":1381282878000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1381283046000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"is there no way to position a background image's right edge 1em from the right edge of the background-origin ?","msgtype":"m.text"},"ts":1381292469000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"\"ECMAScript 3 has literals (or at least initializers) for every type but timestamps. Having timestamp literals would probably help dissuade developers from the current practice of passing some (often) random string to Date.parse and ask it to figure out what it means. Since the input syntax to that function is not defined in the spec, this practice is is evil.\" http://wiki.ecmascript.org/doku.php?id=proposals:date_literal_","msgtype":"m.text"},"ts":1381304134000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"syntax","msgtype":"m.text"},"ts":1381304134000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"...why not define the input syntax for Date()?","msgtype":"m.text"},"ts":1381304153000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"That's Work","msgtype":"m.text"},"ts":1381304202000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"matjas: should prolly list that as an open issue in http://javascript.spec.whatwg.org/#date","msgtype":"m.text"},"ts":1381308774000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: https://critic.hoppipolla.co.uk/r/348 y no tracking?","msgtype":"m.text"},"ts":1381308837000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hixie_: 'right 1em top 14px'","msgtype":"m.text"},"ts":1381311978000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"full grammar: http://www.w3.org/TR/css3-background/#ltpositiongt","msgtype":"m.text"},"ts":1381312053000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"odinho, good to hear that you like wptserve :)","msgtype":"m.text"},"ts":1381312311000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":" drawCustomFocusRing is oddly named. It may not draw anything","msgtype":"m.text"},"ts":1381313184000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"maybeDrawCustomFocusRing?","msgtype":"m.text"},"ts":1381313271000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I guess it should be split to two methods","msgtype":"m.text"},"ts":1381313338000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"canDraw...","msgtype":"m.text"},"ts":1381313349000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1381313359000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"perhaps there should be just canDraw...","msgtype":"m.text"},"ts":1381313371000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and drawSystemFocus..","msgtype":"m.text"},"ts":1381313379000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: Re: ServiceWorker and .ts, I read that as \"we won't write a spec or use WebIDL because fuck you\"","msgtype":"m.text"},"ts":1381313564000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"ha","msgtype":"m.text"},"ts":1381313618000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"zcorpan: Not tracking because the author did a rebase","msgtype":"m.text"},"ts":1381313658000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I thought more like: we use this hard to read way so than no one can comment on the API design","msgtype":"m.text"},"ts":1381313659000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: I think that amounts to the same thing","msgtype":"m.text"},"ts":1381313681000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"zcorpan: (or, more precisely, I think they did an in-place history rewrite)","msgtype":"m.text"},"ts":1381313736000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"What's this ServiceWorker thing?","msgtype":"m.text"},"ts":1381313844000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: new NavigationController","msgtype":"m.text"},"ts":1381313909000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh, new new new appcache?","msgtype":"m.text"},"ts":1381313925000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"yeah. and it is being implemented even though the proposal doesn't even have webidl for the interfaces :/","msgtype":"m.text"},"ts":1381313974000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(makes it hard to help the on who is implementing it)","msgtype":"m.text"},"ts":1381313984000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"s/on/one/","msgtype":"m.text"},"ts":1381313990000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Ms2ger: Think of it as Google Gears for the 2010s","msgtype":"m.text"},"ts":1381314008000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"could contribute some IDL to the repo","msgtype":"m.text"},"ts":1381314009000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"I can do that next week somewhere","msgtype":"m.text"},"ts":1381314023000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"would that help, smaug____ ?","msgtype":"m.text"},"ts":1381314030000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"webidl would help, yes","msgtype":"m.text"},"ts":1381314041000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Only if it was the canonical version","msgtype":"m.text"},"ts":1381314045000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Otherwise it will drift out of date","msgtype":"m.text"},"ts":1381314052000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"now I have basically no idea what kind of odd event interface the thing has","msgtype":"m.text"},"ts":1381314061000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I know they are something very unusual","msgtype":"m.text"},"ts":1381314069000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Futures","msgtype":"m.text"},"ts":1381314072000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"it has some odd mix of events and promises","msgtype":"m.text"},"ts":1381314092000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"is too negative","msgtype":"m.emote"},"ts":1381314189000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"You'd never","msgtype":"m.text"},"ts":1381314256000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger #)","msgtype":"m.text"},"ts":1381314267000,"senderName":"odinho","senderId":"odinho@irc"},
{"content":{"body":"(I don't see you around a lot anymore)","msgtype":"m.text"},"ts":1381314308000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"all I want is little consistency, also in API design :)","msgtype":"m.text"},"ts":1381314360000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: I think that goes for the people involved in designing that too","msgtype":"m.text"},"ts":1381315004000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"krijnh: http://krijnhoetmer.nl/irc-logs/whatwg don't seem to be responding","msgtype":"m.text"},"ts":1381315058000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk-cloud: sorry, I shouldn't be so negative, but it was just surprising to see an \"API proposal\" which didn't define the API in any common way","msgtype":"m.text"},"ts":1381315130000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"it coming from the people that don't like IDL, that kinda makes sense","msgtype":"m.text"},"ts":1381315163000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"but even then it is missing lots of the API","msgtype":"m.text"},"ts":1381315218000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"So if that's the kind of spec they want to see...","msgtype":"m.text"},"ts":1381315239000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"and the definition of various things is just still wrong, but I guess that is expected when the spec is so early draft","msgtype":"m.text"},"ts":1381315247000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"annevk-cloud: \"I don't like WebIDL so I am going to be purposefully obstructive and use my own invented format\" is kind of childish","msgtype":"m.text"},"ts":1381315249000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"indeed","msgtype":"m.text"},"ts":1381315258000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"jgraham: I'm not sure why you'd interpret the motivation like that","msgtype":"m.text"},"ts":1381315299000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"annevk-cloud: You just *said* that was the motivation","msgtype":"m.text"},"ts":1381315315000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: from comments given thus far it seems pretty clear they want to figure out the API in terms of JavaScript first, and IDL second","msgtype":"m.text"},"ts":1381315320000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"jgraham: no, I was just describing a group of people","msgtype":"m.text"},"ts":1381315352000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"I don't understand what distinction you are trying to make. But this approach increases the barrier to entry for giving feedback and makes implementation very challenging and likely to suffer from interop problems","msgtype":"m.text"},"ts":1381315446000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yeah, the current spec isn't anything for implementors","msgtype":"m.text"},"ts":1381315470000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"you'll get random interfaces added to implementations","msgtype":"m.text"},"ts":1381315497000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Which perhaps wouldn't matter if this was really an early stage and no one was trying to implement","msgtype":"m.text"},"ts":1381315503000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But it isn't and they are","msgtype":"m.text"},"ts":1381315508000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"*shrug*","msgtype":"m.text"},"ts":1381315558000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if anybody has some time to help me with idlharness.js tests for the Notifications spec, https://critic.hoppipolla.co.uk/r/349","msgtype":"m.text"},"ts":1381315816000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"got to admire the honesty in https://www.w3.org/Bugs/Public/show_bug.cgi?id=23260#c12","msgtype":"m.text"},"ts":1381317582000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"where does the svg spec say which elements implement SVGElement?","msgtype":"m.text"},"ts":1381319051000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: \"All of the SVG DOM interfaces that correspond directly to elements in the SVG language (such as the SVGPathElement interface for the ‘path’ element) derive from the SVGElement interface.\"","msgtype":"m.text"},"ts":1381319231000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so does that mean.. All of the elements?","msgtype":"m.text"},"ts":1381319246000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"all of the elements which have SVG DOM interfaces","msgtype":"m.text"},"ts":1381319271000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: no, that just says that SVGFooElement inherits from SVGElement","msgtype":"m.text"},"ts":1381319271000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"MikeSmith: it doesn't say anything about which elements implement SVGElement","msgtype":"m.text"},"ts":1381319283000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"other than <path>, i guess","msgtype":"m.text"},"ts":1381319295000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"and the elements that have an interface that inherits from SVGElement","msgtype":"m.text"},"ts":1381319312000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah. You want the ones that actually just use SVGElement? instead of some other interface that inherits from it?","msgtype":"m.text"},"ts":1381319373000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"i want to know what interface this element is supposed to use: <foobarbaz xmlns='http://www.w3.org/2000/svg'/>","msgtype":"m.text"},"ts":1381319413000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"all elements that are defined in svg say what interface they use, but i don't find any statement covering unknown elements in the svg namespace","msgtype":"m.text"},"ts":1381319470000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1381319498000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"html says \"The HTMLUnknownElement interface must be used for HTML elements that are not defined by this specification (or other applicable specifications).\"","msgtype":"m.text"},"ts":1381319628000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"blink and gecko appear to use SVGElement for unknown elements in the svg namespace","msgtype":"m.text"},"ts":1381319646000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i'll file a bug on svg","msgtype":"m.text"},"ts":1381319661000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: well I tried reading","msgtype":"m.text"},"ts":1381319795000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"enough to know that http://www.w3.org/TR/SVG/single-page.html#svgdom-ElementsInTheSVGDOM doesn't help answer","msgtype":"m.text"},"ts":1381319819000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"well if it doesn't say anything, then i guess it means that it must use the Element interface. but that doesn't match reality","msgtype":"m.text"},"ts":1381319949000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"krijn, down again?","msgtype":"m.text"},"ts":1381323404000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: seems so","msgtype":"m.text"},"ts":1381323536000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"speaking of which I was trying to read the logs for when zcorpan pinged me yesterday about the parser","msgtype":"m.text"},"ts":1381323572000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: I wasn't sure what you wanted me to try changing","msgtype":"m.text"},"ts":1381323593000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"re-read local logs","msgtype":"m.emote"},"ts":1381323602000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"http://logbot.glob.com.au/?c=freenode%23whatwg has logs","msgtype":"m.text"},"ts":1381323624000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Ms2ger: hm, no, but my hdd is full :D","msgtype":"m.text"},"ts":1381323639000,"senderName":"krijnh","senderId":"krijnh@irc"},
{"content":{"body":"MikeSmith: so i found bugs, you hadn't properly implemented my proposal because the v.nu parser's structure isn't a 1:1 mapping to the spec","msgtype":"m.text"},"ts":1381323695000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Ms2ger, MikeSmith: should be up again","msgtype":"m.text"},"ts":1381323766000,"senderName":"krijnh","senderId":"krijnh@irc"},
{"content":{"body":"zcorpan: right that's what makes it harder to just quickly hack in changes","msgtype":"m.text"},"ts":1381323774000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Ta","msgtype":"m.text"},"ts":1381323802000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"krijnh: thanks","msgtype":"m.text"},"ts":1381323804000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"(1) https://github.com/validator/htmlparser/blob/888fba3fe33c9b0fb0df76189b9d549eae176833/src/nu/validator/htmlparser/impl/TreeBuilder.java#L2534 should be commented out","msgtype":"m.text"},"ts":1381323814000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"commenting out now","msgtype":"m.emote"},"ts":1381323838000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"(2) https://github.com/validator/htmlparser/blob/888fba3fe33c9b0fb0df76189b9d549eae176833/src/nu/validator/htmlparser/impl/TreeBuilder.java#L2478 should be commented out","msgtype":"m.text"},"ts":1381323886000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"(3) https://github.com/validator/htmlparser/blob/888fba3fe33c9b0fb0df76189b9d549eae176833/src/nu/validator/htmlparser/impl/TreeBuilder.java#L2886 should be commented out","msgtype":"m.text"},"ts":1381323908000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"(4) https://github.com/validator/htmlparser/blob/888fba3fe33c9b0fb0df76189b9d549eae176833/src/nu/validator/htmlparser/impl/TreeBuilder.java#L4021 should be commented out","msgtype":"m.text"},"ts":1381323934000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"(5) https://github.com/validator/htmlparser/blob/888fba3fe33c9b0fb0df76189b9d549eae176833/src/nu/validator/htmlparser/impl/TreeBuilder.java#L2981 add pop() before this line","msgtype":"m.text"},"ts":1381323977000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"that's all i found by looking at the code","msgtype":"m.text"},"ts":1381324003000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"well, and the changes to after after foo could be reverted since the it wasn't broken","msgtype":"m.text"},"ts":1381324090000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: all the after after changes?","msgtype":"m.text"},"ts":1381324232000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: the stuff up to line 930 in https://github.com/validator/htmlparser/commit/888fba3fe33c9b0fb0df76189b9d549eae176833 i think","msgtype":"m.text"},"ts":1381324340000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1381324356000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: pushed to https://github.com/validator/htmlparser/commit/4924b651bc023ae080e99501eda473e5de510d3b but still fails at runtime due the same problem I mentioned","msgtype":"m.text"},"ts":1381324884000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I hope Henri will take an interest at some point","msgtype":"m.text"},"ts":1381324904000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"in the mean time I'll make time later to try to figure out if I can make it work","msgtype":"m.text"},"ts":1381324939000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: ok. what markup are you running to test?","msgtype":"m.text"},"ts":1381324946000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"the HTML spec","msgtype":"m.text"},"ts":1381324956000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"single-page?","msgtype":"m.text"},"ts":1381324978000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1381324982000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the validator tries to parse that at startup to extract the attribute information","msgtype":"m.text"},"ts":1381325010000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ok so that sees <body> IN_HEAD","msgtype":"m.text"},"ts":1381325078000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1381325171000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so goes through https://github.com/validator/htmlparser/blob/4924b651bc023ae080e99501eda473e5de510d3b/src/nu/validator/htmlparser/impl/TreeBuilder.java#L2531","msgtype":"m.text"},"ts":1381325270000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"and then https://github.com/validator/htmlparser/blob/4924b651bc023ae080e99501eda473e5de510d3b/src/nu/validator/htmlparser/impl/TreeBuilder.java#L2888","msgtype":"m.text"},"ts":1381325272000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"at least now it doesn't pop() twice","msgtype":"m.text"},"ts":1381325295000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1381325305000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but i don't know why it fails","msgtype":"m.text"},"ts":1381325318000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: relevant part of the stack trace is https://gist.github.com/sideshowbarker/6901293","msgtype":"m.text"},"ts":1381325449000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hmm, might have missed flush/pop here https://github.com/validator/htmlparser/blob/4924b651bc023ae080e99501eda473e5de510d3b/src/nu/validator/htmlparser/impl/TreeBuilder.java#L4004","msgtype":"m.text"},"ts":1381325478000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ok will add that","msgtype":"m.text"},"ts":1381325511000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but that's for end tags so won't change the case at hand","msgtype":"m.text"},"ts":1381325803000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"MikeSmith: hmm, the trace is weird, it goes through https://github.com/validator/htmlparser/blob/4924b651bc023ae080e99501eda473e5de510d3b/src/nu/validator/htmlparser/impl/TreeBuilder.java#L5067 but the html spec has attributes on the <body>","msgtype":"m.text"},"ts":1381326098000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hmm yeah hang on","msgtype":"m.text"},"ts":1381326220000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I've actually been running it with the W3C version of the spec","msgtype":"m.text"},"ts":1381326241000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"(build switch)","msgtype":"m.text"},"ts":1381326277000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"url?","msgtype":"m.text"},"ts":1381326285000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hey guys, is this the right place to talk about \"for\" attribute?","msgtype":"m.text"},"ts":1381326372000,"senderName":"niloy","senderId":"niloy@irc"},
{"content":{"body":"Potentially","msgtype":"m.text"},"ts":1381326389000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"well I am facing this problem, I am creating a label and checkbox from javascript, I want to tie them up with \"for\", but \"for\" requires string only","msgtype":"m.text"},"ts":1381326443000,"senderName":"niloy","senderId":"niloy@irc"},
{"content":{"body":"MikeSmith: (url to the w3c version of the spec, that is)","msgtype":"m.text"},"ts":1381326462000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: trace with non-W3C version says","msgtype":"m.text"},"ts":1381326487000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Caused by: java.lang.ArrayIndexOutOfBoundsException: -1 at nu.validator.htmlparser.impl.TreeBuilder.appendToCurrentNodeAndPushElement(TreeBuilder.java:5129) at nu.validator.htmlparser.impl.TreeBuilder.appendToCurrentNodeAndPushBodyElement(TreeBuilder.java:5064) at nu.validator.htmlparser.impl.TreeBuilder.appendToCurrentNodeAndPushBodyElement(TreeBuilder.java:5069)","msgtype":"m.text"},"ts":1381326488000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"if \"for\" accepted direct reference to HTMLNode, that would be cool","msgtype":"m.text"},"ts":1381326496000,"senderName":"niloy","senderId":"niloy@irc"},
{"content":{"body":"zcorpan: hang one I'll get the URL","msgtype":"m.text"},"ts":1381326500000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: https://raw.github.com/validator/validator/master/spec/w3c-html5.html","msgtype":"m.text"},"ts":1381326560000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and https://raw.github.com/validator/validator/master/spec/html5.html","msgtype":"m.text"},"ts":1381326595000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"niloy: so for is optimized for the declarative case, and the association doesn't work outside the document anyway, currently (per spec)","msgtype":"m.text"},"ts":1381326600000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"MikeSmith: thx. so w3c-html5.html sees <body> AFTER_HEAD","msgtype":"m.text"},"ts":1381326677000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan, so it is worth it to make \"for\" work with HTMLNode directly, so that I dont have to think about generating unique strings?","msgtype":"m.text"},"ts":1381326685000,"senderName":"niloy","senderId":"niloy@irc"},
{"content":{"body":"zcorpan: yeah seems so","msgtype":"m.text"},"ts":1381326706000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"niloy: can't you put the control inside the label?","msgtype":"m.text"},"ts":1381326718000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan, yeh I can do that, thx","msgtype":"m.text"},"ts":1381326769000,"senderName":"niloy","senderId":"niloy@irc"},
{"content":{"body":"MikeSmith: ok then the trace makes sense","msgtype":"m.text"},"ts":1381326853000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"MikeSmith: what's on the stack at that point?","msgtype":"m.text"},"ts":1381326903000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"the stack of open elements","msgtype":"m.text"},"ts":1381326911000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: dunno but I suppose I can hack in something to dump it out","msgtype":"m.text"},"ts":1381327373000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Am I right that requestAutocomplete is screaming for a promise return type?","msgtype":"m.text"},"ts":1381328985000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"does this look right?","msgtype":"m.text"},"ts":1381329045000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"<p>The <dfn title=dom-Window-devicePixelRatio><code>devicePixelRatio</code></dfn> attribute must return the result of dividing the size of a CSS pixel at 100%","msgtype":"m.text"},"ts":1381329050000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zoom by the size of a device pixel of the output device, in one dimension. If the device pixel is not square, then the smaller size must be used.","msgtype":"m.text"},"ts":1381329051000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i guess \"smaller size\" is ambiguous if the device pixel isn't rectangular, either","msgtype":"m.text"},"ts":1381329154000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ah I see that's already in the wiki spec","msgtype":"m.text"},"ts":1381329320000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"If the device pixel is not square, then the smaller of the vertical or horizontal size of the smallest bounding box of the device pixel must be used.","msgtype":"m.text"},"ts":1381329352000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: in that case of both the WHATWG and W3C copies of the spec at the point where the parser fails, the stack of open elements shows html head script","msgtype":"m.text"},"ts":1381329398000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hmm but why does it still have the script element open","msgtype":"m.text"},"ts":1381329413000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: anyway I'll be afk for a bit","msgtype":"m.text"},"ts":1381329437000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ah interesting","msgtype":"m.text"},"ts":1381329440000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1381329447000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"something wrong there","msgtype":"m.text"},"ts":1381329457000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"i wonder what cssom-view should do when there are several screens","msgtype":"m.text"},"ts":1381330153000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"or when switching screens","msgtype":"m.text"},"ts":1381330195000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hi there, folks!","msgtype":"m.text"},"ts":1381335048000,"senderName":"webchick","senderId":"webchick@irc"},
{"content":{"body":"I'm Angie from the Drupal project. We have incorporated a Dialog API that attempts to conform as closely as possible to WhatWG's dialog spec at http://www.whatwg.org/specs/web-apps/current-work/multipage/commands.html#the-dialog-element","msgtype":"m.text"},"ts":1381335077000,"senderName":"webchick","senderId":"webchick@irc"},
{"content":{"body":"I'm not fluent in RFC-ese so I had a question.","msgtype":"m.text"},"ts":1381335094000,"senderName":"webchick","senderId":"webchick@irc"},
{"content":{"body":"When a dialog has its close() method called, is it intended that the element stays in, or is removed from, the DOM?","msgtype":"m.text"},"ts":1381335136000,"senderName":"webchick","senderId":"webchick@irc"},
{"content":{"body":"Since it doesn't specify one way or the other explicitly, one of our developers is making the assumption it should stay there. But I think the *logical* assumption is that if it's no longer in your face, it's removed.","msgtype":"m.text"},"ts":1381335174000,"senderName":"webchick","senderId":"webchick@irc"},
{"content":{"body":"Hi there, I'm one of our developers :)","msgtype":"m.text"},"ts":1381335200000,"senderName":"nod_","senderId":"nod_@irc"},
{"content":{"body":"And I'm trying to figure out if the fact that both \"When a http://www.whatwg.org/specs/web-apps/current-work/multipage/commands.html#the-dialog-element element subject is to be closed, optionally with a return value result, the user agent must run the following steps:\" and \"If subject is in its http://www.whatwg.org/specs/web-apps/current-work/multipage/dom.html#document's http://www.whatwg.org/specs/web-apps/current-work/multipage/commands.htm","msgtype":"m.text"},"ts":1381335225000,"senderName":"webchick","senderId":"webchick@irc"},
{"content":{"body":"nod_: Oh hai. :)","msgtype":"m.text"},"ts":1381335229000,"senderName":"webchick","senderId":"webchick@irc"},
{"content":{"body":"And/or if there is a better forum through which to get this question answered, please let me know. :)","msgtype":"m.text"},"ts":1381335263000,"senderName":"webchick","senderId":"webchick@irc"},
{"content":{"body":"webchick: Since it doesn't way to remove it from the DOM, you don't remove it from the DOM","msgtype":"m.text"},"ts":1381335723000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Whatever is not explicitly allowed is forbidden","msgtype":"m.text"},"ts":1381335733000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Dang.","msgtype":"m.text"},"ts":1381335752000,"senderName":"webchick","senderId":"webchick@irc"},
{"content":{"body":"Basically the dialog exists in the DOM always, but the display is controlled by CSS","msgtype":"m.text"},"ts":1381335967000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(well, that skips quite a few details)","msgtype":"m.text"},"ts":1381336008000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: Can I ask why that is?","msgtype":"m.text"},"ts":1381336037000,"senderName":"webchick","senderId":"webchick@irc"},
{"content":{"body":"I mean, I would expect that if it were hide()/show()","msgtype":"m.text"},"ts":1381336044000,"senderName":"webchick","senderId":"webchick@irc"},
{"content":{"body":"but it's open()/close()","msgtype":"m.text"},"ts":1381336050000,"senderName":"webchick","senderId":"webchick@irc"},
{"content":{"body":"So Hixie_ was trying to work out what the right verbs should be the other day","msgtype":"m.text"},"ts":1381336075000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"This seems like an interesting data point :)","msgtype":"m.text"},"ts":1381336084000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Ha. :)","msgtype":"m.text"},"ts":1381336105000,"senderName":"webchick","senderId":"webchick@irc"},
{"content":{"body":"I'm always happy to walk into things totally clueless of the backstory and give opinions about what makes sense to me. ;)","msgtype":"m.text"},"ts":1381336124000,"senderName":"webchick","senderId":"webchick@irc"},
{"content":{"body":"(I'm not sure how it would work if it was removed from the DOM, really. Where would it go? IF you wanted to re-open it later would you have to keep a js ref to the dialog around?)","msgtype":"m.text"},"ts":1381336146000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Ok, well thanks for clearing that up, jgraham! Do you mind if I copy/paste this conversation into our issue tracker? else, I can just paraprhase it.","msgtype":"m.text"},"ts":1381336160000,"senderName":"webchick","senderId":"webchick@irc"},
{"content":{"body":"Sure, feel free to do whatever you like :)","msgtype":"m.text"},"ts":1381336177000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: Well, presumably it would remove it from the stack and if you wanted to re-open it, you'd start again from the \"this doesn't exist in the stack yet, so make it new\"","msgtype":"m.text"},"ts":1381336199000,"senderName":"webchick","senderId":"webchick@irc"},
{"content":{"body":"SimonSapin: ooh, interesting","msgtype":"m.text"},"ts":1381336369000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yeah, that seems to be one of the lesser known of the \"new\" (few years old) features","msgtype":"m.text"},"ts":1381336464000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Anyone know anything about pywebsockets?","msgtype":"m.text"},"ts":1381336480000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: I had a brief look at it before deciding to use a node.js package instead","msgtype":"m.text"},"ts":1381336513000,"senderName":"barnabywalters","senderId":"barnabywalters@irc"},
{"content":{"body":"This is more of an internal-API question :)","msgtype":"m.text"},"ts":1381336563000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: can’t help then, sorry :)","msgtype":"m.text"},"ts":1381336587000,"senderName":"barnabywalters","senderId":"barnabywalters@irc"},
{"content":{"body":"barnabywalters: Thanks anyway :)","msgtype":"m.text"},"ts":1381336786000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"has enough of a hack to fix his problem now","msgtype":"m.emote"},"ts":1381336796000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"bholley: should be online soon","msgtype":"m.text"},"ts":1381337138000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"jgraham: what about pywebsocket?","msgtype":"m.text"},"ts":1381337483000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: I was going to ask about the API differences between standalone mode and mod_python mode","msgtype":"m.text"},"ts":1381337513000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Seems that your tests depended on request.args which is only there when running under apache","msgtype":"m.text"},"ts":1381337543000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"In the end I just used urlparse on request.uri to get the query string out","msgtype":"m.text"},"ts":1381337572000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Seems kind of annoying to have two different APIs depending on the context you are running in","msgtype":"m.text"},"ts":1381337602000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yeah i recall problems with the query string. we used standalone on t","msgtype":"m.text"},"ts":1381337621000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"but it was hacky either way","msgtype":"m.text"},"ts":1381337667000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"https://code.google.com/p/pywebsocket/issues/detail?id=68","msgtype":"m.text"},"ts":1381337758000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"jgraham: mod_python has been abandoned for years","msgtype":"m.text"},"ts":1381337844000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"and pre-dates WSGI","msgtype":"m.text"},"ts":1381337854000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: I know","msgtype":"m.text"},"ts":1381337902000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"That isn't very relevant though :)","msgtype":"m.text"},"ts":1381337913000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"sorry then, carry on","msgtype":"m.text"},"ts":1381337942000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"For whatever reason pywebsocket uses mod_python to run under apache and BaseHTTPRequestHandler to run standalone","msgtype":"m.text"},"ts":1381337957000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"and then exposes the native \"request\" object, lightly modified, in each case","msgtype":"m.text"},"ts":1381337975000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"And they don't have the same API","msgtype":"m.text"},"ts":1381337983000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Which is a problem because that's the API you code against","msgtype":"m.text"},"ts":1381337998000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Thanks for the help, jgraham! I'll leave you folks to it. :)","msgtype":"m.text"},"ts":1381338018000,"senderName":"webchick","senderId":"webchick@irc"},
{"content":{"body":"Hixie_: background-position: right 1em;","msgtype":"m.text"},"ts":1381339529000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ah, never mind, SimonSapin already answered.","msgtype":"m.text"},"ts":1381339696000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Random off-topic question: is there any central discussion anywhere about the long-term goal to replace SpiderMonkey in Servo?","msgtype":"m.text"},"ts":1381340930000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"There is no long term goal to replace SpiderMonkey in Servo","msgtype":"m.text"},"ts":1381341337000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"MikeSmith: since i'm a pedant, i'll just point out (re your comment in bug 23145) that in XML the string <html/> is not necessarily a start tag... it can be the text of a comment or CDATA block, too. :-)","msgtype":"m.text"},"ts":1381342996000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Or an attribute?","msgtype":"m.text"},"ts":1381343276000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"hasn't seen the context","msgtype":"m.emote"},"ts":1381343284000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"no, \"<\" isn't valid in XML attributes","msgtype":"m.text"},"ts":1381343317000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Oh, XML","msgtype":"m.text"},"ts":1381343462000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I missed that critical point :)","msgtype":"m.text"},"ts":1381343476000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"hehe","msgtype":"m.text"},"ts":1381343480000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yeah in HTML there's a ton of things it could be","msgtype":"m.text"},"ts":1381343488000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"e.g. contents of <script> or <textarea>","msgtype":"m.text"},"ts":1381343492000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"attribute value","msgtype":"m.text"},"ts":1381343496000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"something in the doctype...","msgtype":"m.text"},"ts":1381343511000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"etc","msgtype":"m.text"},"ts":1381343512000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Ah, Hixie_","msgtype":"m.text"},"ts":1381343717000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"A question about the xml serialization algorithm","msgtype":"m.text"},"ts":1381343741000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"yes sir","msgtype":"m.text"},"ts":1381343746000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"It throws for input that can't be serialized as xml","msgtype":"m.text"},"ts":1381343780000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"People want to stop doing that","msgtype":"m.text"},"ts":1381343785000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Any objection? :)","msgtype":"m.text"},"ts":1381343789000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"what do they want to do instead? silent data loss?","msgtype":"m.text"},"ts":1381343833000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Serializing as something that's not actually xml","msgtype":"m.text"},"ts":1381343884000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Like browsers do","msgtype":"m.text"},"ts":1381343887000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"That seems bad in general, if the next thing in your pipeline is expecting XML.","msgtype":"m.text"},"ts":1381343914000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Silent data loss seems better than malforming XML.","msgtype":"m.text"},"ts":1381343922000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Want to try changing that in blink?","msgtype":"m.text"},"ts":1381343950000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Me? No.","msgtype":"m.text"},"ts":1381343965000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"wait, what? you want the xml serialiser to output non-xml-conforming content?","msgtype":"m.text"},"ts":1381343969000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"wouldn't that be... utterly pointless?","msgtype":"m.text"},"ts":1381343979000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I want the spec to match browsers","msgtype":"m.text"},"ts":1381343980000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"But reporting a bug on Blink and pinging abarth with it would probably help.","msgtype":"m.text"},"ts":1381343988000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ok but if the browsers are violating the xml spec, that means changing both HTML and XML","msgtype":"m.text"},"ts":1381343991000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"They're not violating the xml spec","msgtype":"m.text"},"ts":1381344019000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"They're just returning a string that isn't xml","msgtype":"m.text"},"ts":1381344029000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"...","msgtype":"m.text"},"ts":1381344033000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Only because the XML spec says \"here there be dragons\".","msgtype":"m.text"},"ts":1381344038000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Calling that \"not violating\" is pedantry.","msgtype":"m.text"},"ts":1381344048000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"*shrug*","msgtype":"m.text"},"ts":1381344062000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"having an XML serialiser not output XML, or output non-conforming XML that literally cannot be parsed by an XML processor, seems Very Bad for such an API","msgtype":"m.text"},"ts":1381344093000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Sure","msgtype":"m.text"},"ts":1381344103000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"it would, indeed, call into question the very existential purpose of this API","msgtype":"m.text"},"ts":1381344105000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Sure","msgtype":"m.text"},"ts":1381344114000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"i don't like giving APIs existential crises","msgtype":"m.text"},"ts":1381344120000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Sure, and I don't like my spec being dry science fiction :)","msgtype":"m.text"},"ts":1381344134000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"i recommend fixing the browsers.","msgtype":"m.text"},"ts":1381344138000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"The browsers don't want to fix","msgtype":"m.text"},"ts":1381344147000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"i don't see how this could be a compat issue, since the output is pointless.","msgtype":"m.text"},"ts":1381344150000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"bug #s?","msgtype":"m.text"},"ts":1381344155000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"https://www.w3.org/Bugs/Public/show_bug.cgi?id=23460","msgtype":"m.text"},"ts":1381344176000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"where is the \"don't want to fix\"?","msgtype":"m.text"},"ts":1381344262000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"smaug____, want to say that? ^","msgtype":"m.text"},"ts":1381344305000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"are we sure it's not you who wants this changed? :-P","msgtype":"m.text"},"ts":1381344322000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"oh, note, there is that question mark. All the browsers do something, and spec says something else","msgtype":"m.text"},"ts":1381344478000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"so following the reality kind of makes sense :)","msgtype":"m.text"},"ts":1381344507000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"the reality here is bogus, unless we can't change it we really should change it.","msgtype":"m.text"},"ts":1381344540000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"(and the reality let's browsers to do some heavy optimizations, like https://bugzilla.mozilla.org/show_bug.cgi?id=923913 )","msgtype":"m.text"},"ts":1381344545000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I'm not ready to try to change it","msgtype":"m.text"},"ts":1381344565000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: That's just a matter of changing from \"throws on invalid\" to \"silently loses data on invalid\".","msgtype":"m.text"},"ts":1381344591000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"if some other browser vendor wants to, and there are no problems, I think Gecko would follow","msgtype":"m.text"},"ts":1381344594000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"i don't mind us returning the empty string or something instead of throwing an exception, but returning invalid data is bogus.","msgtype":"m.text"},"ts":1381344599000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i mean, specifically here, if we return invalid data, it is unusable.","msgtype":"m.text"},"ts":1381344627000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"ah, empty string would be find too","msgtype":"m.text"},"ts":1381344634000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"it's not like in HTML mode, where the parser will muddle through.","msgtype":"m.text"},"ts":1381344638000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"s/find/fine/","msgtype":"m.text"},"ts":1381344646000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I definitely could accept empty string easier","msgtype":"m.text"},"ts":1381344667000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Ms2ger: empty string?","msgtype":"m.text"},"ts":1381344692000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Could live with that if people want to implement","msgtype":"m.text"},"ts":1381344713000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Chrome requires the new operator when constructing XMLHttpRequest(), Firefox & IE allow it to be called as a function (e.g. xhr = XMLHttpRequest()). Anyone know the story? (context: pinged about how TextDecoder should behave)","msgtype":"m.text"},"ts":1381344932000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"annevk wants to break the no-new form","msgtype":"m.text"},"ts":1381344957000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I think that's silly","msgtype":"m.text"},"ts":1381344964000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"jgraham: so long story short, request.unparsed_uri should be consistent in both modes.","msgtype":"m.text"},"ts":1381345113000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hixie_: Ms2ger: isn't empty string ambiguous for Element.innerHTML? surely that's supposed to mean that the element is empty?","msgtype":"m.text"},"ts":1381345464000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"null?","msgtype":"m.text"},"ts":1381345477000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"null might be even better, yeah","msgtype":"m.text"},"ts":1381345497000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"TabAtkins: i figured out why you were able to come up with a sanish solution for 'display' in CSS3 Display! You just ignore the two hard bits ('run-in' and 'compact')! :-P","msgtype":"m.text"},"ts":1381345528000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: Nah, both of those are easy to put *into* the display-* framework.  Their insanity is localized to their actual behavior, not their interaction with the other longhands.","msgtype":"m.text"},"ts":1381345565000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i'll believe that when i see it :-P","msgtype":"m.text"},"ts":1381345577000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"what does compact do?","msgtype":"m.text"},"ts":1381345578000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"But also, fantasai came up with a sane definition of run-in that I'm planning to put in.  'compact' is terrible and nobody will mention it.","msgtype":"m.text"},"ts":1381345585000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"zcorpan: Go look at CSS2 and see if you can figure it out.  If you can, write a spec plz.","msgtype":"m.text"},"ts":1381345597000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"does anyone implement compact?","msgtype":"m.text"},"ts":1381345610000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"'compact' might be dead now, yeah. back when i tried doing this, i was trying to include 'compact' which is what made it so hard to do.","msgtype":"m.text"},"ts":1381345613000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Not really, no.","msgtype":"m.text"},"ts":1381345617000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"('compact' would be really useful in a lot of cases i run into in <dl>-like scenarios in UIs and documents)","msgtype":"m.text"},"ts":1381345652000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"It's basically magic abspos, fitting into the margin of the following block if possible.","msgtype":"m.text"},"ts":1381345764000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If not possible, it's a normal block box.","msgtype":"m.text"},"ts":1381345783000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"foolip: https://www.w3.org/Bugs/Public/show_bug.cgi?id=23469","msgtype":"m.text"},"ts":1381346101000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"a surprisingly large part of my life over the past decade and a half has been taken up just reading bugzilla e-mails.","msgtype":"m.text"},"ts":1381346335000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i don't know what i feel about that.","msgtype":"m.text"},"ts":1381346338000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Surprisingly?","msgtype":"m.text"},"ts":1381346476000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"given that i've moved between employers and changed from QA to spec writing and so forth, yes.","msgtype":"m.text"},"ts":1381346980000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"MikeSmith: what does \"untested\" do?","msgtype":"m.text"},"ts":1381347850000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"MikeSmith: re https://www.w3.org/Bugs/Public/show_bug.cgi?id=14600 - should we leave bugs in Unwelcome open, so they come up in searches more?","msgtype":"m.text"},"ts":1381349003000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_, TabAtkins: There's a CL under review to fix some of those cases","msgtype":"m.text"},"ts":1381349545000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"I just need to some whiskey before studying it","msgtype":"m.text"},"ts":1381349554000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"abarth: Come on down to the mtv office and we'll hook you up.","msgtype":"m.text"},"ts":1381349573000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"some of which cases?","msgtype":"m.text"},"ts":1381349734000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"outputting malformed xml","msgtype":"m.text"},"ts":1381349781000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":" < inside <script>","msgtype":"m.text"},"ts":1381349784000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"i can find the bug","msgtype":"m.text"},"ts":1381349790000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"https://codereview.chromium.org/26193002/","msgtype":"m.text"},"ts":1381349808000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"its from someone named pwnall","msgtype":"m.text"},"ts":1381349823000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"which makes me think I should read it carefully :)","msgtype":"m.text"},"ts":1381349829000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"ah, cool","msgtype":"m.text"},"ts":1381350372000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"well, consider returning null instead of firing an exception :-)","msgtype":"m.text"},"ts":1381350387000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"hopefully someone who cares about this filed a bug... :-)","msgtype":"m.text"},"ts":1381350394000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"bbiab, lunch","msgtype":"m.text"},"ts":1381350397000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"smaug____: really? the key is the weak part? woah. what's the point of it then?","msgtype":"m.text"},"ts":1381352707000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"smaug____: like, how do you use it?","msgtype":"m.text"},"ts":1381352714000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"that is the whole point","msgtype":"m.text"},"ts":1381352718000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"or why would you use it?","msgtype":"m.text"},"ts":1381352723000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"you can add weak object->value references","msgtype":"m.text"},"ts":1381352730000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"so it's basically only useful as a way to annotate objects?","msgtype":"m.text"},"ts":1381352761000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap#Why_WeakMap.3F","msgtype":"m.text"},"ts":1381352836000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"sure, once you said it was keys all that was obvious","msgtype":"m.text"},"ts":1381352892000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"it doesn't answer the question of why you would use it though...","msgtype":"m.text"},"ts":1381352899000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"why not just hang your annotation off the object directly?","msgtype":"m.text"},"ts":1381352910000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"like, if it's an HTMLElement, you could just use ._mydata or whatever","msgtype":"m.text"},"ts":1381352925000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"set a custom property on the object","msgtype":"m.text"},"ts":1381352932000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"wouldn't that do exactly what WeakMap does?","msgtype":"m.text"},"ts":1381352941000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"so you can do thing like does something belong to a set","msgtype":"m.text"},"ts":1381353026000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"though, you could indeed just add foo._myState","msgtype":"m.text"},"ts":1381353040000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Hixie: if you can hang a property off something, then yes it's equivalent.","msgtype":"m.text"},"ts":1381353592000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"In the cases where you can't - the object is frozen, or the thing you're setting on the object is secret, or two instances need to set properties, etc then it's necessary.","msgtype":"m.text"},"ts":1381353656000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"It could be implemented in the VM by setting hidden properties.","msgtype":"m.text"},"ts":1381353677000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"what's a frozen object? another new ES6 thing?","msgtype":"m.text"},"ts":1381354057000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i don't understand what you mean by \"secret\". it's just code. and two instances can just use two properties.","msgtype":"m.text"},"ts":1381354076000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie: Object.freeze in ES5, e.g. var o = {}; Object.freeze(o); o.p = 1; alert(o.p); ==> undefined","msgtype":"m.text"},"ts":1381354671000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"what's the use case?","msgtype":"m.text"},"ts":1381354689000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Most of this (including WeakXXX) came out of the Caja/SES work","msgtype":"m.text"},"ts":1381354738000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"smaug____: the e-mail i posted when i added this was http://lists.w3.org/Archives/Public/public-whatwg-archive/2012Nov/0013.html","msgtype":"m.text"},"ts":1381354745000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"ok, thanks","msgtype":"m.text"},"ts":1381354777000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I was just looking for PortCollection in the messages","msgtype":"m.text"},"ts":1381354786000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Short version: you're trying to implement a sandbox","msgtype":"m.text"},"ts":1381354797000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"(for the record, i really don't care what the solution is here. i just think we should have a solution that doesn't involve essentially requiring a memory leak.)","msgtype":"m.text"},"ts":1381354801000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"jsbell: that sounds like a wackamole exercise in frustration...","msgtype":"m.text"},"ts":1381354838000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"we just can't expose gc behavior","msgtype":"m.text"},"ts":1381355221000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"once we do that explicitly, it will creep into other APIs too","msgtype":"m.text"},"ts":1381355265000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Object.freeze seems pretty horrible if it doesn't throw","msgtype":"m.text"},"ts":1381355800000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"WeakMap => truly private state","msgtype":"m.text"},"ts":1381357657000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Object.freeze throws in strict mode (which everyone should be using)","msgtype":"m.text"},"ts":1381357665000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Without WeakMap it is impossible to have high-integrity objects in JS, like e.g. platform objects","msgtype":"m.text"},"ts":1381357686000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"what's the use case for high-integrity objects in JS?","msgtype":"m.text"},"ts":1381357874000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i mean it sounds good and all, but it's not clear what the point is","msgtype":"m.text"},"ts":1381357891000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"to me at least","msgtype":"m.text"},"ts":1381357898000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Explaining the platform, and introducing new things similar to the current platform.","msgtype":"m.text"},"ts":1381357910000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"you can explain the platform without it, and you can introduce new things similar to the platform with it it too","msgtype":"m.text"},"ts":1381357939000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"we've been doing both for decades","msgtype":"m.text"},"ts":1381357947000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Different definition of \"explaining\", and no you can't, at least with sufficient fidelity.","msgtype":"m.text"},"ts":1381358008000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"saying \"you must use C++ if you want private state\" is kind of O_o","msgtype":"m.text"},"ts":1381358050000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"TabAtkins: ok, let me put it another way then: i disagree that those use cases are valuable :-)","msgtype":"m.text"},"ts":1381358162000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"TabAtkins: what's an end-user use case?","msgtype":"m.text"},"ts":1381358168000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"We know you do. You've said that over and over again in the past.","msgtype":"m.text"},"ts":1381358176000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And we've just ignored you and worked around it. ^_^","msgtype":"m.text"},"ts":1381358185000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah... not helpful","msgtype":"m.text"},"ts":1381358217000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"why not just explain why it's useful?","msgtype":"m.text"},"ts":1381358234000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Sorry, but you've repeatedly stated your disdain for \"make APIs that look and act the same as native ones\" as a use-case.","msgtype":"m.text"},"ts":1381358239000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"that's because it's not a use case...","msgtype":"m.text"},"ts":1381358247000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"And that's why it's not worth explaining to you, because your suggestion of \"just make the API not look like the platform\" isn't useful.","msgtype":"m.text"},"ts":1381358272000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"it is often brought up as a use case as if it is obvious on its face why it's valid, but it's not obvious at all, and no attempt seems to have been made to explain it","msgtype":"m.text"},"ts":1381358273000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"it's like something you have on faith or something","msgtype":"m.text"},"ts":1381358289000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"faith-based API design considered harmful :-P","msgtype":"m.text"},"ts":1381358295000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I'm sorry you don't understand why it's useful for users of a library to have the library act like the rest of the platform.","msgtype":"m.text"},"ts":1381358325000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"that isn't helpful or constructive","msgtype":"m.text"},"ts":1381358354000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"seriously, if you can't articulate why something is helpful, maybe it's not. that's all i'm saying.","msgtype":"m.text"},"ts":1381358368000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i think it's been articulated, but not to your satisfaction, just to many other peoples'...","msgtype":"m.text"},"ts":1381358386000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"where?","msgtype":"m.text"},"ts":1381358392000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I did articulate it.  I, and others, have done so many times.  You just don't accept it.  Shrug.","msgtype":"m.text"},"ts":1381358396000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"it just seems crazy to me that ES is getting a ton of APIs that i see as essentially pointless, and the only argument in favour is \"we said it's important, but you won't believe us\"","msgtype":"m.text"},"ts":1381358483000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"\"Because a consistent platform is good\" is the basic reason for lots of things, including stuff you've found very valuable, like specifying the parser.","msgtype":"m.text"},"ts":1381358486000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"the parser spec is useful to get interop and that's good to avoid concrete security bugs.","msgtype":"m.text"},"ts":1381358515000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"consistency is not, and has never been, a compelling use case. there's tons of stuff we haven't added to HTML because consistency was the only argument.","msgtype":"m.text"},"ts":1381358534000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"It's also helpful for authors, because it means a lower cognitive overhead.","msgtype":"m.text"},"ts":1381358541000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"more APIs doesn't mean a lower cognitive overhead.","msgtype":"m.text"},"ts":1381358554000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i mean, it really doesn't. it's easier to understand classical mechanics (which isn't internally consistent) than quantum mechanics (which is), as a simple example of that.","msgtype":"m.text"},"ts":1381358622000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Le sigh.  No, but having libraries do things in a way similar to the platform *does* mean a lower cognitive overhead, as opposed to library users having to learn to do things in 2+ different ways because some things are \"native\" and some are \"JS\".","msgtype":"m.text"},"ts":1381358658000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"but again, authors don't have to do that. it's quite possible to write libraries that work close enough to the platform that authors have no troubles, without any of this stuff.","msgtype":"m.text"},"ts":1381358706000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"And some patterns, like private state, which are extremely useful, currently require either giving up on real privacy (using naming conventions, for example), or costing a bunch of memory (using closures for private state on objects). WeakMaps address the problem easily and properly.","msgtype":"m.text"},"ts":1381358713000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"unless you have a concrete counter-example?","msgtype":"m.text"},"ts":1381358713000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Not off the top of my head, because I just stumbled into this argument.","msgtype":"m.text"},"ts":1381358726000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And I'm trying to code some Python right now. ^_^","msgtype":"m.text"},"ts":1381358737000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"poor you :)","msgtype":"m.text"},"ts":1381358759000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"it's not \"real\" privacy. all this code is running in the same security context.","msgtype":"m.text"},"ts":1381358761000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"user privacy isn't in the slightest bit affected.","msgtype":"m.text"},"ts":1381358775000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"\"Privacy\" clearly has different definitions, and I'm not using that one.","msgtype":"m.text"},"ts":1381358803000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"what definition are you using?","msgtype":"m.text"},"ts":1381358849000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i'm just baffled by this. It seems like a clear case of user>author>spec>theory being turned on its head.","msgtype":"m.text"},"ts":1381358899000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"...the one that means private state on an object?","msgtype":"m.text"},"ts":1381358901000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"what's the use case for that on the web?","msgtype":"m.text"},"ts":1381358927000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"The same as its use-case in any other programming language, ever.","msgtype":"m.text"},"ts":1381358940000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"the idea of putting state on an object in a different object seems pretty seriously nasty, at least from a code style standpoint (granted that it may be the same under the hood)","msgtype":"m.text"},"ts":1381358943000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I refuse to explain the concept of private state to you.","msgtype":"m.text"},"ts":1381358953000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"zewt: It's a little funky at first, but not bad once you've seen it once or twice.","msgtype":"m.text"},"ts":1381358972000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: ok, but then don't complain that it's \"not worth explaining to you\" when you won't explain it","msgtype":"m.text"},"ts":1381359007000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"just admit you don't want to and move on","msgtype":"m.text"},"ts":1381359013000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"continues to be baffled","msgtype":"m.emote"},"ts":1381359021000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"It's... not worth explaining a basic computer science concept to you. You can use Wikipedia for that.","msgtype":"m.text"},"ts":1381359026000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(note that i can't think of any other language that has a way to add private state to an object the way that WeakMap does.)","msgtype":"m.text"},"ts":1381359063000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"are we talking about local private state?","msgtype":"m.text"},"ts":1381359079000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"because that doesn't seem to be what WeakMap gives you","msgtype":"m.text"},"ts":1381359085000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"or freeze","msgtype":"m.text"},"ts":1381359088000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i think WeakMap does give that, if we mean the same thing by \"local private state\"","msgtype":"m.text"},"ts":1381359117000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i mean, i am an object, and i have state i don't want public.","msgtype":"m.text"},"ts":1381359132000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Yes, the actual code you write to assign private state via WeakMap is slightly different.  Rather than obj[key] = val, you write map[obj] = val.  That's not a material difference.","msgtype":"m.text"},"ts":1381359141000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"WeakMap seems to be a way to secretely annotate other objects.","msgtype":"m.text"},"ts":1381359143000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"hixie: right","msgtype":"m.text"},"ts":1381359171000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"if you want private state in the object itself you still need to stash it in a closure","msgtype":"m.text"},"ts":1381359188000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"that's... not in the object itself, that's in an external data structure called \"scope\"","msgtype":"m.text"},"ts":1381359203000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"i'm all for JS having classes with private blocks and all","msgtype":"m.text"},"ts":1381359217000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"but that seems completely orthogonal to this","msgtype":"m.text"},"ts":1381359223000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Domenic_: no difference as far as API structure is concerned","msgtype":"m.text"},"ts":1381359228000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"this being WeakMap and the frozen object thing","msgtype":"m.text"},"ts":1381359234000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"zewt: big difference... but maybe i'm not understanding...?","msgtype":"m.text"},"ts":1381359252000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"fwiw I don't have a strong opinion on whether it's worth it or not, but I agree with hixie that this is not analogous to private state inside an object, this is external to the object","msgtype":"m.text"},"ts":1381359293000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"right, it is strictly more powerful than other languages' private state abstraction, which is tied to e.g. classical models","msgtype":"m.text"},"ts":1381359326000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"but it is in the end a private state abstraction","msgtype":"m.text"},"ts":1381359335000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"my opinion is not \"strong\", it just the default opinion of \"there's no use case -> no need to have it\"","msgtype":"m.text"},"ts":1381359338000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"it doesn't seem to support the private data model of other languages at all, so I'm not sure that it's more powerful","msgtype":"m.text"},"ts":1381359362000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"it doesn't seem more powerful at all... it seems entirely orthogonal","msgtype":"m.text"},"ts":1381359364000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"es7 will probably have syntax so that e.g. obj@key = val <-> map[obj].key = val","msgtype":"m.text"},"ts":1381359372000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"zewt: it definitely does support that model, let me dig up some example code...","msgtype":"m.text"},"ts":1381359392000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"A better term for what WeakMaps give you is \"uncollidable\" state.","msgtype":"m.text"},"ts":1381359398000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"zewt: here you go https://gist.github.com/domenic/6736258","msgtype":"m.text"},"ts":1381359406000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Which you can use to implement cheaper private state than just using closures.","msgtype":"m.text"},"ts":1381359411000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: to do that you'd need to stash your WeakMap in some place that itself can't be accessed--which means you're back to closures","msgtype":"m.text"},"ts":1381359419000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"sure, of course, or modules.","msgtype":"m.text"},"ts":1381359445000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"so it's a class that essentially exists so you don't have to use closures, which you have to put in a closure :)","msgtype":"m.text"},"ts":1381359467000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(yeah, I know there's a difference in performance, depending on how you do it)","msgtype":"m.text"},"ts":1381359474000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: Yup, closing over just a WeakMap around the constructor function is better than having to close over every bit of state.","msgtype":"m.text"},"ts":1381359475000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"the big difference is you can control who has access. they don't have to share a scope. so e.g. prototype methods can access the private state.","msgtype":"m.text"},"ts":1381359487000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"And the even smaller WeakSet object is *solely* for branding - no chance of collision, secret if the set is secret, and doesn't accidentally leak.","msgtype":"m.text"},"ts":1381359595000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"man, i didn't realize css stack wasn't supported in background-image in blink","msgtype":"m.text"},"ts":1381359767000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"er, svg stack","msgtype":"m.text"},"ts":1381359777000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zewt: If you're familiar with Crockford's method of doing instance-private state, it requires defining fresh copies of the prototype methods directly onto each instance, so they'll be defined in the correct context. That's a big memory hit.","msgtype":"m.text"},"ts":1381359787000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"seems clumsy, if the main use case is basically in-object private state, compared to traditional private member mechanisms","msgtype":"m.text"},"ts":1381359810000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(not to claim I know how any of those could be applied to JS in a web-compatible way)","msgtype":"m.text"},"ts":1381359837000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"With WeakMap, you can just define things as normal, with a closure wrapping the class definition to contain the weakmap definitions.  Then each prototype function can just use the weakmaps to attach and access private state on instances.","msgtype":"m.text"},"ts":1381359838000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yeah, exposing privacy in the same way as other type systems is really difficult, because JS's type system is so light.","msgtype":"m.text"},"ts":1381359865000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i think it fits pretty well with JS, given JS is all about object literals and prototypes and not classes. but yes, slightly clumsy for the classical case, just like classes in JS generally are.","msgtype":"m.text"},"ts":1381359872000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"but, just like ES6 gives us class sugar to make it less clumsy, ES7 will probably give private state sugar","msgtype":"m.text"},"ts":1381359902000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"not sure that \"it's clumsy, but that's normal for JS and we'll pave over it later\" is a very good sales point :)","msgtype":"m.text"},"ts":1381360094000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Heh. The issue is that the non-clumsy way doesn't decompose to real JS.","msgtype":"m.text"},"ts":1381360160000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It requires more structure than actually exists.","msgtype":"m.text"},"ts":1381360167000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So you have to start with the low-level one and add sugar for it after.","msgtype":"m.text"},"ts":1381360177000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"python's __name mechanism could probably work conceptually, but wouldn't be web-compatible (also it's painfully ugly)","msgtype":"m.text"},"ts":1381360190000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(makes me feel like I'm reading a C++ STL header, and that's ... bad)","msgtype":"m.text"},"ts":1381360217000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Right, nobody wants that.","msgtype":"m.text"},"ts":1381360234000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Had a near-miss with people trying to make Symbols work that way.)","msgtype":"m.text"},"ts":1381360251000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: i think it's worth noting that the use case that the discussion ended up describing has nothing to do with simulating host objects","msgtype":"m.text"},"ts":1381362304000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"TabAtkins: (and if the use case is instance-private data, i really don't think it's a particularly good mechanism compared to other languages')","msgtype":"m.text"},"ts":1381362330000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"No, it most certainly did.  It was all about private state, which host objects can have.","msgtype":"m.text"},"ts":1381362333000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"it lets you get private state (in a weird way) with a slightly better memory story than you could do with closures. it doesn't give you private state that you couldn't get before, and it doesn't get you anything like the memory story that C++ native code has.","msgtype":"m.text"},"ts":1381362466000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i don't understand how it can be described as something needed to simulate host objects.","msgtype":"m.text"},"ts":1381362477000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"or \"explain the platform\"","msgtype":"m.text"},"ts":1381362482000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"you can \"explain the platform\" with closures too","msgtype":"m.text"},"ts":1381362489000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"\"slightly better\" is a misnomer. It goes from \"too much memory wasted to consider for production systems\" to \"perfectly fine\".","msgtype":"m.text"},"ts":1381362500000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"both of those are exaggerations.","msgtype":"m.text"},"ts":1381362518000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"but \"lower memory usage\" is a fine use case in and of its self","msgtype":"m.text"},"ts":1381362539000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Per-instance methods are completely unacceptable when you'll be creating thousands of instances.","msgtype":"m.text"},"ts":1381362542000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"why would you do per-instance methods?","msgtype":"m.text"},"ts":1381362564000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Because that's what you need to do if you want the methods to be able to *access* the per-instance private state.","msgtype":"m.text"},"ts":1381362609000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You can't just attach the methods to the prototype like normal, because then they're not in the instance's closure that captured the private variables.","msgtype":"m.text"},"ts":1381362630000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"isn't that going to be solved by a real class system?","msgtype":"m.text"},"ts":1381362690000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"No, JS is not introduce \"a real class system\".  Producing two completely different ways of having a class would be ridiculous and bad.  JS is producing a class *syntax*, which desugars into the existing prototype-based stuff.","msgtype":"m.text"},"ts":1381362728000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Or to put it another way, JS already has a real class system. It's different from some other class systems, but has its own benefits.  It's not going to introduce a second one.)","msgtype":"m.text"},"ts":1381362789000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ugh","msgtype":"m.text"},"ts":1381362859000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"see, this is what drives me crazy. we're introducing crazy things like WeakMap and freezing objects and so on, and not fixing the real pain points with JS, with are amongst others that authors just hate prototypes.","msgtype":"m.text"},"ts":1381362893000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Coming from the dude who's maintaining one of the largest piles of legacy hacks in existence. ^_^","msgtype":"m.text"},"ts":1381362920000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"and you can't \"explain the platform\" when you're desugaring into an entirely different model than the platform is built on, either","msgtype":"m.text"},"ts":1381362943000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"who hates prototypes?","msgtype":"m.text"},"ts":1381362944000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"And no, prototypes work just fine. Most people don't give a shit about the specifics of the class system, because almost no one does anything complicated with classes, ever.","msgtype":"m.text"},"ts":1381362948000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic_: who doesn't","msgtype":"m.text"},"ts":1381362952000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"What they hate is the syntax, for good reason, and we're fixing.","msgtype":"m.text"},"ts":1381362954000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie_: web developers?","msgtype":"m.text"},"ts":1381362959000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"yeah, web developers","msgtype":"m.text"},"ts":1381362964000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"And if you do care about the class system, prototype-based systems have some nice qualities.","msgtype":"m.text"},"ts":1381362972000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"vm writers hate prototypes (so they go off and build dart)","msgtype":"m.text"},"ts":1381362974000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"but web devs like them","msgtype":"m.text"},"ts":1381362979000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"it's by far the #1 issue i hear about when it comes to web devs complaining to me about JS-related topics","msgtype":"m.text"},"ts":1381362984000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"O_o","msgtype":"m.text"},"ts":1381362991000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"(as a web developer, i've never found a single thing to like about JS's class model compared to, say, Python)","msgtype":"m.text"},"ts":1381363035000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"^ that's what it looks like when phrased politely","msgtype":"m.text"},"ts":1381363051000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"usually i don't hear it phrased so politely","msgtype":"m.text"},"ts":1381363059000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Every prototype-related complaint I've heard has been about the way you do classes in the current syntax.","msgtype":"m.text"},"ts":1381363061000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I've never heard anyone complain about the actual mechanics, except for people who geek over class systems and are just discussing relative merits.","msgtype":"m.text"},"ts":1381363081000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"class Foo extends Bar { ... }\" is in ES6, and it fixes the syntax complaints entirely.","msgtype":"m.text"},"ts":1381363105000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: what i find is that the people who are complaining about the syntax often don't understand the mechanics, and when you try to explain the mechanics to have them understand the syntax, they switch to complaining about the mechanics, usually with looks of contempt and disbelief.","msgtype":"m.text"},"ts":1381363137000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: Most people don't have any clue how class systems work at all in the first place, and have only a surface understanding of what OO even means, particularly that it's just a loosely-connected set of primitives that are all separable.","msgtype":"m.text"},"ts":1381363182000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]