[
{"content":{"body":"it's not hard if you use generators and promise wrappers","msgtype":"m.text"},"ts":1407456095000,"senderName":"jtcranmer","senderId":"jtcranmer@irc"},
{"content":{"body":"Promises are just a standardized abstraction over callback-based code, so whatever you've figured out for that, you can use for Promises.","msgtype":"m.text"},"ts":1407456181000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie_: PromiseBuiltinCapability() is a way of creating a record containing { [[Resolve]], [[Reject]], [[Promise]] } where the first two control the fate of [[Promise]]","msgtype":"m.text"},"ts":1407456584000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hixie_: PromiseCatch(p, f) should be the same as p.catch(f), aka p.then(undefined, f), except it will work even if someone messes with the Promise global","msgtype":"m.text"},"ts":1407456620000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: i've never had to trace code as complicated as the loader stuff in the ES6 spec before, so it's never come up...","msgtype":"m.text"},"ts":1407456634000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: thus, returning PromiseCatch(p, f) will return the derived promise generated","msgtype":"m.text"},"ts":1407456635000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hixie_: PromiseThen(PromiseOf(undefined), F) should be equivalent to EnqueueJob(<job_that_calls_F>, \"PromiseTasks\") I am pretty sure","msgtype":"m.text"},"ts":1407456677000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: but PromiseBuiltinCapability() takes no arguments, so wtf are [[Resolve]], [[Reject]], and [[Promise]] ?","msgtype":"m.text"},"ts":1407456687000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Domenic: and why would you ever need such a record","msgtype":"m.text"},"ts":1407456695000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: it is a way to create new promises, along with the things that control them","msgtype":"m.text"},"ts":1407456704000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"there has got to be a simpler way to spec that","msgtype":"m.text"},"ts":1407456717000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: it is equivalent to `function promiseBuiltinCapability() { var resolve, reject; var promise = new Promise((resolve_, reject_) => { resolve = resolve_; reject = reject_; }); return { promise, resolve, reject }; }`","msgtype":"m.text"},"ts":1407456756000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It is only necessary because the ES spec doesn't have closures","msgtype":"m.text"},"ts":1407456766000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so it is easier to create these capability records and use them in a linear fashion, than to nest your code inside `var promise = new Promise((resolve, reject) => { /* oh no closures my only weakness */ })`","msgtype":"m.text"},"ts":1407456802000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: i've no idea what that code does","msgtype":"m.text"},"ts":1407456808000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Domenic: it looks like perl","msgtype":"m.text"},"ts":1407456819000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: well, OK, guess it wasn't helpful. But, it will give you an object { promise, resolve, reject }","msgtype":"m.text"},"ts":1407456829000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"where promise is pending","msgtype":"m.text"},"ts":1407456832000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and resolve and reject change the fate of promise","msgtype":"m.text"},"ts":1407456839000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but what are resolve and reject?","msgtype":"m.text"},"ts":1407456840000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"resolve is a function that resolves promise; reject is a function that rejects promise","msgtype":"m.text"},"ts":1407456850000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"what do \"resolves promise\" and \"rejects promise\" mean?","msgtype":"m.text"},"ts":1407456875000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"and why can't that just be built-in to promises?","msgtype":"m.text"},"ts":1407456888000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i don't understand why there has to be all these explicit functions internal to the spec","msgtype":"m.text"},"ts":1407456897000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"instead of just saying \"return a new promise\"","msgtype":"m.text"},"ts":1407456902000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"ignoring the case where you call resolve(anotherPromise), \"resolve promisewith x\" means \"the promise will be successfull, with x\" and \"reject promise with x\" means \"the promise will fail, with r\"","msgtype":"m.text"},"ts":1407456913000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"where \"successful with x\" means when you do p.then(onSuccess, onFail), onSuccess gets called with x","msgtype":"m.text"},"ts":1407456938000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"these can't be built in to promises because then anyone could resolve a promise, which is bad---a promise's fate should only be determined by the person who creates it","msgtype":"m.text"},"ts":1407456973000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i don't mean \"built in\" as in \"exposed as an api\"","msgtype":"m.text"},"ts":1407457019000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i mean, just part of the definition of the spec concept","msgtype":"m.text"},"ts":1407457027000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"the spec right now is so utterly convoluted","msgtype":"m.text"},"ts":1407457034000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Ah. They are. You can just do ResolvePromise(p, x)","msgtype":"m.text"},"ts":1407457036000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so why does the spec go through all these crazy hoops","msgtype":"m.text"},"ts":1407457050000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I am not sure what context you are seeing them used where the PromiseCapability is used","msgtype":"m.text"},"ts":1407457053000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"instead of just saying that","msgtype":"m.text"},"ts":1407457054000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"One possible reason is because you might need to pass capability.[[Resolve]] to a real user","msgtype":"m.text"},"ts":1407457062000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Another might be that it hasn't had a chance to go through review; I believe the module loader section of the spec is in the process of being handed over from jorendorff to allenwb","msgtype":"m.text"},"ts":1407457113000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"e.g. ProceedToLocate() calls PromiseOf(undefined) which calls PromiseBuiltinCapability() which calls CreatePromiseCapabilityRecord() which is an 11-step algorithm","msgtype":"m.text"},"ts":1407457136000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"but i don't see why ProceedToLocate() can't just say \"create a new promise\" and the spec say somewhere that \"a new promise is something that looks like _bla_\"","msgtype":"m.text"},"ts":1407457169000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"without any need for these \"Let constructorResult be the result of calling the [[Call]] internal method of constructor, passing promise and (executor) as the arguments\" steps","msgtype":"m.text"},"ts":1407457181000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"whatever that means","msgtype":"m.text"},"ts":1407457191000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Not everyone hates formal language","msgtype":"m.text"},"ts":1407457203000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"create a new promise,\" backed by lots of implicit knowledge, is not really any better than PromiseOf(undefined), backed by explicit steps","msgtype":"m.text"},"ts":1407457219000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"this isn't a formal language though","msgtype":"m.text"},"ts":1407457282000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"it's still just english","msgtype":"m.text"},"ts":1407457284000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"It's very close to one","msgtype":"m.text"},"ts":1407457300000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The steps correspond almost 1:1 with (unoptimized) implementation code","msgtype":"m.text"},"ts":1407457315000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"compare https://github.com/domenic/Array.prototype.contains/blob/master/spec.md and https://github.com/domenic/Array.prototype.contains/blob/master/reference-implementation/index.js","msgtype":"m.text"},"ts":1407457336000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that's unfortunately not a benefit","msgtype":"m.text"},"ts":1407457412000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"but whatever","msgtype":"m.text"},"ts":1407457414000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"my feedback is that the spec is unreadable :-)","msgtype":"m.text"},"ts":1407457421000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"the barrier to entry is certainly high","msgtype":"m.text"},"ts":1407457466000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and i could believe that the sections you're looking at are particularly bad","msgtype":"m.text"},"ts":1407457475000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"right now i'm still trying to figure out what the Loader Record is created","msgtype":"m.text"},"ts":1407457527000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"s/what/where/","msgtype":"m.text"},"ts":1407457532000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i'm trying to trace execution of the module loading stuf","msgtype":"m.text"},"ts":1407457546000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i started at RequestLoad(), and i've traced it down to UpdateLinkSetOnLoad() on one side and InstantiateSucceeded() on the other","msgtype":"m.text"},"ts":1407457572000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I wonder if it'd be easier to trace by using a debugger against a polyfill","msgtype":"m.text"},"ts":1407457572000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(no sign yet of a loader being created)","msgtype":"m.text"},"ts":1407457583000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"btw the kind of thing i mean when i say it's not a formal language is \"Let body be the result of parsing load.[[Source]], interpreted as UTF-16 encoded Unicode text as described in 10.1.1, using Module as the goal symbol. Throw a SyntaxError exception if the parse fails or if any static semantics errors are detected.\"","msgtype":"m.text"},"ts":1407457634000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"bbl, gotta go","msgtype":"m.text"},"ts":1407457678000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"thanks for the help btw","msgtype":"m.text"},"ts":1407457684000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"kk, gl hf","msgtype":"m.text"},"ts":1407457684000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"hope jorendorff clears things up tomorrow :)","msgtype":"m.text"},"ts":1407457692000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"explicit functions internal to the spec\" is the style the entire ES spec's written in, isn't it? seems like anything new that's added needs to follow the same style. unless the whole spec is rewritten","msgtype":"m.text"},"ts":1407458868000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it probably should be reimagined completely","msgtype":"m.text"},"ts":1407461198000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it won't be, but it would be a net positive","msgtype":"m.text"},"ts":1407461204000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"did http://www.w3c-test.org break or something? seems to be broken in canary at least =(","msgtype":"m.text"},"ts":1407475271000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"looks like it's not serving MANIFEST.json","msgtype":"m.text"},"ts":1407475308000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"guess I'll just run my own :u","msgtype":"m.text"},"ts":1407475375000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"the site works, can't find any manifest.json though.","msgtype":"m.text"},"ts":1407475616000,"senderName":"Streusel","senderId":"Streusel@irc"},
{"content":{"body":"caitp: w3c-test.org gets wedged sometimes. I may need to just restart the server","msgtype":"m.text"},"ts":1407476040000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but it looks fine to me right now","msgtype":"m.text"},"ts":1407476065000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I get a 404 for MANIFEST.json, and subsequent reference errors because of that","msgtype":"m.text"},"ts":1407476148000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"(using the test runner)","msgtype":"m.text"},"ts":1407476154000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"that's because there's no MANIFEST.json file","msgtype":"m.text"},"ts":1407476179000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah, which the runner seems to need, thus no good right now =P but it's alright","msgtype":"m.text"},"ts":1407476226000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"not going to hack on more test failures at 2am on a friday anyways, nite","msgtype":"m.text"},"ts":1407476245000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"so it looks like some recent change to the tools/scripts/manifest.py script broke the manifest build","msgtype":"m.text"},"ts":1407476460000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and so the MANIFEST.json file's not getting regenerated","msgtype":"m.text"},"ts":1407476490000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I get the same error locally","msgtype":"m.text"},"ts":1407476500000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"  File \"tools/scripts/manifest.py\", line 565, in update_manifest","msgtype":"m.text"},"ts":1407476515000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"    manifest = load(kwargs[\"path\"])","msgtype":"m.text"},"ts":1407476515000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"KeyError: 'path'","msgtype":"m.text"},"ts":1407476516000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"interesting array name","msgtype":"m.text"},"ts":1407476561000,"senderName":"Streusel","senderId":"Streusel@irc"},
{"content":{"body":"that's not some built-in python array?","msgtype":"m.text"},"ts":1407476589000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I don't have a clue about python and their arrays, although I would assume it works like any other, I just thought the name was interesting","msgtype":"m.text"},"ts":1407476644000,"senderName":"Streusel","senderId":"Streusel@irc"},
{"content":{"body":"https://github.com/w3c/web-platform-tests/commit/acbcad1cb71c6eebd2a63c5cf16ea7f366812f48","msgtype":"m.text"},"ts":1407476680000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"committed without review","msgtype":"m.text"},"ts":1407476753000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"9 days ago, and was only caught now? o-o","msgtype":"m.text"},"ts":1407476795000,"senderName":"Streusel","senderId":"Streusel@irc"},
{"content":{"body":"I've been away for a week, and left Ms2ger in charge :)","msgtype":"m.text"},"ts":1407476869000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"looks like the code's supposed to just use a default if no path value is explicitly specified from the command line","msgtype":"m.text"},"ts":1407477075000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://github.com/w3c/web-platform-tests/blob/acbcad1cb71c6eebd2a63c5cf16ea7f366812f48/tools/scripts/manifest.py#L579https://github.com/w3c/web-platform-tests/blob/acbcad1cb71c6eebd2a63c5cf16ea7f366812f48/tools/scripts/manifest.py#L579","msgtype":"m.text"},"ts":1407477081000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but it seems to not be doing that","msgtype":"m.text"},"ts":1407477089000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ah wait that's just when it calls the parser","msgtype":"m.text"},"ts":1407477120000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hsivonen: ping http://krijnhoetmer.nl/irc-logs/whatwg/20140805#l-400","msgtype":"m.text"},"ts":1407477707000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"MikeSmith, I'm pretty sure that https://github.com/w3c/web-platform-tests/commit/acbcad1cb71c6eebd2a63c5cf16ea7f366812f48 doesn't break anything that worked before","msgtype":"m.text"},"ts":1407481538000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"MikeSmith, and reviewed at https://github.com/w3c/web-platform-tests/pull/1133","msgtype":"m.text"},"ts":1407483745000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1407483797000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Ms2ger: so I guess I'll need to figure out what earlier change it was that actually did break it","msgtype":"m.text"},"ts":1407483870000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"There's a pointer in my commit message :)","msgtype":"m.text"},"ts":1407483890000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"ah ok","msgtype":"m.text"},"ts":1407483900000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"um","msgtype":"m.text"},"ts":1407486066000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Ms2ger: in fact your change is what broke it, as far as I can see","msgtype":"m.text"},"ts":1407486157000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Ms2ger: if I check out the parent of that commit, the script was still working then","msgtype":"m.text"},"ts":1407486190000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith, how? It tried to fetch opts.foo, and opts isn't declared anywhere","msgtype":"m.text"},"ts":1407486375000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: dunno but apparently it did work","msgtype":"m.text"},"ts":1407486420000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Can you print opts.path there?","msgtype":"m.text"},"ts":1407486480000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"sure, gimme a second","msgtype":"m.text"},"ts":1407486531000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"opts.path: /opt/workspace/web-platform-tests/MANIFEST.json","msgtype":"m.text"},"ts":1407486581000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Huh","msgtype":"m.text"},"ts":1407486681000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Oh, I see","msgtype":"m.text"},"ts":1407486709000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"seems like opts is assigned on line 599 or so..","msgtype":"m.text"},"ts":1407486740000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith, at line 600, add path=opts.path","msgtype":"m.text"},"ts":1407486750000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"initialized","msgtype":"m.text"},"ts":1407486751000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1407486760000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"success","msgtype":"m.text"},"ts":1407486859000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"if you commit that I'll review it","msgtype":"m.text"},"ts":1407486892000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I was just going to suggest the opposite, but sure :)","msgtype":"m.text"},"ts":1407486904000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1407486918000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"r? https://github.com/w3c/web-platform-tests/pull/1163","msgtype":"m.text"},"ts":1407487186000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"zcorpan: pong","msgtype":"m.text"},"ts":1407487646000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Does anyone else than Gecko and Servo implement new Document()?","msgtype":"m.text"},"ts":1407488649000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"hsivonen: what is the 8 ball verdict for today?","msgtype":"m.text"},"ts":1407488764000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"jtcranmer: from the top of my head, per the URL Standard those are not equivalent, the first normalizes to fass.de","msgtype":"m.text"},"ts":1407490715000,"senderName":"annevk_","senderId":"annevk_@irc"},
{"content":{"body":"zcorpan_, r? https://critic.hoppipolla.co.uk/r/378","msgtype":"m.text"},"ts":1407500518000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: done","msgtype":"m.text"},"ts":1407500563000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"Ta","msgtype":"m.text"},"ts":1407500571000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"zcorpan_, https://critic.hoppipolla.co.uk/showcomment?chain=669 is done now, right?","msgtype":"m.text"},"ts":1407500618000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"yes. resolved it","msgtype":"m.text"},"ts":1407501052000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"Thanks!","msgtype":"m.text"},"ts":1407501700000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: when you said new WindowClient(), were you thinking of that being ServiceWorker only or on Window too?","msgtype":"m.text"},"ts":1407502200000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: I don't know where you get your idea the output is the thing to read data from. https://github.com/sysapps/tcp-udp-sockets/issues/69","msgtype":"m.text"},"ts":1407514756000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"never seen that elsewhere","msgtype":"m.text"},"ts":1407514772000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: things come out ... of the output ...","msgtype":"m.text"},"ts":1407514773000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"fprintf(stdout, \"foo\")","msgtype":"m.text"},"ts":1407514781000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"right, then the user reads from standard out, after someone put something there for them to read from","msgtype":"m.text"},"ts":1407514800000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"API user doesn't read from stdout, in general","msgtype":"m.text"},"ts":1407514830000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"one writes to output","msgtype":"m.text"},"ts":1407514838000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"read from input","msgtype":"m.text"},"ts":1407514840000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"that is how APIs work","msgtype":"m.text"},"ts":1407514843000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"no reason to make web APIs work differently than rest of the world","msgtype":"m.text"},"ts":1407514866000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"the java example in that threat is making me reconsider","msgtype":"m.text"},"ts":1407514890000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i agree no reason to depart from other programming models","msgtype":"m.text"},"ts":1407514895000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"fprintf(stdout, \"foo\") is just the same as the java case","msgtype":"m.text"},"ts":1407514917000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"the java example is general","msgtype":"m.text"},"ts":1407514924000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"except that C is ancient","msgtype":"m.text"},"ts":1407514930000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"stdout/stdin is an odd case, or so i thought","msgtype":"m.text"},"ts":1407514945000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i will need to do some research, as it is still mind-boggling to me that the consumer would write things *in* to the *output*... the *producer* would do that, sure, but not the consumer","msgtype":"m.text"},"ts":1407514979000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I've never seen any IO library which reads from output and writes to input","msgtype":"m.text"},"ts":1407515007000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"in general","msgtype":"m.text"},"ts":1407515012000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"of course one can do some piping (sp?) in which case you write to output and then read form the same stream elsewhere","msgtype":"m.text"},"ts":1407515048000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"hi, Question: Why is the picture element only under whatwg.org/specs but not under developers.whatwg.org?","msgtype":"m.text"},"ts":1407516093000,"senderName":"netzhuffle","senderId":"netzhuffle@irc"},
{"content":{"body":"Looks like the devs version is from 20 July","msgtype":"m.text"},"ts":1407516188000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: can I find that date somewhere?","msgtype":"m.text"},"ts":1407516453000,"senderName":"netzhuffle","senderId":"netzhuffle@irc"},
{"content":{"body":"I found it in a comment at the bottom of the page","msgtype":"m.text"},"ts":1407516473000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I see, thanks :)","msgtype":"m.text"},"ts":1407516562000,"senderName":"netzhuffle","senderId":"netzhuffle@irc"},
{"content":{"body":"is it regenerated automatically or manually?","msgtype":"m.text"},"ts":1407516579000,"senderName":"netzhuffle","senderId":"netzhuffle@irc"},
{"content":{"body":"I don't know what the current situation is","msgtype":"m.text"},"ts":1407516612000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"jorendorff: i'm here","msgtype":"m.text"},"ts":1407521178000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"OK! I'm ready","msgtype":"m.text"},"ts":1407521187000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i've been trying to trace how the loader works","msgtype":"m.text"},"ts":1407521229000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"right now i've got http://www.gliffy.com/go/publish/6036438","msgtype":"m.text"},"ts":1407521232000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"(scroll down a bit)","msgtype":"m.text"},"ts":1407521238000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"what i am primarily looking for right now is \"what creates the Loader?\"","msgtype":"m.text"},"ts":1407521258000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Why does postMessage work still on a closed BroadcastChannel","msgtype":"m.text"},"ts":1407521387000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"somewhat odd","msgtype":"m.text"},"ts":1407521389000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I would expect some exception","msgtype":"m.text"},"ts":1407521399000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"that does sound wrong","msgtype":"m.text"},"ts":1407521435000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yeah that's an oversight","msgtype":"m.text"},"ts":1407521460000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"file a bug?","msgtype":"m.text"},"ts":1407521461000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1407521478000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"thanks!","msgtype":"m.text"},"ts":1407521531000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie: There's just one Loader and it's used again and again.","msgtype":"m.text"},"ts":1407521593000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"where is it created?","msgtype":"m.text"},"ts":1407521601000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"It's not, in ES6. ES6 doesn't specify anything about it.","msgtype":"m.text"},"ts":1407521612000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"so, if i create it, how do i pass it to ES6?","msgtype":"m.text"},"ts":1407521648000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"reading a bit","msgtype":"m.text"},"ts":1407521657000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Hixie_: Do you call (or plan to call) \"Initialization\"? http://people.mozilla.org/~jorendorff/es6-draft.html#sec-initialization","msgtype":"m.text"},"ts":1407521745000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i don't do anything yet","msgtype":"m.text"},"ts":1407521758000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i'm waiting for allen to update the spec like he said he would before i try to reference it","msgtype":"m.text"},"ts":1407521771000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"(that involves changing that part, amongst others)","msgtype":"m.text"},"ts":1407521791000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"jorendorff: btw, when the spec says things like \"Return ProcessLoadDependencies(load, loader, depsList)\", does it mean to return the result of calling that operation, or to return a reference to that operation bound to those arguments?","msgtype":"m.text"},"ts":1407521918000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Return the result of.","msgtype":"m.text"},"ts":1407521933000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Hixie_: OK. So, one thing \"Initialization\" does is create the initial Realm.","msgtype":"m.text"},"ts":1407521938000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"A Realm is a global and all the associated junk","msgtype":"m.text"},"ts":1407521948000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"allenwb assures me that that initial realm is ignorable","msgtype":"m.text"},"ts":1407521960000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"because it's never used","msgtype":"m.text"},"ts":1407521962000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"oh, is he going to delete that?","msgtype":"m.text"},"ts":1407521979000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i think he wants to keep it for node.js or something","msgtype":"m.text"},"ts":1407521990000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: ...great.","msgtype":"m.text"},"ts":1407522006000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Hixie_: In any case, when you create a realm...","msgtype":"m.text"},"ts":1407522014000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"there's no loader initially; what HTML has to do is make one, and then set the realm's [[Loader]] to it.","msgtype":"m.text"},"ts":1407522048000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"where does the realm get created?","msgtype":"m.text"},"ts":1407522104000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: (this is not terribly familiar stuff to me)","msgtype":"m.text"},"ts":1407522165000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"who is it familiar to? everyone i speak to says that. :-/","msgtype":"m.text"},"ts":1407522180000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: My guess is, dherman or allenwb wrote all this.","msgtype":"m.text"},"ts":1407522202000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"is anyone implementing it?","msgtype":"m.text"},"ts":1407522256000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i mean, they're the people who'd be most familiar with it...","msgtype":"m.text"},"ts":1407522262000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: I want to implement Reflect.Realm because I think it's cool, there's a guy at Moz interested, but it's just not done yet","msgtype":"m.text"},"ts":1407522282000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":" I mean the *spec* isn't shovel-ready","msgtype":"m.text"},"ts":1407522294000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1407522314000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"maybe i'm just doing all this too early","msgtype":"m.text"},"ts":1407522319000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I can tell you generally how it's supposed to work","msgtype":"m.text"},"ts":1407522324000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"HTML must have stuff that happens when a new window or iframe is created, so a new Window is needed","msgtype":"m.text"},"ts":1407522333000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"what i am really trying to do ultimately is extend the module system so that it's the same system that handles loading e.g. images and style sheets","msgtype":"m.text"},"ts":1407522342000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1407522352000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"well, the Loader stuff at least has some concrete semantics, though it's been 100% stripped of comments","msgtype":"m.text"},"ts":1407522369000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"\"When a browsing context is first created, it must be created with a single Document in its session history, whose address is about:blank, which is marked as being an HTML document, whose character encoding is UTF-8, and which is both ready for post-load tasks and completely loaded immediately, along with a new Window object that the Document is associated with.\"","msgtype":"m.text"},"ts":1407522369000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"looks like allen said i then had to do some of the steps of 8.5 Initialization, in particular calling 8.5.1 InitializeFirstRealm ( realm ) after calling  CreateRealm().","msgtype":"m.text"},"ts":1407522401000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"based on this e-mail i'm looking at","msgtype":"m.text"},"ts":1407522408000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"but he's going to rename that to InitializeHostDefinedRealm","msgtype":"m.text"},"ts":1407522418000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"ok, well, i won't try to get in the middle of that","msgtype":"m.text"},"ts":1407522421000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"sounds like fun","msgtype":"m.text"},"ts":1407522424000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"so anyway, the point is you're saying i need to create the Loader here too?","msgtype":"m.text"},"ts":1407522450000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1407522452000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"that sounds doable","msgtype":"m.text"},"ts":1407522457000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"that's good, actually, it means i can define what exactly the Loader is","msgtype":"m.text"},"ts":1407522467000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yeah.","msgtype":"m.text"},"ts":1407522468000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1407522470000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"that's the design intent of the module loader, we don't have \"fetch\", you do","msgtype":"m.text"},"ts":1407522481000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"and make it something more elaborate than ES's built-in Loader","msgtype":"m.text"},"ts":1407522481000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i wonder how hard it would be to extend it enough to support  import styles from \"foo.css\";","msgtype":"m.text"},"ts":1407522526000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"or  import html from \"htmlimport.html\";","msgtype":"m.text"},"ts":1407522565000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"not so hard. let's see. switching behaviors based on the file extensions is a little weird","msgtype":"m.text"},"ts":1407522573000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i was thinking switching based on magic keywords \"styles\" and \"html\"","msgtype":"m.text"},"ts":1407522585000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"or, based on the MIME type of the fetched file","msgtype":"m.text"},"ts":1407522589000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"not sure what you'd do with the keyword if you base it on the MIME type","msgtype":"m.text"},"ts":1407522615000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1407522621000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"but basing it on the MIME type seems logical too","msgtype":"m.text"},"ts":1407522626000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"maybe import foo from \"mystylesheet\"; causes a \"foo\" variable whose value is the created <link> element to be exposed","msgtype":"m.text"},"ts":1407522666000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"that would be quite useful","msgtype":"m.text"},"ts":1407522674000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i wonder if the \"import\" machinery can handle the thing being exposed not being a Module","msgtype":"m.text"},"ts":1407522690000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"that's doable, I'm like 98% sure","msgtype":"m.text"},"ts":1407522693000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"damn","msgtype":"m.text"},"ts":1407522703000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"you're right, it can't","msgtype":"m.text"},"ts":1407522706000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"or maybe i still export a Module but i just add some new fields on it","msgtype":"m.text"},"ts":1407522711000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1407522714000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"that is doable","msgtype":"m.text"},"ts":1407522717000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"to expose the underlying <link> or whatnot","msgtype":"m.text"},"ts":1407522719000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"just by specifying a suitable \"translate\" and \"instantiate\" hook","msgtype":"m.text"},"ts":1407522720000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"instantiate containing the important part","msgtype":"m.text"},"ts":1407522726000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i'm gonna try to finish this flowchart, i think. it's helping me a lot in getting a handle on this thing.","msgtype":"m.text"},"ts":1407522755000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"and i can't really make progress til allen's done these changes anyway.","msgtype":"m.text"},"ts":1407522766000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"flow chart?","msgtype":"m.text"},"ts":1407522776000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"<Hixie_> right now i've got http://www.gliffy.com/go/publish/6036438","msgtype":"m.text"},"ts":1407522800000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"bbiab, lunch","msgtype":"m.text"},"ts":1407522854000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"thanks for the help so far","msgtype":"m.text"},"ts":1407522858000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"(filed https://www.w3.org/Bugs/Public/show_bug.cgi?id=26546 on the import styles idea)","msgtype":"m.text"},"ts":1407523058000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"if a script in page A creates some object using 'new someotherwindow.Foobar();', what is the incumbent settings object when ctor is called?","msgtype":"m.text"},"ts":1407527161000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"never remembers this stuff, and 'incumbent settings object' is so bizarre term that it really doesn't help with this","msgtype":"m.emote"},"ts":1407527214000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Hixie_: ^","msgtype":"m.text"},"ts":1407527398000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I assume incumbent settings object is the one from page A","msgtype":"m.text"},"ts":1407527414000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"annevk: I'm aware they're not equivalent","msgtype":"m.text"},"ts":1407528081000,"senderName":"jtcranmer","senderId":"jtcranmer@irc"},
{"content":{"body":"the question is, since they are both A-labels of faß.de (just under different definitions of transitonal/nontransitional processing)","msgtype":"m.text"},"ts":1407528128000,"senderName":"jtcranmer","senderId":"jtcranmer@irc"},
{"content":{"body":"would it be better to, e.g., consider user⊙fd and user⊙xd to be \"equal\"","msgtype":"m.text"},"ts":1407528153000,"senderName":"jtcranmer","senderId":"jtcranmer@irc"},
{"content":{"body":"Hixie_: any chance to get some examples of various settings object to the spec ?","msgtype":"m.text"},"ts":1407528221000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"no, registrars messed that up","msgtype":"m.text"},"ts":1407528222000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":" incumbent settings object vs.  entry settings object","msgtype":"m.text"},"ts":1407528266000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"jtcranmer: well not just registrars, but also the IETF","msgtype":"m.text"},"ts":1407528277000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and whoever else is to blame for IDNA2008","msgtype":"m.text"},"ts":1407528296000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: theoretically, they're supposed to be owned by the same people","msgtype":"m.text"},"ts":1407528495000,"senderName":"jtcranmer","senderId":"jtcranmer@irc"},
{"content":{"body":"which is why I bring it up","msgtype":"m.text"},"ts":1407528500000,"senderName":"jtcranmer","senderId":"jtcranmer@irc"},
{"content":{"body":"jtcranmer: in practice, they are owned by distinct entities","msgtype":"m.text"},"ts":1407528532000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jtcranmer: which is also what the .de registry wants, but most (if not all) browsers consider bad for security","msgtype":"m.text"},"ts":1407528557000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the registrars even bungled that up?","msgtype":"m.text"},"ts":1407528638000,"senderName":"jtcranmer","senderId":"jtcranmer@irc"},
{"content":{"body":"okay, so I'll treat all the assurances that IDNA says registrars are supposed to do as packs of lies","msgtype":"m.text"},"ts":1407528659000,"senderName":"jtcranmer","senderId":"jtcranmer@irc"},
{"content":{"body":"heads out","msgtype":"m.emote"},"ts":1407528705000,"senderName":"jtcranmer","senderId":"jtcranmer@irc"},
{"content":{"body":"so they a) don't want to handle bundling, b) in Germany they want ß and ss to be distinct","msgtype":"m.text"},"ts":1407528710000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: yeah, it's A, i think, because that's all within the JS spec and the JS spec doesn't manipulate the stack of settings objects","msgtype":"m.text"},"ts":1407528953000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"smaug____: what part of \"incumbent settings object\" is bizarre? i'd happily use a better term if you have one","msgtype":"m.text"},"ts":1407528971000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: just some example would be good","msgtype":"m.text"},"ts":1407528997000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":" incumbent settings object vs. entry settings object","msgtype":"m.text"},"ts":1407529008000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"ah, that's a good idea","msgtype":"m.text"},"ts":1407529188000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"will file a bug on that","msgtype":"m.text"},"ts":1407529195000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I just filed","msgtype":"m.text"},"ts":1407529199000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"even better :-)","msgtype":"m.text"},"ts":1407529228000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"thanks!","msgtype":"m.text"},"ts":1407529229000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"jorendorff: does \"The System object is the Loader Object instance associated with the Realm of the current global object\" mean \"The property \"System\" of the global object is the current Realm's [[loader]]\"?","msgtype":"m.text"},"ts":1407529385000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: I am 90% sure that is true","msgtype":"m.text"},"ts":1407529826000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1407529847000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"(isn't window.System going to clash with existing code?)","msgtype":"m.text"},"ts":1407529862000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I wonder what happens when you override window.System","msgtype":"m.text"},"ts":1407529963000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"will the browser try to use it anyway?","msgtype":"m.text"},"ts":1407529968000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"or does it only work if you override properties of the built-in window.System","msgtype":"m.text"},"ts":1407529979000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"System is a dumb name anyway, maybe it'll conflict and they'll change it","msgtype":"m.text"},"ts":1407529998000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The browser will certainly use the original one.","msgtype":"m.text"},"ts":1407530005000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: but the whole point of overridable loader hooks is to allow arbitrary user code to execute at those points","msgtype":"m.text"},"ts":1407530023000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ah, then I dunno.","msgtype":"m.text"},"ts":1407530035000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah, unclear","msgtype":"m.text"},"ts":1407530042000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hixie can probably tell us, now that he is an expert at this stuff ;)","msgtype":"m.text"},"ts":1407530059000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i haven't traced this back far enough to reach [[loader]]","msgtype":"m.text"},"ts":1407530074000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"so i'll let you know!","msgtype":"m.text"},"ts":1407530078000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"wonders what \"Return PromiseThen(p, F)\" means","msgtype":"m.emote"},"ts":1407530280000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"(http://people.mozilla.org/~jorendorff/es6-draft.html#sec-promisethen is blank)","msgtype":"m.text"},"ts":1407530291000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Domenic: any idea? ^","msgtype":"m.text"},"ts":1407530296000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"it needs to be changed. I'll file a bug. it means p.then(F)","msgtype":"m.text"},"ts":1407530319000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"possibly with some automatic coercions going on","msgtype":"m.text"},"ts":1407530340000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"what does that mean? return a new promise that resolves when F has been invoked?","msgtype":"m.text"},"ts":1407530345000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Yes.","msgtype":"m.text"},"ts":1407530375000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1407530409000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: ah those sections rae still blank, wonderfully. They're supposed to just be un-tamper-withable versions of p.then(F), ya","msgtype":"m.text"},"ts":1407530733000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"jorendorff: why does the UpdateLinkSetOnLoad(linkSet, load) Abstract Operation sometimes (though not always) return a value? the return value seems to be ignored by the caller (which is always LoadSucceeded Functions)","msgtype":"m.text"},"ts":1407530750000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: just guessing, but often \"return values\" in ES are just \"did this function throw an exception or not\" exception ~= abrupt completion.","msgtype":"m.text"},"ts":1407530787000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that's ignored too","msgtype":"m.text"},"ts":1407530811000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"the caller just says \"Call UpdateLinkSetOnLoad(linkSet, load).\"","msgtype":"m.text"},"ts":1407530818000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"it ignores the result, abrupt or not","msgtype":"m.text"},"ts":1407530823000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"ah OK. My guess is spec bug then. Allen caught many such bugs in my promises draft.","msgtype":"m.text"},"ts":1407530828000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hixie_: yeah, it should be changed for clarity to just say \"7.a. Call LinkSetFailed... b. Return.\"","msgtype":"m.text"},"ts":1407530884000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1407530892000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Domenic: i added a comment to https://bugs.ecmascript.org/show_bug.cgi?id=2683 explaining what those abstract operations are for","msgtype":"m.text"},"ts":1407531059000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Domenic: as for System conflicting -- it *is* a dumb name","msgtype":"m.text"},"ts":1407531099000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"jorendorff: ya looks good. I imagine all of the user-exposed versions will be implemented in terms of the abstract operations in one way or another.","msgtype":"m.text"},"ts":1407531140000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"of course any name could have a conflict -- anyway, assuming one does occur with System, I think the intent was to use Realm.[[Loader]] consistently everywhere","msgtype":"m.text"},"ts":1407531195000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Realm.[[loader]], lowercase L","msgtype":"m.text"},"ts":1407531239000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"([[Loader]] is used on other records)","msgtype":"m.text"},"ts":1407531257000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"given PromiseThem(PromiseNew(A), B) in what order do A and B execute?","msgtype":"m.text"},"ts":1407531306000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Then, not Them","msgtype":"m.text"},"ts":1407531310000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"or are none of them executed immediately?","msgtype":"m.text"},"ts":1407531333000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"where?","msgtype":"m.text"},"ts":1407531357000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"where what?","msgtype":"m.text"},"ts":1407531373000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"where does this occur?","msgtype":"m.text"},"ts":1407531403000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-requestload","msgtype":"m.text"},"ts":1407531407000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"if native promises are anything like the conventions that have been agreed on by the community over the past few years, PromiseThen(not-a-function) should be irrelevant","msgtype":"m.text"},"ts":1407531423000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"(but Domenic can check me -- the answer is, A would be called immediately, and B definitely not during this event turn)","msgtype":"m.text"},"ts":1407531427000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"step 6 does \"PromiseNew(F)\", where F is a \"CallNormalize(resolve, reject) Functions\"","msgtype":"m.text"},"ts":1407531437000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I assume that PromiseNew(A) is the internal equivalent of new Promise(A).","msgtype":"m.text"},"ts":1407531441000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1407531444000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"that one actually has spec text","msgtype":"m.text"},"ts":1407531455000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"so what are the \"resolve\" and \"reject\" arguments set to?","msgtype":"m.text"},"ts":1407531458000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"So then yeah, A is executed immediately, as part of constructrion of the promise.  B is executed when/if the first promise fulfills.","msgtype":"m.text"},"ts":1407531468000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The resolver and rejecter for the promise beign constructed.","msgtype":"m.text"},"ts":1407531485000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yepyep, Tab's got it","msgtype":"m.text"},"ts":1407531487000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i tried to follow it down, but \"resolvingFunctions.[[Resolve]], resolvingFunctions.[[Reject]]\" doesn't mean anything to me","msgtype":"m.text"},"ts":1407531495000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Methods that, when called, resolve or reject that promise.  They're the only way to manipulate the promise's state.","msgtype":"m.text"},"ts":1407531500000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"is slightly relieved that the Promises spec is not a great deal more comprehensible than the Loader spec","msgtype":"m.emote"},"ts":1407531526000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"though, i hasten to add","msgtype":"m.text"},"ts":1407531530000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"much more complete and correct","msgtype":"m.text"},"ts":1407531542000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"oh they're the spec-provided callbacks to actually resolve the promise, ok","msgtype":"m.text"},"ts":1407531545000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1407531553000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"Return the result of calling the [[Call]] internal method of resolve passing undefined and (name) as arguments\" seems like a really convoluted way of just saying \"resolve the promise\"","msgtype":"m.text"},"ts":1407531596000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"but ok","msgtype":"m.text"},"ts":1407531604000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1407531615000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Urf, agreed.","msgtype":"m.text"},"ts":1407531619000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"this is one of those places where i would totally just file a pull request, if TC39 had a process","msgtype":"m.text"},"ts":1407531645000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"This is why I switched the spec for the color classes to just use actual JS, because writing JS in prose is *terrible*.","msgtype":"m.text"},"ts":1407531654000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(And I needed enough detail that it was kinda bad to use prose.)","msgtype":"m.text"},"ts":1407531673000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: i would have just said \"resolve the promise with 'name' as the value\"","msgtype":"m.text"},"ts":1407531678000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Normal prose, that is.","msgtype":"m.text"},"ts":1407531679000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"which seems like sufficient detail...","msgtype":"m.text"},"ts":1407531684000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"(along with corresponding changes around it, obviously)","msgtype":"m.text"},"ts":1407531699000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"anyway","msgtype":"m.text"},"ts":1407531704000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"\"Resolve promise F with \"value\".\" is the defined language, I think.","msgtype":"m.text"},"ts":1407531705000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah, something like that would be fine","msgtype":"m.text"},"ts":1407531768000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"man, the ES spec uses this \"Return Foo()\" (where Foo() returns 'undefined' or nothing at all) style a _lot_","msgtype":"m.text"},"ts":1407531851000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"it's really confusing","msgtype":"m.text"},"ts":1407531855000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"so wait, wait, wait","msgtype":"m.text"},"ts":1407531928000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"the function passed to PromiseNew() has to have 'resolve' and 'reject' arguments, right?","msgtype":"m.text"},"ts":1407531947000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Well, it'll get passed those args.  It doesn't necessarily have to have them, obviously, since you're always allowed to ignore input args.","msgtype":"m.text"},"ts":1407531967000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"but why does the function passed as the second argument to PromiseThen() not have to also?","msgtype":"m.text"},"ts":1407531971000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"PromiseThen() is nothing like PromiseNew().","msgtype":"m.text"},"ts":1407531985000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i thought it was the same thing but chaining on from a previous promise","msgtype":"m.text"},"ts":1407532003000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"It doesn't get resolve/reject functions.  You either return a value or throw a value; that resolves/rejects the chained promise automatically.","msgtype":"m.text"},"ts":1407532041000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(The constructor doesn't have the same behavior because you sometimes want to wait and resolve things *later*, by passing the resolve/reject functions to something outside.)","msgtype":"m.text"},"ts":1407532067000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so there's kind of two types of promises? those whose handlers are async and those whose handlers are sync?","msgtype":"m.text"},"ts":1407532072000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"No.","msgtype":"m.text"},"ts":1407532076000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i'm so confused","msgtype":"m.text"},"ts":1407532114000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Most of the time, you deal with a promise by having your callback either (a) return a value (fulfilling the promise), (b) throw (rejecting the promise), or (c) return another promise (resolving the promise and slaving it to your returned promise, so it'll fulfill/reject later).","msgtype":"m.text"},"ts":1407532134000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But you need to bootstrap the promise in the constructor, so you're instead given the handles directly.","msgtype":"m.text"},"ts":1407532152000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"but CallNormalize() just does things synchronously","msgtype":"m.text"},"ts":1407532167000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"so why bother with a promise at all?","msgtype":"m.text"},"ts":1407532172000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I have no idea what that is, so shrug.","msgtype":"m.text"},"ts":1407532174000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I can just tell you about promises, not about whatever other crazy stuff the ES spec has in it.","msgtype":"m.text"},"ts":1407532188000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jorendorff: ^","msgtype":"m.text"},"ts":1407532204000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"jorendorff: why does RequestLoad() use a promise to call CallNormalize()?","msgtype":"m.text"},"ts":1407532225000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"ok, this part of the pipeline is actually going to be a pleasant surprise for you, i hope","msgtype":"m.text"},"ts":1407532252000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"because it all sort of makes sense actually","msgtype":"m.text"},"ts":1407532259000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"try me :-)","msgtype":"m.text"},"ts":1407532262000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"second, multiple conversations...","msgtype":"m.text"},"ts":1407532267000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"ok. to answer your question first","msgtype":"m.text"},"ts":1407532311000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"it's just so that the normalize hook is called async","msgtype":"m.text"},"ts":1407532321000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"for consistency with all the other hooks","msgtype":"m.text"},"ts":1407532324000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"they're all called async in a fresh event loop turn","msgtype":"m.text"},"ts":1407532330000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"wait, it is?","msgtype":"m.text"},"ts":1407532334000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i thought we established PromiseNew() would synchronously call the executor","msgtype":"m.text"},"ts":1407532349000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1407532370000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"definitely","msgtype":"m.text"},"ts":1407532371000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"looks at the spec text","msgtype":"m.emote"},"ts":1407532381000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"PromiseNew() calls InitializePromise() which calls \"the [[Call]] internal method of executor with undefined as thisArgument and (resolvingFunctions.[[Resolve]], resolvingFunctions.[[Reject]]) as argumentsList\"","msgtype":"m.text"},"ts":1407532404000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"PromiseNew should call its argument synchronously","msgtype":"m.text"},"ts":1407532423000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"just like new Promise(f)","msgtype":"m.text"},"ts":1407532431000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"so then how is that calling it async","msgtype":"m.text"},"ts":1407532434000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"huh, it is totally calling it sync","msgtype":"m.text"},"ts":1407532455000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"is confused","msgtype":"m.emote"},"ts":1407532457000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"glad it's not just me :-P","msgtype":"m.text"},"ts":1407532467000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"maybe it got \"fixed\"","msgtype":"m.text"},"ts":1407532472000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"because the old way looked weird","msgtype":"m.text"},"ts":1407532476000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"it was like, why are you creating this pointless promise?","msgtype":"m.text"},"ts":1407532483000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"sorry","msgtype":"m.text"},"ts":1407532488000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"so let's address the spec as it is then","msgtype":"m.text"},"ts":1407532494000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Hixie_: In that case the main difference between using PromiseNew to call a function","msgtype":"m.text"},"ts":1407532526000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"and just directly calling it","msgtype":"m.text"},"ts":1407532528000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Hixie_: is that any exceptions thrown by the function are then caught for you and PromiseNew returns a rejected promise","msgtype":"m.text"},"ts":1407532553000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"(step 8 of InitializePromise, called from PromiseNew)","msgtype":"m.text"},"ts":1407532592000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i was wondering why CallNormalise caught an abrupt termination but then just returned it instead of calling the rejection handler","msgtype":"m.text"},"ts":1407532614000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i guess it's the same either way","msgtype":"m.text"},"ts":1407532620000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"but ironically in the spec prose it ends up not being automatic since you have to catch all the abrupt terminations","msgtype":"m.text"},"ts":1407532644000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"right. think of it this way","msgtype":"m.text"},"ts":1407532644000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"if you were implementing all this in JS","msgtype":"m.text"},"ts":1407532649000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"you would *definitely* do it this way, because it's quite a bit nicer to have `new Promise()` catch the exception than write a try/catch block","msgtype":"m.text"},"ts":1407532671000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"try/catch being what it is","msgtype":"m.text"},"ts":1407532696000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"ok so. next question then. AddDependencyLoad() takes an argument depLoad. Where does that come from?","msgtype":"m.text"},"ts":1407532797000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"it's called as the callback from a promise that fires once GetOrCreateLoad() has returned, if i'm following this right","msgtype":"m.text"},"ts":1407532830000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"but GetOrCreateLoad() is just a promise callback, it doesn't resolve a new promise, so what's the value of the promise that gets passed to AddDependencyLoad() ??","msgtype":"m.text"},"ts":1407532853000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"is it the same \"name\" value as was passed to GetOrCreateLoad() from CallNormalize() ?","msgtype":"m.text"},"ts":1407532897000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"looks","msgtype":"m.emote"},"ts":1407533250000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Hixie_: ok. PromiseThen does chain, so looking at RequestLoad, we have","msgtype":"m.text"},"ts":1407533575000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"5. it calls new Promise(CallNormalize) directly","msgtype":"m.text"},"ts":1407533597000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"8. and calls .then(GetOrCreateLoad) on that","msgtype":"m.text"},"ts":1407533614000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"now back to ProcessLoadDependencies","msgtype":"m.text"},"ts":1407533625000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"4.e.  and we call .then(AddDependencyLoad) on that","msgtype":"m.text"},"ts":1407533642000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"CallNormalize figures out the normalized name to use","msgtype":"m.text"},"ts":1407533705000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"GetOrCreateLoad either finds an already-loaded Module, a Load already in progress, or it kicks off a new Load","msgtype":"m.text"},"ts":1407533737000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"AddDependencyLoad adds that as a dependency of this load.","msgtype":"m.text"},"ts":1407533822000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"jorendorff: with you so far","msgtype":"m.text"},"ts":1407533823000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"jorendorff: but what's the argument to AddDependencyLoad()? where does it come from?","msgtype":"m.text"},"ts":1407533838000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"GetOrCreateLoad always returns a Load record, even for an already-loaded Module it just synthesizes one","msgtype":"m.text"},"ts":1407533844000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"that is the value passed to AddDependencyLoad","msgtype":"m.text"},"ts":1407533856000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"it's a record","msgtype":"m.text"},"ts":1407533861000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"oh!","msgtype":"m.text"},"ts":1407533862000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"the return value of the callback is what sets the argument of the next callback","msgtype":"m.text"},"ts":1407533879000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1407533880000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1407533884000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"(if GetOrCreateLoad() wanted to be async, what would it return? a promise? does that then automatically get handled somehow?)","msgtype":"m.text"},"ts":1407533918000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1407533927000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"yes, so suppose you d","msgtype":"m.text"},"ts":1407533965000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"*you do","msgtype":"m.text"},"ts":1407533967000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"p1.then(function (v1) {","msgtype":"m.text"},"ts":1407533972000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"    return <<some new Promise called p2>>;","msgtype":"m.text"},"ts":1407533994000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"}).then(function (v2) {","msgtype":"m.text"},"ts":1407534001000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"   ...and so on...","msgtype":"m.text"},"ts":1407534004000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"});","msgtype":"m.text"},"ts":1407534005000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"is it http://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-resolve-functions that handles this?","msgtype":"m.text"},"ts":1407534022000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"v2's eventual value is whatever p2 finally settles to","msgtype":"m.text"},"ts":1407534023000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i'm not seeing anything there that checks if the return value is a promise","msgtype":"m.text"},"ts":1407534032000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"(what if you actually want to return a promise? not just a promise to a value?)","msgtype":"m.text"},"ts":1407534042000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: what the spec does instead of \"if v is a Promise\" is \"if v has a callable .then method\"","msgtype":"m.text"},"ts":1407534090000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"(if you actually want to return a promise... I don't know, I think you're screwed? Domenic?)","msgtype":"m.text"},"ts":1407534107000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"(some folks thought that was inelegant, but the design already had so much traction in real code, it was kind of a fiat accompli or whatever)","msgtype":"m.text"},"ts":1407534147000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"The current API can't fulfill a promise to a promise, because it always uses the \"resolve\" algorithm, which automatically slaves to promises.  We don't directly expose the \"fulfill\" algorithm yet, which would allow fulfilling a promise with a promise directly.","msgtype":"m.text"},"ts":1407535030000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jorendorff: oh wow, really? I don't have to return a Promise, i can return a { then: function () } ?","msgtype":"m.text"},"ts":1407536168000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"fascinating","msgtype":"m.text"},"ts":1407536176000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yes, you can.","msgtype":"m.text"},"ts":1407536190000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"So it's duck-typing?","msgtype":"m.text"},"ts":1407536212000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1407536216000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"as an implementer, i'm not crazy about stuff like that (in the absence of use cases). it creates corner cases","msgtype":"m.text"},"ts":1407536263000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"why does Promise.resolve() not also allow that then?","msgtype":"m.text"},"ts":1407536460000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"wait, this is going to cause all kinds of problems","msgtype":"m.text"},"ts":1407536478000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"it means that not only can you not return a promise, you also can't return any object that happens to have a callable 'then'","msgtype":"m.text"},"ts":1407536497000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"sounds almost exactly like aplus","msgtype":"m.text"},"ts":1407536576000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i agree that that's what it means","msgtype":"m.text"},"ts":1407537164000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"can't say if it'll cause all kinds of problems in practice","msgtype":"m.text"},"ts":1407537246000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"on the other hand, it means you can consume non-\"native\" implementations","msgtype":"m.text"},"ts":1407537253000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"these same rules have been in place for a few years","msgtype":"m.text"},"ts":1407537262000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"people have gotten pretty used to them, I think","msgtype":"m.text"},"ts":1407537279000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"well it means e.g. if i want to return an object that's a dictionary of english words with functions attached to them, the code will suddenly break utterly if one of those words is \"then\".","msgtype":"m.text"},"ts":1407537620000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"if i'm the F in a construct like PromiseCatch(PromiseThen(p, F), G)","msgtype":"m.text"},"ts":1407537673000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"sure, but in practice people do things like `return { data: theDictionary };` or similar","msgtype":"m.text"},"ts":1407537675000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"and I return a promise","msgtype":"m.text"},"ts":1407537677000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"and that promise is a construct like PromiseThen(PromiseNew(A), B)","msgtype":"m.text"},"ts":1407537717000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"and B throws","msgtype":"m.text"},"ts":1407537721000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"does G get called?","msgtype":"m.text"},"ts":1407537727000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Domenic: ^","msgtype":"m.text"},"ts":1407537744000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: yes","msgtype":"m.text"},"ts":1407537799000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1407537810000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1407537811000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"in the lingo, the promise PromiseThen(p, F) is not \"settled\" when F returns","msgtype":"m.text"},"ts":1407537829000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"if it returns a thenable","msgtype":"m.text"},"ts":1407537835000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"instead, we let it ride","msgtype":"m.text"},"ts":1407537844000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"double the stakes","msgtype":"m.text"},"ts":1407537859000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"\"now you have two promises\"","msgtype":"m.text"},"ts":1407537874000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"and other pithy sayings","msgtype":"m.text"},"ts":1407537877000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"is %Loader% the same as the Realm's [[loader]] (which is the same as window.System)?","msgtype":"m.text"},"ts":1407538288000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"(the definition of %Loader% is blank)","msgtype":"m.text"},"ts":1407538308000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: Re \"you also can't return any object that happens to have a callable 'then'\", yup, I fought against that crap.  So did Alex Russell, for a while - he was arguing for \"ghetto branding\" (the presence of an improbably-named property) as we don't have Symbols quite yet.  But we lost.","msgtype":"m.text"},"ts":1407538414000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: i don't understand the argument for this. I mean, other parts of the spec use IsPromise() without controversy as far as I can tell.","msgtype":"m.text"},"ts":1407538445000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"It's so that existing Promise libraries (conforming to the A+ spec) can be used directly as promises without any updates.","msgtype":"m.text"},"ts":1407538474000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I still don't think it's worth it, but shrug.","msgtype":"m.text"},"ts":1407538483000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"but they can't with other parts of the api","msgtype":"m.text"},"ts":1407538484000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"domenic you aren't writing a CL for that are you? that one looks simple!","msgtype":"m.text"},"ts":1407538490000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Right, I think a lot of this is a mess. :/","msgtype":"m.text"},"ts":1407538497000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"e.g. you can't call Promise.resolve() with an a+ promise","msgtype":"m.text"},"ts":1407538503000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"That's actualy surprising, and likely a mistake.","msgtype":"m.text"},"ts":1407538519000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Promise.resolve() is supposed to ahve the same semantics as returning a value from a promise callback.","msgtype":"m.text"},"ts":1407538533000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Promise.resolve(foo) === new Promise(function(resolve){ resolve(foo); }) === somePromise.then(function(){ return foo}, function(){ return foo; })","msgtype":"m.text"},"ts":1407538580000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That's what the semantics are *supposed* to be.","msgtype":"m.text"},"ts":1407538586000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"well right now Promise.resolve({then:foo}); is not the same as Promise.resolve(new Promise(foo)) (i'm assuming i got those right)","msgtype":"m.text"},"ts":1407538666000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Well, it's unlikely that the same \"foo\" can be used in both those places, but sure.","msgtype":"m.text"},"ts":1407538693000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah i don't really understand this promise stuff","msgtype":"m.text"},"ts":1407538739000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"and the more i learn about it the less clear it gets :-(","msgtype":"m.text"},"ts":1407538748000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I don't know why; they feel really simple to me.","msgtype":"m.text"},"ts":1407538765000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But oh well.","msgtype":"m.text"},"ts":1407538769000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"A consistent pattern in your confusion seems to be that you continually get confused over the difference between the contruction callback and the then() callbacks.","msgtype":"m.text"},"ts":1407538828000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Fix that, and maybe it will help?","msgtype":"m.text"},"ts":1407538846000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"well what would the equivalent of Promise.resolve({then:foo}) be using a promise and 'foo'?","msgtype":"m.text"},"ts":1407538869000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"My understanding would be a TypeError, right?","msgtype":"m.text"},"ts":1407538910000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"{then:foo} is an object that happens to have a \"then\" property with the value foo.  Maybe that's a method, but we have no idea what it does.","msgtype":"m.text"},"ts":1407538916000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"assume 'foo' is a function","msgtype":"m.text"},"ts":1407538925000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"With a promise, that's, um, \"somePromise.then = foo;\", which is almost certainly not what you're thinking about.","msgtype":"m.text"},"ts":1407538943000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"caitp: which one?","msgtype":"m.text"},"ts":1407539095000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(Here, you're confusing setting \"then\" to some value and calling \"then\" with an argument.)","msgtype":"m.text"},"ts":1407539100000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: take   new Promise(function(a, b) { a() }).then(function () { return { then: foo } });","msgtype":"m.text"},"ts":1407539104000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"TabAtkins: what's the equivalent of that but using a real promise instead of \"{ then: foo }\" ?","msgtype":"m.text"},"ts":1407539120000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"TabAtkins: make that   new Promise(function(a, b) { a() }).then(function () { doSomething(); return { then: foo } });","msgtype":"m.text"},"ts":1407539160000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"There isn't, because a real promise won't have \"foo\" as the value of its \"then\" property.  It'll have, most likely, the default value of Promise.prototype.then.","msgtype":"m.text"},"ts":1407539165000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1407539180000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I'm not sure what you're itnending with the thenable there, so it's hard to answer.","msgtype":"m.text"},"ts":1407539183000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"that seems like a non-sequitur","msgtype":"m.text"},"ts":1407539188000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"{then:foo} is an object with a then() method that does something.  A Promise is also an object with a then() method that does something.","msgtype":"m.text"},"ts":1407539213000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"right now if you return a {then:foo} from a then() callback, it calls foo() in a microtask later.","msgtype":"m.text"},"ts":1407539221000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Yes.","msgtype":"m.text"},"ts":1407539229000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ok so you can do this also with real promises right?","msgtype":"m.text"},"ts":1407539240000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"And the same thing happens to a promise - its then() method gets called later.","msgtype":"m.text"},"ts":1407539247000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"instead of this fake object with a 'then' property?","msgtype":"m.text"},"ts":1407539248000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Depends on what you're intending - I'm very confused here.","msgtype":"m.text"},"ts":1407539262000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so how do you return a promise whose then() method calls foo?","msgtype":"m.text"},"ts":1407539266000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Is your *intention* that foo() get called at some point?  That is, that the foo() method itself is important, not just a metasyntactic variable?","msgtype":"m.text"},"ts":1407539284000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1407539291000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Ah, k.","msgtype":"m.text"},"ts":1407539297000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"first doSoemthing() is called, then foo() is called","msgtype":"m.text"},"ts":1407539303000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"in separate microtasks","msgtype":"m.text"},"ts":1407539307000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"And you still want a promise returned from the chain like normal?  (In the thenable example you've provided, unless foo() acts correctly, you'll probably get a rejected promise out at the end.)","msgtype":"m.text"},"ts":1407539357000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"what is \"acts correctly\"?","msgtype":"m.text"},"ts":1407539385000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"isn't it just \"not throw\"?","msgtype":"m.text"},"ts":1407539401000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"implements the same interface as a Promise()","msgtype":"m.text"},"ts":1407539404000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"`new Promise(function(a, b){ a(); })` is equivalent to `Promise.resolve()`, so I'll pretend you used that, since it's clearer.","msgtype":"m.text"},"ts":1407539406000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'm not sure what the expected beahvior of a then() method is, precisely. I haven't looked into it in detail, and don't plan to write my own promise impl.","msgtype":"m.text"},"ts":1407539434000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So, your requirement can just be Promise.resolve().then(doSomething).then(foo)","msgtype":"m.text"},"ts":1407539472000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hold on, you've moved 'foo' outside of the original callback","msgtype":"m.text"},"ts":1407539505000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"???","msgtype":"m.text"},"ts":1407539510000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I did what you asked for. You want something different, give me better requirements. ^_^","msgtype":"m.text"},"ts":1407539523000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Then's are chainable.","msgtype":"m.text"},"ts":1407539530000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"ok a better example: suppose you have   new Promise(function(a, b) { a() }).then(F);","msgtype":"m.text"},"ts":1407539537000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"and F is function F() { doSomething(); return { then: foo } }","msgtype":"m.text"},"ts":1407539552000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Okay, `fulfilledPromise.then(F)` for clarity.","msgtype":"m.text"},"ts":1407539556000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so the question is, how do you rewrite F so it uses a real promise instead of { then: foo }","msgtype":"m.text"},"ts":1407539589000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"That code is *not* the normal way to have a method get called later.  Don't use thenables on purpose unless you're actually intending them to be promise-likes.","msgtype":"m.text"},"ts":1407539608000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i've no idea what that means","msgtype":"m.text"},"ts":1407539618000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"And I don't know what your code means.","msgtype":"m.text"},"ts":1407539626000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"what's a \"thenable\"","msgtype":"m.text"},"ts":1407539626000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"An object with a callable \"then\" property.","msgtype":"m.text"},"ts":1407539633000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Or, in other words, a Promise or Promise-like.","msgtype":"m.text"},"ts":1407539644000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"don't use a promise unless you want a promise\"?","msgtype":"m.text"},"ts":1407539656000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i don't know what i want","msgtype":"m.text"},"ts":1407539659000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i'm trynig to work out what it means to return a {then:foo}","msgtype":"m.text"},"ts":1407539668000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"It *appears* that you want doSomething() to be called in one microtask, and then foo() in another.","msgtype":"m.text"},"ts":1407539679000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You're for some reason trying to achieve this by constructing a promise-like object, which is weird and almost certainly not what you want.","msgtype":"m.text"},"ts":1407539697000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"all i'm trying to do is understand what the spec means","msgtype":"m.text"},"ts":1407539713000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"the spec allows you to return any object with a \"then\" property that's callable","msgtype":"m.text"},"ts":1407539728000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Domenic, v8:3499 --- that one seems really trivial, so I wanna write that one while I make dinner :3","msgtype":"m.text"},"ts":1407539734000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"but if you've already done it then no big deal","msgtype":"m.text"},"ts":1407539750000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: haha ya be my guest, I haven't gotten my dev environment set up","msgtype":"m.text"},"ts":1407539751000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Returning {then:foo} means the same thing as returning a promise.  Except that if foo() doesn't do what the spec expects (I dont' know the details of this), weird things will happen.","msgtype":"m.text"},"ts":1407539755000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Where \"weird\" is probably \"the chained promise gets rejected\".","msgtype":"m.text"},"ts":1407539804000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"and if you return a promise, what happens? it just gets its \"then\" method called immediately?","msgtype":"m.text"},"ts":1407539836000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I *think* all that happens is that the spec calls foo() at some appropriate time, and creates its own (native) promise that either fulfills or rejects, based on whether foo() returns or throws.  But I'm not certain if that's exactly right.","msgtype":"m.text"},"ts":1407539852000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"immediately\": well, whenever the spec says to.","msgtype":"m.text"},"ts":1407539865000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I don't recall the details.","msgtype":"m.text"},"ts":1407539871000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i'm reading the spec as we speak and i can't figure out the details either","msgtype":"m.text"},"ts":1407539885000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"whence my confusion","msgtype":"m.text"},"ts":1407539889000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Oh wait, I remember a bit better.","msgtype":"m.text"},"ts":1407539894000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So, this is complicated.","msgtype":"m.text"},"ts":1407539897000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And now there's a fire drill, so bbiab","msgtype":"m.text"},"ts":1407539905000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i think i'm suffering from some sort of stockholm syndrome with the loader","msgtype":"m.text"},"ts":1407542215000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i've reached the ProceedToTranslate callers","msgtype":"m.text"},"ts":1407542257000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"basically i've flow-charted everything from ProceedToTranslate() to UpdateLinkSetOnLoad()","msgtype":"m.text"},"ts":1407542283000,"senderName":"Hixie_","senderId":"Hixie_@irc"}
]