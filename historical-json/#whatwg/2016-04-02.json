[
{"content":{"body":"gwicke: annevk","msgtype":"m.text"},"ts":1459556646000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: thanks, might try again next week","msgtype":"m.text"},"ts":1459561266000,"senderName":"gwicke","senderId":"gwicke@irc"},
{"content":{"body":"gwicke: bug in Gecko then","msgtype":"m.text"},"ts":1459571767000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gwicke: I reopened the bug","msgtype":"m.text"},"ts":1459597667000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I noticed something interesting - `filter` is much harder to implement than `map` with async iterators.","msgtype":"m.text"},"ts":1459609240000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"I have all sorts of pyramids, anywhere I can check an existing implementation?","msgtype":"m.text"},"ts":1459609298000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"gwicke: turns out wanderview already fixed it elsewhere, such a great person","msgtype":"m.text"},"ts":1459615766000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"benjamingr__: async function* filter(ai, cb) { for await (const e of ai) { if (await cb(e)) { yield e; } } }","msgtype":"m.text"},"ts":1459618037000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"benjamingr__: can omit the await before cb(e) if you only want sync predicates","msgtype":"m.text"},"ts":1459618062000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"do JavaScript-engine implementations actually ever need to have code that directly corresponds to so ES slots, or are slots just a conceptual feature of the spec","msgtype":"m.text"},"ts":1459618075000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and of other specs that define things in terms of ES slots","msgtype":"m.text"},"ts":1459618097000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Domenic: I meant without having async generators - also, I noticed async generators aren't working in babel and they used to - any idea why?","msgtype":"m.text"},"ts":1459618111000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"benjamingr__: sure, if you only use half the proposal, using the proposal is hard.","msgtype":"m.text"},"ts":1459618128000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"benjamingr__: no idea","msgtype":"m.text"},"ts":1459618132000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"MikeSmith: they need to produce all the observable features of the slots existing, so usually the easiest way to implement that is with some kind of slot-like thing (which I know for a fact V8 and JSC have)","msgtype":"m.text"},"ts":1459618165000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: well, since I'm doing it to understand the proposal - I think it's fair to place such a constraint on myself.","msgtype":"m.text"},"ts":1459618194000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"Just like implementing map/filter on iterators without having generators.","msgtype":"m.text"},"ts":1459618212000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"benjamingr__: maybe Babel originally implemented the now-withdrawn observable version of async generators and they never got around to implementing the stage 2 version.","msgtype":"m.text"},"ts":1459618325000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: OK, thanks. And the slot stuff came along in ES6 and after, right? I don’t remember anything about it being in ES5.1 or before. Or maybe there was another name previously? hmm, but if so I don’t know what it would have been.","msgtype":"m.text"},"ts":1459618581000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: no, it was in ES5, just with a more-confusing name \"internal properties\" I believe.","msgtype":"m.text"},"ts":1459618608000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"aha","msgtype":"m.text"},"ts":1459618618000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"geez","msgtype":"m.text"},"ts":1459618623000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1459618624000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"well clearly I was overthinking this","msgtype":"m.text"},"ts":1459618637000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1459618639000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"(It was confusing since they did not behave like properties at all, e.g. no prototypal inheritance.)","msgtype":"m.text"},"ts":1459618649000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"anytime!","msgtype":"m.text"},"ts":1459618653000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yup agreed about the old name","msgtype":"m.text"},"ts":1459618663000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and now that I understand “slots” seems very much the apt name","msgtype":"m.text"},"ts":1459618695000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"now goes back to reading the spec he was reading before he distracted himself","msgtype":"m.emote"},"ts":1459618755000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Domenic: ah, do you have any presentation about that?","msgtype":"m.text"},"ts":1459622326000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"I was asked to talk about async iterators and to be frank I'm clueless about where things stand in ES, I can give an hour long talk about async iterators in Python but that'd be mega-lame. I want  to show off async generators as an alternative to observables for many use cases and as a concurrency primitive on its own.","msgtype":"m.text"},"ts":1459622380000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"I unchecked \"allow merge commits\" for html","msgtype":"m.text"},"ts":1459625617000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: great, we should do that everywhere","msgtype":"m.text"},"ts":1459626152000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i can do that","msgtype":"m.text"},"ts":1459626252000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"dnoe","msgtype":"m.text"},"ts":1459626547000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan++","msgtype":"m.text"},"ts":1459635529000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: I wonder if we should now update the TEAM.md to drop the instructions about how to merge a PR branch manually","msgtype":"m.text"},"ts":1459635753000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"anyway, for now let’s see if this thing actually works","msgtype":"m.text"},"ts":1459635803000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"pushes the green button on libpackage-deprecationmanager-perl","msgtype":"m.emote"},"ts":1459635821000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"oofs","msgtype":"m.text"},"ts":1459635826000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"pushes the green button on libpackage-deprecationmanager-perl","msgtype":"m.emote"},"ts":1459635833000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"christ","msgtype":"m.text"},"ts":1459635837000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hot diggety dog https://github.com/whatwg/html/commit/78806b0a466dd8f1f04fdcd5bc51ca002ccbf31f","msgtype":"m.text"},"ts":1459635946000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"}
]