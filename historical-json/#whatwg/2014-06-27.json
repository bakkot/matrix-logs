[
{"content":{"body":"Discussing Vats: https://github.com/dslomov-chromium/ecmascript-structured-clone/issues/7","msgtype":"m.text"},"ts":1403852796000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"This wakes me up in the morning :-)","msgtype":"m.text"},"ts":1403852806000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I didn't even know there was a plan to specify structured clone in the es spec","msgtype":"m.text"},"ts":1403853556000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"or if I did I forgot","msgtype":"m.text"},"ts":1403853563000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"catches the clue train late","msgtype":"m.emote"},"ts":1403853573000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: so where do \"worlds\" fit into this? are \"worlds\" just an implementation thing?","msgtype":"m.text"},"ts":1403853770000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I'm not sure what a world is.","msgtype":"m.text"},"ts":1403853798000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But objects live in a realm and they can freely move to other realms, as long as they remain within the same vat.","msgtype":"m.text"},"ts":1403853812000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If they want to leave the vat, they need to cloned or transfered.","msgtype":"m.text"},"ts":1403853820000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1403853827000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"be*","msgtype":"m.text"},"ts":1403853829000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(Of course, they can also be cloned or transfered within the same vat.)","msgtype":"m.text"},"ts":1403853862000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: so \"worlds\" I meant as in \"isolated worlds\" at https://developer.chrome.com/extensions/content_scripts#execution-environment","msgtype":"m.text"},"ts":1403854418000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: that's different","msgtype":"m.text"},"ts":1403854437000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah I can see that now","msgtype":"m.text"},"ts":1403854444000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"after reading it","msgtype":"m.text"},"ts":1403854449000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"\"worlds\" are more like views","msgtype":"m.text"},"ts":1403854454000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah yeah","msgtype":"m.text"},"ts":1403854468000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I'm pretty sure I'm missing something in ES6. ES5 defined for-in st deleting an unvisited property in the body caused it to never be visited; as far as I can tell, it would be visited per ES6.","msgtype":"m.text"},"ts":1403863510000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic: why does something with Symbol.iterator also have forEach(); convenience?","msgtype":"m.text"},"ts":1403884519000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: dumb reasons, like making polyfills more usable","msgtype":"m.text"},"ts":1403884536000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: so maybe we should not copy that in DOM?","msgtype":"m.text"},"ts":1403884550000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"depends on the case ... i feel the pattern has been established for map and set-like things, i.e. having has/get/delete without forEach would be strange","msgtype":"m.text"},"ts":1403884590000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but for e.g. NodeWalkers I wouldn't copy it","msgtype":"m.text"},"ts":1403884607000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"or other \"exotic\" iterables that aren't just array-like or map/set like","msgtype":"m.text"},"ts":1403884622000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"FormData, and such are like that, but they don't have any iteration support yet","msgtype":"m.text"},"ts":1403884698000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, i mean, it doesn't hurt to have it, it's just IMO stupid","msgtype":"m.text"},"ts":1403884741000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I should add a comment to the IDL iterables bug that it takes a position on this","msgtype":"m.text"},"ts":1403884885000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah, until iterators are a real thing, forEach is needed.  I made sure to add it to FontFaceSet when I finally removed [SetClass].","msgtype":"m.text"},"ts":1403889544000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But agree that we shouldn't use it in the future.","msgtype":"m.text"},"ts":1403889557000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: using e.g. http://software.hixie.ch/utilities/cgi/test-tools/echo you can see what browsers include in fetches","msgtype":"m.text"},"ts":1403896555000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: hope you understand about asking you to file a bug on IDL; don't really want to start fighting this on a per API basis","msgtype":"m.text"},"ts":1403897491000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(or defining the whole thing in prose, that'd take ages and would contain so many errors)","msgtype":"m.text"},"ts":1403897507000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I just think it's important not to have wrong spec text there in the meantime, and it's actually a good thing to define things correctly ahead of time and then just copy them over to IDL.","msgtype":"m.text"},"ts":1403897526000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(aside from the fact that bz et al would refuse to implement)","msgtype":"m.text"},"ts":1403897530000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"in the maintime we need something we can implement and ship","msgtype":"m.text"},"ts":1403897558000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mean*","msgtype":"m.text"},"ts":1403897562000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"why can't you implement and ship the correct semantics","msgtype":"m.text"},"ts":1403897616000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"literally just say \"consult the existing algorithm you've already implemented for Map\"","msgtype":"m.text"},"ts":1403897630000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"because ES != DOM on many levels in implementations today","msgtype":"m.text"},"ts":1403897681000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not really sure we need to go into this discussion again, maybe bz is up for it if you ask nicely","msgtype":"m.text"},"ts":1403897694000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i don't see why the spec has to be incorrect to accomodate that","msgtype":"m.text"},"ts":1403897707000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the spec should be correct","msgtype":"m.text"},"ts":1403897711000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"if implementations can't implement that correctly until after Q3 or whatever, that's fine","msgtype":"m.text"},"ts":1403897722000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but it's then a bug in the implementations that can be tracked","msgtype":"m.text"},"ts":1403897729000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and not the spec telling them to be wrong","msgtype":"m.text"},"ts":1403897737000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'm happy to update the spec once IDL provides better hooks, I'm not going to define this whole object in terms of ES and then let implementers figure out what binding to use","msgtype":"m.text"},"ts":1403897819000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It is frustrating that you are more focused on layering on top of IDL than on specifying correct semantics :(","msgtype":"m.text"},"ts":1403897900000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"implementer concerns should be implementer concerns","msgtype":"m.text"},"ts":1403897922000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess I'm more of a pragmatist","msgtype":"m.text"},"ts":1403897967000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So what would solve this. I will pull request WebIDL right now if that will fix it.","msgtype":"m.text"},"ts":1403898022000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"And I would be happy to correct the semantics if that were straightforward, but it's an order of magnitude more complicated at the moment and it's unlikely any of that work will actually be used","msgtype":"m.text"},"ts":1403898044000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It seems like you'd want some kind of AddMapInputs(sequenceArg, this, \"set\") specified in WebIDL","msgtype":"m.text"},"ts":1403898078000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yes, fixing IDL would solve this","msgtype":"m.text"},"ts":1403898087000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Note that it should be this.append, not set","msgtype":"m.text"},"ts":1403898109000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"OK. I will pull request that to WebIDL if you don't want to put it into Fetch. Is that AddMapInputs good?","msgtype":"m.text"},"ts":1403898110000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"OK sure you'd pass \"append\"","msgtype":"m.text"},"ts":1403898118000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Many specifications will need this, that's why I'm kicking it up a layer as \"not my problem\"","msgtype":"m.text"},"ts":1403898165000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't really want to take responsibility for IDL at this point","msgtype":"m.text"},"ts":1403898202000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Right now only one specification does","msgtype":"m.text"},"ts":1403898209000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"There have been many requests for \"open-ended dictionary\"","msgtype":"m.text"},"ts":1403898297000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And this is not the first place there's nested sequences either I think","msgtype":"m.text"},"ts":1403898320000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"This feels similar to adding something in your code in one file that needs it, and later extracinting it out into a utils package","msgtype":"m.text"},"ts":1403898343000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"bz can probably reference a few things","msgtype":"m.text"},"ts":1403898343000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Instead of just introducing buggy code","msgtype":"m.text"},"ts":1403898356000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But whatevs, if introducing buggy code is just a tactic for getting me to write the correct code in the utils package, that works too","msgtype":"m.text"},"ts":1403898380000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Also: WebIDL is generated from XML @_@","msgtype":"m.text"},"ts":1403898394000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I did check this particular IDL with you beforehand if you remember","msgtype":"m.text"},"ts":1403898407000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Sure, the arguments were fine","msgtype":"m.text"},"ts":1403898415000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The processing of them is not","msgtype":"m.text"},"ts":1403898422000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"WebIDL is generated from XML?","msgtype":"m.text"},"ts":1403898462000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Per bz there's a difference","msgtype":"m.text"},"ts":1403898466000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that sounds counterproductive","msgtype":"m.text"},"ts":1403898466000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"it's like RNG Compact, only backwards!","msgtype":"m.text"},"ts":1403898477000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"maybe you meant something other than what it sounded like","msgtype":"m.text"},"ts":1403898489000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"There is an XSLT file and a makefile (yay, fails on Windows)","msgtype":"m.text"},"ts":1403898498000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"you must be using the wrong make","msgtype":"m.text"},"ts":1403898513000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"maybe try the other one","msgtype":"m.text"},"ts":1403898518000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Domenic: but yeah, writing the utils package is significantly more low-level and I'd rather not have to write that code","msgtype":"m.text"},"ts":1403898532000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"or maybe you forgot to put xsltproc in PATH","msgtype":"m.text"},"ts":1403898533000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Domenic: that's why I've filed a ton of bugs on IDL hoping someone would fix them","msgtype":"m.text"},"ts":1403898546000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SamB: can't tell if you're trolling or just have never used Windows","msgtype":"m.text"},"ts":1403898548000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"well, I can't remember which of the two makes that ship with MinGW are actually useable","msgtype":"m.text"},"ts":1403898567000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Domenic: there's only so many things I can tackle","msgtype":"m.text"},"ts":1403898568000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: sure. it's just sucky that instead there's bugs infesting specs in the meantime.","msgtype":"m.text"},"ts":1403898570000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and \"forgot to put xsltproc in PATH\" could be considered trolling","msgtype":"m.text"},"ts":1403898593000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Domenic: as far as I can tell the way it's written now can be migrated to something less throwy later easily","msgtype":"m.text"},"ts":1403898609000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: there's a transition path of sorts to a saner future","msgtype":"m.text"},"ts":1403898625000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: so, I guess you probably meant the *spec*?","msgtype":"m.text"},"ts":1403898648000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"rathert than just web IDL code in general","msgtype":"m.text"},"ts":1403898656000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"(if you count IDL as code)","msgtype":"m.text"},"ts":1403898672000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Domenic: also, <3","msgtype":"m.text"},"ts":1403898675000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tries to imagine the idiot who writes his Relax NG in the XML syntax, only to use trang to convert it into the compact syntax that Emacs/nxml/rng-validate can use","msgtype":"m.emote"},"ts":1403898733000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Domenic: so btw, if you do actually think the IDL is fine and it really is the prose that's broken, that would be an easy fix, but I was doubting that to be the case, hence the pushback","msgtype":"m.text"},"ts":1403898750000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, it could be migrated I think, it's true. I should calm down.","msgtype":"m.text"},"ts":1403898872000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: also, I'm fairly happy with tweaking things over time until all the details are correct; I'd rather have the current algorithm and get that shipped and then improve than a half-broken IDL/JS mix in the spec that nobody is sure what to do with","msgtype":"m.text"},"ts":1403898876000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SamB: yes indeed.","msgtype":"m.text"},"ts":1403898876000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: <3 indeed :)","msgtype":"m.text"},"ts":1403898882000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: I think the prose could be fixed pretty easily. Just say something like \"call `this.append(header[0], header[1])` and rethrow any exceptions essentially.","msgtype":"m.text"},"ts":1403898918000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Is this about something like .extend() for HeaderMap?","msgtype":"m.text"},"ts":1403899037000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Map really needs .extend(), btw.)","msgtype":"m.text"},"ts":1403899054000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Nah it's about new HeaderMap(iterableOfTwoElementArrays) and how the current spec text does not match Map(iterableOfTwoElementArrays)'s behavior","msgtype":"m.text"},"ts":1403899059000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(I use it regularly in Python.)","msgtype":"m.text"},"ts":1403899060000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ah.","msgtype":"m.text"},"ts":1403899066000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Map and set are anemic","msgtype":"m.text"},"ts":1403899070000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"s/HeaderMap/Headers/","msgtype":"m.text"},"ts":1403899070000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I really want the bind operator so we can stop blocking on the committee for good standard library","msgtype":"m.text"},"ts":1403899083000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Indeed.","msgtype":"m.text"},"ts":1403899092000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"and still get something method-ish enough to be pleasant","msgtype":"m.text"},"ts":1403899094000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I will try to get the ball rolling in time for next TC39","msgtype":"m.text"},"ts":1403899122000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Sweet, thanks.","msgtype":"m.text"},"ts":1403899181000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"likes the look of myMap::extend(foo).","msgtype":"m.emote"},"ts":1403899200000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'd like to talk vats with Mark Miller some day, just for fun","msgtype":"m.text"},"ts":1403899201000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"haha","msgtype":"m.text"},"ts":1403899218000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"*I* think it would be fun","msgtype":"m.text"},"ts":1403899223000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I was not sarcastic :-)","msgtype":"m.text"},"ts":1403899233000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think other people would warn you off","msgtype":"m.text"},"ts":1403899234000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hm, okay, so similar topic. I need to add a constructor for FontFaceSet.  FFS is currently defined as storing its stuff in an internal Set. Can I just say that it passes its arguments to the Set constructor and uses the result as its internal set?","msgtype":"m.text"},"ts":1403899300000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Gecko actually has vats of sorts thanks to bholley","msgtype":"m.text"},"ts":1403899301000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"With some silly stuff for document.domain","msgtype":"m.text"},"ts":1403899317000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's really quite cool and a lot nicer than the hacks Blink et al have","msgtype":"m.text"},"ts":1403899334000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: in-ter-esting...","msgtype":"m.text"},"ts":1403899335000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I do that for all the Set methods it exposes - just epxlicitly delegate to the internal set and return what it returns.","msgtype":"m.text"},"ts":1403899353000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Probably not, because you want argument validation?","msgtype":"m.text"},"ts":1403899355000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(or coercion, rather)","msgtype":"m.text"},"ts":1403899372000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I have to write the argument list, yeah, but that's allt he validation I need I think.","msgtype":"m.text"},"ts":1403899374000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It'll just take an iterable of FontFace objects.","msgtype":"m.text"},"ts":1403899383000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"No coercion happening.","msgtype":"m.text"},"ts":1403899390000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hmm yeah that'd probably do it","msgtype":"m.text"},"ts":1403899392000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(right, coercion is for strings)","msgtype":"m.text"},"ts":1403899401000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah, all the multimap stuff I've designed is also using an internal multimap of sorts","msgtype":"m.text"},"ts":1403899416000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: yeah I'm pretty sure that would work.","msgtype":"m.text"},"ts":1403899437000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"still isn't sure how to write the return value of entries/values.","msgtype":"m.emote"},"ts":1403899440000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I should probably define an actual conceptual multimap to make it clearer how FormData/URLSearchParams/Headers are all kind of the same","msgtype":"m.text"},"ts":1403899450000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Would be nice, yes.","msgtype":"m.text"},"ts":1403899485000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: `any` seems good ;)","msgtype":"m.text"},"ts":1403899494000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"doesn't really believe in IDL return values","msgtype":"m.emote"},"ts":1403899499000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Reportedly they're good for JIT","msgtype":"m.text"},"ts":1403899514000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I'm currently copying the MDN text and using \"Iterator\".","msgtype":"m.text"},"ts":1403899515000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"They're informative for the author, at least.","msgtype":"m.text"},"ts":1403899525000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yeah yeah, fine guys, be practical. I'm going to sit over here in castle theoretical purity and be self-satisfied, mmk?","msgtype":"m.text"},"ts":1403899546000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Interesting that Castle Theoretical Purity is the one arguing for *less* type information.","msgtype":"m.text"},"ts":1403899573000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Well ES6 doesn't have types, so","msgtype":"m.text"},"ts":1403899615000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":p","msgtype":"m.text"},"ts":1403899620000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heh, yeah, ES's room in Castle Theoretical Purity is not often visited by other residents.","msgtype":"m.text"},"ts":1403899711000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk, Domenic: Should I define the signature of the FFS constructor as (sequence<FontFace>) or something? Or is there a better way to indicate \"iterable of FontFace objects\"?","msgtype":"m.text"},"ts":1403901002000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I think that's the right way to go. I think all iterables are convertable into sequences","msgtype":"m.text"},"ts":1403901023000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"sequence argument is \"iterable\"","msgtype":"m.text"},"ts":1403901037000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Not sure if the spec has been updated to say that yet, though","msgtype":"m.text"},"ts":1403901050000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Cool.","msgtype":"m.text"},"ts":1403901052000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The fact that arguments and attributes/return values use the same names but mean different things is weird.","msgtype":"m.text"},"ts":1403901072000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I don't think they \"mean different things\", but not going to start that again","msgtype":"m.text"},"ts":1403901129000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"\"sequence<Foo>\" means \"iterable of Foos\" in argument lists, but explicitly \"Array of Foos\" in attributes/return values.","msgtype":"m.text"},"ts":1403901165000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"No, it means \"sequence of Foos\" in both cases","msgtype":"m.text"},"ts":1403901193000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"And there's a function jsval -> sequence<Foo>, and one sequence<Foo> -> jsval","msgtype":"m.text"},"ts":1403901225000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I can pass in an iterator to the former, but can't ever get an iterator out of the latter; I have to do something different for that.","msgtype":"m.text"},"ts":1403901283000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yes?","msgtype":"m.text"},"ts":1403901310000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"TabAtkins: can't you get any iterable type out of the latter?","msgtype":"m.text"},"ts":1403901342000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"depending on the whims of the implementor?","msgtype":"m.text"},"ts":1403901350000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: No.","msgtype":"m.text"},"ts":1403901354000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Giving an attribute the type \"sequence<Foo>\" means it'll be an Array of Foos.","msgtype":"m.text"},"ts":1403901377000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"well it seems stupid if it's just another name for an Array","msgtype":"m.text"},"ts":1403901379000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Welcome to legacy naming problems!","msgtype":"m.text"},"ts":1403901396000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Note that those functions don't precisely correspond to argument/return value; sometimes it's the other way around)","msgtype":"m.text"},"ts":1403901399000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Remember that WebIDL wasn't JS-specific originally.","msgtype":"m.text"},"ts":1403901404000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"how is sequence<Foo> legacy","msgtype":"m.text"},"ts":1403901405000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"TabAtkins: oh","msgtype":"m.text"},"ts":1403901411000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB, why invent a new name for it?","msgtype":"m.text"},"ts":1403901416000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"It's conceptually a sequence for both","msgtype":"m.text"},"ts":1403901427000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Because it's way clearer to read \"Array<Foo>\" than to have to remember that \"sequence\" in WebIDL means Array in JS.","msgtype":"m.text"},"ts":1403901441000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The conceptual part of it isn't important; you actually want to know what type it is.","msgtype":"m.text"},"ts":1403901454000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I wouldn't mind calling them both Array","msgtype":"m.text"},"ts":1403901458000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"that sounds wrong also","msgtype":"m.text"},"ts":1403901472000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I disagree that concepts are not important","msgtype":"m.text"},"ts":1403901476000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Calling the argument one Array would be wrong, since it only actually uses iterableness.","msgtype":"m.text"},"ts":1403901481000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It converts into an array","msgtype":"m.text"},"ts":1403901494000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Anyway","msgtype":"m.text"},"ts":1403901499000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"does it have to?","msgtype":"m.text"},"ts":1403901500000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Yes","msgtype":"m.text"},"ts":1403901510000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"SamB: Doesn't really matter; that parts hidden away behind machinery. Point is that it does one iteration over the object.","msgtype":"m.text"},"ts":1403901526000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Well, it does if you do anything side-effecty in the loop","msgtype":"m.text"},"ts":1403901527000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"TabAtkins: yeah, I know, how can it \"have to\" do something you can't observe anyway?","msgtype":"m.text"},"ts":1403901545000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"For example, node.append(node, {toString... }) won't append the first argument before evaluating the toString","msgtype":"m.text"},"ts":1403901598000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"gotcha","msgtype":"m.text"},"ts":1403901609000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"So conceptually, it gathers them into an array first","msgtype":"m.text"},"ts":1403901611000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"(Well, that's variadic arguments, but same thing for sequences)","msgtype":"m.text"},"ts":1403901649000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Yeah, it does a data-validation/conversion pass over all the argument before operating on them.  Whether they end up stored in an Array or not is an unknowable aspect. ^_^","msgtype":"m.text"},"ts":1403901833000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Sure","msgtype":"m.text"},"ts":1403901877000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I'm not talking about implementation here","msgtype":"m.text"},"ts":1403901886000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"All I'm saying is that *conceptually*, it gathers them into an array first","msgtype":"m.text"},"ts":1403901902000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"If you understand that, you understand the behaviour","msgtype":"m.text"},"ts":1403901920000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Even if the actual implementation is unknowable","msgtype":"m.text"},"ts":1403901929000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Right. But using that to say that the argument type should say \"Array\" is still wrong, because we don't care whether you pass an Array or not.","msgtype":"m.text"},"ts":1403901945000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so an array, not an Array","msgtype":"m.text"},"ts":1403901947000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"We just care about the iterable aspect, and so that's what should be reflected in the name of the argument type, ideally.","msgtype":"m.text"},"ts":1403901964000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So how about callbacks?","msgtype":"m.text"},"ts":1403901978000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"How about them?","msgtype":"m.text"},"ts":1403901989000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If you have a callback function that takes a sequence<T>, you're getting an array, not an unknowable iterable","msgtype":"m.text"},"ts":1403902004000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hm, interesting point.","msgtype":"m.text"},"ts":1403902033000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"that could explode, you know","msgtype":"m.text"},"ts":1403902035000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: How?","msgtype":"m.text"},"ts":1403902059000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Boom?","msgtype":"m.text"},"ts":1403902067000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"this yak is getting shaaaaaaved","msgtype":"m.text"},"ts":1403902079000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"right now i'm installing a package manager so i can get winpthreads so i can get libxml2 so i can get libxslt so i can make the webidl i wrote","msgtype":"m.text"},"ts":1403902113000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so, I mean, what do you do if you really did want to just take an iterable so it's okay if the sequence is longer than any available memory chunk?","msgtype":"m.text"},"ts":1403902122000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Domenic: Have you tried not using Windows?","msgtype":"m.text"},"ts":1403902126000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"SamB, you still get an Array","msgtype":"m.text"},"ts":1403902140000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Domenic: which manager?","msgtype":"m.text"},"ts":1403902140000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I fight for the users!","msgtype":"m.text"},"ts":1403902140000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ms2ger: surely it's possible to get an iterable which you can iterate at your leisure somehow","msgtype":"m.text"},"ts":1403902162000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"That said, if you now have libxml2, you might have the ability to install Bikeshed and make it work.","msgtype":"m.text"},"ts":1403902177000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If you do so, PLEASE WRITE IT DOWN AND SEND IT TO ME.","msgtype":"m.text"},"ts":1403902183000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'd love install instructions for windows.","msgtype":"m.text"},"ts":1403902188000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"you would probably not love them","msgtype":"m.text"},"ts":1403902197000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Ha","msgtype":"m.text"},"ts":1403902211000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Man, even the Linux instructions aren't great.","msgtype":"m.text"},"ts":1403902237000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Installing OSS is hard.","msgtype":"m.text"},"ts":1403902246000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"SamB, well, the browser is always going to give you an array; it's not going to analyze your code to check if it needs an array, and give you an iterable otherwise","msgtype":"m.text"},"ts":1403902251000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"TabAtkins: why isn't it \"apt-get install bikeshed\" yet","msgtype":"m.text"},"ts":1403902259000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Ms2ger: I think he meant \"surely there's some way to indicate in WebIDL that the callback shoudl be passed an iterable\".","msgtype":"m.text"},"ts":1403902276000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"SamB: Because that's crazy times.","msgtype":"m.text"},"ts":1403902286000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ms2ger: I was figuring you could write some different IDL to get it give you the iterable","msgtype":"m.text"},"ts":1403902287000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Oh, on the IDL side","msgtype":"m.text"},"ts":1403902296000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"That sounds like a pain","msgtype":"m.text"},"ts":1403902308000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"could be","msgtype":"m.text"},"ts":1403902328000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"are you imagining monster stack traces?","msgtype":"m.text"},"ts":1403902345000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Just monster implementation :)","msgtype":"m.text"},"ts":1403902447000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Maybe it could work, but it feels funny","msgtype":"m.text"},"ts":1403902465000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"On another note","msgtype":"m.text"},"ts":1403902468000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"\"A form control that is disabled must prevent any click events that are queued on the user interaction task source from being dispatched on the element.\" is a nice COMEFROM","msgtype":"m.text"},"ts":1403902481000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Seems not too crazy to return an iterator over some structure.","msgtype":"m.text"},"ts":1403902483000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ms2ger: yeah unfortunately there's no spec that actually defines dispatch properly in the first place, so i couldn't do anything _but_ a COMEFROM there :-(","msgtype":"m.text"},"ts":1403902616000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Mm","msgtype":"m.text"},"ts":1403902627000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I guess this is UI Events territory","msgtype":"m.text"},"ts":1403902645000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"TabAtkins: what about letting an IDL method *accept* one?","msgtype":"m.text"},"ts":1403902671000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"rather than coercing it into an array of some kind","msgtype":"m.text"},"ts":1403902692000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: Accepting one is just done by using \"sequence<Foo>\" today.","msgtype":"m.text"},"ts":1403902692000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ha","msgtype":"m.text"},"ts":1403902709000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Oh, you mean one that only consumes data as it needs, rather than all up-front?","msgtype":"m.text"},"ts":1403902719000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"UI Events is a delta spec for D3E/DOM, yet has neither in its References section","msgtype":"m.text"},"ts":1403902732000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"TabAtkins: yeah","msgtype":"m.text"},"ts":1403902743000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"would that be a normative reference, or a transformative reference?","msgtype":"m.text"},"ts":1403902878000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I give up on this xslt thing","msgtype":"m.text"},"ts":1403903296000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hixie, hm, I guess \"form control\" in a term of art there?","msgtype":"m.text"},"ts":1403903310000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"i think \"disabled\" is the term of art there, no?","msgtype":"m.text"},"ts":1403903332000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"maybe","msgtype":"m.text"},"ts":1403903333000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"is it hyperlinked?","msgtype":"m.text"},"ts":1403903336000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"isn't form control two terms","msgtype":"m.text"},"ts":1403903356000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Yeah, to...","msgtype":"m.text"},"ts":1403903358000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"\"A form control is disabled if ...\"","msgtype":"m.text"},"ts":1403903363000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"close enough :-P","msgtype":"m.text"},"ts":1403903420000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"That still doesn't tell me which elements are form controls, though","msgtype":"m.text"},"ts":1403903442000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hixie, or am I overlooking something?","msgtype":"m.text"},"ts":1403903518000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"There's things like \"Listed, labelable, submittable, and reassociateable form-associated element.\" under categories","msgtype":"m.text"},"ts":1403903531000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hixie: did I mention that the section about origins would be improved by hyperlinking more of the places where it mentions parts of URLs, and it wouldn't hurt to either give a summary of the parts of a URL or links to the corresponding parts of the URL spec ...","msgtype":"m.text"},"ts":1403903546000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: if you filed a bug, then you did. othewise, you didn't. :-)","msgtype":"m.text"},"ts":1403903579000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, (not just trying to nitpick, I have no idea if my implementor in Servo (hi abinader) got them all)","msgtype":"m.text"},"ts":1403903601000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I was gonna write you a patch for it but your buildsystem is, uh, so messy you're evidently ashamed to even mention it in the repo","msgtype":"m.text"},"ts":1403903608000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Ms2ger: replace \"form control\" with \"boogie moogie\" and that section doesn't change meaning as far as i can tell","msgtype":"m.text"},"ts":1403903608000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Indeed","msgtype":"m.text"},"ts":1403903618000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"So what kind of elements are boogie moogies? :)","msgtype":"m.text"},"ts":1403903636000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: doesn't matter","msgtype":"m.text"},"ts":1403903644000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ms2ger: why would it matter?","msgtype":"m.text"},"ts":1403903657000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ms2ger: you can't tell?","msgtype":"m.text"},"ts":1403903657000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Ms2ger: you just apply this if they're disabled","msgtype":"m.text"},"ts":1403903671000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Who's \"they\"?","msgtype":"m.text"},"ts":1403903692000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I'm currently basing that all form controls affected by disabled are those in which have the disabled idl property","msgtype":"m.text"},"ts":1403903696000,"senderName":"abinader","senderId":"abinader@irc"},
{"content":{"body":"I mean, my thinking would be that it's pretty easy to tell based on whether it has something to do with input to a form, and whether it has a disabled attribute?","msgtype":"m.text"},"ts":1403903704000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I mean, does it apply to a elements?","msgtype":"m.text"},"ts":1403903704000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: boogie moogies are disabled if they have a disabled attribute set, where \"disabled attribute\" is specifically \"attr-fe-disabled\", which only some elements can have set","msgtype":"m.text"},"ts":1403903708000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ms2ger: I'd say no","msgtype":"m.text"},"ts":1403903712000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"which matches the ones listed in http://www.whatwg.org/specs/web-apps/current-work/multipage/common-idioms.html#concept-element-disabled","msgtype":"m.text"},"ts":1403903714000,"senderName":"abinader","senderId":"abinader@irc"},
{"content":{"body":"Hmm","msgtype":"m.text"},"ts":1403903717000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: <a disabled> doesn't have an attr-fe-disabled attribute set","msgtype":"m.text"},"ts":1403903725000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the widgety stuff is what I'd assume it talks about","msgtype":"m.text"},"ts":1403903727000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB, I don't care what you'd say, I care what the spec says :)","msgtype":"m.text"},"ts":1403903735000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hixie, that's pretty obscure","msgtype":"m.text"},"ts":1403903743000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: no disagreement from me there :-)","msgtype":"m.text"},"ts":1403903751000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ms2ger: clearly I'm right and the spec is wrong","msgtype":"m.text"},"ts":1403903752000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"where wrong could just include \"very unclear\"","msgtype":"m.text"},"ts":1403903767000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I'm still not implementing you ;)","msgtype":"m.text"},"ts":1403903775000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"good","msgtype":"m.text"},"ts":1403903783000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I'm full of bugs in general","msgtype":"m.text"},"ts":1403903787000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"tmi","msgtype":"m.text"},"ts":1403903804000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"just extend dbaron's desk a bit and we should be good","msgtype":"m.text"},"ts":1403903809000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wetware bugs, not, you know, actual insects or anything of that nature","msgtype":"m.text"},"ts":1403903824000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Ha","msgtype":"m.text"},"ts":1403903842000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: I don't get it","msgtype":"m.text"},"ts":1403903843000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"the conformant HTML4 desk?","msgtype":"m.text"},"ts":1403903851000,"senderName":"dbaron","senderId":"dbaron@irc"},
{"content":{"body":"you must be new here","msgtype":"m.text"},"ts":1403903852000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"intermittent, at least","msgtype":"m.text"},"ts":1403903864000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"dbaron: :-)","msgtype":"m.text"},"ts":1403903876000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie, I think that's worth a note, at least","msgtype":"m.text"},"ts":1403903908000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I honestly wasn't sure if annevk was referencing/making a joke, or referring to a piece of software","msgtype":"m.text"},"ts":1403903921000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Ms2ger: absolutely agreed","msgtype":"m.text"},"ts":1403903924000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ms2ger: file a bug :-)","msgtype":"m.text"},"ts":1403903927000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"called \"desk\", which while a fairly bad name for a piece of software, is not unimaginably bad","msgtype":"m.text"},"ts":1403903947000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"the former","msgtype":"m.text"},"ts":1403904003000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"though really it's not a joke but an analogy","msgtype":"m.text"},"ts":1403904011000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"specifically: any desk on which you carve two quote marks is a fully conforming implementation of HTML4","msgtype":"m.text"},"ts":1403904033000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(seriously. not a joke. find a requirement that such an implementation would violate, i dare you!)","msgtype":"m.text"},"ts":1403904061000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(in fact it's more conforming than most browsers, since browsers assume a default encoding!)","msgtype":"m.text"},"ts":1403904074000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Productive review... I'm not even done, and I've already filed three spec bugs","msgtype":"m.text"},"ts":1403904145000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hixie: what is the pair of quotes for, exactly?","msgtype":"m.text"},"ts":1403904159000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB, <q> is required to render with quote mars around it","msgtype":"m.text"},"ts":1403904180000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hixie: what does HTML4 say you have to do about encodings","msgtype":"m.text"},"ts":1403904188000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Ms2ger: lol","msgtype":"m.text"},"ts":1403904190000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB, that's understood to be the only actual requirement in HTML4","msgtype":"m.text"},"ts":1403904194000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"but no mention of how far around it?","msgtype":"m.text"},"ts":1403904205000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"or that each such element needs a distinct pair of quotes?","msgtype":"m.text"},"ts":1403904227000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: \"Visual user agents must ensure that the content of the Q element is rendered with delimiting quotation marks\"","msgtype":"m.text"},"ts":1403904243000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"SamB: (it's one of the few requirements)","msgtype":"m.text"},"ts":1403904250000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ms2ger: D3E?","msgtype":"m.text"},"ts":1403904253000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: such a sad spec","msgtype":"m.text"},"ts":1403904262000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh, so I a desk without the quotes is just a non-visual user agent","msgtype":"m.text"},"ts":1403904268000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"annevk, two D3E, one about the confusingness in HTML above","msgtype":"m.text"},"ts":1403904272000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"s/I //","msgtype":"m.text"},"ts":1403904273000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: \"Therefore, user agents must not assume any default value for the \"charset\" parameter\" is the requirement about encodings that i mentioned","msgtype":"m.text"},"ts":1403904284000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: ah","msgtype":"m.text"},"ts":1403904292000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"watches inbox zero go bust","msgtype":"m.emote"},"ts":1403904300000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"HTML4 is so silly","msgtype":"m.text"},"ts":1403904331000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: how naive are the peopel who wrote THAT requirement?","msgtype":"m.text"},"ts":1403904340000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I mean, it's pretty crazy ...","msgtype":"m.text"},"ts":1403904352000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB, have you read HTML4?","msgtype":"m.text"},"ts":1403904354000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: not lately","msgtype":"m.text"},"ts":1403904369000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"the web was young","msgtype":"m.text"},"ts":1403904370000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I think the main problem is that people are still writing specs HTML4-style","msgtype":"m.text"},"ts":1403904377000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and the people writing specs for it were young too","msgtype":"m.text"},"ts":1403904379000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I was probably at least as naive back when I would have read it","msgtype":"m.text"},"ts":1403904385000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"took a while to learn the lessons","msgtype":"m.text"},"ts":1403904389000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(unfortunately some never did and still edit specs at the w3c)","msgtype":"m.text"},"ts":1403904399000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you really need to give an \"or else you will be eaten by a giant bear\" or something, except something that is actually very bad and very easy to demonstrate","msgtype":"m.text"},"ts":1403904426000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Yeah, learning lessons takes long. Hard to fathom how XMLHttpRequest has evolved over eight years","msgtype":"m.text"},"ts":1403904447000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"like, \"or we will steal your computer from you and make you pay the electric bill\"","msgtype":"m.text"},"ts":1403904459000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"\"MUST NOT\" without teeth is quite silly","msgtype":"m.text"},"ts":1403904496000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"when its the sort of thing users will be wanting","msgtype":"m.text"},"ts":1403904517000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"first they make reasonable request like \"This document is clearly in ASCII, just parse it already\" ...","msgtype":"m.text"},"ts":1403904544000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"and it just goes downhill from their","msgtype":"m.text"},"ts":1403904554000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Only semi-related, but I like it when specs include undefined behavior, because then you can be a conforming implementation even if your response to the situation is indeed to mine bitcoins on the user's computer.","msgtype":"m.text"},"ts":1403904685000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic, might as well alert YOLO in an infinite loop","msgtype":"m.text"},"ts":1403904717000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Domenic: you're kidding, right?","msgtype":"m.text"},"ts":1403904731000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"do you really have a reason to like undefined behaviour, or do you really wish it could just go away like I assume most people do most of the time ...","msgtype":"m.text"},"ts":1403904791000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"not to confuse it with unspecified or implementation-defined behaviour","msgtype":"m.text"},"ts":1403904806000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Domenic: it wouldn't be non-conforming for an ES implementation to mine bitcoins from a user's computer even when not doign something undefined","msgtype":"m.text"},"ts":1403905253000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or most other specs for that matter, HTML, DOM, whatever","msgtype":"m.text"},"ts":1403905270000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"true","msgtype":"m.text"},"ts":1403905284000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"POSIX","msgtype":"m.text"},"ts":1403905289000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Ha, posix","msgtype":"m.text"},"ts":1403905318000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"not that conforming to POSIX is what you call \"wise\"","msgtype":"m.text"},"ts":1403905336000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Then again, isn't the goal of an ES implementation to let random sites mine bitcoins on your computer?","msgtype":"m.text"},"ts":1403905365000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: you must be thinking of WebGL","msgtype":"m.text"},"ts":1403905381000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I prefer not to","msgtype":"m.text"},"ts":1403905410000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"my main experience with WebGL is firefox telling me \"not can has ilt; you no has WebGL\"","msgtype":"m.text"},"ts":1403905443000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"*Tilt","msgtype":"m.text"},"ts":1403905449000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"darn enter key always gets in my way","msgtype":"m.text"},"ts":1403905456000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"My main experience is making Chrome crash","msgtype":"m.text"},"ts":1403905471000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I need to submit that test at some point","msgtype":"m.text"},"ts":1403905478000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"}
]