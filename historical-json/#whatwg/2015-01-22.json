[
{"content":{"body":"Cancelable functions...hrrm...looking for a use case...","msgtype":"m.text"},"ts":1421903818000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"JakeA: I don't understand why you keep bringing up WindowProxy","msgtype":"m.text"},"ts":1421929774000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I don't think it is what you think it is","msgtype":"m.text"},"ts":1421929783000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: possibly not. I thought it was one window's insight into another. Like the return from window.open()","msgtype":"m.text"},"ts":1421929961000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: no, it's basically a shield for the Window object (you never actually get to hold the Window object, instead you always have a reference to a WindowProxy object)","msgtype":"m.text"},"ts":1421930010000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: so it's very much unrelated","msgtype":"m.text"},"ts":1421930029000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: but it's the return of window.open, yeah?","msgtype":"m.text"},"ts":1421930099000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: and you can't have them in workers because of threads","msgtype":"m.text"},"ts":1421930114000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"window.open() does return a window proxy, as does window or frames[] or iframe.contentWindow, for example","msgtype":"m.text"},"ts":1421930263000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Ahh ok. So I see WindowClient as WindowProxy's worker-safe brother. Obviously it's very limited, and a state snapshot, but that's why I think windowClient.postMessage ends up in window.onmessage","msgtype":"m.text"},"ts":1421930573000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: it's the return value of everything that exposes the Window object, because the Window object is not directly exposed...","msgtype":"m.text"},"ts":1421931046000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: e.g. window.window also returns a WindowProxy","msgtype":"m.text"},"ts":1421931053000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: the analogy doesn't really make much sense to me; window.onmessage and window.postMessage() is for window objects that can directly grab each other; in fact, the window object you invoke postMessage() on gets a message event","msgtype":"m.text"},"ts":1421931256000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: that's completely different from sending messages between a document and a worker, which requires a message channel of sorts","msgtype":"m.text"},"ts":1421931276000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: hm, so it's breaking the model to suggest windowClient.postMessage is a way of posting a message to a window?","msgtype":"m.text"},"ts":1421931377000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: it seems quite different","msgtype":"m.text"},"ts":1421931462000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is collecting https://github.com/hemanth/coffeescript-equivalents-in-es6","msgtype":"m.emote"},"ts":1421932134000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"annevk: spotted a couple of dragdrop bugs, dunno who best to bug about them (or will they just get picked up?) https://bugzilla.mozilla.org/show_bug.cgi?id=1124645 https://bugzilla.mozilla.org/show_bug.cgi?id=1124646","msgtype":"m.text"},"ts":1421934294000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA, fwiw, web-platform bugs almost always go in the Core product","msgtype":"m.text"},"ts":1421934447000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: thanks for updating those!","msgtype":"m.text"},"ts":1421934509000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Np","msgtype":"m.text"},"ts":1421934568000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Are you using packages with vulnerable dependencies? http://nmotw.in/nsp/","msgtype":"m.emote"},"ts":1421935358000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"Did one of you Googlers try to get me hired?","msgtype":"m.text"},"ts":1421942881000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: Did someone mistake the Ms2ger AI as being a real person again? :)","msgtype":"m.text"},"ts":1421943429000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Apparently","msgtype":"m.text"},"ts":1421943473000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I always assumed that Ms2ger was the Googlebot","msgtype":"m.text"},"ts":1421943899000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1421944396000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"\"there are also several new platform features we are thrilled to be releasing in the next preview:\"","msgtype":"m.text"},"ts":1421949321000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"\"DOM L3 XPath\"","msgtype":"m.text"},"ts":1421949331000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"cries","msgtype":"m.emote"},"ts":1421949334000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: Microsoft is?","msgtype":"m.text"},"ts":1421949769000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yep","msgtype":"m.text"},"ts":1421949781000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"o_O","msgtype":"m.text"},"ts":1421949784000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I hope they implement the WHATWG edition","msgtype":"m.text"},"ts":1421949797000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: I just came to say the same thing :)","msgtype":"m.text"},"ts":1421951370000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"http://glazkov.com/2004/04/06/xpath-unleashed/","msgtype":"m.text"},"ts":1421953040000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I have always prefered http://glazkov.com/2004/02/22/html-css-and-other-curious-stuff/","msgtype":"m.text"},"ts":1421953218000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Along with contemporary classics like http://ln.hixie.ch/?start=1042630901&count=1","msgtype":"m.text"},"ts":1421953275000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"\"We (the CSS working group) sometimes let years pass between releasing drafts of our modules!\"","msgtype":"m.text"},"ts":1421953414000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Some things never change","msgtype":"m.text"},"ts":1421953418000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Well, it would take years before we could release a new draft of our process, so...","msgtype":"m.text"},"ts":1421953461000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: y'all need a better process process","msgtype":"m.text"},"ts":1421954227000,"senderName":"jamesr___","senderId":"jamesr___@irc"},
{"content":{"body":"But then it would take years for us to release a new process process draft, so...","msgtype":"m.text"},"ts":1421954246000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"man, medium.com is spammy","msgtype":"m.text"},"ts":1421955729000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"don't ever post there","msgtype":"m.text"},"ts":1421955745000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Is DOM 3 an appropriate spec to reference? Need some place to point a MouseEvent reference to.","msgtype":"m.text"},"ts":1421961814000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That does seem to be the latest place it's found :-/","msgtype":"m.text"},"ts":1421961996000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: HTML references it. So, probably.","msgtype":"m.text"},"ts":1421962032000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://html.spec.whatwg.org/multipage/infrastructure.html#mouseevent","msgtype":"m.text"},"ts":1421962044000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Cool.","msgtype":"m.text"},"ts":1421962047000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Also: AAAAAHHHHH I HATE THE CSS2 SPEC SO MUCH","msgtype":"m.text"},"ts":1421962058000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"They use, throughout the spec, <span class=\"index-def\" title=\"margin edge\"><a name=\"margin-edge\"><strong>margin edge</strong></a></span> rather than <dfn id=\"margin-edge\">margin edge</dfn>","msgtype":"m.text"},"ts":1421962097000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Interesting. Any good ideas for \"innerHTML, but on text nodes\"? The idea being that we want to preserve escapes. I guess maybe just htmlescape(textNode.textContent)?","msgtype":"m.text"},"ts":1421964149000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Wait, that's the opposite.  .innerHTML does *not* preserve escapes, while .textContent does.","msgtype":"m.text"},"ts":1421964196000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Or wait, is this on reading or writing?","msgtype":"m.text"},"ts":1421964218000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"reading","msgtype":"m.text"},"ts":1421964222000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Okay, opposite then.  And yeah, just escape things yourself.","msgtype":"m.text"},"ts":1421964235000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"writing you could do container.innerHTML = s.replace(\"<\", \"&gt;\"); no?","msgtype":"m.text"},"ts":1421964276000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"would that not be safe?","msgtype":"m.text"},"ts":1421964284000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Have to replace & first, *then* <.","msgtype":"m.text"},"ts":1421964298000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But then you're safe, yes.","msgtype":"m.text"},"ts":1421964303000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I thought we wanted escapes to be decoded","msgtype":"m.text"},"ts":1421964311000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"idk","msgtype":"m.text"},"ts":1421964312000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic: Really, though, you shouldn't be escaping things early like that. Escape at the point of use; that makes it less likely you'll run into double-escaping bugs.","msgtype":"m.text"},"ts":1421964344000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"https://github.com/bterlson/ecmarkup/issues/9 is the context","msgtype":"m.text"},"ts":1421964364000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"And when done consistently (or when done with an API that enforces it), it makes it less likely to run into zero-escapign bugs.","msgtype":"m.text"},"ts":1421964365000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: Yeah, you have to write out an &lt; in the output there, obviously.","msgtype":"m.text"},"ts":1421964393000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But do that as you're writing the strings, not when you read them.","msgtype":"m.text"},"ts":1421964407000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"we are extracting text nodes and passing them through a tool that outputs HTML. But extracting the text nodes via .textContent doesn't work very well.","msgtype":"m.text"},"ts":1421964417000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(for these purposes)","msgtype":"m.text"},"ts":1421964432000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The tool that outputs HTML should be escaping & and < in text.  If it's not, it's buggy.","msgtype":"m.text"},"ts":1421964456000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Because that's what \"outputting HTML\" means.","msgtype":"m.text"},"ts":1421964473000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(It should similarly escape & and the quote character in attributes.)","msgtype":"m.text"},"ts":1421964493000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(If it fills in attribute values from strings at any point.)","msgtype":"m.text"},"ts":1421964504000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yeah, but currently the tool lets you use HTML tags in your input :-/","msgtype":"m.text"},"ts":1421964544000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"which is a useful feature","msgtype":"m.text"},"ts":1421964553000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but only works by accident","msgtype":"m.text"},"ts":1421964562000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it sounds like maybe i need to make it work on purpose.","msgtype":"m.text"},"ts":1421964569000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Sounds like it's very unhygeinic, then, and is currently just letting things escape or not willy-nilly.","msgtype":"m.text"},"ts":1421964598000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If it wants to allow <div> as an HTML element, then it needs to distinguish between an input \"<\" and an input \"&lt;\".","msgtype":"m.text"},"ts":1421964630000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yes. Well, the *tool* (Ecmarkdown) does. But the process of figuring out what to feed to the tool is currently using textNode.textContent","msgtype":"m.text"},"ts":1421964662000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Okay? textNodes don't contain HTML. I'm confused about the architecture here. :/","msgtype":"m.text"},"ts":1421964866000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yes. I just realized I am too.","msgtype":"m.text"},"ts":1421964879000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Maybe the pass-through html doesn't work in the instance where this is occuring.","msgtype":"m.text"},"ts":1421964888000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I will report back!","msgtype":"m.text"},"ts":1421964932000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hahaha, ok.","msgtype":"m.text"},"ts":1421964936000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]