[
{"content":{"body":"wanderview: https://github.com/whatwg/fetch/pull/146","msgtype":"m.text"},"ts":1446450949000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: How is one supposed to use promise_rejects in testharness.js? You added it but I can't see it used anywhere.","msgtype":"m.text"},"ts":1446457821000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"annevk: yt?","msgtype":"m.text"},"ts":1446457835000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj, https://github.com/w3c/web-platform-tests/pull/1490/files","msgtype":"m.text"},"ts":1446457921000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"(In case you ever wanted to write tests for webcrypto: don't bother)","msgtype":"m.text"},"ts":1446457944000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"philipj: more or less","msgtype":"m.text"},"ts":1446457951000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: so it depends on promise_rejects being called before the then() and catch() inside promise_test are registered. I thought maybe it was intended to be used together with a bare async_test.","msgtype":"m.text"},"ts":1446458162000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"You ask me like you think I have code from a year ago paged in :)","msgtype":"m.text"},"ts":1446458202000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Well, you should. Obviously.","msgtype":"m.text"},"ts":1446458236000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Ms2ger: I expect nothing less from you :)","msgtype":"m.text"},"ts":1446458237000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"annevk: Do you expect that Gecko will implement webkitMatchesSelector()?","msgtype":"m.text"},"ts":1446458250000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"annevk: And do you have the full story about how it went from matchesSelector() to just matches()?","msgtype":"m.text"},"ts":1446458293000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: I expect we will","msgtype":"m.text"},"ts":1446458316000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I expect we have","msgtype":"m.text"},"ts":1446458330000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"https://bugzilla.mozilla.org/show_bug.cgi?id=1216193 shipping in 44","msgtype":"m.text"},"ts":1446458347000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: was this the first webkit-prefixed method to be added to Gecko?","msgtype":"m.text"},"ts":1446458366000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: not the full story, I ended up taking it from http://dev.w3.org/2006/webapi/selectors-api2/ which I assumed had agreement","msgtype":"m.text"},"ts":1446458370000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: I believe it was renamed because the other name was too long","msgtype":"m.text"},"ts":1446458387000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'm using this as a case study in the talk Rick Byers and I are giving at BlinkOn","msgtype":"m.text"},"ts":1446458399000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: it has been matches() since June 2012 it seems in the draft","msgtype":"m.text"},"ts":1446458426000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: well, per the published draft, not sure when it changed in the editor's copy","msgtype":"m.text"},"ts":1446458441000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: jQuery noticed the change in 2013-03: http://bugs.jquery.com/ticket/13629","msgtype":"m.text"},"ts":1446458467000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"Ms2ger: grep says the answer is yes. Would you happen to know what the first webkit-prefixed CSS properties in Gecko were?","msgtype":"m.text"},"ts":1446458560000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"Ms2ger: And if you have any good stories about site compat that contains lessons for Blink developers, I'm making a collection :)","msgtype":"m.text"},"ts":1446458701000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"https://bugzilla.mozilla.org/show_bug.cgi?id=837211 is relevant","msgtype":"m.text"},"ts":1446458868000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Also https://bugzilla.mozilla.org/show_bug.cgi?id=1132745","msgtype":"m.text"},"ts":1446458881000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"https://bugzilla.mozilla.org/show_bug.cgi?id=1160281","msgtype":"m.text"},"ts":1446458893000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"philipj: ah right, only the prefix variant was implemented","msgtype":"m.text"},"ts":1446458948000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: that's probably why editors assumed the change was safe while in fact it was already too late","msgtype":"m.text"},"ts":1446458974000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Right, it was prefixed only for a very long time, and I guess this was before anyone had understood what fallback code looks like, or they thought that libraries would update and propagate the change.","msgtype":"m.text"},"ts":1446459275000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"Ms2ger: thanks!","msgtype":"m.text"},"ts":1446459308000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"> they thought that libraries would update and propagate the change.","msgtype":"m.text"},"ts":1446459325000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1446459326000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: right, but there must have been a time where that seemed plausible","msgtype":"m.text"},"ts":1446459340000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"and they thought that people would update the libraries","msgtype":"m.text"},"ts":1446459369000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gotta go","msgtype":"m.text"},"ts":1446459479000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"doesn't remember a time when people believed that libraries would update","msgtype":"m.emote"},"ts":1446459972000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Well maybe in 2005 or something","msgtype":"m.text"},"ts":1446459980000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"\"people\" being clueful people ofc","msgtype":"m.text"},"ts":1446459997000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Some peopel still think that","msgtype":"m.text"},"ts":1446460001000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"philipj: I think it's very similar to the fullscreen situation","msgtype":"m.text"},"ts":1446460328000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: which I suppose is largely my fault for insisting fullscreen is a single word","msgtype":"m.text"},"ts":1446460358000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: https://github.com/whatwg/fetch/issues/39#issuecomment-141043738","msgtype":"m.text"},"ts":1446466064000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Would https://github.com/whatwg/fetch/issues/19 be fitting for the HTML Standard?","msgtype":"m.text"},"ts":1446466131000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"isn't quite sure where to move it","msgtype":"m.emote"},"ts":1446466138000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yep, I guess that one's on you :)","msgtype":"m.text"},"ts":1446468592000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"fullScreen is fairly hideous though","msgtype":"m.text"},"ts":1446468627000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, so is webkitFullScreen ;)","msgtype":"m.text"},"ts":1446472703000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: navigator.onLine is my favorite capitalization","msgtype":"m.text"},"ts":1446473011000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: wat.","msgtype":"m.text"},"ts":1446473173000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: awesome, right?","msgtype":"m.text"},"ts":1446473244000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: if by \"awesome\" you mean \"makes me want to rip my eyes out\", yes.","msgtype":"m.text"},"ts":1446473280000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"yes, isn't that what the dictionary says?","msgtype":"m.text"},"ts":1446473304000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"uhhh","msgtype":"m.text"},"ts":1446473358000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"https://zcorpan.github.io/live-webvtt-viewer/","msgtype":"m.text"},"ts":1446478056000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i don't know why it doesn't work in firefox","msgtype":"m.text"},"ts":1446478096000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hixie: the csswg-test contains tests originally from hixie.ch that have been imported, but with some images. I presume you're happy licensing-wise to include them?","msgtype":"m.text"},"ts":1446478467000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hixie: with some images still referencing hixie.ch, I mean","msgtype":"m.text"},"ts":1446478480000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: Hello, submitted the proposal, do you want to suggest any particular ideas for it, the deadline is today for the proposal submissions","msgtype":"m.text"},"ts":1446479765000,"senderName":"rits","senderId":"rits@irc"},
{"content":{"body":"JakeA: ping","msgtype":"m.text"},"ts":1446480505000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"sorry, unping","msgtype":"m.text"},"ts":1446480534000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: no worries! Let me know if there's anything else you don't need me for :D","msgtype":"m.text"},"ts":1446480665000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I found the text in the spec","msgtype":"m.text"},"ts":1446480677000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: was wondering if the waitUntil() timeout killing a long running worker was spec'd to fail install... and it is","msgtype":"m.text"},"ts":1446480717000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"ahhhh, yeah, that sounds like the right thing to do","msgtype":"m.text"},"ts":1446480747000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"\" If task is discarded or the script has been aborted by the termination of installingWorker, set installFailed to true.\"","msgtype":"m.text"},"ts":1446480760000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"https://streams.spec.whatwg.org/#transform-stream talks about a text decoder being a kind of a transform stream","msgtype":"m.text"},"ts":1446482191000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"but","msgtype":"m.text"},"ts":1446482194000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"streames otherwise seem to deal with bytes while text in JS is UTF-16","msgtype":"m.text"},"ts":1446482214000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"are there actually byte streams and UTF-16 streams?","msgtype":"m.text"},"ts":1446482225000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: ReadableStream() can pass chunks of any type....  its up to the producer of the stream to say what the type is","msgtype":"m.text"},"ts":1446482247000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"searching the spec for the obvious words doesn't result in search matches explaining this","msgtype":"m.text"},"ts":1446482252000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"wanderview: ok. https://streams.spec.whatwg.org/#chunk could use way more explanatory text","msgtype":"m.text"},"ts":1446482284000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: if you don't mind, best way to get it fixed is to file an issue: https://github.com/whatwg/streams/issues/new","msgtype":"m.text"},"ts":1446482336000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: ok","msgtype":"m.text"},"ts":1446482344000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"is there a place where text decoding in Streams is being specced for the case where the stream with Uint8Array chunks doesn't guarantee chunks to contain complete byte sequences from the point of view of an encoding?","msgtype":"m.text"},"ts":1446482406000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"i.e. does the text decoder transform exist spec-wise yet?","msgtype":"m.text"},"ts":1446482462000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: I'm not sure if work has begin to integrate streams into other APIs yet, besides fetch()","msgtype":"m.text"},"ts":1446482514000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"hsivonen: I guess Domenic would know, though","msgtype":"m.text"},"ts":1446482523000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: OK. thanks.","msgtype":"m.text"},"ts":1446482562000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: there is some question if things should take streams or Response objects... since Response objects also have headers","msgtype":"m.text"},"ts":1446482586000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"hsivonen: it seems you could also file a bug against the encoding spec to add streams support: https://github.com/whatwg/encoding/issues","msgtype":"m.text"},"ts":1446482856000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: OK","msgtype":"m.text"},"ts":1446482869000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"it looks like TextDecoder spec already has streaming support but eof handling in the streaming case doesn't work","msgtype":"m.text"},"ts":1446483241000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"as in","msgtype":"m.text"},"ts":1446483244000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"doesn't work in our impl","msgtype":"m.text"},"ts":1446483247000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"and I don't see the spec covering the case properly","msgtype":"m.text"},"ts":1446483256000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"JakeA: what about if the browser timeouts out activateEvent.waitUntil()... is the SW still active?  the spec suggests it should be... see steps 16 and 17 here: https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#activation-algorithm","msgtype":"m.text"},"ts":1446483412000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"files an issue","msgtype":"m.emote"},"ts":1446483937000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"rits: I was planning to review the proposals sometime this week, several have applied thus far","msgtype":"m.text"},"ts":1446483993000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rits: no thoughts at the moment","msgtype":"m.text"},"ts":1446484006000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: did you see my request for review?","msgtype":"m.text"},"ts":1446484021000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: https://github.com/whatwg/fetch/pull/146","msgtype":"m.text"},"ts":1446484036000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: no, I did not","msgtype":"m.text"},"ts":1446484053000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I'll look today","msgtype":"m.text"},"ts":1446484066000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: ok sure :)","msgtype":"m.text"},"ts":1446484114000,"senderName":"rits","senderId":"rits@irc"},
{"content":{"body":"wanderview: thank you","msgtype":"m.text"},"ts":1446484245000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rits: still recovering a bit from the jet lag too, got back last night","msgtype":"m.text"},"ts":1446484276000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: found the answer to my last question... filed a spec issue for a note, though: https://github.com/slightlyoff/ServiceWorker/issues/776","msgtype":"m.text"},"ts":1446484321000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: oh, no problem, you took out the time to review my application in your busy schedule that was enough for me, thanks a lot for that :)","msgtype":"m.text"},"ts":1446484424000,"senderName":"rits","senderId":"rits@irc"},
{"content":{"body":"wanderview: btw, opaque stream is basically a stream for all intents and purposes but only privileged code (read: the user agent) gets to see the bytes","msgtype":"m.text"},"ts":1446484778000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: and thank you in advance for the review","msgtype":"m.text"},"ts":1446484876000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: this seems to create a whole new vector of opaque tainting to be implemented...","msgtype":"m.text"},"ts":1446485081000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: pass an opaque stream to a DOM implemented decoder, and the decoder has to produce an opaque stream, right?","msgtype":"m.text"},"ts":1446485104000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"etc, etc","msgtype":"m.text"},"ts":1446485110000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: what do you mean by \"a DOM implemented decoder\"?","msgtype":"m.text"},"ts":1446485442000,"senderName":"yhirano_","senderId":"yhirano_@irc"},
{"content":{"body":"yhirano_: like if https://encoding.spec.whatwg.org/ grew support for streams... it would in theory be a transform","msgtype":"m.text"},"ts":1446485483000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"yhirano_: yet, if it took an opaque stream it would now have to be smart enough to pass on the opaqueness, etc","msgtype":"m.text"},"ts":1446485500000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"yhirano_: maybe we need this, but it seems to add some non-trivial complexity","msgtype":"m.text"},"ts":1446485567000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"yhirano_: for example, var r = new Response(url, { body: anOpaqueBody }) gives a non-opaque Response with an opaque body... that has to be propagated through Cache, etc...","msgtype":"m.text"},"ts":1446485606000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: Body.text() and so on don't recognize opaque streams. I thought it would be similar for other decoders","msgtype":"m.text"},"ts":1446485607000,"senderName":"yhirano_","senderId":"yhirano_@irc"},
{"content":{"body":"yhirano_: well I guess thats the question... what recognizes these things and what doesn't... its hard to tell from the current spec issue","msgtype":"m.text"},"ts":1446485703000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: agreed.","msgtype":"m.text"},"ts":1446485917000,"senderName":"yhirano_","senderId":"yhirano_@irc"},
{"content":{"body":"I'm trying to figure out what the intended guarantees are with regards to requestIdleCallback. Specifically around what happens if the request context gets closed before the queue is exhausted. Maybe when the second parameter is passed, it is expected to run in case of page unload? I'm implementing a very basic fallback but want to make sure behaviour is the","msgtype":"m.text"},"ts":1446493744000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"same.","msgtype":"m.text"},"ts":1446493744000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"The semantics rather.","msgtype":"m.text"},"ts":1446493769000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"odinho: Just for the sake of process, do you want to give the objectStoreNames test approval via https://critic.hoppipolla.co.uk/r/5899 ?","msgtype":"m.text"},"ts":1446502248000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"I prefer critic, -- but for some reason didn't use it on the first of your reviews :)","msgtype":"m.text"},"ts":1446502696000,"senderName":"odinho","senderId":"odinho@irc"},
{"content":{"body":"jsbell: critic is not required, -- can use the GH review system (though it's quite bad for bigger reviews) :)  But I clicked the button in critic now :9","msgtype":"m.text"},"ts":1446502751000,"senderName":"odinho","senderId":"odinho@irc"},
{"content":{"body":"odinho: Okay, just don't want to face the angry wrath of j-graham :)","msgtype":"m.text"},"ts":1446502813000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"^_*","msgtype":"m.text"},"ts":1446502975000,"senderName":"odinho","senderId":"odinho@irc"},
{"content":{"body":"odinho: want to do the merge? (I seem to recall instructions saying \"do not hit the merge button in the web ui\" but not finding them now...)","msgtype":"m.text"},"ts":1446503813000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Sorry, feeling rusty. :P","msgtype":"m.text"},"ts":1446503825000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":":P","msgtype":"m.text"},"ts":1446504074000,"senderName":"odinho","senderId":"odinho@irc"}
]