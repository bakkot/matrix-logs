[
{"content":{"body":"Hmm, found a bug with the redirect script. Clicking Table of Contents redirects to indices.html#index","msgtype":"m.text"},"ts":1504160357000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Can anyone enlighten me on the difference between these two things: https://gist.github.com/tobie/13840ae7dd7dae00ab498f5d55c82ca9?","msgtype":"m.text"},"ts":1504164432000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"What's the benefit of using a mixin over a partial in such cases?","msgtype":"m.text"},"ts":1504164579000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"What elements should editors consider when deciding between one or the other?","msgtype":"m.text"},"ts":1504164618000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: that should be a partial, but html-build is being annoying","msgtype":"m.text"},"ts":1504164675000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Oh!","msgtype":"m.text"},"ts":1504164690000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: That was my impression too. Will add a note to this effect in mixins.","msgtype":"m.text"},"ts":1504164726000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I might even just put it straight on Window actually when I have some time, it's all in the same spec anyway","msgtype":"m.text"},"ts":1504164726000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I've seen that pattern elsewhere recently, hence the question","msgtype":"m.text"},"ts":1504164778000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: eg: https://gist.github.com/tobie/999f7d5bcc3a7767f75945ad683162bb","msgtype":"m.text"},"ts":1504164836000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: that's different","msgtype":"m.text"},"ts":1504164939000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: that's a mixin","msgtype":"m.text"},"ts":1504164942000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: that could use partial interface  WindowOrWorkerGlobalScope though","msgtype":"m.text"},"ts":1504164979000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1504164992000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: for  WindowOrWorkerGlobalScope we'll need partial mixins, not sure if you already identified that","msgtype":"m.text"},"ts":1504164995000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yes.","msgtype":"m.text"},"ts":1504165055000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: https://github.com/whatwg/wattsi/issues/37 still applies?","msgtype":"m.text"},"ts":1504165487000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: oh maybe","msgtype":"m.text"},"ts":1504165566000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: yeah it does","msgtype":"m.text"},"ts":1504165583000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: when we made html.spec.whatwg.org cgi free we didn't fix wattsi","msgtype":"m.text"},"ts":1504165604000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: Domenic probably knows what to do","msgtype":"m.text"},"ts":1504165613000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok, I assigned the issue to him","msgtype":"m.text"},"ts":1504165670000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I disabled the webhook for now","msgtype":"m.text"},"ts":1504165687000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Interfaces vs mixins vs namespaces: https://user-images.githubusercontent.com/3392/29916512-4f6a5b98-8e3f-11e7-923d-6c465c6c2352.jpg","msgtype":"m.text"},"ts":1504171708000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"looks reasonable","msgtype":"m.text"},"ts":1504171805000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"good","msgtype":"m.text"},"ts":1504173307000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"JakeA: btw, can you make changes to https://github.com/whatwg/fetch/pull/523 as new commits?","msgtype":"m.text"},"ts":1504173921000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: we can just squash & merge when landing","msgtype":"m.text"},"ts":1504173931000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok. I was squashing as I went along because it was easier to deal with rebase conflicts. I've been trying to keep up with master","msgtype":"m.text"},"ts":1504174003000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"but we can leave that until merge time","msgtype":"m.text"},"ts":1504174017000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I think it's fair to squash after a round of reviews, but for new feedback having separate commits makes it easy to see if the feedback got addressed","msgtype":"m.text"},"ts":1504174251000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: gotcha","msgtype":"m.text"},"ts":1504174275000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"question: is there any history behind \"Please leave your sense of logic at the door, thanks!\"? sounds like an inside joke or something that I havent' been able to figure out","msgtype":"m.text"},"ts":1504183957000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: The Web grew organically,","msgtype":"m.text"},"ts":1504184053000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"TimothyGu: much of the web platform being totally nonsensical and undesigned","msgtype":"m.text"},"ts":1504184055000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"and sometimes make no sense.","msgtype":"m.text"},"ts":1504184059000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"makes*","msgtype":"m.text"},"ts":1504184063000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"ah okay, that","msgtype":"m.text"},"ts":1504184083000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"(it's been in the topic for idk how long, over a decade I'm pretty sure, back when most work in here was on HTML and trying to reverse engineer browser behaviour)","msgtype":"m.text"},"ts":1504184113000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"thanks people","msgtype":"m.text"},"ts":1504184148000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"Dates back to 2006 at least: https://krijnhoetmer.nl/irc-logs/whatwg/20061201","msgtype":"m.text"},"ts":1504184212000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"pretty sure it was here when I joined a month or two before that","msgtype":"m.text"},"ts":1504184226000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"What were you then, ten years old?","msgtype":"m.text"},"ts":1504184258000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"something like that","msgtype":"m.text"},"ts":1504184271000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"hm","msgtype":"m.text"},"ts":1504184376000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"is Hixie not active in whatwg anymore?","msgtype":"m.text"},"ts":1504184385000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"Hasn't been for a few years now, I think","msgtype":"m.text"},"ts":1504184419000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"ok..","msgtype":"m.text"},"ts":1504184455000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"i'm just looking over the irc channel stats lol","msgtype":"m.text"},"ts":1504184471000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"AFAIK he works on Flutter nowadays","msgtype":"m.text"},"ts":1504184595000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"so I'm calling Promise.resolve(promise) but promise.then seemingly never gets called? have I misudnerstood something?","msgtype":"m.text"},"ts":1504185127000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"like, even Promise.resolve(pending_promise).then(function(){alert(1);}); doesn't do anything","msgtype":"m.text"},"ts":1504185267000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic: did I see you comment on a github issue about xhr not triggering an error event if the window is closed?","msgtype":"m.text"},"ts":1504185529000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"(Two years, apparently)","msgtype":"m.text"},"ts":1504185770000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"More than that I thought","msgtype":"m.text"},"ts":1504185908000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But maybe","msgtype":"m.text"},"ts":1504185911000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"nah, seems about right","msgtype":"m.text"},"ts":1504185918000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"JakeA: do you know about my question above regarding XHR and window close? ^^^","msgtype":"m.text"},"ts":1504185931000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"That's what the git history claims","msgtype":"m.text"},"ts":1504185937000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"But I guess he was starting to disappear for a while before that","msgtype":"m.text"},"ts":1504185964000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"a long while before that","msgtype":"m.text"},"ts":1504185973000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"JakeA: we have a bug about FF rejecting fetch() promises when the window is navigated, but apparently chrome doesn't reject in that case... wondering if chrome is following some xhr behavior, etc? https://bugzilla.mozilla.org/show_bug.cgi?id=1280189","msgtype":"m.text"},"ts":1504185989000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"might be relevant for the abort spec PR","msgtype":"m.text"},"ts":1504185999000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"more completely, Promise.resolve(new Promise(function(){})).then(function(){console.log(1);}); returns a still pending promise","msgtype":"m.text"},"ts":1504186092000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"which isn't what I understood Promise.resolve to do with a promise as an argument?","msgtype":"m.text"},"ts":1504186102000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Doesn't it wait for microtasks?","msgtype":"m.text"},"ts":1504186134000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"it should still eventually resolve, then, though?","msgtype":"m.text"},"ts":1504186154000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"wanderview: hmm, I'm not sure what the correct behaviour is here, but I agree we should spec it. I guess Firefox is performing https://fetch.spec.whatwg.org/#concept-fetch-group-terminate","msgtype":"m.text"},"ts":1504186216000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: not sure what the spec says, but it seems we may avoid doing the XHR event on navigation because we check to see if the window is still the current, active one: http://searchfox.org/mozilla-central/source/dom/xhr/XMLHttpRequestMainThread.cpp#1389","msgtype":"m.text"},"ts":1504186469000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"promise rejection probably doesn't do that","msgtype":"m.text"},"ts":1504186475000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"maybe we shouldn't reject a promise on an inactive window?","msgtype":"m.text"},"ts":1504186508000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"As a user I would not expect a rejection here - I would expect cancellation flow","msgtype":"m.text"},"ts":1504186516000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"I would expect it to behave exactly like aborting with an AbortController","msgtype":"m.text"},"ts":1504186540000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"That would be an AbortError rejection","msgtype":"m.text"},"ts":1504186540000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"which currently gets converted to a NetworkError by fetch API, right?","msgtype":"m.text"},"ts":1504186567000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"If it goes through a service worker, yeah","msgtype":"m.text"},"ts":1504186600000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1504186619000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"right, I guess my glitch test showed AbortError","msgtype":"m.text"},"ts":1504186642000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"for some reason I thought fetch() always rejected with NetworkError","msgtype":"m.text"},"ts":1504186655000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Nah, almost always TypeError","msgtype":"m.text"},"ts":1504186668000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"but now AbortError :D","msgtype":"m.text"},"ts":1504186673000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(if it's an abort)","msgtype":"m.text"},"ts":1504186681000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"is getting himself confused.","msgtype":"m.emote"},"ts":1504186692000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I gave a short talk on why fetch is cool after people complained about the API not being as nice as axios for some stuff - I used `AbortController` as if it has been there forever and no one called my bluff :D","msgtype":"m.text"},"ts":1504186715000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"But if something else aborts the connection, like the browser, should that show up as an abort?","msgtype":"m.text"},"ts":1504186718000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Because the dev didn't abort it, the browser did","msgtype":"m.text"},"ts":1504186736000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: in my glitch test I seem to get TypeError","msgtype":"m.text"},"ts":1504186744000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I think so, I also think that's what XHR does","msgtype":"m.text"},"ts":1504186748000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"(in terms of showing to the user)","msgtype":"m.text"},"ts":1504186758000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"As in, if the server aborts, that *doesn't* show up as an abort error","msgtype":"m.text"},"ts":1504186758000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"that's just a connection failure","msgtype":"m.text"},"ts":1504186763000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"If the server aborts that's different because the server closed the socket and not the client","msgtype":"m.text"},"ts":1504186776000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"well, I mean... I just tried loading my glitch test and navigated away while it was running... saw a TypeError displayed briefly before the next page appeared","msgtype":"m.text"},"ts":1504186797000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"But if the browser cuts you off, is that \"Ahh yes, this is just an abort\", or \"wtf I was cut off\"?","msgtype":"m.text"},"ts":1504186819000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I kind of think it should be an AbortError","msgtype":"m.text"},"ts":1504186847000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"but I dunno","msgtype":"m.text"},"ts":1504186853000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"If the browser cuts you off for navigation, I'd expect \"Ahh yes, this is just an abort\" but not if the server aborts it.","msgtype":"m.text"},"ts":1504186877000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"The reason is that if I have my own single page app - this is the behavior I'd expect navigation to have","msgtype":"m.text"},"ts":1504186897000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"benjamingr_: what if the user cuts you off by hittin the X in their browser?","msgtype":"m.text"},"ts":1504186905000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"That's still an abort","msgtype":"m.text"},"ts":1504187391000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"Ok, cheers!","msgtype":"m.text"},"ts":1504187408000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I'm just going off my intuition here - none of what I'm saying is backed up by anything other than my feeling about what I'd expect, by the way :D","msgtype":"m.text"},"ts":1504187414000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"yeah, I'm still trying to figure it out","msgtype":"m.text"},"ts":1504187841000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: riddle me this... outer fetch() is intercepted, FetchEvent is dispatched on worker thread, outer fetch() is aborted while FetchEvent is being processed... what should happen?","msgtype":"m.text"},"ts":1504191630000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"should the outer fetch() reject with AbortError immediately?  or should it wait for the FetchEvent in some way?","msgtype":"m.text"},"ts":1504191655000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: immediate abort","msgtype":"m.text"},"ts":1504191716000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: the worker is like the network at this point. It may or may not abort, it may abort after some time, but as far as the page is concerned, it's aborted","msgtype":"m.text"},"ts":1504191759000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: what about a respondWith() called after that?  does it silently just eat the response or does it reject or something?","msgtype":"m.text"},"ts":1504191767000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"does it keep the SW alive?","msgtype":"m.text"},"ts":1504191785000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: silent I think. It may not keep the sw alive, but waitUntil should. fetchEvent.request.signal will have signalled abort","msgtype":"m.text"},"ts":1504191826000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: in theory we could let respondWith() still keep the SW alive and trust that the FetchEvent.request.signal would abort that promise in most cases","msgtype":"m.text"},"ts":1504192278000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: true, I'm fine with that","msgtype":"m.text"},"ts":1504192302000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: with the new scripts wattsi should be updated each time, in theory","msgtype":"m.text"},"ts":1504196910000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: cool, so I can remove the Webhook completely then","msgtype":"m.text"},"ts":1504197839000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah, yep","msgtype":"m.text"},"ts":1504197848000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"done","msgtype":"m.text"},"ts":1504197861000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"currently, NoInterfaceObject interfaces have an interface prototype object. Do we need to keep something similar for mixins (for web compat reasons) or can we basically treat mixins as a purely IDL construct (similarly to partials)?","msgtype":"m.text"},"ts":1504197911000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Answering my own question: \"If the interface is used solely as a supplemental interface, then there will be no way to access its interface prototype object, since no object will have the interface prototype object as its internal [[Prototype]] property value. In such cases, it is an acceptable optimization for this object not to exist.\"","msgtype":"m.text"},"ts":1504198265000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Mmm,  it seems https://heycam.github.io/webidl/#es-constants says nothing about constants defined on consequential interfaces. It that by design or is that a mistake?","msgtype":"m.text"},"ts":1504199500000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"(For comparison, https://heycam.github.io/webidl/#es-attributes is explicit about this: \"For each exposed attribute of the interface, whether it was declared on the interface itself or one of its consequential interfaces, […]\"","msgtype":"m.text"},"ts":1504199558000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: ^","msgtype":"m.text"},"ts":1504199584000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: seems like an oversight, although maybe the intent was you can't declare constants on our current way of doing mixins","msgtype":"m.text"},"ts":1504199704000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: some do declare constants (e.g. in WebGL)","msgtype":"m.text"},"ts":1504199738000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1504199745000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: seems like an oversight, as operations is also missing this","msgtype":"m.text"},"ts":1504199754000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I mean maybe it's just a redundant clause","msgtype":"m.text"},"ts":1504199773000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(again answering my own questions, I might be getting tired)","msgtype":"m.text"},"ts":1504199773000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"possibly. Would be good to be consistent.","msgtype":"m.text"},"ts":1504199798000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Or better to move to a more imperative style.","msgtype":"m.text"},"ts":1504199810000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"+1 imperative, as always","msgtype":"m.text"},"ts":1504202125000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"what are objects that define their own [[get]], [[set]], etc. called nowadays?","msgtype":"m.text"},"ts":1504204436000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(or, rather, objects from WebIDL that do this)","msgtype":"m.text"},"ts":1504204449000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: https://heycam.github.io/webidl/#es-legacy-platform-objects ?","msgtype":"m.text"},"ts":1504205931000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I guess I was thinking more something along the lines of what the ES spec used to call \"host objects\". Is there any term still defined in ES for such things?","msgtype":"m.text"},"ts":1504208712000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: \"exotic objects\"","msgtype":"m.text"},"ts":1504209508000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"semantics may not be identical, tho","msgtype":"m.text"},"ts":1504209557000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Not quite the same, but new system has no place for host objects","msgtype":"m.text"},"ts":1504209569000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"All objects need to conform to the MOP","msgtype":"m.text"},"ts":1504209595000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh, yes, exotic objects. Defined here: https://tc39.github.io/ecma262/#sec-exotic-object","msgtype":"m.text"},"ts":1504209692000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I need to distinguish \"mixins included by interface A\" from \"mixins included by interface A and by inherited interfaces of A\"","msgtype":"m.text"},"ts":1504209869000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"what can I call these knowing that the latter one is the one most commonly used across the spec? (Corresponds to the former \"Consequential interfaces of A\")","msgtype":"m.text"},"ts":1504209948000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"\"own interfaces\"?","msgtype":"m.text"},"ts":1504209978000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: \"own mixins\" would be for the former, right?","msgtype":"m.text"},"ts":1504210047000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1504210055000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: and you'd call the latter just \"mixins of\"","msgtype":"m.text"},"ts":1504210064000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1504210069000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"This is a lot more straightforward than consequential interfaces. I'm not sure it's acceptable.","msgtype":"m.text"},"ts":1504210121000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"WebIDL needs to be obscure and complicated, dammit!","msgtype":"m.text"},"ts":1504210150000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"That's super helpful, TabAtkins. Thanks.","msgtype":"m.text"},"ts":1504210176000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"^_^","msgtype":"m.text"},"ts":1504210377000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jsbell: ahhh, thx","msgtype":"m.text"},"ts":1504211171000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: yeah,  I knew they'd been changed as part of the rename","msgtype":"m.text"},"ts":1504211181000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Do callback interfaces support maplike and setlike declarations? The spec isn't clear about this.","msgtype":"m.text"},"ts":1504219168000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"They shouldn't? They're just a legacy feature around callback functions.","msgtype":"m.text"},"ts":1504220568000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"^ that","msgtype":"m.text"},"ts":1504220573000,"senderName":"Domenic","senderId":"Domenic@irc"}
]