[
{"content":{"body":"Lachy: I now have <!--begin-link-->http://example.com<!--end-link--> working","msgtype":"m.text"},"ts":1216339920000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"is there some more abbreviated syntax you could use insted? Perhaps wiki style: [http://example.com/]","msgtype":"m.text"},"ts":1216340040000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"I suggest <a href=\"http://example.com\">","msgtype":"m.text"},"ts":1216340041000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Heh. The entire point is to _AVOID_ that.","msgtype":"m.text"},"ts":1216340100000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"We want something to become the content of a link","msgtype":"m.text"},"ts":1216340101000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Philip`, we want to avoid using that because it's for the situations where the link text is the URL itself","msgtype":"m.text"},"ts":1216340102000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"i.e., that above example becomes <a href=http://example.com>http://example.com</a>","msgtype":"m.text"},"ts":1216340103000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Ah, I can see how it's a terrible burden to have to copy-and-paste a bit of text onto the same line","msgtype":"m.text"},"ts":1216340160000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Lachy: Is [DATE] a relative URL, or is it wanting the current date?","msgtype":"m.text"},"ts":1216340161000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"maybe it would have to be [URL http://.../]","msgtype":"m.text"},"ts":1216340162000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"gsnedders, it's just the current date","msgtype":"m.text"},"ts":1216340280000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"that's why [URL ...] would work","msgtype":"m.text"},"ts":1216340281000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Yeah, sure","msgtype":"m.text"},"ts":1216340282000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I'd suggest [[]], but then we hit issues with biblio","msgtype":"m.text"},"ts":1216340340000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"yep, that's why I didn't suggest it","msgtype":"m.text"},"ts":1216340341000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"the W3C processor seems to accept random crap within \"[DATE ... ]\"","msgtype":"m.text"},"ts":1216340342000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"It needs a colon, does it not?","msgtype":"m.text"},"ts":1216340400000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(at least it does if you believe the docs)","msgtype":"m.text"},"ts":1216340401000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"dunno, will test","msgtype":"m.text"},"ts":1216340402000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"no colon needed","msgtype":"m.text"},"ts":1216340403000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"man, this preprocessor does way more than i use it for :-)","msgtype":"m.text"},"ts":1216341000000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yeah, you barely use it :)","msgtype":"m.text"},"ts":1216341060000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"It also does all kinds of stuff that people rely upon that aren't in the docs","msgtype":"m.text"},"ts":1216341061000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"like [LONGSTATUS]","msgtype":"m.text"},"ts":1216341062000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"wtf is longstatus","msgtype":"m.text"},"ts":1216341063000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"W3C Working Draft\", for example","msgtype":"m.text"},"ts":1216341120000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"i remember trying to use that stuff and it would never work","msgtype":"m.text"},"ts":1216341121000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i actually have to escape one of the stylesheet URLs to prevent it from screwing it up","msgtype":"m.text"},"ts":1216341122000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(opposed to [STATUS] which would give \"WD\")","msgtype":"m.text"},"ts":1216341123000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hixie: Because it changes it? Yeah, it's weird.","msgtype":"m.text"},"ts":1216341124000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"maybe that was before ED was supported","msgtype":"m.text"},"ts":1216341125000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"anyway WHATWG drafts don't have that problem","msgtype":"m.text"},"ts":1216341180000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":":-)","msgtype":"m.text"},"ts":1216341181000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I can tell you how it gets the status, after several hours of trying to work that out :P","msgtype":"m.text"},"ts":1216341182000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":":-)","msgtype":"m.text"},"ts":1216341240000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hint: Everything the docs says about [STATUS] is wrong.","msgtype":"m.text"},"ts":1216341241000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"i take it it is a completely different way than the way the pubrules checker gets it?","msgtype":"m.text"},"ts":1216341242000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"there are docs?","msgtype":"m.text"},"ts":1216341243000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"dunno. Haven't tried :)","msgtype":"m.text"},"ts":1216341244000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"insofar as http://www.w3.org/Style/Group/css3-src/bin/README.html is a doc, yes","msgtype":"m.text"},"ts":1216341300000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"oh hey what was it you wanted me to change in html5?","msgtype":"m.text"},"ts":1216341301000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Not that I have a copy of that, obviously","msgtype":"m.text"},"ts":1216341302000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hixie: I can't remember.","msgtype":"m.text"},"ts":1216341303000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1216341304000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: We can try and work that out once it's done: run the spec through in w3c-compat and not, then diff it","msgtype":"m.text"},"ts":1216341305000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ok well just let me know when you know :-)","msgtype":"m.text"},"ts":1216341420000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Ah, it was that you rely on \"setInterval(...)\" being the same as \"setInterval\" for xref","msgtype":"m.text"},"ts":1216341421000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"oh that's gonna be all over the place","msgtype":"m.text"},"ts":1216341422000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I was guessing that :P","msgtype":"m.text"},"ts":1216341480000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I don't like that behaviour, so it's w3c-compat only :D","msgtype":"m.text"},"ts":1216341481000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Lachy: I could just check that [foo] was an absolute URL","msgtype":"m.text"},"ts":1216341540000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"oh actually that doesn't happen as much as i expected","msgtype":"m.text"},"ts":1216341600000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I can give you something that will show everywhere where it does :P","msgtype":"m.text"},"ts":1216341601000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"fixed those i could find","msgtype":"m.text"},"ts":1216341602000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1216341603000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Wow. that's a lot.","msgtype":"m.text"},"ts":1216341840000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Actually, no, that's me being stupid.","msgtype":"m.text"},"ts":1216341960000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"http://pastebin.ca/1074875 â€” these are all the terms that are changed by the aggressive normalisation","msgtype":"m.text"},"ts":1216342020000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders, I don't mind how you do it. Just make it simple to use.","msgtype":"m.text"},"ts":1216342080000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Hixie: cleartimeout and clearinterval and setinterval","msgtype":"m.text"},"ts":1216342200000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hixie: those are the only ones used in such a way that breaks without the normalisation","msgtype":"m.text"},"ts":1216342320000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hixie: Actually, no, that's still wrong","msgtype":"m.text"},"ts":1216342500000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"No, I think that's right.","msgtype":"m.text"},"ts":1216342800000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"shuts up","msgtype":"m.emote"},"ts":1216342801000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"goes to sleep","msgtype":"m.emote"},"ts":1216342802000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: couldn't find any occurances of cleartimeout and clearinterval and setinterval that didn't have a title=\"\" attribute","msgtype":"m.text"},"ts":1216343880000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i am minting URL_MISMATCH_ERR exception code 19","msgtype":"m.text"},"ts":1216344900000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"holy crap this is going to be complicated","msgtype":"m.text"},"ts":1216346340000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what happens if you create a worker, but the script takes a long time to download","msgtype":"m.text"},"ts":1216346341000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and in the meantime, the user has navigated the window","msgtype":"m.text"},"ts":1216346342000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but the user agent hasn't expired the document, merely suspended it and its global object and scripts in session history","msgtype":"m.text"},"ts":1216346400000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and then you go back","msgtype":"m.text"},"ts":1216346401000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"heycam: yt?","msgtype":"m.text"},"ts":1216347360000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"heycam: i got a problem with workes and webidl","msgtype":"m.text"},"ts":1216347420000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hi Hixie","msgtype":"m.text"},"ts":1216347421000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: WebIDL 4.3 Interfaces says \"For every interface that is not declared with the [NoInterfaceObject] extended attribute, a corresponding property must exist on the ECMAScript global object whose name is the identifier of the interface.\"","msgtype":"m.text"},"ts":1216347422000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"heycam: but now there are two types of global objects, those that implement WindowBrowsingContext and those that implement WindowWorker","msgtype":"m.text"},"ts":1216347423000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(and those that implement neither, e.g. as the global object of the script in <img src=\"javascript:...\">)","msgtype":"m.text"},"ts":1216347480000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"we need a way to say which global objects these things end up visible in","msgtype":"m.text"},"ts":1216347481000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hmm, so you need to scope a bunch of IDL to cause interfaces to exist on a particular global object","msgtype":"m.text"},"ts":1216347540000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"or multiple objects","msgtype":"m.text"},"ts":1216347541000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"pointer to the WindowBrowsingContext / WindowWorker stuff?","msgtype":"m.text"},"ts":1216347600000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"e.g. new WebSocket() needs to be in both WindowWorker and WindowBrowsingContext global objects, but not the null global object","msgtype":"m.text"},"ts":1216347601000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"http://www.whatwg.org/specs/web-workers/current-work/#windowworker and http://www.whatwg.org/specs/web-apps/current-work/#windowbrowsingcontext","msgtype":"m.text"},"ts":1216347602000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"http://www.whatwg.org/specs/web-workers/current-work/#apis-available shows how this is getting complicated in other senses too","msgtype":"m.text"},"ts":1216347660000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i need to go get food, but i'll be back online later. feel free to mention any ideas you may have and i'll read them when i get back.","msgtype":"m.text"},"ts":1216347720000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1216347721000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Hixie, is the main case that interface objects should appear on all global objects?","msgtype":"m.text"},"ts":1216348500000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"i'm wondering whether putting [GlobalObject=<identifier-list>] on those you want to restrict would be too onerous","msgtype":"m.text"},"ts":1216348501000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"and then in your specs you'd say how those identifiers map to the different global objects you have","msgtype":"m.text"},"ts":1216348560000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"\"the Window object's browsing context's active document's effective script origin\" is quite a mouthful","msgtype":"m.text"},"ts":1216360320000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"though it conveniently forms a pronounceable acronym","msgtype":"m.text"},"ts":1216360440000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the WOBCADESO","msgtype":"m.text"},"ts":1216360441000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"heycam: actually no, the common case is that the interfaces are only visible to global objects that implement WindowBrowsingContext","msgtype":"m.text"},"ts":1216362720000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"pretty much nothing (only ECMA262-defined types) are visible to the \"empty\" global object, for instance","msgtype":"m.text"},"ts":1216362780000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"where's this empty one defined?  i tried searching for \"null global object\" but didn't get anywhere.","msgtype":"m.text"},"ts":1216362781000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#script0","msgtype":"m.text"},"ts":1216362900000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#the-javascript paragraph 3","msgtype":"m.text"},"ts":1216362960000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so \"script browsing context\" means the global script object?","msgtype":"m.text"},"ts":1216363020000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"there's an open bug on figuring out what it means exactly","msgtype":"m.text"},"ts":1216363080000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"global objects are very complex","msgtype":"m.text"},"ts":1216363081000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"since the global object has to change when you navigate, but there's only one Window object per window","msgtype":"m.text"},"ts":1216363082000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so you get pschyzophrenic code","msgtype":"m.text"},"ts":1216363140000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so is it possible for script to be running, the page navigates to something else, but that same script is running, and its global object is now a different object?","msgtype":"m.text"},"ts":1216363320000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"the global object is the same, but the 'window' attribute on that global object no longer points to the global object, even though the value it used to have is === the value that it had when it _was_ equal to the global object","msgtype":"m.text"},"ts":1216363380000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ah, interesting","msgtype":"m.text"},"ts":1216363440000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"i never realised they could be different","msgtype":"m.text"},"ts":1216363441000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"the web is a crazy crazy platform","msgtype":"m.text"},"ts":1216363442000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"basically the Window object reflects the properties of the global object of the active document","msgtype":"m.text"},"ts":1216363500000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and you can never get a pointer to the actual global object","msgtype":"m.text"},"ts":1216363501000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"as i understand it","msgtype":"m.text"},"ts":1216363502000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"huh?","msgtype":"m.text"},"ts":1216363560000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"so you don't consider the Window object to be the actual global object?","msgtype":"m.text"},"ts":1216363561000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"well right now none of this is defined","msgtype":"m.text"},"ts":1216363680000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but yeah","msgtype":"m.text"},"ts":1216363681000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's kind of strange","msgtype":"m.text"},"ts":1216363740000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"i mean, always though the Window object was exactly the same object that 'this' refers to at the top level of your script","msgtype":"m.text"},"ts":1216363741000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"s/always though/i &t/","msgtype":"m.text"},"ts":1216363742000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"it is","msgtype":"m.text"},"ts":1216363800000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the 'this' is not the actual global object, it turns out","msgtype":"m.text"},"ts":1216363801000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but an object pretending to be it","msgtype":"m.text"},"ts":1216363802000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"as i understand it","msgtype":"m.text"},"ts":1216363803000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"then i resign","msgtype":"m.text"},"ts":1216363860000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"see also http://www.w3.org/Bugs/Public/show_bug.cgi?id=5850","msgtype":"m.text"},"ts":1216363861000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1216363862000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"q.v. topic :-)","msgtype":"m.text"},"ts":1216363863000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so html5 will says something like:  \"when you go to run a script, instead of evaluating it with the ecma-262 global object as the 'this' value, evaluate it with this strange Window object that mostly reflects the ecma-262 global object as the 'this' value\"?","msgtype":"m.text"},"ts":1216364100000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"dunno, haven't figured it out yet","msgtype":"m.text"},"ts":1216364160000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"let me know when you do :)","msgtype":"m.text"},"ts":1216364280000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"(well, i'll see the mails from the bug anyway)","msgtype":"m.text"},"ts":1216364281000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"then i'll think more about idl support for this stuff","msgtype":"m.text"},"ts":1216364340000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"out","msgtype":"m.emote"},"ts":1216364341000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1216364400000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"later","msgtype":"m.text"},"ts":1216364401000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"damn, Andrew is really quite annoying to deal with on www-style. He's so damn persistent, and fails to understand problems I clearly describe to him.","msgtype":"m.text"},"ts":1216370040000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"though, unfortunately, he does have a point about the use cases. I can't think of any compelling ones that need to have a selector evaluated against the whole documet; only technical problems with what he needs, that need to be solved.","msgtype":"m.text"},"ts":1216370100000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"what's the question?","msgtype":"m.text"},"ts":1216370460000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what question?","msgtype":"m.text"},"ts":1216370520000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"this is the mail I was talking about http://lists.w3.org/Archives/Public/www-style/2008Jul/0419.html","msgtype":"m.text"},"ts":1216370640000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"i mean, what's the thing you need a use case for?","msgtype":"m.text"},"ts":1216370700000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i don't read www-style these days unless html5 or acid3 is in the body :-)","msgtype":"m.text"},"ts":1216370760000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yay for keyword filtering","msgtype":"m.text"},"ts":1216370761000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh, with the way querySelector() is defined div.querySelector(\"body p\") would still match, even though body is an ancestor of the div. I need a use case for when that would actually be necessary, rather than just restricting all selectors to match descendants of the element itself.","msgtype":"m.text"},"ts":1216370820000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"the solution that is actually needed is a way to say things like querySelector(\">p\");, but that requries changes to selector parsing and for an implicit :scope to be prepended to the beginning.","msgtype":"m.text"},"ts":1216370880000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"and for querySelector(\"+p\"); to work, it needs to match the element's siblings as well.","msgtype":"m.text"},"ts":1216370940000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"if Andrew is right (which would be a huge surprise), I wonder if it's too late to change it now.","msgtype":"m.text"},"ts":1216371060000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Regular querySelector evaluates against entire document and only returns matches inside scope, right?","msgtype":"m.text"},"ts":1216371300000,"senderName":"gDashiva","senderId":"gDashiva@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1216371360000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"If there's an implicit :scope in the scopedQuerySelector the result filtering wouldn't need to happen","msgtype":"m.text"},"ts":1216371361000,"senderName":"gDashiva","senderId":"gDashiva@irc"},
{"content":{"body":"Since it would limit itself to matching descendants and siblings anyhow","msgtype":"m.text"},"ts":1216371420000,"senderName":"gDashiva","senderId":"gDashiva@irc"},
{"content":{"body":"yeah, the problem is how to get the implicit :scope there in cases like this: \">em, >strong\"","msgtype":"m.text"},"ts":1216371421000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"it's possible, I wrote up a proposed pre-parse algorithm to do it, but not sure how reliable it is in all cases yet","msgtype":"m.text"},"ts":1216371422000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"But assuming the parser manages to insert :scope properly, it's all in the green?","msgtype":"m.text"},"ts":1216371423000,"senderName":"gDashiva","senderId":"gDashiva@irc"},
{"content":{"body":"the other issue is that querySelector is only defined to check its descendant elements. It would also need to be changed to check its sibling elements","msgtype":"m.text"},"ts":1216371480000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"but they would only ever match in the case of :scope+p","msgtype":"m.text"},"ts":1216371540000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"or ~p","msgtype":"m.text"},"ts":1216371541000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Couldn't you just remove the restriction entirely? Surely when the browser itself prepends :scope it also knows where to avoid matching :)","msgtype":"m.text"},"ts":1216371542000,"senderName":"gDashiva","senderId":"gDashiva@irc"},
{"content":{"body":"I guess it could just be left up to browser's own optimisations","msgtype":"m.text"},"ts":1216371600000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"so then document.querySelector() and element.querySelector() would be handled very differently from each other.","msgtype":"m.text"},"ts":1216371660000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Scope is applied in both cases. For regular querySelector it limits the return, for scoped querySelect it limits the match.","msgtype":"m.text"},"ts":1216371661000,"senderName":"gDashiva","senderId":"gDashiva@irc"},
{"content":{"body":"(Although it might be necessary to give them separate names, for clarity)","msgtype":"m.text"},"ts":1216371662000,"senderName":"gDashiva","senderId":"gDashiva@irc"},
{"content":{"body":"gDashiva, but what are the use cases for keeping the current querySelector around?","msgtype":"m.text"},"ts":1216371720000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"the only somewhat compelling reason I have at the moment is that implementations are getting ready to ship, and such a huge change could delay things","msgtype":"m.text"},"ts":1216371721000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"though, perhaps that's not a huge problem, since IE8 is still only beta 1, Firefox 3 only just shipped and probably won't ship with support in a final product for months","msgtype":"m.text"},"ts":1216371780000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"same for Opera","msgtype":"m.text"},"ts":1216371781000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"dunno, will need to check with implementers and re-evaluate the whole situation","msgtype":"m.text"},"ts":1216371840000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Hmm... the old one is the scoped one on document + filtering, since scoping to document on the match is no scoping. So it's document.scoedQuerySelector().removeNonDescendantOf(element). And the question is a use case for the filtering.","msgtype":"m.text"},"ts":1216371841000,"senderName":"gDashiva","senderId":"gDashiva@irc"},
{"content":{"body":"what?","msgtype":"m.text"},"ts":1216371900000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"The old element.querySelector matches against the whole document, but only returns results inside the element's scope, right?","msgtype":"m.text"},"ts":1216371901000,"senderName":"gDashiva","senderId":"gDashiva@irc"},
{"content":{"body":"it evaluates elements in the context of the whole document, but only returns descendant elements. So it doesn't bother checking for matches outside","msgtype":"m.text"},"ts":1216371960000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"True, using separate filtering would be a performance problem","msgtype":"m.text"},"ts":1216372020000,"senderName":"gDashiva","senderId":"gDashiva@irc"},
{"content":{"body":"Lachy: the use case is going through a CSS style sheet and making sure you match all the nodes that the style sheet matches","msgtype":"m.text"},"ts":1216372080000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Lachy: or the use case is if you want to do something to <h2> elements that are inside <aside> elements, it doesn't matter if the <aside> is in the scope or not","msgtype":"m.text"},"ts":1216372081000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, when would anyone ever do that?","msgtype":"m.text"},"ts":1216372082000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: i'm not really sure when anyone would do any of this","msgtype":"m.text"},"ts":1216372140000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"in that case, you could do document.querySelector(\"aside h2\")","msgtype":"m.text"},"ts":1216372141000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"which is the same problem I'm having.","msgtype":"m.text"},"ts":1216372142000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"no i mean for the entire feature","msgtype":"m.text"},"ts":1216372143000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i don't know why people ever want to select multiple elements","msgtype":"m.text"},"ts":1216372144000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh, well, people do it with JS libraries, so they must have a reason","msgtype":"m.text"},"ts":1216372200000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"or do anything scoped","msgtype":"m.text"},"ts":1216372201000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so, look at those reasons","msgtype":"m.text"},"ts":1216372202000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you can't write a spec without knowing what the spec will be used for","msgtype":"m.text"},"ts":1216372203000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah, but those all work the way queryScopedSelector() would work, rather than how querySelector() works now.","msgtype":"m.text"},"ts":1216372204000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"so i guess that's what we should have","msgtype":"m.text"},"ts":1216372260000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"which is why I need to know if things should stay as they are, or be changed to match what Andrew, and what JohnResig had asked for earlier.","msgtype":"m.text"},"ts":1216372261000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: Well, apart from some unquantified performance loss, you can emulate querySelector using queryScopedSelector and filtering","msgtype":"m.text"},"ts":1216372262000,"senderName":"gDashiva","senderId":"gDashiva@irc"},
{"content":{"body":"So the use cases would still be satisfied","msgtype":"m.text"},"ts":1216372320000,"senderName":"gDashiva","senderId":"gDashiva@irc"},
{"content":{"body":"if everyone is asking for X, and you can't find any reasons for Y, then it seems likely X is the way to go","msgtype":"m.text"},"ts":1216372321000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I know. I just don't know if it's too late to change things","msgtype":"m.text"},"ts":1216372322000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"why would it be too late?","msgtype":"m.text"},"ts":1216372323000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"because back when all this was discussed previously, we didn't have solutions to the technical problems","msgtype":"m.text"},"ts":1216372324000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1216372325000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"The :scope prepending","msgtype":"m.text"},"ts":1216372380000,"senderName":"gDashiva","senderId":"gDashiva@irc"},
{"content":{"body":"because implementers are already working on getting the current spec implemented and could be close to shipping. But if they're willing to change at this stage, it won't be too late","msgtype":"m.text"},"ts":1216372381000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"I will write up a proposal for how it could be redefined and ask","msgtype":"m.text"},"ts":1216372382000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"well you already have four methods, right? just add two more and be done with it","msgtype":"m.text"},"ts":1216372440000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's trivial to define","msgtype":"m.text"},"ts":1216372441000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you just don't ever match any simple selectors on nodes outside the scope","msgtype":"m.text"},"ts":1216372442000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that simple approach doesn't solve the use cases though. That's described in solution 3 or 4 in http://lists.w3.org/Archives/Public/public-webapi/2008May/0057.html","msgtype":"m.text"},"ts":1216372500000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"wait do you even have queryScopedSelector and queryScopedSelectorAll in the draft at all? i can't find them","msgtype":"m.text"},"ts":1216372501000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"not yet","msgtype":"m.text"},"ts":1216372502000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"we're just discussing whether to add them, or whether to redefine querySelector to be what they would have been","msgtype":"m.text"},"ts":1216372560000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"well it can't be too late if they don't exist yet :-)","msgtype":"m.text"},"ts":1216372620000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh i see, because you have the element and document ones on the same interface","msgtype":"m.text"},"ts":1216372621000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1216372622000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"seems like for these use cases what you want is a non-scoped variant that sets the context node, actually","msgtype":"m.text"},"ts":1216372680000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what do you mean?","msgtype":"m.text"},"ts":1216372681000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"someRandomElement.queryContextSelector(\":context + p\")","msgtype":"m.text"},"ts":1216372740000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"matching someRandomElement.nextSibling if that's a <p>","msgtype":"m.text"},"ts":1216372741000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i.e. scope is Document, context node is someRandomElement","msgtype":"m.text"},"ts":1216372742000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh, yeah, but to do what JS libraries do, we would need to make the :context (or :scope now) implicit","msgtype":"m.text"},"ts":1216372800000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"screw that","msgtype":"m.text"},"ts":1216372801000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"people can put in a pseudo-class, that's not a big deal.","msgtype":"m.text"},"ts":1216372802000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"for a few versions the libraries can have a shim, they already have CSS parsers after all","msgtype":"m.text"},"ts":1216372860000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"othermaciej argued that we should do it with implicit scope because:","msgtype":"m.text"},"ts":1216372920000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"<othermaciej> Lachy: I think there are two reasons we may still want it:","msgtype":"m.text"},"ts":1216372921000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"<othermaciej> 1) otherwise JS libraries have to do rewriting of their incoming","msgtype":"m.text"},"ts":1216372922000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"selectors, which is both slower and more error-prone in JS code than in native","msgtype":"m.text"},"ts":1216372923000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"code","msgtype":"m.text"},"ts":1216372924000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"<othermaciej> 2) without a way to access those syntax features directly, it","msgtype":"m.text"},"ts":1216372925000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"becomes harder for authors to ever switch off the library wrappers to the","msgtype":"m.text"},"ts":1216372926000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"native version, even once all browsers support it","msgtype":"m.text"},"ts":1216372927000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"currently, JQuery and other libraries have to change jquery(\">div, >p\") into  \":scope>div, :scope>p\" by themselves. The proposal is to make the browser to that in a standardised way","msgtype":"m.text"},"ts":1216372980000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"the existing pages will keep using the existing libraries. new pages can use new libraries. it's not like there's a massive number of people who have existing code who will upgrade their libraries without upgrading their code to use new APIs in those libraries.","msgtype":"m.text"},"ts":1216373040000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so i call bs on othermaciej's reasons","msgtype":"m.text"},"ts":1216373041000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"also, with your suggestion, would element.queryContextSelector(\"p\"); only match descendant p elements, or all elements in the whole document?","msgtype":"m.text"},"ts":1216373100000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"it would match the first <p> in the document","msgtype":"m.text"},"ts":1216373101000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that is unintuitive","msgtype":"m.text"},"ts":1216373102000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"if you want the first in the subtree, use the filtered version (Element.querySelector())","msgtype":"m.text"},"ts":1216373103000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's queryContextSelector() because it's for using :context","msgtype":"m.text"},"ts":1216373104000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"which is worse than we have now, and authors are already complaining we did it wrong","msgtype":"m.text"},"ts":1216373105000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"i'd have six methods, two each of Document.querySelector, Element.querySelector, and Element.queryContextSelector, with those three being document-wide selector matching, with the second one being filtered to the element, and the last two having the element as the :context node","msgtype":"m.text"},"ts":1216373220000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that handles all the use cases pretty simply","msgtype":"m.text"},"ts":1216373221000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and doesn't require any silly breaking of Selector rules like scoping what simple selectors can match on","msgtype":"m.text"},"ts":1216373280000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"nor redefining what selectors mean by adding pseudo-classes in or whatever","msgtype":"m.text"},"ts":1216373281000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so element.querySelector(\":scope p\"); would match the same as element.queryContextSelector(\":scope p\"); but they would differ in their handling of \":scope+p\". Is that right?","msgtype":"m.text"},"ts":1216373400000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"i wouldn't call it :scope if you do this, but yes","msgtype":"m.text"},"ts":1216373460000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"queryContextSelector() might be more intuitive as document.querySelector(\":scope p\", contextNode);","msgtype":"m.text"},"ts":1216373461000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"that would be fine too","msgtype":"m.text"},"ts":1216373462000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(i still wouldn't call it :scope though)","msgtype":"m.text"},"ts":1216373463000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"fine, the name isn't important.","msgtype":"m.text"},"ts":1216373464000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"so your proposal is to keep exactly what we have now and add queryContextSelector or equivalent. But that doesn't help me deal with the problems people are having with querySelector now.","msgtype":"m.text"},"ts":1216373580000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"sure, just tell them to give a contextNode","msgtype":"m.text"},"ts":1216373640000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: why is your rebuttal relevant to my reasons?","msgtype":"m.text"},"ts":1216374240000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Hixie: both library authors and web developers appear to like the scoped semantics (in some case, to the degree of apoplectic rage at the suggestion of anything else)","msgtype":"m.text"},"ts":1216374300000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I would call it queryScopedSelector not queryContextSelector btw","msgtype":"m.text"},"ts":1216374301000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"for 1, because i'm saying there's no rewriting needed, and for 2, because i'm saying we should offer those features (albeit not with a compatible syntax).","msgtype":"m.text"},"ts":1216374302000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"context selector\" doesn't make sense","msgtype":"m.text"},"ts":1216374360000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"it's not scoped","msgtype":"m.text"},"ts":1216374361000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I guess it depends on what you mean by it","msgtype":"m.text"},"ts":1216374362000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"if \":context + p\" matches something, then clearly you're not scoped to :context","msgtype":"m.text"},"ts":1216374363000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"since a node's sibling is outside the node","msgtype":"m.text"},"ts":1216374364000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"this would become even more relevant with something like :has() or, worse, :matches().","msgtype":"m.text"},"ts":1216374365000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's true, the + version would in fact be unscoped relative to the normal version","msgtype":"m.text"},"ts":1216374420000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I hadn't imagined catering to the + exception","msgtype":"m.text"},"ts":1216374421000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"it was in lachy's list of what people do/need","msgtype":"m.text"},"ts":1216374422000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if we're not worrying about what they need, then we should screw the whole scoped thing and keep the spec as is :-)","msgtype":"m.text"},"ts":1216374423000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I recall from past discussions that people were less fervent about that than \"div span\" only matching if the div is the element queried on or inside it, and not if the whole thing happens to be contained in a div","msgtype":"m.text"},"ts":1216374480000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"(in fact I recall at least one JS library author conceding that \"+ p\" didn't entirely make sense)","msgtype":"m.text"},"ts":1216374540000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej, which JS author?","msgtype":"m.text"},"ts":1216374541000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"if we give them \"div:context span\" then that use case is handled fine","msgtype":"m.text"},"ts":1216374600000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I can't remember","msgtype":"m.text"},"ts":1216374601000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Hixie: I am sure JS libraries will rewrite their current pseudo-selector syntax into that, and their clients will continue to just write \"div span\"","msgtype":"m.text"},"ts":1216374602000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Hixie, sure, :context as currently defined can handle every use case except the +p case.","msgtype":"m.text"},"ts":1216374660000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"incidentally \"div:context span\" would not mean the same thing","msgtype":"m.text"},"ts":1216374661000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"\":context div span\" would","msgtype":"m.text"},"ts":1216374662000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: why would they?","msgtype":"m.text"},"ts":1216374663000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: at least some library authors have said they feel obligated to (and in some cases deeply enthusiastic about) maintaining their current syntax","msgtype":"m.text"},"ts":1216374720000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"sure but that doesn't preclude them providing new APIs","msgtype":"m.text"},"ts":1216374721000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"presumably they are in touch with their clients","msgtype":"m.text"},"ts":1216374722000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"basically the way i see it the current installed base pales in comparison to the future uses","msgtype":"m.text"},"ts":1216374723000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's not like we're breaking back compat, we're just not making the back compat faster.","msgtype":"m.text"},"ts":1216374780000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sure, but why not give them what they want?","msgtype":"m.text"},"ts":1216374781000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"is there a downside?","msgtype":"m.text"},"ts":1216374782000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Hixie, what future uses are we addressing by failing to directly meet their needs, instead of indirectly via :context as we are now?","msgtype":"m.text"},"ts":1216374783000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"one more method plus one more selector parser or preprocessor is not a big deal implementation-wise","msgtype":"m.text"},"ts":1216374784000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"the only reason not to do it as far as I can tell is a sense of purity","msgtype":"m.text"},"ts":1216374785000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej, should we keep querySelector() as defined, or just redefine it to what queryScopedSelector() would have been?","msgtype":"m.text"},"ts":1216374840000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"what they want is a new selector syntax","msgtype":"m.text"},"ts":1216374841000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yes, which has been my argument against them till now","msgtype":"m.text"},"ts":1216374842000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"that's a whole ton more speccing, developing, and testing work than what i think we want to do","msgtype":"m.text"},"ts":1216374843000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Lachy: I think querySelector may already be used enough to preclude completely redefining it","msgtype":"m.text"},"ts":1216374900000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"so that's the reason for not doing what they are asking for","msgtype":"m.text"},"ts":1216374901000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Something is going oddly wrong in my spec-gen","msgtype":"m.text"},"ts":1216374902000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"we can cater for the exact same use cases with a much cleaner mechanism","msgtype":"m.text"},"ts":1216374903000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the cost seems low compared to the benefit of making them happy","msgtype":"m.text"},"ts":1216374904000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"and the cost will be borne mostly by Lachy and by implementors","msgtype":"m.text"},"ts":1216374960000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"well, it's not me who has to pay the cost, so if you can get the css group to define a new syntax for selectors, along with creating a new test suite, and implementors are up for it, go for it","msgtype":"m.text"},"ts":1216374961000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"personally i think that's a high cost for making people feel happy when we could address their same use cases in a much cleaner and simpler way that, once they realised it addressed their use cases, would likely make them just as happy","msgtype":"m.text"},"ts":1216375020000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(not to mention it's more powerful going forward)","msgtype":"m.text"},"ts":1216375021000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if the new syntax is defined by translation to the canonical selector syntax then I see no need to involve the CSS WG","msgtype":"m.text"},"ts":1216375022000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Hixie, the proposed solution addresses it with a pre-parse that inserts :context (or whatever) in the appropriate places before parsing as a normal selector","msgtype":"m.text"},"ts":1216375023000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"I do like :scope/:context and I think it should probably be done first","msgtype":"m.text"},"ts":1216375024000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"that will give us more information on whether JS library authors or Web developers in general are inclined to switch","msgtype":"m.text"},"ts":1216375080000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej, can you respond to Andrew on www-style or public-webapps and help me explain to him why the current solution is good?","msgtype":"m.text"},"ts":1216375081000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Ah! I've found teh bug!","msgtype":"m.text"},"ts":1216375082000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"has a low opinion of specs that define things in terms of transforming one syntax into another","msgtype":"m.emote"},"ts":1216375083000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"seems like a hack to me","msgtype":"m.text"},"ts":1216375084000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but it's not my problem :-)","msgtype":"m.text"},"ts":1216375140000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, sure, it is a hack","msgtype":"m.text"},"ts":1216375141000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"the platform has enough hackiness without adding more","msgtype":"m.text"},"ts":1216375142000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's not like any sane implementor will actually implement it as a preparse","msgtype":"m.text"},"ts":1216375200000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"parsing selectors is slow enough as it is","msgtype":"m.text"},"ts":1216375201000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"without having to do it twice each time","msgtype":"m.text"},"ts":1216375202000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"given that these methods are likely to be called in tight loops","msgtype":"m.text"},"ts":1216375203000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I would guess parsing is a trivial fraction of the cost of querySelector","msgtype":"m.text"},"ts":1216375204000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"so whether the csswg is involved or not, it's still a new syntax","msgtype":"m.text"},"ts":1216375205000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, the other solution was to slightly modify the grammar of selectors as described here http://lists.w3.org/Archives/Public/public-webapps/2008JulSep/0181.html","msgtype":"m.text"},"ts":1216375206000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"(that's a pretty well educated guess)","msgtype":"m.text"},"ts":1216375207000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: on scoped trees with caching? i'm surprised.","msgtype":"m.text"},"ts":1216375260000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Shark don't lie","msgtype":"m.text"},"ts":1216375320000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"we only use caching for the most trivial of selectors (otherwise maintaining correctness of the cache would be too complicated to be worth the benefit in the unlikely case that you redo the identical query on the same subtree)","msgtype":"m.text"},"ts":1216375321000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"teh webs are teh weirdness.","msgtype":"m.text"},"ts":1216375380000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hixie: I think title=\">HTML documents\" is a bug","msgtype":"m.text"},"ts":1216375800000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"fixed","msgtype":"m.text"},"ts":1216375801000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: http://pastebin.ca/1075314 â€” That's a diff of everything going from the aggressive normalisation to next to none","msgtype":"m.text"},"ts":1216375920000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(obviously the top change isn't to do with that)","msgtype":"m.text"},"ts":1216375921000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"fixed","msgtype":"m.text"},"ts":1216376160000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"othermaciej: btw i ended up using \"attach\" instead of \"join\" -- but that's not much better. do you have any better ideas for terminology for what to call it when a new client registers with a worker?","msgtype":"m.text"},"ts":1216376820000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"http://www.whatwg.org/specs/web-workers/current-work/ is mostly ready now, though it's missing some of the APIs it should have","msgtype":"m.text"},"ts":1216376821000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"like database APIs","msgtype":"m.text"},"ts":1216376822000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: fwiw, \"attach\" doesn't seem so bad to me. ","msgtype":"m.text"},"ts":1216378380000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"since it's used in other ways to describe interactions with processes","msgtype":"m.text"},"ts":1216378381000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"attaching to a thread somewhat implies a debugger actually monitoring the thread","msgtype":"m.text"},"ts":1216378440000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1216378441000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"which is not what this is","msgtype":"m.text"},"ts":1216378442000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"right, I see","msgtype":"m.text"},"ts":1216378443000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but in the absence of a better term...","msgtype":"m.text"},"ts":1216378444000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hmm, only other word I can think of is \"tether\", and that probably sucks more","msgtype":"m.text"},"ts":1216378500000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1216378501000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i used join, but joining a thread means waiting for it to complete, which isn't the same thing at all :-)","msgtype":"m.text"},"ts":1216378560000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so attach is a step in the right direction","msgtype":"m.text"},"ts":1216378561000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but merely a small step","msgtype":"m.text"},"ts":1216378562000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"connect\"?","msgtype":"m.text"},"ts":1216378563000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"could work","msgtype":"m.text"},"ts":1216378620000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hook, tie, bind, pin, fasten, harness","msgtype":"m.text"},"ts":1216378680000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and \"hog tie\"","msgtype":"m.text"},"ts":1216378681000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"connect is winning so far","msgtype":"m.text"},"ts":1216378740000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"tether\"","msgtype":"m.text"},"ts":1216378800000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"\"tractor beam\"","msgtype":"m.text"},"ts":1216378860000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"bear hug","msgtype":"m.text"},"ts":1216378920000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"assimilate","msgtype":"m.text"},"ts":1216378921000,"senderName":"gDashiva","senderId":"gDashiva@irc"},
{"content":{"body":"ponders <p><label>Text <input></p>","msgtype":"m.emote"},"ts":1216378980000,"senderName":"gDashiva","senderId":"gDashiva@irc"},
{"content":{"body":"connect is best, since what you get back is a message port","msgtype":"m.text"},"ts":1216379040000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"connectToNamedWorker","msgtype":"m.text"},"ts":1216379041000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"it's still createNamedWorker() for consistency with createWorker()","msgtype":"m.text"},"ts":1216379100000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the name 'connect' is the event name","msgtype":"m.text"},"ts":1216379101000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"How about assign?","msgtype":"m.text"},"ts":1216379160000,"senderName":"gDashiva","senderId":"gDashiva@irc"},
{"content":{"body":"unless you think it should be connectToNamedWorker() and connectToWorker(), or connectToNamedWorker() and createWorker() ?","msgtype":"m.text"},"ts":1216379161000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"why assign?","msgtype":"m.text"},"ts":1216379220000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"connect makes me think of connections and pipes and such","msgtype":"m.text"},"ts":1216379280000,"senderName":"gDashiva","senderId":"gDashiva@irc"},
{"content":{"body":"well the message ports did used to be called pipes","msgtype":"m.text"},"ts":1216379281000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"But that's for inter-worker communication, isn't it? Not for task-to-worker","msgtype":"m.text"},"ts":1216379400000,"senderName":"gDashiva","senderId":"gDashiva@irc"},
{"content":{"body":"i don't understand what you mean","msgtype":"m.text"},"ts":1216379640000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"message ports are how any two things communicate","msgtype":"m.text"},"ts":1216379641000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"whether they be in different workers, same worker, different frames, whatever","msgtype":"m.text"},"ts":1216379642000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Just me being confused, then.","msgtype":"m.text"},"ts":1216379820000,"senderName":"gDashiva","senderId":"gDashiva@irc"},
{"content":{"body":"gDashiva: Like normal.","msgtype":"m.text"},"ts":1216379940000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I should add it to my OKRs","msgtype":"m.text"},"ts":1216380000000,"senderName":"gDashiva","senderId":"gDashiva@irc"},
{"content":{"body":"something else we could use <browserbutton> for is the ability to move a page into the background completely","msgtype":"m.text"},"ts":1216380180000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so e.g. you could hide google calendar and it could still be doing toast notifications of your events","msgtype":"m.text"},"ts":1216380181000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"wants a copy of ISO 2145","msgtype":"m.emote"},"ts":1216382520000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"which is that one>","msgtype":"m.text"},"ts":1216382580000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1216382581000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: numbering of divisions and subdivisions in written documents","msgtype":"m.text"},"ts":1216382640000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"aah","msgtype":"m.text"},"ts":1216382641000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"It's an entire two pages long :P","msgtype":"m.text"},"ts":1216382642000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"And I bet the first is just the cover page.","msgtype":"m.text"},"ts":1216382643000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"http://www.w3.org/mid/E906BBE0-6737-4C8D-9D7F-D3ADF99BFE5DâŠ™bc -- wouldn't it make more sense to just teach peopel to read?","msgtype":"m.text"},"ts":1216382700000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Wikipedia claims to give the definition, but is it \"can\" or must it be?","msgtype":"m.text"},"ts":1216382701000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hixie: Peh! Standards are more fun than school anyway!","msgtype":"m.text"},"ts":1216382760000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"</sarcasm>","msgtype":"m.text"},"ts":1216382761000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ok, <browserbutton> or .makeStandalone() or whatever we decide to do is what i'm working on tomorrow","msgtype":"m.text"},"ts":1216382762000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Lachy: I can't really get any other syntax that doesn't become really rather complex to parse","msgtype":"m.text"},"ts":1216382880000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Lachy: [URL: http://exam<em>ple</em>.com] would be complete hell to parse","msgtype":"m.text"},"ts":1216382881000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hixie: Why are workers JS only? And which version of JS? ","msgtype":"m.text"},"ts":1216382940000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I presume ECMAScript 4 still requires an out of band indicator that the file is ECMAScript4?","msgtype":"m.text"},"ts":1216383000000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"the js folk need to realise that out of band versioning is a bad idea","msgtype":"m.text"},"ts":1216383001000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"anyway bed time","msgtype":"m.text"},"ts":1216383060000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"g'nite","msgtype":"m.text"},"ts":1216383061000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I'll try and have nicer generated IDs by when you awaken","msgtype":"m.text"},"ts":1216383062000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders, just find /\\[URL:?\\s([^\\])]\\]/","msgtype":"m.text"},"ts":1216383120000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Hixie: Sure, but I still don't understand why they are, in principle, JS only","msgtype":"m.text"},"ts":1216383121000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"then escape special characters in the result","msgtype":"m.text"},"ts":1216383122000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: That's hard when you have an XML document, and I don't want therefore to be a bozo","msgtype":"m.text"},"ts":1216383123000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(and it seems like trying to force the hand of the ECMA people this way is bad)","msgtype":"m.text"},"ts":1216383180000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"oh, right","msgtype":"m.text"},"ts":1216383181000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"jgraham: they're JS only because i didn't write the bit that says how to handle the content-type headers","msgtype":"m.text"},"ts":1216383182000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"gsnedders, but no-one is going to put markup in the middle of a URL like this. Remember, it's not random stupid people using your tool, it's spec writers who at least have basic understanding of what they're doing.","msgtype":"m.text"},"ts":1216383240000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: Robustness ftw.","msgtype":"m.text"},"ts":1216383241000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":":P","msgtype":"m.text"},"ts":1216383242000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"so just require that the whole [URL: ...] this is in a single text node","msgtype":"m.text"},"ts":1216383243000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"if it's not, output it as plain text","msgtype":"m.text"},"ts":1216383244000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Yeah, I could do that","msgtype":"m.text"},"ts":1216383245000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Preprocess the document with regular expressions","msgtype":"m.text"},"ts":1216383246000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: No. :P","msgtype":"m.text"},"ts":1216383300000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Use sed","msgtype":"m.text"},"ts":1216383301000,"senderName":"gDashiva","senderId":"gDashiva@irc"},
{"content":{"body":"just make people use <a href=\"...\">...</a>","msgtype":"m.text"},"ts":1216383302000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"require that the ... bits be equal, to confirm that they did actually intend it","msgtype":"m.text"},"ts":1216383303000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: But people are lazy!","msgtype":"m.text"},"ts":1216383304000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"if they're not equal, then just leave it unchanged","msgtype":"m.text"},"ts":1216383305000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: huh?","msgtype":"m.text"},"ts":1216383306000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Lazy people don't write specs","msgtype":"m.text"},"ts":1216383307000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"and if they're equal, then output <a href=\"...\">...</a>","msgtype":"m.text"},"ts":1216383360000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Philip`: No, we do, just slowly :)","msgtype":"m.text"},"ts":1216383361000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"should be pretty easy to implement!","msgtype":"m.text"},"ts":1216383362000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"gsnedders: That just means you're insufficiently lazy","msgtype":"m.text"},"ts":1216383363000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Hixie, there are other links in the spec where they shouldn't be equal, so how would you distinguish between those cases?","msgtype":"m.text"},"ts":1216383364000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Hixie: So what? Just require an ellipsis in one place, or what do you mena?","msgtype":"m.text"},"ts":1216383365000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"*mean","msgtype":"m.text"},"ts":1216383366000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"wishes lachy would fix http://www.w3.org/Bugs/Public/show_bug.cgi?id=5852 so it wasn't on his list :-)","msgtype":"m.emote"},"ts":1216383420000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I could picture a lazy person writing a spec because they're too lazy to implement themselves, but writing some text is okay","msgtype":"m.text"},"ts":1216383421000,"senderName":"gDashiva","senderId":"gDashiva@irc"},
{"content":{"body":"is too lazy to fix his search query","msgtype":"m.emote"},"ts":1216383422000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Lachy, gsnedders: i was saying \"do nothing\" basically","msgtype":"m.text"},"ts":1216383423000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Lachy: If the link text is equal to the href, then you treat it as the equal case; and if it isn't, you treat it as the unequal case","msgtype":"m.text"},"ts":1216383424000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Hixie: ah :P","msgtype":"m.text"},"ts":1216383425000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"just wants spec gen 1.2 :-P","msgtype":"m.emote"},"ts":1216383426000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":":D","msgtype":"m.text"},"ts":1216383480000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"look at all the big green thick underlines in http://whatwg.org/ww","msgtype":"m.text"},"ts":1216383481000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, we're trying to solve the cases where the URL is the same URL is used in both the href and link text to avoid the duplication.","msgtype":"m.text"},"ts":1216383482000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"all of those would go away if i had 1.2!","msgtype":"m.text"},"ts":1216383483000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Lachy: i know, i'm just not convinced it's a problem :-)","msgtype":"m.text"},"ts":1216383484000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, it's just a minor problem when updating the header of the document where the Previous Version links are. When I copy and paste, I want to make it easier to avoid forgetting to change one of the links when I copy and paste","msgtype":"m.text"},"ts":1216383540000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"hugs Hixie. It'll be all right!","msgtype":"m.emote"},"ts":1216383541000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I also wanted an easier, markup free syntax to make that whole spec header easier to fill out and generate","msgtype":"m.text"},"ts":1216383600000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"but gsnedders said no to that","msgtype":"m.text"},"ts":1216383601000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1216383602000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(because he's an asshole)","msgtype":"m.text"},"ts":1216383603000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders, who? me or you?","msgtype":"m.text"},"ts":1216383604000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"spends very little time on the header of his specs","msgtype":"m.emote"},"ts":1216383605000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Lachy: Me :P","msgtype":"m.text"},"ts":1216383606000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ok, good","msgtype":"m.text"},"ts":1216383660000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"is listening to Look At Your Son Now by The F-Ups from The F-Ups","msgtype":"m.emote"},"ts":1216383661000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"maybe I could solve the problem by making a template generator where I can fill out that info in a form and have it all generated for me","msgtype":"m.text"},"ts":1216383662000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"I love how we're writing code so we can _then_ be lazy.","msgtype":"m.text"},"ts":1216383663000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"It'd probably be quicker to just not be lazy in the first place.","msgtype":"m.text"},"ts":1216383720000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Lachy: You could do it all with XSLT","msgtype":"m.text"},"ts":1216383721000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Hixie, re bug 5852, I suppose I could work on it. Any suggestions for how to mark it up and present it in a user friendly way?","msgtype":"m.text"},"ts":1216383722000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Philip`, I'd rather not do anything with XSLT","msgtype":"m.text"},"ts":1216383723000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: no idea","msgtype":"m.text"},"ts":1216383780000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Lachy: i generate the table automatically though","msgtype":"m.text"},"ts":1216383781000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Lachy: so something that does the same is probably best :-)","msgtype":"m.text"},"ts":1216383782000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"anyway","msgtype":"m.text"},"ts":1216383783000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, I know. I already got the script to do that from you","msgtype":"m.text"},"ts":1216383784000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"bed time now","msgtype":"m.text"},"ts":1216383785000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"nn","msgtype":"m.text"},"ts":1216383786000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"You should make the table user friendlier by deleting most of it","msgtype":"m.text"},"ts":1216383840000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(The full table just has too much data for anyone to ever make sense of)","msgtype":"m.text"},"ts":1216383841000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Approximately nobody uses MathML entities, so just get rid of them and tell people to use &#n; instead","msgtype":"m.text"},"ts":1216383900000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(*get rid of them in the author-oriented version of the table, even if they're still supported by UAs)","msgtype":"m.text"},"ts":1216383901000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I thought we only needed to address 80% of use-cases, so why do we need them at all?","msgtype":"m.text"},"ts":1216383902000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"hello! how good is the web forms 2.0 support of current browsers?","msgtype":"m.text"},"ts":1216383960000,"senderName":"richardigel","senderId":"richardigel@irc"},
{"content":{"body":"richardigel: http://en.wikipedia.org/wiki/Comparison_of_layout_engines_(HTML_5)#Web_Forms_2.0 might be relevant and might be roughly correct","msgtype":"m.text"},"ts":1216384020000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: hmm. pretty much nothing is implemented. ","msgtype":"m.text"},"ts":1216384200000,"senderName":"richardigel","senderId":"richardigel@irc"},
{"content":{"body":"MathML entities are very useful if you are trying to enter maths","msgtype":"m.text"},"ts":1216384201000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"LaTeX ftw.","msgtype":"m.text"},"ts":1216384260000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: Why not just copy-and-paste the Unicode symbols directly?","msgtype":"m.text"},"ts":1216384320000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: For the same reason that's inconvenient when when entering LaTeX","msgtype":"m.text"},"ts":1216384321000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: It's inconvenient when entering LaTeX because LaTeX doesn't support Unicode properly, whereas HTML and HTML editors do","msgtype":"m.text"},"ts":1216384380000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"\\Phi is easier than finding gnome character map, typing ctrl+f (or whatever it is) entering capital phi copying the result switching back to the editor and pasting ","msgtype":"m.text"},"ts":1216384440000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"the unicode support of LaTeX has very little to do with it","msgtype":"m.text"},"ts":1216384441000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"\\Phi is not much easier than finding the place where you used Î¦ on the previous line of equation or a few paragraphs earlier and then copying-and-pasting it","msgtype":"m.text"},"ts":1216384560000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Omitting entity refs just because they're silly isn't an option. The intention is to cover everything that authors would ever need to know about HTML5, including all useless features","msgtype":"m.text"},"ts":1216384740000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Philip`: It really is","msgtype":"m.text"},"ts":1216384741000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Philip`: You're just a silly comp.sci. student. Anyone who does real maths knows it is easier.","msgtype":"m.text"},"ts":1216384800000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Having to scan back through stuff breaks your concentration on what you're actually trying to do","msgtype":"m.text"},"ts":1216384801000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(and that'll probably be my only comment today with my physics hat on)","msgtype":"m.text"},"ts":1216384802000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Which (in the case of Latex) is try not to end up with the wrong number of \\lefts compared to your \\rights","msgtype":"m.text"},"ts":1216384803000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"This is really nice, but I don't want to just copy it http://www.digitalmediaminute.com/reference/entity/index.php","msgtype":"m.text"},"ts":1216384860000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: That seems a worse intention than trying to make something that is as useful as possible to authors (and hence has to be as easy to read as possible)","msgtype":"m.text"},"ts":1216384861000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`, making it as thorough as possible and being useful and easy to read aren't mutually exclusive goals","msgtype":"m.text"},"ts":1216384920000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"The HTML 5 spec already has everything authors could ever need to know, and is unreadable to authors because of it","msgtype":"m.text"},"ts":1216384980000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"often uses the HTML 4 spec when trying to look up how some element works","msgtype":"m.emote"},"ts":1216385040000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Lachy: But they are not absolutely compatible goals, so you'll have to make some tradeoffs between them","msgtype":"m.text"},"ts":1216385100000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"the HTML5 spec is not very readable by authors because it's targetted at implementers","msgtype":"m.text"},"ts":1216385101000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Look at e.g. the <img alt> definition - that's targetted at authors, with lots of examples and stuff, and it covers everything in excruciating detail, and so no author is going to bother reading it all and if they do then they're not going to understand it all properly","msgtype":"m.text"},"ts":1216385160000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Hmm, anyone got a clue why re.compile(u\"[\\U0001FFFF-\\U0002FFFF]\") causes an exception","msgtype":"m.text"},"ts":1216386300000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":">>> import re","msgtype":"m.text"},"ts":1216386360000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":">>> re.compile(u\"[\\U0001FFFF-\\U0002FFFF]\")","msgtype":"m.text"},"ts":1216386361000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"<_sre.SRE_Pattern object at 0xb7c43640>","msgtype":"m.text"},"ts":1216386362000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"hmm.","msgtype":"m.text"},"ts":1216387260000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Maybe it causes an exception because you didn't import re? :-p","msgtype":"m.text"},"ts":1216387261000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"sre_constants.error: bad character range","msgtype":"m.text"},"ts":1216387320000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"What version of Python?","msgtype":"m.text"},"ts":1216387440000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Is len(u\"[\\U0001FFFF-\\U0002FFFF]\") == 5?","msgtype":"m.text"},"ts":1216387441000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(Is it a UCS-2 build of Python?)","msgtype":"m.text"},"ts":1216387500000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"etc","msgtype":"m.text"},"ts":1216387501000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"2.5.1","msgtype":"m.text"},"ts":1216387560000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"No, it isn't. len() = 7","msgtype":"m.text"},"ts":1216387561000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"That sounds like it's doing something silly","msgtype":"m.text"},"ts":1216387800000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"has UCS-4 Python, and len() == 5","msgtype":"m.emote"},"ts":1216387801000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Works in my 2.4.3, len=5","msgtype":"m.text"},"ts":1216387920000,"senderName":"gDashiva","senderId":"gDashiva@irc"},
{"content":{"body":"JohnResig, I've just got a few issues to sort out with selectors api","msgtype":"m.text"},"ts":1216388820000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"I just gotta find the link...","msgtype":"m.text"},"ts":1216388880000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"http://lists.w3.org/Archives/Public/www-style/2008Jul/0419.html and ...","msgtype":"m.text"},"ts":1216388881000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"http://krijnhoetmer.nl/irc-logs/whatwg/20080718#l-225","msgtype":"m.text"},"ts":1216388940000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"basically, I need to sort out whether going with the more flexible :context/:scope was the right approach, and work out how to deal with the complaints","msgtype":"m.text"},"ts":1216389000000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"skim the IRC logs to catch up first though","msgtype":"m.text"},"ts":1216389060000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"the thing is, document.querySelector(\":context+p\", contextNode); would address all the use cases that JQuery handles, but it does require an explicit :context/:scope pseudo-class","msgtype":"m.text"},"ts":1216389180000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"whereas, element.queryScopedSelector(\"+p\"); which would be defined to imply :context at the beginning, and do a document wide search for all matching elements (which would be effectively limited to descendants and siblings anyway)","msgtype":"m.text"},"ts":1216389240000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"the latter requires hacking the Selector parser in browsers, the former is easier to define and implement, but places a small burdon on authors/js libraries","msgtype":"m.text"},"ts":1216389300000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"JohnResig, any thoughts?","msgtype":"m.text"},"ts":1216389360000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: I'm reading through the log at the moment...","msgtype":"m.text"},"ts":1216389420000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1216389421000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: I'm fine with the :root proposal, as well - just changing its meaning when it's within a context","msgtype":"m.text"},"ts":1216389422000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"taht may be easier to spec out?","msgtype":"m.text"},"ts":1216389423000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"*that","msgtype":"m.text"},"ts":1216389424000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"there are problems with the :root proposal that I'm not comfortable with","msgtype":"m.text"},"ts":1216389540000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"since it's defined to be the root of the document, and div.querySelector(\"body :root p\") would then work, which is silly.","msgtype":"m.text"},"ts":1216389600000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"but :context/:scope is the same as what people have asked to do with :root, just a different name.","msgtype":"m.text"},"ts":1216389601000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: The priority of constituencies says that spec writers and implementors should be burdened instead of authors, so that seems like an easy answer to your concern :-)","msgtype":"m.text"},"ts":1216389780000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"hmm, if we had document.querySelector(\":context+p\", contextNode); then element.queryScopedSelector(\"+p\"); could be defined to automatically imply :context and then behave as if the former had been called instead.","msgtype":"m.text"},"ts":1216389781000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Philip`, I know.","msgtype":"m.text"},"ts":1216389782000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"phew... this is a lot of logs - still reading","msgtype":"m.text"},"ts":1216389840000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"Philip`, but I don't think adding an extra pseudo-class is that much of a problem","msgtype":"m.text"},"ts":1216389841000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"wow, it went for over an hour :-)","msgtype":"m.text"},"ts":1216389900000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: you keep mentioning a document.querySelector(\"...\", contextNode) - I'm not sure where this is coming from","msgtype":"m.text"},"ts":1216390860000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"JohnResig, it's just one of the possible solutions","msgtype":"m.text"},"ts":1216390920000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"not specced yet","msgtype":"m.text"},"ts":1216390921000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"it was originally mentioned as a possible alternative at the end of this email http://lists.w3.org/Archives/Public/public-webapi/2008May/0057.html","msgtype":"m.text"},"ts":1216390980000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"and it is an alternative method to do what Hixie's proposed queryContextSelector() did.","msgtype":"m.text"},"ts":1216390981000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"this is where it was first mentioned in the logs http://krijnhoetmer.nl/irc-logs/whatwg/20080718#l-329","msgtype":"m.text"},"ts":1216391220000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: it seems like there's two issues at play here","msgtype":"m.text"},"ts":1216391760000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"hmm, wait","msgtype":"m.text"},"ts":1216391820000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"yeah, there could be a few","msgtype":"m.text"},"ts":1216391821000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"the big issue is that I see both sides of the issue and I'm indecisive :-(","msgtype":"m.text"},"ts":1216391940000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Are there mail readers that handle deeply nested threads less stupidly than Thunderbird (which indents the subject line by more than the width of the column it's in, hence making it disappear entirely)?","msgtype":"m.text"},"ts":1216394640000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`, Mail.app has a broken threading implementation that doesn't indent like Thunderbird.","msgtype":"m.text"},"ts":1216394700000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"but it's threading is more like a list, just grouped together","msgtype":"m.text"},"ts":1216394760000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"I have a thread with maybe two hundred messages, including big chunks that are mostly-independent forks from the main thread, and it'd be nice if those were handled sensibly instead of all being mushed together","msgtype":"m.text"},"ts":1216394880000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"describe what you would consider sensible?","msgtype":"m.text"},"ts":1216395000000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Maybe it could let me select a certain message and say that I want it (and all its descendants) to be displayed as if they were a new thread, instead of being nested under its parent","msgtype":"m.text"},"ts":1216395120000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Yeah, my build must be a UCS-2 of Python","msgtype":"m.text"},"ts":1216396680000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"or a UTF-16 one rather","msgtype":"m.text"},"ts":1216396800000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1216396801000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"<em<b>foo creates a different result in html5lib than it does in any browser, as far as I can see","msgtype":"m.text"},"ts":1216397880000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Philip`: What do you get for len(u\"\\U0001FFFF\")?","msgtype":"m.text"},"ts":1216398660000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: 1","msgtype":"m.text"},"ts":1216398780000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Yeah, it's a UTF-16 copy I have","msgtype":"m.text"},"ts":1216398781000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Philip`: mutt","msgtype":"m.text"},"ts":1216399380000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Does anyone care enough about the postprocessor's stupid ID generation enough to want me to copy it?","msgtype":"m.text"},"ts":1216408920000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(in w3c-compat, at least)","msgtype":"m.text"},"ts":1216408921000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"If you care enough to make a compat mode, it should be compatible","msgtype":"m.text"},"ts":1216409580000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"Dashiva: It never will be completely compatible, because what I do is too logical.","msgtype":"m.text"},"ts":1216410240000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Dashiva: It just needs to be compatible enough in the real world","msgtype":"m.text"},"ts":1216410241000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"And as with the postprocessor the IDs change half the time because the ID gen is so badâ€¦","msgtype":"m.text"},"ts":1216410242000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"/text()[contains(normalize-space(translate(., 'AEILNORSTV', 'aeilnorstv')), 'latest version') or contains(., 'http://www.w3.org/TR/')] â€” lovely xpath!","msgtype":"m.text"},"ts":1216410780000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Isn't there a lower()?","msgtype":"m.text"},"ts":1216411080000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"Nope.","msgtype":"m.text"},"ts":1216411140000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"In XPath 2.0 there is lower-case, but next to nothing actually implements 2.0","msgtype":"m.text"},"ts":1216411141000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"How wonderful","msgtype":"m.text"},"ts":1216411142000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"Yeah, it really is.","msgtype":"m.text"},"ts":1216411143000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"But when dealing with something as large as HTML 5, it tends to be quicker if you can get away with a single XPath statement than doing a whole iter of the tree","msgtype":"m.text"},"ts":1216411200000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Especially when looking at text nodes","msgtype":"m.text"},"ts":1216411201000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Gee. No case changing, but they have starts-with, substring-before and substring-after","msgtype":"m.text"},"ts":1216411260000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"XPath is so wonderful, it's a shame that more people don't implement more of it","msgtype":"m.text"},"ts":1216411261000,"senderName":"jcranmer","senderId":"jcranmer@irc"},
{"content":{"body":"although the spec could be made a little easier to digest for people trying to use it","msgtype":"m.text"},"ts":1216411320000,"senderName":"jcranmer","senderId":"jcranmer@irc"},
{"content":{"body":"Yeah, the spec is rather horrible","msgtype":"m.text"},"ts":1216411321000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"You have to be careful how much you use it when performance matters though","msgtype":"m.text"},"ts":1216411380000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"it's more useful (IMHO) than SAX or DOM when you're trying to scrape information from something with varying structure","msgtype":"m.text"},"ts":1216411381000,"senderName":"jcranmer","senderId":"jcranmer@irc"},
{"content":{"body":"Easier? I'd say so. Useful? No more so.","msgtype":"m.text"},"ts":1216411440000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"More convenient, but not really easier than DOM","msgtype":"m.text"},"ts":1216411500000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"Dashiva: what if you have something that can either be a dl, ul, ol, or table?","msgtype":"m.text"},"ts":1216411501000,"senderName":"jcranmer","senderId":"jcranmer@irc"},
{"content":{"body":"That's the convenient part","msgtype":"m.text"},"ts":1216411560000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"or, to be more precise, a specific row or item of any of those","msgtype":"m.text"},"ts":1216411561000,"senderName":"jcranmer","senderId":"jcranmer@irc"},
{"content":{"body":"tableref.rows[i].cols[j]","msgtype":"m.text"},"ts":1216411562000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"*cells","msgtype":"m.text"},"ts":1216411563000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"yes, but I have to store whether or not I'm querying the list or table","msgtype":"m.text"},"ts":1216411564000,"senderName":"jcranmer","senderId":"jcranmer@irc"},
{"content":{"body":"Yes, we already agreed it's more convenient with xpath","msgtype":"m.text"},"ts":1216411620000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"But the basic DOM functions are lot easier to learn than all the xpath incantations","msgtype":"m.text"},"ts":1216411680000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"I have to use a reference either way, but I guess I don't do enough HTML/XML-based development to matter","msgtype":"m.text"},"ts":1216411681000,"senderName":"jcranmer","senderId":"jcranmer@irc"},
{"content":{"body":"http://hg.gsnedders.com/spec-gen/file/tip/specGen/processes/sub.py#l101 â€” yay :\\","msgtype":"m.text"},"ts":1216411740000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I'm probably better at dealing with XPath, but mainly because I don't use the DOM much at all","msgtype":"m.text"},"ts":1216411741000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"WTH is the point of <!--status-->?","msgtype":"m.text"},"ts":1216412520000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"It only outputs anything apart from \"[Sorry, the postprocessor doesn't yet have the boilerplate text for this status]\" when the status is ED.","msgtype":"m.text"},"ts":1216412580000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Lachy, Hixie?","msgtype":"m.text"},"ts":1216412581000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders","msgtype":"m.text"},"ts":1216412880000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Yes, that's me","msgtype":"m.text"},"ts":1216412881000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"you called?","msgtype":"m.text"},"ts":1216412882000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"See the above question","msgtype":"m.text"},"ts":1216412883000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"hmm, let me see...","msgtype":"m.text"},"ts":1216412940000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Philip`: how did you go about obtaining your corpus of dmoz data?  did you write a script to download the files, and if so, any chance I could have it?  (for performance benchmarking reasons)","msgtype":"m.text"},"ts":1216412941000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"It seems to be the same thing in every status apart from ED de-facto anyway","msgtype":"m.text"},"ts":1216413120000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I dunno if MOs are the same, as I can't see any, though","msgtype":"m.text"},"ts":1216413180000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders, I get \"This is a public copy of the editors' draft. It is provided for discussion only and may change at any moment. It probably contains errors. Its publication here does not imply endorsement of its contents by W3C\"","msgtype":"m.text"},"ts":1216413240000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: Yeah, that's what I get. It's just that no other status gives anything (apart from the note that there is no boilerplate text)","msgtype":"m.text"},"ts":1216413241000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"oh, ok. let me try other ones...","msgtype":"m.text"},"ts":1216413300000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"has already tried them all","msgtype":"m.emote"},"ts":1216413301000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1216413302000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: What use is it when it doesn't give anything normally?","msgtype":"m.text"},"ts":1216413360000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"That's what I want to know.","msgtype":"m.text"},"ts":1216413361000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"it's probably because other statuses need custom status text","msgtype":"m.text"},"ts":1216413362000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"They don't. They all always have the same.","msgtype":"m.text"},"ts":1216413363000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"This section describes the status of this document at the time of its publication. Other documents may supersede this document. A list of current W3C publications and the latest revision of this technical report can be found in the W3C technical reports index at http://www.w3.org/TR/.","msgtype":"m.text"},"ts":1216413364000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"for whatever reason the geo api spec differs, but not by much.... ","msgtype":"m.text"},"ts":1216413540000,"senderName":"smedero","senderId":"smedero@irc"},
{"content":{"body":"\"This section describes the status of this document at the time of its publication. Other documents may supersede this document. A list of current W3C publications and the most recently formally published revision of this technical report can be found in the W3C technical reports index  at http://www.w3.org/TR/.\"","msgtype":"m.text"},"ts":1216413541000,"senderName":"smedero","senderId":"smedero@irc"},
{"content":{"body":"\"recently formally published\"","msgtype":"m.text"},"ts":1216413600000,"senderName":"smedero","senderId":"smedero@irc"},
{"content":{"body":"http://dev.w3.org/geo/api/spec-source.html","msgtype":"m.text"},"ts":1216413601000,"senderName":"smedero","senderId":"smedero@irc"},
{"content":{"body":"Ahah!","msgtype":"m.text"},"ts":1216413602000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"You get status text if you set the WG to \"CSS WG\"","msgtype":"m.text"},"ts":1216413660000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"refuses to copy that","msgtype":"m.emote"},"ts":1216413661000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I am _NOT_ adding WG specific stuff.","msgtype":"m.text"},"ts":1216413720000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders, have you checked the pubrules document to find out the requirements?","msgtype":"m.text"},"ts":1216413780000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: It changes for almost every status, and I don't want to do any more than the postprocessor does here. I'm not adding any W3C specific stuff without good reason","msgtype":"m.text"},"ts":1216414080000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders, if it's boiler plate text that is standard for each status level, then it should be included to make it easier for spec writers","msgtype":"m.text"},"ts":1216414320000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: But it's non-backwards-compatible","msgtype":"m.text"},"ts":1216414321000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"what do you mean?","msgtype":"m.text"},"ts":1216414322000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: Documents designed for the postprocessor have it in them themselves","msgtype":"m.text"},"ts":1216414380000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"so? Documents designed for the post processor also typically omit <!--status-->, and if that isn't there, then don't include it.","msgtype":"m.text"},"ts":1216414381000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: it ought to be compatible in the compat. mode, within reason, so I can't do that.","msgtype":"m.text"},"ts":1216414440000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"sure you can.","msgtype":"m.text"},"ts":1216414500000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"I don't see how updating a feature that wasn't properly implemented in the old processor will break anything.","msgtype":"m.text"},"ts":1216414501000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"takkaria: I just downloaded dmoz's RDF site listing, used Perl regexps to extract the URLs and to s/&amp;/&/ etc, then passed it through 'sort' and 'uniq', and then 'sort -R' to randomise it, and then took the first n from that list","msgtype":"m.text"},"ts":1216415700000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"takkaria: and then used a Java program to download and analyse the pages (using HttpClient, and around a hundred simultaneous threads)","msgtype":"m.text"},"ts":1216415760000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"takkaria: and the Java program cached the downloaded headers/content to disk so it wouldn't have to download them when I ran it a second time","msgtype":"m.text"},"ts":1216415820000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"takkaria: I could upload the Java thing somewhere, but it's big and ugly, and if you just want a collection of page bodies then it'd probably be easier to just pass the page list into wget or curl","msgtype":"m.text"},"ts":1216415880000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"goes away for a bit","msgtype":"m.emote"},"ts":1216415940000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(Oh, I also limited the downloads to something like 256K per page, because there was at least one infinitely long radio stream and I didn't want all of it)","msgtype":"m.text"},"ts":1216416000000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"*256KB","msgtype":"m.text"},"ts":1216416001000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1216416002000,"senderName":"smedero","senderId":"smedero@irc"},
{"content":{"body":"implements something he really doesn't want to","msgtype":"m.emote"},"ts":1216416420000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"http://hg.gsnedders.com/spec-gen/rev/f10347e98d3c","msgtype":"m.text"},"ts":1216416720000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"time to upload a few files from the latest spec-gen","msgtype":"m.text"},"ts":1216416900000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"http://stuff.gsnedders.com/spec-gen/ â€” find bugs in those files, plz.","msgtype":"m.text"},"ts":1216417020000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Philip`: ah, thanks.  I'll just grab the RDF and curl it","msgtype":"m.text"},"ts":1216417140000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"is tempted to add a --w3c-compat-crazy-subsitutions option","msgtype":"m.emote"},"ts":1216417260000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders, for which features?","msgtype":"m.text"},"ts":1216417380000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: rewriting http://www.w3.org/StyleSheets/TR/W3C-(MO|ED|WD|CR|PR|REC|PER|NOTE|RSCND|Member-SUBM)","msgtype":"m.text"},"ts":1216417381000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: fwiw, I don't like the automated ID generation","msgtype":"m.text"},"ts":1216417740000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I don't like the fact that the IDs can change","msgtype":"m.text"},"ts":1216417741000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: in the existing postprocessor?","msgtype":"m.text"},"ts":1216417800000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I mean in general","msgtype":"m.text"},"ts":1216417801000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"It doesn't seem like much of hardship to me for editors to manually maintain IDs","msgtype":"m.text"},"ts":1216417802000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: ah","msgtype":"m.text"},"ts":1216417920000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"having stable IDs is a much more valuable feature in a spec","msgtype":"m.text"},"ts":1216417980000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the ID-generation feature is the wrong kind of optimization","msgtype":"m.text"},"ts":1216417981000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I guess that isssue only shows up when the spec is going to take a long time to finish and is being written in public","msgtype":"m.text"},"ts":1216418040000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"of marginal and questionable value to editors, of zero value to readers and other consumers of the doc","msgtype":"m.text"},"ts":1216418041000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"takkaria: true","msgtype":"m.text"},"ts":1216418100000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"i don't want the ids in the source document if i can help it, but i'm certainly in agreement in principle and would love to see the generator keep state or something to not change IDs","msgtype":"m.text"},"ts":1216418220000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"generally if you use the title=\"\" attribute to generate the IDs you should be fine i think","msgtype":"m.text"},"ts":1216418280000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(which the postprocessor doesn't)","msgtype":"m.text"},"ts":1216418340000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"i don't mind if the IDs change as a one time thing when we're switching generators","msgtype":"m.text"},"ts":1216418341000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if that means more stability going forward","msgtype":"m.text"},"ts":1216418400000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yeah, the way I generate IDs should be far more stable","msgtype":"m.text"},"ts":1216418520000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"how do you do it?","msgtype":"m.text"},"ts":1216418521000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"from @title or the textContent, lowercase it, strip leading/trailing whitespace, replace internal whitespace with -","msgtype":"m.text"},"ts":1216418640000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(the postprocessor does all kinds of crazy stuff, but basically stops after it gets to the first space after taking five characters)","msgtype":"m.text"},"ts":1216418700000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"and a longer ID should make it more stable","msgtype":"m.text"},"ts":1216418701000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1216418760000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"never knew ID gen could be cool","msgtype":"m.emote"},"ts":1216419240000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"i'm not a good benchmark for determining objective coolness.","msgtype":"m.text"},"ts":1216419241000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I hate the crunching noise made by interaction of shoe and snail","msgtype":"m.text"},"ts":1216419360000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"If you can create a file mapping from old IDs to new IDs, it could be added into the multipage spec's magical redirection thingy so that old links get redirected to the right place","msgtype":"m.text"},"ts":1216419420000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"good idea","msgtype":"m.text"},"ts":1216419480000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: oh, btw, any chance of getting the tokeniser states upgraded to TOC-visible headers?  would make linking to states easier","msgtype":"m.text"},"ts":1216419481000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"file a bug","msgtype":"m.text"},"ts":1216419660000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1216419661000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"or send e-mail if it's not urgent","msgtype":"m.text"},"ts":1216419662000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"either way","msgtype":"m.text"},"ts":1216419663000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"html tidy complains that canvas tag is not recognized","msgtype":"m.text"},"ts":1216419780000,"senderName":"kangax","senderId":"kangax@irc"},
{"content":{"body":"interesting...","msgtype":"m.text"},"ts":1216419840000,"senderName":"kangax","senderId":"kangax@irc"},
{"content":{"body":"kangax: I expect it only understands elements from HTML4, so it won't include any HTML5 ones like <canvas>","msgtype":"m.text"},"ts":1216419900000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"that makes sense","msgtype":"m.text"},"ts":1216419901000,"senderName":"kangax","senderId":"kangax@irc"}
]