[
{"content":{"body":"Hixie_: fwiw I'm still getting the lots-of-408s problem in Chrome dev","msgtype":"m.text"},"ts":1399948785000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"or actually Chromium in my case, built from latest trunk","msgtype":"m.text"},"ts":1399948821000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"also btw for some time now I been noticing that when I switch to a tab I had in the background with a document in iti, the contents of the tab are blank","msgtype":"m.text"},"ts":1399948902000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and I have to manually refresh to get the contents to display again","msgtype":"m.text"},"ts":1399948955000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"not always be often. and even when I don't have to manually refresh and the contents get rendered without me doing that, there's a long lag before they actually get re-rendered on their own","msgtype":"m.text"},"ts":1399949091000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"as if it's just completely re-loading the whole document again its own","msgtype":"m.text"},"ts":1399949111000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: hmm, how long do you wait for the tab to re-draw?","msgtype":"m.text"},"ts":1399949142000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: 10 seconds or something","msgtype":"m.text"},"ts":1399949176000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"in some cases, forever","msgtype":"m.text"},"ts":1399949184000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"some never redraws on its own","msgtype":"m.text"},"ts":1399949200000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I've seen similar stuff, but I think it's actually waiting for the tab's pixmap to come back from the pagefile or something","msgtype":"m.text"},"ts":1399949215000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: ok","msgtype":"m.text"},"ts":1399949228000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"pagefile? who has swap in 2014","msgtype":"m.text"},"ts":1399949235000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"that was in my case, I'm not saying that he's got the same issue","msgtype":"m.text"},"ts":1399949255000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I been thinking maybe it's some problem in my build environment","msgtype":"m.text"},"ts":1399949446000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"dear firefox: clicking \"check for updates\" != \"download the update without asking\"","msgtype":"m.text"},"ts":1399949887000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"there was a recent update?","msgtype":"m.text"},"ts":1399949915000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"and now it updated without asking permission, and everything is fucking broken","msgtype":"m.text"},"ts":1399949922000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i wish chrome had usable vertical tabs, i'd probably drop firefox entirely","msgtype":"m.text"},"ts":1399949934000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"ugh","msgtype":"m.text"},"ts":1399949946000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"completely broke my extensions and it's way too late to figure out why","msgtype":"m.text"},"ts":1399949972000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"from the looks of the mostly-broken ui, it looks like they're trying to make firefox look... like chrome","msgtype":"m.text"},"ts":1399950018000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i guess they added a button that's a copy-paste of the menu button in chrome, except it's a terrible grid of icons instead of a real menu","msgtype":"m.text"},"ts":1399950065000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"there's always ESR firefox :p","msgtype":"m.text"},"ts":1399950143000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"this makes me want to just uninstall it and be done with it, but chrome isn't really usable either","msgtype":"m.text"},"ts":1399950170000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"well, maybe not \"always\", eventually ESR will include post-FF29","msgtype":"m.text"},"ts":1399950170000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"well I guess that leaves konqueror or IE or safari or one of the others then","msgtype":"m.text"},"ts":1399950221000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"netsurf!","msgtype":"m.text"},"ts":1399950237000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"looks like the tab styles changed, the address bar frame is taller, something broke my hack to put the restore/maximize/close windows buttons on the same row as the address bar, there's an extra useless menu button ... lots of garbage to fix tomorrow","msgtype":"m.text"},"ts":1399950267000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"feels like a bunch of upper management going \"we can't think of anything useful or beneficial to change, but we have to change something, so here's a list of nonsensical crap to do\"","msgtype":"m.text"},"ts":1399950306000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"which is a point that every large project seems to hit periodically in its lifecycle","msgtype":"m.text"},"ts":1399950333000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"well, you know what they say, you can't make everyone happy","msgtype":"m.text"},"ts":1399950389000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"no, it's the \"everything is fine, but if we don't keep changing things it'll look like we're not doing our jobs, so change things anyway\"","msgtype":"m.text"},"ts":1399950427000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"at least, that's what it looks like to someone whose browser just totally shat itself after an un-asked-for update at 10 PM who now gets to spend hours tomorrow unscrewing everything","msgtype":"m.text"},"ts":1399950475000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I thought the solution to that was being very vocal in reports to middle management and team meetings to give the appearance of knowing what you're talking about and having a finger on the pulse of the product","msgtype":"m.text"},"ts":1399950503000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i tend to think that if a product has a pulse, it's been seriously overengineered","msgtype":"m.text"},"ts":1399950527000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"and nobody would ever argue that firefox isn't overengineered...","msgtype":"m.text"},"ts":1399950544000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"the way things are, it's probably pretty difficult to write a browser which works on multiple platforms, including mobile platforms, and deals with all of the craziness of html/xml/css/js/everything else, without being \"overengineered\", it's hard to solve all of those problems in a simple way :(","msgtype":"m.text"},"ts":1399950701000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"chrome/webkit is *way* less overengineered than firefox","msgtype":"m.text"},"ts":1399950716000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"and then the underlying target platforms evolve as time goes by","msgtype":"m.text"},"ts":1399950721000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"well, tabs opened in chrome to see if it's bearable, but now i have 8 chrome windows, since i can fit maybe 1/4 as many tabs per window in chrome...","msgtype":"m.text"},"ts":1399951102000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Hixie_: the idea is that you shouldn't rely on scoping of with or event handlers","msgtype":"m.text"},"ts":1399960163000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hixie: correction re http://lists.whatwg.org/pipermail/help-whatwg.org/2014-May/003918.html you wrote \"and in some accessibility tools that haven't yet been","msgtype":"m.text"},"ts":1399961189000,"senderName":"SteveF","senderId":"SteveF@irc"},
{"content":{"body":"updated to match the HTML spec\" No accessibility tools or browsers have implemented the acc layer aspect of outline algo.","msgtype":"m.text"},"ts":1399961190000,"senderName":"SteveF","senderId":"SteveF@irc"},
{"content":{"body":"hixie: and you are now advising: \"my recommendation is to use <h2>-<h6> with <section>\" which is what the W3C HTML spec advises","msgtype":"m.text"},"ts":1399961438000,"senderName":"SteveF","senderId":"SteveF@irc"},
{"content":{"body":"Where is Ben?","msgtype":"m.text"},"ts":1399963276000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"IZh: Ben who?","msgtype":"m.text"},"ts":1399964966000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Ben Schwarz.","msgtype":"m.text"},"ts":1399965033000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"benschwarz: â†‘","msgtype":"m.text"},"ts":1399965744000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"foolip: flip pass condition in https://critic.hoppipolla.co.uk/r/1499 ?","msgtype":"m.text"},"ts":1399967904000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: um, yes, it's a star in my inbox","msgtype":"m.text"},"ts":1399969662000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"zcorpan: updated https://critic.hoppipolla.co.uk/r/1499","msgtype":"m.text"},"ts":1399970340000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: reviewed","msgtype":"m.text"},"ts":1399970433000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"https://twitter.com/Formation_media/status/466126996767256576","msgtype":"m.text"},"ts":1399970897000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: feedback on https://github.com/w3c/web-platform-tests/pull/970#issuecomment-42585194 and my comment requested","msgtype":"m.text"},"ts":1399971015000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"hmm. do browsers not prompt to unload for nested browsing contexts?","msgtype":"m.text"},"ts":1399972689000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Not sure","msgtype":"m.text"},"ts":1399972841000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"grumbles","msgtype":"m.emote"},"ts":1399973483000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"\"Start and end tag tokens have a tag name, a self-closing flag, and a list of attributes, each of which has a name and a value.\"","msgtype":"m.text"},"ts":1399973543000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"\"When the steps below require the user agent to adjust foreign attributes for a token, then, if any of the attributes on the token match the strings given in the first column of the following table, let the attribute be a namespaced attribute, with the prefix...\"","msgtype":"m.text"},"ts":1399973583000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"You didn't say anything about namespaced attributes!","msgtype":"m.text"},"ts":1399973596000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: is there a different component for the w3c xhr spec?","msgtype":"m.text"},"ts":1399974554000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: why are you asking me?","msgtype":"m.text"},"ts":1399974576000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: because maybe you know, and i don't see hallvord around","msgtype":"m.text"},"ts":1399974612000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: I've no idea","msgtype":"m.text"},"ts":1399974623000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok thx","msgtype":"m.text"},"ts":1399974627000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ok if i reopen and reassign to hallvord?","msgtype":"m.text"},"ts":1399974735000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"MikeSmith: can you create a new component for w3c xhr fork?","msgtype":"m.text"},"ts":1399974791000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I'd rather you don't do that","msgtype":"m.text"},"ts":1399974796000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That muddles the public record of the XHR spec even more","msgtype":"m.text"},"ts":1399974819000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what should we don instead?","msgtype":"m.text"},"ts":1399982371000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"is hte source of the w3c one in github?","msgtype":"m.text"},"ts":1399982408000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"if the w3c XHR spec is still claiming just to be a snapshot of the whatwg content then it seems like they just need to merge annevk's latest upstream changes","msgtype":"m.text"},"ts":1399982587000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: there's a weird fork now because they tried to make a stable v1 again","msgtype":"m.text"},"ts":1399982932000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah I read Hallvord's comment about it","msgtype":"m.text"},"ts":1399983192000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"oh now about the stable v1 thing though","msgtype":"m.text"},"ts":1399983206000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1399983211000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah this is coming back to me now","msgtype":"m.text"},"ts":1399983219000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"we don't need as stable v1","msgtype":"m.text"},"ts":1399983242000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I forget who's claiming we need one","msgtype":"m.text"},"ts":1399983264000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: Microsoft?","msgtype":"m.text"},"ts":1399983272000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"no idea","msgtype":"m.text"},"ts":1399983278000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I was in the room","msgtype":"m.text"},"ts":1399983292000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"and I have forgotten too","msgtype":"m.text"},"ts":1399983298000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I think \"everyone\" agreed it would be \"easy\" and so there was no problem with making one","msgtype":"m.text"},"ts":1399983333000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"All we need is half a dozen editors","msgtype":"m.text"},"ts":1399983383000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"jgraham: so \"list consensus\" is \"room consensus\"?","msgtype":"m.text"},"ts":1399983539000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"just ran into https://github.com/w3c/web-platform-tests/pull/974","msgtype":"m.emote"},"ts":1399983549000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"Iâ€¦confess to a strong bias against the fashion for reusable code. To me, 're-editable code' is much, much betterâ€¦\" - Donald Knuth","msgtype":"m.text"},"ts":1399983692000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I am very confused by that PR and hope you will sort it all out","msgtype":"m.text"},"ts":1399984391000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: I think hallvors need to come up with some pointers","msgtype":"m.text"},"ts":1399984437000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I normally review xhr tests, I stayed well clear of that one :P","msgtype":"m.text"},"ts":1399985595000,"senderName":"odinho","senderId":"odinho@irc"},
{"content":{"body":"annevk: if you're here when iZh is, tell him to email me?","msgtype":"m.text"},"ts":1399990008000,"senderName":"benschwarz","senderId":"benschwarz@irc"},
{"content":{"body":"he's been trying to catch me for a week straight, but our timezones are clearly bulllllshit","msgtype":"m.text"},"ts":1399990023000,"senderName":"benschwarz","senderId":"benschwarz@irc"},
{"content":{"body":"benschwarz: ok","msgtype":"m.text"},"ts":1399990036000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks for being my bot :-)","msgtype":"m.text"},"ts":1399990061000,"senderName":"benschwarz","senderId":"benschwarz@irc"},
{"content":{"body":"benschwarz: Sorry, I keep telling iZH to stop being a jerk and just either email or announce his questions in the chat, but he refuses.","msgtype":"m.text"},"ts":1399990246000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Very frustrating.","msgtype":"m.text"},"ts":1399990249000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"There's no need to call anyone a jerk","msgtype":"m.text"},"ts":1399990302000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"When multiple people have repeatedly asked someone to respect a common etiquette guideline, and they refuse...","msgtype":"m.text"},"ts":1399990392000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The list attribute is supported on <input type=\"range\">. How is the browser supposed to handle a drop down menu on a slider widget? Is there someplace where this is explained in the spec. As far as I can tell, no browser supports this, but I don't know what I should be looking for since it makes little sense to me.","msgtype":"m.text"},"ts":1399991516000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"I did find this example http://www.w3.org/TR/html5/forms.html#range-state-(type=range) that uses it in the w3 spec, but implementing that does nothing","msgtype":"m.text"},"ts":1399991583000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"Oh dear","msgtype":"m.text"},"ts":1399991587000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Why would you be looking at that ancient thing?","msgtype":"m.text"},"ts":1399991597000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"that was the only place I found an example of what is stated as support in http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html","msgtype":"m.text"},"ts":1399991641000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"Does anyone know?","msgtype":"m.text"},"ts":1399992572000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"fascinated at how websocket is painfully complex because it layers on top of http so it can transparently work through http routers, and ... doesn't work through http routers, so it's just grossly complex for the fun of it","msgtype":"m.text"},"ts":1399993019000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"jgraham: how do i trickle the response in a .py file handler?","msgtype":"m.text"},"ts":1399993257000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"zcorpan_: Either directly by using time.sleep, or in a slightly cumbersome way by importing the pipes file. I think there's an example of the latter somewhere","msgtype":"m.text"},"ts":1399993383000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"http://wptserve.readthedocs.org/en/latest/response.html second example?","msgtype":"m.text"},"ts":1399993411000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"Yep","msgtype":"m.text"},"ts":1399993447000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"thx","msgtype":"m.text"},"ts":1399993495000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"eventsource/resources/cors.py has an example of using a pipe inside a .py file","msgtype":"m.text"},"ts":1399993565000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Good morning anyone in SD. Anyone at Event Apart?","msgtype":"m.text"},"ts":1399995430000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"good morning, Whatwg!","msgtype":"m.text"},"ts":1399997223000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"has the DataCue proposal been discussed on the list? I can't find it in the archives.","msgtype":"m.text"},"ts":1399998957000,"senderName":"rillian","senderId":"rillian@irc"},
{"content":{"body":"rillian: it was an HTMLWG invention, I don't think it was ever discussed on the WHATWG list. It was discussed on the blink-dev list where I explained why I thought it didn't make much sense as written.","msgtype":"m.text"},"ts":1399999172000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: ok, thanks. I found that discussion.","msgtype":"m.text"},"ts":1399999339000,"senderName":"rillian","senderId":"rillian@irc"},
{"content":{"body":"I pretty much agreed with you, fwiw","msgtype":"m.text"},"ts":1399999358000,"senderName":"rillian","senderId":"rillian@irc"},
{"content":{"body":"an in band text track is an interesting alternative to the metadata object I tried to get support for a couple of years ago","msgtype":"m.text"},"ts":1399999430000,"senderName":"rillian","senderId":"rillian@irc"},
{"content":{"body":"i think the underlying use case for datacue makes a lot of sense. exposing the text tracks that are in all these files, etc.","msgtype":"m.text"},"ts":1399999462000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"but DataCue as written is a weird half-solution","msgtype":"m.text"},"ts":1399999463000,"senderName":"rillian","senderId":"rillian@irc"},
{"content":{"body":"but yeah, as written it doesn't really make sense","msgtype":"m.text"},"ts":1399999469000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I don't actually understand the motivation there. It's like they don't expect user agents to actually parse out the data they want, so they want a fallback for their polyfill...and then to make that fallback the default behaviour?","msgtype":"m.text"},"ts":1399999541000,"senderName":"rillian","senderId":"rillian@irc"},
{"content":{"body":"is the data they actually care about secret somehow? Too much work to spec a parser for?","msgtype":"m.text"},"ts":1399999563000,"senderName":"rillian","senderId":"rillian@irc"},
{"content":{"body":"beats me","msgtype":"m.text"},"ts":1399999630000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i don't understand how a parser could fill in the DataCue data structure without parsing the format in the first place","msgtype":"m.text"},"ts":1399999649000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"and if it has parsed it, why not expose more?","msgtype":"m.text"},"ts":1399999656000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"as I understand it, the parser is supposed to stop at the demuxer level","msgtype":"m.text"},"ts":1399999683000,"senderName":"rillian","senderId":"rillian@irc"},
{"content":{"body":"so it returns unparsed data items from the specific track","msgtype":"m.text"},"ts":1399999697000,"senderName":"rillian","senderId":"rillian@irc"},
{"content":{"body":"the right solution imho is to do the same as WebVTT does: provide an API for the format you parse","msgtype":"m.text"},"ts":1399999697000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"so you get native-code overhead levels when dealing with the video datarate, and it pops out stuff for a js-level parse to consume at texttrack data rates.","msgtype":"m.text"},"ts":1399999741000,"senderName":"rillian","senderId":"rillian@irc"},
{"content":{"body":"Hixie_: I agree","msgtype":"m.text"},"ts":1399999750000,"senderName":"rillian","senderId":"rillian@irc"},
{"content":{"body":"or figurate out some way to mark the origin and spec how to create VTTCues from it","msgtype":"m.text"},"ts":1399999797000,"senderName":"rillian","senderId":"rillian@irc"},
{"content":{"body":"*figure","msgtype":"m.text"},"ts":1399999835000,"senderName":"rillian","senderId":"rillian@irc"},
{"content":{"body":"Domenic: the exceptions i'm talking about aren't exceptions any author should ever see","msgtype":"m.text"},"ts":1400011610000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Domenic: i presume that you don't think that calling the method that returns a promise with arguments that would cause it to throw TypeError should throw the TypeError in the promise -- this would be equivalent, just more elaborate type checks","msgtype":"m.text"},"ts":1400011657000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: JS doesn't really have any distinction between different kinds of exceptions, apart from compile-time errors vs. runtime errors.","msgtype":"m.text"},"ts":1400011658000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"sure, but APIs do. Humans do.","msgtype":"m.text"},"ts":1400011671000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: no, that is exactly how promise-returning methods behave; argument validation errors become rejected promises.","msgtype":"m.text"},"ts":1400011675000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"o_O","msgtype":"m.text"},"ts":1400011681000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"wow","msgtype":"m.text"},"ts":1400011685000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"really?","msgtype":"m.text"},"ts":1400011689000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Indeed.","msgtype":"m.text"},"ts":1400011692000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that seems... absurd","msgtype":"m.text"},"ts":1400011706000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"It's an async function, so it uses the async channel for all its non-compile-time errors.","msgtype":"m.text"},"ts":1400011706000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That's why I said WebIDL will fix this for you","msgtype":"m.text"},"ts":1400011720000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that's really really bad for authors.","msgtype":"m.text"},"ts":1400011737000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"If your function is promise-returning, WebIDL will ensure any sync-thrown exceptions get turned into rejected promises, including e.g. ones from the overload resolution algorithm.","msgtype":"m.text"},"ts":1400011746000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it means that when i make a typo, i now get it reported in some unrelated part of my code instead of right where the error occurs.","msgtype":"m.text"},"ts":1400011755000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"No, you get it reported right where the error occurs...","msgtype":"m.text"},"ts":1400011765000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It's just like sync errors, you just use a different mechanism for catching them (or not)","msgtype":"m.text"},"ts":1400011780000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"people seem to like it, and for some reason invite me to speak at conferences about the aplus/commonjs version of promises, so authors seem to enjoy it","msgtype":"m.text"},"ts":1400011782000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"var promise = foo.someAPI(someBogusArgument);","msgtype":"m.text"},"ts":1400011786000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"the stack trace still points to the location at which the error was thrown","msgtype":"m.text"},"ts":1400011790000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"where's the debugger going to break?","msgtype":"m.text"},"ts":1400011798000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"if there's no catch for that promise, the debugger breaks on that line","msgtype":"m.text"},"ts":1400011810000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"assuming you have \"break on uncaught exceptions\" turned on.","msgtype":"m.text"},"ts":1400011823000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"how?","msgtype":"m.text"},"ts":1400011828000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I mean, I can show you the Chrome patch, if that helps?","msgtype":"m.text"},"ts":1400011837000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i mean, i haven't decided what i'm going to do with the promise yet","msgtype":"m.text"},"ts":1400011842000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"maybe i will set a handler for catching problems two years from now in a setTimeout callback","msgtype":"m.text"},"ts":1400011856000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yeah, in that case, it's just like if you catch the error further up the stack: the debugger is giving you  false positive","msgtype":"m.text"},"ts":1400011877000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the debugger does this already for sync errors","msgtype":"m.text"},"ts":1400011885000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so correction: it's more like \"break on all exceptions\" than \"break on uncaught exceptions\"","msgtype":"m.text"},"ts":1400011919000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wait so the debugger is actually breaking _before_ the promise's rejection is handled?","msgtype":"m.text"},"ts":1400011923000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"so this is much more like a language feature than something built on the language","msgtype":"m.text"},"ts":1400011946000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"indeed","msgtype":"m.text"},"ts":1400011954000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it's getting syntax in ES7","msgtype":"m.text"},"ts":1400011960000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"how do we \"explain\" that?","msgtype":"m.text"},"ts":1400011961000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"well, first there were Turing machines...","msgtype":"m.text"},"ts":1400011970000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so there's no way for me to implement my own promise-like thing that has this \"stop the debugger on some random other line\" behaviour?","msgtype":"m.text"},"ts":1400012003000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I mean, in general there is no way to implement your own debugger without C++","msgtype":"m.text"},"ts":1400012035000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the debugger is a privileged API","msgtype":"m.text"},"ts":1400012051000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"part of the browser UX, etc.","msgtype":"m.text"},"ts":1400012056000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"sure but previously i could throw an exception","msgtype":"m.text"},"ts":1400012061000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"or do a callback","msgtype":"m.text"},"ts":1400012068000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"we don't attempt to explain browser UX generally","msgtype":"m.text"},"ts":1400012068000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but this is like some weird hybrid","msgtype":"m.text"},"ts":1400012076000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"this is weird","msgtype":"m.text"},"ts":1400012157000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"so as a JS author, i can write a function that can throw or return a promise","msgtype":"m.text"},"ts":1400012168000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"but as a spec author i can't?","msgtype":"m.text"},"ts":1400012173000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yeah, we try to provide spec authors tools to write best-practice functions","msgtype":"m.text"},"ts":1400012191000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I mean you can always use prose","msgtype":"m.text"},"ts":1400012193000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i'm very skeptical about this being best practice","msgtype":"m.text"},"ts":1400012206000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"TypeError being a run-time thing rather than compile-time thing is bad enough, but now it's not even run-time, it's barely even an error","msgtype":"m.text"},"ts":1400012231000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Domenic: what *is* the best practice?","msgtype":"m.text"},"ts":1400012247000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: async functions signal errors through promises; sync functions signal them through exceptions.","msgtype":"m.text"},"ts":1400012263000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"just some random notification you get on a callback in a different task","msgtype":"m.text"},"ts":1400012264000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"errors should be signalled when found, no?","msgtype":"m.text"},"ts":1400012286000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: indeed, although signalled through the appropriate channel for the type of programming the user is engaging in.","msgtype":"m.text"},"ts":1400012313000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"putting logic errors into the same bucket as unexpected errors imposed from the outside world seems like a huge mistake.","msgtype":"m.text"},"ts":1400012319000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1400012326000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"This is just how JS works","msgtype":"m.text"},"ts":1400012326000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"There is no separation between \"logic errors\" and \"typo errors\"","msgtype":"m.text"},"ts":1400012333000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"err, \"logic errors\" and \"outside world errors\"","msgtype":"m.text"},"ts":1400012346000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i should be able to hand a promise to someone else safe in the knowledge that it's not going to notify the other person that i failed to give the right arguments","msgtype":"m.text"},"ts":1400012352000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"trying to use the exception vs. callback channels to signal that is no good","msgtype":"m.text"},"ts":1400012359000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: well, if the error is \"your arguments didn't make any sense\" you don't need to find out about it asynchronously or never ...","msgtype":"m.text"},"ts":1400012360000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Hixie_: why? That's not true for a synchronous function","msgtype":"m.text"},"ts":1400012377000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: sure it is","msgtype":"m.text"},"ts":1400012385000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: handing someone a promise is like handing someone a function, essentially","msgtype":"m.text"},"ts":1400012387000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"if your arguments don't make sense, presumably the function you called which returns a promise will throw before giving you a promise","msgtype":"m.text"},"ts":1400012391000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Domenic: nooo it isn't","msgtype":"m.text"},"ts":1400012396000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Hixie_: someoneElse(function () { JSON.parse(\"{forgotMy: 'quotes' }\"); })","msgtype":"m.text"},"ts":1400012406000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: it's like handing them the return value of a function","msgtype":"m.text"},"ts":1400012419000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"caitp: no, it won't, it will return a rejected promise","msgtype":"m.text"},"ts":1400012419000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: right now, if you pass me a \"success\" callback and a \"failure\" callback, and there's some logic error in my code, i'm not going to call failure, i'm going to throw to the caller.","msgtype":"m.text"},"ts":1400012422000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"SamB: that's not true, because promises represent async operations, as well as representing async values.","msgtype":"m.text"},"ts":1400012438000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: it might return a rejected promise, but it doesn't have to","msgtype":"m.text"},"ts":1400012442000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: Domenic is saying that it'll return a promise that gets rejected with the exception that would have been thrown.","msgtype":"m.text"},"ts":1400012461000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"caitp: it does, if it's using WebIDL","msgtype":"m.text"},"ts":1400012470000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"you mean for a native DOM method which returns a promise","msgtype":"m.text"},"ts":1400012487000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"... maybe we should see what Twisted does?","msgtype":"m.text"},"ts":1400012496000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"because for anyone outside of browser/dom-land, there is no such guarantee","msgtype":"m.text"},"ts":1400012513000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"twisted is probably the python api that i hate the most","msgtype":"m.text"},"ts":1400012524000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"hmm.","msgtype":"m.text"},"ts":1400012531000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"caitp: sure, unless those people are using `async function` from ES7 & transpiler friends. Those also give that guarantee.","msgtype":"m.text"},"ts":1400012533000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"zewt: what do you prefer?","msgtype":"m.text"},"ts":1400012537000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"takes one of the cleanest languages/platforms out there and makes it incomprehensible and complex","msgtype":"m.text"},"ts":1400012544000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"does traceur already try to transpile from ES7? :p","msgtype":"m.text"},"ts":1400012557000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: yes","msgtype":"m.text"},"ts":1400012569000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i just use python, never found a need for anything like twisted","msgtype":"m.text"},"ts":1400012569000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i'm shocked, i'm stunned","msgtype":"m.text"},"ts":1400012576000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"the claim that there's no difference between logic errors and unexpected error conditions is just wrong, IMHO. Sure, there's no difference at the level of \"instanceof\", but there is _absolutely_ a difference for programmers.","msgtype":"m.text"},"ts":1400012596000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"wonders if he should point out what happens when you type Ctrl-C while CPython is just warming up ...","msgtype":"m.emote"},"ts":1400012604000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Hixie_: I agree, but I don't think they should be signaled through completely different channels, where one breaks your program flow and the other is caught.","msgtype":"m.text"},"ts":1400012633000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hixie_: I think it should be signaled through better error type information, so you can do discriminatory catches","msgtype":"m.text"},"ts":1400012644000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the logic error one should _absolutely_ break your program flow.","msgtype":"m.text"},"ts":1400012649000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Domenic: but that's basically what programmers WANT to happen","msgtype":"m.text"},"ts":1400012649000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"it _should_ be a compile-time error.","msgtype":"m.text"},"ts":1400012654000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"SamB: that is false","msgtype":"m.text"},"ts":1400012658000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"because the program is broken anyway","msgtype":"m.text"},"ts":1400012660000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"it _should_ be caught before you even close the IDE","msgtype":"m.text"},"ts":1400012671000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: it should not break your control flow; that prevents you from writing resilient components that don't affect the result of the system","msgtype":"m.text"},"ts":1400012672000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"SamB: the program is not broken","msgtype":"m.text"},"ts":1400012678000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it should break ASAP, and as hard as possible.","msgtype":"m.text"},"ts":1400012688000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"SamB: at this very moment at work I am working on a page which is not broken, but only a tiny part of it is, because of this property","msgtype":"m.text"},"ts":1400012690000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so that it is caught and fixed ASAP.","msgtype":"m.text"},"ts":1400012694000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Domenic: if you want resiliance, you must catch stuff, as always","msgtype":"m.text"},"ts":1400012699000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"obviously logging it somewhere","msgtype":"m.text"},"ts":1400012709000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: exactly! And for async methods you catch stuff using `.catch()`","msgtype":"m.text"},"ts":1400012720000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i don't even think \"type error\" from arguments being wrong should be catchable. like i said, it _should_ be a compile-time error, IMHO.","msgtype":"m.text"},"ts":1400012732000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: http://esdiscuss.org/topic/try-catch-conditional-exceptions-in-light-of-generators","msgtype":"m.text"},"ts":1400012750000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hixie_: catching it might actually help get errors somewhere useful in some systems though","msgtype":"m.text"},"ts":1400012756000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: i think it should fire onerror, for that kind of thing","msgtype":"m.text"},"ts":1400012775000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Yeah, since we don't have a compiler to check all this code ahead of time, it's really useful to be able to handle the errors dynamically.","msgtype":"m.text"},"ts":1400012779000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Build isolated systems that can contain any errors within that part of the system","msgtype":"m.text"},"ts":1400012795000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"And so on","msgtype":"m.text"},"ts":1400012797000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"man, JS just becomes less and less a language that i want to use","msgtype":"m.text"},"ts":1400012842000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: I am a fan of http://esdiscuss.org/topic/try-catch-conditional-exceptions-in-light-of-generators#content-10","msgtype":"m.text"},"ts":1400012846000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hixie_: you could make up your own __attribute__ ;-P","msgtype":"m.text"},"ts":1400012868000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"mumbles something about caja","msgtype":"m.emote"},"ts":1400012889000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Domenic: yeah, something liek that is similar to the \"unique IDs per spec throw point\" idea we were throwing around recently","msgtype":"m.text"},"ts":1400012902000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"but fundamentally, the problem with that entire page is that the premise is wrong","msgtype":"m.text"},"ts":1400012929000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"the \"return res\" thing should fail to compile.","msgtype":"m.text"},"ts":1400012934000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"imho.","msgtype":"m.text"},"ts":1400012935000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"(i understand doing that in js is non-trivial, though really 'use strict' should have been a time to do it if we ever were going to fix this once and for all)","msgtype":"m.text"},"ts":1400012965000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: you're saying generators shouldn't ever be allowed to return? I agree.","msgtype":"m.text"},"ts":1400013028000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"lets see what happens in Python ...","msgtype":"m.text"},"ts":1400013036000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"no i'm saying that the typo should be caught by the compiler.","msgtype":"m.text"},"ts":1400013051000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"wait, how would that happen?","msgtype":"m.text"},"ts":1400013060000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"there's no variable called \"res\" in scope.","msgtype":"m.text"},"ts":1400013070000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Yeah, that kind of error stems from the global object being in scope","msgtype":"m.text"},"ts":1400013087000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"in sensible languages, that's catchable at compile-time.","msgtype":"m.text"},"ts":1400013088000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"(how do you know what's in scope?)","msgtype":"m.text"},"ts":1400013089000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"well like i said, in JS this is non-trivial.","msgtype":"m.text"},"ts":1400013104000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"There was hope that in ES6 modules the global object would not be in scope, so you could add this kind of static checking","msgtype":"m.text"},"ts":1400013107000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Python and JavaScript are not sensible in that way :-(","msgtype":"m.text"},"ts":1400013107000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"but that's the main problem with JS, IMHO.","msgtype":"m.text"},"ts":1400013115000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"But unfortunately it was deemed to WATish to remove the global object from the scope","msgtype":"m.text"},"ts":1400013121000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and so we lost compile-time checking of all bindings :(","msgtype":"m.text"},"ts":1400013133000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"though I guess in Python there isn't exactly an object that is the global scope?","msgtype":"m.text"},"ts":1400013139000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"the vast majority of my errors in JS are things like passing the wrong number or types of arguments. The idea that this is going to be even less quickly catchable is really not pleasing to me.","msgtype":"m.text"},"ts":1400013143000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"\"Most untrusted events SHOULD NOT trigger default actions, with the exception of click or DOMActivate events.\"","msgtype":"m.text"},"ts":1400013155000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ah, D3E","msgtype":"m.text"},"ts":1400013159000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hixie_: yeah, that's my problem with it too","msgtype":"m.text"},"ts":1400013165000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I have enough trouble debugging people's pages for them when I get to *see* the exceptions they don't catch ...","msgtype":"m.text"},"ts":1400013202000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"(or for me)","msgtype":"m.text"},"ts":1400013209000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I didn","msgtype":"m.text"},"ts":1400013238000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"t  get an answer this morning so I","msgtype":"m.text"},"ts":1400013246000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"ll try again","msgtype":"m.text"},"ts":1400013251000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"The list attribute is supported on <input type=\"range\">. How is the browser supposed to handle a drop down menu on a slider widget? Is there someplace where this is explained in the spec. As far as I can tell, no browser supports this, but I don't know what I should be looking for since it makes little sense to me.","msgtype":"m.text"},"ts":1400013252000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"estellevw: I imagine that's up to the browser implementers.","msgtype":"m.text"},"ts":1400013271000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"estellevw: so if nobody's implemented it yet, then probably nobody has any idea, and whoever gets there first gets to decide.","msgtype":"m.text"},"ts":1400013288000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"if you have a slider UI, how can you implement a drop down list?","msgtype":"m.text"},"ts":1400013289000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"estellevw: probably never anything","msgtype":"m.text"},"ts":1400013298000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"it might just be an oversimplification in the content model?","msgtype":"m.text"},"ts":1400013310000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"or maybe for when you mutate an input","msgtype":"m.text"},"ts":1400013323000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"estellevw: it wouldn't be a drop-down widget, it'd be tick marks","msgtype":"m.text"},"ts":1400013345000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"it makes sense if range is not supported.","msgtype":"m.text"},"ts":1400013347000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"estellevw: for example it might be a set of snap points","msgtype":"m.text"},"ts":1400013349000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"estellevw: there's examples in the spec, see the type=range section","msgtype":"m.text"},"ts":1400013353000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"hmm, tick marks","msgtype":"m.text"},"ts":1400013357000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"i see the tick marks,","msgtype":"m.text"},"ts":1400013364000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"<- ignore this idiot","msgtype":"m.text"},"ts":1400013366000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"that makes sense","msgtype":"m.text"},"ts":1400013367000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"you can't return (with a value) from a python generator","msgtype":"m.text"},"ts":1400013374000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"second example at http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#range-state-%28type=range%29","msgtype":"m.text"},"ts":1400013379000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"now that I understand it, i'll retest","msgtype":"m.text"},"ts":1400013430000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1400013433000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"Hixie_, the thing which is insane is how as you said, combinations of settings can have different, but related meanings --- so you can't just handle each flag independenly, you also have to look at potential combinations of different flags, and currently there are currently (in stable Chrome, I'm not looking at the spec right now to see if it's changed), like 10 flags, so if have 10 things to handle independently, and","msgtype":"m.text"},"ts":1400015352000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":" then if you have like 10^2 for combinations of 2, 10^3 for combinations of 3, etc.. you have a whole pile of possibilities to handle, because the information is not conveyed in a very good way","msgtype":"m.text"},"ts":1400015353000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"what's the altnative? a single attributes with n^m possible values?","msgtype":"m.text"},"ts":1400015414000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"so before html5 constraint validation came along, the validation handling in Angular could be a lot simpler, but now it becomes ridiculously complicated","msgtype":"m.text"},"ts":1400015422000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"why would it be any different?","msgtype":"m.text"},"ts":1400015455000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"previously for instance, we could just look at an inputs value and test it against a regular expression to decide if it's a valid number, now the browser does that for us and doesn't expose a value to us if it's wrong, and it makes it more complicated to figure out what the issue is and report the correct information to the user","msgtype":"m.text"},"ts":1400015563000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"so before you could determine if the value was bad input or not by using a regular expression, whereas now that is exposed to you in a single boolean, and the single boolean is more complicated?","msgtype":"m.text"},"ts":1400015598000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i really don't follow","msgtype":"m.text"},"ts":1400015623000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the boolean is more complicated, because it means different things depending on the state of different flags","msgtype":"m.text"},"ts":1400015644000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"this means that we aren't actually shrinking the codebase, we have to grow the codebase to accomodate the crazy constraint validation story which prevents us from doing it the legacy way","msgtype":"m.text"},"ts":1400015670000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"badInput _always_ means \"the input the user provided is not something i can turn into submittable data\"","msgtype":"m.text"},"ts":1400015694000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it never means anything else","msgtype":"m.text"},"ts":1400015697000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"regardless of the other values or attributes","msgtype":"m.text"},"ts":1400015702000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well, unfortunately in our case it's a bit more complicated than that, although hopefully that will be resolved soon (there's a pipeline structure which causes all kinds of grief when combined with html5 constraint validation)","msgtype":"m.text"},"ts":1400015756000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"why do you think the boolean \"means different things depending on the state of different flags\"? what other things does it mean?","msgtype":"m.text"},"ts":1400015782000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"is there context for this discussion? It sounds interesting.","msgtype":"m.text"},"ts":1400015809000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"if you have valueMissing, you have to care about whether badValue is set or not","msgtype":"m.text"},"ts":1400015814000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Domenic: https://www.w3.org/Bugs/Public/show_bug.cgi?id=25369","msgtype":"m.text"},"ts":1400015824000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"because if badValue is set, valueMissing is irrelevant","msgtype":"m.text"},"ts":1400015826000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: so just check badInput first?","msgtype":"m.text"},"ts":1400015834000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"caitp: how is that different than before?","msgtype":"m.text"},"ts":1400015840000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I have historically had problems with the HTML validation API but I think Hixie fixed them a while ago by adding a method that did something I wanted... I'm fuzzy on the details. Something related to showing the UI without submitting the form, perhaps.","msgtype":"m.text"},"ts":1400015856000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"caitp: before, if the regexp didn't match the \"has digits\" regexp, you had to check if it was blank or not, no?","msgtype":"m.text"},"ts":1400015871000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"these checks have to happen in a bunch of different places and the end result is that it kind of sucks =( but I think we may be able to work around it for angular, however I imagine it will be a pain for other libraries too","msgtype":"m.text"},"ts":1400015884000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: what i don't understand is why this is worse with the current API than it was before","msgtype":"m.text"},"ts":1400015899000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"because it grows the code way more than it should need ot","msgtype":"m.text"},"ts":1400015910000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: it seems to be it should be at worst the same, and probably significantly better.","msgtype":"m.text"},"ts":1400015911000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ideally, constraint validation should shrink the codebase","msgtype":"m.text"},"ts":1400015918000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: why does it grow the code? give me concrete examples man.","msgtype":"m.text"},"ts":1400015921000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"instead of making it more complicated and cumbersome","msgtype":"m.text"},"ts":1400015925000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"so, we have to support some legacy browsers without constraint validation (old IE), so we can't really get rid of all of the old stuff. But in addition to the old stuff, we now have to add some tests to make sure they don't do the wrong thing when constraint validation is available","msgtype":"m.text"},"ts":1400015985000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"and when it is available, we still need to do more tests to handle all of the different states, for each routine responsible for validation","msgtype":"m.text"},"ts":1400016006000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"ok if the reason the new API makes things bigger is that you have to support the new API and no API, then _any_ new API will have this problem.","msgtype":"m.text"},"ts":1400016012000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well, not necessarily","msgtype":"m.text"},"ts":1400016023000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"if we didn't have the \"badInput === empty string\" thing, then it would be totally invisible to us and we wouldn't have to care","msgtype":"m.text"},"ts":1400016043000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"can you show me the code you have now, and the code as it would look if whatever change you want was in the spec?","msgtype":"m.text"},"ts":1400016095000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"https://github.com/angular/angular.js/blob/master/src/ng/directive/input.js most of the validation story is in there, although one of the other people is working on a big refactor which will hopefully address the issues with it","msgtype":"m.text"},"ts":1400016146000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: but what would change, specifically?","msgtype":"m.text"},"ts":1400016359000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well, there are a few things in there that are just plain wrong right now, but lets see","msgtype":"m.text"},"ts":1400016380000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"curious, does this have actual implementations http://www.w3.org/TR/CSS2/aural.html ?","msgtype":"m.text"},"ts":1400016619000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"well, the code is pretty wrong right now hixie, right now the number validator does the right thing, but the required validator needs to know to ignore if badInput is set","msgtype":"m.text"},"ts":1400016676000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"someone should make that change, will do it later. but I still think that valueMissing should really only mean \"the user didn't type anything\", and should not be affected by badInput","msgtype":"m.text"},"ts":1400016714000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Domenic: some obscure Emacs mode i think vaguely tries to implement it, and Opera once had an implementaton of some sort, but basically, no.","msgtype":"m.text"},"ts":1400016736000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: sounds about what I expected. 2 independent implementations, but not really.","msgtype":"m.text"},"ts":1400016757000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"caitp: valueMissing has little to do with what the user entered. The \"value\" in \"valueMissing\" is the .value attribute.","msgtype":"m.text"},"ts":1400016759000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic: certainly not enough to pass any test suite barrier","msgtype":"m.text"},"ts":1400016773000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the argument that I've been making on that thread, is that it really should be related to what the user enters","msgtype":"m.text"},"ts":1400016793000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: it's saying \"this form can't be submitted because this control says it's \"required\" but i don't have something to submit\"","msgtype":"m.text"},"ts":1400016805000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"caitp: well we could talk about a new attribute that has more to do with what the user entered, but what's the use case?","msgtype":"m.text"},"ts":1400016822000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the form will have another reason not to submit in that case, though, will it not?","msgtype":"m.text"},"ts":1400016823000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: like what?","msgtype":"m.text"},"ts":1400016830000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"like suffering from bad input","msgtype":"m.text"},"ts":1400016835000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"if required is true and you enter a bad value and try to submit, Chrome will tell you that your value is broken, not that you forgot to enter a value for a required field","msgtype":"m.text"},"ts":1400016875000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"this is the sensible use case","msgtype":"m.text"},"ts":1400016880000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"like, it just kind of intuitively makes sense to humans","msgtype":"m.text"},"ts":1400016890000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"you don't want to type \"moo\" into a number input and be told \"*age is a required field\", because psychologically that just doesn't click","msgtype":"m.text"},"ts":1400016928000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"sure. that's why you check badInput before valueMissing when reporting things.","msgtype":"m.text"},"ts":1400017069000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"That's not n*m complexity","msgtype":"m.text"},"ts":1400017074000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's just n complexity","msgtype":"m.text"},"ts":1400017076000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's just that you have to check them in order.","msgtype":"m.text"},"ts":1400017087000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"similarly, you check badInput before patternMismatch","msgtype":"m.text"},"ts":1400017094000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"right, but if my validator is only responsible for verifying that you've entered a value, why should I even have to care if you've entered a bad value? I should only care that you've entered a value at all","msgtype":"m.text"},"ts":1400017113000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it should not even be concerned with the badInput flag, ideally","msgtype":"m.text"},"ts":1400017178000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"that's all i've been saying in that bug","msgtype":"m.text"},"ts":1400017185000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it's a separation of concerns issue, you could say","msgtype":"m.text"},"ts":1400017242000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"and an issue of simplification","msgtype":"m.text"},"ts":1400017259000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"anyways, I should probably reply on the bug so that there's a historical record of it, but I don't have time at the moment due","msgtype":"m.text"},"ts":1400017298000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: why would you ever want to know if you've entered a value, but not care if the value is valid or not?","msgtype":"m.text"},"ts":1400018536000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"because that's really all a \"required\" validator needs to do","msgtype":"m.text"},"ts":1400018691000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"a required validator is concerned with whether or not you've entered a value, an email validator is concerned with your input matching the requirements from some RFC or W3/WHATWG recommendation, your number validator cares that you've entered a number in some fashion, but they shouldn't need to mix their concerns","msgtype":"m.text"},"ts":1400018783000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"dglazkov: ping","msgtype":"m.text"},"ts":1400018929000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"caitp: if all you want to do is tell the user they are supposed to have entered a value, you don't have to do anything. The browser will just do it for you.","msgtype":"m.text"},"ts":1400018955000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if you're lucky and you're targetting a modern browser which implements constraint validation correctly (which certainly isn't always the case)","msgtype":"m.text"},"ts":1400018999000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"well if you're not then again, the current API is kinda irreelvat...","msgtype":"m.text"},"ts":1400019015000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"irrelevant","msgtype":"m.text"},"ts":1400019017000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or if you want to do something like render custom validation messages in some pretty widget kit, or whatever","msgtype":"m.text"},"ts":1400019042000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"honestly i don't see why \"a required validator\" is something you'd even have","msgtype":"m.text"},"ts":1400019134000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i mean, it's two lines of code","msgtype":"m.text"},"ts":1400019137000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if (the thing is required and it's not given) reportInAPrettyFashion(that the thing is required and it's not given)","msgtype":"m.text"},"ts":1400019161000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i feel like anything more than that is probably over-engineered.","msgtype":"m.text"},"ts":1400019192000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"because in framework-land, things are designed to make building applications easier, so we don't really deal with totally imperative win32-api-looking stuff","msgtype":"m.text"},"ts":1400019199000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"well, you could argue that, but if nobody over-engineered things, the WWW wouldn't exist :p","msgtype":"m.text"},"ts":1400019216000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"all I'm saying is, what is the use in valueMissing caring about badInput, when A) it only ever gets set if required is used, and B) browser-native validation messages will ignore it if badInput is set instead","msgtype":"m.text"},"ts":1400019393000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"like, what is the use case for setting valueMissing when badInput is set, how do people get use out of that, apart from requiring them to add an extra logical OR operator that should really be unnecessary","msgtype":"m.text"},"ts":1400019505000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I get that you're saying it means \"the value property is empty\", but the question is, why do we care, unless the user has not entered anything","msgtype":"m.text"},"ts":1400019619000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"browsers don't care, so why should script contexts have to care","msgtype":"m.text"},"ts":1400019649000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: valueMissing doesn't care about badInput. That's my point.","msgtype":"m.text"},"ts":1400021237000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"caitp: valueMissing isn't special here. All the other validation attributes work the same way.","msgtype":"m.text"},"ts":1400021260000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"caitp: you don't need any additional operators. If you want to report that the user has entered bad input, you check badInput. That's all.","msgtype":"m.text"},"ts":1400021293000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"caitp: so you don't have to care. Just don't check it.","msgtype":"m.text"},"ts":1400021312000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"in other news, anyone have any idea what https://www.w3.org/Bugs/Public/show_bug.cgi?id=25442 is about?","msgtype":"m.text"},"ts":1400021321000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's not true, if we want to provide a good user experience, then we do have to care =( I don't think this is getting through to you","msgtype":"m.text"},"ts":1400021393000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"anyways, it's not the biggest problem in the world, but it's something which is pretty nonsensical and probably shouldn't be","msgtype":"m.text"},"ts":1400021438000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: it's clearly not getting through to me.","msgtype":"m.text"},"ts":1400021847000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"caitp: you ask \"why do we care\", i told you you don't have to care, you respond \"we do have to care\"","msgtype":"m.text"},"ts":1400021875000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"caitp: i'm not understanding","msgtype":"m.text"},"ts":1400021880000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"okay, lets try this","msgtype":"m.text"},"ts":1400021890000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"pretend your body is a validation framework, and your left hand is responsible for determining whether a value has been entered at all, and your right hand is responsible for determining if an entered value fits some format","msgtype":"m.text"},"ts":1400021940000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"your left hand doesn't know anything about the right hand, and vice versa, nor should it","msgtype":"m.text"},"ts":1400021962000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"arv_: any further input on https://www.w3.org/Bugs/Public/show_bug.cgi?id=25522 ?","msgtype":"m.text"},"ts":1400021984000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"caitp: that's a silly design.","msgtype":"m.text"},"ts":1400021996000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so, someone gives your right hand an apple, but it only wants an orange, and it considers this value to be invalid. your left hand should not have to care that your right hand was handed an apple","msgtype":"m.text"},"ts":1400022018000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"because your left hand should only have to care if the right hand was given anything at all","msgtype":"m.text"},"ts":1400022037000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: that's like saying \"i'm going to make a text edit box. Now this function is responsible for the first character entered, and this one is responsible for the second character entered. I wish the API didn't provide both characters in the same attribute, that makes it hard for me to split the logic in this way.\"","msgtype":"m.text"},"ts":1400022044000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"they are concerned with two different things, one limb is worried about the presence of a value, the other limb is worried about the format/type of value","msgtype":"m.text"},"ts":1400022059000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it would be a different matter if \"determining whether a value has been entered at all\" was some complicated operation requiring 5 or 50 or 500 lines of code or something.","msgtype":"m.text"},"ts":1400022082000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but it's literally a one line expression with two parts","msgtype":"m.text"},"ts":1400022096000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sure, and like I said, it's not the biggest problem at all","msgtype":"m.text"},"ts":1400022107000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"\"does it have bad input, and if not, does it have good input\"","msgtype":"m.text"},"ts":1400022110000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but, serious question, why should your left hand have to care if the right hand gets an apple or orange","msgtype":"m.text"},"ts":1400022120000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"to continue your analogy, that doesn't take a whole hand to do, it's something your small finger's knuckle can do.","msgtype":"m.text"},"ts":1400022133000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"why is it concerned with that at all","msgtype":"m.text"},"ts":1400022136000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"what is the benefit that it gains from asking the right hand what it got","msgtype":"m.text"},"ts":1400022151000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"sure, why should the code that deals with the first character be concerned with the code that deals with the second character?","msgtype":"m.text"},"ts":1400022172000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what does this enable us to communicate to the user that we otherwise couldn't, without needing the extra test","msgtype":"m.text"},"ts":1400022183000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i mean, superficially, it sounds like a perfectly reasonable question.","msgtype":"m.text"},"ts":1400022185000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but when you get down to it, it just means the code is organised in an overly-generic way and could be made far simpler.","msgtype":"m.text"},"ts":1400022210000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"at an application level it could be, but when you're writing a way for people to structure their applications, it doesn't work very well to have too much intermingling","msgtype":"m.text"},"ts":1400022250000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"GreenTea developers don't want to write the form nonsense by hand, because they get a nice declarative interface that does what they want for them","msgtype":"m.text"},"ts":1400022297000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"and that nice, declarative interface, ideally, doesn't have to worry too much about different validation states that it shouldn't be concerned with","msgtype":"m.text"},"ts":1400022338000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i agree","msgtype":"m.text"},"ts":1400022354000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"still not following how we get from \"people should be able to write forms declaratively\" to \"the code that makes validation UI pretty needs to carefully check whether you entered a value COMPLETELY SEPARATELY from carefully checking whether you entered a valid value\"","msgtype":"m.text"},"ts":1400022435000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well, that's just the way it is in angular, and it sort of magically makes something similar to html5 constraint validation work in (somewhat) legacy browsers","msgtype":"m.text"},"ts":1400022491000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"but why is it that way? what benefit is there from doing something this complicated way rather than the simpler way?","msgtype":"m.text"},"ts":1400022517000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"because it ends up being simpler to actually build an application with it","msgtype":"m.text"},"ts":1400022533000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i don't believe that at all.","msgtype":"m.text"},"ts":1400022561000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i don't believe you could even tell the difference.","msgtype":"m.text"},"ts":1400022568000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"can you show me the difference?","msgtype":"m.text"},"ts":1400022583000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(i don't understand why an application would be aware of this internal detail at all)","msgtype":"m.text"},"ts":1400022597000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh, the application wouldn't be","msgtype":"m.text"},"ts":1400022613000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"...","msgtype":"m.text"},"ts":1400022621000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"like I said, it's not the biggest problem in the world","msgtype":"m.text"},"ts":1400022624000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"we can get around it with the extra logic","msgtype":"m.text"},"ts":1400022631000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"but I don't think we should _need_ to, because it doesn't really enable anything","msgtype":"m.text"},"ts":1400022647000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it seems to me like you could get around it with _less _logic.","msgtype":"m.text"},"ts":1400022653000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'm not understanding why you split \"has a value\" from \"has a valid value\". Do you split \"has an underflow\" from \"has an overflow\"?","msgtype":"m.text"},"ts":1400022691000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well, hopefully matias gets to delete a lot of code after refactoring it, because yeah, the original design was a bit problematic in some ways","msgtype":"m.text"},"ts":1400022693000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"well, the fact that you can have underflow and overflow simultaneously isn't totally good, but that's less of an issue","msgtype":"m.text"},"ts":1400022724000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"because at least they're related to the same set of attributes","msgtype":"m.text"},"ts":1400022733000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"um","msgtype":"m.text"},"ts":1400022741000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"min and max","msgtype":"m.text"},"ts":1400022746000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"underflow isn't related to max","msgtype":"m.text"},"ts":1400022756000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and overflow isn't related to min","msgtype":"m.text"},"ts":1400022760000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"conceptually, min and max are related","msgtype":"m.text"},"ts":1400022769000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"in fact having a value and having a valid value are _more closely_ related.","msgtype":"m.text"},"ts":1400022774000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"since they both relate to .value","msgtype":"m.text"},"ts":1400022779000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"conceptually, min and max are both to do with a similar \"kind\" of validation, do you know what I mean","msgtype":"m.text"},"ts":1400022810000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"you have a range, you're either inside that range or outside of it","msgtype":"m.text"},"ts":1400022825000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"maybe there is no bounds on the left or right side of the range, maybe the range is inside out, it doesn't matter, it's all about a range","msgtype":"m.text"},"ts":1400022839000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"\"did you enter a valid value\" and \"did you enter any value\" are \"both to do with a similar kind of validation\" also","msgtype":"m.text"},"ts":1400022847000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i mean, so much so that i'd do them as one test","msgtype":"m.text"},"ts":1400022870000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"did you enter a number\" \"no I entered an animal name\"","msgtype":"m.text"},"ts":1400022873000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"\"did you enter anything\" \"yes\"","msgtype":"m.text"},"ts":1400022884000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"(unlike min and max, which i would handle as separate tests, with different messages)","msgtype":"m.text"},"ts":1400022886000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you can violate min, you can violate max, you can in some weird cases violate both, they're orthogonal. Same with step. Another orthogonal check.","msgtype":"m.text"},"ts":1400022922000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the presence or absence of a value is different from the well-formed-ness of a present value","msgtype":"m.text"},"ts":1400022932000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"But the test of whether you entered something naturally subsumes whether you entered something valid.","msgtype":"m.text"},"ts":1400022937000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"they're _not_ orthogonal.","msgtype":"m.text"},"ts":1400022944000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sure they are","msgtype":"m.text"},"ts":1400022949000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"no value is a perfectly well-formed value","msgtype":"m.text"},"ts":1400022961000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"if the value isn't required, then you have no reason to complain about it. if the value is required, then you don't want to complain by saying \"you didn't enter anything\"","msgtype":"m.text"},"ts":1400022989000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"they are unrelated things","msgtype":"m.text"},"ts":1400022999000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"so if your left hand doesn't want to ask the right hand if the value is acceptable, then right now, the metaphorical validation tool will report a message which seems \"weird\", because it's reporting a nonsensical error","msgtype":"m.text"},"ts":1400023110000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it's not a huge problem to check the flag, I just argue that it should not be necessary, and doesn't really make sense to need to ask","msgtype":"m.text"},"ts":1400023169000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i don't think it makes sense not to do these together.","msgtype":"m.text"},"ts":1400023532000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"actually that's not quite true","msgtype":"m.text"},"ts":1400023538000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"let me rephrase","msgtype":"m.text"},"ts":1400023540000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"even if you do them separately, i don't think it makes sense to do any checks if badInput is true.","msgtype":"m.text"},"ts":1400023554000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so you have to check badInput first.","msgtype":"m.text"},"ts":1400023560000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"for example, if badInput is true, you wouldn't care if the value didn't match the pattern.","msgtype":"m.text"},"ts":1400023571000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or was overflowing.","msgtype":"m.text"},"ts":1400023576000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so just test that first.","msgtype":"m.text"},"ts":1400023583000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you don't have to test multiple things at once, or have complicated expressions.","msgtype":"m.text"},"ts":1400023608000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"just if (e.validityState.badInput) { ... }","msgtype":"m.text"},"ts":1400023622000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so, the issue with this is it sort of imposes a specific order that the ValidityState must be checked in","msgtype":"m.text"},"ts":1400023694000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"in order to avoid the extra condition checks","msgtype":"m.text"},"ts":1400023703000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1400023706000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"this seems nice and easy since code tends to have a defined order it runs in :-P","msgtype":"m.text"},"ts":1400023717000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"It's probably personal preference, but I really despise being told bit by bit how my input doesn't fit into an applications specification. If it doesn't fit, I'd like to be told the requirements, not only that the \"input\" needs to include letters.","msgtype":"m.text"},"ts":1400023728000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"yeah, totally","msgtype":"m.text"},"ts":1400023750000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the case we're talking about is only cases where badInput applies, though","msgtype":"m.text"},"ts":1400023763000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"things like type=number","msgtype":"m.text"},"ts":1400023767000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"like this? https://yearofmoo.github.io/ngMessages/","msgtype":"m.text"},"ts":1400023771000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"The interface should make it stupid simple for the User to help themselves and provide valid input.","msgtype":"m.text"},"ts":1400023778000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"\"This web page has disabled automatic filling for this form\" gah","msgtype":"m.text"},"ts":1400023810000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's really the goal","msgtype":"m.text"},"ts":1400023816000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"make things stupid simple","msgtype":"m.text"},"ts":1400023830000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"so that even a ruby developer can do it","msgtype":"m.text"},"ts":1400023839000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"(i'm kidding, I'm kidding)","msgtype":"m.text"},"ts":1400023844000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Hixie: cheers to features which are designed specifically to work against the user's wishes","msgtype":"m.text"},"ts":1400023863000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"blimey that page has a lot of divs and class names","msgtype":"m.text"},"ts":1400023873000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"zewt: hm?","msgtype":"m.text"},"ts":1400023879000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"23:27 < Hixie> \"This web page has disabled automatic filling for this form\" gah","msgtype":"m.text"},"ts":1400023885000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"ah yeah, i hate that feature","msgtype":"m.text"},"ts":1400023897000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"user wants autocomplete? too bad, the browser doesn't serve the user","msgtype":"m.text"},"ts":1400023912000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"well, it's a demo application, so he probably wanted you to actually try entering things","msgtype":"m.text"},"ts":1400023919000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I love how the year 0000 is an invalid year, that's great","msgtype":"m.text"},"ts":1400023950000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"imo, i think autocomplete should not be a markup option for pii data.","msgtype":"m.text"},"ts":1400023977000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"boogyman, I think a lot of applications have, or at least think they have, a good reason to disable it","msgtype":"m.text"},"ts":1400024000000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"and by pii, i mean name,address,cc, etc...","msgtype":"m.text"},"ts":1400024021000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"like, the president's web application for entering the nuclear launch codes","msgtype":"m.text"},"ts":1400024033000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it's one thing to disable autocomplete-by-default, but the user should always have a \"that's nice, do it anyway\" button","msgtype":"m.text"},"ts":1400024035000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"probably don't want that autofilled","msgtype":"m.text"},"ts":1400024037000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"yeah, that's the example in the spec :-)","msgtype":"m.text"},"ts":1400024073000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"boogyman: how do you mean?","msgtype":"m.text"},"ts":1400024094000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"boogyman: like, a page shouldn't be able to say \"this is where the user should enter their address\"?","msgtype":"m.text"},"ts":1400024105000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"autofill isn't the problem in that case, it's \"you shouldn't have remembered this in the first place\", heh","msgtype":"m.text"},"ts":1400024107000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(and I'm not convinced of that, either)","msgtype":"m.text"},"ts":1400024140000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"im saying that upon navigating to a page, it should not auto populate my pii data.","msgtype":"m.text"},"ts":1400024144000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"i think you could argue that disabling autofill encourages people to come up with really bad passwords","msgtype":"m.text"},"ts":1400024145000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"but even so, you know","msgtype":"m.text"},"ts":1400024160000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i know that's difficult to enforce, because <input type=text> can be any of the above, or it could be \"enter your favorite color\".","msgtype":"m.text"},"ts":1400024193000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"disabling autofill for passwords should never be allowed","msgtype":"m.text"},"ts":1400024198000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(if you don't let me autofill passwords, then I'm going to copy-and-paste the password, which is definitely worse)","msgtype":"m.text"},"ts":1400024214000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I don't know, maybe limit the scope to pci, but i would see that's more on the authors, then the spec / ua impl.","msgtype":"m.text"},"ts":1400024287000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"than*","msgtype":"m.text"},"ts":1400024307000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"browsers generally don't autofill anything these days, until you tell them you want them to","msgtype":"m.text"},"ts":1400024406000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"boogyman: oh browsers don't do that as far as i know. But anyway, check out autocomplete=\"\" in the HTML spec, and requestAutocomplete()","msgtype":"m.text"},"ts":1400024406000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"boogyman: (browsers shouldn't prefill anything automatically)","msgtype":"m.text"},"ts":1400024422000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"boogyman: (without user request, i mean)","msgtype":"m.text"},"ts":1400024428000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"browsers are confident enough in autocomplete to explicitly support it for credit card info now, and i haven't had any issues of that getting input when I didn't want it to","msgtype":"m.text"},"ts":1400024448000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Oh, I know how to implement it, I'm saying that sites that do pre-populate lose my trust","msgtype":"m.text"},"ts":1400024455000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"you mean if it prepopulates it while rendering markup server-side?","msgtype":"m.text"},"ts":1400024516000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"(don't know what you mean by \"sites that pre-populate\", we're talking about browser autocomplete, not sites, and browsers don't prepopulate...)","msgtype":"m.text"},"ts":1400024531000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"can that actually happen?","msgtype":"m.text"},"ts":1400024534000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"if the site itself can autocomplete, it already knows who you are :)","msgtype":"m.text"},"ts":1400024545000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"that's not exactly true","msgtype":"m.text"},"ts":1400024557000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"you can set up an autofilling demo on jsfiddle or a throwaway heroku or something that your browser has never seen before, it will still be perfectly happy to autofill for you from your profile","msgtype":"m.text"},"ts":1400024598000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"that's the browser autocompleting, not the site","msgtype":"m.text"},"ts":1400024620000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"if the site is autofilling for you, it could still be from local storage or a cookie","msgtype":"m.text"},"ts":1400024676000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"which is arguably gross, but at least it's not network traffic","msgtype":"m.text"},"ts":1400024692000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"just don't know what he means by \"sites that do pre-populate lose my trust\"--sites don't autofill, browsers do (and they don't do it \"pre-\"), so why blame sites?","msgtype":"m.text"},"ts":1400024694000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"afk, going home","msgtype":"m.text"},"ts":1400024724000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: yes, but the site has access to disable the auto-population","msgtype":"m.text"},"ts":1400024748000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"my argument is that i should have to explicitly tell a site i want auto-population on, before the UA capability is even acknowledged.","msgtype":"m.text"},"ts":1400024838000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"i'm not really following the attack vector you're concerend about","msgtype":"m.text"},"ts":1400025458000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I use public computers frequently, and it's a chore to go into the settings of the UA and disable auto complete.","msgtype":"m.text"},"ts":1400025563000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"are you saying sites should disable autofill? because i'm saying they shouldn't, and they shouldn't even have the option","msgtype":"m.text"},"ts":1400025573000,"senderName":"zewt","senderId":"zewt@irc"}
]