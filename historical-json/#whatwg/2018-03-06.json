[
{"content":{"body":"annevk: review/rubber stamp https://github.com/whatwg/html/pull/3472 ?","msgtype":"m.text"},"ts":1520307834000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: test commit says \"first batch\"?","msgtype":"m.text"},"ts":1520314498000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, I think good enough for spec merge. Most of the rest of the tests will be manual.","msgtype":"m.text"},"ts":1520314519000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ooh that's a big change, I'm not gonna get to that today I think :/","msgtype":"m.text"},"ts":1520314526000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Fair enough, I guess we didn't get much editorial review from the other reviewers.","msgtype":"m.text"},"ts":1520314542000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Each commit is pretty reasonable FWIW.","msgtype":"m.text"},"ts":1520314552000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: When should I use `<a constructor>...` over `{{...}}` (or vice-versa) when linking to something that is defined in `<pre class=anchors>` as type `constructor`?","msgtype":"m.text"},"ts":1520368723000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"My understanding is that that both will link to IDL types (constructor being one)","msgtype":"m.text"},"ts":1520368740000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Yeah, there's really no reason to ever use <a> when linking to any IDL type.","msgtype":"m.text"},"ts":1520368800000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Sorry, I was trying to finish my question but then a professor walked in ...it seems that they produce different styles though, is `{{...}}` just generally preferred though, and `<a>` is just used for style-less linking?","msgtype":"m.text"},"ts":1520368943000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"{{...}} happens to wrap itself in a <code> in the output, that's the styling difference you're seeing.","msgtype":"m.text"},"ts":1520369005000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Or maybe it just adds a class=idl-code, which the default stylesheet targets. I forget.)","msgtype":"m.text"},"ts":1520369045000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Ah, iirc I think it does wrap in a <code>. Ok thanks, didn't know if it is preferred to use one over the other, but I guess that's context-dependent","msgtype":"m.text"},"ts":1520369114000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"<a> is just the generic, always-works-for-all-types linking syntax.  If there's a shorthand, it's usually better to use it.  (And if you need to specify something that the shorthand can't accommodate, like the `spec` attribute, you should use <l spec=foo>{{something}}</l>, rather than breaking it back down fully into an <a>.)","msgtype":"m.text"},"ts":1520369115000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ok that makes sense, thank you","msgtype":"m.text"},"ts":1520369425000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"I've recently updated the clipboardData that Chrome sets when a user copies an image.  There's some inconsistency between browsers right now regarding what types (html/text/png) are copied, and also inconsistency between paste events and drop events (in dataTransfer).  who knows this area and could answer a few more questions of mine?","msgtype":"m.text"},"ts":1520370739000,"senderName":"paul_irish","senderId":"paul_irish@irc"},
{"content":{"body":"Domenic: Can we get away with `Call`ing the %String% constructor in https://console.spec.whatwg.org/#formatter as opposed to `Construct`ing from it?","msgtype":"m.text"},"ts":1520371066000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Seems like there's no good reason to call Construct over Call in that case (since newTarget is irrelevant)","msgtype":"m.text"},"ts":1520371091000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"annevk: Are there wpts for https://github.com/whatwg/fetch/pull/585#issuecomment-329121865 ?","msgtype":"m.text"},"ts":1520373202000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: definitely Call; Construct would incorrectly create a wrapper.","msgtype":"m.text"},"ts":1520377645000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Ok, could you possibly explain how this wrapper gets created? I'm just curious, reading https://tc39.github.io/ecma262/#sec-ecmascript-function-objects-construct-argumentslist-newtarget","msgtype":"m.text"},"ts":1520377918000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: Construct sets NewTarget. From there, check the definition of the String constructor.","msgtype":"m.text"},"ts":1520378129000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Ah, I'm assuming it is because PrepareForOrdinaryCall uses newTarget instead of undefined, in [[Construct]]","msgtype":"m.text"},"ts":1520378151000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Ok I'll check that out","msgtype":"m.text"},"ts":1520378164000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Oh ok, thanks","msgtype":"m.text"},"ts":1520378265000,"senderName":"domfarolino","senderId":"domfarolino@irc"}
]