[
{"content":{"body":"annevk: you about?","msgtype":"m.text"},"ts":1442545671000,"senderName":"mnot","senderId":"mnot@irc"},
{"content":{"body":"Could the CSS Color Module be used to invert a color? My usecase is styling `::selection`and wanting the color to be the inverse of the background.","msgtype":"m.text"},"ts":1442547225000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"https://drafts.csswg.org/css-color/ has some comments about that, so it sounds like probably not yet","msgtype":"m.text"},"ts":1442547628000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i mean, in current implementations, no, maybe some day","msgtype":"m.text"},"ts":1442547651000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"annevk: I was going to say, it would be really handy if the full markup was generated from markdown or something, so that it's easier to read the blame","msgtype":"m.text"},"ts":1442551269000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: HTML is hard to read?","msgtype":"m.text"},"ts":1442551294000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, when the bulk of it is not the actual text content","msgtype":"m.text"},"ts":1442551314000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I guess","msgtype":"m.text"},"ts":1442551329000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't really have the bandwidth to convert specs to markdown though while retaining all the same features","msgtype":"m.text"},"ts":1442551354000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, but somewhere out there there's a college kid learning python or node or something that needs something to work on","msgtype":"m.text"},"ts":1442551407000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: oh, so the whitespace is the problem for these \"bearer\" tokens? Not e.g., 0x02 bytes?","msgtype":"m.text"},"ts":1442552768000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well the problem is that they're programmatically building the header, and OAUTH wants it to be \"Bearer<whitespace>SomeThing\", I guess","msgtype":"m.text"},"ts":1442552842000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"and they historically haven't had to make sure the value is non-empty","msgtype":"m.text"},"ts":1442552860000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"so, they don't","msgtype":"m.text"},"ts":1442552864000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"if we had to preserve whitespace there that actually violates HTTP semantics","msgtype":"m.text"},"ts":1442556572000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that would be something","msgtype":"m.text"},"ts":1442556581000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm having a hard time understanding why SharedWorker has both URL and name, when they're required to match anyway","msgtype":"m.text"},"ts":1442564589000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: isn't it to be able to start a separate instance of a shared worker?","msgtype":"m.text"},"ts":1442564723000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: ah okay","msgtype":"m.text"},"ts":1442564848000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: do you know why empty string name and non-empty string are handled differently in the constructor?","msgtype":"m.text"},"ts":1442564900000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: I don't understand why non-empty string doesn't check the URL straight away too and instead throws an exception later on for it...","msgtype":"m.text"},"ts":1442564924000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess name has to be sole key","msgtype":"m.text"},"ts":1442565113000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And when name is empty, the constructor URL is the key","msgtype":"m.text"},"ts":1442565121000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: step 6 makes a difference there, but i don't know if it is intentional to not throw in that mode","msgtype":"m.text"},"ts":1442565230000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: afaict Firefox just keys on both constructor url and name","msgtype":"m.text"},"ts":1442565326000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: and therefore never reaches 7.1","msgtype":"m.text"},"ts":1442565331000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: I guess it depends on whether you want names to be unique or not, but it seems empty string is already not unique","msgtype":"m.text"},"ts":1442565391000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok. i don't know why the spec is as it is","msgtype":"m.text"},"ts":1442565391000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Chrome does do this per spec though","msgtype":"m.text"},"ts":1442565405000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: certainly for the purpose to just be able to start a separate instance of a shared worker, there is no need for URLMismatchError","msgtype":"m.text"},"ts":1442566233000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"The only reason I can imagine is that you want non-empty string names to be unique","msgtype":"m.text"},"ts":1442566272000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't think that's particularly great design","msgtype":"m.text"},"ts":1442566305000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: any idea who from Chromium we can convince that this should be changed?","msgtype":"m.text"},"ts":1442566531000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: sof implemented workers in presto. otherwise dunno; maybe someone from https://code.google.com/p/chromium/issues/detail?id=327256","msgtype":"m.text"},"ts":1442568770000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk, so you can still detect whether a cross-origin file is well-formed JS by calling importScripts? Does <script> already expose that?","msgtype":"m.text"},"ts":1442570369000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: hmm, I think <script> calls report the exception in that case which ends up on the Window object","msgtype":"m.text"},"ts":1442570601000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Seems plausible","msgtype":"m.text"},"ts":1442570687000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: actually, I'm not sure how importScripts() ever ends up there given that it too uses \"create a script\" which already reports the errors","msgtype":"m.text"},"ts":1442570691000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: I'm mainly concerned about the \"ok status\" leak, but that was already present...","msgtype":"m.text"},"ts":1442570709000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: ah, it gets there because it also starts running the script","msgtype":"m.text"},"ts":1442570883000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Added some thoughts to the PR on potential further improvements","msgtype":"m.text"},"ts":1442571137000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: so you asked at some point whether fragments need to be preserved, it seems workers preserve them","msgtype":"m.text"},"ts":1442574074000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So much churn :-(","msgtype":"m.text"},"ts":1442574336000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: a usecase for inverting a color is styling `::selection`and wanting the text color to be the inverse of the background. https://drafts.csswg.org/css-color/","msgtype":"m.text"},"ts":1442576251000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"<font size=2>hello</font>","msgtype":"m.text"},"ts":1442576497000,"senderName":"frewsxcv","senderId":"frewsxcv@irc"},
{"content":{"body":"What should the computed font size for that be?","msgtype":"m.text"},"ts":1442576509000,"senderName":"frewsxcv","senderId":"frewsxcv@irc"},
{"content":{"body":"sigh, free pascal installer refuses to install. it says i need xcode and command line tools, which i have installed","msgtype":"m.text"},"ts":1442576754000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"or hmm, maybe command line tools thing failed","msgtype":"m.text"},"ts":1442576960000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: You might need to accept the license agreement","msgtype":"m.text"},"ts":1442577940000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: i managed to download and install the command line tools from developer.apple.com","msgtype":"m.text"},"ts":1442578095000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1442578133000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"The usual problem with Xcode is that you need to actually start it and accept a license agreement before the command line parts work","msgtype":"m.text"},"ts":1442578160000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"ok. i had started it so it was some other problem :-)","msgtype":"m.text"},"ts":1442578476000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"frewsxcv, there's something in HTML for that","msgtype":"m.text"},"ts":1442578574000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: you're saying you want Request to preserve fragments?  JakeA does this mean Cache API needs to preserve request fragments?","msgtype":"m.text"},"ts":1442580006000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Ms2ger: right. The html spec specifies which absolute String they map to, like xx-large. Do you know where it's specified bow that String gets turned into a scale ratio?","msgtype":"m.text"},"ts":1442580455000,"senderName":"frewsxcv","senderId":"frewsxcv@irc"},
{"content":{"body":"There's a table at https://drafts.csswg.org/css-fonts/#font-size-prop","msgtype":"m.text"},"ts":1442580591000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"So I saw that table. Though it appears blink and Gecko don't follow it. I guess I'll just look at their source","msgtype":"m.text"},"ts":1442580693000,"senderName":"frewsxcv","senderId":"frewsxcv@irc"},
{"content":{"body":"for example, <font size=2> with gecko results in font-size == 13px. whereas 8/9 * 16 = 14.2222222222222","msgtype":"m.text"},"ts":1442580918000,"senderName":"frewsxcv","senderId":"frewsxcv@irc"},
{"content":{"body":"i also find it strange how both gecko and blink have nice whole numbers for pixels. maybe pixels aren't allowed to be decimal and they round?","msgtype":"m.text"},"ts":1442580960000,"senderName":"frewsxcv","senderId":"frewsxcv@irc"},
{"content":{"body":"frewsxcv, they have tables for small base font sizes","msgtype":"m.text"},"ts":1442581002000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"they == blink+gecko ?","msgtype":"m.text"},"ts":1442581027000,"senderName":"frewsxcv","senderId":"frewsxcv@irc"},
{"content":{"body":"I'm pretty sure Gecko does, and probably Blink too","msgtype":"m.text"},"ts":1442581087000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"does that go against the spec?","msgtype":"m.text"},"ts":1442581126000,"senderName":"frewsxcv","senderId":"frewsxcv@irc"},
{"content":{"body":"wanderview: annevk: hm, I'd be surprised to see them in the request url… where is it they surface in works?","msgtype":"m.text"},"ts":1442581139000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"workers*","msgtype":"m.text"},"ts":1442581143000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1442581147000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"JakeA: self.location","msgtype":"m.text"},"ts":1442584414000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: guess so","msgtype":"m.text"},"ts":1442584436000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: does this have to effect the script visible Request object?  seems self.location could pull from the inner request url","msgtype":"m.text"},"ts":1442584557000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"frewsxcv: nah, the spec just calls it guidelines","msgtype":"m.text"},"ts":1442584559000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: yeah we could Request alone still, seems a tad weird perhaps since it has an effect on workers (of sorts)","msgtype":"m.text"},"ts":1442584598000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think workers are weird for letting fragments be a thing in their script location","msgtype":"m.text"},"ts":1442584633000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: so should there not be any tests in web-platform-tests for this since it's pretty much a guideline?","msgtype":"m.text"},"ts":1442584794000,"senderName":"frewsxcv","senderId":"frewsxcv@irc"},
{"content":{"body":"frewsxcv, if browsers agree, I guess we should just spec and test it","msgtype":"m.text"},"ts":1442584964000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"(\"just\")","msgtype":"m.text"},"ts":1442584967000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"what do you mean by 'spec it'?","msgtype":"m.text"},"ts":1442584993000,"senderName":"frewsxcv","senderId":"frewsxcv@irc"},
{"content":{"body":"add it to the spec?","msgtype":"m.text"},"ts":1442584998000,"senderName":"frewsxcv","senderId":"frewsxcv@irc"},
{"content":{"body":"Yes","msgtype":"m.text"},"ts":1442585046000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"wanderview: I don't disagree, but not sure it's worth fixing it","msgtype":"m.text"},"ts":1442587498000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: and I guess you could use it for something","msgtype":"m.text"},"ts":1442587510000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But having both fragments and names to play with as keying mechanisms seems a bit much","msgtype":"m.text"},"ts":1442587525000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: JakeA: it would really be nice to have a convenient way to construct a new Request from an old Request and an overriding url","msgtype":"m.text"},"ts":1442587687000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: hmm","msgtype":"m.text"},"ts":1442587726000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"maybe thats not my problem","msgtype":"m.text"},"ts":1442587877000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I guess we could offer that at some point","msgtype":"m.text"},"ts":1442588174000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I've just seen a couple pieces of code that need to do that and get it wrong","msgtype":"m.text"},"ts":1442588206000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"forget to propagate something like body or headers or a new field that was added to Request","msgtype":"m.text"},"ts":1442588231000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I see, file an issue?","msgtype":"m.text"},"ts":1442588257000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1442588264000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: https://github.com/whatwg/fetch/issues/129","msgtype":"m.text"},"ts":1442588436000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: could it be new Request(url, oldRequest)?","msgtype":"m.text"},"ts":1442588675000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: that would work for me","msgtype":"m.text"},"ts":1442588700000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"its unclear to me if some contents of the Request should not be propagated... type, destination, unsafe-request flag, etc","msgtype":"m.text"},"ts":1442588725000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Does that not already work?","msgtype":"m.text"},"ts":1442588726000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"ahh ok","msgtype":"m.text"},"ts":1442588734000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: the second arg of Request constructor is RequestInit... a dictionary","msgtype":"m.text"},"ts":1442588746000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: which works for most thing... but not propagating the body","msgtype":"m.text"},"ts":1442588765000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Ahh fair enough","msgtype":"m.text"},"ts":1442588777000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: although maybe that would work after streams land?","msgtype":"m.text"},"ts":1442588786000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: Once .body is fully known, it could be made to work I guess","msgtype":"m.text"},"ts":1442588822000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I don't know why I forgot Request could be passed as the dictionary","msgtype":"m.text"},"ts":1442588974000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: I guess maybe this code wants to override the url and like one or two other fields....","msgtype":"m.text"},"ts":1442589574000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I guess you want something to turn a request into a mutable requestInit type of thing","msgtype":"m.text"},"ts":1442589637000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yea","msgtype":"m.text"},"ts":1442589648000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I guess script can do that anyway","msgtype":"m.text"},"ts":1442589667000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Good morning/afternoon/evening WHATWG crew o/","msgtype":"m.text"},"ts":1442599399000,"senderName":"ccardona-work","senderId":"ccardona-work@irc"},
{"content":{"body":"JakeA: Do you reckon the outcome of \"Aborting a fetch\" / cancellable promise/task etc. will be one that is polyfillable? I can't wait to be able to use it in all browsers, today. This comes up like every 48 hours in my job. And gets worked around in horrendous hurtful and counter-intuitive ways.","msgtype":"m.text"},"ts":1442604798000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: if you are willing to re-build fetch + promises from scratch then yes.","msgtype":"m.text"},"ts":1442604862000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(both are doable, on top of XHR and nothing, respectively.)","msgtype":"m.text"},"ts":1442604872000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah.","msgtype":"m.text"},"ts":1442604882000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"I could just pick one of the ideas there and have \"something\", but I do have the discipline to wait a bit longer so that I'm not betting on the approach that didn't make it and have to re-educate everyone when we change things again.","msgtype":"m.text"},"ts":1442604925000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"the while .then() loses .abort() with ajax is the main driver here.","msgtype":"m.text"},"ts":1442604959000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"whole*","msgtype":"m.text"},"ts":1442604963000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"What \"whole .then() loses .abort() with ajax\"?","msgtype":"m.text"},"ts":1442604991000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Global singletons keeping track of of XHRs etc. it's just unmaintainable and prone to error.","msgtype":"m.text"},"ts":1442604992000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Domenic: A common pattern is to abort requests based on user input. Either from debouncing or otherwise. But further in processing, every then() later, you lose the original .abort from the initial jQuery promise that had .abort tacked on.","msgtype":"m.text"},"ts":1442605047000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"I thought we were talking about fetch, not jQuery.","msgtype":"m.text"},"ts":1442605079000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yes","msgtype":"m.text"},"ts":1442605088000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"It's all part of an endless pyramid of problems and concerns","msgtype":"m.text"},"ts":1442605101000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"whatever pattern we settle on here, will be one we can re-use elsewhere as a logical unit of how to deal with this","msgtype":"m.text"},"ts":1442605125000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"API wise, not implementation wise","msgtype":"m.text"},"ts":1442605134000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"We can apply it to our library that deals with internal API requests (which uses ajax() internally)","msgtype":"m.text"},"ts":1442605161000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"e.g. mw.Api#getCategories -> mw.Api#getPageInfo -> jQuery.ajax; Then consumer UI code calls getCategories() and needs a way to .abort / cancel / ignore / ensure it won't ever callback.","msgtype":"m.text"},"ts":1442605273000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"How would you feel about an approach where you pass a cancelation toekn to getCategories, which passes it to getPageInfo, which passes it to, well, fetch, not jQuery.ajax.","msgtype":"m.text"},"ts":1442605367000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I can't say I'm very keen on such interface. It feels unnecessarily formal and overhead.","msgtype":"m.text"},"ts":1442605497000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"But if that's the way it will be, I'm okay with that. I'll become part of how we use fetch() and a familiar behaviour and pattern we'll encounter anyway, so might as well use that in our library.","msgtype":"m.text"},"ts":1442605538000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"At this point I've lost any and all preferences or pleasantry, I'm too eager to just have an answer.","msgtype":"m.text"},"ts":1442605563000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"In another month or so we'll probably just pick an approach and abstract it a bit so we can easily switch to fetch() internally.","msgtype":"m.text"},"ts":1442605600000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"The chain-aware ness seems achievable","msgtype":"m.text"},"ts":1442605852000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Though I agree with JakeA that this only works when strictly chaining.","msgtype":"m.text"},"ts":1442605863000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"When passing on a promise received by closure instead of then(), there is no longer that explicit link, not until the code executes.","msgtype":"m.text"},"ts":1442605891000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"RE: There's a bunch of good ideas there but I do have the discipline to hold off a little longer to avoid having to enter a paradigm shift when the eventual apparoach","msgtype":"m.text"},"ts":1442605913000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"* RE: https://github.com/whatwg/fetch/issues/27#issuecomment-92929061","msgtype":"m.text"},"ts":1442605919000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: I'm mostly being patient too, waiting for Domenic and JakeA to come up with something","msgtype":"m.text"},"ts":1442606290000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We're having a mini cancelable promises summit next Monday before TC39","msgtype":"m.text"},"ts":1442606314000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Krinkle: doesn't seem worth it to add something to the specification now since whatever we add we'll have to live with for a long time","msgtype":"m.text"},"ts":1442606315000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The biggest issue in my mind right now is that the ref-counting CancelablePromise subclass approach doesn't work with async functions","msgtype":"m.text"},"ts":1442606332000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So we want to noodle on that for a bit","msgtype":"m.text"},"ts":1442606354000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Hm.. because await is an implicit then?","msgtype":"m.text"},"ts":1442606383000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"So, https://github.com/w3c/charter-html/issues/112","msgtype":"m.text"},"ts":1442606398000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Anyone opinions?","msgtype":"m.text"},"ts":1442606402000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Krinkle: because async functions always return Promises, not CancelablePromises.","msgtype":"m.text"},"ts":1442606425000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'm sort of at the point where I would just like this to stop, but it seems that's unrealistic at least for a while longer...","msgtype":"m.text"},"ts":1442606437000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: My opinion is they should stop copying their specs.","msgtype":"m.text"},"ts":1442606441000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"s/their/the","msgtype":"m.text"},"ts":1442606453000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But dbaron basically blew that out of the water by asking for text saying \"we plan to copy.\"","msgtype":"m.text"},"ts":1442606478000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah... I normally agree with dbaron but I'm torn on this one","msgtype":"m.text"},"ts":1442606508000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Whatever, they don't have enough editors to copy things anyway. I plan to ignore it.","msgtype":"m.text"},"ts":1442606515000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"bbiab meeting","msgtype":"m.text"},"ts":1442606534000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If they had done a decent job of copying in the past I would be more sympathetic, but most things just end up being a disaster","msgtype":"m.text"},"ts":1442606554000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"In fact, pretty sure that's all","msgtype":"m.text"},"ts":1442606579000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"you're welcome to suggest alternatives","msgtype":"m.text"},"ts":1442606640000,"senderName":"dbaron","senderId":"dbaron@irc"},
{"content":{"body":"I tend to think that asking the W3C to not have a spec for HTML probably won't go over very well, though.","msgtype":"m.text"},"ts":1442606656000,"senderName":"dbaron","senderId":"dbaron@irc"},
{"content":{"body":"This is interesting https://stackoverflow.com/questions/32656594/domcontentloaded-blocks-page-loading","msgtype":"m.text"},"ts":1442606779000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"dbaron: well, it's true that it hasn't worked so far","msgtype":"m.text"},"ts":1442607108000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I meant \"won't be well received\" when I said \"won't go over very well\"","msgtype":"m.text"},"ts":1442607141000,"senderName":"dbaron","senderId":"dbaron@irc"},
{"content":{"body":"the W3C organizationally cannot force the WG to publish a spec for HTML or anything else. Especially if the members of the WG don't support doing it","msgtype":"m.text"},"ts":1442607227000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the fact that the charter puts a spec in the scope of the WG does not mean that the group is obligated to actually publish that spec","msgtype":"m.text"},"ts":1442607278000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"dbaron: I guess I'm not really sure what to say, I've made many suggestions to Jeff over the years, but it usually comes down to no compromise from their side. I think I'm at the same point Hixie and Domenic are at, that caring is probably not really worth the effort.","msgtype":"m.text"},"ts":1442607279000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: that follows pretty straightforwardly from the event loop section of the spec","msgtype":"m.text"},"ts":1442607309000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: well, Chrome requiring two rAFs is at least strange.","msgtype":"m.text"},"ts":1442607327000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess update the rendering does happen after run the task though","msgtype":"m.text"},"ts":1442607373000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: oh, I missed that","msgtype":"m.text"},"ts":1442607412000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Also, am I reading this right? The event loop section implies update the rendering more often than 60 times per second?","msgtype":"m.text"},"ts":1442607496000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: \"straightforwardly\" there reminds of the job about the two mathematicians who argue about some point for hours and in the end one of them changes his position and says oh yeah it's \"obvious\" that what that other has been asserting is in fact right","msgtype":"m.text"},"ts":1442607499000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"s/job/joke/","msgtype":"m.text"},"ts":1442607522000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: well, isn't it? :-P","msgtype":"m.text"},"ts":1442607538000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yes! 😆  (says the mathematician in me after 3 hours of reading)","msgtype":"m.text"},"ts":1442607597000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Domenic: it allows for it, see 8.3 for why it's not required","msgtype":"m.text"},"ts":1442607632000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: and that makes sense, e.g., I believe VR would like 120 Hz if not more","msgtype":"m.text"},"ts":1442607658000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah, missed 8.3","msgtype":"m.text"},"ts":1442607712000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"many displays are not 60Hz","msgtype":"m.text"},"ts":1442612437000,"senderName":"jamesr","senderId":"jamesr@irc"},
{"content":{"body":"some are slower, some are faster","msgtype":"m.text"},"ts":1442612440000,"senderName":"jamesr","senderId":"jamesr@irc"},
{"content":{"body":"when a browser actually renders stuff is pretty much 100% unspecified","msgtype":"m.text"},"ts":1442612496000,"senderName":"jamesr","senderId":"jamesr@irc"},
{"content":{"body":"in GitHub lingo, what is the term for the repo from which a network of other repos have been forked?","msgtype":"m.text"},"ts":1442614327000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Source repo?","msgtype":"m.text"},"ts":1442614331000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Base?","msgtype":"m.text"},"ts":1442614335000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Upstream.. Original","msgtype":"m.text"},"ts":1442614433000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I guess I will just use \"Origin\"","msgtype":"m.text"},"ts":1442614443000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"gsnedders: Did you take a look at https://github.com/html5lib/html5lib-tests/pull/69?","msgtype":"m.text"},"ts":1442614969000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Hm.. DOMContentLoaded blocking paint is kind of neat in my opinion. It gives clients a chance to modify things without FOUC-y behaviour (e.g. hide elements based on cookies). However I assume this is only the case on small and/or unbuffered pages. Because iirc Chrome can (should) do first paint earlier if it received enough html content.","msgtype":"m.text"},"ts":1442620603000,"senderName":"Krinkle","senderId":"Krinkle@irc"}
]