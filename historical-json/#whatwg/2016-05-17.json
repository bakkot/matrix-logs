[
{"content":{"body":"can someone check http://software.hixie.ch/utilities/js/live-dom-viewer/saved/4196 in Edge?","msgtype":"m.text"},"ts":1463476696000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"https://irccloud.mozilla.com/file/43yfepoT/edge13.png","msgtype":"m.text"},"ts":1463476866000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: ^^","msgtype":"m.text"},"ts":1463476873000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ty","msgtype":"m.text"},"ts":1463476877000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Domenic: i was three weeks on cuba, catching up this week","msgtype":"m.text"},"ts":1463479660000,"senderName":"robertkowalski","senderId":"robertkowalski@irc"},
{"content":{"body":"AAA ;_;","msgtype":"m.text"},"ts":1463485379000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"https://github.com/html5lib/html5lib-tests/issues/78","msgtype":"m.text"},"ts":1463485390000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I /think/ the test is right. FF nightlies agree with the test, at least.","msgtype":"m.text"},"ts":1463485795000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I could of course be wrong.","msgtype":"m.text"},"ts":1463485799000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: I may be dumb,","msgtype":"m.text"},"ts":1463485871000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"gsnedders: I don't see anything that contradicts your comment https://github.com/html5lib/html5lib-tests/issues/78#issuecomment-219328831.","msgtype":"m.text"},"ts":1463485880000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"gsnedders: Oh btw, my Safari gives <aside><em><b></b><em></aside> for the aside part, hah.","msgtype":"m.text"},"ts":1463485913000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I said the em gets removed from the list of active fomratting elements","msgtype":"m.text"},"ts":1463486766000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"nox: which means you don't end up with a em in the new aside","msgtype":"m.text"},"ts":1463486774000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Oooooh, right.","msgtype":"m.text"},"ts":1463486808000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"gsnedders: But isn't iabudiab wrong about <em> not being removed as per the spec?","msgtype":"m.text"},"ts":1463486844000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I believe he is","msgtype":"m.text"},"ts":1463486854000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"wait","msgtype":"m.text"},"ts":1463486858000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"there's too many negatives there","msgtype":"m.text"},"ts":1463486862000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":":D","msgtype":"m.text"},"ts":1463486878000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"gsnedders: \"So in this case the <em> wouldn't be removed via the following step If inner loop counter is greater than three and node is in the list of active formatting elements, then remove node from the list of active formatting elements\"","msgtype":"m.text"},"ts":1463486887000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"This sounds wrong to me.","msgtype":"m.text"},"ts":1463486890000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"That's what I think is wrong.","msgtype":"m.text"},"ts":1463486901000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"With his understanding.","msgtype":"m.text"},"ts":1463486907000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"And as per the spec in step 13.6, <em> should be removed from the stack of open elements too.","msgtype":"m.text"},"ts":1463487039000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"IMO WebKit/Chromium/IE11 don't follow the spec, and the test is consistent with the spec.","msgtype":"m.text"},"ts":1463487129000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"But WebKit/Chromium/IE11 not following the spec means the spec needs to change, right?","msgtype":"m.text"},"ts":1463487137000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Usually","msgtype":"m.text"},"ts":1463487155000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Though <em><b> looks quite insane in that case. :/","msgtype":"m.text"},"ts":1463487190000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I /think/ they don't have the inner loop limit?","msgtype":"m.text"},"ts":1463487291000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Which means you can still end up with O(n^2) behaviour, no?","msgtype":"m.text"},"ts":1463487300000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: They being the three UAs I mentioned?","msgtype":"m.text"},"ts":1463487349000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"OP seemed to imply that WebKit do limit the inner loop.","msgtype":"m.text"},"ts":1463487359000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Cf. code in https://github.com/html5lib/html5lib-tests/issues/78#issuecomment-219421046","msgtype":"m.text"},"ts":1463487391000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: right, I believe WebKit, Blink, and html5lib-python are all wrong here","msgtype":"m.text"},"ts":1463488201000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: They should all follow what Servo does obviously!!1!","msgtype":"m.text"},"ts":1463488408000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: and gecko","msgtype":"m.text"},"ts":1463488465000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"is trying to find where this changed","msgtype":"m.emote"},"ts":1463488801000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"because the spec definitely used to agree with WebKit","msgtype":"m.text"},"ts":1463488808000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic: about the MS notifications implementation, how can you tell it '","msgtype":"m.text"},"ts":1463492226000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Domenic: about the MS notifications implementation, how can you tell it’s a different spec? Their blog post has no code","msgtype":"m.text"},"ts":1463492257000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I was surprised to see them announce they were adding any notifications support at all, so not surprised to find out that they didn’t implement it to spec","msgtype":"m.text"},"ts":1463492322000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hahah","msgtype":"m.text"},"ts":1463492591000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: \"Microsoft Edge also supports the event model as defined by the W3C spec, including all the show, click, close, and error events.\"","msgtype":"m.text"},"ts":1463492677000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: though if they're also going to support them for service workers they'll have some rather inconsistent model","msgtype":"m.text"},"ts":1463492751000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah I realized that after I typed the above","msgtype":"m.text"},"ts":1463492805000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"this is rich in irony","msgtype":"m.text"},"ts":1463492813000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"for anybody who says what is important to them is interoperability","msgtype":"m.text"},"ts":1463492848000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and also for the fact that the whole reason we had to create a separate WG for Notifications is because one vendor forced us into it","msgtype":"m.text"},"ts":1463492906000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"anyway, I guess if they don’t yet have service workers implemented then they can’t support the current spec","msgtype":"m.text"},"ts":1463492952000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: also means a certain vendor never waived their patents","msgtype":"m.text"},"ts":1463493059000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1463493102000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"free ride","msgtype":"m.text"},"ts":1463493110000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I wonder if they actually know that “The implementation in Microsoft Edge is based on the W3C Web Notifications specification, now supported broadly across modern desktop browsers.” is not true","msgtype":"m.text"},"ts":1463493209000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"well I mean the part after the commaa","msgtype":"m.text"},"ts":1463493228000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ah, desktop","msgtype":"m.text"},"ts":1463493237000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I wonder if Chrome and Firefox have actually unshipped those events","msgtype":"m.text"},"ts":1463493267000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess that’s why they qualified it with the word “desktop”","msgtype":"m.text"},"ts":1463493272000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Perhaps they implemented those events because implementers never removed support for them","msgtype":"m.text"},"ts":1463493287000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don’t know about the events, for the old API does not work on mobile","msgtype":"m.text"},"ts":1463493294000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah maybe so","msgtype":"m.text"},"ts":1463493303000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"It's kind of a shame they have the feeling they can't even say those kind of things in public","msgtype":"m.text"},"ts":1463493338000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's not like these blog posts are helping convergence","msgtype":"m.text"},"ts":1463493362000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1463493388000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think zcorpan might have missed that https://github.com/whatwg/html/pull/1267 is a pull request?","msgtype":"m.text"},"ts":1463494569000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The fetch issue on header lowercasing is pretty cool. Good compromise and people working together for a solution that seems to get better each time someone revises it. WHATWG in action.","msgtype":"m.text"},"ts":1463495242000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So got a fun problem with anyone familiar with indexeddb (also know anywhere better to ask about this?)","msgtype":"m.text"},"ts":1463495682000,"senderName":"daleharvey","senderId":"daleharvey@irc"},
{"content":{"body":"I have a library (pouchdb), I want to expose the ability for users to define their own indexes at runtime (ie after schema creation)","msgtype":"m.text"},"ts":1463495739000,"senderName":"daleharvey","senderId":"daleharvey@irc"},
{"content":{"body":"even without them being defined at runtime and being done at schema creation it is still fairly complex, the user will certainly require the ability to change indexes outwith the versioning of the schema, and pouchdb will still need to track the schema version number for actual data migrations","msgtype":"m.text"},"ts":1463495947000,"senderName":"daleharvey","senderId":"daleharvey@irc"},
{"content":{"body":"daleharvey: when jsbell is around it'd be a good time to ask","msgtype":"m.text"},"ts":1463495999000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah cool, yeh I have been in touch with him before about chrome idb bugs, will look out for, cheers","msgtype":"m.text"},"ts":1463496030000,"senderName":"daleharvey","senderId":"daleharvey@irc"},
{"content":{"body":"daleharvey: have you looked at persistent storage btw? https://storage.spec.whatwg.org/","msgtype":"m.text"},"ts":1463496283000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"daleharvey: would appreciate feedback in the GitHub repo if you have any, no implementations yet though, still being worked on","msgtype":"m.text"},"ts":1463496313000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh I havent yet, will definitely take a look, thanks","msgtype":"m.text"},"ts":1463496339000,"senderName":"daleharvey","senderId":"daleharvey@irc"},
{"content":{"body":"still reading, but did you manage to get in implicit persistence? ie if a PWA is saved / installed then storage is persistent by default?","msgtype":"m.text"},"ts":1463496437000,"senderName":"daleharvey","senderId":"daleharvey@irc"},
{"content":{"body":"daleharvey: needs some rewording here and there, but the idea is that the permission can be granted in such a way, yes","msgtype":"m.text"},"ts":1463496555000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"daleharvey: probably still best if the developer invokes the method at that point to persist, in case they have a different storage strategy in mind","msgtype":"m.text"},"ts":1463496617000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: for browser testing, get Google to buy you a BrowserStack account","msgtype":"m.text"},"ts":1463497659000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that's probably a good idea.","msgtype":"m.text"},"ts":1463497672000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: it's quite nice, I use that now for Edge since I got tired of running a VM","msgtype":"m.text"},"ts":1463497680000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: do you know the answer to this streams spec notation question? https://bugzilla.mozilla.org/show_bug.cgi?id=1272697#c4","msgtype":"m.text"},"ts":1463504115000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: answered","msgtype":"m.text"},"ts":1463504231000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"thanks!","msgtype":"m.text"},"ts":1463504240000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: why can't we use \".\" for both?","msgtype":"m.text"},"ts":1463504266000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: not really sure...","msgtype":"m.text"},"ts":1463504292000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Maybe another ECMA262 issue...","msgtype":"m.text"},"ts":1463504300000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: sure","msgtype":"m.text"},"ts":1463504312000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://github.com/tc39/ecma262/issues/574","msgtype":"m.text"},"ts":1463504551000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: can I have Bikeshed specify a default for when I don't use for=\"\"?","msgtype":"m.text"},"ts":1463507698000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Yeah, link-defaults","msgtype":"m.text"},"ts":1463507709000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(And remember, if you ever need to *explicitly* refer to a dfn *without* a for='', use for=\"/\".)","msgtype":"m.text"},"ts":1463507754000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: It'd be really nice for terms with both a <dfn>term</dfn> and a <dfn for=\"parent\">term</dfn>, if <a>term</a> would automatically assume for=\"\".","msgtype":"m.text"},"ts":1463507755000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: That's precisely the sort of thing that is *very* commonly an error and I *can't* assume, unfortunately.","msgtype":"m.text"},"ts":1463507791000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":":(","msgtype":"m.text"},"ts":1463507813000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"TabAtkins: oh, the thing jyasskin is asking for is what I was asking for :(","msgtype":"m.text"},"ts":1463507878000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I was just having this discussion with fantasai - there's a border area where the likelihood of magic hiding errors outweighs the annoyance of having to manually specify things.","msgtype":"m.text"},"ts":1463507889000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: Yeah, you can *force* Bikeshed to assume that. I just can't do it automatically.","msgtype":"m.text"},"ts":1463507900000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Like I said, do a link-defaults line for it.","msgtype":"m.text"},"ts":1463507906000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oh hmm","msgtype":"m.text"},"ts":1463507911000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"with \"for: /;\" in it","msgtype":"m.text"},"ts":1463507914000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Does a link-defaults of just \"for: /; term: the term\" do this, or do we also have to say the spec?","msgtype":"m.text"},"ts":1463507924000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"doesn't seem to be working... spec: FETCH; type: dfn; text: referrer policy; for: /;","msgtype":"m.text"},"ts":1463507937000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"[1;33mLINK ERROR:[0m Multiple possible 'dfn' local refs for 'referrer policy'.","msgtype":"m.text"},"ts":1463507947000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Arbitrarily chose the one with type 'dfn' and for ''.","msgtype":"m.text"},"ts":1463507947000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hmmmm, that should work. I'll debug and fix today.","msgtype":"m.text"},"ts":1463507960000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jyasskin: I think you need the spec.","msgtype":"m.text"},"ts":1463508062000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hmm [WHATWG-DOM] again...","msgtype":"m.text"},"ts":1463508668000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"zcorpan: Is window.resizeTo expected to be sync?","msgtype":"m.text"},"ts":1463509738000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Domenic: If you ever refer to [DOM] in the spec, it'll use that in the biblio. It's just [WHATWG-DOM] in the db, so it'll use that if there's nothing else telling it which tag to use (such as if you only picked up that biblio entry indirectly, from an autolink pointing to a term in that spec)","msgtype":"m.text"},"ts":1463509997000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I see. Yeah, all I did was add <a>node document</a>; it doesn't really make sense to put [DOM] there","msgtype":"m.text"},"ts":1463510026000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"K. Fixing that more thoroughly is more effort than I'm willing to put in for something that's still *supposed* to be temporary. ^_^","msgtype":"m.text"},"ts":1463510052000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ya tobie, that's supposed to be temporary ;)","msgtype":"m.text"},"ts":1463510081000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"zcorpan: BTW Iam very much hoping the anser is \"no\"","msgtype":"m.text"},"ts":1463510119000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Because I don't think that's possible to implement in many WMs (and I doubt browsers do it)","msgtype":"m.text"},"ts":1463510141000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"guesses that zcorpan is not really around","msgtype":"m.emote"},"ts":1463510240000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Domenic: heh","msgtype":"m.text"},"ts":1463510408000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: \"referrer policy\" is in HTML. Is that the definition you want to refer to?","msgtype":"m.text"},"ts":1463510792000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: nope, I want to refer to the one in Fetch","msgtype":"m.text"},"ts":1463510805000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: except for when I do for=\"Document\"","msgtype":"m.text"},"ts":1463510823000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh, that's not in Shepherd.","msgtype":"m.text"},"ts":1463510826000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"https://github.com/w3c/webappsec-referrer-policy/pull/49 has the problematic code","msgtype":"m.text"},"ts":1463510827000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Sure but I put it in the links section","msgtype":"m.text"},"ts":1463510839000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: It looks like you just added a link-defaults for it.  Did you add it somewhere else that I'm not seeing?","msgtype":"m.text"},"ts":1463510931000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Because link defaults just sets up the defaults for links. If the spec in question isn't in the db, it doesn't matter *what* the links specify, obviously. ^_^","msgtype":"m.text"},"ts":1463510958000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: line 24","msgtype":"m.text"},"ts":1463510959000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ah, kk. (That wasn't changed in the commit, so I didn't see it.)","msgtype":"m.text"},"ts":1463510999000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ah right","msgtype":"m.text"},"ts":1463511061000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Okay, I've reproduced the issue. It's because <pre class=anchors> things are treated as local (so they'll get picked over other collisions, since you presumably *meant* to use them), and locals don't look at as many of the defaulting things. I'll see what I can do to fix this.","msgtype":"m.text"},"ts":1463511457000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Funky collision of heuristics here, ugh.","msgtype":"m.text"},"ts":1463511553000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1463512443000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: https://twitter.com/mpotra/status/732628389065035776","msgtype":"m.text"},"ts":1463512529000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Someone mentioned that the TAG had concluded everyone should just use URL. Any citation?","msgtype":"m.text"},"ts":1463512624000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"plinss mentioned that","msgtype":"m.text"},"ts":1463513537000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: that's not a citation :P","msgtype":"m.text"},"ts":1463513986000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I know, I was just filling in the hole in your statement.","msgtype":"m.text"},"ts":1463513998000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: Your issue will require more work than I can do right now (I'm trying to get Echidna publishing working), so I've filed it as https://github.com/tabatkins/bikeshed/issues/710","msgtype":"m.text"},"ts":1463514096000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: OK cool, thanks","msgtype":"m.text"},"ts":1463514111000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"at least it's \"arbitrarily\" picking the right version for now","msgtype":"m.text"},"ts":1463514119000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It really is arbitrary, since it depends on the ordering of Python dicts.","msgtype":"m.text"},"ts":1463514194000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: Dumb question: why do you need to distinguish internal slots from record fields named like [[something]]?","msgtype":"m.text"},"ts":1463518834000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: yeah, we're not really clear, upon reflection. I guess it'd be similar to keeping -> and . as separate in C++, even if pointers could never have normal properties; they have different semantics, sure, but maybe we should just consolidate (like, say, C# does, despite having both value and reference objets).","msgtype":"m.text"},"ts":1463518913000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"jyasskin: annevk opened https://github.com/tc39/ecma262/issues/574 to discuss further","msgtype":"m.text"},"ts":1463518939000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"subscribes.","msgtype":"m.emote"},"ts":1463518962000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"IIUC, the difference between an attribute on an interface vs a field on a record is that the attribute is a getter/setter on the prototype of the JS object, but a field is just a field directly on the JS  object. But an internal slot acts like a field on the object, so it actually should be accessed like a record field.","msgtype":"m.text"},"ts":1463519141000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"s/record/dictionary","msgtype":"m.text"},"ts":1463519150000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"agreed. The [[s are enough to make it clear it's internal, now that I think about it","msgtype":"m.text"},"ts":1463519188000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1463519203000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Domenic: how significant is it that the streams spec defines IsReadableStream() as an internal slot check vs essentially an instanceof ReadableStream check?","msgtype":"m.text"},"ts":1463522941000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: pretty significant. Otherwise you could fool it by doing `var o = {}; o.__proto__ = ReadableStream.prototype`","msgtype":"m.text"},"ts":1463522969000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Then you'd start asking `o` for a bunch of interesting internal state, and bad things would happen","msgtype":"m.text"},"ts":1463522983000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: so its intended to be more strict, then...","msgtype":"m.text"},"ts":1463522998000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"yes indeed","msgtype":"m.text"},"ts":1463523003000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it's a brand check","msgtype":"m.text"},"ts":1463523006000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: ok, so if we have a way of doing the brand check via an intrinsic, that should be fine to use vs the spec version","msgtype":"m.text"},"ts":1463523041000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yeah as long as it can't be fooled, it should be fine","msgtype":"m.text"},"ts":1463523055000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: hmm, I guess our intrinsic could be fooled by Reflect.setPrototypeOf()","msgtype":"m.text"},"ts":1463523215000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: right, that was my __proto__ example... seems bad?","msgtype":"m.text"},"ts":1463523253000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: the problem with the slot check for me is that we don't have names for slots... really just indexes that a constant maps to","msgtype":"m.text"},"ts":1463523288000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I see. I guess you probably need to reserve the 0th-index slot to have a guid or something you can check... I wonder if that's how SpiderMonkey does it for Promise and Map and friends?","msgtype":"m.text"},"ts":1463523367000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I'll look and see what they do... thanks","msgtype":"m.text"},"ts":1463523411000,"senderName":"wanderview","senderId":"wanderview@irc"}
]