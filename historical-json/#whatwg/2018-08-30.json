[
{"content":{"body":"zcorpan: Domenic TabAtkins https://gist.githubusercontent.com/sideshowbarker/8284404/raw/c9157d8f597c3b91f7df23e07197c9627e7c4c66/wpt-anno.png","msgtype":"m.text"},"ts":1535635915000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"<wpt> output displayed as annotation in the margin","msgtype":"m.text"},"ts":1535635933000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"like the canisue annotations","msgtype":"m.text"},"ts":1535635951000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"styles are https://github.com/whatwg/wattsi/blob/014ab4dc3bb6ffc53d8e69887fd27cae7db354be/src/wattsi.pas#L2068","msgtype":"m.text"},"ts":1535635960000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the test filenames have text-overflow: ellipsis, and a title attribute with the testname","msgtype":"m.text"},"ts":1535635999000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so if the full filename is truncated/elided in the output, you can hover the text to see the title with the full filename","msgtype":"m.text"},"ts":1535636053000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: that looks good","msgtype":"m.text"},"ts":1535636694000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: ok cool","msgtype":"m.text"},"ts":1535636903000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: +1, that looks great and fits well with existing margin stuff we have","msgtype":"m.text"},"ts":1535639167000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"good good","msgtype":"m.text"},"ts":1535639212000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1535639214000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk, Domenic, you around?","msgtype":"m.text"},"ts":1535639341000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"waves","msgtype":"m.emote"},"ts":1535639351000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"maybe we could try a quick chat around https://github.com/whatwg/html/pull/3931 ?","msgtype":"m.text"},"ts":1535639351000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"I feel like we could split the conversation of making the baselines more standard with the current PR.","msgtype":"m.text"},"ts":1535639427000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"To answer anne's question on how we can solve this in the future.","msgtype":"m.text"},"ts":1535639431000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"I feel like we'd have to: 1. come up with some definition of what a hanging/ideo baseline look like when the font file doesn't specify it.","msgtype":"m.text"},"ts":1535639455000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"2. that definition needs to either point to or match a CSS equivalent definition","msgtype":"m.text"},"ts":1535639473000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"I've tried doing this in the past, but it's very complicated topic.","msgtype":"m.text"},"ts":1535639487000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"so basically the current PR could just be self-referential as it is now, and once we fix the bigger issue of spec'ing the baselines, refer to it as: \"if the UA returns a hanging baseline, it must follow X\"","msgtype":"m.text"},"ts":1535639552000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"one option to address this in the future is have a fallback system:","msgtype":"m.text"},"ts":1535639580000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"1. hanging baseline is the hanging baseline that is provided by the font file","msgtype":"m.text"},"ts":1535639592000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"2. if that is not available and a hanging baseline is needed, run the following algorithm:","msgtype":"m.text"},"ts":1535639608000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"2a. if the current font contains one of the following characters ...(is IRC unicode friendly?) à¤•.... then the hanging baseline is the smallest ascent of those characters.","msgtype":"m.text"},"ts":1535639693000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"*ascent = ascend","msgtype":"m.text"},"ts":1535639729000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"2b. the hanging baseline is 80% of the em ascend.","msgtype":"m.text"},"ts":1535639746000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"but again, something like that would make more sense if CSS is also agreeing with it. (They have tried in the past, afaik, to come up with definitions for those baselines but failed to agree)","msgtype":"m.text"},"ts":1535639817000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"so for @@asyncIterator on ReadableStream","msgtype":"m.text"},"ts":1535644657000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that last comment in the PR seems to suggest that BYOB streams will also be using DefaultReader","msgtype":"m.text"},"ts":1535644693000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but then why does BYOBReader exist","msgtype":"m.text"},"ts":1535644703000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"iirc there's no such thing as a \"BYOB stream\"","msgtype":"m.text"},"ts":1535644719000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"there are streams with mode: byob which use ReadableStreamBYOBReader","msgtype":"m.text"},"ts":1535644756000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1535644765000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"i think","msgtype":"m.text"},"ts":1535644774000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh no mode is on getReader","msgtype":"m.text"},"ts":1535644783000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ok yeah that makes @@asyncIterator even more annoying","msgtype":"m.text"},"ts":1535644829000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I can't think of any way to use @@asyncIterator for BYOB-reading","msgtype":"m.text"},"ts":1535645565000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It just doesn't really make sense","msgtype":"m.text"},"ts":1535645572000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It's intentional that byte streams can be read either in BYOB mode or default mode","msgtype":"m.text"},"ts":1535645592000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I.e. efficient-but-hard-to-code, vs. not-as-efficient easymode","msgtype":"m.text"},"ts":1535645610000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Saying that for-await-of always does easymode seems fine","msgtype":"m.text"},"ts":1535645621000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If we come up with some magical way to make for-await-of work with BYOB mode that's what we can use .iterator() for.","msgtype":"m.text"},"ts":1535645639000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Let me do a more thorough review now; I've been leaning on ricea and TimothyGu too much.","msgtype":"m.text"},"ts":1535645663000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"fserb: hey!","msgtype":"m.text"},"ts":1535646095000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"reads","msgtype":"m.emote"},"ts":1535646100000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fserb: that makes sense, but it doesn't resolve textBaseline having seemingly non-baseline values, right?","msgtype":"m.text"},"ts":1535646180000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fserb: and we'd probably cannot get rid of those?","msgtype":"m.text"},"ts":1535646194000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fserb: I guess if everyone is okay with that seeming mismatch I'm fine; I wish we got a little more input from other implementers at times","msgtype":"m.text"},"ts":1535646223000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(other implementers that also have detailed knowledge about these issues, that is)","msgtype":"m.text"},"ts":1535646244000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fserb: also, I'm very much in favor of trying to find shared primitives between CSS, <canvas>, and SVG","msgtype":"m.text"},"ts":1535646310000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fserb: I kinda wish we also had one definition for paths, gradients, etc.","msgtype":"m.text"},"ts":1535646310000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, I agree.","msgtype":"m.text"},"ts":1535646792000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"what do you mean by textBaseline having non-baseline values?","msgtype":"m.text"},"ts":1535646808000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"fserb: top/middle/bottom are based on the em-stuff you said were not baselines","msgtype":"m.text"},"ts":1535646885000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, but that's fine.","msgtype":"m.text"},"ts":1535647002000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"ok, let me recap that.","msgtype":"m.text"},"ts":1535647018000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"emAscend emDescent are not baseline, they are just font measurements.","msgtype":"m.text"},"ts":1535647032000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"textBaseline defined top/middle/bottom based on them, which is totally ok.","msgtype":"m.text"},"ts":1535647052000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"There's no explicit need for \"getBaseline()\" to return top/middle/bottom because they are not usually special properties of a font, and are ALWAYS defined in terms of the em.","msgtype":"m.text"},"ts":1535647088000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"(i.e., one can always calculate what top/middle/bottom is given the info on TextMetric)","msgtype":"m.text"},"ts":1535647104000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"the reason for getBaselines() to exist, is because there are font SPECIFIC baselines, that can't be constructed out of the other metrics.","msgtype":"m.text"},"ts":1535647140000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"which is the case of hanging/ideographic baselines.","msgtype":"m.text"},"ts":1535647186000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"fserb: if it's about fonts, shouldn't it be some other API, since multiple fonts could be used here?","msgtype":"m.text"},"ts":1535647192000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"for the baselines, you mean? Well, in theory yeah. In practice, the fallback font system of the browsers (that defines which font to use for each glyph) behaves like it's a single font.","msgtype":"m.text"},"ts":1535647254000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"so it is useful for the UA to say \"if I'm rendering those two characters, in the font that you asked, I'm actually using different fonts but deciding on a common baseline for both of them\"","msgtype":"m.text"},"ts":1535647277000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"so yeah, it could be thought as a property of the font itself.","msgtype":"m.text"},"ts":1535647299000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"but in practice, there's value in asking \"for this sequence of glyphs, what's the baseline that you used\"","msgtype":"m.text"},"ts":1535647312000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"bc the UA can be smart about it and return a meaningful value for multiple fonts together","msgtype":"m.text"},"ts":1535647327000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1535647353000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and is the only reason we're turning this into a method because they are optional?","msgtype":"m.text"},"ts":1535647369000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it seems we could also make them return -1 / null / undefined or some such","msgtype":"m.text"},"ts":1535647385000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh wait, I guess that was to match the API style","msgtype":"m.text"},"ts":1535647404000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1535647405000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fserb: I'll push some style nits to the PR","msgtype":"m.text"},"ts":1535647468000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"awesome! :)","msgtype":"m.text"},"ts":1535647483000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"fserb: thanks for taking the time to discuss this, I feel a bit more reassured","msgtype":"m.text"},"ts":1535647497000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"no stress. If there are more questions, I'd gladly answer :)","msgtype":"m.text"},"ts":1535647535000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"Domenic: you gotta tell people before you're gonna push :(","msgtype":"m.text"},"ts":1535648129000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"merge conflicts aaa","msgtype":"m.text"},"ts":1535648134000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I did!","msgtype":"m.text"},"ts":1535648138000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\" I'll upload a patch fixing all of these as I go, as penance for the long turnaround times so far.\"","msgtype":"m.text"},"ts":1535648154000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1535648174000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"my bad :P","msgtype":"m.text"},"ts":1535648177000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lol did you just fix all of them","msgtype":"m.text"},"ts":1535648194000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yeah the little ones","msgtype":"m.text"},"ts":1535648207000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Writing up a comment on what the big things left are","msgtype":"m.text"},"ts":1535648211000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Fixing nits is Domenic and I's day job now","msgtype":"m.text"},"ts":1535648233000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: the whole point of the AsyncIteratorPrototype inheritance is the @@asyncIterator return this property lol","msgtype":"m.text"},"ts":1535648298000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: ahhh right OK, nice","msgtype":"m.text"},"ts":1535648317000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"thats actually the only thing it provides","msgtype":"m.text"},"ts":1535648326000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Domenic: also was gonna comment about the ObjectCreate thing, we don't do ! anywhere else when we call it","msgtype":"m.text"},"ts":1535648450000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Oh hrm","msgtype":"m.text"},"ts":1535648483000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"We should..","msgtype":"m.text"},"ts":1535648491000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"262 doesn't prefix it with anything either","msgtype":"m.text"},"ts":1535648495000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't think there's any situation where it can fail","msgtype":"m.text"},"ts":1535648500000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(and while i disagree with the idea that doesn't fail means no prefix, i think consistency wins here)","msgtype":"m.text"},"ts":1535648546000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yeah, I prefer prefixing things like that, and thought we'd done that so far in streams","msgtype":"m.text"},"ts":1535648551000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: can you help me figure out why https://github.com/whatwg/streams/blob/5d9498e7526d2f50618432e7aada8582d08745c0/index.bs#L521 works but if I add `attribute` to https://github.com/whatwg/streams/blob/5d9498e7526d2f50618432e7aada8582d08745c0/index.bs#L540 it fails?","msgtype":"m.text"},"ts":1535649744000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess it has to do with `fillAttributeInfoSpans` in Bikeshed but I can't see what that's useful for","msgtype":"m.text"},"ts":1535650064000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"FYI: I won't be working tomorrow","msgtype":"m.text"},"ts":1535650147000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'll file a bug I guess","msgtype":"m.text"},"ts":1535650150000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"And I guess next week things might be a bit slower than usual as well, but anything urgent can be done","msgtype":"m.text"},"ts":1535650182000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: As you probably saw in GH email just now, I opened up https://github.com/tabatkins/bikeshed/issues/1346 to figure out what exactly raw-JS needs for Bikeshed dfn types. Trying to shoehorn raw JS into the IDL types is not going to work (and it's already causing problems even in the limited sense you're currently using it, with two specs both plausibly claiming to be the definition of Stream).","msgtype":"m.text"},"ts":1535652811000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: thanks, that'll be good. I think the attribute vs method thing is more limited though...","msgtype":"m.text"},"ts":1535653152000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins in particular why does method work but attribute fail.","msgtype":"m.text"},"ts":1535653259000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins in particular why does method work but attribute fail.","msgtype":"m.text"},"ts":1535653271000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The attribute fails because I'm looking for information that the IDL block would contain. I don't have the same feature for methods.","msgtype":"m.text"},"ts":1535653858000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So it happens that a JS class and its methods look sufficiently close to IDL interfaces and methods that you can use those types and be mostly okay.","msgtype":"m.text"},"ts":1535653882000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Until you get to Symbol-named properties, etc., as you found. ^_^","msgtype":"m.text"},"ts":1535653895000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hmm what feature is this for IDL attributes?","msgtype":"m.text"},"ts":1535653909000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Try it and see. ^_^ It fills in information about the attribute's type, its default value, and whether its' readonly or nullable.","msgtype":"m.text"},"ts":1535654350000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Does the same for dict-member definitions.","msgtype":"m.text"},"ts":1535654359000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yeah I tried to find a spec that uses it but couldn't","msgtype":"m.text"},"ts":1535654392000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://drafts.csswg.org/css-font-loading/#dom-fontface-status","msgtype":"m.text"},"ts":1535654413000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That's probably because it's, uh, not documented.","msgtype":"m.text"},"ts":1535654426000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Which I should fix.","msgtype":"m.text"},"ts":1535654431000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]