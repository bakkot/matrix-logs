[
{"content":{"body":"Domenic: Isn't JS already doing bignums?","msgtype":"m.text"},"ts":1407716515000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: yep. Most recent stuff is at https://github.com/nikomatsakis/typed-objects-explainer/","msgtype":"m.text"},"ts":1407716542000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Streusel: btw the W3C validator is up-to-date now with the latest meta@name values in the wiki (went in along with other changes I pushed yesterday)","msgtype":"m.text"},"ts":1407726205000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"awsum, thanks for letting me know","msgtype":"m.text"},"ts":1407726837000,"senderName":"Streusel","senderId":"Streusel@irc"},
{"content":{"body":"Hixie_: the resource hints thread on WHATWG impacts your research on reconciling dependency management","msgtype":"m.text"},"ts":1407738884000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what's the use case for relList again?","msgtype":"m.text"},"ts":1407742063000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan, convenience, I guess?","msgtype":"m.text"},"ts":1407743222000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Might not be as useful as classList, I guess","msgtype":"m.text"},"ts":1407743256000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: convenience seems moot if it's something nobody ever does","msgtype":"m.text"},"ts":1407743270000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1407743278000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Does anyone implement it yet?","msgtype":"m.text"},"ts":1407743284000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"gecko according to caniuse","msgtype":"m.text"},"ts":1407743294000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hmm","msgtype":"m.text"},"ts":1407743355000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Caniuse is correct","msgtype":"m.text"},"ts":1407743409000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"karlcow filed the bug","msgtype":"m.text"},"ts":1407743450000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"zcorpan, r? https://critic.hoppipolla.co.uk/r/2323 if you're interested in selectorsapi tests :)","msgtype":"m.text"},"ts":1407743673000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: yeah i was checking that briefly and concluded that it required more mental stress than i was prepared for at this time :-) will check again later","msgtype":"m.text"},"ts":1407743775000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Heh","msgtype":"m.text"},"ts":1407743783000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: https://github.com/slightlyoff/ServiceWorker/issues/403#issuecomment-51711008 - why must URL parsing happen before the async steps?","msgtype":"m.text"},"ts":1407763815000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: as I said, it grabs global state","msgtype":"m.text"},"ts":1407765509000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the parsing does, or just getting the document url for use as the base?","msgtype":"m.text"},"ts":1407765744000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: the parsing does if you use the generic parser","msgtype":"m.text"},"ts":1407765830000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: which might not be needed here","msgtype":"m.text"},"ts":1407765844000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: you could probably use the base URL parser if you want to do parsing async","msgtype":"m.text"},"ts":1407765864000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it doesn't need to be async, just getting an understanding of the issue","msgtype":"m.text"},"ts":1407765899000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: so yeah, the parsing could probably be async, but typically we do all that on the \"main thread\"","msgtype":"m.text"},"ts":1407765966000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"was there a flowchart for how <object> loading works? Hixie_?","msgtype":"m.text"},"ts":1407766939000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: is it just the url stuff that's problematic in [[Register]], I can't see anything else","msgtype":"m.text"},"ts":1407768416000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: origin comparisons potentially","msgtype":"m.text"},"ts":1407768447000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: [[GetRegistration]]'s for each might race?","msgtype":"m.text"},"ts":1407768496000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: would you parse the document url before async to work around that?","msgtype":"m.text"},"ts":1407768510000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I would probably do the security check sync","msgtype":"m.text"},"ts":1407768585000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: ah yes","msgtype":"m.text"},"ts":1407768593000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"makes sense","msgtype":"m.text"},"ts":1407768599000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: that's how these algorithms typically go","msgtype":"m.text"},"ts":1407768609000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I guess the only difference with the normal way is that here fetching isn't starting yet","msgtype":"m.text"},"ts":1407768667000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: in terms of language \"Browsers may ignore this potentially secure origin rule for development purposes only.\" is problematic","msgtype":"m.text"},"ts":1407768710000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: you cannot make normative (MAY) statements in a Note","msgtype":"m.text"},"ts":1407768721000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: should that note be there at all, or is it implicit that developer tools can alter spec behaviour?","msgtype":"m.text"},"ts":1407768781000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: prolly better as \"If the origin of scriptURL is not potentially secure and developer tools are not enabled,\"","msgtype":"m.text"},"ts":1407768788000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: yeah","msgtype":"m.text"},"ts":1407768797000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"actually yes","msgtype":"m.text"},"ts":1407768800000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"Note: Developer tools are expected to enable easier experimentation.\"","msgtype":"m.text"},"ts":1407768854000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: but I think instead of saying \"potentially secure\" you just want to say if the scriptURL's scheme is not https","msgtype":"m.text"},"ts":1407768917000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: because we want this to be a networked resource","msgtype":"m.text"},"ts":1407768934000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: we should include private origins too, then asset it's a network resource in a separate step","msgtype":"m.text"},"ts":1407769068000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(localhost for example)","msgtype":"m.text"},"ts":1407769078000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: localhost is not a potentially secure origin afaict","msgtype":"m.text"},"ts":1407769097000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh sorry","msgtype":"m.text"},"ts":1407769124000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"needs to read","msgtype":"m.emote"},"ts":1407769129000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: regarding \"Run the following substeps asynchronously:\", should that be switched for \"queue a task to run the following steps synchronously\"?","msgtype":"m.text"},"ts":1407769271000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1407769293000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"most of that should probably be async","msgtype":"m.text"},"ts":1407769320000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"although you need to be careful with regards to racing","msgtype":"m.text"},"ts":1407769345000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, that's my worry","msgtype":"m.text"},"ts":1407769408000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I suspect the registrations bit is in the same thread where the UA does navigation and maybe history","msgtype":"m.text"},"ts":1407769464000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Instead of phrasing it with for/each you might be better of phrasing it in English","msgtype":"m.text"},"ts":1407769493000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"as an operation that returns a bunch of globally registered things","msgtype":"m.text"},"ts":1407769522000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but yeah, it's a similar problem as what I had with fullscreen, you don't really know if someone else is doing the same thing or changing that global registered things thing","msgtype":"m.text"},"ts":1407769572000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"unless you'd define that part as having its own event loop, etc.","msgtype":"m.text"},"ts":1407769600000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, register(...); register(...); shouldn't be racey","msgtype":"m.text"},"ts":1407769752000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"without something like the storage mutex that's hard I think","msgtype":"m.text"},"ts":1407769832000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, there's some ordering guarantees","msgtype":"m.text"},"ts":1407769855000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: it's in the comments. dunno how accurate it is.","msgtype":"m.text"},"ts":1407770489000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"JakeA: hey, where is the service worker cache discussion meeting happening?","msgtype":"m.text"},"ts":1407772369000,"senderName":"ehsan","senderId":"ehsan@irc"},
{"content":{"body":"ehsan: there's a hangout link in the invite","msgtype":"m.text"},"ts":1407772409000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: not in the one that I received :)","msgtype":"m.text"},"ts":1407772420000,"senderName":"ehsan","senderId":"ehsan@irc"},
{"content":{"body":"JakeA: can you please paste the link here?","msgtype":"m.text"},"ts":1407772480000,"senderName":"ehsan","senderId":"ehsan@irc"},
{"content":{"body":"ehsan: https://plus.google.com/hangouts/_/calendar/amFmZmF0aGVjYWtlQGdtYWlsLmNvbQ.h1hjes3p8fo8i8g9mhfbaghpi4","msgtype":"m.text"},"ts":1407772505000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"ta","msgtype":"m.text"},"ts":1407772510000,"senderName":"ehsan","senderId":"ehsan@irc"},
{"content":{"body":"Hixie_: does your pipeline strip out comments?","msgtype":"m.text"},"ts":1407774075000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"5es","msgtype":"m.text"},"ts":1407774088000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yes even","msgtype":"m.text"},"ts":1407774090000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"ok :-/","msgtype":"m.text"},"ts":1407774102000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"you wouldn't want to look in the published source anyway","msgtype":"m.text"},"ts":1407774123000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"that's a mess","msgtype":"m.text"},"ts":1407774125000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"look in the pre-pipeline source :-)","msgtype":"m.text"},"ts":1407774136000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i could have used http://simon.html5.org/sandbox/bookmarklets/reveal-comments","msgtype":"m.text"},"ts":1407774156000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"is ModuleLinkage the same as LinkSet in the ES6 spec?","msgtype":"m.text"},"ts":1407774962000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"ah, no, it's a copy/paste error","msgtype":"m.text"},"ts":1407775101000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"jorendorff: any idea what a Module record is?","msgtype":"m.text"},"ts":1407775324000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"as in, if L is a Loader record, L.[[Modules]][i].[[Module]]","msgtype":"m.text"},"ts":1407775355000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: spec bug. It means a Module object.","msgtype":"m.text"},"ts":1407775421000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"ah ok","msgtype":"m.text"},"ts":1407775446000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"is the change history for the draft actually available anywhere? man that would be so useful","msgtype":"m.text"},"ts":1407775478000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"and by \"anywhere\" I mean publicly","msgtype":"m.text"},"ts":1407775488000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: NO.","msgtype":"m.text"},"ts":1407775498000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"caitp: the editor refuses to use version control","msgtype":"m.text"},"ts":1407775505000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"that's unfortunate","msgtype":"m.text"},"ts":1407775515000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"tell me about it","msgtype":"m.text"},"ts":1407775525000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i didn't have a chance to talk about formal grammars with my 8-yr-old this weekend, but i think i have an approach that... *might* work","msgtype":"m.text"},"ts":1407775571000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"sorry, offtopic","msgtype":"m.text"},"ts":1407775588000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"jorendorff: Actually, that sounds on-topic and very interesting. Elaborate?","msgtype":"m.text"},"ts":1407775609000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i'm excited to hear about the progress on that front =)","msgtype":"m.text"},"ts":1407775615000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Sounds off-topic... There's logic in formal grammars :)","msgtype":"m.text"},"ts":1407775639000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: have you looked at the es6 spec lately? ;)","msgtype":"m.text"},"ts":1407775654000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I see you've never tried to use the CSS 2.1 grammar.","msgtype":"m.text"},"ts":1407775662000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: someone (I think caitp?) made the controversial claim in irc.mozilla.org#jslang that there's no reason formal grammars can't be explained so a typical 5-year-old can understand","msgtype":"m.text"},"ts":1407775703000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"jorendorff, I try to avoid it in general, not for the grammar in particular :)","msgtype":"m.text"},"ts":1407775727000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"this was in support of the less controversial claim that the ES6 spec is unnecessarily incomprehensible","msgtype":"m.text"},"ts":1407775762000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"it was me, but I think I might have been exaggerating slightly when saying 5 year olds should thoroughly understand it --- but I think it should be possible to explain these things in ways that are accessible to young people","msgtype":"m.text"},"ts":1407775818000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"not even necessarily young people","msgtype":"m.text"},"ts":1407775825000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"30-somethings with hangovers","msgtype":"m.text"},"ts":1407775832000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it should be doable","msgtype":"m.text"},"ts":1407775839000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I mean, just post a question to http://www.reddit.com/r/explainlikeimfive/","msgtype":"m.text"},"ts":1407775844000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I certainly won't argue against that","msgtype":"m.text"},"ts":1407775847000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"And you'll get an answer.","msgtype":"m.text"},"ts":1407775848000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jorendorff: step 2 of http://people.mozilla.org/~jorendorff/es6-draft.html#sec-createlinkset","msgtype":"m.text"},"ts":1407776206000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"jorendorff: is that a spec bug?","msgtype":"m.text"},"ts":1407776211000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"also how can PromiseBuiltinCapability() ever return an abrupt completion","msgtype":"m.text"},"ts":1407776296000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"isn't that all internal to the spec","msgtype":"m.text"},"ts":1407776299000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: regarding step 2 of CreateLinkSet, yes","msgtype":"m.text"},"ts":1407776312000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"what should it be?","msgtype":"m.text"},"ts":1407776335000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"jorendorff: loader.[[LoaderObj]] ?","msgtype":"m.text"},"ts":1407776498000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: well, *really* there shouldn't be two separate things, a Loader Object and a Loader Record.","msgtype":"m.text"},"ts":1407776544000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"There should just be the Loader Object","msgtype":"m.text"},"ts":1407776546000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"and those Loader Record fields should be internal slots of the object.","msgtype":"m.text"},"ts":1407776556000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"they're 1-to-1 already anyway, the record is stupid","msgtype":"m.text"},"ts":1407776567000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"but to answer your question, yes.","msgtype":"m.text"},"ts":1407776590000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"jorendorff: k","msgtype":"m.text"},"ts":1407777033000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"sweet freaking kittens following this is making my mind melt","msgtype":"m.text"},"ts":1407777083000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"PromiseOfStartLoadPartwayThrough() creates a promise, sets a particular function as the executor, and chains to it synchronously","msgtype":"m.text"},"ts":1407777107000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"AsyncStartLoadPartwayThrough(), that executor, immediately creates a new promise and slaves its own result to that new promise's","msgtype":"m.text"},"ts":1407777136000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"it then either creates YET ANOTHER promise and ASYNCHRONOUSLY jumps to a function it slaves to that promise, OR, it calls another function that does that","msgtype":"m.text"},"ts":1407777166000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"at this point, if you can follow who is actually running, when they'll be running, or what will happen when they return, you're a stronger person than i","msgtype":"m.text"},"ts":1407777193000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"aha! haha! hah!","msgtype":"m.text"},"ts":1407777343000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i have finally found the function i'm supposed to call!","msgtype":"m.text"},"ts":1407777353000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"LoadModule(loader, name, options) !","msgtype":"m.text"},"ts":1407777363000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"no idea what i'm supposed to call it with, but that's another story!","msgtype":"m.text"},"ts":1407777379000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"only took a week :p","msgtype":"m.text"},"ts":1407777476000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://www.gliffy.com/go/publish/6040024 !","msgtype":"m.text"},"ts":1407777711000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"witness the glory","msgtype":"m.text"},"ts":1407777720000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"jorendorff: so, first, how does that look to you? did i make any mistakes?","msgtype":"m.text"},"ts":1407778521000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"jorendorff: second, now that i have a better handle on what's going on beneath the hood, let's talk about what the Web's default Loader should do.","msgtype":"m.text"},"ts":1407778567000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"absolutely","msgtype":"m.text"},"ts":1407778580000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"(to the second, still looking at the first part)","msgtype":"m.text"},"ts":1407778592000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"jorendorff: normalize() -- do we need to change anything here? e.g. is it supposed to resolve the URL or something?","msgtype":"m.text"},"ts":1407778599000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"lol, gliffy's svg export is lame","msgtype":"m.text"},"ts":1407778702000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"http://junkyard.damowmow.com/552","msgtype":"m.text"},"ts":1407778704000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"half of it just comes out as bitmaps","msgtype":"m.text"},"ts":1407778712000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Philips on HDMI-CEC: \"The HDMI-CEC functionality on devices from other brands might not work with your TV due to different interpretations of the HDMI-CEC industry standard.\"","msgtype":"m.text"},"ts":1407778809000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"Web pages might not work due to different interpretations of HTML.\"","msgtype":"m.text"},"ts":1407778824000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"just imagine if there was some kind of reference implementation that people could use to clarify questions about specs","msgtype":"m.text"},"ts":1407778901000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"wouldn't that be nifty","msgtype":"m.text"},"ts":1407778913000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"that just creates more issues","msgtype":"m.text"},"ts":1407778934000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"reference implementations rarely match the spec, so actually, it's like having two specs","msgtype":"m.text"},"ts":1407778984000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"and if you doubt the problems of having two specs, just look at HTML","msgtype":"m.text"},"ts":1407778995000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"if there's a difference between a reference implementation and the spec it implements, one would err on the side of the reference implementation because there's evidence that it works and isn't just a collection of ideas","msgtype":"m.text"},"ts":1407779089000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"jorendorff: so if i wanted to make it possible to import binary blobs, e.g. import sprites as \"spritesheet.png\";, what would i return in the fetch hook? the empty string but remember in the backend that this particular load has associated binary data?","msgtype":"m.text"},"ts":1407779100000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"actually i get it doesn't check that the return value is a string","msgtype":"m.text"},"ts":1407779186000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: normalize() converts from (a) literally whatever they put into the import statement, to (b) the name a loaded module is cached under","msgtype":"m.text"},"ts":1407779352000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"so if you want people to be able to...        import foo from \"../baz.js\";","msgtype":"m.text"},"ts":1407779367000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"but you want it to be cached under a URL","msgtype":"m.text"},"ts":1407779376000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"or something else entirely","msgtype":"m.text"},"ts":1407779385000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"so normalise resolves urls","msgtype":"m.text"},"ts":1407779391000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1407779393000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"that's not the design intent, i misspoke","msgtype":"m.text"},"ts":1407779399000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1407779406000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i was gonna say, the spec says locate resolves.","msgtype":"m.text"},"ts":1407779413000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yeah, locate resolves","msgtype":"m.text"},"ts":1407779418000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"so do we not want import foo from \"../baz.js\"; to work?","msgtype":"m.text"},"ts":1407779448000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"or?","msgtype":"m.text"},"ts":1407779449000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i'm confused","msgtype":"m.text"},"ts":1407779451000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"seems like we need normalise to resolve","msgtype":"m.text"},"ts":1407779455000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"and locate to be a no-op","msgtype":"m.text"},"ts":1407779459000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"that's possible, but what i'd like is to have some kind of `myLoaderObject.paths` property that makes it easy to customize that lookup --- require.js has this","msgtype":"m.text"},"ts":1407779507000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"so there's some separation between application code and deployment","msgtype":"m.text"},"ts":1407779535000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1407779543000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"admittedly the rest of the web platform doesn't exactly have this...","msgtype":"m.text"},"ts":1407779553000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"well it would if we added this","msgtype":"m.text"},"ts":1407779560000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"since this is going to end up being the entire platform's loading mechanism if i have my way","msgtype":"m.text"},"ts":1407779575000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"but like, I just want to say        import $ from \"jquery\";        <--- and be able to share that line of code with people I don't know and have it work for them","msgtype":"m.text"},"ts":1407779576000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"because they've also got \"jquery\" in their environment","msgtype":"m.text"},"ts":1407779583000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"at a path that's known to them","msgtype":"m.text"},"ts":1407779590000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Hixie_: yeah!","msgtype":"m.text"},"ts":1407779611000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"so there's a difference between mapping names to URLs, which is what |import $ from \"jQuery\"| apperas to be, and having your traditional path lookup system","msgtype":"m.text"},"ts":1407779691000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"in particular, path lookup wouldn't work on the web","msgtype":"m.text"},"ts":1407779698000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"(no way to stat efficiently)","msgtype":"m.text"},"ts":1407779704000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1407779707000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"a mapping is hard because it needs a declaration mechanism","msgtype":"m.text"},"ts":1407779719000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"which we could add i guess","msgtype":"m.text"},"ts":1407779726000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"require.js doesn't do that, it's not CLASSPATH","msgtype":"m.text"},"ts":1407779726000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"so you could say <script type=module name=jQuery>","msgtype":"m.text"},"ts":1407779745000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"to declare the mappings","msgtype":"m.text"},"ts":1407779749000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"is that more what you meant?","msgtype":"m.text"},"ts":1407779754000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1407779755000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"so then what would normalise actually do?","msgtype":"m.text"},"ts":1407779778000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"though i'd like to be able to configure it in js without having to use document.createElement('script')","msgtype":"m.text"},"ts":1407779779000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"still seems like it needs to output a url at the end of the day","msgtype":"m.text"},"ts":1407779787000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1407779793000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"we'd have an API for it","msgtype":"m.text"},"ts":1407779796000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1407779799000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"(realistically you're going to want to predeclare all your modules, style sheets, etc, declaratively anyway, so we can do prefetching)","msgtype":"m.text"},"ts":1407779823000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1407779831000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1407779835000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"(there's no way the web can wait for ES6's parser to see the \"import\" declaration)","msgtype":"m.text"},"ts":1407779836000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: ok, so all normalize would do is resolve relative module names to full module names","msgtype":"m.text"},"ts":1407779855000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"(at least not for the near term)","msgtype":"m.text"},"ts":1407779856000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"what's a \"full module name\"?","msgtype":"m.text"},"ts":1407779870000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"seems like there's one step that takes ambiguous names and outputs full absolute URLs","msgtype":"m.text"},"ts":1407779892000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"and it has to happen before the registry lookup","msgtype":"m.text"},"ts":1407779908000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i don't see how that gets split in two","msgtype":"m.text"},"ts":1407779910000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"in the design, the module names have a hierarchy that's totally independent of where stuff is located","msgtype":"m.text"},"ts":1407779939000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i mean, it's not baked in, because you can have normalize be a no-op","msgtype":"m.text"},"ts":1407779956000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"but that was the idea. people want to have packages that contain multiple modules","msgtype":"m.text"},"ts":1407779965000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"what's a \"package\" in this context?","msgtype":"m.text"},"ts":1407780029000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"like npm, an installable chunk of software. or like java, a directory containing related files of code. either meaning.","msgtype":"m.text"},"ts":1407780111000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"more like npm, not so much like java","msgtype":"m.text"},"ts":1407780130000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"ok but either way you still need to predeclare each file, right? so how does this affect us?","msgtype":"m.text"},"ts":1407780132000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"it affects the author of the package. say my package is called libjorendorff","msgtype":"m.text"},"ts":1407780158000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"and it's big, it's several modules","msgtype":"m.text"},"ts":1407780167000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"if there's a normalize hook, in libjorendorff/factories i can write        `import \"./pipelines\"`   and the normalize hook could resolve that to \"jorendorff/pipelines\"","msgtype":"m.text"},"ts":1407780244000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"that \"/\" is not a URL path separator","msgtype":"m.text"},"ts":1407780252000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"because that's not a url, it's just a module name","msgtype":"m.text"},"ts":1407780260000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"oh you want the web platform to support that natively?","msgtype":"m.text"},"ts":1407780294000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"a package then doesn't have to depend on its own name, which lets you load multiple versions of it at once under different names (without the cache getting confused)","msgtype":"m.text"},"ts":1407780304000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"this would all still need to happen along with url resolution in the normalise hook, though, right?","msgtype":"m.text"},"ts":1407780324000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"anyway i'm happy to do more than straight forward name lookup followed by url resolution. but i've no idea what it should be exactly, i'd need to be told precisely what people wanted.","msgtype":"m.text"},"ts":1407780358000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"...i think we could actually supply that","msgtype":"m.text"},"ts":1407780374000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"but so why not convert it to a URL in the locate hook?","msgtype":"m.text"},"ts":1407780397000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"the design intent was that in the web platform, locate() spits out a URL","msgtype":"m.text"},"ts":1407780410000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"but you really want URLs to be the cache key?","msgtype":"m.text"},"ts":1407780436000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i don't understand how anything else would work","msgtype":"m.text"},"ts":1407780461000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"why would you cache on anything _but_ the url?","msgtype":"m.text"},"ts":1407780472000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"well, so consider python for example","msgtype":"m.text"},"ts":1407780473000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"import sys; print(sys.modules)","msgtype":"m.text"},"ts":1407780481000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"that corresponds exactly to the loader cache.","msgtype":"m.text"},"ts":1407780492000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"it's just a {string: module} dictionary","msgtype":"m.text"},"ts":1407780500000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"but the strings are module names, not filenames.","msgtype":"m.text"},"ts":1407780506000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"say one package does |import image from \"foo.png\"| and another does |import image from \"./foo.png\"|, do you want the image to be fetched twice?","msgtype":"m.text"},"ts":1407780517000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"python doesn't have a high download cost","msgtype":"m.text"},"ts":1407780528000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: that's not true, going to disk is slow and loading/parsing code twice would be slow; in addition things wouldn't work properly","msgtype":"m.text"},"ts":1407780565000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"nor, i suspect, does it have a way to map two names to different paths","msgtype":"m.text"},"ts":1407780570000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"(which meaning the same underlying file)","msgtype":"m.text"},"ts":1407780666000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"the difference in stat() performance doesn't seem to bear on this. Python could certainly cache based on filename. Why doesn't it?","msgtype":"m.text"},"ts":1407780694000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"what's the difference between what it does and caching on filenames, in practice?","msgtype":"m.text"},"ts":1407780715000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Java ClassLoaders don't either, I don't think. I can't think of a system that does...","msgtype":"m.text"},"ts":1407780717000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"do any of those systems have a way to accidentally import the same underlying file under two different import names?","msgtype":"m.text"},"ts":1407780760000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"or is there a 1:1 mapping of their names to the underlying paths?","msgtype":"m.text"},"ts":1407780774000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: let me back up a bit and address your exact example","msgtype":"m.text"},"ts":1407780848000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Hixie_: |import image from \"foo.png\"|  <--- the design intent was that module names aren't urls;","msgtype":"m.text"},"ts":1407780981000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Hixie_: dherman proposed you might say somethign like   |import image from \"url(foo.png)\";| or \"@foo.png\", but I think annevk successfully wtf-orpetoed the proposal","msgtype":"m.text"},"ts":1407781040000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Hixie_: what i'd like is |import image from \"_static/foo.png\" where I've already configured <module \"_static\" href=\"/static\">","msgtype":"m.text"},"ts":1407781090000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"or something like that","msgtype":"m.text"},"ts":1407781093000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"name=\"_static","msgtype":"m.text"},"ts":1407781100000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"why would we force authors to have an indirection layer","msgtype":"m.text"},"ts":1407781130000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i'm all for supporting extra things before we convert to URLs, but realistically, most deployments are just gonna need to refer to local files","msgtype":"m.text"},"ts":1407781166000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"there's no win in forcing authors to declare that \"images/\" means \"images/\" before they can use \"images/foo.png\" as far as i can tell","msgtype":"m.text"},"ts":1407781191000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i mean, even in java and perl and so on, there's usually a more or less direct mapping between the fully qualified package names and the actual paths to find the files -- it's just that they have search paths that they can quickly stat first","msgtype":"m.text"},"ts":1407781244000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"(bbiab, getting food)","msgtype":"m.text"},"ts":1407781268000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"(back)","msgtype":"m.text"},"ts":1407784875000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"jorendorff: another question, while you're pondering the earlier ones: in practice, we're going to want the browser to manage the loads from multiple origins at the same time (e.g. consider depending on a third-party iframe, which might have its own dependencies).","msgtype":"m.text"},"ts":1407786331000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"jorendorff: but it looks like the Loader object is per-Realm","msgtype":"m.text"},"ts":1407786341000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"jorendorff: do i just make the System Loader object fake its data to the ES6 level and manage it separately at the event-loop or top-level-browsing-context level?","msgtype":"m.text"},"ts":1407786369000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"good questions all","msgtype":"m.text"},"ts":1407786398000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i don't know","msgtype":"m.text"},"ts":1407786400000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i'm not super satisfied with the earlier stuff, but i don't see how to make it feel natural for everybody... you can have the default paths be just \"load everything relative to this document's url\"","msgtype":"m.text"},"ts":1407786441000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"but still if you show example code doing       import style from \"whatever.css\";      there is no way you are going to prevent people from instantly believing that's a URL","msgtype":"m.text"},"ts":1407786509000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i think there's more or less nothing we can do which is going to make people think that \"import foo from bar\" isn't going to mean the same as <script type=module name=foo href=bar>, personally","msgtype":"m.text"},"ts":1407786696000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"that it really means <script type=module name=??? href=foo> where \"foo\" is somethinge else again imho doesn't match the platform aesthetic at all","msgtype":"m.text"},"ts":1407786740000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1407786748000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i mean <script type=module name=bar href=???>","msgtype":"m.text"},"ts":1407786761000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"even i can't work out what it means","msgtype":"m.text"},"ts":1407786768000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i wonder what browsers scope their prioritisation decisions to","msgtype":"m.text"},"ts":1407787121000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"top-level browsing contexts?","msgtype":"m.text"},"ts":1407787132000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"event loops?","msgtype":"m.text"},"ts":1407787134000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"the whole UA?","msgtype":"m.text"},"ts":1407787141000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: network request prioritization?","msgtype":"m.text"},"ts":1407787579000,"senderName":"jyasskin_w","senderId":"jyasskin_w@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1407787664000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"forwards the question to willchan","msgtype":"m.emote"},"ts":1407787787000,"senderName":"jyasskin_w","senderId":"jyasskin_w@irc"},
{"content":{"body":"jyasskin_w told me there was a question about browser network request prioritization","msgtype":"m.text"},"ts":1407787878000,"senderName":"willchan","senderId":"willchan@irc"},
{"content":{"body":"chromium prioritizes everything going through its network stack","msgtype":"m.text"},"ts":1407787903000,"senderName":"willchan","senderId":"willchan@irc"},
{"content":{"body":"ah ok","msgtype":"m.text"},"ts":1407787948000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"so it's whole-UA","msgtype":"m.text"},"ts":1407787951000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1407787952000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"not everything goes through our network stack though, such as plugin sockets and chrome app sockets, and we have some things that currently skip it like webrtc and what not. but we're fixing that.","msgtype":"m.text"},"ts":1407787956000,"senderName":"willchan","senderId":"willchan@irc"},
{"content":{"body":"yes, whole-UA","msgtype":"m.text"},"ts":1407787971000,"senderName":"willchan","senderId":"willchan@irc"},
{"content":{"body":"willchan: so bg tabs don't get lower priority than foreground tab?","msgtype":"m.text"},"ts":1407787993000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but most of the prioritization is contextual to a chromium profile.","msgtype":"m.text"},"ts":1407787993000,"senderName":"willchan","senderId":"willchan@irc"},
{"content":{"body":"if you're talking about network request prioritization, then no, bg tabs don't currrently get lower priority than foreground tabs. but that's in progress.","msgtype":"m.text"},"ts":1407788029000,"senderName":"willchan","senderId":"willchan@irc"},
{"content":{"body":"(at least in certain cases gecko gives lower priority for bg tabs)","msgtype":"m.text"},"ts":1407788031000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"is webrtc NOT short for WEB RealTime Clock?","msgtype":"m.text"},"ts":1407788470000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"smaug____: would be nice if gecko could evict some BG tabs to disk, or perhaps even not touch their arenas often","msgtype":"m.text"},"ts":1407788550000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: sure. Issue is that web pages tend to have rather live data these days","msgtype":"m.text"},"ts":1407788615000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"static pages are fine","msgtype":"m.text"},"ts":1407788620000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"well, yes, I realize it's easiest for static pages","msgtype":"m.text"},"ts":1407788634000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"we don't page in those tabs in anyway too often","msgtype":"m.text"},"ts":1407788673000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"seems to have 176 tabs open atm","msgtype":"m.emote"},"ts":1407788697000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: I mean, for example, dialing down the GC frequency for those tabs would seem wise","msgtype":"m.text"},"ts":1407788810000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: those shouldn't really participate in GC all the time","msgtype":"m.text"},"ts":1407788854000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"assuming we do compartment GCs","msgtype":"m.text"},"ts":1407788861000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(that is something to tweak probably)","msgtype":"m.text"},"ts":1407788868000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"for CC we certainly optimize out most of such tabs","msgtype":"m.text"},"ts":1407788883000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"jorendorff: another reason to fully evaluate the names to URLs in the normalize hook is that if we rely on attributes for the mapping yet do the resolving in locate, the mappings could change between the time we look up the normalised names and the time we fully resolve the URLs","msgtype":"m.text"},"ts":1407789256000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"jorendorff: another question. When does the ES6 loader actually evaluate the code?? I found where it compiles it (InstantiateSucceeded), but I just noticed that nothing in my flow chart _runs_ the code.","msgtype":"m.text"},"ts":1407789360000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"jorendorff: am I supposed to keep track of what order things are to run in, and then run it myself?","msgtype":"m.text"},"ts":1407789374000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"(in the HTML spec, i mean)","msgtype":"m.text"},"ts":1407789383000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: OK. In ES6, the code runs \"at the last minute\" before exposing the module object to user code. See EnsureEvaluated and the things that call it.","msgtype":"m.text"},"ts":1407789760000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"so basically i'm supposed to call EvaluateLoadedModule() when the LoadModule() promise resolves?","msgtype":"m.text"},"ts":1407789841000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: sections like EvaluateLoadedModule() are \"closures\"","msgtype":"m.text"},"ts":1407790162000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i don't know if this is clear or not","msgtype":"m.text"},"ts":1407790187000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"but you can't just call EvaluateLoadedModule","msgtype":"m.text"},"ts":1407790197000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"er yeah sorry i meant, i call EnsureEvaluated() when the promise is resolved","msgtype":"m.text"},"ts":1407790211000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1407790213000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"yeah that's right","msgtype":"m.text"},"ts":1407790215000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1407790225000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"the system should totally do that for you though, right?","msgtype":"m.text"},"ts":1407790231000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"and that does the work of evaluating all the dependencies?","msgtype":"m.text"},"ts":1407790232000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"well, no, i'm good with doing it","msgtype":"m.text"},"ts":1407790238000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"in particular, i want separate control over fetching and executin","msgtype":"m.text"},"ts":1407790248000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"g","msgtype":"m.text"},"ts":1407790250000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: yes, it walks the dependency graph","msgtype":"m.text"},"ts":1407790256000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"which this provides","msgtype":"m.text"},"ts":1407790258000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"hmmmm","msgtype":"m.text"},"ts":1407790426000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"jorendorff: hmm, interesting. There doesn't seem to be any way in ES6 to map a <script type=module> to a specific Load Record.","msgtype":"m.text"},"ts":1407790604000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"what kind of thing are you looking for?","msgtype":"m.text"},"ts":1407790640000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i want to get a promise that will resolve when a module has loaded, so that i can pass it to something else (e.g. something that will make a DOM subtree display:block) and say \"you depend on this promise\"","msgtype":"m.text"},"ts":1407790751000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"also i just noticed that my flowchart is incomplete. I missed Link().","msgtype":"m.text"},"ts":1407790767000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"smaug____: hmm, how do you avoid touching such tabs for CC?","msgtype":"m.text"},"ts":1407790851000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"keep notes about what was found there last time?","msgtype":"m.text"},"ts":1407790862000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: optimizing out from CC graph is rather simple many cases","msgtype":"m.text"},"ts":1407790928000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"in this case check if the document is in an active browsing context","msgtype":"m.text"},"ts":1407790956000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and if scripts haven't been running in those tabs, no nodes etc would end up to possible-garbage-object-buffer","msgtype":"m.text"},"ts":1407790996000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(skippability and black-bit-propagation are rather nice features of CC)","msgtype":"m.text"},"ts":1407791055000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: ah, right","msgtype":"m.text"},"ts":1407791128000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"in other words, CC deals with possibly garbage objects , GC deals with live objects","msgtype":"m.text"},"ts":1407791147000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"so CC tends to have smaller graphs","msgtype":"m.text"},"ts":1407791156000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"that list only gets populated with things that have had their refcounts touched in certain ways ...","msgtype":"m.text"},"ts":1407791159000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"so if they have not been touched AT ALL, they're automatically exempt","msgtype":"m.text"},"ts":1407791185000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1407791194000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"so, the only thing that needs any thought is to avoid running the GC when, for example, *no* script has executed since the last GC in that arena","msgtype":"m.text"},"ts":1407791229000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"and even if they are touched, but are in a document which is in active browsing context, they can be just removed from possible-garbage-object-buffer","msgtype":"m.text"},"ts":1407791247000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"not sure I follow that bit","msgtype":"m.text"},"ts":1407791269000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"what does \"active browsing context\" mean in this context?","msgtype":"m.text"},"ts":1407791282000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"wonders what is CC","msgtype":"m.emote"},"ts":1407791286000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"does it involve being in a foreground tab?","msgtype":"m.text"},"ts":1407791290000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"MikeSmith: cycle collection","msgtype":"m.text"},"ts":1407791293000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"CC == cycle collector","msgtype":"m.text"},"ts":1407791293000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"ah ok","msgtype":"m.text"},"ts":1407791298000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"or collector, as grammatical","msgtype":"m.text"},"ts":1407791302000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"same as with GC","msgtype":"m.text"},"ts":1407791310000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"active browsing context is a spec term, or close to that","msgtype":"m.text"},"ts":1407791314000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"basically you have a tab open","msgtype":"m.text"},"ts":1407791329000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"it has a top level active browsing context","msgtype":"m.text"},"ts":1407791343000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"for GC the optimization to done is to not run GC for bg tabs' compartments","msgtype":"m.text"},"ts":1407791407000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"oh, is \"in a document\" another spec term?","msgtype":"m.text"},"ts":1407791521000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"node is in a document if there is parentNode chain from the node to the document","msgtype":"m.text"},"ts":1407791560000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"i.e. for DOM nodes that are clearly linked into a Document that is actually linked into the active browsing context?","msgtype":"m.text"},"ts":1407791579000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1407791617000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"not all documents are in active browsing context","msgtype":"m.text"},"ts":1407791628000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"when would would they be removed from the possibly-garbage list","msgtype":"m.text"},"ts":1407791631000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Gecko has forgetSkippable phase","msgtype":"m.text"},"ts":1407791645000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"before CC","msgtype":"m.text"},"ts":1407791647000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: yeah, because you can have documents that are just being used for computations or something","msgtype":"m.text"},"ts":1407791658000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"which removes obviously live data from the purple buffer","msgtype":"m.text"},"ts":1407791661000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(purple buffer == possible garbage )","msgtype":"m.text"},"ts":1407791673000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"yeah, I gathered it was the same list we had been talking about","msgtype":"m.text"},"ts":1407791687000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"which you keep calling a buffer so I assume it's in a flat array of some kind","msgtype":"m.text"},"ts":1407791714000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"segmented array or some such","msgtype":"m.text"},"ts":1407791770000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Are there any plans (distant or not so distant) for providing a low-level TCP/UDP socket API in the browser (rather than protocols like WebRTC, web sockets, etc)?","msgtype":"m.text"},"ts":1407792587000,"senderName":"pluma","senderId":"pluma@irc"},
{"content":{"body":"how would we do that in a safe fashion?","msgtype":"m.text"},"ts":1407792608000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: that's what I was wondering. So the answer is probably \"no\"?","msgtype":"m.text"},"ts":1407792683000,"senderName":"pluma","senderId":"pluma@irc"},
{"content":{"body":"pluma: web sockets would almost certainly not exist if that it was safe to just allow TCP/UDP sockets","msgtype":"m.text"},"ts":1407792683000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"s/that //","msgtype":"m.text"},"ts":1407792696000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"pluma: if we can find a way to do it safely, i'm sure it'll be mere minutes before it's available. :-)","msgtype":"m.text"},"ts":1407792711000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_, SamB: Thanks. I thought I remembered hearing the idea being thrown around at some point, but I apparently remembered wrong. I can't see how to do it safely either (well, maybe with a permission check like the other security-critical APIs, but they'd likely not be very self-explanatory).","msgtype":"m.text"},"ts":1407792803000,"senderName":"pluma","senderId":"pluma@irc"},
{"content":{"body":"Wait, what about http://www.w3.org/TR/raw-sockets/ ?","msgtype":"m.text"},"ts":1407792826000,"senderName":"pluma","senderId":"pluma@irc"},
{"content":{"body":"Hm... looks pretty dead, though.","msgtype":"m.text"},"ts":1407792923000,"senderName":"pluma","senderId":"pluma@irc"},
{"content":{"body":"the existence of specs doesn't imply anyone will implement them :-)","msgtype":"m.text"},"ts":1407793013000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: that's what I though. Okay, thanks again ;)","msgtype":"m.text"},"ts":1407793034000,"senderName":"pluma","senderId":"pluma@irc"},
{"content":{"body":"(what would you want raw sockets for anyway?)","msgtype":"m.text"},"ts":1407793061000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: implement an <insert existing protocol here> client in the browser?","msgtype":"m.text"},"ts":1407793113000,"senderName":"pluma","senderId":"pluma@irc"},
{"content":{"body":"Hixie_: web vs native, etc","msgtype":"m.text"},"ts":1407793140000,"senderName":"pluma","senderId":"pluma@irc"},
{"content":{"body":"do you have a specific example?","msgtype":"m.text"},"ts":1407793175000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I'm not saying that's a good idea. Just an idea someone could have...","msgtype":"m.text"},"ts":1407793188000,"senderName":"pluma","senderId":"pluma@irc"},
{"content":{"body":"shrugs","msgtype":"m.emote"},"ts":1407793199000,"senderName":"pluma","senderId":"pluma@irc"},
{"content":{"body":"Torrent client?","msgtype":"m.text"},"ts":1407793201000,"senderName":"pluma","senderId":"pluma@irc"},
{"content":{"body":"pluma: it's definitely an idea that would have its uses","msgtype":"m.text"},"ts":1407793218000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"but it would also have LOTS AND LOTS of dangerous misuses","msgtype":"m.text"},"ts":1407793242000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"The reason I'm asking is because someone asked about porting a python chat client to JS for the browser and the Python code currently uses raw TCP sockets. We recommended using web sockets or some abstraction built on top of that.","msgtype":"m.text"},"ts":1407793313000,"senderName":"pluma","senderId":"pluma@irc"},
{"content":{"body":"(on ##javascript that is)","msgtype":"m.text"},"ts":1407793336000,"senderName":"pluma","senderId":"pluma@irc"},
{"content":{"body":"ah like an irc client?","msgtype":"m.text"},"ts":1407793348000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yeah we definitely wouldn't want a random web page to be able to connect to a random irc client, just imagine the DOS attacks that would enable :-)","msgtype":"m.text"},"ts":1407793374000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"er, random irc server","msgtype":"m.text"},"ts":1407793380000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: well, it'd be fun. In the DF sense (http://dwarffortresswiki.org/index.php/Fun)","msgtype":"m.text"},"ts":1407793488000,"senderName":"pluma","senderId":"pluma@irc"},
{"content":{"body":"yeah...","msgtype":"m.text"},"ts":1407793517000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"pluma: I think the security models for that http://www.w3.org/TR/raw-sockets/ is not the Web security model. That spec depends on an different, as-yet-undocumented off-Web security model. All the specs from the SysApps WG do","msgtype":"m.text"},"ts":1407794874000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"s/security models/security model/","msgtype":"m.text"},"ts":1407794942000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: ah, so it's most likely intended for something like Firefox OS apps and such?","msgtype":"m.text"},"ts":1407795011000,"senderName":"pluma","senderId":"pluma@irc"},
{"content":{"body":"yeah, that","msgtype":"m.text"},"ts":1407795019000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"although I think Mozilla and Google are no longer participating actively in that WG any longer. So it seems unlikely that spec will go anywhere any time soon","msgtype":"m.text"},"ts":1407795086000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"nobody's really crying out for an off-Web HTML/CSS/JS-based standard runtime","msgtype":"m.text"},"ts":1407795184000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"users certainly aren't, and developers aren't","msgtype":"m.text"},"ts":1407795214000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ends his editorial comments","msgtype":"m.emote"},"ts":1407795230000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Hm... I wished CSS would become a living standard alongside HTML.","msgtype":"m.text"},"ts":1407795273000,"senderName":"pluma","senderId":"pluma@irc"},
{"content":{"body":"pluma: it is living, it's just more of a Frankenstein monster sort of life","msgtype":"m.text"},"ts":1407795308000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"editor's drafts of CSS specs are living specs, it just takes a lot more work to observe it and try to keep up with it","msgtype":"m.text"},"ts":1407795400000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Sure, but CSS3 isn't fully \"stable\" and already browsers are chasing after CSS4, not to mention all the vendor crap. I'm really hoping for a revolution a la HTML 5.","msgtype":"m.text"},"ts":1407795419000,"senderName":"pluma","senderId":"pluma@irc"},
{"content":{"body":"MikeSmith: How is it harder to observe?","msgtype":"m.text"},"ts":1407795428000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"pluma: There's no such thing as CSS3 or CSS4.","msgtype":"m.text"},"ts":1407795438000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"http://www.xanthir.com/b4Ko0","msgtype":"m.text"},"ts":1407795453000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Well, there are various CSS-related specs with \"3\" and \"4\" in their name.","msgtype":"m.text"},"ts":1407795457000,"senderName":"pluma","senderId":"pluma@irc"},
{"content":{"body":"Yes, those are the individual modules.","msgtype":"m.text"},"ts":1407795470000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: the volume/ number of the specs and the number of different editors","msgtype":"m.text"},"ts":1407795473000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Sure, but actually tracking changes seems identical between the two - just watch the repos.  There are even Twitter bots for each.","msgtype":"m.text"},"ts":1407795497000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: and also, the knowing which specs to currently take seriously, and which are known .. duds or whatever they should be called -- but that are still around and people cite them","msgtype":"m.text"},"ts":1407795546000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: I understand that. But it just looks a lot hairier and messier than HTML / Web Apps look{s,ed}.","msgtype":"m.text"},"ts":1407795552000,"senderName":"pluma","senderId":"pluma@irc"},
{"content":{"body":"TabAtkins: like, old GCPM","msgtype":"m.text"},"ts":1407795553000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Granted on that note.","msgtype":"m.text"},"ts":1407795558000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"MikeSmith: (Though dauwhe is working on GCPM now, and trying to make it realistic.)","msgtype":"m.text"},"ts":1407795580000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: but yeay, point taken (about watching the repos and twitter bots)","msgtype":"m.text"},"ts":1407795587000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: yeah astearns told me that the other day. glad to hear dauwhe is on the job","msgtype":"m.text"},"ts":1407795618000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: (specific context was, astearns was telling me about latest discussion on footnotes)","msgtype":"m.text"},"ts":1407795650000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: Also, having selectors spread out across different version numbers is a bit more tedious to follow than to have one single selectors spec that gets continuously revised. The world in which the version numbers matter and the world for which most web code is written are two very different worlds in my experience.","msgtype":"m.text"},"ts":1407795665000,"senderName":"pluma","senderId":"pluma@irc"},
{"content":{"body":"pluma: Always and only looking at the latest version is all you need.","msgtype":"m.text"},"ts":1407795704000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"There are no selectors in Selectors 3 that are missing in Selectors 4, except those that were dropped because no one implemented them.","msgtype":"m.text"},"ts":1407795725000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: okay, but how do I know which specs are dead and will not be updated further?","msgtype":"m.text"},"ts":1407795733000,"senderName":"pluma","senderId":"pluma@irc"},
{"content":{"body":"Dead specs, *ideally*, are marked as such. We're not great about that. (I need to get off my ass and just go mark all of them.)","msgtype":"m.text"},"ts":1407795779000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"This list is also very helpful and kept up-to-date: http://www.w3.org/Style/CSS/current-work.en.html","msgtype":"m.text"},"ts":1407795786000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"http://www.w3.org/Style/CSS/current-work","msgtype":"m.text"},"ts":1407795792000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: is there a version of the specs in which current browser support is marked as in the HTML (etc) spec?","msgtype":"m.text"},"ts":1407795807000,"senderName":"pluma","senderId":"pluma@irc"},
{"content":{"body":"Some Editor's Drafts have linkages into their test suites, with support information displayed alongside each section, similar to HTML.","msgtype":"m.text"},"ts":1407795855000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But not all drafts have test suites.","msgtype":"m.text"},"ts":1407795862000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hrmpf. I wished someone would find a solution for that. How do the WHAT WG specs manage to do this consistently?","msgtype":"m.text"},"ts":1407795980000,"senderName":"pluma","senderId":"pluma@irc"},
{"content":{"body":"Do you guys know if in the future the spec will call for a scenario where a \"checkbox\" group can have a \"at least one must be checked\" definition? http://codepen.io/anon/pen/IwxEh","msgtype":"m.text"},"ts":1407796032000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"TabAtkins: fyi http://platform.html5.org links to http://www.w3.org/Style/CSS/current-work","msgtype":"m.text"},"ts":1407796361000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: thanks for clearing up some of my misconceptions about the CSS versioning, though. However I still wished there was a nicer overview.","msgtype":"m.text"},"ts":1407796363000,"senderName":"pluma","senderId":"pluma@irc"},
{"content":{"body":"pluma: HTML's data is maintained manually, whenever people care to update it. ^_^","msgtype":"m.text"},"ts":1407796380000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"boogyman: You mean <input type=checkbox required>? Oh, how I've wished for that.","msgtype":"m.text"},"ts":1407796400000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"pluma: And no problem.","msgtype":"m.text"},"ts":1407796403000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: if/when you ahve time to look at the CSS part http://platform.html5.org please do. And either lemme know what should be changed/added/removed or just open a PR","msgtype":"m.text"},"ts":1407796407000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"kk","msgtype":"m.text"},"ts":1407796416000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: <input type=checkbox> can have more than one checkbox? how confusing :-(","msgtype":"m.text"},"ts":1407796432000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"boogyman: there is nothing that I know of but yeah I have had cases where I'd really like to have that too","msgtype":"m.text"},"ts":1407796444000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"SamB: Multiple checkboxes in a single name group.","msgtype":"m.text"},"ts":1407796445000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: in one element or several?","msgtype":"m.text"},"ts":1407796478000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Several.","msgtype":"m.text"},"ts":1407796485000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Have you worked with checkboxes before?","msgtype":"m.text"},"ts":1407796491000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"okay, yes, that's what I thought...","msgtype":"m.text"},"ts":1407796503000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"TabAtkins: I may or may not ever have made any myself, but I'm sure I've poked around on pages that had them ;-)","msgtype":"m.text"},"ts":1407796539000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Hixie_: see boogyman question above. Why we have no way to define a \"checkbox\" group with \"at least one checkbox must be checked\"","msgtype":"m.text"},"ts":1407796541000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: so you'd pick one to mark \"required\" arbitrarily?","msgtype":"m.text"},"ts":1407796560000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: That's one of the questions, yeah.","msgtype":"m.text"},"ts":1407796581000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"that's one possible implementation.","msgtype":"m.text"},"ts":1407796597000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"Probably, sure.  Basically if any of the checkboxes in a name group are required, it triggers the \"required\" beahvior for the group.","msgtype":"m.text"},"ts":1407796602000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: yeah, that seems like the only even half-sane behaviour","msgtype":"m.text"},"ts":1407796619000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"because the order the checkboxes are in is not ordinarily expected to have any semantics associated with it, is it?","msgtype":"m.text"},"ts":1407796663000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I mean, beyond what it might convey to a human","msgtype":"m.text"},"ts":1407796704000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: The use-case here is that you have a Business / Author whom wants to impose a \"must select one or more\" requirement. Currently authors are required to implement a JS shim (albeit a fairly straightforward one)","msgtype":"m.text"},"ts":1407796803000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"boogyman: I understand the usecase, thanks ;-)","msgtype":"m.text"},"ts":1407796832000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I've certainly seen it on enough paper forms","msgtype":"m.text"},"ts":1407796857000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"MikeSmith: not declaratively, yeah.","msgtype":"m.text"},"ts":1407796872000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"MikeSmith: you can give the same semantics using <select multiple required>, though.","msgtype":"m.text"},"ts":1407796911000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"obviously you'd still want to make the requirement clear in-text","msgtype":"m.text"},"ts":1407796912000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Hixie_: isn't typically a bit more awkward UI-wise?","msgtype":"m.text"},"ts":1407796932000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"+that","msgtype":"m.text"},"ts":1407796942000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Hixie_: yes, but now you're tying the author to the \"dropdown\" cosmetics","msgtype":"m.text"},"ts":1407796946000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"SamB: semantically they're identical, so, in theory, it's just a UI issue. :-)","msgtype":"m.text"},"ts":1407796952000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"boogyman: <select multiple> doesn't have a drop-down, it has a list","msgtype":"m.text"},"ts":1407796962000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"in the default rendering","msgtype":"m.text"},"ts":1407796966000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"and in theory, you can have any rendering you like","msgtype":"m.text"},"ts":1407796976000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"if the theory doesn't match practice, send pitchforks to dglazkov_ :-)","msgtype":"m.text"},"ts":1407796990000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I am unfamiliar with CSS exposing the ability to break out that list and display as \"checkbox\"","msgtype":"m.text"},"ts":1407796992000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"Hixie_: I mean <select multiple> tends to be something only advanced users will actually know how to select multiple items in, doesn't it?","msgtype":"m.text"},"ts":1407796993000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: well, that's really up to the browser and/or author","msgtype":"m.text"},"ts":1407797017000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"anyway. if you really must use checkboxes and really must have one required (which is a weird UI, but whatever), then use script and setCustomValidity()","msgtype":"m.text"},"ts":1407797042000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"that's what it's for","msgtype":"m.text"},"ts":1407797045000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I'm talking about the UI that the advanced users already know how to use here, which probably isn't really too negotiable at this point?","msgtype":"m.text"},"ts":1407797048000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"tired of hearing the \"the special case of the ui thread has taught us that all synchronous programming is bad\" nonsense","msgtype":"m.text"},"ts":1407797048000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i seem to recall somebody saying that every time the sync-message thread comes up","msgtype":"m.text"},"ts":1407797066000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"SamB: as far as i can tell, it's entirely negotiable.","msgtype":"m.text"},"ts":1407797097000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"zewt: I'm already tired of it, and I'm not even *certain* I've heard it mentioned before","msgtype":"m.text"},"ts":1407797110000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Hixie_: what, you don't think people will get confused if the shift/control click stuff stops working?","msgtype":"m.text"},"ts":1407797132000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: not if you replace it with just a bunch of labeled checkboxes...","msgtype":"m.text"},"ts":1407797150000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"it's nice that people are aware of the issue, but it's such an over-the-top generalization","msgtype":"m.text"},"ts":1407797169000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Hixie_: yes, but now you're going down the flame-wars of \"JS is required\", where this could be a nice addative feature for HTML to expose","msgtype":"m.text"},"ts":1407797172000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"Hixie_: they might still get frustrated by not being able to do that though","msgtype":"m.text"},"ts":1407797182000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"boogyman: you still have to validate at submit time anyway","msgtype":"m.text"},"ts":1407797193000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"boogyman: so JS is only required for the \"nice-to-have\" prevalidation","msgtype":"m.text"},"ts":1407797205000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"boogyman: there's a huge long tail of such possible new features, sure. file a bug if you want this one to enter the usual gauntlet.","msgtype":"m.text"},"ts":1407797206000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"boogyman: it'd need pretty compelling use cases to be worth adding instead of something else though","msgtype":"m.text"},"ts":1407797229000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"boogyman: so, make sure you say \"check one or more\" on the page, do the JS thing if you want, don't worry if *that* doesn't work with JS turned off","msgtype":"m.text"},"ts":1407797239000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"maybe those users are using a browser that wouldn't support the new attribute anyway","msgtype":"m.text"},"ts":1407797260000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"boogyman: you are of course aware that it's quite possible for an adversary to submit without using *your* (or any) form, yes?","msgtype":"m.text"},"ts":1407797333000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"heck, it could even be a non-adversary","msgtype":"m.text"},"ts":1407797341000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Hixie_: It was something asked in another channel. I remember use-cases from the past, but my solution was to just implement a simple JS script for the client-validation etc...","msgtype":"m.text"},"ts":1407797343000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"SamB: I am well aware of the capability; I was forwarding on a request from a different channel, recalling my own past use-case(s)","msgtype":"m.text"},"ts":1407797434000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"boogyman: it's possible in about one line of javascript, i would imagine","msgtype":"m.text"},"ts":1407797447000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yup, and I reference the aforementioned \"JS requirement flame-wars\"... :p","msgtype":"m.text"},"ts":1407797522000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"i'm not sure what you're arguing against here","msgtype":"m.text"},"ts":1407797536000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"\"people will complain that it requires javascript, therefore you should do it\"? that would qualify among the weakest arguments that could be made. heh","msgtype":"m.text"},"ts":1407797602000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"The intent was to ask if this was being planned for the future (forwarded request from different channel). It is not, without a ticket to undergo the typical change-request lifecycle.","msgtype":"m.text"},"ts":1407797615000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"boogyman: nothing is planned for the future except the things that are already in the spec :-)","msgtype":"m.text"},"ts":1407797646000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"boogyman: we don't really plan ahead so much","msgtype":"m.text"},"ts":1407797655000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"or rather, the spec is the plan ahead","msgtype":"m.text"},"ts":1407797668000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"iterations, go figure...","msgtype":"m.text"},"ts":1407797692000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"i don't understand the Fetch API","msgtype":"m.text"},"ts":1407797879000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"what's the first argument to fetch()?","msgtype":"m.text"},"ts":1407797928000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"(also, window.fetch is SO going to clash)","msgtype":"m.text"},"ts":1407797935000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"what happens if you resolve a promise you've rejected?","msgtype":"m.text"},"ts":1407798640000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"because that's what fetch() does...","msgtype":"m.text"},"ts":1407798646000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: Once a promise has been resolved in some way, any further attempts to resolve it are no-ops.","msgtype":"m.text"},"ts":1407798749000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie_: well, did you get that \"shock remote victim\" protocol deployed in browsers yet?","msgtype":"m.text"},"ts":1407798764000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"i would not support such a protocol","msgtype":"m.text"},"ts":1407798778000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"TabAtkins: still seems bad for a spec to do it, though...","msgtype":"m.text"},"ts":1407798788000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: Oh, certainly; if it's happening, it's a bug.","msgtype":"m.text"},"ts":1407798799000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"well, I guess you can't use it on the spec author?","msgtype":"m.text"},"ts":1407798799000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I was just answering your question. ^_^","msgtype":"m.text"},"ts":1407798803000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"SamB: more effective to file a bug :-)","msgtype":"m.text"},"ts":1407798811000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"TabAtkins: thanks :-)","msgtype":"m.text"},"ts":1407798814000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"of course, if it's an *accident* rather than a thoroughly bizarre API, that's different","msgtype":"m.text"},"ts":1407798853000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"i assume it's always an accident","msgtype":"m.text"},"ts":1407798868000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"so it looks like the fetch API doesn't have an object that represents an ongoing fetch","msgtype":"m.text"},"ts":1407798887000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Yeah, double-resolving a promise is always going to be an accident.","msgtype":"m.text"},"ts":1407798887000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1407798890000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"and nor does ES6, really","msgtype":"m.text"},"ts":1407798903000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"though they both have promises","msgtype":"m.text"},"ts":1407798906000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"that represent essentially the same thing...","msgtype":"m.text"},"ts":1407798914000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"nope, no sign of conway here, that's for sure","msgtype":"m.text"},"ts":1407798926000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"conway?","msgtype":"m.text"},"ts":1407798935000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"http://en.wikipedia.org/wiki/Conway's_law","msgtype":"m.text"},"ts":1407798948000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"as long as it's not \"on accident\"","msgtype":"m.text"},"ts":1407798948000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: you don't think 5-year-olds should be writing specs?","msgtype":"m.text"},"ts":1407798977000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Hixie_: Fetch resolves the promise with a Response as soon as it's possible to construct one, no?","msgtype":"m.text"},"ts":1407798980000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i think the age threshold for people who say \"on accident\" is ~15, not so much 3","msgtype":"m.text"},"ts":1407798995000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i really don't understand why fetch() takes both a Request and a RequestInit","msgtype":"m.text"},"ts":1407799019000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"zewt: well, yes, I was just giving an example of an age at which I think it's actually acceptable","msgtype":"m.text"},"ts":1407799019000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"TabAtkins: well, i'm not sure how one defines \"as soon as possible\" here","msgtype":"m.text"},"ts":1407799039000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I mean, when not in zombie-mode and not talking silly on purpose","msgtype":"m.text"},"ts":1407799048000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"TabAtkins: but if it needs a promise, presumably it's not the entire time the api is doing something","msgtype":"m.text"},"ts":1407799053000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I think as soon as the response returns and starts sending data (and redirects have been followed).","msgtype":"m.text"},"ts":1407799059000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Well, I guess you have to wait for headers to finish sending.","msgtype":"m.text"},"ts":1407799078000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But you can resolve the promise while body is still sending, since you've got a stream for that.","msgtype":"m.text"},"ts":1407799100000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so is there a promise or not?","msgtype":"m.text"},"ts":1407799106000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: ???","msgtype":"m.text"},"ts":1407799118000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"my point is just that there's no object that represents the fetch","msgtype":"m.text"},"ts":1407799119000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: In what way do you want something to \"represent the fetch\"?","msgtype":"m.text"},"ts":1407799133000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie_: hmm, the Response doesn't represent it well enough for you?","msgtype":"m.text"},"ts":1407799136000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"(We were just discussing today that there's no way to cancel a fetch().)","msgtype":"m.text"},"ts":1407799151000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: not saying i necessarily want anything, i'm just trying to figure out how to reconcile Fetch and Loader","msgtype":"m.text"},"ts":1407799159000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"SamB: well as tab just pointed out, it doesn't e.g. let you cancel a fetch","msgtype":"m.text"},"ts":1407799182000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"maybe either the promise or the Response should be acceptable as a representative of the fetch?","msgtype":"m.text"},"ts":1407799183000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Okay.  Well, the Response object represents the *result* of the fetch.  The promise represents the ongoing operation to produce a Response.","msgtype":"m.text"},"ts":1407799185000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"a promise isn't really a useful object in and of itself","msgtype":"m.text"},"ts":1407799211000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Most likely, when we figure out how promise subclassing works, fetch()'ll switch to returning a CancelablePromise or something.","msgtype":"m.text"},"ts":1407799218000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: will that still be cancelable after it resolves?","msgtype":"m.text"},"ts":1407799237000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"subclassing promises is all kinds of trouble, since it won't chain right","msgtype":"m.text"},"ts":1407799256000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"or can't you race with the resolve?","msgtype":"m.text"},"ts":1407799259000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: Dunno.  Depends on semantics.","msgtype":"m.text"},"ts":1407799260000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"SamB: I mean, once it resolves, you've got a Response.  The question is just whether you then must cancel via the Response (to stop receiving body bytes) or whether a cancel on the promise will chain down into the Response.","msgtype":"m.text"},"ts":1407799293000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie_: That's why it hasn't been done yet. It'll happen at some point, though.","msgtype":"m.text"},"ts":1407799315000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It's just an engineering problem to work around, after all.","msgtype":"m.text"},"ts":1407799324000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"what does \"chain right\" mean","msgtype":"m.text"},"ts":1407799328000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"i don't really see a sane way to do it","msgtype":"m.text"},"ts":1407799332000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"typeclasses obviously","msgtype":"m.text"},"ts":1407799339000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"but if it's gonna happen, i have use cases for it","msgtype":"m.text"},"ts":1407799345000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"SamB: returnsASpecialPromise().then(function(x){ return \"foo\"; });","msgtype":"m.text"},"ts":1407799349000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"in particular i need to apply backpressure to promises","msgtype":"m.text"},"ts":1407799353000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Is the promise returned by then() a special promise, or a plain one?","msgtype":"m.text"},"ts":1407799362000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: that was basically my question","msgtype":"m.text"},"ts":1407799372000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Hixie_: That's for streams to do.","msgtype":"m.text"},"ts":1407799372000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"SamB: Well, that's the question to answer.","msgtype":"m.text"},"ts":1407799384000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Promise.all() is an even bigger problem imho (or whatever it's called in ES's API)","msgtype":"m.text"},"ts":1407799385000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: Yeah, that's definitely an... interesting aspect.","msgtype":"m.text"},"ts":1407799400000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And yeah, it's Promise.all()","msgtype":"m.text"},"ts":1407799409000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: streams are a different issue","msgtype":"m.text"},"ts":1407799415000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"TabAtkins: i mean something like object A is on-demand, and depends on object B which is on-demand","msgtype":"m.text"},"ts":1407799427000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"one way you could do it is say that object A actually depends on object B's \"ready\" promise","msgtype":"m.text"},"ts":1407799439000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"but then you lose the back-channel for when you tell A to get on with it -- it has no way to trigger B to get on with it.","msgtype":"m.text"},"ts":1407799454000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: Hm, I'm missing some context, since presumably B has some API to load itself as well.","msgtype":"m.text"},"ts":1407799488000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"again, are you trying to do lazy evaluation or async I/O?","msgtype":"m.text"},"ts":1407799492000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"TabAtkins: e.g. B is an image, A is a style sheet","msgtype":"m.text"},"ts":1407799504000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"TabAtkins: both are \"load on demand\"","msgtype":"m.text"},"ts":1407799510000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"TabAtkins: A depends on B","msgtype":"m.text"},"ts":1407799515000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"TabAtkins: at some point you say \"I need A\"","msgtype":"m.text"},"ts":1407799526000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: Like, A()'s ready promise could be a Promise.all() of its internal ready promise and the ready promises of all of its dependencies.","msgtype":"m.text"},"ts":1407799528000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: the problem is in the opposite direction","msgtype":"m.text"},"ts":1407799542000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i.e., those aren't the same thing and trying to make promises handle both is probably a bad idea?","msgtype":"m.text"},"ts":1407799544000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"But it can hold onto more API than just that promise.","msgtype":"m.text"},"ts":1407799545000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: how does A tell B \"ok, I need you now\"","msgtype":"m.text"},"ts":1407799549000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Like the loader function for each of its requirements.","msgtype":"m.text"},"ts":1407799554000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"if all it has is a promise for a B","msgtype":"m.text"},"ts":1407799558000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1407799565000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"that's how i'm going to have to do it since promises don't have subapis","msgtype":"m.text"},"ts":1407799578000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"And yes, what SamB said.  \"Please do your work\" is a separate thing from \"Let me know when your work is done\".","msgtype":"m.text"},"ts":1407799580000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie_: maybe the promise should be a property of some larger object?","msgtype":"m.text"},"ts":1407799599000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"the larger object is just B","msgtype":"m.text"},"ts":1407799607000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"okay","msgtype":"m.text"},"ts":1407799618000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Hixie_: Btw, API idiom for this stuff is a .loaded attribute, and a .load() function.","msgtype":"m.text"},"ts":1407799627000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so don't do that thing where you throw away B and keep only the promise?","msgtype":"m.text"},"ts":1407799628000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"(I expect you'll run the API by Anne/Domenic/etc, but might as well get this right from the beginning.)","msgtype":"m.text"},"ts":1407799658000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: .loaded, .ready, whichever","msgtype":"m.text"},"ts":1407799659000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"TabAtkins: .loaded and .load() are bad names because they're ambiguous","msgtype":"m.text"},"ts":1407799677000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"TabAtkins: maybe fetches will need to return something more than just a promise too :-(","msgtype":"m.text"},"ts":1407799683000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"TabAtkins: they don't distinguish the fetch step from the execution step","msgtype":"m.text"},"ts":1407799694000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"now I'm having evil ideas involving forwarding","msgtype":"m.text"},"ts":1407799696000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"can you do forwarding in JS?","msgtype":"m.text"},"ts":1407799701000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Hixie_: Ah, sure.  Those are for the loading steps.","msgtype":"m.text"},"ts":1407799708000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"SamB: Yeah, there's various idioms for it. what do you want to do?","msgtype":"m.text"},"ts":1407799719000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: like, fetch could return a fake promise that is actually not a promise","msgtype":"m.text"},"ts":1407799734000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"but a wrapper around a promise","msgtype":"m.text"},"ts":1407799741000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"(I do some twisty stuff in Colors to make the APIs extensible more easily.)","msgtype":"m.text"},"ts":1407799743000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"which can be canceled","msgtype":"m.text"},"ts":1407799747000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"TabAtkins: is a module \"loaded\" when it's downloaded, translated, instantiated, compiled, has dependencies, evaluated...?","msgtype":"m.text"},"ts":1407799750000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"SamB: Ah, no, no reason to make that happen.","msgtype":"m.text"},"ts":1407799754000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie_: Shrug. ^_^","msgtype":"m.text"},"ts":1407799764000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: that's why i prefer terms like \"ready\"","msgtype":"m.text"},"ts":1407799773000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"TabAtkins: I'm sure there would be other reasons one might want to forward method calls","msgtype":"m.text"},"ts":1407799786000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"\"ready\" more clearly indicates \"i'm good to go, but haven't gone\"","msgtype":"m.text"},"ts":1407799788000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"anyway, i'm happy to let y'all bikeshed the terms","msgtype":"m.text"},"ts":1407799813000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"programmers can't even decide on what to call \"null\"","msgtype":"m.text"},"ts":1407799870000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"votes for nil","msgtype":"m.emote"},"ts":1407799879000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"one of python's smaller but most idiotic warts is calling null \"None\"","msgtype":"m.text"},"ts":1407799884000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"one of those things where: it doesn't matter which one you use, just whatever you do, don't make up something new","msgtype":"m.text"},"ts":1407799910000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Hixie_: nil is false, silly.","msgtype":"m.text"},"ts":1407799971000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"much like null","msgtype":"m.text"},"ts":1407799990000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"nil is the one true way","msgtype":"m.text"},"ts":1407799991000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"zewt: on the other hand, it took them forever to get around to having named truth/falsehood","msgtype":"m.text"},"ts":1407799995000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"by the way, does anyone know where the \"if(x == false)\" thing comes from","msgtype":"m.text"},"ts":1407800000000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"they just used 0/1 for those for ages","msgtype":"m.text"},"ts":1407800002000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"and it isn't type compatible with false in any sane world :-P","msgtype":"m.text"},"ts":1407800003000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"re: it's such a ridiculous lack of understanding of the whole concept of a Boolean","msgtype":"m.text"},"ts":1407800014000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Hixie_: so you think CL is insane, not just elisp?","msgtype":"m.text"},"ts":1407800028000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"when i see \"if(x == true)\" i want to rewrite it to say \"if(x == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true == true ==","msgtype":"m.text"},"ts":1407800037000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"all the lisps are insane but that's a whole different issue","msgtype":"m.text"},"ts":1407800048000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"zewt: there might be some cases where it is actually sane to compare against true/false","msgtype":"m.text"},"ts":1407800087000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"zewt: in js, if (x) and if (x == true) are not the same thing, fwiw","msgtype":"m.text"},"ts":1407800097000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i guarantee you not in any of the cases i've seen","msgtype":"m.text"},"ts":1407800098000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"but I imagine this would mostly have to do with attempting to print them","msgtype":"m.text"},"ts":1407800101000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"pretty sure this is entirely a \"i saw this somewhere and i'm doing that thing i saw\"","msgtype":"m.text"},"ts":1407800113000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"like, in implementing `print'","msgtype":"m.text"},"ts":1407800115000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"(because == and if () coerce differently)","msgtype":"m.text"},"ts":1407800116000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"#define true 7","msgtype":"m.text"},"ts":1407800117000,"senderName":"jamesr__","senderId":"jamesr__@irc"},
{"content":{"body":"zewt: some [insert rant] languages expose *-y evaluations, where 1 == true but 1 !== true","msgtype":"m.text"},"ts":1407800120000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"mostly i see it in objc, where it's \"x == YES\"","msgtype":"m.text"},"ts":1407800135000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Hixie_: what's the difference?","msgtype":"m.text"},"ts":1407800136000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"i forget the details","msgtype":"m.text"},"ts":1407800152000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"though actually it's not the same in C, Python, C++, etc. either","msgtype":"m.text"},"ts":1407800159000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"since e.g. 2 is truthy, but not == 1","msgtype":"m.text"},"ts":1407800206000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"zewt: null/undefined are falsey, but not == false.","msgtype":"m.text"},"ts":1407800212000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(of course, the point wasn't the order of operations, i just wasn't going to calculate how many ('s i should stick in there when I held down shift-insert)","msgtype":"m.text"},"ts":1407800221000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"or, in python, [] or () or {} would be falsey, but not == 0","msgtype":"m.text"},"ts":1407800243000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"zewt: And use of \"x == false\" over \"!x\" is quite common when you have an API that can return false *or* a falsey value, but the latter is a valid value.  Like indexOf().","msgtype":"m.text"},"ts":1407800264000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I wonder if there is any hope that iOS can stop treating application/xhtml+xml as text/html.","msgtype":"m.text"},"ts":1407800294000,"senderName":"Yuhong","senderId":"Yuhong@irc"},
{"content":{"body":"(is truthy the wrong word?)","msgtype":"m.text"},"ts":1407800301000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Or maybe that one returns -1.  Anyway, cases like that occur, where 0 or \"\" is a valid return value, and false is a failure return value.","msgtype":"m.text"},"ts":1407800303000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"SamB: Yes it is.","msgtype":"m.text"},"ts":1407800314000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: err, indexOf returns -1 ... yeah","msgtype":"m.text"},"ts":1407800322000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"what's the companion to falsey, then?","msgtype":"m.text"},"ts":1407800336000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"returning true/false/null or something like that would just be a really bad API","msgtype":"m.text"},"ts":1407800350000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"and in that case i'd probably say if(x != null && x) / if(x != null && !x)","msgtype":"m.text"},"ts":1407800361000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"or something along those lines","msgtype":"m.text"},"ts":1407800368000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: Shrug, it happens.  Blame the lack of Except or Option monads in JS. ^_^","msgtype":"m.text"},"ts":1407800369000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jorendorff: so... if I have <script type=module dependencies=foo ...>, and at some point I call LoadModule() for that module, how do I prepopulate its dependencies??","msgtype":"m.text"},"ts":1407800384000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"zewt: \"yes\", \"no, \"maybe\" comes to mind as API design :)","msgtype":"m.text"},"ts":1407800393000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"TabAtkins: stupid missing typeclasses/HM typesystem ;-P","msgtype":"m.text"},"ts":1407800412000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: I'd kill for a Maybe.","msgtype":"m.text"},"ts":1407800432000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Also: flatMap on Array.","msgtype":"m.text"},"ts":1407800442000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"is that concatMap","msgtype":"m.text"},"ts":1407800454000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"would kill for a decent strongly typed language with a powerful type system in place of JS","msgtype":"m.emote"},"ts":1407800458000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"i wish it was any of these things in any of the times i've seen that (cough) pattern, but it's all just places returning a Simple Old Boolean","msgtype":"m.text"},"ts":1407800466000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i see how to fake it for a non-JS module, but if 'instantiate' returns 'undefined' (as it would for JS), then I don't see how to inject extra dependencies","msgtype":"m.text"},"ts":1407800483000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"or is flatMap actually >>=","msgtype":"m.text"},"ts":1407800483000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"gsnedders: i wouldn't kill for it, but yeah, i really, really wish the web had strong types","msgtype":"m.text"},"ts":1407800511000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"SamB: flatMap is >>=, yeah.","msgtype":"m.text"},"ts":1407800511000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I kinda hope MSR's work on type systems for TypeScript/JS boundaries gets somewhere such that one can create a sane languge which JS maps to a subset thereof","msgtype":"m.text"},"ts":1407800514000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Wanna be able to map over an array and return 0+ elements to stitch into the result.","msgtype":"m.text"},"ts":1407800540000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i'll take weak typing for web-like work any day","msgtype":"m.text"},"ts":1407800546000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Which makes replacing JS trivial, as both input languages parse to one bytecode","msgtype":"m.text"},"ts":1407800548000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Well, \"easy\" :)","msgtype":"m.text"},"ts":1407800563000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I guess flatMap is actually about the most descriptive name I've heard for it","msgtype":"m.text"},"ts":1407800566000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: Yeah, you map, then you flatten one level. ^_^","msgtype":"m.text"},"ts":1407800579000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I mean neither >>= nor bind actually desscribes it too well","msgtype":"m.text"},"ts":1407800585000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"gsnedders: call it \"*cough* easy\"","msgtype":"m.text"},"ts":1407800587000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"It's a direct transcription of >>= implemented using only the Functor semantics.","msgtype":"m.text"},"ts":1407800596000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: you can do that?","msgtype":"m.text"},"ts":1407800610000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"don't you need some kind of monoid too?","msgtype":"m.text"},"ts":1407800623000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: Of course, if you ahve a flatten function as well, that'll convert a nested object into a single level.","msgtype":"m.text"},"ts":1407800626000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I don't like referring to that as a monoid, as it's not *in practice* in a language, just in the theoretical sense.","msgtype":"m.text"},"ts":1407800647000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1407800670000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Yeah, you're technically combining two members of a set into a third member of the set, but really it's reaching into a nested object and generating a new one with the same data, respecting the nested sematnics.","msgtype":"m.text"},"ts":1407800685000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"my main issue with monoids is there are so darned many to choose from","msgtype":"m.text"},"ts":1407800688000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Use more complicated objects, then.","msgtype":"m.text"},"ts":1407800700000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"like, in arithmatic you've got one over (*) and one over (+)","msgtype":"m.text"},"ts":1407800710000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"(That doesn't save you from every object having First/Last monoids, of course.)","msgtype":"m.text"},"ts":1407800714000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(And a bunch more.)","msgtype":"m.text"},"ts":1407800724000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: don't think i've seen ever the word \"functor\" used outside of C++","msgtype":"m.text"},"ts":1407800736000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: it is","msgtype":"m.text"},"ts":1407800745000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"and it means a totally different thng","msgtype":"m.text"},"ts":1407800749000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"zewt: something that has a map function, basically","msgtype":"m.text"},"ts":1407800762000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"zewt: It's a category theory term, unrelated to C++.","msgtype":"m.text"},"ts":1407800762000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i mean, it just means (to me) \"something that can be called like a function\", but that's just nothing special in modern languages (and python just calls that a \"callable\")","msgtype":"m.text"},"ts":1407800771000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"In c++ it means \"function\", basically.","msgtype":"m.text"},"ts":1407800771000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But yeah, \"Functor\" is \"has a .map() function, acting in the expected way\".","msgtype":"m.text"},"ts":1407800783000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah that's the wrong name then","msgtype":"m.text"},"ts":1407800794000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Haskell's names are stupid and dumb.","msgtype":"m.text"},"ts":1407800797000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ah, missed the \"haskell\" part","msgtype":"m.text"},"ts":1407800807000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I mean, that's the term for that concept from category theory.","msgtype":"m.text"},"ts":1407800812000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: in Haskell's defense, those names were not made up by the Haskell people","msgtype":"m.text"},"ts":1407800818000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"No idea which one came first.","msgtype":"m.text"},"ts":1407800823000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"they were just re-used from  CT","msgtype":"m.text"},"ts":1407800825000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"sure, but if you're a programming language, the meaning of terms for programming languages resolve first","msgtype":"m.text"},"ts":1407800844000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"SamB: That's not a defense of Haskell, just an explanation. ^_^ Haskell is still dumb for using dumb math words.","msgtype":"m.text"},"ts":1407800848000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Broadwell includes H.265 HW acceleration support; next gen video to be dominated by patent-encumbered formats again? *sighs*","msgtype":"m.text"},"ts":1407800869000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"zewt: Haskell is a programming language, so it appears to have equal rights to the name as c++","msgtype":"m.text"},"ts":1407800870000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But anyway, better name is Mappable.","msgtype":"m.text"},"ts":1407800887000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: so you want Haskell people to try to make up a comprehensible term?","msgtype":"m.text"},"ts":1407800891000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Just like better name for Monoid is Joinable or something.","msgtype":"m.text"},"ts":1407800899000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"not that it matters, but i'd call c++ a higher-authority language than haskell :P","msgtype":"m.text"},"ts":1407800925000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I don't know if Monoid has a better name; there are so darned many different ones","msgtype":"m.text"},"ts":1407800926000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"zewt: why did C++ misuse CT terms","msgtype":"m.text"},"ts":1407800943000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"The concept is simple - it's something that can be combined with similar somethings to produce a third something of the same type.","msgtype":"m.text"},"ts":1407800947000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"zewt: C++ should have called those \"callable\"","msgtype":"m.text"},"ts":1407800958000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"(also, it's still a stupid term in C++)","msgtype":"m.text"},"ts":1407800964000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"like I always have","msgtype":"m.text"},"ts":1407800965000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"anyway, yes, Monad and Functor are bad names; Monoid isn't good but it's hard to come up with a good name for such a general structure as a monoid","msgtype":"m.text"},"ts":1407801109000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"actually, Monoid may just come from Abstract Algebra","msgtype":"m.text"},"ts":1407801175000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"When I taught myself what monads are, I just read http://www.haskell.org/haskellwiki/Typeclassopedia and gradually did find+replace on terms as I figured out what they really meant. Made it *way* easier to read.","msgtype":"m.text"},"ts":1407801198000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yeah, monad is basic abstract algebra.  A bit weaker than Set.","msgtype":"m.text"},"ts":1407801216000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ring, rather.","msgtype":"m.text"},"ts":1407801225000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Set is way weaker, obvs.)","msgtype":"m.text"},"ts":1407801230000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"you mean monoid","msgtype":"m.text"},"ts":1407801232000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"UGH, YES","msgtype":"m.text"},"ts":1407801238000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Mon(a|oi)d is stupid.","msgtype":"m.text"},"ts":1407801247000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"there's an axises joke in here somewhere","msgtype":"m.text"},"ts":1407801269000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"TabAtkins: hmm, doesn't every Ring have *two* Monoids?","msgtype":"m.text"},"ts":1407801305000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"one of which (\"addition\") is evidently also an \"abelian group\"","msgtype":"m.text"},"ts":1407801344000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: Hurp durp, I'm forgetting all my terms.  Yes.","msgtype":"m.text"},"ts":1407801362000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"*Group* is the thing right above monoid.","msgtype":"m.text"},"ts":1407801373000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hey, I had to cheat and user Wikipedia","msgtype":"m.text"},"ts":1407801381000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"*use","msgtype":"m.text"},"ts":1407801386000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"though I did manage to extrapolate that Group must be the slightly-stronger structure","msgtype":"m.text"},"ts":1407801405000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Yeah, group is just a monoid with an identity element.","msgtype":"m.text"},"ts":1407801429000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I can remember what a Monoid is about though","msgtype":"m.text"},"ts":1407801431000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"hmm, monoids don't have identity already?","msgtype":"m.text"},"ts":1407801450000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"In programming terms, a monoid is a structure where you can take an array of them and call .reduce(), and it knows what to do automatically.","msgtype":"m.text"},"ts":1407801465000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"A Group is one of those that can handle being an empty list. ^_^","msgtype":"m.text"},"ts":1407801477000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ugh again, Group is inverses.","msgtype":"m.text"},"ts":1407801490000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"well, if you pick *which* monoid to use for that type ;-P","msgtype":"m.text"},"ts":1407801494000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Semigroup is a monoid without identity.","msgtype":"m.text"},"ts":1407801497000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"SamB: Assume strong typing, of course.","msgtype":"m.text"},"ts":1407801503000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"A monoid with a .negate() is a group.","msgtype":"m.text"},"ts":1407801521000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"strong typing isn't really enough","msgtype":"m.text"},"ts":1407801526000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Sure it is.  If you know you have a List[Foo], then given an empty list, you can tell that it's an empty *list of Foos*.","msgtype":"m.text"},"ts":1407801553000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Well, I mean, if I wanted Monoids in a prover I'd make it possible to have more than one per type","msgtype":"m.text"},"ts":1407801559000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: You're screwed then, because First and Last monoids exist for all types.","msgtype":"m.text"},"ts":1407801578000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"At a mnimum.","msgtype":"m.text"},"ts":1407801589000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"how would I be screwed?","msgtype":"m.text"},"ts":1407801590000,"senderName":"SamB","senderId":"SamB@irc"}
]