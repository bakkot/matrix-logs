[
{"content":{"body":"JonasNZ: from reading the spec it seems to me like Firefox might be correct. I.e. the Content-Type header is extrcated from the body in the Request constructor (or when calling fetch), if it isn't set already; and it isn't unset anywhere later...","msgtype":"m.text"},"ts":1574294855000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"(i.e. step 36 in https://fetch.spec.whatwg.org/#dom-request is what adds the header; and after that point the rest of the fetch algorithm as no way to distinguish a Content-Type header that might have been explicitly set by javascript from one that was extrcated from the body)","msgtype":"m.text"},"ts":1574294951000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"In that case, I might suggest that the spec is wrong. I'll try and find the HTTP RFC, but I believe that the content type header for multipart/form-data is not valid for GET requests","msgtype":"m.text"},"ts":1574297383000,"senderName":"JonasNZ","senderId":"JonasNZ@irc"},
{"content":{"body":"\"A payload within a GET request message has no defined semantics; sending a payload body on a GET request might cause some existing implementations to reject the request.\"","msgtype":"m.text"},"ts":1574303059000,"senderName":"Jessidhia","senderId":"Jessidhia@irc"},
{"content":{"body":"so... it's UB","msgtype":"m.text"},"ts":1574303069000,"senderName":"Jessidhia","senderId":"Jessidhia@irc"},
{"content":{"body":"( https://tools.ietf.org/html/rfc7231#section-4.3.1 )","msgtype":"m.text"},"ts":1574303093000,"senderName":"Jessidhia","senderId":"Jessidhia@irc"},
{"content":{"body":"Jessidhia: Ah it looks like JonasNZ had \"quit\" and \"rejoined\" in between you sending that, so not sure if he saw it","msgtype":"m.text"},"ts":1574303453000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"we need later 7 TCP for this not for DCC 😆","msgtype":"m.text"},"ts":1574304568000,"senderName":"Jessidhia","senderId":"Jessidhia@irc"},
{"content":{"body":"Domenic: TabAtkins: FYI about the Can I Use limitation for mdn-prefixed IDs, I raised https://github.com/Fyrd/caniuse/issues/5187","msgtype":"m.text"},"ts":1574306696000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and also raised https://github.com/tabatkins/bikeshed/issues/1553, for the resulting limitation in Bikeshed behavior","msgtype":"m.text"},"ts":1574306769000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Awesome","msgtype":"m.text"},"ts":1574306781000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"As an aside, I wonder what's up with https://caniuse.com/#feat=mdn-api_abstractrange; does Edge 76 really support something Chrome doesn't?","msgtype":"m.text"},"ts":1574306796000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Also https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange#Browser_compatibility is empty, interesting","msgtype":"m.text"},"ts":1574306839000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think older non-Blink/Chromium Edge supported AbstractRange","msgtype":"m.text"},"ts":1574306847000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Yeah but not 76 I would assume","msgtype":"m.text"},"ts":1574306879000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1574306885000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so that’s probably a bug in the browser-compat-data for AbstractRange","msgtype":"m.text"},"ts":1574306930000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Makes sense","msgtype":"m.text"},"ts":1574306943000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It does make me wonder if \"multi-implementer experience\" has been met anyway though","msgtype":"m.text"},"ts":1574306958000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Like in some cases W3C has counted Emacs as an implemnetation; it'd surprise me if they decided not to count old-Edge as one.","msgtype":"m.text"},"ts":1574306980000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"well as far as what W3C is counting for actual web-platform features, in the HTML and DOM cases at least, I am not counting old-Edge","msgtype":"m.text"},"ts":1574307101000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Well, I guess that is a good change :)","msgtype":"m.text"},"ts":1574307132000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah well I can’t speak to what they might be counting or other specs, as far as Director decisions go","msgtype":"m.text"},"ts":1574307194000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I dunno maybe process 2020 will happen and everything will stay at CR forever without that criteria","msgtype":"m.text"},"ts":1574307250000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"well I think the Evergreen thing is actually going to happen","msgtype":"m.text"},"ts":1574307319000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"at least I have been led to believe so","msgtype":"m.text"},"ts":1574307331000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and for the WebDriver spec, the WG has also been told to believe so","msgtype":"m.text"},"ts":1574307368000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and same for the ServiceWorker spec","msgtype":"m.text"},"ts":1574307381000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Yeah it'd be nice","msgtype":"m.text"},"ts":1574307408000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"about the problem with the compat table at https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange#Browser_compatibility, it seems like that must just be a bug, but I don’t know where in their pipeline the cause might be nor where I should raise an issue for it..","msgtype":"m.text"},"ts":1574307502000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and about Can I Use showing that Edge 76 has AbstractRange support, I think there’s probably a general/meta issue with BCD right now in that it hasn’t added general thing to account for the fact the underlying engine changed","msgtype":"m.text"},"ts":1574307639000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the edge data in https://github.com/mdn/browser-compat-data/blob/master/api/AbstractRange.json just has \"version_added\": \"18\"","msgtype":"m.text"},"ts":1574307706000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so I guess the way that Can I Use and anybody else downstream consumes that is to just consider any shipping version of Edge after 18 to have that same support","msgtype":"m.text"},"ts":1574307770000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Ah that makes sense","msgtype":"m.text"},"ts":1574307780000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1574307855000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"BCD has a version_removed field https://github.com/mdn/browser-compat-data/blob/master/schemas/compat-data-schema.md#version_removed","msgtype":"m.text"},"ts":1574307878000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"...but of course for that to have effect, it would need to be manually added to the BCD edge data in dozens of JSON files","msgtype":"m.text"},"ts":1574307971000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think the easier solution is for everybody to just ignore Edge 76 and beyond, as far as feature data goes","msgtype":"m.text"},"ts":1574308078000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Yeah. I wonder if it'd make sense to treat it as a separate browser, and maybe fix things up on the frontend.","msgtype":"m.text"},"ts":1574308140000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: by the way, in other news, I recently updated https://www.w3.org/html/","msgtype":"m.text"},"ts":1574311468000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"part of the context is https://github.com/validator/validator/issues/890","msgtype":"m.text"},"ts":1574311519000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"in particular https://github.com/validator/validator/issues/890#issuecomment-555819316","msgtype":"m.text"},"ts":1574311563000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"...which was an example of confusion due to https://www.w3.org/html/ pointing people to https://www.w3.org/TR/html52/","msgtype":"m.text"},"ts":1574311627000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so lemme know if you have any refinements to suggest for text on https://www.w3.org/html/","msgtype":"m.text"},"ts":1574311678000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"as far as https://www.w3.org/TR/html52/ (and https://www.w3.org/TR/html51/, and https://www.w3.org/TR/html50/, and corresponding dated URLs like https://www.w3.org/TR/2017/REC-html52-20171214/)...","msgtype":"m.text"},"ts":1574311763000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Ah cool. I didn't know /html existed (just /TR/html)","msgtype":"m.text"},"ts":1574311829000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"... based on what I’ve been told, I think updating those needs to wait until the W3C Rec transition for HTML","msgtype":"m.text"},"ts":1574311830000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"That all makes sense","msgtype":"m.text"},"ts":1574311844000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah, the https://www.w3.org/TR/html52/ URL is just a symlink to https://www.w3.org/TR/2017/REC-html52-20171214/","msgtype":"m.text"},"ts":1574311861000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hmm https://www.w3.org/TR/html53/ should be updatable now though I think?","msgtype":"m.text"},"ts":1574311923000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"And dom41","msgtype":"m.text"},"ts":1574311938000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"since they are not recs","msgtype":"m.text"},"ts":1574311963000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess there are still a number of specs in https://www.w3.org/2019/04/WHATWG-W3C-MOU.html that need updating","msgtype":"m.text"},"ts":1574311988000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"@Jessidhia: today hasn't been a good day for staying consistently in front of a computer - so sorry for the late response to your comment from earlier. You're right from the HTTP perspective. The content type itself though has expected behavior - althought I'm certainly not sure how to think about the interactionss between RFC1341 and the HTTP spec.","msgtype":"m.text"},"ts":1574312674000,"senderName":"JonasNZ","senderId":"JonasNZ@irc"},
{"content":{"body":"Looking at this: https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html - \"The body must then contain one or more 'body parts'\"","msgtype":"m.text"},"ts":1574312724000,"senderName":"JonasNZ","senderId":"JonasNZ@irc"},
{"content":{"body":"Gluing that together (admittedly whilst to defend my theory) it would seem that a GET request has no body, and thus cannot contain any parts, and thus can't form a valid multi-part message.","msgtype":"m.text"},"ts":1574312806000,"senderName":"JonasNZ","senderId":"JonasNZ@irc"},
{"content":{"body":"At the same time HTTP/1.1 rfc says \"HTTP is not a MIME-compliant protocol\"","msgtype":"m.text"},"ts":1574312937000,"senderName":"JonasNZ","senderId":"JonasNZ@irc"},
{"content":{"body":"JonasNZ: a GET can contain whatever, but there’s an open issue on maybe dropping Content-* headers, look through issues with the topic: redirects label","msgtype":"m.text"},"ts":1574313362000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Thanks @annevk, very interesting reading. It seems like the conversation is converging on the behavior that Chrome seems to already exhibit. Either way, this gives me some things to subscribe to and enough understanding so I can work around the request parsing problems that led me here in the first place.","msgtype":"m.text"},"ts":1574314021000,"senderName":"JonasNZ","senderId":"JonasNZ@irc"},
{"content":{"body":"Mek, Jessidhia, domfarolino, annevk - thank you all for the help, appreciate that you took the time to answer my questions.","msgtype":"m.text"},"ts":1574314342000,"senderName":"JonasNZ","senderId":"JonasNZ@irc"},
{"content":{"body":"annevk: just a heads up there is some discussion way above^ we had about lazy load + IO spec things in case you had any opinions","msgtype":"m.text"},"ts":1574314586000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: if HTML defines the primitive depending on that seems fine.","msgtype":"m.text"},"ts":1574315907000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"👍","msgtype":"m.text"},"ts":1574316036000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"kinda like... you're stating the content-type T of the Maybe T, but instead of sending Just T you're sending Nothing instead 🤔","msgtype":"m.text"},"ts":1574322230000,"senderName":"Jessidhia","senderId":"Jessidhia@irc"},
{"content":{"body":"Jessidhia: heh, I think the real problem here is that it's hard to come up with generic rules for redirects","msgtype":"m.text"},"ts":1574331704000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Jessidhia: we could maybe strip some Content-* stuff if it becomes a GET request, but that wouldn't account for any custom metadata necessarily","msgtype":"m.text"},"ts":1574331734000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: do you have time for some basic CORP questions? I could probably decipher the spec but I have a feeling asking you would be faster...","msgtype":"m.text"},"ts":1574356002000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"s/CORP/COOP/","msgtype":"m.text"},"ts":1574356026000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I can try","msgtype":"m.text"},"ts":1574356073000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So, first question: does COOP sever all opener relationships, or just all cross-origin ones?","msgtype":"m.text"},"ts":1574356102000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: depends","msgtype":"m.text"},"ts":1574356205000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: if COOP state matches same-origin works","msgtype":"m.text"},"ts":1574356225000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm OK, so even same-origin things have to opt-in to having the opener relationship?","msgtype":"m.text"},"ts":1574356249000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"There’s also an open design issue where I propose changing some details","msgtype":"m.text"},"ts":1574356260000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: yeah, otherwise it’d be too easy to escape","msgtype":"m.text"},"ts":1574356287000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Cool. Second question, how does COEP interact with COOP? I understand its interaction with CORP, but not COOP...","msgtype":"m.text"},"ts":1574356319000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If you have COOP+COEP both are required for a match","msgtype":"m.text"},"ts":1574356353000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So even higher stakes","msgtype":"m.text"},"ts":1574356368000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Only when COOP is same-origin does it affect COOP","msgtype":"m.text"},"ts":1574356407000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think I see","msgtype":"m.text"},"ts":1574356423000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"In the model COEP can change the COOP state to include it","msgtype":"m.text"},"ts":1574356464000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Next question, if a cross-origin popup wants to be treated as same-origin, similar to a cross-origin iframe that uses CORP, what does it do?","msgtype":"m.text"},"ts":1574356471000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It cannot currently","msgtype":"m.text"},"ts":1574356527000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess more generally, COEP + CORP seem really simple for governing iframe interactions, so why can't we use that exact same model for popups?","msgtype":"m.text"},"ts":1574356527000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Interesting","msgtype":"m.text"},"ts":1574356541000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Big difference is COOP","msgtype":"m.text"},"ts":1574356807000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Would require a new kind of match","msgtype":"m.text"},"ts":1574356836000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Prolly possible","msgtype":"m.text"},"ts":1574356857000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But like, why not just say, opener must put COEP: same-origin, and popup must either be same-origin or put CORP: cross-origin, and then that's good? What does COOP do for us?","msgtype":"m.text"},"ts":1574356933000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"COOP ensures takes care of popups the popup opens","msgtype":"m.text"},"ts":1574357161000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And you cannot just give it COOP without some opt-in","msgtype":"m.text"},"ts":1574357245000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"FWIW, I do think you’re onto something that we should look into and possibly add","msgtype":"m.text"},"ts":1574357369000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: thanks for finding the remaining instances of problematic child BCs, looking forward to writing a patch for them","msgtype":"m.text"},"ts":1574360118000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It seems the old MIME parser API PR from Node is now unblocked, I'll be rebasing it but we have an existing spec for the API using WebIDL at https://bmeck.github.io/node-proposal-mime-api/ . I'd be happy to figure out where we could get some cross review on it.","msgtype":"m.text"},"ts":1574368013000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: just glancing, it looks pretty nice, I'd just say s/mimeParams/params (or maybe parameters).","msgtype":"m.text"},"ts":1574368288000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Also I think you probably want to use maplike<> so that you can get keys/values/entries automatically.","msgtype":"m.text"},"ts":1574368318000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"id be fine with either, and i can look at maplike","msgtype":"m.text"},"ts":1574368331000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"The maplike change is mostly editorial, just makes the spec a little simpler. I think it does add keys/values/entries, but maybe iterable<> also adds those so I'm not sure.","msgtype":"m.text"},"ts":1574368376000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think we're currently lacking strong use cases saying they would want this on the web, but e.g. if GoDaddy would use it on frontend, that could be compelling.","msgtype":"m.text"},"ts":1574368437000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"As in, I think most people would like to add this, but nobody's employers can justify the time to implement it in their browsers.","msgtype":"m.text"},"ts":1574368456000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"currently we are not looking at front end usage, but we would like it to at least appear to be ok if front end usage comes up after node","msgtype":"m.text"},"ts":1574368599000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"makes sense","msgtype":"m.text"},"ts":1574368631000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess the spec doesn't have all the appropriate invariant-maintenance checks","msgtype":"m.text"},"ts":1574368654000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But you're aware of how to implement those since I know you've seen https://github.com/jsdom/whatwg-mimetype","msgtype":"m.text"},"ts":1574368670000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'm not sure I understand that bit since it is delegating to the existing parser for those checks","msgtype":"m.text"},"ts":1574368825000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"are there more checks that whatwg-mimetype is doing?","msgtype":"m.text"},"ts":1574368835000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"On all the mutation methods","msgtype":"m.text"},"ts":1574368854000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://bmeck.github.io/node-proposal-mime-api/#set-the-type throws type error on bad chars, perhaps this is an organization issue with my spec","msgtype":"m.text"},"ts":1574368895000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"Oh yeah I found that now","msgtype":"m.text"},"ts":1574368900000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"set a parameter\" is not referenced anywhere, is I think the only problem","msgtype":"m.text"},"ts":1574368912000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"is there a better way to organize this? i modeled it after URL searchParams","msgtype":"m.text"},"ts":1574368915000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"Same with \"set the subtype\"","msgtype":"m.text"},"ts":1574368921000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i'll double check those, good catch","msgtype":"m.text"},"ts":1574368931000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"So yeah just cross-linking issues mostly","msgtype":"m.text"},"ts":1574368952000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"any pref of params vs parameters in existing recommendations for wording?","msgtype":"m.text"},"ts":1574368991000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"It's really hard to say; maybe others have opinions, but to me parameters is just enough on the long side that I'm unsure how to weigh that versus my natural preference against abbreviations.","msgtype":"m.text"},"ts":1574369038000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Also whatwg-mimetype will lowercase its arguments for the parameter-getting methods (has/get). I think that decision is debatable.","msgtype":"m.text"},"ts":1574369050000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Similarly I'm unsure whether the whitespace-stripping in your spec is a good idea.","msgtype":"m.text"},"ts":1574369105000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"seems fine to remove, double checking browsers it seems they all lowercase the params when parsing anyway so perhaps it should always do that","msgtype":"m.text"},"ts":1574369230000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"though idk, less magic might be better as other parts of things don't seem to change cases automatically","msgtype":"m.text"},"ts":1574369278000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"will think","msgtype":"m.text"},"ts":1574369281000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I think you want to maintain the invariant that it's always lowercase","msgtype":"m.text"},"ts":1574369326000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(for param names)","msgtype":"m.text"},"ts":1574369335000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"seems fine","msgtype":"m.text"},"ts":1574369740000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"Domenic: is there an example of how to do validation on a maplike ? I see MIDI has a maplike but not seeing an example in the IDL doc or MIDI of validating key/value","msgtype":"m.text"},"ts":1574370451000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: wow, yeah, that doesn't seem to be a thing, so I guess maplike just isn't usable for this. Sorry for misleading.","msgtype":"m.text"},"ts":1574373184000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"mostly updated but noticed the mime spec doesn't export some of its dfns","msgtype":"m.text"},"ts":1574373338000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"You can bypass that with <a spec=\"mimesniff\">...</a>","msgtype":"m.text"},"ts":1574373463000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Seems better not to export since this would eventually live in the MIME spec anyway.","msgtype":"m.text"},"ts":1574373480000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"sounds fine to me","msgtype":"m.text"},"ts":1574373761000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"}
]