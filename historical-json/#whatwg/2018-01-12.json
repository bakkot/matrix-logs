[
{"content":{"body":"hayato_: got to say \"Sequential Focus Navigation\" in Shadow DOM is really  hard to understand when the algorithms for example take some single item as input but then algorithm says one should do something 'for each'","msgtype":"m.text"},"ts":1515719422000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Domenic: what does \"In shadow-including tree order, is shadow-including preorder, depth-first traversal of a node tree.\" mean? I don't understand that \"In\"","msgtype":"m.text"},"ts":1515720053000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"TabAtkins: (latereply sorry) Ah from reading the spec that's what I figured it would do, and what you said abot \"two-step\" conjugations makes sense. Thanks. My confusion was from https://github.com/whatwg/fetch/pull/620#discussion_r159297985 where I wasn't sure if the `lt=` was necessary but as Domenic mentioned, it wasn't","msgtype":"m.text"},"ts":1515720055000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"TabAtkins: Oh, good to know [=|=] is part of Bikeshed syntax!","msgtype":"m.text"},"ts":1515720119000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"https://tabatkins.github.io/bikeshed/#autolinking","msgtype":"m.text"},"ts":1515720140000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1515720156000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Domenic: nm","msgtype":"m.text"},"ts":1515720385000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I see it is meant to be referred outside that text","msgtype":"m.text"},"ts":1515720401000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"in foo...","msgtype":"m.text"},"ts":1515720404000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"WPT description is: \"Test suites for Web-platform specs â€” including WHATWG, W3C, and others\", curious as to what the others are?","msgtype":"m.text"},"ts":1515721465000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"IETF","msgtype":"m.text"},"ts":1515723136000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"A bit of Ecma given the overlap with modules/SharedArrayBuffer","msgtype":"m.text"},"ts":1515723145000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think Khronos keeps all their stuff in a separate thing","msgtype":"m.text"},"ts":1515723196000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"APNG isn't specified anywhere I think","msgtype":"m.text"},"ts":1515723290000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Perhaps someone shou start an APNG Living Standard","msgtype":"m.text"},"ts":1515723390000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Or maybe even PNG Living Standard if the RFC is insufficient in other ways","msgtype":"m.text"},"ts":1515723407000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"APNG seems to be specified on the Mozilla wiki: https://wiki.mozilla.org/APNG_Specification","msgtype":"m.text"},"ts":1515723631000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Ah nice","msgtype":"m.text"},"ts":1515723729000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"indeed. thoughts on possible next steps the last time I looked at it: https://wiki.mozilla.org/APNG","msgtype":"m.text"},"ts":1515723787000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"^^^ feel free to liberally offer any manner of alternative suggestions","msgtype":"m.text"},"ts":1515723809000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Also, PNG was published as a W3C Recommendation and IETF RFC but it seems like the latest version might be only on the libpng website: www.libpng.org/pub/png/spec/1.2/","msgtype":"m.text"},"ts":1515723852000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"(I can't figure out what is different between the version sso not actually sure)","msgtype":"m.text"},"ts":1515723880000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Also I think the latest W3C version is newer than the IETF's PNG RFC","msgtype":"m.text"},"ts":1515724112000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"this would make IETF an awkward venue for APNG","msgtype":"m.text"},"ts":1515724144000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"the politics are too confusing for me to have a productive suggestion other than \"burn it all down and make it a WHATWG Living Standard\"","msgtype":"m.text"},"ts":1515724164000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Well you're in the right channel","msgtype":"m.text"},"ts":1515724245000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"othermaciej: it's a format, not a protocol, and thus whatwg or w3c are a better default for future versions / updates than ietf","msgtype":"m.text"},"ts":1515724613000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"that's the historical split","msgtype":"m.text"},"ts":1515724622000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"perhaps try to contact the editor's of APNG on the Mozilla Wiki and see if they care one way or the other or want to participate in an update?","msgtype":"m.text"},"ts":1515724679000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"editors*","msgtype":"m.text"},"ts":1515724685000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"whatwg living standard seems fine to me","msgtype":"m.text"},"ts":1515724706000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"just doesn't mean you have to burn anything per se","msgtype":"m.text"},"ts":1515724742000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Domenic: whenever you get a chance could you tell me what Edge prints (if any) for `console.log(\"%i\", Symbol.for(\"...\"))`","msgtype":"m.text"},"ts":1515725884000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"every impl I've tested does not throw, when I believe they should","msgtype":"m.text"},"ts":1515726018000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"\"Could not complete the operation due to error 80020101.\"","msgtype":"m.text"},"ts":1515726221000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It appears to throw an Error (not a TypeError)","msgtype":"m.text"},"ts":1515726246000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Per your latest change they should print \"Symbol(...)\" right?","msgtype":"m.text"},"ts":1515726295000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Or I guess parseInt(\"Symbol(...)\") so NaN?","msgtype":"m.text"},"ts":1515726309000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hm, well the first step of the %parseInt% abstract op calls ToString, so I expect throw, since ToString throws on Symbols?","msgtype":"m.text"},"ts":1515726321000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Oh right","msgtype":"m.text"},"ts":1515726332000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Good call","msgtype":"m.text"},"ts":1515726334000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah weird I wonder what they are even doing","msgtype":"m.text"},"ts":1515726343000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Type-testing symbols I guess for all code paths?","msgtype":"m.text"},"ts":1515726355000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Well the results are all divergent enough that I think asking them to throw is reasonable","msgtype":"m.text"},"ts":1515726429000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Hmm must be I guess, idk interesting. Yeah I think nobody actually follows, and I think spec is reasonable so I'll start filing away","msgtype":"m.text"},"ts":1515726604000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"With WPTs? :)","msgtype":"m.text"},"ts":1515726685000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"hi does anyone know which section of whatwg spec/docs define \"default actions\" on HTML elements? e.g. say you have <a onclick=\"foo();\" ... how the browser  should handle that?","msgtype":"m.text"},"ts":1515726686000,"senderName":"michael2","senderId":"michael2@irc"},
{"content":{"body":"Yeah I think I'm going to make the WPT that accompanies the latest Console PR inclusive to testing all format specifiers on Symbols","msgtype":"m.text"},"ts":1515726776000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Ugh in Chrome (at least stable) `console.count(Symbol.for(\"...\"))` doesn't throw, and still \"counts\". Domenic are the bindings just shot or something?","msgtype":"m.text"},"ts":1515727127000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"+Safari","msgtype":"m.text"},"ts":1515727214000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Yeah my understanding is that Chrome and Safari both implement console in JS so don't benefit from auto-generated WebIDL bindings","msgtype":"m.text"},"ts":1515727725000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"michael2: HTML has all those. Can try to track down specific ones if you can't find them.","msgtype":"m.text"},"ts":1515727766000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ahh","msgtype":"m.text"},"ts":1515729095000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"fun","msgtype":"m.text"},"ts":1515729099000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"I imagine that's miuch slower too","msgtype":"m.text"},"ts":1515729164000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"*much","msgtype":"m.text"},"ts":1515729166000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Well...maybe?","msgtype":"m.text"},"ts":1515729186000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Nah if anything a bit faster","msgtype":"m.text"},"ts":1515729225000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"No JS -> C++ transition","msgtype":"m.text"},"ts":1515729231000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh true","msgtype":"m.text"},"ts":1515729624000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Domenic: hi, just saw your response from earlier. I've looked in HTML but I guess the question is which part? also, I've read this part of the docs before, and from memory its a dedicated (and relavtively small) document","msgtype":"m.text"},"ts":1515733856000,"senderName":"michael2","senderId":"michael2@irc"},
{"content":{"body":"michael2: html.spec.whatwg.org/ is not very small :). Let's see, let's start with the a element chapter...","msgtype":"m.text"},"ts":1515733882000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"The activation behavior of a elements that create hyperlinks is to run the following steps:\"","msgtype":"m.text"},"ts":1515733904000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"hah :) i mean _this_ part is pretty small","msgtype":"m.text"},"ts":1515733911000,"senderName":"michael2","senderId":"michael2@irc"},
{"content":{"body":"because the number of HTML elements which have this \"default action\" is few. only <a> and <form>","msgtype":"m.text"},"ts":1515733953000,"senderName":"michael2","senderId":"michael2@irc"},
{"content":{"body":"Basically Ctrl+F \"activation behavior\" to find out what happens when you activate (click, keyboard enter, etc.) various elements","msgtype":"m.text"},"ts":1515734014000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think thats something different","msgtype":"m.text"},"ts":1515734053000,"senderName":"michael2","senderId":"michael2@irc"},
{"content":{"body":"I can guarantee you it's not :)","msgtype":"m.text"},"ts":1515734114000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That's how we define these things","msgtype":"m.text"},"ts":1515734130000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Part of the issue is that some people (perhaps including yourself) have some notion that events \"cause\" actions and that there are \"default actions\" that are caused. But that's very wrong.","msgtype":"m.text"},"ts":1515734192000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Things happen, like an actual user clicking something, then we fire a click event to notify you, and then---if the click event wasn't canceled---the activation behavior happens.","msgtype":"m.text"},"ts":1515734225000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1515734257000,"senderName":"michael2","senderId":"michael2@irc"},
{"content":{"body":"But the event part of that is basically just an \"FYI\", not essential to the process","msgtype":"m.text"},"ts":1515734260000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so thats events in general right? well I guess events that are directed at an HTmL element","msgtype":"m.text"},"ts":1515734300000,"senderName":"michael2","senderId":"michael2@irc"},
{"content":{"body":"at least","msgtype":"m.text"},"ts":1515734308000,"senderName":"michael2","senderId":"michael2@irc"},
{"content":{"body":"Events in general really https://dom.spec.whatwg.org/#action-versus-occurance","msgtype":"m.text"},"ts":1515734333000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"what Im trying to find is the part of the spec (which whatwg inherited from pre-existing DOM-something? spec)  relating to those behaviours the browser should follow when a dev say  does <a onclick=\"return foo(element);\" and how the browser should bind \"element\" to the \"this\" inside foo() and a return value of \"false\" should cancel default action (i.e. navigating away from current page)","msgtype":"m.text"},"ts":1515734549000,"senderName":"michael2","senderId":"michael2@irc"},
{"content":{"body":"like DOM api from 90's netscape days","msgtype":"m.text"},"ts":1515734703000,"senderName":"michael2","senderId":"michael2@irc"},
{"content":{"body":"Ah, the spec for inline event handlers","msgtype":"m.text"},"ts":1515734728000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It doesn't cancel the default action, since there is no such concept, but it does cancel the event.","msgtype":"m.text"},"ts":1515734785000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"To see how canceling the event interacts with activation behavior, see https://dom.spec.whatwg.org/#concept-event-dispatch","msgtype":"m.text"},"ts":1515734796000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"To see how inline event handlers returning false (usually) cancels the event, see https://html.spec.whatwg.org/#the-event-handler-processing-algorithm + https://html.spec.whatwg.org/#getting-the-current-value-of-the-event-handler","msgtype":"m.text"},"ts":1515734835000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"And with that, I'm heading to sleep. Hopefully following links from there should help.","msgtype":"m.text"},"ts":1515734902000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: thanks alot","msgtype":"m.text"},"ts":1515735060000,"senderName":"michael2","senderId":"michael2@irc"},
{"content":{"body":"that gives me alot to go from","msgtype":"m.text"},"ts":1515735079000,"senderName":"michael2","senderId":"michael2@irc"},
{"content":{"body":"Action vs occurance link is nice and informative","msgtype":"m.text"},"ts":1515736577000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Domenic: Is there a reason the URL is spelled occurance when the header is \"occurrence\"?","msgtype":"m.text"},"ts":1515736639000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: I suspect I made a typo and didn't want to break links","msgtype":"m.text"},"ts":1515736666000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: git blame would tell","msgtype":"m.text"},"ts":1515736684000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ok that makes sense","msgtype":"m.text"},"ts":1515736691000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Have function.arguments/caller been spec'd?","msgtype":"m.text"},"ts":1515739043000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: Is this at all what you're looking for https://tc39.github.io/ecma262/#sec-arguments-exotic-objects","msgtype":"m.text"},"ts":1515739524000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: nah that's arguments.caller, function.caller is something different","msgtype":"m.text"},"ts":1515743982000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller","msgtype":"m.text"},"ts":1515744001000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"annevk, where is it defined that a Uint8ClampedArray has a [[Detached]] slot?","msgtype":"m.text"},"ts":1515762396000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: hmm, only the underlying buffer does?","msgtype":"m.text"},"ts":1515763640000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ok","msgtype":"m.text"},"ts":1515763738000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: I think this used to be the case at some point, now you just check whether [[ArrayBufferData]] is null.","msgtype":"m.text"},"ts":1515763766000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Ms2ger: hmm, no, the underlying buffer can be detached","msgtype":"m.text"},"ts":1515763770000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Right, what tobie said","msgtype":"m.text"},"ts":1515763785000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Though there's an actual abstract operation we use for it","msgtype":"m.text"},"ts":1515763798000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"see https://tc39.github.io/ecma262/#sec-isdetachedbuffer","msgtype":"m.text"},"ts":1515763801000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"https://github.com/whatwg/html/issues/3343","msgtype":"m.text"},"ts":1515763806000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"and https://tc39.github.io/ecma262/#sec-detacharraybuffer","msgtype":"m.text"},"ts":1515763819000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Ms2ger: lots of nice finds","msgtype":"m.text"},"ts":1515763855000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And I haven't even started filing impl bugs","msgtype":"m.text"},"ts":1515763877000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"TabAtkins: if you can give https://github.com/tabatkins/bikeshed/issues/1166 a look when you get to work, that would be great. Affects builds at least for WebIDL, maybe other specs?","msgtype":"m.text"},"ts":1515764332000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Hmm, I looked at the state of MIME type sniffing a bit and now I wish I never did","msgtype":"m.text"},"ts":1515767852000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess I'll fix a few more Ms2ger <canvas> issues","msgtype":"m.text"},"ts":1515767873000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm Ms2ger, and I support this message","msgtype":"m.text"},"ts":1515767899000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"To the best of my knowledge I'm not Ms2ger, but I support this message too.","msgtype":"m.text"},"ts":1515768638000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I, also, believe myself not to be Ms2ger, and also support this message.","msgtype":"m.text"},"ts":1515768657000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"MIME type sniffing is important too, but the code in Firefox is rather ancient","msgtype":"m.text"},"ts":1515768741000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I mean nox seems unusally likely to be Ms2ger. They are both grumpy about Rust syntax additions, for example","msgtype":"m.text"},"ts":1515768862000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"hides his baguettes","msgtype":"m.emote"},"ts":1515768886000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"jgraham: But what if instrumentality happened already and we actually are a single consciousness?","msgtype":"m.text"},"ts":1515768925000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: All of us? In that case stop arguing with yourself about bread.","msgtype":"m.text"},"ts":1515768964000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Ah ah ah ah ah.","msgtype":"m.text"},"ts":1515768977000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I thought endorsements had to be followed by who paid for it.","msgtype":"m.text"},"ts":1515769055000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"Question is who bribed gsnedders.","msgtype":"m.text"},"ts":1515769058000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"bbiab, going to bank","msgtype":"m.text"},"ts":1515769190000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"hurries with his wire transfer","msgtype":"m.emote"},"ts":1515769213000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Not even using bitcoins?","msgtype":"m.text"},"ts":1515770970000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Who the hell manages https://drafts.css-houdini.org/?","msgtype":"m.text"},"ts":1515775728000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"https://irccloud.mozilla.com/file/3kD35V7Y/Capture%20d%E2%80%99e%CC%81cran%202018-01-12%20a%CC%80%2017.48.34.png","msgtype":"m.text"},"ts":1515775739000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I'm not living in the US, so please explain how my ISP can block this websiteâ€¦","msgtype":"m.text"},"ts":1515775747000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"https://github.com/fightforthefuture/battleforthenet-widget/issues/145 smh","msgtype":"m.text"},"ts":1515775864000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"https://github.com/whatwg/html/graphs/contributors is up to a 100","msgtype":"m.text"},"ts":1515778576000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Has that been the case for long?","msgtype":"m.text"},"ts":1515778579000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Two years ago we had 37: https://blog.whatwg.org/html-standard-now-more-community-driven","msgtype":"m.text"},"ts":1515778612000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: thanks, you rock!","msgtype":"m.text"},"ts":1515778623000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Maybe we should blog again on January 25","msgtype":"m.text"},"ts":1515778625000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: Well, my testing situation should have caught this, so I don't rock *that* much. Fixing that now as well.","msgtype":"m.text"},"ts":1515778652000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"tobie: for named properties object, unfortunately I think you can't use ObjectCreate","msgtype":"m.text"},"ts":1515778729000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"The abstract operation ObjectCreate with argument proto (an object or null) is used to specify the runtime creation of new **ordinary objects**.","msgtype":"m.text"},"ts":1515778738000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: yeah, I imagined this was sort of sketchy.","msgtype":"m.text"},"ts":1515778836000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"See https://tc39.github.io/ecma262/#sec-proxycreate for a more appropriate example","msgtype":"m.text"},"ts":1515778848000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: is there anything else I can use instead?","msgtype":"m.text"},"ts":1515778854000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Cool. Thanks. Iâ€™ll give it a look later.","msgtype":"m.text"},"ts":1515778868000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Oh, it's 138 contributors, so we increased by a 100 in two years","msgtype":"m.text"},"ts":1515778897000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yay! happy to be one of them","msgtype":"m.text"},"ts":1515778915000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"Go go contributors \\o/","msgtype":"m.text"},"ts":1515778921000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Woo same!","msgtype":"m.text"},"ts":1515780320000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"TimothyGu: lmk if that makes more sense","msgtype":"m.text"},"ts":1515782782000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: LGTM","msgtype":"m.text"},"ts":1515783315000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"Domenic: Regarding https://bugs.webkit.org/show_bug.cgi?id=181576#c2 do you think the spec should change to not force implementations to throw when %parseInt% would normally?","msgtype":"m.text"},"ts":1515785056000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Personally I like the spec how it is, but since nobody is throwing, and as Joseph pointed out, it could be a backwards-incompatible change I'm not sure what to do","msgtype":"m.text"},"ts":1515785079000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: Edge is throwing","msgtype":"m.text"},"ts":1515785717000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Nice!","msgtype":"m.text"},"ts":1515785724000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Forgot about that","msgtype":"m.text"},"ts":1515785732000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"In general I think there's a larger question about \"should console methods ever throw or not\". But I thought we resolved that at some point in favor of allowing throwing, in some other thread.","msgtype":"m.text"},"ts":1515785809000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I feel like allowing console methods to not throw when the devtools are not open is a little messy, which is _close_ to what WebKit is doing since they don't apply format specifiers if the devtools are not open","msgtype":"m.text"},"ts":1515785818000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Yeah observable differences between devtools open and not is bad","msgtype":"m.text"},"ts":1515785844000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh, I can check out some old issues to try and see if that decision has been made. In short I think they should be able to throw","msgtype":"m.text"},"ts":1515785863000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Domenic: Yeah in general it seems like the consensus all along has been to allow throwing. https://github.com/whatwg/console/issues/54#issuecomment-216631477 in particular mentions not swallowing errors on Console APIs, which I agree with","msgtype":"m.text"},"ts":1515787657000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"TimothyGu: ty","msgtype":"m.text"},"ts":1515789436000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TimothyGu: thoughts on https://github.com/heycam/webidl/pull/494#discussion_r161321239 appreciated","msgtype":"m.text"},"ts":1515789972000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: there can be several nested element with display:contents right, and only the elements which then eventually have some other display values will be shown","msgtype":"m.text"},"ts":1515790589000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Yes","msgtype":"m.text"},"ts":1515790610000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ok, thanks","msgtype":"m.text"},"ts":1515790630000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"tobie: commented","msgtype":"m.text"},"ts":1515790849000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: ty","msgtype":"m.text"},"ts":1515790858000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TimothyGu: ping on https://github.com/whatwg/html/pull/3314","msgtype":"m.text"},"ts":1515791311000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: quirks also still has CC0","msgtype":"m.text"},"ts":1515791517000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: FYI getting source bytes onto the script struct is not straightforward :( I uncovered a giant mess: https://github.com/whatwg/fetch/issues/661","msgtype":"m.text"},"ts":1515791518000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: and streams/ has a bunch of matches when I grep for CC0, possibly just ref impl / tests","msgtype":"m.text"},"ts":1515791537000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: also meta/ which seems fine and html/ which I suspect is for one of those images","msgtype":"m.text"},"ts":1515791593000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: will you fix?","msgtype":"m.text"},"ts":1515791632000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: prolly Monday at the earliest, gonna get some sleep","msgtype":"m.text"},"ts":1515791681000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: also not entirely sure what to do about any of those except quirks","msgtype":"m.text"},"ts":1515791695000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah quirks is the bad one","msgtype":"m.text"},"ts":1515791717000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: ah forgot about that. will fix soon","msgtype":"m.text"},"ts":1515792211000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TabAtkins: is https://github.com/tabatkins/bikeshed/issues/1167 something that's easily fixable on your side or should I just use a workaround?","msgtype":"m.text"},"ts":1515795006000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Easily fixable.","msgtype":"m.text"},"ts":1515795020000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: cool","msgtype":"m.text"},"ts":1515795026000,"senderName":"tobie","senderId":"tobie@irc"}
]