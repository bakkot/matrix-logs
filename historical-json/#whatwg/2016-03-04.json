[
{"content":{"body":"Domenic: was also thinking of allowing Error to be cloned per JakeA's request since aklein doesn't think that is problematic","msgtype":"m.text"},"ts":1457061132000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: if you remove the slot it would be though, but I suppose that is unlikely now","msgtype":"m.text"},"ts":1457061171000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Seems reasonable. I should probably just close that PR.","msgtype":"m.text"},"ts":1457061396000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"rniwa: it’s really nice to see the implementation coming together and the wrinkles getting ironed out","msgtype":"m.text"},"ts":1457062065000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and the iteration back into spec discussion that falls out from the implementation work","msgtype":"m.text"},"ts":1457062131000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: indeed.","msgtype":"m.text"},"ts":1457062477000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Hmm cloning Error and friends is a little trickier than I thought","msgtype":"m.text"},"ts":1457070505000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I suspect browsers actually have more branding on them than just [[ErrorData]]","msgtype":"m.text"},"ts":1457070687000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: what setup does Servo have for https://github.com/whatwg/dom/issues/34?","msgtype":"m.text"},"ts":1457086639000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://html.spec.whatwg.org/#attr-translate - does this mean Text node children or Text node descendants?","msgtype":"m.text"},"ts":1457086907000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: children","msgtype":"m.text"},"ts":1457086983000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: it inherits","msgtype":"m.text"},"ts":1457087005000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1457087024000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I had meant to make time to look at the “allow <link> in body for external resource links” change before it landed, as far as the document-conformance part at least","msgtype":"m.text"},"ts":1457088957000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"need to figure out how to make more time for stuff going forward","msgtype":"m.text"},"ts":1457088979000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"anyway it seems like zcorpan looked at that part in detail and if so then I’m confident","msgtype":"m.text"},"ts":1457089019000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"now I need to update the checker","msgtype":"m.text"},"ts":1457089045000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"well","msgtype":"m.text"},"ts":1457089329000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"one thing I notice is that we ended up with no (informative) list in one place in the spec that says, The attributes that are body-ok are pingback, prefetch, and stylesheet.","msgtype":"m.text"},"ts":1457089481000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the lack of that seems suboptimal for author/developer readers","msgtype":"m.text"},"ts":1457089501000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"because we are forcing them to look at the spec text of every single rel value themselves to figure out which ones are body-ok","msgtype":"m.text"},"ts":1457089546000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it at least could be flagged in the table just after https://html.spec.whatwg.org/multipage/semantics.html#body-ok","msgtype":"m.text"},"ts":1457089605000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan:","msgtype":"m.text"},"ts":1457089633000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: ⬆","msgtype":"m.text"},"ts":1457089642000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"if you agree, I’ll raise a follow-up PR that adds it","msgtype":"m.text"},"ts":1457089674000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: good idea","msgtype":"m.text"},"ts":1457089690000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"new column i guess","msgtype":"m.text"},"ts":1457089703000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hai","msgtype":"m.text"},"ts":1457089704000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1457089706000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hmm that change also","msgtype":"m.text"},"ts":1457090734000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"* that change also muddied up the relationship of the 「Thus, rel=\"next\" is the same as rel=\"NEXT\".」example to the spec text that previously had immediately preceded it","msgtype":"m.text"},"ts":1457090804000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"will correct that too","msgtype":"m.text"},"ts":1457090819000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: oops. i should be checking the output more carefully","msgtype":"m.text"},"ts":1457091978000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"no biggy","msgtype":"m.text"},"ts":1457092099000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I’m not too keen on the vagueness of “Certain keywords are said to be”, so will futz that part too","msgtype":"m.text"},"ts":1457092256000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"which is going to end up maybe with a bit belt-and-suspenders redudancy but I think it will still be better for readers","msgtype":"m.text"},"ts":1457092323000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"more clear","msgtype":"m.text"},"ts":1457092326000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: note that other specs can define keywords too, and say that those are body-ok (e.g. preload)","msgtype":"m.text"},"ts":1457092958000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: well, so we should say that too then","msgtype":"m.text"},"ts":1457093033000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"instead of leaving it unstated","msgtype":"m.text"},"ts":1457093043000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"because the current spec text says nothing about that as far as I can see","msgtype":"m.text"},"ts":1457093064000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"re-reads to see if he missed something","msgtype":"m.emote"},"ts":1457093079000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"4.6.6.17 Other link types needs to mention body-ok","msgtype":"m.text"},"ts":1457093170000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"looks there","msgtype":"m.emote"},"ts":1457093233000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hmm yeah","msgtype":"m.text"},"ts":1457093291000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"this is becoming a bit of a thread-pulling thing","msgtype":"m.text"},"ts":1457093318000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"because that means the microformats wiki also needs to be updated","msgtype":"m.text"},"ts":1457093356000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: right? I mean a column needs to be added to the tables there","msgtype":"m.text"},"ts":1457093517000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: it depends. could say that it's the responsibility of the Specification to talk about body-ok if it wants it allowed in the body, it doesn't need to be in the wiki","msgtype":"m.text"},"ts":1457093587000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1457093622000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"you’re right","msgtype":"m.text"},"ts":1457093638000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that’s better","msgtype":"m.text"},"ts":1457093658000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: I implemented an UnbindingContext.","msgtype":"m.text"},"ts":1457094184000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"For the removing steps that are called recursively.","msgtype":"m.text"},"ts":1457094198000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: You don't explain why you want to call them on ancestors though.","msgtype":"m.text"},"ts":1457094304000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I don't","msgtype":"m.text"},"ts":1457094986000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: but insertion steps isn't yet called on descendants","msgtype":"m.text"},"ts":1457094999000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ok, misunderstood what it was about.","msgtype":"m.text"},"ts":1457095001000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: Sounds like a bug indeed.","msgtype":"m.emote"},"ts":1457095007000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: Wait, you sure?","msgtype":"m.text"},"ts":1457095023000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: https://dom.spec.whatwg.org/#concept-node-insert-ext Step 6?","msgtype":"m.text"},"ts":1457095039000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: how does that include descendants?","msgtype":"m.text"},"ts":1457095061000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh right, never mind.","msgtype":"m.text"},"ts":1457095063000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Just woke up. :P","msgtype":"m.text"},"ts":1457095068000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Also, that the removing steps are passed oldPreviousSibling doesn't match any browser and that we pass oldParent is weird, because for most descendants it'll be an ancestor, not a parent","msgtype":"m.text"},"ts":1457095103000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess I'll just go with oldAncestor","msgtype":"m.text"},"ts":1457095115000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: We discussed that.","msgtype":"m.text"},"ts":1457095132000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"We discussed that last year, when I implemented that crap in Servo.","msgtype":"m.text"},"ts":1457095143000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I know we did, this issue is old","msgtype":"m.text"},"ts":1457095173000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I wanted two kind of hooks, and someone here convinced me that we could just distinguish parent from ancestor by checking whether the child's parent is oldParent.","msgtype":"m.text"},"ts":1457095182000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: Want me to link Servo's code?","msgtype":"m.text"},"ts":1457095196000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: sure, doesn't hurt","msgtype":"m.text"},"ts":1457095208000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: I believe Chrome has distinct calls for parent change and ancestor change, but I'm not sure we need that in the spec","msgtype":"m.text"},"ts":1457095240000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Mmmh, we don't, but it might make some prose a bit weirder.","msgtype":"m.text"},"ts":1457095262000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"\"If child's parent isn't oldParent, abort these steps\" or things like that.","msgtype":"m.text"},"ts":1457095290000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: Every time I look at our implementation of DOM, some step numbers changed. :(","msgtype":"m.text"},"ts":1457095315000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Yeah, maybe, but we could abstract things too with prose if it get unwieldy","msgtype":"m.text"},"ts":1457095338000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: what can I say, the web evolves","msgtype":"m.text"},"ts":1457095355000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":D","msgtype":"m.text"},"ts":1457095362000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: also, I think you might be responsible for most recent changes there","msgtype":"m.text"},"ts":1457095366000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oooh, maybe zcorpan is","msgtype":"m.text"},"ts":1457095380000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"did i break something?","msgtype":"m.text"},"ts":1457095417000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: We recursively call insertion and removing steps on all descendants,","msgtype":"m.text"},"ts":1457095441000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: and for removing, here is the data passed around: https://github.com/servo/servo/blob/master/components/script/dom/node.rs#L2471-L2482","msgtype":"m.text"},"ts":1457095453000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"zcorpan: you might have broken where comments in Servo point to","msgtype":"m.text"},"ts":1457095466000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: sorry for pinging","msgtype":"m.text"},"ts":1457095471000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: We cache the index of the removed node and whatnot because we piggy-back this loop to update DOM ranges.","msgtype":"m.text"},"ts":1457095476000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1457095479000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk, zcorpan: Oh well, that's an E-Easy issue for newcomers, maybe I should thank zcorpan. ;)","msgtype":"m.text"},"ts":1457095499000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: curious that you pass the oldPreviousSibling","msgtype":"m.text"},"ts":1457095510000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: browsers don't","msgtype":"m.text"},"ts":1457095517000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: We do use it for some reason, let me find where again.","msgtype":"m.text"},"ts":1457095525000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: The stec want it, no?","msgtype":"m.text"},"ts":1457095538000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"spec* wtf","msgtype":"m.text"},"ts":1457095541000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I don't want it if browsers don't have it","msgtype":"m.text"},"ts":1457095553000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Oh yeah,","msgtype":"m.text"},"ts":1457095559000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: UnbindContext::index needs it.","msgtype":"m.text"},"ts":1457095565000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: https://github.com/servo/servo/blob/master/components/script/dom/node.rs#L2503","msgtype":"m.text"},"ts":1457095588000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: I didn't want to compute the index if nothing needed it.","msgtype":"m.text"},"ts":1457095598000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: That there is the old previous sibling is not public in the API of UnbindContext btw,","msgtype":"m.text"},"ts":1457095746000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: so feel free to nuke it away, even Servo doesn't care.","msgtype":"m.text"},"ts":1457095754000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Good times","msgtype":"m.text"},"ts":1457095841000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The reason this comes up now by the way is that this will get more complicated with shadow DOM","msgtype":"m.text"},"ts":1457095858000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Because then we don't just include descendants, but also any shadow trees hosted by any descendants, etc.","msgtype":"m.text"},"ts":1457095881000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I see.","msgtype":"m.text"},"ts":1457096062000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: Just realised Document.all is still going on.","msgtype":"m.text"},"ts":1457096177000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"24/7 entertainment","msgtype":"m.text"},"ts":1457096197000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Especially given we are all over the world. :D","msgtype":"m.text"},"ts":1457096282000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"It really gets 24/7 comments.","msgtype":"m.text"},"ts":1457096287000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Sigh, bikeshed again changes random shit in the output","msgtype":"m.text"},"ts":1457096952000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's getting to the point where I just avoid editing bikeshed specs","msgtype":"m.text"},"ts":1457096972000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Would love bikeshed to switch to node, I think it'd be easier to contribute then. Never been able to get bikeshed running locally, kept rabbit-holeing on dependencies that wouldn't install","msgtype":"m.text"},"ts":1457097185000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"It's such a non-deterministic piece of crap ugh","msgtype":"m.text"},"ts":1457097588000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I was hoping to make some progress on DOM but it's no fun if the tools fall apart","msgtype":"m.text"},"ts":1457097609000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think I actually might be better off with Anolis","msgtype":"m.text"},"ts":1457097750000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bikeshed has been nothing but pain and all the promised features of auto-linking are in a constant state of broken","msgtype":"m.text"},"ts":1457097773000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I don't see what switching to Node brings.","msgtype":"m.text"},"ts":1457098411000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"JakeA: That still means dependencies to install.","msgtype":"m.text"},"ts":1457098422000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: What was used before bikeshed?","msgtype":"m.text"},"ts":1457098461000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Anolis","msgtype":"m.text"},"ts":1457098469000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: And why does it break stuff all the time?","msgtype":"m.text"},"ts":1457098477000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: in my experience it's way simpler. Node & npm install easily, then it's just npm install","msgtype":"m.text"},"ts":1457098479000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"nox: compare that to https://github.com/tabatkins/bikeshed/blob/master/docs/install.md","msgtype":"m.text"},"ts":1457098504000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"nox: I have no idea, presumably because Tab keeps landing changes without verifying that they don't change existing outputs","msgtype":"m.text"},"ts":1457098504000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: Didn't encounter any problem with building Bikeshed, and given what I hear about npm…","msgtype":"m.text"},"ts":1457098507000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I don't know what you hear","msgtype":"m.text"},"ts":1457098530000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"nox: you can review https://github.com/whatwg/dom/pull/184 though","msgtype":"m.text"},"ts":1457098550000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: Same experience as you with bikeshed-as-Python-tool, mostly.","msgtype":"m.text"},"ts":1457098584000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: Filed a ticket on bikeshed btw?","msgtype":"m.text"},"ts":1457098605000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"yeah, see PR","msgtype":"m.text"},"ts":1457098616000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Can we really say the descendant of an inserted node is an inserted node?","msgtype":"m.text"},"ts":1457098643000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: where are you hearing that from?","msgtype":"m.text"},"ts":1457098652000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1457098654000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: Frustrated people on the IRC.","msgtype":"m.text"},"ts":1457098666000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: Not renaming the newNode in the loop?","msgtype":"m.text"},"ts":1457098697000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"The complaints I hear about NPM are speed rather than complexities around having to install a load of global dependencies with sudo","msgtype":"m.text"},"ts":1457098706000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I can't remember the last time I had to do that with npm","msgtype":"m.text"},"ts":1457098718000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"nox: I guess we could rename that node","msgtype":"m.text"},"ts":1457098733000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: TabAtkins' instructions are crazy. Install python stuff into virtualenvs not globally","msgtype":"m.text"},"ts":1457098767000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But my experience is that everyone likes the package manager they are used to","msgtype":"m.text"},"ts":1457098800000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"JakeA: would happily switch to something node-based","msgtype":"m.text"},"ts":1457098817000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"To me \"we should rewrite X because it's not in javascript\" is terrible reasoning","msgtype":"m.text"},"ts":1457098859000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: ahh, maybe it is just an instructions thing. If memory serves I was getting tripped up on the macports stuff.","msgtype":"m.text"},"ts":1457098859000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Yeah, I wouldn't write the instructions like that","msgtype":"m.text"},"ts":1457098876000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: Same.","msgtype":"m.text"},"ts":1457098882000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"jgraham: the reasoning is more that it'd be maintained by JakeA and not TabAtkins","msgtype":"m.text"},"ts":1457098916000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"runs away","msgtype":"m.emote"},"ts":1457098929000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"ECMAScript has something node-based too","msgtype":"m.text"},"ts":1457098951000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But if the tool is for a web developer audience, writing it in web technologies seems better for a comunity","msgtype":"m.text"},"ts":1457098963000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"https://github.com/bterlson/ecmarkup","msgtype":"m.text"},"ts":1457098967000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"for the community*","msgtype":"m.text"},"ts":1457098984000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"If your answer was \"we should Go from N tools to N-1 tools\", that seems reasonable. If it's","msgtype":"m.text"},"ts":1457098986000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"\"we should go from N tools to N+1 tools\" that's less reasonable","msgtype":"m.text"},"ts":1457099000000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Rust :)","msgtype":"m.text"},"ts":1457099010000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Says the guy who doesn't want to see codegen in Rust. :P","msgtype":"m.text"},"ts":1457099021000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I was going to say, write it in Rust, ship a binary that doesn't require any installation, and encourage web developers to broaden their skillset to contribute :)","msgtype":"m.text"},"ts":1457099054000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"That being said,","msgtype":"m.text"},"ts":1457099078000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I guess Hixie would say the same but s/Rust/FreePascal/","msgtype":"m.text"},"ts":1457099084000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":";)","msgtype":"m.text"},"ts":1457099088000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"we do have a working HTML parser and that would be a good test.","msgtype":"m.text"},"ts":1457099089000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"(Test as in \"is that useful outside of Servo and its author's own projects\".)","msgtype":"m.text"},"ts":1457099111000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: It also requires some rather large amount of free time to get it working :)","msgtype":"m.text"},"ts":1457099253000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(a useful spec generator, I mean)","msgtype":"m.text"},"ts":1457099264000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"True. :)","msgtype":"m.text"},"ts":1457099264000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Maybe gsnedders wants to do it again","msgtype":"m.text"},"ts":1457099323000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I know I don't","msgtype":"m.text"},"ts":1457099383000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"ecmarkup is prolly the best bet","msgtype":"m.text"},"ts":1457099517000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"although I haven't really tested its speed","msgtype":"m.text"},"ts":1457099534000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If I had that free time, I would rather rewrite our WebIDL parser in Rust.","msgtype":"m.text"},"ts":1457099768000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I don't have that free time.","msgtype":"m.text"},"ts":1457099771000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Is there some relation between whatwg and ecma262?","msgtype":"m.text"},"ts":1457105020000,"senderName":"dbkaplun","senderId":"dbkaplun@irc"},
{"content":{"body":"Yes, Domenic :)","msgtype":"m.text"},"ts":1457105038000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Does WhatWG as a group have any influence over the JS spec or is it just Domenic?","msgtype":"m.text"},"ts":1457105101000,"senderName":"dbkaplun","senderId":"dbkaplun@irc"},
{"content":{"body":"Not more than the sum of the people that make it up","msgtype":"m.text"},"ts":1457105239000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: Woah, what in the actual fuck is going on with the <p> stuff.  I haven't touched that area in ages.","msgtype":"m.text"},"ts":1457105305000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hope you can excuse the vented frustration earlier","msgtype":"m.text"},"ts":1457105392000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(Please don't move back to anolis)","msgtype":"m.text"},"ts":1457105411000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Totally.  (Tho it's interesting that you're the only person I've heard such complaints from.)","msgtype":"m.text"},"ts":1457105456000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Maybe nobody else actually looks at what's being generated?","msgtype":"m.text"},"ts":1457105521000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That's mostly true, yeah.","msgtype":"m.text"},"ts":1457105538000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That's how the CSS WG operates, no?","msgtype":"m.text"},"ts":1457105542000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fantasai complains about the output, but then just fixes things manually","msgtype":"m.text"},"ts":1457105688000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"Oh my","msgtype":"m.text"},"ts":1457105724000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Occasionally-venting-to-people-who-know-you-are-just-frustrated FTW.","msgtype":"m.text"},"ts":1457105890000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Luckily, most of her complaints are with the data source - a bunch of specs haven't been published in a while, and so she can't get good linking into the TR versions.","msgtype":"m.text"},"ts":1457106154000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(I just went thru a bug of hers with about a dozen complaints - one I'd already fixed, one I filed a new bug for, and the rest were just specs with bad or old markup.)","msgtype":"m.text"},"ts":1457106189000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: Yo, I can't reproduce your <p> bug.  Those two paragraphs seem to gen just fine to me.","msgtype":"m.text"},"ts":1457106221000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: you don't get a gigantic diff?","msgtype":"m.text"},"ts":1457106266000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wonders what is going on then","msgtype":"m.emote"},"ts":1457106302000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"No, if I freshly gen the master branch, there's just a few points.  The biblio index part has a decent diff because I stopped generating useless self-links there.","msgtype":"m.text"},"ts":1457106318000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But otherwise it's just two constructors that the new widlparser code recognizes have optional args.","msgtype":"m.text"},"ts":1457106343000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: Oh, *now* I see a problem.  I had to apply one of the changes in your branch.","msgtype":"m.text"},"ts":1457106569000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"There must be something fucked up with comment handling.","msgtype":"m.text"},"ts":1457106582000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I see, I think there's other comments","msgtype":"m.text"},"ts":1457106605000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, I'm confused.  Let me fiddle with this.","msgtype":"m.text"},"ts":1457106614000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(This is almost certainly not a recent problem, fwiw - I haven't touched the relevant parts of the code in a while. This is something old you're the first to hit.)","msgtype":"m.text"},"ts":1457106649000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: oh wow, <script> element to script element does wonders","msgtype":"m.text"},"ts":1457106678000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ha","msgtype":"m.text"},"ts":1457106684000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"TabAtkins: what is going on there?","msgtype":"m.text"},"ts":1457106686000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'll do script element for now then","msgtype":"m.text"},"ts":1457106710000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah, yeah, that's the problem.  Just figured it out myself.","msgtype":"m.text"},"ts":1457106741000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That's... interesting.","msgtype":"m.text"},"ts":1457106748000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Are you parsing HTML with a regexp?","msgtype":"m.text"},"ts":1457106849000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh god no.","msgtype":"m.text"},"ts":1457106912000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I *am* parsing *Markdown* with a regex, which happens before the HTML parser has a chance to run.","msgtype":"m.text"},"ts":1457106927000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Now you have two problems?","msgtype":"m.text"},"ts":1457106962000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"And my check for \"am I entering a block that shouldn't have any processing done to it\" is naive and just checks for the existence of <script>/<pre>/<style> start tags on the line.","msgtype":"m.text"},"ts":1457106973000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So it misfires on that comment line, and then the rest of your document stops being markdown-processed because you don't have a stray </script> anywhere. ^_^","msgtype":"m.text"},"ts":1457107019000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So you don't get paragraphs anymore.","msgtype":"m.text"},"ts":1457107042000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I have no response","msgtype":"m.text"},"ts":1457107068000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hey, Markdown is crazy pants and there's no official parser.","msgtype":"m.text"},"ts":1457107082000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(And I couldn't use one anyway, because the interaction of indented code blocks and html nesting is crazypants and would fuck everything up. Indented code blocks are a misfeature.)","msgtype":"m.text"},"ts":1457107132000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So anyway, I'll file a bug on myself and figure out how to deal with comments.","msgtype":"m.text"},"ts":1457107159000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"For now, yeah, just don't put a literal \"<script>\" (or <pre> or <style> or <xmp>) inside of a comment.","msgtype":"m.text"},"ts":1457107190000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It does feel like the solution to \"format X can't be parsed\" might be \"don't use format X\"","msgtype":"m.text"},"ts":1457107202000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Tell that to everyone who loves Markdown (including me).","msgtype":"m.text"},"ts":1457107233000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ecmarkup handles Markdown inclusion better I think","msgtype":"m.text"},"ts":1457107330000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And has linking extensions on top that make it quite neat","msgtype":"m.text"},"ts":1457107347000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ooh, hadn't heard of the linking extensions.","msgtype":"m.text"},"ts":1457107391000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Stuff like \"1. Let _x_ be ? SomeAbstractOperation(_y_).\" links the operation","msgtype":"m.text"},"ts":1457107462000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's quite nice and makes ECMAScript one of the better formatted specifications out there","msgtype":"m.text"},"ts":1457107486000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Platform is kind of a jungle compared to that","msgtype":"m.text"},"ts":1457107496000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Markdown has a specification now, no?","msgtype":"m.text"},"ts":1457107546000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Not according to its inventor","msgtype":"m.text"},"ts":1457107573000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: Yeah, commonmark, but it still contains indented code blocks, which interact *terribly* with \"let's mix lots of raw HTML into it too\".","msgtype":"m.text"},"ts":1457107578000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Disregard inventor. :P","msgtype":"m.text"},"ts":1457107596000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Nobody cares what gruber thinks about it, since he refuses to \"spec\" anything further than \"whatever bullshit perl I vomited into this file, bugs and all\".","msgtype":"m.text"},"ts":1457107615000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I don't get his train of thought.","msgtype":"m.text"},"ts":1457107651000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Given that every application of it requires slightly different extensions, he doesn't seem so wrong really","msgtype":"m.text"},"ts":1457107660000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's highly contextual","msgtype":"m.text"},"ts":1457107689000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Talking about contextual things,","msgtype":"m.text"},"ts":1457107713000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"if someone is sad to have done too much bikeshed today,","msgtype":"m.text"},"ts":1457107721000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"here is a photo of my cats thinking they are Legos. https://usercontent.irccloud-cdn.com/file/xRr4n7J1/1457096736.JPG","msgtype":"m.text"},"ts":1457107734000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"It's important to have cats when doing spec editing.","msgtype":"m.text"},"ts":1457107778000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"So there's something to eat your body if it all becomes too much and you lose the will to live?","msgtype":"m.text"},"ts":1457107825000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: So that if all is Hell, at least you have cats to pet.","msgtype":"m.text"},"ts":1457107852000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Hm, I was thinking I could do a preprocessing step to remove comments first (and restore them afterwards), but that won't help if you do <div title=\"hahaha here's a <script> tag fukker\">.","msgtype":"m.text"},"ts":1457107864000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So maybe I'll just make the \"I'm starting a block\" check more restrictive, and require those tags to be the first non-WS content on their line. This has a chance of breaking things, tho.","msgtype":"m.text"},"ts":1457107915000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Okay, added a comment to the Breaking Changes Notification Thread, we'll see if anything shakes out.","msgtype":"m.text"},"ts":1457108448000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Thanks for finding the bug, annevk. ^_^","msgtype":"m.text"},"ts":1457108454000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I hope you checked that fix on a couple of specs","msgtype":"m.text"},"ts":1457108484000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I haven't made the fix yet.","msgtype":"m.text"},"ts":1457109748000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Wont' for a couple days at least.","msgtype":"m.text"},"ts":1457109761000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, is http://www.adambarth.com/papers/2009/barth-caballero-song.pdf in the references database bikeshed uses, and how can I get it made so?","msgtype":"m.text"},"ts":1457110356000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"specref.org is the place you want to check","msgtype":"m.text"},"ts":1457110375000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And it looks like no.","msgtype":"m.text"},"ts":1457110406000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Can I add it in a spec-local way?","msgtype":"m.text"},"ts":1457110420000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"TabAtkins, ^","msgtype":"m.text"},"ts":1457110485000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Yeah, with a <pre class=biblio> block. https://github.com/tabatkins/bikeshed/blob/master/docs/definitions-autolinks.md#bibliography, look at the first code-block in that section for an example.","msgtype":"m.text"},"ts":1457110516000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And I can get it into SpecRef no problem, I have commit rights now.","msgtype":"m.text"},"ts":1457110528000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oh gosh I need to update some of the text in that documentation section.","msgtype":"m.text"},"ts":1457110598000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"https://github.com/whatwg/mimesniff/pull/6","msgtype":"m.text"},"ts":1457110757000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"poofs","msgtype":"m.emote"},"ts":1457110759000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"That... is a remarkably small diff for a Bikeshed move.","msgtype":"m.text"},"ts":1457111073000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It's not done it seems","msgtype":"m.text"},"ts":1457111641000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hopes Ms2ger coordinates with padenot","msgtype":"m.emote"},"ts":1457111651000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I have no interest in writing a spec generator, really. Maybe a touch of interest in trying to see if I can get it elegantly done with loop fusion. Maybe once the next PyPy and lxml releases come out see how much work is involved in getting bikeshed running there","msgtype":"m.text"},"ts":1457120241000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Iirc, I'm only stuck on Python 2 to make plinss's life easier, because Shepherd has some py2-only dependencies (involving Mercurial, I think).","msgtype":"m.text"},"ts":1457120332000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: pypy is pretty much py2-only","msgtype":"m.text"},"ts":1457120364000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"but so much quicker","msgtype":"m.text"},"ts":1457120368000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Oh, cool.","msgtype":"m.text"},"ts":1457120375000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'd love quicker! Free perf gains are always nice.","msgtype":"m.text"},"ts":1457120386000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"There *is* PyPy3k, but it's several releases behind CPython","msgtype":"m.text"},"ts":1457120392000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Also it's slower than PyPy, because all the work on it has been about getting it complete rather than fast","msgtype":"m.text"},"ts":1457120411000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(Some clever applications of loop fusion would probably be good - a significant part of Bikeshed's runtime is running selectors, and a single double-size selector run once is much less expensive than two selectors run separately.)","msgtype":"m.text"},"ts":1457120623000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: right, this was true in Anolis too, essentially. It's also why we really want to move to PyPy, a lot of the overhead of running selectors is interpreter overhead rather than anything inherently CPU expensive","msgtype":"m.text"},"ts":1457121234000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"TabAtkins: but it's why I'm really curious about Haskell for this, given loop fusion is pretty easy to achieve where needed, in part because of the purity","msgtype":"m.text"},"ts":1457121262000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic, annevk: so remember how I said it was fine to check enumerability as you go in structured clone?","msgtype":"m.text"},"ts":1457125932000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"I now think that's wrong","msgtype":"m.text"},"ts":1457125936000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: you mean how I thought it was fine to trigger multiple proxy traps since proxies are disallowed? Or something else?","msgtype":"m.text"},"ts":1457125968000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: not because of proxies","msgtype":"m.text"},"ts":1457125977000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"the issue is, which set of properties should we loop over?","msgtype":"m.text"},"ts":1457125986000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"the way the spec does it, we loop over all the own keys","msgtype":"m.text"},"ts":1457126000000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"and then interleave checks for enumerability with calls to [[Get]]","msgtype":"m.text"},"ts":1457126013000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"ah, i see!","msgtype":"m.text"},"ts":1457126023000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"neither WebKit or Blink","msgtype":"m.text"},"ts":1457126057000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"do that","msgtype":"m.text"},"ts":1457126075000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"(they both check for enumerability up front)","msgtype":"m.text"},"ts":1457126076000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: want to file it, or shall i?","msgtype":"m.text"},"ts":1457126076000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: if you wouldn't mind....","msgtype":"m.text"},"ts":1457126118000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"I assume you're fine with checking enumerability before triggering any possible side effects?","msgtype":"m.text"},"ts":1457126148000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"(especially given it matches implementations :)","msgtype":"m.text"},"ts":1457126157000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: yeah that sounds totally fine, I think the current spec is just doing that because it was easy to spec/matched some existing ES prose.","msgtype":"m.text"},"ts":1457126224000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The old spec said something like \"for each own enumerable property\" so this is kind of a regression","msgtype":"m.text"},"ts":1457126236000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"aklein: wait, how is this observable again? concrete example?","msgtype":"m.text"},"ts":1457126410000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"a throwing non-enumerable getter won't be triggered. a throwing enumerable getter will be. seems the same as before, assuming no proxies.","msgtype":"m.text"},"ts":1457126447000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: Are pseudo-elements supposed to be handled in DOM's Element.matches?","msgtype":"m.text"},"ts":1457127349000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"As per the spec currently, they are.","msgtype":"m.text"},"ts":1457127354000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Cc SimonSapin.","msgtype":"m.text"},"ts":1457127370000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"http://logs.glob.uno/?c=mozilla%23servo#c379296","msgtype":"m.text"},"ts":1457127398000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"specifically https://drafts.csswg.org/selectors-4/#evaluate-a-selector \"APIs using this algorithm […] may optionally provide […] which pseudo-elements are allowed to show up in the match list, if any. If not specified, this defaults to allowing all pseudo-elements.\"","msgtype":"m.text"},"ts":1457127437000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"nox: https://github.com/whatwg/dom/issues/185","msgtype":"m.text"},"ts":1457128206000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Cool.","msgtype":"m.text"},"ts":1457128254000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic: a getter that deletes another propety","msgtype":"m.text"},"ts":1457128593000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"property","msgtype":"m.text"},"ts":1457128594000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"Domenic: see, e.g., https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/LayoutTests/fast/dom/Window/script-tests/postmessage-clone.js&l=142","msgtype":"m.text"},"ts":1457128669000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1457128673000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"in this case it'd be a getter that changes the enumerable-ness of another property","msgtype":"m.text"},"ts":1457128687000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"but you get the idea","msgtype":"m.text"},"ts":1457128689000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: perfect, thanks","msgtype":"m.text"},"ts":1457128875000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: existing implementations do seem to check for the existence of a property during the loop anyway, though it'd be awesome if we didn't have to do that","msgtype":"m.text"},"ts":1457129009000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: oh i see, wow so many proxy traps being triggered","msgtype":"m.text"},"ts":1457129034000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"not really proxy related, just the existence of getters","msgtype":"m.text"},"ts":1457129085000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"i guess i meant if we did allow proxies this isn't anywhere near how you would write the algorithm in order to minimize trap-triggering","msgtype":"m.text"},"ts":1457129146000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: indeed :)","msgtype":"m.text"},"ts":1457129881000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"Can anyone tell me if selectors4 still forbid nested :matches()? I remember it used to in the past but can't find it again in https://drafts.csswg.org/selectors/#matches. Did that change recently?","msgtype":"m.text"},"ts":1457133863000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"TabAtkins: ^","msgtype":"m.text"},"ts":1457133957000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: Doesn't look like the requirements there anymore, so consider it gone.","msgtype":"m.text"},"ts":1457134242000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Certainly isn't a *recent* change, tho.","msgtype":"m.text"},"ts":1457134247000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ah. :(","msgtype":"m.text"},"ts":1457134288000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Why :( ?","msgtype":"m.text"},"ts":1457134347000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Because I'm trying to support :matches and :not in a way that lets me compute the specificity in a clever way and it made things more difficult.","msgtype":"m.text"},"ts":1457134426000,"senderName":"nox","senderId":"nox@irc"}
]