[
{"content":{"body":"anyone here have any idea why annevk is notable? His notability is being questioned https://en.wikipedia.org/wiki/Anne_van_Kesteren by a user named \"Ham Pastrami\" (no joke)","msgtype":"m.text"},"ts":1467246096000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Where's the notability question?","msgtype":"m.text"},"ts":1467246155000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oh, duh, the warning right at the top of the page.","msgtype":"m.text"},"ts":1467246177000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"that banner you missed at the top","msgtype":"m.text"},"ts":1467246178000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Okay, removed the banner with some justification in edit summary; anne seems to reasonably qualify as notable per the Notability page.","msgtype":"m.text"},"ts":1467247401000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"does websocket work on port 80 only? or is it for the http handshake and then there is another port used?","msgtype":"m.text"},"ts":1467270163000,"senderName":"nishu","senderId":"nishu@irc"},
{"content":{"body":"it works on any port","msgtype":"m.text"},"ts":1467270295000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"and does not switch ports during the handshake","msgtype":"m.text"},"ts":1467270306000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"annevk: what's the history of the ISO-2022-JP-3 Kana set being part of Web ISO-2022-JP while ISO-2022-JP-1, ISO-2022-JP-2 and the rest of ISO-2022-JP-3 aren't?","msgtype":"m.text"},"ts":1467272918000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: too long ago","msgtype":"m.text"},"ts":1467273030000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: I think we dropped parts of ISO-2022 based on other browsers not supporting things, but I'm not entirely sure","msgtype":"m.text"},"ts":1467273053000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: I guess I could grep the log","msgtype":"m.text"},"ts":1467273091000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: https://github.com/whatwg/encoding/commit/19b0ebf0e48c3a607ab7623b5b272642dd59d6e7","msgtype":"m.text"},"ts":1467273149000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: https://www.w3.org/Bugs/Public/show_bug.cgi?id=26885 discusses an earlier change where we removed parts of it because we only needed those parts for Thunderbird","msgtype":"m.text"},"ts":1467273222000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I mean: ESC ( I wasn't part of the RFC and came as part of the *third* round of extensions, so how come browser adopted that one?","msgtype":"m.text"},"ts":1467273568000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"\"I\" in \"ESC ( I\" being part of the byte sequence","msgtype":"m.text"},"ts":1467273591000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: maybe Microsoft shipped it from day 1?","msgtype":"m.text"},"ts":1467273594000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: OK","msgtype":"m.text"},"ts":1467273603000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: that sounds like a before-my-time question","msgtype":"m.text"},"ts":1467273610000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it is","msgtype":"m.text"},"ts":1467273618000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"annevk: but you might still know, so I asked","msgtype":"m.text"},"ts":1467273626000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"TIL: Erik van der Poel is one of the authors of the ISO-2022-JP RFC","msgtype":"m.text"},"ts":1467274272000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"(I'm assuming the same Erik van der Poel as the one who worked on Gecko i18n in the Netscape days)","msgtype":"m.text"},"ts":1467274300000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"And is now at Google, suspect that's accurate","msgtype":"m.text"},"ts":1467274477000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: in webkit i get this error for const c = document.querySelector(\"#c\").contentWindow; (from multiple globals test in the spec) SyntaxError: Can't create duplicate variable that shadows a global property: 'c'","msgtype":"m.text"},"ts":1467279376000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Domenic: bug in webkit?","msgtype":"m.text"},"ts":1467279393000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"is surprised that ISO-2022-JP (the original) can't represent Katakana","msgtype":"m.emote"},"ts":1467280655000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"am I missing something?","msgtype":"m.text"},"ts":1467280661000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"looking at what Wikipedia says about Katakana usage, it seems incredible that the encoding for Japanese email couldn't encode the words for \"television\" or \"America\"","msgtype":"m.text"},"ts":1467280805000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"what am I missing?","msgtype":"m.text"},"ts":1467280813000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: I guess you are confused about half-width katakana and full-width katakana","msgtype":"m.text"},"ts":1467280847000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"kochi: ooh! that's it. Thanks.","msgtype":"m.text"},"ts":1467280869000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: what ISO-2022-JP cannot represent is half-width Katakana, full-width Katakana is included in ISO-2022-JP, IIUC.","msgtype":"m.text"},"ts":1467280887000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"kochi: yeah, that's the situation","msgtype":"m.text"},"ts":1467280904000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"ISO-2022-JP used to be the canonical encoding for emails (as it uses only 7bits), so half-width Katakana could not be used in such emails.","msgtype":"m.text"},"ts":1467281023000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"s/canonical encoding for emails/canonical encoding for emails for Japanese usersss/","msgtype":"m.text"},"ts":1467281279000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"oops, too many ss","msgtype":"m.text"},"ts":1467281288000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"unfortunately, there is still a lack of consensus on the \"used to be\" part","msgtype":"m.text"},"ts":1467281511000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Really? I thought everyone was agreed on UTF-8 now?","msgtype":"m.text"},"ts":1467281687000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"What's the holdout?","msgtype":"m.text"},"ts":1467281690000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Thunderbird! also, Apple Mail users who install the \"Letter Fix\" hack that restores the capability to send ISO-2022-JP email.","msgtype":"m.text"},"ts":1467281741000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: do you mean \"it is still\"?","msgtype":"m.text"},"ts":1467281762000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"kochi: there are people who argue it is still, yes, despite e.g. Gmail removing the capability to send non-UTF-8 email","msgtype":"m.text"},"ts":1467281800000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Ugh","msgtype":"m.text"},"ts":1467281822000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: isee, I know there used to be such people, but TIL still they are :)","msgtype":"m.text"},"ts":1467281857000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"If any mailer sends UTF-8 mail without MIME header, that's bad, but if with MIME header, it should be totally fine.","msgtype":"m.text"},"ts":1467281958000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"Is there any network that passes only 7bits or truncates 8-bit char to 7bit? :)","msgtype":"m.text"},"ts":1467282048000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"as I understand it, that's not the assumed threat","msgtype":"m.text"},"ts":1467282177000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"instead, I gather the assumed problems are 1) email clients on pre-Android/iOS phones and 2) some server-side things that don't look at headers and just assume the body is ISO-2022-JP","msgtype":"m.text"},"ts":1467282231000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I don't know if either actually still exist","msgtype":"m.text"},"ts":1467282239000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"anyway, if there's a list of email clients (besides Gmail) that 1) are used in Japan and 2) can't be made to send ISO-2022-JP (not even via a hack like Letter Fix), I'd be interested in the list","msgtype":"m.text"},"ts":1467282423000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"(so that I could appeal to the list as evidence that Thunderbird could go UTF-8-only, too)","msgtype":"m.text"},"ts":1467282448000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I'm not familiar with email clients of these days, sorry I can't help for that.","msgtype":"m.text"},"ts":1467282561000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"it is interesting to know there are still ISO-2022-JP email activists","msgtype":"m.text"},"ts":1467282630000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"hsivonen: does Thunderbird still have a significant userbase?","msgtype":"m.text"},"ts":1467282643000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yes","msgtype":"m.text"},"ts":1467282736000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"what does \"When a node is inert, then the user agent must act as if the node was absent for the purposes of targeting user interaction events\" mean?","msgtype":"m.text"},"ts":1467282962000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"oh, there is example below","msgtype":"m.text"},"ts":1467282999000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"hmm hmm","msgtype":"m.text"},"ts":1467283002000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"cannot take focus, take key events etc.??","msgtype":"m.text"},"ts":1467283003000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"those are clear, but mouse event handling","msgtype":"m.text"},"ts":1467283032000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"it becomes bizarre","msgtype":"m.text"},"ts":1467283037000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"inert is nicely very much underdefined","msgtype":"m.text"},"ts":1467284077000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: isn't mouse events and hit testing in general underdefined?","msgtype":"m.text"},"ts":1467293295000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"that's rhetorical, right?","msgtype":"m.text"},"ts":1467293409000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: it is. But my comment isn't about that, but whether inert affects to hit testing or just skips some elements in the event path","msgtype":"m.text"},"ts":1467293962000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"botie: tell zcorpan yes, bug in webkit (https://bugs.webkit.org/show_bug.cgi?id=159270), although I thought I created a version that works there too, hmm...","msgtype":"m.text"},"ts":1467302266000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"will do","msgtype":"m.text"},"ts":1467302266000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"botie, you are inhumanly fast","msgtype":"m.text"},"ts":1467302274000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"OK, Domenic.","msgtype":"m.text"},"ts":1467302274000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"zcorpan, at 2016-06-30 15:57 UTC, Domenic said: yes, bug in webkit (https://bugs.webkit.org/show_bug.cgi?id=159270), although I thought I created a version that works there too, hmm...","msgtype":"m.text"},"ts":1467304943000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"TabAtkins: so Worklets in their current form are like Workers with super tiny API (no networking, no communication with the main thread)?","msgtype":"m.text"},"ts":1467314512000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"or perhaps ian is here?","msgtype":"m.text"},"ts":1467314535000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I guess main thread can communicate by sending data:, urls as imported scripts","msgtype":"m.text"},"ts":1467314607000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but there is no worklet->main thread communication","msgtype":"m.text"},"ts":1467314619000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"are there plans to add some simple postMessage like communication channel?","msgtype":"m.text"},"ts":1467314664000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: I think the idea is for them to be like pure functions","msgtype":"m.text"},"ts":1467315059000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1467315165000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and I guess Worklet having possible multiple workletglobals make the communication a bit hard","msgtype":"m.text"},"ts":1467315196000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but mainthread -> worker communication is there via  data:, trick, which is a bit ugly","msgtype":"m.text"},"ts":1467315236000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Sorry on phone at the moment... but various specs can add worklet to main communication if they need to.","msgtype":"m.text"},"ts":1467315243000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"hmm, I'd still assume mainthread -> worklet communication will be needed","msgtype":"m.text"},"ts":1467315270000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"perhaps not worklet -> mainthread","msgtype":"m.text"},"ts":1467315276000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Depends on the spec. Paint api all the communication is done through the style engine as the functions should be \"pure\"","msgtype":"m.text"},"ts":1467315343000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"Adding side channel breaks this.","msgtype":"m.text"},"ts":1467315359000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"well, there is already script importing as a mainthread->worklet communication channel","msgtype":"m.text"},"ts":1467315402000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Audio folks have communication from a main thread class instance to a specific worklet class instance. So dont need to worry about the multiple globals problem.","msgtype":"m.text"},"ts":1467315421000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"Yeah that's right.","msgtype":"m.text"},"ts":1467315432000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"I would be surprised if that data:, won't be used if there is no other communication channel","msgtype":"m.text"},"ts":1467315437000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"for stuff like passing some settings to worklet","msgtype":"m.text"},"ts":1467315454000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Right, I'm sure that people will do that but want to discourage that for css related things. :) If that makes sense.","msgtype":"m.text"},"ts":1467315532000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"iank___: could you explain how registerPaint is supposed to work","msgtype":"m.text"},"ts":1467315639000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"it is not clear from the spec yet","msgtype":"m.text"},"ts":1467315649000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"one registers some callback","msgtype":"m.text"},"ts":1467315663000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"which is just a function","msgtype":"m.text"},"ts":1467315671000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but then there is the comment \"Note: This is how the class should look. \"","msgtype":"m.text"},"ts":1467315685000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"https://drafts.css-houdini.org/css-paint-api-1/#dom-paintworkletglobalscope-registerpaint seems to use some ecma stuff when it really should just rely on webidl. Like, couldn't registerPaint take PaintClass as the second param?","msgtype":"m.text"},"ts":1467315805000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Yeah can you give me 15 mins?","msgtype":"m.text"},"ts":1467315806000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1467315810000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"back! Yeah I need to fix the spec to convert a bunch of the things to WebIDL types. But basically it registers a class. E.g.","msgtype":"m.text"},"ts":1467316600000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"https://github.com/GoogleChrome/houdini-samples/blob/master/paint-worklet/circle/paintworklet.js#L17","msgtype":"m.text"},"ts":1467316601000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"the engine is responsible for creating an instance of the class, then invoking it to generate images.","msgtype":"m.text"},"ts":1467316653000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"It's possible for the engine to kill the PaintWorkletGlobalScopes if a window/tab is backgrounded for example to reclaim memory, and restarted if foregrounded again.","msgtype":"m.text"},"ts":1467316714000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"iank___: why engine needs to create instance?","msgtype":"m.text"},"ts":1467319671000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I mean, why isn't a callback interface instance passed to registerPaint ?","msgtype":"m.text"},"ts":1467319737000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(I don't understand how killing PaintWorkletGlobalScopes is related to this. paintCtor can be created dynamically, so it might not be available after restarting the worklet)","msgtype":"m.text"},"ts":1467319801000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"annevk or Domenic: Can one of y'all comment on https://github.com/w3c/svgwg/issues/181 and tell them to not add any more camelCase names to SVG?","msgtype":"m.text"},"ts":1467319879000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hmm, so the spec uses a callback registration mechanism no other API in the web platform is using","msgtype":"m.text"},"ts":1467319926000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: is this about custom elements? I just fixed that...","msgtype":"m.text"},"ts":1467319953000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"smaug____: oh you're talking about paint","msgtype":"m.text"},"ts":1467319960000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: this is about PaintWorkletGlobalScope","msgtype":"m.text"},"ts":1467319974000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: I think they were copying custom elements and will fix it soon","msgtype":"m.text"},"ts":1467319981000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"aha","msgtype":"m.text"},"ts":1467319991000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"yeah, this looks rather weird currently","msgtype":"m.text"},"ts":1467319997000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"maybe there is some good reason, but don't know what that is","msgtype":"m.text"},"ts":1467320013000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"that said, I think if your complaint is registering a class instead of registering a callback, that likely won't change...","msgtype":"m.text"},"ts":1467320026000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I'm just complaining it being unusual and spec using ecma terminology and not easily understandable webidl","msgtype":"m.text"},"ts":1467320179000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Domenic: I'd expect callback to be an instance of a class","msgtype":"m.text"},"ts":1467320196000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"not a class itself","msgtype":"m.text"},"ts":1467320200000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"that's not the intent of this API","msgtype":"m.text"},"ts":1467320218000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The intent is to allow you to register a constructor which is called later","msgtype":"m.text"},"ts":1467320231000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"similar to custom elements","msgtype":"m.text"},"ts":1467320234000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"why?","msgtype":"m.text"},"ts":1467320242000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"in this case","msgtype":"m.text"},"ts":1467320245000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"So that it can be created repeatedly","msgtype":"m.text"},"ts":1467320255000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"what can be created repeatedly?","msgtype":"m.text"},"ts":1467320284000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"or why you need to create anything repeatedly?","msgtype":"m.text"},"ts":1467320299000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Because worklets are created and destroyed often, and each time you need to create a new paint thingy, is my understanding","msgtype":"m.text"},"ts":1467320329000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess I'll let iank___ take back over if it's just questions of \"how is this API intended to be used\"","msgtype":"m.text"},"ts":1467320349000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but when you create workletglobalscope again, you don't know whether you still have the same classes available","msgtype":"m.text"},"ts":1467320380000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"One of the ways we intend to enforce \"this should be a pure function\" (without having to go whole-hog and define brand-new concepts of a frozen environment or something) is to kill and restart things somewhat arbitrarily.","msgtype":"m.text"},"ts":1467320391000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So if you do rely on a long-lived thing thru multiple invocations, you'll have a bad time.","msgtype":"m.text"},"ts":1467320421000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yes. And I don't understand how the class approach helps with that","msgtype":"m.text"},"ts":1467320452000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Oh, I have no comment on that. Please open issues and comment if you have problems with any particular in the approach; we've been dying trying to get other people to review this stuff in depth.","msgtype":"m.text"},"ts":1467320858000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Right, it's pretty non-obvious why we did it like that for the current API. This is mainly for future stuff we want to be able to do.","msgtype":"m.text"},"ts":1467321727000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"iank___: what kind of future stuff you have in mind?","msgtype":"m.text"},"ts":1467321809000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Bascially consider the use-case where the author wants to pre-generate a bunch of images; and you have the ability to create additional PaintRenderingContext2D's for example.","msgtype":"m.text"},"ts":1467321826000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"e.g. (sorry typing).","msgtype":"m.text"},"ts":1467321833000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"registerPaint('foo', class { constructor { this.frameN = new PaintRenderingContext2d(100, 100) /* bunch of pre-initialization */ }","msgtype":"m.text"},"ts":1467321867000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"paint(ctx, geom, styleMap) { if (something) { ctx.drawImage(this.frameN); } }","msgtype":"m.text"},"ts":1467321889000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"we cut a bunch of things from v1 paint api, but you're right the current API could just be registerPaint('foo', callbackFn)","msgtype":"m.text"},"ts":1467321953000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"layout api will have a lot more of these things that you'll want to cache on the class instance.","msgtype":"m.text"},"ts":1467321984000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"hmm, I didn't understand that example","msgtype":"m.text"},"ts":1467321992000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"this.frameN is just set once","msgtype":"m.text"},"ts":1467322000000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I assume","msgtype":"m.text"},"ts":1467322004000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"or is registerPaint such that each time paint will be called, a new instance of the class is created?","msgtype":"m.text"},"ts":1467322028000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(that would be rather garbage heavy)","msgtype":"m.text"},"ts":1467322090000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"yeah this.frameN is just set once, (\"frameN\" may have been a bad name, just pretend its a heavyweight image that you want to cache). instance of class is re-used across paint method invocations.","msgtype":"m.text"},"ts":1467322114000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"right. So all that could be done just by passing an callback interface object, no?","msgtype":"m.text"},"ts":1467322173000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"why the need to pass ctor","msgtype":"m.text"},"ts":1467322197000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(I could totally miss something here. This is just all very unique to the platform (well, custom elements apparently has something similar, but it has some reasons for being unusual ))","msgtype":"m.text"},"ts":1467322256000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Here is an example with layout: https://gist.github.com/bfgeek/a4ca5e42f7e379c2b4009ca71e6ae296","msgtype":"m.text"},"ts":1467322355000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"layout example shows more clearly why you'd want this cache-on-class behaviour.","msgtype":"m.text"},"ts":1467322406000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"you cache on the instance of the class","msgtype":"m.text"},"ts":1467322542000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"yup that's right. (sorry 2 ticks)","msgtype":"m.text"},"ts":1467322968000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"so, why the need for class here.","msgtype":"m.text"},"ts":1467323059000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and not an instance of such","msgtype":"m.text"},"ts":1467323070000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"gives explicit control to the engine for what instances actually need to be created.","msgtype":"m.text"},"ts":1467323557000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"for example if the author is doing a large amount of work in the constructor, and that paint-image-function is never used.","msgtype":"m.text"},"ts":1467323557000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"with the class based approach authors can put large amounts of initialization code on the ctor, and it's only called if actually needed.","msgtype":"m.text"},"ts":1467323557000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":" / or when it is needed.","msgtype":"m.text"},"ts":1467323581000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"well, often that kind of stuff is cached when the heavy operation is first time called","msgtype":"m.text"},"ts":1467323665000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"so, the first paint() call could do the caching","msgtype":"m.text"},"ts":1467323671000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"it isn't any different than doing caching in constructor and then using it paint() which is first time called right after paint()","msgtype":"m.text"},"ts":1467323696000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"the class approach would make sense if we'd expect multiple instances for some reason, but looks like that isn't the case.","msgtype":"m.text"},"ts":1467323778000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"you are right, but i kinda disagree because the engine can potentially schedule constructor in an idle period ahead of the callback.","msgtype":"m.text"},"ts":1467323804000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"right, so again this makes a lot more sense for layout at the moment b/c we stripped so much from paint ^-^","msgtype":"m.text"},"ts":1467323853000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"we were debating if for paint we'd have an instance per set of paint arguments. e.g.","msgtype":"m.text"},"ts":1467323959000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"background-image: paint(chat-bubble, round);","msgtype":"m.text"},"ts":1467323959000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"background-image: paint(chat-bubble, bevel);","msgtype":"m.text"},"ts":1467323959000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"(^ different instances).","msgtype":"m.text"},"ts":1467323959000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"but really not sure yet.","msgtype":"m.text"},"ts":1467323959000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"ok, the paint spec doesn't hint anyhow that it is ok for UA to run steps in \"draw a paint image\" asynchronously","msgtype":"m.text"},"ts":1467323961000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"i'll file an issue for that.","msgtype":"m.text"},"ts":1467323994000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"this class thing just seem to mostly make the spec more complicated than it needs to be","msgtype":"m.text"},"ts":1467324036000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and not really giving anything.","msgtype":"m.text"},"ts":1467324082000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"callback interface would be simpler.","msgtype":"m.text"},"ts":1467324105000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but perhaps I'm missing something here","msgtype":"m.text"},"ts":1467324113000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"for paint you are right that it is more complex spec wise but it gives us a few things in my mind; (1) future-proofing for additional methods on the class (2) consistency with other houdini spec's which will rely on the class based things very heavily (3) explicit signalling for when to create cached things.","msgtype":"m.text"},"ts":1467324428000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"Hmm, according to Chrome's IDL at least, the HTMLDocument/XMLDocument/Document merger looks closer than I thought it would","msgtype":"m.text"},"ts":1467324580000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"iank___: why other houdini specs will rely on class based setup?","msgtype":"m.text"},"ts":1467324784000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"for layout you'll have an instance per Node in the tree for example.","msgtype":"m.text"},"ts":1467324849000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"and I don't understand (1) at all :) and there is no explicit signalling when to create cached things. Right now it happens during the same event loop spin as paint(), so caching in constructor would be rather bad. caching should happen earlier","msgtype":"m.text"},"ts":1467324851000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"iank___: ahaa","msgtype":"m.text"},"ts":1467324870000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1467324878000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"ok, if so, that would be a good reason.","msgtype":"m.text"},"ts":1467324911000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"it wasn't clear from worklet or paint specs","msgtype":"m.text"},"ts":1467324928000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and I don't know where the layout spec lives","msgtype":"m.text"},"ts":1467324959000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"searches","msgtype":"m.emote"},"ts":1467324961000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"https://github.com/w3c/css-houdini-drafts/tree/master/css-layout-api","msgtype":"m.text"},"ts":1467324973000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"^ has the best information at the moment.","msgtype":"m.text"},"ts":1467324981000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"but it's patchy.","msgtype":"m.text"},"ts":1467324984000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"I'm going to do a rev of the layout api in the next few weeks","msgtype":"m.text"},"ts":1467325009000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"it's 5x more complex than paint as so many new concepts that we haven't exposed previously.","msgtype":"m.text"},"ts":1467325049000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"but would love feedback on it.","msgtype":"m.text"},"ts":1467325055000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"if you'll be at TPAC we'll be spending a bunch of time on it.","msgtype":"m.text"},"ts":1467325068000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"I'm trying to stay away from css/layout stuff ;) but worklet is also an API so need to understand why and what we might implement in Gecko","msgtype":"m.text"},"ts":1467325118000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but yes, I'm planning to be at TPAC","msgtype":"m.text"},"ts":1467325252000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"cool, yeah we tried to make it as simple as possible and allow engines to experiment with a bunch of things if they like, so if you have any suggestions feel free to reach out.","msgtype":"m.text"},"ts":1467325256000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"in blink we've currently just got a main thread impl of worklets, and at the moment working on an audio thread for the webaudio api.","msgtype":"m.text"},"ts":1467325396000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"will you reuse worket implementation for worklets","msgtype":"m.text"},"ts":1467325419000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"or are workers in blink too heavy for this?","msgtype":"m.text"},"ts":1467325426000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"s/worket/worker/","msgtype":"m.text"},"ts":1467325442000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"new WebSocket(relativeURL) is supposed to work, right?","msgtype":"m.text"},"ts":1467325521000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah we basically are extracting a bunch of common infrastructure out (global initialization, etc) so they share quite a lot of code.","msgtype":"m.text"},"ts":1467325522000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"the \"heavy\" part comes from that each script has to have a new global, which we don't have for worklets.","msgtype":"m.text"},"ts":1467325572000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"i think we are at ~100k for an empty v8 global memory wise.","msgtype":"m.text"},"ts":1467325606000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"ah, I was thinking importing scripts similar to importing scripts inside workers, where the same global is reused of course","msgtype":"m.text"},"ts":1467325684000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but yeah, global creation is rather heavy","msgtype":"m.text"},"ts":1467325696000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"holy shit new WebSocket(\"relative-url\") does not work","msgtype":"m.text"},"ts":1467325762000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh I guess that's predicatable since it has to start with ws://","msgtype":"m.text"},"ts":1467325769000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"smaug____: yeah that's basically how we've implemented it.","msgtype":"m.text"},"ts":1467327884000,"senderName":"iank___","senderId":"iank___@irc"},
{"content":{"body":"we aren't doing any of the \"load like a module yet\" but will once the v8 team implements.","msgtype":"m.text"},"ts":1467327921000,"senderName":"iank___","senderId":"iank___@irc"}
]