[
{"content":{"body":"Does http://canvex.lazyilluminati.com/misc/imagedata.html crash Opera 9.5? (I can only test via Opera Mini, which just says \"Internal server error\", which sounds potentially worrying but not very informative)","msgtype":"m.text"},"ts":1183600260000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"does Opera Mini handle events?","msgtype":"m.text"},"ts":1183600440000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"and scripting?","msgtype":"m.text"},"ts":1183600500000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"It seems to, as long as you don't use setInterval and don't expect it to wait for distant timeouts","msgtype":"m.text"},"ts":1183600560000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(i.e. it can handle scripting and events and stuff while the page is loading, for some definition of 'loading' that I haven't quite worked out, though then it justs sends a static copy to your phone)","msgtype":"m.text"},"ts":1183600620000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"*just","msgtype":"m.text"},"ts":1183600621000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"so script runs at load time but not afterwards?","msgtype":"m.text"},"ts":1183600740000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Yes (as far as I can tell)","msgtype":"m.text"},"ts":1183600800000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(I'm playing with the Opera Mini simulator)","msgtype":"m.text"},"ts":1183600860000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"(since it basically opens the page in Opera on their servers, then at some point it decides it's got enough and transmits a non-interactive compressed snapshot, I think)","msgtype":"m.text"},"ts":1183600861000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(Me too, since my real phone is far too rubbish :-) )","msgtype":"m.text"},"ts":1183600862000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I got it to run ~100 canvas tests in iframes on a single page, and that (eventually) worked correctly with all the scripting and loading and stuff, but it wouldn't let me correctly press the buttons to submit the test results, so I had to do that via a hard-coded timer :-(","msgtype":"m.text"},"ts":1183600980000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"\"For example, don’t put a 100 x 100 image in a 10 x 10 <image> element.\" -- unintentionally hilarious iPhone developer docs","msgtype":"m.text"},"ts":1183612260000,"senderName":"mpt","senderId":"mpt@irc"},
{"content":{"body":"Ah, interesting: \"ensure that width * height * 4 < 8 MB\" ... so apparently this <image> element is for some new kind of file that has widths and heights measured in MBm⁻².","msgtype":"m.text"},"ts":1183612860000,"senderName":"mpt","senderId":"mpt@irc"},
{"content":{"body":"But hooray for this: \"Don’t use JavaScript movie controls to play video on iPhone. iPhone supplies its own controls.\"","msgtype":"m.text"},"ts":1183613340000,"senderName":"mpt","senderId":"mpt@irc"},
{"content":{"body":"mpt: width * height * 4 bytes","msgtype":"m.text"},"ts":1183621860000,"senderName":"om_out","senderId":"om_out@irc"},
{"content":{"body":"Hixie: http://www.w3.org/mid/A0F10D3A-A679-4BB1-8844-684FBFDB94F6⊙if is there a way for the stack have td or th in such a position that generating implied end tags could close the scope (except for the EOF case)?","msgtype":"m.text"},"ts":1183622340000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hehe, iPhone docs promote <image> :)","msgtype":"m.text"},"ts":1183623360000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: URL?","msgtype":"m.text"},"ts":1183623361000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"http://developer.apple.com/iphone/designingcontent.html","msgtype":"m.text"},"ts":1183623362000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"click on \"Use Standards and Tried-and-True Design Practices\" and then search","msgtype":"m.text"},"ts":1183623420000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'll report a bug","msgtype":"m.text"},"ts":1183623540000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"annevk: did you try to optimize redundant steps in tree building at all or did you just follow the spec to letter even if it asked you to traverse the stack more than absolutely necessary?","msgtype":"m.text"},"ts":1183623780000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"there are some small optimizations","msgtype":"m.text"},"ts":1183623840000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but not much","msgtype":"m.text"},"ts":1183623841000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"doesn't really matter a lot in Python I've the feeling","msgtype":"m.text"},"ts":1183623842000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, in the beginning we tried to reduce function calls by using dictionaries instead of token objects and such and that worked pretty well","msgtype":"m.text"},"ts":1183623900000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: what's your take on the the ability of \"generate end tags\" to close the scope?","msgtype":"m.text"},"ts":1183623901000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"but now with the treebuilder abstraction we gained a lot of function calls again :(","msgtype":"m.text"},"ts":1183623902000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://html5lib.googlecode.com/svn/trunk/python/src/html5lib/treebuilders/_base.py search for \"generateImpliedEndTags\"","msgtype":"m.text"},"ts":1183623960000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"although I now see it has some XXX comment that we never hit apparently...","msgtype":"m.text"},"ts":1183624020000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I was thinking of doing the exact same thing: just popping","msgtype":"m.text"},"ts":1183624021000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I guess I have to send another email","msgtype":"m.text"},"ts":1183624022000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Hixie recently added a bunch of table elements there","msgtype":"m.text"},"ts":1183624080000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm not sure what that was about","msgtype":"m.text"},"ts":1183624081000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think that was about EOF","msgtype":"m.text"},"ts":1183624140000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I am not sure that it is a good idea to put them in that part of the spec","msgtype":"m.text"},"ts":1183624141000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"annevk: does Python turn tail recursion into looping?","msgtype":"m.text"},"ts":1183624142000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"dunno","msgtype":"m.text"},"ts":1183624200000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://html5.org/tools/web-apps-tracker?from=964&to=965","msgtype":"m.text"},"ts":1183624201000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is that for <table><tbody><tr><td><p><tbody> or something?","msgtype":"m.text"},"ts":1183624260000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"doesn't seem like it, that already works","msgtype":"m.text"},"ts":1183624320000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the only case where I see those mattering is the EOF case","msgtype":"m.text"},"ts":1183624380000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"example markup?","msgtype":"m.text"},"ts":1183624381000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"reads http://en.wikipedia.org/wiki/Tail_recursion and understands we might be able to optimize stuff a bit","msgtype":"m.emote"},"ts":1183624440000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm, seems only to matter if it calls itself a lot","msgtype":"m.text"},"ts":1183624560000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen, I don't see how it matters for EOF either","msgtype":"m.text"},"ts":1183624680000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen, you always get a single error and that can't be avoided, because </table> is never implied","msgtype":"m.text"},"ts":1183624681000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: good point. will you send email or shall I?","msgtype":"m.text"},"ts":1183624740000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"you're already going pretty good with your review, you do it ;)","msgtype":"m.text"},"ts":1183624800000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok","msgtype":"m.text"},"ts":1183624860000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"http://www.bluishcoder.co.nz/2007/07/patch-for-video-element-support-in.html","msgtype":"m.text"},"ts":1183625100000,"senderName":"met_","senderId":"met_@irc"},
{"content":{"body":"hsivonen: i don't know (re <td>s)","msgtype":"m.text"},"ts":1183625220000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: that doesn't sound good ;-)","msgtype":"m.text"},"ts":1183625280000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"the table elements were added because it seemed wrong that they not be on the list","msgtype":"m.text"},"ts":1183625340000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i honestly don't know if they'll ever get hit","msgtype":"m.text"},"ts":1183625341000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i want to say no","msgtype":"m.text"},"ts":1183625342000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but i'm not sure how to prove it","msgtype":"m.text"},"ts":1183625343000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'll be back in about 12 hours","msgtype":"m.text"},"ts":1183625400000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(and possibly briefly in a few minutes)","msgtype":"m.text"},"ts":1183625401000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I'd prefer to pretend that we proved that they never get hit","msgtype":"m.text"},"ts":1183625402000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"<tbody> gets ignored outside <table>, inside <table> it is handled explicitly in each table phase","msgtype":"m.text"},"ts":1183625520000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wonder if the same goes for <td> and <tr>","msgtype":"m.text"},"ts":1183625521000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm pretty sure they never get hit either","msgtype":"m.text"},"ts":1183625580000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"lets test that with the tests we got...","msgtype":"m.text"},"ts":1183625581000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: tr, td and th start tags are ignored \"in body\"","msgtype":"m.text"},"ts":1183625640000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"indeed","msgtype":"m.text"},"ts":1183625641000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if I remove \"td\", \"th\", \"tr\" from our generate implied end tags algorithm nothing goes wrong","msgtype":"m.text"},"ts":1183625642000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"because the table phases already deal with them","msgtype":"m.text"},"ts":1183625700000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the end tags seem to fall under \"An end tag token not covered by the previous entries\", but that seems wrong","msgtype":"m.text"},"ts":1183625701000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"only \"dd\", \"dt\", \"li\", \"p\" are important","msgtype":"m.text"},"ts":1183625702000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"actually, if I remove \"p\" nothing fails either...","msgtype":"m.text"},"ts":1183625703000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ponders","msgtype":"m.emote"},"ts":1183625704000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: removing p seem wrong","msgtype":"m.text"},"ts":1183625760000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hmm. perhaps the An end tag token not  covered by the previous entries","msgtype":"m.text"},"ts":1183625761000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"still does the right thing \"in body\" for cell ends","msgtype":"m.text"},"ts":1183625762000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"ah, the problem is that we don't count errors I suppose","msgtype":"m.text"},"ts":1183625763000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"as removing <li> also \"works\"","msgtype":"m.text"},"ts":1183625820000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"they are catched by the alternative algorithm that generates parse errors and therefore still generate the same tree...","msgtype":"m.text"},"ts":1183625821000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"IIRC, in fragment cases some \"act as if\" consistently produce 0 or 2 errors. I think I may have changed some of those to emit 0 or 1 errors","msgtype":"m.text"},"ts":1183625880000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"how does \"If the stack of open elements has a p element in scope, then generate implied end tags, except for p elements.\" even make sense?","msgtype":"m.text"},"ts":1183627200000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it says that when you encounter </p>","msgtype":"m.text"},"ts":1183627201000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"however, you will never generate an implied end tag for <dd>, <dt> or <li> or any o the table cells as they can never be between the <p> that is in scope and the current node","msgtype":"m.text"},"ts":1183627260000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"innerHTML wouldn't change anything for that either","msgtype":"m.text"},"ts":1183627740000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: excellent point","msgtype":"m.text"},"ts":1183628400000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"annevk: I'll email again.","msgtype":"m.text"},"ts":1183628460000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"should the list of active formatting elements be implemented as an array or as a linked list?","msgtype":"m.text"},"ts":1183629600000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"is it searched much more often than a node is removed from the middle?","msgtype":"m.text"},"ts":1183629660000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Hixie: was you stat for \"invocations of the AAA\" exactly this? (that is, is the answer array?)","msgtype":"m.text"},"ts":1183629900000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"oh that counted cloning nodes","msgtype":"m.text"},"ts":1183629960000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Hixie: did you count changing the size of the list by deleting stuff in the middle?","msgtype":"m.text"},"ts":1183629961000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"annevk: does the algorithm for \"in body\" \"An end tag token not covered by the previous entries\" make sense to you?","msgtype":"m.text"},"ts":1183630320000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"step 2.3. makes no sense to me","msgtype":"m.text"},"ts":1183630321000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"what's 2.3?","msgtype":"m.text"},"ts":1183630440000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Pop all the nodes from the current node up to node, including node, then stop this algorithm.","msgtype":"m.text"},"ts":1183630441000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"First: Initialise node to be the current node (the bottommost node of the stack).","msgtype":"m.text"},"ts":1183630500000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"ok makes sense","msgtype":"m.text"},"ts":1183630501000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"#","msgtype":"m.text"},"ts":1183630502000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"If node has the same tag name as the end tag token, then:","msgtype":"m.text"},"ts":1183630503000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"#","msgtype":"m.text"},"ts":1183630504000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Generate implied end tags. ","msgtype":"m.text"},"ts":1183630505000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"ok, makes sense","msgtype":"m.text"},"ts":1183630506000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"now Pop all the nodes from the current node up to node, including node, then stop this algorithm.","msgtype":"m.text"},"ts":1183630507000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"oh, I was looking at the wrong algorithm duh","msgtype":"m.text"},"ts":1183630508000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"how could /node/ not already be popped or be the current node?","msgtype":"m.text"},"ts":1183630560000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"shouldn't that be a simple unconditional pop","msgtype":"m.text"},"ts":1183630561000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"umm. not unconditional but pop if the current node is /node/","msgtype":"m.text"},"ts":1183630620000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"<foo><bar><baz></foo>","msgtype":"m.text"},"ts":1183630621000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"would pop <baz> and <bar> and <foo>","msgtype":"m.text"},"ts":1183630680000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: sorry for being dense, but I don't understand what step 2.3. has to do with it","msgtype":"m.text"},"ts":1183630681000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"annevk: isn't step 4. what causes that?","msgtype":"m.text"},"ts":1183630740000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"actually, step 2.1. makes no sense to me, either","msgtype":"m.text"},"ts":1183630741000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"indeed","msgtype":"m.text"},"ts":1183630742000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wonder how we managed to implement it :)","msgtype":"m.text"},"ts":1183630800000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"time to send mail again","msgtype":"m.text"},"ts":1183630860000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"we implemented what was mentioned","msgtype":"m.text"},"ts":1183630861000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"which doesn't make much sense :(","msgtype":"m.text"},"ts":1183630920000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"can you provide a markup snippet that highlights the difference?","msgtype":"m.text"},"ts":1183630921000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"zcorpan_: the difference?","msgtype":"m.text"},"ts":1183630980000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"<foo>...</foo> is the only case that 2.1 covers","msgtype":"m.text"},"ts":1183630981000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"in which case you don't need to generate implied end tags etc.","msgtype":"m.text"},"ts":1183630982000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"you just need to pop","msgtype":"m.text"},"ts":1183630983000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1183630984000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"indeed","msgtype":"m.text"},"ts":1183630985000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"lunch","msgtype":"m.text"},"ts":1183630986000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"then email","msgtype":"m.text"},"ts":1183630987000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I think I'm done with public-html for the day","msgtype":"m.text"},"ts":1183632780000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: did you my email about the catch-all end tag case, though? did it make sense?","msgtype":"m.text"},"ts":1183633380000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1183633920000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok. thanks.","msgtype":"m.text"},"ts":1183634100000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"having said that, I'm not sure the algorithm is correct","msgtype":"m.text"},"ts":1183635300000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh wait","msgtype":"m.text"},"ts":1183635301000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen, it does make sense","msgtype":"m.text"},"ts":1183635360000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"just realized","msgtype":"m.emote"},"ts":1183635361000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen, because of step 5","msgtype":"m.text"},"ts":1183635362000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen, and step 4","msgtype":"m.text"},"ts":1183635363000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen, they change \"node\"","msgtype":"m.text"},"ts":1183635364000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so say you have <dialog><dd></dialog>","msgtype":"m.text"},"ts":1183635420000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"you get to 4","msgtype":"m.text"},"ts":1183635421000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"node becomes <dialog>","msgtype":"m.text"},"ts":1183635480000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"</dd> is implied","msgtype":"m.text"},"ts":1183635481000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"done","msgtype":"m.text"},"ts":1183635482000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"however, it's questionable whether this is correct given that current UAs don't generate implied end tags in those cases...","msgtype":"m.text"},"ts":1183635483000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: well, this certainly looks like something that needs another look by Hixie","msgtype":"m.text"},"ts":1183635720000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"it seems that for <foo> </foo> it doesn't make much sense","msgtype":"m.text"},"ts":1183635900000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, it seems that you can optimize for <foo> </foo>","msgtype":"m.text"},"ts":1183635960000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it does make sense in a twisted way","msgtype":"m.text"},"ts":1183635961000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: looks like you aren't done for the day after all :-/","msgtype":"m.text"},"ts":1183636080000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I'd like to try to avoid ad hominems, but I'm intrigued that the insistence on a small improvement with great cost comes from an economist","msgtype":"m.text"},"ts":1183637040000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"that discussion is just painful","msgtype":"m.text"},"ts":1183637820000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"authors provide fallback to <object>?","msgtype":"m.text"},"ts":1183638420000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"won't join that discussion","msgtype":"m.emote"},"ts":1183638480000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"hsivonen, yeah :-/","msgtype":"m.text"},"ts":1183638780000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"these people should join some browser development project and learn about the web a little bit","msgtype":"m.text"},"ts":1183638781000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: did you check in the parser-tests thing somewhere?","msgtype":"m.text"},"ts":1183639560000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"not yet","msgtype":"m.text"},"ts":1183639680000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"was fixing html5lib","msgtype":"m.emote"},"ts":1183639681000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1183639682000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"you want it checked in somewhere?","msgtype":"m.text"},"ts":1183639683000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"would be nice, in case i feel like improving it","msgtype":"m.text"},"ts":1183639740000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"no rush though","msgtype":"m.text"},"ts":1183639800000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"it's in the html5 project now","msgtype":"m.text"},"ts":1183640040000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"including a README that says to modify the tests from html5lib, not the ones included","msgtype":"m.text"},"ts":1183640041000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"karlUshi, seen http://html5.org/parsing-tests/testrunner.htm already?","msgtype":"m.text"},"ts":1183640042000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"karlUshi, you might like it","msgtype":"m.text"},"ts":1183640043000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wonders if anyone really cares what input like &#4294967366; gets parsed into","msgtype":"m.emote"},"ts":1183640100000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"FFFD","msgtype":"m.text"},"ts":1183640160000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"U+FFFD","msgtype":"m.text"},"ts":1183640161000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Is it worth having tests for that kind of thing? (Or are there ones already?)","msgtype":"m.text"},"ts":1183640162000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(Firefox gets it wrong and says \"F\")","msgtype":"m.text"},"ts":1183640163000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I wonder why it does that","msgtype":"m.text"},"ts":1183640220000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"maybe a limit","msgtype":"m.text"},"ts":1183640221000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(and so does my non-serious not-really-implemented tokeniser)","msgtype":"m.text"},"ts":1183640222000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"we have tokenizer tests","msgtype":"m.text"},"ts":1183640223000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Probably by doing \"int n; ... n = n*10 + (next_char - '0')\" or something and not caring about overflow","msgtype":"m.text"},"ts":1183640280000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"looks like it's a limit of 1 0000 0000 base 16","msgtype":"m.text"},"ts":1183640281000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Opera and IE get it right","msgtype":"m.text"},"ts":1183640282000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"FF also parses &#4294967295; into #4294967295;","msgtype":"m.text"},"ts":1183640340000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"oops","msgtype":"m.text"},"ts":1183640400000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"doesn't expect this is a likely place for real-world interoperability concerns","msgtype":"m.emote"},"ts":1183640401000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I suppose that explains how much time reverse engineering costs and that it isn't really worth checking what other browsers do all the time","msgtype":"m.text"},"ts":1183640402000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if there's anything long about longdesc, it is the email threads","msgtype":"m.text"},"ts":1183640460000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":":p","msgtype":"m.text"},"ts":1183640461000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Philip`: that's why you should have an integer overflow guard in your loop that consumes NCRs","msgtype":"m.text"},"ts":1183640520000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"has one","msgtype":"m.emote"},"ts":1183640521000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I just have a TODO comment stuck in there :-)","msgtype":"m.text"},"ts":1183640522000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"and I have another similar comment telling me to implement the non-numeric entity things too","msgtype":"m.text"},"ts":1183640523000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: which programming language?","msgtype":"m.text"},"ts":1183640524000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Philip`: Ocaml?","msgtype":"m.text"},"ts":1183640580000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"but I'm not particularly interested in making things actually work at the moment","msgtype":"m.text"},"ts":1183640581000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"OCaml generating C++","msgtype":"m.text"},"ts":1183640582000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1183640583000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"(Also OCaml generating .dot files so I can make nice graphs of the tokeniser state transitions)","msgtype":"m.text"},"ts":1183640584000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"we solved it by having a try statement around the string to int conversion","msgtype":"m.text"},"ts":1183640585000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"            if (value < 0) {","msgtype":"m.text"},"ts":1183640640000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"                value = 0x110000; // Value above Unicode range but within int","msgtype":"m.text"},"ts":1183640641000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"                // range","msgtype":"m.text"},"ts":1183640642000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"            }","msgtype":"m.text"},"ts":1183640643000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"just wants to see what's possible when you have the tokeniser algorithm as a data structure that you can process, instead of being English text or unprocessable program code","msgtype":"m.emote"},"ts":1183640700000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(value is signed)","msgtype":"m.text"},"ts":1183640701000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Philip`, will you consider implementing all the other fancy stuff as well?","msgtype":"m.text"},"ts":1183641000000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"or just tokenizing?","msgtype":"m.text"},"ts":1183641001000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That depends on how impossible the rest of it looks :-)","msgtype":"m.text"},"ts":1183641240000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"by the time Hixie addresses hsivonen's comments nobody will have to think about it anymore :p","msgtype":"m.text"},"ts":1183641300000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The tokeniser is fairly straightforward, since you can just represent the whole thing as a dozen state variables and some functions that match certain states and have transitions into new states","msgtype":"m.text"},"ts":1183641301000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"now I think of it, that might make it too boring for some!","msgtype":"m.text"},"ts":1183641302000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(The tree construction looks more complex than that, though I haven't looked at it in any detail)","msgtype":"m.text"},"ts":1183641360000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"tree construction is actually similar","msgtype":"m.text"},"ts":1183641361000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"although currently it has this concept called insertion mode which makes it look more complicated","msgtype":"m.text"},"ts":1183641362000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"you can actually implement it as a bunch of states as well","msgtype":"m.text"},"ts":1183641363000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the difference being that you have some other set of variables and pass tokens around instead of characters","msgtype":"m.text"},"ts":1183641420000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Would I be right in thinking the only way the content model flag can change outside the tokeniser is when explicitly emitting a start tag?","msgtype":"m.text"},"ts":1183641480000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1183641540000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen, removing \"td\", \"th\" and \"tr\" from generate implied end tags does indeed not give any parse error differences","msgtype":"m.text"},"ts":1183641541000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen, removing \"p\", however, gives 45","msgtype":"m.text"},"ts":1183641600000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Philip`: it's just that start tags \"in body\" have a lot of stuff to type","msgtype":"m.text"},"ts":1183641660000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"is amazed at Robert's ability to not understand","msgtype":"m.emote"},"ts":1183641720000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"reaches the bogus comment state, and finds that it totally doesn't match his way of writing the algorithm","msgtype":"m.emote"},"ts":1183642080000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"markup open declaration did?","msgtype":"m.text"},"ts":1183642140000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"you should be able to implement those as functions I guess; separate from the states","msgtype":"m.text"},"ts":1183642200000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The problem is that it sounds like it needs to look backwards and know what happened before that state was reached","msgtype":"m.text"},"ts":1183642201000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"The markup declaration open state is just after the bogus comment state, so I haven't got that far yet :-)","msgtype":"m.text"},"ts":1183642260000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"don't you have a character queue or something?","msgtype":"m.text"},"ts":1183642380000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"then you just make sure the right chars are on the stack before switching to the state","msgtype":"m.text"},"ts":1183642440000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Philip`: you may find my impl useful to look at","msgtype":"m.text"},"ts":1183642560000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"zcorpan_, in case you missed it: http://html5.googlecode.com/svn/trunk/parser-tests/","msgtype":"m.text"},"ts":1183642860000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: saw it, cheers","msgtype":"m.text"},"ts":1183643040000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"Oh, I think my confusion comes from e.g. \"<?\" transitioning to the bogus comment state after consuming the '?', whereas \"<!x\" transitions before consuming the 'x', and the BCS can't tell the difference","msgtype":"m.text"},"ts":1183643100000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"doesn't it say \"unconsume\" somewhere?","msgtype":"m.text"},"ts":1183643160000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Not that I can see","msgtype":"m.text"},"ts":1183643280000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"but I can work around it by just moving the consumption around to the right places","msgtype":"m.text"},"ts":1183643281000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: I think Hixie cut corners when writing the spec. I had a bug there that the unit tests revealed","msgtype":"m.text"},"ts":1183643400000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Philip`: basically, you need to start filling the bogus comment buffer before you make the actual state transition","msgtype":"m.text"},"ts":1183643401000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"\"(If the comment was started by the end of the file (EOF), the token is empty.)\" - isn't it also empty if the comment was started by a > character?","msgtype":"m.text"},"ts":1183643580000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Hmm, I'll wait until later to sort out the details and make it actually work properly and pass the tests :-)","msgtype":"m.text"},"ts":1183643640000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(since the current implementation is totally not executable, which makes it hard to test)","msgtype":"m.text"},"ts":1183643641000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`, yeah, then it's also empty","msgtype":"m.text"},"ts":1183644240000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://canvex.lazyilluminati.com/misc/states.png - incomplete and quite possibly with bugs, but it looks kind of interesting","msgtype":"m.text"},"ts":1183645260000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"should probably skip all the EOF bits since they're not very interesting and they make the diagram too complex","msgtype":"m.emote"},"ts":1183645560000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"in the whole fallback content thread, has anyone actually given a use case for needing fallback beyond plain text?  All I've seen are unsupported claims that it's needed.","msgtype":"m.text"},"ts":1183645680000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Philip`: cool. the diagram makes the transitions look more complex than they actually are","msgtype":"m.text"},"ts":1183645740000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Philip`: in fact there are only two transitions that break a stack assumption","msgtype":"m.text"},"ts":1183645800000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: Is that two when not counting all the reconsume-EOF-in-the-data-state ones?","msgtype":"m.text"},"ts":1183645860000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Lachy: if you want to get rid of longdesc and move the essay about the Union Jack or the dress of Lord Cornwallis inline","msgtype":"m.text"},"ts":1183645861000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Philip`: reconsume whatever in data state works as a stack transition","msgtype":"m.text"},"ts":1183645920000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"(see my code :-)","msgtype":"m.text"},"ts":1183645921000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Philip`: just rewind the stack to the data state","msgtype":"m.text"},"ts":1183645922000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"will try to finish these bits while still untainted, and then look at the code ;-)","msgtype":"m.emote"},"ts":1183645923000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"hsivonen: that union jack example isn't particularly significant, since that description is completely inappropriate for how the flag was used.","msgtype":"m.text"},"ts":1183645980000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"(I'm not trying to do a practical implementation - mostly I just want pretty pictures and things)","msgtype":"m.text"},"ts":1183645981000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"html5lib and my code are under the MIT license, it's not like looking at AT&T code :-)","msgtype":"m.text"},"ts":1183645982000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I currently just want to represent the algorithm as described in the spec, disregarding the implementation details that everyone else worries about :-)","msgtype":"m.text"},"ts":1183646040000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"No commit-watchers mail since 28 June ... have there really been no changes, or is the list broken?","msgtype":"m.text"},"ts":1183646340000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Hixie is doing research. no changes","msgtype":"m.text"},"ts":1183646341000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1183646342000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1183646343000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: you there?","msgtype":"m.text"},"ts":1183646520000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"if you get a chance, can you look into removing from tests/test_parser.py the following line \"if testName == \"tests5\": continue # TODO\"?","msgtype":"m.text"},"ts":1183646640000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"ouch. the catch all end tag case \"in body\" has a set of 69 strings to test against...","msgtype":"m.text"},"ts":1183646700000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"perhaps the tokens should come with a clever bitfield after all... instead of just interning","msgtype":"m.text"},"ts":1183646820000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"or a lex sorted array with binary search. or something...","msgtype":"m.text"},"ts":1183646940000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Does Java let you do binary searches for (interned) strings based on something like a pointer, rather than slowly comparing characters?","msgtype":"m.text"},"ts":1183647240000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(I guess that might not be possible since the GC can move things around arbitrarily and won't maintain a consistent ordering, perhaps)","msgtype":"m.text"},"ts":1183647300000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: no, you only get to compare memory addresses for equality","msgtype":"m.text"},"ts":1183647420000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Philip`: however, I could have a hashtable that knew that all values are interned","msgtype":"m.text"},"ts":1183647480000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"for the time being, I'm treating anything that goes beyond interning name and doing \"foo\" == name || \"bar\" == name || ... as a premature optimization","msgtype":"m.text"},"ts":1183647540000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"wishes OCaml had better error reports than simply \"Syntax error\"","msgtype":"m.emote"},"ts":1183647720000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Oh, assuming there's never an EOF doesn't make the state transitions much simpler - there's only about three cases I can see where it makes a difference","msgtype":"m.text"},"ts":1183648320000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"hsivonen - is it true that currently with html5lib, given an arbitrary HTML document as source that it can construct a DOM from successfully, that DOM can't necessarily be re-serialized as well-formed XML?","msgtype":"m.text"},"ts":1183648980000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Or anybody?","msgtype":"m.text"},"ts":1183648981000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it is rare, but true","msgtype":"m.text"},"ts":1183649040000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"(I realize html5lib is not hsivonen's implementation...)","msgtype":"m.text"},"ts":1183649041000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"rubys - OK","msgtype":"m.text"},"ts":1183649042000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it is possible to have entity or attribute names that aren't simple names, it is possible for comments to have two consecutive dashes in them, it is possible for strings to contain form feeds or other values that are illegal in XML.","msgtype":"m.text"},"ts":1183649100000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1183649101000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"When I tried serialising a random collection of web pages as XML, a significant number (uh, I can't remember how much, but maybe 20% or so) became ill-formed XML","msgtype":"m.text"},"ts":1183649160000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"other things (like matching up open and close tags) are taken care of by html5lib, and so are the overwhelming majority of common errors.","msgtype":"m.text"},"ts":1183649161000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"20% surprises me.","msgtype":"m.text"},"ts":1183649162000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"are these public pages?  Can you share an example?","msgtype":"m.text"},"ts":1183649163000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"but hsivonen's implementation (backend of his conformance checker), by its nature, is inherently capable of producing well-formed XML?","msgtype":"m.text"},"ts":1183649280000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"is that true?","msgtype":"m.text"},"ts":1183649281000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I would think it'd need to be since he has XML tools in the toolchain for it","msgtype":"m.text"},"ts":1183649282000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"or maybe not","msgtype":"m.text"},"ts":1183649340000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I never looked at the examples in any detail, so I'm not sure what the issues were, though I remember a few were just because of <!---------->","msgtype":"m.text"},"ts":1183649341000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"http://www.toyota.com/ is an interesting one","msgtype":"m.text"},"ts":1183649342000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"since it has <spacer type\"block\" width=\"1\" height=\"1\"></spacer> which gets parsed as an attribute with a \" in its name","msgtype":"m.text"},"ts":1183649343000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"http://krijnhoetmer.nl/irc-logs/whatwg/20070507#l-581 - hmm, apparently it was 25%","msgtype":"m.text"},"ts":1183649400000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(just using the top thousand Yahoo search results for some boring word, if I remember correctly)","msgtype":"m.text"},"ts":1183649401000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"html5lib has a sanitizer that removes unsafe or unknown markup.  Our goal is to make that bullet proof.","msgtype":"m.text"},"ts":1183649460000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"I don't know how many of those issues were just caused by the html5lib toxml() being not very good","msgtype":"m.text"},"ts":1183649461000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(Also I think some of the issues might have been that I didn't handle character encoding properly)","msgtype":"m.text"},"ts":1183649520000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"If you are interested in producing XML, I would recommend the dom treebuilder","msgtype":"m.text"},"ts":1183649640000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"When I was looking at those things before, I was mostly interested in analysing real HTML documents and just avoiding the slowness of repeatedly parsing with html5lib by caching them in a nicer serialised format, but it seems XML isn't very suitable for that :-(","msgtype":"m.text"},"ts":1183649880000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"what type of analysis?","msgtype":"m.text"},"ts":1183649881000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"Mainly looking for common usage of certain elements/attributes, like in http://canvex.lazyilluminati.com/misc/copyright.html and http://canvex.lazyilluminati.com/misc/summary.html","msgtype":"m.text"},"ts":1183650000000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"your requirements are terribly unique, and I would like to work towards making a bullet proof conversion (possibly lossy in cases like spaces in attribute names) possible, and would appreciate test cases towards that end.","msgtype":"m.text"},"ts":1183650001000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"(and theoretically any other statistics on HTML documents, except I got distracted before getting around to scaling the system up to work on a reasonable sample)","msgtype":"m.text"},"ts":1183650002000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"((for quite small values of 'reasonable'))","msgtype":"m.text"},"ts":1183650060000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"his requirements are very relevant for the work the HTML WG and WHATWG are doing (fwiw)","msgtype":"m.text"},"ts":1183650300000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"although they should be met by having a fast html5lib","msgtype":"m.text"},"ts":1183650301000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I expect I'll get back to this analysis thing at some point, and I'll see if I can extract the cases that cause problems (since I expect it would be nice to be able to use standard XML tools on random documents safely, without having to stick an HTML frontend onto them)","msgtype":"m.text"},"ts":1183650302000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"a fast html5ib ... which ultimately means a port to C","msgtype":"m.text"},"ts":1183650360000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"annevk: can you scroll back and see my question about tests5?","msgtype":"m.text"},"ts":1183650361000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"yeah, saw that","msgtype":"m.text"},"ts":1183650362000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"thought they already worked","msgtype":"m.text"},"ts":1183650420000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"poners","msgtype":"m.emote"},"ts":1183650421000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ponders*","msgtype":"m.emote"},"ts":1183650422000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that test passes, except for error checks, which you just enabled.","msgtype":"m.text"},"ts":1183650423000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"no error is produced on EOF","msgtype":"m.text"},"ts":1183650424000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"I'm trying to write the easy part of the parsing algorithm in a language-agnostic manner, so it'll be nice if that works out :-)","msgtype":"m.text"},"ts":1183650425000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"there should be no error either","msgtype":"m.text"},"ts":1183650540000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"seems like a simple mistake in the test","msgtype":"m.text"},"ts":1183650541000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if the tests were changed, then 'next if test_name == \"tests5\" # TODO' can be removed from ruby/tests/test_parser.rb too","msgtype":"m.text"},"ts":1183650660000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"yeah, did all that a few minutes ago","msgtype":"m.text"},"ts":1183650720000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"'all that'?  You changed the ruby test?","msgtype":"m.text"},"ts":1183650780000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"oh, ruby","msgtype":"m.text"},"ts":1183650781000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sorry","msgtype":"m.text"},"ts":1183650782000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I haven't played with ruby at all","msgtype":"m.text"},"ts":1183650783000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'd work on a C port, but only if we had more people who were interested in maintaining the code.  This business of multiple people making changes to the Python code and Sam ports the changes won't scale much further.","msgtype":"m.text"},"ts":1183650900000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"if we have a C version we can just make Python and Ruby bindings, no?","msgtype":"m.text"},"ts":1183651020000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that could certainly be done","msgtype":"m.text"},"ts":1183651080000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"It's nice to have pure Python/Ruby/etc versions when people are unable/unwilling to compile and install C modules","msgtype":"m.text"},"ts":1183651081000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"can't you make some .pyc version people can just use?","msgtype":"m.text"},"ts":1183651140000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"isn't really up to speed with C > Python mappings and how to work with them","msgtype":"m.emote"},"ts":1183651141000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(hence things like XML::Sax::PurePerl)","msgtype":"m.text"},"ts":1183651200000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I think you probably need a .dll (or .so or whatever) if you want to use a C library in Python, and that will be specific to a certain processor architecture and OS and maybe other system libraries, which is a pain when people can't compile easily","msgtype":"m.text"},"ts":1183651320000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"hmm, fair enough","msgtype":"m.text"},"ts":1183651321000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"on the other hand, 99.99% of the people would choose to use a C binding to their favorite language over a native binding.","msgtype":"m.text"},"ts":1183651380000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"http://lists.w3.org/Archives/Public/www-archive/2007Jul/0010.html ...","msgtype":"m.text"},"ts":1183651440000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rubys, people who care one bit about performance, indeed","msgtype":"m.text"},"ts":1183651500000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"also, C bindings to an HTML5 parser should just be included by default in Python, Ruby, Java, etc.","msgtype":"m.text"},"ts":1183651560000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, maybe not Java","msgtype":"m.text"},"ts":1183651561000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Perl too :-)","msgtype":"m.text"},"ts":1183651620000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I'd also love to see the C parser actually used by products like Opera and/or Firefox.","msgtype":"m.text"},"ts":1183651621000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"they could have their own treebuilders, of course; but the parser could be the same.","msgtype":"m.text"},"ts":1183651622000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"wishes he could remember how to compute transitive closures (in a functional language)","msgtype":"m.emote"},"ts":1183651740000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"from what I heard from WebKit and Firefox architecture that might be quite tricky","msgtype":"m.text"},"ts":1183651800000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm not familiar with WebKit, but I have taken a peek at Firefox.  Don't see why it would be tricky (I know, I know, famous last words...)","msgtype":"m.text"},"ts":1183651860000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"needs /ignore for e-mail clients","msgtype":"m.emote"},"ts":1183651920000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rubys, maybe it's possible, they have done it for the XML parser after all...","msgtype":"m.text"},"ts":1183651980000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"exactly... there is a part in the logic where you take in an input stream and produce a custom DOM implementation.  Obviously, the input stream and DOM may vary from product to product, as would the tokenizer/parser error handing, but the logic could be pluggable.","msgtype":"m.text"},"ts":1183652100000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"Imagine how nice it would be if Safari, Firefox, and Opera used the SAME tokenizer/parser?","msgtype":"m.text"},"ts":1183652160000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"hmm, no parsing bugs to exploit!","msgtype":"m.text"},"ts":1183652161000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"They'd probably all use slightly different versions with different bug fixes, so it wouldn't be entirely perfect","msgtype":"m.text"},"ts":1183652162000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"perfect?  No.  But a dramatic improvement over today.","msgtype":"m.text"},"ts":1183652220000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"And each vendor is going to have to invest some work effort towards html5 compliance.  This should reduce the work for everybody.","msgtype":"m.text"},"ts":1183652280000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"Are vendors planning to replace their existing HTML parser with a shiny new HTML5 one, or are they planning to just receive lots of bug reports and make lots of small fixes until they pass most of the tests, or are they not planning anything yet?","msgtype":"m.text"},"ts":1183652700000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I think WebKit is planning on fixing bugs","msgtype":"m.text"},"ts":1183653060000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"they're pretty close for most cases anyway","msgtype":"m.text"},"ts":1183653061000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"dunno about other browsers","msgtype":"m.text"},"ts":1183653062000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm, the state transition graph gets a bit big when I split out all the different content models","msgtype":"m.text"},"ts":1183653420000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"http://canvex.lazyilluminati.com/misc/states2.png","msgtype":"m.text"},"ts":1183654380000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"ouch","msgtype":"m.text"},"ts":1183654440000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"HTML tokenizing. More trivial than it looks.\"","msgtype":"m.text"},"ts":1183654441000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think that's overestimating the possible transitions a little, since it assumes that whenever a tag token (either start or end) is emitted it could end up in any of the four content models","msgtype":"m.text"},"ts":1183654620000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"At least there's the nice DataState PLAINTEXT black hole at the bottom","msgtype":"m.text"},"ts":1183654680000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1183654681000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"In the Live DOM Viewer in Internet Explorer the <!> sequence causes the DOM view to turn almost blank...","msgtype":"m.text"},"ts":1183655340000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It looks like my state transition thing agrees with the spec's comments about \"This can only happen if the content model flag is set to the PCDATA state\" etc, except for the bogus comment state where you have to do lots of slightly convoluted thinking to work out that it's correct","msgtype":"m.text"},"ts":1183656600000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"though, should the (non-bogus) comment states state that they can only happen when PCDATA, or is that obvious when left unstated?","msgtype":"m.text"},"ts":1183656601000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(I suppose it should also be obvious that the only state you can be in with PLAINTEXT is the data state)","msgtype":"m.text"},"ts":1183657140000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I'm not sure why the other cases actually state it, to be honest","msgtype":"m.text"},"ts":1183657200000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It makes it just more confusing for the cases where it's not","msgtype":"m.text"},"ts":1183657201000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it's because comments where the leading \"!--\" and trailing \"--\" don't fit, you can't read .nodeValue in ie","msgtype":"m.text"},"ts":1183657560000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"annevk: i solved that by using a try/catch in dom2string","msgtype":"m.text"},"ts":1183657561000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"annevk: and emitting \"<!--  -->\" if reading .nodeValue fails","msgtype":"m.text"},"ts":1183657620000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1183657621000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ooh, neat, the W3C validator says <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"><title></title><table datapagesize=cheese><tr><td></table> is valid","msgtype":"m.text"},"ts":1183657680000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"hehe","msgtype":"m.text"},"ts":1183657681000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"would be cool if the live dom viewer had an option to show the dom using dom2string_recursive","msgtype":"m.text"},"ts":1183657682000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"Hixie: yt?","msgtype":"m.text"},"ts":1183657800000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"zcorpan_, the real feature would be to make a mashup of http://james.html5.org/parsetree.html and your script","msgtype":"m.text"},"ts":1183658040000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan_, maybe just for the text input box","msgtype":"m.text"},"ts":1183658041000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The tokeniser is much easier when I don't worry about actually implementing it, since I can just add a command like AppendHyphenToCommentToken and use it without caring about what it does","msgtype":"m.text"},"ts":1183662840000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"but I guess it'll all catch up with me when I do get around to the implementation bit :-(","msgtype":"m.text"},"ts":1183662900000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: you're writing pseudo-code? :)","msgtype":"m.text"},"ts":1183663140000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"Yes :-)","msgtype":"m.text"},"ts":1183663320000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(in a form that can be transformed into real code)","msgtype":"m.text"},"ts":1183663380000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(but that just moves some of the work into the code that does the transformation)","msgtype":"m.text"},"ts":1183663381000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(but it's a good excuse to learn OCaml anyway)","msgtype":"m.text"},"ts":1183663440000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"http://canvex.lazyilluminati.com/misc/states3.png - now with added doctype states, so I think it's got everything (and probably more bugs than before)","msgtype":"m.text"},"ts":1183664520000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Oops, that's still got the EOF transitions...","msgtype":"m.text"},"ts":1183664580000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Now it doesn't, so it's a bit prettier","msgtype":"m.text"},"ts":1183664640000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Actually, I should probably tell it about parse errors too, so I can see if it's much simpler for conforming content","msgtype":"m.text"},"ts":1183664940000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"seems the algorithm in https://bugzilla.mozilla.org/attachment.cgi?id=188040 only has one flaw, which is before step 1: match the value against the list of color keywords","msgtype":"m.text"},"ts":1183665000000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"zcorpan_, nice interop mess","msgtype":"m.text"},"ts":1183665120000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"now i'll just see which keywords are supported, and if that differs from the keywords supported in css","msgtype":"m.text"},"ts":1183665180000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"http://canvex.lazyilluminati.com/misc/states4.png - hmm, it does look much cleaner when you don't allow parse errors","msgtype":"m.text"},"ts":1183665540000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"wow. ie supports lightgrey but not lightgray. quite the opposite to all other gr(a|e)ys","msgtype":"m.text"},"ts":1183665780000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"Philip`: you can't get into the bogus states if you don't allow parse errors, right?","msgtype":"m.text"},"ts":1183665840000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"http://en.wikipedia.org/wiki/HTML_colors says lightgrey too","msgtype":"m.text"},"ts":1183665841000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"could there be other keywords supported that aren't listed in css3-color ?","msgtype":"m.text"},"ts":1183666020000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"zcorpan_: Yep - there's nothing leading into those states in the diagram, but I didn't bother stripping them out","msgtype":"m.text"},"ts":1183666021000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: ok","msgtype":"m.text"},"ts":1183666022000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"zcorpan_: I believe I looked in IE's .exe for colour names, and it didn't have any that weren't the standard set which CSS3 and every other browser includes","msgtype":"m.text"},"ts":1183666080000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: ok. thanks","msgtype":"m.text"},"ts":1183666081000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"Oh, that was IE3","msgtype":"m.text"},"ts":1183666140000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"but I don't think they've changed it since then","msgtype":"m.text"},"ts":1183666200000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"since they just copied it from NN2","msgtype":"m.text"},"ts":1183666201000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: What if you colored the transition arrows depending on whether the transition requires a parse error or not?","msgtype":"m.text"},"ts":1183666260000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"might be interesting to test DarkSeaGreen","msgtype":"m.text"},"ts":1183666261000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"whether IE has the X11 or .Net impl","msgtype":"m.text"},"ts":1183666262000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"got that from the wikipedia page","msgtype":"m.emote"},"ts":1183666263000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: darkseagreen is in css3-color","msgtype":"m.text"},"ts":1183666320000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"Dashiva: That sounds worth doing","msgtype":"m.text"},"ts":1183666321000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1183666322000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"though what about transitions that can be both parse errors and not?","msgtype":"m.text"},"ts":1183666323000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"a third color, or both?","msgtype":"m.text"},"ts":1183666380000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"Hmm, I'll just draw two arrows, because then I won't have to change my code :-)","msgtype":"m.text"},"ts":1183666440000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"some more arrows wouldn't hurt","msgtype":"m.text"},"ts":1183666441000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it's not always clear what the direction is :)","msgtype":"m.text"},"ts":1183666442000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Maybe put an arrowhead on the middle of the arrow too","msgtype":"m.text"},"ts":1183666500000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"Hmph, colour PNGs are huge","msgtype":"m.text"},"ts":1183666560000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"annevk: ie uses x11","msgtype":"m.text"},"ts":1183666620000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"http://canvex.lazyilluminati.com/misc/states5.png","msgtype":"m.text"},"ts":1183666621000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Hmm, I don't think I can make Graphviz draw arrow heads except at the end","msgtype":"m.text"},"ts":1183666800000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"zcorpan_, so how do you test which color is used? some color picker?","msgtype":"m.text"},"ts":1183666920000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: .bgcolor returns the rgb color","msgtype":"m.text"},"ts":1183666980000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"er, .bgColor","msgtype":"m.text"},"ts":1183667040000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"cool, automated testing","msgtype":"m.text"},"ts":1183667041000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://simon.html5.org/test/html/parsing/color-attributes/keywords/","msgtype":"m.text"},"ts":1183667160000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"i haven't sent anything to the list about color attributes yet, have i","msgtype":"m.text"},"ts":1183667280000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"prolly not: http://www.google.com/search?q=inurl:whatwg-whatwg+color","msgtype":"m.text"},"ts":1183667400000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wonders if he could automatically generate tests to cover all the possible state transitions","msgtype":"m.emote"},"ts":1183667460000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"in http://simon.html5.org/test/html/parsing/color-attributes/ you can change Opera to none too","msgtype":"m.text"},"ts":1183667461000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Philip`, that'd be most useful","msgtype":"m.text"},"ts":1183667462000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Philip`, format: http://html5lib.googlecode.com/svn/trunk/testdata/tokenizer/ pretty please :)","msgtype":"m.text"},"ts":1183667520000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ah. cool.","msgtype":"m.text"},"ts":1183667521000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"Philip`, or maybe in the tree construction format...","msgtype":"m.text"},"ts":1183667580000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Philip`, that would prolly be useful too especially for testing browsers","msgtype":"m.text"},"ts":1183667581000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The tree construction format probably wouldn't work too well when I don't have a tree constructor, unless I'm missing some point...","msgtype":"m.text"},"ts":1183667640000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"ah, if you want to debug your own code, then no","msgtype":"m.text"},"ts":1183667700000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah, okay - I think it would be nice to have something I could use for just tokeniser tests","msgtype":"m.text"},"ts":1183667760000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"then use the funky json format :)","msgtype":"m.text"},"ts":1183667761000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wonder if that can be used in some meaningfull way on browsers too... prolly not","msgtype":"m.text"},"ts":1183667820000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"though I don't know how to cope with the issue that the tree construction stage can affect the tokeniser's content model, when there's no tree construction stage","msgtype":"m.text"},"ts":1183667821000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"see escapeFlag.test and contentModelFlags.test","msgtype":"m.text"},"ts":1183667822000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Incidentally, \"content model flag\" is a confusing name since most flags don't have four states...","msgtype":"m.text"},"ts":1183667823000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Oh, right - that looks useful :-)","msgtype":"m.text"},"ts":1183667880000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Shouldn't the test format include attributes on end tags, since the tokeniser is meant to emit them?","msgtype":"m.text"},"ts":1183668060000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"the tokeniser doesn't emit them","msgtype":"m.text"},"ts":1183668120000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie, those stats on AAA are useful! thanks","msgtype":"m.text"},"ts":1183668180000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"Start and end tag tokens have a tag name and a list of attributes, each of which has a name and a value.\" \"When an end tag token is emitted with attributes, that is a parse error.\" - it sounds like they are emitted","msgtype":"m.text"},"ts":1183668181000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"oh, ok","msgtype":"m.text"},"ts":1183668240000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: which ones?","msgtype":"m.text"},"ts":1183668241000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, the ones you pasted in IRC earlier; how many times duplication is hit etc.","msgtype":"m.text"},"ts":1183668242000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"although I'd love to see more detail :)","msgtype":"m.text"},"ts":1183668300000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah yes","msgtype":"m.text"},"ts":1183668301000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'll be posting more in due course","msgtype":"m.text"},"ts":1183668302000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"jgraham, I've been thinking about removing all the classes in html5parser.py","msgtype":"m.text"},"ts":1183669920000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"having said that, it hasn't been more than thinking","msgtype":"m.text"},"ts":1183669921000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm not sure if we would actually gain anything from removing them and moving to a bunch of if/else statements as opposed to dictionary based method invocations","msgtype":"m.text"},"ts":1183669980000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what we have now might actually be faster","msgtype":"m.text"},"ts":1183669981000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"why remove them then?","msgtype":"m.text"},"ts":1183669982000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"annevk: I would image waht we have now is faster","msgtype":"m.text"},"ts":1183669983000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(although I would need metrics to be sure, of course)","msgtype":"m.text"},"ts":1183670040000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I think the time would be better spent on Chtml5lib","msgtype":"m.text"},"ts":1183670041000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"prolly","msgtype":"m.text"},"ts":1183670042000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If I did the port, who would contribute to it?","msgtype":"m.text"},"ts":1183670100000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"rubys: I guess it would be one way for me to finally learn C :)","msgtype":"m.text"},"ts":1183670101000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I took a look at it, and porting it to C++ would probably take about a week.  To C would be another week.","msgtype":"m.text"},"ts":1183670160000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"if I learn how to work with C on Ubuntu (besides learning to work with C in general) I would probably contribute","msgtype":"m.text"},"ts":1183670161000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(which is a way of saying I would love to contribute fixes but I don't feel confident in designing it)","msgtype":"m.text"},"ts":1183670162000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"not sure how much time I would invest on the python version afterwards","msgtype":"m.text"},"ts":1183670163000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I would simply port the existing design.  After it is working, it could be optimized, refactored, etc.","msgtype":"m.text"},"ts":1183670164000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"in that case why not profile the python version and move slow parts to C?","msgtype":"m.text"},"ts":1183670220000,"senderName":"bewest","senderId":"bewest@irc"},
{"content":{"body":"hmm, how are we going to handle <noscript>?","msgtype":"m.text"},"ts":1183670221000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bewest, how is that better?","msgtype":"m.text"},"ts":1183670280000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That sounds great to me; I simply don't have enough C experience to know how best to implement things that are currently e.g. lists in python in C","msgtype":"m.text"},"ts":1183670281000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"we can prolly steal some ideas from Hixie's and hsivonen's impl","msgtype":"m.text"},"ts":1183670282000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: maybe it's not :/","msgtype":"m.text"},"ts":1183670283000,"senderName":"bewest","senderId":"bewest@irc"},
{"content":{"body":"C++ has a standard library.  Going to C next would mean reimplementing those concepts.","msgtype":"m.text"},"ts":1183670284000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"bewest: It's not like there's one slow bit, it's the overhad of doing things many times","msgtype":"m.text"},"ts":1183670285000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1183670286000,"senderName":"bewest","senderId":"bewest@irc"},
{"content":{"body":"e.g. many function calls","msgtype":"m.text"},"ts":1183670287000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I'd be interested to see if my C++ tokeniser implementation could actually work in practice","msgtype":"m.text"},"ts":1183670340000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: the O'Caml one?","msgtype":"m.text"},"ts":1183670341000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"rubys, if we're going to do it C might be better if we get more detailed control over things like the inputstream","msgtype":"m.text"},"ts":1183670342000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: Yes","msgtype":"m.text"},"ts":1183670343000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Question: scripting is enabled or disabled?","msgtype":"m.text"},"ts":1183670344000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"we don't have any tests for <noscript> atm...","msgtype":"m.text"},"ts":1183670345000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(The C++-generating part is totally broken now, but http://canvex.lazyilluminati.com/misc/states5.png is generated from exactly the same data as the C++ tokeniser would be)","msgtype":"m.text"},"ts":1183670400000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I'll assume that scripting is enabled for now","msgtype":"m.text"},"ts":1183670580000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I suppose at some point we can provide a switch and enable/disable tests conditionally","msgtype":"m.text"},"ts":1183670581000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Could the test format be made to handle scripts modifying the input stream?","msgtype":"m.text"},"ts":1183670700000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"You couldn't really expect parsers to all have script interpreters, but you could define that the tests can have <script>document.write(\"<p>\")</script> (for some arbitrary JSON-encoded string) and the test harness can push those strings back into the input stream, to make sure the parser copes properly","msgtype":"m.text"},"ts":1183670820000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"at least for tree construction that's feasible","msgtype":"m.text"},"ts":1183671120000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I was thinking of maybe offering #document-scripting-disabled at some point which provides an alternate tree and prolly also #errors-scripting-disabled","msgtype":"m.text"},"ts":1183671121000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"just so everyone is aware and doesn't wonder if i died or something, i'm going to be on vacation for 3 weeks starting sunday","msgtype":"m.text"},"ts":1183671180000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I'll make sure to ask if you've died.","msgtype":"m.text"},"ts":1183671181000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hixie: have fun :)","msgtype":"m.text"},"ts":1183671240000,"senderName":"hasather","senderId":"hasather@irc"},
{"content":{"body":"i'll try! :-)","msgtype":"m.text"},"ts":1183671241000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"more seriously, where are you going?","msgtype":"m.text"},"ts":1183671242000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"europe, east coast, various places around there","msgtype":"m.text"},"ts":1183671243000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"apparently spending a lot of time in layovers at schipol","msgtype":"m.text"},"ts":1183671300000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"which doesn't bode well for my luggage","msgtype":"m.text"},"ts":1183671301000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah, it does that to you","msgtype":"m.text"},"ts":1183671302000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm probably not getting of of the UK this summer","msgtype":"m.text"},"ts":1183671360000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Me neither (although I have been to various conferences abroad)","msgtype":"m.text"},"ts":1183671361000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I'm going off down to Cambridge, but that's it. Probably going to Paris with my sister + her husband over the October holidays, though","msgtype":"m.text"},"ts":1183671420000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I assure you that Cambridge is lovely in every way. As long as you don't like hills. Or even slight rises.","msgtype":"m.text"},"ts":1183671480000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"And, preferably, have a thing for tourists and punt touts","msgtype":"m.text"},"ts":1183671481000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"my grandmother lives in Cambridge, I've been plenty of times. Doesn't seem that hilly to someone from Scotland, though.","msgtype":"m.text"},"ts":1183671482000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I should try actually punting again…","msgtype":"m.text"},"ts":1183671540000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"It's really not that hilly. That why you can't like hills if you want to like Cambridge","msgtype":"m.text"},"ts":1183671541000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"wants to move away just to get some hills","msgtype":"m.emote"},"ts":1183671542000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: come here!","msgtype":"m.text"},"ts":1183671543000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"[Fife]","msgtype":"m.text"},"ts":1183671600000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Fife would be nice. How are the employment opportunities though?...","msgtype":"m.text"},"ts":1183671660000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"No idea. I'm too young to know such things :)","msgtype":"m.text"},"ts":1183671720000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"And I, sadly, am almost old enough to have to care :(","msgtype":"m.text"},"ts":1183671721000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"goes back to showing how young he is by looking up university entrance requirements","msgtype":"m.emote"},"ts":1183671780000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I feel old now","msgtype":"m.text"},"ts":1183671781000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"You have to put up with all the students in Cambridge too :-p","msgtype":"m.text"},"ts":1183672200000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"hmmm… AAAAB at the min. for Higher entrance into Oxford","msgtype":"m.text"},"ts":1183672260000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"marks English as the B","msgtype":"m.emote"},"ts":1183672261000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"though I suppose they're usually outnumbered by tourists","msgtype":"m.text"},"ts":1183672262000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: the terms aren't overly long at Cam/Oxf","msgtype":"m.text"},"ts":1183672263000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"3 * 8 weeks, with three months off for the summer vacation :-)","msgtype":"m.text"},"ts":1183672320000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: which gives plenty of time for tourists to rule supreme :)","msgtype":"m.text"},"ts":1183672321000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(I couldn't myself remember whether it was 8v10 or 10v12)","msgtype":"m.text"},"ts":1183672322000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"It's nice during the exam term when they stop all the tourists coming into the colleges","msgtype":"m.text"},"ts":1183672380000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I don't think I've ever been there at the time, due to school","msgtype":"m.text"},"ts":1183672440000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(Er, but I have no idea how many colleges do that)","msgtype":"m.text"},"ts":1183672441000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(and nowadays I have exams at the same time)","msgtype":"m.text"},"ts":1183672442000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Philip`: all do, IIRC","msgtype":"m.text"},"ts":1183672443000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Philip`: the quatity tourits+students is roughly conserved over the whole year","msgtype":"m.text"},"ts":1183672620000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"cute, this http://triin.net/2006/06/12/Coding_practices_of_web_pages page refers to my 2005-12 study","msgtype":"m.text"},"ts":1183672680000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"wow, the numbers he gets are very similar to the numbers i got in that study","msgtype":"m.text"},"ts":1183672740000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ncie","msgtype":"m.text"},"ts":1183672741000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"nice","msgtype":"m.text"},"ts":1183672742000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(comparing http://code.google.com/webstats/2005-12/pages.html to http://triin.net/2006/06/12/HTML)","msgtype":"m.text"},"ts":1183672743000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"even the oddities are present in both studies","msgtype":"m.text"},"ts":1183672800000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's awesome","msgtype":"m.text"},"ts":1183672801000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"MikeSmith: my Java impl has configurable XML 1.0 compat","msgtype":"m.text"},"ts":1183673460000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"MikeSmith: for various features you can choose to be conforming to HTML5 (and potentially violate XML 1.0), not to violate XML 1.0 by treating violations as fatal errors or not violate XML 1.0 by being non-conforming to HTML 5 and making infoset-altering coercions","msgtype":"m.text"},"ts":1183673580000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"rubys: it might be a good idea to do an independent implementation in C. I believe Mike Day has already started one. I chose to do an independent implementation in Java using only test cases from html5lib in order to make a library that makes the most of Java instead of trying to map Pythonic stuff to Java","msgtype":"m.text"},"ts":1183673700000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen - thanks for the info","msgtype":"m.text"},"ts":1183674180000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: to elaborate a bit: the SAX interface makes it possible for me to violate the interface contract in a way that exposes all of HTML5 in a way that may violate XML 1.0. The XOM interface, by design, won't allow it. When using a DOM impl meant for XML, some of the violation may not pass, either.","msgtype":"m.text"},"ts":1183674540000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"MikeSmith: so the non-XML stuff will be available through SAX (which I'm treating as the native interface) and custom DOM impls if someone cares to make one","msgtype":"m.text"},"ts":1183674600000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: the Ruby implementation is meant to make the most of Ruby, and diverges in a number of significant ways.","msgtype":"m.text"},"ts":1183674840000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"I did use the Python implementation as a starting point, but only as that, and only because it saved me some time.","msgtype":"m.text"},"ts":1183674841000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"rubys: ok. anyway, I suggest pinging Mike Day to avoid duplicating what he has already been doing","msgtype":"m.text"},"ts":1183674900000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"that's why I've been advocating putting implementations into one place (html5lib)... so as to minimize the \"search time\" it takes to find out the actual current state of an implementation.","msgtype":"m.text"},"ts":1183674960000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"what is the license, for example, of Mike's work?","msgtype":"m.text"},"ts":1183675020000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"rubys: the reason why I put the Java impl in a different repo is to keep it together with the rest of the conformance checker which in turn is there in order to keep it together with the schema project","msgtype":"m.text"},"ts":1183675080000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"rubys: MIT/expat, IIRC","msgtype":"m.text"},"ts":1183675081000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"rubys: MIT/expat seems to be the convention for HTML5 parsers :-)","msgtype":"m.text"},"ts":1183675140000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"... eventually it will likely no longer be \"the\" (as in \"the only\") Java implementation.  :-)","msgtype":"m.text"},"ts":1183675141000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"rubys: do you mean because of the repo choice or in general?","msgtype":"m.text"},"ts":1183675200000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"the two parsers that are in html5 have essentially zero required dependencies, and very few optional dependencies.  I'd like to see a similar effort in PHP, Java, C#, and C.","msgtype":"m.text"},"ts":1183675320000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"rubys: my Java impl depends on a couple of my utility classes and ICU4J","msgtype":"m.text"},"ts":1183675380000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"rubys: putting the utility classes in one jar with the parser is not a big deal","msgtype":"m.text"},"ts":1183675381000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"i tried downloading it once.  that was not the impression I got.  But perhaps I was wrong.","msgtype":"m.text"},"ts":1183675382000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"rubys: making ICU4J optional for reduced correctness is not a big deal, either","msgtype":"m.text"},"ts":1183675440000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"rubys: do you mean you downloaded the parser that I'm currently working on or the conformance checker way back when you mentioned it in your blog comments","msgtype":"m.text"},"ts":1183675441000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"way back when","msgtype":"m.text"},"ts":1183675500000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"rubys: when my parser implementation is in a state where it can actually be used, I intend to offer a binary jar that doesn't require you to run the whole conformance checker build","msgtype":"m.text"},"ts":1183675501000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"(and the conformance checker build is now much easier, too)","msgtype":"m.text"},"ts":1183675502000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"rubys: the parser I'm now writing is not the prototype parser you saw way back when","msgtype":"m.text"},"ts":1183675560000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Cool.  Is there a single place where implementations can be found?","msgtype":"m.text"},"ts":1183675561000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"If not, can we make such a list on http://wiki.whatwg.org/wiki/ ?","msgtype":"m.text"},"ts":1183675620000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"rubys: dunno if the WHATWG wiki is up to date","msgtype":"m.text"},"ts":1183675621000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"rubys: in any case, I suggest that we link to each other whenever someone makes something runnable in a new language","msgtype":"m.text"},"ts":1183675622000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"(my tree builder is not runnable just yet)","msgtype":"m.text"},"ts":1183675680000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"How about this: I'll update html5lib to point to http://wiki.whatwg.org/wiki/Implementations","msgtype":"m.text"},"ts":1183675681000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"makes sense","msgtype":"m.text"},"ts":1183675682000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"svn co http://svn.versiondude.net/whattf/htmlparser/trunk/ htmlparser","msgtype":"m.text"},"ts":1183675683000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"in case you are interested","msgtype":"m.text"},"ts":1183675684000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"depends on the util module in the same repo, ICU4J and Java5","msgtype":"m.text"},"ts":1183675740000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"are there any tests?","msgtype":"m.text"},"ts":1183675800000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"rubys: you need to check out html5lib separately to get test data","msgtype":"m.text"},"ts":1183675860000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"rubys: there are test harnesses for running html5lib encoding tests and tokenization tests","msgtype":"m.text"},"ts":1183675861000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"(tree builder harness will follow in due course)","msgtype":"m.text"},"ts":1183675862000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"this does look like the type of parser I was describing","msgtype":"m.text"},"ts":1183675920000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"Love the README.  (Seriously)","msgtype":"m.text"},"ts":1183675921000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"good","msgtype":"m.text"},"ts":1183675922000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"well, it isn't runnable, yet","msgtype":"m.text"},"ts":1183675980000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"checks in a more positive README","msgtype":"m.emote"},"ts":1183676040000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I wasn't being sarcastic, I was serious.  I prefer truth in labeling over marketing any day.","msgtype":"m.text"},"ts":1183676041000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"'s tokeniser now works correctly on HTML documents that do not have any <, > or & in them","msgtype":"m.emote"},"ts":1183676100000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(Well, it doesn't handle non-ASCII characters properly either)","msgtype":"m.text"},"ts":1183676160000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"congratulates Philip`","msgtype":"m.emote"},"ts":1183676161000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"Philip`: is your tokenizer \"cat\"?","msgtype":"m.text"},"ts":1183676280000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"(Do the html5lib tokeniser tests intentionally omit the end-of-file token?)","msgtype":"m.text"},"ts":1183676340000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: so it seems","msgtype":"m.text"},"ts":1183676341000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Philip`: End of file token is implied by \"no more tokens\". Is there some reason to make it explicit?","msgtype":"m.text"},"ts":1183676460000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"rubys: I'm committed to providing buffered (correct) SAX, true streaming (potentially incorrect in non-conforming cases) SAX, DOM and XOM support. dom4j support should come for free with DOM support. JDOM support should be easy once those are done. True streaming StAX is intentionally not a goal. Tree-buffered StAX will be possible but not my personal interest.","msgtype":"m.text"},"ts":1183676461000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"othermaciej: It's about as useful as cat at the moment :-)","msgtype":"m.text"},"ts":1183676520000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"hsivonen: my only remaining concern is that it is a single person project.  Communities tend to outlive individuals.","msgtype":"m.text"},"ts":1183676580000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"rubys: I welcome contributions under the same license.","msgtype":"m.text"},"ts":1183676581000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"jgraham: I guess not, assuming there's no way to generate more tokens after the end-of-file token (which I think is true, but not entirely obvious)","msgtype":"m.text"},"ts":1183676582000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"but that's not a today concern, you've already addressed my bigger concerns.","msgtype":"m.text"},"ts":1183676583000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"I just need to fix my token-stream-serialiser to omit the end-of-file one...","msgtype":"m.text"},"ts":1183676640000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"rubys: also, it seems to me that it is a good idea to have something that runs before building a community","msgtype":"m.text"},"ts":1183676641000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: I've have rather mixed experience with that: http://search.yahoo.com/search?p=%22good+ideas+and+bad+code+build+communities%2C+the+other+three+combinations+do+not%22","msgtype":"m.text"},"ts":1183676700000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"the best counter example I know of is Xalan.","msgtype":"m.text"},"ts":1183676701000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"Great code.  Smart - very smart - developers.  No community.","msgtype":"m.text"},"ts":1183676702000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"rubys: basically, my problem is that I don't know how to make the kind of commitments that I need to make in order to get paid for this and factor in the uncertainty (at this point) expectations of community","msgtype":"m.text"},"ts":1183676760000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"what commitments do you think html5lib has behind it?  To my eyes, it has the exact right mix of good ideas and bad code (<smirk>) to be successful.","msgtype":"m.text"},"ts":1183676880000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"rubys: I've tried to be open about my plans, but I haven't published design docs, because I don't know if anyone would care to read them. I'd be happy to answer any questions on my design, though.","msgtype":"m.text"},"ts":1183676940000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"All my bad code makes it successful? Excellent!","msgtype":"m.text"},"ts":1183676941000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(obviously rubys, anne and tbroyer are responsible for the good code)","msgtype":"m.text"},"ts":1183676942000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"rubys: as far as I can tell, html5lib is not on a paid basis in general","msgtype":"m.text"},"ts":1183677000000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"can tokenise start tags now, which is handy","msgtype":"m.emote"},"ts":1183677720000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"rubys: I added some info to the wiki","msgtype":"m.text"},"ts":1183677721000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"This should, in theory, now do everything except doctypes...","msgtype":"m.text"},"ts":1183678920000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"tries to set it up to run actual tests","msgtype":"m.emote"},"ts":1183678980000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"reads Robert Burns' replies to jgraham ","msgtype":"m.emote"},"ts":1183678981000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"wonders if there's an easy way to parse JSON in C++","msgtype":"m.emote"},"ts":1183679100000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Actually, that's kind of stupid, I'll just write a test wrapper in a proper language...","msgtype":"m.text"},"ts":1183679160000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: are the libs linked to from json.org unsatisfactory?","msgtype":"m.text"},"ts":1183679161000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I guess that'd work, but downloading and installing requires too much effort","msgtype":"m.text"},"ts":1183679220000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(and then reading the documentation to work out how to use them)","msgtype":"m.text"},"ts":1183679280000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(and then actually writing the code to use them, in C++)","msgtype":"m.text"},"ts":1183679281000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Hmm, how are the ParseErrors in the tokeniser tests meant to work? They look like tokens, but it's not obvious where you add them so they don't conflict with all the other code that's fiddling with tokens...","msgtype":"m.text"},"ts":1183679820000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: the tokenization spec is very clear about the sequence of parse errors relative to emitted tokens","msgtype":"m.text"},"ts":1183679880000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Philip`: basically, you treat errors as an extra type of token","msgtype":"m.text"},"ts":1183679881000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"that the tokenizer emits","msgtype":"m.text"},"ts":1183679882000,"senderName":"hsivonen","senderId":"hsivonen@irc"}
]