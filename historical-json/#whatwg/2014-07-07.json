[
{"content":{"body":"make kripken fix it!","msgtype":"m.text"},"ts":1404691205000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: I'm project owner now :P","msgtype":"m.text"},"ts":1404691213000,"senderName":"daurnimator","senderId":"daurnimator@irc"},
{"content":{"body":"furreal?","msgtype":"m.text"},"ts":1404691220000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"(of lua.vm.js, not emscripten)","msgtype":"m.text"},"ts":1404691224000,"senderName":"daurnimator","senderId":"daurnimator@irc"},
{"content":{"body":"oh I see","msgtype":"m.text"},"ts":1404691228000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"lua.vm.js was originally a kripken demo","msgtype":"m.text"},"ts":1404691236000,"senderName":"daurnimator","senderId":"daurnimator@irc"},
{"content":{"body":"BUT, thats just one example (thats easy for me to explain, as I'm close to it)","msgtype":"m.text"},"ts":1404691296000,"senderName":"daurnimator","senderId":"daurnimator@irc"},
{"content":{"body":"there's plenty of languages/frameworks/etc that live on top of js","msgtype":"m.text"},"ts":1404691310000,"senderName":"daurnimator","senderId":"daurnimator@irc"},
{"content":{"body":"(note that it is possible to do finalizers in such a way that the object being finalized is never actually revealed to the finalizer)","msgtype":"m.text"},"ts":1404691357000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: hmm?","msgtype":"m.text"},"ts":1404691370000,"senderName":"daurnimator","senderId":"daurnimator@irc"},
{"content":{"body":"well, I mean, the finalizer could certainly know \"which one\" it had been","msgtype":"m.text"},"ts":1404691386000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"but the object can be dead","msgtype":"m.text"},"ts":1404691400000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"which what?","msgtype":"m.text"},"ts":1404691419000,"senderName":"daurnimator","senderId":"daurnimator@irc"},
{"content":{"body":"but that's about finalizer interfaces, not about what you can do in JS now","msgtype":"m.text"},"ts":1404691419000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"\"that sounds like a documentation issue\" hahahahahahaha. You must be new here :-)","msgtype":"m.text"},"ts":1404691642000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"yeah, indeed","msgtype":"m.text"},"ts":1404691671000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"roc: I didn't say documentation issues could be solved ;)","msgtype":"m.text"},"ts":1404691731000,"senderName":"daurnimator","senderId":"daurnimator@irc"},
{"content":{"body":"depends on what you mean by solved","msgtype":"m.text"},"ts":1404691749000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"documenting things is easy","msgtype":"m.text"},"ts":1404691755000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"if only","msgtype":"m.text"},"ts":1404691768000,"senderName":"daurnimator","senderId":"daurnimator@irc"},
{"content":{"body":"getting people to *follow* the documentation, that's impossible.","msgtype":"m.text"},"ts":1404691769000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"if documentation was easy the world would be a nicer place","msgtype":"m.text"},"ts":1404691784000,"senderName":"daurnimator","senderId":"daurnimator@irc"},
{"content":{"body":"it's even more impossible when the documentation sucks","msgtype":"m.text"},"ts":1404691788000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"where (e.g.) undefined behaviour in C was obvious","msgtype":"m.text"},"ts":1404691801000,"senderName":"daurnimator","senderId":"daurnimator@irc"},
{"content":{"body":"daurnimator: that's *not* just a documentation issue","msgtype":"m.text"},"ts":1404694744000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"http://en.wikipedia.org/wiki/Finalizer#Resource_management mentions that using finalizers to release resources isn't really all that wise, though that obviously doesn't really apply to trying to interface two GCs ...","msgtype":"m.text"},"ts":1404694858000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"more to the file thing","msgtype":"m.text"},"ts":1404694914000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Sam that article is essentially saying \"deallocating resources during a finalizer is unwise because finalizers might be implemented wrong\"","msgtype":"m.text"},"ts":1404695066000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"that's kind of a silly argument","msgtype":"m.text"},"ts":1404695076000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: not really","msgtype":"m.text"},"ts":1404695132000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"finalizers *are* tied to garbage collection; using them to free resources besides garbage collected memory is very risky, because the next GC could come much later than you expect","msgtype":"m.text"},"ts":1404695199000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"especially with some browsers taking a more aggressive approach to GC than others","msgtype":"m.text"},"ts":1404695255000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"with browsers it's a bit complicated when C++ code holds references to JS objects, BUT at the end of the day, if there are no references to an object that \"matter\", the object is effectively dead whether it gets collected or not","msgtype":"m.text"},"ts":1404695258000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"and can therefore be considered to be finalized","msgtype":"m.text"},"ts":1404695263000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"um, what exactly is going to be crawling the heap to detect that they aren't referenced, if not the GC?","msgtype":"m.text"},"ts":1404695320000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"it could be the same algorithm which determines that an object needs to be garbage collected, that would be fine","msgtype":"m.text"},"ts":1404695391000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it would just mark an object as finalized and inform the script context","msgtype":"m.text"},"ts":1404695401000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"and yeah, you could do that and prevent the object from reviving itself during finalization","msgtype":"m.text"},"ts":1404695458000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"we don't do that, but there's no real reason why we can't","msgtype":"m.text"},"ts":1404695466000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it's just the way it is","msgtype":"m.text"},"ts":1404695484000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I think there's a lot of Python code out there expecting immediate finalization, actually, because of CPython's reference-counting","msgtype":"m.text"},"ts":1404695546000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"That's definitely the case. Though CPython does have some slightly wacky behaviour with finalizers.","msgtype":"m.text"},"ts":1404695592000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(Python 3 at least raises a warning if a file object's finalizer closes the file)","msgtype":"m.text"},"ts":1404695620000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"caitp: as I understand it, a dry run of most any GC algorithm won't take any less time, really","msgtype":"m.text"},"ts":1404695623000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"gsnedders: ah, cool","msgtype":"m.text"},"ts":1404695631000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"wonder why not in 2.7","msgtype":"m.text"},"ts":1404695634000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Added to 3 after 2.7 shipped, I think","msgtype":"m.text"},"ts":1404695647000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"what, that's a \"feature\" or something?","msgtype":"m.text"},"ts":1404695658000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Adding a warning where there wasn't one before? It's a behavioural change, it's not a bugfix.","msgtype":"m.text"},"ts":1404695684000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"but they should have added it back in 2.2","msgtype":"m.text"},"ts":1404695695000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Did the warnings module exist back then?","msgtype":"m.text"},"ts":1404695712000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":";P","msgtype":"m.text"},"ts":1404695714000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"SamB I don't think it would necessarily be a \"dry run\", just \"notify the script before cleaning stuff up\" --- there's no guarantee that once an object is marked for collection that it will be collected immediately anyways","msgtype":"m.text"},"ts":1404695717000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"gsnedders: that's beside the point; *Jython* existed back then and was considered to be Python!","msgtype":"m.text"},"ts":1404695736000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"but it doesn't matter, this was a design decision that a certain guy made zillions of years ago, too late to do anything about it","msgtype":"m.text"},"ts":1404695749000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I thought the *unmarked* objects were the ones that got collected","msgtype":"m.text"},"ts":1404695772000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: Speaking of Jython, I ought deal with the html5lib PR that adds support for it","msgtype":"m.text"},"ts":1404695795000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"And yes, unmarked objects get collected","msgtype":"m.text"},"ts":1404695809000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Typically","msgtype":"m.text"},"ts":1404695821000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"You can of course reverse the flags","msgtype":"m.text"},"ts":1404695826000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"there's no real difference","msgtype":"m.text"},"ts":1404695828000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"of course, which value of the flag counts as \"marked\" can be flipped from pass to pass","msgtype":"m.text"},"ts":1404695838000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"but the ones you visited and marked, those were reachable","msgtype":"m.text"},"ts":1404695845000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"so you want to keep them","msgtype":"m.text"},"ts":1404695851000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"it draws the same picture no matter how you phrase it, and the pictures of cycle collection algorithms are not things I want in my brain right now :d","msgtype":"m.text"},"ts":1404695897000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"bah, cycle collection algorithms are really simple in their simplest forms!","msgtype":"m.text"},"ts":1404695925000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"oh, you're going back to Python territory","msgtype":"m.text"},"ts":1404695926000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"most things don't have cycle collectors, they have *garbage* collectors","msgtype":"m.text"},"ts":1404695942000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"which sometimes actually work by collecting the non-garbage and declaring whatever is left behind nonexistant","msgtype":"m.text"},"ts":1404695973000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: they're the same, just a \"cycle\" collector will never collect anything except things that have cycles because they've already been freed through refcounting","msgtype":"m.text"},"ts":1404695985000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(obviously if there are finalizer-bearing objects involved it has to do something about those, though)","msgtype":"m.text"},"ts":1404695995000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"gsnedders: well, if someone says \"cycle collector\" it brings to mind that same \"normal stuff gets freed immediately, right?\" assumption from crufty Python code","msgtype":"m.text"},"ts":1404696047000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1404696055000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"hmm, this is the wrong kind of cycle collection: http://www.cyclemuseum.org.uk/","msgtype":"m.text"},"ts":1404696183000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"hah","msgtype":"m.text"},"ts":1404696190000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(interesting, pulling the power cord out of this makes it suspend, hmmm)","msgtype":"m.text"},"ts":1404696208000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"this doesn't sound much like a normal GC algorithm: https://developer.mozilla.org/en-US/docs/Interfacing_with_the_XPCOM_cycle_collector","msgtype":"m.text"},"ts":1404696311000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"you're touching XPCOM, anything \"normal\" is far away","msgtype":"m.text"},"ts":1404696339000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"it looks more like the kind of algorithm I'd expect with a name like \"cycle collection\" though","msgtype":"m.text"},"ts":1404696361000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"kyle huey gave a good talk about it, probably quite a few of them, it's not really unreasonable","msgtype":"m.text"},"ts":1404696411000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"the way it decides to even start looking for a cycle at any given object certainly sounds sensible (as a first impression, anyway)","msgtype":"m.text"},"ts":1404696469000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"our approach to refcounting + cycle collection has actually turned out to be pretty good","msgtype":"m.text"},"ts":1404696850000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"it has a lot of advantages over traditional tracing GC","msgtype":"m.text"},"ts":1404696886000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"roc: well, it's probably Hixie's worst nightmare to expose anything like it to JS","msgtype":"m.text"},"ts":1404696908000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"of course we're not going to do that","msgtype":"m.text"},"ts":1404696916000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1404696921000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"just sayin!","msgtype":"m.text"},"ts":1404696924000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"the main problem with refcounting+CC is that the performance of refcounting objects that are strongly referenced from multiple threads is terrible","msgtype":"m.text"},"ts":1404696969000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1404696983000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"fortunately, that is very rare in a Web browsers.","msgtype":"m.text"},"ts":1404696984000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"certainly not from the PoV of content","msgtype":"m.text"},"ts":1404697023000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"OTOH pretty much all academic GC research assumes that it's common. Which is why GC researchers have not explored the space that we have.","msgtype":"m.text"},"ts":1404697040000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"it sounds like what the XPCOM cycle collector requires of objects is very similar to what the CPython cycle collector requires","msgtype":"m.text"},"ts":1404697114000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"hopefully one of the C++ reflection proposals will let us generate the tracing hooks automatically, without the nasty boilerplate code we currently have","msgtype":"m.text"},"ts":1404697163000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"oh, except suspicion is automatic in CPython","msgtype":"m.text"},"ts":1404697165000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"hmm, I guess you can't just use that Python plugin for GCC, can you, since you build with cl.exe on Windows","msgtype":"m.text"},"ts":1404697221000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1404697243000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"we're working on supporting clang-cl on Windows but I suspect it will be a long time, if ever, before we can ship clang-cl builds","msgtype":"m.text"},"ts":1404697271000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"the idea being to use it to write the boilerplate to a text file, mind you, not to inject it into GCC directly","msgtype":"m.text"},"ts":1404697305000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"it sounds like the Python plugin is still read-only","msgtype":"m.text"},"ts":1404697318000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"wow, academic GC research assumes cross-thread references?","msgtype":"m.text"},"ts":1404698265000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i wouldn't have guessed that","msgtype":"m.text"},"ts":1404698272000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i always kinda assumed that keeping cross-thread references to a minimum was basically a given","msgtype":"m.text"},"ts":1404698290000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well, some research involves actual multithreaded programs, not just multiplexings of single-threaded programs","msgtype":"m.text"},"ts":1404698341000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Hixie: the majority is done in the context of Java","msgtype":"m.text"},"ts":1404698390000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1404698414000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: the issue isn't so much that there are lots of actual cross-thread references, but that every class is potentially referencable across threads","msgtype":"m.text"},"ts":1404698433000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"so you have to make your refcount operations thread-safe","msgtype":"m.text"},"ts":1404698443000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"fair enough","msgtype":"m.text"},"ts":1404698449000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's got to be a hell of an overhead","msgtype":"m.text"},"ts":1404698457000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or do very clever optimizations to avoid that","msgtype":"m.text"},"ts":1404698464000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"they don't use reference-counting. That's why.","msgtype":"m.text"},"ts":1404698478000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"whereas in the browser we know statically that most classes cannot be referenced across threads so it's trivial to avoid atomic refcount ops.","msgtype":"m.text"},"ts":1404698499000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"well, that's *one* reason anyway","msgtype":"m.text"},"ts":1404698510000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"roc: ah","msgtype":"m.text"},"ts":1404698532000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"whoa: <http://researcher.watson.ibm.com/researcher/view_group.php?id=3385> seems to have been used in jikes despite being based on reference counting ...","msgtype":"m.text"},"ts":1404700799000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Jikes supports lots of GC algorithms. It's commonly used as a GC research testbed.","msgtype":"m.text"},"ts":1404700998000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1404701069000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"so it's like \"We modified GCC to do this or that\"","msgtype":"m.text"},"ts":1404701079000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1404701113000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"MikeSmith: Re U+000C, mind raising that in www-style? It's probably possible to converge.","msgtype":"m.text"},"ts":1404705646000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oh, never mind, I see you got your question answered.  I didn't remember that u+000c was preprocessed away.","msgtype":"m.text"},"ts":1404705765000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie, jgraham: Re: cells in a given column, we've got stuff in Selectors for that now. (Unimplemented.)","msgtype":"m.text"},"ts":1404707601000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: WANT IT!","msgtype":"m.text"},"ts":1404709376000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"TabAtkins: you saw my bug about making eof in comments a parse error?","msgtype":"m.text"},"ts":1404714495000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"You saw my response to that bug?","msgtype":"m.text"},"ts":1404714508000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: ah no, not yet, just got back online now","msgtype":"m.text"},"ts":1404714538000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"looks","msgtype":"m.emote"},"ts":1404714544000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"rock and roll","msgtype":"m.text"},"ts":1404714600000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"D'oh, I didn't mark it RESOLVED.","msgtype":"m.text"},"ts":1404714601000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: thanks man","msgtype":"m.text"},"ts":1404714602000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Link me?","msgtype":"m.text"},"ts":1404714605000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"https://www.w3.org/Bugs/Public/show_bug.cgi?id=26270","msgtype":"m.text"},"ts":1404714648000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: btw https://github.com/validator/syntax/blob/master/relaxng/datatype/java/src/org/whattf/datatype/tools/CssParser.java#L36","msgtype":"m.text"},"ts":1404715887000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: uses Rhino to expose your CSS parser/tokenizer to Java","msgtype":"m.text"},"ts":1404715909000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan (assuming you’re reading the logs): the blog post was updated when the removal was moved to M37 https://github.com/operasoftware/devopera/commit/beb0d174be24588bb9f39fc5cc301f9d081e6395 afaik this is still the current plan","msgtype":"m.text"},"ts":1404719002000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"\"When using letter-spacing != 0, disable ligatures through font-feature-settings.\"","msgtype":"m.text"},"ts":1404723849000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Who doesn't do that automatically?","msgtype":"m.text"},"ts":1404723863000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"For our friends at w3cmemes: https://gs1.wac.edgecastcdn.net/8019B6/data.tumblr.com/21801c47ccff06fa5e6612aea5b87095/tumblr_mlqdctiGeH1rvsbh9o1_500.jpg","msgtype":"m.text"},"ts":1404735308000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: great photo of timeless there","msgtype":"m.text"},"ts":1404735609000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hixie: around?","msgtype":"m.text"},"ts":1404735735000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"Where, besides XHR, is the Fetch spec used for a browser?","msgtype":"m.text"},"ts":1404735750000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"It seems like HTML5 has its own fetch spec, which is rather different: http://www.whatwg.org/specs/web-apps/current-work/multipage/fetching-resources.html","msgtype":"m.text"},"ts":1404735781000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"Awaiting integration :)","msgtype":"m.text"},"ts":1404735804000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: O.o","msgtype":"m.text"},"ts":1404735924000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"Not seriously?","msgtype":"m.text"},"ts":1404735938000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"http://dev.w3.org/2006/webapi/FileAPI/ seems to reference Fetch","msgtype":"m.text"},"ts":1404735958000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"HTML will move to referencing Fetch at some point when Hixie has time","msgtype":"m.text"},"ts":1404735978000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1404736000000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"'cause annvk had mentioned that <img> and all use Fetch, but I couldn't find any references","msgtype":"m.text"},"ts":1404736033000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"Ms2ger: will that mean major changes to Fetch, or just the addition of a couple of flags here and there","msgtype":"m.text"},"ts":1404736193000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1404736194000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":" ","msgtype":"m.text"},"ts":1404736204000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"I hope not too major","msgtype":"m.text"},"ts":1404736207000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hi jgraham_","msgtype":"m.text"},"ts":1404736209000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"jgraham_: you seem to have protected yourself from lint","msgtype":"m.text"},"ts":1404736234000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"Turns out that facebook guest wifi sucks","msgtype":"m.text"},"ts":1404736266000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"MikeSmith: what do the new additions of the galimatias jar and TabAtkins's tokenizer.js and parser.js do?","msgtype":"m.text"},"ts":1404736575000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"MikeSmith: in the validator, that is","msgtype":"m.text"},"ts":1404736583000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"MikeSmith: ah. so galimatias is a new URL parsing lib","msgtype":"m.text"},"ts":1404736770000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"MikeSmith: there's something wrong with the build script, though. It's not getting picked up by javac","msgtype":"m.text"},"ts":1404736795000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: the latest galimatias release addes UTS 46 to bring it into conformance with the current URL spec. It just uses ICU4J","msgtype":"m.text"},"ts":1404736881000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hsivonen: as far as TabAtkins's tokenizer.js and parser.js, I'm using them for @sizes checking via a bridge through Rhino","msgtype":"m.text"},"ts":1404736957000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hsivonen: I think we could eventually replace the current MediaQuery datatype checker -- which isn't conformant with the latest CSS specs -- with a new one written using TabAtkins's tokenizer","msgtype":"m.text"},"ts":1404737036000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hsivonen: but I'm not doing that yet. Right now, I'm only using it as an extra step to catch any outright syntax errors, before it then goes to the existing MediaQuery datatype checker","msgtype":"m.text"},"ts":1404737110000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hsivonen: if the build script is failing it may be I broke something very recently. I'll do a fresh checkout and see myself too","msgtype":"m.text"},"ts":1404737157000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: bridge through Rhino... wow. there must be a you dawg joke in there somewhere. :-)","msgtype":"m.text"},"ts":1404737206000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"MikeSmith: I just pushed a build.py update for the dl URL for jsontool-core, FWIW","msgtype":"m.text"},"ts":1404737236000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: as far as galimatias I only have it being used now for Iri and IriRef datatype checking, and DataURI checking -- but we could eventually use it to replace the other cases where we're using Jena","msgtype":"m.text"},"ts":1404737246000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1404737257000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I see","msgtype":"m.text"},"ts":1404737259000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I'm pretty sure there's just a classpath problem with how build.py invokes javac","msgtype":"m.text"},"ts":1404737278000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"MikeSmith: at least the version of galimatas in classpath doesn't match the version on disk","msgtype":"m.text"},"ts":1404737389000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: yeah I wasn't sure the Rhino bridge thing would have acceptable performance but it seems to be just fine. It all gets compiled just once -- static. And I guess that may costs some couple hundred milliseconds the first time, but then after that it's negligible -- a few milliseconds at most maybe","msgtype":"m.text"},"ts":1404737437000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hsivonen: OK will check right now","msgtype":"m.text"},"ts":1404737456000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: cool","msgtype":"m.text"},"ts":1404737458000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"OK. I fixed this locally. I'll push.","msgtype":"m.text"},"ts":1404737472000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1404737482000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"is curious to see what he was doing wrong","msgtype":"m.emote"},"ts":1404737500000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I think it was that last drink Saturday night","msgtype":"m.text"},"ts":1404737518000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"darobin: either that or the part where I fell off the hotel balcony","msgtype":"m.text"},"ts":1404737563000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that would cause problems with the validator for sure","msgtype":"m.text"},"ts":1404737607000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"MikeSmith: https://github.com/validator/build/commit/6f429116af4820f96223de8eb60e3df653b9f567","msgtype":"m.text"},"ts":1404737720000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"jgraham: I bet it still doesn't suck as bad as Mozilla SF guest wifi","msgtype":"m.text"},"ts":1404737721000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hsivonen: ah yeah. sorry :( that's the 2nd time I maade that same mistake (I did it the previous time galimatias got updated)","msgtype":"m.text"},"ts":1404737774000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I think you were unlucky, although I might be wrong","msgtype":"m.text"},"ts":1404737861000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"hsivonen: btw I don't know what we're using jsontools for. I trust it is still actually being used somewhere","msgtype":"m.text"},"ts":1404737871000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: used for HTML tokenizer unit tests","msgtype":"m.text"},"ts":1404737889000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: ah OK","msgtype":"m.text"},"ts":1404737898000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"looks like I need to teach my deployment script about galimatias","msgtype":"m.text"},"ts":1404737998000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"wonders if keygen could be killed","msgtype":"m.emote"},"ts":1404739012000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: it can't (not last I heard at least). I think Apple was one of those saying they're aware of known sites it would be break that aren't likely to change to quit using it","msgtype":"m.text"},"ts":1404739177000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"smaug____: I guess it remains an evangelism issue (as far as possibility of killing it)","msgtype":"m.text"},"ts":1404739218000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: do you recall when apple said that?","msgtype":"m.text"},"ts":1404739220000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: I could try to find it. It's been a few years. I think it was on the public-html list","msgtype":"m.text"},"ts":1404739241000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hsivonen: I did a fresh checkout and build (with your build.py changes) and it all runs fine","msgtype":"m.text"},"ts":1404739304000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hsivonen: though I see that the galimatias change does cause the TestRunner build to fail. But that's not fatal. Anyway, I'll try to fix that too right now","msgtype":"m.text"},"ts":1404739365000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hello","msgtype":"m.text"},"ts":1404739487000,"senderName":"Ualidus","senderId":"Ualidus@irc"},
{"content":{"body":"hsivonen: hmm no I see that's not a build issue but instead seems to be a runtime problem that the TestRunner is exposing","msgtype":"m.text"},"ts":1404739590000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Ms2ger: quit trolling over on #w3c (\"Can anyone recommend a good guide for making my website xhtml 2.0 compliant?\")","msgtype":"m.text"},"ts":1404739640000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I have a question, I don't understand the part of the warning about the InvalidAccessError : http://xhr.spec.whatwg.org/#the-open%28%29-method","msgtype":"m.text"},"ts":1404739644000,"senderName":"Ualidus","senderId":"Ualidus@irc"},
{"content":{"body":"I think I have this error occuring, but I'm not quite sure...","msgtype":"m.text"},"ts":1404739655000,"senderName":"Ualidus","senderId":"Ualidus@irc"},
{"content":{"body":"and I don't know how to fix it","msgtype":"m.text"},"ts":1404739662000,"senderName":"Ualidus","senderId":"Ualidus@irc"},
{"content":{"body":"according to the steps of the open method, the error should be thrown before the request is sent (I suppose), but it seems my script is used anyway... I'm completely lost. :)","msgtype":"m.text"},"ts":1404739994000,"senderName":"Ualidus","senderId":"Ualidus@irc"},
{"content":{"body":"MikeSmith: so the deployment script I have actually does upload galimatias to the server","msgtype":"m.text"},"ts":1404740137000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"MikeSmith: but it fails for some other reason...","msgtype":"m.text"},"ts":1404740157000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"It doesn't find the main class","msgtype":"m.text"},"ts":1404740165000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I'm trying to see if there's a problem with the command line","msgtype":"m.text"},"ts":1404740177000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"sees -Dnu.validator.servlet.follow-w3c-spec=0","msgtype":"m.emote"},"ts":1404740384000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"doesn't recall noticing that before","msgtype":"m.emote"},"ts":1404740396000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"the error I get is Error: Could not find or load main class results","msgtype":"m.text"},"ts":1404740457000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: yeah a while back I separated out the w3c \"branding\" behavior from the w3c-specific schema behavior","msgtype":"m.text"},"ts":1404740459000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hsivonen: a class literally named \"results\"?","msgtype":"m.text"},"ts":1404740498000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"jgraham, oh, you folks are at GB?","msgtype":"m.text"},"ts":1404740586000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"FB*","msgtype":"m.text"},"ts":1404740589000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"hsivonen: at this point I wonder if we should just back out to the previous galimatias version -- 0.0.4 I guess","msgtype":"m.text"},"ts":1404740593000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith, I wish I could troll as well as that person","msgtype":"m.text"},"ts":1404740728000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"hsivonen: because another problem is that galimatias 0.1.0 requires a newer version of ICU4J than what we have. I think it maybe it needs v4.5 at least, and we have v4.4 -- which seems to lack the getUTS46Instance method (or at least the right getUTS46Instance method that galimatias expects)","msgtype":"m.text"},"ts":1404740757000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Ms2ger: :-)","msgtype":"m.text"},"ts":1404740764000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"i have to go, see ya.","msgtype":"m.text"},"ts":1404742968000,"senderName":"Ualidus","senderId":"Ualidus@irc"},
{"content":{"body":"Trying to parse something in the CSS transitions spec.","msgtype":"m.text"},"ts":1404744642000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"\"For each shadow, if one input shadow is ‘inset’ and the other is not, then the result for that shadow matches the inputs; otherwise the entire list is not interpolable.\"","msgtype":"m.text"},"ts":1404744648000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"That reads to me like if the two shadows are opposing, then it's interpolable, but if they're the same, then it's not.","msgtype":"m.text"},"ts":1404744680000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"That seems quite wrong to me.","msgtype":"m.text"},"ts":1404744683000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"How am I supposed to read it?","msgtype":"m.text"},"ts":1404744707000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"Jasper: you might have better luck pinging dino about that on #webkit, if he's around there","msgtype":"m.text"},"ts":1404745263000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Jasper: Yup, that's totally opposite.","msgtype":"m.text"},"ts":1404745333000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And also super-unclear what it's trying to talk about.","msgtype":"m.text"},"ts":1404745361000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Looks like it's trying to define the inset-ness fo the interpolating shadow.)","msgtype":"m.text"},"ts":1404745373000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Jasper: I'll fix.","msgtype":"m.text"},"ts":1404745383000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, thanks!","msgtype":"m.text"},"ts":1404745504000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"Jasper: What's your name, for the Acks?","msgtype":"m.text"},"ts":1404745668000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, Jasper St. Pierre","msgtype":"m.text"},"ts":1404745682000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"Does that alphabetize as S or P?","msgtype":"m.text"},"ts":1404745690000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'd go with S.","msgtype":"m.text"},"ts":1404745697000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"Oh, didn't matter anyway; last name in the acks was an M.","msgtype":"m.text"},"ts":1404745746000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Anyway, fixed and pushing now.","msgtype":"m.text"},"ts":1404745750000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"in the spec there's an example for the \"accept\" attribute for input@type that looks like <input type=\"file\"accept=\".doc,.docx,.xml,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document\">","msgtype":"m.text"},"ts":1404745814000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that is, with extensions like \".doc\" in there -- not just mime types","msgtype":"m.text"},"ts":1404745854000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Do UAs actually support that?","msgtype":"m.text"},"ts":1404745869000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins, alphabetizes as J, clearly ;)","msgtype":"m.text"},"ts":1404745886000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: This spec alphabetizes by family name, so I'm just matching convention.","msgtype":"m.text"},"ts":1404746008000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hsivonen: dunno if you're still around any longer today, but if you are, please let me know if it's OK with you to downgrade galimatias do the previous version -- 0.0.4. I'd go ahead and just do it, but I don't want to further muff things up with you trying to deploy right now.","msgtype":"m.text"},"ts":1404746468000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hsivonen: anyway I don't think the 0.1.0 version of galimatias is going to work for us in production until we update our ICU4J version","msgtype":"m.text"},"ts":1404746514000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Manishearth: yeah, i need to update HTML to point to fetch.spec.whatwg.org","msgtype":"m.text"},"ts":1404753280000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"jgraham: i removed omit_optional_tags=on but i'm still getting some end tags omitted, any idea what's up?","msgtype":"m.text"},"ts":1404761884000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"mathiasbynens: hmm. i see \"The latest plan is to land the showModalDialog removal in Chromium 36. \"","msgtype":"m.text"},"ts":1404761948000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"MikeSmith: where?","msgtype":"m.text"},"ts":1404762614000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"Why is nothing outputted when I resize the window? document.addEventListener(\"resize\", function() { console.log(\"a\"); });","msgtype":"m.text"},"ts":1404763662000,"senderName":"montecfel","senderId":"montecfel@irc"},
{"content":{"body":"Also, is there better documentation than MozDev? I find it to suck.","msgtype":"m.text"},"ts":1404763676000,"senderName":"montecfel","senderId":"montecfel@irc"},
{"content":{"body":"montecfel: because you’re resizing the `window`, like you said, not the `document`","msgtype":"m.text"},"ts":1404764863000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"gsnedders: dude in what order does anolis number IDs?","msgtype":"m.text"},"ts":1404765072000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"gsnedders: i just noticed that id=history-0 is after id=history-1 in the HTML spec","msgtype":"m.text"},"ts":1404765084000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"is it like dfns before headings or some such?","msgtype":"m.text"},"ts":1404765111000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"looks like that's exactly what it is","msgtype":"m.text"},"ts":1404765348000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh man","msgtype":"m.text"},"ts":1404765349000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: bugwards compatibility ftw man","msgtype":"m.text"},"ts":1404777591000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"}
]