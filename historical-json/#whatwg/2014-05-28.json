[
{"content":{"body":"JonathanNeal: http://dom.spec.whatwg.org/#dom-parentnode-query Got renamed to query/queryAll, but otherwise still there in DOM and planning to stick around.","msgtype":"m.text"},"ts":1401237058000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"zewt: What are you referring to?","msgtype":"m.text"},"ts":1401237064000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"find vs. querySelector","msgtype":"m.text"},"ts":1401237294000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Those arent' aliases.","msgtype":"m.text"},"ts":1401237342000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"They are similar, but in the sense that querySelector was a mistake we have to support, and query() is the way we should have designed it in the first place.","msgtype":"m.text"},"ts":1401237367000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"the last time I saw it, it was \"we want to add new features to querySelector, so let's make a new function with a shorter name while we're at it\"","msgtype":"m.text"},"ts":1401237394000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"don't know anything wrong with querySelector that needs a new entry point","msgtype":"m.text"},"ts":1401237424000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"It's \"let's redo querySelector, but with the correct scoping behavior, and allow relative selectors while we're at it, since everyone expects that and it's an obvious feature\".","msgtype":"m.text"},"ts":1401237434000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: i think you misread my last comment on the promises thing","msgtype":"m.text"},"ts":1401238716000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I miight have.","msgtype":"m.text"},"ts":1401238725000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: I'm writing some basic advice for writing async algos in specs at http://wiki.csswg.org/spec/async-algos . I'd appreciate guidance on the right spec language to use for queueing tasks when you need to mutate some observable document state.","msgtype":"m.text"},"ts":1401239867000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: Looking over it again, I'm not sure how I misread your comment.  Mind elaborating?","msgtype":"m.text"},"ts":1401240048000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: maybe i misread yours? i was saying that it was not ok that argument-checking turns into a rejected promise.","msgtype":"m.text"},"ts":1401240985000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Oh jeez, I missed a \"not\".  Okay, then you're not inconsistent, you're just still wrong and lots of people disagree with you. ^_^","msgtype":"m.text"},"ts":1401241021000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"lots of people agree, too, it looks like","msgtype":"m.text"},"ts":1401241043000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Several people who have been closely involved with the work on promises all agree.","msgtype":"m.text"},"ts":1401241082000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That is, people who have a strong working and theoretical background on useful coding patterns for this kind of thing.","msgtype":"m.text"},"ts":1401241097000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah. so. just so we're clear, i give argument from authority zero weight. :-)","msgtype":"m.text"},"ts":1401241153000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Obviously.  What I'm saying is that it looks like you're treating this like a personal preference API design issue, and it's not.  Those people have good experience in why async APIs are more usable in the wild/in the large when they're designed this way.","msgtype":"m.text"},"ts":1401241791000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And they've written down the reasons why, and it doesn't look like you've addressed their arguments.","msgtype":"m.text"},"ts":1401242003000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Heck, even I've written down arguments for the \"always reject\" pattern <http://www.xanthir.com/b4P_0>, and I didn't even realize it!  It wasn't until after Domenic schooled me that I realized my earlier explanations were completely in line with that pattern.","msgtype":"m.text"},"ts":1401242075000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Throwing+rejecting is akin to having to wrap both the source and the call site of a function in try/catch in Mauvascript, because some errors get thrown at the source location and some get thrown at the call site.","msgtype":"m.text"},"ts":1401242131000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: you realise i also have good experience in designing APIs, right","msgtype":"m.text"},"ts":1401242240000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I thought you just said argument from authority have zero weight!","msgtype":"m.text"},"ts":1401242259000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"it doesn't","msgtype":"m.text"},"ts":1401242263000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but your saying \"these people have experience\" sounds like you're implying \"and you don't\"","msgtype":"m.text"},"ts":1401242286000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Don't read it like that, then, because that's not what I'm saying.","msgtype":"m.text"},"ts":1401242307000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It's \"this people have experience, but you're treating them like they just have an opinion\".","msgtype":"m.text"},"ts":1401242323000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i've made counter-arguments to every argument presented, as far as i can tell","msgtype":"m.text"},"ts":1401242351000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's either opinion, or they're wrong. :-) i think it's probably opinion.","msgtype":"m.text"},"ts":1401242363000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Which continue to be of the form \"I believe I can draw a firm line between contract violations and data errors\", which is wrong.","msgtype":"m.text"},"ts":1401242386000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Alternately, \"I believe that the arguments people have made about how difficult and annoying it is to handle both sync and async errors are spurious\".","msgtype":"m.text"},"ts":1401242440000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"the web api has drawn that firm line for years","msgtype":"m.text"},"ts":1401242479000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"decades even","msgtype":"m.text"},"ts":1401242481000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"exceptions on one side, 'error' events on the other","msgtype":"m.text"},"ts":1401242489000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Oh come now, error events are rare.","msgtype":"m.text"},"ts":1401242523000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1401242535000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"exceptions too, actually","msgtype":"m.text"},"ts":1401242538000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"And it's very easy to argue that the line they draw is arbitrary and bad, and they shouldn't be doing so.","msgtype":"m.text"},"ts":1401242548000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"what would that argument look like?","msgtype":"m.text"},"ts":1401242565000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(Events also never composed in any meaningful manner, which is the exact scenario being held up as being difficult to handle when you're mixing sync and async errors.)","msgtype":"m.text"},"ts":1401242598000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Unlike promises, where composition is commonplace and expected.)","msgtype":"m.text"},"ts":1401242616000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"we're not mixing sync and async errors","msgtype":"m.text"},"ts":1401242619000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the sync errors never happen unless there's a bug","msgtype":"m.text"},"ts":1401242626000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"they're a completely different beast than the async errors.","msgtype":"m.text"},"ts":1401242633000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Many async errors don't happen unless there's a bug, too.","msgtype":"m.text"},"ts":1401242648000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And regardless, having one error-handling path is usually much easier to handle correctly.","msgtype":"m.text"},"ts":1401242671000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"This is the exact argument made by several people, and by the blog posts you've been referred to.","msgtype":"m.text"},"ts":1401242691000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You seem to be claiming that the difficulties those people outline and explain aren't real, or aren't actually difficult to handle.","msgtype":"m.text"},"ts":1401242713000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"that argument is totally bogus. it implies that you're (a) going to do anything useful when \"handling\" an error that's caused by a bug, and (b) that even if you did, it could in any meaningful sense be the same thing as if you were handling a non-logic bug, like a network error.","msgtype":"m.text"},"ts":1401242738000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"s/non-logic bug/non-bu error/","msgtype":"m.text"},"ts":1401242757000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"non-bug","msgtype":"m.text"},"ts":1401242759000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"So you don't understand the argument, then.","msgtype":"m.text"},"ts":1401242765000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I suggest looking into it further and trying harder to understand it.","msgtype":"m.text"},"ts":1401242774000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"maybe. or maybe you don't understand why it's wrong. :-)","msgtype":"m.text"},"ts":1401242779000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"why do i have the burden of trying to convince myself that you're right as opposed to you having the burden to convince yourself that i'm right?","msgtype":"m.text"},"ts":1401242857000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: so what useful thing are you going to do in response to one of these bugs?","msgtype":"m.text"},"ts":1401243847000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"wonders if TabAtkins has ever seen an async API that he liked","msgtype":"m.emote"},"ts":1401244066000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: I already did - I adjusted the Font Loading APIs to accord with this.","msgtype":"m.text"},"ts":1401244088000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: Because only one of us is right, and it's me, so it would be counterproductive for new to convince myself that you're right. ^_^","msgtype":"m.text"},"ts":1401244210000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"that seems like an unproductive attitude, if you're serious","msgtype":"m.text"},"ts":1401244246000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i find that convincing myself that other people are right is one of the best uses of my time","msgtype":"m.text"},"ts":1401244261000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I meant outside JS stuff","msgtype":"m.text"},"ts":1401244354000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Hixie: Less cheekily, I was already on your side, and I was convinced otherwise by reasonable arguments from Domenic.","msgtype":"m.text"},"ts":1401244411000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"SamB: I have no idea what you're talking about, in that case.","msgtype":"m.text"},"ts":1401244424000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: i've read those same arguments, and i don't see why they are compelling.","msgtype":"m.text"},"ts":1401244442000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: you don't know what a non-JS API is?","msgtype":"m.text"},"ts":1401244446000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: No, I have no clue what you're asking.","msgtype":"m.text"},"ts":1401244456000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I mean, come on, at least *try* for the reasonable explanation for my confusion. ^_^","msgtype":"m.text"},"ts":1401244471000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I was trying to provoke you into revealing more details ;-P","msgtype":"m.text"},"ts":1401244501000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Oh! you were referring to bugs in my JS code, not bugs as in GitHub issues.","msgtype":"m.text"},"ts":1401244502000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"not necessarily your code","msgtype":"m.text"},"ts":1401244519000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Right, just JS code in general.","msgtype":"m.text"},"ts":1401244526000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I thought you were asking about what I was going to do in response to the github issue.","msgtype":"m.text"},"ts":1401244541000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Anyway, same thing you'd do with any try/catch.","msgtype":"m.text"},"ts":1401244552000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"is this still the promise thing?","msgtype":"m.text"},"ts":1401244571000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1401244576000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"is home and trying to play Civ now, though.","msgtype":"m.emote"},"ts":1401244582000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: what's that thing you'd do with any try/catch?","msgtype":"m.text"},"ts":1401244599000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Depends entirely on what the code is?","msgtype":"m.text"},"ts":1401244613000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"and how does it help when someone just screwed up their calls","msgtype":"m.text"},"ts":1401244618000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"TabAtkins: specifically, it looks like https://github.com/domenic/promises-unwrapping/issues/24#issuecomment-23979547 canvinced you, but i disagree with the premise of that argument. There is a fundamental difference between the types of errors he's talking about. If you've got a promise for a network-obtained resource, it makes sense that you could deal with \"the network is flaky\" by e.g. trying again or using a cached resource. But there's no logical thing ","msgtype":"m.text"},"ts":1401244650000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"...you could do in response to a SyntaxError, ReferenceError, TypeError, or InvalidStateError. They're just qualitatively different. You don't want all your rejection handlers to deal with this. That's what window.onerror is for.","msgtype":"m.text"},"ts":1401244683000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but, like, what are you gonna do with the equivalent of \"bad FD\"","msgtype":"m.text"},"ts":1401244687000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"hixie, there is a problem with treating them differently --- those errors which in other languages might be caught at compiletime, can't really be caught at compiletime in js (unless it's a legitimate syntax error that breaks the parser) --- you can only run into them at runtime","msgtype":"m.text"},"ts":1401244792000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Hixie: Actually, you often do.  It's a common trope in Python, frex, to forgo argument checking and instead just try calling other APIs with whatever you've got, wrapping the call in a try/catch and doing something alternate regardless of what the error is.","msgtype":"m.text"},"ts":1401244803000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The same trope applies to JS just as much.","msgtype":"m.text"},"ts":1401244821000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"and then, if you are going to treat them differently at runtime by making \"special\" errors uncatchable, then","msgtype":"m.text"},"ts":1401244826000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"that pretty much throws away the ecma draft","msgtype":"m.text"},"ts":1401244837000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"If *anything* happens to your network request, you might want to fail over to a cache.","msgtype":"m.text"},"ts":1401244838000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: hmm, I think usually you only do that on specific exceptions","msgtype":"m.text"},"ts":1401244844000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"You might also want to be more sophisticated, and do retries in some circumstances, etc.","msgtype":"m.text"},"ts":1401244850000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"otherwise you risk really confusing yourself when things go wrong","msgtype":"m.text"},"ts":1401244852000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"But that's totally already possible.","msgtype":"m.text"},"ts":1401244861000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"or at least, adds things to it which don't currently exist","msgtype":"m.text"},"ts":1401244862000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"because you'll never see the exception","msgtype":"m.text"},"ts":1401244862000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"TabAtkins: calling an api at random is absurd. if that's the kind of \"experience\" that is leading to this design, then i can just rest my case here.","msgtype":"m.text"},"ts":1401244909000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"at random\" is a terrible characterization of what I just described.","msgtype":"m.text"},"ts":1401244930000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: what if you never get a request made because you totally flubbed the parameters?","msgtype":"m.text"},"ts":1401244931000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: Testing will reveal that, then.","msgtype":"m.text"},"ts":1401244944000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Or examining your error logs.","msgtype":"m.text"},"ts":1401244949000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"how do these logs happen if no exception is thrown?","msgtype":"m.text"},"ts":1401244963000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"\"hey i don't know if what i've got here is valid for this api, but i'll call it anyway\" is not good practice.","msgtype":"m.text"},"ts":1401244964000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"Why do I keep making requests to \"{keepalive:true}\"? Oh, because I swapped the arg order in fetch(). Duh.\"","msgtype":"m.text"},"ts":1401244981000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"dude it's the web, it's the land of \"not a good practice\"","msgtype":"m.text"},"ts":1401244982000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"no need to make it super easy","msgtype":"m.text"},"ts":1401244992000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"fires up some DA:O instead of trying to explain why we shouldn't be optimising APIs for bad practice","msgtype":"m.emote"},"ts":1401245001000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I'd rather exclaim that","msgtype":"m.text"},"ts":1401245025000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"i've never seen duck typing in JS, I think the only time I've called something expecting to catch a low-level exception is for feature detection","msgtype":"m.text"},"ts":1401245027000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i rarely even use it in Python","msgtype":"m.text"},"ts":1401245044000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"that said, any good language should let you catch any runtime error","msgtype":"m.text"},"ts":1401245072000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"feature detection is a pretty good use case for a world where you have dozens of browsers with different capabilities and configurations","msgtype":"m.text"},"ts":1401245081000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"the main thing I see that at all resembles what TabAtkins said in Python is that pattern where you catch ImportError and fall back to some other way of doing whatever it is the thing you tried to import was for","msgtype":"m.text"},"ts":1401245083000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"and in different versions","msgtype":"m.text"},"ts":1401245093000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Hixie: Extremely common example: I've got a file handle, which may or may not exist.  Checking ahead of time whether it exists is futile, because it might disappear between now and th enext line of code.","msgtype":"m.text"},"ts":1401245099000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"caitp: you don't usually want to do feature detection asynchronously ...","msgtype":"m.text"},"ts":1401245112000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Hixie: Thus the Python idiom is to just call the function assuming the file is there, and handle \"file never existed\" and \"file did exist, but just now disappeared\" the same way, in the catch block, unless you have a good reason to differentiate them.","msgtype":"m.text"},"ts":1401245137000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"no, but i'm not really taking sides in that argument, what I'm saying is that catching things like that can be useful","msgtype":"m.text"},"ts":1401245140000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"TabAtkins: filehandles don't suddenly stop existing in sane environments","msgtype":"m.text"},"ts":1401245147000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"and if it's going to work synchronously, why not asynchronously","msgtype":"m.text"},"ts":1401245150000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"SamB: The file underneath them does.","msgtype":"m.text"},"ts":1401245155000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"you know, for consistency","msgtype":"m.text"},"ts":1401245160000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"just saying","msgtype":"m.text"},"ts":1401245165000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"What are you just saying? Files can get deleted.","msgtype":"m.text"},"ts":1401245177000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: \"a nonexistant FD\" and \"a valid FD pointing to a file that doesn't exist any more\" are pretty different things","msgtype":"m.text"},"ts":1401245178000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"this is the web, it's the land of \"not a sane environment\" :p","msgtype":"m.text"},"ts":1401245180000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"you people have strange file handles here, is all","msgtype":"m.text"},"ts":1401245181000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"zewt: In many cases they're identical for your purposes.","msgtype":"m.text"},"ts":1401245196000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"zewt: I don't think web file handles are much like FDs","msgtype":"m.text"},"ts":1401245206000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"See: every use of a file handle in Bikeshed.","msgtype":"m.text"},"ts":1401245208000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I Think they're more like struct stat","msgtype":"m.text"},"ts":1401245214000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"can we call your file handle a \"filename\" for this example?","msgtype":"m.text"},"ts":1401245217000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: Yeah, whatever.","msgtype":"m.text"},"ts":1401245226000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Same diff for these purposes.","msgtype":"m.text"},"ts":1401245244000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"it seems like you're describing \"open(filename) and catch IOError to see if it fails\", which is fine","msgtype":"m.text"},"ts":1401245255000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"in unix a file doesn't go away just because it's deleted, if you already have a handle to it","msgtype":"m.text"},"ts":1401245263000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I never really understood how it works on Windows for sure, since usually you aren't allowed to delete such files in the first place","msgtype":"m.text"},"ts":1401245290000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"but i'm not sure it's the same case as \"open(filename) where filename might be None, and catch TypeError\" (eg. duck typing)","msgtype":"m.text"},"ts":1401245296000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"SamB: ... that's why I established \"filename\", because that seemed irrelevant","msgtype":"m.text"},"ts":1401245313000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"yeah sorry","msgtype":"m.text"},"ts":1401245321000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"just, I can't help ranting about the stupid terminology ...","msgtype":"m.text"},"ts":1401245345000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"zewt: Yes.","msgtype":"m.text"},"ts":1401245419000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"anyway, i don't know the particular case well enough to have an opinion, though I can see a distinction between synchronous and async here (can't think of any reason, off-hand anyway, why I'd want to receive a TypeError async; that just means the async task fell over)","msgtype":"m.text"},"ts":1401245436000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(back to Python, I only just learned that file() was deprecated, and you're better off if you never switched from open())","msgtype":"m.text"},"ts":1401245449000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"You should be using io.open anyway.","msgtype":"m.text"},"ts":1401245469000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Returns unicodes automatically, rather than strs.","msgtype":"m.text"},"ts":1401245478000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Or use Python3, I guess. ^_^","msgtype":"m.text"},"ts":1401245485000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"huh? a file isn't unicode!","msgtype":"m.text"},"ts":1401245495000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"i want to, but I don't see it happening on the horizon, heh","msgtype":"m.text"},"ts":1401245497000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"SamB: It is if you're reading text!","msgtype":"m.text"},"ts":1401245512000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If your text isnt' in utf-8, what are you doing with your life.","msgtype":"m.text"},"ts":1401245525000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I guess a lot of APIs insist on you picking an encoding (possibly raw binary) and sticking with it though","msgtype":"m.text"},"ts":1401245558000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"(at work, at least)","msgtype":"m.text"},"ts":1401245565000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"so in that case you'd have to pick at open() time","msgtype":"m.text"},"ts":1401245570000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"anyway, I found out when working on porting the libstdc++ pretty printers to 2+3","msgtype":"m.text"},"ts":1401245593000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"one stupid thing that also impedes my desire to use python 3: print not being a keyword","msgtype":"m.text"},"ts":1401245625000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I know, right?","msgtype":"m.text"},"ts":1401245637000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"like, that's nice and all, but I have years of muscle memory for \"print foo\"","msgtype":"m.text"},"ts":1401245641000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I just wish the REPL had an option to turn it back","msgtype":"m.text"},"ts":1401245658000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I don't really care so much in code","msgtype":"m.text"},"ts":1401245663000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"maybe also for -c ...","msgtype":"m.text"},"ts":1401245691000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"or was that -e","msgtype":"m.text"},"ts":1401245695000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"(also when are they going to support proper SIGINT handling?)","msgtype":"m.text"},"ts":1401245768000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"file a bug on your favourite implementation with an issue tracker","msgtype":"m.text"},"ts":1401245814000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"if you want a real, serious gripe for Python (and there really are only a few), look at its HTTPS server certificate handling","msgtype":"m.text"},"ts":1401245824000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(there isn't any)","msgtype":"m.text"},"ts":1401245845000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"caitp: I think exarkun already filed it","msgtype":"m.text"},"ts":1401245889000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"then you know what you have to do","msgtype":"m.text"},"ts":1401245917000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"get 600 of your closest friends to spam it with \"+1\"","msgtype":"m.text"},"ts":1401245925000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"google is silly","msgtype":"m.text"},"ts":1401245993000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I've been reading the anti python 3 rants and they all seem very command line oriented","msgtype":"m.text"},"ts":1401246003000,"senderName":"KevinMarks2","senderId":"KevinMarks2@irc"},
{"content":{"body":"it wants to google for \"exar kun python\" or \"exar kun twisted\"","msgtype":"m.text"},"ts":1401246008000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Whereas the python 3 changes seem more Internet oriented","msgtype":"m.text"},"ts":1401246050000,"senderName":"KevinMarks2","senderId":"KevinMarks2@irc"},
{"content":{"body":"autonomously?","msgtype":"m.text"},"ts":1401246054000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"even though the nick connected with those topics is almost invariably spelled \"exarkun\"","msgtype":"m.text"},"ts":1401246055000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"i think there are too many changes in 3 to categorize them","msgtype":"m.text"},"ts":1401246079000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"caitp: I typed exarkun and that's what came up in the suggestions","msgtype":"m.text"},"ts":1401246079000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"well, along with some star wars stuff","msgtype":"m.text"},"ts":1401246097000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"where the one with the space makes sense","msgtype":"m.text"},"ts":1401246106000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"hmm, guess I misremembered who filed <http://bugs.python.org/issue1054041> ...","msgtype":"m.text"},"ts":1401246713000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"looks like thats been open for basically since the dawn of time","msgtype":"m.text"},"ts":1401246903000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"TabAtkins: if the contract is \"pass me what might be a valid file handle or might not, and i'll act accordingly\", then an async response might make sense in that scenario","msgtype":"m.text"},"ts":1401253971000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: if the contract is \"pass me a guaranteed valid file handle\", then an async response wouldn't make sense","msgtype":"m.text"},"ts":1401253988000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: but if the contract is \"pass me what might be a valid file handle\" and you pass it a banana, i wouldn't want an async response, because wtf is my async handler supposed to do with that?","msgtype":"m.text"},"ts":1401254103000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"for Hixie's point, if you can prevent the async operation from ever taking place if it should result in an error, then great, there might be a tiny performance benefit and a better guarantee of correctness. to TabAtkin's point, it means you end up with a lot messier, less reasonable code","msgtype":"m.text"},"ts":1401254272000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it doesn't make the code more messy","msgtype":"m.text"},"ts":1401254290000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"nobody is going to be handling these exceptions one way or the other","msgtype":"m.text"},"ts":1401254300000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sure they are","msgtype":"m.text"},"ts":1401254309000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"in fact it's less messy if the exceptions are sync","msgtype":"m.text"},"ts":1401254311000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"since there's no code there","msgtype":"m.text"},"ts":1401254316000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but if they're async you have to at least have an \"else, do nothing\" clause","msgtype":"m.text"},"ts":1401254327000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you're writing a toolkit which people will use which makes some async call --- they want you to set some readonly parameter of an xhr object to some value which isn't supported in that browser yet (such as \"json\" for responseType in safari)","msgtype":"m.text"},"ts":1401254367000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"well, not \"readOnly\"","msgtype":"m.text"},"ts":1401254400000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"you know what I mean, limited set of allowed values :>","msgtype":"m.text"},"ts":1401254410000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"anyways, so the library won't want to break your code, because it works perfectly well on other browsers","msgtype":"m.text"},"ts":1401254430000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"setting an attribute is a beautiful case of where bad values should be handled by throwing an exception","msgtype":"m.text"},"ts":1401254434000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so they will add a bunch of gross error checking","msgtype":"m.text"},"ts":1401254438000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"and it gets messy and hurts performance","msgtype":"m.text"},"ts":1401254445000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"because where the heck would the promise even be given","msgtype":"m.text"},"ts":1401254454000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well, this isn't a DOM api example, but I think the same sort of thing applies","msgtype":"m.text"},"ts":1401254476000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"you're setting a value which browser X doesn't support, but browser Y does","msgtype":"m.text"},"ts":1401254487000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it throws --- you have to handle this because you support browser Y","msgtype":"m.text"},"ts":1401254496000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"in non-DOM APIs, I can already do what i want, and i don't care how other people write their code","msgtype":"m.text"},"ts":1401254500000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's the DOM APIs I care about here","msgtype":"m.text"},"ts":1401254522000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"which is great and all, except that people can and do wrap DOM apis to get more consistent or easier ways to interact with them","msgtype":"m.text"},"ts":1401254580000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"and have been doing this for a pretty long time now","msgtype":"m.text"},"ts":1401254590000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"lots of people wrap DOM APIs in lots of different ways, sure","msgtype":"m.text"},"ts":1401254603000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"all I'm sayin is, if you need try/catch blocks to get consistent behaviour across implementations, that sucks","msgtype":"m.text"},"ts":1401254660000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"can you show me what you think it would look like the way i'm asking for and the way you're asking for?","msgtype":"m.text"},"ts":1401254700000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'm not sure i understand","msgtype":"m.text"},"ts":1401254703000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"https://gist.github.com/caitp/c63788b2a308b4b2c56c","msgtype":"m.text"},"ts":1401255218000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"that's a pretty simple example --- oh, and it doesn't actually accomplish consistent behaviour across browsers","msgtype":"m.text"},"ts":1401255236000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i mean, it does get api consistency","msgtype":"m.text"},"ts":1401255248000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"but for consistent behaviour across browsers you'd need a separate try/catch for each problematic property","msgtype":"m.text"},"ts":1401255264000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"and a fallback behaviour in the case of an error","msgtype":"m.text"},"ts":1401255278000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"this is which case? the case as you want it or the case as i want it?","msgtype":"m.text"},"ts":1401255289000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'm not sure I really understand this example.","msgtype":"m.text"},"ts":1401255297000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i don't really have a strong opinion one way or the other on the promise thing","msgtype":"m.text"},"ts":1401255315000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"oh ok","msgtype":"m.text"},"ts":1401255322000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but I think in real applications, throwing synchronously for async operations can mean that you have to handle both synchronous and asynchronous errors","msgtype":"m.text"},"ts":1401255339000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"in many cases","msgtype":"m.text"},"ts":1401255341000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"and this is messy","msgtype":"m.text"},"ts":1401255345000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i don't understand why you ever have to handle the synchronous errors i'm talking about","msgtype":"m.text"},"ts":1401255359000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if the code is written right, you'll never get them","msgtype":"m.text"},"ts":1401255368000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"because safari doesn't support a feature that you want to use in your app which works perfectly well on FFos","msgtype":"m.text"},"ts":1401255387000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"(i guess except if you're feature-testing, but in that specific case a sync exception is a hell of an easier way to deal with it than an async one)","msgtype":"m.text"},"ts":1401255398000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or IE doesn't, or Opera doesn't, or... etc","msgtype":"m.text"},"ts":1401255403000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"(sync exception from the browser, i mean)","msgtype":"m.text"},"ts":1401255410000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sure, but then you still need to tiptoe around the synchronous errors","msgtype":"m.text"},"ts":1401255428000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"there's no tip-toeing dude. you just wrap the call you're unsure about in a try/catch and use the alternative api if it throws.","msgtype":"m.text"},"ts":1401255450000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's as blunt as it comes.","msgtype":"m.text"},"ts":1401255461000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's tiptoeing","msgtype":"m.text"},"ts":1401255465000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it's as subtle as an axe.","msgtype":"m.text"},"ts":1401255479000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"okay, let's put it another way, it's going an extra length to evade an error that realistically you shouldn't even have to care about","msgtype":"m.text"},"ts":1401255504000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"because you're writing tests to verify that your code works as you expect it to","msgtype":"m.text"},"ts":1401255517000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"you're paying some kid 200k/year to manage your selenium testing infrastructure","msgtype":"m.text"},"ts":1401255543000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"what? no, i'm just talking about feature-testing here","msgtype":"m.text"},"ts":1401255560000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"try { someHostObject.someAttribute = 'someValueThatMightNotBeSupported' } catch { someHostObject.someAttribute = 'theSadderAlternative' }","msgtype":"m.text"},"ts":1401255599000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's it","msgtype":"m.text"},"ts":1401255602000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah i think there are a couple points being made about this and they're getting mixed up a bit","msgtype":"m.text"},"ts":1401255602000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"that would certainly explain why i am regularly feeling in this discussion (not just with you) that people are arguing against points i haven't made","msgtype":"m.text"},"ts":1401255646000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so, I don't have a strong opinion on it, I could live with synchronous exceptions -- they do win for feature detection","msgtype":"m.text"},"ts":1401255714000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"but, I think they can still lead to the writing of very messy code, too","msgtype":"m.text"},"ts":1401255737000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"(have you seen the kind of code that promises can lead to? they're hardly a panacea either.)","msgtype":"m.text"},"ts":1401255773000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"except for feature testing, the code for what i'm proposing is exactly zero lines of code.","msgtype":"m.text"},"ts":1401255792000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and for feature testing, it's simpler with exceptions.","msgtype":"m.text"},"ts":1401255803000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"definitely--but I think if you mix and match handling errors in rejection handlers as well as synchronous catch blocks, that's kinda sucky","msgtype":"m.text"},"ts":1401255808000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"there's no mixing and matching.","msgtype":"m.text"},"ts":1401255817000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you only handle exceptions in the rejection handlers.","msgtype":"m.text"},"ts":1401255827000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ideally, asynchronous apis should __always__ be asynchronous","msgtype":"m.text"},"ts":1401255827000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"yes, the _APIs_ should always be asynchronous. no objection there.","msgtype":"m.text"},"ts":1401255841000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'm only talking about how the UA reacts when you do something outside of the API","msgtype":"m.text"},"ts":1401255852000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"like typo the method call, get the wrong arguments, pass in an object that's of the wrong type or in the wrong state, etc.","msgtype":"m.text"},"ts":1401255867000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"don't you think for a dynamic language it's easier to deal with this stuff with tests that don't happen during the runtime of the actual application?","msgtype":"m.text"},"ts":1401255914000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"can you elaborate on \"this stuff\"?","msgtype":"m.text"},"ts":1401255942000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"checking for things like syntax errors or type errors","msgtype":"m.text"},"ts":1401255951000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"yes.","msgtype":"m.text"},"ts":1401255956000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's my point.","msgtype":"m.text"},"ts":1401255961000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but then you're also saying you want to have the same behaviour during runtime, and I'm less sure about that, because the audience of a live application doesn't get much benefit from hearing about how you mistyped something","msgtype":"m.text"},"ts":1401256034000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"pretty sure the audience of a live application doesn't care if they hear about it via exceptions or rejected promises","msgtype":"m.text"},"ts":1401256072000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"they might care because it won't crash their app ;p","msgtype":"m.text"},"ts":1401256099000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"but if they hear about it via exceptions, the code will just stop, whereas if they get a rejected promise, the code will continue, likely doing unexpected things (since the code isn't ready to accept this) and corrupting their data.","msgtype":"m.text"},"ts":1401256109000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah but you just know people are just going to use sweetjs to wrap everything in try/catch blocks so that their precious puppy catalog app doesn't break","msgtype":"m.text"},"ts":1401256176000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"we're already past the point where their app breaks","msgtype":"m.text"},"ts":1401256193000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"we're just debating how it breaks","msgtype":"m.text"},"ts":1401256197000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"notice that nothing that the \"all promises all the time\" team is proposing will stop ReferenceErrors (where you typo the method name) from being sync","msgtype":"m.text"},"ts":1401256228000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'm just saying we should have a few more sync exceptions than they are","msgtype":"m.text"},"ts":1401256236000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so, this takes us back to the feature-detection thing, because I agree that you shouldn't need to handle exceptions like that (although I know that people will go out of their way to solve the problem the \"wrong way\" with catch blocks)","msgtype":"m.text"},"ts":1401256335000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"and this is the case where browser A behaves correctly, and browser B doesn't, and browser C also doesn't, but behaves incorrectly in a different way","msgtype":"m.text"},"ts":1401256361000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"this would vary from api to api, but if things are going to throw when they really shouldn't, that really sucks","msgtype":"m.text"},"ts":1401256390000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"and yeah, rejection handlers don't really solve that","msgtype":"m.text"},"ts":1401256474000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"that's true","msgtype":"m.text"},"ts":1401256481000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"zcorpan: Is there anything that is not addressed on DOMPoint, DOMRect, DOMQuad in http://dev.w3.org/fxtf/geometry/ ?","msgtype":"m.text"},"ts":1401261740000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"krit: don't think so","msgtype":"m.text"},"ts":1401261974000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"On Ringmark: \"we were instructed to take whatever steps were necessary to make Firefox and Opera look as good as possible in those tests so that some kind of partnership might blossom\"","msgtype":"m.text"},"ts":1401262085000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"zcorpan: ok, I will ask for a detailed review tomorrow and give a 2 weeks time frame. If there are no bigger concerns, we can move to LC.","msgtype":"m.text"},"ts":1401262273000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"krit: ok","msgtype":"m.text"},"ts":1401262313000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: because we are at it, why does DOMQuad have no CTOR for DOMPoint? http://dev.w3.org/fxtf/geometry/#DOMQuad","msgtype":"m.text"},"ts":1401262320000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"sorry, DOMPointReadOnly as argument I mean","msgtype":"m.text"},"ts":1401262339000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"just has DOMPointInit","msgtype":"m.text"},"ts":1401262352000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"krit: you can pass in such objects and webidl rules convert them to DOMPointInit","msgtype":"m.text"},"ts":1401262441000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: oh cool, didn't know that","msgtype":"m.text"},"ts":1401262460000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"i guess we could put in a few notes about webidl tricks the spec uses","msgtype":"m.text"},"ts":1401262512000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: yes, some examples. Was about to add some today. Would be great if you could add some for DOMQuad or DOMRect where appropriate","msgtype":"m.text"},"ts":1401262552000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"krit: can you file bugs where you want me to add examples?","msgtype":"m.text"},"ts":1401262590000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: hm, I try to :)","msgtype":"m.text"},"ts":1401262602000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"thx :-)","msgtype":"m.text"},"ts":1401262612000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: added 3 bug reports. Think the spec would benefit of examples here. https://www.w3.org/Bugs/Public/buglist.cgi?component=Geometry&list_id=37973&product=FXTF&resolution=---  I can create the graphics for 25904 if you create the example.","msgtype":"m.text"},"ts":1401263088000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"zcorpan: DOMMatrix needs some examples as well of course. Add them today.","msgtype":"m.text"},"ts":1401263102000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"krit: ok","msgtype":"m.text"},"ts":1401263110000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"krit: i can try to look at it next week i think","msgtype":"m.text"},"ts":1401263127000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: maybe I can try to create some examples and give it to you for review","msgtype":"m.text"},"ts":1401263205000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"bbiab","msgtype":"m.text"},"ts":1401263310000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Domenic: they do, but you don't really have to queue a task in this case; you want to change state on an object and resolve the promise, and only expose the object's changed state the moment the promise's callbacks are invoked in the microtask queued for that","msgtype":"m.text"},"ts":1401263354000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: TabAtkins: hmm yeah I guess you have to queue a task, seems somewhat sad it cannot be done in that microtask that's already happening anyway","msgtype":"m.text"},"ts":1401264361000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the path to icons is wrong now in e.g. http://html5.org/r/6551","msgtype":"m.text"},"ts":1401265047000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: fixed","msgtype":"m.text"},"ts":1401265398000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"After a little over three years https://github.com/whatwg/dom/commit/9c2833fe3833d709dd9d66c985131528ff1bd966 it seems we are finally getting to the point where the \"Core\" part of DOM Level 3 Events is finally made obsolete https://www.w3.org/Bugs/Public/show_bug.cgi?id=25485#c5","msgtype":"m.text"},"ts":1401265755000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hayato: two of the shadow-dom testing PRs at https://github.com/w3c/web-platform-tests/pulls/iseki-masaya have been awaiting review for a couple of months now","msgtype":"m.text"},"ts":1401266286000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Let me review those. Thanks for letting me know that.","msgtype":"m.text"},"ts":1401266424000,"senderName":"hayato","senderId":"hayato@irc"},
{"content":{"body":"hayato: thanks much","msgtype":"m.text"},"ts":1401266438000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hayato: btw the submitter of those two PRs didn't respond at all to the previous review comment you made on the third one, so I'm not sure it's super likely he'll respond on these. So don't sink a huge amount of time into it.","msgtype":"m.text"},"ts":1401266547000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I got it. Ill see to it. Thank you for your help.","msgtype":"m.text"},"ts":1401266679000,"senderName":"hayato","senderId":"hayato@irc"},
{"content":{"body":"annevk: thanks!","msgtype":"m.text"},"ts":1401267247000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"jungkees: thanks for working on the hooks, will review in a bit","msgtype":"m.text"},"ts":1401267623000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks!","msgtype":"m.text"},"ts":1401267667000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"jungkees: btw, started working on this: http://fetch.spec.whatwg.org/#fetch-api","msgtype":"m.text"},"ts":1401267696000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I've seen that and will follow on it","msgtype":"m.text"},"ts":1401267784000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"jungkees: btw, please make it clear somehow that the Cache API will be generic and needs to work in a document environment as well eventually","msgtype":"m.text"},"ts":1401267822000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: was not clear to the person working on it in Gecko","msgtype":"m.text"},"ts":1401267833000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: JakeA has better idea I think. AFAIK, we intended to enable that in document context during the dicussion","msgtype":"m.text"},"ts":1401267921000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"annevk: not for V1 I guess","msgtype":"m.text"},"ts":1401267941000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"jungkees: JakeA: yeah, but there should at least be a note to that effect","msgtype":"m.text"},"ts":1401267994000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: same for fetch()?","msgtype":"m.text"},"ts":1401268022000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: in Fetch I defined fetch() as being exposed as window.fetch()","msgtype":"m.text"},"ts":1401268343000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ahh cool","msgtype":"m.text"},"ts":1401268353000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: we'll see what implementations say","msgtype":"m.text"},"ts":1401268357000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: your guide looks good, might want to coordinate or link to Domenic's version here https://github.com/w3ctag/promises-guide","msgtype":"m.text"},"ts":1401271401000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan, foolip: Thanks for the help with the WebVTT issues","msgtype":"m.text"},"ts":1401275135000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: np!","msgtype":"m.text"},"ts":1401275148000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"zcorpan: added examples and notes http://dev.w3.org/fxtf/geometry/#DOMQuad","msgtype":"m.text"},"ts":1401275625000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"krit: ok cool. i don't have time to review today, though :-(","msgtype":"m.text"},"ts":1401275663000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"https://www.w3.org/Bugs/Public/show_bug.cgi?id=25894 ... so .... people expecting their feedback to go to /dev/null might explain some of the junk bugs we get","msgtype":"m.text"},"ts":1401283491000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hixie: maybe s/Submit Review Comment/Submit Bugzilla Issue/ ?","msgtype":"m.text"},"ts":1401283623000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"or just \"Report bug\" maybe","msgtype":"m.text"},"ts":1401283675000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"If that guy had a million discussions about charset, he didn't learn much from it :/","msgtype":"m.text"},"ts":1401283689000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Or gal, I guess","msgtype":"m.text"},"ts":1401283695000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"they seem upset","msgtype":"m.text"},"ts":1401287060000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: so is plural the preferred form? seems so weird","msgtype":"m.text"},"ts":1401287341000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"¯\\_(ツ)_/","msgtype":"m.text"},"ts":1401287391000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"annevk: Except for the part where I said \"dunno lol, ask Anne\", of course.","msgtype":"m.text"},"ts":1401288772000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: yeah so it seems like you might have to queue a task, except that seems somewhat sad since a microtask would happen for the promise already (if there's listeners)","msgtype":"m.text"},"ts":1401288852000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: maybe Hixie or Domenic has some thoughts on that","msgtype":"m.text"},"ts":1401288872000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Right, if you could align with the promise's microtask it would be nice.","msgtype":"m.text"},"ts":1401288874000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Queuing a task would do that btw, it's just not as \"quick\"","msgtype":"m.text"},"ts":1401288894000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Because it's technically two tasks?","msgtype":"m.text"},"ts":1401289067000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: because it happens later (e.g. if there's a bunch of other stuff queued)","msgtype":"m.text"},"ts":1401289292000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: but that might be okay, the other stuff might be more important","msgtype":"m.text"},"ts":1401289301000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Eh, doesn't matter all that much.  It's async already, so the exact point in time when the info change becomes visible isn't that important, as long as it happens before promise resolution.","msgtype":"m.text"},"ts":1401289357000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So the language is just \"queue a (micro?)task to XXX\" in the middle of an algo step?","msgtype":"m.text"},"ts":1401289378000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: queue a task to set status and resolve promise to y I suppose","msgtype":"m.text"},"ts":1401289811000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: note that I still think changing status without having a way to get notified about that is bad, better to leave it unchanged in that case","msgtype":"m.text"},"ts":1401289879000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hm, ok.  So just resolving promise normally (no task language) is fine when nothing else accompanies it, but for clarity you should resolve it in the same task that you're setting observable state in, if you're doing so.","msgtype":"m.text"},"ts":1401289911000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: otherwise promise observers would get called before the state was changed","msgtype":"m.text"},"ts":1401290007000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh, because of the task/microtask distinction?","msgtype":"m.text"},"ts":1401290041000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yes, promise thing would happen end-of-current task, whatever that is, and state thing would at best happen next-task","msgtype":"m.text"},"ts":1401290070000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Okay.  And it's a no-no to explicitly invoke microtasks in async algos, because those are reserved for only a handful of things?","msgtype":"m.text"},"ts":1401290132000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: it seems like these days you could queue a microtask","msgtype":"m.text"},"ts":1401290267000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: I'd like to know what Hixie thinks about using that","msgtype":"m.text"},"ts":1401290298000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That would let me make the state change without delaying promise resolution until the next task","msgtype":"m.text"},"ts":1401290519000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Either way maintains the necessary ordering, but resolving the promise on a task is obviously slower.","msgtype":"m.text"},"ts":1401290561000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Is there a polyfill for Element.prototype.queryAll?","msgtype":"m.text"},"ts":1401290635000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"TabAtkins: it's later, might not be slower overall","msgtype":"m.text"},"ts":1401290731000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah, but chaining \"later\" multiple times is slower.","msgtype":"m.text"},"ts":1401290927000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"JonathanNeal: jQuery","msgtype":"m.text"},"ts":1401290938000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: one of those days, huh. :-)","msgtype":"m.text"},"ts":1401290973000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"TabAtkins: example?","msgtype":"m.text"},"ts":1401290977000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JonathanNeal: Being serious. Jq's .find is our .query all.","msgtype":"m.text"},"ts":1401291031000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: If you're gonna kick off more async requests, you want those as soon as possible","msgtype":"m.text"},"ts":1401291093000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"On the other hand, you might be kicking off async requests from event handlers too","msgtype":"m.text"},"ts":1401291124000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So I guess it doesn't actually matter.","msgtype":"m.text"},"ts":1401291139000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, annevk: i'm here, not sure i understand the discussion above though (missing some context?)","msgtype":"m.text"},"ts":1401291801000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I have an algo with an async section...","msgtype":"m.text"},"ts":1401291814000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: In it, I need to make some author-visible state change (set a FontFace's status attribute to \"loaded\"), and then resolve a promise.","msgtype":"m.text"},"ts":1401291836000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: I think I need to queue a task to do the attribute setting, so it happens at a well-defined time.","msgtype":"m.text"},"ts":1401291851000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: And I should probably also resolve the promise in the task, so there's a well-defined ordering between attribute-set and promise-resolve.","msgtype":"m.text"},"ts":1401291877000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ideally you'd make it happen in the same microtask as the promise is resolved in","msgtype":"m.text"},"ts":1401291886000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: But should I do those operations in a task or a microtask?","msgtype":"m.text"},"ts":1401291886000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1401291893000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"as the promise callback is called in","msgtype":"m.text"},"ts":1401291899000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yeah, kk.  (I was about to correct your terminology. ^_^)","msgtype":"m.text"},"ts":1401291911000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"but failing that, this seems like the kind of thing i would use \"await a stable state\" for","msgtype":"m.text"},"ts":1401291944000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"So it ideally happens in the same microtask as promise callbacks, before the callbacks are called.  I don't think we have prose hooks for that.","msgtype":"m.text"},"ts":1401291946000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hm, interesting.","msgtype":"m.text"},"ts":1401291968000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"that lets you build the algorithm pretty neatly, but in the background it's just built with microtasks","msgtype":"m.text"},"ts":1401291977000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"basically it lets you designate a set of steps that execute as a microtask while the rest of the algorithm is async","msgtype":"m.text"},"ts":1401292002000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"a bit like a synchronised section","msgtype":"m.text"},"ts":1401292013000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Example in a spec?","msgtype":"m.text"},"ts":1401292027000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"one sec","msgtype":"m.text"},"ts":1401292046000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"search for \"Failed with elements: Queue a task to fire a simple\"","msgtype":"m.text"},"ts":1401292099000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and look at steps 10-20 below that","msgtype":"m.text"},"ts":1401292108000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Urg, I gotta load single-page for that.  kk.","msgtype":"m.text"},"ts":1401292180000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"one sec","msgtype":"m.text"},"ts":1401292194000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i can give you the multipage link","msgtype":"m.text"},"ts":1401292198000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Would be nice, since I'm tethering my internet right now.","msgtype":"m.text"},"ts":1401292213000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"it's in http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#concept-media-load-algorithm","msgtype":"m.text"},"ts":1401292220000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but ignore the first occurance of stable-state in that algorithm and look for the one i mentioned earlier","msgtype":"m.text"},"ts":1401292244000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"because the first one does a confusing fork in the middle of the stable state","msgtype":"m.text"},"ts":1401292253000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and that obscures the point i'm trying to make :-)","msgtype":"m.text"},"ts":1401292261000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Okay, cool.  I'll recommend using a nested list for that, rather than unicode characters, but this works.  ^_^","msgtype":"m.text"},"ts":1401292320000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"well the unicode characters are non-normative","msgtype":"m.text"},"ts":1401292366000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"they just make it more obvious where the synchronisation starts and ends","msgtype":"m.text"},"ts":1401292379000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(i recommend being typographically consistent for the readers' benefit)","msgtype":"m.text"},"ts":1401292402000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but sure, it could also be described as a set of steps in a sublist","msgtype":"m.text"},"ts":1401292441000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"So I think I'd go \"Asynchronously await a stable state, then execute the following steps synchronously: <nested-list>\".","msgtype":"m.text"},"ts":1401292448000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Where <nested-list> is \"1. Set font face's status attribute to \"loading\". 2. Accept the promise with font face.\".","msgtype":"m.text"},"ts":1401292480000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"make sure if this isn't the end of the algorithm that you also have the \"3. Resume the rest of the algorithm asynchronously.\"","msgtype":"m.text"},"ts":1401292755000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Isn't that implied by the end of the list?","msgtype":"m.text"},"ts":1401292809000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"someone filed a bug asked for me to spec focusin/focusout, so I filed a bug on a browser asking if we could maybe remove them instead, and the end result is that now I might have to also spec DOMFocusIn/DOMFocusOut. wtf.","msgtype":"m.text"},"ts":1401292814000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: as currently written, no","msgtype":"m.text"},"ts":1401292831000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: (because don't forget, in my case i don't have a nested list)","msgtype":"m.text"},"ts":1401292838000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I know that in your case you don't.","msgtype":"m.text"},"ts":1401292847000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I suppose being clear about things is fine.  Just trying to reduce boilerplate to a minimum.","msgtype":"m.text"},"ts":1401292876000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"understood","msgtype":"m.text"},"ts":1401293072000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i think synchronous sections are confusing enough that being overtly explicit each time is probably reasonable","msgtype":"m.text"},"ts":1401293100000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: focus :-(","msgtype":"m.text"},"ts":1401293372000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Also, recent emails on UI events :-(","msgtype":"m.text"},"ts":1401293633000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"We'll just augment that other spec\"","msgtype":"m.text"},"ts":1401293648000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: you still around? Should we talk about cleanup now?","msgtype":"m.text"},"ts":1401294111000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: i've got some time this afternoon, but right now is poor","msgtype":"m.text"},"ts":1401299446000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Is Emotion Markup Language (http://www.w3.org/TR/2014/REC-emotionml-20140522/) something that might be brought into html?","msgtype":"m.text"},"ts":1401301350000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"estellevw: what's the use case?","msgtype":"m.text"},"ts":1401301491000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"estellevw: are any browsers interested in implementing it?","msgtype":"m.text"},"ts":1401301501000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i don't have one. I was basically wondering if it's something anyone cares about and if I should spend brain cells on it","msgtype":"m.text"},"ts":1401301526000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"but if no one has even heard about it, the answer would be no","msgtype":"m.text"},"ts":1401301550000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"at least at this time","msgtype":"m.text"},"ts":1401301554000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"i've only heard of it in the context of jokes...","msgtype":"m.text"},"ts":1401301589000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ok, thanks. I thought it might be a joke, but too much effort seemed to have been put in it for it to be one, and the date wasn't April 1","msgtype":"m.text"},"ts":1401301783000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"oh i'm sure it was not intended as a joke","msgtype":"m.text"},"ts":1401302032000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"not clear what it's relationship to the web is though, even though it happened at the w3c","msgtype":"m.text"},"ts":1401302057000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"*-Star","msgtype":"m.text"},"ts":1401305330000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh wrong, WS-*","msgtype":"m.text"},"ts":1401305356000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"emotionml sounds like a *very* strange idea","msgtype":"m.text"},"ts":1401307111000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"well you need a way to convey <sarcasm />","msgtype":"m.text"},"ts":1401307148000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i looked for this in the spec, but maybe i missed it.....if a document is loaded via POST, then navigates to a fragment identifier, then a reloaded is triggered, should the resulting request be a GET or a POST?","msgtype":"m.text"},"ts":1401307734000,"senderName":"japhet","senderId":"japhet@irc"},
{"content":{"body":"the behavior is explicitly state to be GET for pushState and replaceState, but i didn't see anything for fragment identifiers","msgtype":"m.text"},"ts":1401307772000,"senderName":"japhet","senderId":"japhet@irc"},
{"content":{"body":"japhet: You're not changing the resource, so I think it's still POST.","msgtype":"m.text"},"ts":1401309008000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk_:","msgtype":"m.text"},"ts":1401309020000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: that was my best guess, but I figured I should ask before arbitrarily changing blink","msgtype":"m.text"},"ts":1401309036000,"senderName":"japhet","senderId":"japhet@irc"},
{"content":{"body":"Updated Font Loading to use the right async language, using language culled from Hixie.  Review would be appreciated.","msgtype":"m.text"},"ts":1401309041000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"japhet: Just guessing here, though. Dunno what the specs might say for it.","msgtype":"m.text"},"ts":1401309058000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk_: Updated Font Loading to use the right async language, using language culled from Hixie.  Review would be appreciated.","msgtype":"m.text"},"ts":1401309069000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: tomorrow ok?","msgtype":"m.text"},"ts":1401309194000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, no rush.","msgtype":"m.text"},"ts":1401309202000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1401309213000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: oh, and just to be clear, tweet about standards is not aimed at you either :-)","msgtype":"m.text"},"ts":1401309357000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Hahaha, I knew that.","msgtype":"m.text"},"ts":1401309672000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAkints: in bikeshed README, 'textual shortcuts for autolinks' link 404s for some reason","msgtype":"m.text"},"ts":1401310372000,"senderName":"sgalineau","senderId":"sgalineau@irc"},
{"content":{"body":"TabAtkins, even","msgtype":"m.text"},"ts":1401310381000,"senderName":"sgalineau","senderId":"sgalineau@irc"},
{"content":{"body":"Weird, I'll check it out.","msgtype":"m.text"},"ts":1401310395000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"it is; the file is definitely there","msgtype":"m.text"},"ts":1401310436000,"senderName":"sgalineau","senderId":"sgalineau@irc"},
{"content":{"body":"Man, that's been broken *forever*.","msgtype":"m.text"},"ts":1401310475000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Fixed now.","msgtype":"m.text"},"ts":1401310478000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Typo in the url.","msgtype":"m.text"},"ts":1401310484000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Missing an \"s\" at the end of \"definitions\".)","msgtype":"m.text"},"ts":1401310494000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: Any objections to me working on Bikeshedding DOM for you?","msgtype":"m.text"},"ts":1401311859000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: no sounds great","msgtype":"m.text"},"ts":1401311915000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: not sure about putting promise stuff in DOM though ;-)","msgtype":"m.text"},"ts":1401311926000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: but that's also for tomorrow","msgtype":"m.text"},"ts":1401311932000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"kk","msgtype":"m.text"},"ts":1401311943000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"How did HTMLSpanElement come about? /cc Hixie","msgtype":"m.text"},"ts":1401312156000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: I think if DOM defines #concept-throw, it can also define #concept-reject. Although I imagine you prefer to move both of those to WebIDL.","msgtype":"m.text"},"ts":1401312194000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I do","msgtype":"m.text"},"ts":1401312245000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: You mean like, the historical reasoning for adding the <span> element?  Or actually the interface?","msgtype":"m.text"},"ts":1401312299000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: I'm fine with both of them being in WebIDL too; all I care is that they both exist *somewhere*, and if putting reject in DOM is the fastest way to get it written down somewhere I can refer to, that's better.","msgtype":"m.text"},"ts":1401312338000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"MikeSmith: btw, i see 408s all the time with w3c bugzilla, but never anywhere else. so i do think it's something to do with w3c bugzilla.","msgtype":"m.text"},"ts":1401313651000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: the interface. Given that it adds nothing to HTMLElement, I feel there must be a story there.","msgtype":"m.text"},"ts":1401315873000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah, identification. There's sine missteps, but *most* elements have unique interfaces.","msgtype":"m.text"},"ts":1401317875000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]