[
{"content":{"body":"annevk: yt?","msgtype":"m.text"},"ts":1182671520000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: in selectors api, using javascript, if resolver returns undefined, is the namespace then the string \"undefined\"?","msgtype":"m.text"},"ts":1182678300000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Lachy: it seems cumbersome to have to explicitly return the empty string instead of just not bothering and let it return undefined...","msgtype":"m.text"},"ts":1182678360000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"or is undefined in javascript equivalent to no return value?","msgtype":"m.text"},"ts":1182678420000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"or hmm, actually, nevermind","msgtype":"m.text"},"ts":1182678540000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Lachy: anyway, it seems the spec doesn't contain any conformance requirements for documents, and thus, the conforming documents and conforming authoring tools conformance classes can be dropped","msgtype":"m.text"},"ts":1182678900000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Lachy, am now","msgtype":"m.text"},"ts":1182679980000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"getElementsByClassName returns a live NodeList btw","msgtype":"m.text"},"ts":1182680100000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that's a usecase","msgtype":"m.text"},"ts":1182680101000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: in JS, undefined == null, and the spec defines how to handle null","msgtype":"m.text"},"ts":1182680460000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"however, it's not === null","msgtype":"m.text"},"ts":1182680520000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"until the binding spec covers this you probably need to handle undefined","msgtype":"m.text"},"ts":1182680521000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"How can I make it clearer that anything that == null, should be treated as null","msgtype":"m.text"},"ts":1182680580000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"passing a prefix that is not in the table will return undefined too","msgtype":"m.text"},"ts":1182680700000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: I already dropped conforming authoring tool.  Were you looking at an old revision?","msgtype":"m.text"},"ts":1182680701000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: ah. yes.","msgtype":"m.text"},"ts":1182680760000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Lachy: the resolver could be rewritten a bit more elegantly:","msgtype":"m.text"},"ts":1182680761000,"senderName":"hasather_","senderId":"hasather_@irc"},
{"content":{"body":"function resolver(prefix) {","msgtype":"m.text"},"ts":1182680762000,"senderName":"hasather_","senderId":"hasather_@irc"},
{"content":{"body":"  return {","msgtype":"m.text"},"ts":1182680763000,"senderName":"hasather_","senderId":"hasather_@irc"},
{"content":{"body":"    \"xh\": \"http://www.w3.org/1999/xhtml\",","msgtype":"m.text"},"ts":1182680764000,"senderName":"hasather_","senderId":"hasather_@irc"},
{"content":{"body":"    \"svg\": \"http://www.w3.org/2000/svg\"","msgtype":"m.text"},"ts":1182680765000,"senderName":"hasather_","senderId":"hasather_@irc"},
{"content":{"body":"  }[prefix] || \"\";","msgtype":"m.text"},"ts":1182680766000,"senderName":"hasather_","senderId":"hasather_@irc"},
{"content":{"body":"}","msgtype":"m.text"},"ts":1182680767000,"senderName":"hasather_","senderId":"hasather_@irc"},
{"content":{"body":"I'm not sure if I'll keep \"conforming application\" in there, that's only there cause there's a few authoring requirements.","msgtype":"m.text"},"ts":1182680768000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"given the function above, passing in \"foo\" as the prefix will return undefined","msgtype":"m.text"},"ts":1182680820000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hasather_: yes, it could, but I chose clarity over being a minimalist","msgtype":"m.text"},"ts":1182680821000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"zcorpan: it will return \"\"","msgtype":"m.text"},"ts":1182680822000,"senderName":"hasather_","senderId":"hasather_@irc"},
{"content":{"body":"hasather_: oh, right. ok, given a function in the spec will return undefined","msgtype":"m.text"},"ts":1182680880000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"oh, I see","msgtype":"m.text"},"ts":1182680881000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"an unknown prefix should not get the default namespace","msgtype":"m.text"},"ts":1182680940000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"it should raise an exception or something","msgtype":"m.text"},"ts":1182680941000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"as in css, the ruleset will be dropped","msgtype":"m.text"},"ts":1182680942000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hmm. It doesn't look like I handle returning of empty strings for prefixes in a special way.","msgtype":"m.text"},"ts":1182681000000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"should I?","msgtype":"m.text"},"ts":1182681001000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"annevk: I wanted to ask you about this earlier...","msgtype":"m.text"},"ts":1182681120000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"if you wanted to declare e.g. xhtml as being the default namespace, it should be possible to say ...{ if (prefix == \"\") return \"http://www.w3.org/1999/xhtml\"; } right?","msgtype":"m.text"},"ts":1182681121000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"It currently says \"In doing so, user agents may assume that the object implementing the NSResolver  interface (or ECMAScript Function) only relies on scoped variables, doesn't invoke processes outside the object and returns consistent results when its lookupNamespaceURI method is invoked.\"","msgtype":"m.text"},"ts":1182681180000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"in terminology and conventions http://dev.w3.org/cvsweb/~checkout~/2006/webapi/selectors-api/Overview.html?content-type=text/html;%20charset=utf-8#terminology","msgtype":"m.text"},"ts":1182681181000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1182681182000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'd make it as simple as possible for authors with copy & paste samples","msgtype":"m.text"},"ts":1182681240000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"why should a UA assume scoped variables and not invoking outside processes?","msgtype":"m.text"},"ts":1182681241000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"you could just define that if it returns anything but a non-empty string","msgtype":"m.text"},"ts":1182681242000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and that null and undefined count as the empty string","msgtype":"m.text"},"ts":1182681243000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'll probably just change that to say this instead, since those other 2 assumptions don't make sense \"...user agents may assume that the object implementing the NSResolver interface (or ECMAScript Function) returns consistent results...\"","msgtype":"m.text"},"ts":1182681420000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"hmm. No return value in JS means undefined, not void","msgtype":"m.text"},"ts":1182681780000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"is there a need for the Interoperability Considerations section to be normative?  I can't see a reason for it, so I'll make it non-normative","msgtype":"m.text"},"ts":1182682380000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"as long as sections don't contain normative keywords you don't really have to mention it","msgtype":"m.text"},"ts":1182682740000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I rephrased it and it uses \"may\", but not really in the RFC2119 sense, so I probably should explicitly state that","msgtype":"m.text"},"ts":1182682800000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"better to replace the use of may I suppose","msgtype":"m.text"},"ts":1182682801000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"this is what it says now: \"Since user agents may optimise the algorithms described in this specification, and because some may invoke the NSResolver object more than others, interoperability concerns may arise if the the NSResolver object (or ECMAScript Function) causes side effects or returns inconsistent results each time it is invoked.\"","msgtype":"m.text"},"ts":1182682920000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"any suggestions?","msgtype":"m.text"},"ts":1182682980000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"can arise","msgtype":"m.text"},"ts":1182683040000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"are allowed to optimise","msgtype":"m.text"},"ts":1182683041000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that's like what was there before, and I didn't particularly like it","msgtype":"m.text"},"ts":1182683100000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"why not make anything that isn't a string (i.e. ===) raise an exception? in particular, undeclared prefixes shouldn't be silently accepted as the default namespace or no namespace","msgtype":"m.text"},"ts":1182685020000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"that's not consistent with how it works in css","msgtype":"m.text"},"ts":1182685080000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"should i elaborate in an email?","msgtype":"m.text"},"ts":1182685200000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Lachy: yt?","msgtype":"m.text"},"ts":1182686040000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yo","msgtype":"m.text"},"ts":1182686041000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"see above","msgtype":"m.text"},"ts":1182686100000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: that's how it does work for prefixes.  Only the default namespace allows you to return undefiend/null/etc.","msgtype":"m.text"},"ts":1182686101000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1182686160000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1182686161000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"then it's fine","msgtype":"m.text"},"ts":1182686162000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"it's a NAMESPACE_ERR exception, see the definition of \"unresolvable namespace\"","msgtype":"m.text"},"ts":1182686220000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"yeah, i see it now","msgtype":"m.text"},"ts":1182686221000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"then the function doesn't need to return the empty string for the default namespace, you can just let it return undefined. good. :)","msgtype":"m.text"},"ts":1182686280000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah, but I'm a perfectionist and I prefer to make it more explicit in the examples","msgtype":"m.text"},"ts":1182686460000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"though, I'm not sure if it's better to return \"\" or null?","msgtype":"m.text"},"ts":1182686461000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"in the examples?","msgtype":"m.text"},"ts":1182686640000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i think it's better to let it return undefined when you don't want to declare a default namespace. when you do, you use the \"\" prefix the same way as the other prefixes","msgtype":"m.text"},"ts":1182686820000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"function resolver(prefix) {","msgtype":"m.text"},"ts":1182687000000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"  var ns = {","msgtype":"m.text"},"ts":1182687001000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"    \"xh\"  :\"http://www.w3.org/1999/xhtml\",","msgtype":"m.text"},"ts":1182687002000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"    \"xbl\" :\"http://www.w3.org/ns/xbl\",","msgtype":"m.text"},"ts":1182687003000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"    \"svg\" :\"http://www.w3.org/2000/svg\",","msgtype":"m.text"},"ts":1182687004000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"    \"math\":\"http://www.w3.org/1998/Math/MathML\"","msgtype":"m.text"},"ts":1182687005000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"  };","msgtype":"m.text"},"ts":1182687006000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"  return ns[prefix];","msgtype":"m.text"},"ts":1182687007000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"}","msgtype":"m.text"},"ts":1182687008000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"if you want to declare xhtml as the default namespace, replace \"xh\" with \"\"","msgtype":"m.text"},"ts":1182687009000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"and that is the boilerplate","msgtype":"m.text"},"ts":1182687010000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"imho","msgtype":"m.text"},"ts":1182687120000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"should I leave returning an empty string for the default namespace, as meaning no default namespace?","msgtype":"m.text"},"ts":1182689880000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"hmm. XMLNS says \"The empty string, though it is a legal URI reference, cannot be used as a namespace name.\" -- http://www.w3.org/TR/REC-xml-names/#iri-use","msgtype":"m.text"},"ts":1182690000000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"perahps I should make the empty string returned for a prefix throw an exception, and leave it as is for the default ns","msgtype":"m.text"},"ts":1182690060000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: yeah.","msgtype":"m.text"},"ts":1182691620000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"namespaces in XML5 are sort of working","msgtype":"m.text"},"ts":1182691980000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"started doing some work on it again","msgtype":"m.emote"},"ts":1182691981000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I should probably make some enhancements to the tokenizer to make <:foo> not work","msgtype":"m.text"},"ts":1182692040000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"<x::> is prolly not that harmful although potentially confusing","msgtype":"m.text"},"ts":1182692041000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: I adjusted the default NS examples as you suggested","msgtype":"m.text"},"ts":1182692220000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: checked in?","msgtype":"m.text"},"ts":1182692280000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"not yet","msgtype":"m.text"},"ts":1182692281000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1182692282000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"if someone can come up with an extension of the html5lib testsuite format that covers namespace, prefix, localname, name, and value (for attributes) that'd be great","msgtype":"m.text"},"ts":1182692340000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"checked in latest changes http://dev.w3.org/cvsweb/~checkout~/2006/webapi/selectors-api/Overview.src.html?content-type=text/html;%20charset=utf-8","msgtype":"m.emote"},"ts":1182694800000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"I'd drop REQUIRED, SHALL and SHALL NOT from the document","msgtype":"m.text"},"ts":1182694980000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1182694981000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"also, selectElement returns an Element, not a Node","msgtype":"m.text"},"ts":1182695100000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hi","msgtype":"m.text"},"ts":1182695160000,"senderName":"Aidan[pl]","senderId":"Aidan[pl]@irc"},
{"content":{"body":"the last sample has a newline too much","msgtype":"m.text"},"ts":1182695161000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Aidan[pl], hi","msgtype":"m.text"},"ts":1182695162000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"maybe s/Informative/Non-normative/","msgtype":"m.text"},"ts":1182695163000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wher can I read more about html5. I searching polish site.","msgtype":"m.text"},"ts":1182695220000,"senderName":"Aidan[pl]","senderId":"Aidan[pl]@irc"},
{"content":{"body":"annevk: which sample has an extra line?","msgtype":"m.text"},"ts":1182695280000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"not sure about Polish resources","msgtype":"m.text"},"ts":1182695281000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Lachy, the last one in the document?","msgtype":"m.text"},"ts":1182695282000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh, I see","msgtype":"m.text"},"ts":1182695283000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"is {lookUpNamespaceURI:function(){ ... }} expected to work?","msgtype":"m.text"},"ts":1182695340000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1182695400000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"maybe have a sample for that too to make it clear?","msgtype":"m.text"},"ts":1182695401000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nm","msgtype":"m.text"},"ts":1182695402000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it's just syntactic sugar","msgtype":"m.text"},"ts":1182695403000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"what if the object contains more than that member?","msgtype":"m.text"},"ts":1182695460000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"should the spec say something about that much like putImageData has specific requirements","msgtype":"m.text"},"ts":1182695461000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it makes no difference","msgtype":"m.text"},"ts":1182695462000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"looks up putImageData","msgtype":"m.emote"},"ts":1182695463000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"it currently doesn't, indeed","msgtype":"m.text"},"ts":1182695464000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the specification doesn't define for instance what to do with objects passed that don't have that method","msgtype":"m.text"},"ts":1182695580000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it's better to just ignore any additional methods, which would allow for any future extensions to NSResolver","msgtype":"m.text"},"ts":1182695581000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"euhm","msgtype":"m.text"},"ts":1182695582000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"depends on the extension","msgtype":"m.text"},"ts":1182695583000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it sort of does because it says \"An unresolvable namespace is a namespace that cannot be resolved because there was no NSResolver provided...\", but it could be made more explicit","msgtype":"m.text"},"ts":1182695700000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"should I also remove RECOMMENDED and OPTIONAL?","msgtype":"m.text"},"ts":1182696000000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"I'd remove everything not used in the spec","msgtype":"m.text"},"ts":1182696001000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"then MUST NOT and SHOULD NOT can be removed too","msgtype":"m.text"},"ts":1182696060000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1182696061000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"The key words must, should, and may in the normative parts of this document are to be interpreted as described in [RFC2119].\"","msgtype":"m.text"},"ts":1182696062000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"nice","msgtype":"m.text"},"ts":1182696063000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think it's ready to be published as a WD now","msgtype":"m.text"},"ts":1182696120000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"did you check in?","msgtype":"m.text"},"ts":1182696180000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"will do now","msgtype":"m.text"},"ts":1182696181000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"done","msgtype":"m.text"},"ts":1182696240000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: The table iteration example could be done a lot easier using the DOM collections. Is the intention just to show gEBTN is clunky?","msgtype":"m.text"},"ts":1182696241000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1182696300000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"which DOM collections?","msgtype":"m.text"},"ts":1182696301000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"tBodies, rows, cells","msgtype":"m.text"},"ts":1182696302000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":".rows","msgtype":"m.text"},"ts":1182696303000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"maybe make it an XML table","msgtype":"m.text"},"ts":1182696304000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"<table-row> etc.","msgtype":"m.text"},"ts":1182696305000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If you're ragging on gEBTN, you should also mention it fails to separate between parent and child structures. Like it would grab the tbodies of inner tables too","msgtype":"m.text"},"ts":1182696306000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"why would I want to do that?  I think the first example should be HTML, since that will be the most common language used with it","msgtype":"m.text"},"ts":1182696360000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"in HTML you don't need gEBTN for what you're doing","msgtype":"m.text"},"ts":1182696361000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the point Dashiva makes is a good one","msgtype":"m.text"},"ts":1182696420000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gEBTN only handles descendents where selectElement handles > too","msgtype":"m.text"},"ts":1182696421000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't see how using .rows could make the example much less verbose","msgtype":"m.text"},"ts":1182696480000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"I could replace gEBTN(\"tbody\") with .tBodies","msgtype":"m.text"},"ts":1182696481000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"less typing","msgtype":"m.text"},"ts":1182696482000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and it does something slightly different","msgtype":"m.text"},"ts":1182696540000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it handles nested tables better","msgtype":"m.text"},"ts":1182696541000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the whole example could also be done using XPath .evaluate() too","msgtype":"m.text"},"ts":1182696542000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"I suppose the assumption is that that's not always supported, but HTML APIs are...","msgtype":"m.text"},"ts":1182696600000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"doesn't really matter that much though","msgtype":"m.text"},"ts":1182696601000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I could replace the example with this, if that would make you happy:","msgtype":"m.text"},"ts":1182697140000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"var table = document.getElementById(\"score\");","msgtype":"m.text"},"ts":1182697141000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"var groups = table.tBodies;","msgtype":"m.text"},"ts":1182697142000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"var rows = null;","msgtype":"m.text"},"ts":1182697143000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"var cells = new Array();","msgtype":"m.text"},"ts":1182697144000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"for (var i = 0; i < groups.length; i++) {","msgtype":"m.text"},"ts":1182697145000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"  rows = groups[i].rows;","msgtype":"m.text"},"ts":1182697146000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"  for (var j = 0; j < rows.length; j++) {","msgtype":"m.text"},"ts":1182697147000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"    cells.push(rows[j].cells[1]);","msgtype":"m.text"},"ts":1182697148000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"  }","msgtype":"m.text"},"ts":1182697149000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"}","msgtype":"m.text"},"ts":1182697150000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"you'd have to use child selectors as well than in the selectors sample","msgtype":"m.text"},"ts":1182697151000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"for the example, child selectors aren't really necessary, since the assumption is that table won't ever contain nested tables, which is a reasonable assumption to make when the author of both table and script is the same","msgtype":"m.text"},"ts":1182697260000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"I suppose that's fair enough","msgtype":"m.text"},"ts":1182697320000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it would be faster though","msgtype":"m.text"},"ts":1182697321000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"given that it would be faster, ok","msgtype":"m.text"},"ts":1182697380000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"descendant selectors are more convenient than child selectors... and authors are more familiar with descendant than child. not that i feel strongly about it","msgtype":"m.text"},"ts":1182697440000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"they are quite expensive compared to child selectors","msgtype":"m.text"},"ts":1182697500000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"more expensive is a combination of both","msgtype":"m.text"},"ts":1182697501000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"there are other examples that show descendant selectors used, it's good to give an example with other combinators","msgtype":"m.text"},"ts":1182697560000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"checked it in","msgtype":"m.text"},"ts":1182697561000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"how do I get it republished as a WD?  Do I just send a mail to public-webapi and propose it?","msgtype":"m.text"},"ts":1182697620000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"or maybe to member-webapi?","msgtype":"m.text"},"ts":1182697621000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"oh, but I should resolve the last remaining open issue in the tracker","msgtype":"m.text"},"ts":1182697680000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"\"...there are at least two approaches that may be taken.\" -- although it doesn't really matter, it might be nice to avoid using rfc2119 terms in examples","msgtype":"m.text"},"ts":1182697681000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"you need to generate a new Overview.html","msgtype":"m.text"},"ts":1182697682000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, I will do that","msgtype":"m.text"},"ts":1182697683000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"then the best thing is probably to say on public-webapi⊙wo that you want to request publication of a new working draft 1st of july or something and that people have until then to raise issues with that idea","msgtype":"m.text"},"ts":1182697740000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://digg.com/design/Crazy_guy_can_draw_using_HTML","msgtype":"m.text"},"ts":1182705300000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"Great example of the power of HTML...","msgtype":"m.text"},"ts":1182705301000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"in the current Differences from HTML4 document, this explanation of <b> seems self-contradictory: \"The b element now represents a span of text to be stylistically offset from the normal prose without conveying any extra importance, such as key words in a document abstract, product names in a review, or other spans of text whose typical typographic presentation is emboldened.\"","msgtype":"m.text"},"ts":1182708900000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"surely key words in an abstract are given a \"typical\" typographical presentation of bold in order to convey their \"extra importance\"","msgtype":"m.text"},"ts":1182708960000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"http://digg.com/design/Crazy_guy_can_draw_using_HTML","msgtype":"m.text"},"ts":1182713580000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Oh, is that the 'paste' button?","msgtype":"m.text"},"ts":1182713581000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"wonders how to copy instead","msgtype":"m.emote"},"ts":1182713640000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Aha, not by right clicking","msgtype":"m.text"},"ts":1182713700000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"\"how to copy\" with what?","msgtype":"m.text"},"ts":1182713940000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"With text inside PuTTY","msgtype":"m.text"},"ts":1182713941000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: select the text then click to paste probably","msgtype":"m.text"},"ts":1182714000000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"(on x terms, merely selecting text copies it","msgtype":"m.text"},"ts":1182714001000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"(I think my computer's graphics card has melted, so I'm stuck on other computers for a while...)","msgtype":"m.text"},"ts":1182714002000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Okay - just selecting the text seems to work fine :-)","msgtype":"m.text"},"ts":1182714060000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I think it'd be nice to have a <content> sectioning element","msgtype":"m.text"},"ts":1182715200000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"it could function as a container element for all the <article>, <section>, <aside> etc. elements","msgtype":"m.text"},"ts":1182715201000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"isn't that <body>?","msgtype":"m.text"},"ts":1182715202000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"it could be used as <header><h1>Website</h1><nav/></header><content/><footer/>, which is, IMO, a structure many websites use","msgtype":"m.text"},"ts":1182715203000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"(not allowed to have nav in header)","msgtype":"m.text"},"ts":1182715260000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"<header/<nav/><content/><footer/> then (not completely familiar with the spec yet)","msgtype":"m.text"},"ts":1182715261000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"*<header/>","msgtype":"m.text"},"ts":1182715262000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"what's in content?","msgtype":"m.text"},"ts":1182715263000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"<article>, <section>, <aside> etc.","msgtype":"m.text"},"ts":1182715320000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"what does the content element add beond <header/><nav/><article>, <section>, <aside> etc.<footer/>?","msgtype":"m.text"},"ts":1182715321000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"isn't it implicit that things that are not asides or navs are content?","msgtype":"m.text"},"ts":1182715380000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"webben, I've read many document abstracts, and none of them have used bold (or any special style) for their list of keywords","msgtype":"m.text"},"ts":1182715381000,"senderName":"mpt","senderId":"mpt@irc"},
{"content":{"body":"zcorpan: IMO it just makes sense to group all elements that are content in one <content> element","msgtype":"m.text"},"ts":1182715500000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"(plus it also makes it a lot easier to style using CSS)","msgtype":"m.text"},"ts":1182715501000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"Jero: see topic ;)","msgtype":"m.text"},"ts":1182715502000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":">_>","msgtype":"m.text"},"ts":1182715560000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"Jero: i'm not saying it's a bad idea, i just haven't heard any convincing use-cases for <content> yet","msgtype":"m.text"},"ts":1182715680000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"(i haven't heard convincing use-cases for <footer> either, though)","msgtype":"m.text"},"ts":1182715740000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"is brainstorming","msgtype":"m.emote"},"ts":1182715920000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"likes brainstorms","msgtype":"m.emote"},"ts":1182716040000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"webben, actually, I think some of them might have used italics, but that would have been for the entire paragraph, including the \"Keywords:\" intro and all the commas between them","msgtype":"m.text"},"ts":1182716160000,"senderName":"mpt","senderId":"mpt@irc"},
{"content":{"body":"mpt: hence the scare quotes","msgtype":"m.text"},"ts":1182717660000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"mpt: If it isn't a common typographical style, that doesn't really make the text better.","msgtype":"m.text"},"ts":1182717661000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"zcorpan: Replacing \"Skip to main content\" links isn't a convincing use case?","msgtype":"m.text"},"ts":1182718080000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"(for <content>)","msgtype":"m.text"},"ts":1182718081000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"also being able to style it properly","msgtype":"m.text"},"ts":1182718140000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"otherwise people are just going to use <div class=\"content\"> anyhow","msgtype":"m.text"},"ts":1182718141000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"webben: isn't the first <article> that?","msgtype":"m.text"},"ts":1182718142000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: Who knows. (Which is kind of the point.)","msgtype":"m.text"},"ts":1182718200000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"what is the main content? isn't it the <article>s?","msgtype":"m.text"},"ts":1182718201000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: whatever the author considers to be the main content.","msgtype":"m.text"},"ts":1182718202000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"Lachy: If I had some comments about the Selectors API (just boring trivial things about indentation and grammar and italicisation), is there somewhere I should put them?","msgtype":"m.text"},"ts":1182718260000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"zcorpan: e.g. it might include some introductory text before a list of articles","msgtype":"m.text"},"ts":1182718261000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"s/list/series/","msgtype":"m.text"},"ts":1182718262000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"it might include a <nav> if the whole point of the page is navigation","msgtype":"m.text"},"ts":1182718380000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"like a sitemap?","msgtype":"m.text"},"ts":1182718440000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: sitemaps, indexes, tables of contents, lists of stuff","msgtype":"m.text"},"ts":1182718441000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"tag clouds","msgtype":"m.text"},"ts":1182718442000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"the possibilities are pretty endless","msgtype":"m.text"},"ts":1182718443000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"and often might involve explanatory text too","msgtype":"m.text"},"ts":1182718500000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"yeah. so what you're saying is that skipping to the first <article> isn't good enough, and that <content> would be more accurate/flexible","msgtype":"m.text"},"ts":1182718501000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: yeah that sums it up I guess","msgtype":"m.text"},"ts":1182718560000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"good stuff. now forward this information to the list :)","msgtype":"m.text"},"ts":1182718561000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"has this been being discussed on the whatwg list?","msgtype":"m.text"},"ts":1182718620000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"wonders if he missed it in the deluge of list mail he receives daily","msgtype":"m.emote"},"ts":1182718621000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"what you brought up here is new stuff i think","msgtype":"m.text"},"ts":1182718622000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"<content> has been proposed before but it hasn't been explained really what it's use-cases were","msgtype":"m.text"},"ts":1182718680000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"(beond <article>)","msgtype":"m.text"},"ts":1182718681000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"http://forums.whatwg.org/viewtopic.php?t=35","msgtype":"m.text"},"ts":1182718740000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"perhaps \"skip to main content\" could be implemented by simply ignoring the site-wide header (if any), any <nav>s and any <aside>s. instead of skipping to the first <article>.","msgtype":"m.text"},"ts":1182718920000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: Except that the main content might be the nav.","msgtype":"m.text"},"ts":1182719040000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"in such a case, couldn't you just not use nav? :)","msgtype":"m.text"},"ts":1182719100000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: I think it would be a bit weird to define <nav> as for navigation lists ... except when navigation lists are the main content.","msgtype":"m.text"},"ts":1182719160000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"since the main use-case for nav, aiui, is exactly to avoid the need for skip links","msgtype":"m.text"},"ts":1182719161000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"As authors are going to want a container for main content anyhow, one might as well use a standard one to make UA's life easier.","msgtype":"m.text"},"ts":1182719162000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"zcorpan: Well there are two sorts of skip links","msgtype":"m.text"},"ts":1182719163000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"Type 1: skip /to/ somewhere (typically main content)","msgtype":"m.text"},"ts":1182719164000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"Type 2: skip /over/ something","msgtype":"m.text"},"ts":1182719220000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"right, you can skip to or over a <nav>","msgtype":"m.text"},"ts":1182719221000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: well you can skip to or over a paragraph (if UAs bothered to implement such navigation.)","msgtype":"m.text"},"ts":1182719280000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"but main content is much more of an authorial judgement","msgtype":"m.text"},"ts":1182719281000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1182719340000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan, just look at http://digg.com/","msgtype":"m.text"},"ts":1182719580000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"the \"Spreading the Word...\" box isn't the main content, the data below that box is","msgtype":"m.text"},"ts":1182719640000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"right. that box might be an aside","msgtype":"m.text"},"ts":1182719700000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i agree that there are examples of pages that have an area with \"main content\" that is not purely an <article> or a series of <article>s","msgtype":"m.text"},"ts":1182719760000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hixie, I'd love to hear your opinion on a <content> element","msgtype":"m.text"},"ts":1182719940000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"Jero: it would be great if you (or someone else) could summarize this discussion and send it to the list","msgtype":"m.text"},"ts":1182720000000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"also a good idea","msgtype":"m.text"},"ts":1182720001000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"Jero: then Hixie will look at it in due course","msgtype":"m.text"},"ts":1182720002000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i see","msgtype":"m.text"},"ts":1182720003000,"senderName":"Jero","senderId":"Jero@irc"}
]