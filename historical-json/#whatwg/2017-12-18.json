[
{"content":{"body":"@media (scripting) {","msgtype":"m.text"},"ts":1513592798000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"  noscript { display: none !important; }","msgtype":"m.text"},"ts":1513592798000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"}","msgtype":"m.text"},"ts":1513592799000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"https://html.spec.whatwg.org/#hidden-elements","msgtype":"m.text"},"ts":1513592803000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Where is \"scripting\" defined? Can't see it in https://drafts.csswg.org/mediaqueries/","msgtype":"m.text"},"ts":1513592817000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"It seems the CSS WG might have dropped it without notifying dependencies...","msgtype":"m.text"},"ts":1513593732000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: https://drafts.csswg.org/mediaqueries-5/#mf-scripting","msgtype":"m.text"},"ts":1513593757000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks","msgtype":"m.text"},"ts":1513593786000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Seems that was done in https://github.com/w3c/csswg-drafts/commit/8677d3ea21533f151143784846992f2cdcdf07ae#diff-86306790afb9d5330bbdda192a7b99f6","msgtype":"m.text"},"ts":1513593920000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But latest version still referencing -4 is what makes this so confusing","msgtype":"m.text"},"ts":1513593935000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: if you're around, could you look at https://github.com/whatwg/html/pull/3111?","msgtype":"m.text"},"ts":1513599796000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: looking","msgtype":"m.text"},"ts":1513600167000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: it basically seems like another all encodings decoding path in the platform, but one that might not use the BOM at all","msgtype":"m.text"},"ts":1513600428000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: I'm hoping we can restrict it to UTF-8 given that the URL parser already always uses UTF-8 to encode, but who knows","msgtype":"m.text"},"ts":1513600458000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: It's likely that I didn't understand the question in the issue","msgtype":"m.text"},"ts":1513600692000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: part of the problem here is that if an ID contains U+00FF and the document encoding is windows-1252, a %FF fragument will find that ID in most implementations","msgtype":"m.text"},"ts":1513600761000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: meaning that the fragment is not UTF-8 decoded, but decoded using the document encoding","msgtype":"m.text"},"ts":1513600784000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: furthermore, if the fragment starts with an encoded BOM, that's ignored for decoding purposes (so it doesn't use the generic decode hook)","msgtype":"m.text"},"ts":1513600821000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: when you say \"ignored\", is it removed or retained if the document encoding is UTF-8?","msgtype":"m.text"},"ts":1513600849000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: retained","msgtype":"m.text"},"ts":1513600876000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: encoding_rs has https://docs.rs/encoding_rs/0.7.1/encoding_rs/struct.Encoding.html#method.decode_without_bom_handling and https://docs.rs/encoding_rs/0.7.1/encoding_rs/struct.Encoding.html#method.decode_without_bom_handling_and_without_replacement , so it seems that no new encoding_rs API surface would be needed","msgtype":"m.text"},"ts":1513600923000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: I meant ignored in that it doesn't override the document encoding","msgtype":"m.text"},"ts":1513600941000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"also https://docs.rs/encoding_rs/0.7.1/encoding_rs/struct.Encoding.html#method.new_decoder_without_bom_handling","msgtype":"m.text"},"ts":1513600956000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"annevk: ok.","msgtype":"m.text"},"ts":1513600959000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: it seems like I was right to worry about the encoding_rs <> Encoding Standard hook mismatch","msgtype":"m.text"},"ts":1513601005000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: in what sense?","msgtype":"m.text"},"ts":1513601068000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: if we want to do what implementations do here the Encoding Standard needs a new hook","msgtype":"m.text"},"ts":1513601114000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah. I suggest calling it \"decode without BOM handling\" :-)","msgtype":"m.text"},"ts":1513601223000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: seems unfortunate though to have that just for this one caller","msgtype":"m.text"},"ts":1513601313000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: only if you consider \"UTF-8 decode without BOM\" a separate thing as opposed to considering it this new thing performed with UTF-8 as the encoding","msgtype":"m.text"},"ts":1513601971000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: I consider it separate as UTF-8 decode without BOM is not a legacy code path","msgtype":"m.text"},"ts":1513602023000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok. probably worthwhile re-defining \"UTF-8 decode without BOM\" in terms of \"decode without BOM handling\" if you end up introducing the latter","msgtype":"m.text"},"ts":1513602067000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: is it easy to find other callers of \"decode without BOM handling\" that might use it for an encoding other than UTF-8?","msgtype":"m.text"},"ts":1513602293000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: or is this indeed the only place?","msgtype":"m.text"},"ts":1513602300000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wonder how much effort I should put into trying to get rid of this","msgtype":"m.text"},"ts":1513602316000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"let's see. most of these are non-Web-exposed internal legacy","msgtype":"m.text"},"ts":1513602619000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"https://searchfox.org/mozilla-central/search?q=symbol:_ZNK7mozilla8Encoding24DecodeWithoutBOMHandlingERK12nsTSubstringIcERS2_&redirect=false","msgtype":"m.text"},"ts":1513602625000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"https://searchfox.org/mozilla-central/search?q=symbol:_ZNK7mozilla8Encoding28NewDecoderWithoutBOMHandlingEv&redirect=false","msgtype":"m.text"},"ts":1513602630000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"https://searchfox.org/mozilla-central/search?q=symbol:_ZNK7mozilla8Encoding24DecodeWithoutBOMHandlingENS_4SpanIKhLm18446744073709551615EEER12nsTSubstringIDsE&redirect=false","msgtype":"m.text"},"ts":1513602635000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"annevk: looks like URL fragments are the only Web-exposed non-UTF-8 case","msgtype":"m.text"},"ts":1513602877000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"the script loader stuff uses this primitive internally but performs BOM handling, so the Web-exposed behavior is with BOM handling","msgtype":"m.text"},"ts":1513602931000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: thanks, I guess I'll make an effort to make it either use \"UTF-8 decode without BOM\" or \"decode\" (and handle the BOM) in that case","msgtype":"m.text"},"ts":1513605844000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Is there an easy way to test iOS Safari?","msgtype":"m.text"},"ts":1513606554000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: BrowserStack?","msgtype":"m.text"},"ts":1513607051000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: buy an iPod Touch on expenses?","msgtype":"m.text"},"ts":1513608216000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(I have literally done that before. But I was needing to test touch behaviour, which is hard with the simulator locally yet alone remotely)","msgtype":"m.text"},"ts":1513608249000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Would be a good idea if I had any other use for apple devices :)","msgtype":"m.text"},"ts":1513608288000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Oh, mine just sits in a drawer almost all of the time. :)","msgtype":"m.text"},"ts":1513608304000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Sounds a little wasteful","msgtype":"m.text"},"ts":1513608326000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I should figure out if we have a corporate browserstack account","msgtype":"m.text"},"ts":1513608344000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Well you can't exactly do much with a 16GB iPod Touch","msgtype":"m.text"},"ts":1513608363000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"given the OS takes up some ridiculous percentage of that","msgtype":"m.text"},"ts":1513608375000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"wonders if they still make the 16GB model","msgtype":"m.emote"},"ts":1513608381000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"foolip: does https://travis-ci.org/whatwg/fetch/builds/318150547 look familiar?","msgtype":"m.text"},"ts":1513612646000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: seems something is wrong with the build script","msgtype":"m.text"},"ts":1513612654000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: think I found the mistake","msgtype":"m.text"},"ts":1513612782000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: https://github.com/whatwg/whatwg.org/pull/135#issuecomment-352470978","msgtype":"m.text"},"ts":1513613110000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hello everyone! I would like to be a part of whatwg.","msgtype":"m.text"},"ts":1513615574000,"senderName":"Shreya","senderId":"Shreya@irc"},
{"content":{"body":"annevk: restarted https://travis-ci.org/whatwg/fetch/builds/318150547 after (maybe) fixing","msgtype":"m.text"},"ts":1513615579000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"How can I become a member of this?","msgtype":"m.text"},"ts":1513615630000,"senderName":"Shreya","senderId":"Shreya@irc"},
{"content":{"body":"Shreya: welcome, does https://whatwg.org/faq help?","msgtype":"m.text"},"ts":1513615985000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: ta","msgtype":"m.text"},"ts":1513615993000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: did not work","msgtype":"m.text"},"ts":1513616364000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: Travis tries rsync apparently","msgtype":"m.text"},"ts":1513616382000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Thanks annevk!","msgtype":"m.text"},"ts":1513616405000,"senderName":"Shreya","senderId":"Shreya@irc"},
{"content":{"body":"foolip: at least Fetch is still online…","msgtype":"m.text"},"ts":1513616544000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: maybe it hadn't deployed to resources yet, try again?","msgtype":"m.text"},"ts":1513616547000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"I can try in an hour or so","msgtype":"m.text"},"ts":1513616591000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: however seems like a different error; failing at a later step","msgtype":"m.text"},"ts":1513616644000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: okay, different error is interesting. Poke me when it doesn't resolve itself in a bit.","msgtype":"m.text"},"ts":1513616707000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: pretty sure the rsync block has the wrong guard","msgtype":"m.text"},"ts":1513616741000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: will poke when back","msgtype":"m.text"},"ts":1513616762000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it tried to deploy for a PR then?","msgtype":"m.text"},"ts":1513616799000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"That would be very wrong","msgtype":"m.text"},"ts":1513616808000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: log suggests as much","msgtype":"m.text"},"ts":1513617344000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: oh now I see, it's missing the master branch check :(","msgtype":"m.text"},"ts":1513617452000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"annevk: https://github.com/whatwg/whatwg.org/pull/140","msgtype":"m.text"},"ts":1513617652000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"https://blog.whatwg.org/copyright-license-change talks about the license of the HTML Standard but I couldn’t find from https://html.spec.whatwg.org/multipage/ or https://github.com/whatwg/html what it is currently or what it was before","msgtype":"m.text"},"ts":1513618768000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"License changes haven't quite rolled out yet; I guess that's pretty confusing. Was planning to do it this week.","msgtype":"m.text"},"ts":1513618848000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Current license is the bottom of https://html.spec.whatwg.org/multipage/acknowledgements.html#acknowledgments","msgtype":"m.text"},"ts":1513618871000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1513618983000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"tobie: I just learned about pr-preview. That is fantastic.","msgtype":"m.text"},"ts":1513619184000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"ato: glad you like it!","msgtype":"m.text"},"ts":1513619901000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: regarding my fetch PR, what do you think should be done about referencing the request object's members vs the concept members?","msgtype":"m.text"},"ts":1513620564000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: it seems somewhat reasonable to reference the concepts since we end up returning those, but I'm not sure how understandable that is","msgtype":"m.text"},"ts":1513620689000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: Deploying it on the WebDriver spec now.","msgtype":"m.text"},"ts":1513620703000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"Agreed, I mean the current way still sort of references the concepts, just by going through the object members first so there's one more layer of indirection, but I'm open to either","msgtype":"m.text"},"ts":1513620831000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: up to you","msgtype":"m.text"},"ts":1513620891000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: \"Event\" in the DOM spec doesn't seem to suffer the same duplication between the concept members and object members. Is this because events are designed to be always exposed to/created by JavaScript, so the internal properties and exposed properties are more 1:1?","msgtype":"m.text"},"ts":1513621146000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Heh, big question","msgtype":"m.text"},"ts":1513621161000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It's partially legacy","msgtype":"m.text"},"ts":1513621164000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i.e. it's pretty bad right now that specs say \"initialize the foo member of the event to bar\"","msgtype":"m.text"},"ts":1513621177000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"because that isn't defined anywhere","msgtype":"m.text"},"ts":1513621180000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It should be saying \"initialize the event's foo [concept] to bar\"","msgtype":"m.text"},"ts":1513621190000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But...","msgtype":"m.text"},"ts":1513621195000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Events are a bit special because there's a precise 1:1 correspondence","msgtype":"m.text"},"ts":1513621206000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So it'd be kind of annoying to just create a bunch of concepts (aka internal slots) for this purpose","msgtype":"m.text"},"ts":1513621229000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk likes the solution proposed in https://github.com/heycam/webidl/pull/495 of having internal slots be generated for all Web IDL attributes (JS properties)","msgtype":"m.text"},"ts":1513621266000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I am not a big fan, as I feel like Events are the only case where that's a clear win","msgtype":"m.text"},"ts":1513621277000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: it's a win whenever the getter just returns the internal slot","msgtype":"m.text"},"ts":1513621398000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: as you won't have to define the getter","msgtype":"m.text"},"ts":1513621414000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well... but only for classes where *every* getter has a backing internal slot","msgtype":"m.text"},"ts":1513621419000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Otherwise, you have to add a bunch of annotations to say \"but not this one\"","msgtype":"m.text"},"ts":1513621427000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Yes that makes sense, with the 1:1 and all.","msgtype":"m.text"},"ts":1513621455000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"I think that's the common case","msgtype":"m.text"},"ts":1513621456000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"My impression is the opposite","msgtype":"m.text"},"ts":1513621463000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Reading PR link thanks a lot for sending!","msgtype":"m.text"},"ts":1513621465000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"But this is an empirical question","msgtype":"m.text"},"ts":1513621472000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ok that's an interesting solution","msgtype":"m.text"},"ts":1513621523000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Need something for events though","msgtype":"m.text"},"ts":1513621550000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, agreed on that front.","msgtype":"m.text"},"ts":1513621579000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Because of Event's missing internal slots?","msgtype":"m.text"},"ts":1513621609000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"That PR isn't great for events though as it still requires listing all the internal slots (either in syntax or elsewhere)","msgtype":"m.text"},"ts":1513621611000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You really want something, maybe in DOM, that says \"all events have a corresponding internal slot\"","msgtype":"m.text"},"ts":1513621623000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That sounds nice","msgtype":"m.text"},"ts":1513621635000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Well slot per getter","msgtype":"m.text"},"ts":1513621645000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That PR could get there","msgtype":"m.text"},"ts":1513621677000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But maybe getter slots should be opt-in then","msgtype":"m.text"},"ts":1513621701000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"For DOM, Fetch, XHR most getters need a slot though","msgtype":"m.text"},"ts":1513621753000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wonder where that stops being true","msgtype":"m.text"},"ts":1513621772000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"most\" might be true, but if it's like 80% need slots, the 20% remaining is pretty awkward, I think.","msgtype":"m.text"},"ts":1513621876000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: so we add [Slot] instead?","msgtype":"m.text"},"ts":1513622016000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm maybe, that does feel better for some reason","msgtype":"m.text"},"ts":1513622051000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It makes some sense to not encourage slots and requiring a little hassle","msgtype":"m.text"},"ts":1513622063000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It makes less sense imo to require prose for the object layout","msgtype":"m.text"},"ts":1513622095000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: sorry for the long sidebar, the basic answer is that Event (and anything like it) is wrong as-is","msgtype":"m.text"},"ts":1513622433000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"With this potential [slot] syntax, where would you describe the behavior of a slot that is specific to its non-javascript usage? Like if an internal slot has a set of possible behaviors/values, but only a subset of those are used in/available to JavaScript where would you describe its \"only-internal\" usage.","msgtype":"m.text"},"ts":1513622462000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Hm if that doesn't make sense I can reword","msgtype":"m.text"},"ts":1513622489000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: you manipulate slots as you see fit from various algorithms","msgtype":"m.text"},"ts":1513622528000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: what you expose through public JavaScript API is up to you, the getter might not reflect the internal value 1:1","msgtype":"m.text"},"ts":1513622553000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It would reflect it 1:1 though for events","msgtype":"m.text"},"ts":1513622605000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"And presumbly other cases where you use [Slot]","msgtype":"m.text"},"ts":1513622613000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah, I feel that using [Slot] on a getter that doesn't reflect internal value 1:1 might be a little confusing maybe","msgtype":"m.text"},"ts":1513623053000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"annevk: Ok I'm cool with the domintro boxes pointing to the object members then, because they themselves point to the concepts. I feel that that includes everything well even tho might be a little indirect","msgtype":"m.text"},"ts":1513623149000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"But I could be swayed either way","msgtype":"m.text"},"ts":1513623162000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: ok","msgtype":"m.text"},"ts":1513623285000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic/annevk: How important is it to make sure that the generic IDL language doesn't create unused slots? I'm thinking that the 20% remaining could just not use their slots, and implementations wouldn't need to allocate space for them.","msgtype":"m.text"},"ts":1513623670000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"I think it'd be confusing. Not fatal, but definitely confusing.","msgtype":"m.text"},"ts":1513623701000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic, annevk, jyasskin, domfarolino: just to clarify, the current [slot] proposal \"allocates\" a slot per attribute, defaults getters and setters to read and write from slots unless their behavior is specified in prose, and allows adding custom slots on top of those.","msgtype":"m.text"},"ts":1513625882000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"jyasskin: it doesn't really bother me that slots get \"allocated' and then not used. They're spec'ing devices anyway, not accessible in ES at all.","msgtype":"m.text"},"ts":1513626062000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: That seems totally reasonable to me. It loses a tiny bit of redundancy with which we might be able to notice spec bugs, but we have that redundancy today and so many violations of it in otherwise-correct specs, that I'd rather have your proposal.","msgtype":"m.text"},"ts":1513626151000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: that said, that PR is an initial proposal for discussion.","msgtype":"m.text"},"ts":1513626256000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"jyasskin: It's based on my understanding of folks need/have asked for.","msgtype":"m.text"},"ts":1513626365000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"jyasskin: of *what","msgtype":"m.text"},"ts":1513626382000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"jyasskin: Note another option would be doing this in reverse, they way Ruby does it. That is, specify all the slots you need, and have a way to create attribute getters/setters that just reflect those (see: https://stackoverflow.com/a/5046915/6197646)","msgtype":"m.text"},"ts":1513626608000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"jyasskin: possibly even with an extended attribute, e.g.: [reflects=foo] attribute DOMString bar;","msgtype":"m.text"},"ts":1513626781000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: FWIW I like the reverse way a lot, since the internal slots will always exist and we can cherry pick which ones will be exposed to ES","msgtype":"m.text"},"ts":1513627493000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: the one I just described above?","msgtype":"m.text"},"ts":1513627521000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: yep, the Ruby way. I kind of like it","msgtype":"m.text"},"ts":1513627548000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"I too find it fairly nice.","msgtype":"m.text"},"ts":1513627598000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh, would we be moving towards consensus?","msgtype":"m.text"},"ts":1513627670000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins, annevk: thoughts on the Ruby-inspired slot proposal?","msgtype":"m.text"},"ts":1513627703000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Fine with me","msgtype":"m.text"},"ts":1513628219000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Seems better than always slots, suspect that will not work for TC39 and also feels a bit unclean","msgtype":"m.text"},"ts":1513628265000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: I see 3 options: 1, the current proposal) interface I { [[SlotWithoutAttr]]; readonly attribute DOMString attrReflectsSlot; attribute DOMString computedAttr; }; In prose: computeAttr's getter MUST...; its setter MUST ....","msgtype":"m.text"},"ts":1513631302000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"tobie: 2, Domenic's option) interface I { [[SlotWithoutAttr]]; [Slot] readonly attribute DOMString attrReflectsSlot; attribute DOMString computedAttr; }; In prose: computeAttr's getter MUST...; its setter MUST ....","msgtype":"m.text"},"ts":1513631335000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"3, Ruby-style) interface I { [[SlotWithoutAttr]]; [ReflectReadonly] DOMString [[reflectedSlot]]; attribute DOMString computedAttr; }; In prose: computedAttr's getter MUST...; its setter MUST ....","msgtype":"m.text"},"ts":1513631390000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Those are pretty similar, so I'd be fine with all of them. I *think* 2's my favorite.","msgtype":"m.text"},"ts":1513631450000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: it's funny (3) is quite a bit different the way you write from what I had imagined.","msgtype":"m.text"},"ts":1513633162000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: Your way's probably fine too?","msgtype":"m.text"},"ts":1513633498000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: ^ updated the issue","msgtype":"m.text"},"ts":1513633690000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: Thanks! Now I stand corrected: I don't like your Ruby-style option because it adds a line of declaration. It's still better than the status quo, but the other options DRY better.","msgtype":"m.text"},"ts":1513633836000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: frankly, I think they all have different tradeoffs.","msgtype":"m.text"},"ts":1513633981000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"jyasskin: if folks have interfaces that would showcase those well, send them to me; I'll just try them out and post the results somewhere.","msgtype":"m.text"},"ts":1513634135000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: no idea, I'm on vacation, please write it up in an organized way in the issue and don't make decisions over Xmas-ish. 😀","msgtype":"m.text"},"ts":1513634341000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Also: who's in charge of @intenttoship, and can they figure out what part of the pipeline is (incorrectly) doing HTML parsing? https://twitter.com/intenttoship/status/942818202349948930","msgtype":"m.text"},"ts":1513634401000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: :D","msgtype":"m.text"},"ts":1513634435000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: I will not comment on the fact that you are answering irc during your vacation.","msgtype":"m.text"},"ts":1513634472000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"We were resting between exhibits, I already delayed my answer by a few hours. 😀","msgtype":"m.text"},"ts":1513634504000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: In light of https://github.com/whatwg/console/issues/121#issuecomment-352587781 do you think this issue can be closed?","msgtype":"m.text"},"ts":1513638884000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: yeah, I would.","msgtype":"m.text"},"ts":1513640059000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hmm I guess https://github.com/whatwg/console/issues/27 is mostly done, just need some -historical.html web platform tests and browser bugs perhaps?","msgtype":"m.text"},"ts":1513640577000,"senderName":"Domenic","senderId":"Domenic@irc"}
]