[
{"content":{"body":"\"Revive E4X as EXQO with extended SAX as Methods!!!!!\"","msgtype":"m.text"},"ts":1405064687000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"worries for Ms2ger's sanity","msgtype":"m.emote"},"ts":1405065200000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"You and me both","msgtype":"m.text"},"ts":1405065224000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"SAX is so good it doesn'T need to be extended","msgtype":"m.text"},"ts":1405072540000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"wonders if MikeSmith is being held hostage by XML terrorists","msgtype":"m.emote"},"ts":1405072614000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"tee hhee","msgtype":"m.text"},"ts":1405072635000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"stockholm syndrome","msgtype":"m.text"},"ts":1405072651000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"http://instagram.com/p/JzmkwQCr7y/","msgtype":"m.text"},"ts":1405072783000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith, not sure that's a think one'd like to be called","msgtype":"m.text"},"ts":1405072944000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"yeah that's what makes it even better","msgtype":"m.text"},"ts":1405073308000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"A think?","msgtype":"m.text"},"ts":1405073416000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"blames XML","msgtype":"m.emote"},"ts":1405073424000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"if it'd been HTML it would have error-recovered from that for you automatically","msgtype":"m.text"},"ts":1405073492000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I really can't work out if \"the ascii of the future\" is supposed to be a compliment or not","msgtype":"m.text"},"ts":1405073803000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"MikeSmith: I've redeployed validator.nu, despite it being a bad idea right before heading out of office for a couple of weeks","msgtype":"m.text"},"ts":1405075046000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"TabAtkins: thanks for Python map() advice","msgtype":"m.text"},"ts":1405075249000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"MikeSmith: I landed a quick map/lambda hack to paper over the shell script generation bug without correctly fixing all possible future cases","msgtype":"m.text"},"ts":1405075282000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"(bad, I know)","msgtype":"m.text"},"ts":1405075286000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"MikeSmith: if in the future we want a command line switch that both contains a space and requires shell variable expansions, things will break again","msgtype":"m.text"},"ts":1405075319000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: thanks much man","msgtype":"m.text"},"ts":1405075432000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hsivonen: I'll try not to add any new switches to the script at all. We got plenty already","msgtype":"m.text"},"ts":1405075464000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hsivonen: the ones I've added are of marginal benefit anyway. They're mostly just there to allow some things for the W3C service to be slightly different. e.g., the space thing was caused by me adding a switch to allow the UA string to contain a URL for page that explains what the validator is","msgtype":"m.text"},"ts":1405075620000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hsivonen: some sites admins, otherwise not knowing what the validator is, send us complaints about it violating robots.txt and things, or even blocking it","msgtype":"m.text"},"ts":1405075697000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hsivonen: anyway, thanks again -- I appreciate it","msgtype":"m.text"},"ts":1405075765000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"what does \"Let form document be the form's Document.\" mean ?","msgtype":"m.text"},"ts":1405087767000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"is that ownerDocument?","msgtype":"m.text"},"ts":1405087777000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Hixie: am I interpreting the spec correctly, and that means ownerDocument ?","msgtype":"m.text"},"ts":1405088355000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"\"The Document of a Node (such as an element) is the Document that the Node's ownerDocument IDL attribute returns.\"","msgtype":"m.text"},"ts":1405088380000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Yep","msgtype":"m.text"},"ts":1405088955000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"and browsers behave differently there","msgtype":"m.text"},"ts":1405089255000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: yeah","msgtype":"m.text"},"ts":1405093742000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: what about \"the Document object with which subject in question is associated.\"","msgtype":"m.text"},"ts":1405093891000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"in hyperlink handling","msgtype":"m.text"},"ts":1405093899000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"that Document is also ownerDocument?","msgtype":"m.text"},"ts":1405093909000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"associated usually means something else","msgtype":"m.text"},"ts":1405093913000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"let me see","msgtype":"m.text"},"ts":1405093916000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"looks like in this case it's just ownerDocument, yeah","msgtype":"m.text"},"ts":1405093973000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that could probably be phrased more obviously","msgtype":"m.text"},"ts":1405093979000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"actually all of this stuff probably could be better phrased now","msgtype":"m.text"},"ts":1405093986000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"at the time it was written, ownerDocument wasn't formally specced","msgtype":"m.text"},"ts":1405093995000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but now we have anne's dom spec, it might be easier to reference it","msgtype":"m.text"},"ts":1405094007000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ah, yeah, the dom spec now defines \"the node document\"","msgtype":"m.text"},"ts":1405094030000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"looks like browsers handle this kind of cases in different ways","msgtype":"m.text"},"ts":1405094037000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"blink doesn't care whether element is in doc, but gecko and trident do","msgtype":"m.text"},"ts":1405094053000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"i should just change all of this stuff to just refer directly to \"node document\" instead of the round-about way i had to use before","msgtype":"m.text"},"ts":1405094055000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the spec doesn't care, does it? whether the element is in a doc or not?","msgtype":"m.text"},"ts":1405094100000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"for following hyperlinks, i mean","msgtype":"m.text"},"ts":1405094115000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what I'm starting to do is to go through this stuff and think how it should work in shadow dom","msgtype":"m.text"},"ts":1405094123000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Hixie: right. and I think that is probably wrong","msgtype":"m.text"},"ts":1405094136000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"why?","msgtype":"m.text"},"ts":1405094142000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"security, compat?","msgtype":"m.text"},"ts":1405094152000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"something else?","msgtype":"m.text"},"ts":1405094155000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"something else","msgtype":"m.text"},"ts":1405094160000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"saner behavior","msgtype":"m.text"},"ts":1405094173000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but probably doesn't matter much","msgtype":"m.text"},"ts":1405094192000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Hixie: You around?","msgtype":"m.text"},"ts":1405094281000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"grumbles","msgtype":"m.emote"},"ts":1405094287000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"smaug____: i think for some things (form submission in particular, also audio playback, img loading) we have a compat need to handle it while it's not actually in a doc, so for consistency we probably shouldn't artificially check it elsewhere","msgtype":"m.text"},"ts":1405094312000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"bkardell__: 'sup","msgtype":"m.text"},"ts":1405094316000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"form submission doesn't work in Gecko and Trident when not in doc","msgtype":"m.text"},"ts":1405094332000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: (i filed https://www.w3.org/Bugs/Public/show_bug.cgi?id=26310 btw)","msgtype":"m.text"},"ts":1405094333000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so no compat","msgtype":"m.text"},"ts":1405094336000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Hixie: Trying to figure out which list to even send this question to man...","msgtype":"m.text"},"ts":1405094338000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"Hixie: Have a look at this https://gist.githubusercontent.com/bkardell/7da8ba03e690f2c24503/raw/ccbd20fc406f3158b0c616770e4bed1e956ce019/mutationobserverquestion.html","msgtype":"m.text"},"ts":1405094345000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"smaug____: really? i thought we just found there was a compat need for something like that, when doing the rAc stuff.","msgtype":"m.text"},"ts":1405094355000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Whoops, running with mime type https://rawgit.com/bkardell/7da8ba03e690f2c24503/raw/ccbd20fc406f3158b0c616770e4bed1e956ce019/mutationobserverquestion.html","msgtype":"m.text"},"ts":1405094375000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"http://mxr.mozilla.org/mozilla-central/source/content/html/content/src/HTMLFormElement.cpp#1595","msgtype":"m.text"},"ts":1405094414000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Hixie: The question is - a) shouldn't that output the same in all browsers b) what is under-specified or buggy in existing if do","msgtype":"m.text"},"ts":1405094415000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"s/do/so","msgtype":"m.text"},"ts":1405094426000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"smaug____: huh","msgtype":"m.text"},"ts":1405094447000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"smaug____: well anyway, the other cases stand","msgtype":"m.text"},"ts":1405094458000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I could buy that consistency argument","msgtype":"m.text"},"ts":1405094502000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"bkardell__: if it's a mutation observer question, probably whatwg⊙wo, cc anne","msgtype":"m.text"},"ts":1405094532000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: yeah, anne was suggesting maybe it was about pasing... maybe still best to send to the list","msgtype":"m.text"},"ts":1405094576000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"Hixie: just trying to shortcut list confusion","msgtype":"m.text"},"ts":1405094589000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"bkardell__: pasing?","msgtype":"m.text"},"ts":1405094600000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"s/pasing/parsing :)","msgtype":"m.text"},"ts":1405094611000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"bkardell__: note, Gecko's behavior changed recently","msgtype":"m.text"},"ts":1405094615000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"bkardell__: oh","msgtype":"m.text"},"ts":1405094617000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"bkardell__: /me looks closer","msgtype":"m.text"},"ts":1405094625000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"bkardell__: though, I assume you're testing with latest versions","msgtype":"m.text"},"ts":1405094638000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"not release versions","msgtype":"m.text"},"ts":1405094643000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"bkardell__: oh if you're getting mutation observers during parsing, you can't guarantee that you'll get the same thing even in the same browser","msgtype":"m.text"},"ts":1405094655000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"smaug___: Checking in release versions","msgtype":"m.text"},"ts":1405094660000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"bkardell__: it depends on TCP packet boundaries, amongst other things","msgtype":"m.text"},"ts":1405094664000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"bkardell__: not useful","msgtype":"m.text"},"ts":1405094669000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Hixie: why not?  The way the test is constructed, there shouldn't be major variation, right?","msgtype":"m.text"},"ts":1405094694000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"but yeah, packet boundaries may affect to characterData records","msgtype":"m.text"},"ts":1405094717000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"bkardell__: e.g. at the simplest level, if one load gets an event loop spin (e.g. because the data was split into two packets and it only got the first packet) half way through the </h1> being parsed, and a second load does it all as one task, then the first will fire the mutation observers as two microtasks (at least), and the second will fire them as one.","msgtype":"m.text"},"ts":1405094778000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TIL: treatment of img@hspace is not interoperable","msgtype":"m.text"},"ts":1405094812000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hixie: Ok, I'll buy that for character data, but for element nodes they should be the same, yes?","msgtype":"m.text"},"ts":1405094832000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"smaug___: what do you see for type 1 nodes in latest FF?","msgtype":"m.text"},"ts":1405094872000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"bkardell__: well at the very minimum they'll be fired with different microtask timings","msgtype":"m.text"},"ts":1405094879000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie__: the test doesn't really involve timings though, right?  I mean, ignore text nodes in the output...","msgtype":"m.text"},"ts":1405094919000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"bkardell__: FF has one characterData which chromium apparently doesn't have","msgtype":"m.text"},"ts":1405094975000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"bkardell__: i don't really understand the test output","msgtype":"m.text"},"ts":1405094977000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(I don't understand those numbers under childList, but they are the same in FF and Chr)","msgtype":"m.text"},"ts":1405094992000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"childlist contains a count of nodeType for each addedNode","msgtype":"m.text"},"ts":1405095066000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"bkardell__: the parser can result in observably different results because of timings, but the end result DOM should be the same. If the question is about timings, then the parser might be relevant. If the question is about the end-result, then that's probably a DOM question, not a parser question.","msgtype":"m.text"},"ts":1405095069000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the source is pretty simple, fits on a visible screen","msgtype":"m.text"},"ts":1405095075000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"hsivonen: MikeSmith: validator.nu/?doc=http%3A%2F%2Fscottjehl.github.io%2Fpicturefill%2F&showsource=yes gives an internal error","msgtype":"m.text"},"ts":1405095143000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"smaug___: Let me check nightly","msgtype":"m.text"},"ts":1405095143000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"bkardell__: you're assuming one understands the mutation observer API enough to understand the test :-)","msgtype":"m.text"},"ts":1405095147000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"zcorpan: yeah checking on it now","msgtype":"m.text"},"ts":1405095161000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"smaug___: excellent, right!  nightly is matching!","msgtype":"m.text"},"ts":1405095386000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"does a happy dance","msgtype":"m.emote"},"ts":1405095396000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"I'm being such a stereotypical PL guy. \"Let's just use SML!\"","msgtype":"m.text"},"ts":1405095454000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"smaug___: any thoughts on why safari works fine for me with that test only if devtools are open? ever heard of that?","msgtype":"m.text"},"ts":1405095605000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"well bummer","msgtype":"m.text"},"ts":1405095641000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"no idea. I haven't used Safari for ages","msgtype":"m.text"},"ts":1405095658000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"i added some checks to catch cases where the dev version of the spec referenced terms not defined in the dev version of the spec","msgtype":"m.text"},"ts":1405095662000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i fixed one, then made it tell me the total count, not just one at a time, and it found 3999 more occurrences.","msgtype":"m.text"},"ts":1405095691000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hober: You here?","msgtype":"m.text"},"ts":1405095699000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"zcorpan: found the cause but not going to get it fixed until another hour or so at least. Hope hsivonen will be able to re-redeploy before he needs to head away","msgtype":"m.text"},"ts":1405096344000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hm","msgtype":"m.text"},"ts":1405096459000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"If I do margin-top: 50%, what is that based off? Width?","msgtype":"m.text"},"ts":1405096480000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1405096493000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Ta","msgtype":"m.text"},"ts":1405096539000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Do I need a link if my reftest files are called foo.html/foo-ref.html in wpt?","msgtype":"m.text"},"ts":1405096591000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: In theory, no","msgtype":"m.text"},"ts":1405096617000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"In practice?","msgtype":"m.text"},"ts":1405096628000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"But if the ref is reusable it's encouraged to use <link> to a standard file rather than -ref","msgtype":"m.text"},"ts":1405096646000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Not really","msgtype":"m.text"},"ts":1405096652000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"smaug___: When is that stuff supposed to land in release?","msgtype":"m.text"},"ts":1405096658000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"Ms2ger: Can you make it reusable?","msgtype":"m.text"},"ts":1405096667000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Hmm, maybe I could reuse it","msgtype":"m.text"},"ts":1405096716000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Alright","msgtype":"m.text"},"ts":1405096719000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Or not really, actually","msgtype":"m.text"},"ts":1405096750000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"hsivonen: I just pushed a fix to the build repo. Without it, the <picture> checker will fail with a non-document \"Oops\" internal error. If you have time to re-reploy before you have to head away, great. If not, it can wait til you're back.","msgtype":"m.text"},"ts":1405101326000,"senderName":"MikeSmit1","senderId":"MikeSmit1@irc"},
{"content":{"body":"hsivonen: sorry for not having been more careful","msgtype":"m.text"},"ts":1405101351000,"senderName":"MikeSmit1","senderId":"MikeSmit1@irc"},
{"content":{"body":"zcorpan: thanks for the heads-up. I fixed the cause and http://qa-dev.w3.org:8888/?doc=http%3A%2F%2Fw3c-test.org%2Fconformance-checkers%2Fhtml%2Felements%2Fpicture%2Fpicture-isvalid.html is built and running from the source trunk","msgtype":"m.text"},"ts":1405101529000,"senderName":"MikeSmit1","senderId":"MikeSmit1@irc"},
{"content":{"body":"zcorpan: But for now the <picture> support is currently broken at both v.nu & h5.v.nu and the W3C validator in the same way","msgtype":"m.text"},"ts":1405101597000,"senderName":"MikeSmit1","senderId":"MikeSmit1@irc"},
{"content":{"body":"zcorpan: and I'm going to leave it that way at the W3C validator until hsivonen is able to re-deploy too. Which may not be until 2 weeks from now","msgtype":"m.text"},"ts":1405101685000,"senderName":"MikeSmit1","senderId":"MikeSmit1@irc"},
{"content":{"body":"and now I need to board yet another plane without wifi","msgtype":"m.text"},"ts":1405101747000,"senderName":"MikeSmit1","senderId":"MikeSmit1@irc"},
{"content":{"body":"back around in 15 or so hours","msgtype":"m.text"},"ts":1405101767000,"senderName":"MikeSmit1","senderId":"MikeSmit1@irc"},
{"content":{"body":"MikeSmit1: k","msgtype":"m.text"},"ts":1405106981000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"dglazkov_: what does \"Window object named properties [HTML] must access the nodes in the document tree.\" mean in shadow dom spec","msgtype":"m.text"},"ts":1405107344000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"doesn't seem to belong to that spec at all","msgtype":"m.text"},"ts":1405107354000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"jgraham: wow, you appeared around html5lib, I am amaze ;P","msgtype":"m.text"},"ts":1405111525000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Well it wasn't an insanly complex PR","msgtype":"m.text"},"ts":1405111827000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"dglazkov_: is iframe supposed to work in shadow dom ?","msgtype":"m.text"},"ts":1405115392000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"jgraham: I dunno, it's not the most elegent of code, but that's Py2 as it's defined, le sigh","msgtype":"m.text"},"ts":1405115413000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"per spec no","msgtype":"m.text"},"ts":1405115606000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"interestingly chrome actually loads the iframe content but doesn't render it","msgtype":"m.text"},"ts":1405115620000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"h, hmm","msgtype":"m.text"},"ts":1405115643000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"ah, yes, it does render it","msgtype":"m.text"},"ts":1405115662000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but that is a bug","msgtype":"m.text"},"ts":1405115665000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Hixie: \"the furthest ancestor element node\" doesn't mean anything cross shadom-DOM boundaries, right?","msgtype":"m.text"},"ts":1405115711000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: Do you mean \"how does iframe work when it has a shadow root\"?","msgtype":"m.text"},"ts":1405116132000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"smaug____: And I believe any algorithm that look at the ancestor list should cross shadow boundaries and walk up the composed tree automatically.","msgtype":"m.text"},"ts":1405116173000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"why?","msgtype":"m.text"},"ts":1405116194000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I mean per what spec?","msgtype":"m.text"},"ts":1405116201000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(I could agree iframe should load, but so far I haven't found any spec which says that)","msgtype":"m.text"},"ts":1405116269000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: no idea","msgtype":"m.text"},"ts":1405116616000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"smaug____: i haven't updated any of my specs to handle shadow trees yet","msgtype":"m.text"},"ts":1405116627000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"right, so what is implemented in blink is somewhat random","msgtype":"m.text"},"ts":1405116653000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: Unsure which of my comments your question is in response to.","msgtype":"m.text"},"ts":1405116675000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: to your comment \"And I believe any algorithm that look at the ancestor list should cross shadow boundaries and walk up the composed tree automatically.\"","msgtype":"m.text"},"ts":1405116711000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Ah, kk.  That's my personal belief, not one based on a spec ref. ^_^ But if the Shadow DOM spec doesn't define that, it should; for example, form elements inside of shadow DOM should be submitted when placed in an external <form>.","msgtype":"m.text"},"ts":1405116765000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hmm, how should session history work in case there are iframes in shadow dom (assuming those actually load something)","msgtype":"m.text"},"ts":1405116767000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"TabAtkins: whaat? form elements should be submitted in that case?","msgtype":"m.text"},"ts":1405116800000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"that is surprising","msgtype":"m.text"},"ts":1405116860000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"if one just used radio buttons in shadow dom for some UI stuff, their value might get submitted accidentally","msgtype":"m.text"},"ts":1405116913000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"yeah i don't think it's as simple as just everything should work like if it was one tree","msgtype":"m.text"},"ts":1405116952000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it should definitely be opt-in behavior to let data to leak out from the shadow dom in such case","msgtype":"m.text"},"ts":1405116953000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"i think it probably needs to depend on the binding","msgtype":"m.text"},"ts":1405116959000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"smaug____: Hm, valid point.","msgtype":"m.text"},"ts":1405117638000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: I've got a super-class that's not meant to be used; it's just a holder for default implementations of methods, as it's designed to be extended.  Should I have its constructor throw, or produce a valid-but-useless object?","msgtype":"m.text"},"ts":1405117687000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: (Specifically, I'm defining a set of XXXColor classes for CSS, and have a CSSColor superclass over them. If the constructor should really work, it'll just return an object that represents transparent black, with no way to manipulate it.)","msgtype":"m.text"},"ts":1405117735000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Also, I'm using WebIDL to define the shape of these interfaces, but defining most of the methods by just saying \"here's the JS implementation\", which is interesting.","msgtype":"m.text"},"ts":1405117844000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i'd just not define a constructor","msgtype":"m.text"},"ts":1405117962000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Gotta have something there.","msgtype":"m.text"},"ts":1405117973000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I forget what happens if you don't define a constructor.","msgtype":"m.text"},"ts":1405117995000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"in webidl, if you don't set a [Constructor], you just don't get one","msgtype":"m.text"},"ts":1405118015000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"It defines a throwing constructor","msgtype":"m.text"},"ts":1405118019000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: if you can make the throwing constructor work in a JS polyfill without mega-hacks, then that might be best... but I think that breaks inheritance","msgtype":"m.text"},"ts":1405118093000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(by mega-hacks, I mean a constructor that doesn't throw when you pass it an unguessable secret, which all the subclasses know)","msgtype":"m.text"},"ts":1405118124000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Why is that necessary?","msgtype":"m.text"},"ts":1405118135000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: why is what necessary?","msgtype":"m.text"},"ts":1405118144000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Allowing the subclasses to construct an instance of the superclass?","msgtype":"m.text"},"ts":1405118159000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: if the superclass has any internal state at all, then you need to call super() in the subclass constructor to initialize it","msgtype":"m.text"},"ts":1405118181000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"not necessarily","msgtype":"m.text"},"ts":1405118192000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you could call an internal init() method, e.g.","msgtype":"m.text"},"ts":1405118199000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"It doesn't have any.  The interface is just some methods, and some static stuff hanging off of it.","msgtype":"m.text"},"ts":1405118205000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: nice, then I think throwing constructor is pretty sound","msgtype":"m.text"},"ts":1405118220000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Okay, cool.","msgtype":"m.text"},"ts":1405118229000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(It has a semi-constructor that takes a string and returns one of its subclasses, but that's exposed as a static method on the interface instead.)","msgtype":"m.text"},"ts":1405118270000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(i mean, Object has some internal state, and yet it's still fine for subclasses to throw even if they then have further subclasses that don't throw)","msgtype":"m.text"},"ts":1405118289000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: as long as it can be JS polyfilled I am happy, even if it's a bit unusual.","msgtype":"m.text"},"ts":1405118291000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hixie: Object has no internal state","msgtype":"m.text"},"ts":1405118297000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hixie: but I think you are right that an internal init() method would probably work","msgtype":"m.text"},"ts":1405118310000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Object has quite a lot of internal state :-)","msgtype":"m.text"},"ts":1405118310000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Usually when I use a useless superclass, I just give its constructor an empty body and don't worry about it, becasue I know I'm not going to try and construct it. ^_^","msgtype":"m.text"},"ts":1405118324000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But I gotta handle authors doing weird stuff.","msgtype":"m.text"},"ts":1405118339000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It would be nice if we had mixins in some first-class way","msgtype":"m.text"},"ts":1405118348000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So I was just wondering which style is more idiomatic - throwing, or dumb object.","msgtype":"m.text"},"ts":1405118350000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yes.  Yes it would be.","msgtype":"m.text"},"ts":1405118355000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That's all I'm using the stupid thing for, after all.","msgtype":"m.text"},"ts":1405118369000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"WebIDL implements/ES7 Object.mixin would not allow monkeypatching the mixin and getting those changes shared by all mix-targets","msgtype":"m.text"},"ts":1405118386000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1405118397000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And allowing monkeypatching is precisely why I'm structuring these things the way I am.","msgtype":"m.text"},"ts":1405118442000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(the problem i usually have with throwing constructors is that instances of them somehow exist. but that is not what is going on here.)","msgtype":"m.text"},"ts":1405118486000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Right.","msgtype":"m.text"},"ts":1405118526000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Unless there's some voodoo I'm not thinking of, there's no way to actually get a CSSColor object.","msgtype":"m.text"},"ts":1405118547000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Reflection wouldn't allow that, would it?","msgtype":"m.text"},"ts":1405118564000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Nah, I can't see how","msgtype":"m.text"},"ts":1405118584000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh wait, damnit, this isn't the name I wanted. I was going to go with RGBACompatibleColor.","msgtype":"m.text"},"ts":1405118598000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"They would have to be exposed through APIs in your specs","msgtype":"m.text"},"ts":1405118601000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Wait... OK this is just a thought experiment, but...","msgtype":"m.text"},"ts":1405118654000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You could define RGBACCPrototype = { ...methods... }","msgtype":"m.text"},"ts":1405118666000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"then inherit from that object directly","msgtype":"m.text"},"ts":1405118675000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Instead of defining function RGBACC () { throw new TypeError; }; RGBACC.prototype = { ... methods ... }","msgtype":"m.text"},"ts":1405118698000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ah, you lose static methods though","msgtype":"m.text"},"ts":1405118703000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I need an RGBACC itself, though, to hang some static methods off of.","msgtype":"m.text"},"ts":1405118705000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1405118706000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And... that pattern (proto-only) is getting very far from idiomatic.","msgtype":"m.text"},"ts":1405118739000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Might be interesting to make this pattern more explicit in IDL with \"abstract interface ...\", which fails syntax checking if there are any non-static attributes, or any constructors, and which is prohibited to be constructed by specs.","msgtype":"m.text"},"ts":1405118821000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(You'd still be able to use it in IDL itself, to denote an attribute/method that takes/returns any subclass of the interface.)","msgtype":"m.text"},"ts":1405118851000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Or maybe prohibit it from being used directly, and add another syntax construct like \"subclass<AbstractFoo>\" that must be used by attributes/methods.)","msgtype":"m.text"},"ts":1405118895000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Where subclass<XXX> is only valid when XXX is an abstract interface.)","msgtype":"m.text"},"ts":1405118914000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Unsure if worthwhile, but capturing relatively complex idioms that we want to use consistently is what WebIDL is for.","msgtype":"m.text"},"ts":1405118941000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"why would non-static attributes be not ok in an abstract interface?","msgtype":"m.text"},"ts":1405118960000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Because that implies there's state on an instance, but there are no instances, by definition.","msgtype":"m.text"},"ts":1405118977000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i mean, fundamentally, \"interface\" really means \"abstract class\". WebIDL doesn't have a \"class\" concept.","msgtype":"m.text"},"ts":1405118992000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"And putting data attributes on a prototype is bad practice.","msgtype":"m.text"},"ts":1405118999000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Node has plenty of attributes","msgtype":"m.text"},"ts":1405119010000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"WebIDL's \"interface\" is JS's \"class\".","msgtype":"m.text"},"ts":1405119012000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i don't think that's bad practice","msgtype":"m.text"},"ts":1405119014000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I know. It's bad practice. ^_^","msgtype":"m.text"},"ts":1405119018000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i find distinguishing \"interface\" from \"class with virtual methods\" to be a meaningless java-ism","msgtype":"m.text"},"ts":1405119029000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"nah, Node isn't bad practice","msgtype":"m.text"},"ts":1405119042000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"at least, not that part of it","msgtype":"m.text"},"ts":1405119049000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's a quite sensible API","msgtype":"m.text"},"ts":1405119055000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"If a data property is on a prototype, setting the property actually sets it on the prototype, changing it for *every instance*.  That's almost never what you want.","msgtype":"m.text"},"ts":1405119061000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"an attribute is fundamentally no different than a method","msgtype":"m.text"},"ts":1405119065000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i think the underlying reason java has it is to avoid issues like diamond inheritance, but there are better solutions to that","msgtype":"m.text"},"ts":1405119068000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"And if it is, you can explicitly say so with a getter/setter pair.","msgtype":"m.text"},"ts":1405119073000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"there's no difference between getter/setter pairs and data attributes in webidl","msgtype":"m.text"},"ts":1405119085000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: The \"fundamental\" difference is that you don't set methods regularly.","msgtype":"m.text"},"ts":1405119090000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"setFoo()/getFoo() is equivalent to \"attribute foo\"","msgtype":"m.text"},"ts":1405119107000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Technically, sure, but that's just because the getter/setter pair handle typechecking for you.","msgtype":"m.text"},"ts":1405119116000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hm, I guess they always set the value on the instance, though.  (Or set hidden state on the instance, which is the same thing here.)","msgtype":"m.text"},"ts":1405119192000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So maybe it's not actually terrible.","msgtype":"m.text"},"ts":1405119201000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But still, making the constructor automatically throw with a standard message, and preventing accidentally using the interface directly in other things (thus making it less likely the spec author absentmindedly constructs an instance in prose) might be helpful.","msgtype":"m.text"},"ts":1405119268000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"[NoInterfaceObject] is the usual way to prevent that kind of mistake","msgtype":"m.text"},"ts":1405119392000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"That prevents you from hanging static things off the interface.","msgtype":"m.text"},"ts":1405119407000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And doesn't prevent the mistake at all - prose can still construct a [NoInterfaceObject] object.","msgtype":"m.text"},"ts":1405119429000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The constructor just isn't present on the global.","msgtype":"m.text"},"ts":1405119446000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oh, from prose","msgtype":"m.text"},"ts":1405119473000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah, dunno what's a good way to prevent that kind of mistake","msgtype":"m.text"},"ts":1405119489000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"whatever you put in the spec, other spec writers have a tendency to think their case is special :-)","msgtype":"m.text"},"ts":1405119503000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(i include myself in this!)","msgtype":"m.text"},"ts":1405119507000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: seems like a reasonable thing, although I'd like a couple more use cases first.","msgtype":"m.text"},"ts":1405119601000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Yeah, it's a use-case-count of 1 right now, which is too small to generalize from safely.","msgtype":"m.text"},"ts":1405119618000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Gotta hit 3 before it's reasonable. ^_^","msgtype":"m.text"},"ts":1405119626000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"putting empty <img> blocks on top of images to break copy image location is the modern-day equivalent of alert(\"right click is not supported\")","msgtype":"m.text"},"ts":1405119990000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"oooh, that's evil, i've never seen it before","msgtype":"m.text"},"ts":1405120804000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"others put images in css background-images for the same reason","msgtype":"m.text"},"ts":1405120890000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(there are valid reasons to do that, but often it's just to make it harder to get the image url)","msgtype":"m.text"},"ts":1405120922000,"senderName":"zewt","senderId":"zewt@irc"}
]