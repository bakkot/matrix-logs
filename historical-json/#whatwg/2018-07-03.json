[
{"content":{"body":"annevk: yt?","msgtype":"m.text"},"ts":1530587448000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: annevk is on holiday for a few weeks I think","msgtype":"m.text"},"ts":1530588457000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"üèù","msgtype":"m.text"},"ts":1530588916000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I see.","msgtype":"m.text"},"ts":1530589053000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"does anyone know about media loading?","msgtype":"m.text"},"ts":1530589060000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: you want to email foolip and JakeA","msgtype":"m.text"},"ts":1530593576000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok, thanks","msgtype":"m.text"},"ts":1530593591000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: I've been looking into this recently, but I'm about to go on holiday for a week. I'm around for the next~5 hours though","msgtype":"m.text"},"ts":1530607292000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: okay.","msgtype":"m.text"},"ts":1530607303000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"JakeA","msgtype":"m.text"},"ts":1530607341000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"JakeA: so we have \"If a source element is inserted as a child of a media element that has no src attribute and whose networkState has the value NETWORK_EMPTY, the user agent must invoke the media element's resource selection algorithm.\"","msgtype":"m.text"},"ts":1530607353000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"JakeA: what prevents this step from running inside a template element?","msgtype":"m.text"},"ts":1530607364000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: ah, I've been looking at it from more of a fetch perspective. For HTML integration, I guess foolip will know more.","msgtype":"m.text"},"ts":1530607449000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Sorry!","msgtype":"m.text"},"ts":1530607451000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I don't even know how template prevents img loading off the top of my head","msgtype":"m.text"},"ts":1530607470000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: ok, thanks","msgtype":"m.text"},"ts":1530607555000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"JakeA","msgtype":"m.text"},"ts":1530607713000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"JakeA: but surely, there is some choke point for a document without a browsing context from issuing a network request??","msgtype":"m.text"},"ts":1530607732000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: not within fetch. It looks like <script> handles this using language like \"if src is changed and the script element is [=connected=]\"","msgtype":"m.text"},"ts":1530608074000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I guess media should do the same","msgtype":"m.text"},"ts":1530608085000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: connected doesn't mean it doesn't lack a browsing context","msgtype":"m.text"},"ts":1530608092000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"JakeA: a document may or may not have a browsing context","msgtype":"m.text"},"ts":1530608099000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: when does that occur? Bfcache?","msgtype":"m.text"},"ts":1530608139000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: or a document in XHR","msgtype":"m.text"},"ts":1530608165000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"JakeA: there is a bunch of cases","msgtype":"m.text"},"ts":1530608170000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"JakeA: you can have a document in iframe which navigates away from it","msgtype":"m.text"},"ts":1530608185000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"there is nothing preventing from scripts to access to the document if the script previously stored a reference to it","msgtype":"m.text"},"ts":1530608213000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"I guess it checks https://html.spec.whatwg.org/#concept-n-noscript","msgtype":"m.text"},"ts":1530608237000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"in step 11 of https://html.spec.whatwg.org/#prepare-a-script","msgtype":"m.text"},"ts":1530608247000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: Stylesheets use https://html.spec.whatwg.org/multipage/infrastructure.html#browsing-context-connected","msgtype":"m.text"},"ts":1530608429000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"rniwa, hmm, on first sight, it does look like the spec misses that case","msgtype":"m.text"},"ts":1530608519000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"JakeA: oh neat","msgtype":"m.text"},"ts":1530608578000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Ms2ger, JakeA: it appears to me that source element's processing model doesn't really check any of that :(","msgtype":"m.text"},"ts":1530608601000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"I wonder how this works for <img>, since they fetch before being connected.","msgtype":"m.text"},"ts":1530608690000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"\"In a browsing context where scripting is disabled, user agents may obtain images immediately or on demand. In a browsing context where scripting is enabled, user agents must obtain images immediately.\"","msgtype":"m.text"},"ts":1530609034000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"what a vague statement...","msgtype":"m.text"},"ts":1530609039000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"\"A user agent that obtains images on demand must update the image data of an img element whenever it needs the image data (i.e., on demand), but only if the img element's current request's state is unavailable. When an img element has experienced relevant mutations, if the user agent only obtains images on demand, the img element's current request's state must return to unavailable.\"","msgtype":"m.text"},"ts":1530609065000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"https://static-misc.glitch.me/dom-img-xhr/ Chrome, Firefox, & Safari fetch once the image is added to the browsing context","msgtype":"m.text"},"ts":1530609093000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: i guess we'd have to test what happens when img element is inside a template element, etc..","msgtype":"m.text"},"ts":1530609192000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"JakeA: but it would be shitty if any browser fetched it since the whole point of inventing template element is not to do that","msgtype":"m.text"},"ts":1530609218000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: agreed. But I'm not really familiar with how <template> works.","msgtype":"m.text"},"ts":1530609239000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: it's just a document without a browsing context","msgtype":"m.text"},"ts":1530609253000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"JakeA: what would be interesting is to figure out","msgtype":"m.text"},"ts":1530609260000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"whether img is fetched inside a document which has been removed from a frame","msgtype":"m.text"},"ts":1530609274000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"I think <img> is the outlier in terms of fetching before it's connected. Although IE does the same with <script> (not sure if Edge does the same)","msgtype":"m.text"},"ts":1530609345000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yes, for historical reasons","msgtype":"m.text"},"ts":1530609384000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"JakeA: img MUST fetch its resource right away","msgtype":"m.text"},"ts":1530609395000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"it's the way we used to pre-fetch images...","msgtype":"m.text"},"ts":1530609403000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"g'old JS1.3...","msgtype":"m.text"},"ts":1530609411000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"anyhow, it's getting a bit too late for me here in Cupertino","msgtype":"m.text"},"ts":1530609444000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"How else could hover effects work? üòÄ","msgtype":"m.text"},"ts":1530609445000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"g'night!","msgtype":"m.text"},"ts":1530609459000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: anyhow, thanks!","msgtype":"m.text"},"ts":1530609465000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: We've talked a bit before about how impls should be able to discern between `null` and `undefined` for RequestInit's `AbortSignal?` member, however looking at https://heycam.github.io/webidl/#es-dictionary (step 4.1.2), it looks null/undefined are both treated the same, thus indistinguishable? Is that accurate?","msgtype":"m.text"},"ts":1530642560000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: annevk is on vacation right now I think. But it does seem like null and undefined are treated the same way","msgtype":"m.text"},"ts":1530648475000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"i.e., the dictionary member is treated as not present","msgtype":"m.text"},"ts":1530648497000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: ah wasn‚Äôt sure if he was back yet. Following that logic, it seems that https://github.com/web-platform-tests/wpt/blob/master/fetch/api/abort/general.any.js#L149 shouldn‚Äôt be a valid scenario would","msgtype":"m.text"},"ts":1530648821000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"would you agree*","msgtype":"m.text"},"ts":1530648836000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"context: https://fetch.spec.whatwg.org/#dom-request step 28 & 30 wouldn‚Äôt be able to pick up a ‚Äúnull‚Äù AbortSignal as per WebIDL?","msgtype":"m.text"},"ts":1530648891000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: I agree with you on this","msgtype":"m.text"},"ts":1530648982000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"alternatively we could have special handling for nullable types in dictionary","msgtype":"m.text"},"ts":1530648999000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"but that's definitely a rabbit hole that'll probably prove not worth going down","msgtype":"m.text"},"ts":1530649027000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"It would be interesting to see how browsers actually behave in the case of this test.","msgtype":"m.text"},"ts":1530649180000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: Agreed. Would that special handling probably be baked into the Request() constructor, or somewhere in the IDL perhaps? I feel like in the Request constructor it's technically too \"late\", since the WebIDL conversions should have taken place","msgtype":"m.text"},"ts":1530649185000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Yeah, I've dug into FF a bit but need to look more","msgtype":"m.text"},"ts":1530649197000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Yeah it's gonna have to be in IDL","msgtype":"m.text"},"ts":1530649198000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"üëç","msgtype":"m.text"},"ts":1530649205000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"For now I'll open an Fetch issue for discussion, ta","msgtype":"m.text"},"ts":1530649215000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: interestingly Chrome's IDL codegen doesn't actually treat null as undefined","msgtype":"m.text"},"ts":1530649600000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"https://cs.chromium.org/chromium/src/out/Debug/gen/third_party/blink/renderer/bindings/core/v8/v8_request_init.cc?gsn=ToImpl&l=258","msgtype":"m.text"},"ts":1530649601000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"That's because of a change we just made","msgtype":"m.text"},"ts":1530649627000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"So basically peria@ and I discussed that null and undefined should be distinguishable","msgtype":"m.text"},"ts":1530649657000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"However it seems that assumption was wrong","msgtype":"m.text"},"ts":1530649668000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Seems like you'd need to use any","msgtype":"m.text"},"ts":1530649675000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I don't think any would either in this case actually","msgtype":"m.text"},"ts":1530649730000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"Yeah, digging in...","msgtype":"m.text"},"ts":1530649742000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"since null/undefined conversion happens before type conversion for the member","msgtype":"m.text"},"ts":1530649758000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"Right","msgtype":"m.text"},"ts":1530649761000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"For now in chrome we use any to detect, but likely our ability to distinguish null from undefined is not following WebIDL","msgtype":"m.text"},"ts":1530649789000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"s/detect/detect null","msgtype":"m.text"},"ts":1530649805000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"This seems really strange... why are nullable dictionary members allowed anyway...","msgtype":"m.text"},"ts":1530650005000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"s/allowed anyway/allowed anyway, if this is the case/","msgtype":"m.text"},"ts":1530650019000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That's what I was thinking","msgtype":"m.text"},"ts":1530650060000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"hmmm","msgtype":"m.text"},"ts":1530650069000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"I wonder if we broke the spec at some point","msgtype":"m.text"},"ts":1530650099000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Alternately we could try to find if any other nullable dictionary members exist. If not, maybe this is the first time we've run into it.","msgtype":"m.text"},"ts":1530650119000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Firefox seems to handle it correctly right now though","msgtype":"m.text"},"ts":1530650143000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"https://searchfox.org/mozilla-central/source/__GENERATED__/dom/bindings/RequestBinding.cpp#530","msgtype":"m.text"},"ts":1530650145000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"December 2016 /TR/ash spec has the same algorithm","msgtype":"m.text"},"ts":1530650187000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Also I'm kinda surprised making the change to distinguish between undefined and null in dictionary members didn't break any existing tests","msgtype":"m.text"},"ts":1530650351000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"in Chrome","msgtype":"m.text"},"ts":1530650355000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: Hmm I think FF breaks WebIDL spec though right? It looks like it distinguishes between null/undefined which as er #es-dictionary is incorrect","msgtype":"m.text"},"ts":1530650370000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"TimothyGu: It didn't break any changes because the change was sorta half made. `someDictionary.hasFoo()` still returns `false` when `dict.foo` is `null`, so that's maybe why","msgtype":"m.text"},"ts":1530650427000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: hm what do you mean FF distinguishes between null/undefined?","msgtype":"m.text"},"ts":1530650443000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"also ah lol","msgtype":"m.text"},"ts":1530650447000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: Basically FF passes https://github.com/web-platform-tests/wpt/blob/master/fetch/api/abort/general.any.js#L149","msgtype":"m.text"},"ts":1530650610000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1530650620000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"I assume https://searchfox.org/mozilla-central/source/dom/fetch/Request.cpp#415 evals to true","msgtype":"m.text"},"ts":1530650751000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"But either way, nullable dictionary members seem pretty few and far between. I guess I'll file something on Fetch for now and maybe we can move the discussion to WebIDL?","msgtype":"m.text"},"ts":1530650797000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Agreed","msgtype":"m.text"},"ts":1530650866000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"I know bz used to hack Firefox's idl codegen to check if an IDL feature is used in web platform","msgtype":"m.text"},"ts":1530650886000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"maybe we could do the same with nullable members?","msgtype":"m.text"},"ts":1530650901000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"OK false alarm everyone","msgtype":"m.text"},"ts":1530650914000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"V is the dictionary","msgtype":"m.text"},"ts":1530650925000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"value is the value","msgtype":"m.text"},"ts":1530650929000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So null/undefined canonicalization only happens for V","msgtype":"m.text"},"ts":1530650946000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Not for value","msgtype":"m.text"},"ts":1530650948000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(credit to bz)","msgtype":"m.text"},"ts":1530650964000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ah oops","msgtype":"m.text"},"ts":1530650973000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"PR incoming to fix the variable names to not be stupid","msgtype":"m.text"},"ts":1530650991000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"phew","msgtype":"m.text"},"ts":1530651016000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Thanks lol. cc me plz","msgtype":"m.text"},"ts":1530651025000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1530651032000,"senderName":"domfarolino","senderId":"domfarolino@irc"}
]