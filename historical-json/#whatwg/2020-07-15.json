[
{"content":{"body":"annevk: was thinking that there might be an issue with using CORS to protect orientation/resolution - background/other CSS images never send CORS as they don't have a crossorigin attribute. Though those also don't leak anything as they don't have readable dimensions.","msgtype":"m.text"},"ts":1594805636000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"How careful is the CSSWG about that with the CSSOM I wonder?","msgtype":"m.text"},"ts":1594805809000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"good question. you might be able to gather those from getComputedStyle(...).backgroundSize","msgtype":"m.text"},"ts":1594806853000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"it seems like currently you can't - but I doubt that they're aware of this at CSSWG","msgtype":"m.text"},"ts":1594806964000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"though this kind of makes CORS an unsuitable solution for orientation/resolution IMO, there needs to be something that's purely a response header","msgtype":"m.text"},"ts":1594807036000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"That makes sense, that might get complex though with redirects","msgtype":"m.text"},"ts":1594807848000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yea but that's also true for CORS","msgtype":"m.text"},"ts":1594809023000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"annevk: I think that a server that wants to protect an image's orientation/resolution from leaking can do so today without changing anything - bake them into the image before serving them and not serve that metadata at all. Adding a response header would allow a new way to do that, but maybe it's redundant.","msgtype":"m.text"},"ts":1594809098000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"Yeah, but we have the infrastructure in place there.","msgtype":"m.text"},"ts":1594809137000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"orientation/resolution are kind of an optimization \"opt in\" and servers have a way to serve the same data without them if they care about that information leakage","msgtype":"m.text"},"ts":1594809142000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"That servers have ways to mitigate same-origin policy issues is not an argument to not enforce it.","msgtype":"m.text"},"ts":1594809194000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it's an argument against creating new ways for servers to mitigate it","msgtype":"m.text"},"ts":1594809256000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"as maybe the current ways are sufficient, and CORS as enforcing same-origin policy doesn't play well with image geometry","msgtype":"m.text"},"ts":1594809307000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"I guess an HTTP header would be opt-in instead of opt-out, which would make it less redundant","msgtype":"m.text"},"ts":1594809398000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"I'm not sure I'm following what you're saying here, but I don't think an argument can be constructed whereby we expose all image metadata because servers could hide it if they cared enough","msgtype":"m.text"},"ts":1594809459000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"An acceptable argument, that is","msgtype":"m.text"},"ts":1594809471000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wonder how are redirects handled with Timing-Allow-Origin? It sounds almost like a similar problem","msgtype":"m.text"},"ts":1594809472000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: yeah, it's handled in Fetch; I guess we could abstract that","msgtype":"m.text"},"ts":1594809490000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Thinking something along the lines of Media-Transform-Allow-Origin. Limited to transformation metadata (rotate/scale), not allowing to read GPS etc. which should require CORS","msgtype":"m.text"},"ts":1594809964000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"Domenic: why do statics use the current global? There's no real this?","msgtype":"m.text"},"ts":1594817830000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: correct","msgtype":"m.text"},"ts":1594821637000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Okay, implementations seem to get that right and most other aspects too, except for Safari as noted","msgtype":"m.text"},"ts":1594821792000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: hmm, so how do we state exceptions are created in this's relevant Realm?","msgtype":"m.text"},"ts":1594827325000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: exceptions are created in the current realm","msgtype":"m.text"},"ts":1594827335000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"They're not","msgtype":"m.text"},"ts":1594827345000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://heycam.github.io/webidl/#es-creating-throwing-exceptions","msgtype":"m.text"},"ts":1594827352000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"At least not in my tests","msgtype":"m.text"},"ts":1594827357000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Show me the test?","msgtype":"m.text"},"ts":1594827372000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: https://github.com/web-platform-tests/wpt/pull/24601/files#diff-4f09c53069aab10026cff804ebb984a2R88","msgtype":"m.text"},"ts":1594827420000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Or is that because of the promise? Hmm","msgtype":"m.text"},"ts":1594827475000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: in a simpler example it's definitely current: http://software.hixie.ch/utilities/js/live-dom-viewer/?saved=8271","msgtype":"m.text"},"ts":1594827602000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: so if you have a response from the relevant realm, then the current realm at the time `res.json()` runs is the original relevant realm","msgtype":"m.text"},"ts":1594827675000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I.e. since `res` is from `frames[1]` then at the time `res.json()` runs, the current realm is `frames[1]`","msgtype":"m.text"},"ts":1594827692000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You'd need to do `originalCurrentFrame.Response.prototype[method].call(res, ...)`","msgtype":"m.text"},"ts":1594827733000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: okay, so some of those tests are wrong; perhaps that's also why the JSON thing is weird","msgtype":"m.text"},"ts":1594827759000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, although the JSON thing seems like a spec inconsistency at the very least","msgtype":"m.text"},"ts":1594827806000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If browsers end up doing current after all I think we should just let it be though, but...","msgtype":"m.text"},"ts":1594827849000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Probably true","msgtype":"m.text"},"ts":1594827875000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: also, it seems that upon fulfillment doesn't allow stating the realm for that promise","msgtype":"m.text"},"ts":1594828007000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm","msgtype":"m.text"},"ts":1594828020000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: which I guess means it would default to current?","msgtype":"m.text"},"ts":1594828020000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It would default to \"current at the time that PerformPromiseThen creates a new promise\", i.e. it would default to the same realm as the promise that is sent as input","msgtype":"m.text"},"ts":1594828050000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I wish \"this\" was available to IDL somehow via magic","msgtype":"m.text"},"ts":1594828059000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Wait, it is available as IDL passes it in...","msgtype":"m.text"},"ts":1594828075000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Can we make new/a new promise/etc. smarter about this?","msgtype":"m.text"},"ts":1594828103000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You mean, allow them to implicitly chose the right realm? See https://github.com/heycam/webidl/issues/135","msgtype":"m.text"},"ts":1594828128000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ah, that also talks about statics","msgtype":"m.text"},"ts":1594828245000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm","msgtype":"m.text"},"ts":1594828252000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So now I'm not sure whether to update Fetch to make this all explicit","msgtype":"m.text"},"ts":1594828265000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Fair... might be best to fix IDL.","msgtype":"m.text"},"ts":1594828381000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ugh GitHub is janky","msgtype":"m.text"},"ts":1594829863000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: I'm refactoring https://github.com/whatwg/encoding/pull/215 to make streams / token queues a list subtype, and replace \"token\" by \"item\" throughout.","msgtype":"m.text"},"ts":1594831830000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"Should I use the name \"consumable list\" then?","msgtype":"m.text"},"ts":1594831837000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"andreubotella: yeah I suppose, or I/O list","msgtype":"m.text"},"ts":1594831995000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Maybe Domenic has thoughts?","msgtype":"m.text"},"ts":1594832008000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I liked \"token queue\"","msgtype":"m.text"},"ts":1594832028000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Similar to how \"task queue\" is a list subtype","msgtype":"m.text"},"ts":1594832047000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(or, rather, is just a list)","msgtype":"m.text"},"ts":1594832054000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You don't find it confusing with queue?","msgtype":"m.text"},"ts":1594832072000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"No. It's still conceptually a queue.","msgtype":"m.text"},"ts":1594832080000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Even if it's not \"implemented\" that way.","msgtype":"m.text"},"ts":1594832087000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"queues don't have prepend though","msgtype":"m.text"},"ts":1594832088000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I was thinking of prepend as an internal operation, since we have an appendix listing alternative ways to implement it","msgtype":"m.text"},"ts":1594832128000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"so maybe that's fair","msgtype":"m.text"},"ts":1594832136000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"annevk: deque","msgtype":"m.text"},"ts":1594832182000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I also don't really understand why we'd call it \"token\" here and not \"item\"","msgtype":"m.text"},"ts":1594832200000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"maybe I/O queue?","msgtype":"m.text"},"ts":1594832232000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"If it's really just a list it doesn't really need a separate name as it doesn't belong to anything","msgtype":"m.text"},"ts":1594832232000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But given read it's probably useful","msgtype":"m.text"},"ts":1594832255000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"andreubotella: yeah I guess that's fine if nobody minds the specifics of queue","msgtype":"m.text"},"ts":1594832281000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is `ioQueue` an acceptable variable name? `IOQueue`?","msgtype":"m.text"},"ts":1594836688000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"andreubotella: `ioQueue` sounds good","msgtype":"m.text"},"ts":1594837656000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"data: URLs really get their own agent?","msgtype":"m.text"},"ts":1594845140000,"senderName":"Domenic","senderId":"Domenic@irc"}
]