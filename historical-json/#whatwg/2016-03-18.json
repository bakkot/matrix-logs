[
{"content":{"body":"Domenic: maybe HTML should simply  define svg:image and svg:script directly, if they are to be largely, but not quite, identical","msgtype":"m.text"},"ts":1458262793000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah, that would be nice if we end up not being able to unify, just because they're so complex. Being defined together would reduce the chance of them accidentally diverging.","msgtype":"m.text"},"ts":1458268062000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"should i use \"no-referrer\" or \"none\" or \"never\" in the meta referrer tag?","msgtype":"m.text"},"ts":1458276513000,"senderName":"pikaren","senderId":"pikaren@irc"},
{"content":{"body":"which one is recognized most mainstream browsers","msgtype":"m.text"},"ts":1458276540000,"senderName":"pikaren","senderId":"pikaren@irc"},
{"content":{"body":"by most","msgtype":"m.text"},"ts":1458276545000,"senderName":"pikaren","senderId":"pikaren@irc"},
{"content":{"body":"pikaren: \"never\" I suspect","msgtype":"m.text"},"ts":1458286430000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1458286444000,"senderName":"pikaren","senderId":"pikaren@irc"},
{"content":{"body":"pikaren: see https://wiki.whatwg.org/wiki/Meta_referrer for the original spec","msgtype":"m.text"},"ts":1458286466000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"spec\"","msgtype":"m.text"},"ts":1458286472000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i saw some stackoverflow folks suggest using no-referrer though","msgtype":"m.text"},"ts":1458286476000,"senderName":"pikaren","senderId":"pikaren@irc"},
{"content":{"body":"do all the newer browsers try to support \"never\"","msgtype":"m.text"},"ts":1458286534000,"senderName":"pikaren","senderId":"pikaren@irc"},
{"content":{"body":"pikaren: yeah, that's required by https://w3c.github.io/webappsec-referrer-policy/#determine-policy-for-token","msgtype":"m.text"},"ts":1458286581000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1458286702000,"senderName":"pikaren","senderId":"pikaren@irc"},
{"content":{"body":"nice","msgtype":"m.text"},"ts":1458286706000,"senderName":"pikaren","senderId":"pikaren@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1458286708000,"senderName":"pikaren","senderId":"pikaren@irc"},
{"content":{"body":"Hi, I have a couple of questions about sectioning root. Is this the right place to ask?","msgtype":"m.text"},"ts":1458297527000,"senderName":"derekjohnson","senderId":"derekjohnson@irc"},
{"content":{"body":"Are there examples of interfaces holding onto promises similar to ServiceWorkerContainer.ready, but that can cycle through the states multiple time during the object's lifetime (sensor state can go multiple time through the cycle idle -> activating -> active and needs a promise that gets resolved when active).","msgtype":"m.text"},"ts":1458299071000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: you mentioned cancellable promises yesterday. What's my best move right now? Return a promise, throw an Abort error on cancellation and retrofit later to cancellable promises or, instead, remove promise for now (they're not critical as there are also statechange events being dispatched) and add them back in once cancellables are a thing?","msgtype":"m.text"},"ts":1458300985000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: not sure, ask JakeA / Domenic","msgtype":"m.text"},"ts":1458301595000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"derekjohnson: yeah, I guess it is, though not sure if there's folks around who can help right now","msgtype":"m.text"},"ts":1458301619000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'll give it a shot anyway :) First question is why is sectioning root deemed necessary? Second is what is different about the elements that are sectioning root (apart from body) that makes them worthy of having their contents hidden from the main outline?","msgtype":"m.text"},"ts":1458301922000,"senderName":"derekjohnson","senderId":"derekjohnson@irc"},
{"content":{"body":"derekjohnson: I think the idea is that if you quote a substantial piece of an article, the headings of that article shouldn't be part of your outline, since they're just part of a quote","msgtype":"m.text"},"ts":1458302254000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: kind of weird that if someone uses <figure> for products on an ecommerce site or <details> for a subnav or something that they get treated like a portion of a quoted article.","msgtype":"m.text"},"ts":1458302689000,"senderName":"derekjohnson","senderId":"derekjohnson@irc"},
{"content":{"body":"derekjohnson: well, I think similar considerations apply there","msgtype":"m.text"},"ts":1458302784000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"derekjohnson: you typically don't have \"Graph 50: Population growth\" in your main outline","msgtype":"m.text"},"ts":1458302825000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: agree, but you do have \"Bow saw\", \"Hacksaw\", \"Chainsaw\" in a list of products","msgtype":"m.text"},"ts":1458302886000,"senderName":"derekjohnson","senderId":"derekjohnson@irc"},
{"content":{"body":"derekjohnson: a list of products isn't really <details> though, is it?","msgtype":"m.text"},"ts":1458302916000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I should say I use <article> for product lists but I've seen <figure> used a lot","msgtype":"m.text"},"ts":1458302917000,"senderName":"derekjohnson","senderId":"derekjohnson@irc"},
{"content":{"body":"derekjohnson: seems spurious, but since outline is so poorly supported, it's no surprise","msgtype":"m.text"},"ts":1458302963000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah we're talking about something that doesn't really exist, it interests me though","msgtype":"m.text"},"ts":1458303001000,"senderName":"derekjohnson","senderId":"derekjohnson@irc"},
{"content":{"body":"I need to figure out if it will ever get implemented, if it doesn't, we might have to remove it from the specification ðŸ˜Ÿ","msgtype":"m.text"},"ts":1458303057000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith, hi!","msgtype":"m.text"},"ts":1458304125000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"MikeSmith, could I be added as a contributor on the push-api w3c repo?","msgtype":"m.text"},"ts":1458304173000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"smaug____: if https://github.com/WICG/EventListenerOptions/issues/11#issuecomment-198348071 is actually easy, feel free to demonstrate","msgtype":"m.text"},"ts":1458306661000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: I have many doubts","msgtype":"m.text"},"ts":1458306670000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what kind of doubts?","msgtype":"m.text"},"ts":1458306698000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: that it would be easy","msgtype":"m.text"},"ts":1458306713000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what part do you consider hard there?","msgtype":"m.text"},"ts":1458306747000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I also don't like that it encourages a different this binding from all other callbacks and calls the callback member \"handleEvent\"","msgtype":"m.text"},"ts":1458306770000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: afaict you'd have to do what philipj says and write out the whole binding yourself","msgtype":"m.text"},"ts":1458306798000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: again, if you see an easy alternative, please demonstrate, no need to discuss if it's easy","msgtype":"m.text"},"ts":1458306813000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so what is wrong with the approach that there is dictionary EventListenerOpts { boolean passive = false;};","msgtype":"m.text"},"ts":1458306878000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"then eventlistener param is changed to object or any","msgtype":"m.text"},"ts":1458306896000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"first you do listener -> dictionary conversion and read the passive value","msgtype":"m.text"},"ts":1458306925000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I don't understand what object or any means, how is that not any?","msgtype":"m.text"},"ts":1458306931000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and then you do whatever is happening now","msgtype":"m.text"},"ts":1458306934000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"the type of the listener would be object (or any, not sure which one would be better)","msgtype":"m.text"},"ts":1458306967000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"IDL handles dictionary conversion, I'm not sure how you'd do that in prose","msgtype":"m.text"},"ts":1458306996000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Apart from just copying and pasting those algorithms, perhaps creating abstractions, etc.","msgtype":"m.text"},"ts":1458307014000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Definitely not easy","msgtype":"m.text"},"ts":1458307021000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"we have dictionary conversion in prose elsewhere","msgtype":"m.text"},"ts":1458307035000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"in specs","msgtype":"m.text"},"ts":1458307040000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"No we don't","msgtype":"m.text"},"ts":1458307044000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://html.spec.whatwg.org/multipage/scripting.html#coerce-context-arguments-for-2d for example","msgtype":"m.text"},"ts":1458307049000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"That's not a dictionary","msgtype":"m.text"},"ts":1458307072000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://html.spec.whatwg.org/multipage/scripting.html#canvasrenderingcontext2dsettings is dictionary","msgtype":"m.text"},"ts":1458307083000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"ew","msgtype":"m.text"},"ts":1458307143000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"RenderingContext? getContext(DOMString contextId, any... arguments); and the first any argument is converted to dictionary conditionally","msgtype":"m.text"},"ts":1458307152000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"based on the contextID","msgtype":"m.text"},"ts":1458307158000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"so we totally do that conversion in prose","msgtype":"m.text"},"ts":1458307179000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I guess we do","msgtype":"m.text"},"ts":1458307200000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Note that this also means we have to keep more objects alive for each listener","msgtype":"m.text"},"ts":1458307273000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"we do?","msgtype":"m.text"},"ts":1458307318000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"It doesn't seem like a great alternative to me","msgtype":"m.text"},"ts":1458307319000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't see any need for more objects","msgtype":"m.text"},"ts":1458307331000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: yeah, because folks will be encouraged to pass in objects that reference a callback, and we can't throw away that object as we can with dictionaries since it's the this value","msgtype":"m.text"},"ts":1458307349000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh you mean that. not worried about that at all","msgtype":"m.text"},"ts":1458307376000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I don't even see why to worry about that","msgtype":"m.text"},"ts":1458307400000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"It's also less compatible since if that object already has members we might be changing the semantics of deployed valid code","msgtype":"m.text"},"ts":1458307461000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That is, this approach isn't even backwards compatible","msgtype":"m.text"},"ts":1458307487000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that is a risk. but I consider the risk less than what 3rd param approach has","msgtype":"m.text"},"ts":1458307614000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"we could reduce the risk by changing the name for passive to something less common","msgtype":"m.text"},"ts":1458307650000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"The 3rd param approach has no risk for valid existing code","msgtype":"m.text"},"ts":1458307804000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't think 1-2 year browser upgrade cycle is an actual risk worth caring about. These APIs are with us for the long term.","msgtype":"m.text"},"ts":1458307855000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Once we start caring about forward compat we might as well stop","msgtype":"m.text"},"ts":1458307870000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"As philipj suggested elsewhere we should probably make feature detection easier for dictionaries somehow","msgtype":"m.text"},"ts":1458307895000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That's something worth looking into","msgtype":"m.text"},"ts":1458307904000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"3rd param causes the risk for pages being broken for many users.","msgtype":"m.text"},"ts":1458308403000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Maybe the risk is a little higher than with a new API, but it's really not that different","msgtype":"m.text"},"ts":1458308487000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And at least it doesn't break old content forever","msgtype":"m.text"},"ts":1458308548000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Which I think is much worse, since that is far less likely to be fixed","msgtype":"m.text"},"ts":1458308573000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"normalize.css v4 is being prepared tonight. if anyone has a minute to look for anything that might have snuck past us on master or in the last pull requests, it helps prevent bugs from making it into 4.0.0. https://twitter.com/jon_neal/status/710840040394530816","msgtype":"m.text"},"ts":1458312662000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"beverloo: hi, setting you up now","msgtype":"m.text"},"ts":1458320577000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and done","msgtype":"m.text"},"ts":1458320667000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"thank you!","msgtype":"m.text"},"ts":1458320748000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"wanderview: is https://github.com/whatwg/fetch/issues/245 high priority?","msgtype":"m.text"},"ts":1458320964000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: mostly working on Shadow DOM at the moment","msgtype":"m.text"},"ts":1458320979000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: don't think its a top priority no... was just referencing another instance I saw","msgtype":"m.text"},"ts":1458321015000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: maybe we can discuss at the f2f","msgtype":"m.text"},"ts":1458321023000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: thanks, yeah, would be curious to hear what others think","msgtype":"m.text"},"ts":1458321042000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I mean... the people who go to the f2f","msgtype":"m.text"},"ts":1458321042000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I'd be happy to silently fail and make sure new Request(url, someotherrequest) always works","msgtype":"m.text"},"ts":1458321068000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: while resetting certain state as appropriate, of course","msgtype":"m.text"},"ts":1458321094000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: some kind of \"safe url rewrite\" function might be more convenient for what people really want, though","msgtype":"m.text"},"ts":1458321100000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: well that's called a redirect","msgtype":"m.text"},"ts":1458321126000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I guess evt.respondWith(evt.request.redirect(newURL)) will result in the service worker getting entered again, right?","msgtype":"m.text"},"ts":1458321258000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I believe it will","msgtype":"m.text"},"ts":1458321261000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1458321598000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and that chromium issue was trying to avoid a bug in chrome, so it wasn't rewriting the url anyway","msgtype":"m.text"},"ts":1458321729000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic, annevk: Anything wrong conceptually with letting <video>/<audio>/<picture> inside of <svg> parse as the <html:*> elements?  That is, set up the right (HTML) namespace on them?","msgtype":"m.text"},"ts":1458340641000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Obvi not possible for the SVG-as-XML syntax, but for the embedded-SVG syntax?","msgtype":"m.text"},"ts":1458340663000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: seems quite reasonable to me.","msgtype":"m.text"},"ts":1458340865000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: any plans to bikeshed Encoding?","msgtype":"m.text"},"ts":1458341179000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Also, has anyone plotted \"# spec authoring tools\" vs \"# spec editors\" over time?","msgtype":"m.text"},"ts":1458341255000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"# of authoring tools has remained approximately flat for a while.  Bikeshed rose from the corpse of the \"Bert's preprocessor\", so a net 0 gain.","msgtype":"m.text"},"ts":1458341300000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Or rather, it quickly cannibalized all uses of Bert's preprocessor as its first victim.)","msgtype":"m.text"},"ts":1458341332000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]