[
{"content":{"body":"hm","msgtype":"m.text"},"ts":1184235060000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"are there really two parse errors for \"<!DOCTYPE\" but only one for \"<!DOCTYPE \"?","msgtype":"m.text"},"ts":1184235061000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: yes","msgtype":"m.text"},"ts":1184235600000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Hixie: probably not worth tweaking","msgtype":"m.text"},"ts":1184235660000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"<b><table><td></b><i></table>X","msgtype":"m.text"},"ts":1184236440000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Why isn't <b> supposed to reopen before X?","msgtype":"m.text"},"ts":1184236441000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"isn't it?","msgtype":"m.text"},"ts":1184238120000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh because the table is in the <b>","msgtype":"m.text"},"ts":1184238180000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and so the X is still in the <b>","msgtype":"m.text"},"ts":1184238181000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the </b> in the above has no effect","msgtype":"m.text"},"ts":1184238182000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: How's Bergen?","msgtype":"m.text"},"ts":1184238300000,"senderName":"virtuelv","senderId":"virtuelv@irc"},
{"content":{"body":"http://geoffers.no-ip.com/svn/php-html-5-direct/tests/numbersTest","msgtype":"m.text"},"ts":1184238840000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"virtuelv: rainy","msgtype":"m.text"},"ts":1184238960000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"gsnedders: does that match the spec or the spec with your proposed changes?","msgtype":"m.text"},"ts":1184239020000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: the spec","msgtype":"m.text"},"ts":1184239021000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hixie: Norway's been pretty much like that for a couple of weeks now","msgtype":"m.text"},"ts":1184239080000,"senderName":"virtuelv","senderId":"virtuelv@irc"},
{"content":{"body":"Hixie: even when the spec does very odd things (like a list of integers with input \"10\" outputting [1])","msgtype":"m.text"},"ts":1184239081000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: k","msgtype":"m.text"},"ts":1184239140000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"gsnedders: can you include that link in one of your e-mails? (or just mail it directly to me ianâŠ™hc) I'll try to look at what browsers do with those tests when I update the spec","msgtype":"m.text"},"ts":1184239141000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I'm going to email it shortly","msgtype":"m.text"},"ts":1184239200000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hixie: just a few more general issues with the number section, then my review of that is done, and I'll send it off with the final email","msgtype":"m.text"},"ts":1184239201000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hixie: ah, I didn't realized the table was in b. I've got a bug then.","msgtype":"m.text"},"ts":1184239202000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Hixie: re DOMContentLoaded - it'd be useful to have some event when the DOM is loaded and styles are available/applied","msgtype":"m.text"},"ts":1184239320000,"senderName":"virtuelv","senderId":"virtuelv@irc"},
{"content":{"body":"translating the spec to code would be less error-prone if the spec didn't have gotos that create unnatural loops","msgtype":"m.text"},"ts":1184240460000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: heh. I ended up with a do {} while (true); in my implementation of the lists of integers.","msgtype":"m.text"},"ts":1184240520000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"then relying on break and continue statements","msgtype":"m.text"},"ts":1184240521000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: I'm pretty sure do-while is always natural","msgtype":"m.text"},"ts":1184240522000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"(natural in the compiler sense)","msgtype":"m.text"},"ts":1184240523000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"ah. in that sense.","msgtype":"m.text"},"ts":1184240580000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(of natural)","msgtype":"m.text"},"ts":1184240581000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"PHP likely does something odd with it, though, knowing PHP.","msgtype":"m.text"},"ts":1184240582000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"has anyone apart from zcorpan_ and myself started the spec review, anyway?","msgtype":"m.text"},"ts":1184240640000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"if I had to guess, my guess would be that even PHP created only natural loops for the purpose of compiler optimization","msgtype":"m.text"},"ts":1184240641000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"gsnedders: I'm reviewing the parsing spec as I go","msgtype":"m.text"},"ts":1184240642000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"gsnedders: I don't have much to say about tokenization, but I have posted remark about tree building","msgtype":"m.text"},"ts":1184240700000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: ah. I just haven't seen that much.","msgtype":"m.text"},"ts":1184240820000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"lost in the flood I guess :-(","msgtype":"m.text"},"ts":1184240880000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"ah, now I see","msgtype":"m.text"},"ts":1184240881000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"hsivonen: believe me, the spec doesn't look like what i'd want it to look like if i was doing this from scratch","msgtype":"m.text"},"ts":1184241300000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"anyway, time to be a tourist","msgtype":"m.text"},"ts":1184241301000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: rarely anything ends up as you'd like it to if you started from scratch :P","msgtype":"m.text"},"ts":1184241360000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"<a><p>X<a>Y</a>Z</p></a>","msgtype":"m.text"},"ts":1184242740000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Why does the first <a> come off the stack before <p> goes in?","msgtype":"m.text"},"ts":1184242800000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"ooh. does the p get reparented?","msgtype":"m.text"},"ts":1184242801000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"now I'm confused","msgtype":"m.text"},"ts":1184242920000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"http://ajaxian.com/archives/google-gears-roadmap-and-features","msgtype":"m.text"},"ts":1184243820000,"senderName":"met_","senderId":"met_@irc"},
{"content":{"body":"ooh! my code lacks step #10 of the AAA!","msgtype":"m.text"},"ts":1184243821000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"gsnedders: In numbersTest: s/dimentions/dimensions/","msgtype":"m.text"},"ts":1184244240000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: fixed","msgtype":"m.text"},"ts":1184244420000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Jero: you around?","msgtype":"m.text"},"ts":1184253300000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1184253301000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"did you start your PHP5 implementation from scratch not knowing that there was a semi-started one before, or some other reason?","msgtype":"m.text"},"ts":1184253420000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Jero: and I've started on a 1:1 implementation in PHP, which isn't really so relevant in the real world","msgtype":"m.text"},"ts":1184253840000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: correct, I found out later that there was already an HTML5 parser in PHP","msgtype":"m.text"},"ts":1184253900000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"gsnedders: but I could access the site (some issues with Trac I believe)","msgtype":"m.text"},"ts":1184253901000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"Jero: it's not so interesting now. a lot of the code written for it is obsolete","msgtype":"m.text"},"ts":1184253960000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"http://php-html5lib.dashslot.net/svn/trunk works, though","msgtype":"m.text"},"ts":1184253961000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: interesting","msgtype":"m.text"},"ts":1184254020000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"also, what do you think of my implementation so far?","msgtype":"m.text"},"ts":1184254021000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"I've never had time to really look into it","msgtype":"m.text"},"ts":1184254022000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(due to school, and now trying to get as much of the spec review done as possible before going away in a week)","msgtype":"m.text"},"ts":1184254023000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"http://geoffers.no-ip.com/svn/php-html-5-direct contains the direct implementation","msgtype":"m.text"},"ts":1184254080000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1184254140000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"it's all very slow, though","msgtype":"m.text"},"ts":1184254141000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"so is my implementation at the moment :p","msgtype":"m.text"},"ts":1184254142000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"the direct one will be far slower, though","msgtype":"m.text"},"ts":1184254143000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"yeah, i'm sure","msgtype":"m.text"},"ts":1184254200000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"as the aim is to make absolutely no compromises from the spec","msgtype":"m.text"},"ts":1184254201000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"which is the case of the tokeniser means one character at a time","msgtype":"m.text"},"ts":1184254202000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"*means emitting","msgtype":"m.text"},"ts":1184254203000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"yeah, that's not a very optimal solution :p","msgtype":"m.text"},"ts":1184254204000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"but I guess I've only made three or four changes to the entire parsing algorithm compared to the spec","msgtype":"m.text"},"ts":1184254260000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"If you want to write a new tokeniser in some language, it could perhaps be helpful to build on my work - that has a direct representation of the spec algorithm, and generates C++ or JS code to execute it, and it ought to be fairly quick to do other languages in the same way","msgtype":"m.text"},"ts":1184254380000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(I need to add some kind of abstraction in the code-generating part - JS was only easy because it's almost entirely identical to C++ except for replacing 'bool' with 'var', and it takes a little bit more effort if you needs $s in front of variables)","msgtype":"m.text"},"ts":1184254500000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(but I'll at least try to create a Perl implementation too, to make sure it's sufficiently portable between languages)","msgtype":"m.text"},"ts":1184254501000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Jero: I may, however, try forking off the direct impl and work on optimising it (as that's far nicer than starting from scratch, as I can just rewrite one method at a time)","msgtype":"m.text"},"ts":1184255040000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"well, I followed the spec in everything (with three or four exceptions), so that's basically the same as forking off the direct implementation, don't you think?","msgtype":"m.text"},"ts":1184255280000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"Jero: yes","msgtype":"m.text"},"ts":1184255400000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Jero: it would be interesting to compare the two, though (and optimising it won't take overly long to do)","msgtype":"m.text"},"ts":1184255460000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"my impl still has a couple of bugs (though most of them are related I think)","msgtype":"m.text"},"ts":1184255520000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"and I'm a bit behind when it comes to the last 60 or so revisions","msgtype":"m.text"},"ts":1184255580000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"heh. any bugs in the direct impl are either PHP bugs or spec bugs","msgtype":"m.text"},"ts":1184255581000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"and I wouldn't allow any regressions when optimising it","msgtype":"m.text"},"ts":1184255640000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: you can contribute to the code if you want to in the future","msgtype":"m.text"},"ts":1184255700000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"Jero: I'll probably optimise the tokeniser and then see how the two compare, then decide what to do from there","msgtype":"m.text"},"ts":1184255701000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"the tokeniser of my implementation you mean?","msgtype":"m.text"},"ts":1184255760000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"the tokeniser of the direct implementation, then compare it to your tokeniser","msgtype":"m.text"},"ts":1184255820000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"that sounds like a good idea","msgtype":"m.text"},"ts":1184255821000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"I'll upload the code I have on my PC to the online version of my parser, so you can compare it to the latest and greatest","msgtype":"m.text"},"ts":1184255880000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"heh. it won't be for a while, though","msgtype":"m.text"},"ts":1184255881000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"the tokeniser isn't written in the direct impl yet","msgtype":"m.text"},"ts":1184255882000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"oh i see :p","msgtype":"m.text"},"ts":1184255940000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"(which I had actually implied earlier)","msgtype":"m.text"},"ts":1184255941000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"also, don't you think it'd be great to have the HTML5's parsing algorithm being used by the built-in DOMDocument->loadHTML() function in PHP?","msgtype":"m.text"},"ts":1184256060000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"ATM that function uses the libxml2 HTML parser","msgtype":"m.text"},"ts":1184256120000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"Jero: as if you're ever gonna persude the PHP devs to implement a draft standardâ€¦","msgtype":"m.text"},"ts":1184256121000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"don't worry, it was just an idea..","msgtype":"m.text"},"ts":1184256122000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"Jero: it took me many, many, many years to persuade them of a bug in strip_tags(), which they kept writing off as being invalid HTML (as the aim there is to use a basic parser that'll work with valid HTML) despite me citing specific parts of the specification that clearly said otherwise","msgtype":"m.text"},"ts":1184256180000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1184256300000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"I bet they didn't have a copy of the SGML spec, and were simply saying what they thought was right.","msgtype":"m.text"},"ts":1184256360000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(it's actually something that despite being part of the SGML spec is relevant)","msgtype":"m.text"},"ts":1184256361000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"what was the bug?","msgtype":"m.text"},"ts":1184256540000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"U+003E within quoted attribute values","msgtype":"m.text"},"ts":1184256600000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"it probably breaks if you mix single and double quotes, actually","msgtype":"m.text"},"ts":1184256601000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"e.g., <foo bar=\"this'> is parsed as a single |foo| element where @bar=this","msgtype":"m.text"},"ts":1184256602000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"so it closes the value of bar upon seeing the ' character?","msgtype":"m.text"},"ts":1184256720000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1184256721000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"that is indeed very weird","msgtype":"m.text"},"ts":1184256722000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"and what was their argument?","msgtype":"m.text"},"ts":1184256780000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"actually, that does work correctly","msgtype":"m.text"},"ts":1184256840000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"var_dump(strip_tags('<foo bar=\"this\\'>\">')); indeed produces string(0) \"\"","msgtype":"m.text"},"ts":1184256841000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Jero: for the > bug? that it was invalid HTML.","msgtype":"m.text"},"ts":1184256842000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Jero: for the latter? I only just thought of it","msgtype":"m.text"},"ts":1184256843000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"i see","msgtype":"m.text"},"ts":1184256900000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"the former is untrue, as it is completely valid","msgtype":"m.text"},"ts":1184256901000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"[^<&] off the top of my head","msgtype":"m.text"},"ts":1184256960000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1184257020000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"and they still haven't fixed it?","msgtype":"m.text"},"ts":1184257021000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"the former is fixed in 5.2.2, IIRC","msgtype":"m.text"},"ts":1184257022000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"only 5, though","msgtype":"m.text"},"ts":1184257080000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"the same patch would apply against 4.4 fine, but it's unfixed","msgtype":"m.text"},"ts":1184257081000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"that's stupid","msgtype":"m.text"},"ts":1184257140000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"typical of PHP development, though","msgtype":"m.text"},"ts":1184257200000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"that's too bad","msgtype":"m.text"},"ts":1184257260000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"<foo <bar=<bar> is syntactically valid in HTML5 now - only [\"&] (or ['&] or (\\s|&)) does anything","msgtype":"m.text"},"ts":1184257261000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"wonders how that will mess up strip_tags","msgtype":"m.emote"},"ts":1184257320000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Jero: http://cvs.php.net/viewvc.cgi/php-src/ext/standard/tests/strings/bug40432.phpt?revision=1.2&view=markup&pathrev=MAIN","msgtype":"m.text"},"ts":1184257321000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1184257322000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"I think I saw it fail in 5.2.3, actually","msgtype":"m.text"},"ts":1184257380000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Philip`: http://cvs.php.net/viewvc.cgi/php-src/ext/standard/string.c?view=markup â€” search for php_u_strip_tags","msgtype":"m.text"},"ts":1184257440000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Philip`: string(0) \"\" is PHP 5.2.3's output, though","msgtype":"m.text"},"ts":1184257441000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders, i'm off, if you ever need me regarding my HTML5 parser, email me at [censored :)]","msgtype":"m.text"},"ts":1184257740000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"Jero: I'll be around here if you ever want me","msgtype":"m.text"},"ts":1184257800000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"alrighty, bye","msgtype":"m.text"},"ts":1184257801000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"jgraham: do you really think that those tests would be that hard to get working in another language? the script I use to parse it is in the repos","msgtype":"m.text"},"ts":1184261160000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: I didn't want to copy the html5lib test cases format as it would mean I'd need the input data repeated multiple times for each algorithm","msgtype":"m.text"},"ts":1184261280000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: It would probably be useful to give more detail on the test format, like how it represents arrays and strings","msgtype":"m.text"},"ts":1184261640000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"or just use JSON since that already defines those things and everyone has JSON parsers already :-)","msgtype":"m.text"},"ts":1184261641000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"and have each test as an object with an array of results?","msgtype":"m.text"},"ts":1184261700000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Philip`: but yeah, the documentation was thrown together very quickly","msgtype":"m.text"},"ts":1184261940000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: I was thinking of something like [[\"Empty string\", \"\", false, false, false, null, \"\", []], ...], since that's about the same as what you have already but more JSONic, but maybe [\"Empty string\", \"\", { \"unsigned\":false, \"signed\":false, \"real\":false, ... }] would be more easily extensible","msgtype":"m.text"},"ts":1184262720000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: I was thinking {\"\":[false,false,false,null,null,[]]}","msgtype":"m.text"},"ts":1184262780000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"It'd be nice if JSON allowed you to keep comments","msgtype":"m.text"},"ts":1184262781000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: there are only headers for large groups of tests, so I don't feel that much about keeping them","msgtype":"m.text"},"ts":1184262840000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"What about XML? <numbertest><!-- Empty string --><input></input><outputs><output algorithm=\"unsigned\"><false/></output><output algorithm=\"integerlist\"><items/></output>...","msgtype":"m.text"},"ts":1184262960000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"that means defining data types and the like","msgtype":"m.text"},"ts":1184262961000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hmm, maybe the [false,false,...] one is easiest","msgtype":"m.text"},"ts":1184262962000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"In any case, it does seem probably easier to use JSON rather than a custom data format when you have arrays and non-ASCII strings, to avoid making every implementor implement another test parser","msgtype":"m.text"},"ts":1184263080000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"that's true","msgtype":"m.text"},"ts":1184263140000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"just lack of comments in JSON is annoying","msgtype":"m.text"},"ts":1184263141000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"around 15 minutes to be completely happy with a JSON version of the test suiteâ€¦ not overly slowâ€¦","msgtype":"m.text"},"ts":1184263200000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(JSON is also quite handy when you're running tests in web browsers)","msgtype":"m.text"},"ts":1184263201000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(It would've been easier if it were possible to get pretty printing of JSON in PHP)","msgtype":"m.text"},"ts":1184263260000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(as I just hacked my existing parser)","msgtype":"m.text"},"ts":1184263261000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: just looking at the PHPUnit compiled version of the tests?","msgtype":"m.text"},"ts":1184271240000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"is it defined anywhere what the implied DOM should be like when using createHTMLDocument()?","msgtype":"m.text"},"ts":1184275080000,"senderName":"virtuelv_","senderId":"virtuelv_@irc"},
{"content":{"body":"(iow: what should the DOM be like given var doc = document.implementation.createHTMLDocument(\"\");","msgtype":"m.text"},"ts":1184275140000,"senderName":"virtuelv_","senderId":"virtuelv_@irc"},
{"content":{"body":"doc.documentElement.innerHTML = \"<h1>What</h1>\";","msgtype":"m.text"},"ts":1184275141000,"senderName":"virtuelv_","senderId":"virtuelv_@irc"},
{"content":{"body":"alert(doc.documentElement.outerHTML);","msgtype":"m.text"},"ts":1184275142000,"senderName":"virtuelv_","senderId":"virtuelv_@irc"},
{"content":{"body":"what should be alerted?","msgtype":"m.text"},"ts":1184275200000,"senderName":"virtuelv_","senderId":"virtuelv_@irc"},
{"content":{"body":"gsnedders: Yeah, for some reason I looked at the PHP version","msgtype":"m.text"},"ts":1184275260000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: yeah. that'd be thy impossible to parse. there's now a JSON version of the tests in the repo as well, though","msgtype":"m.text"},"ts":1184275320000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(but that loses some data, like not distinguishing between ints and floats)","msgtype":"m.text"},"ts":1184275321000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Could you store floats as strings instead of numbers?","msgtype":"m.text"},"ts":1184275440000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"then parse the string?","msgtype":"m.text"},"ts":1184275500000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"hmmmâ€¦","msgtype":"m.text"},"ts":1184275501000,"senderName":"gsnedders","senderId":"gsnedders@irc"}
]