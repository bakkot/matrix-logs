[
{"content":{"body":"annevk: I think that's called a merge commit","msgtype":"m.text"},"ts":1490662255000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I don't use it often so I don't remember the commands but it seems pretty legit","msgtype":"m.text"},"ts":1490662273000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"tobie: yeah, that is kind of the plan; nobody should really care, so it's probably not worth making the distinction.","msgtype":"m.text"},"ts":1490662308000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I would really like bz to review but every time I ping him he's busy, so maybe we should go ahead and he can review post-facto if he finds anything... It would be good to un-block the SharedArrayBuffer work.","msgtype":"m.text"},"ts":1490662332000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"tantek: MikeSmith: do you have thoughts on https://github.com/whatwg/html/issues/2351 ?","msgtype":"m.text"},"ts":1490665406000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"well that's always a good sign, to be paired with MikeSmith","msgtype":"m.text"},"ts":1490665458000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"looks","msgtype":"m.emote"},"ts":1490665460000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"really we have no rel-canonical \"spec\" per se? I find that a bit, surprising. Let me look a bit.","msgtype":"m.text"},"ts":1490665512000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"\"This article is a stub\" ðŸ˜‚ðŸ˜‚ðŸ˜‚ http://microformats.org/wiki/rel-canonical","msgtype":"m.text"},"ts":1490665549000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"well we have a *stub* of a spec","msgtype":"m.text"},"ts":1490665561000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"seems like people though it was \"obvious\" enough to not need a spec?","msgtype":"m.text"},"ts":1490665574000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"(which of course isn't the best reasoning obv)","msgtype":"m.text"},"ts":1490665583000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"adding to issue","msgtype":"m.text"},"ts":1490665615000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1490665768000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Thanks for the heads-up Domenic","msgtype":"m.text"},"ts":1490665783000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":" hope the comments on the issue are helpful","msgtype":"m.text"},"ts":1490665862000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Domenic: do UAs do anything with rel=canonical?","msgtype":"m.text"},"ts":1490667112000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: not browser UAs I think, but lots of other UAs","msgtype":"m.text"},"ts":1490667131000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1490667160000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"well if we do this systematically maybe we could consider setting a usage threshold for what rel values we include in the spec","msgtype":"m.text"},"ts":1490667197000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I could add a use counter to the checker","msgtype":"m.text"},"ts":1490667209000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and Simon could do a query","msgtype":"m.text"},"ts":1490667220000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"maybe we could start with determining the usage #s for the *existing* values in the spec?","msgtype":"m.text"},"ts":1490667231000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"yeah that too","msgtype":"m.text"},"ts":1490667237000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"good point","msgtype":"m.text"},"ts":1490667240000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"to see if usage-based-inclusion makes sense at all?","msgtype":"m.text"},"ts":1490667246000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"(not saying it doesn't just saying we can check the \"control\" as it were ;) )","msgtype":"m.text"},"ts":1490667257000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"meanwhile I pinged kevinmarks to braindump his thoughts/knowledge of rel=canonical into the wiki page in spec-ese","msgtype":"m.text"},"ts":1490667283000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"(in the gh issue of course0","msgtype":"m.text"},"ts":1490667290000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":")","msgtype":"m.text"},"ts":1490667291000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"might as well start writing things up formally, whereever they end up","msgtype":"m.text"},"ts":1490667313000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"I guess I would expect the ones we already have in the spec to have relatively high usage, but that some values we donâ€™t yet have in the spec, like rel=canonical, might have even higher usage than some already in the spec","msgtype":"m.text"},"ts":1490667343000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah, plus I'd expect some in the spec to have low usage because they may have been more, um, aspirational as it were ;)","msgtype":"m.text"},"ts":1490667369000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"rel values in general have been falling out of vogue too - e.g. in #microformats and #indieweb we've largely switched over to using properties of objects, because rel values are nearly only useful for page-level-scope, and many things (like blog posts) can occur multiple times on a page","msgtype":"m.text"},"ts":1490667429000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"might as well document the ones that are in use though (published and consumed)","msgtype":"m.text"},"ts":1490667461000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"also would be good to get an updated survey since the 2004/2005 one that Hixie did","msgtype":"m.text"},"ts":1490667474000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"we're likely to have different results today than 12ish years ago","msgtype":"m.text"},"ts":1490667491000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Domenic: OK I just added a rel=canonical use counter to the W3C HTML checker","msgtype":"m.text"},"ts":1490670691000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"running results are at https://validator.w3.org/nu/stats.html","msgtype":"m.text"},"ts":1490670706000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"currently 170 documents out of 522 have rel=canonical","msgtype":"m.text"},"ts":1490670757000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"33%","msgtype":"m.text"},"ts":1490670770000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"which seems high but am pretty sure my code is right","msgtype":"m.text"},"ts":1490670789000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://github.com/validator/validator/commit/c8013ba526d639aab742020c7b71584f27a2bad2?diff=unified#diff-5c9743fbd69f36c7a9eb6a7a91bce31fR441","msgtype":"m.text"},"ts":1490670839000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the use counter only logs it once per document","msgtype":"m.text"},"ts":1490670855000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"still, 33% seems very high","msgtype":"m.text"},"ts":1490671865000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://cdn.rawgit.com/operasoftware/devopera-static-backup/869f534a/http/dev.opera.com/articles/view/mama-head-structure/index.html#link","msgtype":"m.text"},"ts":1490672168000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://cdn.rawgit.com/operasoftware/devopera-static-backup/869f534a/http/devfiles.myopera.com/articles/575/linkrellist-url.htm","msgtype":"m.text"},"ts":1490672180000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Domenic: a merge commit often seems to involve all of master and is therefore not super clear, but I could be missing something","msgtype":"m.text"},"ts":1490674134000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I've seen at least some cases where it creates a single commit like \"merged remote tracking branch origin/master\" which basically includes all changes to master since the base point. If the merge is not trivial then that commit also includes changes made to reconcile. Then when you diff the whole result (pr commits + merge commit) against the current","msgtype":"m.text"},"ts":1490674214000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"master, you see PR changes + changes made during the merge commit to reconcile with latest master","msgtype":"m.text"},"ts":1490674214000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess I have to see one again to remember why that isn't quite what I want","msgtype":"m.text"},"ts":1490680582000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Making rebasing work is usually a fairly trivial though easy to get wrong operation, but a merge commit doesn't really show it clearly as such","msgtype":"m.text"},"ts":1490680639000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: you want to add null/false/true?","msgtype":"m.text"},"ts":1490680759000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: not immediately; while in Tokyo focusing on streams + modules. But I can definitely take it in the next few weeks if you're not in a rush.","msgtype":"m.text"},"ts":1490680800000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"What does servo use for xml?","msgtype":"m.text"},"ts":1490680824000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: html5ever I think","msgtype":"m.text"},"ts":1490680835000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So no XML?","msgtype":"m.text"},"ts":1490680841000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: \"XML5\", it's part of the same package","msgtype":"m.text"},"ts":1490680878000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: reuses a bunch of logic","msgtype":"m.text"},"ts":1490680888000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah OK","msgtype":"m.text"},"ts":1490680977000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Unfortunately WebKit doesn't seem interested in refactoring that code","msgtype":"m.text"},"ts":1490680979000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think Gecko would eventually replace its XML parser with something better","msgtype":"m.text"},"ts":1490680993000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well we're not fans of libxml over in Blink either, /cc dominicc","msgtype":"m.text"},"ts":1490681004000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If everyone did we'd have our HTML parser escape","msgtype":"m.text"},"ts":1490681008000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Constant security bugs","msgtype":"m.text"},"ts":1490681011000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So thinking about replacements","msgtype":"m.text"},"ts":1490681020000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"XML would end up winning after all, with a slight \"HTML5\" touch to remove its worst aspects","msgtype":"m.text"},"ts":1490681042000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"cc nox","msgtype":"m.text"},"ts":1490681043000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It seems like there are several possibilities though https://crates.io/search?q=xml","msgtype":"m.text"},"ts":1490681085000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hmm I'm not sure things like omitting <!DOCTYPE> entity substitution is web compatible","msgtype":"m.text"},"ts":1490681231000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: XML5 handles that","msgtype":"m.text"},"ts":1490681261000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"At least the version I wrote originally","msgtype":"m.text"},"ts":1490681270000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Interesting, xml-rs does not","msgtype":"m.text"},"ts":1490681272000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh, xml-rs seems like something else","msgtype":"m.text"},"ts":1490681289000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't think Servo uses that","msgtype":"m.text"},"ts":1490681310000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, it's the most popular when searching for \"xml\"","msgtype":"m.text"},"ts":1490681383000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: We use xml5ever.","msgtype":"m.text"},"ts":1490684915000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic: XML and Rust don't quite fit together for now.","msgtype":"m.text"},"ts":1490684945000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic: adding noncharacter to Infra seems fine, but note that it's only used for conformance requirements","msgtype":"m.text"},"ts":1490686548000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1490686555000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"seems fine I guess","msgtype":"m.text"},"ts":1490686563000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: what platform feature is driving writable streams?","msgtype":"m.text"},"ts":1490688137000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: mostly transform streams :)","msgtype":"m.text"},"ts":1490688145000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: and those are driven by text encoding/decoding?","msgtype":"m.text"},"ts":1490688167000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: catching up on extended attributes for types, my only concern is the lack of clarity as to whether the annotated types are types of their own or not.","msgtype":"m.text"},"ts":1490688169000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: text is the easy case, but we have lots more lined up; gzip and media off the top of my head","msgtype":"m.text"},"ts":1490688189000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"tobie: hmm I think I made it pretty clear they are?","msgtype":"m.text"},"ts":1490688203000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: ta","msgtype":"m.text"},"ts":1490688210000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: also https://streams.spec.whatwg.org/#example-pipe-as-chunks-receiver","msgtype":"m.text"},"ts":1490688220000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: OK, I thought so, but then doesn't that affect the overload resolution algorithm?","msgtype":"m.text"},"ts":1490688233000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: hmmm I guess I didn't consider that fully; I should check.","msgtype":"m.text"},"ts":1490688249000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I think the right thing to do would be to have something similar to inner types for nullables","msgtype":"m.text"},"ts":1490688282000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: agreed","msgtype":"m.text"},"ts":1490688290000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"nullable is the right model here","msgtype":"m.text"},"ts":1490688314000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: and then just grab those in the overload resolution algorithm","msgtype":"m.text"},"ts":1490688318000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: well, except the relation is a one to many here, not a one to one.","msgtype":"m.text"},"ts":1490688349000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: plus you can have an annotated type which is also nullable, no?","msgtype":"m.text"},"ts":1490688375000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"yeah, there's a general \"inner type\" concept hiding I guess","msgtype":"m.text"},"ts":1490688422000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"? suffix is just shorthand for [Nullable] prefix in this framework, at least conceptually. Probably not worth actually doing that though.","msgtype":"m.text"},"ts":1490688447000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: oh!","msgtype":"m.text"},"ts":1490688460000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: that seems like the right model.","msgtype":"m.text"},"ts":1490688587000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: it also looks like quite a lot of work to rework. :-/","msgtype":"m.text"},"ts":1490688631000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: I think you'll need to figure out the relationship with inner type either way, though.","msgtype":"m.text"},"ts":1490688683000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: Alright, I'll finish my review and send it over.","msgtype":"m.text"},"ts":1490688711000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: I'm pretty confident given the various threads on this topic that we can land this once we fix this last thing","msgtype":"m.text"},"ts":1490688769000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: and bz can file against the spec if he bumps on issues down the road","msgtype":"m.text"},"ts":1490688798000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: sounds great, thanks so much for looking into it","msgtype":"m.text"},"ts":1490688888000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I should have done that a ling time ago. Apologies for not looking into it before. It looked sort of daunting tbh.","msgtype":"m.text"},"ts":1490688941000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"zcorpan: wonder if you could please run a query for rel=canonical usage","msgtype":"m.text"},"ts":1490688978000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"If we get [Nullable] we might be able to start using [Undefinedable] too if there's still appetite for that","msgtype":"m.text"},"ts":1490691743000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Although I guess we could already if we just had an undefined value","msgtype":"m.text"},"ts":1490691773000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: why is ? not short for \" or null\"?","msgtype":"m.text"},"ts":1490691782000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it is but \"or null\" can be modeled in terms of [Nullable] applied to the type i.e. it creates a new type","msgtype":"m.text"},"ts":1490691814000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: alright, pushed the review.","msgtype":"m.text"},"ts":1490692193000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Good review :). It's getting late in Tokyo so I'll work on it tomorrow.","msgtype":"m.text"},"ts":1490692265000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: oh, that's where you are. Enjoy!","msgtype":"m.text"},"ts":1490692538000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"MikeSmith: yeah i'll do that now","msgtype":"m.text"},"ts":1490696453000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"MikeSmith: only on <link>?","msgtype":"m.text"},"ts":1490696485000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"MikeSmith: 278679 matches","msgtype":"m.text"},"ts":1490696913000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"what spec defines how e.g. <xsl:import> loads resources in a browser?","msgtype":"m.text"},"ts":1490697797000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"jochen__: none does","msgtype":"m.text"},"ts":1490697938000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"perfect :/","msgtype":"m.text"},"ts":1490700205000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"annevk: is there any discussion towards this \"html modules\" proposal here: https://github.com/dglazkov/webcomponents/blob/html-modules/proposals/HTML-Imports-and-ES-Modules.md","msgtype":"m.text"},"ts":1490700344000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"basically building a system similar to html imports on es module loader infrastructure","msgtype":"m.text"},"ts":1490700362000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: there was a discussion at TPAC, most folks expressed a desire for ES modules to get some adoption first before looking into it further","msgtype":"m.text"},"ts":1490700405000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok, thanks","msgtype":"m.text"},"ts":1490700426000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: note that it's unclear to me at this point that the Loader idea is going to make it, it might be that service workers is sufficient","msgtype":"m.text"},"ts":1490700441000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: service workers is a replacement for html imports use case?","msgtype":"m.text"},"ts":1490700471000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"(assuming you were referring to that, and not JS module loading in general)","msgtype":"m.text"},"ts":1490700471000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: just for the hooks defined by Loader","msgtype":"m.text"},"ts":1490700492000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://whatwg.github.io/loader/","msgtype":"m.text"},"ts":1490700512000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the idea being that a service worker could synthesize the document with the stuff already in it?","msgtype":"m.text"},"ts":1490700538000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: annevk: kochi is interested in working on HTML modules","msgtype":"m.text"},"ts":1490700542000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wanderview: I didn't mean to suggest service workers as a replacement for HTML modules, just for the hooks defined by Loader","msgtype":"m.text"},"ts":1490700573000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: thanks","msgtype":"m.text"},"ts":1490701044000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: 278679 matches out of what total?","msgtype":"m.text"},"ts":1490701050000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: 17,103,665 resoures from 481,455 sites","msgtype":"m.text"},"ts":1490701134000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"MikeSmith: i guess you need to filter the results by unique `page` (or group by page) if you want to know the number of sites","msgtype":"m.text"},"ts":1490701215000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1490701572000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"is there any <link> or <meta> tags that accepts content?","msgtype":"m.text"},"ts":1490702304000,"senderName":"felixjet","senderId":"felixjet@irc"},
{"content":{"body":"like: <link>content</link>","msgtype":"m.text"},"ts":1490702311000,"senderName":"felixjet","senderId":"felixjet@irc"},
{"content":{"body":"<a>","msgtype":"m.text"},"ts":1490702369000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I wonder where n1tm, our Gecko dialog implementer, went :(","msgtype":"m.text"},"ts":1490702883000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"gsnedders: \\o/","msgtype":"m.text"},"ts":1490733151000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Domenic: maybe we should merge the logical props dialog change and tests without their sanity check","msgtype":"m.text"},"ts":1490734104000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"tobie: Why are you and Yehuda suddenly so interested in that BlinkOn thread of mine?","msgtype":"m.text"},"ts":1490734567000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"dunno. just saw it now.","msgtype":"m.text"},"ts":1490734712000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: thought it was current","msgtype":"m.text"},"ts":1490734730000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Ah, kk.","msgtype":"m.text"},"ts":1490734763000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]