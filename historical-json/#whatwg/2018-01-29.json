[
{"content":{"body":"Hm, how do I indicate in WebIDL that a method can return undefined?","msgtype":"m.text"},"ts":1517189127000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ah, looks like \"void\" works, like (void or FooType)?","msgtype":"m.text"},"ts":1517189339000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"No, that doesn't work, hrm.  I'm trying to replicate the behavior of Map.get().","msgtype":"m.text"},"ts":1517189459000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"isn't it just FooType?","msgtype":"m.text"},"ts":1517190465000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"with the question mark that is","msgtype":"m.text"},"ts":1517190474000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"KiChjang: No, that allows null, which is a very different value. ^_^","msgtype":"m.text"},"ts":1517190639000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ugh","msgtype":"m.text"},"ts":1517190661000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"Yeah, per https://github.com/heycam/webidl/issues/60 the only way to do it currently is to write the type as `any`. ;_;","msgtype":"m.text"},"ts":1517190695000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(So I've done that, followed by a comment that it's really `(undefined or CSSStyleValue)`.)","msgtype":"m.text"},"ts":1517190722000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Another webidl question: I have an interface, [Exposed] to globals A and B. The interface is maplike, and I override the definition of one of the maplike methods, but only mark it as [Exposed=A]. Does this mean that B sees the interface with the *default* version of the method, or does it not see the method at all?","msgtype":"m.text"},"ts":1517196765000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"tobie, domenic, annevk : ^^^","msgtype":"m.text"},"ts":1517196773000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I was under the impression that you could not override a maplike's map methods","msgtype":"m.text"},"ts":1517198298000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"Maplike interfaces must not have any interface members named \"entries\", \"forEach\", \"get\", \"has\", \"keys\", \"size\", or \"values\", or have any inherited interfaces that have members with these names. Read–write maplike interfaces must not have any attributes or constants named \"clear\", \"delete\", or \"set\", or have any inherited interfaces that have attributes or constants with these names.\"","msgtype":"m.text"},"ts":1517198316000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I see, but read/write can override clear/delete/set","msgtype":"m.text"},"ts":1517198342000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Per the letter of the spec it appears your exposed is completely ignored https://heycam.github.io/webidl/#es-map-clear","msgtype":"m.text"},"ts":1517198407000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Well, no, I maybe am misinterpreting...","msgtype":"m.text"},"ts":1517198434000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So you declare something with (e.g.) a clear identifier","msgtype":"m.text"},"ts":1517198442000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So the default does not get installed","msgtype":"m.text"},"ts":1517198446000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But then nothing else gets installed","msgtype":"m.text"},"ts":1517198451000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So I guess the method doesn't exist?","msgtype":"m.text"},"ts":1517198455000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"This is going to need serious tests though","msgtype":"m.text"},"ts":1517198458000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh, hmmmm, I need to get IDL fixed to allow overriding of get().  (Because I'm implementing a multimap, so the map entries are string->list<Foo>, but .get() needs to return a single Foo.)","msgtype":"m.text"},"ts":1517198609000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Or we just need to put multimaps into IDL.)","msgtype":"m.text"},"ts":1517198668000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I think you just want to not use maplike, like the other 2-3 multimaps in the platform","msgtype":"m.text"},"ts":1517199310000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I found URLSearchParams, is there another?","msgtype":"m.text"},"ts":1517199741000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And it would be sad to lose maplike; StylePropertyMap is *more* map-like than URLSearchParams, even.  (The underlying representation of SPM is a map of key->list<val>, while the underlying repr of USP is list<key->val>.)","msgtype":"m.text"},"ts":1517199793000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"map<key, list<val>> vs list<(key,val)>, rather.","msgtype":"m.text"},"ts":1517199857000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"In any case, we should *at minimum* enshrine multimap as an example in WebIDL, to make sure that we don't diverge definitions - StylePropertyMap is currently making set() and append() n-ary, while URLSearchParams doesn't.","msgtype":"m.text"},"ts":1517199900000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(I opened an IDL issue for this, https://github.com/heycam/webidl/issues/514)","msgtype":"m.text"},"ts":1517199916000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yes, it would be good to match URLSearchParams and FormData, and e.g. not make those n-ary","msgtype":"m.text"},"ts":1517200955000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"set() should override entirely","msgtype":"m.text"},"ts":1517200964000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"set() *does* override entirely, but it lets you set multiple values in one (rather than having to call .set(), then .append() several times).","msgtype":"m.text"},"ts":1517201583000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(It also moves the value to the end of the map, which URLSearchParams does *not* do.)","msgtype":"m.text"},"ts":1517201603000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(For the list<(key,val)> semantics, setting in-place does often make more sense, and if you're setting in place, it makes less sense to also append additional values. But for map<key, list<val>> semantics, setting multiple at once makes complete sense.)","msgtype":"m.text"},"ts":1517201914000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Headers is roughly key,list-val but still uses the same pattern","msgtype":"m.text"},"ts":1517204569000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Although, maybe that’s not entirely true; it’s pretty special","msgtype":"m.text"},"ts":1517204617000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Where did this gem originate from? https://twitter.com/antimattur/status/957912859127762945","msgtype":"m.text"},"ts":1517219384000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: are you around?","msgtype":"m.text"},"ts":1517245746000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"hmm, nm","msgtype":"m.text"},"ts":1517245935000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: it came from https://twitter.com/mattur/status/957976107499905027","msgtype":"m.text"},"ts":1517251597000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hi","msgtype":"m.text"},"ts":1517251621000,"senderName":"guest271314","senderId":"guest271314@irc"},
{"content":{"body":"Relevant to https://github.com/whatwg/fetch/issues/665, what is the purpose of passing a MIME type to toDataURL()?","msgtype":"m.text"},"ts":1517251858000,"senderName":"guest271314","senderId":"guest271314@irc"},
{"content":{"body":"https://github.com/whatwg/fetch/issues/665#issuecomment-361333540","msgtype":"m.text"},"ts":1517252030000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"A data URL contains a MIME type, e.g. data:text/html,hello","msgtype":"m.text"},"ts":1517252082000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Does the toDataURL() concept ignore the validity of the MIME type as to the actual type of the input file?","msgtype":"m.text"},"ts":1517252617000,"senderName":"guest271314","senderId":"guest271314@irc"},
{"content":{"body":"Is the validity of the data URL output not a concern of this particular processor, that is toDataURL()?","msgtype":"m.text"},"ts":1517252679000,"senderName":"guest271314","senderId":"guest271314@irc"},
{"content":{"body":"guest271314: Fetch is not defining the whole operation","msgtype":"m.text"},"ts":1517254474000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That does not answer the questions","msgtype":"m.text"},"ts":1517254500000,"senderName":"guest271314","senderId":"guest271314@irc"},
{"content":{"body":"guest271314: it would how to generate a data: URL string, that’s it","msgtype":"m.text"},"ts":1517254512000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"guest271314: the HTML spec would produce the relevant bits for the given MIME type","msgtype":"m.text"},"ts":1517254550000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: yeah, saw that; I don’t really understand what’s going on","msgtype":"m.text"},"ts":1517254640000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"What section of the HTML spec gets the MIME type of the file? If that is the case what is the purpose of passing a MIME type argument to toDataURL()? Or, am possibly misinterpreting the concept, here? That is, the HTML spec does get and set the MIME type internally, the user does not pass a MIME type as argument to the function; the function is not exposed to users at large?","msgtype":"m.text"},"ts":1517254744000,"senderName":"guest271314","senderId":"guest271314@irc"},
{"content":{"body":"The function is not exposed, no","msgtype":"m.text"},"ts":1517254806000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The MIME type generator that is","msgtype":"m.text"},"ts":1517254828000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"data: URL generator*","msgtype":"m.text"},"ts":1517254843000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"@annevk Where is the algorithm to get the MIME type from the input?","msgtype":"m.text"},"ts":1517255511000,"senderName":"guest271314","senderId":"guest271314@irc"},
{"content":{"body":"There is no such thing?","msgtype":"m.text"},"ts":1517255577000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Is that what https://github.com/whatwg/fetch/issues/665 is intended to achieve?","msgtype":"m.text"},"ts":1517255651000,"senderName":"guest271314","senderId":"guest271314@irc"},
{"content":{"body":"No","msgtype":"m.text"},"ts":1517255719000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Then what is the purpose and intended outcome of that issue?","msgtype":"m.text"},"ts":1517255788000,"senderName":"guest271314","senderId":"guest271314@irc"},
{"content":{"body":"It’s an algorithm to create a data: URL","msgtype":"m.text"},"ts":1517255802000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Having that more clearly defined is the goal","msgtype":"m.text"},"ts":1517255848000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ok. Although a MIME type is not required for a valid data URL the issue at some point will address the topic of getting the MIME from the input, yes?","msgtype":"m.text"},"ts":1517255953000,"senderName":"guest271314","senderId":"guest271314@irc"},
{"content":{"body":"No","msgtype":"m.text"},"ts":1517256074000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"There is no such thing","msgtype":"m.text"},"ts":1517256089000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"There is elsewhere in the platform, but not applicable here","msgtype":"m.text"},"ts":1517256114000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"What is applicable here?","msgtype":"m.text"},"ts":1517256129000,"senderName":"guest271314","senderId":"guest271314@irc"},
{"content":{"body":"This only takes a MIME type so it can be in the generated data: URL","msgtype":"m.text"},"ts":1517256154000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It’s basically passed through as-is","msgtype":"m.text"},"ts":1517256174000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Why omit validating that the MIME type matches the actual file type? Does that validation occur somewhere else in the procedure? Or, are developers on their own?","msgtype":"m.text"},"ts":1517256230000,"senderName":"guest271314","senderId":"guest271314@irc"},
{"content":{"body":"I’m gonna call it a day. Hopefully it’s clearer when the PR is written at some point","msgtype":"m.text"},"ts":1517256266000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Hope is meaningless. Though you have tried and am certain the contributors to the PR will perform due diligence. Cheers","msgtype":"m.text"},"ts":1517256525000,"senderName":"guest271314","senderId":"guest271314@irc"},
{"content":{"body":"wanderview: on leave this week, but I can take a sneaky look at stuff from my phone","msgtype":"m.text"},"ts":1517266749000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: No, bad Jake. Be on vacation! ;-)","msgtype":"m.text"},"ts":1517267086000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: haha I've let my laptop run out of battery as a way to enforce holiday","msgtype":"m.text"},"ts":1517267306000,"senderName":"JakeA","senderId":"JakeA@irc"}
]