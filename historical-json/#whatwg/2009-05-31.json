[
{"content":{"body":"document.all seems to be a pretty normal collection, with all the elements in it; calling it is the same as dereferencing it","msgtype":"m.text"},"ts":1243734420000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and in IE all collections seem to have .tags() method that returns a filtered collection with just the members of that tag name","msgtype":"m.text"},"ts":1243734421000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"after lowercasing","msgtype":"m.text"},"ts":1243734480000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, here now","msgtype":"m.text"},"ts":1243734720000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: any chance we can get magic in WebIDL that defines document.all's wacko behavior? :-)","msgtype":"m.text"},"ts":1243734780000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i may have asked this before","msgtype":"m.text"},"ts":1243734781000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"interesting, IE8's namedItem() method broke compatibility with earlier versions","msgtype":"m.text"},"ts":1243734782000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i wonder if they did that because of trying to be compatible with the specs or something","msgtype":"m.text"},"ts":1243734840000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what's the wacko behaviour?","msgtype":"m.text"},"ts":1243734841000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"if (document.all) { throw 0; } doesn't throw","msgtype":"m.text"},"ts":1243735020000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"in non-IE browsers only, right?","msgtype":"m.text"},"ts":1243735021000,"senderName":"gavin_","senderId":"gavin_@irc"},
{"content":{"body":"typeof document.all === undefined","msgtype":"m.text"},"ts":1243735080000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Mozilla had to make it \"undetectable\" when we implemented it, because sites used that to check for IE","msgtype":"m.text"},"ts":1243735081000,"senderName":"gavin_","senderId":"gavin_@irc"},
{"content":{"body":"document.all.toString() is something like \"[object HTMLCollection]\"","msgtype":"m.text"},"ts":1243735082000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(will probably be [object HTMLAllCollection] in HTML5)","msgtype":"m.text"},"ts":1243735083000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"document.all instanceof HTMLCollection === false","msgtype":"m.text"},"ts":1243735140000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"such wackoness seems like it shouldn't be in webidl","msgtype":"m.text"},"ts":1243735141000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"document.all.length == document.getElementsByTagName('*').length","msgtype":"m.text"},"ts":1243735142000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the object returned by document.all is callable and needs WebIDL's property indexing stuff","msgtype":"m.text"},"ts":1243735200000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ok so that bit should be supported already","msgtype":"m.text"},"ts":1243735201000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"the main reason i was hoping you'd be ok with adding that to webidl is i have no idea what i should be saying in html5 :-)","msgtype":"m.text"},"ts":1243735202000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"aha :)","msgtype":"m.text"},"ts":1243735203000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"there's no way in ecma-262 to legally have an object that is \"undetectable\" like that","msgtype":"m.text"},"ts":1243735260000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"yeah well we already violate e262 for one thing, what's one more!","msgtype":"m.text"},"ts":1243735320000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i don't though, my hands are clean thus far =)","msgtype":"m.text"},"ts":1243735321000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"hah","msgtype":"m.text"},"ts":1243735380000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"do people really do   if (document.all instanceof HTMLCollection)  to test for IE?","msgtype":"m.text"},"ts":1243735440000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1243735441000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"they probably do do typeof","msgtype":"m.text"},"ts":1243735500000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but most just do if (document.all)","msgtype":"m.text"},"ts":1243735501000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so that would probably be enough","msgtype":"m.text"},"ts":1243735502000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so why the need for that wacko requirement?","msgtype":"m.text"},"ts":1243735503000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"trying to be as close as possible to existing implementations","msgtype":"m.text"},"ts":1243735560000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"just wonder if it's really necessary","msgtype":"m.text"},"ts":1243735620000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"anyway","msgtype":"m.text"},"ts":1243735680000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"i'm not sure what the best way is to describe the \"undetectable\" requirements is","msgtype":"m.text"},"ts":1243735681000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"requirements on how certain productions from the ecmascript grammar are evaluated maybe?","msgtype":"m.text"},"ts":1243735740000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"goes out for some shopping","msgtype":"m.emote"},"ts":1243735800000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: i have bad news. It looks like document.all is not the only feature that uses this in webkit -- style.filter does too :-)","msgtype":"m.text"},"ts":1243738740000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah, it's something ghastly where it converts to a boolean false","msgtype":"m.text"},"ts":1243738800000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"dunno why it's necessary, gecko doesn't have the same to not trigger MS filter-property detection tests","msgtype":"m.text"},"ts":1243738801000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"or at least it doesn't as far as I know","msgtype":"m.text"},"ts":1243738802000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"gecko doesn't have style.filter at all does it?","msgtype":"m.text"},"ts":1243738803000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"via SVG maybe?","msgtype":"m.text"},"ts":1243738860000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"isn't sure","msgtype":"m.emote"},"ts":1243738861000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"document.body.filter is undefined in gecko","msgtype":"m.text"},"ts":1243738862000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1243738863000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"document.body.style.filter is undefined in gecko","msgtype":"m.text"},"ts":1243738864000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1243738865000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"i really think we should number the design principles instead of naming them","msgtype":"m.text"},"ts":1243742820000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"people are only reading their names","msgtype":"m.text"},"ts":1243742821000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Anyone around to answer a question about fragment processing? ","msgtype":"m.text"},"ts":1243753380000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"fragment processing?","msgtype":"m.text"},"ts":1243753440000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Parsing html fragments ","msgtype":"m.text"},"ts":1243753441000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"Although... it looks like I just fixed it :-) ","msgtype":"m.text"},"ts":1243753442000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"Perhaps \"and set node to the context  element.\" is a little ambiguous (step 3 of reset insertion mode algorithm) ","msgtype":"m.text"},"ts":1243753500000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"looks","msgtype":"m.emote"},"ts":1243753680000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"The algorithm works if I replace the actual entry in the stack of open elements ","msgtype":"m.text"},"ts":1243753681000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"i don't understand why it's ambiguous or why you would mutate the stack","msgtype":"m.text"},"ts":1243753740000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ah. Then I've implemented it wrong ","msgtype":"m.text"},"ts":1243753800000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"how do you interpret it?","msgtype":"m.text"},"ts":1243753801000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Oh, I see where I've gone wrong. I'm assuming things actually get inserted into the context element. ","msgtype":"m.text"},"ts":1243753860000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"User error! Boink ","msgtype":"m.text"},"ts":1243753861000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"the reset the insertion mode thing does nothing but reset the insertion mode :-)","msgtype":"m.text"},"ts":1243753862000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yep ","msgtype":"m.text"},"ts":1243753920000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"I always forget if the \"last\" node on a stack is the most recently added one or the oldest one ","msgtype":"m.text"},"ts":1243754040000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"you'd think it would be the most recent one","msgtype":"m.text"},"ts":1243754100000,"senderName":"hobo","senderId":"hobo@irc"},
{"content":{"body":"as you add them it increases the stack so the last one would be the most recently added","msgtype":"m.text"},"ts":1243754101000,"senderName":"hobo","senderId":"hobo@irc"},
{"content":{"body":"For step three, \"If node is the first node in the stack of open elements, then set last to true and set node to the context  element.\", do I set node to the context element if there is no context element? ","msgtype":"m.text"},"ts":1243754160000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"yeah i apologise for the mess around the stack","msgtype":"m.text"},"ts":1243754161000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ezyang: how can there be no context element?","msgtype":"m.text"},"ts":1243754162000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Umm, when I'm not parsing a fragment? ","msgtype":"m.text"},"ts":1243754220000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"when you're not passing a fragment, /node/ will never be the first node in the stack","msgtype":"m.text"},"ts":1243754280000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"OK. ","msgtype":"m.text"},"ts":1243754281000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"so you can assert(context is not null) in that condition, if you like -- you should never hit it unless you or the spec has a bug","msgtype":"m.text"},"ts":1243754282000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Looking at \"reset insertion mode\" more closely, I can see that would be the case. ","msgtype":"m.text"},"ts":1243754340000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"FIFTEEN! ","msgtype":"m.text"},"ts":1243754580000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"(failures) ","msgtype":"m.text"},"ts":1243754581000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"heycam: yt?","msgtype":"m.text"},"ts":1243754640000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ugh. Now I need to incorporate a list of doctypes in the library ","msgtype":"m.text"},"ts":1243755060000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"Are there any tests in the test-suite for quirks mode specific behavior? ","msgtype":"m.text"},"ts":1243759560000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"Also, I'm pretty sure this is a bogus test: <!doctype html></html> <head> ","msgtype":"m.text"},"ts":1243759740000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"since </html> puts the mode to \"After After Body\", then the whitespace gets handled as if it was \"In Body\" and should get placed in <body> ","msgtype":"m.text"},"ts":1243759800000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"</html> doesn't do anything before head iirc","msgtype":"m.text"},"ts":1243759980000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"before head\" causes </html> to be reprocessed as if an implicit <head> tag was seen ","msgtype":"m.text"},"ts":1243760100000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"Which further reprocesses as if an end </head> was seen ","msgtype":"m.text"},"ts":1243760101000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"and so forth ","msgtype":"m.text"},"ts":1243760102000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"really? i thought we changed that","msgtype":"m.text"},"ts":1243760160000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Oh I see, we're in \"before html\", not \"before head\" ","msgtype":"m.text"},"ts":1243760161000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"huh go figure, i am wrong","msgtype":"m.text"},"ts":1243760162000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh well","msgtype":"m.text"},"ts":1243760163000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ehh, the behavior is the same ","msgtype":"m.text"},"ts":1243760220000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"Yeah. ","msgtype":"m.text"},"ts":1243760221000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"So what's supposed to happen? ","msgtype":"m.text"},"ts":1243760222000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"what the spec says is what the rule is at the moment","msgtype":"m.text"},"ts":1243760223000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"no idea if it'll change","msgtype":"m.text"},"ts":1243760224000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ok. I guess I should hg blame the relevant test-case and yell at hsivonen if it's one of his nudge nudge things (more realistically, stick the test-case in test99) ","msgtype":"m.text"},"ts":1243760280000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"Ick. hg blame doesn't show deletions. So I *can't* find out ","msgtype":"m.text"},"ts":1243760400000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"Someone must have changed it to not result in whitespace at some point, though, so it will get punted to 99 ","msgtype":"m.text"},"ts":1243760460000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"Wow. Most of these are bogus ","msgtype":"m.text"},"ts":1243760700000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"Ok. The spec needs to be changed to handle <html></html><!-- comment --> ","msgtype":"m.text"},"ts":1243760760000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"send mail or file a bug if you need changes","msgtype":"m.text"},"ts":1243761000000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(i can't track irc comments so otherwise i'll just forget)","msgtype":"m.text"},"ts":1243761060000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ok. ","msgtype":"m.text"},"ts":1243761120000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"It's also kind of debatable whether or not these changes are correct or not ","msgtype":"m.text"},"ts":1243761180000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"it basically boils down to \"are there pages that break if we do it the other way\"","msgtype":"m.text"},"ts":1243761480000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Since <title> isn't going into <head>, probably. ","msgtype":"m.text"},"ts":1243761481000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"For <a><div><p></a>, is the div supposed to be a child of <a>? ","msgtype":"m.text"},"ts":1243762140000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"Oh, it's a foster parented case. ","msgtype":"m.text"},"ts":1243762260000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"Hixie, you were after me before?","msgtype":"m.text"},"ts":1243763220000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"PHP implementation of html5lib has ~100% coverage (there is one error where we can't actually express a doctype with no qualified name with libxml, but whatever) ","msgtype":"m.text"},"ts":1243764480000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"Time to sleep ","msgtype":"m.text"},"ts":1243764540000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"heycam, style.filter is the same as document.all due to the SVG WG not renaming it to avoid conflicts with IE","msgtype":"m.text"},"ts":1243771560000,"senderName":"annevk42","senderId":"annevk42@irc"},
{"content":{"body":"well, WebKit does style.filter that way","msgtype":"m.text"},"ts":1243771980000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"though it's even weirder, since the return is normally a string","msgtype":"m.text"},"ts":1243771981000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"we have to make it a special string-like thing that masquerades as undefined","msgtype":"m.text"},"ts":1243772040000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"dunno what other browsers do","msgtype":"m.text"},"ts":1243772041000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I think we do something else but it is causing issues","msgtype":"m.text"},"ts":1243772820000,"senderName":"annevk42","senderId":"annevk42@irc"},
{"content":{"body":"is saved by semicolon insertion","msgtype":"m.emote"},"ts":1243773660000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"For some inexplicable reason I was accidentally printing a date in the middle of a <script> generated by some code, so there was a spurious line saying \"2009-05-31\"","msgtype":"m.text"},"ts":1243773720000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"and it must have been interpreted as a statement computing 1973 with an implicit semicolon at the end, so it didn't cause a syntax error","msgtype":"m.text"},"ts":1243773780000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"and it's been like that for about six months","msgtype":"m.text"},"ts":1243773781000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"So, hmm…","msgtype":"m.text"},"ts":1243777800000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"realizes what he was going to ask","msgtype":"m.emote"},"ts":1243777860000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"hi all -- am working with the canvas element in the firefox 3.5 beta -- is this an appropriate place to ask questions about the behaviour of the API?","msgtype":"m.text"},"ts":1243777980000,"senderName":"thomaslee","senderId":"thomaslee@irc"},
{"content":{"body":"thomaslee: Yes.","msgtype":"m.text"},"ts":1243778580000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1243778581000,"senderName":"thomaslee","senderId":"thomaslee@irc"},
{"content":{"body":"can't actually answer any questions on the canvas API himself, but can say that this is the right place to ask :P","msgtype":"m.emote"},"ts":1243778582000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"haha great :)","msgtype":"m.text"},"ts":1243778640000,"senderName":"thomaslee","senderId":"thomaslee@irc"},
{"content":{"body":"that's fine","msgtype":"m.text"},"ts":1243778641000,"senderName":"thomaslee","senderId":"thomaslee@irc"},
{"content":{"body":"question is:","msgtype":"m.text"},"ts":1243778642000,"senderName":"thomaslee","senderId":"thomaslee@irc"},
{"content":{"body":"ctx.moveTo(canvas.width, 0); ctx.lineTo(canvas.width, canvas.height);","msgtype":"m.text"},"ts":1243778643000,"senderName":"thomaslee","senderId":"thomaslee@irc"},
{"content":{"body":"once you ctx.stroke(), firefox's implementation of canvas, only draws half of the line -- the other half presumably \"off-canvas\".","msgtype":"m.text"},"ts":1243778760000,"senderName":"thomaslee","senderId":"thomaslee@irc"},
{"content":{"body":"oops, trigger happy with the commas","msgtype":"m.text"},"ts":1243778761000,"senderName":"thomaslee","senderId":"thomaslee@irc"},
{"content":{"body":"grumbles about ezyang having made php html5lib really slow","msgtype":"m.emote"},"ts":1243778762000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"anyway, the question is -- is this expected behaviour?","msgtype":"m.text"},"ts":1243778763000,"senderName":"thomaslee","senderId":"thomaslee@irc"},
{"content":{"body":"I think so","msgtype":"m.text"},"ts":1243778820000,"senderName":"annevk42","senderId":"annevk42@irc"},
{"content":{"body":"the other thing that's confusing me is for a lineWidth = 1.0, I'm seeing what looks like two pixel lines -- although I'm assuming this has something to do with coordinate space and firefox's internal representation of the canvas.","msgtype":"m.text"},"ts":1243778821000,"senderName":"thomaslee","senderId":"thomaslee@irc"},
{"content":{"body":"thomaslee: Integer coordinates refer to the positions *between* pixels","msgtype":"m.text"},"ts":1243778880000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"annevk42: so assuming I want a line down the right hand side, I should be drawing this line for x=canvas.width-1 ?","msgtype":"m.text"},"ts":1243778881000,"senderName":"thomaslee","senderId":"thomaslee@irc"},
{"content":{"body":"ezyang: You've made it go from taking < 6s to tokenize the spec to taking > 131s","msgtype":"m.text"},"ts":1243778882000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Philip`: come again? :)","msgtype":"m.text"},"ts":1243778940000,"senderName":"thomaslee","senderId":"thomaslee@irc"},
{"content":{"body":"thomaslee: so if you stroke a line with integer coordinates, it goes between two columns of pixels and ends up shading pixels in both columns","msgtype":"m.text"},"ts":1243778941000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Oh, wait, I ran that with XDebug on.","msgtype":"m.text"},"ts":1243778942000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Philip`: oh okay, wow. why's that?","msgtype":"m.text"},"ts":1243778943000,"senderName":"thomaslee","senderId":"thomaslee@irc"},
{"content":{"body":"thomaslee: If you want to draw a line through just a single column of pixels, you have to shift the coordinates by 0.5","msgtype":"m.text"},"ts":1243778944000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"thomaslee: i.e. ctx.moveTo(canvas.width-0.5, 0); ctx.lineTo(canvas.width-0.5, canvas.height)","msgtype":"m.text"},"ts":1243779000000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"unless the line has a width of 2n, presumably?","msgtype":"m.text"},"ts":1243779001000,"senderName":"annevk42","senderId":"annevk42@irc"},
{"content":{"body":"ezyang: Let me try that again: you've made it go from < 6s to > 11s","msgtype":"m.text"},"ts":1243779002000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk42: If it has width 2n and you're trying to draw a single column of pixels, that's never going to work :-)","msgtype":"m.text"},"ts":1243779003000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"meh","msgtype":"m.text"},"ts":1243779060000,"senderName":"annevk42","senderId":"annevk42@irc"},
{"content":{"body":"Philip`: right, so that would explain why I'm still seeing two pixel lines when reducing line width. But why on earth do integer coordinates refer to the space in between pixels?","msgtype":"m.text"},"ts":1243779120000,"senderName":"thomaslee","senderId":"thomaslee@irc"},
{"content":{"body":"thomaslee: It's that way so that fills work like you would expect (with sharp edges), but it has the consequence that strokes don't quite work like you expect (so you have to shift them by 0.5 to the centers of pixels)","msgtype":"m.text"},"ts":1243779121000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"thomaslee: e.g. fillRect(10, 10, 1, 1) fills between the corners of pixels, instead of filling a rectangle between the centers of four pixels","msgtype":"m.text"},"ts":1243779180000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(...assuming you imagine pixels as being squares)","msgtype":"m.text"},"ts":1243779181000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: okay, I think I understand. Going to have to remember that one!","msgtype":"m.text"},"ts":1243779240000,"senderName":"thomaslee","senderId":"thomaslee@irc"},
{"content":{"body":"thomaslee: It's not the most intuitive thing in the world :-)","msgtype":"m.text"},"ts":1243779360000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"but I can't imagine any way to make it better without making other things worse","msgtype":"m.text"},"ts":1243779361000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: my brain hurts already :)","msgtype":"m.text"},"ts":1243779362000,"senderName":"thomaslee","senderId":"thomaslee@irc"},
{"content":{"body":"fair enough ... I only started messing with canvas yesterday, maybe it'll make sense when I've got a better understanding of it all.","msgtype":"m.text"},"ts":1243779420000,"senderName":"thomaslee","senderId":"thomaslee@irc"},
{"content":{"body":"anyway, thanks very much for your help","msgtype":"m.text"},"ts":1243779421000,"senderName":"thomaslee","senderId":"thomaslee@irc"},
{"content":{"body":"annevk42, we did consider renaming it recently","msgtype":"m.text"},"ts":1243779600000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"not sure it's worth it","msgtype":"m.text"},"ts":1243779601000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"has a brief wish PHP did lazy evaluation","msgtype":"m.emote"},"ts":1243779840000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Philip`: just to be clear, the 0.5 coordinate offset is expected behaviour as per the spec, right? (as in, I'm assuming this isn't a firefox-specific thing)","msgtype":"m.text"},"ts":1243779900000,"senderName":"thomaslee","senderId":"thomaslee@irc"},
{"content":{"body":"thomaslee: The spec doesn't really define the mapping between rendering concepts and physical pixels, e.g. it doesn't talk about antialiasing and it doesn't limit implementations to one device pixel per canvas pixel","msgtype":"m.text"},"ts":1243780020000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"thomaslee: but all current implementations do the same as Firefox here","msgtype":"m.text"},"ts":1243780021000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"thomaslee: so in reality it's the behaviour you should expect","msgtype":"m.text"},"ts":1243780022000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: great, thanks.","msgtype":"m.text"},"ts":1243780260000,"senderName":"thomaslee","senderId":"thomaslee@irc"},
{"content":{"body":"Does \"reconstruct the active formatting elements\" step 7 need to have after it a check that it isn't a marker?","msgtype":"m.text"},"ts":1243780920000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"someone is asking me to be added to html5lib team members so he write documentation? no need for vetting right?","msgtype":"m.text"},"ts":1243783020000,"senderName":"annevk42","senderId":"annevk42@irc"},
{"content":{"body":"annevk2: I think generally we've had at least one person agreeing to it","msgtype":"m.text"},"ts":1243783080000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"so one in total or two?","msgtype":"m.text"},"ts":1243783140000,"senderName":"annevk42","senderId":"annevk42@irc"},
{"content":{"body":"One in total.","msgtype":"m.text"},"ts":1243783141000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"i guess that'd be me then","msgtype":"m.text"},"ts":1243783200000,"senderName":"annevk42","senderId":"annevk42@irc"},
{"content":{"body":"for reference: juguang","msgtype":"m.text"},"ts":1243783260000,"senderName":"annevk42","senderId":"annevk42@irc"},
{"content":{"body":"gsnedders: Test cases pass first. Profiling (and not until that) and then optimization later. ","msgtype":"m.text"},"ts":1243788840000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"ezyang: Peh. I was just taking the same solution as Python for this :)","msgtype":"m.text"},"ts":1243789680000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ezyang: Also: parsing the spec fails.","msgtype":"m.text"},"ts":1243789681000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"It... errors? ","msgtype":"m.text"},"ts":1243789682000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"Wow. ","msgtype":"m.text"},"ts":1243789683000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"That means our test-coverage is not good enough. ","msgtype":"m.text"},"ts":1243789740000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"Fatal error: Call to a member function cloneNode() on a non-object in /Users/gsnedders/Documents/Stuff I'm Working On/html5lib/php/library/HTML5/TreeConstructer.php on line 3037","msgtype":"m.text"},"ts":1243789741000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"The non-object is int(300)","msgtype":"m.text"},"ts":1243789742000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Huh. That should never happen. ","msgtype":"m.text"},"ts":1243789743000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"Well it does. :D","msgtype":"m.text"},"ts":1243789744000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Oh, hey, that's the marker ","msgtype":"m.text"},"ts":1243789800000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"Ok, so we need to figure out why that algorithm is failing ","msgtype":"m.text"},"ts":1243789801000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"Do you have a minimal test-case? ","msgtype":"m.text"},"ts":1243789802000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"No.","msgtype":"m.text"},"ts":1243789803000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"curl http://www.whatwg.org/specs/web-apps/current-work/ -o html5lib/testdata/treeconstruction/tests13.dat","msgtype":"m.text"},"ts":1243789804000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"That'll encourage people to optimise their implementations","msgtype":"m.text"},"ts":1243789805000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"ezyang: that.","msgtype":"m.text"},"ts":1243789806000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Heh ","msgtype":"m.text"},"ts":1243789807000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"Will do. ","msgtype":"m.text"},"ts":1243789808000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"wonders if we should actually do that…","msgtype":"m.emote"},"ts":1243789860000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I wish we had better names for our test-cases ","msgtype":"m.text"},"ts":1243789861000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"What could be better than a number? :P","msgtype":"m.text"},"ts":1243789862000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I wouldn't object to regrouping and renaming the tests","msgtype":"m.text"},"ts":1243789920000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"It's just that, some of the test-cases make assumptions about the naming of the tests ","msgtype":"m.text"},"ts":1243789921000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"gsnedders: It would be super-uber-awesome if you could find a minimal test-case that tickles the bug. ","msgtype":"m.text"},"ts":1243789980000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"No, it would be super-über-awesome.","msgtype":"m.text"},"ts":1243789981000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"uber isn't a word, damnit!","msgtype":"m.text"},"ts":1243789982000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Last token emitted is with stream at Line  4667, column 5","msgtype":"m.text"},"ts":1243790220000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"would positivly welcome renaming the tests but doesn't want to actually spend time doing it","msgtype":"m.emote"},"ts":1243790280000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"<dfn title=\"dom-uda-protocol\">","msgtype":"m.text"},"ts":1243790281000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Is it conceptually clean for me to refer to elements in the SVG namespace as 'svg:foo'? I know that prefixes can change, but this is the most convenient representation ","msgtype":"m.text"},"ts":1243790580000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"ezyang: <table><tr><td><code>protocol</code> </table>","msgtype":"m.text"},"ts":1243790700000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Awesome ","msgtype":"m.text"},"ts":1243790760000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"ezyang: s/protocol//","msgtype":"m.text"},"ts":1243790940000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"has no idea which test file to put the test in","msgtype":"m.emote"},"ts":1243791060000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"There's a bunch of foster parenting tests in... erm... 7, I think ","msgtype":"m.text"},"ts":1243791120000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"(this is why we need better names) ","msgtype":"m.text"},"ts":1243791121000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"Yeah, I think 7 is best.","msgtype":"m.text"},"ts":1243791180000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"runs it against Python to make sure something agrees with the parse tree","msgtype":"m.emote"},"ts":1243791240000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gets auth failed :\\","msgtype":"m.emote"},"ts":1243791300000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ezyang: Pushed","msgtype":"m.text"},"ts":1243791301000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Awesome ","msgtype":"m.text"},"ts":1243791360000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"Have fun with your test suite which throws a fatal error :P","msgtype":"m.text"},"ts":1243791420000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I'm finishing XForeign support first ","msgtype":"m.text"},"ts":1243791421000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"notes the spec is a good test document because it is so huge and does so much","msgtype":"m.emote"},"ts":1243791422000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"notes the spec is a bad test document because it's very repetitive and is valid","msgtype":"m.emote"},"ts":1243791480000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"ezyang: I take it you're fixing the fact that HTML elements should go into the HTML namespace?","msgtype":"m.text"},"ts":1243791481000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Philip`: But it does everything that's valid, more or less :P","msgtype":"m.text"},"ts":1243791482000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: That seems unlikely :-p","msgtype":"m.text"},"ts":1243791540000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"gsnedders: I assume that's the default behavior. I suppose I could fix that trivially though ","msgtype":"m.text"},"ts":1243791541000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"Well, it's almost infinitely long :P","msgtype":"m.text"},"ts":1243791542000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Why is that relevant?","msgtype":"m.text"},"ts":1243791543000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"gsnedders: I could make a document that's infinitely long and consists entirely of whitespace, and it wouldn't test much behaviour","msgtype":"m.text"},"ts":1243791600000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Indeed","msgtype":"m.text"},"ts":1243791601000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Philip`: But you'd need an infinitely long document to try every possible valid character stream","msgtype":"m.text"},"ts":1243791602000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: An infinitely long document could only test precisely one character stream","msgtype":"m.text"},"ts":1243791660000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"ezyang: It _should_ just mean changing to createElementNS","msgtype":"m.text"},"ts":1243791661000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Right, but because the tokenizer+parser are finite state machines ","msgtype":"m.text"},"ts":1243791662000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"gsnedders: You'd need infinitely many documents if you want to test infinitely many character streams","msgtype":"m.text"},"ts":1243791663000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"We don't need an infinite input stream to test all state combinations ","msgtype":"m.text"},"ts":1243791664000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"Philip`: Indeed.","msgtype":"m.text"},"ts":1243791720000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ezyang: If we implement both as finite state machines exactly to spec, yes :P","msgtype":"m.text"},"ts":1243791721000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: But the interesting state in an implementation is finite, so a finite set of finite test cases could test all the interesting cases","msgtype":"m.text"},"ts":1243791722000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: And your're going to autogenreate tests to cover them all, right? ;)","msgtype":"m.text"},"ts":1243791780000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(By \"interesting\", I mean that e.g. \"<br><br>\" might be interesting but \"<br><br><br>\" is very unlikely to be)","msgtype":"m.text"},"ts":1243791781000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"ezyang: Though it may well make <foo:bar> throw an error","msgtype":"m.text"},"ts":1243791782000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"sighs","msgtype":"m.emote"},"ts":1243791783000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: That's what I did for the tokeniser :-)","msgtype":"m.text"},"ts":1243791784000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(or at least attempted to)","msgtype":"m.text"},"ts":1243791785000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"jgraham: and if I ever got around to finishing my tree-constructor implementation, I suppose I could generate tests for that too","msgtype":"m.text"},"ts":1243791786000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I think it would be possible to programatically generate tree-constructer tests ","msgtype":"m.text"},"ts":1243791787000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"Philip`: It's OCaml, right?","msgtype":"m.text"},"ts":1243791840000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Philip`: I know and I know, respectively","msgtype":"m.text"},"ts":1243791841000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"gsnedders: Yes","msgtype":"m.text"},"ts":1243791842000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"gsnedders: I'm looking at your new SPACECHARACTERS token type, and I'm thinking that's not actually a good idea. ","msgtype":"m.text"},"ts":1243793280000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"ezyang: It's what Python does.","msgtype":"m.text"},"ts":1243793281000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"It diverges from spec, and anywhere we matched just CHARACTERS, we have to match against both ","msgtype":"m.text"},"ts":1243793282000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"Sure. ","msgtype":"m.text"},"ts":1243793283000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"The way I would personally implement it, though, would be as an advisory extra flag placed in the token ","msgtype":"m.text"},"ts":1243793340000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"ezyang: Diverging from spec is not a problem.","msgtype":"m.text"},"ts":1243793341000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Adding a new token type is a fairly large divergence ","msgtype":"m.text"},"ts":1243793342000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"heycam: what i was going to say is that it looks like style.filter also needs this magic (specifically it needs to return a string that masquerades as undefined)","msgtype":"m.text"},"ts":1243793520000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"othermaciej: the way i specced document.all was to say it ToBoolean()s to false, but is otherwise a normal HTMLCollection","msgtype":"m.text"},"ts":1243793521000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"othermaciej: is that not enough? I couldn't work out how to make it masquerade as 'undefined' for the purposes of the JS spec","msgtype":"m.text"},"ts":1243793580000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: So instanceof and typeof will work like any other HTMLCollection?","msgtype":"m.text"},"ts":1243793581000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"has no idea if that is a problem","msgtype":"m.emote"},"ts":1243793582000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yeh","msgtype":"m.text"},"ts":1243793640000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hmm, abath isn't around","msgtype":"m.text"},"ts":1243795320000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"*abarth","msgtype":"m.text"},"ts":1243795321000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"christ i wish larry would follow the process the chairs set out and file bugs instead of sending all these e-mails where i have to carefully parse each line to see if there's a change request there","msgtype":"m.text"},"ts":1243796280000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: What would \"masqurading as undefined\" imply for document.all?","msgtype":"m.text"},"ts":1243797180000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"doing whatever it is webkit or gecko do","msgtype":"m.text"},"ts":1243797240000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but i don't know how to express that in terms of the js spec","msgtype":"m.text"},"ts":1243797241000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"That's a tall order","msgtype":"m.text"},"ts":1243797300000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"Hixie: wouldn't another \"willful violation\" be less work for Gecko and WebKit developers?","msgtype":"m.text"},"ts":1243797420000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"i mean i don't know how to phrase the willful violation","msgtype":"m.text"},"ts":1243797480000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: so document.all === undefined or more?","msgtype":"m.text"},"ts":1243797481000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"more","msgtype":"m.text"},"ts":1243797482000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"try it","msgtype":"m.text"},"ts":1243797483000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i can't describe it","msgtype":"m.text"},"ts":1243797484000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I am trying it. I want to know what to try :)","msgtype":"m.text"},"ts":1243797485000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"typeof does weird things, instanceof does weird things, it matters if you're in with() or not, all kinds of weird things","msgtype":"m.text"},"ts":1243797486000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"depends on webkit vs gecko vs opera, too","msgtype":"m.text"},"ts":1243797487000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"typeof and instanceof seem easy to deal with, === seems hard to deal with","msgtype":"m.text"},"ts":1243797540000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Yeah, I remember the bug discussion in Opera's BTS","msgtype":"m.text"},"ts":1243797541000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"Breaking document.all in 'with' seems like it shouldn't be a big deal","msgtype":"m.text"},"ts":1243797600000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I recall discussions about it requiring fairly low-level changes to the ECMAScript engine","msgtype":"m.text"},"ts":1243797660000,"senderName":"annevk2","senderId":"annevk2@irc"},
{"content":{"body":"perhaps ES5 should provide a spec hook for this","msgtype":"m.text"},"ts":1243797720000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I don't think they're too interested in things like that","msgtype":"m.text"},"ts":1243797780000,"senderName":"annevk2","senderId":"annevk2@irc"},
{"content":{"body":"Boolean value false, typeof undefined.","msgtype":"m.text"},"ts":1243797781000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"http://wiki.whatwg.org/wiki/Web_ECMAScript","msgtype":"m.text"},"ts":1243797782000,"senderName":"annevk2","senderId":"annevk2@irc"},
{"content":{"body":"jgraham: it's actually harder to break it than not","msgtype":"m.text"},"ts":1243797840000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"right now the html5 spec just says it ToBoolean()s to fdalse","msgtype":"m.text"},"ts":1243797841000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"false","msgtype":"m.text"},"ts":1243797842000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"anyway, i'm outta here","msgtype":"m.text"},"ts":1243797900000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Should probably mention a typeof override too?","msgtype":"m.text"},"ts":1243797901000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"Hixie: I meant that making it work or not in with seems like it shouldn't be too big a deal","msgtype":"m.text"},"ts":1243798020000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But I guess I could be wrong about that","msgtype":"m.text"},"ts":1243798021000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"wishes for the death of \"with\"","msgtype":"m.emote"},"ts":1243798022000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"There's that reshaping the universe to your whims thing again","msgtype":"m.text"},"ts":1243798140000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"has the feeling Larry and Roy are both making issues appear more easily than they are; maybe even intentionally","msgtype":"m.emote"},"ts":1243809120000,"senderName":"annevk42","senderId":"annevk42@irc"},
{"content":{"body":"e.g. Larry ignores most of the comments against having versioning for character encoding sniffing and tries to convince people to look at the general idea and Roy somehow believes the URL issue is restricted to HTML src/href attributes","msgtype":"m.text"},"ts":1243809180000,"senderName":"annevk42","senderId":"annevk42@irc"},
{"content":{"body":"takkaria, <canvas> is perfectly safe","msgtype":"m.text"},"ts":1243810080000,"senderName":"annevk42","senderId":"annevk42@irc"},
{"content":{"body":"takkaria, even some amount of scripting can be safe","msgtype":"m.text"},"ts":1243810081000,"senderName":"annevk42","senderId":"annevk42@irc"},
{"content":{"body":"just has to be sandboxed","msgtype":"m.text"},"ts":1243810140000,"senderName":"annevk42","senderId":"annevk42@irc"},
{"content":{"body":"browsers don't currently do any kind of sandboxing though","msgtype":"m.text"},"ts":1243810200000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"and until they all do, a preparse and whitelist will be required","msgtype":"m.text"},"ts":1243810201000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"still, canvas can be on that whitelist just fine :)","msgtype":"m.text"},"ts":1243810320000,"senderName":"annevk42","senderId":"annevk42@irc"},
{"content":{"body":"annevk2: But whitelisting script is a lot harder :)","msgtype":"m.text"},"ts":1243810321000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk42: mm, but it's in effect useless unless you happen to be able to be able to whitelist the code that paints on it, which is really what I meant","msgtype":"m.text"},"ts":1243810380000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"gsnedders, you wanna sandbox what it executes, not whitelist what it contains, methinks","msgtype":"m.text"},"ts":1243810440000,"senderName":"annevk42","senderId":"annevk42@irc"},
{"content":{"body":"annevk42: How do you sandbox in currently shipping browsers, then?","msgtype":"m.text"},"ts":1243810441000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Wow is Laura really azsking for quantitative principles?","msgtype":"m.text"},"ts":1243811820000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"That's... crazy","msgtype":"m.text"},"ts":1243811821000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"At the very least the demand that the world be black or white seems unreasonable and unrealistic","msgtype":"m.text"},"ts":1243811940000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Hixie: I don't see a dataunavailable event being dispatched anywhere, is that from some other spec? ","msgtype":"m.text"},"ts":1243812240000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"gave a talk today at our local BarCamp about extensibility & HTML http://edward.oconnor.cx/2009/BarCamp-San-Diego-5/","msgtype":"m.text"},"ts":1243813320000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"(more-or-less a YAGNI rant about namespaces & distributed extensibility)","msgtype":"m.text"},"ts":1243813380000,"senderName":"hober","senderId":"hober@irc"}
]