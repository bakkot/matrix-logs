[
{"content":{"body":"gsnedders: username?","msgtype":"m.text"},"ts":1477902895000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"The concept of <a>term</a> having to be rewritten as <a for=/>term</a> has also caused a ton of issues in Fetch's conversion","msgtype":"m.text"},"ts":1477904917000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"As the person that did the conversion was probably not aware of how that worked","msgtype":"m.text"},"ts":1477904934000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I didn't really discover it until later unfortunately","msgtype":"m.text"},"ts":1477904950000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: moving wpt/cors/ into wpt/fetch/cors, can we do that and avoid breaking external links?","msgtype":"m.text"},"ts":1477905786000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: https://github.com/whatwg/encoding/issues/75#issuecomment-257148606","msgtype":"m.text"},"ts":1477906172000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: how often does Mozilla push?","msgtype":"m.text"},"ts":1477906602000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: to wpt? https://github.com/w3c/web-platform-tests/pull/4090 could use a clarifying comment / merge / closure","msgtype":"m.text"},"ts":1477906617000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Which reminds me, I should do a servo sync","msgtype":"m.text"},"ts":1477906826000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: if you know the answer please reply there btw","msgtype":"m.text"},"ts":1477906950000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"When jgraham has time\"","msgtype":"m.text"},"ts":1477906972000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: does it cause jgraham issues if I just merge that one too?","msgtype":"m.text"},"ts":1477907000000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Some, yes","msgtype":"m.text"},"ts":1477907046000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hmm okay, I guess I'll wait for jgraham to come online then","msgtype":"m.text"},"ts":1477907061000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Maybe wait to see if he answers today","msgtype":"m.text"},"ts":1477907064000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Answers what?","msgtype":"m.text"},"ts":1477907456000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: see backlog?","msgtype":"m.text"},"ts":1477907486000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham:  https://github.com/w3c/web-platform-tests/pull/4090  in particular","msgtype":"m.text"},"ts":1477907497000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: (though I'm still curious about moving /cors into /fetch/cors at some point too)","msgtype":"m.text"},"ts":1477907512000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Hey! I'm trying to see if the concept of \"resource type matching\" is defined in Fetch, and failing to find it. When I say \"resource type matching\" I'm talking about the concept of avoid to reuse the same resource when e.g. a request for same URL is initiated by e.g. <img> and <script> (but allowing reuse for <img> and CSS background image). Is that concept defined in Fetch (or elsewhere)?","msgtype":"m.text"},"ts":1477907552000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"Moving tests has the downside that our sync infrastructure isn't clever enough to automatically move expectation data","msgtype":"m.text"},"ts":1477907579000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yoav: is that even a thing?","msgtype":"m.text"},"ts":1477907590000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So it's OK if all the tests are enabled because it will just be recreated, but if some are disabled it can cause problems","msgtype":"m.text"},"ts":1477907600000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: It's a thing in Blink's loading code","msgtype":"m.text"},"ts":1477907614000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"I'm hoping it's a thing in other browsers as well","msgtype":"m.text"},"ts":1477907625000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: for <img> there's a thing defined in HTML","msgtype":"m.text"},"ts":1477907639000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: I'm not aware of anything for <script>","msgtype":"m.text"},"ts":1477907646000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: and the thing for <img> likely needs to be generalized in some way and other specifications need to invoke it","msgtype":"m.text"},"ts":1477907668000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1477907670000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: basically someone needs to generalize the <img> loading algorithm and get CSS et al to invoke it","msgtype":"m.text"},"ts":1477907757000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: the image thing is called \"list of available images\"","msgtype":"m.text"},"ts":1477907828000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: it's rather messy and I think needed for compat","msgtype":"m.text"},"ts":1477907841000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I agree we need to expand the definition of \"list of available images\" to more generally define resource reuse inside the renderer (e.g. Blink/WebKit's MemoryCache). I guess that as part of that, we'd need to define the concept of not reusing resources of different types (or different request destination)","msgtype":"m.text"},"ts":1477907949000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"I was hoping something like that is defined (I want to better explain `as` in the preload spec, to ensure compat)","msgtype":"m.text"},"ts":1477907999000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: if you have some cycles it'd be great to see image loading getting some more refactoring","msgtype":"m.text"},"ts":1477908020000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I might have some time in a few weeks. I'll see if I can squeeze that in","msgtype":"m.text"},"ts":1477908090000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"annevk: replied","msgtype":"m.text"},"ts":1477908648000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"ta","msgtype":"m.text"},"ts":1477908814000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst_: I'm looking at https://w3c.github.io/webappsec-csp/#effective-directive-for-a-request and wondering why it's not a simple mapping from destination to directive? (other then question marks)","msgtype":"m.text"},"ts":1477908937000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"Is there a particular reason for that?","msgtype":"m.text"},"ts":1477908947000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"I'm trying to add some language that would tighten what `as` does, and since `as` is a destination value, deriving directive just from destination would make it easier","msgtype":"m.text"},"ts":1477909023000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"I guess I could define it all in terms of fetch and CSP would just derive from that...","msgtype":"m.text"},"ts":1477909261000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"Looking to tighten up the language of the generic sensor spec to make the intervals at which events need to fired more explicit. It the Timer section of the HTML spec a good basis for this? Or are there other things I should be looking at instead?","msgtype":"m.text"},"ts":1477909765000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"*Is","msgtype":"m.text"},"ts":1477909854000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"By \"good basis\" I mean \"good source of inspiration.\"","msgtype":"m.text"},"ts":1477909890000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: how do I link to an algorithm?","msgtype":"m.text"},"ts":1477911402000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: e.g., \"convert an ECMAScript value to ByteString\"","msgtype":"m.text"},"ts":1477911408000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: ^ (annevk: afaik you currently cannot)","msgtype":"m.text"},"ts":1477911501000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1477911568000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Fetch uses that algorithm somewhere","msgtype":"m.text"},"ts":1477911585000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: you can add a dfn inside of algorithm and algorithm uses it as its name.","msgtype":"m.text"},"ts":1477912297000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Mmm. Maybe I can add dfn and export attributes to that div.","msgtype":"m.text"},"ts":1477913811000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: per bikeshed docs you can only export <hN> and <dfn>","msgtype":"m.text"},"ts":1477913882000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1477913965000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Hmm, you can easily deduplicate contacts, but not mark contacts as not duplicatable","msgtype":"m.text"},"ts":1477915712000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: gsnedders","msgtype":"m.text"},"ts":1477917865000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders, jgraham","msgtype":"m.text"},"ts":1477917930000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: Ms2ger","msgtype":"m.text"},"ts":1477918058000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Ms2ger: jgraham","msgtype":"m.text"},"ts":1477918113000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: I meant for readthedocs, if you'd forgotten","msgtype":"m.text"},"ts":1477918387000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: I had not","msgtype":"m.text"},"ts":1477918723000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"gsnedders: Done","msgtype":"m.text"},"ts":1477918743000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Seems with new charter everyone has to rejoin the Web Platform WG if interested.","msgtype":"m.text"},"ts":1477931587000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"http://www.w3.org/mid/b4b7a03d-3859-8987-d390-2496b5ede2c3⊙wo","msgtype":"m.text"},"ts":1477931626000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"TabAtkins: re: Bikeshed: what's the best way for me to define DOMStringList in IndexedDB? Bikeshed now wants the links to be disambiguated, pointing at the dead entry in DOM","msgtype":"m.text"},"ts":1477936922000,"senderName":"jsbell_","senderId":"jsbell_@irc"},
{"content":{"body":"any news in whatwg.org?","msgtype":"m.text"},"ts":1477936941000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"it's still down for me","msgtype":"m.text"},"ts":1477936946000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"oh nvm, my internet was just slow","msgtype":"m.text"},"ts":1477936955000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"jsbell_: this seems like a case for spec= or link-defaults","msgtype":"m.text"},"ts":1477936984000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess DOM should get updated though","msgtype":"m.text"},"ts":1477936995000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: maybe, but this is for spec internal links, i.e. \"ignore DOM's entry, use mine\"...","msgtype":"m.text"},"ts":1477937020000,"senderName":"jsbell_","senderId":"jsbell_@irc"},
{"content":{"body":"jsbell_: link-defaults then","msgtype":"m.text"},"ts":1477937029000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"well, hmm, I don't know how to use link-defaults to point to the spec itself","msgtype":"m.text"},"ts":1477937061000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: right :)","msgtype":"m.text"},"ts":1477937065000,"senderName":"jsbell_","senderId":"jsbell_@irc"},
{"content":{"body":"And I don't want to ignore DOM entirely with pre class='ignored-specs'","msgtype":"m.text"},"ts":1477937084000,"senderName":"jsbell_","senderId":"jsbell_@irc"},
{"content":{"body":"I think you're supposed to use for=/","msgtype":"m.text"},"ts":1477937131000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You can also add `Assume Explicit For: yes` to the metadata block","msgtype":"m.text"},"ts":1477937159000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"which will make <a>foo</a> ~ <a for=/>foo</a>","msgtype":"m.text"},"ts":1477937168000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"jsbell_: I mean if it's going to be defined I can just remove it from DOM, right?","msgtype":"m.text"},"ts":1477937773000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: for=/ ends up linking to DOM though.","msgtype":"m.text"},"ts":1477937799000,"senderName":"jsbell_","senderId":"jsbell_@irc"},
{"content":{"body":"jsbell_: did you update bikeshed to the very very latest? there have been recent changes","msgtype":"m.text"},"ts":1477937821000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: that would also work","msgtype":"m.text"},"ts":1477937823000,"senderName":"jsbell_","senderId":"jsbell_@irc"},
{"content":{"body":"Domenic: about an hour ago","msgtype":"m.text"},"ts":1477937827000,"senderName":"jsbell_","senderId":"jsbell_@irc"},
{"content":{"body":"jsbell_: well then yeah maybe a bikeshed bug/confusion :(","msgtype":"m.text"},"ts":1477937837000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hard to fault Bikeshed too much here since we shouldn't have it defined in two places. (ODR for specs: undefined behavior!) But this will probably come up again, e.g when experimenting with replacing a spec.","msgtype":"m.text"},"ts":1477937943000,"senderName":"jsbell_","senderId":"jsbell_@irc"},
{"content":{"body":"I mean it's common for <dfn>s though. For interfaces it's a bug yeah.","msgtype":"m.text"},"ts":1477937967000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I was pretty sure this all got straightened out Friday though so I'm surprised it isn't working here","msgtype":"m.text"},"ts":1477938002000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think maybe the oversight is just not knowing how to use link-defaults to default to yourself","msgtype":"m.text"},"ts":1477938037000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Anyone want to review this? /cc annevk since it's about trusted events. https://github.com/w3c/web-platform-tests/pull/4025","msgtype":"m.text"},"ts":1477938722000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"jsbell_: so we can't remove DOMStringList?","msgtype":"m.text"},"ts":1477938872000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jsbell_: should we just define it in DOM then?","msgtype":"m.text"},"ts":1477938878000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think we'll be able to replace it with FrozenArrayWithContains<> but no one has spent the time to try doing so yet","msgtype":"m.text"},"ts":1477938925000,"senderName":"jsbell_","senderId":"jsbell_@irc"},
{"content":{"body":"annevk: so pending that I went ahead and spec'd reality in the only spec that needs it.","msgtype":"m.text"},"ts":1477938956000,"senderName":"jsbell_","senderId":"jsbell_@irc"},
{"content":{"body":"Yeah keeping it in IDB seems better than in DOM","msgtype":"m.text"},"ts":1477938967000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk, tobie: All algorithms should have a <dfn> anyway. If that doesn't exist, bug the spec author.","msgtype":"m.text"},"ts":1477939264000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jsbell_: What's your use-case? You're *writing* IndexedDB, have a definition for something, and want to point to it?  That should work automatically. Or are you writing some *other* spec, and want to point to some non-DOM DOMStringList?","msgtype":"m.text"},"ts":1477939333000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: DOM has DOMStringList as \"obsolete\" interface dfn, causes a clash","msgtype":"m.text"},"ts":1477939412000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: I'm writing Indexed DB, have a definition for DOMStringList (standard IDL block, nothing fancy), and am getting ambiguous linking errors; if I use {{/DOMStringList}} it links to DOM's DSL","msgtype":"m.text"},"ts":1477939416000,"senderName":"jsbell_","senderId":"jsbell_@irc"},
{"content":{"body":"That's... weird. Send me latest file so I can debug?","msgtype":"m.text"},"ts":1477939447000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Interfaces in IDL blocks should always dfn themselves unless they're partial.","msgtype":"m.text"},"ts":1477939465000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: up on https://github.com/w3c/IndexedDB - I pushed anyway","msgtype":"m.text"},"ts":1477939469000,"senderName":"jsbell_","senderId":"jsbell_@irc"},
{"content":{"body":"kk, one sec then","msgtype":"m.text"},"ts":1477939475000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(I cleaned up all the other amb errors, which were legit)","msgtype":"m.text"},"ts":1477939491000,"senderName":"jsbell_","senderId":"jsbell_@irc"},
{"content":{"body":"TabAtkins: I was wondering if there's some way to have legacy IDs for enums and such","msgtype":"m.text"},"ts":1477939527000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: bikeshed uses enumdef-name, whereas anolis uses just name","msgtype":"m.text"},"ts":1477939549000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: currently Fetch has some empty <span>'s sprinkled with IDs on them","msgtype":"m.text"},"ts":1477939564000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: There is - https://tabatkins.github.io/bikeshed/#metadata-translate-ids","msgtype":"m.text"},"ts":1477939569000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: shit, I wish I had asked before we put this hack in, but I guess it's not too late","msgtype":"m.text"},"ts":1477939612000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"^_^","msgtype":"m.text"},"ts":1477939623000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jsbell_: Found the problem - you have a markup error. ^_^","msgtype":"m.text"},"ts":1477939783000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Close your <div dfn-for=request> element.","msgtype":"m.text"},"ts":1477939798000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"needs to put more information into that ambiguous-for error.","msgtype":"m.emote"},"ts":1477939816000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"markup errors, the worst","msgtype":"m.text"},"ts":1477939846000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Confusing linking errors are *often* caused by something accidentally nesting most of the page.","msgtype":"m.text"},"ts":1477939903000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Luckily easy to spot, since Bikeshed's use of Markdown encourages flat documents.","msgtype":"m.text"},"ts":1477939933000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: whee, checking...","msgtype":"m.text"},"ts":1477940021000,"senderName":"jsbell_","senderId":"jsbell_@irc"},
{"content":{"body":"jsbell_: In the future, use indentation when nesting, to remind you that you need to close something. ^_^","msgtype":"m.text"},"ts":1477940171000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: https://github.com/whatwg/fetch/commit/a939a20dd93654362c4b95b653ecf8c1d83624ee very clean","msgtype":"m.text"},"ts":1477940403000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'll never stop loving \"typedefdef\"","msgtype":"m.text"},"ts":1477940443000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: yep, that did it; thanks! (brief RL distraction)","msgtype":"m.text"},"ts":1477940921000,"senderName":"jsbell_","senderId":"jsbell_@irc"},
{"content":{"body":"annevk: the self-links work, woo!","msgtype":"m.text"},"ts":1477941362000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1477941487000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: so what's the non-boolean algorithm for, then?","msgtype":"m.text"},"ts":1477943194000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: the non-boolean algorithm *attribute*","msgtype":"m.text"},"ts":1477943250000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: Currently, only making your error messages better.","msgtype":"m.text"},"ts":1477943901000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: right--my question was more around the fact that you have two competing ways to name the same thing","msgtype":"m.text"},"ts":1477943945000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Yes, I should probably start requiring that your manually-specified algorithm name be the same as the linking texts of one of the <dfn>s inside the algorithm container.","msgtype":"m.text"},"ts":1477943986000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: luckily I don't have any of those issues","msgtype":"m.text"},"ts":1477944031000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: I'm just using the boolean version when a dfn's enclosed.","msgtype":"m.text"},"ts":1477944068000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Yeah, that's reasonable.","msgtype":"m.text"},"ts":1477944112000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: would it be possible to use a for attribute to point to an external dfn?","msgtype":"m.text"},"ts":1477944116000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"for attributes aren't checked in any way whatsoever. They're a meaningless opaque string as far as I care.","msgtype":"m.text"},"ts":1477944142000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"At some point I should start caring about that, but not for a while yet. It's expensive and difficult.","msgtype":"m.text"},"ts":1477944159000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: oh, I meant a for attribute like label has. I forgot you were also using \"for\" for something else.","msgtype":"m.text"},"ts":1477944202000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: Basically, I have case where I have <hn dfn export>to foo a bar</hn><div algorithm=\"to foo a bar\">...</div>","msgtype":"m.text"},"ts":1477944269000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: e.g.: https://heycam.github.io/webidl/#create-sequence-from-iterable","msgtype":"m.text"},"ts":1477944325000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"You can put `algorithm` on a heading!","msgtype":"m.text"},"ts":1477944327000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oh wait can you.","msgtype":"m.text"},"ts":1477944341000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"goes to check.","msgtype":"m.emote"},"ts":1477944347000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: maybe you can merge https://github.com/w3c/web-platform-tests/pull/3968?","msgtype":"m.text"},"ts":1477944882000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"tobie: Anyway, yes you can; it gives the same var-checking benefits as putting it on a container.","msgtype":"m.text"},"ts":1477944897000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"zcorpan: did you see my reply on https://github.com/w3c/web-platform-tests/pull/3968 ?","msgtype":"m.text"},"ts":1477944918000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"It looks like I never infer an algorithm name from a heading-algo right now. I should infer it from the heading if it's also a definition.","msgtype":"m.text"},"ts":1477944924000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: for all the content that follows? Neat.","msgtype":"m.text"},"ts":1477944926000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Yeah, when looking for a var's algorithm, I check \"relevant headings\" if there's no algo container.","msgtype":"m.text"},"ts":1477944970000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Does it wrap it up with the same style it regular algos?","msgtype":"m.text"},"ts":1477944992000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"No.","msgtype":"m.text"},"ts":1477944996000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Question for anyone using Bikeshed: If I added a \"Max ToC Level\" metadata (for automatically excluding deeply-nested headings from the ToC), is \"just the top-level stuff\" level 1 (because first level in the ToC) or level 2 (because <h2>)?","msgtype":"m.text"},"ts":1477945062000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: well, I really wanted to have both my cake and also eat it.","msgtype":"m.text"},"ts":1477945837000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: call it Max ToC depth and start numbering with 1","msgtype":"m.text"},"ts":1477946424000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Brilliant.","msgtype":"m.text"},"ts":1477946449000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Did I completely dream up the existence of a \"fire a simple event\" construct?","msgtype":"m.text"},"ts":1477954974000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I can't seem to find this anywhere.","msgtype":"m.text"},"ts":1477954986000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: it was removed in favor of \"fire an event\"","msgtype":"m.text"},"ts":1477955739000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Probably should have been some kind of announcement","msgtype":"m.text"},"ts":1477955752000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: at least I'm not making things up.","msgtype":"m.text"},"ts":1477955856000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"rniwa: any thoughts on https://github.com/whatwg/html/pull/1936 ?","msgtype":"m.text"},"ts":1477957037000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: what is this feature?","msgtype":"m.text"},"ts":1477957092000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: it is a proposal to add promises to the DOM for various one-time events, starting with a few promises on document for common initialization events (interactive, content loaded, and the load event)","msgtype":"m.text"},"ts":1477957138000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh I see","msgtype":"m.text"},"ts":1477957146000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: I'm not sure if adding three new properties on document is a good idea...","msgtype":"m.text"},"ts":1477957167000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: the concern being web compat? We'd made them [Unscopable]","msgtype":"m.text"},"ts":1477957193000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic:  How about something like document.whenReady('interactive') ?","msgtype":"m.text"},"ts":1477957225000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: that sounds pretty reasonable, but what is the concern concretely?","msgtype":"m.text"},"ts":1477957246000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: using up more names on document","msgtype":"m.text"},"ts":1477957267000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: e.g. document.interactive seems like something that could be used for something else","msgtype":"m.text"},"ts":1477957280000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Hmm :-/","msgtype":"m.text"},"ts":1477957285000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"like hypothetical \"Interactive API\"","msgtype":"m.text"},"ts":1477957288000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"not sure what it would do","msgtype":"m.text"},"ts":1477957292000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"We'd usually put that on navigator.interactive","msgtype":"m.text"},"ts":1477957297000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: maybe","msgtype":"m.text"},"ts":1477957302000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"I dunno, I think it'd be a win if we can get a pattern of domNode.simpleStateName.then(...) going","msgtype":"m.text"},"ts":1477957334000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"e.g. imgEl.loaded.then(...)","msgtype":"m.text"},"ts":1477957339000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and so on","msgtype":"m.text"},"ts":1477957341000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I don't think that's much better than","msgtype":"m.text"},"ts":1477957358000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: image.whenReady('loaded').then(~)","msgtype":"m.text"},"ts":1477957368000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: or even image.when('loaded').then(~)","msgtype":"m.text"},"ts":1477957383000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"That's 11 chars more, plus some shift presses. :/","msgtype":"m.text"},"ts":1477957386000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: then we can add even more types","msgtype":"m.text"},"ts":1477957389000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Sure, not too much. But it's a little better, and multiplied by how often we'd expect this to be used...","msgtype":"m.text"},"ts":1477957389000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: e.g. image.when('decoded').then(~)","msgtype":"m.text"},"ts":1477957405000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"And I think keeping it open-ended is a bit problematic because it kind of implies we're creating this other parallel event system","msgtype":"m.text"},"ts":1477957410000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Instead of just special-casing for certain very common one-and-done things","msgtype":"m.text"},"ts":1477957423000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: possibly","msgtype":"m.text"},"ts":1477957447000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"We have some precedent for these, e.g. stream.closed.then(...) and fontFaceSet.ready.then(...)","msgtype":"m.text"},"ts":1477957450000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: those are on stream & fontFaceSet","msgtype":"m.text"},"ts":1477957461000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"yeah just saying as part of the web platform we have some precedent for obj.stateName.then(...)","msgtype":"m.text"},"ts":1477957479000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: which are rather \"exotic\" ojbect","msgtype":"m.text"},"ts":1477957480000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: I know that","msgtype":"m.text"},"ts":1477957486000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: I'm really concerned about document.interative","msgtype":"m.text"},"ts":1477957499000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: document.loaded seems fine","msgtype":"m.text"},"ts":1477957503000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: so is document.contentLoaded","msgtype":"m.text"},"ts":1477957510000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: maybe document.interactiveReady? or document.interactionReady","msgtype":"m.text"},"ts":1477957524000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: hmm OK yeah we can focus on that in particular. The reason for \"interactive\" was because that's what the readystate changes to","msgtype":"m.text"},"ts":1477957545000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But it is a bit of a strange one","msgtype":"m.text"},"ts":1477957553000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It's also nice for it to be short since it happens soonest so authors should probably use it more than the others","msgtype":"m.text"},"ts":1477957562000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah.","msgtype":"m.text"},"ts":1477957565000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: document.readyToInteractive.then(~) might be okay too","msgtype":"m.text"},"ts":1477957578000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"I guess I just wish I knew what we were reserving document.interactive for.","msgtype":"m.text"},"ts":1477957583000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I can't say","msgtype":"m.text"},"ts":1477957595000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"It is a nice name, bhis seems like probably the best possible use of it.","msgtype":"m.text"},"ts":1477957603000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: but in general, each name should be as specific as possible","msgtype":"m.text"},"ts":1477957606000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"s/bhis/but this/","msgtype":"m.text"},"ts":1477957609000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: you may feel that way but are you sure you'll feel the same way in 50 years?","msgtype":"m.text"},"ts":1477957687000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"that way now*","msgtype":"m.text"},"ts":1477957692000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: pretty sure, yeah :)","msgtype":"m.text"},"ts":1477957697000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Insofar as I feel confident about anything I work on lasting 50 years.","msgtype":"m.text"},"ts":1477957709000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Well, I'll leave a note on the thread for us to try to brainstorm alternate names. Would you say WebKit supports the other two at least? :)","msgtype":"m.text"},"ts":1477957732000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: well, it depends on what those alternative names for \"interactive\" would be","msgtype":"m.text"},"ts":1477957848000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: but really, I'm quite indifferent about this API","msgtype":"m.text"},"ts":1477957860000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"hmm OK fair.","msgtype":"m.text"},"ts":1477957874000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I don't know what others in the WebKit team feels about it","msgtype":"m.text"},"ts":1477957882000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: but in general, we're a lot more cautious than other vendors when it comes to adding new APIs","msgtype":"m.text"},"ts":1477957897000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"that's fair. We can try it out in Gecko and Blink first and let you know how it goes.","msgtype":"m.text"},"ts":1477957915000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: anyways, i'm done implementing custom elements in WebKit now","msgtype":"m.text"},"ts":1477958213000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: \\o/!","msgtype":"m.text"},"ts":1477958222000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: it should be fully spec compliant and all that in STP17","msgtype":"m.text"},"ts":1477958232000,"senderName":"rniwa","senderId":"rniwa@irc"}
]