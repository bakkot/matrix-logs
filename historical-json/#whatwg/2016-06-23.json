[
{"content":{"body":"Domenic: That globals email was super-helpful, thanks! This answers some questions that were recently raised for some Houdini specs.","msgtype":"m.text"},"ts":1466640280000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1466647655000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"hey all. does the url spec (https://url.spec.whatwg.org/) apply to all urls across all schemes? i'm asking cuz i'm unsure if postgres' strategy for specifying unix domain sockets in postgres:// urls is invalid","msgtype":"m.text"},"ts":1466655542000,"senderName":"jdp","senderId":"jdp@irc"},
{"content":{"body":"postgres percent-encodes the domain socket's path and places it in the host section of the postgres url, but according to https://url.spec.whatwg.org/#host-parsing that would be invalid, because %2F decodes to / and that would cause a syntax violation","msgtype":"m.text"},"ts":1466655627000,"senderName":"jdp","senderId":"jdp@irc"},
{"content":{"body":"for reference, toward bottom of the section: https://www.postgresql.org/docs/current/static/libpq-connect.html#AEN42532","msgtype":"m.text"},"ts":1466655826000,"senderName":"jdp","senderId":"jdp@irc"},
{"content":{"body":"jdp: yeah, it is for all URLs","msgtype":"m.text"},"ts":1466656726000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: cool thanks","msgtype":"m.text"},"ts":1466656761000,"senderName":"jdp","senderId":"jdp@irc"},
{"content":{"body":"annevk: do you know which timezone smaug's in?","msgtype":"m.text"},"ts":1466663546000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"kochi: UTC+02:00","msgtype":"m.text"},"ts":1466663592000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"kochi: aka Eastern European Time Zone","msgtype":"m.text"},"ts":1466663606000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"kochi: having said that, he doesn't exactly keep office hours is my impression","msgtype":"m.text"},"ts":1466663636000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I was told that he could be in PST, so...","msgtype":"m.text"},"ts":1466663665000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"unless he's travelling, my assumption was right :)","msgtype":"m.text"},"ts":1466663725000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"Specs down?","msgtype":"m.text"},"ts":1466669998000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Can't load https://quirks.spec.whatwg.org here.","msgtype":"m.text"},"ts":1466670037000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Never mind, was just slow.","msgtype":"m.text"},"ts":1466670062000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: Next time someone ask about postgresql socket URLs,","msgtype":"m.text"},"ts":1466670288000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: feel free to refer them to https://github.com/servo/rust-url/issues/26#issuecomment-200900094.","msgtype":"m.text"},"ts":1466670299000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"http://www.downforeveryoneorjustme.com/html.spec.whatwg.org :-(","msgtype":"m.text"},"ts":1466670351000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hixie_: ^","msgtype":"m.text"},"ts":1466670410000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"\"In quirks mode and limited-quirks mode, for a block container element whose content is composed of inline-level elements, the elementâ€™s line-height must be ignored for the purpose of calculating the minimal height of line boxes within the element.\"","msgtype":"m.text"},"ts":1466670459000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"So the line-height isn't ignored if the block container contains something that isn't inline, right?","msgtype":"m.text"},"ts":1466670477000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: ...right. or this quirk is only intended to override CSS's requirements for that particular case. it could be that CSS already specifies that line-height is ignored for some other situation","msgtype":"m.text"},"ts":1466671555000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"nox: which case are you interested in?","msgtype":"m.text"},"ts":1466671596000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: The line-height for a table cell.","msgtype":"m.text"},"ts":1466671625000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"zcorpan: Trying to fix the HN top bar in Servo.","msgtype":"m.text"},"ts":1466671635000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: hmmm, i think a table cell is also a block container. https://drafts.csswg.org/css2/visuren.html#block-container-element","msgtype":"m.text"},"ts":1466671906000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Yes it is, my question was about the kind of content. :)","msgtype":"m.text"},"ts":1466671923000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"ok, yeah, only block containers that establish an inline formatting context (i.e. only contain inlines). but if a block container has mixed inline and block you get an anonymous block to wrap the inlines, and i suppose the quirk should apply to the anonymous block?","msgtype":"m.text"},"ts":1466672120000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"nox: is the problem with the image? https://quirks.spec.whatwg.org/#the-line-height-calculation-quirk is also closely related","msgtype":"m.text"},"ts":1466672322000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: Yes it's the logo.","msgtype":"m.text"},"ts":1466672479000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"zcorpan: https://github.com/servo/servo/issues/11821","msgtype":"m.text"},"ts":1466672502000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"ok i think you need to implement those two quirks to get that working correctly. it seems chromium passes all the tests for the two quirks","msgtype":"m.text"},"ts":1466672564000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hmmm doesn't httparchive include page rank anymore?","msgtype":"m.text"},"ts":1466674290000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"nox: https://gist.githubusercontent.com/zcorpan/1c2fd8b55133c0e6f4892243c87b2d0a/raw/dcb7707d46379337eb719f39ac506db50530c72b/quirks_doctypes_2016_06_01.md all quirks mode urls in httparchive (sorted by their doctype)","msgtype":"m.text"},"ts":1466675743000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"https://gist.github.com/zcorpan/1c2fd8b55133c0e6f4892243c87b2d0a for the html version but it seems to be cut off for me, i guess github thought it was too long","msgtype":"m.text"},"ts":1466675835000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"was just about to mention that","msgtype":"m.emote"},"ts":1466677088000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"TabAtkins, still not sure you fixed https://github.com/w3c/csswg-drafts/issues/85","msgtype":"m.text"},"ts":1466683146000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Who the hell is Mostafa Shahdadi and why are they messing with random w3c bugs?","msgtype":"m.text"},"ts":1466683376000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: just a spammer?","msgtype":"m.text"},"ts":1466684148000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I'm not at my pc now to check","msgtype":"m.text"},"ts":1466684185000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"disabled the account","msgtype":"m.text"},"ts":1466684503000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"JakeA: data:text/html,<object data=\"http://example.com/gofish\">I am fallback</object> and https://bugzilla.mozilla.org/show_bug.cgi?id=1003797#c20 might be of interest","msgtype":"m.text"},"ts":1466685224000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: with two requests you can figure out 2xx","msgtype":"m.text"},"ts":1466685235000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: given that, we could consider opening up response.ok, though I'm a little wary still","msgtype":"m.text"},"ts":1466685275000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: struggling to figure out why it needs two requests. Why isn't <object> fallback enough?","msgtype":"m.text"},"ts":1466685403000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: how do you tell network error from 404?","msgtype":"m.text"},"ts":1466685423000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: maybe nobody cares about that distinction","msgtype":"m.text"},"ts":1466685463000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ahh, yeah. response.ok would expose the difference","msgtype":"m.text"},"ts":1466685509000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: \"My statement above is wrong, determining 2xx requires one request, telling non-2xx and network errors apart requires two.\" is a comment I'll add there","msgtype":"m.text"},"ts":1466685524000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: indeed","msgtype":"m.text"},"ts":1466685552000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"<embed src=http://test:test/ onerror=w(1) onload=w(2)></embed> gives 2 in Chrome, nothing in Firefox","msgtype":"m.text"},"ts":1466685849000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: btw, been thinking about the path to range requests & service worker. Was thinking of adding an algorithm to fetch that asserts if a given partial response is ok to use. Something in the form assertPartialResponse(response, typeAllowed) (but as an algorithm rather than API), where typeAllowed is \"any\", \"visible\" (not opaque) or a url the response","msgtype":"m.text"},"ts":1466685893000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"must come from. It throws if not allowed, otherwise returns the next value for typeAllowed","msgtype":"m.text"},"ts":1466685893000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: so assertPartialResponse(corsResponse, \"any\") returns \"cors\"","msgtype":"m.text"},"ts":1466685930000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"assertPartialResponse(opaqueResponse, \"any\") returns the response url","msgtype":"m.text"},"ts":1466685953000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"the return value seems strange?","msgtype":"m.text"},"ts":1466685969000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm not entirely sure what this does based on this description","msgtype":"m.text"},"ts":1466685995000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the problem is the calling API needs to be responsible for maintaining some state, since only it knows what the response is being used for","msgtype":"m.text"},"ts":1466686046000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Eg for a video, returning ranges from multiple cors urls is cool. Using a single no-cors url is cool. Using multiple no-cors urls is not cool. Mixing cors & no-cors is not cool.","msgtype":"m.text"},"ts":1466686116000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"But if the video changes src, or resets somehow, we're back to the start in terms of how responses are processed","msgtype":"m.text"},"ts":1466686137000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Does <video> today do \"no-cors\" and multiple range requests?","msgtype":"m.text"},"ts":1466686167000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1466686174000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Right, that's what I thought too, not sure anyone thought through the implications of just doing that, but...","msgtype":"m.text"},"ts":1466686203000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But also, what <video> can request is restricted. It can only ever be \"no-cors\" or \"cors\" I think","msgtype":"m.text"},"ts":1466686241000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But you're probably getting at something else and I'm not there yet","msgtype":"m.text"},"ts":1466686290000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If a <video> is making no-cors requests, we need to make sure the response is either all cors responses, or no-cors responses from the same url","msgtype":"m.text"},"ts":1466686384000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"It probably doesn't matter tons for <video>, but I want to avoid being able to return a single response that wraps opaque data in \"exposeThis(` and \"`)\" and executes it as JS","msgtype":"m.text"},"ts":1466686491000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I think I need to write something up in more detail. The intent is to give APIs a way to ensure that partial responses for something that's going to be treated as a single unit don't allow parts to be opaque unless they're all from the same url","msgtype":"m.text"},"ts":1466686695000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I guess we also need to figure out how to make partial requests","msgtype":"m.text"},"ts":1466687032000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: works with the fetch API today by just setting headers","msgtype":"m.text"},"ts":1466687056000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: currently that would result in CORS preflight if you enabled CORS","msgtype":"m.text"},"ts":1466687057000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ah, yeah, that","msgtype":"m.text"},"ts":1466687064000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"LINK ERROR: No 'idl' refs found for 'supports()' with for='CSS'.","msgtype":"m.text"},"ts":1466687077000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"LINK ERROR: No 'method' refs found for 'supports(property, value)'.","msgtype":"m.text"},"ts":1466687077000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"TabAtkins: ^","msgtype":"m.text"},"ts":1466687082000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: and in both Chrome and Firefox we silently drop the range header if it's no-cors, which is a bug","msgtype":"m.text"},"ts":1466687113000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I'm surprised this kind of thing is never escalated but stays under the wraps for so long","msgtype":"m.text"},"ts":1466687168000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: oh wait, I missed a lot of important details there. We drop the header in the case of event.respondWith(fetch(event.request)) in a service worker","msgtype":"m.text"},"ts":1466687296000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I think it's because at some point the request gets recreated and the non-safe headers get dropped","msgtype":"m.text"},"ts":1466687329000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"fetch() does that","msgtype":"m.text"},"ts":1466688305000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"No good ideas here","msgtype":"m.text"},"ts":1466688341000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: when this came up with client hint headers we discussed the idea of a header entry being \"blessed\" somehow. So if it's \"ua added\" it isn't filtered","msgtype":"m.text"},"ts":1466688606000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yeah, but UA getting a same origin bypass isâ€¦ Ship sailed I guess, but still","msgtype":"m.text"},"ts":1466688802000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: seems complex to get correct too","msgtype":"m.text"},"ts":1466688855000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I think we should more carefully study a concept of \"passthrough\"","msgtype":"m.text"},"ts":1466689788000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: where if the request is not modified, we just pass it on to the network or cache API, without altering the headers that were already okay'd be the API in some way (however wrong we may think that is)","msgtype":"m.text"},"ts":1466689836000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: in which cases is it wrong?","msgtype":"m.text"},"ts":1466689865000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Marking an immutable header object as passthrough seems fine","msgtype":"m.text"},"ts":1466689891000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: it's arguably wrong for UAs to add Range, DNT, etc. as servers might not expect those headers coming from UAs","msgtype":"m.text"},"ts":1466689896000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: for developers we require a CORS preflight, for UAs we just do, that's a weird security policy","msgtype":"m.text"},"ts":1466689938000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: in this case range predates CORS right?","msgtype":"m.text"},"ts":1466689950000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I don't think so","msgtype":"m.text"},"ts":1466689967000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"CORS is from 2006, <video> was first proposed in 2007","msgtype":"m.text"},"ts":1466689976000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but download resuming?","msgtype":"m.text"},"ts":1466689991000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"DNT is definitely post-CORS","msgtype":"m.text"},"ts":1466689993000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(I'm assuming download resuming used range headers)","msgtype":"m.text"},"ts":1466690014000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: not sure, perhaps","msgtype":"m.text"},"ts":1466690024000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: JakeA: I still don't buy that its fetch() removing the range header because its unsafe... it should hit the init path that just copies the headers without going through append algorithm","msgtype":"m.text"},"ts":1466693221000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"kind of misses being on European time so he doesn't have to read backscrolll first thing...","msgtype":"m.emote"},"ts":1466693248000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"step 8 of new Request says \"header list is a copy of request's header list\"... so I think that should avoid stripping the range header","msgtype":"m.text"},"ts":1466693299000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Yeah, that's right","msgtype":"m.text"},"ts":1466693360000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1466693362000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Ah yeah, I already do passthrough","msgtype":"m.text"},"ts":1466693379000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's `init` that goes through the filtering","msgtype":"m.text"},"ts":1466693423000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"hmmh, Safari has issues with CORS with HTTP redirects","msgtype":"m.text"},"ts":1466693445000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"is this known/workaroundable?","msgtype":"m.text"},"ts":1466693455000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"wanderview: doesn't step 31 overwrite the headers either way?","msgtype":"m.text"},"ts":1466693468000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ondras: all browsers do, to some extent","msgtype":"m.text"},"ts":1466693491000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ah, crap... yea","msgtype":"m.text"},"ts":1466693499000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"ondras: the main fix is submitting tests to web-platform-tests","msgtype":"m.text"},"ts":1466693508000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: well my particular use case -- cross-origin request with one HTTP redirect -- works in other browsers","msgtype":"m.text"},"ts":1466693551000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"Safari *seems* to try (does preflight for the redirected GET)","msgtype":"m.text"},"ts":1466693579000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"annevk: JakeA: yea... and we do it just like the spec... that will remove the range headers https://dxr.mozilla.org/mozilla-central/source/dom/fetch/Request.cpp#502","msgtype":"m.text"},"ts":1466693583000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: wanderview: so yeah, if we want to fix stuff like that we should reconsider proper passthrough requests :/","msgtype":"m.text"},"ts":1466693584000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but even if I respond properly to this unnecessary preflight, it fails","msgtype":"m.text"},"ts":1466693596000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"annevk: if we just set the guard after the fill it would be fine I think... but maybe unsafe for other cases","msgtype":"m.text"},"ts":1466693617000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"ondras: what makes it unneeded?","msgtype":"m.text"},"ts":1466693630000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it is a GET with no custom headers","msgtype":"m.text"},"ts":1466693650000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"wanderview: I don't think we want to allow modifying the request aspects while keeping the headers","msgtype":"m.text"},"ts":1466693664000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I am not aware of other browsers doing a preflight","msgtype":"m.text"},"ts":1466693665000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"wanderview: either nothing changes per whatever policy the API decided things were safe, or we apply the policy we know is safe","msgtype":"m.text"},"ts":1466693694000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ondras: I see, I recommend filing bugs and maybe writing tests","msgtype":"m.text"},"ts":1466693722000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I would love to speak to some Apple engineer first to rule out the possibility of me doing something completely wrong, but I suppose those are hard to come by?","msgtype":"m.text"},"ts":1466693802000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: a little bit, I think if you've done your homework and tested in other browsers you're generally good for a bug report","msgtype":"m.text"},"ts":1466693936000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: \"To access Apple Bug Reporter, sign in with the Apple ID associated with your developer account.\" <-- this is the preferred way?","msgtype":"m.text"},"ts":1466694003000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: use https://bugs.webkit.org/enter_bug.cgi?product=WebKit","msgtype":"m.text"},"ts":1466694021000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: okay, thanks a lot","msgtype":"m.text"},"ts":1466694034000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: oh, and if you haven't, test in Safari Technology Preview","msgtype":"m.text"},"ts":1466694063000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: will try, thanks","msgtype":"m.text"},"ts":1466694086000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"does anyone implement as= for <link rel=preload> now? https://github.com/whatwg/html/pull/1418#issuecomment-227481256","msgtype":"m.text"},"ts":1466696994000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I thought Chrome does but have not tested","msgtype":"m.text"},"ts":1466697608000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yoav would know","msgtype":"m.text"},"ts":1466697626000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"or igrigorik_","msgtype":"m.text"},"ts":1466697635000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1466697945000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wonders what would it take to convince blink folks to remove .chrome","msgtype":"m.emote"},"ts":1466699028000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"hayato: is anyone from your team planning on adding the relatedTarget stuff to the event dispatch algorithm?","msgtype":"m.text"},"ts":1466700941000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hayato: or is the idea that I take that on?","msgtype":"m.text"},"ts":1466700949000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hayato: I should probably go through the remaining shadow tree issues again I suppose, got a little distracted with navigation","msgtype":"m.text"},"ts":1466700988000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: What do you think isn't fixed about it? (Preferably, comment in the bug.)","msgtype":"m.text"},"ts":1466704305000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I still find it confusing that \"static\" in CSS selectors means \"from JavaScript\" and \"dynamic\" means \"from CSS stylesheets\". I usually think of JS code as much more dynamic than CSS stylesheets.","msgtype":"m.text"},"ts":1466704473000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JS code evaluates selectors against what is, at the timescales we're dealing with, a static DOM, while stylesheets are 99% evaluated against a DOM in the process of being built or mutating.","msgtype":"m.text"},"ts":1466704517000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"static\" and \"live\" might match DOM terminology better","msgtype":"m.text"},"ts":1466704544000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The words carry the right semantics at least, insofar as \"static\" is considered cheaper or capable of handling more expensive operations than \"dynamic\" stuff is.","msgtype":"m.text"},"ts":1466704572000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yeah not saying it's wrong, or even that it's necessarily confusing to most, but it's confusing to me. I see \"we should put this in the static profile\" and my gut reaction is \"great, then I can use it in my static CSS stylesheets!\"","msgtype":"m.text"},"ts":1466710658000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: any idea why with latest bikeshed I lose about 50% of the references in the service worker spec?","msgtype":"m.text"},"ts":1466712185000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"TabAtkins: as in the list of specs in the \"Normative References\" section and in the \"Terms defined by reference\" sections are missing about half the specs with latest bikeshed...","msgtype":"m.text"},"ts":1466712219000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"TabAtkins: bisecting blames https://github.com/tabatkins/bikeshed/commit/b77fe40776dedaf83b23b77a952a1599c29ac398, before that commit all the references are there, after it half are missing","msgtype":"m.text"},"ts":1466712427000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Mek: Point me to your spec?","msgtype":"m.text"},"ts":1466712488000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: https://github.com/slightlyoff/ServiceWorker/blob/master/spec/service_worker/index.bs","msgtype":"m.text"},"ts":1466712516000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html is what some old bikeshed version generated, with latest bikeshed half the references are missing","msgtype":"m.text"},"ts":1466712535000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"TabAtkins: should I file a bug for the broken references?","msgtype":"m.text"},"ts":1466718179000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Nah, got it. Got distracted by some other things, but fixing it now.","msgtype":"m.text"},"ts":1466718198000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"okay, thanks","msgtype":"m.text"},"ts":1466718208000,"senderName":"Mek","senderId":"Mek@irc"}
]