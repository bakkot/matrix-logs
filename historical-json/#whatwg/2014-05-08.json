[
{"content":{"body":"cabanier: so I reckon if I keep helping with preparation for this 2dcontext LCWD it's likely to end up costing me a full day of time I'd rather have spent working on other things that I actually care about","msgtype":"m.text"},"ts":1399513553000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: sorry...","msgtype":"m.text"},"ts":1399514677000,"senderName":"cabanier","senderId":"cabanier@irc"},
{"content":{"body":"oh the annoyance of running irssi and bugzilla on the same host an a naive bugzilla installation being so prone to DoS","msgtype":"m.text"},"ts":1399538211000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"woah https://www.w3.org/Bugs/Public/show_bug.cgi?id=25478#c15","msgtype":"m.text"},"ts":1399539711000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"MikeSmith: are you ok?","msgtype":"m.text"},"ts":1399539725000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: yeah. sorry about that comment","msgtype":"m.text"},"ts":1399540032000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"if you refuse to implement the change in v.nu that seems like a useful data point, but it was a bit hidden behind the rage :-P","msgtype":"m.text"},"ts":1399540130000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"what happened with http://static.guim.co.uk/sys-images/Guardian/About/General/2011/7/14/1310661708437/LulzSec-logo-001.jpg ? :-)","msgtype":"m.text"},"ts":1399540246000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: point taken :)","msgtype":"m.text"},"ts":1399540683000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: I was experimenting with trying out my alternate \"rage persona\"","msgtype":"m.text"},"ts":1399540800000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: ok, that's cool","msgtype":"m.text"},"ts":1399540828000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i'm not complaining i was just surprised","msgtype":"m.text"},"ts":1399540838000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"but I think we can agree the experiment failed","msgtype":"m.text"},"ts":1399540846000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"darobin not being around, would appreciate review/comments for my pull request adding MapClass support to the WebIDL parser: https://github.com/darobin/webidl2.js/pull/10. Anyone?","msgtype":"m.text"},"ts":1399540988000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I can look at it in 4 hours or so, if nobody gets to it first. On my mobile now","msgtype":"m.text"},"ts":1399541139000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"^ ty MikeSmith","msgtype":"m.text"},"ts":1399541155000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"mathiasbynens: not sure APIs for encodings are suitable for base64","msgtype":"m.text"},"ts":1399541476000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hello!","msgtype":"m.text"},"ts":1399542182000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"annevk: i meant separate APIs","msgtype":"m.text"},"ts":1399542366000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"one like atob/btoa for base64{en,de}coding ASCII or octets in “binary strings”","msgtype":"m.text"},"ts":1399542416000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"and then something like TextEncoder to turn any plain Unicode string into such “binary strings”","msgtype":"m.text"},"ts":1399542450000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"or does that not make sense?","msgtype":"m.text"},"ts":1399542463000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: does","msgtype":"m.text"},"ts":1399543209000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mathiasbynens: well, TextEncoder is scalar values to bytes","msgtype":"m.text"},"ts":1399543275000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: did you see http://esdiscuss.org/topic/native-base64-utility-methods?","msgtype":"m.text"},"ts":1399543342000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: yes","msgtype":"m.text"},"ts":1399543354000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the counter-argument there seems to be that base64('any string') should work","msgtype":"m.text"},"ts":1399543373000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"but if you encode the string first, atob/btoa seem sufficient","msgtype":"m.text"},"ts":1399543388000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"atob and btoa are not going anywhere","msgtype":"m.text"},"ts":1399543420000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mathiasbynens: I don't understand \"(but it requires ArrayBuffer / Uint8Array)\"","msgtype":"m.text"},"ts":1399543435000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: good point, that’s not an issue at all (i didn’t realize these things were now defined in the ES draft rather than a separate document)","msgtype":"m.text"},"ts":1399543575000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"https://www.w3.org/Bugs/Public/show_bug.cgi?id=24382#c22 is interesting","msgtype":"m.text"},"ts":1399544083000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: yeah, that lets broadcasters easily add targeted HTML overlays and the like. Good thing I don't watch TV.","msgtype":"m.text"},"ts":1399544912000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Hixie: would it be worthwhile to set up a hook for regenning the spec and committing in svn whenever my `source` changes?","msgtype":"m.text"},"ts":1399554754000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Where did zcorpan go?","msgtype":"m.text"},"ts":1399557095000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: what was the proper way to talk again about an initial property value in ECMAScript","msgtype":"m.text"},"ts":1399557342000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: e.g. you want to invoke the Event() constructor, but not one overwritten by a page","msgtype":"m.text"},"ts":1399557359000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: well, the \"proper\" (Allen-style) way is to define a per-realm %Event% intrinsic and refer to that instead. But I think \"using the initial value of the Event constructor for this realm [or top-level browsing context]\" seems good.","msgtype":"m.text"},"ts":1399559951000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"The intrinsics approach is kind of nice for implementers, I would imagine, as it gives them a clear list of things that need to be saved away for use later.","msgtype":"m.text"},"ts":1399560010000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"heh, one day once IDL is maintained we should just make it have a good <dfn> for that","msgtype":"m.text"},"ts":1399560015000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'll add it to the jsidl issue just so I don't forget it...","msgtype":"m.text"},"ts":1399560043000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: cool","msgtype":"m.text"},"ts":1399560745000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Any movement happening on query and queryAll? http://dom.spec.whatwg.org/#dom-parentnode-query","msgtype":"m.text"},"ts":1399562519000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Implementations need to support ES6 subclassing first","msgtype":"m.text"},"ts":1399562600000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"BUT I think they could just return arrays for now","msgtype":"m.text"},"ts":1399562607000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Also: https://github.com/barberboy/dom-elements","msgtype":"m.text"},"ts":1399562635000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Hi Domenic_ :) In your opinion, in lieu of AbortableProgressPromise for operations like move, what should be used? http://w3c.github.io/filesystem-api/Overview.html#the-directory-interface","msgtype":"m.text"},"ts":1399562696000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"arunranga: just Promise seems fine...","msgtype":"m.text"},"ts":1399562758000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"That’s what I thought.","msgtype":"m.text"},"ts":1399562768000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"Domenic_: what do you mean by subclassing? Are you referring to the live-ness of query/All?","msgtype":"m.text"},"ts":1399562822000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"mathiasbynens: there was discussion already for using TextEncoder/TextDecoder for base64 on the list, seems like the right thing to do","msgtype":"m.text"},"ts":1399562824000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"JonathanNeal: no, not at all. I mean support for subclassing implementation-provided classes. In particular, ES6 Symbol.create support is necessary.","msgtype":"m.text"},"ts":1399562862000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Next question, and sorry if I’ve missed past communication about this, but is https://dvcs.w3.org/hg/streams-api/raw-file/tip/Overview.htm the new-and-better/more recent flavor of https://github.com/whatwg/streams ?","msgtype":"m.text"},"ts":1399562879000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"Domenic_: wow, no idea what those are. Things to learn.","msgtype":"m.text"},"ts":1399562891000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"It's in my blog post queue... Symbol.create and the subclassable built-ins it enables are my favorite thing, but it needs more publicity.","msgtype":"m.text"},"ts":1399562933000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"arunranga: nope, other way around.","msgtype":"m.text"},"ts":1399562941000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_ ahh, ok. The “date” on the editor’s draft at the w3.org URL is probably just auto-updated then.","msgtype":"m.text"},"ts":1399562972000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"arunranga: oh interesting","msgtype":"m.text"},"ts":1399562988000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"yeah I guess so, huh. https://dvcs.w3.org/hg/streams-api/","msgtype":"m.text"},"ts":1399563016000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I think respec.js has a date updater, and this makes it look like the w3.org spec is updated as of today-ish.","msgtype":"m.text"},"ts":1399563029000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"OK well, I’m glad I asked :-)","msgtype":"m.text"},"ts":1399563053000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1399563059000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"zewt: “the list” meaning es-discuss?","msgtype":"m.text"},"ts":1399564887000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Right. Sorry for confusing. W3C version is suspended. I'm a co-editor for it. We are working together with Domenic_ at WHATWG github now.","msgtype":"m.text"},"ts":1399566581000,"senderName":"tyoshino____","senderId":"tyoshino____@irc"},
{"content":{"body":"re: Streams","msgtype":"m.text"},"ts":1399566596000,"senderName":"tyoshino____","senderId":"tyoshino____@irc"},
{"content":{"body":"mathiasbynens: whatwg or webapps","msgtype":"m.text"},"ts":1399568405000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zcorpan: the problem with such a hook is that it would jam in my half-complete changes as well :-)","msgtype":"m.text"},"ts":1399569564000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"zcorpan: however if you ever make changes that aren't reflected within 24 hours, ping me","msgtype":"m.text"},"ts":1399569574000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Surely the solution to that is to have your thing create a copy of his input, and his thing use the last copy rather than the current file","msgtype":"m.text"},"ts":1399570056000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Er","msgtype":"m.text"},"ts":1399570067000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Your thing create a copy of your input","msgtype":"m.text"},"ts":1399570078000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"it does.","msgtype":"m.text"},"ts":1399570111000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but sometimes i do this:","msgtype":"m.text"},"ts":1399570138000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"1. create edit","msgtype":"m.text"},"ts":1399570141000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"2. regen","msgtype":"m.text"},"ts":1399570142000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"3. edit the edit, but it's in a poorer state now (e.g. bad markup)","msgtype":"m.text"},"ts":1399570159000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"4. go to sleep","msgtype":"m.text"},"ts":1399570161000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if zcorpan triggers a thing then, then you either blow away my step 1 changes, or inject my step 3 changes","msgtype":"m.text"},"ts":1399570187000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i guess i could make a copy of the copy when i regen","msgtype":"m.text"},"ts":1399570203000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'll have to add something like that when i get to that part of my new pipeline","msgtype":"m.text"},"ts":1399570223000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"right now i'm still just building the HTML parser :-)","msgtype":"m.text"},"ts":1399570230000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(only doing it in my free time, so...)","msgtype":"m.text"},"ts":1399570249000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"rebuilding Git on top of svn, one step at a time.","msgtype":"m.text"},"ts":1399570314000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Yeah, it does seem like yor problem would be solved by correct use of a VCS","msgtype":"m.text"},"ts":1399570403000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But in the absence of that, I don't understand why making a copy duing step 2 wouldn't work","msgtype":"m.text"},"ts":1399570431000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"If zcorpan caused a new build it would be based on the step 2 copy","msgtype":"m.text"},"ts":1399570449000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Hixie: What, no test instance or anything?","msgtype":"m.text"},"ts":1399570517000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"i like to live on the edge, man!","msgtype":"m.text"},"ts":1399570539000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"jgraham: yeah, it could work","msgtype":"m.text"},"ts":1399570553000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"anyone know Frederik S (fs⊙oc)'s last name?","msgtype":"m.text"},"ts":1399570960000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"W3C Invites Implementations of W3C DOM4\"","msgtype":"m.text"},"ts":1399570962000,"senderName":"Ms2ger`","senderId":"Ms2ger`@irc"},
{"content":{"body":"Hixie, presumably \"S\"","msgtype":"m.text"},"ts":1399570972000,"senderName":"Ms2ger`","senderId":"Ms2ger`@irc"},
{"content":{"body":"well that's always possible i guess","msgtype":"m.text"},"ts":1399571049000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Fredrik Söderquist","msgtype":"m.text"},"ts":1399571075000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"thanks!","msgtype":"m.text"},"ts":1399571157000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"MikeSmith: you around?","msgtype":"m.text"},"ts":1399571655000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Yeah, drop @global. (I saw you already have, just supporting the decision.)  If we need something like it, we'll define it in Scoping ourselves.","msgtype":"m.text"},"ts":1399574020000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"k. thanks.","msgtype":"m.text"},"ts":1399574031000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"uh","msgtype":"m.text"},"ts":1399575305000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"can someone come up with a demo that shows firefox setting FocusEvent.relatedTarget to something other than 'null'?","msgtype":"m.text"},"ts":1399575323000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, initFocusEvent? :)","msgtype":"m.text"},"ts":1399575479000,"senderName":"Ms2ger`","senderId":"Ms2ger`@irc"},
{"content":{"body":"But smaug____ can probably find a case","msgtype":"m.text"},"ts":1399575760000,"senderName":"Ms2ger`","senderId":"Ms2ger`@irc"},
{"content":{"body":"Is [Constructor((Foo or [EnsureUTF16] DOMString))] valid WebIDL. I think not from reading the spec. Can someone confirm? http://heycam.github.io/webidl/#EnsureUTF16","msgtype":"m.text"},"ts":1399575937000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Hixie: focusin/focusout events","msgtype":"m.text"},"ts":1399576007000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: wow, only for those? not focus/blur?","msgtype":"m.text"},"ts":1399576041000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1399576080000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1399576082000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"sorry","msgtype":"m.text"},"ts":1399576084000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Hixie: in FF focusin/out aren't implemented, and so aren't .relatedTarget setting","msgtype":"m.text"},"ts":1399576103000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"looks at the code still","msgtype":"m.emote"},"ts":1399576160000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"i haven't specced focusin/focusout either","msgtype":"m.text"},"ts":1399576212000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"tobie, isn't, you forgot the argument name </unhelpful>","msgtype":"m.text"},"ts":1399576223000,"senderName":"Ms2ger`","senderId":"Ms2ger`@irc"},
{"content":{"body":"well, some of it is in D3E","msgtype":"m.text"},"ts":1399576242000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Hixie: but yeah, FF doesn't set .relatedTarget to anything useful yet in case of focusevent","msgtype":"m.text"},"ts":1399576270000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"known bug","msgtype":"m.text"},"ts":1399576272000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Ms2ger`: might be helpful, actually. Let me check.","msgtype":"m.text"},"ts":1399576305000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Ms2ger`: so no, that's actually not the issue.","msgtype":"m.text"},"ts":1399576549000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"So is the following WebIDL construct valid? [Constructor((Foo or [EnsureUTF16] DOMString) str)]","msgtype":"m.text"},"ts":1399576611000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I suspect not","msgtype":"m.text"},"ts":1399576709000,"senderName":"Ms2ger`","senderId":"Ms2ger`@irc"},
{"content":{"body":"JakeA: for service worker caches, can you explain why there are so many overloads? Overloads always scare me.","msgtype":"m.text"},"ts":1399576768000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: can only think of URLs vs requests off the top of my head","msgtype":"m.text"},"ts":1399576822000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA:","msgtype":"m.text"},"ts":1399576836000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"But have been drinking so may be forgetting others","msgtype":"m.text"},"ts":1399576849000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"^ sorry, silly irc client.","msgtype":"m.text"},"ts":1399576865000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"smaug____: fascinating","msgtype":"m.text"},"ts":1399576902000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"tobie: s'ok, made me feel popular","msgtype":"m.text"},"ts":1399576909000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"is trying to spec relatedTarget, but it's not clear what exactly it should point to","msgtype":"m.emote"},"ts":1399576931000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"JakeA: having issues with an probably invalid WebIDL construct in SW","msgtype":"m.text"},"ts":1399576934000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Hixie: that part is something D3E tries to spec, to some extent","msgtype":"m.text"},"ts":1399576959000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"JakeA: turns out it's in the cache Domenic_ was just mentioning: https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#cache","msgtype":"m.text"},"ts":1399577040000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"smaug____: the extent of their speccing relatedTarget durin 'blur' is \"event target receiving focus\"","msgtype":"m.text"},"ts":1399577041000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"smaug____: which is great except with iframe and dialog and so on there could be multiple elements in multiple browsing contexts :-)","msgtype":"m.text"},"ts":1399577068000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"smaug____: so... not so helpful in practice","msgtype":"m.text"},"ts":1399577078000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"tobie: hmm, will need to check to see if that's up to date, proposed a lot of change to that API recently","msgtype":"m.text"},"ts":1399577099000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yup, that is still unclear","msgtype":"m.text"},"ts":1399577119000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"must not reveal nodes from other domains","msgtype":"m.text"},"ts":1399577132000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"JakeA: [EnsureUTF16] can be applied to an argument apparently not to a type.","msgtype":"m.text"},"ts":1399577134000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"wonders if webkit or blink does that","msgtype":"m.emote"},"ts":1399577140000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"JakeA: (if I read the WebIDL spec correctly, which frankly, would surprise me.)","msgtype":"m.text"},"ts":1399577157000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"given that they don't have any security checks there based on the JS wrappers","msgtype":"m.text"},"ts":1399577158000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: they seem to only reveal elements from the same document","msgtype":"m.text"},"ts":1399577369000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"e.g. the blur when you blur an element to focus one outside an iframe doesn't have a relatedTarget","msgtype":"m.text"},"ts":1399577395000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i wonder what to do with the one fired at non-elements","msgtype":"m.text"},"ts":1399577440000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"make it Event, like in webkit? make it FocusEvent with no relatedTarget?","msgtype":"m.text"},"ts":1399577451000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"as in, null","msgtype":"m.text"},"ts":1399577460000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what if you move focus from one dialog to another... there's two focus/blur pairs, one for the control in the first dialog and the control in the second dialog, and one for the dialogs","msgtype":"m.text"},"ts":1399577486000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"should the relatedTarget of the controls be null? and the relatedTarget of the dialogs be the dialogs?","msgtype":"m.text"},"ts":1399577501000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what's the use case for relatedTarget?","msgtype":"m.text"},"ts":1399577512000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"JakeA: ah you're right it got better since I last looked. Still don't quite understand how such different objects can be used. Is it just a convenience for cache.whatever(req.url, ...)?","msgtype":"m.text"},"ts":1399577531000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Hixie: use case is to know where the focus is moving from/to","msgtype":"m.text"},"ts":1399577714000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"use case is fine","msgtype":"m.text"},"ts":1399577719000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"may be more useful to know from/to when you're eg. an event listener on document rather than the control itself, and you want to do an animation from the old thing to the new thing or something like that","msgtype":"m.text"},"ts":1399577761000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"smaug____: that's what it gives you, but i mean the use case. Like, why would you use that information.","msgtype":"m.text"},"ts":1399578149000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic_: a url will be converted to a basic GET request. The defaults are defined by the Request constructor. Feedback on this API is very welcome though!","msgtype":"m.text"},"ts":1399578167000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"zewt: hmm, animating from one to the other is an interesting idea","msgtype":"m.text"},"ts":1399578168000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"zewt: though you could do that by just listening to focus events and tracking where you last went","msgtype":"m.text"},"ts":1399578182000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"contrived, not sure i've needed to use relatedTarget myself","msgtype":"m.text"},"ts":1399578184000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"in the case of a dialog you'd probably not want to animate away from one control to the other when changing dialogs","msgtype":"m.text"},"ts":1399578222000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you'd presumably want a per-dialog animation state","msgtype":"m.text"},"ts":1399578229000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what if nothing is focused for a while, then the user focuses something, and you only want to animate for a transition, and not do the animation from something that was focused earlier","msgtype":"m.text"},"ts":1399578230000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"so that argues for relatedTarget staying within its most local scope","msgtype":"m.text"},"ts":1399578239000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"zewt: there's always _something_ focused","msgtype":"m.text"},"ts":1399578251000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you'd need to add a timer to try to guess whether it was a direct transition or if there was some delay, which seems to be the main thing relatedTarget gives you","msgtype":"m.text"},"ts":1399578254000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"JakeA: hmm well I trust you guys have found it important to have a convenient way of doing that, i.e. the convenience of using url instead of `new Request({ url: ... })` outweighs the implicitness.","msgtype":"m.text"},"ts":1399578268000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"JakeA: but I like that there is such an equivalence, i.e. Requests are the \"real\" keys and URLs are just sugar; I was afraid that caches had two kinds of keys","msgtype":"m.text"},"ts":1399578313000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Hixie: it seems like there's nothing focused if I click on text","msgtype":"m.text"},"ts":1399578452000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"the browsing context is focused, at least","msgtype":"m.text"},"ts":1399578466000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(the window has a focus message, but window focus/blur seems independent of element focus/blur)","msgtype":"m.text"},"ts":1399578468000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(which is confusing)","msgtype":"m.text"},"ts":1399578478000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"it's all the same algorithm per the spec these days","msgtype":"m.text"},"ts":1399578481000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"http://www.whatwg.org/specs/web-apps/current-work/#focus-update-steps","msgtype":"m.text"},"ts":1399578486000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it looks distinct from testing in chrome, at least","msgtype":"m.text"},"ts":1399578489000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"that is, i get focus/blur messages for window, and focus/blur messages for my <input type=text>, and i can get focus for both at the same time","msgtype":"m.text"},"ts":1399578515000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"yeah, it's a hieararchy of focus","msgtype":"m.text"},"ts":1399578548000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hierarchy even","msgtype":"m.text"},"ts":1399578561000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i guess i can see that","msgtype":"m.text"},"ts":1399578592000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"that means that if you were trying to track focus yourself (to emulate relatedTarget), you'd need to maintain a stack, which would be brittle","msgtype":"m.text"},"ts":1399578635000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"maintaining it yourself would be a huge pain","msgtype":"m.text"},"ts":1399578666000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"since it can cross iframe boundaries and so on","msgtype":"m.text"},"ts":1399578671000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ok i think the logical thing to do is to only set relatedTarget for the outermost thing that receives the focus/blur events, and then only set it if it's an Element","msgtype":"m.text"},"ts":1399578709000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"outermost things","msgtype":"m.text"},"ts":1399578718000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the last entry in old chains and new chains","msgtype":"m.text"},"ts":1399578734000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"after step 1 has pruned the end of the lists","msgtype":"m.text"},"ts":1399578742000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"weird, no focus event for the iframe itself if focus is inside the iframe (haven't needed that, it's just what i expected to happen)","msgtype":"m.text"},"ts":1399578830000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"yeah teh iframe and its Document are kinda treated as one","msgtype":"m.text"},"ts":1399578943000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i have a capturing listener on window, and if I focus an iframe inside it, the window just gets a blur","msgtype":"m.text"},"ts":1399578972000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"hm actully...","msgtype":"m.text"},"ts":1399578980000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'd have thought i'd get a focus with a target of the iframe","msgtype":"m.text"},"ts":1399578986000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"that may have been one of the things i'm trying to change with that new algorithm","msgtype":"m.text"},"ts":1399578994000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"like how mouseover works","msgtype":"m.text"},"ts":1399578994000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"https://zewt.org/~glenn/foo1.html","msgtype":"m.text"},"ts":1399579036000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"fwiw","msgtype":"m.text"},"ts":1399579038000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Hixie: didn't you keep notes on that?","msgtype":"m.text"},"ts":1399579437000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"the spec is my notes :-)","msgtype":"m.text"},"ts":1399579454000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's easy enough to figure out just by reading the spec, i just didn't read the spec in response to zewt's comment :-)","msgtype":"m.text"},"ts":1399579489000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: with the <link rel=manifest> thing, I need to say that the user agent is not required to \"obtain the resource\" until needed, if ever (e.g., for the purpose of bookmarking). However, the link element has text about delaying the load event of a document until the resource being pointed to is obtained. Clearly, we don't want to delay the load event (as the manifest may never get loaded by the UA). I'm wondering, do we need in HTML a special exte","msgtype":"m.text"},"ts":1399579881000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"rnal link that is low priority (may never be loaded) and that doesn't block the document load event from firing? The same could apply to <link rel=icon> - as those resources may never be loaded by the browser until needed.","msgtype":"m.text"},"ts":1399579882000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"marcosc: the spec doesn't say that it delays the load event until the resource is obtained","msgtype":"m.text"},"ts":1399580078000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"marcosc: it says it delays the load event \"until all the attempts to obtain the resource and its critical subresources are complete\"","msgtype":"m.text"},"ts":1399580088000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"marcosc: if you don't begin an attempt, the load event isn't delayed","msgtype":"m.text"},"ts":1399580097000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1399580104000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"indeed the very same paragraph explicitly says:","msgtype":"m.text"},"ts":1399580111000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"Resources that the user agent has not yet attempted to obtain, e.g. because it is waiting for the resource to be needed, do not delay the load event.\"","msgtype":"m.text"},"ts":1399580119000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's literally the next sentence","msgtype":"m.text"},"ts":1399580137000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Sorry, got stuck on that sentence","msgtype":"m.text"},"ts":1399580161000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"see http://www.whatwg.org/specs/web-apps/current-work/#link-type-stylesheet for wording for how to trigger that stuff","msgtype":"m.text"},"ts":1399580165000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ok, awesome, then I think we are good.","msgtype":"m.text"},"ts":1399580194000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"interestingly, rel=icon doesn't ever say to obtain anything, heh","msgtype":"m.text"},"ts":1399580215000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1399580223000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"I noticed that","msgtype":"m.text"},"ts":1399580236000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1399580238000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"manifest and icon are pretty much the same","msgtype":"m.text"},"ts":1399580282000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"hi abarth, we’re trying to nail down the origin of blob: URLs and data: URLs (that’s https://www.w3.org/Bugs/Public/show_bug.cgi?id=24998 but specifically http://lists.w3.org/Archives/Public/public-webapps/2014JanMar/0682.html).","msgtype":"m.text"},"ts":1399581569000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"hi","msgtype":"m.text"},"ts":1399581585000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1399581586000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"have you nailed down the syntax of blob URLs?","msgtype":"m.text"},"ts":1399581603000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"Yes, the syntax of a blob: URL is probably nailed down.","msgtype":"m.text"},"ts":1399581621000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"Currently we’ve pegged the origin of the blob: URL to the origin of the incumbent settings object","msgtype":"m.text"},"ts":1399581641000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"But we can’t gather that *from* the blob: URL alone.","msgtype":"m.text"},"ts":1399581656000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"If you’ve got opinions on how we should fix this, and whether we should do the same thing for data: URLs as for blob: URLs, either of those two (email or bug) would be good places to weigh in :-)","msgtype":"m.text"},"ts":1399581764000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"what does a blob URL look like?","msgtype":"m.text"},"ts":1399582237000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"can you give me an example of one?","msgtype":"m.text"},"ts":1399582245000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"I ask because last time I studied this problem, different browsers used different syntax for blob URLs","msgtype":"m.text"},"ts":1399582276000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"which made the more complex problems intractable","msgtype":"m.text"},"ts":1399582282000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"well, you inherently can't get the origin of a blob url if it's revoked","msgtype":"m.text"},"ts":1399582305000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"abarth: though, since blob URLs have no meaning and there should never be any blob URLs stored anywhere, it might be possible to change that (even though the feature is already out there)","msgtype":"m.text"},"ts":1399582337000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(not that that's necessarily the right thing to do)","msgtype":"m.text"},"ts":1399582347000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: those statements depend on the syntax of blob URLs","msgtype":"m.text"},"ts":1399582380000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"there is no syntax, right? it's just blob: + undefined data (that usually looks random)","msgtype":"m.text"},"ts":1399582414000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"abarth: there is none! what you see is an ill-uu-u-u-sion","msgtype":"m.text"},"ts":1399582430000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"since the data has no meaning to scripts, you could change that to \"blob: + origin + arbitrary data\" (or blob: + sha1(origin) + data\" or something) without breakage","msgtype":"m.text"},"ts":1399582473000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: right, it's the \"undefined data\" part that's problematic","msgtype":"m.text"},"ts":1399582505000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"well, there is a syntax in that we do blob: + schemeid with schemeid typically being a UUID","msgtype":"m.text"},"ts":1399582508000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"who does that?","msgtype":"m.text"},"ts":1399582520000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"i'm happy to discuss a security model for blobs once folks agree on a syntax for blob URLs","msgtype":"m.text"},"ts":1399582520000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"that doesn't involve leaving platform-visible strings as implementation-defined","msgtype":"m.text"},"ts":1399582533000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"arunranga: individual implementations might have some pattern (like always looking like a UUID), but hopefully nobody's embedding info the web might be depending on","msgtype":"m.text"},"ts":1399582550000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: that hope seems wildly optimistic to me","msgtype":"m.text"},"ts":1399582564000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"abarth: maybe, but I'm not sure I can contrive a way people might be depending on that","msgtype":"m.text"},"ts":1399582589000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(Chrome annotates the blob: URL sometimes so that it looks like this — blob:http://google.com[uuid]","msgtype":"m.text"},"ts":1399582592000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":")","msgtype":"m.text"},"ts":1399582594000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"yuck","msgtype":"m.text"},"ts":1399582600000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"slightlyoff: which file am I supposed to edit to modify the WebIDL in SW?","msgtype":"m.text"},"ts":1399582601000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Not sometimes/ all the time","msgtype":"m.text"},"ts":1399582603000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"I don’t like it :(","msgtype":"m.text"},"ts":1399582611000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"indeed yuck","msgtype":"m.text"},"ts":1399582615000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"hence the ability to get the origin of a revoked blob URL","msgtype":"m.text"},"ts":1399582616000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"And I wish they didn't","msgtype":"m.text"},"ts":1399582616000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"slightlyoff: and in which branch?","msgtype":"m.text"},"ts":1399582621000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"wishing and ponies","msgtype":"m.text"},"ts":1399582623000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"Fx doesn’t do it","msgtype":"m.text"},"ts":1399582625000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"that's a terrible syntax","msgtype":"m.text"},"ts":1399582627000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"that's not necessarily a bad way to do it, but it's bad to put data inside blob URLs that people might look at and go \"hey, I can parse info out of that\", if only one vendor is doing it","msgtype":"m.text"},"ts":1399582641000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"you should standardize a different syntax just to spite them","msgtype":"m.text"},"ts":1399582650000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"zewt: this has all been discussed before","msgtype":"m.text"},"ts":1399582652000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"one with a : in it","msgtype":"m.text"},"ts":1399582653000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"after the origin","msgtype":"m.text"},"ts":1399582659000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"and each vendor appears entrenched in their position","msgtype":"m.text"},"ts":1399582661000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"abarth: that's nice :)","msgtype":"m.text"},"ts":1399582663000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"abarth, zewt: what if this was what it looked like: http://dev.w3.org/2006/webapi/FileAPI/#DefinitionOfScheme","msgtype":"m.text"},"ts":1399582684000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"If we agreed on that (big if) could you suggest an origin ?","msgtype":"m.text"},"ts":1399582701000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"there is no such thing as an opaque string","msgtype":"m.text"},"ts":1399582703000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"strings in JavaScript are not opaque","msgtype":"m.text"},"ts":1399582711000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"they're sequences of characters","msgtype":"m.text"},"ts":1399582717000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"hence the lie","msgtype":"m.text"},"ts":1399582720000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"abarth, the idea was unguessable.","msgtype":"m.text"},"ts":1399582756000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"the participants in the working group did not agree on a syntax","msgtype":"m.text"},"ts":1399582773000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"which is why the spec is vague","msgtype":"m.text"},"ts":1399582778000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"and why this area of the platform is a mess","msgtype":"m.text"},"ts":1399582783000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"abarth, agreed","msgtype":"m.text"},"ts":1399582791000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"Yay, consensus","msgtype":"m.text"},"ts":1399582793000,"senderName":"Ms2ger`","senderId":"Ms2ger`@irc"},
{"content":{"body":"I assume \"opaque\" means something like \"the meaning is not in the characters\"","msgtype":"m.text"},"ts":1399582793000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: that's not what it means","msgtype":"m.text"},"ts":1399582804000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"\"opaque\" should mean at least \"there's nothing users can try to parse out of this\"","msgtype":"m.text"},"ts":1399582819000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"anyway, as I wrote above, I'm happy to talk with you about a security model after you get folks to agree on a syntax for the URLs","msgtype":"m.text"},"ts":1399582825000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"abarth, on syntax: is UUID a bad idea ?","msgtype":"m.text"},"ts":1399582827000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"which blob:http://google.com fails at","msgtype":"m.text"},"ts":1399582832000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"arunranga: I'm not the person you need to convince about the syntax","msgtype":"m.text"},"ts":1399582839000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"I don't care at all beyond that it needs to be interoperable","msgtype":"m.text"},"ts":1399582850000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"that said, i'm not sure why the origin would be in the URL","msgtype":"m.text"},"ts":1399582850000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"the current situation isn't remotely interoperable","msgtype":"m.text"},"ts":1399582857000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"abarth, the history of this is that Darin didn’t want a restriction to UUID","msgtype":"m.text"},"ts":1399582857000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"darin -> fishd ?","msgtype":"m.text"},"ts":1399582867000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"you have a live registry somewhere of blob URLs -> blobs; store it in there (means you can't get the origin after the blob URL is revoked, but that shouldn't matter)","msgtype":"m.text"},"ts":1399582872000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"abarth, yep :( But Hixie’s formulation effectively made it UUID","msgtype":"m.text"},"ts":1399582888000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"yes, the history is that people did not agree on a syntax","msgtype":"m.text"},"ts":1399582891000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"that does not match reality","msgtype":"m.text"},"ts":1399582900000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"abarth, OK. I’ll file bugs to not make claims that are misleading like “opaque” but if we insisted on UUID, so that it was something like blob:UUID, would we be better off?","msgtype":"m.text"},"ts":1399582954000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"arunranga: won't help unless chrome people can be convinced to get the origin out of the URLs","msgtype":"m.text"},"ts":1399583077000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I think we should roll up the sleeves and try and sort this out. It’s hard, but that’s why I’m pestering abarth","msgtype":"m.text"},"ts":1399583110000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"hmm, won't that make debugging harder?","msgtype":"m.text"},"ts":1399583111000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":":-)","msgtype":"m.text"},"ts":1399583118000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"i don't think it's necessarily bad to put the origin in there like that, it's just bad that one vendor decided to do that","msgtype":"m.text"},"ts":1399583144000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: I don't think you're going to get very far in this discussion if you use biased language like that","msgtype":"m.text"},"ts":1399583186000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"sounds like this whole discussion upsets you, but that's not my fault :)","msgtype":"m.text"},"ts":1399583209000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"abarth, actually the thinking was that since the blob: URL is never *seen* and only passed around, what it actually looked like wasn’t important.","msgtype":"m.text"},"ts":1399583275000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"abarth, I tended to agree with that thinking, but it’s clear that if we want to evolve an origin concept for blob:, we need more syntax clarity","msgtype":"m.text"},"ts":1399583298000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"arunranga: only if the origin comes by parsing the URL, but since blob URLs have a live registry, is that really the case?","msgtype":"m.text"},"ts":1399583343000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"abarth, the question is: is there a really good implementation reason for “tagging” the blob:UUID model with more info, such as some implementations do? If not, we could stick to something like blob:UUID.","msgtype":"m.text"},"ts":1399583364000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"But this is probably not a convo solved in IRC alone, so I’ll take it to the lists!","msgtype":"m.text"},"ts":1399583377000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"arunranga, abarth: I think syntax for blob: depends on what we decide about origins for blob:","msgtype":"m.text"},"ts":1399584148000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"if blob: URIs have an implicit origin, like http: does, and unlike data:, then I think it might be valuable to stick that origin inside the URI","msgtype":"m.text"},"ts":1399584193000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"but if blob: act more like data:, then obviously that does not make sense","msgtype":"m.text"},"ts":1399584217000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"so I think our first step here is to figure out a good story for data:","msgtype":"m.text"},"ts":1399584247000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"since without that I don't think we can answer the question of \"should blob: act like data:\"","msgtype":"m.text"},"ts":1399584263000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Tobie: spec/service_worker/index.html in master","msgtype":"m.text"},"ts":1399584460000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"slightlyoff: with all the crazy inline urls and such?","msgtype":"m.text"},"ts":1399584487000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"slightlyoff: I'd want to edit some of the WebIDL","msgtype":"m.text"},"ts":1399584513000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"(sorry, had to run off---back now)","msgtype":"m.text"},"ts":1399584522000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"slightlyoff: and it seems like it's generated from something.","msgtype":"m.text"},"ts":1399584534000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Going to fix via the framework shortly","msgtype":"m.text"},"ts":1399584536000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"Hand rolled","msgtype":"m.text"},"ts":1399584550000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"arunranga: blob URLs are exposed to web sites, which mean we can't have them be implementation-defined","msgtype":"m.text"},"ts":1399584552000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"oh, my,","msgtype":"m.text"},"ts":1399584557000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"What about using a tool that already works?","msgtype":"m.text"},"ts":1399584571000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"hides","msgtype":"m.emote"},"ts":1399584579000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"sicking: in chrome, a blob URI is bound to an origin","msgtype":"m.text"},"ts":1399584609000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"abarth: in gecko too","msgtype":"m.text"},"ts":1399584622000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"tobie, nah, not cool","msgtype":"m.text"},"ts":1399584627000,"senderName":"Ms2ger`","senderId":"Ms2ger`@irc"},
{"content":{"body":"the difference is just that chrome writes that origin in the syntax of the blob URI","msgtype":"m.text"},"ts":1399584640000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"abarth: we just don't stick that origin in the actual URI. It's just kept in an internal hash","msgtype":"m.text"},"ts":1399584647000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Ms2ger`: the hiding part?","msgtype":"m.text"},"ts":1399584649000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1399584651000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":":P","msgtype":"m.text"},"ts":1399584654000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"seriously, slightlyoff, just use Respec or Anolis. You will spend just as long rolling out your own spec generation thing as you will on the spec.","msgtype":"m.text"},"ts":1399584665000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"I never understood why it's problematic to write that origin in the URI","msgtype":"m.text"},"ts":1399584675000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"slightlyoff: It also makes it easier for people to contribute/review the spec.","msgtype":"m.text"},"ts":1399584690000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"all the coolest spec editors roll their own infrastructure","msgtype":"m.text"},"ts":1399584694000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"abarth: i'm happy to go with the chrome approach if we do decide that blob:s should have a bound origin (which I think it should)","msgtype":"m.text"},"ts":1399584694000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"tobie, existing tools","msgtype":"m.text"},"ts":1399584720000,"senderName":"Ms2ger`","senderId":"Ms2ger`@irc"},
{"content":{"body":"abarth: i'm slightly uncomfortable with the \"nested URI\" aspect of it. But that is probably solvable","msgtype":"m.text"},"ts":1399584741000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"abarth, sicking: here’s a real world example. This is exactly what Chrome does (I coined it in the dev console) blob:http%3A//aaww.org/9efd7ba9-b707-4262-ab0d-6a395be173f1","msgtype":"m.text"},"ts":1399584757000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"yeah, I wanted to base64 encode it or something","msgtype":"m.text"},"ts":1399584758000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"but there was some reason why someone didn't want to do that","msgtype":"m.text"},"ts":1399584766000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"if you don't put the origin in the syntax","msgtype":"m.text"},"ts":1399584798000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"sicking, are you uncomf because of information leak?","msgtype":"m.text"},"ts":1399584799000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"you have to decide what happens when someone outside your origin tries to use the URI","msgtype":"m.text"},"ts":1399584808000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"arunranga: no, just implementation issues","msgtype":"m.text"},"ts":1399584814000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"if its in the syntax, you can just reject it syntatically","msgtype":"m.text"},"ts":1399584821000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"slightlyoff: so is editing those by hand worthwhile at present?","msgtype":"m.text"},"ts":1399584887000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Hixie: don't encourage him","msgtype":"m.text"},"ts":1399584890000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"(of course, Fx follows the spec exactly — here’s a blob: URL minted in Fx’s console): blob:2b87eebc-d9ef-954f-a61f-7263e17fba4d)","msgtype":"m.text"},"ts":1399584894000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"imho editors should work with whatever infrastructure they are most comfortable with","msgtype":"m.text"},"ts":1399584922000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if that means rolling your own, then why not?","msgtype":"m.text"},"ts":1399584933000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i mean, there's a reason so many of us have done this","msgtype":"m.text"},"ts":1399584951000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, crap. I always knew I wasn’t cool. I just used rberjon’s infrastructure","msgtype":"m.text"},"ts":1399584954000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"arunranga: if that's what makes you the most productive, seems good to me","msgtype":"m.text"},"ts":1399585002000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"abarth: anyhow, I think the first step here is to figure out security model for data:. I think what we discssued last time has a lot of potential. We should let Anne know about it","msgtype":"m.text"},"ts":1399585004000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"i used to use bert's","msgtype":"m.text"},"ts":1399585006000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"now i use gsnedders'","msgtype":"m.text"},"ts":1399585012000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"soonish i'll use mine :-)","msgtype":"m.text"},"ts":1399585017000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"abarth: once we've figured out data:, we can figure out if we want to reuse that for blob: (I think we won't want to)","msgtype":"m.text"},"ts":1399585028000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking, abarth: why not just formalize what Chrome is doing, since we think there’s merit in origin extraction from the URL syntax?","msgtype":"m.text"},"ts":1399585064000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"arunranga: if you can convince anne that that's the right thing to do, then i'm all for it","msgtype":"m.text"},"ts":1399585084000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: if you want to wait for data to be sorted out, you're going to have to wait a long time :(","msgtype":"m.text"},"ts":1399585114000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"Hixie: it's a common tradeoff: either favor external contributions or personal speed.","msgtype":"m.text"},"ts":1399585142000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"sicking: it's just a lot of engineering to change Blink to support a different security model for data","msgtype":"m.text"},"ts":1399585145000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"sicking, abarth, convincing annevk takes a long time sometimes too","msgtype":"m.text"},"ts":1399585149000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"arunranga: or maybe just a few beers :)","msgtype":"m.text"},"ts":1399585179000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"knew the pros had a trick up their sleeves","msgtype":"m.emote"},"ts":1399585200000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"abarth: If you don't think we'll settle data: for a long time, that's enough of an argument for me that we shouldn't use the same thing for blob:","msgtype":"m.text"},"ts":1399585250000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"arunranga: so I think that means that we should spec the Chrome behavior","msgtype":"m.text"},"ts":1399585290000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"I believe the chrome behavior is as follows:","msgtype":"m.text"},"ts":1399585331000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"though people should feel free to fight things out about the syntax (%3A vs. : vs. whatever)","msgtype":"m.text"},"ts":1399585335000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"tobie: imho editors should never accept contributions in the form of patches, they should make sure they've written all the text themselves so that they're intimately familiar with it. so i don't think it's that much of a trade-off.","msgtype":"m.text"},"ts":1399585342000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"tobie: the infrastructure doesn't affect contribution speed in the form of bug reports.","msgtype":"m.text"},"ts":1399585358000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"1) you're only allowed to kick off requests for blob URIs that syntatically have the origin of the incumbent script","msgtype":"m.text"},"ts":1399585364000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"2) when loading a blob URI in a browsing context, the origin of the new document is the origin that's syntatically embedded in the URI","msgtype":"m.text"},"ts":1399585396000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"abarth: does 1) apply even in sitatuions where you normally can do cross-origin loads? Like for <img>?","msgtype":"m.text"},"ts":1399585401000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1399585406000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1399585411000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sounds good to me","msgtype":"m.text"},"ts":1399585413000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"ship it!","msgtype":"m.text"},"ts":1399585425000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"this is same as what gecko does, just different syntax","msgtype":"m.text"},"ts":1399585437000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"but i like chrome's syntax more","msgtype":"m.text"},"ts":1399585461000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"the syntax is important in our implementation because the decision can all be made locally","msgtype":"m.text"},"ts":1399585473000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"without race conditions or global synchronization","msgtype":"m.text"},"ts":1399585484000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1399585491000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"which is why I like it :)","msgtype":"m.text"},"ts":1399585495000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"abarth, 1) matches the spec today absent syntax but 2) seems a bit laxer","msgtype":"m.text"},"ts":1399585508000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"agreed if that's your modus operandi. I drank the forking kool-aid, so patches just seem like a much more natural (and polite) way of interacting.","msgtype":"m.text"},"ts":1399585532000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Uhh, no. I take that back.","msgtype":"m.text"},"ts":1399585588000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"The only thing is syntax","msgtype":"m.text"},"ts":1399585597000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"abarth: out of curiosity, is there a reason that for filesystem: you do filesystem:http://example.com/whatnot, but for blob: you do blob:http%3Aexample.com/whatnot?","msgtype":"m.text"},"ts":1399585609000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"^^ good question","msgtype":"m.emote"},"ts":1399585631000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"abarth: not ':' vs '%3A' after the http","msgtype":"m.text"},"ts":1399585643000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"note*","msgtype":"m.text"},"ts":1399585650000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"dunno, that seems a bit crazy","msgtype":"m.text"},"ts":1399585717000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"tobie: right. like i said, editors should use whatever they prefer. If they want something that enables them to take patches easily, then obviously they should bear that in mind in their infrastructure selection.","msgtype":"m.text"},"ts":1399585725000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sicking: I suspect we could change the blob one to match filesystem","msgtype":"m.text"},"ts":1399585738000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"abarth: I *think* there might be URL-parser-sanity reasons to pick one over the other. I don't know which is preferable though","msgtype":"m.text"},"ts":1399585770000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"i guess you guys would have a harder time changing filesystem:?","msgtype":"m.text"},"ts":1399585781000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":":(","msgtype":"m.text"},"ts":1399585783000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"I bet there's content that does \"filesystem:\" + location.origin + \"/path/to/my/file\"","msgtype":"m.text"},"ts":1399585890000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1399585898000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"it matches what gecko does for jar","msgtype":"m.text"},"ts":1399585916000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"you'll have to add + \"temporary/\" in there though","msgtype":"m.text"},"ts":1399585916000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"yeah, though jar handling has been a source of a lot of complexity","msgtype":"m.text"},"ts":1399585935000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"i'd like to avoid having that get onto the web","msgtype":"m.text"},"ts":1399585955000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"jar handling is a good example of, um, something that has had to be rethought because of, um, unforeseen implications?","msgtype":"m.text"},"ts":1399586000000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"does %3A vs : make that big a difference? Maybe only for clarity.","msgtype":"m.text"},"ts":1399586640000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"arunranga: I don't know. I suspect that it doesn't make a big difference but we should check if it matter parsing-wise","msgtype":"m.text"},"ts":1399586779000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1399586834000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"the filesystem:http://dot.com/foo system is more legible, and I have a slight preference for it","msgtype":"m.text"},"ts":1399586866000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"it would need to work for the pattern abarth gave above, and if it needs to work anyway, may as well output it too?","msgtype":"m.text"},"ts":1399588114000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"who wants to clarify something for me so that I don't have to dig through specs to find an answer?","msgtype":"m.text"},"ts":1399592301000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"is a worker supposed to resolve urls from the same base as the context which created the worker, or does it have its own base based on its url","msgtype":"m.text"},"ts":1399592336000,"senderName":"caitp","senderId":"caitp@irc"}
]