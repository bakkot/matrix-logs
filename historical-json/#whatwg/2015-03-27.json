[
{"content":{"body":"krijnhoetmer: http://www.downforeveryoneorjustme.com/http://krijnhoetmer.nl/irc-logs/whatwg","msgtype":"m.text"},"ts":1427438575000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hsivonen: I have mentioned to the Servo people several times that document.write is non-trivial to implement","msgtype":"m.text"},"ts":1427444701000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Hopefully kmc will work on it in Q2 or something, but I'm not sure","msgtype":"m.text"},"ts":1427444723000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"JakeA: my main concern now with your cancelable promises proposal is that Domenic doesn't like it","msgtype":"m.text"},"ts":1427445614000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: that doesn't bode well for standardizing it","msgtype":"m.text"},"ts":1427445621000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, if Domenic doesn't like it, it's probably wrong :D - will chat with him later and find out why","msgtype":"m.text"},"ts":1427446126000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"GitHub seems super slow or something is wrong with my network...","msgtype":"m.text"},"ts":1427446246000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Could always add .abort() to the return promise but not any additional promises. The token solution is soooooo ugly, I'm surprised it has so much backing","msgtype":"m.text"},"ts":1427446254000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Nah, just GitHub","msgtype":"m.text"},"ts":1427446255000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: they're being ddos'd","msgtype":"m.text"},"ts":1427446268000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"https://twitter.com/githubstatus/status/581372857353154560?s=09","msgtype":"m.text"},"ts":1427446319000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Okay, I guess I'll wait a bit then","msgtype":"m.text"},"ts":1427446322000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: yeah, that's the terminate() idea, while reserving the names abort() / cancel() for future efforts","msgtype":"m.text"},"ts":1427446360000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not super elegant, but does seem better than the token thing, agreed","msgtype":"m.text"},"ts":1427446401000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I heard it through the grapevine that \"Upgrade Insecure Requests\" support may be landing soon","msgtype":"m.text"},"ts":1427446696000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"if so that's a pretty amazing success story of going from \"gleam in someone's eye\" to shipping feature in record short time","msgtype":"m.text"},"ts":1427446710000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Ooh, I think I'll introduce \"redirect mode\"","msgtype":"m.text"},"ts":1427446992000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"With \"follow\", \"error\", and \"manual\", and expose only the first two to script","msgtype":"m.text"},"ts":1427447026000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: re media key event targeting, I think it's the element that should request the global lock for media key events","msgtype":"m.text"},"ts":1427451177000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: makes sense","msgtype":"m.text"},"ts":1427451283000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: If background sync is split into .sync and .periodicSync, we should probably have separate ServiceWorker events","msgtype":"m.text"},"ts":1427456377000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yeah I think that would make sense","msgtype":"m.text"},"ts":1427457412000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: they are quite distinct and can have completely different UI flows too","msgtype":"m.text"},"ts":1427457426000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: agreed, different use-cases too","msgtype":"m.text"},"ts":1427457468000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"x => y is such a convenient way to write a function","msgtype":"m.text"},"ts":1427460110000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, I hope that quells some of the complaints about testharness.js being too verbose","msgtype":"m.text"},"ts":1427460807000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"being old and cranky code reviewer thinks => is good for writing code, but bad for reading it","msgtype":"m.emote"},"ts":1427462273000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"luckily I review .js very rarely","msgtype":"m.text"},"ts":1427462297000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(except tests)","msgtype":"m.text"},"ts":1427462315000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I only use \"function\" when it's the only way to create a named function, or for when I want the \"this\" value to change, which is rarely","msgtype":"m.text"},"ts":1427463687000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: I realise you've gone through this a ton of times, but could you explain why cancellable promises are bad? A link will do","msgtype":"m.text"},"ts":1427467374000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: response.body.cancel() is shipped?","msgtype":"m.text"},"ts":1427471400000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: hmm, yeah, misleading wording. I mean it's in Canary","msgtype":"m.text"},"ts":1427471424000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: Thanks for pointing that out","msgtype":"m.text"},"ts":1427471431000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Updated the post","msgtype":"m.text"},"ts":1427471459000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I guess it was more I didn't realize .cancel() was on ReadableStream","msgtype":"m.text"},"ts":1427471504000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"but I'm happy to be the pedantic police too :-)","msgtype":"m.text"},"ts":1427471522000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yep! https://streams.spec.whatwg.org/#rs-class","msgtype":"m.text"},"ts":1427471529000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: so, what happens if someone does cache.put(req, resp).then(function () { resp.body.cancel(); })?","msgtype":"m.text"},"ts":1427471612000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"and the cancel fires before the body is written to the cache","msgtype":"m.text"},"ts":1427471627000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"\"If IsReadableStreamLocked(this) is true, return a promise rejected with a TypeError exception.\"","msgtype":"m.text"},"ts":1427471658000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I imagine the cache has a lock","msgtype":"m.text"},"ts":1427471674000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yea... I guess they would just have to do cache.delete(req) and then eat the wasted bandwidth usage?","msgtype":"m.text"},"ts":1427471724000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: seems like it could do whatever Cache is supposed to do if the network errors out while getting the body, but after headers have been committed to cache","msgtype":"m.text"},"ts":1427471773000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: Unless .put returns *jazz hands* a cancellable promise","msgtype":"m.text"},"ts":1427471776000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(which I don't currently understand)","msgtype":"m.text"},"ts":1427471781000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: I don't think cancellable promise helps here... since we changed Cache.put() to resolve that promise before the body is written to disk","msgtype":"m.text"},"ts":1427471805000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"right?","msgtype":"m.text"},"ts":1427471814000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Good point","msgtype":"m.text"},"ts":1427471814000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I suppose we could make Cache.put() promise resolve with another promise representing body completion","msgtype":"m.text"},"ts":1427471852000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Very nice that document.URL and document.documentURI are made compatible in Chrome","msgtype":"m.text"},"ts":1427471874000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: a promise can't resolve with a promise, but it could be an object with a promise hanging off it I guess","msgtype":"m.text"},"ts":1427471902000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"no?  hmm","msgtype":"m.text"},"ts":1427471919000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"that seems a weird restriction","msgtype":"m.text"},"ts":1427471962000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: has chrome implemented committing to Cache when headers are available?","msgtype":"m.text"},"ts":1427472022000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: if you resolve a promise with a promise, it unwraps the promise and resolves with the underlying value. Eg Promise.resolve(fetch(url)) resolves with a response, not a fetchPromise","msgtype":"m.text"},"ts":1427472094000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I see... I guess that makes sense","msgtype":"m.text"},"ts":1427472126000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: ummmm, I'm not completely sure to be honest. We *should* have","msgtype":"m.text"},"ts":1427472127000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I'm still hazy on what Cache is supposed to do on network error when writing the body","msgtype":"m.text"},"ts":1427472144000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I should try to decipher that part of the spec I suppose","msgtype":"m.text"},"ts":1427472153000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"although I think it might not be spec'd... since it just says \"may commit when headers available\" and async body writing is not even really mentioned anywhrere else","msgtype":"m.text"},"ts":1427472197000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"so I was curious what chrome did today","msgtype":"m.text"},"ts":1427472207000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"hmm... seems the spec only does early resolve for add()... not put()","msgtype":"m.text"},"ts":1427472261000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"oh... nm","msgtype":"m.text"},"ts":1427472273000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: wrote an issue: https://github.com/slightlyoff/ServiceWorker/issues/665","msgtype":"m.text"},"ts":1427472440000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: Cheers!","msgtype":"m.text"},"ts":1427472736000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I have to admit... from a purely abstract point of view it seems to make more sense to make the thing producing the Promise to have cancel then on the Promise itself","msgtype":"m.text"},"ts":1427472935000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"but my eyes also glaze over when trying to read that github issue","msgtype":"m.text"},"ts":1427472950000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I don't think Domenic likes it, which probably means there's a big flaw with it that I haven't seen yet","msgtype":"m.text"},"ts":1427473904000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: it just seems that a \"promise of future behavior\" conceptually does not grant control over anything... its just a notification mechanism","msgtype":"m.text"},"ts":1427474000000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yeah, I get that a cancellable promise breaks that, but I'm not sure why it's a problem in this case.","msgtype":"m.text"},"ts":1427474159000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yea... I meant from a theoretical abstract point of view... I guess you are proposing that Promises \"forget\" the operation and a cancel occurs if they all forget?","msgtype":"m.text"},"ts":1427474382000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"from the talk about ref counts","msgtype":"m.text"},"ts":1427474389000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yeah, if all cancellable children enter a cancelled state, as should the parent","msgtype":"m.text"},"ts":1427474468000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"but you can have some children that are not cancellable?","msgtype":"m.text"},"ts":1427474499000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: Promise.resolve(cancellablePromise) creates a non-cancellable child","msgtype":"m.text"},"ts":1427474532000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: seems like many people may not understand this distinction...","msgtype":"m.text"},"ts":1427474591000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: don't get me wrong... I want cancellable fetch too... but this seems like footgun territory","msgtype":"m.text"},"ts":1427474680000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Do we really want cancelable fetch? I'm personally curious if we can set a record in developer table flipping.","msgtype":"m.text"},"ts":1427475302000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: you know... April 1 is coming up... you could have some fun here","msgtype":"m.text"},"ts":1427475507000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Tell people that we heard they wanted cancellble fetch, so we cancelled fetch and they will have to use XHR instead.","msgtype":"m.text"},"ts":1427475556000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"fetch has been renamed XHR2","msgtype":"m.text"},"ts":1427475575000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"slowclap","msgtype":"m.text"},"ts":1427475576000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it's potentially a big deal for mobile","msgtype":"m.text"},"ts":1427475594000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"How does fetch work wrt HTTP2 server push?","msgtype":"m.text"},"ts":1427475667000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: image you are using fetch() to stream https://github.com/whatwg/fetch/issues/27 and want to stop reading because its never ending... how do you cancel the fetch?","msgtype":"m.text"},"ts":1427475738000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"gsnedders: can't tell if joke or honest question","msgtype":"m.text"},"ts":1427475775000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mine was a joke","msgtype":"m.text"},"ts":1427475789000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: semi-serious. what happens if the server initates another response in response to the request? is it just assumed the UA cancels it?","msgtype":"m.text"},"ts":1427476045000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: it would just be used for the next identical request afaik","msgtype":"m.text"},"ts":1427476080000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: push stuff is handled by the network layer / network cache","msgtype":"m.text"},"ts":1427476117000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I thought normally some stuff crossed that boundary, but I could be misremembering","msgtype":"m.text"},"ts":1427476158000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: if that actually happened that would mean every context we know would be affected, no?","msgtype":"m.text"},"ts":1427476321000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: that would not be a great upgrade of the network layer","msgtype":"m.text"},"ts":1427476344000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(not saying we could not do something with push if we wanted to at some point)","msgtype":"m.text"},"ts":1427476358000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I thought there were interactions with the pre-parser in most impls, but idk. Obviously just cancelling it immediately or just caching it in case it's requested are plausible.","msgtype":"m.text"},"ts":1427476442000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: the same, your main payload will come in, and push will be cached","msgtype":"m.text"},"ts":1427479364000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i assume it doesn't do sorcery... but I could be wrong","msgtype":"m.text"},"ts":1427479383000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"wanderview: I think you're right btw, normal promises should count as refs","msgtype":"m.text"},"ts":1427481114000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: it does seem not being able to cancel .json()/.text()/etc reduces their utility","msgtype":"m.text"},"ts":1427485166000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"you basically can't use them if you think you might need to cancel the stream","msgtype":"m.text"},"ts":1427485182000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: why do streams require the lock in order to cancel?","msgtype":"m.text"},"ts":1427485222000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Lots of scrollback here, not sure how much of it I can reply to on my iPad…","msgtype":"m.text"},"ts":1427486339000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Streams required lock in order to cancel because if you have a lock then nobody should be able to interfere with you.","msgtype":"m.text"},"ts":1427486383000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"We envision .json() etc., as well as pipeTo, returning cancellable promises (I.e., supporting cancellation tokens)","msgtype":"m.text"},"ts":1427486429000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: the main thing that immediately made me flinch from your proposal is that it treats cancel on the same ground as fulfill and reject. I don't think it's at all analogous. It would need to be separated, for sure.","msgtype":"m.text"},"ts":1427486483000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: thanks","msgtype":"m.text"},"ts":1427486529000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: although I'm not sure I see cancel in the same light as other operations on the stream... even if you have a lock it seems the source could encounter an error and cancel() is just one type of error","msgtype":"m.text"},"ts":1427486586000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Cancellable promises are not bad, but we don't want to give out the ability to cancel to everyone who holds the promise. It's probably ok though for some types of operations to return a promise while also returning the capability to cancel itself, as long as that's not baked in to all promises ever","msgtype":"m.text"},"ts":1427486640000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wanderview: well cancel() makes things closed, not errored, but yes, I agree. That's a big capability leak though. The same reason we don't have p.resolve() / p.reject(), instead reserving those for the creator","msgtype":"m.text"},"ts":1427486715000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Not exactly the same, but the same category of hazard","msgtype":"m.text"},"ts":1427486767000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"hmm, ok","msgtype":"m.text"},"ts":1427486777000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I agree it's not immediately clear and could perhaps be a judgment call. But the only reason I wanted it was to be able to cancel pipes/json/etc. and then I realized those should just be cancelable promises","msgtype":"m.text"},"ts":1427486863000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I guess its confused in the github issue because the world where you would use body.cancel() does not contain cancelable promises...  I mean, they are being discussed as alternatives to one another","msgtype":"m.text"},"ts":1427487046000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"O_o","msgtype":"m.text"},"ts":1427487267000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"How do you cancel before the headers arrive then","msgtype":"m.text"},"ts":1427487281000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: some fetch extension or something","msgtype":"m.text"},"ts":1427487297000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I unsubbed from the issue btw","msgtype":"m.text"},"ts":1427487300000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: but put cancelation on the source, not the promise","msgtype":"m.text"},"ts":1427487314000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Well I mean you could use the same mechanism for cancelling .json etc.","msgtype":"m.text"},"ts":1427487357000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"When I say \"cancelable promise\" I don't necessarily mean a promise with a .cancel() method","msgtype":"m.text"},"ts":1427487381000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I should probably just defer to annevk or JakeA here... I have not kept up with the issue as well as they have","msgtype":"m.text"},"ts":1427487418000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: do you have some time on Monday to go through this with me?","msgtype":"m.text"},"ts":1427494289000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yeah definitely.","msgtype":"m.text"},"ts":1427494630000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: ta, I'm sure it'll be retreading old ground, but fetch is getting a lot of flack for it","msgtype":"m.text"},"ts":1427496039000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yeah, people really don't seem to have taken the bicycle analogy to heart","msgtype":"m.text"},"ts":1427497267000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"dtseng: Look at https://build.chromium.org/p/chromium.linux/builders/Linux%20Tests/builds/22541","msgtype":"m.text"},"ts":1427500749000,"senderName":"scheib","senderId":"scheib@irc"}
]