[
{"content":{"body":"Should the quirkiness be preserved when serialising back a quirky length as per https://quirks.spec.whatwg.org/#the-unitless-length-quirk?","msgtype":"m.text"},"ts":1493021774000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I hope not?","msgtype":"m.text"},"ts":1493021832000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well I hope so too.","msgtype":"m.text"},"ts":1493021843000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Anyone want to do a final review of https://github.com/whatwg/whatwg.org/pull/25? Hopefully we can put it live by the end of the day","msgtype":"m.text"},"ts":1493021899000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Would you mind if I change unitless-length.html to not put all the properties in a single test?","msgtype":"m.text"},"ts":1493030160000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: should prolly ask zcorpan","msgtype":"m.text"},"ts":1493030291000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"For once that zcorpan isn't here, hah.","msgtype":"m.text"},"ts":1493030315000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"miketaylr: Use example.com, like Domenic suggested.","msgtype":"m.text"},"ts":1493051725000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ur not the boss of me","msgtype":"m.text"},"ts":1493051773000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"Check your paystub again and get back to me.","msgtype":"m.text"},"ts":1493051907000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: The conclusion of 5625 was \"sounds good, we'll put it on gsnedders' backlog\"","msgtype":"m.text"},"ts":1493051951000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: what are you dumping on me? :)","msgtype":"m.text"},"ts":1493055006000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(Eventually) testing the UA stylesheet via getComputedStyle(). ^_^","msgtype":"m.text"},"ts":1493055029000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: and what am I meant to be doing about this?","msgtype":"m.text"},"ts":1493055058000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Doing the thing. At some point, when it's worthwhile to point you at testing rather than testing infrastructure.","msgtype":"m.text"},"ts":1493055118000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: and where is this tracked?","msgtype":"m.text"},"ts":1493055755000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"TabAtkins: because I don't see any bugs on wpt for this","msgtype":"m.text"},"ts":1493055766000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"We chatted about it during the meeting, and Rick said he's down at some point.","msgtype":"m.text"},"ts":1493055787000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Well that's an effective way to get it on my to-do list","msgtype":"m.text"},"ts":1493055822000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"TabAtkins: but seriously, it seems much better to file a bug so that other people know this is something we're missing and can potentially do something about","msgtype":"m.text"},"ts":1493056068000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Yeah, I get that. Not doing it right this moment.","msgtype":"m.text"},"ts":1493056087000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Isn't the bug filed? 5625?","msgtype":"m.text"},"ts":1493060703000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://github.com/w3c/web-platform-tests/issues/5625","msgtype":"m.text"},"ts":1493060732000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Well there you go then.","msgtype":"m.text"},"ts":1493063264000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Any particular preference in APIs for takes-an-array vs takes-varargs?","msgtype":"m.text"},"ts":1493070567000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'm writing up the proposed changes to TypedOM for calc, where we're switching calc()'s object to be an expression tree, and I need something like `CSSMathValue(\"+\", 1em, 5px)`.","msgtype":"m.text"},"ts":1493070606000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And I'm wondering whether I should do those last bits as varargs, as in the example, or as `CSSMathValue(\"+\", [1em, 5px])`.","msgtype":"m.text"},"ts":1493070655000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I think the latter is just excess wrapping for no good reason? Particularly since any browser with CSSMathValue will have the spread operator.","msgtype":"m.text"},"ts":1493070679000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I tend toward the array but I'm not sure why...","msgtype":"m.text"},"ts":1493070801000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"We had some discussion about it for promises...","msgtype":"m.text"},"ts":1493070810000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"In Promise.all there's a reasonable case for [] - the *output* is an array, so having the *input* be an array works, mentally.","msgtype":"m.text"},"ts":1493070859000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Here I'm just building a tree structure, and the latter arguments are the children for the node.","msgtype":"m.text"},"ts":1493070871000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Right, yep, that was it.","msgtype":"m.text"},"ts":1493070896000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(Also, in data structure terms, Promise.all is just the Traversable `sequence` operation, so having that represented correctly (going from Array<Promise<Foo>> to Promise<Array<Foo>>) is A+.)","msgtype":"m.text"},"ts":1493070956000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Is it possible to have an Array attribute in WebIDL?","msgtype":"m.text"},"ts":1493076213000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It *looks* like I can only do FrozenArray, which isn't what I want.","msgtype":"m.text"},"ts":1493076225000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Given that I'd like to typecheck it, tho, I think I might need for the Array subclassing thing to resolve.)","msgtype":"m.text"},"ts":1493076247000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: You can do 'any' and define it in prose, of course; otherwise: don't think so (intentional restriction on sequence<>)","msgtype":"m.text"},"ts":1493076608000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"kk.","msgtype":"m.text"},"ts":1493076743000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Given the typechecking, tho, I guess I can't really use Array anyway. :(","msgtype":"m.text"},"ts":1493076753000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I just replaced my nice typecheckable-at-mutation-time Maplike with something that contains an Array. :(","msgtype":"m.text"},"ts":1493076775000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]