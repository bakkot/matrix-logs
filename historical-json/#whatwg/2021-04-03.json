[
{"content":{"body":"new Date('2021-03-29').toISOString()","msgtype":"m.text"},"ts":1617451478000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"\"2021-03-29T00:00:00.000Z\"","msgtype":"m.text"},"ts":1617451481000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"new Date('2021/03/29').toISOString()","msgtype":"m.text"},"ts":1617451491000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"\"2021-03-28T15:00:00.000Z\"","msgtype":"m.text"},"ts":1617451492000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"fun stuff","msgtype":"m.text"},"ts":1617451507000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hello good people, I'm currently the maintainer of the HTML5/wasm export of Godot Engine. We've been recently bitten by CORS headers limitations in `fetch`.","msgtype":"m.text"},"ts":1617457859000,"senderName":"fales[m]","senderId":"fales[m]@irc"},
{"content":{"body":"I know there are security implications with CORS, but I'm wondering if there is one specifically for why `Content-Length` is whitelisted while `Content-Encoding` is not. And if it would make sense to open an issue on the whatwg/fetch github for that.","msgtype":"m.text"},"ts":1617457859000,"senderName":"fales[m]","senderId":"fales[m]@irc"},
{"content":{"body":"To give some context we were using `Content-Length` to improve memory allocation when `Content-Encoding` was not set (so we knew that Content-Length reflected the acutal bytes to be read). You can read some more in this PR: https://github.com/godotengine/godot/pull/47597","msgtype":"m.text"},"ts":1617457859000,"senderName":"fales[m]","senderId":"fales[m]@irc"},
{"content":{"body":"fales[m]: you'd probably get a good answer by filing on whatwg/fetch and waiting for annevk to come back from his OOO time. However I'll note in general that the allowlist is just legacy exceptions and if anything we'd want to reduce it over time (i.e. remove Content-Length) instead of expand it.","msgtype":"m.text"},"ts":1617468676000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"s/I'll note that/my impression is that/ (annevk would be better to confirm)","msgtype":"m.text"},"ts":1617468694000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: thanks for your reply. I'll think about opening an issue then, but I see the point in reducing the allowlist instead of expanding it.","msgtype":"m.text"},"ts":1617479425000,"senderName":"fales[m]","senderId":"fales[m]@irc"},
{"content":{"body":"Does the spec expect all UAs to support Ecmascript? If not, what do UAs that do not support Ecmascript generally do when the specs make mentions to things like Javascript Realms?","msgtype":"m.text"},"ts":1617485805000,"senderName":"EveryOS","senderId":"EveryOS@irc"},
{"content":{"body":"My understanding is that the spec only needs to keep track of realms because callbacks must be associated to some realm, and so you don't have to care about them if you don't support scripts","msgtype":"m.text"},"ts":1617486107000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"Ok, thanks","msgtype":"m.text"},"ts":1617486129000,"senderName":"EveryOS","senderId":"EveryOS@irc"}
]