[
{"content":{"body":"Hixie: Yeah I'm noticing even-more-frequent 408s from bugzilla too, and not just in chrome. I'll raise an actual report for it with the systems team and ask that somebody spend some time trying to reproduce it and troubleshoot it.","msgtype":"m.text"},"ts":1401322008000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it is possible to programatically set the validatity state on a particular element?","msgtype":"m.text"},"ts":1401328854000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I'd like to make the browser show an invalidity indicator for a particular input area after some other client-side checking completes","msgtype":"m.text"},"ts":1401328931000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah, that's what setCustomValidity() is for","msgtype":"m.text"},"ts":1401328955000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ah sweet","msgtype":"m.text"},"ts":1401328969000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hixie: do I then need to fire a synthetic \"invalid\" event at the element, to get the message to appear?","msgtype":"m.text"},"ts":1401329147000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the message appears when the form is submitted, usually","msgtype":"m.text"},"ts":1401329162000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ah OK","msgtype":"m.text"},"ts":1401329171000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"there's a recent addition form.reportValidity() that can also be used","msgtype":"m.text"},"ts":1401329183000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but i don't know who implements that, if anyone","msgtype":"m.text"},"ts":1401329188000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so in this case I'm not actually submitting a form","msgtype":"m.text"},"ts":1401329189000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1401329196000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"(and :invalid should begin matching immediately)","msgtype":"m.text"},"ts":1401329202000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I guess I may need to emulate whatever form.reportValidity() does","msgtype":"m.text"},"ts":1401329298000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"why aren't you submitting the form?","msgtype":"m.text"},"ts":1401329337000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: because there's nothing to submit -- it's just executing client-side","msgtype":"m.text"},"ts":1401329417000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"this is http://w3c-test.org/tools/runner/index.html","msgtype":"m.text"},"ts":1401329425000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"i don't mean submit to http necessarily","msgtype":"m.text"},"ts":1401329430000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah sure","msgtype":"m.text"},"ts":1401329433000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"is there a submit button?","msgtype":"m.text"},"ts":1401329444000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"there's the Start button there","msgtype":"m.text"},"ts":1401329457000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"then theres a submission step","msgtype":"m.text"},"ts":1401329488000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"which causes it to iterate over a list of tests","msgtype":"m.text"},"ts":1401329489000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1401329493000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"just make it submit to javascript:submitted() or something","msgtype":"m.text"},"ts":1401329506000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"as in action=\"javascript:submitted()\"","msgtype":"m.text"},"ts":1401329513000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1401329524000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"action or formaction?","msgtype":"m.text"},"ts":1401329547000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"action if you put it on <form>","msgtype":"m.text"},"ts":1401329556000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"formaction if you need to override an action=\"\" from the <form> on the <button>","msgtype":"m.text"},"ts":1401329567000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1401329568000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"i have a proposal somewhere for some extension to method=\"\" that's specifically for forms like this","msgtype":"m.text"},"ts":1401329704000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"a bit like method=dialog but without even the automatic closure of the dialog","msgtype":"m.text"},"ts":1401329718000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i forget where i mentioned that though...","msgtype":"m.text"},"ts":1401329726000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i never filed a bug for it specifically","msgtype":"m.text"},"ts":1401329731000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Iirc programmatic submission does not trigger validity UI","msgtype":"m.text"},"ts":1401329949000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so reportValidity is awesome but I wish someone implemented it","msgtype":"m.text"},"ts":1401329967000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: Hixie: so generally the plan going forward is that each new element should have its own class, even if it has no unique properties over HTMLElement?","msgtype":"m.text"},"ts":1401330020000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"hot dog javascript:submitted() works great","msgtype":"m.text"},"ts":1401330373000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"thanks Hixie","msgtype":"m.text"},"ts":1401330376000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hmm maybe I should just call it \"started\" though","msgtype":"m.text"},"ts":1401330523000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"someday I should actually get around to learning web programming","msgtype":"m.text"},"ts":1401330661000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"alternatively, it seems like setCustomValidity() is already pretty well supported, and that's less trouble","msgtype":"m.text"},"ts":1401331181000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Domenic: there's no plan one way or the other there","msgtype":"m.text"},"ts":1401331256000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"MikeSmith: setCustomValidity() is something you would use with submission","msgtype":"m.text"},"ts":1401331270000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: yeah if I just make my \"Start\" button type=submit that should work, right?","msgtype":"m.text"},"ts":1401331327000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1401331332000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah so I mean that way I don't have to write my own submit thing","msgtype":"m.text"},"ts":1401331385000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ah right","msgtype":"m.text"},"ts":1401331393000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"which in this case means, less code to get reviewed, and so less for zcorpan to find problems with :-)","msgtype":"m.text"},"ts":1401331444000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I find that when things I code need to go to zcorpan for review, minimizing the review surface causes me less embarrassment and time","msgtype":"m.text"},"ts":1401331577000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that's pretty much a given for anyone :-)","msgtype":"m.text"},"ts":1401331647000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i really have to wonder who designs the twitter input UI and goes home at the end of the day with a firm good-day-of-work nod","msgtype":"m.text"},"ts":1401337478000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"re: press down, go to next line. press down again, get a \"David Goodman\" dropdown because the cursor is on the word \"good\"","msgtype":"m.text"},"ts":1401337507000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: what is this \"line\" of which you speak","msgtype":"m.text"},"ts":1401339599000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"text input box","msgtype":"m.text"},"ts":1401339658000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"does not think of twitter input as *having* lines","msgtype":"m.emote"},"ts":1401339769000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Domenic: I think each element having its own class is a requirement if we start exposing constructors, otherwise adding new features to existing elements becomes problematic","msgtype":"m.text"},"ts":1401353627000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hi, I have a webpage with several articles. Each article is translated in several languages. what is a sensible markup in this case?","msgtype":"m.text"},"ts":1401359018000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"example: http://dpaste.com/0HFDBMR/","msgtype":"m.text"},"ts":1401359105000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"aleray: use an <article> for each translation with lang=nl and such","msgtype":"m.text"},"ts":1401359512000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aleray: or maybe <section> for each translation,","msgtype":"m.text"},"ts":1401359535000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aleray: depends a bit on size and such I guess, not sure there's a hard and fast rule","msgtype":"m.text"},"ts":1401359548000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, you mean like this? http://dpaste.com/14HHXYD/","msgtype":"m.text"},"ts":1401360621000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"aleray: not sure I'd nest <article> like that, it's intended for comments","msgtype":"m.text"},"ts":1401362082000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: you around?","msgtype":"m.text"},"ts":1401363649000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"What's a good name for Request and URL combined?","msgtype":"m.text"},"ts":1401364380000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"RequestInfo?","msgtype":"m.text"},"ts":1401364403000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: what do you mean by combined?","msgtype":"m.text"},"ts":1401366800000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: see http://fetch.spec.whatwg.org/#fetch-api","msgtype":"m.text"},"ts":1401366830000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I was going to ask if you were looking for (Request or SVStr)","msgtype":"m.text"},"ts":1401366972000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: yeah, a name for that :-)","msgtype":"m.text"},"ts":1401367113000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: do you see it more as (Obj or primitive) or as RequestParam?","msgtype":"m.text"},"ts":1401367427000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Above I used a single name as fetch() also takes it as argument","msgtype":"m.text"},"ts":1401367469000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If I have repeat usage of an or'd item I try to make a name for it","msgtype":"m.text"},"ts":1401367494000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Right. Which makes sense.","msgtype":"m.text"},"ts":1401367527000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Unrelated, but doesn't the same pattern also make sense for URL?","msgtype":"m.text"},"ts":1401367546000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: what do you mean?","msgtype":"m.text"},"ts":1401367849000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That new URL() accepts both a SV string and an URL.","msgtype":"m.text"},"ts":1401367934000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: oh, URL stringifies","msgtype":"m.text"},"ts":1401368143000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Oh.","msgtype":"m.text"},"ts":1401368177000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: where (how?) is that behaviour described.","msgtype":"m.text"},"ts":1401368195000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: sorry, recording a 15 min video took all morning. Catching up…","msgtype":"m.text"},"ts":1401368213000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"tobie: \"stringifier attribute ScalarValueString href;\"","msgtype":"m.text"},"ts":1401368217000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"duh","msgtype":"m.text"},"ts":1401368231000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: Would something like GenericRequest capture the intention (it's ugly, though)","msgtype":"m.text"},"ts":1401368328000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: I've always called it just \"request\", one of the first step is 'upgrading' strings to responses, so haven't seen it as an issue","msgtype":"m.text"},"ts":1401368377000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: the issue is that Request is a thing :-)","msgtype":"m.text"},"ts":1401368553000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: in an hour or so from now I'd like to talk about body/headers if that works","msgtype":"m.text"},"ts":1401368567000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: yeah, not really better than Info","msgtype":"m.text"},"ts":1401368579000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah, I'm free now","msgtype":"m.text"},"ts":1401368580000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yeah sorry, going out to get a snack","msgtype":"m.text"},"ts":1401368594000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: no worries, got inbox to churn though","msgtype":"m.text"},"ts":1401368617000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: what's your plan for headers? More towards a dictionary or raw text with methods like for xhr?","msgtype":"m.text"},"ts":1401370103000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"ait back","msgtype":"m.text"},"ts":1401371447000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: I have no idea","msgtype":"m.text"},"ts":1401371455000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: I was hoping other people had ideas, JakeA?","msgtype":"m.text"},"ts":1401371462000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"worth looking at what JS libs are doing here imho.","msgtype":"m.text"},"ts":1401371518000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Hmm, you can have multiple headers with the same name","msgtype":"m.text"},"ts":1401371527000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"So a dictionary doesn't quite work","msgtype":"m.text"},"ts":1401371536000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"order might matter in some cases too","msgtype":"m.text"},"ts":1401371558000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"The standard python thing seems to be a \"multidict\" which stores a list, but makes access to one of the first or last value simple","msgtype":"m.text"},"ts":1401371582000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"http://docs.webob.org/en/latest/reference.html#id3","msgtype":"m.text"},"ts":1401371625000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"xhr just flattens multiple values for a header, not sure if that's bad somehow","msgtype":"m.text"},"ts":1401371653000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"you can return an array in those cases (or in all cases)","msgtype":"m.text"},"ts":1401371654000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"http://docs.webob.org/en/latest/#multidict","msgtype":"m.text"},"ts":1401371677000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"returning an array is annoying when you usually only have one value (and only sometimes returning an array is *really* annoying)","msgtype":"m.text"},"ts":1401371685000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"So returning an array in some cases is confusing and returning an array in all cases is user-hostile","msgtype":"m.text"},"ts":1401371696000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1401371709000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"made a \"query string to dict\" method that always had arrays as keys. It was shite.","msgtype":"m.text"},"ts":1401371736000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(a bigger problem with URL query APIs; I hate the ones that return arrays, making my life harder for some other 1% of users)","msgtype":"m.text"},"ts":1401371751000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"The 1% that use radio buttons?","msgtype":"m.text"},"ts":1401371776000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Actually I guess that's wrong","msgtype":"m.text"},"ts":1401371793000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: multiple headers with the same name is the same as multiple values for a single name","msgtype":"m.text"},"ts":1401371794000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zewt: order only matters on the response and shouldn't in theory","msgtype":"m.text"},"ts":1401371809000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah, so?","msgtype":"m.text"},"ts":1401371819000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"You still have to support it","msgtype":"m.text"},"ts":1401371824000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: no, you can just expose it as a single name with multiple values","msgtype":"m.text"},"ts":1401371835000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://nodejs.org/api/http.html#http_message_headers node just uses a dict","msgtype":"m.text"},"ts":1401371840000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"You mean comma seperated?","msgtype":"m.text"},"ts":1401371848000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I thought the whole point was to avoid the user having to parse things","msgtype":"m.text"},"ts":1401371860000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: that's multiple values","msgtype":"m.text"},"ts":1401371861000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: but it could be an array","msgtype":"m.text"},"ts":1401371872000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: you don't have to support it if it's a new API","msgtype":"m.text"},"ts":1401371882000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: 13:55 < jgraham> So returning an array in some cases is confusing and returning an array in all cases is user-hostile","msgtype":"m.text"},"ts":1401371907000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":".get() .getAll()?","msgtype":"m.text"},"ts":1401371965000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":":(","msgtype":"m.text"},"ts":1401371967000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Something like that","msgtype":"m.text"},"ts":1401371979000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I would be fine if [] did .get()","msgtype":"m.text"},"ts":1401371991000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"actually, it should probably just match URL, since it seems like an identical problem","msgtype":"m.text"},"ts":1401372025000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"what's actually wrong with having to parse the values?","msgtype":"m.text"},"ts":1401372027000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(URL queries, that is)","msgtype":"m.text"},"ts":1401372041000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"splitting on \",\" if you expect multiple values seems not that bad","msgtype":"m.text"},"ts":1401372046000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It seems terrible","msgtype":"m.text"},"ts":1401372062000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"You have to check every time to see if you have a \",\" in the value and if so split it","msgtype":"m.text"},"ts":1401372086000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(splitting on \",\" then stripping spaces)","msgtype":"m.text"},"ts":1401372087000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Otherwise you get a bogus value","msgtype":"m.text"},"ts":1401372103000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: euhm no? mostly the header name indicates it only has a single value","msgtype":"m.text"},"ts":1401372142000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"headers[headerName], vs headers.all which is an array of arrays [[key, val], [key, val], [key, val]]","msgtype":"m.text"},"ts":1401372148000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"i don't know the use cases, but if a dumb server sends \"Content-Type: text/plain\" twice in a row because someone did something dumb in PHP, and my code assumes only one value, I'd rather get one arbitrary header value (even if they're different) than \"text/plain, text/plain\"","msgtype":"m.text"},"ts":1401372153000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"You'd use .all if you care about the ordering","msgtype":"m.text"},"ts":1401372160000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"& multiple values","msgtype":"m.text"},"ts":1401372167000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: http://url.spec.whatwg.org/#urlsearchparams","msgtype":"m.text"},"ts":1401372176000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"headers[headerName] is comma joined","msgtype":"m.text"},"ts":1401372179000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"zewt: at that point you'd have a security bug in your code","msgtype":"m.text"},"ts":1401372183000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: unconvincing","msgtype":"m.text"},"ts":1401372195000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: Having a bug in your code because you expect one value and get more than one seems much more likely than having a bug when the API consistently returns data in the same format for a given call","msgtype":"m.text"},"ts":1401372251000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"URLSearchParams works for me. As jgraham says, headers[val] should be the same as headers.get(val)","msgtype":"m.text"},"ts":1401372264000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"+1 for consistency with URLSearchParams","msgtype":"m.text"},"ts":1401372298000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"getAll returns an array?","msgtype":"m.text"},"ts":1401372326000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1401372368000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"and so get(foo) === getAll(foo)[0]","msgtype":"m.text"},"ts":1401372404000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I wonder if we can make that generic","msgtype":"m.text"},"ts":1401372414000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm happy with that","msgtype":"m.text"},"ts":1401372420000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"But what do we want for the construction side?","msgtype":"m.text"},"ts":1401372431000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Fits nicely with cache.match & matchAll","msgtype":"m.text"},"ts":1401372436000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"new Request(url, { headers: XXX })","msgtype":"m.text"},"ts":1401372444000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: seems like the only thing query-specific right now is the stringifier","msgtype":"m.text"},"ts":1401372444000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Yeah, I don't really care if get returns [0] or [-1], so consistency with URLSearchParams seems ideal","msgtype":"m.text"},"ts":1401372454000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"zewt: and the parser","msgtype":"m.text"},"ts":1401372455000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: obj. If you want to do fancy shit, you construct then headers.append","msgtype":"m.text"},"ts":1401372474000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"URLSearchParams could be a subclass perhaps","msgtype":"m.text"},"ts":1401372479000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I want Request to be immutable","msgtype":"m.text"},"ts":1401372492000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: but it could be obj or WhateverWeCallTheHeaderThing","msgtype":"m.text"},"ts":1401372509000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: .append to the URLSearchParams-like object I assume","msgtype":"m.text"},"ts":1401372513000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Actually, URLSearchParams-like also sucks for keeping Request immutable","msgtype":"m.text"},"ts":1401372534000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm, I don't think it should be immutable","msgtype":"m.text"},"ts":1401372537000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"setter should prop accept a vanilla obj with arrays or strings","msgtype":"m.text"},"ts":1401372537000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: it'd just need an immutable base class","msgtype":"m.text"},"ts":1401372546000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"sounds like a lot of complexity for some headers","msgtype":"m.text"},"ts":1401372562000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it'd be great to be able to modify requests as they fly through the fetch event (add/remove headers)","msgtype":"m.text"},"ts":1401372585000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"sounds like a common pattern for data structures","msgtype":"m.text"},"ts":1401372587000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: Without explicitly respondWithing","msgtype":"m.text"},"ts":1401372604000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: Could you clarify the Cache API that it's intended to be available on the main thread in due course and is origin-bound security-wise? That is, the main thread has access to the same data?","msgtype":"m.text"},"ts":1401372610000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Clarify it in the spec?","msgtype":"m.text"},"ts":1401372651000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yes","msgtype":"m.text"},"ts":1401372657000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sure, will make a ticket now to remind me","msgtype":"m.text"},"ts":1401372681000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: is this unpossible? https://gist.github.com/jakearchibald/9f556ce0eafc47ba3d6e","msgtype":"m.text"},"ts":1401373004000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: at the moment, yes","msgtype":"m.text"},"ts":1401373144000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I had assumed we'd not want pages to manipulate the underlying requests so easily; also, it's not entirely clear to me how that would work if the hook for that is that SW returns null","msgtype":"m.text"},"ts":1401373212000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but isn't the request object modified, or is the serviceworker given a copy?","msgtype":"m.text"},"ts":1401373275000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: if you want to keep immutability, what you want is an easy way to duplicate a request with a few modifications.","msgtype":"m.text"},"ts":1401373361000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Why do you want immutability?","msgtype":"m.text"},"ts":1401373382000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"^- that","msgtype":"m.text"},"ts":1401373388000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"FP","msgtype":"m.text"},"ts":1401373430000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: If you were hoping for first post here, you a a bit late","msgtype":"m.text"},"ts":1401373486000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Pah","msgtype":"m.text"},"ts":1401373503000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"If you were hoping that javascript was a functional programming language, you're a bit deluded","msgtype":"m.text"},"ts":1401373509000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"JakeA: I was assuming we'd be passing copies around due to threading","msgtype":"m.text"},"ts":1401373767000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"seems sensible to design with immutability and later turn mutable if safe to do so, rather than the opposite.","msgtype":"m.text"},"ts":1401373847000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"It seems more sensible to ask some implementors about whether immutability is a requirement rather than design an API with artificial limitations","msgtype":"m.text"},"ts":1401373912000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"One use-case is resource priorities, being able to tag requests as they come through the fetch event without having to taking over handling the whole request","msgtype":"m.text"},"ts":1401373937000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"It's not a requirement of course. You can always make it work somehow.","msgtype":"m.text"},"ts":1401373950000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But it's not as simple as you make it seem","msgtype":"m.text"},"ts":1401373997000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Requests originating from the page are more powerful than we'd like fetch() to handle. But fetch() could still make a restricted copy of course.","msgtype":"m.text"},"ts":1401374039000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Right, but I'm not sure I understand where you think that an immutable object would help. Is there a case when you pass the object into another thread and it is still accessible in both threads? If so, how expensive is a copy?","msgtype":"m.text"},"ts":1401374053000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"And could you solve it using a COW design? If so, how hard is that to implement?","msgtype":"m.text"},"ts":1401374108000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"COW?","msgtype":"m.text"},"ts":1401374146000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Copy On Write","msgtype":"m.text"},"ts":1401374152000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"i.e. only make a copy if a mutation occurs","msgtype":"m.text"},"ts":1401374168000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: the problem with mutable is that we have both UA-created Request objects and content-created Request objects","msgtype":"m.text"},"ts":1401374485000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: the former are more involved","msgtype":"m.text"},"ts":1401374499000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Or, give SW a copy, then read bits from it if the SW doesn't call respondWith","msgtype":"m.text"},"ts":1401374509000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"jgraham: if we allow arbitrary manipulation, there's a whole lot more to reason about","msgtype":"m.text"},"ts":1401374525000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I guess I would have SW return the request rather than null if we go down that route","msgtype":"m.text"},"ts":1401374572000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Well the question is whether there are use cases for manipulating the various types of request","msgtype":"m.text"},"ts":1401374612000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: That works","msgtype":"m.text"},"ts":1401374649000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"If there aren't any for UA-generated Request objects, they could be immutable. But JakeA seems to have a better idea of the use cases here","msgtype":"m.text"},"ts":1401374652000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Certainly for user-generated Requests, being able to manipulate the request before passing it to fetch seems very useful","msgtype":"m.text"},"ts":1401374736000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: mostly around resource priorities, giving particular request a higher priority without having to handle the request entirely","msgtype":"m.text"},"ts":1401374781000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"jgraham: the only case so far was about a UA-generated Request object","msgtype":"m.text"},"ts":1401374800000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: if we give access to such headers, set by the UA, what are the implications for privacy?","msgtype":"m.text"},"ts":1401374920000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I hadn't actually really thought about exposing Request objects in general for all requests the page makes","msgtype":"m.text"},"ts":1401374943000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I thought the sensitive headers (such as cookies) were applied after the call into SW","msgtype":"m.text"},"ts":1401374963000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: maybe there's not much badness apart from cookies, which we'll make sure to hide","msgtype":"m.text"},"ts":1401374965000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(I've caught a crazy one https://www.facebook.com/occupyhtml5/posts/1475786125972047)","msgtype":"m.text"},"ts":1401375030000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: currently cookies are set before, at the same time the Authorization header is built based on URL credentials","msgtype":"m.text"},"ts":1401375054000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: it seems like SW would want access to same-origin login data","msgtype":"m.text"},"ts":1401375066000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: but not http-only cookies","msgtype":"m.text"},"ts":1401375083000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: see http://fetch.spec.whatwg.org/#concept-http-fetch","msgtype":"m.text"},"ts":1401375090000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: cookies in general are not exposed so I guess they're not an issue","msgtype":"m.text"},"ts":1401375105000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://github.com/slightlyoff/ServiceWorker/issues/234 there's also if-none-match and if-modified-since","msgtype":"m.text"},"ts":1401375126000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: do you want to manipulate <body> too?","msgtype":"m.text"},"ts":1401375215000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: given http://fetch.spec.whatwg.org/#request what fields should be mutable?","msgtype":"m.text"},"ts":1401375223000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: anything that wouldn't cause a security issue. Looking now…","msgtype":"m.text"},"ts":1401375651000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: headers, body, mode, omitCredentialsMode?","msgtype":"m.text"},"ts":1401376101000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: so if you set headers it would be a security issue for tainted cross-origin requests","msgtype":"m.text"},"ts":1401376122000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: and changing the mode as a side-effect of setting a header seems very sketchy","msgtype":"m.text"},"ts":1401376186000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: we could throw if the mode is not CORS or same-origin maybe","msgtype":"m.text"},"ts":1401376202000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: and then set a flag to not allow mode to be set after you did such a thing","msgtype":"m.text"},"ts":1401376222000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: but suddenly you're looking at something that's very hard to explain and reason about","msgtype":"m.text"},"ts":1401376241000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: we're already going to set the mode based one headers in the constructors, aren't we?","msgtype":"m.text"},"ts":1401376300000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: we can't allow a GET to another origin with arbitrary headers without a preflight","msgtype":"m.text"},"ts":1401376346000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: my idea was for the constructor to have mode default to CORS","msgtype":"m.text"},"ts":1401376380000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: and throw if you have headers and mode is not CORS or same-origin","msgtype":"m.text"},"ts":1401376396000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I still want to enable (although it may come later) making an image-like request, that'd be non-cors to other origins","msgtype":"m.text"},"ts":1401376454000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: maybe we throw when setting headers, depending on mode","msgtype":"m.text"},"ts":1401376466000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: …that would be easy as part of the constructor, as mode would be set before headers","msgtype":"m.text"},"ts":1401376558000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: you set them at the same time","msgtype":"m.text"},"ts":1401376596000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"new Request(..., { headers: ..., mode:\"tainted cross-origin\" })","msgtype":"m.text"},"ts":1401376618000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah, but the algorithm would be \"set mode\", \"set each header, but if a header clashes with the mode, throw\"","msgtype":"m.text"},"ts":1401376659000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"or vice versa, I guess","msgtype":"m.text"},"ts":1401376675000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"fair","msgtype":"m.text"},"ts":1401376687000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the same thing would work with mutating, you'd have to lock down mode before adding headers that require cors. But I agree that cors is a sensible default for the constructor","msgtype":"m.text"},"ts":1401376728000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: when would you want to mutate mode?","msgtype":"m.text"},"ts":1401376764000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I can't think of a reason why not","msgtype":"m.text"},"ts":1401376846000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"what it UA-generated Request objects were frozen, but constructed ones not?","msgtype":"m.text"},"ts":1401377070000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: what's the benefit?","msgtype":"m.text"},"ts":1401377152000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"\"unexplained magic\"","msgtype":"m.text"},"ts":1401377155000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(but there'll be some of that anyway)","msgtype":"m.text"},"ts":1401377164000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: should mutating mode throw if there's headers already set?","msgtype":"m.text"},"ts":1401377188000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: how do we know headers are set by the author vs the UA?","msgtype":"m.text"},"ts":1401377207000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: only if the headers are \"illegal\" given the new mode","msgtype":"m.text"},"ts":1401377217000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: such a gigantic mess","msgtype":"m.text"},"ts":1401377219000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: where do we need to know which headers were set by the author vs UA?","msgtype":"m.text"},"ts":1401377405000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: makes it easier to reason about?","msgtype":"m.text"},"ts":1401377441000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"JakeA: event.request; which headers can I read, which can I set? can I change .mode?","msgtype":"m.text"},"ts":1401377443000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"use case for changing mode in that case?","msgtype":"m.text"},"ts":1401377489000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"JakeA: if a UA has added Last-Event-ID, that's fine, if you do it, it's not","msgtype":"m.text"},"ts":1401377494000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: that is, UA adding Last-Event-ID for EventSource() does not cause a preflight to happen","msgtype":"m.text"},"ts":1401377530000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I see, so setting mode to cors & back would throw in that case","msgtype":"m.text"},"ts":1401377691000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"fair","msgtype":"m.text"},"ts":1401377694000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"but how do we distinguish? do we keep the UA headers and author headers in a distinct map?","msgtype":"m.text"},"ts":1401377732000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Does this problem go away if we make mode read-only, but not headers?","msgtype":"m.text"},"ts":1401377772000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: not really","msgtype":"m.text"},"ts":1401377790000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: hmm, maybe as soon as you touch headers mode becomes cors-with-preflight and immutable","msgtype":"m.text"},"ts":1401377832000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think if the request is not-cors, and you mess with one of the non-simple methods, it throws or steps up to CORS","msgtype":"m.text"},"ts":1401377881000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"stepping up makes more sense I guess","msgtype":"m.text"},"ts":1401377963000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Actually, setting mode to same-origin should be fine, it's mostly tainted cross-origin that's dangerous","msgtype":"m.text"},"ts":1401378003000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: https://etherpad.mozilla.org/Request-object-design","msgtype":"m.text"},"ts":1401378063000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: what's the attack (sorry, I'm running out of brain)","msgtype":"m.text"},"ts":1401378070000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: do we need to filter headers or just set the restricted ones after the SW?","msgtype":"m.text"},"ts":1401378131000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: you cannot currently send custom headers to random servers","msgtype":"m.text"},"ts":1401378141000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: right, so setting those headers would change mode, trying to change mode back would throw. It might be weird in the eventsource case you mentioned though","msgtype":"m.text"},"ts":1401378186000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"is there any work on a DOM for CSS gradients?","msgtype":"m.text"},"ts":1401378364000,"senderName":"jwatt","senderId":"jwatt@irc"},
{"content":{"body":"TabAtkins: ^","msgtype":"m.text"},"ts":1401378414000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"JakeA: so the main problem with this is that you have now manipulated the request, but the request is still identifying itself as coming from the page","msgtype":"m.text"},"ts":1401379044000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: it would be great if some security guys could look at that etherpad","msgtype":"m.text"},"ts":1401379998000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'll deploy the mikewest","msgtype":"m.text"},"ts":1401380057000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I'll try to fix the draft a bit tomorrow","msgtype":"m.text"},"ts":1401380080000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: when you say restricted header names, do you mean cookie, if-none-match etc? Or do they just get silently overwritten?","msgtype":"m.text"},"ts":1401380575000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: http://fetch.spec.whatwg.org/#concept-forbidden-author-header-names","msgtype":"m.text"},"ts":1401380608000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: if-none-match is typically fair game","msgtype":"m.text"},"ts":1401380619000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: reading it may expose the response, especially the response is limited to a few values","msgtype":"m.text"},"ts":1401380713000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: eg, \"yes\", \"no\". You could know the two etags that produces & know the response from the if-none-match header","msgtype":"m.text"},"ts":1401380744000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"so it's only fair game if mode != tainted","msgtype":"m.text"},"ts":1401380747000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, that sounds right","msgtype":"m.text"},"ts":1401380798000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: it's a bit unclear how we're layering headers, it might be that some of these need to move to the actual HTTP *network* fetch","msgtype":"m.text"},"ts":1401380800000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: setting them by the UA that is","msgtype":"m.text"},"ts":1401380811000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: although I guess if-none-match you want, since you can use it on your own cache too","msgtype":"m.text"},"ts":1401380830000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If you’re available, would you ask IE about using external SVGs with <use>? https://twitter.com/hashtag/AskIE?src=hash http://css-tricks.com/svg-use-external-source/","msgtype":"m.text"},"ts":1401383877000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"jwatt: No; we're planning on a real OM for CSS (not string-based) in the future, but we're waiting for JS Value Objects.","msgtype":"m.text"},"ts":1401384558000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: Yeah, I think that's the plan.  Existing places where multiple tags have the same interface (like HTMLHeadingElement) are inconvenient and weird.","msgtype":"m.text"},"ts":1401385482000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"JonathanNeal: <use> is pretty bad iirc","msgtype":"m.text"},"ts":1401385896000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JonathanNeal: seems better to not have it","msgtype":"m.text"},"ts":1401385901000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: It’s a useful element with a bad markup pattern. It’s useful because you can create an SVG spritemap, and because you can style any instance of a sprite like folks do with icon fonts.","msgtype":"m.text"},"ts":1401386066000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"annevk: <use> is much less bad now that we've nuked the instance tree.","msgtype":"m.text"},"ts":1401386100000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: is the fetch api going to integrate with the Loader stuff at all?","msgtype":"m.text"},"ts":1401386154000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: also, are there any code samples for this api? that's always a good way to sanity check an API","msgtype":"m.text"},"ts":1401386251000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I think JakeA has some examples, I should probably make some more","msgtype":"m.text"},"ts":1401386314000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: afaict Loader is only for JS modules, I wish those guys talked to us sooner about the whole thing","msgtype":"m.text"},"ts":1401386375000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: I didn't realize how generic that would be","msgtype":"m.text"},"ts":1401386388000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"no the thread in es-discuss is very much indicating that the expectation is that all fetches are expected to go through it, as far as i can tell","msgtype":"m.text"},"ts":1401386425000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"how about the dependency mechanism, is it intended that you be able to block a fetch on another or anything like that?","msgtype":"m.text"},"ts":1401386455000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"is there a way for JS to get the \"concrete object size\"?","msgtype":"m.text"},"ts":1401387092000,"senderName":"jwatt","senderId":"jwatt@irc"},
{"content":{"body":"TabAtkins: ok, thanks","msgtype":"m.text"},"ts":1401387127000,"senderName":"jwatt","senderId":"jwatt@irc"},
{"content":{"body":"jorendorff: yt?","msgtype":"m.text"},"ts":1401387290000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: here","msgtype":"m.text"},"ts":1401387303000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"jorendorff: so i think i'm gonna try to write a strawman that shows how the ES6 module stuff could be integrated with all the other dependency stuff the web platform has coming down the pipe","msgtype":"m.text"},"ts":1401387358000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"great!","msgtype":"m.text"},"ts":1401387371000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"jorendorff: but i'm having great difficulty understanding what ES6 actually says","msgtype":"m.text"},"ts":1401387373000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"understandable","msgtype":"m.text"},"ts":1401387381000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"jorendorff: i spoke to arv and he suggested you as one of the best people to brief me on this","msgtype":"m.text"},"ts":1401387387000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"jorendorff: is that something you could do?","msgtype":"m.text"},"ts":1401387391000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"happy to","msgtype":"m.text"},"ts":1401387394000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"either in person or irc or e-mail or whatever","msgtype":"m.text"},"ts":1401387397000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(i'm in mtv if you want to do it in person)","msgtype":"m.text"},"ts":1401387402000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah, i'm in Tennessee so can't do it in person immediately","msgtype":"m.text"},"ts":1401387416000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"irc's fine, email probably better","msgtype":"m.text"},"ts":1401387424000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"let me send you email to begin","msgtype":"m.text"},"ts":1401387435000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"you are awesome","msgtype":"m.text"},"ts":1401387440000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"thanks!","msgtype":"m.text"},"ts":1401387442000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"will do in the next 3 hours","msgtype":"m.text"},"ts":1401387443000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"ian⊙hc","msgtype":"m.text"},"ts":1401387447000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1401387451000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"fantastic","msgtype":"m.text"},"ts":1401387452000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"jwatt: There is no JS way to get the concrete object size, no.","msgtype":"m.text"},"ts":1401389431000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I was asking because I was looking into whether content can make a live gradient editor for gradients with percentage value stops","msgtype":"m.text"},"ts":1401389502000,"senderName":"jwatt","senderId":"jwatt@irc"},
{"content":{"body":"The information necessary for that is all accessible in the page.","msgtype":"m.text"},"ts":1401389522000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jwatt: Namely, the concrete object size of a gradient background will just be the background-size, which is either fixed or is the size of one of the layout boxes of the element.","msgtype":"m.text"},"ts":1401389636000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"you need the gradient box (which is the concrete object size) to resolve how far along the gradient line px valued stop are","msgtype":"m.text"},"ts":1401389656000,"senderName":"jwatt","senderId":"jwatt@irc"},
{"content":{"body":"the question is what is the gradient box for a given element","msgtype":"m.text"},"ts":1401389687000,"senderName":"jwatt","senderId":"jwatt@irc"},
{"content":{"body":"Yes, which is calculable as I just described.","msgtype":"m.text"},"ts":1401389726000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"how do you get the background-size?","msgtype":"m.text"},"ts":1401389757000,"senderName":"jwatt","senderId":"jwatt@irc"},
{"content":{"body":"By asking for the background-size property?","msgtype":"m.text"},"ts":1401389769000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And if it's a keyword value, calculating the correct box from the element, based on width/padding/etc","msgtype":"m.text"},"ts":1401389786000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"that could get pretty complicated","msgtype":"m.text"},"ts":1401389810000,"senderName":"jwatt","senderId":"jwatt@irc"},
{"content":{"body":"Yeah, it's not trivial, but neither is it difficult.","msgtype":"m.text"},"ts":1401389830000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'm not even sure if the background-size is the right thing","msgtype":"m.text"},"ts":1401389847000,"senderName":"jwatt","senderId":"jwatt@irc"},
{"content":{"body":"I'm sure. ^^_","msgtype":"m.text"},"ts":1401389856000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so it's always sure it's the same as the concrete object size?","msgtype":"m.text"},"ts":1401389880000,"senderName":"jwatt","senderId":"jwatt@irc"},
{"content":{"body":"For an image with no intrinsic dimensions, yes.","msgtype":"m.text"},"ts":1401389895000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"an image?","msgtype":"m.text"},"ts":1401389906000,"senderName":"jwatt","senderId":"jwatt@irc"},
{"content":{"body":"what about a div","msgtype":"m.text"},"ts":1401389913000,"senderName":"jwatt","senderId":"jwatt@irc"},
{"content":{"body":"calculating the concrete object size of an element may just be a case of \"calculate the correct box from the element, based on width/padding/etc\"","msgtype":"m.text"},"ts":1401390206000,"senderName":"jwatt","senderId":"jwatt@irc"},
{"content":{"body":"but in the general case that means basically implementing an entire CSS layout engine taking into account box-sizing, floats, absolute positioning, flex box, etc., etc.","msgtype":"m.text"},"ts":1401390277000,"senderName":"jwatt","senderId":"jwatt@irc"},
{"content":{"body":"and obviously taking into account siblings, ancestors, etc., since they can all impact the concrete size of the object","msgtype":"m.text"},"ts":1401390331000,"senderName":"jwatt","senderId":"jwatt@irc"},
{"content":{"body":"unless I'm missing something","msgtype":"m.text"},"ts":1401390358000,"senderName":"jwatt","senderId":"jwatt@irc"},
{"content":{"body":"so I'd take issue with the statement \"neither is it difficult\" :)","msgtype":"m.text"},"ts":1401390378000,"senderName":"jwatt","senderId":"jwatt@irc"},
{"content":{"body":"will be back later","msgtype":"m.emote"},"ts":1401390484000,"senderName":"jwatt","senderId":"jwatt@irc"},
{"content":{"body":"jwatt: You're using terms in ways that don't make sense.","msgtype":"m.text"},"ts":1401391039000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"An image like a gradient has a concrete object size calculated for it.","msgtype":"m.text"},"ts":1401391064000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The inputs to the algo are always the intrinsic dimensions (none, for gradients) and the specified size (for background gradients, the background positioning area, which is calculable from 'background-size' and other properties as needed).","msgtype":"m.text"},"ts":1401391167000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: so how do you calculate it in JS then?","msgtype":"m.text"},"ts":1401395721000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"The way the spec says to, which uses only information accessible via JS.","msgtype":"m.text"},"ts":1401395754000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(and how long until some other spec complicates it?)","msgtype":"m.text"},"ts":1401395786000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"It might get more complicated in the future, yes.","msgtype":"m.text"},"ts":1401395833000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: why does Request in Window context need to have isSynchronous ?","msgtype":"m.text"},"ts":1401396137000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"annevk: in other words, I hope we hide the possibility for synchronousness in the main-thread","msgtype":"m.text"},"ts":1401396244000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Hixie: i kind of suck at this","msgtype":"m.text"},"ts":1401399025000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"still working at it","msgtype":"m.text"},"ts":1401399031000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"dude, i'm so thankful that you're doing it at all, you've no idea :-)","msgtype":"m.text"},"ts":1401399115000,"senderName":"Hixie","senderId":"Hixie@irc"}
]