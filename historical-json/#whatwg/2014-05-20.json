[
{"content":{"body":"gsnedders: Buy a Pixel.","msgtype":"m.text"},"ts":1400544441000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: no. :)","msgtype":"m.text"},"ts":1400544502000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Too pricey, or does it fail one of your other criteria?","msgtype":"m.text"},"ts":1400544517000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Too pricey. If I'm dropping that money, I'd get a Macbook of some variety.","msgtype":"m.text"},"ts":1400544539000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(and then just entirely replace my existing MBP, instead of getting something more to replace my tablet than anything else)","msgtype":"m.text"},"ts":1400544691000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"the Most Annoying Thing On The Internet: http://social.msdn.microsoft.com/Forums/en-US/53ae87d1-dd83-4a44-8303-4a31c9c37015/stopping-scrollviewer-from-auto-scrolling-when-item-gets-focus","msgtype":"m.text"},"ts":1400547265000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"\"how do I do this thing?\" \"never mind, here's the solution\" *404*","msgtype":"m.text"},"ts":1400547275000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"there are many annoying things on the internet, there will be many more in the future","msgtype":"m.text"},"ts":1400547385000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"exponentially more","msgtype":"m.text"},"ts":1400547393000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Hixie: i can fix the autorotate thing relatively soon i think","msgtype":"m.text"},"ts":1400552316000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":" zcorpan John told me he'd replied -- replied to you, I think.","msgtype":"m.text"},"ts":1400552964000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: i don't see anything in my inbox and i don't see anything in http://lists.w3.org/Archives/Public/www-archive/2014May/thread.html","msgtype":"m.text"},"ts":1400553194000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"MikeSmith: he had replied to denis in private before all three of us emailed him and cc-ed www-archive i think, but i wanted a public record","msgtype":"m.text"},"ts":1400553295000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"MikeSmith: so the critic issue actually isn't resolved yet afaict","msgtype":"m.text"},"ts":1400553380000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: cool. it sounds pretty straightforward. file a bug on me once you've done it to add it to the index. thanks!","msgtype":"m.text"},"ts":1400553401000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: ok","msgtype":"m.text"},"ts":1400553435000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: OK, when we have cases like this I'd like to suggest we open separate issues and then close the PR, if this kind of problem is the only thing blocking it","msgtype":"m.text"},"ts":1400553493000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: I think it's bad for everybody to keep PRs hanging open for months on end","msgtype":"m.text"},"ts":1400553513000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: they get stale and people lose interest in following up on them","msgtype":"m.text"},"ts":1400553543000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: or in in this specific case, the guy who was responsible for that PR no longer is paid to work on testing, and has moved on","msgtype":"m.text"},"ts":1400553594000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: i don't disagree that it's bad to have PRs open for a long time","msgtype":"m.text"},"ts":1400553621000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: I'll ping John again and ask him if he can reply to your www-archive message","msgtype":"m.text"},"ts":1400553633000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ok great","msgtype":"m.text"},"ts":1400553669000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hixie: as for styling, e.g. the stylesheet for http://dev.w3.org/csswg/cssom/ is a lot less busy than the whatwg stylesheet, but still has enough visible cue (at least for me) to see where the links are","msgtype":"m.text"},"ts":1400553721000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hixie: i'm not saying that stylesheet is without problems, but i agree with jgraham that it should be possible to create a stable and subtle yet usable style. i'm not sure i agree with jgraham about the underline, it doesn't bother me and something other than color is necessary for people with some color-blindnesses (unless you can find a color that works for all common color blindnesses)","msgtype":"m.text"},"ts":1400553853000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"(maybe a lighter shade would work to make a contrast difference even if you can't distinguish the color?)","msgtype":"m.text"},"ts":1400553896000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hixie: as far as the undelrines, what zcorpan said","msgtype":"m.text"},"ts":1400553935000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"people who have a problem with underlines are going to have a hard time on the internet","msgtype":"m.text"},"ts":1400553956000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hixie: the underlines have a utility -- exactly the utility that you mentioned earlier (distinguishing, e.g., between hyperlinked <code> and unhyperlinked -- or whatever specific case you mentioned)","msgtype":"m.text"},"ts":1400554053000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hixie: I think some people are willing to sacrifice the utility of the spec to aesthetics or making it look less \"busy\" or however they're stating it","msgtype":"m.text"},"ts":1400554116000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hey, I've heard of this thing called alternate stylesheets","msgtype":"m.text"},"ts":1400554197000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"(i don't personally have a problem with the \"busy\" style, so long as it doesn't do the fading thing)","msgtype":"m.text"},"ts":1400554200000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: yeah","msgtype":"m.text"},"ts":1400554219000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"things nobody should ever have to use: alternate stylesheets","msgtype":"m.text"},"ts":1400554223000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"SamB: that has already been brought up","msgtype":"m.text"},"ts":1400554245000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"'kay","msgtype":"m.text"},"ts":1400554254000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"don't know what's changed, but the main TOC is pretty hard to look at right now, probably too much space around everything","msgtype":"m.text"},"ts":1400554315000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zcorpan: I could live without the fading thing, but I thought it was a good clever solution to the problem Hixie was trying to solve. Now, I think, it would be nice to solve that problem if it's solvable, but I'm not sure it is, and maybe it's not worth spending a lot of time trying to solve.","msgtype":"m.text"},"ts":1400554359000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zewt: hmm yeah maybe there's too much line space there now","msgtype":"m.text"},"ts":1400554399000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"looks like all numbered lists have that problem","msgtype":"m.text"},"ts":1400554407000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: ah yeah, seems so","msgtype":"m.text"},"ts":1400554425000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I guess Hixie should just rachet that back down a bit","msgtype":"m.text"},"ts":1400554441000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"dotted lists are fine","msgtype":"m.text"},"ts":1400554459000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"anyway it would be a shame to see that spec change in ways that it less usable for implementors, even it if it made it slightly more usable for others","msgtype":"m.text"},"ts":1400554514000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I've never had any problem with the colors or anything else. in fact, the opposite -- I really appreciate that all those various cues are there are value them. I couldn't care less if it looks \"busy\" as long as it makes it easier for me to find what I need","msgtype":"m.text"},"ts":1400554617000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I'm not reading it for fun","msgtype":"m.text"},"ts":1400554634000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"if people want less busy, there's always IETF style","msgtype":"m.text"},"ts":1400554684000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"80 column with hardcoded page breaks for 80x55 daisy wheel printers?","msgtype":"m.text"},"ts":1400554705000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: yeah but I meant more the lack of colors and the lack of hyperlinks","msgtype":"m.text"},"ts":1400554753000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I like it how zewt says it though","msgtype":"m.text"},"ts":1400554820000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I mean, it's funnier that way","msgtype":"m.text"},"ts":1400554826000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"not that I'd want to see the spec like that","msgtype":"m.text"},"ts":1400554831000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"i didn't have any issues with the formatting, my main issue with the spec is just wishing it loaded faster, heh","msgtype":"m.text"},"ts":1400554845000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(maybe if the multipage referencing worked better i'd use it, though being able to text search the whole spec is probably also hard to do without)","msgtype":"m.text"},"ts":1400554873000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"so you want it to be less busy on the *inside*","msgtype":"m.text"},"ts":1400554886000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"me too","msgtype":"m.text"},"ts":1400554894000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"i don't know the first thing about why it's so slow, heh (\"it's huge\" is obviously a part, but I assume it's more complicated than that)","msgtype":"m.text"},"ts":1400554918000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I remember a time when I could actually load the single-page spec","msgtype":"m.text"},"ts":1400554930000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"guess I could load it with no styles or scripts and find out","msgtype":"m.text"},"ts":1400554978000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"It's huge, it does some JS loops over the whole document, and I'd bet the selectors aren't well-optimized.","msgtype":"m.text"},"ts":1400555006000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"no copyright is asserted on this file\"? is that really a valid way to disclaim copyright? heh","msgtype":"m.text"},"ts":1400555177000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Hixie: about the validator not catching the <dd> thing before you fixed it, I think it might have been because validator.nu hasn't been synched for a while and has an older version of the schema that wasn't going <dl><dt><dd> checking correctly for a while after we made the change to allow <script> and <template> in there","msgtype":"m.text"},"ts":1400555403000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hixie: I think it works as expected in the current source and at http://sideshowbarker.net:8888/ and http://validator.w3.org/nu/","msgtype":"m.text"},"ts":1400555490000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zewt: No, it's not a valid way.  Copyright is automatic regardless of what you say.","msgtype":"m.text"},"ts":1400556155000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"At least in US law, and most other countries.","msgtype":"m.text"},"ts":1400556183000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"MikeSmith: cool","msgtype":"m.text"},"ts":1400556297000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i should probably change to ssb.n:8888","msgtype":"m.text"},"ts":1400556310000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"btw re the style sheet, there were some substantial changes earlier today, so i'm letting it sit for a few days to see how people like it","msgtype":"m.text"},"ts":1400556336000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(in particular, i think it might be less busy that the /csswg/cssom/ style sheet at this point)","msgtype":"m.text"},"ts":1400556398000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Still super-hate the fading thing.","msgtype":"m.text"},"ts":1400556907000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I didn't hate it earlier, but it's fading on me. ^_^","msgtype":"m.text"},"ts":1400556925000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"it's long gone","msgtype":"m.text"},"ts":1400556982000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Oh, hm, must need to force-refresh.","msgtype":"m.text"},"ts":1400559252000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"MikeSmith: can you look into the w3c-test:mirror thing? i want some people to look at the tests without having them clone and get wptserve running","msgtype":"m.text"},"ts":1400560394000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"MikeSmith: the PR is https://github.com/w3c/web-platform-tests/pull/996","msgtype":"m.text"},"ts":1400560458000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"oh i see you replied in #testing","msgtype":"m.text"},"ts":1400560527000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: checkong on it now","msgtype":"m.text"},"ts":1400560867000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: thanks!","msgtype":"m.text"},"ts":1400561432000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"MikeSmith: maybe i don't have the right permissions, like jgraham said?","msgtype":"m.text"},"ts":1400561446000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah checking on that too","msgtype":"m.text"},"ts":1400561560000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: http://w3c-test.org/submissions/996/","msgtype":"m.text"},"ts":1400561735000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"still working on the underlying cause","msgtype":"m.text"},"ts":1400561741000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: thank you","msgtype":"m.text"},"ts":1400561780000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: fwiw as far as the underlying cause, I think it might be a github bug","msgtype":"m.text"},"ts":1400561921000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"because the script relies on https://api.github.com/repos/w3c/web-platform-tests/collaborators","msgtype":"m.text"},"ts":1400561939000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the sync script","msgtype":"m.text"},"ts":1400561954000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: and you're not listed there and neither am I","msgtype":"m.text"},"ts":1400561977000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"weird","msgtype":"m.text"},"ts":1400561991000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1400562002000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"i can report it to github if you like","msgtype":"m.text"},"ts":1400562027000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: yeah please do if you have time","msgtype":"m.text"},"ts":1400562038000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: and in the mean time I guess the workaround to get something mirrored is to ask somebody who's actually listed there to add a comment","msgtype":"m.text"},"ts":1400562104000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"jgraham is not there either, no Ms2ger, so I guess we really should be checking it against some other list if there is one","msgtype":"m.text"},"ts":1400562154000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: what's your github handle?","msgtype":"m.text"},"ts":1400562193000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: sideshowbarker","msgtype":"m.text"},"ts":1400562205000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: ok reported. didn't get a URL or anything for the issue and i failed to get under 140 chars so i didn't get a gold star","msgtype":"m.text"},"ts":1400562497000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"but i'll let you know when i get a reply","msgtype":"m.text"},"ts":1400562512000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: thanks","msgtype":"m.text"},"ts":1400562792000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"win 27","msgtype":"m.text"},"ts":1400562797000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hixie: i think i didn't write \"\"; but actually wrote \"list of available images\"; in https://www.w3.org/Bugs/Public/show_bug.cgi?id=25797","msgtype":"m.text"},"ts":1400565922000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hixie: is there a bug somewhere tampering with it or am i mistaken about what i wrote? :-)","msgtype":"m.text"},"ts":1400565967000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i don't log anything for file-bug.cgi, so dunno","msgtype":"m.text"},"ts":1400566014000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1400566026000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"but i can't imagine what i could do to cause that :-)","msgtype":"m.text"},"ts":1400566031000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah i dunno either","msgtype":"m.text"},"ts":1400566050000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"maybe it was what i wrote","msgtype":"m.text"},"ts":1400566062000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"wait, i do log something","msgtype":"m.text"},"ts":1400566086000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"when did you file this? just now?","msgtype":"m.text"},"ts":1400566091000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"2014-05-19 07:37:09 UTC","msgtype":"m.text"},"ts":1400566104000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"tries to work out what time zone he's in","msgtype":"m.emote"},"ts":1400566159000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's either two minutes in the future or an hour ago","msgtype":"m.text"},"ts":1400566170000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"wait wtf","msgtype":"m.text"},"ts":1400566187000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"this computer's clock is WAY off","msgtype":"m.text"},"ts":1400566192000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Hi. Last PDF was not generated because of missing fonts. It seems there are new rare characters in the spec. :-) I'll find suitable font and regenerate it.","msgtype":"m.text"},"ts":1400566305000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"hehe thanks :-)","msgtype":"m.text"},"ts":1400566326000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"zcorpan: ok according to the logs if there's a bug it's somewhere in Apache or Perl's core libraries","msgtype":"m.text"},"ts":1400566374000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"zcorpan: because my code gets the text, then logs it immediately before fiddling with it, and it logged \"\".","msgtype":"m.text"},"ts":1400566397000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: so that means it's unlikely that there is a bug","msgtype":"m.text"},"ts":1400566457000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i can try filing a new bug with what i think i wrote, and see if it reproduces","msgtype":"m.text"},"ts":1400566482000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"occam's razor suggests there isn't a bug. murphy's law suggests there is. your call. :-)","msgtype":"m.text"},"ts":1400566488000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"didn't reproduce","msgtype":"m.text"},"ts":1400566592000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I have written a script that looks for missing characters and prints font list that contains it sorted by number of missing characters found in each font. :-)","msgtype":"m.text"},"ts":1400566764000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"Hixie: I've fixed it. :-)","msgtype":"m.text"},"ts":1400568613000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"Hixie: Currently the document needs 15 fonts. (And some web-fonts too.)","msgtype":"m.text"},"ts":1400568710000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"Hixie: I think the only reason you wanted FontLoader or some such is to be able to have a solution for fonts in workers","msgtype":"m.text"},"ts":1400572021000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: in combination with <canvas> in workers","msgtype":"m.text"},"ts":1400572027000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Which exists!","msgtype":"m.text"},"ts":1400572618000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I need to make FontFace objects transferable, but you can definitely construct them inside of a worker and add them to the font source.","msgtype":"m.text"},"ts":1400572678000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hm, I'm adding a .fonts property to the worker global.  Is that okay?  Should I be doing something else?","msgtype":"m.text"},"ts":1400572702000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It's added to document in normal pages.","msgtype":"m.text"},"ts":1400572709000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: why not CSS.fonts ?","msgtype":"m.text"},"ts":1400573429000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Good question, I guess.","msgtype":"m.text"},"ts":1400573509000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I guess another thing to think about is how this would work with modules","msgtype":"m.text"},"ts":1400574049000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: presumably once you import \"css\" this should be imported as well, but we haven't really explored the layering of the subsystems I suppose","msgtype":"m.text"},"ts":1400574092000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: What's your take on promise-vending .loaded() methods (http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2014-March/253949.html)? The HTML Imports spec wants it (https://www.w3.org/Bugs/Public/show_bug.cgi?id=25007) but it'd be great to have it on other <link> elements too (and maybe img, script)","msgtype":"m.text"},"ts":1400574108000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: why methods?","msgtype":"m.text"},"ts":1400575642000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: because they're of the moment. As in, img.src = foo; img.loaded().then(...); img.src = bar; img.loaded().then(...)","msgtype":"m.text"},"ts":1400575930000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"felt like methods made more sense, but it wouldn't break my world if they were properties :D","msgtype":"m.text"},"ts":1400575971000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: if you invoke loaded() multiple times, do you get the same object?","msgtype":"m.text"},"ts":1400576949000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yes, unless there's a good reason not to. Of course, as soon as you change \"src\" the promise vended by loaded() changes","msgtype":"m.text"},"ts":1400577020000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: in that case a property seems fine","msgtype":"m.text"},"ts":1400577033000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: navigator.serviceWorker.whenReady should be the same I guess","msgtype":"m.text"},"ts":1400577100000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(although I hate that API with a passion, but don't have a better idea)","msgtype":"m.text"},"ts":1400577111000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yeah makes sense","msgtype":"m.text"},"ts":1400577123000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It feels kind of weird to have a promised not related to the action itself.","msgtype":"m.text"},"ts":1400578477000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"As in: img.loadResource(url).then(...","msgtype":"m.text"},"ts":1400578524000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I don't think it's a big deal. People have been using whatever.ready(callback) in various libraries","msgtype":"m.text"},"ts":1400578928000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"tobie: it's just status observation, seems fine for one-offs","msgtype":"m.text"},"ts":1400578967000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah. There seems to be cases where there's no other solution than that one. Thinking out loud really, but it seems it would help if we can classify those.","msgtype":"m.text"},"ts":1400579092000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"mathiasbynens: validator.nu seems to be up for me. maybe it was just busy earlier?","msgtype":"m.text"},"ts":1400579270000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Seems most of them are around the declarative/imperative boundary (not sure whether this helps).","msgtype":"m.text"},"ts":1400579441000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"hsivonen: yeah, works fine now. I’ll keep an eye on it","msgtype":"m.text"},"ts":1400579723000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"tobie: well, serviceWorker.whenReady is not on that boundary I think","msgtype":"m.text"},"ts":1400580392000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Neither is document.ready()","msgtype":"m.text"},"ts":1400580423000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"tobie: I think the pattern is more that if you have something that multiple parties might want to observe, you need to expose it independently from the action","msgtype":"m.text"},"ts":1400580432000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"doc.ready is.","msgtype":"m.text"},"ts":1400580445000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: as a status-promise","msgtype":"m.text"},"ts":1400580445000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Or anyParserInsertedElement.loaded()","msgtype":"m.text"},"ts":1400580450000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(again, I'd prefer document.ready and ele.loaded)","msgtype":"m.text"},"ts":1400580466000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah yes, sorry","msgtype":"m.text"},"ts":1400580482000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"you mean props?","msgtype":"m.text"},"ts":1400580486000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I agree.","msgtype":"m.text"},"ts":1400580491000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"document.querySelector('img').loaded.then(...)","msgtype":"m.text"},"ts":1400580509000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"document.images[0].loaded.then(…)","msgtype":"m.text"},"ts":1400580549000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"</code-golf>","msgtype":"m.text"},"ts":1400580561000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"haha","msgtype":"m.text"},"ts":1400580585000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"but your IRC handle is longer, so it almost balances out","msgtype":"m.text"},"ts":1400580626000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"None of these (.ready, .ready() .whenReady()) are particularly nice. :(","msgtype":"m.text"},"ts":1400580779000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"What's not nice about it? Do you feel the same about jquery's $(document).ready(callback)?","msgtype":"m.text"},"ts":1400580850000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yeah. it's terrible.","msgtype":"m.text"},"ts":1400580861000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"but less ugly with a callback then with a promise.","msgtype":"m.text"},"ts":1400580906000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Got anything more constructive? :D","msgtype":"m.text"},"ts":1400580978000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Man, I wish I had.","msgtype":"m.text"},"ts":1400581001000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"FontFace uses a .loaded attribute to expose a promise.","msgtype":"m.text"},"ts":1400581091000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"tobie: A promise is a callback. ^_^","msgtype":"m.text"},"ts":1400581107000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Ohh, I didn't realise that. Well, that's all the more reason for these to be attributes & not methods","msgtype":"m.text"},"ts":1400581182000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"agreed.","msgtype":"m.text"},"ts":1400581190000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Oh right, TabAtkins is in Seoul, it all makes sense now","msgtype":"m.text"},"ts":1400581192000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hah, wondering about my timezone?","msgtype":"m.text"},"ts":1400581201000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"when(font.loaded).then","msgtype":"m.text"},"ts":1400581203000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: ??? No, font.loaded.then(...)","msgtype":"m.text"},"ts":1400581218000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(sorry, toying with stuff)","msgtype":"m.text"},"ts":1400581222000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: I was doing the math and at 3-4AM you're usually not around","msgtype":"m.text"},"ts":1400581225000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah, checking gavin's stats I'm virtually never around in the 12am to 6am block.","msgtype":"m.text"},"ts":1400581249000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Still a good bit behind jgraham in the stats.  I don't think I'll ever move past 5th place.","msgtype":"m.text"},"ts":1400581300000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Whoa, Hixie made a solid comeback :-)","msgtype":"m.text"},"ts":1400581332000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"await img.loaded;","msgtype":"m.text"},"ts":1400581343000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: you can almost read it","msgtype":"m.text"},"ts":1400581358000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wfm","msgtype":"m.text"},"ts":1400581372000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Only concern I still have is loaded feels a tad like a boolean","msgtype":"m.text"},"ts":1400581399000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: Was my concern too, but shrug.","msgtype":"m.text"},"ts":1400581416000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah.","msgtype":"m.text"},"ts":1400581421000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"What's gavin's stats?","msgtype":"m.text"},"ts":1400581434000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: see /topic","msgtype":"m.text"},"ts":1400581446000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"duh","msgtype":"m.text"},"ts":1400581454000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Also glob has stats under \"about\". Not as detailed as gavin's though","msgtype":"m.text"},"ts":1400581694000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But using more data, I think?","msgtype":"m.text"},"ts":1400581716000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"dear gavin (or gavin__ ), your stats page doesn't handle unicode properly.","msgtype":"m.text"},"ts":1400581725000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Saw some curly quotes turned into â€œ","msgtype":"m.text"},"ts":1400581751000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"will never get over that Divya holds both first and second place for most all-caps shouting.","msgtype":"m.emote"},"ts":1400581811000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Even when you cut her shouting in half, she beats everyone else.","msgtype":"m.text"},"ts":1400581851000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I have a theory that the most productive place to write documentation is on the train. Maybe I should just go and sit on the circle line for the rest of the day.","msgtype":"m.text"},"ts":1400582050000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(yes, I know you can't actually just go round and round the circle line anymore)","msgtype":"m.text"},"ts":1400582071000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Sounds like a theory to be tested","msgtype":"m.text"},"ts":1400582076000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I certainly like writing on the train.","msgtype":"m.text"},"ts":1400582108000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: Looking at https://github.com/slightlyoff/ServiceWorker/issues/235#issuecomment-40742195 - agree the tagging thing is weird, but what can fetchEvent.default() resolve to?","msgtype":"m.text"},"ts":1400582563000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: event.default() could do a fetch but return OpaqueResponse for redirects. Could say that OpaqueResponse redirects don't go back through the serviceworker","msgtype":"m.text"},"ts":1400582966000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"feels like trading one kind of magic for another","msgtype":"m.text"},"ts":1400582977000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I think part of the problem is that you're not observing this from the perspective of how APIs use Fetch (the platform layer, not the API)","msgtype":"m.text"},"ts":1400583033000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: most APIs use Fetch and have it follow redirects","msgtype":"m.text"},"ts":1400583046000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: the navigate action uses Fetch and explicitly tells it to not follow redirects, it's the only part of the platform that does that as far as I know (and maybe AppCache now?)","msgtype":"m.text"},"ts":1400583079000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: so in the typical case all redirects will be followed and you get back a normal Response","msgtype":"m.text"},"ts":1400583118000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: in the navigate case you can already get back an OpaqueResponse as the user can navigate away from your site","msgtype":"m.text"},"ts":1400583153000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: so there we'd hand back an OpaqueResponse for redirects (because Fetch was instructed not to follow them) and allow the navigate action to inspect that and take appropriate action","msgtype":"m.text"},"ts":1400583215000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: but I don't think explaining this in terms of fetch() helps, as that might throw away CSP things, priorities, etc.","msgtype":"m.text"},"ts":1400583277000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: also, there's some things we need to consider with respect to what happens when the user navigates away and the service worker hands back a generated response or some such","msgtype":"m.text"},"ts":1400583334000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: So, if I have <link rel=stylesheet href=blah>, it goes off into the fetch layer, does its redirects, and gives the page its response. How is the base url of the CSS handled, via the response url?","msgtype":"m.text"},"ts":1400583395000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yes","msgtype":"m.text"},"ts":1400583499000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(assuming no service workers in play)","msgtype":"m.text"},"ts":1400583511000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: i ran a screenshot of the spec through a color blindness simulator, and it seems OK with protanopia and deuteranopia (1-5% in males), but the link is almost the same as the surrounding text with tritanopia (< 0.003% of males and females)","msgtype":"m.text"},"ts":1400584291000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"(unvisited link, didn't include a visited link in the image)","msgtype":"m.text"},"ts":1400584334000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"jgraham: So like Yamanote parties, just more boring? :D","msgtype":"m.text"},"ts":1400584415000,"senderName":"wilhelm","senderId":"wilhelm@irc"},
{"content":{"body":"http://www.etre.com/simulate.php?image=defa540b013c2e5c3fdfcbd79b63c773&condition=tritanopia&type=jpeg - tritanopia (zoom in, i guess the blurry result can simulate some other visual impairedness :-P)","msgtype":"m.text"},"ts":1400584513000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hixie: that said, i think the current style is an improvement","msgtype":"m.text"},"ts":1400585173000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"wilhelm: I'm not sure I would want to try and work on the Tokyo metro","msgtype":"m.text"},"ts":1400585346000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: Can I get a sanity check of this? https://github.com/slightlyoff/ServiceWorker/issues/235#issuecomment-43614413","msgtype":"m.text"},"ts":1400585742000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Hixie: i'm not entirely sure about the :target styling. i think i'd want the arrow and its box to be smaller. some color for that thing seems OK to me","msgtype":"m.text"},"ts":1400585899000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: It could be fun to have a designer play with a revision of the stylesheet.","msgtype":"m.text"},"ts":1400586072000,"senderName":"wilhelm","senderId":"wilhelm@irc"},
{"content":{"body":"has one in mind. (c:","msgtype":"m.emote"},"ts":1400586076000,"senderName":"wilhelm","senderId":"wilhelm@irc"},
{"content":{"body":"wilhelm: like http://developers.whatwg.org ?","msgtype":"m.text"},"ts":1400586127000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Oh, I hadn't seen that one. That's certainly more readable. (c:","msgtype":"m.text"},"ts":1400586215000,"senderName":"wilhelm","senderId":"wilhelm@irc"},
{"content":{"body":"Hixie: the \"next\" link at the bottom is a nice thing in the dev version","msgtype":"m.text"},"ts":1400586282000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"JakeA: looks wrong","msgtype":"m.text"},"ts":1400586550000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: default() just needs to use incoming \"fetchStandardRequest\" that could have manualRedirect either set to true or false","msgtype":"m.text"},"ts":1400586617000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"benschwarz_: seems like the svg doesn't load/exist in http://developers.whatwg.org/content-models.html#kinds-of-content","msgtype":"m.text"},"ts":1400586623000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"JakeA: e.g. <img src=...> comes in SW, SW does default(), redirects will be followed","msgtype":"m.text"},"ts":1400586647000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: isn't that correct?","msgtype":"m.text"},"ts":1400586688000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: oh wait, I missed the if statement","msgtype":"m.text"},"ts":1400586750000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: so <img> is going to be able to load two resources in parallel","msgtype":"m.text"},"ts":1400586822000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"in case that affects things for SW","msgtype":"m.text"},"ts":1400586839000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"JakeA: even so, there's no castToOpaqueResponse needed, that should be wrapped automagically","msgtype":"m.text"},"ts":1400586840000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: that'll just be two events quickly after another","msgtype":"m.text"},"ts":1400586853000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: SW can't do true parallel","msgtype":"m.text"},"ts":1400586894000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: as in, the way I think this should work is that .default() just hands the request back to Fetch and Fetch does the rest","msgtype":"m.text"},"ts":1400586958000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wilhelm++ for getting a designer to play with the stylesheet. Although they have to understand the functional requirements (most of the things that have style have it for a reason, but the styles that they have aren't necessarily good)","msgtype":"m.text"},"ts":1400586970000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"JakeA: and then Fetch hands a Response, potentially Opaque, back to .default()'s promise","msgtype":"m.text"},"ts":1400586989000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: not sure i follow, but then i basically know nothing about SW :-)","msgtype":"m.text"},"ts":1400587016000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: the network stack is still on a single thread","msgtype":"m.text"},"ts":1400587041000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: anyway, it should be fine","msgtype":"m.text"},"ts":1400587084000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: so you can only fetch one thing at a time in a SW?","msgtype":"m.text"},"ts":1400587090000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: you can queue one thing at a time","msgtype":"m.text"},"ts":1400587106000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: it's a subtle but important difference, and that's not really limited to SW","msgtype":"m.text"},"ts":1400587129000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but then you could have mutliple things fetching at the same time?","msgtype":"m.text"},"ts":1400587152000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: yeah, it's not really different from constructing several XHRs in a row and then invoking send() in them in a row and waiting for data to come back","msgtype":"m.text"},"ts":1400587200000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok. so i didn't mean that <img> is able to queue two things in parallel. i meant that it could start fetch A at time T and start fetch B at time T+x which would not necessarily abort A","msgtype":"m.text"},"ts":1400587272000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"jgraham: Indeed. (c:","msgtype":"m.text"},"ts":1400587331000,"senderName":"wilhelm","senderId":"wilhelm@irc"},
{"content":{"body":"zcorpan: I can't think offhand of places that assume 1 API : 1 fetch","msgtype":"m.text"},"ts":1400587362000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1400587379000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: well... sounds like a potential problem for integrity=\"\"","msgtype":"m.text"},"ts":1400587405000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: and of course you can't control crossorigin for each fetch","msgtype":"m.text"},"ts":1400587418000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: you might want to email public-webappsec⊙wo with regards to integrity=\"\" I suppose, given that this kind of loading is actually a feature people want to use","msgtype":"m.text"},"ts":1400587470000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"s/given/provided/","msgtype":"m.text"},"ts":1400587485000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: do you have a pointer to integrity=\"\"?","msgtype":"m.text"},"ts":1400587501000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: it's not so much want to use, more required for web compat","msgtype":"m.text"},"ts":1400587516000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: http://w3c.github.io/webappsec/specs/subresourceintegrity/","msgtype":"m.text"},"ts":1400587516000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: basically allows you to specify a hash for the resource","msgtype":"m.text"},"ts":1400587533000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so... for example let's say you have <img src=foo integrity=bar> and then, while foo is loading but the dimensions are known, you do .src = 'baz'; .integrity = 'quux'; which starts a pending fetch. then foo completes loading and the UA compares the hash and finds that it doesn't match quux?","msgtype":"m.text"},"ts":1400587726000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"maybe the integrity thing could check the value of the integrity attribute at the time you resolve the URL or at the time you start the fetch, instead of when you're done fetching","msgtype":"m.text"},"ts":1400587914000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: it could be an argument for tight coupling the integrity data with the fetch","msgtype":"m.text"},"ts":1400587993000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"seems like it does take the integrity at the time of start of fetch","msgtype":"m.text"},"ts":1400588012000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"also: monkey patching","msgtype":"m.text"},"ts":1400588080000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: yeah, temporarily","msgtype":"m.text"},"ts":1400588092000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Temporarily monkey patching is actually somewhat beneficial, it's just that people don't always follow up on cleaning up","msgtype":"m.text"},"ts":1400588138000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it seems like the general approach is compatible with <img>'s dual fetching","msgtype":"m.text"},"ts":1400588141000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1400588149000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"do people want to use integrity together with picture/srcset ?","msgtype":"m.text"},"ts":1400588262000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"prolly","msgtype":"m.text"},"ts":1400588350000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"<img srcset=\"foo.jpg 100w integrity(foo), bar.jpg 200w integrity(bar)\"> maybe","msgtype":"m.text"},"ts":1400588366000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"if that works that could be nice","msgtype":"m.text"},"ts":1400588381000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"can you do url(foo.jpg) too?","msgtype":"m.text"},"ts":1400588408000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1400588414000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1400588418000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I would expect CSS to end up with fetch(foo.jpg, other stuff here)","msgtype":"m.text"},"ts":1400588435000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and deal with integrity that way if we want it there","msgtype":"m.text"},"ts":1400588446000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"can you give an example of how it would work together with some property (like background-image, say)?","msgtype":"m.text"},"ts":1400588509000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"background-image:fetch(foo.jpg, some new syntax)","msgtype":"m.text"},"ts":1400588758000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that's pretty ugly","msgtype":"m.text"},"ts":1400588784000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(using \"fetch\" there sounds very imperative whereas css is typically declarative)","msgtype":"m.text"},"ts":1400588816000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: i think foo.jpg will need to be either a string or a url() to remain sanity","msgtype":"m.text"},"ts":1400588920000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"but i also agree with jgraham about the imperative part","msgtype":"m.text"},"ts":1400588946000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: I'm sort of indifferent on the name and the syntax particulars","msgtype":"m.text"},"ts":1400588968000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1400588981000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"so now there's a thing called image() in css","msgtype":"m.text"},"ts":1400588998000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"with some new syntax","msgtype":"m.text"},"ts":1400589005000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"it's more that we need to be able to pass more data along with a URL","msgtype":"m.text"},"ts":1400589018000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so maybe integrity can go in that","msgtype":"m.text"},"ts":1400589019000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"can image() be used for SVG subresources and shapes and things?","msgtype":"m.text"},"ts":1400589040000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"also doesn't work for @import","msgtype":"m.text"},"ts":1400589052000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah i guess we've deferred on supporting crossorigin for @import","msgtype":"m.text"},"ts":1400589264000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":":/","msgtype":"m.text"},"ts":1400589464000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"maybe i can bring it up tomorrow","msgtype":"m.text"},"ts":1400589515000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"is there an email somewhere about this?","msgtype":"m.text"},"ts":1400589527000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"don't think so","msgtype":"m.text"},"ts":1400589544000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"can you send one to www-style? :-)","msgtype":"m.text"},"ts":1400589552000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"well, there's a long thread on public-fx somewhere","msgtype":"m.text"},"ts":1400589558000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"regarding what to do with shapes and SVG and what not and how they can all work together","msgtype":"m.text"},"ts":1400589570000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"how can you figure out if two things happen in the same task?","msgtype":"m.text"},"ts":1400589682000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"doesn't follow","msgtype":"m.emote"},"ts":1400589746000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"http://dump.testsuite.org/xhr/upload-events.html I want to know if (upload) \"loadend: 1\" is in the same task as \"xhr onreadystatechange: 2\"","msgtype":"m.text"},"ts":1400589867000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm, in Chrome they are not","msgtype":"m.text"},"ts":1400589979000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: like load() a video in the first event and check the networkState in the second event","msgtype":"m.text"},"ts":1400590470000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: for next time :-)","msgtype":"m.text"},"ts":1400590503000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: if it's NETWORK_NO_SOURCE then they were the same task, if it's NETWORK_EMPTY then they were separate tasks","msgtype":"m.text"},"ts":1400590544000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"for a <video> without src or source","msgtype":"m.text"},"ts":1400590568000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: do you have a pointer to public-fx thread?","msgtype":"m.text"},"ts":1400590722000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: otherwise, please send a short message to www-style so i can bring it up tomorrow. now i need to sleep","msgtype":"m.text"},"ts":1400590845000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: around http://lists.w3.org/Archives/Public/public-fx/2013AprJun/thread.html#msg176","msgtype":"m.text"},"ts":1400590954000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thx","msgtype":"m.text"},"ts":1400591487000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: but note that <video> doesn't use tasks as per spec in at least WebKit, Blink and Presto, so if it doesn't work be careful about which code to blame :)","msgtype":"m.text"},"ts":1400593132000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: That sounded a lot like \"if it doesn't work, blame foolip\" :)","msgtype":"m.text"},"ts":1400593181000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: that wouldn't be entirely unfair :)","msgtype":"m.text"},"ts":1400593379000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"I wonder what happend to HTTPbis https://www.w3.org/Bugs/Public/show_bug.cgi?id=25097#c0","msgtype":"m.text"},"ts":1400593966000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: if the request is to the same origin, but it responds with a redirect to /somewhere-else/?secret=1234567890, will that be an OpaqueResponse?","msgtype":"m.text"},"ts":1400593983000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: I thought it wouldn't be, which is why I added the cast","msgtype":"m.text"},"ts":1400594009000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yeah, currently Fetch does not say that because the redirect would not be exposed to script, but once that's an option I'll make sure to do that right at the source","msgtype":"m.text"},"ts":1400594117000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah I thought I remembered seeing a tweet from Julian months ago that implied it had been sent to the IETF editor for publication","msgtype":"m.text"},"ts":1400594141000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: btw html5.org/tools/web-apps-tracker is hanging atm","msgtype":"m.text"},"ts":1400594234000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: prolly means svn.whatwg.org is hanging","msgtype":"m.text"},"ts":1400594254000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm no","msgtype":"m.text"},"ts":1400594270000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: seems to work again","msgtype":"m.text"},"ts":1400594357000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah wfm too now","msgtype":"m.text"},"ts":1400594383000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: whew? (re: dodging another onclick)","msgtype":"m.text"},"ts":1400596847000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: I have no idea what is going on","msgtype":"m.text"},"ts":1400596862000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zewt: I blame DOM Level 3 Events for not cleaning this up","msgtype":"m.text"},"ts":1400596875000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i think we should discourage people from ever using the phrase \"default action\"","msgtype":"m.text"},"ts":1400596887000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I have been trying to call it out each time I see it","msgtype":"m.text"},"ts":1400596906000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zewt: what onclick behavior though?","msgtype":"m.text"},"ts":1400596915000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the fact that onclick does have \"in-dispatch\" behavior","msgtype":"m.text"},"ts":1400596941000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i think we need a new name for that, to clearly distinguish it from what people think of as \"default actions\"","msgtype":"m.text"},"ts":1400596995000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: pointer to the spec for that? I think I'm missing something","msgtype":"m.text"},"ts":1400597014000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: if a fetch is performed as part of a navigation, is the responses url redundant?","msgtype":"m.text"},"ts":1400597018000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"i don't know if it's specced anywhere","msgtype":"m.text"},"ts":1400597024000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"response's*","msgtype":"m.text"},"ts":1400597025000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: could still be relevant if the SW returned something unexpected","msgtype":"m.text"},"ts":1400597056000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: like?","msgtype":"m.text"},"ts":1400597095000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: navigate to /bar SW returns response for http://www.google.com/","msgtype":"m.text"},"ts":1400597116000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://zewt.org/~glenn/test-stupid-click-event.html","msgtype":"m.text"},"ts":1400597135000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: I think the exception there is OpaqueResponse, not url","msgtype":"m.text"},"ts":1400597137000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: I think it was good guidance that events are for notification, not actions. I hadn't read that anywhere before.","msgtype":"m.text"},"ts":1400597152000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: it's not really an exception","msgtype":"m.text"},"ts":1400597197000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: but it would be a CORSResponse","msgtype":"m.text"},"ts":1400597210000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That's fine though, isn't it?","msgtype":"m.text"},"ts":1400597219000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: but in that case you want to look at the url of the response","msgtype":"m.text"},"ts":1400597235000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i think there are a couple other events like that but I don't know what they are","msgtype":"m.text"},"ts":1400597236000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"JakeA: you being the navigate algorithm","msgtype":"m.text"},"ts":1400597244000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: yeah, maybe I should add that more explicitly to the DOM specification","msgtype":"m.text"},"ts":1400597262000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i wonder if that could be explained in terms of capturing the event on the link, then queuing a task to look at defaultPrevented after the event finishes... probably not, since that could be broken by stopPropagationImmediate","msgtype":"m.text"},"ts":1400597297000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: +1, that would be excellent.","msgtype":"m.text"},"ts":1400597367000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"zewt: so when I tested myself I forgot to generate an event that is a MouseEvent","msgtype":"m.text"},"ts":1400597380000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sorry, I thought we talked about this before or I'd have made more noise about it","msgtype":"m.text"},"ts":1400597406000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: I'm wondering if we can ditch fetchEvent.default(). If subresources have a base url of response.url, but navigations use window.location.href (as in, what's in the url bar), I don't think we need .default()","msgtype":"m.text"},"ts":1400597421000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: oh wow, i was wondering when someone would bring up the ArrayBuffer mess","msgtype":"m.text"},"ts":1400597481000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: default() is for preserving the request instance","msgtype":"m.text"},"ts":1400597526000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: so you preserve e.g. that redirects are not to be followed","msgtype":"m.text"},"ts":1400597556000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: and that CSP applies","msgtype":"m.text"},"ts":1400597567000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zewt: HTML has a bunch of stuff around \"synthetic click\"","msgtype":"m.text"},"ts":1400597657000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I'm not sure what is going on there","msgtype":"m.text"},"ts":1400597745000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: or how their implementations have been moved to ES without anyone else noticing this","msgtype":"m.text"},"ts":1400597762000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"html spec seems to be thrashing chrome on load way more than it was","msgtype":"m.text"},"ts":1400597767000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: my guess is that they only looked at the Khronos spec, which doesn't contain neutering? (Is that true?)","msgtype":"m.text"},"ts":1400597784000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"heh now I'm scrolling the spec and getting a transparent background","msgtype":"m.text"},"ts":1400597798000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Domenic: no Khronos defines what to do when something is neutered","msgtype":"m.text"},"ts":1400597822000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: http://www.khronos.org/registry/typedarray/specs/latest/","msgtype":"m.text"},"ts":1400597826000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: hmm, true","msgtype":"m.text"},"ts":1400597832000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: there's \"synthetic click activation steps\", which has nothing to do with events I think","msgtype":"m.text"},"ts":1400597840000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(click-like things to do when other things happen, not when the user dispatches his own click event)","msgtype":"m.text"},"ts":1400597897000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: welp... more cases where Allen is not properly integrating with existing systems, IMO.","msgtype":"m.text"},"ts":1400597909000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"is still disgruntled about ES tasks vs. HTML microtasks","msgtype":"m.emote"},"ts":1400597920000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"why would the language level have tasks? that doesn't even make sense","msgtype":"m.text"},"ts":1400597935000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"tasks are part of the event loop, which don't belong at the language layer","msgtype":"m.text"},"ts":1400597950000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: how can you have asynchronous language then?","msgtype":"m.text"},"ts":1400597969000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that doesn't belong at the language layer either","msgtype":"m.text"},"ts":1400597988000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: I think you're right that HTML basically does not define this; I slowly start to remember a long time ago when we looked at this and decided it was for DOM Level 3 Events to define and that of course never happened","msgtype":"m.text"},"ts":1400598010000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zewt: see async/await syntax","msgtype":"m.text"},"ts":1400598018000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"especially here, where the web has a complex event loop mechanism; the language is at a lower layer than it","msgtype":"m.text"},"ts":1400598047000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: i don't think an external spec could define it without monkey patching, since it seems to need a hook in dispatchEvent","msgtype":"m.text"},"ts":1400598074000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: I found https://www.w3.org/Bugs/Public/show_bug.cgi?id=10897","msgtype":"m.text"},"ts":1400598246000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"don't think the popup counterexample is valid (just check the trusted flag)","msgtype":"m.text"},"ts":1400598337000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i wrote code myself that dispatched click myself (before I knew what I was doing), so it seems guaranteed that other people have too","msgtype":"m.text"},"ts":1400598371000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(i was capturing events on document, cancelling them, doing other stuff, then re-dispatching them later; it worked for click, and I recall being annoyed that it didn't work with submit)","msgtype":"m.text"},"ts":1400598398000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: https://www.w3.org/Bugs/Public/show_bug.cgi?id=12230 seems to be master bug","msgtype":"m.text"},"ts":1400598399000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(it does work with submit? maybe it was some other event I had trouble with)","msgtype":"m.text"},"ts":1400598493000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"or maybe not (according to comment 10); retesting...","msgtype":"m.text"},"ts":1400598530000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"submits for me in firefox, but not chrome","msgtype":"m.text"},"ts":1400598732000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(maybe that's what I was annoyed about--probably wrote the code in firefox first)","msgtype":"m.text"},"ts":1400598760000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(test at same url)","msgtype":"m.text"},"ts":1400598785000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"good morning, Whatwg!","msgtype":"m.text"},"ts":1400598789000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"i need to script my client to say good morning like that in every channel, it's so charming","msgtype":"m.text"},"ts":1400598890000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"annevk: if I do event.respondWith(caches.match('/fallback.html')), what's the base url for the resulting page (assuming no <base> element)? Is it event.request.url or the cachedRepsonse.url?","msgtype":"m.text"},"ts":1400598913000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(don't, it's really annoying; highlights everyone's window for no reason)","msgtype":"m.text"},"ts":1400598914000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: Feels like it should be the former","msgtype":"m.text"},"ts":1400598933000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yes","msgtype":"m.text"},"ts":1400599021000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I think we jotted this on the etherpad at some point","msgtype":"m.text"},"ts":1400599109000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: What if fetch(request) didn't follow redirects if the context was one of the navigation ones? Then the only benefit of event.default() is CSP, right?","msgtype":"m.text"},"ts":1400599207000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: prioritization","msgtype":"m.text"},"ts":1400599397000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: oh, and default() follows redirects for subresources and updates the resulting url","msgtype":"m.text"},"ts":1400599470000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: e.g. if you do respondWith(fetch(\"something-that-redirects\")) it wasn't clear to me we'd use the response's url as base URL","msgtype":"m.text"},"ts":1400599512000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think using the responses url as base url for non-navigations is fine. I wasn't keen on that at first, but it fits in with the fetch spec nicely","msgtype":"m.text"},"ts":1400599647000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"but not with typical server setups","msgtype":"m.text"},"ts":1400599707000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, the concept of responses with a url property felt really alien to me at first","msgtype":"m.text"},"ts":1400599916000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: But then, in a typical server setup, the base url would be event.request.url, but if I did event.respondWith(fetch(url)) the base would be url & not event.request.url, right?","msgtype":"m.text"},"ts":1400599975000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"unless respondWith overrides the response url, but then how can it tell the difference between event.default() and fetch()","msgtype":"m.text"},"ts":1400600024000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"response URLs make sense to me, they're the URL after all redirects, right?","msgtype":"m.text"},"ts":1400600226000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah, but they don't exist in the traditional client/server model","msgtype":"m.text"},"ts":1400600292000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: right, but there's a difference between ClientRequest/ClientResponse and ServerRequest/ServerResponse","msgtype":"m.text"},"ts":1400600325000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"if writing a web server, you use the latter; if sending requests as a client, you use the former","msgtype":"m.text"},"ts":1400600346000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Node.js actually has 4 different classes for this","msgtype":"m.text"},"ts":1400600353000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: Fetch uses the latest url of Request, as url for Response","msgtype":"m.text"},"ts":1400600369000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: but note that SW sits a layer deeper","msgtype":"m.text"},"ts":1400600387000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: so the latest url of Request is the one that the SW was opened for","msgtype":"m.text"},"ts":1400600407000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: if you use default() however, the url of that Request will be updated further","msgtype":"m.text"},"ts":1400600428000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: right, so here's the question, if I do fetchEvent.respondWith(fetch(url)), assuming the fetch is for some CSS, what's the base-url for the response? a) fetchEvent.request.url b) url c) the final redirect while fetching url","msgtype":"m.text"},"ts":1400600507000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I don't feel qualified to give an answer that fits well with the rest of the moving parts involved, but my gut instinct is c).","msgtype":"m.text"},"ts":1400600634000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Gut instinct is fine. I think my original instinct was a), but I'm coming round to c)","msgtype":"m.text"},"ts":1400600694000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: wouldn't fetch take the response url from response.url, as provided by the serviceworker?","msgtype":"m.text"},"ts":1400600843000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"TabAtkins: blame pisg, probably","msgtype":"m.text"},"ts":1400601150000,"senderName":"gavin","senderId":"gavin@irc"},
{"content":{"body":"JakeA: not how it's currently written","msgtype":"m.text"},"ts":1400601218000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I feel like I/we should create a series of examples of request / response flows when there's a SW and figure out what all the various parties want to know","msgtype":"m.text"},"ts":1400601367000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'll make a ticket to try and summarise this. I'd love to kill event.default() if we can","msgtype":"m.text"},"ts":1400601368000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I was hoping that would be done as part of providing hooks for Fetch, but I can take a stab at it too I suppose","msgtype":"m.text"},"ts":1400601394000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: killing that does not make much sense to me, I'd prefer we focus on understanding the problem space first","msgtype":"m.text"},"ts":1400601430000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ok, I'll provide examples in the ticket and see what we're left with","msgtype":"m.text"},"ts":1400601485000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: event.default(), .installing/waiting/active/controller, and serviceWorker.waitUntil are keeping me awake at night","msgtype":"m.text"},"ts":1400601886000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: this reminds me, we need to figure out our story for .loaded vs. .loaded()","msgtype":"m.text"},"ts":1400602113000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I was going to comment in bug, I should probably do that so that there's a record.","msgtype":"m.text"},"ts":1400602122000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but basically https://github.com/w3ctag/promises-guide/issues/25","msgtype":"m.text"},"ts":1400602141000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"why would loaded() be a method?","msgtype":"m.text"},"ts":1400602276000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"shouldn't there be one promise per load attempt?","msgtype":"m.text"},"ts":1400602281000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the FontFace API approach seems sensible","msgtype":"m.text"},"ts":1400602299000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"There was a conversation around this earlier http://krijnhoetmer.nl/irc-logs/whatwg/20140520#l-395","msgtype":"m.text"},"ts":1400602404000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yes that's what led to my question","msgtype":"m.text"},"ts":1400602427000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Doing the same as FontFace is compelling","msgtype":"m.text"},"ts":1400602442000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"well they should clearly be consistent, but if a method makes more sense thenwe should do that","msgtype":"m.text"},"ts":1400602471000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i just don't see why a method would make sense here","msgtype":"m.text"},"ts":1400602478000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"since it's vending the same value each time","msgtype":"m.text"},"ts":1400602483000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"a method implies that work is done","msgtype":"m.text"},"ts":1400602487000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"whereas here no work is done except \"return the cached value\"","msgtype":"m.text"},"ts":1400602495000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well, the value can change","msgtype":"m.text"},"ts":1400602513000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"if .src is changed","msgtype":"m.text"},"ts":1400602523000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"but that's easy enough","msgtype":"m.text"},"ts":1400602526000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"right, but that's the .src setter doing work","msgtype":"m.text"},"ts":1400602534000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1400602539000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"not loaded()/.loaded","msgtype":"m.text"},"ts":1400602539000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"in totally different news, i must admit to something. this no-underline style is actually growing on me. i was clearly wrong about that.","msgtype":"m.text"},"ts":1400602571000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"For the record, I've never found a style-related readability problem with the html spec. Except for that bit where there was a gradient at the top. Those were dark times for the web.","msgtype":"m.text"},"ts":1400602638000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"the backgrounds on examples and notes are prettier too.","msgtype":"m.text"},"ts":1400602641000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"JakeA: there's actually a gradient there still. :-D","msgtype":"m.text"},"ts":1400602663000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"JakeA: and yeah, me either, but we consistently get feedback about it","msgtype":"m.text"},"ts":1400602691000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"JakeA: i did a survey a few months ago, and it was funny, i got a bunch of feedback \"this spec is really pretty\" and a bunch of feedback \"this spec is really ugly\"","msgtype":"m.text"},"ts":1400602712000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ohh, the gradient is at the bottom now. Hadn't noticed that","msgtype":"m.text"},"ts":1400602746000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"i figured it was more subtle than the line that we had before","msgtype":"m.text"},"ts":1400602776000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(the line got harder to do right after i added a max-width on body)","msgtype":"m.text"},"ts":1400602786000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: FontFace returns a promise from the .load() method, but also exposes a .loaded promise for when you want to listen for the load status without actually triggering a load.","msgtype":"m.text"},"ts":1400603378000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1400603385000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"same promise right?","msgtype":"m.text"},"ts":1400603397000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":".loaded just returns the last value .load() created?","msgtype":"m.text"},"ts":1400603409000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"No, it was easier to just return a fresh promise that is resolved to the .loaded promise.","msgtype":"m.text"},"ts":1400603432000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"that seems confusing","msgtype":"m.text"},"ts":1400603448000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"why would it be easier?","msgtype":"m.text"},"ts":1400603451000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":".loaded is the same promise all the time.","msgtype":"m.text"},"ts":1400603465000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":".load() returns fresh promises, I think.  Lemme see...","msgtype":"m.text"},"ts":1400603473000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"until the next load, right?","msgtype":"m.text"},"ts":1400603474000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"A given font only loads once.","msgtype":"m.text"},"ts":1400603481000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ah ok","msgtype":"m.text"},"ts":1400603484000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well then why have more than one promise?","msgtype":"m.text"},"ts":1400603489000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"just have The One Promise Of The FontLoad Object","msgtype":"m.text"},"ts":1400603496000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Oh, no, they all return the same promise.","msgtype":"m.text"},"ts":1400603501000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yes.","msgtype":"m.text"},"ts":1400603501000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"or if you're doing it the JS style, [[The One Promise Of The FontLoad Object]]","msgtype":"m.text"},"ts":1400603506000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Every call to .load() returns the .loaded promise.","msgtype":"m.text"},"ts":1400603510000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That's the [[FontStatusPromise]]","msgtype":"m.text"},"ts":1400603517000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"called it","msgtype":"m.text"},"ts":1400603525000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":":-P","msgtype":"m.text"},"ts":1400603526000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hehe","msgtype":"m.text"},"ts":1400603528000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I dunno, I kind of feel that for things that could change, a method might be better?","msgtype":"m.text"},"ts":1400603591000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That way, if it's a property, it's the same every time, whereas if it's a method, it's more like \"getPromiseForNextTransitionToLoadedState()\"","msgtype":"m.text"},"ts":1400603638000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"except we shorten that to \".loaded()\"","msgtype":"m.text"},"ts":1400603645000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(or, \"whenLoaded()\" or \"waitForLoad()\"??)","msgtype":"m.text"},"ts":1400603681000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"when* and wait* are ugly","msgtype":"m.text"},"ts":1400603689000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"when doesn't seem so bad. but yes.","msgtype":"m.text"},"ts":1400603703000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but i don't understand what you mean","msgtype":"m.text"},"ts":1400603715000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"attributes can change","msgtype":"m.text"},"ts":1400603719000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if they couldn't, we'd call them constants :-)","msgtype":"m.text"},"ts":1400603734000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the thing to avoid with attributes is not that they change when state changes, but that they change every time they are called","msgtype":"m.text"},"ts":1400603747000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that is, the getter should be idempotent","msgtype":"m.text"},"ts":1400603756000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah, that's true","msgtype":"m.text"},"ts":1400603766000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but that's all really","msgtype":"m.text"},"ts":1400603766000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i think i am just trying to use the method vs. attribute designation to signal something only tangentially-related","msgtype":"m.text"},"ts":1400603783000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i.e. we have to classes of these promises: \"generic state transitions\" for state machines that could go back and forth, or \"intrinsic properties of the object\" for whether something has completed its one-time transition from not-loaded to loaded, or similar.","msgtype":"m.text"},"ts":1400603830000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"s/to/two","msgtype":"m.text"},"ts":1400603862000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but the methods i am proposing are definitely not actions, so that's a point against methods","msgtype":"m.text"},"ts":1400603940000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"most getter-methods get named with a `get` prefix, and `.getLoaded()` is horrible...","msgtype":"m.text"},"ts":1400603966000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":".nextLoad property maybe??","msgtype":"m.text"},"ts":1400603983000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: In support of your point, the promise for \"are there are pending font loads, or are we cool?\" is returned by a method.","msgtype":"m.text"},"ts":1400604003000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"or i can just be ok with the fact that there will be slightly different types of promises returned, both by getters...","msgtype":"m.text"},"ts":1400604024000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i think we should be consistent between one-shot objects and reusable objects, and for one-shot objects \"nextLoad\" is confusing","msgtype":"m.text"},"ts":1400604025000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"'loaded' seems fine to me","msgtype":"m.text"},"ts":1400604038000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I return a fresh promise with every call there, though.","msgtype":"m.text"},"ts":1400604040000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: I think it is exactly that consistency I am arguing against, actually.","msgtype":"m.text"},"ts":1400604044000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"await document.ready","msgtype":"m.text"},"ts":1400604055000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I made most of these choices without conscious attempts at consistency, though.","msgtype":"m.text"},"ts":1400604058000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"most reusable objects are treated by most authors as one-shot objects","msgtype":"m.text"},"ts":1400604069000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that is true","msgtype":"m.text"},"ts":1400604083000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so i don't think optimising e.g. img for people using it for multiple loads is a good idea","msgtype":"m.text"},"ts":1400604099000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i kind of liked the idea of force-feeding authors the knowledge that they are reusable, heh.","msgtype":"m.text"},"ts":1400604126000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but in practice, thinking about the dev experience, i guess it's bad","msgtype":"m.text"},"ts":1400604143000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"you have to keep a table in your head of reusable vs. one-shot objects","msgtype":"m.text"},"ts":1400604154000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"use .nextLoad for img, but .loaded for documents...\"","msgtype":"m.text"},"ts":1400604166000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"or, probably worst, \"use .loaded() for img, but .loaded for documents...\"","msgtype":"m.text"},"ts":1400604184000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"await img.loaded\" seems better than \"await img.nextLoad\"","msgtype":"m.text"},"ts":1400604211000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"it doesn't really matter what the API looks like, it's going to both suck and be adequate and even enjoyable simultaneously, depending on who uses it and what problem they're solving","msgtype":"m.text"},"ts":1400604234000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I might get a tattoo of that","msgtype":"m.text"},"ts":1400604273000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: documents can be reused","msgtype":"m.text"},"ts":1400604284000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"welp","msgtype":"m.text"},"ts":1400604290000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"what *can't* be reused, actually...","msgtype":"m.text"},"ts":1400604300000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"which i think is a solid argument against making a distinction in the api :-)","msgtype":"m.text"},"ts":1400604302000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"even xhr can be reused","msgtype":"m.text"},"ts":1400604346000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"websocket can't","msgtype":"m.text"},"ts":1400604347000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"JakeA: you have too many internet names","msgtype":"m.text"},"ts":1400604567000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeahhhhh, I should probably drop the jaffathecake thing","msgtype":"m.text"},"ts":1400604602000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"why would you want to do that","msgtype":"m.text"},"ts":1400604621000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"consistency?","msgtype":"m.text"},"ts":1400604738000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"it's all the rage these days","msgtype":"m.text"},"ts":1400604749000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"it's been \"all the rage\" for a long time :-)","msgtype":"m.text"},"ts":1400604767000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"how appropriate!","msgtype":"m.text"},"ts":1400604793000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"every nickname is just a different expression of a different facet of a different side of your personality's current mood, as it should be","msgtype":"m.text"},"ts":1400604826000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Domenic: i don't understand why you keep saying \"JavaScript does not make such a distinction\"","msgtype":"m.text"},"ts":1400607079000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic: it doesn't make a distinction between functions that return a value and functions that don't return a value either, but i hope you agree that to programmers they are different things nonetheless.","msgtype":"m.text"},"ts":1400607188000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"No","msgtype":"m.text"},"ts":1400607201000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"ducks","msgtype":"m.emote"},"ts":1400607203000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: context is https://github.com/domenic/promises-unwrapping/issues/24#issuecomment-43657022","msgtype":"m.text"},"ts":1400607216000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I don't agree with that. All functions return a value; sometimes that value is `undefined`.","msgtype":"m.text"},"ts":1400607229000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"See?","msgtype":"m.text"},"ts":1400607242000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"...","msgtype":"m.text"},"ts":1400607253000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic: that is entirely my point.","msgtype":"m.text"},"ts":1400607270000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic: all functions return something in JS. but programmers ignore the return values of functions that return undefined.","msgtype":"m.text"},"ts":1400607286000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"they are different to the programmer.","msgtype":"m.text"},"ts":1400607295000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"inb4 \"No\"","msgtype":"m.text"},"ts":1400607297000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Sure. But language-level features do not do different things with undefined-returning functions vs. anything-else-returning functions.","msgtype":"m.text"},"ts":1400607312000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"where would we be if we weren't putting a reference to an undefined JSValue into EAX after every function call","msgtype":"m.text"},"ts":1400607327000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it would be chaos","msgtype":"m.text"},"ts":1400607335000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Domenic: i don't understand the relevance of your statement","msgtype":"m.text"},"ts":1400607376000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Language-level features like promises are not designed to handle different types of errors in different ways","msgtype":"m.text"},"ts":1400607405000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hixie: all errors that an async function can result in go through the promise, just like all errors that a sync function can throw get bubbled as exceptions","msgtype":"m.text"},"ts":1400607425000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"We don't e.g. return some as return values and some as thrown exceptions","msgtype":"m.text"},"ts":1400607437000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: well, a, promised shouldn't be a language-level feature imho. but b, yes, that's the bug.","msgtype":"m.text"},"ts":1400607438000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"We just throw them all","msgtype":"m.text"},"ts":1400607440000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: i understand what you want. i'm saying it's bad.","msgtype":"m.text"},"ts":1400607469000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"So similarly deciding to use throw vs. reject as a channel to interject your preference for dividing up errors into two categories is not really good language design","msgtype":"m.text"},"ts":1400607470000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ok. well I am saying it's good.","msgtype":"m.text"},"ts":1400607484000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i pretty fundamentally disagree here.","msgtype":"m.text"},"ts":1400607488000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I can offer years of experience working with promise APIs, if it helps?","msgtype":"m.text"},"ts":1400607501000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it does not.","msgtype":"m.text"},"ts":1400607510000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Your brain must be fried by now :)","msgtype":"m.text"},"ts":1400607511000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Domenic: did some promise APIs send TypeErrors on the promises?","msgtype":"m.text"},"ts":1400607543000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: of course, whenever there was a TypeError.","msgtype":"m.text"},"ts":1400607554000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"how did you implement that?","msgtype":"m.text"},"ts":1400607585000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I don't understand the question","msgtype":"m.text"},"ts":1400607608000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"well your years of using promises in JS had to be built on top of a non-promise-native JS, right?","msgtype":"m.text"},"ts":1400607630000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1400607653000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and you had IDL-like APIs that did type checking?","msgtype":"m.text"},"ts":1400607667000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"in some cases, yeah","msgtype":"m.text"},"ts":1400607679000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so how did you send the type checks to the promises? they'd be caught before the function's code ran.","msgtype":"m.text"},"ts":1400607698000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"wait what?","msgtype":"m.text"},"ts":1400607708000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i'm in javascript; there are no type checks before the function's code runs","msgtype":"m.text"},"ts":1400607716000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the functions code is the thing doing the type checks","msgtype":"m.text"},"ts":1400607725000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"maybe that's where the disagreement stems from","msgtype":"m.text"},"ts":1400607736000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'm not in JavaScript.","msgtype":"m.text"},"ts":1400607738000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'm in WebIDL.","msgtype":"m.text"},"ts":1400607740000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Which is a macro system for writing JavaScript ;)","msgtype":"m.text"},"ts":1400607752000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"not really, it's usually implemented in C++.","msgtype":"m.text"},"ts":1400607772000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yes, but that C++ just invokes JS engine C++ APIs","msgtype":"m.text"},"ts":1400607784000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Or Rust","msgtype":"m.text"},"ts":1400607786000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"And the spec is done in terms of JS semantics","msgtype":"m.text"},"ts":1400607795000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i'm finding it hard to express just how much i would hate to use an API where a type error would get sent to a promise.","msgtype":"m.text"},"ts":1400607798000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i hate it enough that it's run-time not compile-time","msgtype":"m.text"},"ts":1400607808000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but this is like an order of magnitude worse.","msgtype":"m.text"},"ts":1400607818000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i mean, i can say the same thing about how much i would hate apis that force me to handle errors through two channels","msgtype":"m.text"},"ts":1400607822000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"you don't have to handle the errors i'm talking abuot.","msgtype":"m.text"},"ts":1400607833000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's the _entire_ point.","msgtype":"m.text"},"ts":1400607836000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you do!","msgtype":"m.text"},"ts":1400607836000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"when building robust systems, you *definitely* need to handle errors","msgtype":"m.text"},"ts":1400607843000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"why not push for dart then, then you can at least get some level of static typechecking and throw these errors during parsing/compilation rather than at runtime","msgtype":"m.text"},"ts":1400607852000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"(dart's not even remotely enough.)","msgtype":"m.text"},"ts":1400607863000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"change the web!","msgtype":"m.text"},"ts":1400607866000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I joke, I joke","msgtype":"m.text"},"ts":1400607872000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Domenic: if you call a function with bogus data, but the bogus data is not fatal, then you're just going to call more and more functions with that bogus data. it's going to propagate the errors throughout the system.","msgtype":"m.text"},"ts":1400607910000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic: if you instead throw an exception, the code will crash.","msgtype":"m.text"},"ts":1400607918000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic: and the damage will be limited.","msgtype":"m.text"},"ts":1400607927000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"rejections are just as fatal to async systems as exceptions are to sync ones","msgtype":"m.text"},"ts":1400607946000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"you literally cannot do any more work until you handle the rejection","msgtype":"m.text"},"ts":1400607954000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"no they're not","msgtype":"m.text"},"ts":1400607954000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sure you can","msgtype":"m.text"},"ts":1400607959000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"var promise = func();","msgtype":"m.text"},"ts":1400607966000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"moreCode();","msgtype":"m.text"},"ts":1400607968000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"presumably if you get a rejection that you care about, you don't recover","msgtype":"m.text"},"ts":1400607973000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"you cannot do any more work that depends on the result of that computation","msgtype":"m.text"},"ts":1400607976000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"sure, but you can do lots more work with the original bad data.","msgtype":"m.text"},"ts":1400607996000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you don't always care about rejections","msgtype":"m.text"},"ts":1400608001000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: you recover, or don't recover, in the same way you would at sync code: add judicious catches at the boundaries of the system to encapsulate parts that can be wrapped and retried/signaled to the user without breaking the rest of the program.","msgtype":"m.text"},"ts":1400608014000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that's what I'm saying","msgtype":"m.text"},"ts":1400608028000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it's not too different from regular try/catch","msgtype":"m.text"},"ts":1400608037000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it's exactly the same :)","msgtype":"m.text"},"ts":1400608046000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"you don't have to recover from logic errors at all in sync code. The code is bad. There's by definition no way to recover sanely. The best you can do is catch onerror and send a report to the server, then tell the user that the code is bad.","msgtype":"m.text"},"ts":1400608052000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's just not true. you can easily recover from logic errors","msgtype":"m.text"},"ts":1400608065000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"this keeps webpages running without breaking at the first sign of things going wrong","msgtype":"m.text"},"ts":1400608076000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"there are a lot of errors that you can recover from","msgtype":"m.text"},"ts":1400608078000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"like JSON.parse() throwing","msgtype":"m.text"},"ts":1400608085000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"JSON.parse() throwing isn't a logic error.","msgtype":"m.text"},"ts":1400608095000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"not everything is necessarily fatal","msgtype":"m.text"},"ts":1400608096000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it's a data error.","msgtype":"m.text"},"ts":1400608098000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'm talking about things like null derefs, calling a function with the wrong arguments, etc.","msgtype":"m.text"},"ts":1400608114000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"stuff that should never have gotten checked in in the first place.","msgtype":"m.text"},"ts":1400608123000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"there is no distinction.","msgtype":"m.text"},"ts":1400608126000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(in JavaScript)","msgtype":"m.text"},"ts":1400608133000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1400608138000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the distinction is a programmer-level distinction.","msgtype":"m.text"},"ts":1400608148000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"even more important.","msgtype":"m.text"},"ts":1400608152000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the user can click into a rare code path that generates a TypeError, and it's nice to be able to say \"oops, we couldn't load the current bid right now!\" without crashing the entire app/server.","msgtype":"m.text"},"ts":1400608174000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"you'd give the same error for a NetworkError","msgtype":"m.text"},"ts":1400608189000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"much like you can distinguish from a catch block, you can also distinguish from a rejection handler","msgtype":"m.text"},"ts":1400608194000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"at the programmer-level","msgtype":"m.text"},"ts":1400608206000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"yeah, in both cases, you might log the NetworkError, but not the TypeError, to the server.","msgtype":"m.text"},"ts":1400608218000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"er,,, other way around","msgtype":"m.text"},"ts":1400608243000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the distinction is at the API level, and it does exist.","msgtype":"m.text"},"ts":1400608258000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's the difference between firing onerror and throwing, today.","msgtype":"m.text"},"ts":1400608267000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"all i'm saying is that I want my APIs to maintain that difference.","msgtype":"m.text"},"ts":1400608283000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"maybe some day people will be happy with mobile phones statically analyzing scripts for their applications before running, so that they can throw typeerrors that might never be reached","msgtype":"m.text"},"ts":1400608328000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Hixie, why do you want to set JS back to the stone age?","msgtype":"m.text"},"ts":1400608359000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"feeds Ms2ger","msgtype":"m.emote"},"ts":1400608375000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"> implying it ever left the stone age","msgtype":"m.text"},"ts":1400608382000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Domenic: ping","msgtype":"m.text"},"ts":1400609429000,"senderName":"jtcranmer","senderId":"jtcranmer@irc"},
{"content":{"body":"Hixie: want to interpret what http://www.whatwg.org/specs/web-apps/current-work/multipage/association-of-controls-and-forms.html#inappropriate-for-the-control means","msgtype":"m.text"},"ts":1400609889000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"jtcranmer: pong","msgtype":"m.text"},"ts":1400610049000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: when are you planning on working on the streams spec again?","msgtype":"m.text"},"ts":1400610178000,"senderName":"jtcranmer","senderId":"jtcranmer@irc"},
{"content":{"body":"jtcranmer: as soon as possible; i had a conversation with an implementer the other day that brought up a number of things to get my head back in the game","msgtype":"m.text"},"ts":1400610209000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that's good to hear","msgtype":"m.text"},"ts":1400610308000,"senderName":"jtcranmer","senderId":"jtcranmer@irc"},
{"content":{"body":"I hadn't seen any progress since the CSP... firestorm a month ago","msgtype":"m.text"},"ts":1400610320000,"senderName":"jtcranmer","senderId":"jtcranmer@irc"},
{"content":{"body":"Hixie: especially \" the first row describing that autofill field in the table below.\" part","msgtype":"m.text"},"ts":1400610381000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"also, is anyone shipping this API","msgtype":"m.text"},"ts":1400610403000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"or could we like... rewrite it","msgtype":"m.text"},"ts":1400610411000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: here now, what's up?","msgtype":"m.text"},"ts":1400612590000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"trying to interpret what the spec says","msgtype":"m.text"},"ts":1400612682000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"first, should the tokens be in order","msgtype":"m.text"},"ts":1400612716000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"\"set of space-separated tokens\" hints no ordering","msgtype":"m.text"},"ts":1400612730000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(since a set isn't normally ordered)","msgtype":"m.text"},"ts":1400612739000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"are you asking for implementations, or authors?","msgtype":"m.text"},"ts":1400612747000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"implementations","msgtype":"m.text"},"ts":1400612753000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"k let me see...","msgtype":"m.text"},"ts":1400612759000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but then there is \"in the order given below\"","msgtype":"m.text"},"ts":1400612760000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"you want the next section","msgtype":"m.text"},"ts":1400612789000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"http://www.whatwg.org/specs/web-apps/current-work/multipage/association-of-controls-and-forms.html#processing-model-2","msgtype":"m.text"},"ts":1400612802000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"then in http://www.whatwg.org/specs/web-apps/current-work/multipage/association-of-controls-and-forms.html#inappropriate-for-the-control I have no idea what it means the there is \"name\" and under that some other values which are indented a bit","msgtype":"m.text"},"ts":1400612833000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"are those other values somehow special","msgtype":"m.text"},"ts":1400612850000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"the text above talks about \"first row\", but of what","msgtype":"m.text"},"ts":1400612871000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"are we switching to talking about author conformance criteria?","msgtype":"m.text"},"ts":1400612886000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I don't know what in the spec says it isn't implementation thing","msgtype":"m.text"},"ts":1400612950000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"there aren't any requirements that apply to UAs in that first section","msgtype":"m.text"},"ts":1400613002000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it doesn't say that anywhere, it's just a description of what is in that section","msgtype":"m.text"},"ts":1400613043000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the only \"must\"s are things that would apply to authors (and validators)","msgtype":"m.text"},"ts":1400613052000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"The attribute, if present, must have a value that is a set of space-separated tokens consisting of either a single token that is an ASCII case-insensitive match for the string \"off\", or a single token that is an ASCII case-insensitive match for the string \"on\", or the following, in the order given below:\"","msgtype":"m.text"},"ts":1400613091000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"why is that not for implementations ?","msgtype":"m.text"},"ts":1400613099000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"it's saying what the value must be","msgtype":"m.text"},"ts":1400613117000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"how could that be an implementation requirement?","msgtype":"m.text"},"ts":1400613125000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i don't understand what the requirement would be if it was an implementation requirement","msgtype":"m.text"},"ts":1400613133000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the spec talks a bit about this here: http://www.whatwg.org/specs/web-apps/current-work/multipage/introduction.html#how-to-read-this-specification","msgtype":"m.text"},"ts":1400613160000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"does that help?","msgtype":"m.text"},"ts":1400613163000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(second paragraph)","msgtype":"m.text"},"ts":1400613170000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ok, I see","msgtype":"m.text"},"ts":1400613179000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"this is just unusually hard to interpret","msgtype":"m.text"},"ts":1400613191000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"also, does anyone implement this stuff yet?","msgtype":"m.text"},"ts":1400613200000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(since if not, I might r- patches trying to implement it)","msgtype":"m.text"},"ts":1400613245000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"yeah, chrome has shipped this for some time. i tried to get impl feedback on it before they shipped but mozilla was being unusually confusing in its responses and didn't give feedback, and apple and microsoft didn't say anything at all iirc.","msgtype":"m.text"},"ts":1400613253000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(they waited many months before shipping, and it only got specced a year or so later when mozilla started implementing)","msgtype":"m.text"},"ts":1400613273000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(actually, the rAc() is what didn't get specced. I guess the attribute was specced earlier.)","msgtype":"m.text"},"ts":1400613297000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i can try to make it clearer","msgtype":"m.text"},"ts":1400613315000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"not sure what is hard to interpret though","msgtype":"m.text"},"ts":1400613321000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well, the whole API is odd","msgtype":"m.text"},"ts":1400613428000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"how so?","msgtype":"m.text"},"ts":1400613470000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"trying to do so much using just one attribute","msgtype":"m.text"},"ts":1400613474000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"it's not doing that much, it's just saying what the field represents","msgtype":"m.text"},"ts":1400613512000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"in very different level","msgtype":"m.text"},"ts":1400613534000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"shipping|billing could be one attribute, name etc one","msgtype":"m.text"},"ts":1400613559000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"home|work|etc one","msgtype":"m.text"},"ts":1400613576000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"isn't that just syntactically equivalent?","msgtype":"m.text"},"ts":1400613606000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i don't understand the difference","msgtype":"m.text"},"ts":1400613613000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(except that having multiple attributes means more confusion about when things take effect)","msgtype":"m.text"},"ts":1400613623000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"easier to understand what the attribute is about","msgtype":"m.text"},"ts":1400613646000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"seems to me to be exactly equivalent, but ok","msgtype":"m.text"},"ts":1400613672000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"either way, i didn't design this, i just specced what had shipped","msgtype":"m.text"},"ts":1400613681000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but if this is shipping in chrome, perhaps I'll need  to live with this","msgtype":"m.text"},"ts":1400613682000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"so it's about 2 years too late for that kind of feedback :-)","msgtype":"m.text"},"ts":1400613695000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"next time, send feedback when it's requested :-)","msgtype":"m.text"},"ts":1400613703000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I can't really follow all the spec stuff","msgtype":"m.text"},"ts":1400613708000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"i hear ya","msgtype":"m.text"},"ts":1400613721000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I end up commenting when someone asks for a review","msgtype":"m.text"},"ts":1400613722000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Hixie: but ok, thanks","msgtype":"m.text"},"ts":1400613777000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"fwiw, https://www.w3.org/Bugs/Public/buglist.cgi?query_format=advanced&resolution=---&target_milestone=Needs%20Impl%20Interest is a list of bugs that represent features that are not yet implemented for which feedback is being requested","msgtype":"m.text"},"ts":1400613837000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(especially feedback of the form \"we want to implement this\" or \"we think this is dumb and should not exist\", but also api design)","msgtype":"m.text"},"ts":1400613862000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so looking at that list every few weeks would be a good way to keep on top of this kind of thing in the future","msgtype":"m.text"},"ts":1400613892000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"bookmarks","msgtype":"m.emote"},"ts":1400614130000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"if only there were some way to undumb the dumb of old","msgtype":"m.text"},"ts":1400614203000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"you can have a pretty API, or you can have a successful API. your call. :-)","msgtype":"m.text"},"ts":1400614326000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"lots of pretty people are successful, no reason pretty APIs can't be","msgtype":"m.text"},"ts":1400614396000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: i think there is a reason, actually","msgtype":"m.text"},"ts":1400615058000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"caitp: the problem is that once an API is deployed, you can't change it. But you can't work out how to make it perfect before it's deployed.","msgtype":"m.text"},"ts":1400615076000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I think caitp is suggesting that you should design seven billion variations of an API, and then let people work out which ones are pretty, and those ones will become successful","msgtype":"m.text"},"ts":1400615349000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"or you could break peoples applications periodically, preferably early on","msgtype":"m.text"},"ts":1400615377000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"or any number of other ways","msgtype":"m.text"},"ts":1400615383000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"peoples lives don't depend on this stuff, and people aren't going to stop using the web just because they have to change a few letters in some application","msgtype":"m.text"},"ts":1400615426000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"just my opinion, nobody gotta take it, but nobody's life depends on this stuff never changing","msgtype":"m.text"},"ts":1400615468000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"that's precisely what they'll do","msgtype":"m.text"},"ts":1400615476000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"or worse, they'll stop using your browser","msgtype":"m.text"},"ts":1400615487000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"what alternative are they going to turn to?","msgtype":"m.text"},"ts":1400615487000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"iOS/Android","msgtype":"m.text"},"ts":1400615507000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and/or a browser that didn't break their sites","msgtype":"m.text"},"ts":1400615513000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"they might go outside or read a book or get back to working on curing cancer","msgtype":"m.text"},"ts":1400615520000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"breaking people's applications is how you get \"pretty and not successful\"","msgtype":"m.text"},"ts":1400615541000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"there are plenty of examples of apis with breaking changes which don't really hurt their use","msgtype":"m.text"},"ts":1400615571000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"openGL and openglES for one","msgtype":"m.text"},"ts":1400615578000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"for two, rather","msgtype":"m.text"},"ts":1400615581000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"(at least, not successful on the scale of the Web or Windows)","msgtype":"m.text"},"ts":1400615586000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"gtk2 vs gtk3","msgtype":"m.text"},"ts":1400615593000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"get back to me when gtk has a billion users.","msgtype":"m.text"},"ts":1400615607000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well hopefully it never gets there, if we're lucky it will die off and be replaced by something pretty and successful","msgtype":"m.text"},"ts":1400615632000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"breaking changes are valuable. you don't want them every day, but at least a few times a decade","msgtype":"m.text"},"ts":1400615671000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: Assuming you mean the breaking transition from GL to GLES, that worked because GLES existed on a new platform that no existing GL application could possibly run on anyway, so application developers had to start from scratch and could use whatever API was there","msgtype":"m.text"},"ts":1400615688000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"OpenGL2 vs OpenGL3 is massively different, and there have been breaking changes from early gles to more recent gles as well, but it's just an example","msgtype":"m.text"},"ts":1400615740000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: https://plus.google.com/+IanHickson/posts/SiLdNL9MsFw","msgtype":"m.text"},"ts":1400615742000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I've read it, it's a nice post","msgtype":"m.text"},"ts":1400615759000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"but I think people greatly exaggerate the importance of users changing browsers for a while, or of users not browsing the web for a while. It's never going to make any real difference to anybody","msgtype":"m.text"},"ts":1400615927000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"let's suppose that you're right. it actually still doesn't matter. what matters is that the people developing browsers think it's true.","msgtype":"m.text"},"ts":1400616020000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"imagine if people started using IE again to browse tumblr because of some rendering glitch in a particular theme that affected gecko or blink, due to a breaking change","msgtype":"m.text"},"ts":1400616097000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"maybe you'd see less irrational complaints about \"IE is awful/slow/etc\", and more reality","msgtype":"m.text"},"ts":1400616119000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"you'd bring honesty back!","msgtype":"m.text"},"ts":1400616123000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"man, that would be great","msgtype":"m.text"},"ts":1400616134000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"and people would get fired from mozilla and google (or get very poor performance reviews)","msgtype":"m.text"},"ts":1400616225000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"you have to remember that there are real consequences to effin up the software you ship","msgtype":"m.text"},"ts":1400616237000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"what would happen is that just one browser (the one that implemented the breaking change) would not work","msgtype":"m.text"},"ts":1400616289000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and users would blame the browser and move to another one","msgtype":"m.text"},"ts":1400616296000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"some very small number of users if it was just one breaking change","msgtype":"m.text"},"ts":1400616307000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and the other browser vendors would see this and say \"well we're not doing _that_\"","msgtype":"m.text"},"ts":1400616319000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"just look at the level of difficulty that browsers are facing trying to drop showModalDialog()","msgtype":"m.text"},"ts":1400616338000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"an API that every browser vendor desperately wants to drop","msgtype":"m.text"},"ts":1400616346000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"an API that has virtually no use on the Web itself","msgtype":"m.text"},"ts":1400616358000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"an API that causes security problems","msgtype":"m.text"},"ts":1400616371000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"an API that massively complicates the specs and implementations","msgtype":"m.text"},"ts":1400616381000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"an API that was originally non-standard","msgtype":"m.text"},"ts":1400616403000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I know it's hard, Hixie","msgtype":"m.text"},"ts":1400616439000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"but it's hard because of an attitude problem, and that is a bug worth fixing","msgtype":"m.text"},"ts":1400616496000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i have no idea whatsoever how to fix humans. good luck. in the meantime...","msgtype":"m.text"},"ts":1400616541000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if you're working for a browser vendor trying to get politics and practicalities changed, great; if you're not, that's a lovely statement but not an actionable one","msgtype":"m.text"},"ts":1400616565000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(this is the same argument i have against RDF&co. Embedding structured data in the web page is essentially a human problem, and it's harder to fix that problem than it is for us to develop NLP.)","msgtype":"m.text"},"ts":1400616580000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(not that NLP is easy at all. It's just that social problems are even harder.)","msgtype":"m.text"},"ts":1400616608000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"an attitude problem O_O","msgtype":"m.text"},"ts":1400616613000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think it can be done","msgtype":"m.text"},"ts":1400616631000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Domenic: that's what business realities look like, when it's not your job :P","msgtype":"m.text"},"ts":1400616642000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"for most of the browser vendors out there, browser use isn't their main business","msgtype":"m.text"},"ts":1400616679000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"well, okay, maybe not most","msgtype":"m.text"},"ts":1400616688000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"lets say 2 out of 5","msgtype":"m.text"},"ts":1400616691000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"maybe you could even throw apple in there too, since they push objc","msgtype":"m.text"},"ts":1400616709000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Yes, and for Goldman Sachs, structured investments isn't their main business. Doesn't mean the structured investments group wants to give all their business to Citigroup.","msgtype":"m.text"},"ts":1400616715000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that's comparing an apple to an orchard, don't you think?","msgtype":"m.text"},"ts":1400616744000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"not at all","msgtype":"m.text"},"ts":1400616749000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"there's a lot more money in one arena than the other","msgtype":"m.text"},"ts":1400616750000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"business units and companies and responsibility and performance reviews work the same way in both environments","msgtype":"m.text"},"ts":1400616763000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"thus the attitude problem","msgtype":"m.text"},"ts":1400616776000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"if you say so...","msgtype":"m.text"},"ts":1400616785000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"when something doesn't have a real impact, either financially or culturally, it must not be held to such a high standard","msgtype":"m.text"},"ts":1400616818000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"as you said before, it's an attitude problem. Specifically, the attitude of the engineers on the browser teams, and the people who evaluate their performance.","msgtype":"m.text"},"ts":1400616856000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"for those people, browser use is their main business.","msgtype":"m.text"},"ts":1400616867000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"btw, even if all the browser vendors were to agree to break things together, even that wouldn't solve your problem. You'd just make the Web platform less attractive and cause Web developers to consider becoming developers for other platforms.","msgtype":"m.text"},"ts":1400616959000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and that would be just fine","msgtype":"m.text"},"ts":1400616971000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it really doesn't matter in the grand scheme of things :)","msgtype":"m.text"},"ts":1400616977000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it really doesn't","msgtype":"m.text"},"ts":1400616985000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"but, I know I don't have to convince you of that","msgtype":"m.text"},"ts":1400616999000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"well, it greatly matters to me that the open multi-vendor platforms be more successful than the proprietary ones.","msgtype":"m.text"},"ts":1400617008000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Also, do you really want to be breaking these web apps? Consider if one of them is the ticketing app for an airline. Suddenly over the course of a week all the browsers stop working on that site. Can you imagine the chaos that that company would face? Now multiply that across the whole of our economy.","msgtype":"m.text"},"ts":1400617062000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"It's hot here today. ;-)","msgtype":"m.text"},"ts":1400617118000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"fortunately, it's possible to have relationships with businesses who use your product, and inform them of coming breaking changes","msgtype":"m.text"},"ts":1400617122000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"in practice, those relationships don't exist.","msgtype":"m.text"},"ts":1400617144000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i mean, i would love to live in the world you describe, don't get me wrong.","msgtype":"m.text"},"ts":1400617157000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sure they do, I have participated in them","msgtype":"m.text"},"ts":1400617158000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"but it's not the world i live in.","msgtype":"m.text"},"ts":1400617162000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you can have more of them","msgtype":"m.text"},"ts":1400617168000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"you can encourage effective communication","msgtype":"m.text"},"ts":1400617197000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"there is no shortage of ways to make things suck less than they do, and just no real effort to take on those endeavors","msgtype":"m.text"},"ts":1400617219000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"well that's just offensive.","msgtype":"m.text"},"ts":1400617230000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but I don't want to have a fight about this","msgtype":"m.text"},"ts":1400617234000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"you basically just said that the last 15 years of my life have been \"no real effort\"","msgtype":"m.text"},"ts":1400617249000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh come now Hixie, I'm not saying that","msgtype":"m.text"},"ts":1400617260000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"you really did.","msgtype":"m.text"},"ts":1400617274000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"maybe \"no real effort\" was the wrong choice of words","msgtype":"m.text"},"ts":1400617285000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"(not just my life, either.)","msgtype":"m.text"},"ts":1400617308000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Evolution vs revolution.","msgtype":"m.text"},"ts":1400617316000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"various organizations are certainly making an effort to open the process and get more input from different interested parties, so yes, that effort is being made","msgtype":"m.text"},"ts":1400617432000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"we've also spent years trying to improve the web concretely, by providing better APIs, defining the platform better to improve interop, etc.","msgtype":"m.text"},"ts":1400617459000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"not to mention all the work on test suites","msgtype":"m.text"},"ts":1400617466000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and all the work on developer advocacy","msgtype":"m.text"},"ts":1400617497000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and all the work on campaigning to browser vendors that they better support standards","msgtype":"m.text"},"ts":1400617512000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and all the work trying to convince each other that particular design patterns are better than others","msgtype":"m.text"},"ts":1400617525000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and that's all awesome, no doubt","msgtype":"m.text"},"ts":1400617542000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"what have _you_ done to improve the web?","msgtype":"m.text"},"ts":1400617560000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I've worked on improving compliance with various proposed standards, improving application frameworks, and am not quiet at all about my opinions on the problems with it and how they can be addressed","msgtype":"m.text"},"ts":1400617616000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it's interesting that you flipped the offensive bit at \"no real effort\"; I flipped it at \"attitude problem\"","msgtype":"m.text"},"ts":1400617635000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and have even campaigned to some degree to address some of those problems","msgtype":"m.text"},"ts":1400617635000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"urls?","msgtype":"m.text"},"ts":1400617659000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but I'm just one person, and I am very snarky, not necessarily diplomatic","msgtype":"m.text"},"ts":1400617672000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"so campaigning is not my strongpoint","msgtype":"m.text"},"ts":1400617677000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"8","msgtype":"m.text"},"ts":1400617697000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"Oops","msgtype":"m.text"},"ts":1400617706000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"sorry Hixie I didn't mean to come across as saying that there have been __no__ efforts to improve things, but I don't think there has been much of a real effort to give people a reality check about the importance of number-of-downloads/users/etc","msgtype":"m.text"},"ts":1400618153000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"so I apologize for that =)","msgtype":"m.text"},"ts":1400618192000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: i think if you tried to tell a browser vendor that users were less important, they'd respond with a precise dollar figure per user and ask you how many dollars you think they should give up in order to make some API slightly prettier","msgtype":"m.text"},"ts":1400618633000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sure, and then you say \"whatever it takes\", because the reality is that the revenue models for most of these vendors don't really come from people using their particular browser all the time","msgtype":"m.text"},"ts":1400618723000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i also think the reaction would probably depend on whether they were currently increasing in market share or losing it. It's worth noting that Chrome is more willing to break APIs these days than other browsers; I don't think their relative market numbers are unrelated to this.","msgtype":"m.text"},"ts":1400618726000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"uh","msgtype":"m.text"},"ts":1400618739000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what i am hearing is that caitp hates capitalism ;)","msgtype":"m.text"},"ts":1400618752000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the revenue model of all browsers is pretty much entirely based on how much they use their browsers.","msgtype":"m.text"},"ts":1400618753000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"caitp: what do you think the revenue model of browsers is?","msgtype":"m.text"},"ts":1400618771000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you've got a number of revenue models","msgtype":"m.text"},"ts":1400618779000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"you do?","msgtype":"m.text"},"ts":1400618784000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hmm, i was pretty sure the argument from a few minutes ago was that revenue wasn't important, and people should go outside and read books or something.","msgtype":"m.text"},"ts":1400618811000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"in Mozilla's case, you have donations to the foundation, ad revenue for the corporation. In the case of Google, you have piles of ad revenue. in the case of Mozilla, you have cloud services, OEM licensing, and other models","msgtype":"m.text"},"ts":1400618814000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"in the case of Apple, you have iPhone sales, etc etc","msgtype":"m.text"},"ts":1400618820000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it's not that revenue isn't important, it's that the impact on revenue breaking changes would have is exaggerated","msgtype":"m.text"},"ts":1400618852000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"um... you might want to look at mozilla's financials more closely.","msgtype":"m.text"},"ts":1400618887000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"JakeA: curious what https://twitter.com/trygve_lie/status/468839273010323456 is about?","msgtype":"m.text"},"ts":1400618889000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and in the case of iPhone, sales of the device are going to drop if people find that browsers on their device don't work (there's only one rendering engine for all browsers on iPhones)","msgtype":"m.text"},"ts":1400618931000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and that's only significant if it breaks a huge amount of the web","msgtype":"m.text"},"ts":1400618962000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"you can break a lot with minimal impact","msgtype":"m.text"},"ts":1400618970000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"what is a huge amount? a million pages?","msgtype":"m.text"},"ts":1400618973000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"a hundred thousand?","msgtype":"m.text"},"ts":1400618981000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"lets put it this way, hamstersmut.com rendering a paragraph wrong is probably not going to severely impact sales","msgtype":"m.text"},"ts":1400619025000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"so 2 million?","msgtype":"m.text"},"ts":1400619047000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"a number of pages that have real audiences","msgtype":"m.text"},"ts":1400619062000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"the tail on the web is very long","msgtype":"m.text"},"ts":1400619078000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and the number of those pages breaking could be mitigated by discussing with them","msgtype":"m.text"},"ts":1400619081000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"veeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeery long","msgtype":"m.text"},"ts":1400619084000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic: https://twitter.com/leftieFriele/status/468836645362757633, although I was genuinely unaware of the meaning of \"webbles\", I just found \" web rebels \" difficult to say","msgtype":"m.text"},"ts":1400619094000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"google knows of ~100 trillion pages","msgtype":"m.text"},"ts":1400619102000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"how do you plan to contact them? phone calls?","msgtype":"m.text"},"ts":1400619109000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"mass email to DNS providers >:D","msgtype":"m.text"},"ts":1400619119000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"JakeA: haha wow","msgtype":"m.text"},"ts":1400619150000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah, because spamming the world is definitely going to improve sales","msgtype":"m.text"},"ts":1400619152000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"for applications with real audiences, which have a real impact on sales, you could even go with face to face conversation to discuss breaking changes","msgtype":"m.text"},"ts":1400619192000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"does it scale? no, but it doesn't have to","msgtype":"m.text"},"ts":1400619204000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"100 trillion pages.","msgtype":"m.text"},"ts":1400619277000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"0.001% of them is a billion pages.","msgtype":"m.text"},"ts":1400619317000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i think it might have to scale.","msgtype":"m.text"},"ts":1400619332000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"pages is not necessarily \"domains\"","msgtype":"m.text"},"ts":1400619334000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"there's more than a quarter of a billion domains","msgtype":"m.text"},"ts":1400619364000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and a given organization may have many domains","msgtype":"m.text"},"ts":1400619367000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"100 trillion, really? that's awesome.","msgtype":"m.text"},"ts":1400619405000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"0.001% is 2500 domains that have to be contacted","msgtype":"m.text"},"ts":1400619405000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"which is totally doable","msgtype":"m.text"},"ts":1400619419000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"and then you could even bundle them by industry","msgtype":"m.text"},"ts":1400619424000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"government, utilities/transportation, entertainment, etc","msgtype":"m.text"},"ts":1400619433000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"at five hours per domain, that's a year and a half non-stop per breaking change","msgtype":"m.text"},"ts":1400619442000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"are you paying for that?","msgtype":"m.text"},"ts":1400619445000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"also, have you seen the response you get from developers when you tell them there's going to be a breaking change? look in blink-dev at the reaction around showModalDialog().","msgtype":"m.text"},"ts":1400619490000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"out of my own pocket? hey, I'm a genius, not an oil executive","msgtype":"m.text"},"ts":1400619494000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"so who's going to be paying for it?","msgtype":"m.text"},"ts":1400619502000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"who indeed","msgtype":"m.text"},"ts":1400619530000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"hello browser vendor executive, please make a choice: we could do nothing, and it would cost nothing, or we could make this breaking change, and it would cost us x% of users or a year and a half of intensive conversations with developers who will be angry at us for breaking their site.","msgtype":"m.text"},"ts":1400619572000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hey, what is money if it doesn't flow down the river","msgtype":"m.text"},"ts":1400619607000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Hey, opportunity cost. (c:","msgtype":"m.text"},"ts":1400619636000,"senderName":"wilhelm","senderId":"wilhelm@irc"},
{"content":{"body":"that's true, i forgot about hte opportunity cost. All the effort spent making that breaking change could instead have been spent making the browser a bit faster or more stable or whatever.","msgtype":"m.text"},"ts":1400619709000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if you remove brokenness, you might see a performance and stability improvement, too :D","msgtype":"m.text"},"ts":1400619748000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"do you have an example of how that could happen?","msgtype":"m.text"},"ts":1400619766000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"generally, changing APIs just introduces bugs, it doesn't remove them","msgtype":"m.text"},"ts":1400619774000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sure, suppose we removed 12 million lines of code, which no longer has to be linked into a binary","msgtype":"m.text"},"ts":1400619793000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Hixie: where in the spec would I go to find out what DOM should result from the strings \"\" vs. \" \"","msgtype":"m.text"},"ts":1400619800000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"no longer ends up getting called and no longer takes up cache lines","msgtype":"m.text"},"ts":1400619808000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"beautiful","msgtype":"m.text"},"ts":1400619826000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Hixie: as in, I saved an empty .html file and opened it in my browser, vs. a one-byte one containing a space.","msgtype":"m.text"},"ts":1400619834000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: you mean in parsing?","msgtype":"m.text"},"ts":1400619838000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: yeah I'd imagine so.","msgtype":"m.text"},"ts":1400619847000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: http://www.whatwg.org/specs/web-apps/current-work/#parsing","msgtype":"m.text"},"ts":1400619849000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Noooo trolled by the single-page spec again :P","msgtype":"m.text"},"ts":1400619866000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"caitp: you were talking about changing APIs, not removing APIs","msgtype":"m.text"},"ts":1400619875000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's an example hixie, you could definitely do a lot of both","msgtype":"m.text"},"ts":1400619894000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"if i were a browser engine implementer i would spend all my time improving browser speed when viewing the html standard, just as a matter of improving my own productivity :P","msgtype":"m.text"},"ts":1400619898000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"caitp: you say \"definitely\", but i don't see on what you're basing this","msgtype":"m.text"},"ts":1400619910000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I really like the new \"Note\", \"Example\", etc.","msgtype":"m.text"},"ts":1400619933000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I base things on hypothetical scenarios","msgtype":"m.text"},"ts":1400619936000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Domenic: chrome is pretty fast at loading it. I don't really understand why the other browsers aren't improving to match it.","msgtype":"m.text"},"ts":1400619945000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's the best source of evidence","msgtype":"m.text"},"ts":1400619952000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"(stunned silence)","msgtype":"m.text"},"ts":1400619971000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"such empirical, much scientific, wow","msgtype":"m.text"},"ts":1400619973000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i'll take that as a concession speech...","msgtype":"m.text"},"ts":1400619996000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hardly","msgtype":"m.text"},"ts":1400620002000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"just a little good humour","msgtype":"m.text"},"ts":1400620025000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: so what are you basing it on then?","msgtype":"m.text"},"ts":1400620060000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"let me scroll up to see what I said \"definitely\" baout","msgtype":"m.text"},"ts":1400620073000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"about*","msgtype":"m.text"},"ts":1400620075000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Hixie: well it turns out today is not the day I'm going to spend understanding the HTML parsing algorithm :P. Do you happen to know off the top of your head what behavior should be for \"\" vs \" \"? I can always test browsers I suppose.","msgtype":"m.text"},"ts":1400620098000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh, definitely remove and change apis","msgtype":"m.text"},"ts":1400620102000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"sure, there's a lot of complete crap that you could remove, like most of the parsing algorithm","msgtype":"m.text"},"ts":1400620120000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"(just for example)","msgtype":"m.text"},"ts":1400620123000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"most of the DOM api","msgtype":"m.text"},"ts":1400620128000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"most of CSS","msgtype":"m.text"},"ts":1400620142000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Domenic: i can look...","msgtype":"m.text"},"ts":1400620164000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"although removing a lot of that wouldn't make anyone very happy, it would be a marked improvement","msgtype":"m.text"},"ts":1400620182000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Domenic: looks like no difference. a space at the very start gets dropped on the floor.","msgtype":"m.text"},"ts":1400620226000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"caitp: ok so removing \"most of the parsing algorithm\" would in fact affect trillions of pages on hundreds of millions of domains.","msgtype":"m.text"},"ts":1400620268000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah, but think of how much code smell you could get rid of 8)","msgtype":"m.text"},"ts":1400620285000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: so that's a non-starter even if i concede everything you said earlier about how easy it is to make breaking changes","msgtype":"m.text"},"ts":1400620288000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"caitp: i'm going to assume that \"msot of the DOM api\" and \"most of CSS\" are just more \"little good humour\"","msgtype":"m.text"},"ts":1400620318000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: appreciated, thanks.","msgtype":"m.text"},"ts":1400620323000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"nah, if you could do it all over again, you could learn from past mistakes and improve it, and minimize special casing and bizarre behaviour","msgtype":"m.text"},"ts":1400620360000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it would be beautiful","msgtype":"m.text"},"ts":1400620368000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"but obviously that's a wild leap beyond removal of simple things","msgtype":"m.text"},"ts":1400620425000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"but oh man, it would be glorious","msgtype":"m.text"},"ts":1400620434000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it would be glorious for about a month","msgtype":"m.text"},"ts":1400620458000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"until the next new feature developed by someone who didn't have anything to do with the initial glorious design was added","msgtype":"m.text"},"ts":1400620476000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or until the next browser shipped with a minor bug that the web then started depending on","msgtype":"m.text"},"ts":1400620492000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and within a year we'd be back where we started","msgtype":"m.text"},"ts":1400620507000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah but in another 2 decades you could do it all over again","msgtype":"m.text"},"ts":1400620517000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"totally worth it","msgtype":"m.text"},"ts":1400620525000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"(or, more likely, it wouldn't take off in the first place, since it would have to compete with the existing web, and 100 trillion existing documents in ugly code would trump the 0 documents of beautiful code in users' eyes, since they don't see the code)","msgtype":"m.text"},"ts":1400620548000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"caitp: Aw, you're 12 years late. Here you go: http://www.w3.org/TR/xhtml2/","msgtype":"m.text"},"ts":1400620550000,"senderName":"wilhelm","senderId":"wilhelm@irc"},
{"content":{"body":"I have good friends on that WG","msgtype":"m.text"},"ts":1400620566000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"well, the xmlwg","msgtype":"m.text"},"ts":1400620580000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"hehehehe","msgtype":"m.text"},"ts":1400620587000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wilhelm++","msgtype":"m.text"},"ts":1400620591000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"well that explains a lot","msgtype":"m.text"},"ts":1400620591000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":":D","msgtype":"m.text"},"ts":1400620601000,"senderName":"wilhelm","senderId":"wilhelm@irc"},
{"content":{"body":"good people is good people, and sometimes they have sensible ideas","msgtype":"m.text"},"ts":1400620660000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: So the real-world example with the closest properties to what you describe was Opera+Presto. It didn't intentionally break APIs, but due to low marketshare sites didn't go out of their way to support it. As a result Opera did a huge amount of outreach to sites, and a huge amount of work on implementation quality. But often sites wouldn't apply fixes even if you literally sent them a patch file to apply to their code. Not small site either; hu","msgtype":"m.text"},"ts":1400620684000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: /load splitlong.pl","msgtype":"m.text"},"ts":1400620714000,"senderName":"wilhelm","senderId":"wilhelm@irc"},
{"content":{"body":"wilhelm: Oh, I thought I already had","msgtype":"m.text"},"ts":1400620735000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"caitp: So the real-world example with the closest properties to what you describe was Opera+Presto. It didn't intentionally break APIs, but due to low marketshare sites didn't go out of their way to support it. As a result Opera did a huge amount of outreach to sites, and a huge amount of work on implementation quality. But often sites wouldn't apply fixes even if you literally sent them a patch file to apply to their code. Not small site either; hu","msgtype":"m.text"},"ts":1400620742000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"... got hundreds of thousands of Opera users.","msgtype":"m.text"},"ts":1400620748000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yeah but if all of our mighty browser vendor overlords joined in for the breaking changes, people wouldn't really have a choice. but I do know that it's not something that's going to happen any time soon, it's a pipedream","msgtype":"m.text"},"ts":1400620760000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Yes, but getting everyone to act like that isn't a Nash equilibrium","msgtype":"m.text"},"ts":1400620803000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: your text cut off at \"Not small site either; hug\" then contined with \"... got hundreds\"","msgtype":"m.text"},"ts":1400620940000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"continued","msgtype":"m.text"},"ts":1400620944000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"caitp: i don't think anyone is arguing that \"people\" aren't \"good people\". Just that said \"people\", apparently including you, have an unrealistic idea of what is achievable when it involves changing how people think or act.","msgtype":"m.text"},"ts":1400621016000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or you know what might happen instead, maybe the WWW will simply stop existing as nationstates put up huge national firewalls, and architect strong protections against those firewalls being undermined, and that greatly reduces the pool of applications that would be affected","msgtype":"m.text"},"ts":1400621043000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it's not that I have an unrealistic sense of what is achievable","msgtype":"m.text"},"ts":1400621070000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"that is debatable.","msgtype":"m.text"},"ts":1400621077000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's that I have a lot of confidence","msgtype":"m.text"},"ts":1400621078000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"\"huge ones that probably\"","msgtype":"m.text"},"ts":1400621098000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"ok, you have an unrealistic level of confidence in what is achievable.","msgtype":"m.text"},"ts":1400621105000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"imho","msgtype":"m.text"},"ts":1400621107000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Not unrealistic. Positively harmful. What a waste of good engineers. (c:","msgtype":"m.text"},"ts":1400621121000,"senderName":"wilhelm","senderId":"wilhelm@irc"},
{"content":{"body":"hey, at least I'm not trying to start the next snapchat","msgtype":"m.text"},"ts":1400621136000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"as jgraham says, getting all the browser vendors to work in this way is not a nash equilibrium. In practice, humans do act to find a nash equilibrium.","msgtype":"m.text"},"ts":1400621222000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic: how does the promise pattern fit into models where we use onreadystatechange today, where the object can be in multiple states and transitions through them one by one?","msgtype":"m.text"},"ts":1400622387000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: three answers to that...","msgtype":"m.text"},"ts":1400622466000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"1) it doesn't; promises are for simple one and done async ops","msgtype":"m.text"},"ts":1400622478000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"2) it might be useful for users to have a promise for the 80% case, e.g. completely-loaded","msgtype":"m.text"},"ts":1400622495000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"3) in certain cases it can be natural to model individual state transitions as promises. E.g. you could have both \".headersReceived\" and \".loaded\" promises. (I don't remember the other ready states besides loaded... picked headersReceived because it seemed plausible.)","msgtype":"m.text"},"ts":1400622559000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"3) is pretty rare though","msgtype":"m.text"},"ts":1400622568000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"you could consider document.ready vs. document.loaded as an instance of 3), I guess.","msgtype":"m.text"},"ts":1400622612000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: i'm looking at script and resource loading, and there's all kinds of edge cases, different states, etc.","msgtype":"m.text"},"ts":1400622884000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic: e.g. you want to know when some things are downloaded but not yet executed, so you can execute something when everything is ready","msgtype":"m.text"},"ts":1400622902000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic: or you want to know when everything has executed, so you can use the api","msgtype":"m.text"},"ts":1400622910000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic: or you want to know when things have started downloading, to show progress UI","msgtype":"m.text"},"ts":1400622926000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"some of the questions to ask are: is it useful for a \"late\" subscriber to know that these things occurred?","msgtype":"m.text"},"ts":1400622958000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"e.g. if the script has already executed, do you usually want to run the same code in response to that, as you would run if you had queued up a handler before the execution happened?","msgtype":"m.text"},"ts":1400622987000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"with events, if you miss your chance for registration, then you have to switch programming patterns","msgtype":"m.text"},"ts":1400623001000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"if (alreadyExecuted) { doStuff1(); } else { addEventListener(\"executed\", doStuff2); }","msgtype":"m.text"},"ts":1400623020000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"if doStuff1 and doStuff2 are always the same code, then promises are better","msgtype":"m.text"},"ts":1400623037000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"if they are always different, events are better","msgtype":"m.text"},"ts":1400623043000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(a common case being doStuff1 is a noop, whereas doStuff2 takes action)","msgtype":"m.text"},"ts":1400623066000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"progress is pretty explicitly out of scope for promises","msgtype":"m.text"},"ts":1400623112000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"events work well for that","msgtype":"m.text"},"ts":1400623115000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"although the use case of knowing when progress *starts* is an interesting one... my gut says it's not a common use case?","msgtype":"m.text"},"ts":1400623133000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i could potentially see .executed and .loaded as two separate state-transition-signalling promises","msgtype":"m.text"},"ts":1400623148000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but i am not sure it is worth the use case","msgtype":"m.text"},"ts":1400623161000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh, the other big question is, can this event occur more than once","msgtype":"m.text"},"ts":1400623207000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"if it occurs only 0 or 1 times, then a promise might be a good fit. Especially if the alternative to occuring once is an error.","msgtype":"m.text"},"ts":1400623235000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"More than once, and you should probably not use a promise, except for the cases we were talking about earlier where \"most of the time\" authors use them as one-shots, like <img>","msgtype":"m.text"},"ts":1400623267000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"bigger picture","msgtype":"m.text"},"ts":1400623293000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the utility of adding promises for e.g. script loading is they are easily combinatored, e.g. Promise.all([script1.loaded, script2.loaded]).then(() => { doStuff(); return script3.loaded.then(() => doStuffDependingOnScript3()); }","msgtype":"m.text"},"ts":1400623346000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"going through each potential thing that the platform wants to expose and agonizing over the \"correct\" paradigm to use when exposing is as important as considering the value-add for common use cases like that.","msgtype":"m.text"},"ts":1400623391000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"s/is as/is not as/","msgtype":"m.text"},"ts":1400623402000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"although upon reflection it seems likely that script.executed would be more useful in that sense than script.loaded","msgtype":"m.text"},"ts":1400623436000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: well if the .loaded promise needs to get reset each time you load a new one, it's not clear to me why others wouldn't as well","msgtype":"m.text"},"ts":1400623913000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic: i'll be providing events for anything provided with promises anyway","msgtype":"m.text"},"ts":1400623923000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic: so you always have the choice of doing it the event way","msgtype":"m.text"},"ts":1400623933000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: they probably would need to be reset.","msgtype":"m.text"},"ts":1400623937000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"also, what's the pattern for handing a promise to an API to tell the API to not do anything until that promise has resolved somehow?","msgtype":"m.text"},"ts":1400624031000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"When _p_ becomes fulfilled...\" or similar phrasings. There's a particular WebIDL thing you can link to","msgtype":"m.text"},"ts":1400624139000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"http://heycam.github.io/webidl/#es-promise","msgtype":"m.text"},"ts":1400624161000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"erform some steps once a promise is settled","msgtype":"m.text"},"ts":1400624168000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I had a few more https://github.com/w3ctag/promises-guide#shorthand-phrases","msgtype":"m.text"},"ts":1400624185000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but they belong in WebIDL","msgtype":"m.text"},"ts":1400624192000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i mean the api surface itself","msgtype":"m.text"},"ts":1400624609000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"not how to spec it","msgtype":"m.text"},"ts":1400624611000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"promise.then(theAPI)?","msgtype":"m.text"},"ts":1400624687000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"or promise.then(() => theAPI(promise)) if it is important the API receives a promise","msgtype":"m.text"},"ts":1400624704000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"no no, the idea is that the API would be given a handful of promises and other dependencies, and would wait until they've all been fulfilled","msgtype":"m.text"},"ts":1400624858000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so you can't just wait until your promise has fulfilled before informing the API for it, otherwise the API wouldn't know to wait","msgtype":"m.text"},"ts":1400624875000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I don't quite understand the second sentence, but the first sounds like Promise.all([p1, p2, p3]).then(([v1, v2, v3]) => ...)","msgtype":"m.text"},"ts":1400624918000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"suppose you have a <script>","msgtype":"m.text"},"ts":1400625146000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it depends on an <img> element and another <script> element, identified by IDs, and specified via an attribute in the markup.","msgtype":"m.text"},"ts":1400625163000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and another script wants to say \"also, wait until promise P is done too\"","msgtype":"m.text"},"ts":1400625173000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so you have script S, and promise P, and... go","msgtype":"m.text"},"ts":1400625186000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or suppose you have a script S and two separate other scripts that don't know about each other want to add promises P1 and P2 to the list of promises that S is waiting on before executing","msgtype":"m.text"},"ts":1400625230000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what would the script behind P1 do?","msgtype":"m.text"},"ts":1400625245000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"S.addDependency(P1)?","msgtype":"m.text"},"ts":1400625261000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Oh, we want to add the ability for a script to block another script's execution on arbitrary async events??","msgtype":"m.text"},"ts":1400625314000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"are we trying to add Make to JS now?","msgtype":"m.text"},"ts":1400625323000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: see http://www.whatwg.org/specs/web-apps/current-work/multipage#abstract","msgtype":"m.text"},"ts":1400625357000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic: right","msgtype":"m.text"},"ts":1400625371000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic: (or something else, doesn't have to be a script we're blocking)","msgtype":"m.text"},"ts":1400625381000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic: (could be, don't load this style sheet unless all these promises have resolved)","msgtype":"m.text"},"ts":1400625396000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Do you want to actually block execution, or block other people from being notified of execution?","msgtype":"m.text"},"ts":1400625401000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"block execution","msgtype":"m.text"},"ts":1400625415000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Wait, \"don't load this style sheet unless all these promises have resolved\" is easy:","msgtype":"m.text"},"ts":1400625418000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(and possibly download)","msgtype":"m.text"},"ts":1400625419000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie `.then` unwraps things recursively, if each promise returns a promise for all its dependencies (via .all) , that promises will resolve when all those dependencies are resolved.","msgtype":"m.text"},"ts":1400625427000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"Promise.all([p1, p2, p3]).then(() => stylesheet.load())","msgtype":"m.text"},"ts":1400625431000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"there might be two separate scripts independently doing this to the same style sheet","msgtype":"m.text"},"ts":1400625447000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"So script 2 can affect how script 1 loads resources","msgtype":"m.text"},"ts":1400625461000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"honestly this feels like a service worker level thing, if you want scripts to interfere with network-level operations like that","msgtype":"m.text"},"ts":1400625474000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"loadDependends = (obj) => getDependents(obj).then(deps => Promise.all(deps.map(getDependents))","msgtype":"m.text"},"ts":1400625509000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"Domenic: i don't really see how this would fit into service workers","msgtype":"m.text"},"ts":1400625513000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i've no idea what that code is doing","msgtype":"m.text"},"ts":1400625540000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: onfetch = function (ev) { if (isStylesheetIWantToDelay(ev.req)) { otherPromise.then(() => ev.respondWith(...)); }","msgtype":"m.text"},"ts":1400625556000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"benjamingr: I don't think that's what Hixie is asking about","msgtype":"m.text"},"ts":1400625565000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hixie: you are saying that you want the ability for scripts to intercept arbitrary resource loads and delay them based on other async ops","msgtype":"m.text"},"ts":1400625584000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hixie: :) Ok, it takes an object, and calls getDependents on it, then, when those arrive, it maps each dependent to its own dependencies and continues to resolve the dependencies until it reaches everything - I thought that's what you meant.","msgtype":"m.text"},"ts":1400625585000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"i've no idea what _that_ code is doign either","msgtype":"m.text"},"ts":1400625586000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that is basically service worker","msgtype":"m.text"},"ts":1400625591000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"how does the service worker know what the style sheet is?","msgtype":"m.text"},"ts":1400625603000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"presumably script1 told it","msgtype":"m.text"},"ts":1400625616000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: not quite, but close","msgtype":"m.text"},"ts":1400625619000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the api i'm thinking of would be something like:","msgtype":"m.text"},"ts":1400625642000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"myStylesheet.addDependency(myPromise);","msgtype":"m.text"},"ts":1400625653000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that seems simpler than the stuff y'all are describing above...","msgtype":"m.text"},"ts":1400625675000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"especially the stuff with => where i can't tell where the lambda starts and where it finishes","msgtype":"m.text"},"ts":1400625694000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: that has to be a builder pattern though, right? I'd have to call a `.init()` or something, otherwise I would never know when I'm done calling `addDependency`","msgtype":"m.text"},"ts":1400625704000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"Hixie: that seems like an API you would build on top of service worker, yeah. Only service worker has that kind of interception capability right now.","msgtype":"m.text"},"ts":1400625736000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"benjamingr: there's a separate method to say \"ok now i need you, load all your pending dependencies and once everything is ready, apply yourself and let me know you're done\"","msgtype":"m.text"},"ts":1400625751000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: in particular, the ability to interfere with loads you yourself do not execute is the new thing","msgtype":"m.text"},"ts":1400625763000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ah, I think I understand now, lemme see if I can write something like this in ES5ish","msgtype":"m.text"},"ts":1400625772000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"Domenic: i don't see what service workers have to do with anything here. How do you delay the application of a <link> element, or <style>, or <img>, or <script>, from a service worker? You can't get to the DOM from those.","msgtype":"m.text"},"ts":1400625788000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hard to believe that \"we don't have code to generate unguessable uuids\" is actually being used as a reason for anything","msgtype":"m.text"},"ts":1400625792000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Hixie: you prevent the HTTP response from coming back!","msgtype":"m.text"},"ts":1400625803000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"who said anything about HTTP?","msgtype":"m.text"},"ts":1400625809000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hard to believe that any browser would generate guessable uuids, for that matter","msgtype":"m.text"},"ts":1400625815000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"UUIDs are usually surprisingly guessable","msgtype":"m.text"},"ts":1400625837000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"by design","msgtype":"m.text"},"ts":1400625839000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: it is use-case equivalent to prevent something from being loaded vs. being applied. (You have to be clever and send the response anyway, but delay relaying it to the main thread until the delay is over, so as to avoid extra latency from excessive laziness. But straightforward.)","msgtype":"m.text"},"ts":1400625907000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If you disagree with that, then that seems like an argument for separating the APIs that load and apply these resources, more than anything.","msgtype":"m.text"},"ts":1400625932000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hixie: you mean something like this? https://gist.github.com/benjamingr/749bfe2b3c0411c7430c (in terms of API)","msgtype":"m.text"},"ts":1400625941000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"that gist is pretty good","msgtype":"m.text"},"ts":1400625966000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"whoops, cache is not needed I decided it complicates things so I edited. Sorry about that.","msgtype":"m.text"},"ts":1400625992000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"Domenic: well you definitely want to be able to fetch the resources ahead of time (and even compile / decode them)","msgtype":"m.text"},"ts":1400626010000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"in fact it's probably best to ignore my insistence that this is service-worker level and focus on this gist.","msgtype":"m.text"},"ts":1400626016000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i don't understand what tht gist is trying to do","msgtype":"m.text"},"ts":1400626068000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it is giving you your API","msgtype":"m.text"},"ts":1400626078000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"how would you use this?","msgtype":"m.text"},"ts":1400626087000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"var resource = new ResourceBuilder();","msgtype":"m.text"},"ts":1400626088000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"resourceBuilder.addDependency('foo');","msgtype":"m.text"},"ts":1400626094000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"reosurceBuilder.addDependency('bar');","msgtype":"m.text"},"ts":1400626099000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"resourceBuilder.get().then(() => { 'foo' and 'bar' have been loaded })","msgtype":"m.text"},"ts":1400626111000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"in the gist there is a separation between dependencies (strings in my example) and promises, with the loadDependency function converting dependencies into promises","msgtype":"m.text"},"ts":1400626153000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"how is this better than just foo.addDependency(bar) ?","msgtype":"m.text"},"ts":1400626170000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"where foo is an element and bar is a promise","msgtype":"m.text"},"ts":1400626176000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"death to all \"Builder\" classes","msgtype":"m.text"},"ts":1400626181000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Hixie: it's not; if you don't need that extra level of intermediation then it's unnecessary","msgtype":"m.text"},"ts":1400626196000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hixie: How can you ever know if foo is ready?","msgtype":"m.text"},"ts":1400626200000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"benjamingr: what do you mean by \"ready\"? and why would you want to know?","msgtype":"m.text"},"ts":1400626218000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(usually they're just extra busywork, eg. BlobBuilder vs. new Blob)","msgtype":"m.text"},"ts":1400626219000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: Hixie's argument is that the creator of the resource is not the same as the person who adds dependencies to the resource","msgtype":"m.text"},"ts":1400626241000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"zewt: so you hand out the \"building\" capability to other people","msgtype":"m.text"},"ts":1400626251000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hixie: how can I use `foo` if I don't know yet if it has all the dependencies it requires to be used?","msgtype":"m.text"},"ts":1400626252000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"benjamingr: Hixie: I think you two are talking past each other.","msgtype":"m.text"},"ts":1400626270000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Modulo benjamingr's gist having an unnecessary level of indirection, it illustrates exactly what Hixie was asking for.","msgtype":"m.text"},"ts":1400626286000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"benjamingr: well presumably whoever is doing this would set up all the dependencies before telling anything to actually get applied/executed","msgtype":"m.text"},"ts":1400626339000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Here, forked and clarified https://gist.github.com/domenic/f19ba7fb48d53e2590fa","msgtype":"m.text"},"ts":1400626397000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i wasn't sure if you wanted resource to load in parallel with dependencies or after it","msgtype":"m.text"},"ts":1400626414000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"right now it's in parallel","msgtype":"m.text"},"ts":1400626424000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hixie: this is exactly what the builder does for you and why I used that indirection, the `.get` method is what actually contains the logic to get the instance, and is what gives us a guarantee that we're only going to use the dependencies we have so far to build this instance, if we fail to do it with those resources, we fail. It 'snapshots' the current","msgtype":"m.text"},"ts":1400626446000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"dependencies.","msgtype":"m.text"},"ts":1400626446000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"benjamingr: so suppose that the thing that we're blocking on is  <script src=\"a.js\" whenneeded needs=\"b.js c.js\"></script>","msgtype":"m.text"},"ts":1400626522000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":".get() is Hixie's \"there's a separate method to say \"ok now i need you, load all your pending dependencies and once everything is ready, apply yourself and let me know you're done\" from earlier","msgtype":"m.text"},"ts":1400626525000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"benjamingr: and support that one script wants to say \"a.js also needs to wait for my style sheet\" and b.js wants to say \"a.js also needs to wait for my promise\"","msgtype":"m.text"},"ts":1400626550000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"benjamingr: and then once that's all done, some other script calls scriptA.execute()","msgtype":"m.text"},"ts":1400626569000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"benjamingr: how does your gist fit into this?","msgtype":"m.text"},"ts":1400626577000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: yes! we'd like a.js loading to trigger loading b.js and c.js too :) That's what I attempted to initially describe with all those arrows (and failed), let me see if I write a more readable function that does it.","msgtype":"m.text"},"ts":1400626578000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"(the needs=\"\" attribute here being the stuff i proposed last year, syntax probably to change)","msgtype":"m.text"},"ts":1400626622000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(well, whenneeded is more likely to change than needs=\"\". people seemed ok with needs=\"\".)","msgtype":"m.text"},"ts":1400626648000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"mumbles, on an unrelated note, about how repeatedly referencing zalgo isn't particularly helpful in making one's case","msgtype":"m.emote"},"ts":1400626736000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: how would we know that b.js also needs d.js or a stylesheet?","msgtype":"m.text"},"ts":1400626741000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"benjamingr: who's \"we\" here? and what are those other resources?","msgtype":"m.text"},"ts":1400626766000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Let's say I'm c.js and I'm not in a script tag, how do we know my dependencies? When it was a.js, I knew the dependencies by reading the script tag.","msgtype":"m.text"},"ts":1400626794000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"how would you not be in a script tag?","msgtype":"m.text"},"ts":1400626914000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the only way to run an external script file is from a script element","msgtype":"m.text"},"ts":1400626935000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"In your above example, a had a b.js dependency, however - b.js may have dependencies of its own - right? Where are those specified?","msgtype":"m.text"},"ts":1400626941000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"on the <script src=\"b.js\"></script> element","msgtype":"m.text"},"ts":1400626956000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ah, cool :)","msgtype":"m.text"},"ts":1400626971000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"Ok, gisting","msgtype":"m.text"},"ts":1400626975000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"needs=\"\" doesn't cause any script to run","msgtype":"m.text"},"ts":1400626979000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it just says \"I need to have previously had <script>s pointing to these URLs executed\"","msgtype":"m.text"},"ts":1400626997000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(or, later, modules or whatnot)","msgtype":"m.text"},"ts":1400627007000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I think I understand what we're doing a lot better now, gisting :)","msgtype":"m.text"},"ts":1400627089000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"Hixie: what would you like to do about a recursive depencency? Right now I deadlock","msgtype":"m.text"},"ts":1400627175000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"i can fix those easily enough","msgtype":"m.text"},"ts":1400627273000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"don't worry about those","msgtype":"m.text"},"ts":1400627279000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'm more interested in what the API looks like","msgtype":"m.text"},"ts":1400627290000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the UA-provided API, i mean","msgtype":"m.text"},"ts":1400627298000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: https://gist.github.com/benjamingr/0ed038727f38fb77e7ee","msgtype":"m.text"},"ts":1400627389000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"This is just the function that resolves a dependency, let's add it to the API :)","msgtype":"m.text"},"ts":1400627408000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"let's try this a different way","msgtype":"m.text"},"ts":1400627657000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"http://software.hixie.ch/utilities/js/live-dom-viewer/saved/3030","msgtype":"m.text"},"ts":1400627659000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I'm still writing :)","msgtype":"m.text"},"ts":1400627668000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"what would you put in place of the two places there that say // INSERT CODE ?","msgtype":"m.text"},"ts":1400627670000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ah cool, this is easier","msgtype":"m.text"},"ts":1400627704000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"(for the record, here's what my current straw man is: http://software.hixie.ch/utilities/js/live-dom-viewer/saved/3031 )","msgtype":"m.text"},"ts":1400627865000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Oh, I thought you wanted me to actually code something that does this :)","msgtype":"m.text"},"ts":1400627916000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1400627936000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"no no","msgtype":"m.text"},"ts":1400627938000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sorry","msgtype":"m.text"},"ts":1400627939000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's the browser vendors' problem :-)","msgtype":"m.text"},"ts":1400627970000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ah, wouldn't that make talking about it easier though?","msgtype":"m.text"},"ts":1400627972000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"well it couldn't hurt","msgtype":"m.text"},"ts":1400628019000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but the end goal is to figure out what the UA API should be","msgtype":"m.text"},"ts":1400628029000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yeah, but that's hard to do without something working to test on :)","msgtype":"m.text"},"ts":1400628074000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"i usually find that if i can make a convincing shim that does the same thing, it means i don't need an API","msgtype":"m.text"},"ts":1400628172000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so usually i only need to be designing APIs when making a convincing shim is either very hard, or implausible","msgtype":"m.text"},"ts":1400628196000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I can make a convincing shim if I do `data-src` instead of `src`","msgtype":"m.text"},"ts":1400628219000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"^ pointing to how separating execution from loading is really what's at stake here","msgtype":"m.text"},"ts":1400628575000,"senderName":"Domenic","senderId":"Domenic@irc"}
]