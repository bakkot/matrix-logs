[
{"content":{"body":"annevk-cloud: why does ServiceWorker want multi-destination streams exactly? I can't quite understand it from that issue.","msgtype":"m.text"},"ts":1383528886000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"zewt: While there *is* a tc39 proposal for overriding the behavior of [], it would still be bad to make that the default for Maps, because of how JS treats .foo and ['foo'] identically.  As Domenic_ has said, making maps use [] by default would break a *lot* of code that is currently assuming you can do obj[v] to access a property.  And without that []","msgtype":"m.text"},"ts":1383529533000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ability, JS has no way to access a property whose name is stored in a string.","msgtype":"m.text"},"ts":1383529534000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Python has a special function just for that - getattr() and setattr(). They're clumsy to use.)","msgtype":"m.text"},"ts":1383529554000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"they're identically clumsy to map.get() and map.set(), and that's okay because accessing a raw property on a map (rather than a key stored in the map) is rare","msgtype":"m.text"},"ts":1383529616000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"It's fun to claim that, but every metaprogramming function ever uses computed properties.","msgtype":"m.text"},"ts":1383529647000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(i was referring to leaving .foo and [\"foo\"] the same, but allowing properties to have non-string values, which of course wouldn't be accessible via .foo; an alternative is detaching .foo and [\"foo\"], but that wasn't what I was talking about)","msgtype":"m.text"},"ts":1383529683000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i've used python extensively, and getattr() is definitely the exception (but it's not really a useful comparison, since python already treats .foo and [\"foo\"] as two different things)","msgtype":"m.text"},"ts":1383529729000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"And Map#get() and #set() are less clumsy, because they're used consistently.  Even Python's getattr() and setattr() are less clumsy than they would be in JS, because they're the *only* way to get computed property names.  Your suggestion would mean that *some* objects can have their properties accessed with obj[v], but not all.","msgtype":"m.text"},"ts":1383529732000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"they're not at all used consistently, because the dictionaries everyone already uses are simple objects that don't have .get or .set at all","msgtype":"m.text"},"ts":1383529752000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"You're using \"consistently\" in a different manner than I am.","msgtype":"m.text"},"ts":1383529775000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You're referring to I guess consistency with existing practice.","msgtype":"m.text"},"ts":1383529787000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i have endless amounts of code passing around dictionaries as objects; making Map have .get and .set instead of using [] means *none* of that code works with Map","msgtype":"m.text"},"ts":1383529790000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Which is terrible, and the whole reason we invented Maps.","msgtype":"m.text"},"ts":1383529796000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Mixing up keys and properties is super terrible.","msgtype":"m.text"},"ts":1383529805000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But we just grin and bear it right now, because there's no other way to get O(1) maps.","msgtype":"m.text"},"ts":1383529828000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"dominic's argument was that code assumes properties are strings, so allowing foo[Object] would break lots of code with that assumption; i'm saying that might be so (can't think of any real examples), but you trade for definitely not working with tons of code, which assumes key/value stores accessed with []","msgtype":"m.text"},"ts":1383529855000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I'm sorry that it took so long for JS to grow a Map class, but it's designed well now that it exists.","msgtype":"m.text"},"ts":1383529858000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"not being able to use simple objects and Map interchangeably for the \"simple dictionary\" pattern means I'm going to default to using objects, and only ever use Map when I really, specifically need to store non-string keys; that's a bad result","msgtype":"m.text"},"ts":1383529926000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Shrug, that'll definitely happen sometimes.","msgtype":"m.text"},"ts":1383530024000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"no, it'll happen all the time","msgtype":"m.text"},"ts":1383530032000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I wish {} hadn't already been claimed for object literals. :/","msgtype":"m.text"},"ts":1383530037000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"well, it would be nice if JS was like Python and treated .foo and [\"foo\"] as two different things, but that's not what we're talking about","msgtype":"m.text"},"ts":1383530068000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Regardless, unless we *also* overrode the behavior of .foo, you'd *still* run into the same problems you're outlining.","msgtype":"m.text"},"ts":1383530093000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"... but we're *talking* about overriding both [\"foo\"] and .foo, since they're the same thing","msgtype":"m.text"},"ts":1383530110000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Because people like doing obj.foo over obj['foo'] when the \"foo\" is a literal.","msgtype":"m.text"},"ts":1383530114000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"No, jeez, that's so terrible.","msgtype":"m.text"},"ts":1383530128000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"nobody is suggesting making [\"foo\"] and .foo different","msgtype":"m.text"},"ts":1383530378000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Every Map would have a \"toString\" key in it automatically, or at least would *look* like it did.  +\"get\", \"set\", \"delete\", and others.","msgtype":"m.text"},"ts":1383530379000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"just make Map have no members and have an identical interface as a simple Object, and things that act on them go elsewhere (which is also consistent with what we already have, eg. Object.keys)","msgtype":"m.text"},"ts":1383530379000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Object.keys is a hack around the problem that we don't want more properties to show up on everything.  Maps are like normal objects, which have their behavior as methods on themselves.","msgtype":"m.text"},"ts":1383530379000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Having to do Map.clear(m) would be so shitty. :/","msgtype":"m.text"},"ts":1383530380000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"trivially, inconsequentially shitty","msgtype":"m.text"},"ts":1383530380000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"at the \"it would be nice\" level","msgtype":"m.text"},"ts":1383530380000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"It's inconsistent with how virtually every other object in the entire language works, except for Object itself, which is an exception for obvious reasons.","msgtype":"m.text"},"ts":1383530380000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Object.keys(foo) is a bit annoying (compared to foo.keys()); having object dictionaries and Map dictionaries have different interfaces is massively annoying","msgtype":"m.text"},"ts":1383530380000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Seriously, for every argument that it would be consistent in one way, it's less consistent in another way, seemingly worse way.","msgtype":"m.text"},"ts":1383530380000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i'd say the opposite: having Map have a different API (at least among the things discussed here so far) gives minor academic prettiness, at the expense of bigger failures","msgtype":"m.text"},"ts":1383530398000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"anyway, the result is that Map will be a type used for special-purpose scenarios, where you specifically need to stash things with objects as keys, and never a general-purpose container ... which is something the Web can live with (we've lived with string keys this far, after all), it's just sucky","msgtype":"m.text"},"ts":1383530437000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I agree that it would be *nice* for Maps and Objects-as-Maps to work the same way, but to make it happen, you have to accept several of the downsides of Objects-as-Maps (which we were trying to get away from) and having to structure the operations in a weird way that doesn't match anything else.","msgtype":"m.text"},"ts":1383530494000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"to me it seems better to match the dictionaries everyone is using, instead of a dictionary class that matches everything *except* ... you know, dictionaries","msgtype":"m.text"},"ts":1383530538000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Welp, I've explained why it's not better, or at least why I and TC39 think it's not better, so shrug.","msgtype":"m.text"},"ts":1383530565000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i don't know much about TC39, except that every time I see that sequence of letters, it's about something I think is badly designed, heh","msgtype":"m.text"},"ts":1383530597000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Don't take this the wrong way, but most of the time when I see you complaining about it, I think you're on the wrong side. ^_^","msgtype":"m.text"},"ts":1383530641000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oh well","msgtype":"m.text"},"ts":1383530656000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: if it makes you feel any better, most of the time when i see tab defending TC39, I think _he's_ on the wrong side, so... :-)","msgtype":"m.text"},"ts":1383530826000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"<TabAtkins> oh well","msgtype":"m.text"},"ts":1383530852000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"then again, my preferences in languages are basically diametrically opposed to javascript's basic philosophies, so it's not particularly surprising","msgtype":"m.text"},"ts":1383530878000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i wish bugzilla would post to lists in a way gmail threads properly","msgtype":"m.text"},"ts":1383530884000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"it's annoying eg. reading the set()/toggle() bug, searching through dom for a minute and seeing \"oh, toggle does this\", then loading the bug and seeing that was already commented, it just ended up as a separate thread","msgtype":"m.text"},"ts":1383530916000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"don't use gmail?","msgtype":"m.text"},"ts":1383530937000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i think it's the \"new:\" it adds to new bugs that screws up gmail","msgtype":"m.text"},"ts":1383530939000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"yeah \"change to a different email client\" is pretty much never a useful solution, heh","msgtype":"m.text"},"ts":1383530956000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"oh actually yeah, that particular one breaks even in pine","msgtype":"m.text"},"ts":1383530962000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"don't use pine?","msgtype":"m.text"},"ts":1383530968000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":":P","msgtype":"m.text"},"ts":1383530970000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"heh, i guess that's a pattern that fundamentally disagrees with the \"arguments not passed should act like they're set to undefined\" idea","msgtype":"m.text"},"ts":1383531548000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(classList.set(\"foo\", false))","msgtype":"m.text"},"ts":1383531556000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"actually I guess not and I'm just tired","msgtype":"m.text"},"ts":1383531591000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"maybe I should be watching TV and zoning out instead of reading specs on Sunday night","msgtype":"m.text"},"ts":1383531649000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"losing hope in humanity at still having to explicitly configure screen to utf-8","msgtype":"m.text"},"ts":1383532999000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"BOM breaks Crosswalk testing? https://github.com/w3c/web-platform-tests/pull/400","msgtype":"m.text"},"ts":1383548478000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hixie: about troubleshooting the bugzilla problem if you think it might help, I can ask somebody to look at the server logs","msgtype":"m.text"},"ts":1383548656000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"(I'd do it myself but I don't have shell access to the server)","msgtype":"m.text"},"ts":1383548685000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"笑 serious discussion about now adding a usemap-N attribute","msgtype":"m.text"},"ts":1383549437000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"good times","msgtype":"m.text"},"ts":1383549440000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hmm, problem with usemap i hadn't seen mentioned before","msgtype":"m.text"},"ts":1383551995000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hixie: the login thing in the spec is gone?","msgtype":"m.text"},"ts":1383552672000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: the usemap thing shows another reason why an attribute-based solution is suboptimal here. Along with the specific existing problem of making it work with usemap, it come with the same problem for any new attributes we might want to add to img later (attributes whose values might need to vary based on the properites of the image)","msgtype":"m.text"},"ts":1383553369000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: i don't think it shows that it's suboptimal. you either want an existing feature of img to work, and you have to provide it, or you don't and don't, regardless of img vs picture","msgtype":"m.text"},"ts":1383553532000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"of course","msgtype":"m.text"},"ts":1383553556000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but with picture it doesn't require anything more than adding a usemap analog to source","msgtype":"m.text"},"ts":1383553624000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"or just usemap","msgtype":"m.text"},"ts":1383553649000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"whereas with src-N it requires introducing further mess","msgtype":"m.text"},"ts":1383553684000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"from an authoring point of view","msgtype":"m.text"},"ts":1383553699000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"well first we need to consider whether we need to have the usemap feature available at all together with image switching","msgtype":"m.text"},"ts":1383553715000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"true","msgtype":"m.text"},"ts":1383553722000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"most features of img we actually want to work the same, i think","msgtype":"m.text"},"ts":1383553852000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah I would think so","msgtype":"m.text"},"ts":1383553888000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so that argues for using <img>, but doesn't argue for attributes for the sources - it *could* do what <input list> does","msgtype":"m.text"},"ts":1383553953000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i'm not sure that's an awesome solution either though; it requires the author to mint IDs for all images","msgtype":"m.text"},"ts":1383554023000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"or it could check the next element sibling, like <img usesourcelist alt ...><sourcelist>...","msgtype":"m.text"},"ts":1383554133000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"still seems better than minting yet another attribute","msgtype":"m.text"},"ts":1383554170000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"what attribute?","msgtype":"m.text"},"ts":1383554279000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I meant yet another attribute like src-N","msgtype":"m.text"},"ts":1383554299000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"with some complex microsyntax","msgtype":"m.text"},"ts":1383554321000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"for usemap you mean?","msgtype":"m.text"},"ts":1383554341000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"just for the usemap case","msgtype":"m.text"},"ts":1383554344000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1383554346000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ok. yeah i don't disagree. but i'm not convinced we need usemap","msgtype":"m.text"},"ts":1383554386000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah, me neither","msgtype":"m.text"},"ts":1383554462000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but I think others are likely to say it needs to be supported for the src-N case","msgtype":"m.text"},"ts":1383554495000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that doesn't make it a good idea to do it","msgtype":"m.text"},"ts":1383554598000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Like src-N? ;)","msgtype":"m.text"},"ts":1383554615000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"like anything, just people saying \"this is needed\" by itself doesn't mean much","msgtype":"m.text"},"ts":1383554645000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"as for usemap, if it needs anything, the first step would be to explore real cases where you'd use it and see what is actually needed. maybe what we really need is an event when there's a breakpoint switch","msgtype":"m.text"},"ts":1383554788000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hsivonen: when I take a document with an HTML4 doctype and feed it to validator.nu, and I manually choose an HTML5 preset, I'd expect to see an \"obsolete doctype\" warning. But I don't.","msgtype":"m.text"},"ts":1383555941000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Is it an allowed one?","msgtype":"m.text"},"ts":1383555960000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"http://validator.nu/?doc=data%3Atext%2Fhtml%3Bcharset%3Dutf-8%2C%3C%2521DOCTYPE%2520HTML%2520PUBLIC%2520%22-%252F%252FW3C%252F%252FDTD%2520HTML%25204.01%252F%252FEN%22%2520%2520%22http%253A%252F%252Fwww.w3.org%252FTR%252Fhtml4%252Fstrict.dtd%22%3E%3Ctitle%3Etest%3C%252Ftitle%3E%3Cp%3Etest%250D%250A&schema=http%3A%2F%2Fs.validator.nu%2Fhtml5.rnc+http%3A%2F%2Fs.validator.nu%2Fhtml5%2Fassertions.sch+http%3A%2F%2Fc.validator.nu%2Fall%2F","msgtype":"m.text"},"ts":1383555964000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Ms2ger: yeah","msgtype":"m.text"},"ts":1383555970000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and from code inspection I know why it's not emitting the warning","msgtype":"m.text"},"ts":1383556002000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the reason is it only emits the warning if the parser mode is set to HTML5 parsing","msgtype":"m.text"},"ts":1383556044000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"which you can do in the validator.nu UI by manually setting the Parser option to HTML5","msgtype":"m.text"},"ts":1383556087000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"http://validator.nu/?doc=data%3Atext%2Fhtml%3Bcharset%3Dutf-8%2C%3C%2521DOCTYPE%2520HTML%2520PUBLIC%2520%22-%252F%252FW3C%252F%252FDTD%2520HTML%25204.01%252F%252FEN%22%2520%2520%22http%253A%252F%252Fwww.w3.org%252FTR%252Fhtml4%252Fstrict.dtd%22%3E%3Ctitle%3Etest%3C%252Ftitle%3E%3Cp%3Etest%250D%250A&schema=http%3A%2F%2Fs.validator.nu%2Fhtml5.rnc+http%3A%2F%2Fs.validator.nu%2Fhtml5%2Fassertions.sch+http%3A%2F%2Fc.validator.nu%2Fall%2F&parser=html5","msgtype":"m.text"},"ts":1383556090000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but I don't think users should be expected to do that manually","msgtype":"m.text"},"ts":1383556133000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I guess the best way to deal with it would be to be automatically set the parser mode to HTML5 if a user chooses an HTML5 preset","msgtype":"m.text"},"ts":1383556327000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Domenic_: annevk-cloud: Was there any discussion for an \"always\" method on Promises?","msgtype":"m.text"},"ts":1383556456000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yes, https://github.com/domenic/promises-unwrapping/issues/18","msgtype":"m.text"},"ts":1383556470000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"it may be possible to get it in now that the fate of promises themselves is less up in the air. but we'll see.","msgtype":"m.text"},"ts":1383556492000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I'm playing around with them, but find myself doing .then(func, func) a lot","msgtype":"m.text"},"ts":1383556539000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"or .catch(function(){})","msgtype":"m.text"},"ts":1383556547000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic_, ask JakeA the streams thing","msgtype":"m.text"},"ts":1383556599000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"Domenic_: Ended up with this for displaying cached data then attempting a live update https://gist.github.com/jakearchibald/481ae9e5e72d83147585","msgtype":"m.text"},"ts":1383556632000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":".then(func, func) has pretty bad semantics, not as good as finally.","msgtype":"m.text"},"ts":1383556633000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"JakeA: what was the service worker use case for piping a stream to multiple destinations?","msgtype":"m.text"},"ts":1383556689000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: What you mentioned in your doc. Getting a network response and sending it to the browser and cache at the same time","msgtype":"m.text"},"ts":1383556743000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: ah excellent, I guessed right! :D","msgtype":"m.text"},"ts":1383556763000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"There's potential for a transformation in between too. Eg, the copy from the network could have state info that you don't want in the cache, eg \"Logged in a Jake\" which may not be true later","msgtype":"m.text"},"ts":1383556841000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"So network stream goes to the browser, but also to a transform to strip bits out, then the cache","msgtype":"m.text"},"ts":1383556864000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"That would probably be messy and regexy though, but possibly the best solution for server-constructed sites that want to hack in offline support","msgtype":"m.text"},"ts":1383556908000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic_: Looking at finally… that doesn't recover from the error right? It passes the error along?","msgtype":"m.text"},"ts":1383556986000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"If so, I don't think it fits my usecase","msgtype":"m.text"},"ts":1383556993000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: right, just like sync try { } finally { }","msgtype":"m.text"},"ts":1383557005000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"yeah, I think you really want an empty catch block","msgtype":"m.text"},"ts":1383557013000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"What if .catch() desugared to .catch(function(reason) { return reason })?","msgtype":"m.text"},"ts":1383557052000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"That'd work","msgtype":"m.text"},"ts":1383557059000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"seems weird","msgtype":"m.text"},"ts":1383557099000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"arrow functions make it nicer .catch(r => r)","msgtype":"m.text"},"ts":1383557117000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"MikeSmith: why should it warn about the html4 doctype when validating as html5?","msgtype":"m.text"},"ts":1383557233000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"showSpinner().then(fetchStuff).catch().then(hideSpinner)","msgtype":"m.text"},"ts":1383557234000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"zcorpan: because the spec says it's an obsolete doctype","msgtype":"m.text"},"ts":1383557263000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"reads well to me as in \"catch errors and continue\"","msgtype":"m.text"},"ts":1383557272000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"hmm yeah it kind of does","msgtype":"m.text"},"ts":1383557278000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"zcorpan: and authors should change it to just <!doctype html>","msgtype":"m.text"},"ts":1383557311000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"maybe desugaring to .catch(function() {}) would be safer, because you're sure of the value afterwards","msgtype":"m.text"},"ts":1383557311000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"agreed, seems weird to have an error for a value.","msgtype":"m.text"},"ts":1383557330000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"MikeSmith: ok i see it in the spec now. i thought it was supposed to be silently permitted","msgtype":"m.text"},"ts":1383557336000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Domenic_: Shall I make an issue for this, or has the discussion moved elsewhere?","msgtype":"m.text"},"ts":1383557349000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Or are changes to .catch() with no args set in stone now?","msgtype":"m.text"},"ts":1383557366000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: issue is great. We'll see what people think. I gotta sleep now though :)","msgtype":"m.text"},"ts":1383557368000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"G'night!","msgtype":"m.text"},"ts":1383557381000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"zcorpan: well I'm not sure the spec explicitly states what conformance checkers should do","msgtype":"m.text"},"ts":1383557392000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"for this case","msgtype":"m.text"},"ts":1383557399000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"http://www.whatwg.org/specs/web-apps/current-work/multipage/obsolete.html#warnings-for-obsolete-but-conforming-features","msgtype":"m.text"},"ts":1383557409000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1383557449000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1383557465000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: btw I notice that for HTML4 documents, validator.nu also emits a warning if the doctype lacks a system ID. \"Warning: The doctype did not contain the system identifier prescribed by the HTML 4.01 specification.\"","msgtype":"m.text"},"ts":1383557910000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: yeah","msgtype":"m.text"},"ts":1383557932000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"http://validator.nu/?doc=http://qa-dev.w3.org/wmvs/HEAD/dev/tests/html401-strict.html","msgtype":"m.text"},"ts":1383557967000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: does the HTML4 spec actually say the doctype should have a system ID?","msgtype":"m.text"},"ts":1383557986000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: \"   HTML 4.01 specifies three DTDs, so authors must include one of the following document type declarations in their documents.\"","msgtype":"m.text"},"ts":1383558183000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"you could choose to read it as you must use those exact strings, or must use a doctype that refers to those DTDs, or something in between","msgtype":"m.text"},"ts":1383558259000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hsivonen read it as FPI+SI, and on a practical matter IE5 Mac uses quirks mode for HTML 4.01 strict without SI","msgtype":"m.text"},"ts":1383558316000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"but it doesn't really matter either way now","msgtype":"m.text"},"ts":1383558343000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1383558412000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: it matters somewhat for me, because I want to replace the legacy W3C validator","msgtype":"m.text"},"ts":1383558454000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: ok, so what's the goal there? avoid new warnings? be spec-correct? be useful?","msgtype":"m.text"},"ts":1383558520000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"first, be useful","msgtype":"m.text"},"ts":1383558603000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I don't care about avoiding new warnings, as long as they are useful","msgtype":"m.text"},"ts":1383558631000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so the usefulness here is whether the author cares about quirks mode in ie5 mac","msgtype":"m.text"},"ts":1383558667000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"which is to say that warning about it isn't useful","msgtype":"m.text"},"ts":1383558720000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1383558791000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think it's not a message that any author would find useful at this point","msgtype":"m.text"},"ts":1383558853000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"also see the 4.0 doctype","msgtype":"m.text"},"ts":1383558859000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"what about it? you mean, no system ID?","msgtype":"m.text"},"ts":1383558877000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"v.nu treats it differently to 4.01","msgtype":"m.text"},"ts":1383558905000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"but i guess that's ok if you validate as html4 -- the html4 spec says you must use 4.01 after all","msgtype":"m.text"},"ts":1383559028000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1383559039000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: Having Object.getProperty to do the same as the current behaviour of [], and map behave like you would expect with [] seems like a much better design than what TC39 has. Doing proper introspection in JS already requires the extremely-verbose Object.getOwnPropertyDescriptor to do well so I don't think \"introspection should be favoured over API usage\" is a good argument","msgtype":"m.text"},"ts":1383561390000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"if a parent page has <base name=foo>, is it possible to get the `name` from within an iframe in that page?","msgtype":"m.text"},"ts":1383561977000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"window.parent.document.get...?","msgtype":"m.text"},"ts":1383562033000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"http://ruxcon.org.au/assets/slides/CSP-kuza55.pptx says <base name=foo> leaks cross-domain","msgtype":"m.text"},"ts":1383562083000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"i’m trying to understand what the author meant exactly","msgtype":"m.text"},"ts":1383562092000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"Anyone feel they know their way around Promises? Would be good to get some thoughts on https://gist.github.com/jakearchibald/785f79b0dea5bfe0c448","msgtype":"m.text"},"ts":1383562160000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"IIUC `window.parent.document.get...` would fail if the iframe is on a different origin, right?","msgtype":"m.text"},"ts":1383562163000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"I'd hope so","msgtype":"m.text"},"ts":1383562727000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"asks @kuza55","msgtype":"m.emote"},"ts":1383562767000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"What's the name attribute on base?","msgtype":"m.text"},"ts":1383563127000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Gives the base name, clearly","msgtype":"m.text"},"ts":1383563226000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"JakeA: for the XHR code you are not catching all errors...","msgtype":"m.text"},"ts":1383564732000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: e.g. abort","msgtype":"m.text"},"ts":1383564736000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Good point","msgtype":"m.text"},"ts":1383564795000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: why don't you do Promise.race on the cached vs live and use the first result to run updateGallery?","msgtype":"m.text"},"ts":1383564879000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: It's not just first-wins. If cached comes in first, I still want to do a live update. But if live comes in first I don't want to do a cached update","msgtype":"m.text"},"ts":1383564931000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Ah","msgtype":"m.text"},"ts":1383564951000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Race would work if I could do if (networkWon) { abortCachedUpdate(); }","msgtype":"m.text"},"ts":1383564970000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: it seems \"react to network fetch\" doesn't have to be a separate line","msgtype":"m.text"},"ts":1383565155000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: that could be part of liveFetch's callback","msgtype":"m.text"},"ts":1383565172000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: where you set liveFetchResolved","msgtype":"m.text"},"ts":1383565199000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah yes, I'd only need it if liveFetch.isResolved were a thing, and updateGallery were async","msgtype":"m.text"},"ts":1383565248000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I *think* I was separating the two fetches & updates, but yeah, not needed","msgtype":"m.text"},"ts":1383565282000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"and the .race could be refactored by just having then and have showNoDataError hide the spinner","msgtype":"m.text"},"ts":1383565292000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not sure what is better","msgtype":"m.text"},"ts":1383565327000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it kinda seems you want to hide the spinner when updateGallery is invoked","msgtype":"m.text"},"ts":1383565343000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so maybe the .race thing isn't really needed","msgtype":"m.text"},"ts":1383565355000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Nah, I only want to hide the spinner when the gallery is updated as a result of the network fetch, or if it fails, but yeah, it could go there","msgtype":"m.text"},"ts":1383565419000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"But I still need the race to show the error if both updates fail","msgtype":"m.text"},"ts":1383565455000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I either call hideSpinner where I do now, or at the end of liveUpdate as .then(hideSpinner, hideSpinner)","msgtype":"m.text"},"ts":1383565558000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Actually, hideSpinner is in the wrong place now","msgtype":"m.text"},"ts":1383565585000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"As it'll hide on cachedUpdate, which is shouldn't","msgtype":"m.text"},"ts":1383565618000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"It feels like promises haven't really helped write this code","msgtype":"m.text"},"ts":1383565714000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: wait, if you care about both updating failing you should not use .race but .all","msgtype":"m.text"},"ts":1383565729000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":".all rejects if one fails but the other succeeds. I only want to catch both failing, which race does right?","msgtype":"m.text"},"ts":1383565779000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"It's like array's .some?","msgtype":"m.text"},"ts":1383565789000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(both failing means I have no data to show, which is the only case I want to show an error)","msgtype":"m.text"},"ts":1383565835000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Ah yeah, I still don't get why updateGallery needs to be wrapped in a promise though","msgtype":"m.text"},"ts":1383565871000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, it doesn't. Updated.","msgtype":"m.text"},"ts":1383565945000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: I was returning the result of updateGallery (which is void) so it could be async in future, but I've removed that bit now","msgtype":"m.text"},"ts":1383566026000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"So yeah, you want finally","msgtype":"m.text"},"ts":1383566081000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: even if updateGallery was async you could return it where you have it now","msgtype":"m.text"},"ts":1383566111000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1383566139000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"So, my conclusions are: \"finally\" is great. liveFetchResolved is nasty, getting state from the promise would be better. \"race\" is an unintuitive method name if you're using it to detect all-reject.","msgtype":"m.text"},"ts":1383566268000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"\\/window 28","msgtype":"m.text"},"ts":1383566273000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: Thanks for reviewing. I thought this use case would play to Promises strengths, but it's not much cleaner & readable than it'd have been without them","msgtype":"m.text"},"ts":1383566784000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: it might be that Domenic_ has some insights in how to structure that better","msgtype":"m.text"},"ts":1383567172000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah, that's why I posted it here. I've gone through loads of revisions but it feels like I'm missing a trick","msgtype":"m.text"},"ts":1383567239000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: what you really want I think is to cancel the cached operation if the live succeeds","msgtype":"m.text"},"ts":1383567302000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: we don't have cancellation yet however","msgtype":"m.text"},"ts":1383567315000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, which I could do with the xhr directly. But I'd only want to call abort if it was in a pending state, so I'd still want to access state from the promise.","msgtype":"m.text"},"ts":1383567408000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I guess I'd get this state from xhr directly","msgtype":"m.text"},"ts":1383567417000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"jgraham, Ms2ger, re: <base name> according to this document, you can define an element’s (window) name using <base>: http://help.dottoro.com/lhewchgl.php","msgtype":"m.text"},"ts":1383568319000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"so once you can get data into <base name=\"…\">, you can leak it cross-domain. that’s what the author meant apparently","msgtype":"m.text"},"ts":1383568372000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"matjas: test case showing <base name> doing something, pls :-)","msgtype":"m.text"},"ts":1383568640000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Did he mean window.name?","msgtype":"m.text"},"ts":1383568763000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And <base target=name>?","msgtype":"m.text"},"ts":1383568775000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Because I think that is a long well known leak","msgtype":"m.text"},"ts":1383568791000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so what's the attack scenario with window.name?","msgtype":"m.text"},"ts":1383569646000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk, zcorpan: nah, <base name>","msgtype":"m.text"},"ts":1383570040000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"zcorpan: i’m wondering the same thing","msgtype":"m.text"},"ts":1383570046000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"zcorpan: ah, the window.name thing i can explain","msgtype":"m.text"},"ts":1383570093000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"zcorpan: a page without X-Frame-Options can be framed in a document that sets the frame name","msgtype":"m.text"},"ts":1383570126000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"hsivonen: I have a validator patch and a related htmlparser patch I hope you can take a look at this week","msgtype":"m.text"},"ts":1383570335000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://bitbucket.org/sideshowbarker/validator/commits/43e40934e7573aa44e8d8f0b6364bb4210d394d3/raw/","msgtype":"m.text"},"ts":1383570351000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://bitbucket.org/sideshowbarker/htmlparser-fork/commits/0c8df2fbb5ed46837954cf1d8ae338ae740848a5/raw/","msgtype":"m.text"},"ts":1383570370000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"matjas: then navigates to _parent and it gets the name?","msgtype":"m.text"},"ts":1383570445000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"well, the rest is basically https://bugzilla.mozilla.org/show_bug.cgi?id=444222","msgtype":"m.text"},"ts":1383570456000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"i think the spec doesn't have that problem. http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#dom-name","msgtype":"m.text"},"ts":1383570644000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"only for top-level","msgtype":"m.text"},"ts":1383570683000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"TabAtkins: moved to http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#dom-name","msgtype":"m.text"},"ts":1383571251000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1383571253000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"http://dev.w3.org/fxtf/geometry/","msgtype":"m.text"},"ts":1383571257000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"MikeSmith: does the tree builder patch downgrade some errors to warnings?","msgtype":"m.text"},"ts":1383571303000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"MikeSmith: what's the goal of this change?","msgtype":"m.text"},"ts":1383571402000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: the goal of the TreeBuilder patch is to nu","msgtype":"m.text"},"ts":1383571835000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: parse error :-(","msgtype":"m.text"},"ts":1383571889000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"anyway, looking at the tree builder patch more closely, it indeed seems to fix a bug, so r+","msgtype":"m.text"},"ts":1383571917000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"*not emit an sorry, typing on my mobile","msgtype":"m.text"},"ts":1383571924000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: what problem does the validator patch solve?","msgtype":"m.text"},"ts":1383571931000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: validator patch causes a warning to be emitted if the user has manually chosen html5 checking, but the doctype is a html5 or XHTML1 doctype","msgtype":"m.text"},"ts":1383572095000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"currently we do not emit a warning for that case","msgtype":"m.text"},"ts":1383572150000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that is, the case where the user selects an html5 preset without also manually selecting the html5 parser iron","msgtype":"m.text"},"ts":1383572257000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"*option","msgtype":"m.text"},"ts":1383572267000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"*but the doctype is an html4 or XHTML1 doctype","msgtype":"m.text"},"ts":1383572394000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hsivonen: about the TreeBuilder patch, do I need to open a bugzilla.mozilla bug to have it landed, or you can just land it from that changeset, or...?","msgtype":"m.text"},"ts":1383572662000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I can land it.","msgtype":"m.text"},"ts":1383572716000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1383572726000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: r+ on the validator patch, too, I guess","msgtype":"m.text"},"ts":1383572727000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1383572749000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: ah, I guess today window.name might no longer be reachable","msgtype":"m.text"},"ts":1383572778000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: does the parser patch have a bug number in *some* Bugzilla?","msgtype":"m.text"},"ts":1383573500000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Hixie: https://github.com/search/advanced seems to exist","msgtype":"m.text"},"ts":1383574243000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: https://hg.mozilla.org/projects/htmlparser/rev/2a1a57b4c8ff","msgtype":"m.text"},"ts":1383574313000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"jgraham: I recommend setting whatwg/streams to Watch","msgtype":"m.text"},"ts":1383574618000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: What does that do?","msgtype":"m.text"},"ts":1383574655000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(mostly I need to fix my email filters so that not all email from github ends up in the same folder)","msgtype":"m.text"},"ts":1383574721000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: only gives you notifications when mentioned","msgtype":"m.text"},"ts":1383574798000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: oh, \"Not watching\" is what I meant","msgtype":"m.text"},"ts":1383574815000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: confusingly the label says \"Watch\" but I guess that's what happens if I press it now","msgtype":"m.text"},"ts":1383574836000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: That seems pretty useless? What I think I want is \"one email per new issue, and the ability to subscribe to the issue if I am interested\"","msgtype":"m.text"},"ts":1383574856000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(Which isn't possible from github afaik)","msgtype":"m.text"},"ts":1383574935000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Because (insert github rant here)","msgtype":"m.text"},"ts":1383574947000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(Second github rant here)","msgtype":"m.text"},"ts":1383576202000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"arv: so nextElementSibling on DocumentType is not in stable Chrome yet it seems","msgtype":"m.text"},"ts":1383576494000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: It is not? Let me check. This was changed several months ago (but I only have dev channel here)","msgtype":"m.text"},"ts":1383576562000,"senderName":"arv","senderId":"arv@irc"},
{"content":{"body":"http://lists.w3.org/Archives/Public/www-style/2013Nov/0016.html","msgtype":"m.text"},"ts":1383576590000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: o_O","msgtype":"m.text"},"ts":1383576766000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"There's only one sensible reply there","msgtype":"m.text"},"ts":1383576828000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I just verified that it is in M31 (current stable)","msgtype":"m.text"},"ts":1383576835000,"senderName":"arv","senderId":"arv@irc"},
{"content":{"body":"arv: oh!","msgtype":"m.text"},"ts":1383576850000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, and that's not to reply? :)","msgtype":"m.text"},"ts":1383576873000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"arv: so <!DOCTYPE html><script>w(document.firstChild.nextElementSibling)</script> in http://software.hixie.ch/utilities/js/live-dom-viewer/ yields <html>?","msgtype":"m.text"},"ts":1383576895000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"seems like yes","msgtype":"m.text"},"ts":1383576946000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: thanks","msgtype":"m.text"},"ts":1383576950000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: yup","msgtype":"m.text"},"ts":1383576959000,"senderName":"arv","senderId":"arv@irc"},
{"content":{"body":"hsivonen: and no, I hadn't raised a bug for it anywhere, so there anyway wouldn't have been any bug number to mention in the changeset","msgtype":"m.text"},"ts":1383577021000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: ok","msgtype":"m.text"},"ts":1383577073000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"JakeA: my initial question would be, assume all your functions are sync. How would you write the code then?","msgtype":"m.text"},"ts":1383577278000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: https://gist.github.com/jakearchibald/785f79b0dea5bfe0c448#comment-943356","msgtype":"m.text"},"ts":1383577619000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: in that case, https://gist.github.com/jakearchibald/785f79b0dea5bfe0c448#comment-943359","msgtype":"m.text"},"ts":1383577874000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: that doesn't allow racing between the cache and network though","msgtype":"m.text"},"ts":1383577914000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: which would be an advantage of having this async","msgtype":"m.text"},"ts":1383577923000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ah, it wasn't clear that was desired, i will revisit in a bit","msgtype":"m.text"},"ts":1383577937000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: it seems you want to race between them, cancel cache if network is done, but not cancel network if cache is done","msgtype":"m.text"},"ts":1383577974000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: and then keep the spinner and content up to date while you do all that","msgtype":"m.text"},"ts":1383577996000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: The desired process is https://gist.github.com/jakearchibald/785f79b0dea5bfe0c448#comment-943260","msgtype":"m.text"},"ts":1383578316000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Does anyone have opinions on where XMLHttpRequest's restrictions on Request objects go?","msgtype":"m.text"},"ts":1383580319000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: just to confirm, what if: 1) fetch from cache fails, but fresh fetch succeeds; and 2) cache data arrives before fresh data.","msgtype":"m.text"},"ts":1383580327000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"In particular XMLHttpRequest restricts methods and headers.","msgtype":"m.text"},"ts":1383580335000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: ignore cache","msgtype":"m.text"},"ts":1383580353000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: not \"and\" as in \"what happens if both\", I meant more, those are two not-yet-specified cases by your desired process.","msgtype":"m.text"},"ts":1383580355000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"only if both fail do you do shownoupdate","msgtype":"m.text"},"ts":1383580379000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and if cache arrives before fresh?","msgtype":"m.text"},"ts":1383580389000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: If cache fails, but fresh succeeds, page is updated with fresh data & spinner stops","msgtype":"m.text"},"ts":1383580400000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"you first update with cache, then with fetch","msgtype":"m.text"},"ts":1383580401000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah, that breaks the symmetry, making it annoying. ok.","msgtype":"m.text"},"ts":1383580420000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: If cached data arrives first, page is updated with cached data. Network fetch continues and page will be updated again if/when it succeeds","msgtype":"m.text"},"ts":1383580446000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"it seems somewhat common to have this code in the SW","msgtype":"m.text"},"ts":1383580470000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"though I don't think it should leak outside the SW as JakeA's code suggests","msgtype":"m.text"},"ts":1383580487000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Actually, I saw this code living in the page. The service worker would handle serving the data & populating the cache on a fresh update","msgtype":"m.text"},"ts":1383580530000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"If I had an SW I would want that to handle all the cache complexity for me","msgtype":"m.text"},"ts":1383580576000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And just deal with URLs myself","msgtype":"m.text"},"ts":1383580585000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The service worker would only be able to handle the initial page serve, not the second request for fresh data & update","msgtype":"m.text"},"ts":1383580607000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"eg, the page would want to do stuff like \"Don't update with fresh data if old data has been interacted with\", eg like writing a tweet reply","msgtype":"m.text"},"ts":1383580639000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Ah yeah, fair. Although SW could ping the page but then you would indeed no longer be dealing with just a URL...","msgtype":"m.text"},"ts":1383580679000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Sad.","msgtype":"m.text"},"ts":1383580682000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if cache comes back successfully then fresh comes back successfully one second later, at which point do you hide the spinner?","msgtype":"m.text"},"ts":1383580733000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: I'll get this full \"gallery\" example into the repo later in the month. It could be that we could make this stuff easier","msgtype":"m.text"},"ts":1383580747000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic_: spinner is for network I'd assume","msgtype":"m.text"},"ts":1383580779000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: Spinner only hides once the fresh data request ends, whether it fails or succeeds","msgtype":"m.text"},"ts":1383580787000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"ah so i should think of this as a non-modal spinner.","msgtype":"m.text"},"ts":1383580820000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I guess, technically, you'd hide the spinner when both requests have completed (fail or succeed). But linking it to the network request is good enough","msgtype":"m.text"},"ts":1383580836000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"If the network request fails, but the cache fetch is still happening (likely if there's zero connectivity), it might be nice to still show a spinner","msgtype":"m.text"},"ts":1383580878000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"But my code at the top of the gist doesn't do that","msgtype":"m.text"},"ts":1383580888000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Surprising amount of edge cases to this","msgtype":"m.text"},"ts":1383580917000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Isn't that what UI is?","msgtype":"m.text"},"ts":1383580972000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Using .finally: https://gist.github.com/jakearchibald/785f79b0dea5bfe0c448#comment-943394","msgtype":"m.text"},"ts":1383581033000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: Hah!","msgtype":"m.text"},"ts":1383581183000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic_: annevk suggested Promise.all([cacheUpdate, freshUpdate]).catch(showNoDataError) too, either you're both wrong or I don't understand the API…","msgtype":"m.text"},"ts":1383581313000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I thought Promise.all(...) would reject if any of the promises rejected","msgtype":"m.text"},"ts":1383581337000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"and only resolve if all of the promises resolved","msgtype":"m.text"},"ts":1383581351000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"hmm yes, i think i am wrong, why did i do that","msgtype":"m.text"},"ts":1383581356000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":".race only rejects if all the promises reject, yeah?","msgtype":"m.text"},"ts":1383581387000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I'd have placed bets on me being wrong there","msgtype":"m.text"},"ts":1383581402000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"no it rejects if any of the promises reject before any of the promises fulfills","msgtype":"m.text"},"ts":1383581407000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"what we really want is .any","msgtype":"m.text"},"ts":1383581415000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Ohhhhhhh","msgtype":"m.text"},"ts":1383581451000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"the problem with speccing .any is figuring out what the aggregate error should look like if all reject","msgtype":"m.text"},"ts":1383581457000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"array of responses, right?","msgtype":"m.text"},"ts":1383581494000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: you need both response and fulfilled/reject state","msgtype":"m.text"},"ts":1383581521000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah. I thought race resolved on first to resolve, and rejected on all-rejected. Hah","msgtype":"m.text"},"ts":1383581637000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"My code in the original gist is broken then","msgtype":"m.text"},"ts":1383581648000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic_: So, need something like finally. & it'd be nice to have freshUpdate.isResolved to remove the need for updatedFromFresh. Is that fair?","msgtype":"m.text"},"ts":1383581876000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: isResolved isn't really useful, since you could be resolved to a pending promise","msgtype":"m.text"},"ts":1383582398000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"freshUpdate.hasThenBeenInvoked","msgtype":"m.text"},"ts":1383582461000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess I'm looking for isComplete","msgtype":"m.text"},"ts":1383582468000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":".race is pretty useless ... its existence stems from its counterpart being included in DOM promises, and MarkM liking it, and it having very straightforward/easy to spec semantics. If any of those were false it would probably have died along with what we are now calling .any---which is more useful, but harder to spec.","msgtype":"m.text"},"ts":1383582479000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: Hah, yeah","msgtype":"m.text"},"ts":1383582482000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"sounds like you are looking for isFulfilled, but that is not determinable without possible side effects, e.g. collapsing any lazy promises","msgtype":"m.text"},"ts":1383582502000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"well, maybe i am lying, if you can do it in user space, you should be able to do it in spec space.","msgtype":"m.text"},"ts":1383582574000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Does feel like there should be a more promisey way to handle updatedFromFresh","msgtype":"m.text"},"ts":1383582608000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"no, i am not lying, the user-space solution explicitly triggers .then.","msgtype":"m.text"},"ts":1383582614000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I dunno, seems fine to me.","msgtype":"m.text"},"ts":1383582622000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Remembering the sync/async parallel, i.e. you would do the exact same thing for sync-ish code.","msgtype":"m.text"},"ts":1383582639000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"JakeA: would it be much better with callbacks?","msgtype":"m.text"},"ts":1383582657000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Fair enough, I'm probably just trying to cram everything into the model of the new thing. Like when people ask how to do setTimeout in jQuery","msgtype":"m.text"},"ts":1383582667000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: alternatively, how would you ideally have done it?","msgtype":"m.text"},"ts":1383582667000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"haha","msgtype":"m.text"},"ts":1383582679000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: Oh, yeah, I don't have any better solutions. And I'm not being down on promises, just felt like I wasn't doing it as well as it could be done","msgtype":"m.text"},"ts":1383582737000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I'm also just wondering :)","msgtype":"m.text"},"ts":1383582777000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But yeah, it sounds like there's a finally() and a Promises.any() missing","msgtype":"m.text"},"ts":1383582793000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":".any is weird because if you reject with an array of reasons you are breaking the rule that rejections should be Errors.","msgtype":"m.text"},"ts":1383582838000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Didn't realise that was a rule, but makes sense","msgtype":"m.text"},"ts":1383582883000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I'm glad we had this chat before I finished my html5rocks article on Promises :D","msgtype":"m.text"},"ts":1383582905000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"e.g. would you write a sync function that does `func(funcs) { var errors = []; funcs.forEach(f => try { f() } catch (e) { errors.push(e); } if (errors.length) { throw errors; } }`? maybe you would, but seems a bit weird.","msgtype":"m.text"},"ts":1383582931000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"haha awesome i love html5rocks","msgtype":"m.text"},"ts":1383582937000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: I'll send you the draft when it's done, sounds like it'll benefit from a proof read","msgtype":"m.text"},"ts":1383582990000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"\"What makes @w3c a leader in global innovation?\"","msgtype":"m.text"},"ts":1383584730000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I'd love to hear","msgtype":"m.text"},"ts":1383584734000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Too bad @w3cdrm broke","msgtype":"m.text"},"ts":1383584786000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"good morning, Whatwg!","msgtype":"m.text"},"ts":1383584936000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"jgraham: Normal people don't need to do full-power property introspection; for most uses, just doing foo.bar or (\"bar\" in foo) is just fine.  So gOPD isn't a valid criticism, as it's something you use only in rare metaprogramming cases.","msgtype":"m.text"},"ts":1383590478000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, right, so why not support foo.bar?","msgtype":"m.text"},"ts":1383590525000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Because of everything I've already said when discussing this with zewt.  You have all Maps appearing to have a \"toString\" key, and have to either swallow that all Maps appear to have \"get\"/\"set\"/\"clear\"/etc keys as well, or push them off onto the Map object in a fashion that isn't done anywhere else (except Object).","msgtype":"m.text"},"ts":1383590600000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"FWIW it is less clear to me why . and [] have to do the same thing","msgtype":"m.text"},"ts":1383590745000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Because JS has always done that, changing it now would be impossible, and changing it for a *single object* is just silly.","msgtype":"m.text"},"ts":1383590774000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It's only silly if you don't introduce a general mechanism for doing it","msgtype":"m.text"},"ts":1383590826000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"And having one object act differently, and in a way that'll break lots of naive scripts, directly counters the \"consistency\" argument used to try and argue for using [] with Maps.","msgtype":"m.text"},"ts":1383590832000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Indeed, and there's a proposal for doing that (which isn't making it into ES6).","msgtype":"m.text"},"ts":1383590850000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The argument I used isn't \"consistency\"","msgtype":"m.text"},"ts":1383590850000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"It's \"usability\"","msgtype":"m.text"},"ts":1383590858000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But it's still something that breaks naive scripts, and so you don't want to turn it on for an object by default.","msgtype":"m.text"},"ts":1383590875000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yes, I had this same argument with zewt last night.","msgtype":"m.text"},"ts":1383590898000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It only breaks those scripts if people start throwing sets at them without updating them. Which is possible of course, but not obviously a deal breaker","msgtype":"m.text"},"ts":1383590917000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"The same is true of lots of new features","msgtype":"m.text"},"ts":1383590932000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I acknowledge that [] is slightly more usable, and in line with how you access object-maps.  But we can't make Maps do that without accepting a lot of bad things, which hurt the usability as well.  So it's definitely not a clear-cut right or wrong decision.","msgtype":"m.text"},"ts":1383590958000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(for example the generic not-in-ES6 mechanism for doing this that you just alluded to)","msgtype":"m.text"},"ts":1383590960000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(The generic mechanism is just assigning a function to some Symbol-valued get/set properties on the object, which are then used for gets/sets using [] instead of the default behavior.)","msgtype":"m.text"},"ts":1383591003000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Right, more or less what you would expect. No reason that couldn't work for set. And if it does go in, it will be confusing in the future when user objects overload [] but built-in sets don't","msgtype":"m.text"},"ts":1383591096000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Of course there's no reason why it wouldn't work. I'm saying you don't want it to work that way *by default*, because doing so is inconsistent with the rest of the language and will break lots of things doing simple metaprogramming.","msgtype":"m.text"},"ts":1383591139000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'm sorry there's no perfect answer. Perhaps JS messed up from the beginning by having .foo and ['foo'] do the same thing.  But we can't get away from that.","msgtype":"m.text"},"ts":1383591167000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I don't think I can blame you *personally* for that","msgtype":"m.text"},"ts":1383591214000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"BLAME HIM!","msgtype":"m.text"},"ts":1383591221000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"BURN HIM!","msgtype":"m.text"},"ts":1383591223000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Unless you go on to invent a time machine and threaten Brendan with death unless he consents to your will","msgtype":"m.text"},"ts":1383591247000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"If I had a time machine, there's several people I would be threatening with death unless they consented to my will.","msgtype":"m.text"},"ts":1383591268000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hmm, my estimate of the probability of that being the case just went up","msgtype":"m.text"},"ts":1383591291000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"*cause","msgtype":"m.text"},"ts":1383591296000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"TabAtkins: I'm confused, is a promise for itself required (since monads don't care what's inside them) or disallowed?","msgtype":"m.text"},"ts":1383592246000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: Irrelevant question. The monad contract doesn't care what inside the context. Resolve it however you want.","msgtype":"m.text"},"ts":1383592276000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You need to *allow* a monad to be put inside of itself, but it's fine to make that cause rejection.  You just shouldn't, for example, throw.","msgtype":"m.text"},"ts":1383592313000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1383592321000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Just note Mark's comments about remote promises not being able to eagerly reject.","msgtype":"m.text"},"ts":1383592335000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"right yeah","msgtype":"m.text"},"ts":1383592341000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"that'll be tricky","msgtype":"m.text"},"ts":1383592347000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"MikeSmith: ping","msgtype":"m.text"},"ts":1383595313000,"senderName":"jpwhiting","senderId":"jpwhiting@irc"},
{"content":{"body":"anyone got an idea of what the event we fire on <details> should be called? fired when it opens or closes","msgtype":"m.text"},"ts":1383602711000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"best current suggestion is \"ontoggle\"","msgtype":"m.text"},"ts":1383602717000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"where's a good bikeshed when you need one","msgtype":"m.text"},"ts":1383602805000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"That seems like a perfectly good name","msgtype":"m.text"},"ts":1383603019000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"concurs","msgtype":"m.emote"},"ts":1383603025000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"yeah, +1","msgtype":"m.text"},"ts":1383603294000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"Hixie: Quick, ship an implementation before anyone disagrees","msgtype":"m.text"},"ts":1383603431000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"i dunno onopenorclosestatechange seems pretty good too","msgtype":"m.text"},"ts":1383603462000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"hides","msgtype":"m.emote"},"ts":1383603466000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"ontoggle it is","msgtype":"m.text"},"ts":1383603575000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"kills miketaylr","msgtype":"m.emote"},"ts":1383603578000,"senderName":"nimbu","senderId":"nimbu@irc"},
{"content":{"body":"anyone have a link to that htmlwg post where the chairs said we didn't have to test everything because some things had \"proven interoperability\"?","msgtype":"m.text"},"ts":1383607997000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"http://lists.w3.org/Archives/Public/public-html/2012Sep/0243.html looks to be it","msgtype":"m.text"},"ts":1383608057000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: FWIW I don't think anyone intends to not test everything","msgtype":"m.text"},"ts":1383608481000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"It just means that they won't require testing everything for Process reasons","msgtype":"m.text"},"ts":1383608502000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But that's fine, testing for Process doesn't really work anyway","msgtype":"m.text"},"ts":1383608521000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Actually I take that back","msgtype":"m.text"},"ts":1383608627000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"testing for Process really doesn't work","msgtype":"m.text"},"ts":1383608635000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"It just leads to confusion like people asking if it's OK to submit tests for the interaction between different features","msgtype":"m.text"},"ts":1383608683000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Or people submitting tests carefully chosen to demonstrate interop, rather than to find bugs","msgtype":"m.text"},"ts":1383608708000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"The only real good thing about having testing be part of the Process is that it encourages some people who care about Process to write tests","msgtype":"m.text"},"ts":1383608763000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"However it doesn't guarantee the quality of those tests, for the reasons already stated","msgtype":"m.text"},"ts":1383608783000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yeah, it was in the context of process reasons that i was asking","msgtype":"m.text"},"ts":1383608829000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Oh, OK, if you are discussing Process then this clearly violates the intent of the Process. But also the Process shoudl change.","msgtype":"m.text"},"ts":1383608940000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"or, you know, not exist","msgtype":"m.text"},"ts":1383608949000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i was discussing values of the whatwg and w3c with someone. these are what i came up with, but i'm worried they're biased -- anyone got a less subjective list?:","msgtype":"m.text"},"ts":1383608990000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"   WHATWG values:","msgtype":"m.text"},"ts":1383609000000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"    - technical correctness above all","msgtype":"m.text"},"ts":1383609001000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"    - openness and freedom","msgtype":"m.text"},"ts":1383609001000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"    - responding to all feedback","msgtype":"m.text"},"ts":1383609001000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"    - meritocracy","msgtype":"m.text"},"ts":1383609001000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"   W3C values:","msgtype":"m.text"},"ts":1383609003000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"    - consensus above all","msgtype":"m.text"},"ts":1383609005000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"    - making the AC happy","msgtype":"m.text"},"ts":1383609008000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"    - following processes","msgtype":"m.text"},"ts":1383609010000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"    - publishing \"stable references\"","msgtype":"m.text"},"ts":1383609013000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(i mean, actual values as demonstrated by actions, not claimed values. also, let me know if you see any contradictions of the whatwg values.)","msgtype":"m.text"},"ts":1383609111000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I think you missed one. WHATWG values: - making fun of W3C process","msgtype":"m.text"},"ts":1383609314000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"i actually later in the discussion listed some values that neither group has, and one i had in that list was \"politeness\"","msgtype":"m.text"},"ts":1383609349000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"which i think is much the same as what you said :-)","msgtype":"m.text"},"ts":1383609366000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I don't know if it's technically a value, but WHATWG tends to value browser vendors above other entities (discounting \"authors\" and \"end users\") whereas the W3C has a different set of constituents including media companies, large corps and whoever else will pay the membership fees","msgtype":"m.text"},"ts":1383609381000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"i think that falls into \"making the AC happy\", but yeah, interesting way of looking at it","msgtype":"m.text"},"ts":1383609414000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Sure, if you know who the AC are and the fact that the W3C actively tries to recruit new Members irrespective of whether they have interests aligned with the Open Web","msgtype":"m.text"},"ts":1383609494000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I think WHATWG valuing meritocracy might be a subjective call. I've seen opinions I value getting short shrift in discussions here","msgtype":"m.text"},"ts":1383609500000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"i meant that more along the lines of you get responsibility if you do the work","msgtype":"m.text"},"ts":1383609541000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"as in, the person who works on the wiki gets to decide when the wiki software is updated","msgtype":"m.text"},"ts":1383609592000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or the person who writes the spec, gets to decide what the spec says","msgtype":"m.text"},"ts":1383609599000,"senderName":"Hixie","senderId":"Hixie@irc"}
]