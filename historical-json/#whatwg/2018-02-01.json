[
{"content":{"body":"annevk, MikeSmith: do you accept lurkers on that meeting? https://github.com/w3c/WebPlatformWG/blob/gh-pages/meetings/18-03-Web-components.md","msgtype":"m.text"},"ts":1517448096000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"annevk: I would think you would be very welcome to attend","msgtype":"m.text"},"ts":1517448479000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"just need to ask kochi probably","msgtype":"m.text"},"ts":1517448486000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"not sure who will be the formal chair for the meeting","msgtype":"m.text"},"ts":1517448508000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"We already invited people from framework developers, so I think anyone is welcome to join.","msgtype":"m.text"},"ts":1517448610000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1517448642000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"probably what we need is just follow w3c's code of conduct. https://www.w3.org/Consortium/cepc/","msgtype":"m.text"},"ts":1517448670000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"I haven't done setup for registration form kind of thing, for building security badge etc., and catering planning","msgtype":"m.text"},"ts":1517448706000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"MikeSmith, kochi: thanks!","msgtype":"m.text"},"ts":1517450102000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"I'm living in Japan. And my interest is more on the side of implementation differences in between browsers (webcompat hat). And I'm happy to stay silent for the full meeting. :)","msgtype":"m.text"},"ts":1517450187000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"Should the loading of a environment-matching style sheet requested by a <link> in <body> block the rendering of the page?","msgtype":"m.text"},"ts":1517454925000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"hi, over at https://html.spec.whatwg.org/multipage/webappapis.html#handler-onload I see \"The following are the event handlers (and their corresponding event handler event types) that must be supported by all HTML elements other than body and frameset elements\"","msgtype":"m.text"},"ts":1517467701000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"shout-user501: yeah?","msgtype":"m.text"},"ts":1517467731000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"included in this list is onload - but I thought onload was only for certain elements?","msgtype":"m.text"},"ts":1517467732000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"see e.g. https://stackoverflow.com/questions/4057236/how-to-add-onload-event-to-a-div-element","msgtype":"m.text"},"ts":1517467744000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"shout-user501: I guess it comes down to what “must be supported” means there","msgtype":"m.text"},"ts":1517468043000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that statement isn’t actually requiring any processing behavior","msgtype":"m.text"},"ts":1517468077000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so it means supported as in adding it doesn't break anything? is this type of language common in the spec? admittedly I'm not well-versed in it","msgtype":"m.text"},"ts":1517468146000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"adding onload to an element that the load event is never fired at isn’t going to break anything","msgtype":"m.text"},"ts":1517468227000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it’s just never going to have any effect","msgtype":"m.text"},"ts":1517468237000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"as far as that type of language being common, not really","msgtype":"m.text"},"ts":1517468276000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"arguably it’s a deficiency in the spec that it doesn’t make unambiguous what it means by “must be supported by all HTML elements” there","msgtype":"m.text"},"ts":1517468329000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I was kind of looking for where the spec defines how it works precisely and which elements it applies to, but the section I found which describes that says it is \"non-normative\" https://html.spec.whatwg.org/multipage/indices.html#events-2","msgtype":"m.text"},"ts":1517468554000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"nvm, I'm looking at a single page of the multipage version","msgtype":"m.text"},"ts":1517468586000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1517468737000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah, for the elements the load event actuall gets fired at, the spec explicitly states in each case, “Fire an event named \"load\"...”","msgtype":"m.text"},"ts":1517468800000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"or some wording close to that","msgtype":"m.text"},"ts":1517468821000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"nice, i see that now :)","msgtype":"m.text"},"ts":1517468861000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"I noticed the comment \"While these attributes apply to all elements, they are not useful on all elements. For example, only media elements will ever receive a volumechange event fired by the user agent\" at one spot - aware of a good list which matches the events to the relevant elements?","msgtype":"m.text"},"ts":1517469092000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"took a look at MDN and it's not clear that they do - I guess maybe this is out of scope for the spec itself but it seems like it could be a handy reference thing for spec folks too","msgtype":"m.text"},"ts":1517469135000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"shout-user501: onload on body is special","msgtype":"m.text"},"ts":1517469330000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"shout-user501: it's actually tied to the Window object, iirc","msgtype":"m.text"},"ts":1517469339000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yep, it's also special on embed and various other tags too","msgtype":"m.text"},"ts":1517469356000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"MikeSmith helped me out a fair bit already on that","msgtype":"m.text"},"ts":1517469374000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"shout-user501: I don't think it's special on embed?","msgtype":"m.text"},"ts":1517469379000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"fired at an element containing a resource (e.g. img, embed) when its resource has finished loading\"","msgtype":"m.text"},"ts":1517469417000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"That doesn't make the attribute special","msgtype":"m.text"},"ts":1517469478000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"seems to be fired on link, style, etc","msgtype":"m.text"},"ts":1517469491000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"well it's only fired on a small handful of elements, so it's special","msgtype":"m.text"},"ts":1517469500000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"Sure, but fired on is a different concept from the attribute","msgtype":"m.text"},"ts":1517469505000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"They're not really related","msgtype":"m.text"},"ts":1517469520000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"for me, if it's useful at all that makes it special","msgtype":"m.text"},"ts":1517469531000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"You can manually fire events of any type to anything that's an event target","msgtype":"m.text"},"ts":1517469535000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"since it technically is \"supported\" on all HTML elements","msgtype":"m.text"},"ts":1517469541000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"it's fired by the browser on a very small handful of elements","msgtype":"m.text"},"ts":1517469554000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"The attribute is; but that doesn't mean the event is dispatched by the UA on all of them","msgtype":"m.text"},"ts":1517469564000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it is dispatched by the UA for embed and link tho, as well as body","msgtype":"m.text"},"ts":1517469587000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"No, I don't think it's dispatched on body","msgtype":"m.text"},"ts":1517469599000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's dispatched on the global, and the onload attribute on body gets actually registered there","msgtype":"m.text"},"ts":1517469619000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That's why _that_ attribute is special","msgtype":"m.text"},"ts":1517469627000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm, OK - ultimately the word special doesn't have much meaning anyway..","msgtype":"m.text"},"ts":1517469677000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"Well, it has different behavior from what the attribute normally has","msgtype":"m.text"},"ts":1517469707000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think you might be coming at it from a spec / implementation perspective, whereas I am coming at it from an app development perspective","msgtype":"m.text"},"ts":1517469715000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"Normally it just registers a listener on the object it's associated with","msgtype":"m.text"},"ts":1517469718000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm not sure how that matters","msgtype":"m.text"},"ts":1517469734000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, as an app developer it is fired when the resource loads - and the body is similar to an embed in that respect","msgtype":"m.text"},"ts":1517469762000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"not really special at all, just different types of resources","msgtype":"m.text"},"ts":1517469772000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"from a technical perspective, the fact that it ties into Window makes it seem more special?","msgtype":"m.text"},"ts":1517469806000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"Again, you're conflating events and event handlers","msgtype":"m.text"},"ts":1517469816000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the UA does fire certain events which can only be captured against certain event handlers, right? I mean sure I can fire it in my app code but that seems like an antipattern","msgtype":"m.text"},"ts":1517470223000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"long-run I'd be personally be happy to see a system for warnings or errors on something like that","msgtype":"m.text"},"ts":1517470283000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"the non-normative explanation of load says \"Fired at the Window when the document has finished loading; fired at an element containing a resource (e.g. img, embed) when its resource has finished loading\"","msgtype":"m.text"},"ts":1517470358000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"to me those use cases seem quite similar, but you're saying they are conceptually quite differnet?","msgtype":"m.text"},"ts":1517470375000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"maybe you mean it's different because you can listen with window.onload as well as the body attribute","msgtype":"m.text"},"ts":1517470478000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"I'm saying that event handlers and events are different. E.g., if you registered an event listener on body for load using addEventListener() it would never trigger since the event isn't dispatched there. The event handler (onload) would trigger since it actually ends up registering a listener on window.","msgtype":"m.text"},"ts":1517470513000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That's what makes that event handler special, whereas the others are pretty normal. You're right some objects are special in that the UA dispatches events on them, but that's not always closely correlated to the event handlers.","msgtype":"m.text"},"ts":1517470566000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh, interesting, that seems a bit unfortunately confusing","msgtype":"m.text"},"ts":1517470618000,"senderName":"shout-user501","senderId":"shout-user501@irc"},
{"content":{"body":"MikeSmith: I think we might have been measuring the wrong thing","msgtype":"m.text"},"ts":1517471800000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh?","msgtype":"m.text"},"ts":1517471811000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: you've only been looking at parents, not nearest ancestor article, nav, section, aside","msgtype":"m.text"},"ts":1517471817000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: unless the caption is wrong","msgtype":"m.text"},"ts":1517471826000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: either way, it'd be good to look through a sample of those multiple <h1>s","msgtype":"m.text"},"ts":1517471890000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: right yeah I can change it to look at ancestors","msgtype":"m.text"},"ts":1517472501000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: cool; I hope those numbers would line up a bit more with the 3% usage","msgtype":"m.text"},"ts":1517472929000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: although on the other hand if they don't the change would not make much of an impact and is therefore fairly safe...","msgtype":"m.text"},"ts":1517472960000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"missed that Ms2ger eventually pushed more tests","msgtype":"m.emote"},"ts":1517484396000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So, yeah, r? :)","msgtype":"m.text"},"ts":1517484418000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Yeah looking now, though might take a while since I'm getting hungry","msgtype":"m.text"},"ts":1517484451000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: hmm so what if a Blob is a WebM resource?","msgtype":"m.text"},"ts":1517486365000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The specification for createImageBitmap() was really quite bad","msgtype":"m.text"},"ts":1517486379000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well, still is","msgtype":"m.text"},"ts":1517486386000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Per spec, it's not an image, so not supported, I guess","msgtype":"m.text"},"ts":1517486414000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I guess that's fine","msgtype":"m.text"},"ts":1517486445000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: although Safari added MPEG support to <img> so...","msgtype":"m.text"},"ts":1517486542000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Without really defining what that means...","msgtype":"m.text"},"ts":1517486555000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I donno, man","msgtype":"m.text"},"ts":1517486560000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"surma: are you interested in creating a better test suite for structured cloning?","msgtype":"m.text"},"ts":1517490048000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is looking at the current mess","msgtype":"m.emote"},"ts":1517490078000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Seems like that might be in order, huh?","msgtype":"m.text"},"ts":1517492186000,"senderName":"surma","senderId":"surma@irc"},
{"content":{"body":"surma: yeah, we can then also add tests for Symbol throwing","msgtype":"m.text"},"ts":1517492465000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"surma: there's tests in webmessaging/ and in html/ in various folders","msgtype":"m.text"},"ts":1517492485000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"surma: html/browsers/history/the-history-interface and html/infrastructure/safe-passing-of-structured-data","msgtype":"m.text"},"ts":1517492512000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"surma: also workers/semantics/structured-clone","msgtype":"m.text"},"ts":1517492530000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"surma: my thinking is that we'd want a JavaScript resource that sets up various test scenarios and expectations and that's imported into various wrappers for the different APIs","msgtype":"m.text"},"ts":1517492648000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Alright. I’ll take a stab. Should I create a re-usable set of tests than can be used for all methods that use structured(De)Serialize under the hood?","msgtype":"m.text"},"ts":1517492653000,"senderName":"surma","senderId":"surma@irc"},
{"content":{"body":"Ha!","msgtype":"m.text"},"ts":1517492656000,"senderName":"surma","senderId":"surma@irc"},
{"content":{"body":"annevk: sg :)","msgtype":"m.text"},"ts":1517492662000,"senderName":"surma","senderId":"surma@irc"},
{"content":{"body":"much appreciated \\o/","msgtype":"m.text"},"ts":1517492681000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"surma: FWIW, stuff that'd be nice to be able to test include things like postMessage(Symbol(), \"*\", [new ArrayBuffer(2)]) throwing and not detaching the buffer (want to be able to test the order things happen in)","msgtype":"m.text"},"ts":1517493027000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ah good one.","msgtype":"m.text"},"ts":1517493098000,"senderName":"surma","senderId":"surma@irc"},
{"content":{"body":"I’ll go through the spec and see what I come up with :)","msgtype":"m.text"},"ts":1517493121000,"senderName":"surma","senderId":"surma@irc"},
{"content":{"body":"cool; once you have a framework I'm happy to help out filling it out for various objects","msgtype":"m.text"},"ts":1517493154000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"shout-user501: another useful thing is that you can do e.g. body.ondragexit = ... and catch bubbled dragexit events. That is part of why those are defined on all elements.","msgtype":"m.text"},"ts":1517502566000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: are records perhaps always passed by reference?","msgtype":"m.text"},"ts":1517507449000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: in that case my pointer comment can be disregarded","msgtype":"m.text"},"ts":1517507457000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah I think everything in specs is, generally. I am going to check the PR soon, but my impression seeing it in my email was that it's not an issue.","msgtype":"m.text"},"ts":1517507485000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"kk","msgtype":"m.text"},"ts":1517507509000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if this works it'd be a pretty sweet simplification","msgtype":"m.text"},"ts":1517507530000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"HTML has an interesting defense against -0:","msgtype":"m.text"},"ts":1517508863000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"> If sign is \"positive\", return value, otherwise return the result of subtracting value from zero.","msgtype":"m.text"},"ts":1517508866000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is trying to find +0/-0 issues","msgtype":"m.emote"},"ts":1517508897000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: as I update https://github.com/whatwg/html/pull/3437, shall I keep it two distinct commits?","msgtype":"m.text"},"ts":1517510262000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: or would you prefer a fixup commit?","msgtype":"m.text"},"ts":1517510268000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: (I might not get to doing it until tomorrow, but would like to know how)","msgtype":"m.text"},"ts":1517510282000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh I didn't notice the two commits hmm","msgtype":"m.text"},"ts":1517510282000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: can you remove the placeholder without the other change, or does it depend on the bugfix first?","msgtype":"m.text"},"ts":1517510333000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I think it can be done separately","msgtype":"m.text"},"ts":1517510356000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm OK, then separate seems good. I'll try to understand better how that's possible...","msgtype":"m.text"},"ts":1517510375000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Maybe reorder so that goes first, if it's not extra work.","msgtype":"m.text"},"ts":1517510391000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: let me try it in a new PR","msgtype":"m.text"},"ts":1517510502000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"awesome","msgtype":"m.text"},"ts":1517510510000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I have a bit of time","msgtype":"m.text"},"ts":1517510511000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"keeps banging my head against is=\"\"","msgtype":"m.emote"},"ts":1517510521000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I do not envy you","msgtype":"m.text"},"ts":1517510532000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm, why does `bikeshed update` claim local data is already up-to-date, while showing me a timestamp from 3 days ago... did really nothing change between now and then?","msgtype":"m.text"},"ts":1517510543000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"hmm, DOM defines a Document's URL as being a URL record. Which would mean that if it's a blob: URL the url would contain that blob as its object, which from reading the spec means that for example location.reload() should work on a document created from a blob URL even after the blob URL is revoked (since it just passes the already parsed URL on to navigate/fetch...)","msgtype":"m.text"},"ts":1517513426000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"I wonder if any browser actually implements it like that...","msgtype":"m.text"},"ts":1517513456000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Domenic: if instead of uninitialized value we use an empty record? Would that work? How is it different?","msgtype":"m.text"},"ts":1517514837000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I don't think so? The issue is you're changing only what memory[transferable] points to. But lots of other places, inside _serialized_ now point to the placeholder/uninitialized value, which don't get updated.","msgtype":"m.text"},"ts":1517514940000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: I guess if you set it to an empty record and then instead of creating dataHolder, just updated all the fields of it, that would work","msgtype":"m.text"},"ts":1517514982000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Although records traditionally have a more fixed set of fields","msgtype":"m.text"},"ts":1517514988000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: we already violate that with transfer steps","msgtype":"m.text"},"ts":1517515083000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: although we could fix that","msgtype":"m.text"},"ts":1517515114000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"No I mean once you create a record you don't change its fields","msgtype":"m.text"},"ts":1517515116000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh, yeah, we do","msgtype":"m.text"},"ts":1517515127000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I have an idea of how to fix both, but breaks downstream transferables if any","msgtype":"m.text"},"ts":1517515179000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm","msgtype":"m.text"},"ts":1517515190000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Unsure if worth it, at least for transfer steps","msgtype":"m.text"},"ts":1517515196000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ok, we can consider that separately then","msgtype":"m.text"},"ts":1517515763000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think the placeholder thing is not so bad, now that it's all defined in terms of lists and records at least.","msgtype":"m.text"},"ts":1517515876000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It was bad when it was within a graph of JS objects; it was like, how do you traverse such a graph? Does it trigger getters? Ugh. But now it makes sense.","msgtype":"m.text"},"ts":1517515897000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That said something like discussed above is probably more efficient, in the event implementers are anywhere close to verbatim following our algorithms.","msgtype":"m.text"},"ts":1517515921000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Mek: Because my computer at work auto-restarted while I'm in Sydney, and that's what runs the update script. I should be able to run it manually today.","msgtype":"m.text"},"ts":1517526356000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: ah, okay, thanks","msgtype":"m.text"},"ts":1517526373000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Mek: Ran it manually now.","msgtype":"m.text"},"ts":1517529174000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]