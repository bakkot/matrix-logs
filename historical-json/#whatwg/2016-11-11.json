[
{"content":{"body":"aklein: also note that when that public-script-coord email was written [[SetPrototypeOf]] did not yet exist, IIRC","msgtype":"m.text"},"ts":1478824810000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic: yt?","msgtype":"m.text"},"ts":1478825008000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"tobie: Yeah, people really want 64-bit ints, for obvious reasons.","msgtype":"m.text"},"ts":1478827639000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"aklein: I think that might have been for simplicity reasons","msgtype":"m.text"},"ts":1478842711000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aklein: to just align Location and WindowProxy in as many ways as possible","msgtype":"m.text"},"ts":1478842750000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hiya everyone","msgtype":"m.text"},"ts":1478844352000,"senderName":"felixjet","senderId":"felixjet@irc"},
{"content":{"body":"i was checking the whatwg FAQ for feedback and i'm more confuse now","msgtype":"m.text"},"ts":1478844395000,"senderName":"felixjet","senderId":"felixjet@irc"},
{"content":{"body":"should i use <dl> and <dt> <dd> for FAQs?","msgtype":"m.text"},"ts":1478844422000,"senderName":"felixjet","senderId":"felixjet@irc"},
{"content":{"body":"where <dt> is question and <dd> answer","msgtype":"m.text"},"ts":1478844429000,"senderName":"felixjet","senderId":"felixjet@irc"},
{"content":{"body":"it seems like make sense, but an answer is not a definition of a question, at all","msgtype":"m.text"},"ts":1478844445000,"senderName":"felixjet","senderId":"felixjet@irc"},
{"content":{"body":"the whatwg FAQ page is hosted on a wikimedia script so... that forces the page to use <h3> for questions and <p> for answers","msgtype":"m.text"},"ts":1478844473000,"senderName":"felixjet","senderId":"felixjet@irc"},
{"content":{"body":"not a good example to clear my doubt i think","msgtype":"m.text"},"ts":1478844485000,"senderName":"felixjet","senderId":"felixjet@irc"},
{"content":{"body":"and also if someone can confirm me if this thread (https://github.com/whatwg/html/issues/1937) is resolved as being able to use <div> to group definitions would be nice, because i've read most of the messages and i'm not 100% sure","msgtype":"m.text"},"ts":1478845143000,"senderName":"felixjet","senderId":"felixjet@irc"},
{"content":{"body":"felixjet: as defined in the HTML Standard <dl> is no longer a definition list","msgtype":"m.text"},"ts":1478849651000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"felixjet: also, as you can see at https://html.spec.whatwg.org/multipage/semantics.html#the-dl-element it allows either <div> children or <dt>/<dd> groupings","msgtype":"m.text"},"ts":1478849702000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and <dt>/<dd> inside <div> ?","msgtype":"m.text"},"ts":1478849803000,"senderName":"felixjet","senderId":"felixjet@irc"},
{"content":{"body":"<dl><div><dt><dd></div></dl> ?","msgtype":"m.text"},"ts":1478849815000,"senderName":"felixjet","senderId":"felixjet@irc"},
{"content":{"body":"felixjet: yes","msgtype":"m.text"},"ts":1478849967000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"thanks!","msgtype":"m.text"},"ts":1478850253000,"senderName":"felixjet","senderId":"felixjet@irc"},
{"content":{"body":"Am I reading the ES to IDL long long conversion algorithm  properly? (https://heycam.github.io/webidl/#es-unsigned-long-long)","msgtype":"m.text"},"ts":1478852922000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Are the [EnforceRange] and [Clamp] extended attributes using much lower bounds than those supported by the number for the reasons Domenic exposed yesterday?","msgtype":"m.text"},"ts":1478852922000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"If so, is this just completely unintuitive to me because I'm new to thinking about these issues?","msgtype":"m.text"},"ts":1478852922000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Or is this unintuitive to all?","msgtype":"m.text"},"ts":1478852950000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: a number is 2^53-1 in ECMAScript","msgtype":"m.text"},"ts":1478853352000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: integer anyway","msgtype":"m.text"},"ts":1478853419000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think I'm starting to figure out the different pieces, but I'm still putting them together all wrong.","msgtype":"m.text"},"ts":1478853479000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: you can still have numbers bigger, right? But then they loose precision.","msgtype":"m.text"},"ts":1478853618000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I don't think so","msgtype":"m.text"},"ts":1478853787000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type has some of the details","msgtype":"m.text"},"ts":1478853814000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: I'm not overly familiar with IEEE Standard for Binary Floating-Point Arithmetic though","msgtype":"m.text"},"ts":1478853823000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: or at all, hah","msgtype":"m.text"},"ts":1478853831000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"In the console:","msgtype":"m.text"},"ts":1478853876000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Math.pow(2, 53) // 9007199254740992","msgtype":"m.text"},"ts":1478853895000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Math.pow(2, 55) // 36028797018963970","msgtype":"m.text"},"ts":1478853895000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: Math.pow() is implementation-dependent","msgtype":"m.text"},"ts":1478854448000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: \"Note that all the positive and negative integers whose magnitude is no greater than 2^53 are representable in the Number type (indeed, the integer 0 has two representations, +0 and -0).\"","msgtype":"m.text"},"ts":1478854462000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"36028797018963970","msgtype":"m.text"},"ts":1478854488000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"oops sorry, wrong console. :)","msgtype":"m.text"},"ts":1478854504000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: so what about those numbers that are bigger in long long that are neither clamped nor whose range is enforced?","msgtype":"m.text"},"ts":1478854652000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: long long is always bigger, no?","msgtype":"m.text"},"ts":1478854771000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: which is arguably a problem","msgtype":"m.text"},"ts":1478854777000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: it doesn't make much sense for IDL to accept and return bigger numbers than JavaScript can handle reliably","msgtype":"m.text"},"ts":1478854794000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: if you look at unsigned long long, we use modulo 2^64, not modulo 2^53","msgtype":"m.text"},"ts":1478854802000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I saw that, presumably since long long is a 64-bit signifier","msgtype":"m.text"},"ts":1478854827000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I don't understand. :(","msgtype":"m.text"},"ts":1478854924000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: as I said, I'm not great at the JavaScript numbers game either","msgtype":"m.text"},"ts":1478855016000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'll wait for the prof. TabAtkins to show up.","msgtype":"m.text"},"ts":1478855043000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I think the problem with numbers larger than 2^53 is what happens when you start adding or subtracting","msgtype":"m.text"},"ts":1478855103000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: e.g., if you subtract 1 from 2^55 in your example you still get the same result","msgtype":"m.text"},"ts":1478855191000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: if you subtract 4, 6 is subtracted","msgtype":"m.text"},"ts":1478855202000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yes, I'm aware of this. But then why is this an issue for clamped numbers  and not for non-clamped ones.","msgtype":"m.text"},"ts":1478855253000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: https://mail.mozilla.org/pipermail/es-discuss/2013-August/032991.html","msgtype":"m.text"},"ts":1478855254000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: I think [Clamp] is typically not used for long long, but smaller values","msgtype":"m.text"},"ts":1478855313000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: and it's kinda recommended against","msgtype":"m.text"},"ts":1478855345000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"from what I remember anyway","msgtype":"m.text"},"ts":1478855353000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: hey, can you convert html-differences to Bikeshed?","msgtype":"m.text"},"ts":1478855467000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I see no such warning in the spec","msgtype":"m.text"},"ts":1478855529000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: anyway, thanks for the help","msgtype":"m.text"},"ts":1478855562000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: i suppose. is it a problem?","msgtype":"m.text"},"ts":1478855605000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: not huge, but with Bikeshed we can do commit snapshots and I'm going to stop maintaining the xref repo","msgtype":"m.text"},"ts":1478855794000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok. i filed an issue","msgtype":"m.text"},"ts":1478855923000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: the other thing I guess is that we only have mimesniff/xhr/html-differences left and I'm converting mimesniff at the moment and xhr is halfway done","msgtype":"m.text"},"ts":1478855985000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: so nobody having to install and deal with Anolis anymore is also a win of sorts","msgtype":"m.text"},"ts":1478856013000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, agreed","msgtype":"m.text"},"ts":1478856028000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"when you need booleans in abstract operations, do you just \"set |foo|\" and then do \"if |foo| is set\"?","msgtype":"m.text"},"ts":1478856553000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"is calling those flags suggested?","msgtype":"m.text"},"ts":1478856847000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: in abstract operations you would use actual booleans and no flags","msgtype":"m.text"},"ts":1478857210000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: and copy the language from ECMAScript","msgtype":"m.text"},"ts":1478857221000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: are you and domenic working on a guide for this","msgtype":"m.text"},"ts":1478857257000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1478857258000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: we're in the process of figuring out guidance around algorithms, but we're not sure yet what to suggest","msgtype":"m.text"},"ts":1478857338000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: heh","msgtype":"m.text"},"ts":1478857354000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I'd personally be okay with going abstract-op everywhere, but it seems there's quite a few people that are okay with preserving named algorithms and such","msgtype":"m.text"},"ts":1478857367000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: including Domenic!","msgtype":"m.text"},"ts":1478857379000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, would have thought? :)","msgtype":"m.text"},"ts":1478857408000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: so for now we'll have things that \"return\" terminates the algorithm and \"throw\" rethrows unless caught with prose, etc.","msgtype":"m.text"},"ts":1478857410000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: is this happening in a repo anywhere?","msgtype":"m.text"},"ts":1478857440000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: yeah, needs to be made public soonish, I'll show you","msgtype":"m.text"},"ts":1478857473000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1478857525000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"is Domenic being OK with preserving named algorithms is maybe because he sees that way as being more understandable/approachable Web/JS developers?","msgtype":"m.text"},"ts":1478857538000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"(if anyone else is interested let me know, it's not public yet since we need to figure out some more details)","msgtype":"m.text"},"ts":1478857556000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"or is that totally unrelated in this context?","msgtype":"m.text"},"ts":1478857556000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I don't really want to speak for him, but he's argued that it has worked well thus far","msgtype":"m.text"},"ts":1478857594000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: and I think indeed also that people have said that ECMAScript is less readable","msgtype":"m.text"},"ts":1478857611000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well not sure how useful a data point this is, but personally I find the ECMAScript spec way extremely difficult/unfamiliar as far as readability","msgtype":"m.text"},"ts":1478857705000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I wonder to what extent that is because it describes a programming language","msgtype":"m.text"},"ts":1478857732000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"maybe that is just because it is so very different from the specs for Web APIs that I am more familiar with","msgtype":"m.text"},"ts":1478857737000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"But folks have also said this of Streams","msgtype":"m.text"},"ts":1478857740000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, that, I think","msgtype":"m.text"},"ts":1478857741000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Which describes a set of objects","msgtype":"m.text"},"ts":1478857753000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well I am pretty sure I have never actually read any other spec for a programming language. So for all I know it could be that the way to ECMAScript defines this is very like specs for other programming languages and looks familiar for anybody who has implemented a programming-language runtime, and for people who actually work in V8 and SpiderMonkey (or whatever the current name is) and JSC","msgtype":"m.text"},"ts":1478857905000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"When ECMAScript still had ReturnIfAbrubt there was a lot of complaining","msgtype":"m.text"},"ts":1478857961000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: it's a kinda odd way to do it, but not unreasonable compared with others (which mostly rely on some separate section defining what happens with abrupt completion in various places)","msgtype":"m.text"},"ts":1478858535000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"MikeSmith: I actually find it very useful to identify algorithms as such, with input values, output values, etc. I find the Algo(args) style very expicit and that's something I like about it. I think developers in general find that easier to grok (\"oh, here's a call to a function! this I understand!\")","msgtype":"m.text"},"ts":1478868308000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"MikeSmith: the reason the ES spec is super hard to read, imho, is because it defines things that are super hard to understand, does so very precisely, and does so in a style that is reminiscent of the language it describes","msgtype":"m.text"},"ts":1478868364000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"MikeSmith: It's like meta-programming. Once you get in the right mindset, it's actually pretty straightforward, until you do, it makes your head explode.","msgtype":"m.text"},"ts":1478868506000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: if that were to happen, it would be hard to continue","msgtype":"m.text"},"ts":1478875731000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yes. Poor metaphor. I agree.","msgtype":"m.text"},"ts":1478875843000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"But I think I agree","msgtype":"m.text"},"ts":1478875919000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Although I do think stuff like IDL can help a lot in understanding, if you're used to that kind of notation","msgtype":"m.text"},"ts":1478875943000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It neatly summarizes a whole bunch about an interface/class","msgtype":"m.text"},"ts":1478875955000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"FWIW I made the WebDriver spec use Result types rather than exceptions","msgtype":"m.text"},"ts":1478876074000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Although I did then add a \"try\" macro to it so…","msgtype":"m.text"},"ts":1478876088000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: do you know where the test for web animations  live?","msgtype":"m.text"},"ts":1478882522000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"in github","msgtype":"m.text"},"ts":1478882541000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"aha, https://github.com/w3c/web-platform-tests/blob/master/web-animations/interfaces/AnimationEffectTiming/endDelay.html","msgtype":"m.text"},"ts":1478882624000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"how do I in github UI go to the log of the file in its previous location ?","msgtype":"m.text"},"ts":1478882851000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"that particular file was moved","msgtype":"m.text"},"ts":1478882859000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"oh, perhaps blame works anyhow","msgtype":"m.text"},"ts":1478882887000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"tobie, annevk: You can absolutely have numbers larger than 2^53 in JS. Numbers go all the way up to 10^308.  You just, as Tobie says, lose precision - between 2^53 and 2^54, you can only represent even numbers, between 2^54 and 2^55, only  numbers divisible by 4, etc.","msgtype":"m.text"},"ts":1478889843000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: can you explain why the clamp / enforce range works on 2^53 then, but not the modulo?","msgtype":"m.text"},"ts":1478890009000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"s/works on/uses/","msgtype":"m.text"},"ts":1478890034000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Are the details of this in WebIDL for me to read?","msgtype":"m.text"},"ts":1478890034000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yes. Just a sec.","msgtype":"m.text"},"ts":1478890052000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: https://heycam.github.io/webidl/#es-long-long","msgtype":"m.text"},"ts":1478890120000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"In particular steps 2.3, 3.1 and 6.","msgtype":"m.text"},"ts":1478890168000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: ^","msgtype":"m.text"},"ts":1478890182000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: it feels like the semantics of clamp/enforce range are different here. And I don't understand the reasoning.","msgtype":"m.text"},"ts":1478890262000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Yeah, that's weird. I'm guessing it's because long long was intended to be the i64 type that Java and other langs expose, so the initial definition was written with that behavior, while [Clamp] and [EnforceRange] were added later and more explicitly coupled to JS'","msgtype":"m.text"},"ts":1478890357000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"s representation.","msgtype":"m.text"},"ts":1478890363000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: thanks. Filed https://github.com/heycam/webidl/issues/237","msgtype":"m.text"},"ts":1478893740000,"senderName":"tobie","senderId":"tobie@irc"}
]