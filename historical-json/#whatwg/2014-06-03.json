[
{"content":{"body":"dear microsoft: stop deliberately ignoring the vocabulary of the entirely software industry and using your own","msgtype":"m.text"},"ts":1401755459000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"re: calling localization \"globalization\"","msgtype":"m.text"},"ts":1401755466000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"g12n","msgtype":"m.text"},"ts":1401755556000,"senderName":"a-ja","senderId":"a-ja@irc"},
{"content":{"body":":|","msgtype":"m.text"},"ts":1401755580000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"erm...g11n","msgtype":"m.text"},"ts":1401755646000,"senderName":"a-ja","senderId":"a-ja@irc"},
{"content":{"body":"hey slightlyoff","msgtype":"m.text"},"ts":1401774408000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"slightlyoff, isSynchronous was mostly about exposing what the main thread was doing","msgtype":"m.text"},"ts":1401774426000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"slightlyoff: e.g. if you want to log synchronous XHR requests","msgtype":"m.text"},"ts":1401774437000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"slightlyoff: it's not mutable","msgtype":"m.text"},"ts":1401774448000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"slightlyoff: and I'm totally with you on asynchronous access to .body, .toBlob() seems a bit ugly though, I wonder if we can do better","msgtype":"m.text"},"ts":1401774490000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"slightlyoff: feel free to file tickets somewhere on me","msgtype":"m.text"},"ts":1401774570000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: allowsameorigindataurl is quite long. any reason allowdataurl doesn't work?","msgtype":"m.text"},"ts":1401776216000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: other than not being quite as clear, can't really think of anything","msgtype":"m.text"},"ts":1401776266000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i'm not convinced it's clear to people what \"same-origin data url\" means","msgtype":"m.text"},"ts":1401776346000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"allowsameorigindataurlandreadthespecifyoudontunderstandwhatitmeans","msgtype":"m.text"},"ts":1401778105000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"karlcow: you had to abbreviate specification?","msgtype":"m.text"},"ts":1401778174000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm good point, this leads to ambiguity. I need to fix that ;)","msgtype":"m.text"},"ts":1401778201000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"tobie: only Map.prototype.set seems to return this","msgtype":"m.text"},"ts":1401780712000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: in any event, seems like a separate issue from how to represent headers","msgtype":"m.text"},"ts":1401780723000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh, Safari has IndexedDB and SPDY now","msgtype":"m.text"},"ts":1401781206000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: slightlyoff: There's a ticket on the toBlob stuff https://github.com/slightlyoff/ServiceWorker/issues/251","msgtype":"m.text"},"ts":1401782830000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I still kinda like .to(type)","msgtype":"m.text"},"ts":1401782878000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: bodyAs(type) maybe?","msgtype":"m.text"},"ts":1401783972000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: seems so weird to not name the member","msgtype":"m.text"},"ts":1401783990000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: you back from the protests now?","msgtype":"m.text"},"ts":1401784100000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: would be great to nail down this API","msgtype":"m.text"},"ts":1401784108000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: headers and body are the main difficulties","msgtype":"m.text"},"ts":1401784125000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yep, back! Got to do a bit of video work at some point, but mostly free","msgtype":"m.text"},"ts":1401784478000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I'll have more time starting 2:30PM or so","msgtype":"m.text"},"ts":1401784495000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: which is 1:30PM your time","msgtype":"m.text"},"ts":1401784509000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Works for me. I'll catch up on all the stuff","msgtype":"m.text"},"ts":1401784517000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1401784521000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"for those who like validation, SteveF made a bookmarklet that lets you validate the serialized DOM for any given document","msgtype":"m.text"},"ts":1401791133000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"http://codepen.io/stevef/full/LasCJ/","msgtype":"m.text"},"ts":1401791137000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it uses http://validator.w3.org/nu/ but you could change it to use http://html5.validator.nu/ just by changing the URL in the source and everything else will just work the same","msgtype":"m.text"},"ts":1401791240000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1401791259000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hsivonen: http://validator.nu/ and http://html5.validator.nu/ both seem to be down still","msgtype":"m.text"},"ts":1401791276000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: brace for questions. Number 1: What does headers .getAll return?","msgtype":"m.text"},"ts":1401799708000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: I'm guessing [['key', 'val'], ['key', 'val'], ...]?","msgtype":"m.text"},"ts":1401799732000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: Whatever it is, having it as a constructor would be nice","msgtype":"m.text"},"ts":1401799795000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: Agree with others re lowercase in enums","msgtype":"m.text"},"ts":1401800537000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: \"CORS-with-forced-preflight\" to \"cors-force-preflight\"","msgtype":"m.text"},"ts":1401800637000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"in the platform's great tradition we could make it CORS-with-Forced-PreFlight","msgtype":"m.text"},"ts":1401800718000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"annevk: which requests have mode \"tainted cross-origin\"?","msgtype":"m.text"},"ts":1401800876000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"darobin: \"API security: strong\"","msgtype":"m.text"},"ts":1401800971000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: <img>, <video>, <link rel=stylesheet>... <track> (and maybe webfonts?) use \"fail cross-origin\" or what it's called","msgtype":"m.text"},"ts":1401801223000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"JakeA: I think .getAll should return ['val', 'val', 'val', ...] most likely","msgtype":"m.text"},"ts":1401801289000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(since it takes a key)","msgtype":"m.text"},"ts":1401801304000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: ah yes, I missed the arg","msgtype":"m.text"},"ts":1401801348000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"zcorpan: gotcha. Huh, so even with CORS headers, I won't be able able to get at the structure of an other-origin stylesheet? *learning*","msgtype":"m.text"},"ts":1401801658000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: no, tainting is when you have an other-origin stylesheet without CORS headers","msgtype":"m.text"},"ts":1401801708000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"JakeA: the style sheet is applied but you can't access the CSSOM","msgtype":"m.text"},"ts":1401801747000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: But with CORS headers you can?","msgtype":"m.text"},"ts":1401801767000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yeah. at least that's the intent in the spec, but the spec might be a bit broken there and i don't know what the impl status is now","msgtype":"m.text"},"ts":1401801810000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: In that case, what's the difference between a \"cors\" fetch and a \"tainted cross-origin\" fetch?","msgtype":"m.text"},"ts":1401801821000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: see step 6 in http://fetch.spec.whatwg.org/#concept-fetch","msgtype":"m.text"},"ts":1401802032000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: So, assuming a stylesheet is \"tainted cross-origin\" and on a different origin, wouldn't that make it always tainted?","msgtype":"m.text"},"ts":1401802124000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: it's possible that i'm out of sync with annevk's terminology","msgtype":"m.text"},"ts":1401802128000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"More likely that my mental model is broken, there'll be an aha moment soon","msgtype":"m.text"},"ts":1401802149000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: not if \"url's origin is request's origin and the CORS flag is unset\"","msgtype":"m.text"},"ts":1401802205000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"which is the same-origin case","msgtype":"m.text"},"ts":1401802279000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: but cross-origin?","msgtype":"m.text"},"ts":1401802324000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: getAll takes a header name and returns its values","msgtype":"m.text"},"ts":1401802326000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, Domenic pointed out I'd missed the arg when I read it","msgtype":"m.text"},"ts":1401802354000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: <img> has tainted cross-origin unless you set the crossorigin attribute","msgtype":"m.text"},"ts":1401802355000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"seems other people answered questions","msgtype":"m.text"},"ts":1401802366000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Currently trying to work out how the tainting happen on stylesheets","msgtype":"m.text"},"ts":1401802393000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: possibly it would still be tainted unless you used the crossorigin attribute","msgtype":"m.text"},"ts":1401802501000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: Aha! That's it, didn't realise crossorigin was supported on <link> too","msgtype":"m.text"},"ts":1401802553000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: enjoy","msgtype":"m.text"},"ts":1401802568000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: yep. crossorigin is a planned addition to url() in css also so you can use CORS with e.g. @import","msgtype":"m.text"},"ts":1401802661000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hixie: Is it a known difference between Firefox and Chrome that the former will wait on a script that's not resolving before rendering the page while the latter won't?","msgtype":"m.text"},"ts":1401802773000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"annevk: I guess there's a reason we can't have \"give me a non-opaque version of this if it uses simple headers & method and returns Access-Control-Allow-Origin: *, otherwise give me an opaque response\"?","msgtype":"m.text"},"ts":1401802785000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"zcorpan: gotcha","msgtype":"m.text"},"ts":1401802797000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Hixie: script and/or stylesheet and/or images","msgtype":"m.text"},"ts":1401802805000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"JakeA: i think it wasn't compatible to always send an Origin request header, but maybe we can still do something like that","msgtype":"m.text"},"ts":1401802900000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"JakeA: that would be a new type of fetch","msgtype":"m.text"},"ts":1401802999000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: which we could do, but would explain nothing about the platform whatsoever","msgtype":"m.text"},"ts":1401803011000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'm sure there's a reason it wasn't the default for images and stylesheets, was it something to do with Host as zcorpan suggests?","msgtype":"m.text"},"ts":1401803054000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: Origin, yes, we could not use it for each fetch","msgtype":"m.text"},"ts":1401803085000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: What did it break? (sorry just curious)","msgtype":"m.text"},"ts":1401803119000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: ask abarth","msgtype":"m.text"},"ts":1401803126000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: and if you find out, let me know, so I can update the comment in the source of Fetch","msgtype":"m.text"},"ts":1401803139000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hah","msgtype":"m.text"},"ts":1401803147000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"zcorpan: is someone finally solving the issues from that public-fx thread?","msgtype":"m.text"},"ts":1401803183000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: though maybe not, CORS style sheets did not come up, what's the benefit of that?","msgtype":"m.text"},"ts":1401803205000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: http://krijnhoetmer.nl/irc-logs/css/20140521#l-1296","msgtype":"m.text"},"ts":1401803439000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: CSSOM would've been shorter :p","msgtype":"m.text"},"ts":1401803637000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: or do you like to taunt my poor memory?","msgtype":"m.text"},"ts":1401803671000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: sorry :-)","msgtype":"m.text"},"ts":1401803691000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"JakeA: static method is brilliant","msgtype":"m.text"},"ts":1401803739000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I figured fetch(url) would resolve to an Opaque response for a response that failed a CORS check and didn't need a preflight. Understand why it doesn't do that. Not sure it's an issue yet","msgtype":"m.text"},"ts":1401803909000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"hah, muscle-memory capitalised Opaque","msgtype":"m.text"},"ts":1401803937000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"aah","msgtype":"m.text"},"ts":1401804044000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: So, now I understand it better, \"tainted cross-origin\" could be \"no-cors\"?","msgtype":"m.text"},"ts":1401804168000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: you think it's clear to developers that it the response will be tainted in that case? I guess...","msgtype":"m.text"},"ts":1401804208000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Well, it won't be tainted if its same-origin, right?","msgtype":"m.text"},"ts":1401804226000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: fair","msgtype":"m.text"},"ts":1401804238000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: same-origin is a mode too ;-)","msgtype":"m.text"},"ts":1401804245000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I was going to suggest \"same-origin-only\" but adding chars feels like a step backwards","msgtype":"m.text"},"ts":1401804278000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I like no-cors","msgtype":"m.text"},"ts":1401804391000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: omitCredentialsMode - XHR uses withCredentials, why invert it for fetch?","msgtype":"m.text"},"ts":1401804428000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: we could not offer same-origin...","msgtype":"m.text"},"ts":1401804434000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: it's mostly there for a couple of APIs that want it","msgtype":"m.text"},"ts":1401804446000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"also see http://www.whatwg.org/specs/web-apps/current-work/multipage/fetching-resources.html#attr-crossorigin-none","msgtype":"m.text"},"ts":1401804459000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"which apis use \"same-origin\"?","msgtype":"m.text"},"ts":1401804515000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: any serviceworker-visible requests? I can only think of serviceworker requests that are same-origin","msgtype":"m.text"},"ts":1401804516000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"zcorpan: document.load()","msgtype":"m.text"},"ts":1401804535000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: <track> when there's no crossorigin attribute I thought","msgtype":"m.text"},"ts":1401804549000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok right yeah","msgtype":"m.text"},"ts":1401804584000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: i hope we can drop document.load() though","msgtype":"m.text"},"ts":1401804592000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: same","msgtype":"m.text"},"ts":1401804596000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'll rename tainted cross-origin","msgtype":"m.text"},"ts":1401804611000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm glad people finally care about Fetch, only took me a year","msgtype":"m.text"},"ts":1401804621000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: Requests for serviceworkers themselves, although I don't know if we'll use same-origin, I think we'll fail on *all* redirects","msgtype":"m.text"},"ts":1401804682000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: It's brilliant","msgtype":"m.text"},"ts":1401804688000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: so we could invert omit credentials","msgtype":"m.text"},"ts":1401804704000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: why fail on all redirects?","msgtype":"m.text"},"ts":1401804724000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"credentials is a bit icky, I forgot the exact rationale","msgtype":"m.text"},"ts":1401804727000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: tbh, I can't remember, maybe same origin redirect is fine","msgtype":"m.text"},"ts":1401804758000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: euhm, please copy me on the ticket where service worker fetching is defined","msgtype":"m.text"},"ts":1401804761000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'd really like us not to have another API that does not follow redirects","msgtype":"m.text"},"ts":1401804790000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, I think same origin is fine. So yeah, it would be a same-origin request","msgtype":"m.text"},"ts":1401804826000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: I guess appcache manifest is too, as are a lot of requests that are under appcache control","msgtype":"m.text"},"ts":1401804864000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: There isn't a ticket for SW fetch, I should update the algos now I understand fetch betterer","msgtype":"m.text"},"ts":1401804893000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: http://fetch.spec.whatwg.org/#http-fetch step 9 has a SW placeholder now","msgtype":"m.text"},"ts":1401805247000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: ^^","msgtype":"m.text"},"ts":1401805250000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I worked out a better .default() handling with jungkees so everything is a lot less magic","msgtype":"m.text"},"ts":1401805281000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ohh, did that happen here or in a ticket?","msgtype":"m.text"},"ts":1401805315000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: both and also as comments on diffs","msgtype":"m.text"},"ts":1401805346000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: somewhat messy","msgtype":"m.text"},"ts":1401805350000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'll wait for the spec :D","msgtype":"m.text"},"ts":1401805367000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: the spec is basically that SW invokes Fetch with request and a special flag set on the request object noting it comes from the SW (since .client still points to the actual origin)","msgtype":"m.text"},"ts":1401805408000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: sounds better","msgtype":"m.text"},"ts":1401805510000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: So, the credentials stuff… <img> is always credentials, <img crossorigin> is never with credentials, XHR withCredentials = true is \"cors\"?","msgtype":"m.text"},"ts":1401805598000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: it's unclear how the crossorigin vs crossorigin=use-credentials is actually implemented","msgtype":"m.text"},"ts":1401805704000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: it might be that nothing in the platform has the \"never\" semantics","msgtype":"m.text"},"ts":1401805718000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(except in the case where you're always cross-origin due to sandboxing, but that's no different from \"cors\" in that case)","msgtype":"m.text"},"ts":1401805755000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Is new Request({ mode: \"cors\", withCredentials: \"always\" }) an invalid combination?","msgtype":"m.text"},"ts":1401805810000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: sorry","msgtype":"m.text"},"ts":1401805923000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: XHR withCredentials = false is \"cors\"","msgtype":"m.text"},"ts":1401805934000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: it means there's actually credentials for same-origin fetches, but not for cross-origin","msgtype":"m.text"},"ts":1401805959000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ohhh, would withCredentials: \"same-origin\" make more sense?","msgtype":"m.text"},"ts":1401806126000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"it's a bit late to change that","msgtype":"m.text"},"ts":1401806141000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: Is it?","msgtype":"m.text"},"ts":1401806164000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"well, maybe not","msgtype":"m.text"},"ts":1401806197000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: We're talking about Request here, not XHR","msgtype":"m.text"},"ts":1401806217000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: btw, bodyAs(type) works for me","msgtype":"m.text"},"ts":1401806363000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: cleaned up service worker integration a bit more","msgtype":"m.text"},"ts":1401806471000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I agree with Domenic that allowing headers to be provided as a simple JS object would be nice in Request/Response constructors","msgtype":"m.text"},"ts":1401806475000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: with headers I'm awaiting some feedback, ideally from implementers, on how we want to deal with them","msgtype":"m.text"},"ts":1401806505000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: currently the spec follows HTTP, but browsers and the web don't always, and it's unclear to me what we want","msgtype":"m.text"},"ts":1401806539000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I like withCredentials: \"same-origin\"","msgtype":"m.text"},"ts":1401806557000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: flipping the credentials flag in meaning again is going to annoy some people, but hopefully it's for the best","msgtype":"m.text"},"ts":1401806582000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: spec is looking great. It seems like a crime not to throw Cache into the window as soon as possible, especially if we're going to have Request/Response/fetch","msgtype":"m.text"},"ts":1401806602000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: Where else is it \"omit\"? I've only seen it on XHR","msgtype":"m.text"},"ts":1401806624000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: HTML has limited use of Fetch at the moment","msgtype":"m.text"},"ts":1401806653000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but converting HTML is going to be a pain already :-(","msgtype":"m.text"},"ts":1401806667000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: For the body constructor arg, I'm still keen on https://github.com/slightlyoff/ServiceWorker/issues/192#issuecomment-40737493, which means handling body before headers in the construction steps","msgtype":"m.text"},"ts":1401806770000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: I guess FormData should be supported too, although only really useful for request body","msgtype":"m.text"},"ts":1401806842000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: Also, what do you think to constructed responses having a text/plain content type by default? Would that avoid the browser triggering downloads if the developer forgets to set it to something better?","msgtype":"m.text"},"ts":1401806951000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: are we exposing a way to mutate a body?","msgtype":"m.text"},"ts":1401807017000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: setting a Content-Type header based on the body makes sense, we should do that","msgtype":"m.text"},"ts":1401807054000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: if we call it withCredentials in the API, you don't mind it not having the same type as XHR?","msgtype":"m.text"},"ts":1401807154000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: maybe we should call it includeCredentials?","msgtype":"m.text"},"ts":1401807165000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I wondered about the type issue. useCredentials?","msgtype":"m.text"},"ts":1401807271000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: stuck on mutating body. I guess it's as useful as mutating headers as they go through the fetch event, but then having it convert type would be weird","msgtype":"m.text"},"ts":1401807424000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: request.body = interestingTransformStream(request.body) could be exciting","msgtype":"m.text"},"ts":1401807499000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: I guess we don't have to decide until streams are ready","msgtype":"m.text"},"ts":1401807523000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: Does fetch(new URL(url, base)) do the right thing (toString it)?","msgtype":"m.text"},"ts":1401807650000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(sorry, just going through my notes now)","msgtype":"m.text"},"ts":1401807659000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yes it should","msgtype":"m.text"},"ts":1401807729000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: useCredentials = \"same-origin\" / \"never\" / \"always\" works I guess","msgtype":"m.text"},"ts":1401807788000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: all I could think of was setBody or some such","msgtype":"m.text"},"ts":1401807885000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I guess we can wait for streams","msgtype":"m.text"},"ts":1401807890000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: or throw on set if it's not a stream. Leave the flexibility to the constructor","msgtype":"m.text"},"ts":1401807921000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"well we don't have streams so that'd be pretty useless","msgtype":"m.text"},"ts":1401807950000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'm still umming between fetch(url) vs new Request(url).send(), although the former is much shorter","msgtype":"m.text"},"ts":1401807955000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"the latter might be more web-compatible","msgtype":"m.text"},"ts":1401808042000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I like the former as it matches the English prose :-)","msgtype":"m.text"},"ts":1401808071000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the \"people don't understand that you can set stuff synchronously before async stuff starts\" problem?","msgtype":"m.text"},"ts":1401808080000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(\"web-author-compatible\" heh)","msgtype":"m.text"},"ts":1401808088000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: why does fetch() reject with TypeError rather than NetworkError?","msgtype":"m.text"},"ts":1401808268000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I tried to keep it ES-compatible","msgtype":"m.text"},"ts":1401808284000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: not sure if that's a goal","msgtype":"m.text"},"ts":1401808289000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Feels weird, but don't know how important ES-compatibilitiy is","msgtype":"m.text"},"ts":1401808353000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: note that NetworkError is really DOMException whose name is \"NetworkError\"","msgtype":"m.text"},"ts":1401808381000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ahhh, I hadn't realised that","msgtype":"m.text"},"ts":1401808400000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: and that DOMException is a somewhat frowned upon object by TC39 but they also not have given us something superior so far","msgtype":"m.text"},"ts":1401808404000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JS is somewhat frowned on by CSSWG, but they haven't given us anything superior so far","msgtype":"m.text"},"ts":1401808458000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: If I get back an \"opaque\" response, how can I tell it's opaque? Wondering if .type could be \"opaque\" rather than \"error\"","msgtype":"m.text"},"ts":1401808513000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: basically, the idea is that the filters take effect","msgtype":"m.text"},"ts":1401808547000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I guess we could expose what filter is being used","msgtype":"m.text"},"ts":1401808561000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: http://fetch.spec.whatwg.org/#concept-filtered-response","msgtype":"m.text"},"ts":1401808580000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Could type be overloaded for this? \"default\" \"cors\" \"opaque\" \"error\"?","msgtype":"m.text"},"ts":1401808672000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yeah maybe, is there a use?","msgtype":"m.text"},"ts":1401808741000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Only to stop opaque responses looking like errors","msgtype":"m.text"},"ts":1401808791000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: myResponse.type == 'error' when in fact it's a perfectly usable response","msgtype":"m.text"},"ts":1401808809000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yeah, I guess we sorta expose that difference elsewhere already","msgtype":"m.text"},"ts":1401808831000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is still working on checking whether renaming omit credentials mode can be done","msgtype":"m.emote"},"ts":1401808883000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: No rush, just braindumping before my evening turns into meeting","msgtype":"m.text"},"ts":1401808915000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"s","msgtype":"m.text"},"ts":1401808916000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: Thinking about myCache.add('//cdn.whatever/stuff.js') - that would fail without CORS headers. This is a case where returning opaque if CORS fails would be useful. I'll try and chase down the history of the Origin: stuff","msgtype":"m.text"},"ts":1401808982000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: why can't you store an opaque in that case?","msgtype":"m.text"},"ts":1401809057000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: that's what <script> does too","msgtype":"m.text"},"ts":1401809063000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Right, but cache.add uses fetch(), and the default is cors","msgtype":"m.text"},"ts":1401809097000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: I'd have to myCache.add(new Request('//cdn.whatever/stuff.js', {mode: 'no-cors'}))","msgtype":"m.text"},"ts":1401809131000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: how about .credentials = \"omit\" / \"same-origin\" / \"include\"","msgtype":"m.text"},"ts":1401809148000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: hmm yeah dunno what to do there","msgtype":"m.text"},"ts":1401809175000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: might have a better idea when I dig out the Origin: stuff","msgtype":"m.text"},"ts":1401809194000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: .credentials etc sgtm","msgtype":"m.text"},"ts":1401809216000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I think the only thing that's still lacking is the response.type thingie","msgtype":"m.text"},"ts":1401813153000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I added some sketches around bodyAs()","msgtype":"m.text"},"ts":1401813170000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"GPHemsley: test case?","msgtype":"m.text"},"ts":1401813559000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: What do you think about \"cors-force-preflight\" vs \"cors-with-forced-preflight\"","msgtype":"m.text"},"ts":1401813590000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I'd like to get rid of that entirely somehow","msgtype":"m.text"},"ts":1401813604000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: What uses it?","msgtype":"m.text"},"ts":1401813621000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: the mode makes sense for XHR to request, but makes no sense for authors to request","msgtype":"m.text"},"ts":1401813624000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: Try this: http://128.175.170.176/site/","msgtype":"m.text"},"ts":1401813650000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"JakeA: it's a way from XHR to say that there's upload event listeners attached and that therefore a preflight needs to be made","msgtype":"m.text"},"ts":1401813652000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: validator.nu is down","msgtype":"m.text"},"ts":1401813676000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"GPHemsley: hangs for me in chrome...","msgtype":"m.text"},"ts":1401813695000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hi Hixie. Did you get my messages?","msgtype":"m.text"},"ts":1401813766000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"IZh: which?","msgtype":"m.text"},"ts":1401813778000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: About imagemap's area.","msgtype":"m.text"},"ts":1401813808000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"annevk: hm didn't realise that needed extra permissions. Will we hit that issue with fetch()? If you provide your own stream you'll see it being consumed.","msgtype":"m.text"},"ts":1401813810000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Hixie: It was on 31st of May.","msgtype":"m.text"},"ts":1401813909000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"IZh: on irc, e-mail, bug?","msgtype":"m.text"},"ts":1401813949000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: IRC.","msgtype":"m.text"},"ts":1401813960000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"IZh: don't think so","msgtype":"m.text"},"ts":1401813986000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"IZh: best place to report minor bugs is using the form on the spec","msgtype":"m.text"},"ts":1401814000000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Okay.","msgtype":"m.text"},"ts":1401814014000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"Hixie: Should I repeat it in the form?","msgtype":"m.text"},"ts":1401814152000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"yes please","msgtype":"m.text"},"ts":1401814180000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"JakeA: yeah we might have to require it for streams","msgtype":"m.text"},"ts":1401814230000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Is upload progress that much of a security leak? I can't figure out the issue","msgtype":"m.text"},"ts":1401814257000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: https://www.w3.org/Bugs/Public/show_bug.cgi?id=20322 has some background on this","msgtype":"m.text"},"ts":1401814313000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I gotta go, continue this tomorrow maybe?","msgtype":"m.text"},"ts":1401814330000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: Oh, really? *shrug*","msgtype":"m.text"},"ts":1401814374000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"Hixie: Done. #25964.","msgtype":"m.text"},"ts":1401814394000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"annevk: certainly! Have a good evening","msgtype":"m.text"},"ts":1401814412000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: you too, this was great","msgtype":"m.text"},"ts":1401814431000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I've learned a lot","msgtype":"m.text"},"ts":1401814448000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Hixie: What you think about adding support for floating-point coordinates for image maps shapes? These coords would be in the interval of 0.0 to 1.0, and this will work for any resolution of image and any zoom level.","msgtype":"m.text"},"ts":1401814478000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"IZh: image maps are a dead-end technology","msgtype":"m.text"},"ts":1401814813000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but they gave us marvels of the world wide web, like the spacejam website","msgtype":"m.text"},"ts":1401815056000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"at least, I could have sworn it used to be an imagemap... looks like a table now. either way :>","msgtype":"m.text"},"ts":1401815114000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Hixie: What's the purpose of allowing circles with zero radius that will be considered empty and eleminated at the later steps of parsing?","msgtype":"m.text"},"ts":1401815506000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"IZh: no idea","msgtype":"m.text"},"ts":1401815600000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: By the way, zero-sized rectangles are not allowed. But for circle's radius the spec says \"must be non-negative\".","msgtype":"m.text"},"ts":1401815717000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"IZh: i have long forgotten anything i ever knew about image maps","msgtype":"m.text"},"ts":1401815746000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"IZh: like i said, it's a dead-end technology","msgtype":"m.text"},"ts":1401815752000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hmm. validator.nu doesn't come back when relaunching...","msgtype":"m.text"},"ts":1401820812000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"MikeSmith, Hixie: ack validator.nu brokenness. this is weird and will need more investigation tomorrow. :-(","msgtype":"m.text"},"ts":1401823249000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"there's no use case for aggressively downloading something but then not using it until the last possible moment, right?","msgtype":"m.text"},"ts":1401837972000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"like a script that would only be run immediately before any scripts depending on it are run","msgtype":"m.text"},"ts":1401838000000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but that is nonetheless downloaded asap","msgtype":"m.text"},"ts":1401838011000,"senderName":"Hixie","senderId":"Hixie@irc"}
]