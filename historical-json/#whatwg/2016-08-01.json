[
{"content":{"body":"zewt: used fetch","msgtype":"m.text"},"ts":1470016787000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"tobie++ indeed","msgtype":"m.text"},"ts":1470016846000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"brave man","msgtype":"m.text"},"ts":1470016859000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"mike: shouldn't need to rewrite with a different api for that, no reason it should work with one and not the other","msgtype":"m.text"},"ts":1470022865000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(sounds like that's just encouraging people to not use https, if they have to rewrite code with a different api to make it work)","msgtype":"m.text"},"ts":1470022913000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: I meant this is maybe a case where thereâ€™s no plan to change/update XHR for this or any other new cases","msgtype":"m.text"},"ts":1470023941000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"cannot just keep going in and updating legacy funky API","msgtype":"m.text"},"ts":1470023980000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"doesn't seem funky to add an \"allow mixed\" flag to XHR, the fewer barriers discouraging HTTPS the better","msgtype":"m.text"},"ts":1470024374000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(i still use XHR, it works fine for me so I've never felt like spending time learning a new API, especially one that isn't universal yet)","msgtype":"m.text"},"ts":1470024452000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: well for better or worse I think the plan of record is that at this point there are no plans to ever update XHR with anything new","msgtype":"m.text"},"ts":1470024959000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"And there are fetch() polyfills.","msgtype":"m.text"},"ts":1470024968000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Domenic: why is Firefox's rendering a bad thing? The author created invalid markup","msgtype":"m.text"},"ts":1470025585000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"boogyman: people create invalid markup all the time... you still gotta render something reasonable.","msgtype":"m.text"},"ts":1470025611000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and you consider negative numbers unreasonable?","msgtype":"m.text"},"ts":1470025641000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"Yeah definitely","msgtype":"m.text"},"ts":1470025655000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess we disagree","msgtype":"m.text"},"ts":1470025675000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"I mean this needs to be interoperable at the very least.","msgtype":"m.text"},"ts":1470025693000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://github.com/whatwg/html/issues/1617","msgtype":"m.text"},"ts":1470025707000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Why is it a bad thing that the UA could be put into quirksmode with invalid syntax like this?","msgtype":"m.text"},"ts":1470025987000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"I don't think this has anything to do with quirks mode...","msgtype":"m.text"},"ts":1470026024000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"UAs need to be interoperable not just when authors are well-behaved, but also when they aren't.","msgtype":"m.text"},"ts":1470026052000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Authors writing invalid markup is not a license for no longer following specs. (Although in this case the spec is missing details.)","msgtype":"m.text"},"ts":1470026092000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the alternative is to try and create notations for every found use-case?","msgtype":"m.text"},"ts":1470026126000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"is the*","msgtype":"m.text"},"ts":1470026132000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"Yes, that's what specs do","msgtype":"m.text"},"ts":1470026139000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That was the whole HTML4 -> HTML5 revolution","msgtype":"m.text"},"ts":1470026148000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That's why we have a HTML parser spec instead of DTDs","msgtype":"m.text"},"ts":1470026166000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"fair enough","msgtype":"m.text"},"ts":1470026204000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"annevk, happy birthday","msgtype":"m.text"},"ts":1470039002000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Happy birthday, annevk! (And happy national holiday in your country of adoption:)","msgtype":"m.text"},"ts":1470039725000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Cheers ðŸ˜Š","msgtype":"m.text"},"ts":1470039755000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh, so that's why you moved there? :)","msgtype":"m.text"},"ts":1470039792000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"smaug____: I've added metrics to measure EventSource usage in Document and Workers in Chromium","msgtype":"m.text"},"ts":1470044331000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"smaug____: it should appear in https://www.chromestatus.com/metrics/feature/popularity as EventSourceDocument and EventSourceWorker but at the moment, the data is only collected on Dev/Canary and will soon be on Beta, give it some time to really have useful data","msgtype":"m.text"},"ts":1470044360000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1470044406000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"annevk: is `new URLSearchParams('foo=%EF%BF%BF').get('foo')` supposed to perform UTF-8-style URL-decoding? i.e. should it return '\\xEF\\xBF\\xBF' (Chromium) or '\\uFFFF' (Firefox)?","msgtype":"m.text"},"ts":1470047619000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: suspect Fx is correct","msgtype":"m.text"},"ts":1470061334000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: was hoping that was the case, as itâ€™s the more useful behavior (by far)","msgtype":"m.text"},"ts":1470061363000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"but","msgtype":"m.text"},"ts":1470061389000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"https://bugs.chromium.org/p/chromium/issues/detail?id=633153#c4","msgtype":"m.text"},"ts":1470061389000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Will look later this week","msgtype":"m.text"},"ts":1470061450000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: hope you have a good holiday too btw ðŸ˜Š","msgtype":"m.text"},"ts":1470068620000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: :)","msgtype":"m.text"},"ts":1470070981000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: That does work, but the [] aren't part of the definition. Remove those (or shift them outside {{}} braces) and it should link up.","msgtype":"m.text"},"ts":1470077467000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: So {{TreatNullAs}} yields: <code class=\"idl\"><a data-link-type=\"idl\">TreatNullAs</a></code>","msgtype":"m.text"},"ts":1470082072000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"<a extended-attribute>TreatNullAs</a> yields: <a class=\"idl-code\" data-link-type=\"extended-attribute\">[TreatNullAs]</a>","msgtype":"m.text"},"ts":1470082072000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: OK, I think this ties to the GH issue I opened.","msgtype":"m.text"},"ts":1470082144000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: Yes, those are compatible - \"idl\" is a supertype representing all the IDL types, of which \"extended-attribute\" is one.","msgtype":"m.text"},"ts":1470082177000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Aren't we loosing info that could be useful for styling or when parsing the spec to fill-in the shepherd DB?","msgtype":"m.text"},"ts":1470082229000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins; In https://wicg.github.io/entries-api/ I end up with refs to [File-1] (autogenerated from normative refs) and [FileAPI] (from explicit informative refs), pointing at the same doc. Is that a bikeshed thing or a specref thing?","msgtype":"m.text"},"ts":1470082487000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: That's me giving FileAPI a weird shortname; I just updated it to be \"fileapi\" instead, so I think it'll match up now.","msgtype":"m.text"},"ts":1470082588000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If it still does [Fileapi-1] vs [FileAPI], file on me.","msgtype":"m.text"},"ts":1470082605000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"testing...","msgtype":"m.text"},"ts":1470082633000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"tobie: Nobody's losing anything, they're specifying what they need. If they want to be more specific (because they're styling based on class or something), they can do so, but the shorthand purposely covers a large group of things for convenience.","msgtype":"m.text"},"ts":1470082654000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jsbell: You'll have to `bikeshed update`","msgtype":"m.text"},"ts":1470082671000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: yep. Hrm, now getting No 'idl' refs found for 'File'...","msgtype":"m.text"},"ts":1470082741000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Might be rebuilding right now, or maybe you have some manual declarations that \"File\" comes from the \"file\" spec?","msgtype":"m.text"},"ts":1470082993000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: No manual declarations for those. I'll try again in a bit. (FYI, 4 errors total. idl/interface/idl-name for File, idl for FileReader)","msgtype":"m.text"},"ts":1470083058000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"TabAtkins: would you have any idea why the following https://github.com/tobie/webidl/blob/bikeshed/index.bs errors with:","msgtype":"m.text"},"ts":1470085737000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"FATAL ERROR: Multiple local 'interface' <dfn>s have the same linking text 'DOMString'.","msgtype":"m.text"},"ts":1470085737000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: I can search and replace all of the instances of \"DOMString\" with garbage and keep only this one: <h4 oldids=\"dom-DOMString\" id=\"idl-DOMString\" interface=\"\">DOMString</h4> while still triggering the issue.","msgtype":"m.text"},"ts":1470086240000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: reduced test case here: https://gist.github.com/tobie/3ff6f07158403cde5d154156e2e535d2","msgtype":"m.text"},"ts":1470086489000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: Ah, sorry, that's because of my terrible hacks to let people link to some of the webidl things.  Manually specified anchor blocks count as \"local\" definitions, and DOMString is in Bikeshed's default anchor file.","msgtype":"m.text"},"ts":1470095923000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So you're colliding with the built-in \"DOMString\" definition. :/","msgtype":"m.text"},"ts":1470095935000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'll remove that as soon as WebIDL can legitimately provide a dfn for the term; for now just suffer thru it.","msgtype":"m.text"},"ts":1470095963000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]