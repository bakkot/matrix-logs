[
{"content":{"body":"smaug____: Thank you for the test case:  http://mozilla.pettay.fi/shadow_focus.html","msgtype":"m.text"},"ts":1519796094000,"senderName":"hayato","senderId":"hayato@irc"},
{"content":{"body":"smaug____: I've confirmed. At least, it is an unexpected behavior to me. I guess it's Blink's bug.","msgtype":"m.text"},"ts":1519796136000,"senderName":"hayato","senderId":"hayato@irc"},
{"content":{"body":"I happens also in open shadow root.","msgtype":"m.text"},"ts":1519796157000,"senderName":"hayato","senderId":"hayato@irc"},
{"content":{"body":"Let me file a bug for Blink.","msgtype":"m.text"},"ts":1519796165000,"senderName":"hayato","senderId":"hayato@irc"},
{"content":{"body":"JakeA: minor nit: you probably want to say origin of the last URL","msgtype":"m.text"},"ts":1519808299000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: it's an interesting addition to the same-origin policy this","msgtype":"m.text"},"ts":1519808341000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: and I guess it wasn't quite thought out back when we added media elements and partial requests","msgtype":"m.text"},"ts":1519808361000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'm worried about origin A redirecting to different resources on origin B","msgtype":"m.text"},"ts":1519808437000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: Another thing we'll have to decide is where the next partial request goes. Does it go back to the original url, or the final url in the previous response","msgtype":"m.text"},"ts":1519808472000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I think Firefox & Chrome do different things here","msgtype":"m.text"},"ts":1519808479000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: oh right, same URL might be correct given it's partial requests, sorry","msgtype":"m.text"},"ts":1519808524000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://github.com/whatwg/fetch/issues/145 \"denied responses to range requests if their origin is distinct from the origin response for the initial request\" - so it sounds like Chrome does what you suggest","msgtype":"m.text"},"ts":1519808584000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: but I don't think Chrome goes back to the src for the next part.","msgtype":"m.text"},"ts":1519808619000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I vaguely recall mkwst saying that","msgtype":"m.text"},"ts":1519808783000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: that's probably reasonable","msgtype":"m.text"},"ts":1519808792000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: but may become unreasonable with a service worker in the middle","msgtype":"m.text"},"ts":1519808812000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I'll make a note in the issue","msgtype":"m.text"},"ts":1519808827000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: can the service worker make them distinct?","msgtype":"m.text"},"ts":1519808855000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I thought the response URL would win, or maybe not with synthetic?","msgtype":"m.text"},"ts":1519808878000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: The service worker could respond with resource A from origin B, then on the next range request respond with resource B from origin B.","msgtype":"m.text"},"ts":1519808924000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: This isn't possible in Chrome today, as it goes straight to origin B to request the second part, so origin B gets to decide where the next part is appended from","msgtype":"m.text"},"ts":1519808970000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: but with a service worker, origin A gets a say each time","msgtype":"m.text"},"ts":1519808981000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(it would be difficult to respond using a particular range from origin B, since I can't create the range headers myself, but I might be able to convince a media element to do it, then keep a clone of the response around in the service worker to reuse later)","msgtype":"m.text"},"ts":1519809196000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: but the media element could reject resource B for not being the same URL, no?","msgtype":"m.text"},"ts":1519809724000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: or the Fetch \"range request\" algorithm, which seems like a better place to enforce such security restrictions","msgtype":"m.text"},"ts":1519809756000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: but it wouldn't reject if it was just checking the origin of the last url","msgtype":"m.text"},"ts":1519809818000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I was already convinced that same URL would be more reasonable","msgtype":"m.text"},"ts":1519809870000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah sorry","msgtype":"m.text"},"ts":1519809876000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: or does Chrome currently allow that URL to redirect elsewhere within the same origin?","msgtype":"m.text"},"ts":1519809882000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: or is that a request with redirect mode set to \"error\"? (that'd make more sense to me)","msgtype":"m.text"},"ts":1519809921000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'll test that. But that seems ok if it goes straight to origin B. Origin B can redirect to anywhere else on origin B. But if Chrome does do that, I don't know if it's behaviour we need to preserve.","msgtype":"m.text"},"ts":1519809967000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: I think this stuff needs to sit with the media element. Only it has the concept of a single piece of media. The fetch spec doesn't have the state of previous requests.","msgtype":"m.text"},"ts":1519809991000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I think we should have a helper in Fetch, perhaps at a higher-level than the fetch call","msgtype":"m.text"},"ts":1519810057000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: there's been talk about using range requests for images to figure out width/height early on","msgtype":"m.text"},"ts":1519810080000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: we might get other contexts that want to do range requests","msgtype":"m.text"},"ts":1519810092000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: seems problematic if they don't reuse the security infrastructure","msgtype":"m.text"},"ts":1519810108000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: agreed. I've already made the privileged headers flag not-exported, so you have to go through the range request helper. I'll add more stuff to that like url history.","msgtype":"m.text"},"ts":1519810206000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"MikeSmith: what IRC channel should we use for webcomponents F2F?  irc.w3.org#webplat ?","msgtype":"m.text"},"ts":1519813361000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"kochi: yeah that should work","msgtype":"m.text"},"ts":1519813464000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: you seem not on the channel...","msgtype":"m.text"},"ts":1519813515000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"yeah, I didn’t know that channel actually existed :)","msgtype":"m.text"},"ts":1519813543000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I have never been on it as far as I can remember","msgtype":"m.text"},"ts":1519813555000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: #webapps is superceded by #webplat IIUC, but much fewer participants there","msgtype":"m.text"},"ts":1519813563000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1519813571000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"We used the channel at TPAC last year.","msgtype":"m.text"},"ts":1519813584000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"maybe #webapps is the better choice, then?","msgtype":"m.text"},"ts":1519813584000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ah OK","msgtype":"m.text"},"ts":1519813589000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah I didn’t attend any of the TPAC meetings of that group","msgtype":"m.text"},"ts":1519813615000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"thinks it's weird to chat about the topic in #whatwg channel...","msgtype":"m.emote"},"ts":1519813647000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1519813652000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Well the majority of the features are now defined by WHATWG standards so might as well","msgtype":"m.text"},"ts":1519813673000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So WebPlat is the official working group name now, I think #webplat seems better now.","msgtype":"m.text"},"ts":1519813677000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"kochi: sgtm","msgtype":"m.text"},"ts":1519813688000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Added IRC channel info at https://github.com/w3c/WebPlatformWG/blob/gh-pages/meetings/18-03-Web-components.md","msgtype":"m.text"},"ts":1519813740000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"referred https://www.w3.org/WebPlatform/WG/ for the working group name.","msgtype":"m.emote"},"ts":1519813808000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"BTW it may be too late to announce, but we are planning to have a group dinner on the first day.","msgtype":"m.text"},"ts":1519814083000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"Probably we can get together and go to some restaurants, but I'm trying to book for ~20 people.","msgtype":"m.text"},"ts":1519814123000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"JakeA: I'm looking at createImageBitmap() again","msgtype":"m.text"},"ts":1519823214000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: if we want SVG to resize early on, how does that work together with  sourceRectangle?","msgtype":"m.text"},"ts":1519823227000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I guess we should just try to make it work, even if it results in a bunch of special casing...","msgtype":"m.text"},"ts":1519823403000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah, the problem is you want the rectangle applied before resizing for bitmap images, but for vector you want a scaled version of the rectangle applied after rasterisation","msgtype":"m.text"},"ts":1519823486000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: for bitmaps it needs to be applied before resizing to avoid pixels outside the rectangle leaking through","msgtype":"m.text"},"ts":1519823518000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I guess you basically need to scale the sourceRectangle too","msgtype":"m.text"},"ts":1519823562000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Although that doesn't quite work either","msgtype":"m.text"},"ts":1519823595000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ugh","msgtype":"m.text"},"ts":1519823597000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yep. I think, early on, you need to \"if vector\", then create a bitmap image that's the final-scale of the SVG, and transform the rectangle by the same amount. Then you can go through the same steps as bitmap images","msgtype":"m.text"},"ts":1519823653000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: Implementations should be encouraged to avoid rasterising parts of the SVG that are cropped out, but that can be a note","msgtype":"m.text"},"ts":1519823694000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: the current text has this oddity too","msgtype":"m.text"},"ts":1519824001000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: if sourceRectangle is 0x0x100x100 and resize is 200x200, and input has no dimensions, then first you size input to 200x200, then take out the top left corner, then resize that to 200x200","msgtype":"m.text"},"ts":1519824058000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I guess that's reasonable?","msgtype":"m.text"},"ts":1519824068000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: the thing I was talking about is that if input is 100x100, and sourceRectangle is 0x0x50x50, and resize is 200x200, you cannot render at 200x200 and then take 0x0x50x50 from that, you need to render at 800x800 and take 0x0x200x200 from that, right?","msgtype":"m.text"},"ts":1519824396000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: The intrinsic example is weird, but I can't think of a better way","msgtype":"m.text"},"ts":1519824422000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: yeah, that's right.","msgtype":"m.text"},"ts":1519824487000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"It's a little annoying that the math for SVG is totally different","msgtype":"m.text"},"ts":1519824504000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh maybe it's not so much","msgtype":"m.text"},"ts":1519824613000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Like this https://gist.github.com/jakearchibald/6ca3400071631a51e41bc9d10107fa60","msgtype":"m.text"},"ts":1519824620000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: except that rendering as a bitmap and resizing a bitmap happen at different stages, so it's a little more complicated","msgtype":"m.text"},"ts":1519824675000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: also, you left out all the complicated bits :p","msgtype":"m.text"},"ts":1519824693000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"haha yeah","msgtype":"m.text"},"ts":1519824700000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: But now, for vectors, the resize size is the same as the bitmap size, so that doesn't matter.","msgtype":"m.text"},"ts":1519824743000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(or, it will be after cropping)","msgtype":"m.text"},"ts":1519824789000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: except you cannot really reset sourceRectangle in the algorithm that renders image data, but I guess that'll have to leak somehow","msgtype":"m.text"},"ts":1519824829000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Couldn't you do it just before 1.6.svg.4.1? https://whatpr.org/html/3424/imagebitmap-and-animations.html#dom-createimagebitmap, just before \"rendering image data as a bitmap\" figure out what the source rectangle should be","msgtype":"m.text"},"ts":1519825015000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: Another problem is figuring out which media queries to apply within the SVG. I'm pretty fond of what Edge does here https://jakearchibald.com/2016/svg-media-queries/","msgtype":"m.text"},"ts":1519825051000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: then I'd end up duplicating since Blob needs to do the same thing","msgtype":"m.text"},"ts":1519825082000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: at least, I'm assuming we want equal support for SVG in Blob","msgtype":"m.text"},"ts":1519825099000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm considering just passing it on as image data instead of rendering it at that point","msgtype":"m.text"},"ts":1519825141000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And making crop bitmap data to the source rectangle with formatting deal with both vector images and bitmaps","msgtype":"m.text"},"ts":1519825162000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah, that could work.","msgtype":"m.text"},"ts":1519825219000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: do you know if none vector images without intrinsic dimensions?","msgtype":"m.text"},"ts":1519825260000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"doesn't","msgtype":"m.emote"},"ts":1519825274000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: nah, I can't think of how that'd be possible","msgtype":"m.text"},"ts":1519825335000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I guess it'd be a format that has n pixels, but no width, but I'm not aware of anything like that","msgtype":"m.text"},"ts":1519825386000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk, I was planning to land notifications#127 after your change, but we can flip it around if I send the WPT change now?","msgtype":"m.text"},"ts":1519826574000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"beverloo: yeah, seems better in that order given it simplifies the setup a bit","msgtype":"m.text"},"ts":1519826723000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, ok, thanks! I'll squash and rebase the spec change, can you help merge the WPT change?","msgtype":"m.text"},"ts":1519827473000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"beverloo: done","msgtype":"m.text"},"ts":1519827544000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"WebSocket question: Has there ever been consideration of allowing browsers to read the HTTP status code from a rejected handshake? I see the LS section that stipulates that clients shouldn’t distinguish such cases other than to see a 1006 status, but I don’t see why this is any different from a normal XHR response, which does give the HTTP status codes.","msgtype":"m.text"},"ts":1519828804000,"senderName":"fgasper","senderId":"fgasper@irc"},
{"content":{"body":"fgasper already left?","msgtype":"m.text"},"ts":1519828976000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"WebSocket question (repost): Has there ever been consideration of allowing browsers to read the HTTP status code from a rejected handshake? I see the LS section that stipulates that clients shouldn’t distinguish such cases other than to see a 1006 status, but I don’t see why this is any different from a normal XHR response, which does give the HTTP status codes.","msgtype":"m.text"},"ts":1519830480000,"senderName":"fgasper","senderId":"fgasper@irc"},
{"content":{"body":"annevk, they're back","msgtype":"m.text"},"ts":1519831124000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"fgasper: https://github.com/whatwg/html/issues/2401","msgtype":"m.text"},"ts":1519835336000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"@annevk Thanks!","msgtype":"m.text"},"ts":1519835369000,"senderName":"fgasper","senderId":"fgasper@irc"},
{"content":{"body":"what goes in the transferList for StructuredSerializeWithTransfer","msgtype":"m.text"},"ts":1519839853000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: second/third argument of postMessage(), depending on the variant","msgtype":"m.text"},"ts":1519839879000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"devsnek: if you click on StructuredSerializeWithTransfer you'll find all its callers","msgtype":"m.text"},"ts":1519839913000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah ok","msgtype":"m.text"},"ts":1519839918000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(that generally goes for definitions in WHATWG standards)","msgtype":"m.text"},"ts":1519839930000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i want to propose a standard for something like that api except with a standardized Blob (or something similar) intermediary","msgtype":"m.text"},"ts":1519839992000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sorta like an alternative to the current json api","msgtype":"m.text"},"ts":1519840025000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: you mean standardizing the byte format?","msgtype":"m.text"},"ts":1519840028000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yea","msgtype":"m.text"},"ts":1519840032000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i realize that would probably slow things down","msgtype":"m.text"},"ts":1519840039000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: well, browsers do have such a thing under the hood","msgtype":"m.text"},"ts":1519840056000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"from what i can tell they all have their own byte format for the serialized stuff","msgtype":"m.text"},"ts":1519840074000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: yes","msgtype":"m.text"},"ts":1519840081000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"devsnek: do you want it for network transfer or something else?","msgtype":"m.text"},"ts":1519840091000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"whatever you would use json for","msgtype":"m.text"},"ts":1519840104000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"json is kinda a lost cause in my mind as we keep getting more and more types and structures etc","msgtype":"m.text"},"ts":1519840133000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I've often thought it'd be cool to have it standardized, especially if Node.js were game","msgtype":"m.text"},"ts":1519840193000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"node already exposes v8's serdes","msgtype":"m.text"},"ts":1519840200000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i imagine this as a standardized version of that api","msgtype":"m.text"},"ts":1519840210000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Not sure transferring makes sense for the byte format though","msgtype":"m.text"},"ts":1519840212000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yea thats why i was trying to figure out what that way","msgtype":"m.text"},"ts":1519840221000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"was*","msgtype":"m.text"},"ts":1519840223000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Transferring is more of an optimization when you don't have a byte format, to avoid duplicating the memory allocation","msgtype":"m.text"},"ts":1519840248000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yea","msgtype":"m.text"},"ts":1519840252000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Also impls will likely want their own custom byte format","msgtype":"m.text"},"ts":1519840304000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"because object representations etc. vary","msgtype":"m.text"},"ts":1519840309000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ya thats my current worry","msgtype":"m.text"},"ts":1519840315000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and the goal is really to make the transfer as low cost as possible","msgtype":"m.text"},"ts":1519840318000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"devsnek: I guess it's worth filing a whatwg/html issue to discuss it","msgtype":"m.text"},"ts":1519840323000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well i'm ok with it not being the fastest thing ever","msgtype":"m.text"},"ts":1519840331000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"json isn't known for speed","msgtype":"m.text"},"ts":1519840334000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"my current goals are: all the js types and structures (within reason so no weakmaps, functions, etc) and being cold storage capable","msgtype":"m.text"},"ts":1519840347000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which i think also implies a saved blob of data might be served to any browser","msgtype":"m.text"},"ts":1519840364000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or from any browser","msgtype":"m.text"},"ts":1519840377000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: I think if you go beyond what StructuredSerialize can do you'll find you'll have to figure out how to extend that first","msgtype":"m.text"},"ts":1519840395000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wdym","msgtype":"m.text"},"ts":1519840406000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: that abstract operation is basically the limit of what can be reasonably serialized at the moment","msgtype":"m.text"},"ts":1519840422000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"like the types and structures it can currently handle?","msgtype":"m.text"},"ts":1519840425000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: So you probably don't care about transfers, just StructuredSerializeForStorage?","msgtype":"m.text"},"ts":1519840434000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"yea","msgtype":"m.text"},"ts":1519840437000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"transfers are pointless with this","msgtype":"m.text"},"ts":1519840448000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Hmm yeah, StructuredSerializeForStorage is the relevant one","msgtype":"m.text"},"ts":1519840480000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"This seems related to some bits of Web Assembly too.","msgtype":"m.text"},"ts":1519840525000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"how come structured serialize doesn't handle symbols","msgtype":"m.text"},"ts":1519840548000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: I think we didn't want to decide on the scope of GlobalSymbolRegistry","msgtype":"m.text"},"ts":1519840916000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i guess that does count as a form of scope heh","msgtype":"m.text"},"ts":1519840945000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"makes sense","msgtype":"m.text"},"ts":1519840948000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://github.com/whatwg/html/issues/3517","msgtype":"m.text"},"ts":1519841289000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"when I started contributing to whatwg/html I had the goal to decrease the issue count by cleaning up older issues","msgtype":"m.text"},"ts":1519844065000,"senderName":"railgun","senderId":"railgun@irc"},
{"content":{"body":"but it seems like every issue I submited a pull request for 3 more popped up in its place haha","msgtype":"m.text"},"ts":1519844091000,"senderName":"railgun","senderId":"railgun@irc"},
{"content":{"body":"s/submited/submitted/","msgtype":"m.text"},"ts":1519844230000,"senderName":"railgun","senderId":"railgun@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1519844537000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yeah I made a graph once of issue count and it depressed me.","msgtype":"m.text"},"ts":1519845498000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But the phenomenon of fixing one issue revealing 3 more, doesn't mean that fixing the one was useless. The other 3 had always been issues even if we didn't know about them, and the one's still fixed. </daily-encouragement>","msgtype":"m.text"},"ts":1519845854000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"<3","msgtype":"m.text"},"ts":1519846178000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I haven't maintained a large repository before, so I still can't imagine hundreds of open issues (even though most of them are probably waiting for something else)","msgtype":"m.text"},"ts":1519846231000,"senderName":"railgun","senderId":"railgun@irc"},
{"content":{"body":"but if there are any issues that I can do feel free to link me, I feel like I'm missing some of the easier ones that aren't tagged good first issue","msgtype":"m.text"},"ts":1519846283000,"senderName":"railgun","senderId":"railgun@irc"},
{"content":{"body":"We don't have it as bad as some; cf. nodejs/node, npm/npm, angular/angular","msgtype":"m.text"},"ts":1519846285000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: when I look at those repositories I feel like most of the issues are actually questions","msgtype":"m.text"},"ts":1519846371000,"senderName":"railgun","senderId":"railgun@irc"},
{"content":{"body":"Yeah, although a lot are bugs in disguise, albeit probably duplicate ones","msgtype":"m.text"},"ts":1519846467000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I suppose that's the cost of trying to maintain a large code base","msgtype":"m.text"},"ts":1519846656000,"senderName":"railgun","senderId":"railgun@irc"},
{"content":{"body":"whatwg/html holds a lot of browser technical debt","msgtype":"m.text"},"ts":1519850679000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And no browser is serious in paying it off","msgtype":"m.text"},"ts":1519850710000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is there any valid reason why multiple browser engines exist? It seems like there would be a lot of duplicate code between them","msgtype":"m.text"},"ts":1519852286000,"senderName":"railgun","senderId":"railgun@irc"},
{"content":{"body":"apparently the link https://github.com/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22+user%3Awhatwg does not work if you're not signed into GitHub","msgtype":"m.text"},"ts":1519854197000,"senderName":"railgun","senderId":"railgun@irc"},
{"content":{"body":"was going to make a pull request fixing the link but I'm not sure if there's one that works all the time","msgtype":"m.text"},"ts":1519854302000,"senderName":"railgun","senderId":"railgun@irc"},
{"content":{"body":"https://github.com/search?utf8=%E2%9C%93&q=is%3Aopen+label%3A%22good+first+issue%22+user%3Awhatwg&type=Issues seems to work but the interface is slightly different (arguably better since it includes an excerpt?)","msgtype":"m.text"},"ts":1519854651000,"senderName":"railgun","senderId":"railgun@irc"},
{"content":{"body":"can I make the update here?","msgtype":"m.text"},"ts":1519854738000,"senderName":"railgun","senderId":"railgun@irc"}
]