[
{"content":{"body":"annevk: to continue our discussion from last week, maybe I can simply modify step 3 in https://fetch.spec.whatwg.org/#concept-fetch to be based on destination rather than type","msgtype":"m.text"},"ts":1503299352000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"that would solve the preload case and help nudge us towards a future without `type` (without breaking other specs that may rely on type)","msgtype":"m.text"},"ts":1503299387000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"I'd rather we just fix it all in one go","msgtype":"m.text"},"ts":1503299504000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm happy to help","msgtype":"m.text"},"ts":1503299508000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1503299646000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"what about other specs that may rely on type?","msgtype":"m.text"},"ts":1503299741000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: we should probably submit PRs","msgtype":"m.text"},"ts":1503299822000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok, is there an index that tracks usage? (or should we just look around for them)","msgtype":"m.text"},"ts":1503299866000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: no index, though we should maybe add one in the source of Fetch as we find them","msgtype":"m.text"},"ts":1503299889000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I found https://w3c.github.io/webappsec-csp/#effective-directive-for-a-request","msgtype":"m.text"},"ts":1503299893000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://w3c.github.io/webappsec-mixed-content/","msgtype":"m.text"},"ts":1503299948000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and HTML","msgtype":"m.text"},"ts":1503299950000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think that's it","msgtype":"m.text"},"ts":1503299953000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://w3c.github.io/webappsec-subresource-integrity/ uses destination, but not type","msgtype":"m.text"},"ts":1503300055000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess we should note that it relies on destination","msgtype":"m.text"},"ts":1503300060000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: I'll file a tracking issue against Fetch","msgtype":"m.text"},"ts":1503300075000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok, thanks","msgtype":"m.text"},"ts":1503300082000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: and I'll work on the HTML patch","msgtype":"m.text"},"ts":1503300089000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Thanks, I'll clean preload in the mean time","msgtype":"m.text"},"ts":1503300157000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: I found that we never aligned HTML with the change you made to Fetch...","msgtype":"m.text"},"ts":1503300924000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm...","msgtype":"m.text"},"ts":1503300937000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: for <audio>, <video>, and <track> destination was still set to \"media\"","msgtype":"m.text"},"ts":1503300945000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: I hope we did end up testing that somehow","msgtype":"m.text"},"ts":1503300953000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tested that change for preload, but not sure for HTML","msgtype":"m.text"},"ts":1503300997000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"looking","msgtype":"m.text"},"ts":1503300999000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"can't find an HTML test for that","msgtype":"m.text"},"ts":1503301148000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"also, IIRC last time I tried to test in SW based on Request.destination, it wasn't really implemented anywhere","msgtype":"m.text"},"ts":1503301178000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"but can try again (or add a failing test)","msgtype":"m.text"},"ts":1503301208000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: oh that's interesting, is .type implemented?","msgtype":"m.text"},"ts":1503301283000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"dunno","msgtype":"m.text"},"ts":1503301304000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"nope","msgtype":"m.text"},"ts":1503301340000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Both are undefined for (new Request(\"about:blank\")).type|destination","msgtype":"m.text"},"ts":1503301360000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So I guess that means we can easily remove type","msgtype":"m.text"},"ts":1503301366000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That simplifies matters","msgtype":"m.text"},"ts":1503301376000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Regarding preload's https://w3c.github.io/preload/#link-element-extensions","msgtype":"m.text"},"ts":1503301392000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"Would still be good to have failing tests for destination I suppose, now we're double downing on that approach with rel=preload","msgtype":"m.text"},"ts":1503301414000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I can easily remove the parts that use type, but there's nothing in HTML that replaces \"When the resource is declared via the Link header field ([RFC5988]), the resource's as attribute is defined via the as link-extension target attribute. ([RFC5988] section 5.4)\"","msgtype":"m.text"},"ts":1503301452000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"(or anything that maps the other attributes from WEBLINK to HTML)","msgtype":"m.text"},"ts":1503301500000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"and I'm not sure if this is needed or not","msgtype":"m.text"},"ts":1503301514000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"I suspect the HTTP Link header is rather poorly defined for things defined in HTML too","msgtype":"m.text"},"ts":1503301589000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"E.g., nothing really says how that header works for rel=stylesheet","msgtype":"m.text"},"ts":1503301602000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1503301614000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"I'd probably keep the text and maybe file an issue against HTML about providing better infrastructure for that","msgtype":"m.text"},"ts":1503301629000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"there's no mapping from the header to the attributes","msgtype":"m.text"},"ts":1503301633000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"For rel=stylesheet you need even more, as it also influences APIs and such","msgtype":"m.text"},"ts":1503301666000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: can https://github.com/whatwg/fetch/issues/556 be closed?","msgtype":"m.text"},"ts":1503303947000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: and https://github.com/whatwg/fetch/issues/554?","msgtype":"m.text"},"ts":1503303951000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm, this is curious. `<!DOCTYPE html SYSTEM\"\"` sets force-quirks, but `<!DOCTYPE html SYSTEM\"\"x` does not","msgtype":"m.text"},"ts":1503305494000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"not going to change it though","msgtype":"m.text"},"ts":1503305551000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: done","msgtype":"m.text"},"ts":1503315795000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"belated ta!","msgtype":"m.text"},"ts":1503320128000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Is GitHub slow for anyone else?","msgtype":"m.text"},"ts":1503324127000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It also doesn't seem to update Travis at a reasonable speed","msgtype":"m.text"},"ts":1503324138000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://status.github.com/","msgtype":"m.text"},"ts":1503324323000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"(i.e. yup)","msgtype":"m.text"},"ts":1503324337000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"ta","msgtype":"m.text"},"ts":1503324494000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oooh fun, Firefox Nightly is sticking with the doge logo","msgtype":"m.text"},"ts":1503325288000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I wish MDN would just link to caniuse.com for API stability info... it seems to be more reliable and a better measure of \"experimental\" status","msgtype":"m.text"},"ts":1503325290000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: I just wish they would stop changing the icon... its fun but too much gets a bit annoying","msgtype":"m.text"},"ts":1503325369000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Yeah, agreed!","msgtype":"m.text"},"ts":1503325376000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: it's still the same icon in the doc here on macOS","msgtype":"m.text"},"ts":1503325417000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: or maybe make out \"experimental\" thing link to a \"this a w3c spec related thing on MDN\" explainer and also provide a caniuse.com link","msgtype":"m.text"},"ts":1503325433000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"^out^our","msgtype":"m.text"},"ts":1503325438000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: though in Spotlight I get the old logo","msgtype":"m.text"},"ts":1503325440000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"messy","msgtype":"m.text"},"ts":1503325448000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I just mean how it went from old nightly -> new nightly -> calvin+hobbes -> firefox 0.8 -> firedoge in the space of a few weeks","msgtype":"m.text"},"ts":1503325486000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: ah yeah, I saw that on Twitter, though never really noticed it happening","msgtype":"m.text"},"ts":1503325508000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"we should have an opt out if we are going to do this sort thing","msgtype":"m.text"},"ts":1503325511000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I only noticed the change to new Nightly as that ended up changing the icon on the doc","msgtype":"m.text"},"ts":1503325524000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"although I can see how that would be hard","msgtype":"m.text"},"ts":1503325527000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: maybe I need to reboot or some such for icons to update so often?","msgtype":"m.text"},"ts":1503325538000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: qq for the push api, would we want to define [SecureContext] on the event types as well, given that them being limited to secure contexts is implied by them only being available on the SW global scope?","msgtype":"m.text"},"ts":1503325566000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"annevk: I think its hit or miss whether it replaces your dock icon unless you stop and restart firefox... I think the dock keeps it cached or something","msgtype":"m.text"},"ts":1503325582000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"beverloo: the events already have Exposed=ServiceWorker?","msgtype":"m.text"},"ts":1503325596000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1503325601000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"beverloo: in that case it's a no-op, but might as well for clarity","msgtype":"m.text"},"ts":1503325610000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: well starting Fx happens all the time due to updates","msgtype":"m.text"},"ts":1503325665000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: restarting*","msgtype":"m.text"},"ts":1503325670000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yea, just saying I had to explicitly quit firefox and restart to get some icon updates... but only on my mac","msgtype":"m.text"},"ts":1503325690000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: cool, thanks! I also notice that we have [Exposed=(Window,Worker)] on our ServiceWorkerGlobalScope extensions, lol, that needs to go","msgtype":"m.text"},"ts":1503325706000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"beverloo: if you really want to drive it home file an issue against heycam/webidl to get a statement on the matter, it seems like something we need to decide on although it might be hard to find enough people who care","msgtype":"m.text"},"ts":1503325734000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"beverloo: yeah that seems buggy 😃","msgtype":"m.text"},"ts":1503325753000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sure, will do!","msgtype":"m.text"},"ts":1503325761000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"wanderview: oh that's different from restart to update?","msgtype":"m.text"},"ts":1503325808000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess?  I don't know much about mac integration stuff","msgtype":"m.text"},"ts":1503326215000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: I guess I would settle for another icon update for this: https://twitter.com/mart3ll/status/899637173682622468","msgtype":"m.text"},"ts":1503326537000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I should really avoid commenting on spec issues while I'm still drinking coffee...","msgtype":"m.text"},"ts":1503328194000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"^ me at least three times a week.","msgtype":"m.text"},"ts":1503333141000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Am I the only one finding the phrase \"the construct is not available only in secure contexts\" hard to parse?","msgtype":"m.text"},"ts":1503333163000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"beverloo, annevk : would the [SecureContext] / [Exposed] issue  still be a thing if we flipped [SecuredContext] around to [AllowInNonSecureContext]?","msgtype":"m.text"},"ts":1503333902000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I think that'd more accurately reflect our intentions of pushing https, but there's a whole bunch of legacy specs that we'd never be able to update..","msgtype":"m.text"},"ts":1503333944000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"the vast majority of things has no reason to be secure context only, too","msgtype":"m.text"},"ts":1503333969000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"beverloo: that's a good point.","msgtype":"m.text"},"ts":1503334006000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Anything that can be should imo","msgtype":"m.text"},"ts":1503334101000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"HTTPS carrots ftw","msgtype":"m.text"},"ts":1503334123000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Or sticks, depending on your pov","msgtype":"m.text"},"ts":1503334143000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"beverloo: I guess the question wrt to those APIs you mentioned is whether they'd need to be secured if they were suddenly exposed in an new global interface that wasn't https by default.","msgtype":"m.text"},"ts":1503334178000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: unlikely as that may be (why would we introduce new non-secure context-only globals at this point?), it's a good point as it may impact a lot of assumptions","msgtype":"m.text"},"ts":1503334317000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"I wonder if all worklets are [SecureContext], I hope so...","msgtype":"m.text"},"ts":1503334488000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://github.com/w3c/css-houdini-drafts/issues/92 \"this seems overdue\"","msgtype":"m.text"},"ts":1503334625000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"from the PR (#379): \"\"Specifications which use worklets should decide if their worklet(s) should be allowed outside SecureContexts\"\"","msgtype":"m.text"},"ts":1503334696000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"beverloo: so the thing is we can't add a clause that says that if something is exposed in a SW, then it must be secure context only elsewhere.","msgtype":"m.text"},"ts":1503335009000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"beverloo: (as it would make secure context only in Window, stuff you would add to SW)","msgtype":"m.text"},"ts":1503335124000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"beverloo: so your options are basically (1) mark all Exposed=SW APIs also as [SecureContext] (2) mark only the ones that do represent as security concerns as [SecureContext] (3) consider these APIs won't ever be exposed elsewhere and not do anything.","msgtype":"m.text"},"ts":1503335206000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"beverloo: I think (1) is probably the cheapest and most forward-looking thing to do.","msgtype":"m.text"},"ts":1503335255000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"beverloo: I'm having the hardest time parsing my own comments above. Sorry about that.","msgtype":"m.text"},"ts":1503335511000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"beverloo: so without considering the unlikely case that we introduce a new non-secure context, you might have the case where you start adding an API to SW and then want to move it to workers or window. For example, I think that's what happened with fetch, caches, etc.","msgtype":"m.text"},"ts":1503335800000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"beverloo: unless you've added a [SecureContext] extended attribute to such APIs, you have to remember doing a privacy/security assessment when you expose those elsewhere.","msgtype":"m.text"},"ts":1503335986000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I agree with (1), too","msgtype":"m.text"},"ts":1503336626000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"looks like we found enough arguments to warrant being explicit, even though it's repetitive (and hopefully will be even more repetitive in the future)","msgtype":"m.text"},"ts":1503336653000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"yeah, I guess the other option is to switch the extended attribute around","msgtype":"m.text"},"ts":1503336691000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Note we have a plan to do that for Exposed. We could do both at the same time","msgtype":"m.text"},"ts":1503336711000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"beverloo: see: https://github.com/heycam/webidl/issues/365","msgtype":"m.text"},"ts":1503336768000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Ack, sounds good to me. I like making [Exposed] mandatory, we've had some bugs in the past where interfaces accidentally were not exposed on all global scopes they should've been","msgtype":"m.text"},"ts":1503336938000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"annevk, Domenic: For MultiMaps, a non-existent key should still return undefined from getAll(), right? Same as .get()?  (Rather than returning `[]`.)","msgtype":"m.text"},"ts":1503348750000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]