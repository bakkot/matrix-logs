[
{"content":{"body":"Hixie: not that it matters much but I think you flagged https://www.w3.org/Bugs/Public/show_bug.cgi?id=27149 as a duplicate of the wrong bug","msgtype":"m.text"},"ts":1414117117000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ah I see why","msgtype":"m.text"},"ts":1414117173000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I'll fix it","msgtype":"m.text"},"ts":1414117176000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Domenic: it seems I had not read the actual proposal, that does seem like an amazing outcome","msgtype":"m.text"},"ts":1414136480000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: my bad","msgtype":"m.text"},"ts":1414136494000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: if I make a forced-preflight fetch, but there's no non-basic method or headers, I don't get a preflight?","msgtype":"m.text"},"ts":1414136862000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: you can't make a forced-preflight fetch","msgtype":"m.text"},"ts":1414136941000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: fair","msgtype":"m.text"},"ts":1414137052000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"forced preflight only exists for some event listener thing from XMLHttpRequest","msgtype":"m.text"},"ts":1414137084000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"perhaps we also require it if you pass an actual stream to new Request","msgtype":"m.text"},"ts":1414137098000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"as that would effectively be the same thing","msgtype":"m.text"},"ts":1414137105000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(someone suggested it as a way to do SW security, not entertaining the idea but wanted to explain fully)","msgtype":"m.text"},"ts":1414137118000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"although... request needs to make a copy of that data...","msgtype":"m.text"},"ts":1414137127000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: we might want to investigate at some point if we want a fail-on-redirect option or no-clone option for a request's stream","msgtype":"m.text"},"ts":1414137183000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: due to redirects and authentication you might end up submitting the request body several times, which doesn't seem very optimal for perf if you're uploading 50GiB of 4K video or some such","msgtype":"m.text"},"ts":1414137225000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I'm not sure what SW security means","msgtype":"m.text"},"ts":1414137260000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: note that from a specification layer you can make a forced-preflight fetch","msgtype":"m.text"},"ts":1414137273000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: fail-on-redirect sounds like a good solution there. Or no-buffer, which would prevent cloning and implicit buffering from redirects","msgtype":"m.text"},"ts":1414138359000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: By SW security I mean the whole path vs header debate","msgtype":"m.text"},"ts":1414138396000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Are we still tracking the addition of streams in an issue somewhere? We should mention this there","msgtype":"m.text"},"ts":1414138398000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: ah okay, then a forced-preflight would not work, since this is same-origin","msgtype":"m.text"},"ts":1414138434000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: unless you say the request origin is null, but that would be a super weird way to get hold of a SW","msgtype":"m.text"},"ts":1414138468000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah http://jakearchibald.com/2014/launching-sw-without-breaking-the-web/#comment-1651245375","msgtype":"m.text"},"ts":1414138522000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"FWIW, I really like the tie it to the origin idea","msgtype":"m.text"},"ts":1414138589000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I have liked that since the start, I'm not sure why I didn't push for it. I thought it wasn't in the cards","msgtype":"m.text"},"ts":1414138603000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Tie it to the origin?","msgtype":"m.text"},"ts":1414138647000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Use origin instead of scopes","msgtype":"m.text"},"ts":1414138689000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: does that mean I can only have one SW per origin?","msgtype":"m.text"},"ts":1414138737000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I guess it must","msgtype":"m.text"},"ts":1414138784000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Scoping has been really useful for demos on https://jakearchibald.github.io/isserviceworkerready/ and seperate sites like https://jakearchibald.github.io/trained-to-thrill/","msgtype":"m.text"},"ts":1414138823000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Yeah, but let actual scoping solve that problem","msgtype":"m.text"},"ts":1414138974000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I.e. suborigins","msgtype":"m.text"},"ts":1414138978000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It simplifies service workers a lot and puts the complexity of scoping on suborigins, which can provide actual security benefits","msgtype":"m.text"},"ts":1414139125000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Github pages (and googledrive, and localhost) were the sweetener to the https requirement. I don't like things which throw those out (hence my fighting over the path stuff)","msgtype":"m.text"},"ts":1414139182000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"They are not thrown out, you can just experiment with a single service worker on them","msgtype":"m.text"},"ts":1414139337000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(until suborigins)","msgtype":"m.text"},"ts":1414139357000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"has some agreement emerged yet on the path thing","msgtype":"m.text"},"ts":1414139413000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://adactio.com/journal/7706 did someone tell adactio about service workers? Since you'll end up duplicating quite a bit of your server code","msgtype":"m.text"},"ts":1414139418000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: depends more on https://github.com/slightlyoff/ServiceWorker/issues/445 at this point; Mozilla is not interested in shipping the current API as is","msgtype":"m.text"},"ts":1414139461000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"looks","msgtype":"m.emote"},"ts":1414139470000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"http://alistafart.com/","msgtype":"m.text"},"ts":1414139746000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"worth making a breaking change for\"","msgtype":"m.text"},"ts":1414139778000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"doesn't seem like anything's strictly a breaking change at this point","msgtype":"m.text"},"ts":1414139815000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yet","msgtype":"m.text"},"ts":1414139818000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: hence depends, but I'm pretty sure that unless we come to some agreement Firefox will break","msgtype":"m.text"},"ts":1414139885000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: we said as much on blink-dev","msgtype":"m.text"},"ts":1414139897000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah I read that blink-dev thread too","msgtype":"m.text"},"ts":1414139923000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"including https://groups.google.com/a/chromium.org/d/msg/blink-dev/QfxPGw0kJW8/mpvlkZR-AxwJ from Eric Seidel","msgtype":"m.text"},"ts":1414139976000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"\"The risk is high that we'll end up needing to support a spec-incompatible implementation.\"","msgtype":"m.text"},"ts":1414139991000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"anyway, I can see it's some exceptionally difficult problems to sort out","msgtype":"m.text"},"ts":1414140089000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"It's not easy to deploy complex new technology quickly","msgtype":"m.text"},"ts":1414140233000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And I doubt anyone would label this as quick","msgtype":"m.text"},"ts":1414140254000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"E.g. when I said 18 months ago or so this would take at least a year I was laughed at","msgtype":"m.text"},"ts":1414140278000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it will take another 6-10 yrs to become mainstream too.","msgtype":"m.text"},"ts":1414140340000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"annevk: If scope is always the whole origin, github is no longer a viable place to host independant serviceworker projects","msgtype":"m.text"},"ts":1414140947000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"localhost becomes awkward","msgtype":"m.text"},"ts":1414140960000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: adactio's seem me speak about ServiceWorker at least twice","msgtype":"m.text"},"ts":1414141517000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"m.lanyrd.com works offline but also with server rendering. It follows a fairly simple model of urls with data objects & templates. The templating system is mustache so works in obj-C for the ios app, java for android, js for clientside, python for service side","msgtype":"m.text"},"ts":1414141639000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"of course, each mustache implementation had its own quirks","msgtype":"m.text"},"ts":1414141652000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"so it was a bit of a ballache","msgtype":"m.text"},"ts":1414141664000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"If I were developing twitter.com in 5 years, I'd probably make the logged-in timeline view entirely client-side. You only get there 2nd visit, so ServiceWorker can give you better performance than server-rendering","msgtype":"m.text"},"ts":1414141764000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"For individual tweets, server rendering may still have a benefit for first load","msgtype":"m.text"},"ts":1414141790000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Same for the logged-out root","msgtype":"m.text"},"ts":1414141800000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Progressive enhancement in terms of connectivity is more valuable than PE in terms of JavaScript","msgtype":"m.text"},"ts":1414141837000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"sicking: thanks for the detailed post on the generality thing","msgtype":"m.text"},"ts":1414143976000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: fwiw I've read at lot of the SW issue discussions and I think you're doing a stellar job of representing the web-developer concerns/priorities and of trying to find solutions that'll work. Getting this stuff right is obviously pretty important.","msgtype":"m.text"},"ts":1414144533000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: oh thanks! I guess I haven't been devrel long enough to forget what it's like to be a developer. Give it 6 months.","msgtype":"m.text"},"ts":1414145122000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1414145143000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"JakeA: yeah, the end game is more about perf","msgtype":"m.text"},"ts":1414146663000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I can see how it's a bit disconcerting though that the client side is no longer HTML and some JavaScript sprinkled on top","msgtype":"m.text"},"ts":1414146711000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I do think that one of the benefits of SW is \"ajaxing\" a page change is no longer a huge performance benefit","msgtype":"m.text"},"ts":1414146794000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"especially if we get some way to transition between navigations","msgtype":"m.text"},"ts":1414146822000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"because \"ajax\" navigations are a pain in the hole to get right","msgtype":"m.text"},"ts":1414146849000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I just realized there's some issues now we figured out that dedicated workers are not clients","msgtype":"m.text"},"ts":1414146973000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Fetch uses client for other things, such as CSP and Referer","msgtype":"m.text"},"ts":1414147034000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Referer we could probably solve, but not CSP","msgtype":"m.text"},"ts":1414147067000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ugh :-(","msgtype":"m.text"},"ts":1414147076000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Is it easier to find a way to postMessage into dedicated workers from outside the document?","msgtype":"m.text"},"ts":1414147103000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I don't know","msgtype":"m.text"},"ts":1414147118000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The problem is that if a dedicated worker does a Fetch, SW wants to see the environment settings object from a document, whereas Fetch also needs the environment settings object from the dedicated worker","msgtype":"m.text"},"ts":1414147166000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If ServiceWorker can postMessage to a document's dedicated worker, then I'm happy for SW to see the dedicated worker as the request client (or some kind of proxy to it)","msgtype":"m.text"},"ts":1414147431000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I will email the relevant people","msgtype":"m.text"},"ts":1414147532000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"At least, if I can write out a decent enough problem statement","msgtype":"m.text"},"ts":1414147544000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: we could even make postMessage to those fail, but I'm nervous of .client & getAll() getting wildly different APIs depending on client type","msgtype":"m.text"},"ts":1414147614000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: either we should just expose them as a document (but with a different Referer and CSP policy...) or we should expose them as a worker without a channel and perhaps a pointer to the associated document?","msgtype":"m.text"},"ts":1414147725000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: all of these require some amount of refactoring","msgtype":"m.text"},"ts":1414147734000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: so I'll write up the known facts so everyone can think about them","msgtype":"m.text"},"ts":1414147752000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: data:text/html;charset=utf-8,<!DOCTYPE%20html>%0A<style>%0A%20body%2C%20html%20%7B%20ma…<span>Qual%20Match%2037<%2Fspan>%20<span>Friday%2014%3A21<%2Fspan>%0A<%2Fdiv> is not a valid URL per spec, right? Because \"<\" and \">\" are not URL code points.","msgtype":"m.text"},"ts":1414148041000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: yeah","msgtype":"m.text"},"ts":1414149437000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: I only changed a few things relative to RFC 3987 (likely mistakes), but have not changed conformance relative to RFC 3986 I think","msgtype":"m.text"},"ts":1414149516000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: we could at some point, though we should probably be careful","msgtype":"m.text"},"ts":1414149535000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ok, thanks","msgtype":"m.text"},"ts":1414149879000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I guess I need to file a bug against the source of the HTML spec, since Hixie's using that URL on the source","msgtype":"m.text"},"ts":1414149960000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"also, data URL kitchen generates URLs with raw \"<\" and \">\"","msgtype":"m.text"},"ts":1414150046000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: yeah, I know the current set of restrictions is somewhat annoying","msgtype":"m.text"},"ts":1414150414000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: we could have a distinct conformance class for URLs in HTML attribute values","msgtype":"m.text"},"ts":1414150442000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: but I don't really want to get into that before we actually have conforming URL parsers","msgtype":"m.text"},"ts":1414150457000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yup","msgtype":"m.text"},"ts":1414150847000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"For discussion purposes: http://intertwingly.net/projects/pegurl/url.html","msgtype":"m.text"},"ts":1414152021000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"rubys: I thought the productions were for non-normative purposes?","msgtype":"m.text"},"ts":1414152169000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"When we last talked, I hadn't decided.  I'm now proposing that they be normative.","msgtype":"m.text"},"ts":1414152206000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"rubys: I'm not a fan","msgtype":"m.text"},"ts":1414152223000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"This also heavily regresses my IDNA work","msgtype":"m.text"},"ts":1414152257000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rubys: also, username/password together is userinfo; userinfo + host + port is authority","msgtype":"m.text"},"ts":1414152460000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rubys: at least if you follow the original RFCs","msgtype":"m.text"},"ts":1414152472000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that can be fixed","msgtype":"m.text"},"ts":1414152493000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"Alright, first, sorry for being being negative. Thanks for the work. Second, I'm willing to consider this after this evolved a bit to address the obvious mistakes.","msgtype":"m.text"},"ts":1414152806000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Please do enumerate the mistakes.  I can iterate quickly.","msgtype":"m.text"},"ts":1414152946000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"rubys: ipv6 needs to be inline","msgtype":"m.text"},"ts":1414152971000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rubys: IDNA as mentioned","msgtype":"m.text"},"ts":1414152984000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rubys: URL concat needs to be defined","msgtype":"m.text"},"ts":1414152990000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rubys: it needs to be clearer about normative requirements","msgtype":"m.text"},"ts":1414153011000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rubys: it would help if there was a distinction between properties and variables","msgtype":"m.text"},"ts":1414153082000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rubys: e.g. \"scheme is set to file\" is ambiguous","msgtype":"m.text"},"ts":1414153105000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rubys: also, apart from formatting you probably want \"Set scheme to file\", unless it somehow magically happens","msgtype":"m.text"},"ts":1414153137000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rubys: \"In the case of a relative-url, the value object to be returned is initialized to the value returned by relative-url, and then modified as follows:\" does not make much sense without a description of base URLs","msgtype":"m.text"},"ts":1414153187000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rubys: username and password also have their stuff percent-encoded","msgtype":"m.text"},"ts":1414153209000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rubys: hopefully this helps","msgtype":"m.text"},"ts":1414153368000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it does; and this might be easier on a mailing list, but first: this was not meant to be complete, but as a catalist for exactly this type of discussion.","msgtype":"m.text"},"ts":1414153408000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"I only have questions on 3 of your first 4 points.","msgtype":"m.text"},"ts":1414153432000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"1) why does ipv6 need to be inline?","msgtype":"m.text"},"ts":1414153440000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"2) can you expand on your IDNA comment?  What tests would this fail?","msgtype":"m.text"},"ts":1414153461000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"3) what in my mocked up spec should be non-normative?","msgtype":"m.text"},"ts":1414153476000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"rubys: the parser should be self-contained","msgtype":"m.text"},"ts":1414153486000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rubys: I don't really want to elaborate on IDNA, IDNA is much harder than Punycode, the references in URL should make that clear enough","msgtype":"m.text"},"ts":1414153522000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rubys: e.g. you have \"Replace all Fullwidth unicode characters (in the range of U+FF01 to U+FF5E with their non-fullwidth equivalents.\" but normalization is much more complicated","msgtype":"m.text"},"ts":1414153575000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rubys: you can't write a spec for URLs based on just 250 tests","msgtype":"m.text"},"ts":1414153620000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I agree that the parser should be self-contained.  I believe it is.","msgtype":"m.text"},"ts":1414153680000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"And I agree that this spec needs to be reconciled with, and defer to, the Encoding Living Standard.  (and it even says so).","msgtype":"m.text"},"ts":1414153682000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"IDNA != Encoding Standard","msgtype":"m.text"},"ts":1414153822000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't see how IPv6 as currently defined is self-contained","msgtype":"m.text"},"ts":1414153859000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"As for 3) you lack requirements in the form of \"must\"","msgtype":"m.text"},"ts":1414153917000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rubys: query lacks encoding override stuff","msgtype":"m.text"},"ts":1414154127000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"one thing that would be helpful is more tests.","msgtype":"m.text"},"ts":1414154169000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"annevk: Jonas' Alt 2 proposal (https://github.com/slightlyoff/ServiceWorker/issues/445#issuecomment-60362736) does that work for you? Perhaps even allowing scope to be set to null or an empty sequence to opt out of fetch. I could pursue that with Alex and our implementors.","msgtype":"m.text"},"ts":1414154228000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"rubys: the lack of defined parse errors in this draft of your proposed approach make its hard for me to evaluate for my use case (URL conformance checking)","msgtype":"m.text"},"ts":1414155197000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: ack.","msgtype":"m.text"},"ts":1414155232000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"Just curious, any reason why a URL conformance checker couldn't be in JavaScript?","msgtype":"m.text"},"ts":1414155300000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"it could be sure","msgtype":"m.text"},"ts":1414155321000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"rubys: but for my purposes I also need something that works for the command line, for one thing","msgtype":"m.text"},"ts":1414155354000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"outside of a browser","msgtype":"m.text"},"ts":1414155363000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"node.js?","msgtype":"m.text"},"ts":1414155371000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"for http://validator.github.io/validator/","msgtype":"m.text"},"ts":1414155386000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"vnu.jar and the other apps that integrate with that","msgtype":"m.text"},"ts":1414155404000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"e.g., https://github.com/cvrebert/lmvtfy/ and https://github.com/jzaefferer/grunt-html","msgtype":"m.text"},"ts":1414155425000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and also really, a checker that integrates into the vnu backend in the same way as other checkers (as a SAX ContentHandler, basically)","msgtype":"m.text"},"ts":1414155559000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: so a Java implementation would be preferred?","msgtype":"m.text"},"ts":1414155575000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"JakeA: haven't had time to review yet","msgtype":"m.text"},"ts":1414155859000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: no worries. I need to get back on talk writing now & the weekend, but let me know & I'll help how I can","msgtype":"m.text"},"ts":1414155952000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"rubys: yeah, for my purposes a Java implementation would be preferred. Though it's possible to make a Java implementation from a JS implementation, using Rhino. I'm doing that already (in a very limited way) in the vnu code, with TabAtkins' JS CSS tokenizer.","msgtype":"m.text"},"ts":1414156104000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Given that I'm making my JS implementation from a grammar and a Ruby implementation, generating a Java implementation too wouldn't be difficult.","msgtype":"m.text"},"ts":1414156179000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"rubys: to be clear, the code for the URL (error-reporting) parser itself doesn't have to be a ContentHandler. I can wrap a ContentHandler for vnu around pretty much anything","msgtype":"m.text"},"ts":1414156211000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Java, at least, has sane classes.  JavaScript has a bunch of building blocks that can be used to build class like structures.","msgtype":"m.text"},"ts":1414156222000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1414156230000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"rubys: basically the only interface I need exposed is something I can use to create a URL object, and to get back any messages reported from the code that creates that object","msgtype":"m.text"},"ts":1414156330000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: doable","msgtype":"m.text"},"ts":1414156357000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"rubys: cool","msgtype":"m.text"},"ts":1414156531000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"rubys: if you want to peruse the existing vnu code which handles this, see https://github.com/validator/validator/blob/master/syntax/relaxng/datatype/java/src/org/whattf/datatype/IriRef.java#L126","msgtype":"m.text"},"ts":1414156558000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and https://github.com/validator/validator/blob/master/syntax/relaxng/datatype/java/src/org/whattf/datatype/IriRef.java#L173","msgtype":"m.text"},"ts":1414156568000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"rubys: I think the problem MikeSmith initially raised is that you dropped the \"parse error\" bits from the original specification","msgtype":"m.text"},"ts":1414156598000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"this is using Sebastian Mola's galimatias","msgtype":"m.text"},"ts":1414156600000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"rubys: yeah, what annevk said","msgtype":"m.text"},"ts":1414156612000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"rubys: making it impossible to tell whether e.g. \"<\" occurring at some point is at fault or not","msgtype":"m.text"},"ts":1414156622000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rubys: it's important to preserve that","msgtype":"m.text"},"ts":1414156629000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"with the \"parse error\" bit you can't create an error-reporting parser","msgtype":"m.text"},"ts":1414156638000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"*without","msgtype":"m.text"},"ts":1414156642000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk, MikeSmith: I even said so, right at the top.  This is totally in the spirit of \"release early and often\".  I know I can do parse errors, so I focused on what I didn't know.","msgtype":"m.text"},"ts":1414156666000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"sure, makes sense","msgtype":"m.text"},"ts":1414156677000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"... and in the process, I found even more that I didn't know.","msgtype":"m.text"},"ts":1414156686000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"meanwhile, I'm going to add more notes to the doc as to things that have yet to be done based on this input.","msgtype":"m.text"},"ts":1414156741000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"rubys: incidentially looking back at that vnu code, I see I'm just catching the GalimatiasParseException that galimatias throws for parse errors, and essentially just passing that on to the vnu error-handling/reporting code","msgtype":"m.text"},"ts":1414156776000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"rubys: prototype inheritance is drastically different from classical inheritance.","msgtype":"m.text"},"ts":1414156777000,"senderName":"boogy","senderId":"boogy@irc"},
{"content":{"body":"boogy: I was on TC39 for many years; nearly became the editor of that spec.","msgtype":"m.text"},"ts":1414156825000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"rubys: also incidentally if you want some early implementor feedback on your proposed approach, Sebastian Mola would be a good one to ask","msgtype":"m.text"},"ts":1414156836000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"rubys: https://github.com/smola/galimatias and https://github.com/smola","msgtype":"m.text"},"ts":1414156858000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"one of the first things I can do is add smola's implementation to http://intertwingly.net/stories/2014/10/16/urltest-results/","msgtype":"m.text"},"ts":1414156937000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"http://intertwingly.net/projects/pegurl/url.html#todos","msgtype":"m.text"},"ts":1414158153000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"rubys: ah yeah that would be great","msgtype":"m.text"},"ts":1414159627000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"rubys: I believe galimatias conforms to the spec on all the existing tests that are in the wpt repo","msgtype":"m.text"},"ts":1414159665000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"JakeA: can't things also break if someone has caches = ... or some such?","msgtype":"m.text"},"ts":1414161460000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: assigning to something that returns a collection","msgtype":"m.text"},"ts":1414161476000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: if someone did caches = \"blah\" wouldn't window.caches simply be \"blah\"?","msgtype":"m.text"},"ts":1414161527000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: e.g. navigator = \"test\";w(navigator) returns Navigator","msgtype":"m.text"},"ts":1414161532000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ohh","msgtype":"m.text"},"ts":1414161542000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"If there a way to make it overwritable?","msgtype":"m.text"},"ts":1414161588000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Is*","msgtype":"m.text"},"ts":1414161593000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I guess just don't make it [Unforgeable]","msgtype":"m.text"},"ts":1414161695000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Oh, we'd need to make it explicity [Replaceable]","msgtype":"m.text"},"ts":1414161792000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"explicitly*","msgtype":"m.text"},"ts":1414161810000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Is there a problem doing that?","msgtype":"m.text"},"ts":1414161822000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: ah yeah, that should probably work","msgtype":"m.text"},"ts":1414161958000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://github.com/slightlyoff/ServiceWorker/issues/535","msgtype":"m.text"},"ts":1414162257000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"ta","msgtype":"m.text"},"ts":1414162320000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is caches on window spec'd yet?","msgtype":"m.text"},"ts":1414162669000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: no :( will bump that issue","msgtype":"m.text"},"ts":1414162711000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: just curious if that will be in SW spec or somewhere else... since window is non-worker","msgtype":"m.text"},"ts":1414162732000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"kind of like how fetch was moved out to a separate spec","msgtype":"m.text"},"ts":1414162762000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: ideally caches should be a separate spec","msgtype":"m.text"},"ts":1414162814000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: random other question that came up over here... should scriptCache be per-origin or unique for each SW script?","msgtype":"m.text"},"ts":1414162900000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"ugh","msgtype":"m.text"},"ts":1414162970000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: how much do you like scriptCache? I dislike it","msgtype":"m.text"},"ts":1414162988000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"ohhh, wait, I can get rid of it on security grounds!","msgtype":"m.text"},"ts":1414163038000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"kisses security","msgtype":"m.emote"},"ts":1414163048000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: thats fine with me... but behind the scenes it should then be a separate cache per SW script URL?","msgtype":"m.text"},"ts":1414163119000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"or... should separate SW scripts within the same origin share or not share a single cache?","msgtype":"m.text"},"ts":1414163149000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"begins to understand the origin vs scope issue better.","msgtype":"m.emote"},"ts":1414163175000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: each SW version gets its own cache for itself and importScripts, but this cache doesn't show up in script access (eg caches.keys())","msgtype":"m.text"},"ts":1414163226000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: Fetch could host a Cache API section...","msgtype":"m.text"},"ts":1414163234000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not that farfetched","msgtype":"m.text"},"ts":1414163246000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: got it... I'll open an issue to clarify that in the spec","msgtype":"m.text"},"ts":1414163253000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I'll do it","msgtype":"m.text"},"ts":1414163267000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"already started","msgtype":"m.text"},"ts":1414163271000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: even better :-)  thanks!","msgtype":"m.text"},"ts":1414163275000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: I'm not against this moving to fetch. Would be good to get a 2nd opinion on that before moving it though.","msgtype":"m.text"},"ts":1414163323000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: happy to work on that together, but no rush","msgtype":"m.text"},"ts":1414163377000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: sorry, one last question... did we drop the Cache constructor thing?  its not in the spec and I don't see an issue for it","msgtype":"m.text"},"ts":1414163496000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I think maybe it got burried in the mega \"review cache api\" issue","msgtype":"m.text"},"ts":1414163526000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: in Aus next week, but then my talk commitments are over aside from MCing which doesn't need much prep. Hopefully I'll get some training wheels through this response client merging. Then yeah, will help move caches over.","msgtype":"m.text"},"ts":1414163584000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: https://github.com/slightlyoff/ServiceWorker/issues/473#issuecomment-60401602","msgtype":"m.text"},"ts":1414163891000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1414163920000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: appreciate how much you're soldiering through the cache implementation with pretty much only the ts & bare bones spec to go by","msgtype":"m.text"},"ts":1414163931000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"np, thanks for fielding all my questions :-)","msgtype":"m.text"},"ts":1414163966000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"trying to remember where we got to with new Cache","msgtype":"m.text"},"ts":1414163999000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: seems the conclusion was to add it: https://github.com/slightlyoff/ServiceWorker/issues/372#issuecomment-50937980","msgtype":"m.text"},"ts":1414164154000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"but that issue turned more towards the fetch data cloning, etc","msgtype":"m.text"},"ts":1414164170000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: creating a new issue to track it now","msgtype":"m.text"},"ts":1414164192000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"thanks again","msgtype":"m.text"},"ts":1414164199000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"well.. sort of... since I didn't really want the constructor :-)","msgtype":"m.text"},"ts":1414164211000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I'm not really into it either","msgtype":"m.text"},"ts":1414164241000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"highly recommended: https://soundcloud.com/daniemon/back-to-cr-one-more-time","msgtype":"m.text"},"ts":1414164257000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"darobin: that's great","msgtype":"m.text"},"ts":1414164370000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"darobin: he also made a few with Bruce while still at Opera, so much fun","msgtype":"m.text"},"ts":1414164386000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yes, he's a genius","msgtype":"m.text"},"ts":1414164415000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"I hope he brings back Dr Stanley Dards","msgtype":"m.text"},"ts":1414164425000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"darobin: so did Tim turn down HTML5?","msgtype":"m.text"},"ts":1414164468000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: you'd have to ask him :)","msgtype":"m.text"},"ts":1414164480000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"darobin: or is this not the entertaining note to go with the press release","msgtype":"m.text"},"ts":1414164487000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"this is completely unrelated","msgtype":"m.text"},"ts":1414164494000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"wanderview: https://github.com/slightlyoff/ServiceWorker/issues/536","msgtype":"m.text"},"ts":1414164533000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: how is alt #2 different from alt #1 if we make scope optional?","msgtype":"m.text"},"ts":1414164752000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: isn't that the difference?","msgtype":"m.text"},"ts":1414164756000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: personally I'd much rather make them origin-bound","msgtype":"m.text"},"ts":1414164772000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it's opt-in vs opt-out, and how close it is to the current API makes it easier for me to sell internally (less impact on our intent to ship)","msgtype":"m.text"},"ts":1414164868000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: I really think we need to keep scopes for all the reasons Jonas pointed out, plus github pages & similar host-per-user systems","msgtype":"m.text"},"ts":1414164919000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"origin-per-user I mean","msgtype":"m.text"},"ts":1414164930000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I think those can be solved later by suborigins","msgtype":"m.text"},"ts":1414165054000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: We could keep tweaking the root of this API for years and not actually deliver anything to developers and ultimately users. I don't think the separation of fetch is a big benefit vs getting us on the path to features native is kicking our arse with","msgtype":"m.text"},"ts":1414165078000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: understood about opt-out now, makes sense to have that","msgtype":"m.text"},"ts":1414165079000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: where should I read about suborigins?","msgtype":"m.text"},"ts":1414165118000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: http://www.chromium.org/developers/design-documents/per-page-suborigins","msgtype":"m.text"},"ts":1414165130000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: chromium.org could use TLS","msgtype":"m.text"},"ts":1414165152000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Chromium? Are they a new standards group?","msgtype":"m.text"},"ts":1414165157000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"runs away laughing","msgtype":"m.emote"},"ts":1414165161000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Will read, cheers","msgtype":"m.text"},"ts":1414165169000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"There's no excuse for a Google property not using TLS","msgtype":"m.text"},"ts":1414165188000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: hmm, seems chromium.org just needs a 80->443 redirect and HSTS","msgtype":"m.text"},"ts":1414165195000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"even less excuse then","msgtype":"m.text"},"ts":1414165219000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"lemmie chase that","msgtype":"m.text"},"ts":1414165223000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"so suborigins are basically an extra scoping http header","msgtype":"m.text"},"ts":1414165301000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: they allow you to create an actual security boundary for some set of resources","msgtype":"m.text"},"ts":1414165810000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: so yes, scoping with security guarantees rather than scoping without any","msgtype":"m.text"},"ts":1414165928000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"how can you keep reading those tweets and not feel sick to your stomach tab, jeeze","msgtype":"m.text"},"ts":1414166544000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: I'm managing by crying REAL MAN TEARS®.","msgtype":"m.text"},"ts":1414169104000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(・_・ヾ)???","msgtype":"m.text"},"ts":1414169656000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"MikeSmith: thanks","msgtype":"m.text"},"ts":1414173341000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"seems to be some issue with the mailing list","msgtype":"m.text"},"ts":1414174155000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i've sent in a support request","msgtype":"m.text"},"ts":1414174159000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"caitp: You referring to me?","msgtype":"m.text"},"ts":1414174349000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(My name being a noun makes it confusing when you don't capitalize it.)","msgtype":"m.text"},"ts":1414174364000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah, although I forget which retweet the comment was about","msgtype":"m.text"},"ts":1414174392000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"(The alternative, that you have a stomach tab, or think that other people do, is just confusing.)","msgtype":"m.text"},"ts":1414174400000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"something about jerks trying to harm survivors of domestic assault","msgtype":"m.text"},"ts":1414174415000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Possibly the AVFM people using another charity's trademark?","msgtype":"m.text"},"ts":1414174440000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"charming stories like that, can only read so much of it before you feel sick =p","msgtype":"m.text"},"ts":1414174464000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I, like, gsnedders use REAL MAN TEARS to cope.","msgtype":"m.text"},"ts":1414174481000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"whatever that is it must be working","msgtype":"m.text"},"ts":1414174506000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"It's like crying, but manlier.","msgtype":"m.text"},"ts":1414174517000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: https://www.w3.org/Bugs/Public/show_bug.cgi?id=27161","msgtype":"m.text"},"ts":1414174529000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"caitp: Also, I only follow awesome people, so when I see something horrible, it's filtered to be just the important stuff, rather than a deluge. Other people can do the curating for me.","msgtype":"m.text"},"ts":1414174818000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"you should forward the question to people who are actively watching the GG hashtag then :z all of the cherrypicked stuff from it seems pretty horrible","msgtype":"m.text"},"ts":1414174860000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: I occasionally look at the hashtag; it's a pretty representative sample that goes out so it's not much worse","msgtype":"m.text"},"ts":1414174920000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"is there a way to load a module via a string or a buffer?","msgtype":"m.text"},"ts":1414175108000,"senderName":"boogy","senderId":"boogy@irc"},
{"content":{"body":"sounds like an es-discuss question ^_^","msgtype":"m.text"},"ts":1414175138000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"seems like it would have the same issues as new Function(...) or eval() though","msgtype":"m.text"},"ts":1414175162000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"so maybe it hasn't been considered","msgtype":"m.text"},"ts":1414175170000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"can you not just use eval?","msgtype":"m.text"},"ts":1414175175000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"is the a channel or a mailing list?","msgtype":"m.text"},"ts":1414175178000,"senderName":"boogy","senderId":"boogy@irc"},
{"content":{"body":"boogy: mailling list.","msgtype":"m.text"},"ts":1414175191000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"es-discuss⊙mo","msgtype":"m.text"},"ts":1414175195000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Thanks. I'll refer the op in another channel where to find more info.","msgtype":"m.text"},"ts":1414175243000,"senderName":"boogy","senderId":"boogy@irc"},
{"content":{"body":"tries to imagine what an es-discuss IRC channel would be like","msgtype":"m.emote"},"ts":1414175285000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"less quiet than #v8, slightly noisier version of #jslang?","msgtype":"m.text"},"ts":1414175336000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"\"slightly\"","msgtype":"m.text"},"ts":1414175492000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"MikeSmith: boo :-P should i reassign that to anne? :-)","msgtype":"m.text"},"ts":1414175789000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"JakeA: I see Cache.add() and Cache.addAll() resolve with undefined... is that correct?","msgtype":"m.text"},"ts":1414177201000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"If I have a concern with the spec - notably the value of the range input type’s value attribute when multiple is set not being backward compatible, what is the best way to address that?","msgtype":"m.text"},"ts":1414179075000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"The value attribute, if specified, must have a value that is a pair of valid floating-point numbers separated by a single U+002C COMMA character (,).","msgtype":"m.text"},"ts":1414179077000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"that makes an invalid value for all browsers supporting range, but not the multiple attribute","msgtype":"m.text"},"ts":1414179101000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"Yeah, but you need a totally different fallback if you don't support multiple.","msgtype":"m.text"},"ts":1414179126000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"old browsers not support range should be ok: value=“2,4” is valid for text input type","msgtype":"m.text"},"ts":1414179130000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"You can feature-test tat.","msgtype":"m.text"},"ts":1414179137000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"are we expecting all developers to feature test multiple attribute before using it?","msgtype":"m.text"},"ts":1414179167000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"No, but if they don't, it wont' work.  There's no good automatic fallback.","msgtype":"m.text"},"ts":1414179202000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yes. exactly, that’s why I wanted to raise a concern","msgtype":"m.text"},"ts":1414179220000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"I don't mean \"there isn't currently good automatic fallback\".  I mean \"there's no way to do good automatic fallback\".","msgtype":"m.text"},"ts":1414179308000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1414179328000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"should the dual values be placed in separate attributes?","msgtype":"m.text"},"ts":1414179348000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"that doesn’t sound like a good solution,","msgtype":"m.text"},"ts":1414179361000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"but not having range value fail seems important","msgtype":"m.text"},"ts":1414179380000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"It doesn't matter, because it won't fallback properly.  A single-value range input is *not* a fallback for a multi-value range input.","msgtype":"m.text"},"ts":1414179382000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You need to test it and use two range inputs or something, or just use a multi-range input and not worry about older browsers.","msgtype":"m.text"},"ts":1414179403000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"obviously y’all have already thought this thru thoroughly.","msgtype":"m.text"},"ts":1414179431000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"Unsure if sarcastic or serious.","msgtype":"m.text"},"ts":1414179454000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"no, totally not","msgtype":"m.text"},"ts":1414179459000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"is having to say that too often these days. ^_^","msgtype":"m.emote"},"ts":1414179466000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"basically, yall have already thought of my concerns","msgtype":"m.text"},"ts":1414179471000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"Ah, kk.  Well, someone did.","msgtype":"m.text"},"ts":1414179481000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so i’ll go back to my life as usual ;)","msgtype":"m.text"},"ts":1414179481000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"I just reasoned backwards on the spot. ^_^","msgtype":"m.text"},"ts":1414179496000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hmm, multiple range","msgtype":"m.text"},"ts":1414179522000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"sounds like a bug","msgtype":"m.text"},"ts":1414179525000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: What do you mean?","msgtype":"m.text"},"ts":1414179583000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"what is the use case","msgtype":"m.text"},"ts":1414179599000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Specifying a value that ranges from A to B.","msgtype":"m.text"},"ts":1414179612000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Like, say, a work shift.","msgtype":"m.text"},"ts":1414179616000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"and why limit to two values if there is a use case","msgtype":"m.text"},"ts":1414179621000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"What's the use-case for more than two?","msgtype":"m.text"},"ts":1414179630000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ah, that kind of multiple","msgtype":"m.text"},"ts":1414179632000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: not sure how much thought went into not having a fallback, and where/when the discussing took place. But TabAtkins makes sense (always), but not having a native fallback is a concern","msgtype":"m.text"},"ts":1414179637000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"does any browser support range + multiple ?","msgtype":"m.text"},"ts":1414179652000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"nope","msgtype":"m.text"},"ts":1414179657000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"none","msgtype":"m.text"},"ts":1414179658000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"tested 2 weeks ago","msgtype":"m.text"},"ts":1414179664000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"though created my own tests, not official tests","msgtype":"m.text"},"ts":1414179689000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"TabAtkins: range contain more than just start and end points, it could have width (or would it be height ) in 2d coordinate space","msgtype":"m.text"},"ts":1414179747000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"s/contain/could contain/","msgtype":"m.text"},"ts":1414179760000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: That's more than a linear range input can represent.","msgtype":"m.text"},"ts":1414179779000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"multiple is already very different to non-multiple","msgtype":"m.text"},"ts":1414179796000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"wonders why multiple was added","msgtype":"m.emote"},"ts":1414179808000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Because lots of people asked for ti.","msgtype":"m.text"},"ts":1414179816000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(including me)","msgtype":"m.text"},"ts":1414179819000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"likely because everyone more than one thumb","msgtype":"m.text"},"ts":1414179825000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"multiple sounds like something a script library could do","msgtype":"m.text"},"ts":1414179830000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(I used jQuery for a two-thumb input on several previous projects.)","msgtype":"m.text"},"ts":1414179843000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"smaug____: *All* of the inputs sound like something a script library could do.","msgtype":"m.text"},"ts":1414179853000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"not all","msgtype":"m.text"},"ts":1414179860000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"<input type=\"text\"> is good :)","msgtype":"m.text"},"ts":1414179875000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"The new ones, at least. ^_^","msgtype":"m.text"},"ts":1414179886000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1414179893000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"JakeA: nevermind... I think I buy add/addAll resolving to undefined","msgtype":"m.text"},"ts":1414179939000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Where might I find information regarding the Window constructor?","msgtype":"m.text"},"ts":1414182094000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"JonathanNeal: Don't think there is one.","msgtype":"m.text"},"ts":1414182149000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Which means it'll throw when you call it.)","msgtype":"m.text"},"ts":1414182155000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Is constructor the wrong word to use? I mean it in the same vain as HTMLDocument and HTMLElement.","msgtype":"m.text"},"ts":1414182185000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Yeah, you're using it right.  There just isn't one.","msgtype":"m.text"},"ts":1414182235000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Windows are only constructed by the UA.","msgtype":"m.text"},"ts":1414182244000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"JonathanNeal, interface object","msgtype":"m.text"},"ts":1414182252000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"That's an IDL-ism.","msgtype":"m.text"},"ts":1414182261000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"JonathanNeal, you would find that in WebIDL and HTML","msgtype":"m.text"},"ts":1414182263000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"There most definitely is a “Window” interface object. I’m just looking for it in a spec of some sort.","msgtype":"m.text"},"ts":1414182280000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"TabAtkins, is there a reason you're being unhelpful?","msgtype":"m.text"},"ts":1414182281000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: I totally misunderstood what he was asking for until just now, that's why. ^_^","msgtype":"m.text"},"ts":1414182299000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1414182307000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"The constructor doesn't exist, but the corresponding object does.","msgtype":"m.text"},"ts":1414182312000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Dunno what you mean by constructor, then","msgtype":"m.text"},"ts":1414182353000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Yes, they’re rather strange in that I treat their prototypes like I would the constructor’s prototype for other objects.","msgtype":"m.text"},"ts":1414182360000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Ms2ger: An actual function that constructs the object.","msgtype":"m.text"},"ts":1414182411000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ms2ger: would this be the spec for the Window interface object? http://www.w3.org/TR/WebIDL/#ImplicitThis","msgtype":"m.text"},"ts":1414182451000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"JonathanNeal, oh dear","msgtype":"m.text"},"ts":1414182464000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"JonathanNeal, https://heycam.github.io/webidl/","msgtype":"m.text"},"ts":1414182476000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: I don’t mind looking like a fool, if in the end I learn.","msgtype":"m.text"},"ts":1414182479000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Ms2ger: as in https://heycam.github.io/webidl/#ImplicitThis ?","msgtype":"m.text"},"ts":1414182518000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Depends on what you're looking for, exactly","msgtype":"m.text"},"ts":1414182531000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Something that defines Window.prototype as extending all window objects.","msgtype":"m.text"},"ts":1414182607000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"That's from the definition of a prototype, no?","msgtype":"m.text"},"ts":1414182628000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Right, so the thing that clarifies that Window targets all window objects.","msgtype":"m.text"},"ts":1414182646000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Probably the IDL in the HTML spec for the Window object.","msgtype":"m.text"},"ts":1414182664000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It is their “interface object”.","msgtype":"m.text"},"ts":1414182666000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Searching for [[Prototype]] says https://heycam.github.io/webidl/#es-platform-objects","msgtype":"m.text"},"ts":1414182679000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Is there some reason you need this information?","msgtype":"m.text"},"ts":1414182687000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yes, I’m working with a team that did not have an understanding of Window and likewise Window.prototype, so they were swapping out Window.prototype with window. I was explaining that (I hope this is right) Window.prototype should mean iframes inherit from Window.prototype.","msgtype":"m.text"},"ts":1414182796000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"And they replied \"is there a good resource that explains the difference between Window and window” … and I paused because I did not know of one, and MDN did not have that sort of thing like they did for HTMLDocument, etc.","msgtype":"m.text"},"ts":1414182837000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"The difference is between instance and class.","msgtype":"m.text"},"ts":1414182854000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The \"window\" object is an instance of the Window class, which has Window.prototype as its prototype.","msgtype":"m.text"},"ts":1414182878000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"can you actually extend Window.prototype in a meaningful way? like, does window.open-created windows inherit from the original window's prototype?","msgtype":"m.text"},"ts":1414182914000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"(Iframes, with their own JS environment, will use a *different* Window class than the outer page, so anything you add to the outer page's Window.prototype won't show up in iframes.","msgtype":"m.text"},"ts":1414182921000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"caitp: Dunno!","msgtype":"m.text"},"ts":1414182928000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'm not sure how window.open()-created windows work, but if they have a fresh JS environment, then they won't.","msgtype":"m.text"},"ts":1414182949000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"They do","msgtype":"m.text"},"ts":1414182960000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"well in chrome, apparently not","msgtype":"m.text"},"ts":1414182962000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"yeah there you go","msgtype":"m.text"},"ts":1414182970000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"window.open() returns a Window, which is a global object","msgtype":"m.text"},"ts":1414182974000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"From the new window's global?  Or the original?  both of you were ambiguous in which part of my phrasing you were responding to.","msgtype":"m.text"},"ts":1414183032000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Eh?","msgtype":"m.text"},"ts":1414183058000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"i'm just saying I don't think extending Window's prototype is really useful in any context, as far as I'm aware","msgtype":"m.text"},"ts":1414183058000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"s/returns a/returns a new/","msgtype":"m.text"},"ts":1414183077000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"\"if they ahve a fresh JS environment\" or \"they they won't [inherit from the original window's prototype]\"","msgtype":"m.text"},"ts":1414183089000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If you call window.open(), you create a new Window object/global/compartment/realm/JS environment, whatever you want to call it","msgtype":"m.text"},"ts":1414183154000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Right you are, neither iframe or window.open’s window inherited from Window.prototype.","msgtype":"m.text"},"ts":1414183165000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Those are different!  A Window is an object in a JS environment.","msgtype":"m.text"},"ts":1414183175000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"At least, not in Chrome.","msgtype":"m.text"},"ts":1414183177000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Also happens to be the global for that environment.","msgtype":"m.text"},"ts":1414183182000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Global object and JS environment (as you appear to be using it) are 1:1","msgtype":"m.text"},"ts":1414183228000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"caitp: my initial test would confirm that extending Window.prototype is rather useless, which is not at all what I expected.","msgtype":"m.text"},"ts":1414183239000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"So as a mathematician, I just take the quotient over the equivalence, and treat them as equal :)","msgtype":"m.text"},"ts":1414183261000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: Yeah, it's probably valid to talk about it like you are, but if people are already confused about instances vs classes and the like, being as explicit as possible about environments and where certain classes come from is probably good.","msgtype":"m.text"},"ts":1414183286000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"JonathanNeal: extending Window.prototype can be rather useless also because of its special behavior http://heycam.github.io/webidl/#Global","msgtype":"m.text"},"ts":1414183342000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____, useless for overriding, not so much for adding","msgtype":"m.text"},"ts":1414183365000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"(and I note that better to not test webidl behavior in Chrome ;) )","msgtype":"m.text"},"ts":1414183365000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Ms2ger: indeed","msgtype":"m.text"},"ts":1414183377000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: Yes, good point.  Chrome has been violating WebIDL for a long time regarding whether properties of built-ins are on the prototype or the instances.","msgtype":"m.text"},"ts":1414183405000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"smaug____: what a disappointment. That’s a pretty useless class, all right.","msgtype":"m.text"},"ts":1414183418000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Yay web compat","msgtype":"m.text"},"ts":1414183441000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"to be fair, the bindings generation stuff is all python so it's really intimidating for anyone to try and fix it","msgtype":"m.text"},"ts":1414183511000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Does this mean that using HTMLDocument is also fairly useless?","msgtype":"m.text"},"ts":1414183547000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"not necessarily","msgtype":"m.text"},"ts":1414183589000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"not sure if DocumentImplementation#createDocument would work","msgtype":"m.text"},"ts":1414183599000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"if you create several HTMLDocument object in the same scope, they share the prototype","msgtype":"m.text"},"ts":1414183603000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"caitp: Nothing to do with programming difficulty in Blink; it's a perf issue.","msgtype":"m.text"},"ts":1414183622000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"JonathanNeal: HTMLDocuments aren't associated with fresh environments.  They're just like any other normal object.","msgtype":"m.text"},"ts":1414183652000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Tab I was just taking another opportunity to troll python fans :p","msgtype":"m.text"},"ts":1414183653000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"don't take it seriously lopl","msgtype":"m.text"},"ts":1414183662000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it's friday, oy","msgtype":"m.text"},"ts":1414183668000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: Ah, I thought you just had a mistaken impression of what was causing the issue.","msgtype":"m.text"},"ts":1414183685000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Friday is a time for sober reflection and formal dress, not trolling, SIR/MADAM/OTHER.)","msgtype":"m.text"},"ts":1414183709000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"sober reflection can wait until after the weekend =)","msgtype":"m.text"},"ts":1414183734000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Weekend is for drunk reflection.","msgtype":"m.text"},"ts":1414183744000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"caitp: when would I be creating a document? Fragments don’t inherit from HTMLDocument either.","msgtype":"m.text"},"ts":1414183785000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"DocumentImplementation can do it","msgtype":"m.text"},"ts":1414183806000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"document.implementation.createHTMLDocument()","msgtype":"m.text"},"ts":1414183819000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"When would someone need that?","msgtype":"m.text"},"ts":1414183835000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1414183884000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"apparently i'm getting the name of the interface wrong","msgtype":"m.text"},"ts":1414183892000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Well, what a crazy thing to learn, Window and HTMLDocument are rather useless in most usecases.","msgtype":"m.text"},"ts":1414183912000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"For example, there is no benefit to polyfilling Window.prototype.matchMedia versus window.matchMedia.","msgtype":"m.text"},"ts":1414183971000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"never liked polyfills anyway","msgtype":"m.emote"},"ts":1414183994000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"http://stackoverflow.com/questions/7738046/what-for-to-use-document-implementation-createhtmldocument there are some use-cases there if you're interested, I've only ever found it useful for testing though","msgtype":"m.text"},"ts":1414184182000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"thanks, caitp.","msgtype":"m.text"},"ts":1414184401000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"I need to hang my head low for a while. I had pretty much written things to get old IE to treat Window/HTMLDocument like I expected, but I think I should undo them now because it’s not how it’s supposed to work.","msgtype":"m.text"},"ts":1414184448000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"annevk: thoughts on making DOMTokenList constructable? I'd like to write a Blink patch soon-ish but want to get your blessing first.","msgtype":"m.text"},"ts":1414184756000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"And preferably Boris's too","msgtype":"m.text"},"ts":1414184760000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: what would you use it for?","msgtype":"m.text"},"ts":1414184920000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"JonathanNeal: creating custom elements that expose tokenized attributes","msgtype":"m.text"},"ts":1414184952000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"function TokenList() {} TokenList.prototype = DOMTokenList.prototype ?","msgtype":"m.text"},"ts":1414185102000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Or you could even overwrite the DOMTokenList contructor, I suppose. I had to do something similar with https://github.com/Financial-Times/polyfill-service/blob/master/polyfills/Window.prototype.DOMTokenList/polyfill.js and https://github.com/Financial-Times/polyfill-service/blob/master/polyfills/Element.prototype.classList/polyfill.js","msgtype":"m.text"},"ts":1414185199000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"I can’t believe I misunderstood Window/HTMLDocument. Thanks so much for the info, caitp, Ms2ger, TabAtkins.","msgtype":"m.text"},"ts":1414185642000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"np","msgtype":"m.text"},"ts":1414185647000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Np","msgtype":"m.text"},"ts":1414185670000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"On the upside, polyfills will be a lot easier to manage, and I can drop all the Window/HTMLDocument.prototype stuff from the folders.","msgtype":"m.text"},"ts":1414185742000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Hmm, I'm reading WebIDL back and forth, and I can't see how to define the iteration order for a setlike interface.  IDL requires that a setlike does *not* have an explicit iterable declaration, but only the iterable declaration actually asks for prose on ordering.","msgtype":"m.text"},"ts":1414186807000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i think the idea might be it's always insertion order, like ES sets?","msgtype":"m.text"},"ts":1414186909000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah, but I have some custom ordering.  It's insertion order for the ones you insert yourself, but the UA-added ones are in document order, before the other ones.","msgtype":"m.text"},"ts":1414187029000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Exposing precise UA resolution order isn't really something I want to do - too racy.)","msgtype":"m.text"},"ts":1414187068000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: my guess is that kind of thing wasn't anticipated, so I'd just specify the ordering in the prose anyway?","msgtype":"m.text"},"ts":1414187110000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah, that's what I'm doing right now.","msgtype":"m.text"},"ts":1414187120000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"JonathanNeal: I was excited about that idea for a second but when you try that you get \"TypeError: 'add' called on an object that does not implement interface DOMTokenList.\"","msgtype":"m.text"},"ts":1414187128000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"What?! Oh, what a bummer. It gets all special?","msgtype":"m.text"},"ts":1414187463000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Well, you can take the DOMTokenlist polyfill. That implements to spec, down to method.name and method.length","msgtype":"m.text"},"ts":1414187490000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"}
]