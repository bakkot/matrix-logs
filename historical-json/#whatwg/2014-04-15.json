[
{"content":{"body":"morning","msgtype":"m.text"},"ts":1397555613000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"*shakes fist at pointer events specification*","msgtype":"m.text"},"ts":1397558189000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: partially addressed your domain bug","msgtype":"m.text"},"ts":1397567896000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Updated the URL Standard to resolve IDNA issues.","msgtype":"m.text"},"ts":1397567913000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mathiasbynens: jtcranmer: I made the domain statics return the empty string in case the result was failure or an IPv6 address","msgtype":"m.text"},"ts":1397567939000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"looks","msgtype":"m.emote"},"ts":1397567947000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: http://url.spec.whatwg.org/#valid-domain","msgtype":"m.text"},"ts":1397567963000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah \"valid domain\" cool","msgtype":"m.text"},"ts":1397567965000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: thanks for the heads up","msgtype":"m.text"},"ts":1397567968000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"hah \"Ideally we define this in terms of a sequence of code points that make up a valid domain rather than through a whack-a-mole\" üêô","msgtype":"m.text"},"ts":1397568050000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"me wonders out of curiosity under what cases Unicode ToASCII fails","msgtype":"m.text"},"ts":1397568200000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and Unicode ToUnicode","msgtype":"m.text"},"ts":1397568218000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"just DNS length restrictions?","msgtype":"m.text"},"ts":1397568269000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ah nah, more","msgtype":"m.text"},"ts":1397568303000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"can \"Convert each label with non-ASCII characters into Punycode\" fail?","msgtype":"m.text"},"ts":1397568337000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I think Punycode does not fail","msgtype":"m.text"},"ts":1397568634000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1397568764000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I might be wrong, http://tools.ietf.org/html/rfc3492 lists a number of \"fail\" conditions in the pseudo-algorithms, but they are hard to decipher","msgtype":"m.text"},"ts":1397568803000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"looks","msgtype":"m.emote"},"ts":1397568820000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"\"fail on overflow\"","msgtype":"m.text"},"ts":1397568860000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"mathiasbynens might know","msgtype":"m.text"},"ts":1397568987000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: btw the validator just uses galimitas which for toASCII just uses http://docs.oracle.com/javase/6/docs/api/java/net/IDN.html which claims to conform to RFC 3490","msgtype":"m.text"},"ts":1397569014000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: that sounds pretty bogus","msgtype":"m.text"},"ts":1397569033000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: the whole idea that IDNA is Punycode is misguided","msgtype":"m.text"},"ts":1397569050000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: and galimatis reports \"Could not convert domain to ASCII\" if it fails, and the validator just catches that and emits it","msgtype":"m.text"},"ts":1397569055000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: oh wait, 3490, that's somewhat correct, except it is IDNA2003 and not UTS #46","msgtype":"m.text"},"ts":1397569282000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah","msgtype":"m.text"},"ts":1397569303000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: but UTS #46 just references RFC3490 for toASCII, right?","msgtype":"m.text"},"ts":1397569336000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: no","msgtype":"m.text"},"ts":1397569367000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1397569372000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: http://www.unicode.org/reports/tr46/proposed.html#ToASCII it defines an operation like RFC 3490, but with a twist","msgtype":"m.text"},"ts":1397569411000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah \"The operation corresponding to ToASCII of [RFC3490] is defined by the following steps\"","msgtype":"m.text"},"ts":1397569431000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: yeah I see now","msgtype":"m.text"},"ts":1397569440000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I had misread it the first time","msgtype":"m.text"},"ts":1397569448000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I wish they would just remove the 3490 bit","msgtype":"m.text"},"ts":1397569450000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: bingo","msgtype":"m.text"},"ts":1397569457000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I was about to say the same thing","msgtype":"m.text"},"ts":1397569464000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"This whole concept of acknowledging history at the same place you define fundamental algorithms is totally misguided","msgtype":"m.text"},"ts":1397569480000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1397569487000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and mention of 3490 should be in a note following the algorithm -- if there's any mention at all","msgtype":"m.text"},"ts":1397569544000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and even then it should do what the HTML spec does, and clearly state, \"This is a wilful violation of RFC 3490\"","msgtype":"m.text"},"ts":1397569588000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"or that it \"replaces\" the corresponding part of 3490, or whatever","msgtype":"m.text"},"ts":1397569615000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"smola: ‚Üë","msgtype":"m.text"},"ts":1397569868000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I guess there's no Java library that implements UTS #46","msgtype":"m.text"},"ts":1397569912000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"At some point we should write some guidance on writing specifications","msgtype":"m.text"},"ts":1397569935000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah that would be good","msgtype":"m.text"},"ts":1397570067000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"though I reckon many spec writers would still ignore it","msgtype":"m.text"},"ts":1397570095000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: btw I think the reason some devs use XPath instead of querySelector is just inertia","msgtype":"m.text"},"ts":1397570137000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I was thinking they might, especially those that already write specifications","msgtype":"m.text"},"ts":1397570197000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: reading dev.platform? :-)","msgtype":"m.text"},"ts":1397570219000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: about specs yeah I guess some part of the badness is just ignorance about how to write specs more precisely","msgtype":"m.text"},"ts":1397570263000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: the RDFa editors sure would have benefitted from some guidance","msgtype":"m.text"},"ts":1397570287000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Ha","msgtype":"m.text"},"ts":1397570327000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Seems like CSS might too. RFC 2119 usage is often incorrect. Concepts such as \"sibling\" are used without definition...","msgtype":"m.text"},"ts":1397570336000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"On the other hand their usage of RFC 6919 is examplary","msgtype":"m.text"},"ts":1397570393000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: yeah, I think those devs could just replace their XPath expressions with selectors equivalents with very little effort","msgtype":"m.text"},"ts":1397570398000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"jgraham: seems like you found an RFC that allows the W3C to take HTML to REC","msgtype":"m.text"},"ts":1397570440000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But it is true that CSS can't yet do all the things that xpath can","msgtype":"m.text"},"ts":1397570460000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"XPath can do crazy things like \"find an a containing the text 'foo' and give me the href attribute of its siblings' third ancestor\"","msgtype":"m.text"},"ts":1397570507000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: yeah but I doubt most of them are using xpath expressions that don't have selectors equivalents","msgtype":"m.text"},"ts":1397570528000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I bet a lot of the Selenium users are","msgtype":"m.text"},"ts":1397570547000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: right. the thing is if they're doing that the performance is probably pretty bad anyway","msgtype":"m.text"},"ts":1397570562000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I wouldn't be surprised if some of the extension users were too","msgtype":"m.text"},"ts":1397570569000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"What, using Selenium?","msgtype":"m.text"},"ts":1397570577000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: well this is in the context of web applications","msgtype":"m.text"},"ts":1397570586000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and browser extensions","msgtype":"m.text"},"ts":1397570594000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"For browser extensions being able to do things like conveniently get the text out of attributes is nice to have","msgtype":"m.text"},"ts":1397570636000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: I mean those extensions would probably be causing a performance hit","msgtype":"m.text"},"ts":1397570638000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah I can see that","msgtype":"m.text"},"ts":1397570647000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: It's not clear to me why they would cause a noticable perf. hit","msgtype":"m.text"},"ts":1397570668000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Is our XPath support notably slow?","msgtype":"m.text"},"ts":1397570682000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Faster than the polyfill in IE, apparently","msgtype":"m.text"},"ts":1397570706000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"To get back to the pointer events thing... \"If you can propose spec text that might make this clearer, I'm happy to take a look.\" is such a shitty response. Editors not taking responsibility for problems are the worst","msgtype":"m.text"},"ts":1397570809000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"even nowadays? how good is the polyfill?","msgtype":"m.text"},"ts":1397570813000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"If you get enough of that you can basically declare \"Specification Lost\"","msgtype":"m.text"},"ts":1397570832000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Context: http://lists.w3.org/Archives/Public/public-pointer-events/2014AprJun/0012.html","msgtype":"m.text"},"ts":1397570867000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: But your XPath support is far slower than CSS selectors.","msgtype":"m.text"},"ts":1397570880000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Well, for the things that CSS can't do, the relevant comparison is CSS + custom js code","msgtype":"m.text"},"ts":1397571106000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: Right, but in the case of them being equiv CSS selectors win. I'm pretty sure most of the polyfills could be more efficient. And String.prototype.indexOf uses naive search in everything but Chakra (le sigh).","msgtype":"m.text"},"ts":1397571219000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"as opposed to a KMP search?","msgtype":"m.text"},"ts":1397571282000,"senderName":"jtcranmer","senderId":"jtcranmer@irc"},
{"content":{"body":"jtcranmer: or similar, yes","msgtype":"m.text"},"ts":1397571326000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"for most use cases of String.indexOf, I'd expect KMP-like searches to have much higher overhead","msgtype":"m.text"},"ts":1397571357000,"senderName":"jtcranmer","senderId":"jtcranmer@irc"},
{"content":{"body":"jtcranmer: Yeah, certainly especially when searching small strings it's likely not worthwhile","msgtype":"m.text"},"ts":1397571420000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jtcranmer: I've seen cases where the cost of the naive string search algorithm was a notable bottleneck, though","msgtype":"m.text"},"ts":1397571452000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I don't doubt that","msgtype":"m.text"},"ts":1397571608000,"senderName":"jtcranmer","senderId":"jtcranmer@irc"},
{"content":{"body":"Sure, like everything in js you want to dynamically switch to more efficient algorithms when you detect it is likely to be worthwhile","msgtype":"m.text"},"ts":1397571693000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: Nobody does that (except for some never-merged (AFAIK) branch of Carakan) for indexOf though.","msgtype":"m.text"},"ts":1397572009000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"And with some text nodes that's likely to make a difference with contains in XPath","msgtype":"m.text"},"ts":1397572023000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders, I thought spidermonkey did something of the kind","msgtype":"m.text"},"ts":1397573305000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: tbf, this was a few years back I was looking, but I didn't see any such behaviour?","msgtype":"m.text"},"ts":1397573442000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Ms2ger: I could've missed something, though","msgtype":"m.text"},"ts":1397573456000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"sibling's third ancestor? sounds a bit redundant ...","msgtype":"m.text"},"ts":1397573803000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"OK, fair enough :p","msgtype":"m.text"},"ts":1397573909000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But the point was that you can do more complex things in XPath than CSS Selectors","msgtype":"m.text"},"ts":1397573927000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"can't help but wonder if an implementation would notice and optimize that out","msgtype":"m.emote"},"ts":1397573943000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"hmm, actually, I guess it might do something: what if the sibling in question wasn't there ...","msgtype":"m.text"},"ts":1397573995000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Well, I mean //a::text()[contains(., 'foo')]/following-sibling::*[position()==1]/ancestor::*[position()==3]/@href is what jgraham was talking about","msgtype":"m.text"},"ts":1397574140000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"SamB: Yeah, indeed, thus why that's important","msgtype":"m.text"},"ts":1397574154000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(There are other equivalent queries, it must be said)","msgtype":"m.text"},"ts":1397574180000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":" //a::text()[contains(., 'foo') && following-sibling::*]/ancestor::*[position()==3]/@href for example moves the selection of following sibling","msgtype":"m.text"},"ts":1397574254000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"JakeA: this is kind of cool https://www.npmjs.org/package/es6-promisify","msgtype":"m.text"},"ts":1397577474000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: Ohh, that's cool. Although rsvp will do it out of the box","msgtype":"m.text"},"ts":1397577806000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: Uh, you know that I meant that \"if you can propose something\" sincerely, right? I\"m not just brushing you off? Because I'm not a huge dick?","msgtype":"m.text"},"ts":1397581819000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oh, sorry, missed context. That was Pointer Events.","msgtype":"m.text"},"ts":1397581856000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I said something similar to you yesterday, so I wasn't sure.","msgtype":"m.text"},"ts":1397581864000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":";-)","msgtype":"m.text"},"ts":1397581872000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"TabAtkins: you are huge though","msgtype":"m.text"},"ts":1397582468000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"True, but I'm not literally a dick.","msgtype":"m.text"},"ts":1397582481000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And ::blushes:: don't share secrets, dude.","msgtype":"m.text"},"ts":1397582492000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I thought that was special between us.","msgtype":"m.text"},"ts":1397582497000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: dude, I was referring to your height, not that ‚Ä¶","msgtype":"m.text"},"ts":1397582562000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Mm hm.","msgtype":"m.text"},"ts":1397582569000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"tut tut","msgtype":"m.text"},"ts":1397582579000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: see http://www.slideshare.net/fullscreen/dakami/black-ops-2012/39 through at least 42 re: what's the point of using JSON ...","msgtype":"m.text"},"ts":1397583822000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"wonders if there's some way to prevent <img> from attempting HTTP authentication ... goes to read spec ...","msgtype":"m.emote"},"ts":1397586139000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"mutters something about the seemingly random page splitting in the HTML spec ...","msgtype":"m.emote"},"ts":1397586304000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Hixie: Would you be willing to push harder on the WHATCG thing?  plinss is refusing to point Bikeshed's link refs to the WHATWG HTML spec, because we won't be allowed to publish RECs with it.","msgtype":"m.text"},"ts":1397587039000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"what's WHATCG supposed to be?","msgtype":"m.text"},"ts":1397587096000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: The page splitting is done by hand, and was done a long time ago. At that point the splits were roughly even, but the spec has changed a lot since then.","msgtype":"m.text"},"ts":1397587097000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: it's nothing to do with \"evenness\"","msgtype":"m.text"},"ts":1397587110000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"A Community Group whose sole purpose is to publish heartbeats fo the WHATWG HTML spec regularly, and get the browsers to sign off on them for patent policy purposes.","msgtype":"m.text"},"ts":1397587130000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"just looks kind of silly going to #the-img-element and seeing a title of \"4.6 Edits\"","msgtype":"m.text"},"ts":1397587159000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"TabAtkins: ah, so the W3C has an actual *reason* for not wanting to link to WHATWG specs?","msgtype":"m.text"},"ts":1397587185000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Patent Policy, as always, is the bugaboo.","msgtype":"m.text"},"ts":1397587200000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"one more practical than \"but you keep changing it\", even","msgtype":"m.text"},"ts":1397587236000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Yeah, that one's just people being jackasses.","msgtype":"m.text"},"ts":1397587247000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"since we all know how well that works with e.g. Unicode references ...","msgtype":"m.text"},"ts":1397587266000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"now \"but you keep breaking our links\" would be a real reason, of course","msgtype":"m.text"},"ts":1397587337000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"who knows things about interactions between ES6 collections and WindowProxy? I'd expect bz, but I don't see him around.","msgtype":"m.text"},"ts":1397589492000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"TabAtkins: but it's the EDs that matter; RECs are just for lawyers. Can't that be a pre-REC last-minute-change?","msgtype":"m.text"},"ts":1397590160000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Hm, I'd have to do some Bikeshed hacking, but maybe.","msgtype":"m.text"},"ts":1397590187000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(IMO adding a big old \"just for lawyers\" disclaimer to anything in TR/ seems like a worthwhile thing to do.)","msgtype":"m.text"},"ts":1397590221000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"TabAtkins: awesome that you're pushing on this.","msgtype":"m.text"},"ts":1397590247000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"aklein: You were looking for me?","msgtype":"m.text"},"ts":1397590808000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"woah it's bz on IRC! :O","msgtype":"m.text"},"ts":1397591125000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"was summoned","msgtype":"m.emote"},"ts":1397591245000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"Also, I'm always on IRC.","msgtype":"m.text"},"ts":1397591251000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"Just not on this network.  ;)","msgtype":"m.text"},"ts":1397591255000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"bz_moz: back from lunch, still around?","msgtype":"m.text"},"ts":1397592042000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"bz_moz: I'm curious what should happen if one uses passes a Window as the key to an ES6 Map/Set (or WeakMap/WeakSet)","msgtype":"m.text"},"ts":1397592092000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"Hmm","msgtype":"m.text"},"ts":1397592128000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"is the 'no links to WHATWG specs' even followed consistently?","msgtype":"m.text"},"ts":1397592151000,"senderName":"sgalineau","senderId":"sgalineau@irc"},
{"content":{"body":"wild guess: probably not","msgtype":"m.text"},"ts":1397592160000,"senderName":"sgalineau","senderId":"sgalineau@irc"},
{"content":{"body":"aklein: Excellent question","msgtype":"m.text"},"ts":1397592165000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"aklein: I _think_ Gecko+SpiderMonkey uses the windowproxy as-is as the key","msgtype":"m.text"},"ts":1397592235000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"aklein: and in particular, that you can use it as a key across navigations","msgtype":"m.text"},"ts":1397592248000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"bz_moz: that's what it looks like from a quick test","msgtype":"m.text"},"ts":1397592249000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"Domenic_: why couldn't a buffering strategy be passed to the ctor?","msgtype":"m.text"},"ts":1397592258000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"aklein: But that's based on code inspection, not experiment","msgtype":"m.text"},"ts":1397592259000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"bz_moz: the current Blink/V8 implementation does the opposite","msgtype":"m.text"},"ts":1397592263000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"sicking: there is no ctor in the channel proposal","msgtype":"m.text"},"ts":1397592269000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: aah, \"Channel()\" vs. \"new Channel()\"?","msgtype":"m.text"},"ts":1397592311000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"aklein: Exciting","msgtype":"m.text"},"ts":1397592315000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"sicking: yeah. Which brings up the question of how input and output came to be. What are they instances of, etc.","msgtype":"m.text"},"ts":1397592327000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"bholley: Good.  You're needed in this conversation.  ;)","msgtype":"m.text"},"ts":1397592336000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"bholley: topic: windows as keys for map/set/weakmap","msgtype":"m.text"},"ts":1397592346000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"bz_moz: I've also heard some argue that it they should throw","msgtype":"m.text"},"ts":1397592352000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"bholley: aklein says that Blink/V8 uses the Window in this case","msgtype":"m.text"},"ts":1397592364000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"bholley: Gecko uses the WindowProxy","msgtype":"m.text"},"ts":1397592372000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"bz_moz: can't talk right now - send me mail?","msgtype":"m.text"},"ts":1397592389000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"or, alternatively, that Ecmascript should decide how Proxies work and try to use that behavior","msgtype":"m.text"},"ts":1397592390000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: an interesting factor here from Gecko's pov is that our security membranes are around the WindowProxy, not the Window","msgtype":"m.text"},"ts":1397592402000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"bholley: ok","msgtype":"m.text"},"ts":1397592404000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"Domenic_: you'll probably not like the answer :)","msgtype":"m.text"},"ts":1397592405000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"exactly","msgtype":"m.text"},"ts":1397592416000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"aklein: so any time you might have a cross-global reference it ends up going through WindowProxy","msgtype":"m.text"},"ts":1397592428000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"Domenic_: they can test true for \"readable instanceof ReadableStream\". But you wouldn't be able to instantiate a ReadableStream directly","msgtype":"m.text"},"ts":1397592446000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Domenic_: it's unclear to me what downside that has though","msgtype":"m.text"},"ts":1397592455000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"aklein: and as a side note, a self-hosted set implementation would end up using the WindowProxy always, since you can't get at Window from script.","msgtype":"m.text"},"ts":1397592461000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"bz_moz: when I say that V8 stores the Window, I just mean that the Window is what's used to generate the hash code/check for equality","msgtype":"m.text"},"ts":1397592466000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"sicking: how did that ReadableStream get created in the first place?","msgtype":"m.text"},"ts":1397592467000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: i know Alex likes to beat the \"everything should have a constructor\" drum, but i'm not convinced","msgtype":"m.text"},"ts":1397592483000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"aklein: right, so once you navigate, your key's identity changes","msgtype":"m.text"},"ts":1397592497000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"aklein: effectively","msgtype":"m.text"},"ts":1397592503000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"bz_moz: right","msgtype":"m.text"},"ts":1397592523000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: this seems like a siuation where we should go back to use caes...","msgtype":"m.text"},"ts":1397592541000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"bz_moz: self-hosting point is interesting...do you get the impression that WindowProxy is indeed implementable using ES6 Proxies?","msgtype":"m.text"},"ts":1397592545000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"er, cases","msgtype":"m.text"},"ts":1397592545000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"aklein: Not fully","msgtype":"m.text"},"ts":1397592573000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"sicking: well how did those objects get created in the first place, if not by constructors?","msgtype":"m.text"},"ts":1397592588000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"aklein: The part that is not implementable, imo, is having \"this\" return the windowproxy at global scope","msgtype":"m.text"},"ts":1397592592000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"bz_moz: ah, I guess I care less about that for these purposes","msgtype":"m.text"},"ts":1397592626000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: And perhaps some weirdness in terms of bareword getter invocations on the global and the this object those getters see","msgtype":"m.text"},"ts":1397592646000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"Apart from that I think it is, yes","msgtype":"m.text"},"ts":1397592651000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"windowproxy is not really very magic in terms of what it does.","msgtype":"m.text"},"ts":1397592670000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"Domenic_: they can be just plain \"dictionaries\" but with a .prototype set to ReadableStream","msgtype":"m.text"},"ts":1397592685000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"bholley has a proposed spec for it... lemme dig it up","msgtype":"m.text"},"ts":1397592686000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"sicking: how were they created, though?","msgtype":"m.text"},"ts":1397592707000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: new Object()","msgtype":"m.text"},"ts":1397592718000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"bz_moz: anyway, V8 folks are inclined to switch to something like the SpiderMonkey semantics, but it smelled kinda funny to me; if expandos disappear with navigation, why not \"private\" expandos implemented using WeakMap?","msgtype":"m.text"},"ts":1397592724000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"sicking: so how do you access their internal state?","msgtype":"m.text"},"ts":1397592741000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"sicking: wait for my reply in-thread","msgtype":"m.text"},"ts":1397592745000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: how is this different from the object that's passed to the ReadableStream constructor?","msgtype":"m.text"},"ts":1397592775000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"aklein: So the main reason expandos disappear on navigation is to prevent sites polluting each others global scopes","msgtype":"m.text"},"ts":1397592796000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"aklein: at least that's how it started","msgtype":"m.text"},"ts":1397592804000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"aklein: that would not be an issue in the weakmap case","msgtype":"m.text"},"ts":1397592815000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"aklein: but yes, I agree it could be a bit weird","msgtype":"m.text"},"ts":1397592825000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"Domenic_: ReadableStream also has a bunch of internal state which can't be accessed from the outside. The only difference here is that both sides could be tested with instanceof","msgtype":"m.text"},"ts":1397592837000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"aklein: I _really_ wish we had distinct objects representing \"the navigation context\" and \"the global currently inside the navigation context\"","msgtype":"m.text"},"ts":1397592846000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"aklein: instead of the mess we have right now","msgtype":"m.text"},"ts":1397592851000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"sicking: the revealing constructor pattern *explains* how you can have access to something's internals","msgtype":"m.text"},"ts":1397592869000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"aklein: But I can't have that pony....","msgtype":"m.text"},"ts":1397592875000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"Domenic_: i don't see the difference","msgtype":"m.text"},"ts":1397592884000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"oh, wait, i think i read that wrong","msgtype":"m.text"},"ts":1397592934000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Domenic_: nm","msgtype":"m.text"},"ts":1397592937000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: between `var x = {}; x.__proto__ = ReadableStream.prototype; addABunchOfInternalStateTo(x); manipulateInternalStateOf(x);` and `var x = new ReadableStream(manipulateInternalState)`?","msgtype":"m.text"},"ts":1397592948000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"sicking: there is not much difference besides the former is awkward and tries to dodge JS constructor semantics all the while reinventing them; while the latter uses the language as it is.","msgtype":"m.text"},"ts":1397592976000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"the resulting ReadableStream interface seems identical, no?","msgtype":"m.text"},"ts":1397593053000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Domenic_: i'm not married to how you construct these things","msgtype":"m.text"},"ts":1397593100000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"bz_moz: sounds like this ought to be a public-script-coord thread?","msgtype":"m.text"},"ts":1397593104000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"Domenic_: one option is to simply do somehting like this","msgtype":"m.text"},"ts":1397593107000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Domenic_: `var x = new ReadableStream((WritableStream) => { ... })`","msgtype":"m.text"},"ts":1397593142000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"aklein: yes","msgtype":"m.text"},"ts":1397593198000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"Domenic_: if you prefer that over `{ readable, writable } = <new> Channel()` then i'm fine with that too","msgtype":"m.text"},"ts":1397593202000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"aklein: we should figure out use cases","msgtype":"m.text"},"ts":1397593203000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"aklein: like \"associate stuff with this window\" vs \"associate stuff with the stuff currently in this window\".  :(","msgtype":"m.text"},"ts":1397593221000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"aklein: maybe we need both behaviors in different cases or some such insanity.  :(","msgtype":"m.text"},"ts":1397593233000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"bz_moz: those are indeed the use cases  :)","msgtype":"m.text"},"ts":1397593235000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"bz_moz: the current HTML spec text tends towards the latter: \"This object is unusual in that all operations that would be performed on it must be performed on the Window object of the browsing context's active document instead\". But I suspect that wasn't considering object identity to be a thing","msgtype":"m.text"},"ts":1397593287000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"sicking: see my longer post https://github.com/whatwg/streams/issues/102#issuecomment-40442921 where I analyze that possibility","msgtype":"m.text"},"ts":1397593300000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"sicking: you can't get away with just that. it needs to be more like `new ReadableStream({ start(ws) { .. }, pull(ws) { ... }, cancel() { ... } })`","msgtype":"m.text"},"ts":1397593348000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"sicking: and at that point the difference between (push, done, error)` and `({ write, close, abort })` is simply that the latter implies a false symmetry whereas the former communicates the underlying semantics more clearly.","msgtype":"m.text"},"ts":1397593392000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: i guess i care less about how these things are constructed. I'd prefer to optimize for having a simple API.","msgtype":"m.text"},"ts":1397593407000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Domenic_: I agree it's a tricky situation since we want to create a pair of objects that have an inherent connection to each other","msgtype":"m.text"},"ts":1397593434000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: for sure. I think they're not that bad though. I think you're really feeling the lack of a transform stream helper.","msgtype":"m.text"},"ts":1397593435000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: no, my main concern is too much API surface, not a lack of sugar","msgtype":"m.text"},"ts":1397593478000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"bz_moz: while I have you around I also wanted to pick your brain about what ES6 should do about the notion of the \"entry settings object\" in HTML (which is also just now coming up in the Blink/V8 implementation of Promises)","msgtype":"m.text"},"ts":1397593499000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"sicking: OK, fair. But I think we're solving a large problem and doing it without the benefit of magic to hide API surface from us.","msgtype":"m.text"},"ts":1397593509000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"bz_moz: annevk helpfully pointed me to a recent es-discuss thread on the issue but I didn't see any conclusion","msgtype":"m.text"},"ts":1397593519000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: There wasn't any","msgtype":"m.text"},"ts":1397593525000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"sicking: if you look at the old W3C streams draft they had no constructors, which achieves the level of simplicity you are aiming at, but of course at the cost of lack of explanatory power.","msgtype":"m.text"},"ts":1397593535000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"sicking: the actual consumer-level API surface is pretty simple.","msgtype":"m.text"},"ts":1397593541000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"aklein: I gave up trying to convince people that this needs solving, for now","msgtype":"m.text"},"ts":1397593575000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"aklein: though of course it does need solving.","msgtype":"m.text"},"ts":1397593581000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"bz_moz: the highest-level question I had was \"how important is this concept for new APIs?\"","msgtype":"m.text"},"ts":1397593581000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"Domenic_: actually, i think it'd work if we just create something like `new ReadableStream((wriablestream) => { ... })`","msgtype":"m.text"},"ts":1397593588000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"bz_moz: it seems like only a few DOM APIs depend on it","msgtype":"m.text"},"ts":1397593600000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: it's basically needed for any API that can call from \"the platform\" into \"user script\", whatever that means","msgtype":"m.text"},"ts":1397593621000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"Domenic_: the writablestream could have a constructor which you need to pass some internal communication object","msgtype":"m.text"},"ts":1397593625000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Domenic_: then ReadableStream could create that internal communication object","msgtype":"m.text"},"ts":1397593644000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"aklein: WebIDL currently defines that to be any time a WebIDL callback or callback interface is invoked","msgtype":"m.text"},"ts":1397593649000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"Domenic_: hrm... we'd still be left with that internal communication object being exposed as an API surface but that no-one should use ever","msgtype":"m.text"},"ts":1397593669000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Domenic_: no-one other than ReadableStream that is","msgtype":"m.text"},"ts":1397593680000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"bz_moz: I thought this was defined by HTML...maybe it's moved? I did see Hixie asking heycam|away to change something about this","msgtype":"m.text"},"ts":1397593686000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: HTML defines the settings object stack, kinda","msgtype":"m.text"},"ts":1397593727000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"aklein: WebIDL defines how it's used","msgtype":"m.text"},"ts":1397593736000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"sicking: plus, that doesn't work, since WritableStream by itself isn't enough to form a new readable stream","msgtype":"m.text"},"ts":1397593739000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"aklein: it's not a great situation.  :(","msgtype":"m.text"},"ts":1397593748000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"Domenic_: how so?","msgtype":"m.text"},"ts":1397593750000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: as I said, it's more like `new ReadableStream({ start(ws) { .. }, pull(ws) { ... }, cancel() { ... } })`","msgtype":"m.text"},"ts":1397593754000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"bz_moz: right, and ES refers to neither of those","msgtype":"m.text"},"ts":1397593764000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"sicking: because you need (1) to define what happens on startup; (2) to define what happens in reaction to pull; (3) to define what happens in reaction to cancel","msgtype":"m.text"},"ts":1397593772000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"aklein: yup","msgtype":"m.text"},"ts":1397593782000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"sicking: (1) and (2) perform operations that look something like writing into a writable stream, if you tilt your head funny","msgtype":"m.text"},"ts":1397593785000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: on startup the stream is empty","msgtype":"m.text"},"ts":1397593787000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: (but are actually more like pushing into a queue)","msgtype":"m.text"},"ts":1397593793000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"sicking: but how do you e.g. open a file handle?","msgtype":"m.text"},"ts":1397593798000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"bz_moz: agreed. but even if we can't get it specified properly for organizational reasons it'd be nice to get some compatibility between implementations of, e.g., Promises","msgtype":"m.text"},"ts":1397593800000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"bz_moz: is the SpiderMonkey/Gecko behavior to treat these new ES things as if they were WebIDL callbacks?","msgtype":"m.text"},"ts":1397593821000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"Domenic_: that's hard to answer given that ES6 doesn't have a concept of opening a file handle","msgtype":"m.text"},"ts":1397593845000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: i think you're missing the point...","msgtype":"m.text"},"ts":1397593855000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"aklein: the current Promise impl in Gecko is not in SpiderMonkey; it's in Gecko proper and defined via WebIDL","msgtype":"m.text"},"ts":1397593861000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"aklein: so yes, it follows whatever our webidl implementation's rules are","msgtype":"m.text"},"ts":1397593871000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"Domenic_: but conceptually you'd open a file handle, then start feeding data from it into the WritableStream","msgtype":"m.text"},"ts":1397593883000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"bz_moz: amusingly this came up in Blink/V8 land because we're switching from a Blink implementation to one in V8","msgtype":"m.text"},"ts":1397593899000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"Domenic_: until the WritableStream indicates back pressure","msgtype":"m.text"},"ts":1397593900000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: so, that's what start(ws) { ... } would do. It uses the context to expose the internal ws to you","msgtype":"m.text"},"ts":1397593912000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: then you stop reading until the WritableStream indicates that back pressure is off","msgtype":"m.text"},"ts":1397593915000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: ok, now you need two more hooks: one to react to pulls, and one to react to cancels.","msgtype":"m.text"},"ts":1397593928000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"sicking: if we didn't have pull() and cancel(), then it could be `new ReadableStream(ws => ...)`","msgtype":"m.text"},"ts":1397593960000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: WritableStream already has the needed surface, no?","msgtype":"m.text"},"ts":1397593964000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: nope. how do you close the underlying file descriptor in reaction to a cancellation?","msgtype":"m.text"},"ts":1397593978000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"sicking: and how do you get notified that someone wants to read from your readable stream, if all you have access to is a writable stream?","msgtype":"m.text"},"ts":1397594004000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: .closed.then(() => { closeFileHandle() })","msgtype":"m.text"},"ts":1397594018000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: cancellation is pretty clear-cut. it doesn't involve the writable side at all","msgtype":"m.text"},"ts":1397594022000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"sicking: how do you distinguish between purposeful premature cancellation and natural end-of-file closing?","msgtype":"m.text"},"ts":1397594132000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"sicking: you'd have to add a new public `.cancelled` hook","msgtype":"m.text"},"ts":1397594143000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: You close in the response to the .closed promise resolving. You get notified about someone wanting to read by using .state and wait()","msgtype":"m.text"},"ts":1397594154000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: .state and .wait() on the writable stream side have nothing to do with someone wanting to read from the readable stream side","msgtype":"m.text"},"ts":1397594177000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: the end-of-file isn't something that the reader indicates","msgtype":"m.text"},"ts":1397594177000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Domenic_: that seems wrong?","msgtype":"m.text"},"ts":1397594191000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: right, but if you make me depend on the public .closed interface, i can't distinguish what the reader indicates from what the internals indicate","msgtype":"m.text"},"ts":1397594208000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"sicking: how so wrong? it's clearly true that if i call rs.read(), nothing at all happens to the writable stream.","msgtype":"m.text"},"ts":1397594239000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"bz_moz: anyway, we're working on the v8 team to see if we can at least get their stuff to better understand the HTML/WebIDL way of doing callbacks","msgtype":"m.text"},"ts":1397594247000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: sounds good.  :)","msgtype":"m.text"},"ts":1397594266000,"senderName":"bz_moz","senderId":"bz_moz@irc"},
{"content":{"body":"Domenic_: we clearly have very different models in our head","msgtype":"m.text"},"ts":1397594302000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: mind coding yours up? :)","msgtype":"m.text"},"ts":1397594313000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: sadly i don't have the time. I'm trying to get Gozala to do it, but he's also set on chaing the ReadableStream and WritableStream interfaces which I think clouds the conversation","msgtype":"m.text"},"ts":1397594353000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: :-/","msgtype":"m.text"},"ts":1397594371000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"i also won't be writing it in a style that looks very JSy as I'm not a JS guy","msgtype":"m.text"},"ts":1397594399000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"i feel confident that I can create a channel object which has your ReadableStream API on one side, and your WritableStream API on the other side","msgtype":"m.text"},"ts":1397594454000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"and that that would be all that's needed (modulo maybe minor tweaks that I've missed)","msgtype":"m.text"},"ts":1397594479000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"the constructor part is tricky I agree","msgtype":"m.text"},"ts":1397594555000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"I can't see a way to do that without exposing either useless interfaces to the outside world, or by using C++ magic","msgtype":"m.text"},"ts":1397594575000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"i don't know which is worse","msgtype":"m.text"},"ts":1397594592000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"I don't see what advantages this has over the existing model.","msgtype":"m.text"},"ts":1397594757000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"It is just a no-op transform stream","msgtype":"m.text"},"ts":1397594777000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"those will be easy to create","msgtype":"m.text"},"ts":1397594803000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"and if people want to use them directly and handle all the relevant complexity themselves, more power to them.","msgtype":"m.text"},"ts":1397594815000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"but at least we'll have explained where they come from","msgtype":"m.text"},"ts":1397594824000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"and given a more usable alternative (viz. using the original constructors)","msgtype":"m.text"},"ts":1397594839000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"the only advantage is that there's a smaller API","msgtype":"m.text"},"ts":1397595980000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"i'm not sure if the smaller API comes at the cost of reduce performance","msgtype":"m.text"},"ts":1397596020000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"but that's what i'd like to explore","msgtype":"m.text"},"ts":1397596029000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"but if there's a performance cost to it, then that makes the current Readable/WritableStream APIs (not impl) somewhat suspect","msgtype":"m.text"},"ts":1397596120000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"I think the smaller API can be achieved by just teaching people `var { input, output } = transformStreamFactory(function (x) { return x; })` and not teaching them the constructors","msgtype":"m.text"},"ts":1397596160000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I don't think it makes them suspect, because you are twisting them into situations they were not meant for","msgtype":"m.text"},"ts":1397596176000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"you are trying to use them for something that is actually just a simple queue","msgtype":"m.text"},"ts":1397596184000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"and doesn't have all of the complexity of a full stream","msgtype":"m.text"},"ts":1397596189000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"is perhaps this complexity something that's needed for IO streams, but not for other streams?","msgtype":"m.text"},"ts":1397596332000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"if we take \"IO streams\" to mean \"streams that handle buffering for you while staying performant for sync cases\" then yes, I think so.","msgtype":"m.text"},"ts":1397596487000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"there's a large cottage ecosystem in Node.js of making it easy to simply create/consume/etc. \"observables,\" with Node streams underlying them.","msgtype":"m.text"},"ts":1397596604000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"e.g. \"mapStream\" etc.","msgtype":"m.text"},"ts":1397596608000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"and DSLs so that `myObservable.map(fn)` becomes shorthand for `readableStream.pipe(new MapStream(fn))`","msgtype":"m.text"},"ts":1397596649000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Yehuda and I have some thoughts on how to integrate these observables well with streams","msgtype":"m.text"},"ts":1397596666000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"e.g. if observables end up being described by a `.subscribe(onNext, onError, onComplete)` in a similar fashion to promises","msgtype":"m.text"},"ts":1397596691000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"then we could add that to readable streams so that they duck-type as observables","msgtype":"m.text"},"ts":1397596703000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"bz_moz: here now","msgtype":"m.text"},"ts":1397598218000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"ah you guys, discussing all the interesting stuff while I was at the movies","msgtype":"m.text"},"ts":1397598882000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"was it a good movie at least?","msgtype":"m.text"},"ts":1397598982000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"bz_moz: this being WindowProxy we should solve by ES providing a hook for the embedder to set this to something else than the global","msgtype":"m.text"},"ts":1397599138000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aklein: either Domenic_ or Allen should solve the issue with promises and the settings object","msgtype":"m.text"},"ts":1397599231000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: yes, a classic, Castle in the Sky","msgtype":"m.text"},"ts":1397599239000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I just realized that with https://bugs.ecmascript.org/show_bug.cgi?id=1898 not fixed, the Realm API is probably not adequate in expressing the current setup","msgtype":"m.text"},"ts":1397599260000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah yes, always fun","msgtype":"m.text"},"ts":1397599262000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: that seems urgent","msgtype":"m.text"},"ts":1397599285000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: I guess I'll email es-discuss again, see what they say...","msgtype":"m.text"},"ts":1397599355000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the realm api argument helps","msgtype":"m.text"},"ts":1397599373000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: I still think my position on script settings objects from http://esdiscuss.org/topic/specification-styles#content-15 is the most tenable","msgtype":"m.text"},"ts":1397599382000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: why? That doesn't seem to match existing implementations","msgtype":"m.text"},"ts":1397599542000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: note that Chrome / V8 ran into the problem bz_moz described","msgtype":"m.text"},"ts":1397599567000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: what part of my message are you saying doesn't match existing implementations?","msgtype":"m.text"},"ts":1397599582000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: this is why promises are not shipping in Chrome 35","msgtype":"m.text"},"ts":1397599590000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yes, i remember","msgtype":"m.text"},"ts":1397599624000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: there are certain WebIDL functions/getters/setters that have exotic [[Call]] that depends on global state","msgtype":"m.text"},"ts":1397599703000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: this should be specified in their definition of [[Call]], not in ES's","msgtype":"m.text"},"ts":1397599730000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: no, this is valid for all new entry points","msgtype":"m.text"},"ts":1397599810000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: until you had an event loop, you did not have this problem, because you could not create new entry points","msgtype":"m.text"},"ts":1397599829000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: in particular, \"async\" callbacks need to use http://www.whatwg.org/specs/web-apps/current-work/#jump-to-a-code-entry-point (this problem sort of exists in IDL too, it's not well defined yet)","msgtype":"m.text"},"ts":1397599932000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: but that's only relevant to certain WebIDL funcitons that depend on the script settings object","msgtype":"m.text"},"ts":1397600009000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: which is why the problem only shows up in CHrome when you use specific functions","msgtype":"m.text"},"ts":1397600020000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: sure, some platform APIs use the settings object","msgtype":"m.text"},"ts":1397600121000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: but they do not have the right context to set it correctly","msgtype":"m.text"},"ts":1397600166000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: anyway, you should probably discuss this with bz_moz","msgtype":"m.text"},"ts":1397600357000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: http://esdiscuss.org/topic/realm-api-and-this-global","msgtype":"m.text"},"ts":1397600928000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wonder where that double newline came from","msgtype":"m.text"},"ts":1397600949000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it's a bug in the esdiscuss.org scripts, happens whenever there's angle brackets in the line -_-","msgtype":"m.text"},"ts":1397601013000,"senderName":"Domenic_","senderId":"Domenic_@irc"}
]