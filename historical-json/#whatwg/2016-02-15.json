[
{"content":{"body":"annevk: r- from me, per my comment. But I've actually been meaning to talk you about mimesniff ownership.","msgtype":"m.text"},"ts":1455508747000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"howdy GPHemsley","msgtype":"m.text"},"ts":1455510723000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"nox: maybe, what do browsers do?","msgtype":"m.text"},"ts":1455515336000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"GPHemsley: anytime","msgtype":"m.text"},"ts":1455515358000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: I want a custom <dt> at the top, called !Translation(s), but I cannot seem to include markup there","msgtype":"m.text"},"ts":1455523988000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: my idea was \"!Translation <small>(non-normative and can be out-of-date)</small>:\"","msgtype":"m.text"},"ts":1455524017000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: but bikeshed ends up escaping the <","msgtype":"m.text"},"ts":1455524025000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: I guess I'll leave out the <small> for now","msgtype":"m.text"},"ts":1455524034000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Right, except in a few places, I use nice safe DOM methods, so text stays text. ^_^","msgtype":"m.text"},"ts":1455524074000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But I can of course add a Translation header officially, and have it display such a warning in a <small> (which would be well-warranted and should be on more links to translations imo)","msgtype":"m.text"},"ts":1455524107000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Maybe I should even add \"likely\" given how often we update","msgtype":"m.text"},"ts":1455524140000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: https://notifications.spec.whatwg.org/ has an example now","msgtype":"m.text"},"ts":1455524515000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: without <small> though","msgtype":"m.text"},"ts":1455524523000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Cool. File an issue on me so I\"ll remember to get on it on Tuesday when I get back to work?","msgtype":"m.text"},"ts":1455524550000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1455524558000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: that reference system picked up https://html.spec.whatwg.org/multipage/infrastructure.html#concept-request-origin despite it having data-noexport","msgtype":"m.text"},"ts":1455525545000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: what is going on?","msgtype":"m.text"},"ts":1455525549000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"can't update URL because of this now","msgtype":"m.emote"},"ts":1455525563000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"What, precisely, is happening with your request? All four of the \"origin\" dfns in HTML are indeed unexported.","msgtype":"m.text"},"ts":1455526998000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: see the PR against URL","msgtype":"m.text"},"ts":1455527103000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: for some reason \"origin\" starts linking to the URL above, rather than the one definition of origin in HTML that does not have data-noexport","msgtype":"m.text"},"ts":1455527138000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"All four of the HTML dfns are unexported, tho. (And I just pulled fresh datafiles.)","msgtype":"m.text"},"ts":1455527190000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: https://html.spec.whatwg.org/multipage/browsers.html#origin-2 does not have data-noexport","msgtype":"m.text"},"ts":1455527276000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Right, but \"dfn\" type definitions are unexported by default.","msgtype":"m.text"},"ts":1455527347000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You can explicitly export it with data-export.","msgtype":"m.text"},"ts":1455527367000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: last time you told us to annotate things with data-noexport","msgtype":"m.text"},"ts":1455527380000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yes, for selectors. ^_^","msgtype":"m.text"},"ts":1455527387000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: if that's the default that advice wouldn't have made much sense","msgtype":"m.text"},"ts":1455527389000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(All other types export by default, but specs often define local terms for all sorts of things that they don't want to expose.)","msgtype":"m.text"},"ts":1455527402000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: no also for this and other things","msgtype":"m.text"},"ts":1455527404000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Why would we have to annotate selectors with the default? Why would they have a different default?","msgtype":"m.text"},"ts":1455527441000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You're misreading.  \"dfn\" types are not exported by default.  All other types are exported by default.","msgtype":"m.text"},"ts":1455527467000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You had some selector dfns in HTML that were interfering with Selectors, so I asked you to annotate them.","msgtype":"m.text"},"ts":1455527497000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(The spider has some intelligence that lets it give types to some things based on text contents or IDs, which is how it knew those were selectors in the HTML spec despite lacking annotations.)","msgtype":"m.text"},"ts":1455527551000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I'm pretty sure you also said this about origin somewhere","msgtype":"m.text"},"ts":1455527577000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Seems unlikely, but it's possible I wasn't thinking clearly at the time.  Shrug.","msgtype":"m.text"},"ts":1455527595000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Anyway, what's the problem you're having, and what's the effect you wanted?","msgtype":"m.text"},"ts":1455527624000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: see how https://github.com/whatwg/url/pull/92 changes the link of origin","msgtype":"m.text"},"ts":1455527705000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hm, are you now getting a warning saying that there are two possible anchors, and it's arbitrarily choosing one?","msgtype":"m.text"},"ts":1455527833000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: it says \"Arbitrarily chose the one in html.\"","msgtype":"m.text"},"ts":1455527873000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yup, not the most helpful message in this circumstance, I need to spend more effort on detecting exactly what error situation you're in and reporting better.","msgtype":"m.text"},"ts":1455527910000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Anyway, the one you want (#origin-2) is apparently for=origin","msgtype":"m.text"},"ts":1455527917000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I don't understand how it can even link to the other one given that it has explicitly opted out of this scheme","msgtype":"m.text"},"ts":1455527942000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"data-noexport shouldn't mean that you can still link to it, that kinda defeats the purpose","msgtype":"m.text"},"ts":1455527969000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Because you specified a spec.  That is the explicit signal for \"fuck it, I really do mean to link the term from this spec\".","msgtype":"m.text"},"ts":1455527984000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Unexported terms aren't put into the big bag of global refs, but they're still linkable.","msgtype":"m.text"},"ts":1455527998000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(If you don't want them to be a ref at all, there's a way to do that.)","msgtype":"m.text"},"ts":1455528020000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That is not what I mean when I say spec=html... I would never really mean that","msgtype":"m.text"},"ts":1455528035000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And again, note that *all four* of the html \"origin\" dfns are unexported.","msgtype":"m.text"},"ts":1455528048000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It generally is.  It's very rare for a spec to both define a term locally and want to link to another spec's definitino of the same term.","msgtype":"m.text"},"ts":1455528075000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If I added data-export=\"\" to <dfn>origin</dfn> it'd be okay?","msgtype":"m.text"},"ts":1455528077000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Specifications sharing terms seems likely to be quite common","msgtype":"m.text"},"ts":1455528107000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I thought that's why we had spec= in the first place, as a namespace","msgtype":"m.text"},"ts":1455528127000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Different specs using the same word for different defs, yes.  Specs using a word for a local ref *and* linking into another spec's ref for that word (meaning something different), that's rare.","msgtype":"m.text"},"ts":1455528148000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The spec='' attribute lets you specify which of the several sources for a given term you want, if they're identical in all other respects.","msgtype":"m.text"},"ts":1455528184000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"What you want is to change the for=/ (which is wrong for the term you want) to for=origin.","msgtype":"m.text"},"ts":1455528217000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Run `bikeshed refs --text=origin --type=dfn --spec=html` to see all the refs and their attributes.","msgtype":"m.text"},"ts":1455528239000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And if you want HTML to actually be the definitive reference for one or more of those terms, put data-export on their <dfn> so they'll show up in the global ref set.","msgtype":"m.text"},"ts":1455528305000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1455528480000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess we should do that and stop doing the no-export thing where it doesn't matter anyway","msgtype":"m.text"},"ts":1455528500000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"For any \"dfn\" type terms (god DAMN i wish i'd come up with a different name for that category), yeah, no need to write noexport on them.","msgtype":"m.text"},"ts":1455528557000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Unless you just like being explicit, which isn't bad. I do that sometimes just to be clear about what I intended to export and what I didn't.","msgtype":"m.text"},"ts":1455528579000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: http://jsbin.com/nomega/edit?css,output - I can't decide if this custom property behaviour is a bug or not","msgtype":"m.text"},"ts":1455530327000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Firefox & Chrome agree on the output, but I can't see why this would happen in the spec","msgtype":"m.text"},"ts":1455530348000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I thought in var(--bar, green) the value would be green if --bar was initial","msgtype":"m.text"},"ts":1455530370000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"--bar is *the keyword initial*. It's not the initial value of a custom property.","msgtype":"m.text"},"ts":1455530431000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So it successfully substitutes in var(--bar), giving background-color the value \"initial\", which gives you the result you want.","msgtype":"m.text"},"ts":1455530456000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"This is honesty an unanticipated scenario, but sure, it makes sense and I'm glad browsers agree.","msgtype":"m.text"},"ts":1455530481000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: so, why isn't the keyword \"initial\" carried through here? http://jsbin.com/nomega/edit?css,output","msgtype":"m.text"},"ts":1455530650000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Because there's a line in the spec defining that situation, and it says that the global keywords work normally on custom properties. ^_^","msgtype":"m.text"},"ts":1455530682000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hah, gotcha. Fair enough.","msgtype":"m.text"},"ts":1455530704000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(I thought this meant that I lost the ability for a custom prop to carry a global keyword, but evidently that's not true! If I remember, I'll add a note to the spec talking about that.)","msgtype":"m.text"},"ts":1455530729000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I guess there's no reason to do var(--foo, initial), but through some stupidity I'd ended up with it and got confused by the behaviour, but if this is a way to set a custom property to the value \"initial\", then I guess that's potentially useful","msgtype":"m.text"},"ts":1455530778000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"On second thought, maybe that behavior doesn't actually make sense, but browsers do it, so ehhhhh.","msgtype":"m.text"},"ts":1455530808000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Wait, do your first example again, but with \"inherit\", and put a background on a parent.","msgtype":"m.text"},"ts":1455530828000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Just to make sure it's actually carrying the keyword around.","msgtype":"m.text"},"ts":1455530837000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: http://jsbin.com/nomega/edit?css,output","msgtype":"m.text"},"ts":1455530946000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"sweet, confirmed","msgtype":"m.text"},"ts":1455530960000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so yeah: doesn't actually make a ton of sense, but eh","msgtype":"m.text"},"ts":1455530973000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ohh, I didn't realise \"inherit\" was an 'unsetter' too","msgtype":"m.text"},"ts":1455531006000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"it just means browsers are special-casing custom properties to only look for global keywords in their original, unsubstituted values.","msgtype":"m.text"},"ts":1455531006000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"wait DUH that makes sense","msgtype":"m.text"},"ts":1455531014000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"no wait nm","msgtype":"m.text"},"ts":1455531034000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i'll think about this later when it's not 2am","msgtype":"m.text"},"ts":1455531040000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"what's this about \"unsetter\"?","msgtype":"m.text"},"ts":1455531050000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"As in, if I have a custom property that has a value, and I later want it to be \"unset\", as in it'd use the fallback in var()","msgtype":"m.text"},"ts":1455531106000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I guess \"inherit\" will become \"initial\"","msgtype":"m.text"},"ts":1455531137000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"no...","msgtype":"m.text"},"ts":1455531142000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"inherit means inherit","msgtype":"m.text"},"ts":1455531157000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(tho the root element inherits the initial value","msgtype":"m.text"},"ts":1455531176000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":")","msgtype":"m.text"},"ts":1455531177000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah, sorry, that's what I meant by becomes \"initial\"","msgtype":"m.text"},"ts":1455531199000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"for the purposes of var(--foo, fallback) it sees --foo as initial and falls back","msgtype":"m.text"},"ts":1455531230000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yeah.","msgtype":"m.text"},"ts":1455531262000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"the easiest way to unset a custom prop, btw, is to set it to itself. --foo: var(--foo); immeidately unset it","msgtype":"m.text"},"ts":1455531291000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"well hey tho, --foo: initial does too","msgtype":"m.text"},"ts":1455531309000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so whatever","msgtype":"m.text"},"ts":1455531312000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"it's 2am","msgtype":"m.text"},"ts":1455531314000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(i'm archive-binging a comic and almost done)","msgtype":"m.text"},"ts":1455531323000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hah GET SOME SLEEP. Oh wait, it's a holiday over there isn't it? Meh, stay up all night!","msgtype":"m.text"},"ts":1455531355000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"YUP","msgtype":"m.text"},"ts":1455531399000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Well, thanks for helping me through that. I'm using custom properties to build a rendering dependency tree when async-loading CSS","msgtype":"m.text"},"ts":1455531539000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"It works","msgtype":"m.text"},"ts":1455531546000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"What's the best way to get some discussion around https://www.w3.org/Bugs/Public/show_bug.cgi?id=29078 going? Copy it over to GH?","msgtype":"m.text"},"ts":1455534622000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: yeah I think that would get it more visibility","msgtype":"m.text"},"ts":1455534747000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"JakeA: I'd love to see it when I'm more rested. And now that I'm done archive-binging, to bed I go.","msgtype":"m.text"},"ts":1455535491000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Goodnight!","msgtype":"m.text"},"ts":1455535518000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"https://github.com/whatwg/dom/issues/167","msgtype":"m.text"},"ts":1455536850000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: super","msgtype":"m.text"},"ts":1455537884000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"That was an HTML bug","msgtype":"m.text"},"ts":1455537888000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: but why is it a DOM","msgtype":"m.text"},"ts":1455537892000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1455537903000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"oops :/","msgtype":"m.text"},"ts":1455537911000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"Will move it","msgtype":"m.text"},"ts":1455537916000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"hai","msgtype":"m.text"},"ts":1455537920000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://github.com/whatwg/html/issues/694","msgtype":"m.text"},"ts":1455538045000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"this bug https://www.w3.org/Bugs/Public/show_bug.cgi?id=26942 has a pretty cool researches :)","msgtype":"m.text"},"ts":1455538556000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"yay the gradient is now smooth! (maybe it has been a while, but noticed now)","msgtype":"m.text"},"ts":1455539543000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: can't work it out from the spec… why can't you create a request of mode \"navigate\"?","msgtype":"m.text"},"ts":1455547702000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I think because navigations have special rules we don't want to expose to fetch()","msgtype":"m.text"},"ts":1455547781000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"fetch() in the window","msgtype":"m.text"},"ts":1455547786000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"ah ok","msgtype":"m.text"},"ts":1455547793000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"ta!","msgtype":"m.text"},"ts":1455547795000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I figured it'd be something security-like","msgtype":"m.text"},"ts":1455547805000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: if we could get rid of all \"if navigation\" special cases, maybe it would be safe... but navigations are still a bit hand-wavy I think","msgtype":"m.text"},"ts":1455547813000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Maybe we could open it up, but I'd like to make sure we understand navigate a lot better first","msgtype":"m.text"},"ts":1455547833000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"What wanderview said","msgtype":"m.text"},"ts":1455547841000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: do you happen to know if Gecko supports any argument to new Headers()?","msgtype":"m.text"},"ts":1455547876000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess it makes you wonder about the differences between fetch() and a function wrapping iframe+onload","msgtype":"m.text"},"ts":1455547887000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Seems like we do","msgtype":"m.text"},"ts":1455547929000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: our webidl says we optionally take HeadersInit: https://dxr.mozilla.org/mozilla-central/source/dom/webidl/Headers.webidl#21","msgtype":"m.text"},"ts":1455547933000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: https://github.com/whatwg/fetch/issues/165","msgtype":"m.text"},"ts":1455548371000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: (and thanks for the IDL pointer)","msgtype":"m.text"},"ts":1455548378000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: not sure what your last comment is saying","msgtype":"m.text"},"ts":1455548492000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: I was trying to say that for no-cache I'd like to remove this part of the current spec text: \"and the response in the HTTP cache for httpRequest does require revalidation\"","msgtype":"m.text"},"ts":1455548591000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: so the revalidation headers are added regardless of the age of the entry in the http cache","msgtype":"m.text"},"ts":1455548609000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: if you have a response in the cache that doesn't require revalidation, how'd you go about adding headers for that?","msgtype":"m.text"},"ts":1455548742000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the revalidation headers go on the request, no?","msgtype":"m.text"},"ts":1455548778000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: sure, but they're based on the response in the cache","msgtype":"m.text"},"ts":1455548795000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: what information is needed from the response in the http cache?","msgtype":"m.text"},"ts":1455548824000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: the etag?","msgtype":"m.text"},"ts":1455548838000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: or a date?","msgtype":"m.text"},"ts":1455548844000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: which date?  date stored or current age?  I'm saying, use the info from the http cache, but don't make that depend on the http cache entry being aged","msgtype":"m.text"},"ts":1455548873000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"if there is no http cache entry at all, then don't set revalidation headers","msgtype":"m.text"},"ts":1455548892000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: stored, but more common is etags","msgtype":"m.text"},"ts":1455548894000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"all I'm trying to say is skip the age check part of \"response in the HTTP cache for httpRequest does require revalidation\" if no-cache is set","msgtype":"m.text"},"ts":1455548943000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: \"does require revalidation\" will almost always be true, fwiw","msgtype":"m.text"},"ts":1455548952000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1455548975000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: where is \"does require revalidation\" defined?","msgtype":"m.text"},"ts":1455548983000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"yeah it's not, integration is hand-wavy","msgtype":"m.text"},"ts":1455548997000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"HTTP does not define this in detail either because they don't really require things from caches","msgtype":"m.text"},"ts":1455549013000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, that makes it hard to define a primitive to skip these undefined behaviors","msgtype":"m.text"},"ts":1455549122000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Yeah, perhaps we added the cache modes to early or we added too many of them","msgtype":"m.text"},"ts":1455549162000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: but I think this type of behavior is something you really want to use in service worker install event handlers","msgtype":"m.text"},"ts":1455549197000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: so no-cache basically means that Fetch has to create a conditional request, I guess we'll just have to refine its definition over time to make sure it meets expectations","msgtype":"m.text"},"ts":1455549263000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hm.. we're running into some unexpected measures when retroactively comparing SPDY to HTTP/1 performance. Wikipedia's been SPDY for a few months now, but in a recent webpagetest with chrome and disabled spdy support, we see a minor improvement, correlated to the size of the html payload. Our suspicion is that this is due to how html is prioritised over css.","msgtype":"m.text"},"ts":1455553771000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Previously HTML and CSS loaded in separate connections more or less sharing bandwidth equally. Meaning when the CSS is finished and the first section of html, Blink can paint.","msgtype":"m.text"},"ts":1455553771000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"But with SPDY, it is blocked on downloading all of the html  before css stream gets any breathing room.","msgtype":"m.text"},"ts":1455553793000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"This is in a 2G bandwidth emulation though","msgtype":"m.text"},"ts":1455553803000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"JakeA: ^ any thoughts? Was just reading your css loading article.","msgtype":"m.text"},"ts":1455553825000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: I guess you can force separate connections by hosting the CSS on a distinct hostname and not share the TLS connection","msgtype":"m.text"},"ts":1455553900000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"maybe chrome (or nginx on our side) is too naive in its interpretation of prioties. Not sure if the SPDY spec means priority to be absolute or relative (e.g. less bandwidth or no bandwidth)","msgtype":"m.text"},"ts":1455553920000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: note that SPDY is about to be disabled, but I guess you mean HTTP/2","msgtype":"m.text"},"ts":1455553924000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"This is SPDY","msgtype":"m.text"},"ts":1455553930000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: is the server controlling the priority here?","msgtype":"m.text"},"ts":1455553935000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"But yeah, I'm aware of it sunsetting very soon","msgtype":"m.text"},"ts":1455553936000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"JakeA: Afaik it's Chrome (html = highest, css= high)","msgtype":"m.text"},"ts":1455553945000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"I'm hoping this'll be better in H2","msgtype":"m.text"},"ts":1455553961000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Basically start render for large articles is significantly worse with SPDY than without","msgtype":"m.text"},"ts":1455554008000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Not the joy we usually get from streaming","msgtype":"m.text"},"ts":1455554027000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: can you share the wpt links?","msgtype":"m.text"},"ts":1455554028000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I'd like to make a bug for this","msgtype":"m.text"},"ts":1455554035000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I'll pull it up. Thx","msgtype":"m.text"},"ts":1455554041000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"JakeA: Our issues are https://phabricator.wikimedia.org/T125979 - https://phabricator.wikimedia.org/T125208 ; TL:DR; As for median nav timing, SPDY is still a win overall. So the SPDY-off experiment will be terminated soon. It's mostly affected large articles which is a minority. (large for us, that is)","msgtype":"m.text"},"ts":1455554130000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Last I checked, we're blocked on nginx support for spdy3+h2 rather than just spd3 or h2 (for which we currently pick spd3 due to higher coverage). Chrome switching will improve that balance though, so I hope we'll switch soon.","msgtype":"m.text"},"ts":1455554269000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: https://code.google.com/p/chromium/issues/detail?id=586938","msgtype":"m.text"},"ts":1455554380000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: Yeah, but we actually just finished last year folding our static domain into the main content domain (under a /static path)","msgtype":"m.text"},"ts":1455554388000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"saving the extra connection proved quite improving on the timing metrics.","msgtype":"m.text"},"ts":1455554407000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: it sound like under certain conditions having extra connections is more beneficial","msgtype":"m.text"},"ts":1455554512000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I suspect either 1) Chrome should use priority \"Highest\" for html + css (given that it blocks render on css arriving), or 2) if SPDY spec is intending for Highest and High to run along side (with relative preference, not absolute preference) to the higher one - then maybe our nginx is being too naive about the priorities.","msgtype":"m.text"},"ts":1455554516000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"I'm not sure.","msgtype":"m.text"},"ts":1455554519000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"annevk: Yeah","msgtype":"m.text"},"ts":1455554526000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: that is, I'm assuming that for HTTP/1.1 you actually get multiple connections here","msgtype":"m.text"},"ts":1455554539000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yep.","msgtype":"m.text"},"ts":1455554555000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"on H1 it does the typical N connections per origin.","msgtype":"m.text"},"ts":1455554574000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: agreed, but no idea if it's Chrome or Nginx getting it wrong","msgtype":"m.text"},"ts":1455554576000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1455554584000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"I wouldn't be surprised if its Nginx. I hear the implementation  may've been a bit rushed/minimal.","msgtype":"m.text"},"ts":1455554605000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Or it could be abiguity in the SPDY spec, which might be better in H2","msgtype":"m.text"},"ts":1455554624000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"annevk: Hm.. interesting point though. Maybe there is a balance to be made with regards to hostname coalesce","msgtype":"m.text"},"ts":1455554921000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"We were actually considering folding the SSL connection for our static thumbnail host (upload.wikimedia.org) into the main wikipedia domains as well. Not literally the same origin, but it would use the same connection, again.","msgtype":"m.text"},"ts":1455554960000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"That's currently the last remaining hostname that isn't sharing connection.","msgtype":"m.text"},"ts":1455554988000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: I don't really know how those things play out today, but given how efficient torrents seem to be multiple connections might not be all bad","msgtype":"m.text"},"ts":1455555060000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Krinkle: I haven't really seen much on multiple connections in a H2 world though","msgtype":"m.text"},"ts":1455555086000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: It's also not bug free. Last quarter we had a major issue in Firefox due to it re-using the same connection for different domains when (arguably) it shouldn't have re-used the connection. One domain had IPv4-only, the other v4 and v6. The main connection was Ipv6, and it re-used the connection for the Ipv4-only domain.","msgtype":"m.text"},"ts":1455555324000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"https://phabricator.wikimedia.org/T121922","msgtype":"m.text"},"ts":1455555326000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"It became part of a cascading failure eventually resulting in fundraising banners not showing up in FIrefox for Ipv6 users due to geolocation depending on the ipv4-only domain (now fixed).","msgtype":"m.text"},"ts":1455555355000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"upstreamed at https://bugzilla.mozilla.org/show_bug.cgi?id=1235068","msgtype":"m.text"},"ts":1455555419000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"it's no longer relevant today, but was a fun adventure","msgtype":"m.text"},"ts":1455555427000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Interesting","msgtype":"m.text"},"ts":1455555593000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You can really tell when the US is on holiday","msgtype":"m.text"},"ts":1455559613000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: everyone busy dressing up as their favorite american president","msgtype":"m.text"},"ts":1455560090000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"smaug____: I might look into integrating some of the Shadow DOM stuff into HTML","msgtype":"m.text"},"ts":1455560412000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: such as the \"in a document\" vs \"in a composed document\" stuff","msgtype":"m.text"},"ts":1455560426000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: do you think that's worthwhile to do now, or should we wait longer?","msgtype":"m.text"},"ts":1455560441000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hayato: ^^","msgtype":"m.text"},"ts":1455560449000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm, not sure what waiting could give us","msgtype":"m.text"},"ts":1455560470000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(not today, but soonish)","msgtype":"m.text"},"ts":1455560474000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it has been an issue since...2012 or 2013","msgtype":"m.text"},"ts":1455560486000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"major issue even, so would be good to get it finally fixed","msgtype":"m.text"},"ts":1455560507000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and great, thanks for doing it whenever you end up doing it!","msgtype":"m.text"},"ts":1455560537000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"finds https://www.w3.org/Bugs/Public/show_bug.cgi?id=24379, https://www.w3.org/Bugs/Public/show_bug.cgi?id=28748, and https://www.w3.org/Bugs/Public/show_bug.cgi?id=27406","msgtype":"m.emote"},"ts":1455560672000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I remember Hixie also writing down a proposed solution somewhere, maybe that was in the Shadow DOM collection of bugs","msgtype":"m.text"},"ts":1455560756000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think in the w3c bugzilla bug about is in doc","msgtype":"m.text"},"ts":1455561112000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"or perhaps you mean some other proposal","msgtype":"m.text"},"ts":1455561137000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"oh no, I pushed the green button","msgtype":"m.text"},"ts":1455561335000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"annevk: It appears I don't have push rights to xref","msgtype":"m.text"},"ts":1455562287000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"annevk: Oh shoot, I totally obliterated your Makefile commit.","msgtype":"m.text"},"ts":1455562804000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"s/Makefile/README/","msgtype":"m.text"},"ts":1455562810000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"is gonna back away now","msgtype":"m.emote"},"ts":1455562815000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"GPHemsley: can you fix it?","msgtype":"m.text"},"ts":1455566287000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"GPHemsley: oh, you force pushed?","msgtype":"m.text"},"ts":1455566339000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wonders how to fix that","msgtype":"m.emote"},"ts":1455566353000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: can you sanity check me here?  are importScripts() in a service worker supposed to be restricted to same origin?","msgtype":"m.text"},"ts":1455566393000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I don't know, doubt it?","msgtype":"m.text"},"ts":1455566414000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"opens https://slightlyoff.github.io/ServiceWorker/spec/service_worker/","msgtype":"m.emote"},"ts":1455566427000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: nope","msgtype":"m.text"},"ts":1455566467000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok, thanks","msgtype":"m.text"},"ts":1455566484000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"GPHemsley: I enabled master branch protection","msgtype":"m.text"},"ts":1455566682000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"GPHemsley: I also restored my commit","msgtype":"m.text"},"ts":1455566687000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"GPHemsley: I don't really have time right now to talk about things like you wanted unfortunately, would email be okay for you?","msgtype":"m.text"},"ts":1455566939000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"GPHemsley: if not, let me know what time works for you, but keep in mind my timezone is A'dam/Zurich","msgtype":"m.text"},"ts":1455567007000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"GPHemsley: also, someone from Mozilla might be providing some more PRs for sniffing things we implemented","msgtype":"m.text"},"ts":1455567108000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"","msgtype":"m.text"},"ts":1455571709000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"SyntaxError: unterminated string literal","msgtype":"m.text"},"ts":1455572605000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"is there an event  that fires when fetch completes xhr? I want to hook into all completed requests","msgtype":"m.text"},"ts":1455574720000,"senderName":"mawkgawk","senderId":"mawkgawk@irc"},
{"content":{"body":"mawkgawk: research promise.all","msgtype":"m.text"},"ts":1455575024000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"Hmm, how is 'strictly split a string' supposed to work if there are several delimiters next to each others","msgtype":"m.text"},"ts":1455577706000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"per algorithm we get empty strings in the array","msgtype":"m.text"},"ts":1455577775000,"senderName":"smaug____","senderId":"smaug____@irc"}
]