[
{"content":{"body":"making a fair amount of progress on my ISSUE-27 CP today: http://www.w3.org/html/wg/wiki/User:Eoconnor/ISSUE-27","msgtype":"m.text"},"ts":1291509660000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"I am having an FF only issue with image maps.   On vertical resize of the browser it's seeming that with FF the <area> (coordinates) are dropping but the image is not.  This is making me feel a z-index-like approach when it comes to the image and the map....  and I would want it to be more like a relative container to absolute child approacj.","msgtype":"m.text"},"ts":1291509661000,"senderName":"hatrick","senderId":"hatrick@irc"},
{"content":{"body":"hober: nice!","msgtype":"m.text"},"ts":1291509662000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"feedback, as always, is very welcome","msgtype":"m.text"},"ts":1291509663000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"its as if someone on the z-index level of the coordinates is making it drop, while on the other hand the image is safe from being pushed down.","msgtype":"m.text"},"ts":1291509664000,"senderName":"hatrick","senderId":"hatrick@irc"},
{"content":{"body":"I've still got a bajillion open tabs related to it, so it will change significantly between now and Friday","msgtype":"m.text"},"ts":1291509720000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"http://rebuildingtheweb.com/en/html5-shortcomings/#c20101202172746","msgtype":"m.text"},"ts":1291512120000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"hober: what's the intended use of the rel values from a UA perspective?","msgtype":"m.text"},"ts":1291513740000,"senderName":"oojacoboo","senderId":"oojacoboo@irc"},
{"content":{"body":"oojacoboo: depends on the rel value","msgtype":"m.text"},"ts":1291526760000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"hober: examples?","msgtype":"m.text"},"ts":1291526820000,"senderName":"oojacoboo","senderId":"oojacoboo@irc"},
{"content":{"body":"oojacoboo: e.g., rel=stylesheet has a pretty clear intended use from a UA perspective","msgtype":"m.text"},"ts":1291526821000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"the troll hunter http://www.youtube.com/watch?v=DdJxk6kO8HU","msgtype":"m.text"},"ts":1291526822000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"hober: I guess I am more referring to anchors","msgtype":"m.text"},"ts":1291526823000,"senderName":"oojacoboo","senderId":"oojacoboo@irc"},
{"content":{"body":"ok, here's another example: <a rel=nofollow>","msgtype":"m.text"},"ts":1291526824000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"rel=colleague","msgtype":"m.text"},"ts":1291526825000,"senderName":"oojacoboo","senderId":"oojacoboo@irc"},
{"content":{"body":"rel=lover","msgtype":"m.text"},"ts":1291526880000,"senderName":"oojacoboo","senderId":"oojacoboo@irc"},
{"content":{"body":"oojacoboo: are you asking about specific rel values, or <a rel> in general?","msgtype":"m.text"},"ts":1291526881000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"the specific values","msgtype":"m.text"},"ts":1291527000000,"senderName":"oojacoboo","senderId":"oojacoboo@irc"},
{"content":{"body":"are there any intended uses for UAs with these","msgtype":"m.text"},"ts":1291527001000,"senderName":"oojacoboo","senderId":"oojacoboo@irc"},
{"content":{"body":"I mostly see if for bot use","msgtype":"m.text"},"ts":1291527060000,"senderName":"oojacoboo","senderId":"oojacoboo@irc"},
{"content":{"body":"oojacoboo: like i said, it depends on the value. the various XFN values, for instance, are generally not expected to have UA implications.","msgtype":"m.text"},"ts":1291528440000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"hober: yea","msgtype":"m.text"},"ts":1291528500000,"senderName":"oojacoboo","senderId":"oojacoboo@irc"},
{"content":{"body":"\"The data model is a representation of the text. The text is not a serialization of the data model.\"","msgtype":"m.text"},"ts":1291536660000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1291536661000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hi","msgtype":"m.text"},"ts":1291560600000,"senderName":"realDave","senderId":"realDave@irc"},
{"content":{"body":"hsivonen: validator.nu gets an Internal Error when I try to validate the following site: http://validator.nu/?doc=http://www.smallnetbuilder.com/content/view/29536/80/","msgtype":"m.text"},"ts":1291567320000,"senderName":"Peter`","senderId":"Peter`@irc"},
{"content":{"body":"Peter`: i tried reproducing that with my validator installs, but can't reproduce it","msgtype":"m.text"},"ts":1291568700000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"brendaneich why `Date` constructor w/o `new` returns date string, but other build-in classes acts as with `new`?","msgtype":"m.text"},"ts":1291575660000,"senderName":"_bga","senderId":"_bga@irc"},
{"content":{"body":"not all other built-in classes (String, Number, Boolean convert to primitive if called instead of new'ed)","msgtype":"m.text"},"ts":1291575840000,"senderName":"brendaneich","senderId":"brendaneich@irc"},
{"content":{"body":"not sure there's a good answer to \"why?\"","msgtype":"m.text"},"ts":1291575841000,"senderName":"brendaneich","senderId":"brendaneich@irc"},
{"content":{"body":"avoiding an allocation to get a date string could have been done via date.nowString() or whatever","msgtype":"m.text"},"ts":1291575842000,"senderName":"brendaneich","senderId":"brendaneich@irc"},
{"content":{"body":"but this was 15 years ago","msgtype":"m.text"},"ts":1291575900000,"senderName":"brendaneich","senderId":"brendaneich@irc"},
{"content":{"body":"Date's not going to change","msgtype":"m.text"},"ts":1291575901000,"senderName":"brendaneich","senderId":"brendaneich@irc"},
{"content":{"body":"(avoiding an object allocation ^)","msgtype":"m.text"},"ts":1291575902000,"senderName":"brendaneich","senderId":"brendaneich@irc"},
{"content":{"body":"may be we can fix it in es6?","msgtype":"m.text"},"ts":1291575903000,"senderName":"_bga","senderId":"_bga@irc"},
{"content":{"body":"why?","msgtype":"m.text"},"ts":1291575960000,"senderName":"brendaneich","senderId":"brendaneich@irc"},
{"content":{"body":"more hidden porting tax","msgtype":"m.text"},"ts":1291575961000,"senderName":"brendaneich","senderId":"brendaneich@irc"},
{"content":{"body":"if we want people to opt into the new version we don't want very many runtime meaning shifts","msgtype":"m.text"},"ts":1291576020000,"senderName":"brendaneich","senderId":"brendaneich@irc"},
{"content":{"body":"one common style","msgtype":"m.text"},"ts":1291576021000,"senderName":"_bga","senderId":"_bga@irc"},
{"content":{"body":"one or two big ones that are worth the trouble but not lots of little ones that no one will remember or be able to scan for","msgtype":"m.text"},"ts":1291576022000,"senderName":"brendaneich","senderId":"brendaneich@irc"},
{"content":{"body":"this isn't about style","msgtype":"m.text"},"ts":1291576023000,"senderName":"brendaneich","senderId":"brendaneich@irc"},
{"content":{"body":"`new A` - create instance of class A, `A(b)` - cast","msgtype":"m.text"},"ts":1291576080000,"senderName":"_bga","senderId":"_bga@irc"},
{"content":{"body":"you're talking about taking old code into the new opt-in version, or writing new code while still maintaining old -- both Date() -> string and (under your proposal) Date() -> object would coexist and cause confusion","msgtype":"m.text"},"ts":1291576081000,"senderName":"brendaneich","senderId":"brendaneich@irc"},
{"content":{"body":"there is no cast meaning for non-primitiive-wrappers ","msgtype":"m.text"},"ts":1291576082000,"senderName":"brendaneich","senderId":"brendaneich@irc"},
{"content":{"body":"i understand, old code will now works","msgtype":"m.text"},"ts":1291576140000,"senderName":"_bga","senderId":"_bga@irc"},
{"content":{"body":"but in c++ we have same common rules","msgtype":"m.text"},"ts":1291576200000,"senderName":"_bga","senderId":"_bga@irc"},
{"content":{"body":"`new A` and `A(b)`","msgtype":"m.text"},"ts":1291576201000,"senderName":"_bga","senderId":"_bga@irc"},
{"content":{"body":"its very readable and understandable","msgtype":"m.text"},"ts":1291576202000,"senderName":"_bga","senderId":"_bga@irc"},
{"content":{"body":"if we will have sugar for classes","msgtype":"m.text"},"ts":1291576260000,"senderName":"_bga","senderId":"_bga@irc"},
{"content":{"body":"that's not for sure","msgtype":"m.text"},"ts":1291576261000,"senderName":"brendaneich","senderId":"brendaneich@irc"},
{"content":{"body":"we can do not write `new ` keyword","msgtype":"m.text"},"ts":1291576262000,"senderName":"_bga","senderId":"_bga@irc"},
{"content":{"body":"all the classes as sugar proposals have been like that -- always construct, new is optional","msgtype":"m.text"},"ts":1291576560000,"senderName":"brendaneich","senderId":"brendaneich@irc"},
{"content":{"body":"note function proxies have independent call and construct traps","msgtype":"m.text"},"ts":1291576860000,"senderName":"brendaneich","senderId":"brendaneich@irc"},
{"content":{"body":"yes. main idea is `new` keyword is syntax noise for instance of class construction","msgtype":"m.text"},"ts":1291576980000,"senderName":"_bga","senderId":"_bga@irc"},
{"content":{"body":"MikeSmith: hm ok, might be fixed already then","msgtype":"m.text"},"ts":1291577460000,"senderName":"Peter`","senderId":"Peter`@irc"},
{"content":{"body":"I randomly ran in to it and figured I'd pass it along","msgtype":"m.text"},"ts":1291577461000,"senderName":"Peter`","senderId":"Peter`@irc"},
{"content":{"body":"is there a way to differentiate between multiple nav tags? An extra attribute for the main nav?","msgtype":"m.text"},"ts":1291580580000,"senderName":"sqwk","senderId":"sqwk@irc"},
{"content":{"body":"sqwk, class?","msgtype":"m.text"},"ts":1291581240000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"i meant more in terms of semantics","msgtype":"m.text"},"ts":1291581241000,"senderName":"sqwk","senderId":"sqwk@irc"},
{"content":{"body":"or would screenreaders figure the context out solely though the section tags?","msgtype":"m.text"},"ts":1291581300000,"senderName":"sqwk","senderId":"sqwk@irc"},
{"content":{"body":"Based on what I've seen of screen readers, they'll probably treat all <nav>s the same as <div>.","msgtype":"m.text"},"ts":1291581360000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"If you particularly want to support screen readers, you should go get one and test in it.","msgtype":"m.text"},"ts":1291581361000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Anyone who says semantic markup is necessary for the sake of screen readers has probably never even tried using one.  There are some particular patterns that make them very unhappy (like bad alt text), but mostly they ignore the semantic value of elements.","msgtype":"m.text"},"ts":1291581420000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"When I tried JAWS, it didn't even distinguish <strong> or <em> from <span>.","msgtype":"m.text"},"ts":1291581421000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Or <b> or <i> or <u> or <ins> or <del> or . . .","msgtype":"m.text"},"ts":1291581422000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"But anyway, no, there's no special way to semantically designate different navs, beyond class and such.","msgtype":"m.text"},"ts":1291581480000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Peter`:  It's definitely a problem -- I can reproduce it at validator.nu -- but I just can't reproduce it in my environment","msgtype":"m.text"},"ts":1291593120000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"}
]