[
{"content":{"body":"TabAtkins: https://stackoverflow.com/questions/43215834/what-is-mean-of-participate-in-definition-of-normal-flow-in-w3-spec","msgtype":"m.text"},"ts":1491350979000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"The above very much depends on the new state, might well be that b is more future proof, but in reality you likely have to vet everything","msgtype":"m.text"},"ts":1491364674000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: related to the houdini thread you @-mentioned me in (https://github.com/w3c/css-houdini-drafts/issues/239), would like your thoughts on https://github.com/heycam/webidl/pull/332","msgtype":"m.text"},"ts":1491402219000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I think I'd prefer just moving it as much as possible to its own section, apart from syntax bits and such of course which should be inlined","msgtype":"m.text"},"ts":1491402288000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: I don't really think we need to then hide that section","msgtype":"m.text"},"ts":1491402314000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: OK, I'll see if that's doable. iirc the problem is you have legacy stuff both in the language and bindings part","msgtype":"m.text"},"ts":1491402379000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: which makes the whole thing hard to move","msgtype":"m.text"},"ts":1491402415000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: will give it a go a report back","msgtype":"m.text"},"ts":1491402425000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I see, I guess the other thing I'd note is that this doesn't seem like a huge priority","msgtype":"m.text"},"ts":1491402455000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: part of the problem with index/named getters is that they're not marked \"legacy\" so folks still pick them up; I think if we more clearly marked them in syntax they wouldn't be picked up as much","msgtype":"m.text"},"ts":1491402513000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: at least folks don't pick up the other legacy bits","msgtype":"m.text"},"ts":1491402520000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well, it's a frequent point of contention, so heads up in the spec function as social lubricant.","msgtype":"m.text"},"ts":1491402565000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I think indexed getter is the main one that is still somewhat contentious and that's because TabAtkins never participated in the long debate we've had on it and nobody else seems to really remember it much or maybe nobody wants to talk about it again","msgtype":"m.text"},"ts":1491402652000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But indexed getter is also not marked legacy","msgtype":"m.text"},"ts":1491402664000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"okay, annevk.","msgtype":"m.text"},"ts":1491402665000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"botie: no","msgtype":"m.text"},"ts":1491402670000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: i'm not following you...","msgtype":"m.text"},"ts":1491402671000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"annevk: fwiw, greying out stuff in the spec is faster than renaming everything downstream. As a stopgap measure.","msgtype":"m.text"},"ts":1491402780000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Man, I remember those debates, don't even play.","msgtype":"m.text"},"ts":1491402786000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But yeah, it's not marked legacy, and new features are defined to depend on it, so what is a person supposed to think?","msgtype":"m.text"},"ts":1491402819000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Other than CSSOM no new features that I'm aware of","msgtype":"m.text"},"ts":1491402840000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I mean in WebIDL - value iterators","msgtype":"m.text"},"ts":1491402866000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I think we mainly added value iterators for legacy interfaces, but we should have more clearly indicated that","msgtype":"m.text"},"ts":1491402909000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"They were the new ArrayClass for NodeList and such","msgtype":"m.text"},"ts":1491402927000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"No, kv iterators have non-legacy usecases, v iterators have exactly the same.","msgtype":"m.text"},"ts":1491402963000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Seriously, we're in a bind here. We want array-likes, so we try to reach for the best thing available - indexed getters/setters - and get smacked down for them being bad (but not marked as bad, so how was anyone to know?).","msgtype":"m.text"},"ts":1491404080000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Then we reach for the second-best thing - value iterator, so people can at least turn the object into an array easily - and whoops that requires us to implement indexed getters again.","msgtype":"m.text"},"ts":1491404114000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Then I'm like \"welp, what if I hack around this by using a kv iterator instead, that doesn't depend on broken legacy-but-not-marked-as-such features\" and get yelled at for hacking around a problem.","msgtype":"m.text"},"ts":1491404191000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I really can't win here. :(","msgtype":"m.text"},"ts":1491404268000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I hear you, I wish Domenic could make some time and I really wish arv was still around since he felt pretty strongly about all this","msgtype":"m.text"},"ts":1491404298000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Easiest path to something useful is to fix value iterators to just be value iterators, not a sneaky backdoor into full Proxies for no reason.","msgtype":"m.text"},"ts":1491404363000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"There's literally no reason for value iterators to be built on top of indexed getters right now, it's all downside and makes the feature more complicated.","msgtype":"m.text"},"ts":1491404383000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"As far as I can tell, the current reason is just \"there were some subtle details we couldn't agree on, so instead of answering them, let's just rebase this on top of an existing feature that we presumably are already okay with the details of\".","msgtype":"m.text"},"ts":1491404467000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I see","msgtype":"m.text"},"ts":1491404486000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But I answered those subtle details, at least the ones the bz brought up, in the thread - feel free to crib my answers.","msgtype":"m.text"},"ts":1491404492000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: if value iterators are all we need and Domenic is okay with the overall API shape we should just do that","msgtype":"m.text"},"ts":1491404518000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: do we have a bug about separating them from getters?","msgtype":"m.text"},"ts":1491404532000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah. It's not *ideal*, but it lets people do `let arr = [...cssomThing];`","msgtype":"m.text"},"ts":1491404543000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"One of the bugs had me and bz discussing that, let me go track it down.","msgtype":"m.text"},"ts":1491404555000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yeah, end of https://github.com/heycam/webidl/issues/291","msgtype":"m.text"},"ts":1491404629000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The \"Remove [LegacyArrayClass]\" bug","msgtype":"m.text"},"ts":1491404640000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: https://github.com/heycam/webidl/issues/338","msgtype":"m.text"},"ts":1491404940000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hi, I'm reviewing a test that seems sensible, but there are 2 non essential parts of it I am not sure which spec justifies. (1) Is there any spec that says that if you make a focused element display:none, it must keep the focus? (2) Is there any spec that says that if you call the .focus() method on a display:none element, it must not get focused?","msgtype":"m.text"},"ts":1491406617000,"senderName":"frivoal","senderId":"frivoal@irc"},
{"content":{"body":"frivoal: HTML would define the latter, the former would be implied","msgtype":"m.text"},"ts":1491406664000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(if nothing says you can lose focus, it won't be lost)","msgtype":"m.text"},"ts":1491406686000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks for confirming the former part. For the HTML, do you know it does say that, or do you merely suspect it does? I've tried reading that section, but I got lost trying to follow definitions I did not previously know.","msgtype":"m.text"},"ts":1491406779000,"senderName":"frivoal","senderId":"frivoal@irc"},
{"content":{"body":"I can get to the bottom of it if needed, but if someone already knows the answer that's easier :)","msgtype":"m.text"},"ts":1491406805000,"senderName":"frivoal","senderId":"frivoal@irc"},
{"content":{"body":"frivoal: I'll have a look","msgtype":"m.text"},"ts":1491407039000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1491407045000,"senderName":"frivoal","senderId":"frivoal@irc"},
{"content":{"body":"frivoal: per step 1 of https://html.spec.whatwg.org/multipage/interaction.html#focusing-steps the element needs to be rendered (unless it meets some special condition which I guess it doesn't meet in this test)","msgtype":"m.text"},"ts":1491407134000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"isn't that sentence only about dialog elements. am I failing to parse the nesting in that sentence?","msgtype":"m.text"},"ts":1491407237000,"senderName":"frivoal","senderId":"frivoal@irc"},
{"content":{"body":"frivoal: I guess you're right, but even then you end up at otherwise since there's no scrollable area","msgtype":"m.text"},"ts":1491407310000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"frivoal: although I guess you can argue it's a focusable area, so yeah, maybe 2 is not defined","msgtype":"m.text"},"ts":1491407382000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"frivoal: it does seem like 2 not being defined would be a bug in HTML (if we indeed don't want focusing for those cases)","msgtype":"m.text"},"ts":1491407407000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it seems reasonable and interoperable, but I just had a hard time finding hard backing for it in the spec","msgtype":"m.text"},"ts":1491407421000,"senderName":"frivoal","senderId":"frivoal@irc"},
{"content":{"body":"oh, no, actually I think we get there","msgtype":"m.text"},"ts":1491407456000,"senderName":"frivoal","senderId":"frivoal@irc"},
{"content":{"body":"must be \"a focusable area\" and definition of \"focusable area\" includes being rendered","msgtype":"m.text"},"ts":1491407506000,"senderName":"frivoal","senderId":"frivoal@irc"},
{"content":{"body":"so we're good","msgtype":"m.text"},"ts":1491407509000,"senderName":"frivoal","senderId":"frivoal@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1491407694000,"senderName":"frivoal","senderId":"frivoal@irc"},
{"content":{"body":"Oh, the dfn of the element and its actual definition are a bit apart","msgtype":"m.text"},"ts":1491407845000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm, don't like that so much","msgtype":"m.text"},"ts":1491407852000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: how about <dfn><var>features</var> separators</dfn>?","msgtype":"m.text"},"ts":1491409174000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"or maybe just <dfn>feature separators</dfn>","msgtype":"m.text"},"ts":1491409243000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: I guess that or adding window in front of the others","msgtype":"m.text"},"ts":1491410129000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: I don't care strongly, seems like something Domenic might care about","msgtype":"m.text"},"ts":1491410142000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: you might want to encourage the CSS WG to do some triage now and then, none of https://github.com/w3c/css-houdini-drafts/pulls has some reason listed why they're not applied","msgtype":"m.text"},"ts":1491415246000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: and they're all pretty old","msgtype":"m.text"},"ts":1491415270000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that would be the Houdini TF","msgtype":"m.text"},"ts":1491415522000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Interested in TC39 & ECMAScript goings-on? /join #tc39","msgtype":"m.text"},"ts":1491419452000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"f'ing network spammers","msgtype":"m.text"},"ts":1491419706000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":":p","msgtype":"m.text"},"ts":1491419707000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"They're the worst!!","msgtype":"m.text"},"ts":1491419754000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"rbyers: do you happen to know if it is a known issue that Chrome 59 on up-to-date Fedora 25 has somehow broken high dpi handling","msgtype":"m.text"},"ts":1491425589000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"the UI is super tiny","msgtype":"m.text"},"ts":1491425596000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"it was working fine earlier today, but then I updated Fedora and Chrome","msgtype":"m.text"},"ts":1491425621000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"smaug: No that's news to me.  I'll look for a bug.  I know high-dpi on Linux hasn't been super-well supported (where Linux is different from ChromeOS anyway).","msgtype":"m.text"},"ts":1491426946000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"smaug: Don't see one from a quick search.  Please file a bug with details (eg. may be WM-specific or something, like so many Linux-specific UI/events issues)","msgtype":"m.text"},"ts":1491427019000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"ok. will file","msgtype":"m.text"},"ts":1491427121000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1491427129000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"annevk: Isn't the Fetch spec wrong to not skip all body-related steps when request's mode is \"websocket\"?","msgtype":"m.text"},"ts":1491432258000,"senderName":"nox","senderId":"nox@irc"}
]