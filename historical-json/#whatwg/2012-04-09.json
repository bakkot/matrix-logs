[
{"content":{"body":"hmm. what specs (other than webgl) have entry points that take numeric arrays (int[], float[])? can't think of any","msgtype":"m.text"},"ts":1333933972000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"every search engine ever written has been useless at searching for \"int[]\"","msgtype":"m.text"},"ts":1333933984000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i wish there was a way in CSS to say 'width: fill-the-container-but-for-the-purposes-of-shrink-wrap-act-as-if-you-had-a-width-of-0'","msgtype":"m.text"},"ts":1333942235000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"we're gonna mention \"Document Object Model\"? hmm","msgtype":"m.text"},"ts":1333955610000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh, was that the first?","msgtype":"m.text"},"ts":1333955685000,"senderName":"Ms2ger`","senderId":"Ms2ger`@irc"},
{"content":{"body":"if we do <code>Text</code> we should also do <code>DocumentType</code> I think","msgtype":"m.text"},"ts":1333955687000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think so","msgtype":"m.text"},"ts":1333955694000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I carefully avoided it thus far I think","msgtype":"m.text"},"ts":1333955700000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I didn't find concept-text :)","msgtype":"m.text"},"ts":1333955715000,"senderName":"Ms2ger`","senderId":"Ms2ger`@irc"},
{"content":{"body":"fair enough","msgtype":"m.text"},"ts":1333955754000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1333956669000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the shift_jis algorithm advertised everywhere is quite complex, but why...","msgtype":"m.text"},"ts":1333956681000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"compare:","msgtype":"m.text"},"ts":1333956697000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JPROW = 94","msgtype":"m.text"},"ts":1333956699000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"def get_sjis_i2(lead, trail):","msgtype":"m.text"},"ts":1333956699000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"    leadoffset = 0xC1 if lead > 0x9F else 0x81","msgtype":"m.text"},"ts":1333956699000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"    trailoffset = 0x41 if trail > 0x7F else 0x40","msgtype":"m.text"},"ts":1333956699000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"    return (lead-leadoffset) * (2 * JPROW) + trail - trailoffset","msgtype":"m.text"},"ts":1333956699000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"def get_sjis_i1(lead, trail):","msgtype":"m.text"},"ts":1333956699000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"    adjust = 1 if trail < 0x9F else 0","msgtype":"m.text"},"ts":1333956700000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"    leadoffset = 0x70 if lead < 0xA0 else 0xB0","msgtype":"m.text"},"ts":1333956700000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"    trailoffset = (0x41 if trail > 0x7F else 0x40) if adjust else 0x9F","msgtype":"m.text"},"ts":1333956701000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"    return ((((lead - leadoffset) * 2) - adjust) - 0x21) * JPROW + trail - trailoffset","msgtype":"m.text"},"ts":1333956701000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gives identical results","msgtype":"m.text"},"ts":1333956772000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not enough shift_jis people here huh? :)","msgtype":"m.text"},"ts":1333957597000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1333960351000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Gecko...","msgtype":"m.text"},"ts":1333960353000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"<meta charset=gbk><a></a><script>var a = document.getElementsByTagName(\"a\")[0]; a.href = \"?\\u20AC\"; alert(a.href) </script>","msgtype":"m.text"},"ts":1333960354000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Y U NO WORK?!","msgtype":"m.text"},"ts":1333960358000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but given an index (which I have) and a function to convert a point in an index to a byte sequence (which is not too hard), testing encoders should be fairly straightforward","msgtype":"m.text"},"ts":1333960547000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"except in Gecko","msgtype":"m.text"},"ts":1333960550000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1333960911000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"you have to account for duplicates somehow too","msgtype":"m.text"},"ts":1333960918000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: I think most do.","msgtype":"m.text"},"ts":1333974806000,"senderName":"Velmont","senderId":"Velmont@irc"},
{"content":{"body":"Would be really cool to have in the css though, -- not too nice if you don't have tab-complete. fill-the-container-but-for-the-purposes-of-shrink-wrap-act-as-if-you-had-a-width-of-0 -- guess it'll also be hard to remember exactly. :P","msgtype":"m.text"},"ts":1333974893000,"senderName":"Velmont","senderId":"Velmont@irc"},
{"content":{"body":"seems like my alternative shift_js math is correct","msgtype":"m.text"},"ts":1333975452000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh hey, that thing I was talking about the other day is called a fencepost error","msgtype":"m.text"},"ts":1333978127000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://en.wikipedia.org/wiki/Off-by-one_error","msgtype":"m.text"},"ts":1333978128000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jzaefferer or scott_gonzalez if you're around, wanted to ask how many files total are in your test suite","msgtype":"m.text"},"ts":1333990198000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: About 300","msgtype":"m.text"},"ts":1333990256000,"senderName":"jzaefferer","senderId":"jzaefferer@irc"},
{"content":{"body":"oh OK","msgtype":"m.text"},"ts":1333990263000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so that's fine","msgtype":"m.text"},"ts":1333990266000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hixie: You can get that behavior by saying that the intrinsic width is 0, but it defaults to width:fill (defined in Writing Modes).","msgtype":"m.text"},"ts":1333990294000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jzaefferer: I put together a command-line validation client that won't require you to run the service to validate your files. But I'm waiting on hsivonen to get back to review the code before I land it","msgtype":"m.text"},"ts":1333990346000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: oh, cool","msgtype":"m.text"},"ts":1333990346000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: is that anywhere close to being implemented?","msgtype":"m.text"},"ts":1333990353000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"jzaefferer: it will reduce your validation time to a few seconds","msgtype":"m.text"},"ts":1333990372000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Nobody's touched it, but it's just \"what width:auto does for blocks\", so implementation is trivial once someone cares about it.","msgtype":"m.text"},"ts":1333990379000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jzaefferer: minimum of 4 seconds or so to validate your 300 files, but validation time for each file will be reduced to 20ms or at most 100ms I think","msgtype":"m.text"},"ts":1333990453000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: That's great.","msgtype":"m.text"},"ts":1333990471000,"senderName":"scott_gonzalez","senderId":"scott_gonzalez@irc"},
{"content":{"body":"will require a single jar file","msgtype":"m.text"},"ts":1333990526000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"about 18MB","msgtype":"m.text"},"ts":1333990531000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"which is the other thing I need to talk to hsivonen about","msgtype":"m.text"},"ts":1333990606000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"we currently don't actually distribute any third-party cod","msgtype":"m.text"},"ts":1333990631000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"*code","msgtype":"m.text"},"ts":1333990635000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: bummer","msgtype":"m.text"},"ts":1333990668000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"scott_gonzalez: making a single jar available requires distributing 3rd-party code, so I want to make sure hsivonen  is OK with that before we do it","msgtype":"m.text"},"ts":1333990705000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1333990734000,"senderName":"scott_gonzalez","senderId":"scott_gonzalez@irc"},
{"content":{"body":"Hixie: Are you using this for a spec, or for something real?","msgtype":"m.text"},"ts":1333991665000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"real","msgtype":"m.text"},"ts":1333991671000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i come across it all the time","msgtype":"m.text"},"ts":1333991683000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ah, never mind then.","msgtype":"m.text"},"ts":1333991686000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"whenever i have something that shrinkwraps, e.g. a dialog or something, but it has to shrinkwrap around some widgets, and yet the dialog also contains text that can wrap","msgtype":"m.text"},"ts":1333991715000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and i'm happy for the text to wrap at whatever width the dialog ends up at","msgtype":"m.text"},"ts":1333991724000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ah, but the dialog instead fills the parent, because the text is long enough to force that shrink-wrapping beahvior.","msgtype":"m.text"},"ts":1333991788000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Interesting.","msgtype":"m.text"},"ts":1333991792000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"what should happen if you click or mouseover an element that is outside a modal dialog","msgtype":"m.text"},"ts":1333992940000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"should i just ignore the event?","msgtype":"m.text"},"ts":1333992944000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or should i do something more subtle, like only kill click events or something","msgtype":"m.text"},"ts":1333992965000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i think i'll just kill all user interaction events and prevent all focusing of elements outside the modal subtree and its ancestors","msgtype":"m.text"},"ts":1333993083000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I think that's legit.","msgtype":"m.text"},"ts":1333993114000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i'm going to introduce inert=\"\" as well while i do this, so that you can have semi-modal dialogs as some people have requested","msgtype":"m.text"},"ts":1333993217000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and make it use the same infrastructure","msgtype":"m.text"},"ts":1333993226000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ok inertism (inertia? :-) ) blocks user interaction events and makes things not focusable","msgtype":"m.text"},"ts":1333994149000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"anything else it should block while i'm at it?","msgtype":"m.text"},"ts":1333994157000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(bbiab)","msgtype":"m.text"},"ts":1333994158000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I don't recall the cross-browser specifics, but you might need to go into detail about how find/highlighting works while an inert element is open.","msgtype":"m.text"},"ts":1333994253000,"senderName":"scott_gonzalez","senderId":"scott_gonzalez@irc"},
{"content":{"body":"A quick test shows that in Chrome if an element has focus and you bring up the find interface, you can search for text on the page and then press escape to create a range around the first result of the find, which moves focus to the range.","msgtype":"m.text"},"ts":1333994338000,"senderName":"scott_gonzalez","senderId":"scott_gonzalez@irc"},
{"content":{"body":"I recall doing that a lot when I was testing modal plugins a few years ago to see how well they worked.","msgtype":"m.text"},"ts":1333994371000,"senderName":"scott_gonzalez","senderId":"scott_gonzalez@irc"},
{"content":{"body":"annevk, smaug___, sicking: re: MutationObservers attributeFilter discussion.","msgtype":"m.text"},"ts":1333995401000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"rafaelw_: yes?","msgtype":"m.text"},"ts":1333995416000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"question: MutationRecord.name (when type=\"attribute\")","msgtype":"m.text"},"ts":1333995419000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"in the case of xml, is that prefix:localName","msgtype":"m.text"},"ts":1333995434000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"or just localName","msgtype":"m.text"},"ts":1333995437000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1333995438000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"looking","msgtype":"m.text"},"ts":1333995493000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"i.e. what information is reported in the MutationRecord.","msgtype":"m.text"},"ts":1333995498000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1333995502000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"rafaelw_: note that attributes in the xlink namespace might not have a prefix","msgtype":"m.text"},"ts":1333995513000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"so they can have .name === .localName","msgtype":"m.text"},"ts":1333995521000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"rafaelw_: currently .attributeName is set to the name per spec, not localName","msgtype":"m.text"},"ts":1333995683000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"rafaelw_: lemme look what we do in our impl","msgtype":"m.text"},"ts":1333995693000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"WebKit appears to report localName right now.","msgtype":"m.text"},"ts":1333995795000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":";-(","msgtype":"m.text"},"ts":1333995797000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"yeah, we do the same in gecko","msgtype":"m.text"},"ts":1333995827000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"i prefer that behaviro","msgtype":"m.text"},"ts":1333995830000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"behavior","msgtype":"m.text"},"ts":1333995834000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"reporting only localName?","msgtype":"m.text"},"ts":1333995842000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":".name is rarely useful from a correctness point of view","msgtype":"m.text"},"ts":1333995849000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"actually, especially in the case of mutation observers, when you are often observing someone else's code, it makes much more sense to ignore prefixes","msgtype":"m.text"},"ts":1333995885000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"yeah, we only report localName","msgtype":"m.text"},"ts":1333995893000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"but won't it be ambiguous what happened?","msgtype":"m.text"},"ts":1333995907000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"you may not know what attribute changed?","msgtype":"m.text"},"ts":1333995919000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"Hixie: The word you're looking for is \"inertness\".","msgtype":"m.text"},"ts":1333996134000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: What happens if you start selecting non-inert text, and drag into inert text?","msgtype":"m.text"},"ts":1333996199000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: And did you handle accesskeys/etc?","msgtype":"m.text"},"ts":1333996217000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"sicking: ^^. if only localName is reported, isn't that potentially ambiguous?","msgtype":"m.text"},"ts":1333997213000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"rafaelw_: ?","msgtype":"m.text"},"ts":1333997656000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"hey. trying to settle the attributeFilter question.","msgtype":"m.text"},"ts":1333997685000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"the thing I was asking is what does MutationRecord.name report if type='attribute'","msgtype":"m.text"},"ts":1333997704000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"name or localName.","msgtype":"m.text"},"ts":1333997708000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"apparently the spec says name, but both of us implemented localName.","msgtype":"m.text"},"ts":1333997719000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1333997726000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and my question is: isn't that potentially ambiguous for XML?","msgtype":"m.text"},"ts":1333997736000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"because localName actually makes sense ;)","msgtype":"m.text"},"ts":1333997738000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"i.e. you won't know which attribute changed.","msgtype":"m.text"},"ts":1333997748000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"how would it be more ambiguous than name ?","msgtype":"m.text"},"ts":1333997757000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"if an element has foo:bar & foo2:bar and you get told that 'bar' changed.","msgtype":"m.text"},"ts":1333997787000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"you need to check namespaceuri + localName","msgtype":"m.text"},"ts":1333997789000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"i'm assuming that namespaceURI would be the same for both foo:bar and foo2:bar.","msgtype":"m.text"},"ts":1333997821000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"maybe i'm missunderstanding how this all works. it looks to me like there are three things: namespaceURI, prefix and localName","msgtype":"m.text"},"ts":1333997856000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"where name == prefix:localName","msgtype":"m.text"},"ts":1333997880000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"smaug___: am I misunderstanding something?","msgtype":"m.text"},"ts":1333998000000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"I don't think so","msgtype":"m.text"},"ts":1333998018000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1333998020000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"rafaelw_: remember, namespaced attributes may not always have a prefix","msgtype":"m.text"},"ts":1333998036000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"can the example i gave above occur?","msgtype":"m.text"},"ts":1333998050000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"I would assume no, but I'm not actually sure","msgtype":"m.text"},"ts":1333998098000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"rafaelw_: not possible http://www.w3.org/TR/REC-xml-names/#uniqAttrs","msgtype":"m.text"},"ts":1333998170000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"you assume it doesn't currently, or it *can't*.","msgtype":"m.text"},"ts":1333998173000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"foo:bar and foo2:bar where foo and foo2 are prefixes for the same namespace isn't possible","msgtype":"m.text"},"ts":1333998222000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"i see.","msgtype":"m.text"},"ts":1333998369000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"i get it know.","msgtype":"m.text"},"ts":1333998386000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"thank you. ok, I agree. localName seems like the right thing.","msgtype":"m.text"},"ts":1333998399000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"do we need a bug to change to spec to say that MutationRecord.name reports localName only?","msgtype":"m.text"},"ts":1333998643000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"rafaelw_: I assume the spec would need to be changed in order to fix that that attributeFilter too","msgtype":"m.text"},"ts":1333998908000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"not sure if annevk prefer separate bugs","msgtype":"m.text"},"ts":1333998918000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"rafaelw_: btw, is the GC handling I proposed ok to you ?","msgtype":"m.text"},"ts":1333999040000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"it still seems wrong to me to standardize on local name given that most APIs around non-namespaced attributes care about qualified name","msgtype":"m.text"},"ts":1333999049000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"e.g. Attr.name, setAttribute(), getAttribute(), hasAttribute(), etc.","msgtype":"m.text"},"ts":1333999066000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug___: yp. GC handling is right. It's what we implemented (though we didn't have tests and it turns out we had a bug -- which is now fixed).","msgtype":"m.text"},"ts":1333999211000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"scott_gonzalez, TabAtkins: thanks, will consider those points","msgtype":"m.text"},"ts":1333999720000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"rafaelw_: looking at attributeName + attributeNamespace should make it unambiguous","msgtype":"m.text"},"ts":1333999977000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"rafaelw_: sorry, i was unclear. We gecko only looks at localName + namespace of attributes","msgtype":"m.text"},"ts":1333999980000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"rafaelw_: what we don't look at is the name (== localName + prefix)","msgtype":"m.text"},"ts":1333999984000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"rafaelw_: looking at the name is generally more a convenience thing, since it's a single string trying to describe a tuple","msgtype":"m.text"},"ts":1333999988000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"rafaelw_: but it's more error prone since it breaks down if someone is using different prefixes than you think they are","msgtype":"m.text"},"ts":1333999994000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"rafaelw_: in other words, I think the behavior webkit and gecko has implemented is better than what the spec does since it's less error prone in all cases, and only harder to use in extremely rare edge cases","msgtype":"m.text"},"ts":1334000091000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"i get it now. thanks.","msgtype":"m.text"},"ts":1334000301000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"i agree.","msgtype":"m.text"},"ts":1334000302000,"senderName":"rafaelw_","senderId":"rafaelw_@irc"},
{"content":{"body":"rafaelw_: cool","msgtype":"m.text"},"ts":1334001357000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Hm.  If you were writing a parser for CSS, for a spec, would you do it as a flat tokenization phase followed by a full tree-build phase, or a more intelligent tokenization phase that handles some elements of the syntax, followed by a somewhat light tokenization phase?","msgtype":"m.text"},"ts":1334006031000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"s/light tokenization/lighter tree-building/","msgtype":"m.text"},"ts":1334006045000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Basically I'm wondering if I should handle CSS's rule that statements/blocks can't end while there's an unmatched ([{ on the stack at the tokenizer or the tree-builder level.","msgtype":"m.text"},"ts":1334006152000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hrm.  I think I should do the flat tokenization approach, which means rewriting some things.","msgtype":"m.text"},"ts":1334006413000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: imho the quicker you move things from dealing with characters and strings to something more abstract, the better, so i'd go with a light tokeniser at the top that turns things into tokens, and then some sort of processor on top of that to get something structured","msgtype":"m.text"},"ts":1334007225000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: but that's just because i like dealing with strongly typed tokens more than with strings and characters :-)","msgtype":"m.text"},"ts":1334007251000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I think you're right.  Having to switch levels between raw characters and tokens is annoying.","msgtype":"m.text"},"ts":1334007333000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"also don't forget you can have multiple levels, not just two","msgtype":"m.text"},"ts":1334007364000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"like, one level to get tokens, one to wrap the tokens up into nested blocks, and then finally one to actually process the blocks","msgtype":"m.text"},"ts":1334007386000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"It means the tokenizer has to do a bit more work in some cases, because I have much less contextual knowledge (I can't just say \"oh, you're starting a selector. consume until you see '{' or EOF.)","msgtype":"m.text"},"ts":1334007390000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1334007397000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah some of your tokens might be a bit special","msgtype":"m.text"},"ts":1334007415000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"in CSS it's not so bad though because the escaping is the same everywhere and there's little ambiguity iirc","msgtype":"m.text"},"ts":1334007428000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"e.g. an ident is an ident everywhere, whether it's a tag name or a property name or a media query type","msgtype":"m.text"},"ts":1334007445000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1334007462000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(might be some exceptions but i can't think of any)","msgtype":"m.text"},"ts":1334007467000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Selectors are... weird.","msgtype":"m.text"},"ts":1334007468000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I think I need to parse \".foo\" as a DELIM followed by an IDENT. :/","msgtype":"m.text"},"ts":1334007523000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"can't you do almost everything using only the tokens ident, punctuation ([, (, {, :, +, >, spaces, etc), strings (\"...\", '...'), and comments (/*...*/)?","msgtype":"m.text"},"ts":1334007523000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh and numbers","msgtype":"m.text"},"ts":1334007543000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yeah, maybe.","msgtype":"m.text"},"ts":1334007544000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so the tokeniser can do \\unescaping","msgtype":"m.text"},"ts":1334007555000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i dunno i'm saying this all from memory :-)","msgtype":"m.text"},"ts":1334007567000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"anywho","msgtype":"m.text"},"ts":1334007575000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I want to be a touch smarter to I'll directly get PERCENTAGE and DIMENSION rather than NUMBER + IDENT, but basically yeah.","msgtype":"m.text"},"ts":1334007583000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"you need context for that iirc","msgtype":"m.text"},"ts":1334007657000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"consider font: 1em 1em;","msgtype":"m.text"},"ts":1334007663000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"which is equivalent to font: initial; font-size: 1em; font-family: \"1em\";","msgtype":"m.text"},"ts":1334007680000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Nah, that's fine actually.  font-family parses a bunch of idents.  We regularized that last year.","msgtype":"m.text"},"ts":1334007703000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"No special parsing rule there.","msgtype":"m.text"},"ts":1334007707000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"really? font: 1em 1em is invalid now?","msgtype":"m.text"},"ts":1334007715000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I think it might allow numbers/dimensions too.","msgtype":"m.text"},"ts":1334007717000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The point is that font-family doesn't require anythign special until you actually parse the declaration itself.","msgtype":"m.text"},"ts":1334007744000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"No special bheavior is needed at the lower levels.","msgtype":"m.text"},"ts":1334007753000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"my point is that you have to treat \"font:1em 1.0em\" and \"font:1em 1em\" differently","msgtype":"m.text"},"ts":1334007755000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but i might be wrong i guess :-)","msgtype":"m.text"},"ts":1334007766000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"should be easy to test what browsers do now that they support @font-face","msgtype":"m.text"},"ts":1334007788000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ah, yes, it's all idents.","msgtype":"m.text"},"ts":1334007796000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"font-family: 1em; is now invalid.","msgtype":"m.text"},"ts":1334007804000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"good to know","msgtype":"m.text"},"ts":1334007978000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i wonder who implements that :-)","msgtype":"m.text"},"ts":1334007981000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"webkit gets it right","msgtype":"m.text"},"ts":1334008027000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"gecko too","msgtype":"m.text"},"ts":1334008042000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"nice!","msgtype":"m.text"},"ts":1334008044000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yeah, it was tracked in the CSS2.1 testsuite once we made the change, so people should have adjusted quickly.","msgtype":"m.text"},"ts":1334008183000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"well accesskeys are proving a mite difficult","msgtype":"m.text"},"ts":1334011080000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i guess i could just make commands Disabled if they are inert","msgtype":"m.text"},"ts":1334011133000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"That makes sense, I suppose.","msgtype":"m.text"},"ts":1334011293000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"that would be awesome actually","msgtype":"m.text"},"ts":1334011379000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it would automatically disable everything in a menu that referenced commands in that section","msgtype":"m.text"},"ts":1334011389000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"even if the menu wasn't inert","msgtype":"m.text"},"ts":1334011396000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so, is feras planning to ignore everyone and go ahead with his broken design? welcome to the future, where web api design is still done by blunt coercion","msgtype":"m.text"},"ts":1334012991000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: ?","msgtype":"m.text"},"ts":1334013121000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"oneTimeOnly","msgtype":"m.text"},"ts":1334013132000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"oh, the blob url stuff?","msgtype":"m.text"},"ts":1334013296000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1334013303000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"it's so broken","msgtype":"m.text"},"ts":1334013307000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"it makes me sad","msgtype":"m.text"},"ts":1334013311000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"implement it first and ship earlier","msgtype":"m.text"},"ts":1334013319000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's how it works","msgtype":"m.text"},"ts":1334013323000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"basically it's the old story: microsoft implements something broken; microsoft goes \"here's the api!\"; everyone goes \"this is broken, here's how to fix it\"; microsoft puts fingers in ears and runs away","msgtype":"m.text"},"ts":1334013333000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"welcoem to the web","msgtype":"m.text"},"ts":1334013351000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"heh, tickets like this help make sure I don't waste time filing bugs on firefox https://bugzilla.mozilla.org/show_bug.cgi?id=641509","msgtype":"m.text"},"ts":1334013535000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"basically about fifteen thousand people going \"taking the message out of onbeforeunload breaks our stuff\" and several explanations of why it's harmless to show it, and it gets ignored for a year then closed without reading any of it","msgtype":"m.text"},"ts":1334013575000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"anyone know what i should do at the aria level for inert=\"\" and inert subtrees generated by modal dialogs?","msgtype":"m.text"},"ts":1334014218000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"s/generated/established/","msgtype":"m.text"},"ts":1334014224000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: is \"inert\" close in function to \"disabled\"?","msgtype":"m.text"},"ts":1334014263000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"yeah. i was thinking aria-disabled=\"\" might work.","msgtype":"m.text"},"ts":1334014275000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"does \"Used in Roles:All elements of the base markup\" mean that it can be applied to elements regardless of role?","msgtype":"m.text"},"ts":1334014301000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1334014316000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"ok, aria-disabled it is.","msgtype":"m.text"},"ts":1334014382000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what exception should i throw if you try to showModal() a dialog that's already showing?","msgtype":"m.text"},"ts":1334015544000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(if you show() a dialog that's already showing, i just do it. but it seems likely that showModal()ing twice is a bug.)","msgtype":"m.text"},"ts":1334015560000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what makes it the same?  Having the same URL?  (Including query and hash?)","msgtype":"m.text"},"ts":1334015777000,"senderName":"dbaron","senderId":"dbaron@irc"},
{"content":{"body":"same <dialog> element","msgtype":"m.text"},"ts":1334015793000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(this is not showModalDialog())","msgtype":"m.text"},"ts":1334015824000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(it's <dialog>.showModal())","msgtype":"m.text"},"ts":1334015829000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1334015837000,"senderName":"dbaron","senderId":"dbaron@irc"},
{"content":{"body":"i guess NotSupportedError","msgtype":"m.text"},"ts":1334015895000,"senderName":"Hixie","senderId":"Hixie@irc"}
]