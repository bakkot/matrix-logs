[
{"content":{"body":"wanderview: I am now!","msgtype":"m.text"},"ts":1498033991000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"TabAtkins: ping about fingerprint :-)","msgtype":"m.text"},"ts":1498037538000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"JakeA: any thoughts on this? https://github.com/w3c/ServiceWorker/issues/1163","msgtype":"m.text"},"ts":1498051859000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I assume it follows the same weird replacement rules as about:blank iframes?","msgtype":"m.text"},"ts":1498051976000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"If so, yeah I agree with you","msgtype":"m.text"},"ts":1498051982000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: well, its the difference between parent and opener... I guess I was asking from a \"what would a web developer expect\" point of view?","msgtype":"m.text"},"ts":1498052007000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I don't think many developers understand about:blank's relationship to the parent/opener. But I think making iframe about:blank and window.open about:blank behave the same is the best thing","msgtype":"m.text"},"ts":1498052131000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1498052141000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: we have some bugs that make window.open() not behave the same as about:blank iframe, unfortunately","msgtype":"m.text"},"ts":1498052164000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: it's pretty edge-casey I think","msgtype":"m.text"},"ts":1498052303000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yea... and lots of compat issues except for a few narrow cases","msgtype":"m.text"},"ts":1498052344000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: about:blank replacement is only really handled the same between browsers when you do `<iframe src=\"nested.html\"></iframe><script>/* poke frame */</script>`","msgtype":"m.text"},"ts":1498052379000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: it blew my mind when I learned about it. Especially that the global survives.","msgtype":"m.text"},"ts":1498052525000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I guess I will just focus on the iframe case for now","msgtype":"m.text"},"ts":1498052650000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: using waitUntil in an async function event handler is kind of awkard","msgtype":"m.text"},"ts":1498057092000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"awkward","msgtype":"m.text"},"ts":1498057110000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"is there some trick?","msgtype":"m.text"},"ts":1498057208000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: what's the benefit of an async function event handler?","msgtype":"m.text"},"ts":1498058401000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: being able to use await?","msgtype":"m.text"},"ts":1498058420000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I sometimes do event.waitUntil(async function() { … }())","msgtype":"m.text"},"ts":1498058428000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1498058449000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"yea. I guess that makes sense","msgtype":"m.text"},"ts":1498058458000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I suggested that we should implicitly pass the handler return value to waitUntil, but that's kinda weird as handler return values are already used","msgtype":"m.text"},"ts":1498058498000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"returning false calls preventDefault","msgtype":"m.text"},"ts":1498058513000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I guess I got confused because I was writing a delayed response thing... so was using a different pattern","msgtype":"m.text"},"ts":1498058514000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: I guess the immediately invoked pattern is a bit weird to me","msgtype":"m.text"},"ts":1498058587000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"but I know its common in web dev","msgtype":"m.text"},"ts":1498058595000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I wonder if module scripts are an opportunity to provide a convenience API. Eg export async function install() { … }","msgtype":"m.text"},"ts":1498058692000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I guess you have to use `async function() {}()` and not `async _ => { }()`>","msgtype":"m.text"},"ts":1498058746000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1498058747000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: you could export const install = async () => {…}","msgtype":"m.text"},"ts":1498058780000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: oh, I was asking about the immiediately invoked syntax","msgtype":"m.text"},"ts":1498058816000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"oh sorry","msgtype":"m.text"},"ts":1498058828000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: module exports seem interesting","msgtype":"m.text"},"ts":1498058830000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: I think it would behave different with exceptions thrown from the event handlers today, though","msgtype":"m.text"},"ts":1498058852000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: you can do waitUntil((async () => {…})()) but it looks really messy","msgtype":"m.text"},"ts":1498058859000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"or maybe we would just have to spec it to work the same","msgtype":"m.text"},"ts":1498058860000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yeah, I'm not sure how exporting a fetch function would work, given that you have to call respondWith sync","msgtype":"m.text"},"ts":1498058923000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"also, these exported functions receiving an event object might be a little weird","msgtype":"m.text"},"ts":1498058938000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"One day we think we might have `async do { ... }` which is like a less-messy `(async () => { ... }())`","msgtype":"m.text"},"ts":1498060271000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But first we need to figure out sync `do { ... }`","msgtype":"m.text"},"ts":1498060280000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Which is unfortunately nontrivial because `var` hoisting","msgtype":"m.text"},"ts":1498060289000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Just exclude `var` from do statements, simple. ^_^","msgtype":"m.text"},"ts":1498060693000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"JakeA: fun about:blank test case: https://github.com/w3c/web-platform-tests/pull/6304","msgtype":"m.text"},"ts":1498062548000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: ok, I added a window.open() case as well","msgtype":"m.text"},"ts":1498072818000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"MikeSmith: i managed to write something to the <title> (for https://github.com/whatwg/wattsi/issues/50 ) ^_^","msgtype":"m.text"},"ts":1498073077000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"People may enjoy: https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-for-spec-authors","msgtype":"m.text"},"ts":1498077453000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"tobie: getting all those closed issue emails in a row was fun :D","msgtype":"m.text"},"ts":1498077709000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: :)","msgtype":"m.text"},"ts":1498079492000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: shouldn't FrozenArray be a valid JSON type?","msgtype":"m.text"},"ts":1498079534000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"is asking for a friend.","msgtype":"m.emote"},"ts":1498079549000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I can't see how it would arise, since they really only occur as attributes on interfaces, right?","msgtype":"m.text"},"ts":1498080687000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: step 2.3 of https://heycam.github.io/webidl/#collect-attribute-values","msgtype":"m.text"},"ts":1498080784000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: checks whether an attribute is of JSON type before adding it to the object returned by the default toJSON operation","msgtype":"m.text"},"ts":1498080836000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Ah right, for the default one, yes","msgtype":"m.text"},"ts":1498080855000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Then yeah, agreed","msgtype":"m.text"},"ts":1498080858000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"OK, fixing.","msgtype":"m.text"},"ts":1498080872000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: (needed for https://heycam.github.io/webidl/#collect-attribute-values)","msgtype":"m.text"},"ts":1498080887000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: additional quick help request for |target| variable used here: https://heycam.github.io/webidl/#ref-for-get-the-underlying-value-1","msgtype":"m.text"},"ts":1498080984000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: this is supposed to be a reference to the object that implements `Transaction`. Should I just use <emu-val>this</emu-val> instead?","msgtype":"m.text"},"ts":1498081071000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"or \"the object implementing Transaction\"?","msgtype":"m.text"},"ts":1498081089000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I've been doing \"this Transaction object\", although the exact phrasing here is an open issue.","msgtype":"m.text"},"ts":1498081111000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: \"the current ...\" ?","msgtype":"m.text"},"ts":1498081234000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: I just want the \"The following <var>s were only used once in the document\" warning to go. :D","msgtype":"m.text"},"ts":1498081297000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Well \"this\" has the right connotation","msgtype":"m.text"},"ts":1498081626000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"tobie: https://www.w3.org/Bugs/Public/show_bug.cgi?id=27301","msgtype":"m.text"},"ts":1498081705000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: heh","msgtype":"m.text"},"ts":1498081781000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Should bump this in the list of priorities","msgtype":"m.text"},"ts":1498081803000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: I went with: \"Let value be result of getting the underlying value of the attribute identified by attr, for the given Transaction object.\" bad?","msgtype":"m.text"},"ts":1498081871000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I just don't understand why you prefer \"the given\" (who gave it to you?) instead of \"this\"","msgtype":"m.text"},"ts":1498081908000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I don't. I just went from \"given |target|\" to \"given this Transaction object\" to \", for the given Transaction object\" instead of \"for this Transaction object\".","msgtype":"m.text"},"ts":1498082526000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Oh!","msgtype":"m.text"},"ts":1498082617000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I misunderstood.","msgtype":"m.text"},"ts":1498082621000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You are not wanting to modify the example, you are wanting to modify the definition?","msgtype":"m.text"},"ts":1498082650000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"No, nevermind","msgtype":"m.text"},"ts":1498082689000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: no, I actually had \"given |target|\" in the example (don't ask)","msgtype":"m.text"},"ts":1498082702000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Yeah ok. Seems fine I guess. I would have done \"given this Transaction object\".","msgtype":"m.text"},"ts":1498082734000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: contemplating force pushing.","msgtype":"m.text"},"ts":1498082761000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"zcorpan: cool 👉  > i managed to write something to the <title>","msgtype":"m.text"},"ts":1498085511000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"}
]