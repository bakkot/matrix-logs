[
{"content":{"body":"i don't understand step 7 of this spec https://fetch.spec.whatwg.org/#concept-main-fetch","msgtype":"m.text"},"ts":1432254635000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"when it says run the remaining steps in parallel, does it mean each and every subsequent steps should be ran in a separate thread?","msgtype":"m.text"},"ts":1432254671000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"anyone?","msgtype":"m.text"},"ts":1432255881000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"it's hard to make heads or tails out of it, but it doesn't seem to mean what \"in parallel\" normally means","msgtype":"m.text"},"ts":1432256008000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"https://html.spec.whatwg.org/multipage/infrastructure.html#in-parallel << pretty clearly is not saying \"new thread for each subsequent step\" though","msgtype":"m.text"},"ts":1432256075000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"caitp-: yes that's why i was confused","msgtype":"m.text"},"ts":1432256208000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"yes, probably worth filing a bug on the language used =p","msgtype":"m.text"},"ts":1432256243000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"what's the link for reporting bugs?","msgtype":"m.text"},"ts":1432256261000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"you should see one if you fling the mouse around the spec, it pops up at the top or bottom","msgtype":"m.text"},"ts":1432256324000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"oh, you don't even have to fling the cursor around, it's just floating at the bottom","msgtype":"m.text"},"ts":1432256386000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"TabAtkins, just because we don't all have high S2N ratios doesn't mean we're trolls, I'm sure L2L or whatever his name is means well","msgtype":"m.text"},"ts":1432256475000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"ok i found it","msgtype":"m.text"},"ts":1432256512000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"without judging L2L specifically --- sufficiently advanced incompetence is indistinguishable from malice","msgtype":"m.text"},"ts":1432256536000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"this is about asking for labeled block statements in ecmascript","msgtype":"m.text"},"ts":1432256644000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"which is a perfectly fine thing to propose when talking about language design","msgtype":"m.text"},"ts":1432256665000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"caitp-: Nah, L2L's s/n ratio is basically zero. I flipped the bozo bit on him when he was doing stuff in www-style.","msgtype":"m.text"},"ts":1432257255000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You don't need a *high* ratio, just one distinguishable from gibberish.","msgtype":"m.text"},"ts":1432257292000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"is about to take off.","msgtype":"m.emote"},"ts":1432257341000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"if it was anyone else asking for goto in js would you still be talking about banning them","msgtype":"m.text"},"ts":1432257371000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"you don't have to explain why vms don't really want to have to implement it, or why most authors don't want to read or write it, but it's certainly not off the table for discussion on language design","msgtype":"m.text"},"ts":1432257537000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"my laptop just crashed","msgtype":"m.text"},"ts":1432263849000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"oos","msgtype":"m.text"},"ts":1432263851000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"hello","msgtype":"m.text"},"ts":1432273718000,"senderName":"ek_","senderId":"ek_@irc"},
{"content":{"body":"i have a question","msgtype":"m.text"},"ts":1432273723000,"senderName":"ek_","senderId":"ek_@irc"},
{"content":{"body":"In HTML5 spec it talks about stable state (in http://www.w3.org/TR/html5/single-page.html#await-a-stable-state). Can you explain what is a stable state and what does it exactly mean to await a stable state? I can not get the explanation in the spec. A simple example will be helpful","msgtype":"m.text"},"ts":1432273733000,"senderName":"ek_","senderId":"ek_@irc"},
{"content":{"body":"hmm. annevk isn't here.","msgtype":"m.text"},"ts":1432288647000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Does anyone have test cases for the Big5 decoder as defined in the Encoding Standard?","msgtype":"m.text"},"ts":1432288670000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Hixie: What is a \"globally unique identifier\" in https://html.spec.whatwg.org/multipage/browsers.html#origin ? Is it the same as \"opaque identifier\" ?","msgtype":"m.text"},"ts":1432290183000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1432290310000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Shouldn’t that be defined in the spec?","msgtype":"m.text"},"ts":1432290513000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"I guess it should say \"globally unique opaque identifier\"","msgtype":"m.text"},"ts":1432290875000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"hsivonen: It's possible that libicu would have test cases, jshin⊙co has done some work. I kind of doubt there's a from-scratch implementation based on the spec algorithm with test cases for its specific way of doing error handling, however.","msgtype":"m.text"},"ts":1432293570000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: thanks","msgtype":"m.text"},"ts":1432293618000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"SimonSapin, ^","msgtype":"m.text"},"ts":1432293621000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"philipj: I guess I'll do some manual math to at least get a couple of smoke tests written","msgtype":"m.text"},"ts":1432293639000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"but first, it turns out that I should replace my placeholder for a data table with an actual data table!","msgtype":"m.text"},"ts":1432293667000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: I really hope the new Big5 bits work out, I put quite a lot of research into some of the tiny details :)","msgtype":"m.text"},"ts":1432293690000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"but if it doesn't, we'll learn something from the failure at least","msgtype":"m.text"},"ts":1432293706000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: first thing I've learned: the lowest valid pointer in the index does not exist according to the OpenJDK notion of \"Big5\", so I probably shouldn't check my test cases against the JDK decoder","msgtype":"m.text"},"ts":1432293746000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: I think on average the Big5-HKSCS decoder from other implementations would be the closest to the spec","msgtype":"m.text"},"ts":1432293808000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"not sure if the low indexes are where Big5-HKSCS has its additions though","msgtype":"m.text"},"ts":1432293824000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: makes sense","msgtype":"m.text"},"ts":1432293898000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"does Python have syntactic sugar for a flavor of xrange that takes a pair of integers instead of two integer arguments?","msgtype":"m.text"},"ts":1432294089000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I guess I'll just have to take the integers out of the pair myself :-(","msgtype":"m.text"},"ts":1432294129000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"except I already did so. doh","msgtype":"m.text"},"ts":1432294153000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"range(*(2, 3))","msgtype":"m.text"},"ts":1432294199000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: thanks","msgtype":"m.text"},"ts":1432294271000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Np","msgtype":"m.text"},"ts":1432294277000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"writes Python to generate Java with the plan to then repurpose the Python program to generate C++","msgtype":"m.emote"},"ts":1432294318000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"(because it makes no sense to write either directly)","msgtype":"m.text"},"ts":1432294332000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen, btw, Kannan was looking for someone to ask about nsScriptLoader; I believe he said he'd send you email","msgtype":"m.text"},"ts":1432294418000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: I've replied, but by then smaug had already replied more usefully","msgtype":"m.text"},"ts":1432294508000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Alright, great :)","msgtype":"m.text"},"ts":1432294528000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"aargh. I keep doing things that collide with magic limits of either the Java class format or HotSpot","msgtype":"m.text"},"ts":1432294787000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"this time, I tried to pack data in a string literal that's too long for the class file format","msgtype":"m.text"},"ts":1432294814000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"16 bit length?","msgtype":"m.text"},"ts":1432295460000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: yes","msgtype":"m.text"},"ts":1432295801000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"SimonSapin: counted on Java-modiefied UTF-8 bytes","msgtype":"m.text"},"ts":1432295817000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"apparently","msgtype":"m.text"},"ts":1432295820000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"\"Postel tarpit (n.) - A system that has tried so hard to accept all possible input that any change becomes backwards-incompatible\"","msgtype":"m.text"},"ts":1432296780000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"hooray. my Big5 decoder isn't obviously broken","msgtype":"m.text"},"ts":1432297732000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"(unobvious test cases are harder, of course)","msgtype":"m.text"},"ts":1432297749000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"oh, great. the error reporting design of the Java NIO decoding API is more broken than I thought","msgtype":"m.text"},"ts":1432298335000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hmm...","msgtype":"m.text"},"ts":1432298437000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"and even more broken than I thought","msgtype":"m.text"},"ts":1432298460000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"quite sad really","msgtype":"m.text"},"ts":1432298463000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"so assume you have a big5 input buffer that ends with 0xFE. then your next input buffer starts with 0x39.","msgtype":"m.text"},"ts":1432298802000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I don't see how the Java API allows the decoder to signal the error to the caller such that the caller constructs U+FFFD followed by U+0039 and not just U+FFFD","msgtype":"m.text"},"ts":1432298888000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"boo","msgtype":"m.text"},"ts":1432298891000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"if there is a way, it sure is an undocumented abuse of the API","msgtype":"m.text"},"ts":1432298947000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"let's see if my caller-side code that I wrote years ago has an answer to how the JDK decoders deal","msgtype":"m.text"},"ts":1432298971000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"kids, don't try to design a streaming decoder API that allows the caller simultaneously to learn which bytes turn into U+FFFD and to continue decoding","msgtype":"m.text"},"ts":1432299022000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"seems to be too hard a problem even for profession drivers on closed road","msgtype":"m.text"},"ts":1432299044000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"OK, my old calling code, for which I blackbox reverse engineered how the API actually works, shows how the undocumented part works","msgtype":"m.text"},"ts":1432299172000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"you claim you need more input but you leave some input unconsumed","msgtype":"m.text"},"ts":1432299195000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"and the caller in, undocumentedly, supposed to copy the unconsumed bytes to the start of the next buffer","msgtype":"m.text"},"ts":1432299215000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"sucks to be the caller if the unconsumed bytes are more numerous that the size of your buffer","msgtype":"m.text"},"ts":1432299243000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"boo boo boo","msgtype":"m.text"},"ts":1432299246000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"except how does what I just said work if 0xFE is the last byte before EOF?","msgtype":"m.text"},"ts":1432299552000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"aargh","msgtype":"m.text"},"ts":1432299553000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"wow. this API design sucks","msgtype":"m.text"},"ts":1432300599000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: you writing this in Python?","msgtype":"m.text"},"ts":1432300666000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"which API","msgtype":"m.text"},"ts":1432300670000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I'm writing the code generation in Python","msgtype":"m.text"},"ts":1432300907000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"MikeSmith: the actual code is Java (C++ inthe future)","msgtype":"m.text"},"ts":1432300916000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"MikeSmith: the bad API is java.nio.charset.CharsetDecoder","msgtype":"m.text"},"ts":1432300931000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"aha","msgtype":"m.text"},"ts":1432300959000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"fun fact, if your input buffer is one byte long (edge case that's not prohibited!), the API doesn't work on the REPORT mode","msgtype":"m.text"},"ts":1432301094000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"i.e. if you try to feed the decoder one byte at a time","msgtype":"m.text"},"ts":1432301111000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I guess if I had unlimited time, I could write a blog post about how even the API that's supposed to be right is wrong","msgtype":"m.text"},"ts":1432301158000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: good thing it's not very widely used :-)","msgtype":"m.text"},"ts":1432301348000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: few people need to use the API directly","msgtype":"m.text"},"ts":1432301365000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"from either side","msgtype":"m.text"},"ts":1432301372000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"anyway, if anyone wants to review: https://hg.mozilla.org/projects/htmlparser/rev/b426b2e8f47a","msgtype":"m.text"},"ts":1432301426000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"oh, and I just noticed that implFlush is wrong","msgtype":"m.text"},"ts":1432301445000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"for those who are interested, search for \"undocumented\" in the above changeset","msgtype":"m.text"},"ts":1432301586000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"looks now","msgtype":"m.emote"},"ts":1432302525000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think a good rule if you're reading hsivonen code and there's a commment that's any longer than two lines, it's most likely there to point out something that's broken","msgtype":"m.text"},"ts":1432302681000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"}
]