[
{"content":{"body":"TabAtkins: yeah, you can check \"in a document tree\" or \"is connected\". If you need to perform actions on every element being removed/inserted, then use removing steps I believe it's called.","msgtype":"m.text"},"ts":1522283668000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Streams spec q: Is there a reason why the class definitions are not more WebIDL-y? For example: I was surprised by the fact that the `closed` getter is in fact a promise. Would adding some sort of type annotation to the class definitions be desirable and acceptable?","msgtype":"m.text"},"ts":1522319764000,"senderName":"surma","senderId":"surma@irc"},
{"content":{"body":"surma: I don't think we should add type definitions to the class definitions, since that is not how JS works","msgtype":"m.text"},"ts":1522320286000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"surma: as for Web IDL vs. JS spec styles, see https://github.com/whatwg/streams/issues/45","msgtype":"m.text"},"ts":1522320303000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1522320370000,"senderName":"surma","senderId":"surma@irc"},
{"content":{"body":"You said in that issue “The class description is meant to be for web developers” — which I agree. I just think it’s currently somewhat hard to figure out that for example `closed` and `pipeTo()` return a promise","msgtype":"m.text"},"ts":1522320404000,"senderName":"surma","senderId":"surma@irc"},
{"content":{"body":"Maybe there’s some other way we can make that more discoverable? Maybe we can just add type annotations for the return values?","msgtype":"m.text"},"ts":1522320443000,"senderName":"surma","senderId":"surma@irc"},
{"content":{"body":"Hmm, doesn't it say \"returns a promise\" right in their web-developer facing descriptions?","msgtype":"m.text"},"ts":1522320452000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If not, indeed, perhaps we can make them say that","msgtype":"m.text"},"ts":1522320462000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah I think it does","msgtype":"m.text"},"ts":1522320476000,"senderName":"surma","senderId":"surma@irc"},
{"content":{"body":"The note does","msgtype":"m.text"},"ts":1522320479000,"senderName":"surma","senderId":"surma@irc"},
{"content":{"body":"But for example the pipeTo note is quite long. The info is all there, I was just wondering if there’s an acceptable way to make it more structured and directly in the class definition.","msgtype":"m.text"},"ts":1522320546000,"senderName":"surma","senderId":"surma@irc"},
{"content":{"body":"But it’s nbd, it definitely works as it currently is","msgtype":"m.text"},"ts":1522320553000,"senderName":"surma","senderId":"surma@irc"},
{"content":{"body":"I think one way forward is noted in https://github.com/whatwg/streams/issues/907. Notably that would put an \"await\" before the usage.","msgtype":"m.text"},"ts":1522320675000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(and nuke the class definition entirely, since it seems less helpful than I was hoping.)","msgtype":"m.text"},"ts":1522320695000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(the #event-retargeting-steps anchor doesn’t seem to exist anymore btw)","msgtype":"m.text"},"ts":1522320853000,"senderName":"surma","senderId":"surma@irc"},
{"content":{"body":"surma: updated the link in OP to https://dom.spec.whatwg.org/#event-path","msgtype":"m.text"},"ts":1522321461000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"surma: (seems it was mostly about the domintro section; and we removed retargeting steps)","msgtype":"m.text"},"ts":1522321485000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ty!","msgtype":"m.text"},"ts":1522321499000,"senderName":"surma","senderId":"surma@irc"},
{"content":{"body":"surma: next time you fix something don't forget to add yourself to the Acknowledgments section","msgtype":"m.text"},"ts":1522322156000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I thought I was alreadfy listed in the stream spec","msgtype":"m.text"},"ts":1522322196000,"senderName":"surma","senderId":"surma@irc"},
{"content":{"body":"surma: I looked for \"Surma\"","msgtype":"m.text"},"ts":1522322210000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: in Chrome (maybe WebKit too), when would compatibility_mode_locked_ in Document.cpp be false?","msgtype":"m.text"},"ts":1522322268000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I could have sworn I added myself in with my first linkification PR","msgtype":"m.text"},"ts":1522322272000,"senderName":"surma","senderId":"surma@irc"},
{"content":{"body":"Thanks for the hint. I will happily add myself with my current PR ;)","msgtype":"m.text"},"ts":1522322284000,"senderName":"surma","senderId":"surma@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1522322328000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it's initialized to false, and seems to be set to true in all Document subclasses except XMLDocument, although I didn't exhaustively check","msgtype":"m.text"},"ts":1522322484000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: I wonder why it exists then","msgtype":"m.text"},"ts":1522322548000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: document.open() tries to change mode to \"no-quirks\" in Chrome, but that can never succeed with such a setup","msgtype":"m.text"},"ts":1522322570000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: maybe just some dead code in Document.cpp's ImplicitOpen then","msgtype":"m.text"},"ts":1522322651000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: what are the per-spec situation when the compat mode should change? The comment \"This is cheaper than making setCompatibilityMode virtual\" suggests that the setup is a bit contrived for performance, but maybe the observable effect is correct?","msgtype":"m.text"},"ts":1522322660000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"annevk: dead code would not be surprising to find","msgtype":"m.text"},"ts":1522322673000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: per spec I don't know about any situation where it could change, though document.open() seems somewhat reasonable as a possible place (just not in the spec)","msgtype":"m.text"},"ts":1522322704000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: you suspect that the SetCompatibilityMode(kNoQuirksMode) call there never has any effect?","msgtype":"m.text"},"ts":1522322724000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: yeah, if all subclasses freeze the value per that variable and you can only invoke document.open() on HTML documents...","msgtype":"m.text"},"ts":1522322760000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: the only other \"legit\" caller that I found was cloneNode() and friends, and I guess there you want to set it to be the same as the document you are cloning, so that makes some sense","msgtype":"m.text"},"ts":1522322833000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'll try adding an assert and running it through all bots to see if that disproves the dead code hypothesis quickly","msgtype":"m.text"},"ts":1522322925000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: thanks","msgtype":"m.text"},"ts":1522323000000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://chromium-review.googlesource.com/c/chromium/src/+/986136","msgtype":"m.text"},"ts":1522323014000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"I want to know how document.open() in non-Firefox works to see if we can just make the spec say that","msgtype":"m.text"},"ts":1522323033000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the document seems to be only readable by @chromium.org :(  I asked the author to change the permission.","msgtype":"m.text"},"ts":1522323223000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"kochi: ta","msgtype":"m.text"},"ts":1522323257000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: isn't blink doing exactly what Gecko does with submit/reset","msgtype":"m.text"},"ts":1522327273000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: maybe I got misled due to the nested form stuff","msgtype":"m.text"},"ts":1522327338000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: I guess I should write some tests to make sure, but if my proposal matches Fx then hurray?","msgtype":"m.text"},"ts":1522327388000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, I think you did describe what Gecko does","msgtype":"m.text"},"ts":1522327446000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"er, except","msgtype":"m.text"},"ts":1522327455000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"no no, it is fine. there is event's currentTarget != event's target","msgtype":"m.text"},"ts":1522327480000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: it seems in theory get the parent could add an event listener that does this","msgtype":"m.text"},"ts":1522328129000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: though if not implemented that way it would be observable so maybe not worth it","msgtype":"m.text"},"ts":1522328180000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"What's the difference between [[Foo]] and [[foo]] in ES?","msgtype":"m.text"},"ts":1522329384000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: I think one is the old convention","msgtype":"m.text"},"ts":1522331258000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"One names an internal slot named \"Foo\", the other names an internal slot named \"foo\"","msgtype":"m.text"},"ts":1522336686000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It is similar to `x.Foo` vs. `x.foo`","msgtype":"m.text"},"ts":1522336702000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I think a decision was made about casing though","msgtype":"m.text"},"ts":1522336837000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: to use uppercase throughout","msgtype":"m.text"},"ts":1522336842000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm not sure ES ever used lowercase","msgtype":"m.text"},"ts":1522336853000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: https://github.com/tc39/ecma262/commit/a2f6bfd7c547a306f428f9ecde9baf5fe04f2c8f","msgtype":"m.text"},"ts":1522336883000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hah wow, I've thoroughly adapted to the new world :).","msgtype":"m.text"},"ts":1522336909000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I guess technically you're no longer editing Streams","msgtype":"m.text"},"ts":1522336932000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(it uses old-style)","msgtype":"m.text"},"ts":1522336945000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's a multi-editor situation","msgtype":"m.text"},"ts":1522336947000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"We have an open issue to update, but nobody feels strongly","msgtype":"m.text"},"ts":1522336956000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"In practice, most of my work is in sprints when I visit Tokyo, with ricea holding down the fort most of the time","msgtype":"m.text"},"ts":1522337002000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"He did pretty much all the work for transform streams though, which is the most recent big chunk","msgtype":"m.text"},"ts":1522337042000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Seems pretty exciting","msgtype":"m.text"},"ts":1522337060000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wonder if ricea is interested in adding them to WebSocket","msgtype":"m.text"},"ts":1522337079000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We talked about it; the issue is prioritizing vs. other work (mostly on the implementation side)","msgtype":"m.text"},"ts":1522337103000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The naive wrapping, i.e. a productionized version of https://streams.spec.whatwg.org/#example-both with real backpressure support, might not be much","msgtype":"m.text"},"ts":1522337178000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"A lgrahl-style stream-of-streams seems harder","msgtype":"m.text"},"ts":1522337186000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Unclear who the customers are though","msgtype":"m.text"},"ts":1522337200000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It does seem there's still some interest in WebSocket given what I hear occasionally, but maybe not that much indeed","msgtype":"m.text"},"ts":1522337492000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That might also due to it not supporting some features folks would really like though, such as being able to set an Authorization header","msgtype":"m.text"},"ts":1522337517000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I do know of at least one customer :)","msgtype":"m.text"},"ts":1522337995000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"Domenic: And once we have them for data channels, we can pretty much c&p it for WebSockets","msgtype":"m.text"},"ts":1522338022000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"that'd be a good order of operations, yeah","msgtype":"m.text"},"ts":1522338039000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yes and I'm also wondering whether QUIC will move into the WebSockets area","msgtype":"m.text"},"ts":1522338162000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"I thought I understood the purpose of WebIDL but now I'm a little confused. It seems that a big part of WebIDL is to facilitate the conversion of ECMAScript values to WebIDL values, and any language (like C++) can implement WebIDL and therefore have a proper conversion from ECMAScript values => C++ values etc.","msgtype":"m.text"},"ts":1522344067000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"But isn't this what each ECMAScript implementation already does? For example, in v8 there certainly are already bindings that take in JS values and eventually v8 uses them in C++-land. So it almost seems like WebIDL is just an extension of ECMAScript, further nailing down abstract conversions right?","msgtype":"m.text"},"ts":1522344107000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"could we not just write interfaces (in web specs) in the form of ECMAScript constructs (intrinsic objects, properties, etc). After all, this is what native ECMAScript objects are defined in right?","msgtype":"m.text"},"ts":1522344172000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"cc TabAtkins as I know he's answered a few WebIDL questions here before","msgtype":"m.text"},"ts":1522344604000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"We avoid that because it's *incredibly* fiddly. Reading the ES spec is a high-level skill that very few people can actually do effectively (most implementors can't), and *writing* it is even harder. WebIDL just lets us abstract most of that away.","msgtype":"m.text"},"ts":1522344737000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The whole point of WebIDL is in the name - it's a language for describing web interfaces, so we don't have to actually *write* the interfaces, in their full gory details, by hand. (And get things wrong, and handle things inconsistently, etc.)","msgtype":"m.text"},"ts":1522344810000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Ok that makes sense, so WebIDL sort of packages some ECMAScript things together in a form to succinctly describe interfaces that use ECMAScript constructs.","msgtype":"m.text"},"ts":1522344853000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Yeah. This way all methods and properties are attached to classes in the same way, all arguments are converted in the same predictable manner, etc. We're left with mostly just the *relevant* details to specify, the parts that actually matter to authors.","msgtype":"m.text"},"ts":1522344918000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: So it could almost be a subset of the ECMAScript spec that would allow other web standards to hook into it to more easily used the tricky and arduous constructs?","msgtype":"m.text"},"ts":1522344922000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Ok that makes sense thank you.","msgtype":"m.text"},"ts":1522344943000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"I guess that's basically what it is, sure?","msgtype":"m.text"},"ts":1522344953000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(What's the context of these questions, by the way?)","msgtype":"m.text"},"ts":1522344961000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Giving a talk at my school tonight; just hammering down a few stray details","msgtype":"m.text"},"ts":1522344998000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Previously I've read a good bit of the ECMAScript spec and it made sense (this was long after visiting WebIDL a while ago), then some thoughts hit me when I was connecting the dots.","msgtype":"m.text"},"ts":1522345154000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: the WebIDL repository has a bunch of issues labeled \"jsidl\" which is an idea to bring both ways of writing specifications closer to each other","msgtype":"m.text"},"ts":1522345381000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: if we succeed with that at some point it'd become much easier to define a new JavaScript class","msgtype":"m.text"},"ts":1522345419000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ah ok that's really exciting!","msgtype":"m.text"},"ts":1522345563000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"annevk: So given that web APIs are defined with WebIDL (and conversions here etc are specified), and ECMAScript built-in objects are *not* defined with WebIDL (obviously) (though they too appear on the web), you're saying the `jsidl` issues attempt to roughly converge on how the two standards express objects/APIs? Is that roughly correct?","msgtype":"m.text"},"ts":1522345890000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: yes","msgtype":"m.text"},"ts":1522346097000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: just to confirm I add the default values under \"Value\" right? https://html.spec.whatwg.org/multipage/indices.html#attributes-3","msgtype":"m.text"},"ts":1522346160000,"senderName":"railgun","senderId":"railgun@irc"},
{"content":{"body":"railgun: I was thinking we'd add a new column","msgtype":"m.text"},"ts":1522346256000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"railgun: makes it easier to spot at a glance and such (and seems somewhat more correct too)","msgtype":"m.text"},"ts":1522346300000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok I'll try adding a new column","msgtype":"m.text"},"ts":1522346353000,"senderName":"railgun","senderId":"railgun@irc"},
{"content":{"body":"railgun: FWIW, I'm properly back at work Tuesday","msgtype":"m.text"},"ts":1522346489000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1522346975000,"senderName":"railgun","senderId":"railgun@irc"},
{"content":{"body":"annevk: Ah https://github.com/heycam/webidl/issues/486 is really interesting","msgtype":"m.text"},"ts":1522347012000,"senderName":"domfarolino","senderId":"domfarolino@irc"}
]