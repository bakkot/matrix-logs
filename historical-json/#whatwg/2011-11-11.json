[
{"content":{"body":"var o = { handleEvent: function(e) {}};","msgtype":"m.text"},"ts":1320969600000,"senderName":"smaug3G","senderId":"smaug3G@irc"},
{"content":{"body":"when handleEvent is called, this == o;","msgtype":"m.text"},"ts":1320969601000,"senderName":"smaug3G","senderId":"smaug3G@irc"},
{"content":{"body":"zcyes","msgtype":"m.text"},"ts":1320969602000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1320969603000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"which is the wrong this","msgtype":"m.text"},"ts":1320969604000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"which is the right one","msgtype":"m.text"},"ts":1320969605000,"senderName":"smaug3G","senderId":"smaug3G@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1320969606000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if you don't want that, you can use function() {} as a callback","msgtype":"m.text"},"ts":1320969660000,"senderName":"smaug3G","senderId":"smaug3G@irc"},
{"content":{"body":"you want \"this\" to be the \"this\" that applies in the code that set the callback","msgtype":"m.text"},"ts":1320969661000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1320969662000,"senderName":"smaug3G","senderId":"smaug3G@irc"},
{"content":{"body":"well, depends on the case","msgtype":"m.text"},"ts":1320969663000,"senderName":"smaug3G","senderId":"smaug3G@irc"},
{"content":{"body":"Hixie: You could want either.  Luckily JS has mechanisms to handle them both easily.","msgtype":"m.text"},"ts":1320969664000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"and since implementations handle both cases anyway, there is no need to limit it","msgtype":"m.text"},"ts":1320969720000,"senderName":"smaug3G","senderId":"smaug3G@irc"},
{"content":{"body":"TabAtkins: do you have an example of when you would want what smaug says?","msgtype":"m.text"},"ts":1320969721000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: i cannot recall ever wanting that, but i'd love to see an example","msgtype":"m.text"},"ts":1320969722000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: If you're just holding onto some state shared across multiple callbacks.","msgtype":"m.text"},"ts":1320969780000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"you could look at Firefox UI source code for example. It is using { handleEvent: function() {}} style all the time","msgtype":"m.text"},"ts":1320969840000,"senderName":"smaug3G","senderId":"smaug3G@irc"},
{"content":{"body":"...because it wants to keep some state across the calls","msgtype":"m.text"},"ts":1320969960000,"senderName":"smaug3G","senderId":"smaug3G@irc"},
{"content":{"body":"TabAtkins: why would you need a \"this\" at all then? surely you'd just have the state in the closure.","msgtype":"m.text"},"ts":1320970020000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: That's another way to do it, sure.","msgtype":"m.text"},"ts":1320970021000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The object is basically a public closure for these purposes.","msgtype":"m.text"},"ts":1320970080000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i wonder when you'd do that","msgtype":"m.text"},"ts":1320970081000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or rather, why i've never ended up wanting that","msgtype":"m.text"},"ts":1320970082000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i guess the way i always do it is i have a public object that then sets the callbacks, i don't create the object specifically for the handlers","msgtype":"m.text"},"ts":1320970140000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"seems like creating it just for the handlers would be rather constraining, e.g. what if you later need two types of handlers?","msgtype":"m.text"},"ts":1320970141000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"seems like poor style to me","msgtype":"m.text"},"ts":1320970142000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Your commit message was incorrectly snarky.  Closures hide the data inside them unless you specifically provide methods to export them.  Objects expose the data inside them.","msgtype":"m.text"},"ts":1320971460000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"closures don't hide data that's public","msgtype":"m.text"},"ts":1320971520000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"they just take existing variables and let you access them later, whether they are private or public","msgtype":"m.text"},"ts":1320971521000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(i wrote the checkin comment before you explained the use case, though, so you're right that it was excessively snarky, sorry about that)","msgtype":"m.text"},"ts":1320971580000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ah, right, sorry.  Was thinking of the common practice of using closures specifically to hide static vars.","msgtype":"m.text"},"ts":1320971581000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: i have a question about your response to the MediaController bug","msgtype":"m.text"},"ts":1320971700000,"senderName":"jernoble","senderId":"jernoble@irc"},
{"content":{"body":"which one?","msgtype":"m.text"},"ts":1320971701000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh the one with the states","msgtype":"m.text"},"ts":1320971702000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: right","msgtype":"m.text"},"ts":1320971703000,"senderName":"jernoble","senderId":"jernoble@irc"},
{"content":{"body":"shoot","msgtype":"m.text"},"ts":1320971704000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: so if a group of slaved media elements' ready states go from a minimum value of 1 to a minimum value of 3","msgtype":"m.text"},"ts":1320971705000,"senderName":"jernoble","senderId":"jernoble@irc"},
{"content":{"body":"Hixie: do the events for 2 & 3 fire, or just the event for 3?","msgtype":"m.text"},"ts":1320971760000,"senderName":"jernoble","senderId":"jernoble@irc"},
{"content":{"body":"Hixie: Because i don't think the answer is clear from those two tables.","msgtype":"m.text"},"ts":1320971761000,"senderName":"jernoble","senderId":"jernoble@irc"},
{"content":{"body":"Hixie: (or I'm just being dense.)","msgtype":"m.text"},"ts":1320971762000,"senderName":"jernoble","senderId":"jernoble@irc"},
{"content":{"body":"the second table is non-normative so it doesn't help answer the question oen way or the other","msgtype":"m.text"},"ts":1320971763000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"let me see though","msgtype":"m.text"},"ts":1320971764000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so if a group of media elements are in states 1,1,3 and go to the state 1,3,3, nothing happens","msgtype":"m.text"},"ts":1320971880000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"then if they go to the state 3,3,3 in one go","msgtype":"m.text"},"ts":1320971881000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you start off at \"When the ready state of a media element whose networkState is not NETWORK_EMPTY changes, the user agent must follow the steps given below\"","msgtype":"m.text"},"ts":1320971940000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"in step one you go to \"If the previous ready state was HAVE_CURRENT_DATA or less, and the new ready state is HAVE_FUTURE_DATA\"","msgtype":"m.text"},"ts":1320971941000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so you queue up canplay on the media element","msgtype":"m.text"},"ts":1320971942000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(and maybe 'playing')","msgtype":"m.text"},"ts":1320972000000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"then you go to step 2","msgtype":"m.text"},"ts":1320972001000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"report the controller state","msgtype":"m.text"},"ts":1320972002000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"new readiness state is now 3","msgtype":"m.text"},"ts":1320972003000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so you fire canplay on the media controller in step 2","msgtype":"m.text"},"ts":1320972004000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so the answer is, you don't fire the event for 2","msgtype":"m.text"},"ts":1320972005000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"jernoble: does that answer your question?","msgtype":"m.text"},"ts":1320972060000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: okay, that's what i thought. the second table confused me though; but since it's non-normative, looks like that settles it then. :)","msgtype":"m.text"},"ts":1320972061000,"senderName":"jernoble","senderId":"jernoble@irc"},
{"content":{"body":"Hixie: thanks!","msgtype":"m.text"},"ts":1320972062000,"senderName":"jernoble","senderId":"jernoble@irc"},
{"content":{"body":"jernoble: yeah the second table's wording is maybe not ideal","msgtype":"m.text"},"ts":1320972120000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"jernoble: not sure how to improve it really","msgtype":"m.text"},"ts":1320972121000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh actually i slightly misspoke when i went through the steps above, though it doesn't affect the final answer","msgtype":"m.text"},"ts":1320972180000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"on the media element you do queue up tasks to fire loadeddata then canplay","msgtype":"m.text"},"ts":1320972181000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"because you hit \"If the previous ready state was HAVE_METADATA and the new ready state is HAVE_CURRENT_DATA or greater\"","msgtype":"m.text"},"ts":1320972182000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"maybe i should make it do the same for MediaController","msgtype":"m.text"},"ts":1320972183000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"jernoble: i think maybe it _should_ fire the intermediate events","msgtype":"m.text"},"ts":1320972240000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: i think that's where the reviewer got confused.","msgtype":"m.text"},"ts":1320972241000,"senderName":"jernoble","senderId":"jernoble@irc"},
{"content":{"body":"jernoble: otherwise someone listening to one event might miss it if the network is especially fast, or whatnot","msgtype":"m.text"},"ts":1320972300000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: especially since there's no accessor for readyState, authors would have to add listeners for /all/ the events, even if they only cared about a single state.","msgtype":"m.text"},"ts":1320972301000,"senderName":"jernoble","senderId":"jernoble@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1320972302000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ok let me make the intermediate events fire while i'm here","msgtype":"m.text"},"ts":1320972360000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: and i'll change the implementation while /I'm/ here.","msgtype":"m.text"},"ts":1320972361000,"senderName":"jernoble","senderId":"jernoble@irc"},
{"content":{"body":"heh, in the spec source under the first paragraph for step 2 it says:","msgtype":"m.text"},"ts":1320972362000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"    <!-- hopefully everyone will understand what this means -->","msgtype":"m.text"},"ts":1320972363000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":":-/","msgtype":"m.text"},"ts":1320972364000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"chuckle. :)","msgtype":"m.text"},"ts":1320972420000,"senderName":"jernoble","senderId":"jernoble@irc"},
{"content":{"body":"ok i changed the spec to fire all the events when incrementing","msgtype":"m.text"},"ts":1320972660000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but when decrementing it just fires the new state","msgtype":"m.text"},"ts":1320972720000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that works right?","msgtype":"m.text"},"ts":1320972721000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: yup. seems to.","msgtype":"m.text"},"ts":1320972722000,"senderName":"jernoble","senderId":"jernoble@irc"},
{"content":{"body":"ok it's checked in","msgtype":"m.text"},"ts":1320972780000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: cool, thanks.","msgtype":"m.text"},"ts":1320972960000,"senderName":"jernoble","senderId":"jernoble@irc"},
{"content":{"body":"yay","msgtype":"m.text"},"ts":1320973020000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"hah, slept until 8:30","msgtype":"m.text"},"ts":1320997440000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You beat the jet lag already?","msgtype":"m.text"},"ts":1320997620000,"senderName":"wilhelm","senderId":"wilhelm@irc"},
{"content":{"body":"I doubt that, but I did sleep normal hours, although much longer than usual","msgtype":"m.text"},"ts":1320997800000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: lol, trying to incite a riot on twitter :p","msgtype":"m.text"},"ts":1320999180000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wtf, why is twitter CSS-free for me today","msgtype":"m.text"},"ts":1320999240000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"huh, fixed itself when i logged in","msgtype":"m.text"},"ts":1320999241000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"they seem to be rolling out some updates","msgtype":"m.text"},"ts":1320999242000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heh, just discovered mattur has a bunch of twitter lists","msgtype":"m.text"},"ts":1321000020000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is xhr.status 200 when the respose was cached? e.g. if the server said not modified?","msgtype":"m.text"},"ts":1321001040000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I've identified a new risk with adding HTML support to XHR:","msgtype":"m.text"},"ts":1321001100000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"existing code that treats checking responseXML for null as a surrogate for checking HTTP success when expecting XML on success","msgtype":"m.text"},"ts":1321001160000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"and errors come with a text/html body","msgtype":"m.text"},"ts":1321001161000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"search for \"conditional\"","msgtype":"m.text"},"ts":1321001280000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks","msgtype":"m.text"},"ts":1321001400000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I wonder if I should make Firefox pretend it doesn't support HTML parsing when status isn't a success or if I should land support for parsing error bodies and see how much the Web breaks","msgtype":"m.text"},"ts":1321001460000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"or require responseType = \"document\" to force parsing of error bodies","msgtype":"m.text"},"ts":1321001520000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"the middle of those is the intent of the spec","msgtype":"m.text"},"ts":1321001640000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and is what happens if error bodies come with XML","msgtype":"m.text"},"ts":1321001641000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: what do you mean?","msgtype":"m.text"},"ts":1321001642000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"if a server has a text/xml 500 status page","msgtype":"m.text"},"ts":1321001700000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"responseXML will be populated with its contents","msgtype":"m.text"},"ts":1321001701000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I mean what's \"the middle\"?","msgtype":"m.text"},"ts":1321001702000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"that should work for text/html too","msgtype":"m.text"},"ts":1321001703000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: you gave three options, I prefer #2","msgtype":"m.text"},"ts":1321001704000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I see","msgtype":"m.text"},"ts":1321001760000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"the scary part is that I found out about this by reading the code of our extension update code","msgtype":"m.text"},"ts":1321001761000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"s/update code/updates/","msgtype":"m.text"},"ts":1321001762000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"omg","msgtype":"m.text"},"ts":1321002300000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"we're getting document.find now?","msgtype":"m.text"},"ts":1321002301000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sicking: why not simply use Array?","msgtype":"m.text"},"ts":1321002360000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nm","msgtype":"m.text"},"ts":1321002420000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"missed something obvious","msgtype":"m.emote"},"ts":1321002421000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"notes that document.find seems like a very confusing name","msgtype":"m.emote"},"ts":1321004820000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But whatever","msgtype":"m.text"},"ts":1321004880000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"i wonder if steve and the chairs feel good about wasting Mike[tm]'s time","msgtype":"m.text"},"ts":1321011600000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I wonder if they care","msgtype":"m.text"},"ts":1321011720000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Time isn't relevant, they need to assert authority","msgtype":"m.text"},"ts":1321011840000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Short-term loss for long-term gain","msgtype":"m.text"},"ts":1321011841000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: what is the gain?","msgtype":"m.text"},"ts":1321011842000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"adds scare quotes","msgtype":"m.emote"},"ts":1321011900000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: 05:47 < Ms2ger> [...] authority","msgtype":"m.text"},"ts":1321011901000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: Nebulous","msgtype":"m.text"},"ts":1321011902000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I don't like wasting MikeSmith's time, but dropping <time> the way Hixie dropped it was still a bad move.","msgtype":"m.text"},"ts":1321012080000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"AFAICT everyone apart from MikeSmith benefited from this","msgtype":"m.text"},"ts":1321012200000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"If Hixie hadn't dropped time, the people who want the new, different, time would never have got it","msgtype":"m.text"},"ts":1321012201000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"poor guy","msgtype":"m.text"},"ts":1321012202000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"jgraham: how did I benefit?","msgtype":"m.text"},"ts":1321012260000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"and the charis wouldn't have got to show us how effective they are","msgtype":"m.text"},"ts":1321012261000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"*chairs","msgtype":"m.text"},"ts":1321012262000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"ineffective*","msgtype":"m.text"},"ts":1321012263000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: the spec will better match use cases people want","msgtype":"m.text"},"ts":1321012264000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hsivonen: Well since new-<time> is different from old-<time> it's not really clear that you would have had less validator changes to make in either case","msgtype":"m.text"},"ts":1321012320000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(the other case being \"new time was morphed from old time without an intermediate stage\")","msgtype":"m.text"},"ts":1321012380000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(ignoring the fact that that would probably not have happened)","msgtype":"m.text"},"ts":1321012381000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Also, Gecko supports outerHTML now!","msgtype":"m.text"},"ts":1321012440000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"hsivonen++","msgtype":"m.text"},"ts":1321012441000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"welcome to 2000","msgtype":"m.text"},"ts":1321012500000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Why thank you","msgtype":"m.text"},"ts":1321012560000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"meow?","msgtype":"m.text"},"ts":1321012561000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Ms2ger: thank you for writing most of the code for that patch","msgtype":"m.text"},"ts":1321012680000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"And thank you for writing the hard code :)","msgtype":"m.text"},"ts":1321012681000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I think the really noteworthy thing here is that IE4 didn't use vendor prefixes for this stuff, so there isn't now msOuterHTML, webkitOuterHTML, oOuterHTML and now a new mozOuterHTML to evangelize","msgtype":"m.text"},"ts":1321012740000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"so when we implement IE4 features, they just start working","msgtype":"m.text"},"ts":1321012741000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"when we implement WebKit features, we deliberately self-sabotage them so that additional evangelism is needed","msgtype":"m.text"},"ts":1321012800000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"(actually, I'm not sure if outerHTML was an IE4 or IE5 feature, but that's not the point)","msgtype":"m.text"},"ts":1321012860000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"that works OK when the non-prefixed feature was introduced with reasonable behavior","msgtype":"m.text"},"ts":1321012980000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"it doesn't work so well when the non-prefixed feature is introduced with utterly broken behavior","msgtype":"m.text"},"ts":1321012981000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"like drag and drop?","msgtype":"m.text"},"ts":1321013040000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hmm yeah","msgtype":"m.text"},"ts":1321013041000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"and contenteditable","msgtype":"m.text"},"ts":1321013042000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"and the entire CSS box model, basically","msgtype":"m.text"},"ts":1321013100000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"we pay for that one by writing <!DOCTYPE HTML> until the end of time","msgtype":"m.text"},"ts":1321013101000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"roc: OTOH, it makes no sense for transforms to be supported in all the 4 engines but with different prefix in each one to foil interop","msgtype":"m.text"},"ts":1321013160000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"you should ask dbaron if he thinks the behavior differences warrant the prefixing","msgtype":"m.text"},"ts":1321013161000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"roc: in retrospect, we should have made IE's box model the default and used box-sizing to opt into the different behavior","msgtype":"m.text"},"ts":1321013220000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"roc: same thing for <img> and line height","msgtype":"m.text"},"ts":1321013221000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"that's probably true","msgtype":"m.text"},"ts":1321013222000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"however, there was a lot of other brokenness there","msgtype":"m.text"},"ts":1321013280000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"we could have made the brokeness the compliant behavior like with the html parser","msgtype":"m.text"},"ts":1321013340000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"for situations like transforms I think there is a case for saying \"we think this model is close enough to right, let's rip off the prefixes now and tidy up the differences later, because the cost of the prefixes outweighs the cost of the behavior changes for interop\"","msgtype":"m.text"},"ts":1321013341000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"zcorpan: reverse engineering hasLayout and all the rest of the IE brokenness is not something anyone has ever wanted to do","msgtype":"m.text"},"ts":1321013400000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"roc: other browsers don't have hasLayout in quirks mode","msgtype":"m.text"},"ts":1321013401000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1321013402000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"browsers don't interoperate in quirks mode","msgtype":"m.text"},"ts":1321013403000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"to make quirks mode the compliant behavior, we'd have to fix that","msgtype":"m.text"},"ts":1321013460000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"roc: don't Gecko/WebKit/Presto interop remarkably far in quirks mode, though?","msgtype":"m.text"},"ts":1321013461000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"even if IE is totally different","msgtype":"m.text"},"ts":1321013462000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I honestly don't know","msgtype":"m.text"},"ts":1321013463000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"it's getting closer and closer afaik","msgtype":"m.text"},"ts":1321013464000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"IE being totally different is enough to sink the proposition","msgtype":"m.text"},"ts":1321013520000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"so does Mango ship the IE 5.5 mode for quirks or do they have a Gecko/WebKit/Presto-like quirks mode based on the IE9 engine snapshot?","msgtype":"m.text"},"ts":1321013521000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"if we interoperate closely in quirks mode, it's because our quirks modes aren't very different to our standards modes, which are converging","msgtype":"m.text"},"ts":1321013522000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"having quirks mode interop between non-IE browsers is still worth it","msgtype":"m.text"},"ts":1321013523000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I should find access to a Mango phone and do some community service","msgtype":"m.text"},"ts":1321013524000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"roc: yeah that's definitely part of it","msgtype":"m.text"},"ts":1321013525000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"roc: but we also take quirks mode into account now, e.g. for the HTML parser","msgtype":"m.text"},"ts":1321013580000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"we recently eliminated the difference between quirks mode and standards mode text decorations","msgtype":"m.text"},"ts":1321013581000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"hsivonen: an important question is: if we rip off prefixes while we know behavior changes will be needed for interop, will various browsers actually make those changes to unprefixed property behavior?","msgtype":"m.text"},"ts":1321013700000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"I'm not confident they all will","msgtype":"m.text"},"ts":1321013701000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"roc: depends on the magnitude of changes and the amount of existing content","msgtype":"m.text"},"ts":1321013702000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1321013760000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"roc: I think requestAnimationFrame could be unprefixed immediately and the second argument or the return value be bikeshedded later","msgtype":"m.text"},"ts":1321013761000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1321013762000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"FWIW opera frequently gets screwed over by prefixes","msgtype":"m.text"},"ts":1321013820000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"we should do more to ship the subset of commonly-agreed behavior quickly without prefix","msgtype":"m.text"},"ts":1321013821000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"Where people write -webkit-foo and -moz-foo but forget -o-foo","msgtype":"m.text"},"ts":1321013822000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"on mobile, everyone who's not Webkit gets screwed over by prefixes","msgtype":"m.text"},"ts":1321013823000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"So it looks like we don't support cool stuff that we do","msgtype":"m.text"},"ts":1321013824000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: Firefox for Android suffers from -webkit-","msgtype":"m.text"},"ts":1321013825000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I think it sucks that Mozilla, Opera and Microsoft agree to work against their interest and the interest of Web authors, because it's supposedly the right thing to do","msgtype":"m.text"},"ts":1321013880000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"the only beneficiary of the situation is WebKit, ATM","msgtype":"m.text"},"ts":1321013940000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I should blog about this, but I want to get HTML in XHR ready for review first","msgtype":"m.text"},"ts":1321013941000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I should remember to see if that's correlated with who is pro \"prefixes until CR or later\" next time this comes up","msgtype":"m.text"},"ts":1321014000000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"\"CR or later\" is hurting the Web","msgtype":"m.text"},"ts":1321014001000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Yeah, the current situation is insane","msgtype":"m.text"},"ts":1321014120000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"hsivonen: I look forward to that blog post!","msgtype":"m.text"},"ts":1321014240000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"read CR and was thinking CRLF","msgtype":"m.emote"},"ts":1321014360000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, obviously that's the only useful expansion :)","msgtype":"m.text"},"ts":1321014361000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"hsivonen, the other day I was looking for some html5 test cases and I found your thesis/website","msgtype":"m.text"},"ts":1321014540000,"senderName":"Taggnostr","senderId":"Taggnostr@irc"},
{"content":{"body":"Taggnostr: did you find the test cases you were looking for?","msgtype":"m.text"},"ts":1321014840000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"annevk: CR in the CRLF sense is hurting the Web, too","msgtype":"m.text"},"ts":1321014900000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen, nope, but I found the description of the parsing algorithm in the html5 draft","msgtype":"m.text"},"ts":1321014901000,"senderName":"Taggnostr","senderId":"Taggnostr@irc"},
{"content":{"body":"I'm working on a parser and I was trying to determine how it should handle broken html","msgtype":"m.text"},"ts":1321014902000,"senderName":"Taggnostr","senderId":"Taggnostr@irc"},
{"content":{"body":"Taggnostr: \"just\" implement the parsing algorithm","msgtype":"m.text"},"ts":1321014960000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Taggnostr: what programming language are you using?","msgtype":"m.text"},"ts":1321014961000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"python, I'm trying to improve the html parser included in the stdlib to make it follow the html5 standard, possibly while preserving backward compatibility","msgtype":"m.text"},"ts":1321015020000,"senderName":"Taggnostr","senderId":"Taggnostr@irc"},
{"content":{"body":"Taggnostr: are you aware of https://code.google.com/p/html5lib/ ?","msgtype":"m.text"},"ts":1321015021000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"yes, I actually found this channel while looking at that page","msgtype":"m.text"},"ts":1321015080000,"senderName":"Taggnostr","senderId":"Taggnostr@irc"},
{"content":{"body":"Taggnostr: (please look at HEAD, not at the lat release)","msgtype":"m.text"},"ts":1321015081000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"*last","msgtype":"m.text"},"ts":1321015082000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"but including a new module in the stdlib is not easy, so I was trying to fix the existing one","msgtype":"m.text"},"ts":1321015083000,"senderName":"Taggnostr","senderId":"Taggnostr@irc"},
{"content":{"body":"Well… good luck. It isn't clear how you would fix the existing one without writing a roughly equivalent amount of code to html5lib","msgtype":"m.text"},"ts":1321015200000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I haven't looked closely at html5lib but from what I've seen it seems more complicated than I expected, especially compared to the html parser used by python","msgtype":"m.text"},"ts":1321015260000,"senderName":"Taggnostr","senderId":"Taggnostr@irc"},
{"content":{"body":"Also, strictly speaking, a SAX-style API doesn't work with HTML","msgtype":"m.text"},"ts":1321015261000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"parsing html is complicated","msgtype":"m.text"},"ts":1321015262000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Since various things alter the parts of the tree that have already been emitted","msgtype":"m.text"},"ts":1321015320000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"e.g. <table><div>","msgtype":"m.text"},"ts":1321015321000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"you can have non-streaming SAX or fatal SAX","msgtype":"m.text"},"ts":1321015322000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"or <body a=b><body c=d>","msgtype":"m.text"},"ts":1321015323000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"The HTMLParser model doesn't have any extensions to allow fixup of the existing tree","msgtype":"m.text"},"ts":1321015380000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"and I presume fatal SAX would not be regarded as useful","msgtype":"m.text"},"ts":1321015381000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: XML folks love fatal SAX :-)","msgtype":"m.text"},"ts":1321015382000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"jgraham: maybe not that useful for HTML, though","msgtype":"m.text"},"ts":1321015440000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: Yes well. Look how that turned out","msgtype":"m.text"},"ts":1321015441000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"the main goal here is to provide a parser able to parse broken HTML -- it doesn't have to be an HTML5 parser, but since HTML5 defines how to parse broken HTML and that is what browsers do, it seems better to do the same rather than coming up with our own decisions/algorithm","msgtype":"m.text"},"ts":1321015500000,"senderName":"Taggnostr","senderId":"Taggnostr@irc"},
{"content":{"body":"jgraham: Validator.nu uses fatal SAX for HTML","msgtype":"m.text"},"ts":1321015501000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Taggnostr: coming up with ways to parse HTML that aren't the HTML5 algorithm is a terrible idea","msgtype":"m.text"},"ts":1321015502000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I've heard regular expressions are great for parsing HTML.","msgtype":"m.text"},"ts":1321015560000,"senderName":"wilhelm","senderId":"wilhelm@irc"},
{"content":{"body":"that's already the current situation, the idea is to make the algorithm closer to HTML5","msgtype":"m.text"},"ts":1321015561000,"senderName":"Taggnostr","senderId":"Taggnostr@irc"},
{"content":{"body":"wilhelm: In the interests of playing nice with the visitor, I will loan you my sarcasm end tag: </sarcasm>","msgtype":"m.text"},"ts":1321015800000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: Oh, sorry. Thanks. (c:","msgtype":"m.text"},"ts":1321015801000,"senderName":"wilhelm","senderId":"wilhelm@irc"},
{"content":{"body":"Taggnostr: There is little point is being \"close to\" HTML 5 when you could just do what the standard says","msgtype":"m.text"},"ts":1321015860000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I'm not sure if that's doable though, the parser should be backward-compatible","msgtype":"m.text"},"ts":1321015861000,"senderName":"Taggnostr","senderId":"Taggnostr@irc"},
{"content":{"body":"hsivonen: The validator is a special case. The only reaon it doesn't stop at the first error regardless of streamability is that it wouldn't be very user friendly","msgtype":"m.text"},"ts":1321015920000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"also it already has a specific API, and I'm not sure implementing the parser described by the HTML5 draft would work with it","msgtype":"m.text"},"ts":1321015921000,"senderName":"Taggnostr","senderId":"Taggnostr@irc"},
{"content":{"body":"Taggnostr: Well it wouldn't since HTML isn't streamable in general","msgtype":"m.text"},"ts":1321016040000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"MikeSmith, thanks","msgtype":"m.text"},"ts":1321016041000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"(without some representation of tree fixup in the stream)","msgtype":"m.text"},"ts":1321016100000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"You can do what hsivonen does and die at the first non-streamable error","msgtype":"m.text"},"ts":1321016101000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But there are a pile of sites where that will break","msgtype":"m.text"},"ts":1321016102000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"what do you mean exactly with streamable?","msgtype":"m.text"},"ts":1321016103000,"senderName":"Taggnostr","senderId":"Taggnostr@irc"},
{"content":{"body":"<table>Foo","msgtype":"m.text"},"ts":1321016220000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"That'll return a tree with the Foo text node before the table","msgtype":"m.text"},"ts":1321016221000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"You can't represent it with an api that announces various token types (start tag, end tag) and build the correct tree without significant domain knowledge in the treebuilding layer","msgtype":"m.text"},"ts":1321016222000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"you could extend SAX with fixup events","msgtype":"m.text"},"ts":1321016280000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Taggnostr: the Validator.nu parser supports all of HTML with the SAX API by first buffering everything into a tree model","msgtype":"m.text"},"ts":1321016281000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"If HTMLParser is actually supposed to be an HTMLTokenizer and doesn't try to make all the tags balance or anything, that can be represented as a set of events","msgtype":"m.text"},"ts":1321016282000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But it is only half the work (or less) of actually parsing","msgtype":"m.text"},"ts":1321016340000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yes, it doesn't balance anything","msgtype":"m.text"},"ts":1321016341000,"senderName":"Taggnostr","senderId":"Taggnostr@irc"},
{"content":{"body":"Oh, well in that case look at the tokenizer.py code in html5lib","msgtype":"m.text"},"ts":1321016400000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"in that case it will announce a <table> start tag, and then Foo","msgtype":"m.text"},"ts":1321016401000,"senderName":"Taggnostr","senderId":"Taggnostr@irc"},
{"content":{"body":"that's where I looked :)","msgtype":"m.text"},"ts":1321016402000,"senderName":"Taggnostr","senderId":"Taggnostr@irc"},
{"content":{"body":"It does almost what you want but you will need to add an interface that emits HTMLParser-compatible events","msgtype":"m.text"},"ts":1321016460000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"is there a reference implementation of the parser described by HTML5?","msgtype":"m.text"},"ts":1321016461000,"senderName":"Taggnostr","senderId":"Taggnostr@irc"},
{"content":{"body":"No","msgtype":"m.text"},"ts":1321016462000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"so they just wrote down the algorithm without having a real implementation and without testing it?","msgtype":"m.text"},"ts":1321016520000,"senderName":"Taggnostr","senderId":"Taggnostr@irc"},
{"content":{"body":"But html5lib, Gecko (+validator.nu), Webkit and Presto all have implementations that are knopwn to be close to spec","msgtype":"m.text"},"ts":1321016521000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Taggnostr: \"they\" == \"we\" and no","msgtype":"m.text"},"ts":1321016522000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Taggnostr: it has had plenty of testing","msgtype":"m.text"},"ts":1321016580000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"The algorithm was arrived at by careful study of what browsers did","msgtype":"m.text"},"ts":1321016581000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Plus feedback from browser vendors when they broke pages","msgtype":"m.text"},"ts":1321016582000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Plus inspiration for how to fix difficult problems in an acceptable way","msgtype":"m.text"},"ts":1321016583000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(misnested formatting elements, parsing comments in scripts)","msgtype":"m.text"},"ts":1321016640000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"so it wasn't written from scratch","msgtype":"m.text"},"ts":1321016641000,"senderName":"Taggnostr","senderId":"Taggnostr@irc"},
{"content":{"body":"That depends what you mean","msgtype":"m.text"},"ts":1321016642000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Hixie didn't fabricate it from unicorn horn and pony hair","msgtype":"m.text"},"ts":1321016643000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But no one had ever written it down before","msgtype":"m.text"},"ts":1321016700000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"And it isn't quite like what any one browser had before","msgtype":"m.text"},"ts":1321016701000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1321016702000,"senderName":"Taggnostr","senderId":"Taggnostr@irc"},
{"content":{"body":"jgraham: that's one of the more hilarious statements i've seen about the parsing algorithm","msgtype":"m.text"},"ts":1321016820000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Taggnostr: Reference implementations are problematic if they're normative, because any bug in the reference implementation is then part of the standard. Informative reference implementations are no more or less useful than having the four implementations we already have.","msgtype":"m.text"},"ts":1321017060000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"4?","msgtype":"m.text"},"ts":1321017120000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"html5lib, Gecko, WebKit, Presto.","msgtype":"m.text"},"ts":1321017180000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: WebKit isn't compliant","msgtype":"m.text"},"ts":1321017181000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"David Flanagan's parser is probably more compliant than WebKit by now","msgtype":"m.text"},"ts":1321017240000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I wonder how compliant IE10 is","msgtype":"m.text"},"ts":1321017300000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Last I heard not massively","msgtype":"m.text"},"ts":1321017301000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"what does webkit do wrong?","msgtype":"m.text"},"ts":1321017420000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: MathML stuff at least","msgtype":"m.text"},"ts":1321017421000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"zcorpan: generally anything that has been fixed in the spec since the Chrome 8 release train left the station","msgtype":"m.text"},"ts":1321017480000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1321017481000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"wonders if anyone pointed Taggnostr at http://code.google.com/p/html5lib/source/browse/#hg%2Ftestdata%2Ftokenizer yet","msgtype":"m.emote"},"ts":1321017600000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I wonder if those are usable with HTMLParser (assuming that the license allows me to use them)","msgtype":"m.text"},"ts":1321017780000,"senderName":"Taggnostr","senderId":"Taggnostr@irc"},
{"content":{"body":"HTMLParser?","msgtype":"m.text"},"ts":1321017840000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Taggnostr: MIT license","msgtype":"m.text"},"ts":1321017841000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(http://wiki.whatwg.org/wiki/Parser_tests for documentation)","msgtype":"m.text"},"ts":1321017842000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"thanks for the pointers Philip`","msgtype":"m.text"},"ts":1321017843000,"senderName":"Taggnostr","senderId":"Taggnostr@irc"},
{"content":{"body":"jgraham, did you write those tests?","msgtype":"m.text"},"ts":1321017900000,"senderName":"Taggnostr","senderId":"Taggnostr@irc"},
{"content":{"body":"gsnedders, the parser I'm working on","msgtype":"m.text"},"ts":1321017901000,"senderName":"Taggnostr","senderId":"Taggnostr@irc"},
{"content":{"body":"Taggnostr: They're written by many different people","msgtype":"m.text"},"ts":1321017902000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I think they're used by all HTML5 parser implementations","msgtype":"m.text"},"ts":1321017903000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(so they ought to be pretty correct relative to the spec, unless a dozen people all made exactly the same misreading of the spec)","msgtype":"m.text"},"ts":1321017960000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(or have all failed to update their impls to some spec change)","msgtype":"m.text"},"ts":1321018080000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"http://twitter.com/fraunhoferfokus/status/134983678513254402","msgtype":"m.text"},"ts":1321019640000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"\"We have something in the pipes for online video codec standardization but can't talk about it yet\", Hoschka, W3C #MWS11 #video #codec #W3C","msgtype":"m.text"},"ts":1321019641000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"Like a new codec, so half the world can standardise on that one while the other half standardises on WebM?","msgtype":"m.text"},"ts":1321019940000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"10% discount on h264 licenses","msgtype":"m.text"},"ts":1321020000000,"senderName":"Workshiva","senderId":"Workshiva@irc"},
{"content":{"body":"Hmm, sicking doesn't realize that public-html is a politics-only list?","msgtype":"m.text"},"ts":1321021740000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"What did he post there?","msgtype":"m.text"},"ts":1321022220000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"http://lists.w3.org/Archives/Public/www-archive/2011Nov/0021.html","msgtype":"m.text"},"ts":1321022280000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"man","msgtype":"m.text"},"ts":1321022520000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"why is Steam for the Mac such a disaster","msgtype":"m.text"},"ts":1321022521000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I only wanted to play Portal","msgtype":"m.text"},"ts":1321022522000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Is it not just equivalent to the Windows version?","msgtype":"m.text"},"ts":1321022640000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"s/Steam/any port/","msgtype":"m.text"},"ts":1321022700000,"senderName":"Workshiva","senderId":"Workshiva@irc"},
{"content":{"body":"Ms2ger: You may say he's a dreamer but... well actually I guess he is the only one in this case. Nevermind.","msgtype":"m.text"},"ts":1321022820000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham++","msgtype":"m.text"},"ts":1321022821000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"getting portal for the xbox might be less of a hassle","msgtype":"m.text"},"ts":1321023540000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Depending on how much of a hassle it is, running it in Wine might be less of a hassle","msgtype":"m.text"},"ts":1321023720000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"eww. IE blog has ugly URLs","msgtype":"m.text"},"ts":1321023721000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"oh. it's HTTPS Everywhere that makes IE blog URLs ugly","msgtype":"m.text"},"ts":1321023840000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Does someone happen to know who came up with vendor prefixes and when?","msgtype":"m.text"},"ts":1321024200000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"maybe around the same time standards mode happened?","msgtype":"m.text"},"ts":1321024260000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Did IE5 for Mac have vendor-prefixed stuff?","msgtype":"m.text"},"ts":1321024380000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Certainly most of it's CSS3 support wasn't","msgtype":"m.text"},"ts":1321024440000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"at least as far as CSS 2 was concerned it was post 98","msgtype":"m.text"},"ts":1321024500000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"did the CSS positioning fiasco start this all?","msgtype":"m.text"},"ts":1321024501000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"http://lists.w3.org/Archives/Member/w3c-css-wg/1998OctDec/0008.html seems to be about where it started","msgtype":"m.text"},"ts":1321024560000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(W3C Member-only)","msgtype":"m.text"},"ts":1321024620000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"whoa. Do we have [redacted] to blame about this *too*?","msgtype":"m.text"},"ts":1321024680000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"[Redacted].","msgtype":"m.text"},"ts":1321024740000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"http://www.w3.org/Style/Group/1998/09/f2f.html (W3C Member-only)","msgtype":"m.text"},"ts":1321024741000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, [redacted] is certainly a [redacted]","msgtype":"m.text"},"ts":1321024800000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"hsivonen: Very much positioned for non-specified properties, though, not for draft-standards.","msgtype":"m.text"},"ts":1321024801000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"http://lists.w3.org/Archives/Member/w3c-css-wg/1998JulSep/0298.html is also relevant","msgtype":"m.text"},"ts":1321024860000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"also has the winning notation","msgtype":"m.text"},"ts":1321024861000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks","msgtype":"m.text"},"ts":1321024920000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Up to 3k unread emails on whatwg. Time to give up soon?","msgtype":"m.text"},"ts":1321024980000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"http://www.w3.org/Style/Group/1998/09/f2f.html","msgtype":"m.text"},"ts":1321025100000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Oh yo0u posted that","msgtype":"m.text"},"ts":1321025101000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"trying to explain the difference between opengl prefixing and web prefixing to the webgl guys seems like a futile effort","msgtype":"m.text"},"ts":1321025102000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"wow. important problems were foreseen when this mess started","msgtype":"m.text"},"ts":1321025160000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"isn't sure what OpenGL prefixing is","msgtype":"m.emote"},"ts":1321025520000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Don't they normally do suffixing (with _ARB/_EXT etc)?","msgtype":"m.text"},"ts":1321025521000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"vendor prefixing, GL_NV_*, GL_ATI_, etc","msgtype":"m.text"},"ts":1321025580000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"but it's not used the same as web prefixing","msgtype":"m.text"},"ts":1321025640000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(for extensions I mean, functions and constants are suffixed)","msgtype":"m.text"},"ts":1321025820000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I suppose one main difference is that it's normal for a vendor to implement extensions from competing vendors' namespaces","msgtype":"m.text"},"ts":1321025940000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"that's what brought it up, yeah, though there are other differences","msgtype":"m.text"},"ts":1321026000000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(NVIDIA implements GL_ATI_texture_float, AMD implements GL_NV_primitive_restart, etc)","msgtype":"m.text"},"ts":1321026001000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"wonders if it's considered bad etiquette to write code using a reverse-engineered undocumented GL extension","msgtype":"m.emote"},"ts":1321026060000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"being prefixed is the normal, expected final product for most opengl extensions, where with web apis it's usually just a development/compatibility thing that you expect to go away in the finished product","msgtype":"m.text"},"ts":1321026180000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"far more inherently hardware-specific extensions with opengl, different development processes with opengl, etc","msgtype":"m.text"},"ts":1321026181000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Isn't it fairly common for the expectation to be that the extension will move from vendor prefixes to ARB and maybe eventually to core?","msgtype":"m.text"},"ts":1321026300000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"common but minority","msgtype":"m.text"},"ts":1321026301000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Ah","msgtype":"m.text"},"ts":1321026360000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"the issue was with gecko implementing an extension developed in webkit, whether they should implement it as WEBKIT or rename it; i was arguing that, unlike OpenGL practices and like Web APIs, they should","msgtype":"m.text"},"ts":1321026361000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"well well","msgtype":"m.text"},"ts":1321026362000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Xbox finally updated","msgtype":"m.text"},"ts":1321026420000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"maybe I get to play a game today after all","msgtype":"m.text"},"ts":1321026421000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"they decided to dodge the issue by abruptly promoting the extension out of _WEBKIT","msgtype":"m.text"},"ts":1321026422000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Now it will explode","msgtype":"m.text"},"ts":1321026423000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"and without an extension in front of us pressing the issue, the discussion won't go anywhere, so I'll get to rehash it down the line when the next extension comes around","msgtype":"m.text"},"ts":1321026600000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"oh well. heh","msgtype":"m.text"},"ts":1321026601000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"oh so the SVG WG has gone from being vehemently against SVG in HTML to wanting to put SVG in the HTML namespace","msgtype":"m.text"},"ts":1321026720000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"good morning, Whatwg!","msgtype":"m.text"},"ts":1321026721000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"dglazkov: good evening","msgtype":"m.text"},"ts":1321026722000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"'Afternoon","msgtype":"m.text"},"ts":1321026780000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"hsivonen: we were never against putting SVG in HTML, we lobbied for it...","msgtype":"m.text"},"ts":1321026781000,"senderName":"shepazu","senderId":"shepazu@irc"},
{"content":{"body":"shepazu: oh yes, you (SVG WG, maybe not you personall) were at Mandelieu TPAC","msgtype":"m.text"},"ts":1321026782000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: I think you're misremembering","msgtype":"m.text"},"ts":1321026840000,"senderName":"shepazu","senderId":"shepazu@irc"},
{"content":{"body":"we always wanted to have SVG in HTML… the devil of how to do that was in the details","msgtype":"m.text"},"ts":1321026900000,"senderName":"shepazu","senderId":"shepazu@irc"},
{"content":{"body":"shepazu: there were elements in the SVG WG who were horrified by the idea of not using a full XML parser for parsing SVG","msgtype":"m.text"},"ts":1321026960000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"and conditions have now changed, so we are adapting to what seems like the best way forward is from where we are now","msgtype":"m.text"},"ts":1321026961000,"senderName":"shepazu","senderId":"shepazu@irc"},
{"content":{"body":"hsivonen: that's a detail","msgtype":"m.text"},"ts":1321026962000,"senderName":"shepazu","senderId":"shepazu@irc"},
{"content":{"body":"shepazu: I disagree about it being a detail","msgtype":"m.text"},"ts":1321026963000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"shepazu: it's nice that the SVG WG sees the error in its ways, but changing things now would break what we've reached interop on","msgtype":"m.text"},"ts":1321027020000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"shepazu: I'd much rather see Web authors start using SVG now than scare them off for another 5 years or so","msgtype":"m.text"},"ts":1321027080000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"before Adobe and Inkscape, the 2 major SVG authoring-tool vendors, were engaged in the SVG WG, we had no way of knowing if those tools would adapt to new SVG syntax… now, they are both engaged, and conditions are different","msgtype":"m.text"},"ts":1321027081000,"senderName":"shepazu","senderId":"shepazu@irc"},
{"content":{"body":"hsivonen: I don't think there is unanimity in the SVG WG about what namespace SVG elements would be in","msgtype":"m.text"},"ts":1321027082000,"senderName":"shepazu","senderId":"shepazu@irc"},
{"content":{"body":"shepazu: and now we have a new condition that we've reached interop on doing SVG in HTML the way the HTML spec says","msgtype":"m.text"},"ts":1321027140000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1321027141000,"senderName":"shepazu","senderId":"shepazu@irc"},
{"content":{"body":"It is not clear to me that there is enough legacy here to make it too late to break","msgtype":"m.text"},"ts":1321027320000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I don't know what IE9 does","msgtype":"m.text"},"ts":1321027321000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But it is not very HTML5 compliant in general, so it doesn't obviously block this change","msgtype":"m.text"},"ts":1321027322000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: IE9 tokenizes SVG scripts per HTML5 for practical purposes (there may be edge cases that are different)","msgtype":"m.text"},"ts":1321027380000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"jgraham: even if there isn't existing content, if we start changing how SVG works in browsers, we reset the clock again on the \"when can I use SVG\" question from the Web author POV","msgtype":"m.text"},"ts":1321027440000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I wonder how important IE 9 is though. Once 10 is out the people using 9 might all move to 10 rather fast, and the people stuck on lower versions might remain there","msgtype":"m.text"},"ts":1321027500000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I wouldn't be surprised to see a pattern like that","msgtype":"m.text"},"ts":1321027501000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Also, I'm not entirely sure I understand how much content would be affected in this case","msgtype":"m.text"},"ts":1321027560000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"we can't break interop every time we reach interop depending on the current politics at the SVG WG","msgtype":"m.text"},"ts":1321027561000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"if we want adoption some day","msgtype":"m.text"},"ts":1321027562000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Agreed","msgtype":"m.text"},"ts":1321027563000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But that doesn't mean that doing it once is unworkable","msgtype":"m.text"},"ts":1321027620000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: are you talking about style and script tokenization or about putting SVG elements in the HTML namespace?","msgtype":"m.text"},"ts":1321027621000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"The first. The second seems like a very nice change but much more worrying compat-wise","msgtype":"m.text"},"ts":1321027860000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"IE isn't the only boat archor browser BTW. There's also the Android stock browser that could cause trouble for at least 3 years or so.","msgtype":"m.text"},"ts":1321027920000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"\"Boat anchor browser\" is a nice term","msgtype":"m.text"},"ts":1321027980000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"What's an example of a current spec that takes an options object, and exposed a XXXDict interface so you can feature-detect what's available?","msgtype":"m.text"},"ts":1321028160000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"dictionaries are not exposed","msgtype":"m.text"},"ts":1321028220000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I was pretty sure that *someone* did what I just asked for.","msgtype":"m.text"},"ts":1321028280000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"WebRTC hasn't figured out dicts yet","msgtype":"m.text"},"ts":1321028580000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"i suppose that's one benefit to the \"defaults in the dictionary\" approach (rather than in algorithms); it'd be easier to generically expose the attributes and their defaults as an object","msgtype":"m.text"},"ts":1321029300000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i suppose exposing the defaults isn't terribly important, though, so much as just which keys are understood","msgtype":"m.text"},"ts":1321029360000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: Yeah, that's the primary benefit.  Exposing defaults is a lucky accident.","msgtype":"m.text"},"ts":1321029540000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"TabAtkins: but the defaults aren't always in the IDL dictionary","msgtype":"m.text"},"ts":1321029600000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(ever, now? not sure)","msgtype":"m.text"},"ts":1321029601000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"jgraham, IE9 works on Vista and IE10 doesn't, no?  Of course, maybe there aren't enough people using Vista to matter.","msgtype":"m.text"},"ts":1321032060000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"AryehGregor: Maybe. I was thinking of XP vs others and enterprise vs sane","msgtype":"m.text"},"ts":1321035120000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Maybe.","msgtype":"m.text"},"ts":1321035121000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"AryehGregor: It looks like Vista has at best 1/3 of the share of either XP or 7 so it's not clear that will be a big effect","msgtype":"m.text"},"ts":1321035360000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: sicking: got crazy idea. Could we support the new XHR response types only in async XHR (I'm talking about the Window context, not Worker context)","msgtype":"m.text"},"ts":1321037040000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: it's been shipping for a while in various browsers, but quite possibly yeah","msgtype":"m.text"},"ts":1321037100000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"ooo","msgtype":"m.text"},"ts":1321037101000,"senderName":"jamesr_","senderId":"jamesr_@irc"},
{"content":{"body":"files a spec bug","msgtype":"m.emote"},"ts":1321037280000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"jamesr_: do you think webkit would be willing to make such change?","msgtype":"m.text"},"ts":1321037340000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____, as a way to encourage authors to move away from sync, right?","msgtype":"m.text"},"ts":1321037400000,"senderName":"jamesr_","senderId":"jamesr_@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1321037401000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"sync is bad in the UI thread","msgtype":"m.text"},"ts":1321037402000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"i personally think it's a great idea. i'm not sure what our implementation status","msgtype":"m.text"},"ts":1321037403000,"senderName":"jamesr_","senderId":"jamesr_@irc"},
{"content":{"body":"yeah sync is the worst","msgtype":"m.text"},"ts":1321037404000,"senderName":"jamesr_","senderId":"jamesr_@irc"},
{"content":{"body":"unfortunately it is used quite ofter for text and xml responses","msgtype":"m.text"},"ts":1321037405000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"i know :(","msgtype":"m.text"},"ts":1321037460000,"senderName":"jamesr_","senderId":"jamesr_@irc"},
{"content":{"body":"Google Docs was using it allover at some point","msgtype":"m.text"},"ts":1321037461000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"hell yeah let's do it","msgtype":"m.text"},"ts":1321037462000,"senderName":"jamesr_","senderId":"jamesr_@irc"},
{"content":{"body":"smaug____, do you have a mozilla bug i can cite in the webkit bug report?","msgtype":"m.text"},"ts":1321037520000,"senderName":"jamesr_","senderId":"jamesr_@irc"},
{"content":{"body":"\"if the sync flag is true throw ERR_YOURE_DOING_IT_WRONG\"","msgtype":"m.text"},"ts":1321037521000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"COME_ON_ERR?","msgtype":"m.text"},"ts":1321037522000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"jamesr_: not yet","msgtype":"m.text"},"ts":1321037580000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I'm just sending email to webapps","msgtype":"m.text"},"ts":1321037581000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"XHR2 doesn't seem to have bugzilla component","msgtype":"m.text"},"ts":1321037582000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"There's just one for XHR1 and 2, no?","msgtype":"m.text"},"ts":1321037640000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"filed https://bugs.webkit.org/show_bug.cgi?id=72154 (partially as a way to solicit feedback from other WebKit devs)","msgtype":"m.text"},"ts":1321037641000,"senderName":"jamesr_","senderId":"jamesr_@irc"},
{"content":{"body":"somebody would have to figure out the compat risks of changing things depending on how long each type has been supported, i'm not personally familiar","msgtype":"m.text"},"ts":1321037700000,"senderName":"jamesr_","senderId":"jamesr_@irc"},
{"content":{"body":"but i love the idea","msgtype":"m.text"},"ts":1321037701000,"senderName":"jamesr_","senderId":"jamesr_@irc"},
{"content":{"body":"Ms2ger: I couldn't find any component","msgtype":"m.text"},"ts":1321037702000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"perhaps just looked at some wrong place","msgtype":"m.text"},"ts":1321037703000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Ms2ger: er, now I see it","msgtype":"m.text"},"ts":1321037760000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"XHR1 and XHR2","msgtype":"m.text"},"ts":1321037761000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Good :)","msgtype":"m.text"},"ts":1321037762000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"http://www.w3.org/Bugs/Public/show_bug.cgi?id=14773 https://bugzilla.mozilla.org/show_bug.cgi?id=701787","msgtype":"m.text"},"ts":1321038180000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"hmm, XHR doesn't really define how responseText and responseXML map to each other while loading","msgtype":"m.text"},"ts":1321039740000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I mean, does something require that parsing needs to be synchronous or not","msgtype":"m.text"},"ts":1321039741000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"personally i think any use of window-synchronous xhr should force the page to comic sans","msgtype":"m.text"},"ts":1321042980000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"sicking, on the .findAll() thread i missed why the return type needs something in addition to Array.prototype on the prototype chain","msgtype":"m.text"},"ts":1321046340000,"senderName":"jamesr_","senderId":"jamesr_@irc"},
{"content":{"body":"what would go on [some type].prototype ?","msgtype":"m.text"},"ts":1321046400000,"senderName":"jamesr_","senderId":"jamesr_@irc"},
{"content":{"body":"jamesr_: See point to in the goals list in the beginning of the mail","msgtype":"m.text"},"ts":1321046460000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"jamesr_: .findAll again, for example.","msgtype":"m.text"},"ts":1321046461000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jamesr_: it's a future extension point so that we can hang things at it later","msgtype":"m.text"},"ts":1321046520000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"jamesr_: like .findAll, or .remove (to remove all the nodes from their parent), or .merge to merge two NodeArrays together and produce a sorted NodeArray","msgtype":"m.text"},"ts":1321046580000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"jamesr_: jquery has a host of functions on their equivalent of NodeArray, many of these would make sense on NodeArray too","msgtype":"m.text"},"ts":1321046581000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"It has basically the entire Element API on their nodelists.","msgtype":"m.text"},"ts":1321046582000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Which is super-useful.","msgtype":"m.text"},"ts":1321046640000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"document.findAll(...).addEventListener would be neat","msgtype":"m.text"},"ts":1321046700000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"that operates on each element in the array?","msgtype":"m.text"},"ts":1321046701000,"senderName":"jamesr_","senderId":"jamesr_@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1321046702000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":":(","msgtype":"m.text"},"ts":1321046703000,"senderName":"_bga","senderId":"_bga@irc"},
{"content":{"body":"dont invent jq again","msgtype":"m.text"},"ts":1321046760000,"senderName":"_bga","senderId":"_bga@irc"},
{"content":{"body":"plz","msgtype":"m.text"},"ts":1321046761000,"senderName":"_bga","senderId":"_bga@irc"},
{"content":{"body":"Sorry, _bga, but you're wrong.  jQuery's interface is *really* useful.","msgtype":"m.text"},"ts":1321046762000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"doc.findAll(...).forEach(...)","msgtype":"m.text"},"ts":1321046763000,"senderName":"_bga","senderId":"_bga@irc"},
{"content":{"body":"_bga: That doesn't let you do very useful things like run .findAll on the results and get back a unioned-and-document-sorted nodelist.","msgtype":"m.text"},"ts":1321046820000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"_bga: the fact that jQuery is seeing so much use is a pretty good indication that it's doing something right","msgtype":"m.text"},"ts":1321046821000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"TabAtkins jq api isnt orhogonal but ok if you want. anyway nobody need add event listerer to many nodes bucause event delegation by class is better","msgtype":"m.text"},"ts":1321046940000,"senderName":"_bga","senderId":"_bga@irc"},
{"content":{"body":"_bga: Possible so.  But once you've added 50% of the Element API to it, you might as well add the rest for consistency.","msgtype":"m.text"},"ts":1321047000000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"sicking: that smells like a language thing to me:","msgtype":"m.text"},"ts":1321047120000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"dglazkov: what does?","msgtype":"m.text"},"ts":1321047180000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"dglazkov: Lifting functions over an array is something the language can make easier, but it doesn't always go far enough.","msgtype":"m.text"},"ts":1321047181000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Like with the el.findAll().findAll() example.","msgtype":"m.text"},"ts":1321047182000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"sicking: document.findAll(..)..->addEventListener or something...","msgtype":"m.text"},"ts":1321047183000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"dglazkov: you mean the ability to apply a function call to all elements in an array?","msgtype":"m.text"},"ts":1321047240000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: yah","msgtype":"m.text"},"ts":1321047241000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"they already have that as a library, but the syntax is clunky","msgtype":"m.text"},"ts":1321047242000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"array.map(function(e) { e.doStuff(...) });","msgtype":"m.text"},"ts":1321047300000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1321047301000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"possibly lambda expressions will help","msgtype":"m.text"},"ts":1321047302000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"lift(doStuff)(array)","msgtype":"m.text"},"ts":1321047303000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Damn focus on methods and 'this' makes that hard.","msgtype":"m.text"},"ts":1321047304000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1321047360000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"i had els._do('addEventListener', [_fn, false])","msgtype":"m.text"},"ts":1321047361000,"senderName":"_bga","senderId":"_bga@irc"},
{"content":{"body":"wishes once again that he could just program lisp in the browser...","msgtype":"m.emote"},"ts":1321047362000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"array/:=(addEvenListener","msgtype":"m.text"},"ts":1321047363000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"* els._do('addEventListener', [type, _fn, false])","msgtype":"m.text"},"ts":1321047364000,"senderName":"_bga","senderId":"_bga@irc"},
{"content":{"body":"a sad hitler shorthand","msgtype":"m.text"},"ts":1321047365000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"TabAtkins anyway you(whole committee) must populate widget model, not jq spagetti code","msgtype":"m.text"},"ts":1321047540000,"senderName":"_bga","senderId":"_bga@irc"},
{"content":{"body":"can't parse that sentence.","msgtype":"m.emote"},"ts":1321047541000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"sorry","msgtype":"m.text"},"ts":1321047542000,"senderName":"_bga","senderId":"_bga@irc"},
{"content":{"body":"_bga: well.. first step is to come up with a concrete proposal","msgtype":"m.text"},"ts":1321047543000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"_bga: once you have that we can talk :)","msgtype":"m.text"},"ts":1321047600000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"_bga: next step would be to TC39 and pitch it","msgtype":"m.text"},"ts":1321047601000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"is about to pitch weak references to TC39","msgtype":"m.emote"},"ts":1321047602000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: Like, right now?","msgtype":"m.text"},"ts":1321047660000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: no, need to do a couple of more rounds through dhermans brain","msgtype":"m.text"},"ts":1321047661000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Oh, okay.  Wasn't sure how immediate the \"about\" was.","msgtype":"m.text"},"ts":1321047662000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: but the first round went better than other things I've pitched him","msgtype":"m.text"},"ts":1321047663000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"The current thing I'm most excited about is private Names and decoupling . and [] semantics.","msgtype":"m.text"},"ts":1321047840000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TC39 has wrong way imho. i stopped reading mailing list half year ago","msgtype":"m.text"},"ts":1321047960000,"senderName":"_bga","senderId":"_bga@irc"},
{"content":{"body":"smaug____: parsing in XHR does not need to be synchronous. responseXML isn't available until parsing has ended.","msgtype":"m.text"},"ts":1321048020000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: ah","msgtype":"m.text"},"ts":1321048440000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: however, I did intentionally stall progress events until the charset is known, because responseText is supposed to accumulate during progress events","msgtype":"m.text"},"ts":1321048500000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"yeah, that is ok-ish","msgtype":"m.text"},"ts":1321048501000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"at least I don't have any better solution","msgtype":"m.text"},"ts":1321048560000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: I have an alternative solution, but I don't want to bother unless Web compat requires","msgtype":"m.text"},"ts":1321048561000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"smaug____: the alternative is to expose stuff in the ASCII range in responseText before the encoding has been decided","msgtype":"m.text"},"ts":1321048620000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"arv: did you see the conversation about a lifting shorthand in JS?","msgtype":"m.text"},"ts":1321048621000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"i.e. start stalling at the first non-ASCII character","msgtype":"m.text"},"ts":1321048622000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"smaug____: but I thought it's not worthwhile to add that kind of complexity without a clear demonstartion of Web compat issues with the way I wrote the patch","msgtype":"m.text"},"ts":1321048680000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"dglazkov: lifting shorthand?","msgtype":"m.text"},"ts":1321048681000,"senderName":"arv","senderId":"arv@irc"},
{"content":{"body":"arv: to provide jquery-like lift facilities in the language","msgtype":"m.text"},"ts":1321048682000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"hsivonen: I agree","msgtype":"m.text"},"ts":1321048683000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"dglazkov: reading irc backlog now","msgtype":"m.text"},"ts":1321048684000,"senderName":"arv","senderId":"arv@irc"},
{"content":{"body":"smaug____: what I'm most worried about in terms of Web compat is the situation that the extension manager had showing up on the Web","msgtype":"m.text"},"ts":1321048740000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"arv: I remember you mentioning something about this","msgtype":"m.text"},"ts":1321048741000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"smaug____: that is, XHR users expecting HTTP text/html 404 or other error pages to give null responseXML","msgtype":"m.text"},"ts":1321048742000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1321048743000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: but again, I think it doesn't make sense to solve that problem without a demonstration that it's a real Web compat problem","msgtype":"m.text"},"ts":1321048744000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: could we not give responseXML at all for text/html documents","msgtype":"m.text"},"ts":1321048800000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"only response","msgtype":"m.text"},"ts":1321048801000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: if it becomes a problem, we could only give responseXML when the status code is 2xx","msgtype":"m.text"},"ts":1321048802000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"but why do we need to give HTML document from responseXML","msgtype":"m.text"},"ts":1321048860000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"responseXML is legacy","msgtype":"m.text"},"ts":1321048861000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: responseXML is the way you obtain a Document from XHR","msgtype":"m.text"},"ts":1321048862000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"smaug____: but yeah, if it becomes a problem, we could limit availability to the xhr.response","msgtype":"m.text"},"ts":1321048920000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: you can get document using .response","msgtype":"m.text"},"ts":1321048921000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"so, is there any reason to get document from responseXML","msgtype":"m.text"},"ts":1321048980000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: I was following the spec","msgtype":"m.text"},"ts":1321048981000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1321048982000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"TabAtkins: Like this: http://traceur-compiler.googlecode.com/svn/trunk/example/collection.html","msgtype":"m.text"},"ts":1321048983000,"senderName":"arv","senderId":"arv@irc"},
{"content":{"body":"the spec is possibly wrong","msgtype":"m.text"},"ts":1321048984000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(specs are always wrong :p )","msgtype":"m.text"},"ts":1321049040000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: to me, it seems logical to offer the document via responseXML","msgtype":"m.text"},"ts":1321049041000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"dglazkov: ES6 will have real iterators and a for-of loop for them","msgtype":"m.text"},"ts":1321049042000,"senderName":"arv","senderId":"arv@irc"},
{"content":{"body":"even if the document has nothing to do with XML?","msgtype":"m.text"},"ts":1321049043000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"arv: Yeah.","msgtype":"m.text"},"ts":1321049044000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"smaug____: I suggest we try to find out if offering it via resposeXML breaks the Web","msgtype":"m.text"},"ts":1321049045000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"smaug____: we have innerHTML on XML docs","msgtype":"m.text"},"ts":1321049046000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"dglazkov: Me and Jacob talked about .{ for chaining. es-discuss didn't like it much though","msgtype":"m.text"},"ts":1321049100000,"senderName":"arv","senderId":"arv@irc"},
{"content":{"body":"hsivonen: and that is unfortunate, but too late to fix","msgtype":"m.text"},"ts":1321049101000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"arv: What does that do, run the block on the list or something?","msgtype":"m.text"},"ts":1321049102000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"arv: nifty demo!","msgtype":"m.text"},"ts":1321049103000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"Or is that the \"set multiple properties as an expression\" thing?","msgtype":"m.text"},"ts":1321049104000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"slaps es-discuss with a trout","msgtype":"m.emote"},"ts":1321049160000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"TabAtkins: expr.{a: b, c: d} desugars to something like $tmp = expr; tmp.a = b; $tmp.c = d","msgtype":"m.text"},"ts":1321049161000,"senderName":"arv","senderId":"arv@irc"},
{"content":{"body":"smaug____: I suggest landing without more spec violations than the ones I've made already for not honoring <meta> for responseType == \"text\" and seeing what happens","msgtype":"m.text"},"ts":1321049162000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Yeah, what I thought.  Not sure how that's relevant to what we were talking about, though.","msgtype":"m.text"},"ts":1321049163000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: very much like css hierarchies","msgtype":"m.text"},"ts":1321049164000,"senderName":"arv","senderId":"arv@irc"},
{"content":{"body":"smaug____: if bad stuff happens, let's make spec change suggestions","msgtype":"m.text"},"ts":1321049220000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: we can do that","msgtype":"m.text"},"ts":1321049221000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"hsivonen: and removing the support for .responseXML is easy","msgtype":"m.text"},"ts":1321049222000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"arv: We're talking about things like el.findAll().remove() or whatnot.","msgtype":"m.text"},"ts":1321049223000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I probably would want responseText and responseXML to support only legacy types","msgtype":"m.text"},"ts":1321049280000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(only those types which should be allowed to be used with sync XHR)","msgtype":"m.text"},"ts":1321049281000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"TabAtkins: It allows chaining... https://mail.mozilla.org/pipermail/es-discuss/2011-November/018268.html","msgtype":"m.text"},"ts":1321049340000,"senderName":"arv","senderId":"arv@irc"},
{"content":{"body":"TabAtkins: without restructuring the whole API to use methods that return THE jQuery obejct","msgtype":"m.text"},"ts":1321049341000,"senderName":"arv","senderId":"arv@irc"},
{"content":{"body":"TabAtkins: For that I would just use a for of loop but expanding NodeList to implement Node is an exercise we have done. It seems to mostly work","msgtype":"m.text"},"ts":1321049460000,"senderName":"arv","senderId":"arv@irc"},
{"content":{"body":"smaug____: the reason the patch doesn't leak is that the parser always delivers DOMContentLoaded if we get as far as using the event listener","msgtype":"m.text"},"ts":1321049461000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: what releases the listener?","msgtype":"m.text"},"ts":1321049520000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"arv: I see.  It's using a slightly different syntax between the {} to allow method calls.","msgtype":"m.text"},"ts":1321049521000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"smaug____: whoa. I'm not sure.","msgtype":"m.text"},"ts":1321049522000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"TabAtkins: This is kind of pushing the limits of syntax and some people really dislike this direction","msgtype":"m.text"},"ts":1321049580000,"senderName":"arv","senderId":"arv@irc"},
{"content":{"body":"smaug____: I need to take a better look at your comments at daytime","msgtype":"m.text"},"ts":1321049581000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1321049582000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"arv: I can see why.  ^_^","msgtype":"m.text"},"ts":1321049583000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Definitely a bit difficult to read.","msgtype":"m.text"},"ts":1321049640000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"kicks this 3G connection","msgtype":"m.emote"},"ts":1321049760000,"senderName":"smaug_____","senderId":"smaug_____@irc"},
{"content":{"body":"TabAtkins: no harder than jquery =P I also find the closing curly brace a lot cleaner than jquery's begin(). ... .end()","msgtype":"m.text"},"ts":1321049940000,"senderName":"arv","senderId":"arv@irc"},
{"content":{"body":"Agree on that last point.","msgtype":"m.text"},"ts":1321049941000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: where's a good summary of the latest and greatest on CSS variables?","msgtype":"m.text"},"ts":1321050720000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"TabAtkins: \"in my head\" is an acceptable answer","msgtype":"m.text"},"ts":1321050721000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"http://dev.w3.org/csswg/css-variables","msgtype":"m.text"},"ts":1321050722000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: this is gorgeous","msgtype":"m.text"},"ts":1321051260000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"Damn, if you remove all the examples, the whole useful part of the spec is *just* over two screenfuls.","msgtype":"m.text"},"ts":1321051380000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: had you been involved in the accessibility-for-canvas API?","msgtype":"m.text"},"ts":1321051440000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"I thought exmaples_were_ the useful part :)","msgtype":"m.text"},"ts":1321051441000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"TabAtkins: i think someone said you had been present during those discussions at tpac?","msgtype":"m.text"},"ts":1321051442000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: Only in shouting for use-cases.","msgtype":"m.text"},"ts":1321051443000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"No, I was not in the tpac discussions.","msgtype":"m.text"},"ts":1321051444000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Though my spirit may have been hovering in the room.","msgtype":"m.text"},"ts":1321051500000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Glooming at everyone.","msgtype":"m.text"},"ts":1321051501000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hah","msgtype":"m.text"},"ts":1321051502000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"accessibility for ALL the canvases!","msgtype":"m.text"},"ts":1321051560000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"TabAtkins: i think the use case is basically to existing use of canvas accessible. I realize that a lot of canvas use today can be done in a differe, more accessible way, using completely different APIs","msgtype":"m.text"},"ts":1321051561000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"TabAtkins: but i think asking people to completely redo what they are doing, especially if the win is \"just\" accessibility, isn't going to have any effect","msgtype":"m.text"},"ts":1321051562000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"I agree.","msgtype":"m.text"},"ts":1321051620000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"that reminds me... since I know nothing about canvas+a11y, I was wondering few days ago why imagemaps couldn't be used with canvas","msgtype":"m.text"},"ts":1321051621000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: the problem is that it's a completely different API. If you're drawing something on screen with canvas, you'll need a completely different code-path to also create an imagemap","msgtype":"m.text"},"ts":1321051680000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"I was told that it has been decided that imagemaps don't work well enough in that case, but does anyone happen to have links to where that discussion has happened","msgtype":"m.text"},"ts":1321051681000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: so it's just too inconvenient","msgtype":"m.text"},"ts":1321051682000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"smaug____: additionally, there is no way to associate an element with a particular image-map area","msgtype":"m.text"},"ts":1321051740000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"TabAtkins: but working based on examples of how people use canvas today is definitely a good idea","msgtype":"m.text"},"ts":1321051741000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: I don't quite buy that all. Something new could be added to maps","msgtype":"m.text"},"ts":1321051800000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but, as I said, I'm not really familiar with a11y+canvas","msgtype":"m.text"},"ts":1321051801000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"sicking: I have no problem with designing some a11y apis into canvas.  My problem is designing things in such a way that authors have to go to extra lengths to use them (because most won't), or designing in the absence of use-cases since that almost always results in solving non-problems or solving real problems wrongly.","msgtype":"m.text"},"ts":1321051920000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"a11y should be as automatic as possible, even if that means you don't get a perfect solution.","msgtype":"m.text"},"ts":1321051980000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"sicking: i wish the people asking for \"making canvas accessible\" would in fact do as you say and start with real uses of canvas","msgtype":"m.text"},"ts":1321052040000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sicking: currently they just hand-wave the use cases and then design things that would only make sense if you were doing something absurd and cockamamie like implementing a word processor in canvas or something","msgtype":"m.text"},"ts":1321052100000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: definitely. My suggestion has been to create a API which builds hit-testing into canvas. Then we can use the hit-testing information to provide a11y","msgtype":"m.text"},"ts":1321052160000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"fwiw, hit testing is on my list of things to add to canvas once we do path primitives","msgtype":"m.text"},"ts":1321052161000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"which is high on my list to do within the next few momnths","msgtype":"m.text"},"ts":1321052220000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"months","msgtype":"m.text"},"ts":1321052221000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: the API i have suggested creates hit-testing without the need for path primitives","msgtype":"m.text"},"ts":1321052222000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"so far i've had to use HTML elements overlaid on top of a canvas for hit testing (clumsy and limited, but works)","msgtype":"m.text"},"ts":1321052223000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"sicking: i think we should avoid adding new features to paths that we'd have to duplicate when we have path primitives, but i'm certainly open to suggestions. mail the list or file a bug.","msgtype":"m.text"},"ts":1321052280000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: of course, i can't compare it to a proposal which does use path primitives until someone makes such a proposal ;-)","msgtype":"m.text"},"ts":1321052281000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Hixie: done and done","msgtype":"m.text"},"ts":1321052282000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Hixie: the bug is already on file and already links to my proposal","msgtype":"m.text"},"ts":1321052283000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1321052284000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"url?","msgtype":"m.text"},"ts":1321052285000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"http://www.w3.org/Bugs/Public/show_bug.cgi?id=13176","msgtype":"m.text"},"ts":1321052340000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"http://lists.w3.org/Archives/Public/public-canvas-api/2011JulSep/0195.html","msgtype":"m.text"},"ts":1321052341000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"ah man, don't use public-canvas-api","msgtype":"m.text"},"ts":1321052342000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"who reads that","msgtype":"m.text"},"ts":1321052343000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: dude, it's in the bug, you know how to find it","msgtype":"m.text"},"ts":1321052344000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sure, i'm just saying htat list is a bad place to send feedback in general","msgtype":"m.text"},"ts":1321052400000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah your proposal is basically what i had in mind, except i think we should just do it with Path objects instead of continuing to use the existing path stuff","msgtype":"m.text"},"ts":1321052460000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"since everything we add to the existing path stuff will have to be duplicated when we add path primitives","msgtype":"m.text"},"ts":1321052520000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's hard to say how good such a proposal would be for accessibility though","msgtype":"m.text"},"ts":1321052521000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh actually no, your proposal isn't quite what i had in mind","msgtype":"m.text"},"ts":1321052580000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i missed that you were setting a \"drawing mode\"","msgtype":"m.text"},"ts":1321052581000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"my idea was just to use the path to set the boundary rect","msgtype":"m.text"},"ts":1321052582000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"s/rect/shape/","msgtype":"m.text"},"ts":1321052583000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"my proposal is to make everything drawn why \"setDrawingFor\" forward clicks to the underlying element","msgtype":"m.text"},"ts":1321052640000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"that way people have incentive to use the API","msgtype":"m.text"},"ts":1321052641000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"the a11y is no longer bolt-on","msgtype":"m.text"},"ts":1321052642000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"it's not clear to me that that helps a11y","msgtype":"m.text"},"ts":1321052700000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if the user can click, why does the element matter?","msgtype":"m.text"},"ts":1321052701000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"making a real connection between pixels and elements has many benefits","msgtype":"m.text"},"ts":1321052760000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"it means we know where to focus if you tab to said element","msgtype":"m.text"},"ts":1321052761000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"to me it looks like this would just encourage people to have lots of empty <div>s in the canvas to use as event listeners","msgtype":"m.text"},"ts":1321052762000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"we already have a solution to the focus ring problem","msgtype":"m.text"},"ts":1321052763000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"http://www.whatwg.org/specs/web-apps/current-work/#dom-context-2d-drawsystemfocusring","msgtype":"m.text"},"ts":1321052820000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"one that anyone is using?","msgtype":"m.text"},"ts":1321052821000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"or implementing?","msgtype":"m.text"},"ts":1321052822000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"or has expressed like for?","msgtype":"m.text"},"ts":1321052823000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"implementors from gecko, opera, and webkit have said they like what the whatwg spec has as far as that goes","msgtype":"m.text"},"ts":1321052824000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"in fact it was mostly designed by roc","msgtype":"m.text"},"ts":1321052825000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i haven't really head any positive feedback about it","msgtype":"m.text"},"ts":1321052880000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"the whatwg api or the richs api?","msgtype":"m.text"},"ts":1321052881000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the whatwg API","msgtype":"m.text"},"ts":1321052882000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"i don't know what richs api is","msgtype":"m.text"},"ts":1321052883000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"the richs api is the one in the w3c copy of hte canvas spec, that's self-contradictory","msgtype":"m.text"},"ts":1321052884000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the whatwg one, like i said, was designed mostly by roc, with input from people from opera and webkit who were all supportive at the time it was put in","msgtype":"m.text"},"ts":1321052940000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(iirc, i reached out to microsoft but got no reply)","msgtype":"m.text"},"ts":1321052941000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1321053000000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"i guess your experience is different from mine","msgtype":"m.text"},"ts":1321053001000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"well, nobody to my knowledge has implemented it","msgtype":"m.text"},"ts":1321053002000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so my experience doesn't mean much :-)","msgtype":"m.text"},"ts":1321053003000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'm certainly happy to try other solutions that are more likely to get implemented, including linking focus rings with click regions","msgtype":"m.text"},"ts":1321053060000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i haven't given a great deal of thought to focus rings, but it doesn't seem like what we currently have is solving a lot of the problem","msgtype":"m.text"},"ts":1321053120000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"what we should do is list the actual concrete examples of usage of canvas that are not accessible, but that are valid sensible uses of canvas, and see what we need to do to make those better","msgtype":"m.text"},"ts":1321053121000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that would help us design solid solutions","msgtype":"m.text"},"ts":1321053122000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"fwiw, https://zewt.org/curves/","msgtype":"m.text"},"ts":1321053180000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"control points created in the curve should really be tabbable (the actual clickable regions are done with HTML, which is a hack)","msgtype":"m.text"},"ts":1321053240000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"has been doing some thing that uses canvas and hit-testing, but it was sufficiently trivial to just store a list of rectangle coordinates and test them manually on mousemove, and he wouldn't want to use the actual drawing paths for hit-testing because it's user-friendlier to give several pixels margin around them","msgtype":"m.emote"},"ts":1321053241000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(hasn't been updated with crossorigin so it'll only work opening local files)","msgtype":"m.text"},"ts":1321053242000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt's example is a perfect example of something where it's not at all clear to me how mapping the clickable regions to elements would make it more accessible","msgtype":"m.text"},"ts":1321053360000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"With control-point movement you probably want to detect which point is closest to the mouse, rather than picking whichever is within the radius and happened to be drawn first/last","msgtype":"m.text"},"ts":1321053420000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"a couple other notable things here: the clickable region of the control points is larger than the points, and the mouse cursor is affected by what's hovered (it would be nice to be able to do that without muddling with the cursor by hand in mousemove/mouseover)","msgtype":"m.text"},"ts":1321053421000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Philip`: indeed","msgtype":"m.text"},"ts":1321053422000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"zewt: sounds like a perfect thing for SVG :-)","msgtype":"m.text"},"ts":1321053480000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"zewt: (at least the latter part)","msgtype":"m.text"},"ts":1321053481000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Philip`: that doesn't matter much in this particular case, since control points can't be that close together (drag within a few pixels and it deletes the point)","msgtype":"m.text"},"ts":1321053482000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"but in other cases, yes","msgtype":"m.text"},"ts":1321053483000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"http://wiki.whatwg.org/wiki/Canvas","msgtype":"m.text"},"ts":1321053540000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: SVG doesn't help if I need 1 feature from SVG and 9 from Canvas, unless they integrate better than I'm aware","msgtype":"m.text"},"ts":1321053600000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(eg. a way to create matching paths in SVG and Canvas, or something like that)","msgtype":"m.text"},"ts":1321053601000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"what features do you need from canvas?","msgtype":"m.text"},"ts":1321053602000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i havn't used SVG enough to know how to do this sort of thing in it","msgtype":"m.text"},"ts":1321053660000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"as far as i'm aware, you can do all of this in svg","msgtype":"m.text"},"ts":1321053661000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"likes the \"easy-to-use API\" feature","msgtype":"m.emote"},"ts":1321053662000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"can't argue with that","msgtype":"m.text"},"ts":1321053720000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, zewt: In that example you'd call setDrawingFor before/after drawing the draggable markers","msgtype":"m.text"},"ts":1321053780000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"no, you'd want the path for the hit zones to be bigger than the markers","msgtype":"m.text"},"ts":1321053781000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sicking: but what element would you forward the clicks to?","msgtype":"m.text"},"ts":1321053782000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Yeah, I've thought about adding a number argument for getting a bigger area around the drawn figure clickable","msgtype":"m.text"},"ts":1321053840000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Hixie: you'd have to create \"dummy\" elements inside the canvas","msgtype":"m.text"},"ts":1321053841000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Hixie: so how would you make that accessible?","msgtype":"m.text"},"ts":1321053842000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"(imho best to just have an actual path and just say \"within this path is the region\")","msgtype":"m.text"},"ts":1321053843000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sicking: i don't know in what sense it is inaccessible","msgtype":"m.text"},"ts":1321053900000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: yeah, you're not the first to suggest that. I'm open to that idea","msgtype":"m.text"},"ts":1321053901000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: certainly a blind person can't use it, but there's not much we can do for them. So presumably we're talking about limited but not zero vision.","msgtype":"m.text"},"ts":1321053902000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you can always draw a transparent larger clickable path around your visible part","msgtype":"m.text"},"ts":1321053903000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"sicking: or maybe keyboard-only users?","msgtype":"m.text"},"ts":1321053904000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: possibly, i'm not fully sure","msgtype":"m.text"},"ts":1321053960000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"zewt: every drawing operation is a transparent area filling the whole canvas, so that doesn't really work :-)","msgtype":"m.text"},"ts":1321053961000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sicking: we can't design an API without knowing what we're trying to solve.","msgtype":"m.text"},"ts":1321053962000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i mean, use the transparent path as the clickable part","msgtype":"m.text"},"ts":1321053963000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"sicking: (despite what we may see others do)","msgtype":"m.text"},"ts":1321053964000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"for example, hovering near the path (not over a control point) changes the cursor to cross when you're close enough to click; that clickable region is invisible and complex (follows the curve)","msgtype":"m.text"},"ts":1321053965000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Hixie: no, but doing nothing and waiting for the a11y community to come up with something hasn't been terribly successful either","msgtype":"m.text"},"ts":1321053966000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"(that's just done manually on mousemove, iirc)","msgtype":"m.text"},"ts":1321054020000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"would be a lot nicer to just draw a thicker invisible path around the line of the curve, give it a cursor style (somehow) and receive mousedown","msgtype":"m.text"},"ts":1321054080000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"sicking: replacing one unsuccessful strategy with another is not a win :-)","msgtype":"m.text"},"ts":1321054081000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"afk","msgtype":"m.text"},"ts":1321054082000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"sicking: or even an improvement","msgtype":"m.text"},"ts":1321054083000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sicking: when i get aroudn to this i intend to study what the problems actually are in some depth","msgtype":"m.text"},"ts":1321054140000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: i think the \"let's not do anything until we know exactly what to do\" strategy is the worst possible strategy since it'll just result in others ignoring us and doing whatever they think is the best","msgtype":"m.text"},"ts":1321054141000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: i didn't say \"exactly\"","msgtype":"m.text"},"ts":1321054142000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: more MediaController questions","msgtype":"m.text"},"ts":1321054260000,"senderName":"jernoble","senderId":"jernoble@irc"},
{"content":{"body":"Hixie: \"the playbackRate attribute … on setting, must set the MediaController's media controller playback rate to the new value, then queue a task to fire a simple event named ratechange at the MediaController.\"","msgtype":"m.text"},"ts":1321054261000,"senderName":"jernoble","senderId":"jernoble@irc"},
{"content":{"body":"Hixie: Should it also set the playback rate of its slaved media elements? or is that implied?","msgtype":"m.text"},"ts":1321054262000,"senderName":"jernoble","senderId":"jernoble@irc"},
{"content":{"body":"jernoble: the rates are multiplied -- search for \"effective playback rate\"","msgtype":"m.text"},"ts":1321054263000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"'s current canvas use is http://zaynar.co.uk/0ad-pub/profiler4.png where every rectangle (including the ~1000 tiny narrow ones along the top) has a tooltip displayed on mouseover containing a load more data","msgtype":"m.emote"},"ts":1321054320000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"jernoble: actually they're no longer multiplied, the controller just overrides it","msgtype":"m.text"},"ts":1321054321000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: so it's implied that it directly affects the playback rate of the slaved media elements.","msgtype":"m.text"},"ts":1321054322000,"senderName":"jernoble","senderId":"jernoble@irc"},
{"content":{"body":"Hixie: right, they're overriden.","msgtype":"m.text"},"ts":1321054323000,"senderName":"jernoble","senderId":"jernoble@irc"},
{"content":{"body":"jernoble: not implied, it's very explicit","msgtype":"m.text"},"ts":1321054324000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Philip`: yeah, i don't see how a DOM can ever make that more accessible","msgtype":"m.text"},"ts":1321054380000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Philip`: but it would be good to have accessibility experts actually describe what the ideal accessible UI for that would be","msgtype":"m.text"},"ts":1321054381000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sicking: there's a world of difference betwene zero data (what we have now), some data sufficient to actually design a good API (what we need, and can easily obtain by speaking to people with experience in this space), and complete and full knowledge that would design an ideal API (which would take years to collect)","msgtype":"m.text"},"ts":1321054440000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sicking: i'm arguing for the second, not the third.","msgtype":"m.text"},"ts":1321054441000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: got it. thanks.","msgtype":"m.text"},"ts":1321054442000,"senderName":"jernoble","senderId":"jernoble@irc"},
{"content":{"body":"sicking: and i plan to do the work to collect the data.","msgtype":"m.text"},"ts":1321054443000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"jernoble: np","msgtype":"m.text"},"ts":1321054444000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sicking: (though if others want to help that would be fantastic)","msgtype":"m.text"},"ts":1321054445000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: i haven't been operating with zero data. I've been operating with the examples of canvas that i've seen in the wild. Minus the ones that built an editor in canvas as they weren't good products anyway and would be too much work to make accessible, so we simply can't get good results","msgtype":"m.text"},"ts":1321054560000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: can i convince you to list some of those examples on this wiki page? http://wiki.whatwg.org/wiki/Canvas","msgtype":"m.text"},"ts":1321054620000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sicking: or describe them by e-mail?","msgtype":"m.text"},"ts":1321054621000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: unfortunately most of them i can't find any more :(","msgtype":"m.text"},"ts":1321054622000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: even one would be a start","msgtype":"m.text"},"ts":1321054623000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so far i've added zewt's example","msgtype":"m.text"},"ts":1321054680000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: i'll put some on the wiki","msgtype":"m.text"},"ts":1321054681000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"cool, thanks","msgtype":"m.text"},"ts":1321054682000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that would be a huge help","msgtype":"m.text"},"ts":1321054683000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"looks like WebGL switched their WebGLContextEvent to a constructor, http://www.khronos.org/registry/webgl/specs/latest/#5.14","msgtype":"m.text"},"ts":1321054860000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"should implement event ctors","msgtype":"m.emote"},"ts":1321054920000,"senderName":"smaug____","senderId":"smaug____@irc"}
]