[
{"content":{"body":"domfarolino: I think what the Fetch spec requires browsers to expose in this case is an “opaque filtered response” https://fetch.spec.whatwg.org/#concept-filtered-response-opaque","msgtype":"m.text"},"ts":1495412971000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"> An opaque filtered response is a filtered response whose type is \"opaque\", url list is the empty list, status is 0, status message is the empty byte sequence, header list is empty, body is null, and trailer is empty.","msgtype":"m.text"},"ts":1495412979000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"because the “response tainting” is \"opaque\" https://fetch.spec.whatwg.org/#concept-request-response-tainting","msgtype":"m.text"},"ts":1495413096000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and the response tainting is \"opaque\" because the mode is \"no-cors\"","msgtype":"m.text"},"ts":1495413154000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and the mode is \"no-cors\" because that is the default unless some other part of the fetch algorithm sets it to something else","msgtype":"m.text"},"ts":1495413207000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://fetch.spec.whatwg.org/#concept-request-mode","msgtype":"m.text"},"ts":1495413213000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the possible modes are \"same-origin\", \"cors\", \"no-cors\", \"navigate\", or \"websocket\"","msgtype":"m.text"},"ts":1495413246000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and since this is not a same-origin fetch, nor a navigation, nor a websocket fetch, nor a CORS-enabled fetch, the mode remains set at the default \"no-cors\"","msgtype":"m.text"},"ts":1495413315000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith ok so does all that apply even though im using a script tag for the loading and not making a request with fetch?","msgtype":"m.text"},"ts":1495413888000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Even if so, not sure why it would be opaque? It is a CORS-enabled request (since I'm using crossorigin attr on script tag)","msgtype":"m.text"},"ts":1495413984000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"the Fetch spec defines the primitives for all fetches, regardless of whether they '","msgtype":"m.text"},"ts":1495414329000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"*regardless of whether they’re done usin the fetch() method or if instead the UA is initiating the fetch (instead of it being initiated from JS)","msgtype":"m.text"},"ts":1495414402000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"for <script src> fetches the HTML spec references the fetch algorithm with certain settings for each of the hooks","msgtype":"m.text"},"ts":1495414480000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but yeah if you’re setting the crossorigin attribute then it is not doing a no-cors request","msgtype":"m.text"},"ts":1495414495000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and then there’s a different part of the spec that defines what kind of response gets returned","msgtype":"m.text"},"ts":1495414531000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"gimme a minute to find it","msgtype":"m.text"},"ts":1495414535000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"if the response is considered a “network error” as defined by the Fetch spec, then:","msgtype":"m.text"},"ts":1495414766000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"> A response whose type is \"error\" is known as a network error.","msgtype":"m.text"},"ts":1495414778000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"A network error is a response whose status is always 0, status message is always the empty byte sequence, header list is always empty, body is always null, and trailer is always empty.","msgtype":"m.text"},"ts":1495414778000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://fetch.spec.whatwg.org/#concept-network-error","msgtype":"m.text"},"ts":1495414788000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"...which is essentially (or maybe exactly) the same response characteristics as an “opaque filtered response”","msgtype":"m.text"},"ts":1495414853000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hmm ok","msgtype":"m.text"},"ts":1495417259000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Only thing is, the kind of error I'm talking about is like a scripting error, after fetching has been complete (throw new Error()...) so the way the DOM handles JS errors kind of depends on how it was fetched, no matter how long after it was fetched. With that being said, I can't tell if the only elaboration on the connection between the way a script was","msgtype":"m.text"},"ts":1495417601000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"fetched and how the DOM handles its errors is in the `crossorigin` section of the HTML spec or if there is more elsewhere. cc Domenic","msgtype":"m.text"},"ts":1495417602000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"I guess if it is not elaborated on elsewhere, that could explain the differences I see in the Chrome and FF outputs","msgtype":"m.text"},"ts":1495417706000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"thanks for the info MikeSmith !","msgtype":"m.text"},"ts":1495417739000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"cheers","msgtype":"m.text"},"ts":1495419358000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"domfarolino: this is governed by https://html.spec.whatwg.org/#report-the-error; see especially \"muted errors\"","msgtype":"m.text"},"ts":1495427102000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh no...should've gone multipage lol","msgtype":"m.text"},"ts":1495427141000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Whether a script has \"muted errors\" set does end up being determined whether the response is CORS-cross-origin","msgtype":"m.text"},"ts":1495427154000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i.e., whether the response's type is \"opaque\" or \"opaqueredirect\"","msgtype":"m.text"},"ts":1495427167000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: ok I think I get that. So a script fetched with crossorigin attribute (via CORS) has an opaque (or opaqueredirect) response type?","msgtype":"m.text"},"ts":1495427537000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: the opposite, I believe. A script fetched with the crossorigin attribute will have a response type \"cors\"","msgtype":"m.text"},"ts":1495427633000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so it'll be CORS-same-origin, so the muted errors flag will be unset","msgtype":"m.text"},"ts":1495427669000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh ok...so omitting the crossorigin attribute is where we get opaque and opaqueredirect response types?...and hence a script with muted errors?","msgtype":"m.text"},"ts":1495427847000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Yep","msgtype":"m.text"},"ts":1495427881000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(But, if you add the crossorigin attribute, your script needs to have the appropriate CORS headers when it's cross-origin)","msgtype":"m.text"},"ts":1495427896000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Right. So I always understood (without really digging in admittedly) opaque responses to be ones in which the actual meat of the response is invisible to the user. In fact, just quickly looking at the fetch spec now it says that an opaque filtered response has body=null, empty header list, etc...but how is this so, if I can see all of this in the network","msgtype":"m.text"},"ts":1495428161000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"tab?","msgtype":"m.text"},"ts":1495428162000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"\"this\", being all the data of a logged network request triggered from <script src=\"example.com/app.js\"></script> (no crossorigin attr, so opaque response right?)","msgtype":"m.text"},"ts":1495428210000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Domenic: source: https://fetch.spec.whatwg.org/#concept-filtered-response-opaque","msgtype":"m.text"},"ts":1495428239000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Oh, that's easy. Dev tools have special powers.","msgtype":"m.text"},"ts":1495428264000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The important thing is you can't write code in your web page to read the contents.","msgtype":"m.text"},"ts":1495428276000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Haha alright....yes! that second message is what I was about to say","msgtype":"m.text"},"ts":1495428288000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Domenic: Sorry one more thing! So I couldn't get FF to show me an error message of \"Script error\" via running the following gist locally https://gist.github.com/domfarolino/28725582270679b9e17fa74922cbfd65 whereas Chrome was properly muting errors.","msgtype":"m.text"},"ts":1495428433000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Yeah, I'm not sure what's up with that; Firefox may be going against the spec.","msgtype":"m.text"},"ts":1495428462000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Gotcha..didn't know if my reproduction was bogus or not..Alright I may look into filing a bug I guess","msgtype":"m.text"},"ts":1495428513000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"I assume errorjs.js is adding a window.onerror handler?","msgtype":"m.text"},"ts":1495428533000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"errorjs.js has the exact same contents as the script loaded above it actually","msgtype":"m.text"},"ts":1495428577000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"so I guess I'm adding the handler twice...which I didn't think about","msgtype":"m.text"},"ts":1495428596000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Interesting...","msgtype":"m.text"},"ts":1495428626000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess it should override it","msgtype":"m.text"},"ts":1495428632000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So it should still be muted","msgtype":"m.text"},"ts":1495428638000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"although hmm the function redeclarations for a/b/c might confuse things...","msgtype":"m.text"},"ts":1495428662000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ah true. I should change it up then. Maybe add the handler inline, and rename all functions. Regardless, Chrome gives me two different outputs in window.onerror...one muted, one not. FF gives both unmuted","msgtype":"m.text"},"ts":1495428710000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Yeah, presumably there's some interop bug here, although it's a bit harder to determine who's wrong.","msgtype":"m.text"},"ts":1495428745000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Anyway, bedtime for me :)","msgtype":"m.text"},"ts":1495428752000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Thanks for the info. gn","msgtype":"m.text"},"ts":1495428774000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: thinking about the was CORS works, the fact you can always see a response in devtools is expected","msgtype":"m.text"},"ts":1495434153000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"because the browser is what enforces cross-origin restrictions, not servers","msgtype":"m.text"},"ts":1495434184000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"generally if you can get a response from a server using any other client, curl or whatever, then the browser is going to get a response too","msgtype":"m.text"},"ts":1495434269000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Right, I just didn't know how far that obfuscation reach was. As in...is both the user of the browser AND the site code that does not have access to opaque responses OR JUST the site code (meaning devtools can see all). But this was a naive thought anyways","msgtype":"m.text"},"ts":1495434281000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Yes the curl is a good examp","msgtype":"m.text"},"ts":1495434293000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"yeah just the site code can’t see it","msgtype":"m.text"},"ts":1495434326000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but it’s not a naive thought","msgtype":"m.text"},"ts":1495434326000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"because I think the CORS protocol is kind of non-intuitive","msgtype":"m.text"},"ts":1495434365000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think most people are surprised to find out they can see a response in devtools but their code can’t get to it","msgtype":"m.text"},"ts":1495434425000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"It is certainly kind of odd. Always struck me as odd that the browser was the one managing the security, not the server (prized resource)...but then I learned about preflighting which makes more sense.","msgtype":"m.text"},"ts":1495434445000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Yeah that makes sense","msgtype":"m.text"},"ts":1495434452000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1495434455000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"anyway the web runtime is always the oddball","msgtype":"m.text"},"ts":1495434521000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"see the channel /topic and all that","msgtype":"m.text"},"ts":1495434529000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"So moral of the story, any state-changing server endpoints that can be accessed via CORS should be written in such a way (seemingly accepting POST is sufficient) that requests to it will def be preflighted","msgtype":"m.text"},"ts":1495434594000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Yeah haha trueee","msgtype":"m.text"},"ts":1495434598000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Question: is it possible to programmatically get the response to a script requested with CORS (not using fetch). Like If I were to programmatically insert a script whose crossorigin attr was set, and I insert it into say the head..can I, even then, get at its response? Should be no prob from a websec standpoint, but is there a mechanism to do this?","msgtype":"m.text"},"ts":1495434897000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: no mechanism do that as far as I know","msgtype":"m.text"},"ts":1495435111000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"you’d instead need to initiate the request using fetch() or XHR rather than script element","msgtype":"m.text"},"ts":1495435148000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"✔","msgtype":"m.text"},"ts":1495435237000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"mkwst: https://github.com/whatwg/fetch/issues/546 - NSFW results when doing compat analysis is a bit annoying (for me); possibly worse than annoying for others. (I can cope fine with \"regular\" porn sites, though I didn't want to see animal porn...) Wonder if something can/should be done about this","msgtype":"m.text"},"ts":1495448094000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: Sorry. I didn't actually visit all the sites, just `view-source:[site]`. I only pulled up the site when the hit wasn't in the actual body of the page.","msgtype":"m.text"},"ts":1495449152000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Which site should I have flagged?","msgtype":"m.text"},"ts":1495449162000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"(Really, sorry. I didn't mean to send to you horribleness.)","msgtype":"m.text"},"ts":1495449183000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: I didn't look at these results, just noted you marked some as NSFW. The animal porn was from earlier analysis I did a while back, unrelated to this. Sorry for being unclear!","msgtype":"m.text"},"ts":1495449237000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Oh, good. :)","msgtype":"m.text"},"ts":1495449254000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"I was going through `javascript:` URL navigation hits on Friday, and that seemed pretty bad, which lead me to the `view-source:` method today.","msgtype":"m.text"},"ts":1495449340000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"It works pretty well. I only had to actually visit ~8 or so sites today.","msgtype":"m.text"},"ts":1495449361000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"yeah I also opt for view-source: unless I want to see what's broken visually. Faster to load as well","msgtype":"m.text"},"ts":1495449402000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: also, FWIW, there are places like the UK where the legal status of visiting such sites is dubious (i.e., visiting them *is* illegal, though unknowingly clicking on a link to them is legal, but it means that one probably doesn't want to spend time clicking around)","msgtype":"m.text"},"ts":1495449557000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I added a bullet point to https://docs.google.com/document/d/1cpjWFoXBiuFYI4zb9I7wHs7uYZ0ntbOgLwH-mgqXdEM/edit#","msgtype":"m.text"},"ts":1495449794000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Why is drafts.csswg.org often damn slow?","msgtype":"m.text"},"ts":1495450149000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: if it’s slower than normal the best person to give a heads-up to is plinss","msgtype":"m.text"},"ts":1495450329000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Meh, fast Internet probably spolied me.","msgtype":"m.text"},"ts":1495450375000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"spoiled*","msgtype":"m.text"},"ts":1495450378000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1495450396000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: Getting back to https://github.com/whatwg/fetch/pull/442#discussion_r103624566 (finally)","msgtype":"m.text"},"ts":1495460588000,"senderName":"yoav_","senderId":"yoav_@irc"},
{"content":{"body":"should the potential destination be linked to a specific request, or should it be a detached concept that translates to destination?","msgtype":"m.text"},"ts":1495460626000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: I would say detached","msgtype":"m.text"},"ts":1495460706000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: just like you can normalize a method without a request","msgtype":"m.text"},"ts":1495460720000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"OK, makes sense","msgtype":"m.text"},"ts":1495460734000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"Anyone want to review https://github.com/w3c/fxtf-drafts/pull/169 ? (non-normative, should be pretty quick, but blocks me sending an email proposing a WD)","msgtype":"m.text"},"ts":1495463317000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Domenic? ^","msgtype":"m.text"},"ts":1495463547000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1495463557000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"❤️","msgtype":"m.text"},"ts":1495463568000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hmm, it seems a bit unfortunate it's new DOMPoint(x, y, z, w) but new DOMMatrix([m11, ...]), i.e. you need extra []s for DOMMatrix","msgtype":"m.text"},"ts":1495463780000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: one more Q. Would you like the elimination of empty potential-destination happen at the caller, or as part of the translation into a destination?","msgtype":"m.text"},"ts":1495463788000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"If it's the latter, I'd love some guidance as to how to define it","msgtype":"m.text"},"ts":1495463809000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"Domenic: yeah...","msgtype":"m.text"},"ts":1495463852000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Domenic: could maybe change it, but extra churn, and another incompatible change from what gecko has shipped for a few years","msgtype":"m.text"},"ts":1495463921000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Yeah, probably not worth it.","msgtype":"m.text"},"ts":1495463943000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I guess remove \"Changed <code>fromString()</code> static method to overloaded constructor.\" since that didn't exist in the previous WD","msgtype":"m.text"},"ts":1495464284000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Oh, yeah, I'm not up to date on my WDs :P","msgtype":"m.text"},"ts":1495464407000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: ok PTAL","msgtype":"m.text"},"ts":1495464438000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Domenic: you mean you didn't read the previous WD cover-to-cover, multiple times, then backwards at least once?!","msgtype":"m.text"},"ts":1495464485000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: gotta go afk for ~30 mins, sorry! But feel free to merge.","msgtype":"m.text"},"ts":1495464503000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: nm. I think I figured it out","msgtype":"m.text"},"ts":1495464513000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"ok. thx","msgtype":"m.text"},"ts":1495464515000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yoav: the caller would invoke this before creating a request, I'd think","msgtype":"m.text"},"ts":1495466990000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: until we have some kind of lowercase-request creator algorithm","msgtype":"m.text"},"ts":1495467007000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: https://tools.ietf.org/html/rfc8174","msgtype":"m.text"},"ts":1495467244000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: guess we need to fork 2119","msgtype":"m.text"},"ts":1495467255000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh boy","msgtype":"m.text"},"ts":1495467258000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"2.  Clarifying Capitalization of Key Words\" \"NEW\" text seems rather IETF-specific and verbose.","msgtype":"m.text"},"ts":1495467327000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh I see the portion other specs are supposed to use is smaller","msgtype":"m.text"},"ts":1495467351000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess we should indirect everything through Infra and then Infra can say something about ignoring RFC 8174.","msgtype":"m.text"},"ts":1495467366000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Maybe we can move \"willful violation\" to Infra too hrm","msgtype":"m.text"},"ts":1495467410000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: when should I expect this definition to be available through Bikeshed?","msgtype":"m.text"},"ts":1495467745000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"jugglinmike: usually less than 24 hours; my understanding is the ingestion process happens at some set time every day. (TabAtkins may know exactly when.) After it is then you need to do bikeshed update, or use the web service.","msgtype":"m.text"},"ts":1495467795000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"got it. Thanks!","msgtype":"m.text"},"ts":1495467820000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"Domenic: sgtm","msgtype":"m.text"},"ts":1495468285000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Will file an issue so I don't forget, maybe a PR later","msgtype":"m.text"},"ts":1495468371000,"senderName":"Domenic","senderId":"Domenic@irc"}
]