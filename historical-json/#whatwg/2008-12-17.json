[
{"content":{"body":"Hixie: how is work on security contexts for script execution going?","msgtype":"m.text"},"ts":1229472060000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"Philip`: what did you do?","msgtype":"m.text"},"ts":1229472120000,"senderName":"olliej","senderId":"olliej@irc"},
{"content":{"body":"olliej: Changed the tokeniser and inputstream from new-style classes to old-style classes","msgtype":"m.text"},"ts":1229472180000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: ah ","msgtype":"m.text"},"ts":1229472181000,"senderName":"olliej","senderId":"olliej@irc"},
{"content":{"body":"python?","msgtype":"m.text"},"ts":1229472182000,"senderName":"olliej","senderId":"olliej@irc"},
{"content":{"body":"olliej: (and also cached a len() call, for 1-2% extra speed)","msgtype":"m.text"},"ts":1229472183000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"olliej: Yes","msgtype":"m.text"},"ts":1229472184000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Getting rid of the position() stuff saves another 20%, but that's occasionally a useful feature when you want error locations...","msgtype":"m.text"},"ts":1229472480000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"christ, I'm going to have to optimise the hell out of hubbub or htm5lib will be faster :)","msgtype":"m.text"},"ts":1229472600000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"I think that's pretty unlikely :-p","msgtype":"m.text"},"ts":1229472660000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"This is still Python, where a method call takes a thousand clock cycles","msgtype":"m.text"},"ts":1229472720000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"hallvors: hm?","msgtype":"m.text"},"ts":1229472900000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"It'd be nice if html5lib never had an unget buffer larger than one character","msgtype":"m.text"},"ts":1229473680000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"but it seems not entirely trivial to make it do that :-(","msgtype":"m.text"},"ts":1229473681000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"but probably worthwhile, because that would also involve it being properly streaming and not doing lots of lookahead like it does now","msgtype":"m.text"},"ts":1229473800000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(and then I think the whole line-length / position thing could be simplified, because you'll never to unget more than one newline character)","msgtype":"m.text"},"ts":1229473801000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"s/to//","msgtype":"m.text"},"ts":1229473860000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Hixie: I was just looking at some tricky tests using with() to sneak stuff from another security context into a script's scope. I guess you haven't written any spec for such things yet ;) .. and I suppose you should also try to make the ES4 people deal with it rather than do it yourself..","msgtype":"m.text"},"ts":1229474280000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"hallvord: if you see this, can you give an example?","msgtype":"m.text"},"ts":1229478000000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"tag cloud markup","msgtype":"m.text"},"ts":1229482860000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hmmmm","msgtype":"m.text"},"ts":1229482861000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"http://24ways.org/examples/marking-up-a-tag-cloud/example.html seems plausible","msgtype":"m.text"},"ts":1229482980000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(though without all the duplication)","msgtype":"m.text"},"ts":1229483040000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, tag clouds were discussed on #whatwg here: http://krijnhoetmer.nl/irc-logs/whatwg/20081004","msgtype":"m.text"},"ts":1229484240000,"senderName":"BenMillard","senderId":"BenMillard@irc"},
{"content":{"body":"Hixie, the lead-in to that conversation started here: http://krijnhoetmer.nl/irc-logs/whatwg/20081003#l-581","msgtype":"m.text"},"ts":1229484300000,"senderName":"BenMillard","senderId":"BenMillard@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1229484540000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's kind of in line with what i just wrote in this omnibus e-mail","msgtype":"m.text"},"ts":1229484600000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, it's nice when things like that happen. :)","msgtype":"m.text"},"ts":1229485140000,"senderName":"BenMillard","senderId":"BenMillard@irc"},
{"content":{"body":"good lord","msgtype":"m.text"},"ts":1229485800000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"http://www.w3.org/History/1991-WWW-NeXT/Implementation/ParseHTML.h","msgtype":"m.text"},"ts":1229485801000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i love the way the main function is called \"readSGML\"","msgtype":"m.text"},"ts":1229485860000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"That's odd seeming it was originally not even meant to be SGML, just something like it","msgtype":"m.text"},"ts":1229495760000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"hmmmâ€¦","msgtype":"m.text"},"ts":1229495940000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"html5lib fails a lot of tests","msgtype":"m.text"},"ts":1229495941000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hixie, i think it would be better if DOMStringMap still had operations annotated with [NameGetter] etc., and then for me to introduce something in Web IDL to indicate that the operations don't correspond to functions, and then for you to use that functionality","msgtype":"m.text"},"ts":1229496420000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Hixie, so something like http://paste.lisp.org/display/72289","msgtype":"m.text"},"ts":1229496600000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"it'd have the advantage of both making the description of the named property accessors simpler (since you'd just do your usual description of operations) and also makes the interfaces suitable for languages that don't support object indexing","msgtype":"m.text"},"ts":1229496660000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"s/makes/making/","msgtype":"m.text"},"ts":1229496661000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"i can add that [OmitNamedPropertyOperations] (or something like it) before Web IDL is republished later in the week, probably","msgtype":"m.text"},"ts":1229496780000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: well, i want  for (var i in element.dataSet)  to work","msgtype":"m.text"},"ts":1229501160000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"gsnedders: It only fails about 906 out of 9953, so it's correct most of the time","msgtype":"m.text"},"ts":1229502000000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Hixie, right that's still fine, because it comes from the use of [NameGetter]","msgtype":"m.text"},"ts":1229502360000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"and the definition in prose as to which named properties exist","msgtype":"m.text"},"ts":1229502420000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"goes to cook some curried sausages","msgtype":"m.emote"},"ts":1229502421000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"mmm","msgtype":"m.text"},"ts":1229502600000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"gets confused, until he realises that 'curried' is a culinary term and not a functional programming term","msgtype":"m.emote"},"ts":1229502660000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Does prefab count as curried food? :)","msgtype":"m.text"},"ts":1229503800000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"has a mostly working html5lib at home","msgtype":"m.emote"},"ts":1229504880000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But I have no internet access","msgtype":"m.text"},"ts":1229504881000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But it gets parse errors wrong, doesn't do xml cocecion properly (I started working on that) and fails a bunch of stuff in the liberal xml parser and in the validator, both of which I am tempted to mark as abandoned unless someone fixes them","msgtype":"m.text"},"ts":1229505000000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"s/parse/some parse/","msgtype":"m.text"},"ts":1229505060000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Oh and doesn't do MathML or SVG","msgtype":"m.text"},"ts":1229505061000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"feels bad using old style classes for something as trivial as performance :)","msgtype":"m.emote"},"ts":1229505120000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Having the parser pass tests seems more valuable than having the liberal XML parser and validator pass tests","msgtype":"m.text"},"ts":1229505300000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"so I wouldn't complain about that :-)","msgtype":"m.text"},"ts":1229505301000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"jgraham: If performance was trivial, we wouldn't talk about chtml5lib as much as we have :-)","msgtype":"m.text"},"ts":1229505360000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: :p","msgtype":"m.text"},"ts":1229505420000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I wouldn't think it was worthwhile if it only gained 1-2%, but it appears to be ten times that","msgtype":"m.text"},"ts":1229505480000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Actually, that's not true, I probably would still think it was worthwhile, but I wouldn't change it if people objected on the grounds of compatibility or something","msgtype":"m.text"},"ts":1229505540000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Well it will have to change for Python3 anyway","msgtype":"m.text"},"ts":1229505600000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: Does Python 3 just remove the \"class X:\" syntax, rather than redefining it to mean new-style classes?","msgtype":"m.text"},"ts":1229505720000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: AIUI class Foo(): now means a new style class ","msgtype":"m.text"},"ts":1229505780000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I'd guess that's the least of our worries when porting to Python 3, given the whole unicode vs string thing","msgtype":"m.text"},"ts":1229505840000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Porting to python 3 will indeed be awful (I expect)","msgtype":"m.text"},"ts":1229505900000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Unless the 2to3 tool is actually a way ofreleasing magic pixies into your computer that do all the work for you","msgtype":"m.text"},"ts":1229505901000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Gentoo only added Python 2.5 as stable a few months ago, so I think it's going to be rather a long time before everyone stops using 2.x and switches to 3.x","msgtype":"m.text"},"ts":1229506260000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"so I guess it's more useful for html5lib to be written for 2.x than for 3.x for the next few years","msgtype":"m.text"},"ts":1229506320000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(It took that long because dozens of packages were incompatible with 2.5)","msgtype":"m.text"},"ts":1229506440000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Hixie, http://dev.w3.org/2006/webapi/WebIDL/#NoIndexingOperations","msgtype":"m.text"},"ts":1229512500000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"jgraham: Does your mostly working html5lib have lots of changes that would cause annoying conflicts if I was trying to make other changes to reduce the use of unget()?","msgtype":"m.text"},"ts":1229516220000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Nothing in the tokenizer iirc","msgtype":"m.text"},"ts":1229516940000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Hixie: is value of input type=datetime supposed to allow as conforming time zone designators other than \"Z\"?","msgtype":"m.text"},"ts":1229518980000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"as far as I can tell, the fourth para under http://www.whatwg.org/specs/web-apps/current-work/#date-and-time-state says that any time zone is valid, but the third para requires UAs to produce only UTC results","msgtype":"m.text"},"ts":1229519040000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"what happened to oninput and oninvalid?","msgtype":"m.text"},"ts":1229519400000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"jgraham: Okay, good","msgtype":"m.text"},"ts":1229521200000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"jgraham: (My vague poorly-thought-through plan is to get rid of the unget buffer, and only allow a single character to be ungotten at once, because then there's no need for the lineLengths array and all the related complexity)","msgtype":"m.text"},"ts":1229521260000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"jgraham: (But a much more useful plan would be to make the tokeniser match the spec and pass tests, before trying to optimise anything)","msgtype":"m.text"},"ts":1229521320000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"jgraham: (so maybe I should try that instead)","msgtype":"m.text"},"ts":1229521321000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(Or maybe I should fix my OCaml tokeniser generator, and then generate an html5lib-compatible tokeniser, so it's easier to attempt fancier optimisations like inlining stuff to avoid function calls)","msgtype":"m.text"},"ts":1229522820000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: How will you do readahead one token at a time?","msgtype":"m.text"},"ts":1229523420000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"s/token/character/","msgtype":"m.text"},"ts":1229523480000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"s/read/look/ maybe","msgtype":"m.text"},"ts":1229523481000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Philip`: Also, if what's checked in has test faliures in the tokenizer other than ones related to non-BMP unicode characters then I probably have changed something there","msgtype":"m.text"},"ts":1229523540000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: By looking ahead one character, and if it's not what was expected then unget it, otherwise look ahead one more character, and if it's not what was expected then unget the latest character and do something special to the first character (like emit it as a character token or whatever is appropriate)","msgtype":"m.text"},"ts":1229523600000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"and then repeat until done","msgtype":"m.text"},"ts":1229523601000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Oh, I haven't actually run the tokeniser tests, I just assumed it hadn't been updated when the spec was changed to add MathML and suchlike","msgtype":"m.text"},"ts":1229523720000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"and I assumed the tests had been updated","msgtype":"m.text"},"ts":1229523721000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"so either of those assumptions could be wrong","msgtype":"m.text"},"ts":1229523722000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Does that work for things like entities where you need multiple characters before you decide what the right thing to emit is?","msgtype":"m.text"},"ts":1229523780000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Philip`: Oh I might just have disbaled things to do with namespaces, MathML, etc. locally","msgtype":"m.text"},"ts":1229523781000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"s/things/tests/","msgtype":"m.text"},"ts":1229523840000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: Yes, because if you're not going to treat it as an entity then you're going to (output it as a character token | append it to the attribute value), so you can do those directly with the list of characters you've collected inside the entity function instead of ungetting and passing control back to some other state","msgtype":"m.text"},"ts":1229523900000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Uh, I'm not sure that sentence entirely made sense","msgtype":"m.text"},"ts":1229523901000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: I think it does. Basically you just end up buffering characters locally inside the state rather than globally, right?","msgtype":"m.text"},"ts":1229523960000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Yep","msgtype":"m.text"},"ts":1229523961000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"and you can ensure those characters are only [^\"'>&], so you can trivially process those buffered characters without sending them through the whole tokeniser state machine again","msgtype":"m.text"},"ts":1229524020000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Well it sounds good if you can make it work :)","msgtype":"m.text"},"ts":1229524080000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But at best it'll probably only make things 20% faster, which isn't a groundbreaking improvement :-(","msgtype":"m.text"},"ts":1229524260000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I seem to remember that the linelengths thing seemed very complicated so getting rid of that seems like a win in any case","msgtype":"m.text"},"ts":1229524380000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: I get quite a few doctype wrong-number-of-ParseError test failures - is that something you fixed locally?","msgtype":"m.text"},"ts":1229524440000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Dunno. I seem to remember something related to doctypes","msgtype":"m.text"},"ts":1229524620000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"If you fix it, I will deal with the merge problems :)","msgtype":"m.text"},"ts":1229524621000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Okay :-)","msgtype":"m.text"},"ts":1229524680000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Hubbub doesn't have an unget buffer at all, but I don't know if that approach is portable to html5lib","msgtype":"m.text"},"ts":1229526360000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"takkaria: What does it use instead?","msgtype":"m.text"},"ts":1229526420000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"it sort-of does, but really it just doesn't advance into the buffer until it knows that there is not going to be ungetting necessary","msgtype":"m.text"},"ts":1229526660000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"well, until it's not going to be necessary to unget","msgtype":"m.text"},"ts":1229526720000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"it peeks ahead instead","msgtype":"m.text"},"ts":1229526721000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"takkaria: How does it work when there aren't enough characters in the buffer for lookahead (because it hasn't come across the network yet, so it's not EOF)?","msgtype":"m.text"},"ts":1229526780000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"it returns control back to the caller to push more characters into the input stream","msgtype":"m.text"},"ts":1229526840000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"and keeps track of how far ahead it was looking","msgtype":"m.text"},"ts":1229526841000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"just means that after every peek call, you check that the return code wasn't \"out of data\"","msgtype":"m.text"},"ts":1229526900000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"The Validator.nu HTML Parser has no lookahead. Instead, I've transformed the tokenizer states in such a way that no lookahead is needed","msgtype":"m.text"},"ts":1229527080000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"takkaria: Does it retain enough state that if the input is \"<!doctype publi\", and it's parsed until before the 'p' and then done some lookahead and returned \"out of data\", and then receives a \"c\" character, it doesn't have to reread the \"publi\"?","msgtype":"m.text"},"ts":1229527140000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"hsivonen: So what you have InAttributeValueMaybeEntity states?","msgtype":"m.text"},"ts":1229527200000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(and so on)","msgtype":"m.text"},"ts":1229527201000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Philip`: yup.  the only state it needs to retain is the number of characters it's peeking ahead","msgtype":"m.text"},"ts":1229527260000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"guesses that html5lib is the only implementation that will receive \"<!doctype p>\" and then require another four characters before it emits the token","msgtype":"m.emote"},"ts":1229527380000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1229527440000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"OK so html5lib sucks, there's no need to rub it in ","msgtype":"m.text"},"ts":1229527441000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1229527442000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"well, it's hardly a performance issue :)","msgtype":"m.text"},"ts":1229527500000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"html5lib was the first(?) implementation so it can't be expected to do everything perfectly, and now it has the opportunity to benefit from the experience of all the other implementations","msgtype":"m.text"},"ts":1229527501000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"takkaria: It's (indirectly) a performance issue in html5lib :-(","msgtype":"m.text"},"ts":1229527560000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"because if the input is \"<!doctype p>\\nx\\n\\n\" then it'll unget a load of newlines, and it'll have to fiddle around to work out what line number it should report errors from","msgtype":"m.text"},"ts":1229527620000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1229527621000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"hubbub switches into a special state for the SYSTEM and PUBLIC bits, that seems like the best solution really","msgtype":"m.text"},"ts":1229527680000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"it's \"a\" solution, at least :)","msgtype":"m.text"},"ts":1229527740000,"senderName":"jmb","senderId":"jmb@irc"},
{"content":{"body":"There are other cases like \"<script></\\n\\n\\n\\n\\n\\n\" with the same problem in html5lib","msgtype":"m.text"},"ts":1229527860000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I hate computers","msgtype":"m.text"},"ts":1229527861000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"quite likes them","msgtype":"m.emote"},"ts":1229527920000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"jmb: I can't see any better one for hubbub, but maybe python has some constructs which are better for it :)","msgtype":"m.text"},"ts":1229527921000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"takkaria: I agree it's what fits best with hubbub :)","msgtype":"m.text"},"ts":1229527980000,"senderName":"jmb","senderId":"jmb@irc"},
{"content":{"body":"takkaria: The character processing model is probably a more significant difference than the language","msgtype":"m.text"},"ts":1229527981000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"html5lib's tokeniser calls stream.char() which always returns the next character (which might involve reading chunks of bytes from the underlying input stream)","msgtype":"m.text"},"ts":1229527982000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"s/bytes/characters/ maybe","msgtype":"m.text"},"ts":1229528040000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"It's not possible to suspend the tokeniser and wait for more input","msgtype":"m.text"},"ts":1229528041000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"oh, I see","msgtype":"m.text"},"ts":1229528760000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"doesn't fancy changing that, so he won't","msgtype":"m.emote"},"ts":1229529180000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"jgraham: The entity state is essentially a \"maybe\" state in the sense that if it's not an entity, it appends what it saw","msgtype":"m.text"},"ts":1229530080000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"jgraham: so it buffers what it saw instead of looking ahead","msgtype":"m.text"},"ts":1229530081000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"appends back on to the front of the buffer?","msgtype":"m.text"},"ts":1229530380000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"appends to the attribute value buffer","msgtype":"m.text"},"ts":1229530500000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"ah, I see","msgtype":"m.text"},"ts":1229530620000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"Philip`: is http://philip.html5.org/tests/ie8/cases/unknown-element-styling.html fixed in the latest build?","msgtype":"m.text"},"ts":1229532600000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: seems like it","msgtype":"m.text"},"ts":1229532900000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: thx","msgtype":"m.text"},"ts":1229532901000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: I'm almost entirely sure it is","msgtype":"m.text"},"ts":1229532960000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"http://connect.microsoft.com/IE/feedback/ViewFeedback.aspx?FeedbackID=364356","msgtype":"m.text"},"ts":1229532961000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"i'd like it to work without the script workaround","msgtype":"m.text"},"ts":1229532962000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"wonders how html5lib tokenises \"<xmp>foo</xmp/\" into [[u'Character', u'foo'], u'ParseError', [u'EndTag', u'xmp'], u'ParseError', [u'EndTag', u'xmp']]","msgtype":"m.emote"},"ts":1229533140000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(Uh, ignore the lack of a StartTag token - that's not relevant)","msgtype":"m.text"},"ts":1229533141000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Wow, really?","msgtype":"m.text"},"ts":1229533260000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: That's the output I get from a test case","msgtype":"m.text"},"ts":1229533320000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"and I don't think it's using code that I've locally modified","msgtype":"m.text"},"ts":1229533321000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Wow, that is really bad","msgtype":"m.text"},"ts":1229533560000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Seems to happen when the input is a simple plain \"<x/\" too","msgtype":"m.text"},"ts":1229533920000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Ah, it's just ignoring the return value of self.processSolidusInTag()","msgtype":"m.text"},"ts":1229534100000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"http://twitter.com/perrins/statuses/1062462587","msgtype":"m.text"},"ts":1229534220000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"gets quite worried when he can comment out lines of code in the middle of important functions without causing any tests to fail","msgtype":"m.emote"},"ts":1229534760000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"hmm, I really should get round to contributing all of the hubbub tests back to html5lib","msgtype":"m.text"},"ts":1229534940000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"we have character encoding stuff that html5lib didn't have tests for","msgtype":"m.text"},"ts":1229535000000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"That would be a nice thing to have","msgtype":"m.text"},"ts":1229535060000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"doesn't think the idea to deprecate text/html is going to get much traction in the WHATWG","msgtype":"m.emote"},"ts":1229537880000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(in response to mailing list)","msgtype":"m.text"},"ts":1229537940000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"hsivonen: yeah i wanted to allow authors to use their own time zone when setting the value","msgtype":"m.text"},"ts":1229538420000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: ok. thanks","msgtype":"m.text"},"ts":1229538480000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"heycam: i'm scared that that's like giving implementors a loaded gun and telling them to point it at their foot and set the safety and then pull the trigger -- implementors who aren't paying attention will shoot themselves","msgtype":"m.text"},"ts":1229538540000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"heycam: i.e. they'll think \"what's NoIndexingOperations? oh well let's ignore it for now\" and we'll get the functions exposed","msgtype":"m.text"},"ts":1229538541000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"heycam: i'd much rather have the idl look like the js object and have [IndexSetter] etc take arguments to provide names for the other languages","msgtype":"m.text"},"ts":1229538600000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: http://html5.validator.nu/?doc=http%3A%2F%2Fwww.whatwg.org%2Fspecs%2Fweb-apps%2Fcurrent-work%2F","msgtype":"m.text"},"ts":1229541540000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"it's a bit disturbing that in the past year and a half or so, I've had to change the max file size from 1 MB to 4 MB to accommodate the spec","msgtype":"m.text"},"ts":1229541600000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"the file size sharnk significantly since i complained","msgtype":"m.text"},"ts":1229541720000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"shrank","msgtype":"m.text"},"ts":1229541780000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it was only big temporarily because i had all the rfc2119 terms marked up as a test","msgtype":"m.text"},"ts":1229542020000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: it's still over 3 MB, though","msgtype":"m.text"},"ts":1229542140000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1229542141000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, ping","msgtype":"m.text"},"ts":1229543220000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: pong","msgtype":"m.text"},"ts":1229543880000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, why is outerHTML/insertAdjecentHTML in HTML5. Alternatively, why aren't they supported in XML 'mode'?","msgtype":"m.text"},"ts":1229543940000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Anyone found any more release critical bugs in Anolis, or can I push 1.0?","msgtype":"m.text"},"ts":1229545080000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"sicking: they're in HTML5 because several browsers support them","msgtype":"m.text"},"ts":1229545200000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sicking: they're not supported in XML because I didn't spec it and nobody asked for it","msgtype":"m.text"},"ts":1229545260000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, so they are considered required for web compat?","msgtype":"m.text"},"ts":1229545261000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"apparently several browser vendors think so, yes","msgtype":"m.text"},"ts":1229545262000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well, we all know that browser vendors are on crack most of the time...","msgtype":"m.text"},"ts":1229545263000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"that's not a line of argument you want to convince me of :-)","msgtype":"m.text"},"ts":1229545320000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"doesn't really matter if they're on crack or not though","msgtype":"m.text"},"ts":1229545321000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'm surprised you are not convinced of that already?","msgtype":"m.text"},"ts":1229545322000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"i find browser vendors as a group to be amongst the sanest of the people i deal with on a daily basis","msgtype":"m.text"},"ts":1229545380000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so given that criteria, why isn't document.all in html5?","msgtype":"m.text"},"ts":1229545381000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"mainly, i haven't gotten around to it yet","msgtype":"m.text"},"ts":1229545382000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1229545383000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"partially because i have no idea how to spec its magical behavior","msgtype":"m.text"},"ts":1229545384000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(there's lots that i haven","msgtype":"m.text"},"ts":1229545440000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"'t specced yet, like window.focus())","msgtype":"m.text"},"ts":1229545441000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"a nice thing about document.all is that it's unlikely that we can ever get browser compat on one critical aspect of it","msgtype":"m.text"},"ts":1229545500000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"namely weather if |document.all| produces true or not","msgtype":"m.text"},"ts":1229545501000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"for the same reason that we'll unlikely to get compat on what Navigator.appName returns","msgtype":"m.text"},"ts":1229545560000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"well i just need two complete bug-free implementations of HTML5, and I've already given up on IE being one of those two","msgtype":"m.text"},"ts":1229545561000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Navigator.appName doesn't have to return the same value in all browsers, it just has to return a value that conforms to the spec","msgtype":"m.text"},"ts":1229545562000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and the spec says: Must return either the string \"Netscape\" or the full name of the browser, e.g. \"Mellblom Browsernator\".","msgtype":"m.text"},"ts":1229545563000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"...which it is possible to implement interoperably","msgtype":"m.text"},"ts":1229545564000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"my point is that document.all is used as browser detection as much as navigator.appName is","msgtype":"m.text"},"ts":1229545565000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"so people *want* it to return different things for different browsers","msgtype":"m.text"},"ts":1229545620000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"given the route IE is taking, i wouldn't be surprised if that changed","msgtype":"m.text"},"ts":1229545621000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but yeah","msgtype":"m.text"},"ts":1229545622000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"anyway","msgtype":"m.text"},"ts":1229545623000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's not a huge deal","msgtype":"m.text"},"ts":1229545624000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i don't really see how to define document.all returning false anyway","msgtype":"m.text"},"ts":1229545680000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"magic pixie dust :)","msgtype":"m.text"},"ts":1229545681000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1229545682000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but back to my original question. If we think outerHTML is worth implementing, why not do it for XML mode?","msgtype":"m.text"},"ts":1229545683000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"maybe i can argue that document.all should be in zcorpan's Web DOM Core instead of HTML5!","msgtype":"m.text"},"ts":1229545684000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hah!","msgtype":"m.text"},"ts":1229545740000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"re-discovers why parsing entities is not much fun","msgtype":"m.emote"},"ts":1229545800000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"It has too many edge cases :-(","msgtype":"m.text"},"ts":1229545860000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"and I have to transform the spec's notion of unconsuming multiple characters into an implementation that can't unconsume more than one","msgtype":"m.text"},"ts":1229545920000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"wonders why on earth Anolis failing ow","msgtype":"m.emote"},"ts":1229546040000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"*now","msgtype":"m.text"},"ts":1229546041000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"http://pastebin.com/m7e39a551 â€” ideas","msgtype":"m.text"},"ts":1229546100000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hixie, but back to my original question. If we think outerHTML is worth implementing, why not do it for XML mode as well? Seems like all the parts are there anyway due to innerHTML being supported","msgtype":"m.text"},"ts":1229546160000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"thinks outerHTML is mainly useful for debugging","msgtype":"m.emote"},"ts":1229546220000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"gsnedders: That line is codec = inputstream.codecName(atributes[\"charset\"])","msgtype":"m.text"},"ts":1229546280000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"gsnedders: which is clearly not going to work because it spells \"attributes\" wrong","msgtype":"m.text"},"ts":1229546281000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"gsnedders: so presumably it's never been tested","msgtype":"m.text"},"ts":1229546282000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: But the line numbers don't even match up","msgtype":"m.text"},"ts":1229546283000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: so presumably nobody noticed it probably needs a \"import inputstream\" too","msgtype":"m.text"},"ts":1229546284000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"gsnedders: Don't they? That's what I get on line 588 in html5parser.py","msgtype":"m.text"},"ts":1229546340000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"doesn't","msgtype":"m.emote"},"ts":1229546341000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1229546342000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"oh, I'm just being stupid","msgtype":"m.text"},"ts":1229546343000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: It'd be good if you could add a test case to html5lib for that problem :-)","msgtype":"m.text"},"ts":1229546400000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: So even more can fail? :)","msgtype":"m.text"},"ts":1229546401000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Philip`: where should the import go? Just after import sys?","msgtype":"m.text"},"ts":1229546460000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"which test dir should parser go under? tree-constructor?","msgtype":"m.text"},"ts":1229546520000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: So it can be fixed and no longer fail :-)","msgtype":"m.text"},"ts":1229546521000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"gsnedders: That sounds fine for the import","msgtype":"m.text"},"ts":1229546522000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"and then how do I know which test[1-12].dat to put it in? :\\","msgtype":"m.text"},"ts":1229546523000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"has never got this","msgtype":"m.emote"},"ts":1229546524000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: I don't know if it's possible to test using that framework - I'd guess they're all Unicode strings, so you couldn't get it to give charEncoding[1] == \"tentative\" and trigger the bug","msgtype":"m.text"},"ts":1229546640000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Yeah, that is a bit of a problem","msgtype":"m.text"},"ts":1229546641000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"now AttributeError: HTMLInputStream instance has no attribute 'changeEncoding'","msgtype":"m.text"},"ts":1229546700000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"yay","msgtype":"m.text"},"ts":1229546701000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"just changes it to raise NotImplementedError","msgtype":"m.emote"},"ts":1229546760000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Might be easier to just write the test case in Python, in tests/test_encoding.py (as a new method in Html5EncodingTestCase)","msgtype":"m.text"},"ts":1229546761000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"But that still doesn't help me","msgtype":"m.text"},"ts":1229546762000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"or it might not; I don't know really","msgtype":"m.text"},"ts":1229546763000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"sicking: i wouldn't mind doing it for XML too if you think we should (innerHTML is available in XML too)","msgtype":"m.text"},"ts":1229546764000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"wonders why it used to work but why it doesn't anymore","msgtype":"m.emote"},"ts":1229546820000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Just force everything to be UTF-8, then you can avoid all these encoding issues :-)","msgtype":"m.text"},"ts":1229546821000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"sicking: nobody (other than you now) has asked for it though, and generally i'd rather people used something more compile-time-checked than strings in innerHTML/outerHTML","msgtype":"m.text"},"ts":1229546822000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sicking: (e.g. e4x, though that doesn't seem to be doign well)","msgtype":"m.text"},"ts":1229546823000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, just seems silly to basically add |if (DocIsXML()) return;| to the top of the implementation of those functions","msgtype":"m.text"},"ts":1229546824000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"e4x is doomed IMHO","msgtype":"m.text"},"ts":1229546880000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"it's a good idea, but with a terrible execution","msgtype":"m.text"},"ts":1229546881000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"maybe someone could come up with a decent e5x that actually works more like JS","msgtype":"m.text"},"ts":1229546940000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"well if we support this in XML instead of |if (DocIsXML()) return;| you'd have |if (DocIsXML()) { /* something much more complicated than return */; return; }| instead","msgtype":"m.text"},"ts":1229546941000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Philip`: seems like jgraham broke it","msgtype":"m.text"},"ts":1229546942000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Philip`: That n00b.","msgtype":"m.text"},"ts":1229546943000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"sicking: we if the goal is making the implementation easier, not supporting it is easier. :-)","msgtype":"m.text"},"ts":1229547000000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, i'd imagine not. I'd think that the code that implements this for HTML will work out of the box for XML too. Since that code will likely implement innerHTML as well","msgtype":"m.text"},"ts":1229547001000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"realises this is the fifth programming language in which he has implemented entity parsing","msgtype":"m.emote"},"ts":1229547060000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"sicking: the idea is that if you have an XHTML-only UA, you don't need an HTML parser","msgtype":"m.text"},"ts":1229547061000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, sure","msgtype":"m.text"},"ts":1229547062000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Hixie, we'd do the same as for innerHTML and use the XML parser","msgtype":"m.text"},"ts":1229547063000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1229547120000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well then","msgtype":"m.text"},"ts":1229547121000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"quite different code, no?","msgtype":"m.text"},"ts":1229547122000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Philip`: I guess you must be getting good at it now","msgtype":"m.text"},"ts":1229547123000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"\"XML is neither more performant nor stricter than XML.\"","msgtype":"m.text"},"ts":1229547180000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"sicking: innerHTML for HTML and XML are quite different in the spec","msgtype":"m.text"},"ts":1229547181000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Dashiva: oops","msgtype":"m.text"},"ts":1229547182000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"basically i'd structure the code as follows      |insertMarkupInContext(Node context, String markup) { DocumentFragment res; if (IsXML(context)) { res = parseUsingXMLParser(context, markup) } else { res = parseUsingHTMLParser(context, markup) } context.appendChild(res); }","msgtype":"m.text"},"ts":1229547300000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"and just call that function from innerHTML/outerHTML/insertAdjecentHTML","msgtype":"m.text"},"ts":1229547301000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"codereuse FTW","msgtype":"m.text"},"ts":1229547360000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"gsnedders: Not at all","msgtype":"m.text"},"ts":1229547361000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"gsnedders: Every implementation has been almost entirely different","msgtype":"m.text"},"ts":1229547362000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"sicking: fair enough","msgtype":"m.text"},"ts":1229547540000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, it'd be a bit more complicated since an insertion point is needed as well, but it seems trivial to add","msgtype":"m.text"},"ts":1229547541000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Hixie, i guess i don't care much, but as an implementor i'd argue that the cost is very low to implement. And it's always ugly with difference between HTML and XHTML IMHO","msgtype":"m.text"},"ts":1229547542000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: well, send mail and i'll add it... i have nothing intrinsically against adding it, i just wanted to add the bare minimum when i added it","msgtype":"m.text"},"ts":1229547600000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, cool","msgtype":"m.text"},"ts":1229547601000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"I don't know if this an html5 question or a webapps question.  When one clicks an <a href=url\"... in a something like a webapp/prism, is there something to indicate to whether the new window should still be part of the webapp/prism or launch a new browser?","msgtype":"m.text"},"ts":1229547840000,"senderName":"dave_levin","senderId":"dave_levin@irc"},
{"content":{"body":"(Hooray, numeric entities pass tests)","msgtype":"m.text"},"ts":1229547841000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"The closest thing I found was \"sidebar\" but that isn't right for what I'm asking about.","msgtype":"m.text"},"ts":1229547960000,"senderName":"dave_levin","senderId":"dave_levin@irc"},
{"content":{"body":"(Hooray, all entities pass tests)","msgtype":"m.text"},"ts":1229548140000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(and now I'm not calling unget() at all)","msgtype":"m.text"},"ts":1229548141000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: what tests?","msgtype":"m.text"},"ts":1229548260000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: The ones in testdata/tokenizer","msgtype":"m.text"},"ts":1229548440000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: But only the entity ones? /me shrugs","msgtype":"m.text"},"ts":1229548441000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"http://hg.gsnedders.com/anolis â€” tip is currently last call for blockers before shipping 1.0 :P","msgtype":"m.text"},"ts":1229548500000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"oh, entities.dat","msgtype":"m.text"},"ts":1229548501000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"That simplifies things","msgtype":"m.text"},"ts":1229548502000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: All of them, not only the entities ones","msgtype":"m.text"},"ts":1229548503000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1229549280000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Anolis 1.0 now available","msgtype":"m.text"},"ts":1229549281000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"outerHTML is good for breaking MSHTML.","msgtype":"m.text"},"ts":1229549400000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"It causes null pointer exception when applied carefully.","msgtype":"m.text"},"ts":1229549401000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"A validating XML parser checks for attribute types.","msgtype":"m.text"},"ts":1229549520000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"In the case of HTML, whether the attribute definition must be quoted or not does not depend on attribute type.","msgtype":"m.text"},"ts":1229549521000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"It depends on the attribute value.","msgtype":"m.text"},"ts":1229549580000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"And it is not a bottleneck.","msgtype":"m.text"},"ts":1229549581000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"Parsing HTML or XML does not require a browser.","msgtype":"m.text"},"ts":1229549640000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"<div><p>some text</div> does not trigger quirks mode.","msgtype":"m.text"},"ts":1229549700000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"It is official: the closing tag is optional.","msgtype":"m.text"},"ts":1229549760000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"<div><p>some text<p>some more text</div> is <div><p>some text</p ><p>some more text</p ></div>.","msgtype":"m.text"},"ts":1229549761000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"There is no ambiguity.","msgtype":"m.text"},"ts":1229549762000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"Strict checking means less errors but it also means less content.","msgtype":"m.text"},"ts":1229549820000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"Wow. I've not blogged since September","msgtype":"m.text"},"ts":1229549880000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Because the authors will find it too much trouble to comply, or they will use Microsoft Word, which will only be for worse.","msgtype":"m.text"},"ts":1229549940000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"yecril71: That does trigger quirks, as it has no doctype","msgtype":"m.text"},"ts":1229549941000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"It was meant to be a fragment.","msgtype":"m.text"},"ts":1229549942000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1229550000000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I am commenting on a recent message from Giovanni.","msgtype":"m.text"},"ts":1229550001000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"It wasn't clear in that email whether it was meant as a fragment or not either :)","msgtype":"m.text"},"ts":1229550060000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"He explicitly stated that </div > triggered quirks mode in his universe.","msgtype":"m.text"},"ts":1229550120000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"XHTML1.0 explicitly refers to HTML4 as semantic base.","msgtype":"m.text"},"ts":1229550180000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"gsnedders: You negatively rated r1235, which was my commit, not jgraham's","msgtype":"m.text"},"ts":1229550360000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"dave_levin: it's somewhat up to the app","msgtype":"m.text"},"ts":1229550361000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"dave_levin: html5 defines target=\"\" which could be used as a key","msgtype":"m.text"},"ts":1229550362000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: So if a given user agent (UA1), choose target=\"_SomeCoolNameHere\", then the web app should modify the links to have this target *only* when running in UA1.  This is to avoid other user agents would interpret this as a name and replacing the contents of that window as links are clicked.  Right?","msgtype":"m.text"},"ts":1229551140000,"senderName":"dave_levin","senderId":"dave_levin@irc"},
{"content":{"body":"I have read that FONT is more powerful than CSS with respect to size.","msgtype":"m.text"},"ts":1229551380000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"appears to have made html5lib about 10% faster, but it's still spending about 10% of its time computing line numbers :-(","msgtype":"m.emote"},"ts":1229551440000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: sod","msgtype":"m.text"},"ts":1229551740000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Philip`: OK, fixed","msgtype":"m.text"},"ts":1229551860000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"\"some_string == None\" is surprisingly expensive compared to \"some_string is None\"","msgtype":"m.text"},"ts":1229552220000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"dave_levin: i would not recommend minting a new value","msgtype":"m.text"},"ts":1229552280000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Philip`: what's the diff between == and is?","msgtype":"m.text"},"ts":1229552281000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"dave_levin: i would recommend supporting target=\"\" as is, but saying that any links that would normally open a new browsing context should instead open a browser window","msgtype":"m.text"},"ts":1229552282000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"http://www.google.com/search?q=python+%3D%3D+is","msgtype":"m.text"},"ts":1229552460000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Hmph, stupid search engine :-(","msgtype":"m.text"},"ts":1229552461000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I assume the difference is that == does type coercion in some cases, and 'is' doesn't","msgtype":"m.text"},"ts":1229552462000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"HTML5 can roughly describe some semantics but you cannot encode a semantic network in HTML.","msgtype":"m.text"},"ts":1229553780000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"HTML can say <span class=\"Person\" >John</span >, but it cannot encode that John likes Mary.","msgtype":"m.text"},"ts":1229553840000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"And John can dislike Mary \"on the fly\".","msgtype":"m.text"},"ts":1229553900000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"<span>John likes Mary</span> - that's encoding the semantics in HTML","msgtype":"m.text"},"ts":1229554020000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"It is no better than \"John likes Mary\", i.e. no encoding.","msgtype":"m.text"},"ts":1229554080000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"If Siemens is a name of a company, the browser can offer to look it up on Yellow Pages.","msgtype":"m.text"},"ts":1229554260000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"If Siemens is a name of a person, the browser can offer to find his blog/avatar/whatever.","msgtype":"m.text"},"ts":1229554320000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"doubts browsers will ever implement such a thing","msgtype":"m.emote"},"ts":1229554321000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"If Siemens is a foreign word, the browser can offer to translate it.","msgtype":"m.text"},"ts":1229554322000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"or if they do, they'll do it like IE8 does","msgtype":"m.text"},"ts":1229554380000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and just have the user select the text","msgtype":"m.text"},"ts":1229554381000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Microsoft Word (which is not a browser) has been doing that for some time now.","msgtype":"m.text"},"ts":1229554382000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"It is called \"intelligent tags\" in MSspeak.","msgtype":"m.text"},"ts":1229554383000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"notes OS X (and through it all browsers on OS X) support right click -> search with google","msgtype":"m.emote"},"ts":1229554440000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Of course, but a specific search is sometimes better than a general search.","msgtype":"m.text"},"ts":1229554500000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"notes that Opera does too","msgtype":"m.emote"},"ts":1229554501000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"yecril71: The question is where do you search?","msgtype":"m.text"},"ts":1229554502000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(Also Opera provides a \"search with\" menu so you can select specialist search engines)","msgtype":"m.text"},"ts":1229554503000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Where to search depends on what to search for.","msgtype":"m.text"},"ts":1229554560000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"And that is semantic information.","msgtype":"m.text"},"ts":1229554561000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"If you're searching for a person, where do you search for them?","msgtype":"m.text"},"ts":1229554562000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"E.g. in Windows Live registry.","msgtype":"m.text"},"ts":1229554620000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"(depends what I need to do).","msgtype":"m.text"},"ts":1229554621000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"Or in Wikipedia.","msgtype":"m.text"},"ts":1229554622000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"The problem is there are so many places you could search","msgtype":"m.text"},"ts":1229554623000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"People have habits and places, the browser can learn about them.","msgtype":"m.text"},"ts":1229554680000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"If I do not use Skype, and am unwilling to, searching the Skype registry is useless for me.","msgtype":"m.text"},"ts":1229554740000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"But perhaps not for you.","msgtype":"m.text"},"ts":1229554741000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"But that is too much detail; I wanted to say that it would be useless to search a registry for people when a translation is needed.","msgtype":"m.text"},"ts":1229554800000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"And vice versa.","msgtype":"m.text"},"ts":1229554801000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"I think the other main issue is complexity inevitably adds cost, and all programs should run in zero time ideally","msgtype":"m.text"},"ts":1229554860000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Microsoft definitely does not go that way.","msgtype":"m.text"},"ts":1229554861000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"gsnedders: It's not true that all programs should run in zero time ideally","msgtype":"m.text"},"ts":1229554920000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: What shouldn't>","msgtype":"m.text"},"ts":1229554921000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: e.g. you might have a stopwatch program","msgtype":"m.text"},"ts":1229554922000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"*?","msgtype":"m.text"},"ts":1229554923000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Philip`: zero CPU time?","msgtype":"m.text"},"ts":1229554924000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"waits for Philip` to find an issue with that too","msgtype":"m.emote"},"ts":1229554980000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: You might have an electric heater emulation program, which uses as much CPU time as possible in order to heat your room in the middle of winter when your central heating system has broken down","msgtype":"m.text"},"ts":1229554981000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"notes he did once use a Power Mac G5 for exactly that use-case","msgtype":"m.emote"},"ts":1229555040000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"thinks he has such a program running on his machine","msgtype":"m.emote"},"ts":1229555041000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"The only problem was it used CPU time making it slower for me to do what I wanted to do :(","msgtype":"m.text"},"ts":1229555042000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"recalls it is called GIMPS","msgtype":"m.emote"},"ts":1229555043000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"gsnedders: Also there are games, where you have 1/60 seconds of CPU time that you might as well use as much as possible to get the best possible output","msgtype":"m.text"},"ts":1229555100000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"gsnedders: That's what \"nice\" is for :-)","msgtype":"m.text"},"ts":1229555101000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: nice has it's limitations :)","msgtype":"m.text"},"ts":1229555102000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Philip`: It was still slightly slower :P","msgtype":"m.text"},"ts":1229555103000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"s/'//","msgtype":"m.text"},"ts":1229555104000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"is half asleep","msgtype":"m.emote"},"ts":1229555105000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Don't expect me to get stupid English right.","msgtype":"m.text"},"ts":1229555160000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Apostrophe is possessive! \"It's\" therefore should be possessive!","msgtype":"m.text"},"ts":1229555161000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"And so should \"him's\" and \"me's\"?","msgtype":"m.text"},"ts":1229555220000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Yes.","msgtype":"m.text"},"ts":1229555221000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"and \"you's\"","msgtype":"m.text"},"ts":1229555222000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Natural languages are stupid.","msgtype":"m.text"},"ts":1229555280000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"and \"us's\"","msgtype":"m.text"},"ts":1229555281000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"What about dï¿½ya?","msgtype":"m.text"},"ts":1229555282000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"d'ya's?","msgtype":"m.text"},"ts":1229555283000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Natural languages have pronouns, which are very useful, and which most programming languages (except Perl) seem to lack :-)","msgtype":"m.text"},"ts":1229555284000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"And except AppleScript","msgtype":"m.text"},"ts":1229555285000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"(and Visual Basic has ME)","msgtype":"m.text"},"ts":1229555340000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"(and Smalltalk has yourself)","msgtype":"m.text"},"ts":1229555400000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"Ergo, AS + VBS + Smalltalk = full grammar :-)","msgtype":"m.text"},"ts":1229555401000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"Perl has pronouncs?","msgtype":"m.text"},"ts":1229555580000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"my and our","msgtype":"m.text"},"ts":1229555581000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Only typographers would say that B is not semantic.","msgtype":"m.text"},"ts":1229555582000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"takkaria: It has $_ which effectively means \"it\"","msgtype":"m.text"},"ts":1229555583000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"true","msgtype":"m.text"},"ts":1229555640000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"(since it's a way to refer to values without assigning a name to them)","msgtype":"m.text"},"ts":1229555641000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Bold has some meaning in real life too.","msgtype":"m.text"},"ts":1229555642000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"actually are \"my\" and \"our\" considered pronouns?  i guess not.  what part of speech are they?","msgtype":"m.text"},"ts":1229555643000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"javascript has \"this\", but no \"that\"","msgtype":"m.text"},"ts":1229555644000,"senderName":"blooberry","senderId":"blooberry@irc"},
{"content":{"body":"heycam: Even if they were pronouns in English, I wouldn't call them pronouns in Perl, since there's nothing pronounish about them except the interpretation of their names in English :-)","msgtype":"m.text"},"ts":1229555760000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"yes you're right","msgtype":"m.text"},"ts":1229555761000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"uses arguments called 'that' quite often in C++ and JS","msgtype":"m.emote"},"ts":1229555762000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"So does /ME","msgtype":"m.text"},"ts":1229555820000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"ewww","msgtype":"m.text"},"ts":1229555821000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"like Integer::add(Integer that) { this.n += that.n; } and so on","msgtype":"m.text"},"ts":1229555822000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"confusing.","msgtype":"m.text"},"ts":1229555823000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Uh, this->n or whatever","msgtype":"m.text"},"ts":1229555824000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"how about \"somethingElse\"?","msgtype":"m.text"},"ts":1229555825000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"thinks it is impossible to /ME in Irish","msgtype":"m.emote"},"ts":1229555826000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"i think i usually use \"other\" for those kinds of arguments","msgtype":"m.text"},"ts":1229555827000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"IRC is English-centric","msgtype":"m.text"},"ts":1229555880000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"Integer::add(Integer that, Integer tother) { this->n += that.n + tother.n; }","msgtype":"m.text"},"ts":1229555881000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"yecril71: Depending on your client you may be able to map another command to /me","msgtype":"m.text"},"ts":1229555882000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"wonders if the command should be /one","msgtype":"m.emote"},"ts":1229555883000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"\"We're one/But we're not the same\"","msgtype":"m.text"},"ts":1229555940000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"But I still cannot say","msgtype":"m.text"},"ts":1229555941000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"Ta /ME go maith","msgtype":"m.text"},"ts":1229555942000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"in /ME mode","msgtype":"m.text"},"ts":1229555943000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"throws NotImplemented exception on the Irish","msgtype":"m.emote"},"ts":1229555944000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"heads off to bed","msgtype":"m.emote"},"ts":1229556000000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"For the, uh, third time to do.","msgtype":"m.text"},"ts":1229556001000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"*today","msgtype":"m.text"},"ts":1229556002000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"OutOfPotatoesException","msgtype":"m.text"},"ts":1229556003000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Oh, \"x is y\" seems to do identity comparison rather than equality comparison","msgtype":"m.text"},"ts":1229556240000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(which seems fine when y is None, because there's only one None object)","msgtype":"m.text"},"ts":1229556300000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(but doesn't work in general if y is a string)","msgtype":"m.text"},"ts":1229556301000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Except if strings are interned.","msgtype":"m.text"},"ts":1229556360000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"In general, they aren't","msgtype":"m.text"},"ts":1229556361000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"in Lua, == is always identity, so it's always uberfast","msgtype":"m.text"},"ts":1229556362000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"works nicely when all strings are interned","msgtype":"m.text"},"ts":1229556363000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"But then you have to pay the cost of interning all your strings","msgtype":"m.text"},"ts":1229556420000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Lua does it very fast","msgtype":"m.text"},"ts":1229556480000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"I would say it would give positive ROI for well-written code.","msgtype":"m.text"},"ts":1229556481000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"has only ever used Lua for writing a build script","msgtype":"m.emote"},"ts":1229556540000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"It seems like a potentially interesting language","msgtype":"m.text"},"ts":1229556541000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"lua's syntax baffles me","msgtype":"m.text"},"ts":1229556600000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's a lovely language to work in, though it does lack a bit in utiity languages","msgtype":"m.text"},"ts":1229556601000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"(it's the language for ion's configuration scripts)","msgtype":"m.text"},"ts":1229556602000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"really?  I always thought it was pretty simple","msgtype":"m.text"},"ts":1229556603000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"i may have just not spent enough time learning it, or maybe ion does weird things to it","msgtype":"m.text"},"ts":1229556660000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but yeah","msgtype":"m.text"},"ts":1229556661000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it wasn't intuitive at all","msgtype":"m.text"},"ts":1229556662000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I enjoy writing in Lua when I can.  I wrote a fairly large project in it once, and have used it perephially in a bunch of things","msgtype":"m.text"},"ts":1229556780000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"looks at his [actually not really \"his\", someone else wrote most of it] build script, and sees that it's 1268 lines, which seems like quite a bit","msgtype":"m.emote"},"ts":1229556900000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Media-specific markup is good when it addresses media-specific properties.","msgtype":"m.text"},"ts":1229557020000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"But then, since they are media-specific by definition, they do not need the media-specific tag at all.","msgtype":"m.text"},"ts":1229557021000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"Calogero wanted to say that he has no idea how to map B et al. to real-world semantic notions.","msgtype":"m.text"},"ts":1229557380000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"wonders why Hotmail's compose feature is broken in EVERY UA.. Fx3, Safari, IE8, Opera 10, Opera 9 - makes it sort of hard to figure out what is supposed to happen to enable the editor..","msgtype":"m.emote"},"ts":1229557500000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"And that he would like HTML to be more precise, and that they always bear the same meaning.","msgtype":"m.text"},"ts":1229557501000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"I think link[sizes] should really use &times;","msgtype":"m.text"},"ts":1229557620000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"You are encouraging bad practice here.","msgtype":"m.text"},"ts":1229557621000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"Cameronï¿½s algorithm leaves the case for a missing key unspecified.","msgtype":"m.text"},"ts":1229557920000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"yecril71, in web idl?  or in the suggested text in the mail?","msgtype":"m.text"},"ts":1229557921000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"In the text.","msgtype":"m.text"},"ts":1229557980000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"How is all this different from what a generic Object does?","msgtype":"m.text"},"ts":1229557981000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"how is it unspecified?","msgtype":"m.text"},"ts":1229557982000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"What happens if the key is absent?","msgtype":"m.text"},"ts":1229558040000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"You say \"","msgtype":"m.text"},"ts":1229558041000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"the entry whose name component\"","msgtype":"m.text"},"ts":1229558042000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"as if it always existed","msgtype":"m.text"},"ts":1229558043000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"that behaviour for retrieving a named property would only get run if there exists a named property on the object already","msgtype":"m.text"},"ts":1229558044000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"if you do dataset.abc, and abc wasn't the name of one of these named property (because it's defined at a given time what those properties are), then it's just a regular property lookup that will return undeifned","msgtype":"m.text"},"ts":1229558100000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"*undefined","msgtype":"m.text"},"ts":1229558101000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Got it.  How is it different from what Object has?","msgtype":"m.text"},"ts":1229558160000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"it's different because it invokes particular behaviour when named properties are get/set/etc., which for dataset results in attributes being get/set/removed","msgtype":"m.text"},"ts":1229558220000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"and for dataset, when setting the property the value is converted to a string","msgtype":"m.text"},"ts":1229558221000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"I see, thanks.","msgtype":"m.text"},"ts":1229558222000,"senderName":"yecril71","senderId":"yecril71@irc"}
]