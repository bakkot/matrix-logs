[
{"content":{"body":"are sandboxed iframes included in a \"unit of related similar-origin browsing contexts\"? (seems like they are)","msgtype":"m.text"},"ts":1402358824000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(tokens like \"unit of related similar-origin browsing contexts\" remind me of my Netware days)","msgtype":"m.text"},"ts":1402358844000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"depends on their origin","msgtype":"m.text"},"ts":1402358889000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh, yeah, missed the distinction between that and \"directly reachable browsing contexts\"","msgtype":"m.text"},"ts":1402358906000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"which is probably what I was thinking more of","msgtype":"m.text"},"ts":1402358918000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(FWIW \"that, through appropriate manipulation of the document.domain attribute, could be made to be the same as other members of the group, but could not be made the same as members of any other group\" seems a bit more spec-by-describing-the-result than most of HTML)","msgtype":"m.text"},"ts":1402359034000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1402359052000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"spec-by-describing-the-result is the better way to write a spec, if you can do so in a way that describes all the cases","msgtype":"m.text"},"ts":1402359066000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yup, that's what using grammars do, too. (And why using grammars isn't always the right choice for parsing.)","msgtype":"m.text"},"ts":1402359101000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"often, though, especially with things like processing inputs, parsing, etc, describing steps results in much less prose than describing results","msgtype":"m.text"},"ts":1402359102000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"damnit, i spent all afternoon tracing this one bug, and it's all because i assumed \"continue\" would skip the loop condition and just jump back to the top","msgtype":"m.text"},"ts":1402359322000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's easily the line in the spec I've had to squint the hardest at to figure out what it's saying to do","msgtype":"m.text"},"ts":1402359327000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"yeah... the advantage of writing it that way is that the spec writer doesn't have to do the work :-)","msgtype":"m.text"},"ts":1402359365000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: On a for loop? Yeah, it skips to the top, but then it processes as normal.","msgtype":"m.text"},"ts":1402359368000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: repeat...until loop, but yeah, same deal","msgtype":"m.text"},"ts":1402359378000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"continue [to the next iteration]\"","msgtype":"m.text"},"ts":1402359383000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ah.","msgtype":"m.text"},"ts":1402359385000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"do/while loops are just while loops that dont' test their first iteration.","msgtype":"m.text"},"ts":1402359399000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i knew this, i just happened to make two changes at the same time that interacted and didn't think about it","msgtype":"m.text"},"ts":1402359402000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"repeat until? ... pascal? heh","msgtype":"m.text"},"ts":1402359407000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i miss perl's loop control","msgtype":"m.text"},"ts":1402359433000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"perl has awesome loop control","msgtype":"m.text"},"ts":1402359440000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"next, last, redo, continue, loop labels...","msgtype":"m.text"},"ts":1402359455000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"usually if i'm getting annoyed at things like needing to break out multiple levels, i just break stuff into a nested function","msgtype":"m.text"},"ts":1402359465000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"beyond that the standard mechanics usually work well for me","msgtype":"m.text"},"ts":1402359487000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(which I guess is just continue and break)","msgtype":"m.text"},"ts":1402359501000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"if your loop body is one line, breaking it into a function makes it way harder to read","msgtype":"m.text"},"ts":1402359512000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if my loop body is one line, there aren't multiple levels to break out of","msgtype":"m.text"},"ts":1402359536000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"inner loop body","msgtype":"m.text"},"ts":1402359563000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or if you have a complicated nesting of multiple loops","msgtype":"m.text"},"ts":1402359573000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i mean taking eg. for(x=0; x < width; ++x) { for(y=0; y < height; ++y) { break 2; } }, making the whole thing a function and just using return","msgtype":"m.text"},"ts":1402359598000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"the point being that if your \"code\" is brief compared to your loop logic, splitting into a function ends up being harder to read than perl-style control","msgtype":"m.text"},"ts":1402359609000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"zewt: how does turning it into a non-local return help?","msgtype":"m.text"},"ts":1402359679000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"function() { for(x=0; x < width; ++x) { for(y=0; y < height; ++y) { return; } } }","msgtype":"m.text"},"ts":1402359705000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1402359716000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"exits the whole loop","msgtype":"m.text"},"ts":1402359716000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"well, that's still no goto","msgtype":"m.text"},"ts":1402359724000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"make it three levels of loops where the inner lever has to break out of the inner two but not the third","msgtype":"m.text"},"ts":1402359731000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or whatever they have in Pascal","msgtype":"m.text"},"ts":1402359734000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"to see what i mean about functions being unclear compared to inline loop control","msgtype":"m.text"},"ts":1402359741000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's a workaround and things like break statements that supply a number of levels to break might be a bit better (i assume perl has something like that), but that's the only loop construct i tend to need a workaround like that for","msgtype":"m.text"},"ts":1402359752000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"pascal's as bad as C as far as loop control goes","msgtype":"m.text"},"ts":1402359765000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"perl has labeled loops","msgtype":"m.text"},"ts":1402359776000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so you say e.g.:","msgtype":"m.text"},"ts":1402359779000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hmm, okay, perl","msgtype":"m.text"},"ts":1402359782000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"for(z=0; z < 10; ++z) ( (function() { for(x=0; x < width; ++x) { for(y=0; y < height; ++y) { return; } } })(); }","msgtype":"m.text"},"ts":1402359789000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"file: while (...) { ...; line: while (...) { ...; next file; } }","msgtype":"m.text"},"ts":1402359806000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"looks shitty on one line, of course, and it's still a workaround, but it's not terrible","msgtype":"m.text"},"ts":1402359806000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"or next line, or redo line, or last file, or whatever","msgtype":"m.text"},"ts":1402359818000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"for all the various combinations you might want","msgtype":"m.text"},"ts":1402359829000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(this is one of the few things about perl that's actually a net good, even to readability, imho :-) )","msgtype":"m.text"},"ts":1402359849000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so is JS in the same boat as Python here?","msgtype":"m.text"},"ts":1402359882000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"js is like c and company here, i think, right?","msgtype":"m.text"},"ts":1402359917000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"dunno what python's loop control looks like","msgtype":"m.text"},"ts":1402359926000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"You can break a loop using labels in JS, but you can't continue one from a label.","msgtype":"m.text"},"ts":1402359935000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oh, cool, ok","msgtype":"m.text"},"ts":1402359953000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so, in between","msgtype":"m.text"},"ts":1402359961000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Python doesn't have labels at all","msgtype":"m.text"},"ts":1402360183000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Yeah, Python's annoying in that.  They say \"don't get yourself into situations where you have to break/continue from multiple loops up\", but sometimes it happens and it's the clearest way to write!","msgtype":"m.text"},"ts":1402360659000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And having to use flags to simulate the behavior is just dirty.","msgtype":"m.text"},"ts":1402360675000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i usually switch to a nested function before using a flag","msgtype":"m.text"},"ts":1402360701000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"TabAtkins: I know!","msgtype":"m.text"},"ts":1402360964000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"my current annoyed-at language is C#, where someone who thinks they know better than me tells me how to write code","msgtype":"m.text"},"ts":1402361028000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"re: prohibiting switch fall-through, because some idiot read a \"considered harmful\" rant and decided to make my decisions for me","msgtype":"m.text"},"ts":1402361069000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Yeah, the case against switch fall-through is against *default* fall-through.","msgtype":"m.text"},"ts":1402361110000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah, there should be a \"fallthrough\" statement or something","msgtype":"m.text"},"ts":1402361129000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Just changing the default and having some way to indicate that you should fall through is obviously the right way.","msgtype":"m.text"},"ts":1402361133000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"there is probably only one reason Python does not suffer from the same thing though","msgtype":"m.text"},"ts":1402361154000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"contests the obviousness of that","msgtype":"m.emote"},"ts":1402361157000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"well, python ... doesn't have switch","msgtype":"m.text"},"ts":1402361179000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"And, for that matter, the truth of it.","msgtype":"m.text"},"ts":1402361183000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"zewt: yes, that's the reason","msgtype":"m.text"},"ts":1402361190000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"zewt: Yes. which is also terrible.","msgtype":"m.text"},"ts":1402361200000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ChrisMorgan: I'll see your contestation, and raise you all the times I fell through accidentally because I forgot to say \"break\", and thus had a bug.","msgtype":"m.text"},"ts":1402361222000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I *rarely* want to fall-through on a switch.  It's common per-switch, but rare per-case, I think.","msgtype":"m.text"},"ts":1402361251000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I’m with C♯ on this—forbidding fallthrough altogether is entirely reasonable.","msgtype":"m.text"},"ts":1402361253000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"ChrisMorgan: you think it should require explicit goto insteaa?","msgtype":"m.text"},"ts":1402361260000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"That just means duplication.","msgtype":"m.text"},"ts":1402361263000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"SamB: not that either.","msgtype":"m.text"},"ts":1402361281000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"if i'm trying to do a switch fallthrough, it's for a reason; the language needs to get out of my way unless there's some underlying structural reason why the language can't do it","msgtype":"m.text"},"ts":1402361320000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"TabAtkins: normally there is not actually any basic need for fallthrough in the first place.","msgtype":"m.text"},"ts":1402361326000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"well, it isn't all THAT much more likely than wanting to goto somewhere else, I guess ...","msgtype":"m.text"},"ts":1402361365000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"zewt: in Rust, or for that matter *any* language with proper pattern matching, fallthrough in `match` branches would make no sense whatsoever.","msgtype":"m.text"},"ts":1402361367000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"has never felt the slightest pang of remorse or yearning for fallthrough in Rust","msgtype":"m.emote"},"ts":1402361401000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"ChrisMorgan: I hope they have guards though","msgtype":"m.text"},"ts":1402361404000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: to be sure, to be sure.","msgtype":"m.text"},"ts":1402361415000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"All armed to the teeth! ;-)","msgtype":"m.text"},"ts":1402361423000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"I mean, conditions for the case matching at all","msgtype":"m.text"},"ts":1402361444000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"To be sure, to be sure.","msgtype":"m.text"},"ts":1402361465000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"ChrisMorgan: I see your attestation and raise you all the times in the CSS Syntax spec where I'm explicitly doing fall-through in my English-language switch statements. ^_^","msgtype":"m.text"},"ts":1402361465000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I’m not familiar with your specific examples, but most of the ones that I imagine to be of the same nature are “if this is the case, follow these steps”, which does not need to be modelled as fall-through, though that is often one way of doing it (and not the most general, I might add).","msgtype":"m.text"},"ts":1402361566000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"But hey—Swift uses pattern matching, so it *must* be right, huh?","msgtype":"m.text"},"ts":1402361580000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"ChrisMorgan: No clue what Swift does, so shrug.","msgtype":"m.text"},"ts":1402361631000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'm just talking about switch statements, which are indeed different from pattern matching.","msgtype":"m.text"},"ts":1402361657000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Back on the topic of labels, the funny thing is that Rust supports labels on its `for` and `loop` loops, but not its `while` loops… a strange omission which I had fun with, https://github.com/mozilla/rust/issues/12643.","msgtype":"m.text"},"ts":1402361672000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"TabAtkins: I can’t speak much of Swift either, but at the theoretical level, switch statements, assuming no fall-through, provide a strict subset of the functionality of pattern matching.","msgtype":"m.text"},"ts":1402361745000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"Anyway, this is probably all moderately off-topic for #whatwg!","msgtype":"m.text"},"ts":1402361766000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"It's the \"subset\" part that makes it different.  If you're not extracting anything, just doing abbreviated testing (like normal switches do), then fallbacks make more sense, as a disjunction of cases.","msgtype":"m.text"},"ts":1402361792000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Plus the occasional fun bit where you do some preliminary work in some cases and then fallthrough to the base-case to do more work.","msgtype":"m.text"},"ts":1402361808000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":")","msgtype":"m.text"},"ts":1402361810000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(But that only works if you've only got a single type of prelim work to do, or if your multiple types are chained. If you have multiple parallel types of prelim work to do, you can't model it with fall-through.)","msgtype":"m.text"},"ts":1402361845000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"`switch foo { bar: code1; baz: code2; break; default: code3; }` => `match foo { bar | baz => { if foo == bar { code1 } code2 }, _ => code3 }`. These should have the same performance characteristics when compiled.","msgtype":"m.text"},"ts":1402361968000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"Is it appropriate to use [SameObject] on an attribute which occasionally swaps out its underlying value?","msgtype":"m.text"},"ts":1402362739000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But otherwise always returns the same object?","msgtype":"m.text"},"ts":1402362743000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: Do I need to use [Exposed] on events too?  Or just normal interfaces?","msgtype":"m.text"},"ts":1402363383000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: Did you mean to make the :target arrow also slightly tilted?","msgtype":"m.text"},"ts":1402363987000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: for what it’s worth, I used a lot of pattern matching in rust-cssparser and never missed fall-through","msgtype":"m.text"},"ts":1402369471000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"(but I do miss pattern matching a lot when going back to Python)","msgtype":"m.text"},"ts":1402369494000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"TabAtkins: vaguely","msgtype":"m.text"},"ts":1402369575000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ok i've tried to post this to es-discuss twice now","msgtype":"m.text"},"ts":1402370173000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and i get nothing back and it doesn't go to the list","msgtype":"m.text"},"ts":1402370182000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'm still subscribed...","msgtype":"m.text"},"ts":1402370189000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"jorendorff, If you are around, just posted https://bugs.ecmascript.org/show_bug.cgi?id=2981","msgtype":"m.text"},"ts":1402372342000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"TabAtkins: events are normal interfaces","msgtype":"m.text"},"ts":1402377582000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I mean you want to store these objects some storage API","msgtype":"m.text"},"ts":1402377609000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: kk","msgtype":"m.text"},"ts":1402377732000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: yeah, you should generally just read them to the end and store the serialized version, or alternately stream them into a store","msgtype":"m.text"},"ts":1402380836000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hixie: another infographic I'd be interested in is one explaining the relationship of the higher-level object model; how browsing contexts relate to globals, relate to documents, relate to cross-origin Location objects, relate to settings objects, etc.","msgtype":"m.text"},"ts":1402380839000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that would be one hell of an inforgraphic","msgtype":"m.text"},"ts":1402380856000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic: my problem is that a developer might want to read data and store the Response","msgtype":"m.text"},"ts":1402380872000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: currently that's not feasible","msgtype":"m.text"},"ts":1402380877000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: yeah :(","msgtype":"m.text"},"ts":1402380886000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: I still find it hard to follow at times what of the various objects I should look at from script and what I can reach from there","msgtype":"m.text"},"ts":1402380915000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: http://junkyard.damowmow.com/542","msgtype":"m.text"},"ts":1402381046000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: Ah yeah makes sense. Not sure how it would work generally for streams, since e.g. their content can be nondeterministic. (a Response body stream could be the product of the particular time on the server, or of a particular interaction between client and server, for example.) But maybe in this particular case we could define that it reads them to end","msgtype":"m.text"},"ts":1402381054000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"at the time of storage, and then when it gets revived from cache it becomes a sort of \"constant stream.\"","msgtype":"m.text"},"ts":1402381054000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"HTH","msgtype":"m.text"},"ts":1402381054000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: have a good night :p","msgtype":"m.text"},"ts":1402381081000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":-P","msgtype":"m.text"},"ts":1402381086000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic: okay, and if you wanted to read it to inspect it and store the object you'd have to tee it?","msgtype":"m.text"},"ts":1402381142000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: in general yes, if you want to read without consuming you need to tee","msgtype":"m.text"},"ts":1402381209000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: how do you distinguish between an empty stream and a depleted stream?","msgtype":"m.text"},"ts":1402381210000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: good question, might not get this right off the top of my head, but I think: depleted will be \"closed\" already; empty will start \"open\" until you try to wait for more data to come in, at which point it becomes \"closed\"","msgtype":"m.text"},"ts":1402381315000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: ah okay, closed vs open is nice terminology","msgtype":"m.text"},"ts":1402381344000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I should probably update my abstract stream description in Encoding to use that","msgtype":"m.text"},"ts":1402381359000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And I should probably update the \"model\" section to have more useful terminology of the sort. Will do at work tomorrow! :)","msgtype":"m.text"},"ts":1402381406000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yay model","msgtype":"m.text"},"ts":1402381513000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Hi","msgtype":"m.text"},"ts":1402381549000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"Yeah we need a model if we want to do this right. Rewrite all the things in terms of that and then slowly open them up to APIs","msgtype":"m.text"},"ts":1402381550000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"krit: morning","msgtype":"m.text"},"ts":1402381555000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Checked and would be available next week. Would you be able to look at SVG sec and have time?","msgtype":"m.text"},"ts":1402381596000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"krit: yes, let's do it","msgtype":"m.text"},"ts":1402381651000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: cool. bringing kids to school usually. So am available from 9AM to whatever","msgtype":"m.text"},"ts":1402381686000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"krit: same here, this is really early for me","msgtype":"m.text"},"ts":1402381713000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: bringing kids to school? :)","msgtype":"m.text"},"ts":1402381732000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"huh","msgtype":"m.text"},"ts":1402381738000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"krit: I was about to correct that bit","msgtype":"m.text"},"ts":1402381742000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"in select\" mode, <select> doesn't check if a select is in scope","msgtype":"m.text"},"ts":1402381746000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i think, per spec, <select>.innerHTML = '<select>' should crash","msgtype":"m.text"},"ts":1402381761000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"am i crazy?","msgtype":"m.text"},"ts":1402381767000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: the note \"It just gets treated like an end tag.\" does make it seem like there's a bug there","msgtype":"m.text"},"ts":1402381860000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: although \"Pop elements from the stack of open elements until a select element has been popped from the stack.\" probably does not cause a crash","msgtype":"m.text"},"ts":1402381905000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"you pop all the elements, then try to pop the stack when it's empty","msgtype":"m.text"},"ts":1402381927000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it'll either hang or crash or something bad will happen","msgtype":"m.text"},"ts":1402381945000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"fixes the spec","msgtype":"m.emote"},"ts":1402381956000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: wouldn't you null-check the stack?","msgtype":"m.text"},"ts":1402382004000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and do what?","msgtype":"m.text"},"ts":1402382010000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i mean normally you shouldn't need to","msgtype":"m.text"},"ts":1402382026000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the parser isn't going to pop all the nodes off","msgtype":"m.text"},"ts":1402382032000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Not sure, but e.g. in JavaScript [].pop() doesn't kill you","msgtype":"m.text"},"ts":1402382142000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well sure, in _javascript_","msgtype":"m.text"},"ts":1402382156000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you can typo your variables names and js isn't going to bat an eye","msgtype":"m.text"},"ts":1402382175000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I love that you can write <select></select> with one character less though","msgtype":"m.text"},"ts":1402382184000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Didn't know that","msgtype":"m.text"},"ts":1402382188000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: TabAtkins: IMO \"await a stable state\" is more confusing than \"queue a microtask,\" especially when appearing nearby \"queue a task\"...","msgtype":"m.text"},"ts":1402382402000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"await a stable state makes the spec so much easier to read","msgtype":"m.text"},"ts":1402382462000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"disagree","msgtype":"m.text"},"ts":1402382554000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it describes the algorithm as one straightforward algorithm, with the complicated timing details present but not in the way","msgtype":"m.text"},"ts":1402382603000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I just did what Hixie told me to do.","msgtype":"m.text"},"ts":1402382625000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: why didn't you group the <dt>s?","msgtype":"m.text"},"ts":1402382653000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1402382659000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: with http://html5.org/r/8667","msgtype":"m.text"},"ts":1402382665000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"context?","msgtype":"m.text"},"ts":1402382665000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"they're not identical","msgtype":"m.text"},"ts":1402382670000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ah, parse error","msgtype":"m.text"},"ts":1402382701000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"three clauses, three slightly different requirements","msgtype":"m.text"},"ts":1402382732000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ok i can now parse html5lib-tests/tree-construction/tests7.dat tests 1..14","msgtype":"m.text"},"ts":1402382752000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"time for bed","msgtype":"m.text"},"ts":1402382756000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"nn","msgtype":"m.text"},"ts":1402382757000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"So my bank turned ü into ³","msgtype":"m.text"},"ts":1402388895000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Both however have stable positions in single byte encodings","msgtype":"m.text"},"ts":1402389205000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"How about in ebcdic?","msgtype":"m.text"},"ts":1402389238000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: yeah I guess","msgtype":"m.text"},"ts":1402389774000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: can't find a code page where that would be the case","msgtype":"m.text"},"ts":1402389974000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wonders if there's a hack to make annevk rich out of this","msgtype":"m.emote"},"ts":1402391033000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"\"I'd like to withdraw 99ü, please\"","msgtype":"m.text"},"ts":1402391054000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"Why would http://www.techmania.ch/details.aspx?hersteller=Dell&produkt=EUCORD_CLOF be CHF 27?!","msgtype":"m.text"},"ts":1402391193000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"darobin: heh","msgtype":"m.text"},"ts":1402391209000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's not even the right cable","msgtype":"m.text"},"ts":1402391333000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: All constructors of Path2D seem to have the old name still: http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-path2d-withdata","msgtype":"m.text"},"ts":1402397965000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"So the inconsistent policies between CORS and UA-defined features is annoying.","msgtype":"m.text"},"ts":1402411568000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Why can we have Last-Event-ID, Ping-To, and Ping-From without preflight if they are done by the UA, but not if they are done by the developer?","msgtype":"m.text"},"ts":1402411604000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"These are the only headers that require some kind of separation between developer set headers, and UA set headers","msgtype":"m.text"},"ts":1402411639000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: did you see Unicode is about to introduce 2800 more code points?","msgtype":"m.text"},"ts":1402415916000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: any insights as to how to best address that?","msgtype":"m.text"},"ts":1402415930000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: you maybe?","msgtype":"m.text"},"ts":1402415944000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: what are the new code points? emoji?","msgtype":"m.text"},"ts":1402416033000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: you have a link to an announcement or hwatever?","msgtype":"m.text"},"ts":1402416049000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: @unicode","msgtype":"m.text"},"ts":1402416057000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1402416061000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: no pointer seems to be included","msgtype":"m.text"},"ts":1402416069000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1402416114000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: don't UAs already handle most of these?","msgtype":"m.text"},"ts":1402416144000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I guess I should have said new assigned code points or whatever the term is","msgtype":"m.text"},"ts":1402416168000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"Duployan shorthand & letters used in Teuthonista & other transcriptional systems\"","msgtype":"m.text"},"ts":1402416296000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"http://www.unicode.org/charts/PDF/Unicode-7.0/ has details it seems","msgtype":"m.text"},"ts":1402416297000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"looks","msgtype":"m.emote"},"ts":1402416303000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"It now includes Linear A","msgtype":"m.text"},"ts":1402416310000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Lars Thomas can be proud","msgtype":"m.text"},"ts":1402416326000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Linear A, Linear B and Carakan? Awesome","msgtype":"m.text"},"ts":1402416431000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Just Linear A","msgtype":"m.text"},"ts":1402416439000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Now I wonder about Futhark","msgtype":"m.text"},"ts":1402416450000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Linear B and Carakan are already in Unicode","msgtype":"m.text"},"ts":1402416559000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I think","msgtype":"m.text"},"ts":1402416562000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Futhark is too","msgtype":"m.text"},"ts":1402416817000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So we have a full house?","msgtype":"m.text"},"ts":1402416954000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I guess we can go shopping","msgtype":"m.text"},"ts":1402417029000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: why would we need to address anything?","msgtype":"m.text"},"ts":1402418358000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I want to do away with author headers vs headers as it doesn't make much sense if you actually expose the request as an object","msgtype":"m.text"},"ts":1402418410000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: and at that point the only problematic header is Last-Event-ID (and maybe Ping-To and Ping-From)","msgtype":"m.text"},"ts":1402418431000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: as in headers that a spec has set that don't cause a preflight whereas they would if someone set them in some other context","msgtype":"m.text"},"ts":1402418473000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: this becomes icky at the point where you'd add the ability to add headers to an EventSource fetch","msgtype":"m.text"},"ts":1402418552000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is confused","msgtype":"m.emote"},"ts":1402418652000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"how is unicode characters related to http headers","msgtype":"m.text"},"ts":1402418657000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i think i missed something","msgtype":"m.text"},"ts":1402418666000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, only temporally in this channel","msgtype":"m.text"},"ts":1402418705000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"What you're missing is a <hr> between the conversations","msgtype":"m.text"},"ts":1402418729000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hixie: skip the line addressed at hsivonen, it's before that","msgtype":"m.text"},"ts":1402419136000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah, i see","msgtype":"m.text"},"ts":1402419190000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i don't know why they're the only ones. Seems like their situation would be pretty common.","msgtype":"m.text"},"ts":1402419201000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's attributes that are harmless when the server sets them, but not harmless when the author sets them.","msgtype":"m.text"},"ts":1402419218000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1402419221000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"when the client sets them","msgtype":"m.text"},"ts":1402419224000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"not server","msgtype":"m.text"},"ts":1402419231000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and headers","msgtype":"m.text"},"ts":1402419235000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"not attributes","msgtype":"m.text"},"ts":1402419237000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but they're not so restricted that authors can never set them?","msgtype":"m.text"},"ts":1402419267000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1402419310000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i mean, if the server wants to use them, and is willing to preflight it, who cares","msgtype":"m.text"},"ts":1402419320000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"The problem with these is that they're in the middle. Host is client-only. Last-Event-ID however, when set by the client is preflightless. When set by authors comes with a preflight.","msgtype":"m.text"},"ts":1402419326000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1402419340000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Host is not something that you could opt into allowing the client to send","msgtype":"m.text"},"ts":1402419352000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"And if we want to keep that we would need some kind of flag.","msgtype":"m.text"},"ts":1402419354000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"since the entire secutity system depends on it","msgtype":"m.text"},"ts":1402419358000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"security","msgtype":"m.text"},"ts":1402419361000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"E.g. what if EventSource starts allowing you to set headers?","msgtype":"m.text"},"ts":1402419380000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Maybe I should just assume that it doesn't","msgtype":"m.text"},"ts":1402419389000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i'm neck-deep in the html parser right now, you're not going to get any sympathy from me if you're looking for a way to keep things simple for yourself :-)","msgtype":"m.text"},"ts":1402419391000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I'm trying to keep APIs simple for developers","msgtype":"m.text"},"ts":1402419410000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if EventSource lets you set headers, then what?","msgtype":"m.text"},"ts":1402419426000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"And trying to predict future growth of various APIs and how that would affect the system","msgtype":"m.text"},"ts":1402419428000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i don't see the problem","msgtype":"m.text"},"ts":1402419442000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'm actually really surprised to hear there's only three headers like this","msgtype":"m.text"},"ts":1402419450000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'd have thought there'd be more","msgtype":"m.text"},"ts":1402419457000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"If EventSource lets you set headers the granularity we need is on the level of headers. E.g. a header gets an additional flag about it being set by a spec rather than an author","msgtype":"m.text"},"ts":1402419473000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what spec is this in","msgtype":"m.text"},"ts":1402419495000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i cant' find last-event-id in fetch.spec and xhr.spec","msgtype":"m.text"},"ts":1402419510000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"can't","msgtype":"m.text"},"ts":1402419514000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"It's in your spec","msgtype":"m.text"},"ts":1402419516000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You are creating my problems :-)","msgtype":"m.text"},"ts":1402419528000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i don't see anything to do with cors with last-event-id","msgtype":"m.text"},"ts":1402419547000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"EventSource can do CORS and can include a custom header unlike other headers, Last-Event-ID","msgtype":"m.text"},"ts":1402419576000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"in the html spec","msgtype":"m.text"},"ts":1402419580000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"However, because this header is set by the UA, there's no preflight","msgtype":"m.text"},"ts":1402419590000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"What Fetch sees is just a Request with a header list attached with Last-Event-ID in it","msgtype":"m.text"},"ts":1402419618000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But now it has to know this is UA-set so it won't treat it as not a simple header","msgtype":"m.text"},"ts":1402419638000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(As otherwise it would cause a preflight)","msgtype":"m.text"},"ts":1402419658000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what am i missing?","msgtype":"m.text"},"ts":1402419667000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"er, ignore last line","msgtype":"m.text"},"ts":1402419674000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hasn't this worked for forever?","msgtype":"m.text"},"ts":1402419698000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i don't understand what's new here that this has suddenly come up","msgtype":"m.text"},"ts":1402419712000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yeah kinda, because I separated author headers and headers set by specs","msgtype":"m.text"},"ts":1402419724000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"However, that's a silly model and would create an ugly API","msgtype":"m.text"},"ts":1402419737000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So I'm trying to come up with something better","msgtype":"m.text"},"ts":1402419753000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hi. does anyone know of a way i can smoothly zoom into a page?","msgtype":"m.text"},"ts":1402419773000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"i spent a day wiring up a nice animated scale() transform","msgtype":"m.text"},"ts":1402419839000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"i think thinks went wrong when i tried keeping the center of the page as the zoom target by using requestAnimationFrame to adjust the scrollTop()","msgtype":"m.text"},"ts":1402419869000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"Solutions I see. We add a flag \"API lets devs control headers\". Set by fetch() and XMLHttpRequest, in all other cases we trust the specs to do the right thing","msgtype":"m.text"},"ts":1402419870000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That's 1)","msgtype":"m.text"},"ts":1402419874000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: i don't understand why the api is ugly?","msgtype":"m.text"},"ts":1402419875000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"2) We add these headers to simple headers.","msgtype":"m.text"},"ts":1402419888000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the scrollTop seems to cause my requestAnimationFrame to only trigger every 33ms","msgtype":"m.text"},"ts":1402419890000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"3) We add an additional member to header about whether it's privileged or not","msgtype":"m.text"},"ts":1402419915000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: there's a difference between a header set by the UA, and a header set via an API, right? we already have that in XHR.","msgtype":"m.text"},"ts":1402419916000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and i still have some rather sincere jank. anyways, thanks.","msgtype":"m.text"},"ts":1402419920000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"annevk: e.g. in XHR the UA sets Host, but the author sets X-Foo via the API","msgtype":"m.text"},"ts":1402419943000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I checked, XHR doesn't set any headers itself","msgtype":"m.text"},"ts":1402419943000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: no, the network layer sets those headers","msgtype":"m.text"},"ts":1402419951000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: i.e. Fetch, way after the CORS check","msgtype":"m.text"},"ts":1402419960000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sure but that's your problem at the spec level","msgtype":"m.text"},"ts":1402419985000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the author doesn't care about that","msgtype":"m.text"},"ts":1402419988000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"from the author's perspective, there's UA-set headers, and author-set headers","msgtype":"m.text"},"ts":1402419997000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"this is true in all APIs that let you set headers","msgtype":"m.text"},"ts":1402420010000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"No, it matters as to what's exposed in service workers","msgtype":"m.text"},"ts":1402420012000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"E.g. event.request.headers will not contain Host as that is set by the network layer","msgtype":"m.text"},"ts":1402420031000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that's odd","msgtype":"m.text"},"ts":1402420043000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"It seemed kind of natural to me","msgtype":"m.text"},"ts":1402420057000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but i guess you'd need to exclude some headers for auth","msgtype":"m.text"},"ts":1402420060000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Host is harmless, but others might not be","msgtype":"m.text"},"ts":1402420064000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"However, Host again would not be a problem either way, as authors cannot set it","msgtype":"m.text"},"ts":1402420075000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: if the header is added by something that hasn't seen the request at all yet, it's obviously not going to be there yet, no?","msgtype":"m.text"},"ts":1402420099000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"seems like you'd need a whitelist for what headers to expose","msgtype":"m.text"},"ts":1402420099000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: yeah that is covered too","msgtype":"m.text"},"ts":1402420112000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SamB: i don't understand what you are asking","msgtype":"m.text"},"ts":1402420118000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: is there somewhere i can read to see what service workers see?","msgtype":"m.text"},"ts":1402420135000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: http://fetch.spec.whatwg.org/#fetching","msgtype":"m.text"},"ts":1402420152000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess Host *could* get added at an earlier layer but seeing as it's mostly there because the GET doesn't mention the hostname ...","msgtype":"m.text"},"ts":1402420167000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Hixie: http://fetch.spec.whatwg.org/#concept-http-fetch passes the request into service workers","msgtype":"m.text"},"ts":1402420171000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: in step 8","msgtype":"m.text"},"ts":1402420196000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(what's \"Mixed Content\"?)","msgtype":"m.text"},"ts":1402420220000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: https://w3c.github.io/webappsec/specs/mixedcontent/","msgtype":"m.text"},"ts":1402420231000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Those hooks are WIP","msgtype":"m.text"},"ts":1402420264000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh that kind of mixed content","msgtype":"m.text"},"ts":1402420275000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1402420275000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#request-interface is what the service worker gets?","msgtype":"m.text"},"ts":1402420343000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: http://fetch.spec.whatwg.org/#request is the new idea","msgtype":"m.text"},"ts":1402420374000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"are there polyfills to host fetch on XHR? or to provide XHR on fetch?","msgtype":"m.text"},"ts":1402420434000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"annevk: man, i'm sure glad you're dealing with this and not me","msgtype":"m.text"},"ts":1402420459000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: so the question is basically, which headers to expose there?","msgtype":"m.text"},"ts":1402420470000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or against node's http.createClient or mikeal's request?","msgtype":"m.text"},"ts":1402420475000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"annevk: or are the headers mutable?","msgtype":"m.text"},"ts":1402420478000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: i think it'd be fine to have some headers be immutable in that API. Doesn't make the API surface particularly hard to understand, and it lets you include things like Host and Cache-Control.","msgtype":"m.text"},"ts":1402420521000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: you could even include auth-related headers, and make them unreadable too","msgtype":"m.text"},"ts":1402420540000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: so that headers would be in three modes: mutable, immutable, protected","msgtype":"m.text"},"ts":1402420561000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: yeah there's some of that for response headers","msgtype":"m.text"},"ts":1402420634000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: the main problem I have right now is the one I mentioned earlier","msgtype":"m.text"},"ts":1402420655000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"why does what i described not solve that problem?","msgtype":"m.text"},"ts":1402420669000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Fetch (the spec) takes a request which takes a set of a headers","msgtype":"m.text"},"ts":1402420675000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sure. The spec will need to have per-header metadata.","msgtype":"m.text"},"ts":1402420687000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Those headers can trigger a preflight","msgtype":"m.text"},"ts":1402420691000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah so currently I don't need per-header metadata. The immutable and protected headers can just be lists that are checked on set and get","msgtype":"m.text"},"ts":1402420747000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The problem is Last-Event-ID","msgtype":"m.text"},"ts":1402420761000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Which triggers a preflight if it wasn't spec-sanctioned","msgtype":"m.text"},"ts":1402420779000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so you add the metadata","msgtype":"m.text"},"ts":1402420791000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what's the problem","msgtype":"m.text"},"ts":1402420794000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'm really surprised these are the only headers in this mode","msgtype":"m.text"},"ts":1402420818000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I think Last-Event-ID is actually the only one, since <a> doesn't do CORS","msgtype":"m.text"},"ts":1402420835000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Or maybe <a ping download> does CORS?","msgtype":"m.text"},"ts":1402420849000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"seems like e.g. Accept-Charset should be on this list too","msgtype":"m.text"},"ts":1402420849000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Accept-Charset is not a header anymore","msgtype":"m.text"},"ts":1402420862000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and DNT","msgtype":"m.text"},"ts":1402420867000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"DNT is like Host","msgtype":"m.text"},"ts":1402420877000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and User-Agent","msgtype":"m.text"},"ts":1402420882000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"User-Agent is like Host","msgtype":"m.text"},"ts":1402420887000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"how so","msgtype":"m.text"},"ts":1402420894000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i mean, it's on the same list today","msgtype":"m.text"},"ts":1402420903000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: http://fetch.spec.whatwg.org/#forbidden-author-header-name","msgtype":"m.text"},"ts":1402420908000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i'm saying it should be treated like Last-Event-ID","msgtype":"m.text"},"ts":1402420911000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"No, they are more restricted","msgtype":"m.text"},"ts":1402420924000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if the UA sets it on a UA request, then sure, it shouldn't be mutated","msgtype":"m.text"},"ts":1402420926000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but why would we not allow it to be set on an XHR request, say","msgtype":"m.text"},"ts":1402420933000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"because we decided we wouldn't back in 2006","msgtype":"m.text"},"ts":1402420961000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well if that's an argument, then why does the same argument not apply to Last-Event-ID?","msgtype":"m.text"},"ts":1402420988000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well I asked you if we should just add Last-Event-Id to that list","msgtype":"m.text"},"ts":1402421000000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"right but we decided not to in 200x, right? :-)","msgtype":"m.text"},"ts":1402421042000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"adding per-header metadata seems pretty simple to me.","msgtype":"m.text"},"ts":1402421072000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(it's not really per-header, it's more just two lists of headers)","msgtype":"m.text"},"ts":1402421089000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(two lists that browsers probably already have somewhere, to some extent)","msgtype":"m.text"},"ts":1402421107000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(since some attributes are going to be mutable in this API and some aren't, regardless of what we do here)","msgtype":"m.text"},"ts":1402421136000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so ... older browsers are going to allow scripts to do whatever they like with those headers, or?","msgtype":"m.text"},"ts":1402421228000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"older browsers don't have service workers at all","msgtype":"m.text"},"ts":1402421260000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: where do I go to report a broken link on the w3.org spec?","msgtype":"m.text"},"ts":1402421930000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"Hixie: w3c spec > w3c wiki","msgtype":"m.text"},"ts":1402421949000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"on a wiki? just fix it...","msgtype":"m.text"},"ts":1402421957000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I am unaware of what the link is attempting to reference. \"checkbox state\"","msgtype":"m.text"},"ts":1402421996000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"I can make an educated that this may be a reference to the \"checked\" state, but the phrase is ambiguous.","msgtype":"m.text"},"ts":1402422037000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1402422065000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"dunno","msgtype":"m.text"},"ts":1402422066000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"doesn't much care for w3c things","msgtype":"m.emote"},"ts":1402422070000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so, anyone know why posts i send to es-discuss might be dropping on the floor?","msgtype":"m.text"},"ts":1402422587000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: \"use strict\"?","msgtype":"m.text"},"ts":1402422647000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1402422648000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1402422659000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hixie: it finally arrived","msgtype":"m.text"},"ts":1402423377000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It can't be a list. Say we put Last-Event-ID on that list. And someone sets it through XMLHttpRequest. How does Fetch know what Last-Event-ID means?","msgtype":"m.text"},"ts":1402423387000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: i just resent it","msgtype":"m.text"},"ts":1402423468000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic: from a different mail client","msgtype":"m.text"},"ts":1402423472000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: it’s not like you to resent anything.","msgtype":"m.text"},"ts":1402423647000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"*groan*","msgtype":"m.text"},"ts":1402423738000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"annevk: will catch up tomorrow morning","msgtype":"m.text"},"ts":1402427533000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"i think i found an approach for zooming content in and out smoothly","msgtype":"m.text"},"ts":1402430558000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"i tried using requestAnimationFrame to scrollTop(), but that's janky, has some egregious state tracking, and runs half FPS","msgtype":"m.text"},"ts":1402430611000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"originally i'd thought i needed to dynamically adjust transform-origin, but that would've required it's own janktacular state tracking to keep updating the origin to the center of the page as the user scrolls without shifting","msgtype":"m.text"},"ts":1402430687000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"guessing the only viable approach is the use translate(), which for some reason hadn't occured to me","msgtype":"m.text"},"ts":1402430704000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"you will of course report your findings and have them published in a peer-reviewed journal","msgtype":"m.text"},"ts":1402430753000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"ya'll are welcome to peer review my google+ writeup when it goes up","msgtype":"m.text"},"ts":1402430774000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"nice","msgtype":"m.text"},"ts":1402430781000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i also had to use huge negative margins to trim the zoomed out content's real size down to it's transformed size, which is what made me think the transform-origin was going to be problematic: it'd mean updating those margins as the origin moved. otoh, i only really need to set the transform-origin right before zoom starts, and so long as i can reupdate the origin, re-trim the margins, and set the scrollTop() exactly right, it might not be too bad","msgtype":"m.text"},"ts":1402430905000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"sometimes you'll get much smoother scrolling with translate3d","msgtype":"m.text"},"ts":1402432067000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: Do @font-face rules in documents expose those fonts to other documents in the same window?  I didn't think they did, which is why I did document.fonts, but if they are, I can see the argument for shifting to CSS.fonts.","msgtype":"m.text"},"ts":1402432073000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"depending on what the content is","msgtype":"m.text"},"ts":1402432101000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"the biggest suck of all is that \"zoom\" ends up with thousands of millions of results for zooming an image in and out","msgtype":"m.text"},"ts":1402432865000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"there's absolutely no hope of ever finding any useful information on how to zoom content in or out, which is only slightly bleaker than my outlook for ever getting this right myself by munging carefully with scale() translate(), negative margin, and translate origin","msgtype":"m.text"},"ts":1402432913000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"to be fair, isn't that usually the client's job?","msgtype":"m.text"},"ts":1402432936000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"spread fingers apart on the trackpad, notice that text and images scale up","msgtype":"m.text"},"ts":1402432970000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it doesn't seem like a use case that the web should be exempt from actually doing","msgtype":"m.text"},"ts":1402433005000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"just because there is a use case where the browser can do some kind of job at it","msgtype":"m.text"},"ts":1402433014000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"some people would say the platform already kind of does too much, it's a silly level of scope creep","msgtype":"m.text"},"ts":1402433065000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"yes, you can't imagine wanting to change the size of a thing, clearly, definitely: should be banned, scope creep.","msgtype":"m.text"},"ts":1402433112000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"now now, I'm not taking sides in that argument =)","msgtype":"m.text"},"ts":1402433134000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"scope creep is my weak-sauce hacked out implementations. :(","msgtype":"m.text"},"ts":1402433190000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"TabAtkins: I suspect with HTML imports they would","msgtype":"m.text"},"ts":1402433230000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah, hm.  Yeah.","msgtype":"m.text"},"ts":1402433248000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"man, getting the orientation of the stack of open elements wrong was so dumb","msgtype":"m.text"},"ts":1402438459000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: hmm?","msgtype":"m.text"},"ts":1402438513000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"oh, you mean in your parser?","msgtype":"m.text"},"ts":1402438524000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"when i specced the html parser, i defined a stack which grows downwards","msgtype":"m.text"},"ts":1402438527000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"instead of upwards","msgtype":"m.text"},"ts":1402438530000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1402438532000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"oops","msgtype":"m.text"},"ts":1402438534000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"so the spec talks about \"lower in the stack\" meaning further from zero","msgtype":"m.text"},"ts":1402438539000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"just like on i386 ;-P","msgtype":"m.text"},"ts":1402438545000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1402438549000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's freaking confusing","msgtype":"m.text"},"ts":1402438556000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but to fix it would be so risky","msgtype":"m.text"},"ts":1402438563000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that i daren't do it","msgtype":"m.text"},"ts":1402438566000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"maybe change to words that aren't up and down at all","msgtype":"m.text"},"ts":1402438581000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"i use all kinds of words","msgtype":"m.text"},"ts":1402438591000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's why it's risky","msgtype":"m.text"},"ts":1402438595000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"e.g. \"Let furthest block be the topmost node in the stack of open elements that is lower in the stack than formatting element...\"","msgtype":"m.text"},"ts":1402438611000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"topmost meaning nearest to index 0, lower meaning with index greater than","msgtype":"m.text"},"ts":1402438628000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"assuming a positive-index stack where 0 is the first thing pushed onto it","msgtype":"m.text"},"ts":1402438637000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"clearly start by wrapping all such text in caution tape ;-P","msgtype":"m.text"},"ts":1402438685000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"redefine the stack to go left-to-right","msgtype":"m.text"},"ts":1402440935000,"senderName":"jamesr_","senderId":"jamesr_@irc"},
{"content":{"body":"hmm, that's not terribly exotic as directions go","msgtype":"m.text"},"ts":1402441029000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"or north/south?","msgtype":"m.text"},"ts":1402441062000,"senderName":"jamesr_","senderId":"jamesr_@irc"},
{"content":{"body":"With C++ std::vector, a stack typically grows from front to back","msgtype":"m.text"},"ts":1402441089000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(Could go with turnwise and widdershins if you want to avoid ambiguity with typical 3D directional terms)","msgtype":"m.text"},"ts":1402441267000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"thinks that the C++ committee and Hixie need to revise the law of universial gravitation","msgtype":"m.emote"},"ts":1402441394000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Because their stacks are not going to be stable","msgtype":"m.text"},"ts":1402441415000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"holy crap, i implemented the AAA and passed like 10 more tests","msgtype":"m.text"},"ts":1402443839000,"senderName":"Hixie","senderId":"Hixie@irc"}
]