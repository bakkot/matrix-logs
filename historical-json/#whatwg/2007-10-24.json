[
{"content":{"body":"what's UCT if it's not UTC?","msgtype":"m.text"},"ts":1193184420000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"wikipedia has no ideas other than university of cape town","msgtype":"m.text"},"ts":1193184720000,"senderName":"jacobolus","senderId":"jacobolus@irc"},
{"content":{"body":"well crap","msgtype":"m.text"},"ts":1193213280000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"good api design includes keeping arguments in consistent positions","msgtype":"m.text"},"ts":1193213281000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but i have a case where i can't do that","msgtype":"m.text"},"ts":1193213282000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"A(x), B(y), C(x, z)... do I do D(y, x), or D(x, y) ?","msgtype":"m.text"},"ts":1193213400000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"y is the more useful argument...","msgtype":"m.text"},"ts":1193213460000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"for a long time i had to look up the argument order for insertBefore every time i used it","msgtype":"m.text"},"ts":1193215680000,"senderName":"jruderman","senderId":"jruderman@irc"},
{"content":{"body":"Hixie: make all the functions take all three arguments. problem solved!","msgtype":"m.text"},"ts":1193215740000,"senderName":"jruderman","senderId":"jruderman@irc"},
{"content":{"body":"actually no, i considered that, and making B() take x makes my like even more complicated","msgtype":"m.text"},"ts":1193215800000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1193216100000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so if i have statement-level error reporting and transaction-level error reporting","msgtype":"m.text"},"ts":1193216101000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if the statement-level error callback is omitted, clearly i should call the transaction-level error reporting callback instead","msgtype":"m.text"},"ts":1193216102000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but what if both are provided, and the statement-level error callback function doesn't throw an exception, but doesn't indicate that it handled the error?","msgtype":"m.text"},"ts":1193216160000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(the statement-level error callback can indicate that the transaction isn't to be rolled back -- i.e. that it handled the error -- by returning false)","msgtype":"m.text"},"ts":1193216161000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"insertBefore is hella confusing","msgtype":"m.text"},"ts":1193216580000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"sometimes i wish it was prev.insertBefore(n) rather than parent.insertBefore(n, prev)","msgtype":"m.text"},"ts":1193217060000,"senderName":"jruderman","senderId":"jruderman@irc"},
{"content":{"body":"ok i have revamped the database api","msgtype":"m.text"},"ts":1193217120000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"http://www.whatwg.org/specs/web-apps/current-work/multipage/section-sql.html#sql","msgtype":"m.text"},"ts":1193217660000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I want to extract spec URIs for each HTML5 element and attribute. should I do pattern matching against the TOC or is there a better way?","msgtype":"m.text"},"ts":1193238480000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"did someone already do this? zcorpan perhaps?","msgtype":"m.text"},"ts":1193238540000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"or was it Philip`?","msgtype":"m.text"},"ts":1193238541000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I think Philip`","msgtype":"m.text"},"ts":1193238720000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"for http://canvex.lazyilluminati.com/misc/ref.html","msgtype":"m.text"},"ts":1193238780000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: thanks","msgtype":"m.text"},"ts":1193238900000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Philip`: is the doc manually authored or is the data extracted from the spec programmatically?","msgtype":"m.text"},"ts":1193238901000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"iirc, the elements, attributes and dom interfaces, and content models are extracted from the spec, and the text is written manually... see http://canvex.lazyilluminati.com/misc/ref/","msgtype":"m.text"},"ts":1193239020000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"All the data comes from a YAML file, and that file is written manually, except I copied-and-pasted an automatically-extracted not-quite-complete list of elements/attributes from the spec into that file","msgtype":"m.text"},"ts":1193239140000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: ok. thanks","msgtype":"m.text"},"ts":1193239200000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I think I'm going to try to extract what I want programmatically","msgtype":"m.text"},"ts":1193239201000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I can't find the program I used to automatically extract the spec definitions, but it was basically just some regexps","msgtype":"m.text"},"ts":1193239320000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"hmm. I think I'm going to use the Validator.nu HTML parser plus a SAX handler","msgtype":"m.text"},"ts":1193239321000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"(hence being not-quite-complete, since the spec has a few attributes described in an unusual format)","msgtype":"m.text"},"ts":1193239322000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(I also only wanted the names, not ids for linking to the spec)","msgtype":"m.text"},"ts":1193239440000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I want to have mapping so that","msgtype":"m.text"},"ts":1193239500000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"(Incidentally, linking sounds somewhat dangerous when the ids are unstable (which they are))","msgtype":"m.text"},"ts":1193239501000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"1) when I have a ns,localName pair, I can get","msgtype":"m.text"},"ts":1193239502000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"a) Spec URI with fragment id","msgtype":"m.text"},"ts":1193239503000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"b) SAX Tree fragment with English description of allowed context","msgtype":"m.text"},"ts":1193239560000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"c) SAX Tree fragment with English description of allowed content model","msgtype":"m.text"},"ts":1193239561000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"d) SAX Tree fragment listing element-specific attributes","msgtype":"m.text"},"ts":1193239562000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"2) when I have ns,localName pair for element and another for attribute,","msgtype":"m.text"},"ts":1193239620000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"a) a SAX Tree fragment with English description of the attribute","msgtype":"m.text"},"ts":1193239621000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hmm. the last one seems hard to extract programmatically","msgtype":"m.text"},"ts":1193239680000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"For http://canvex.lazyilluminati.com/misc/ref/ref.html I was just writing descriptions and allowed-content-model manually, since it doesn't seem feasible to get human-readable output any other way","msgtype":"m.text"},"ts":1193239800000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: why not? Hixie has written the allowed content model in a uniform <dl> on each element definition?","msgtype":"m.text"},"ts":1193239860000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Hmm, I suppose it wouldn't be too bad for content models","msgtype":"m.text"},"ts":1193240040000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"although something like \"Content model: When used in an element whose content model is only strictly inline-level content: only significant strictly inline-level content, but there must be no interactive descendants. Otherwise: any significant inline-level content, but there must be no interactive descendants.\" doesn't seem particularly reader-friendly and my brain turns off after the first sentence :-)","msgtype":"m.text"},"ts":1193240100000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: if it is reader-unfriendly, it is better to fix it upstream in the spec than only in a validator UI","msgtype":"m.text"},"ts":1193240160000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"The spec has a very different audience to a validator, and different again to a reference guide, so optimising for readers in one audience is likely to involve tradeoffs against others","msgtype":"m.text"},"ts":1193240340000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"hmm. sometimes the following the fragment id link for an attribute gives useful text","msgtype":"m.text"},"ts":1193240520000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"and other times the linked-to paragraph makes no sense on its own","msgtype":"m.text"},"ts":1193240521000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":":-(","msgtype":"m.text"},"ts":1193240522000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"i wonder why people are generally pushing for 'role' and 'aria-disabled' instead of having all the attributes be 'aria' attributes","msgtype":"m.text"},"ts":1193260860000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i.e. why is one small part of the api intended to reuse 'role' when the rest doesn't?","msgtype":"m.text"},"ts":1193260861000,"senderName":"Hixie","senderId":"Hixie@irc"}
]