[
{"content":{"body":"If I understood the intention correctly - transform streams are only intended to be used to build linear (non-branching) transformation pipelines, is this correct?","msgtype":"m.text"},"ts":1516867063000,"senderName":"sangwhan","senderId":"sangwhan@irc"},
{"content":{"body":"e.g. not this: https://upload.wikimedia.org/wikipedia/commons/5/55/ArquitecturaPipeAndFilter.jpeg","msgtype":"m.text"},"ts":1516867099000,"senderName":"sangwhan","senderId":"sangwhan@irc"},
{"content":{"body":"sangwhan: afaik they have an input and output, but what you do inside is up to you","msgtype":"m.text"},"ts":1516869196000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sangwhan: so you could tee the input, do something, and then combine it again before sending it onward","msgtype":"m.text"},"ts":1516869214000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: okay, so tee then doing two parallel transforms is supposed to work?","msgtype":"m.text"},"ts":1516869333000,"senderName":"sangwhan","senderId":"sangwhan@irc"},
{"content":{"body":"sangwhan: I mean, I don't see why not? But I'm very far from an expert","msgtype":"m.text"},"ts":1516869399000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Neither am I - trying to figure out how to combine the two later","msgtype":"m.text"},"ts":1516869512000,"senderName":"sangwhan","senderId":"sangwhan@irc"},
{"content":{"body":"I guess you just read from two and do your thing, I think I'm slowly making sense out of this now","msgtype":"m.text"},"ts":1516869616000,"senderName":"sangwhan","senderId":"sangwhan@irc"},
{"content":{"body":"sangwhan: yeah, that's how I'd think of it too","msgtype":"m.text"},"ts":1516869631000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks, think I can probably scrub that off the list now :)","msgtype":"m.text"},"ts":1516869757000,"senderName":"sangwhan","senderId":"sangwhan@irc"},
{"content":{"body":"MikeSmith: interested in helping gathering data on h1/hgroup? https://github.com/whatwg/html/issues/83#issuecomment-360415905","msgtype":"m.text"},"ts":1516873822000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: hai","msgtype":"m.text"},"ts":1516873896000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Steve pinged me about that too","msgtype":"m.text"},"ts":1516873906000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"will add some use counters to the checker","msgtype":"m.text"},"ts":1516873920000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"<3","msgtype":"m.text"},"ts":1516873966000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: is https://github.com/whatwg/html/issues/3323#issuecomment-360413258 an argument for WebKit's behavior?","msgtype":"m.text"},"ts":1516874060000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"looks what webkit does","msgtype":"m.emote"},"ts":1516874075000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: I don't really understand what you mean by it","msgtype":"m.text"},"ts":1516874084000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yes","msgtype":"m.text"},"ts":1516874087000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: but 300/150 is not the maximum size in WebKit, so it's not logical rounding","msgtype":"m.text"},"ts":1516874137000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wait hgroup is still a thing?","msgtype":"m.text"},"ts":1516874147000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Ms2ger: it looks much more like trying and then falling back to a default","msgtype":"m.text"},"ts":1516874151000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tantek: euh yes?","msgtype":"m.text"},"ts":1516874158000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, 300x150 is the size of the canvas argument","msgtype":"m.text"},"ts":1516874173000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: ah okay, so what does WebKit do if the <canvas> is too large?","msgtype":"m.text"},"ts":1516874214000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Throw RangeError, I think","msgtype":"m.text"},"ts":1516874232000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Lemme check if there's a test for that","msgtype":"m.text"},"ts":1516874244000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Oh no, InvalidStateError (not sure why)","msgtype":"m.text"},"ts":1516874366000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"http://w3c-test.org/2dcontext/imagebitmap/createImageBitmap-invalid-args.html (\"createImageBitmap with an oversized canvas source.\")","msgtype":"m.text"},"ts":1516874375000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: I see, if you do eager clipping the WebKit behavior makes some","msgtype":"m.text"},"ts":1516875134000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think that makes the most sense, but I'm happy whichever way you go, as long as it's clear :)","msgtype":"m.text"},"ts":1516875419000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"\"As long as it's clear\" such a high bar","msgtype":"m.text"},"ts":1516876181000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's canvas, so I'll settle for \"sorta clear\" ;);","msgtype":"m.text"},"ts":1516877703000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Trasparent black?","msgtype":"m.text"},"ts":1516879168000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"covers jgraham in transparent black","msgtype":"m.emote"},"ts":1516879959000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"tobie: I think you don't understand, the idea is that you pay the W3C: https://www.w3.org/support/","msgtype":"m.text"},"ts":1516890778000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: that's how you become a friend, not by doing unpaid work","msgtype":"m.text"},"ts":1516890814000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: oh boy. What is this even","msgtype":"m.text"},"ts":1516890882000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: it's a way to get even more enraged on Twitter","msgtype":"m.text"},"ts":1516890936000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: this reminds me of how you get a certificate for being a chair, but not even a thank you for tons of editing/review work","msgtype":"m.text"},"ts":1516890996000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: Less helpfully, it's \"As if on cue\", not \"queue\". Isn't English wonderful.","msgtype":"m.text"},"ts":1516891026000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"You get a certificate?","msgtype":"m.text"},"ts":1516891073000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"hahahaha","msgtype":"m.text"},"ts":1516891076000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: arg. I had doubts about that when I wrote it. should have checked.","msgtype":"m.text"},"ts":1516891191000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"also I blame data structures.","msgtype":"m.text"},"ts":1516891276000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"This is all sangwhan's fault for tweeting about this in the first place.","msgtype":"m.text"},"ts":1516891474000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk, tobie: MFW we don't even remember what's an identifier","msgtype":"m.text"},"ts":1516891512000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I'm not super I follow. :-/","msgtype":"m.text"},"ts":1516892496000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"*super sure","msgtype":"m.text"},"ts":1516892507000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: https://github.com/whatwg/html/issues/3238#issuecomment-360486782","msgtype":"m.text"},"ts":1516892517000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: oh!","msgtype":"m.text"},"ts":1516892549000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"nox: we can easily tweek that rule","msgtype":"m.text"},"ts":1516892559000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Can we twerk the rule?","msgtype":"m.text"},"ts":1516892568000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Anyway, yeah we can definitely change WebIDL, I was just stating its current state.","msgtype":"m.text"},"ts":1516892592000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"me and spelling aren't friends today","msgtype":"m.text"},"ts":1516892593000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"nox: sure. But sometimes it's a lot harder to do so. For that particular case, it's actually really simple.","msgtype":"m.text"},"ts":1516892662000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"nox: given the current state its an artificial subset of what the grammar supports","msgtype":"m.text"},"ts":1516892706000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"nox: *is","msgtype":"m.text"},"ts":1516892715000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: Yep yep.","msgtype":"m.text"},"ts":1516892725000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"tobie: Also, I enjoy how Edge's WebIDL parser seems to be waaaaay more liberal than any other.","msgtype":"m.text"},"ts":1516892760000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I'm not sure I actually want to hear about that.","msgtype":"m.text"},"ts":1516892782000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: Oh no I'm not saying it's a bad parser,","msgtype":"m.text"},"ts":1516892793000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"just that they didn't seem to have implemented a lot of artificial constraints from the spec.","msgtype":"m.text"},"ts":1516892807000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: neither was I implying that's what you were saying.","msgtype":"m.text"},"ts":1516892833000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"nox: I'd just like not to have interop parsing issues between different WebIDL implementations.","msgtype":"m.text"},"ts":1516892867000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: Found what I had in mind: https://github.com/whatwg/html/issues/775#issuecomment-190851825","msgtype":"m.text"},"ts":1516892886000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"\"legacycaller getter (HTMLCollection or Element)? item((unsigned long or DOMString) nameOrIndex);\" YOLO","msgtype":"m.text"},"ts":1516892897000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"🙈 🙉 🙊","msgtype":"m.text"},"ts":1516893159000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"nox, what's disallowed about that?","msgtype":"m.text"},"ts":1516893248000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: Can't combine legacycaller and getter (IIRC, not sure I remembered that part well), and a getter argument type must be unsigned long or DOMString, it can't be an union of them, or be anything else.","msgtype":"m.text"},"ts":1516893288000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Oh, fair","msgtype":"m.text"},"ts":1516893303000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: But yeah, it does sound weird,","msgtype":"m.text"},"ts":1516893337000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"their parser and the semantics they give to WebIDL are cleaner, but it's not like we are going to change all existing parsers and toolchains for the sake of the orthogonality of features.","msgtype":"m.text"},"ts":1516893386000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic: tobie: if you want to refer to the JavaScript value of something that passed as \"any\" across the boundary, what's the pattern for that? https://github.com/whatwg/html/pull/3370#pullrequestreview-91552683","msgtype":"m.text"},"ts":1516906720000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: tobie: the conversion it does at the moment seems wrong, since there's no conversion afaik, there just exists a JS value","msgtype":"m.text"},"ts":1516906738000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: tobie and I talked about making this more explicit last week. We think maybe requiring explicit coercion makes the most sense even for types that are just 1-1 containers like any or interface types.","msgtype":"m.text"},"ts":1516908953000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: ok, I guess I’ll leave this then","msgtype":"m.text"},"ts":1516908991000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We'd make this explicit by defining \"corresponding IDL value\" and \"corresponding ECMAScript value\" or similar.","msgtype":"m.text"},"ts":1516908993000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Right now there are several handwavey phrases used inside the Web IDL spec. Outside that spec I guess most people use conversions.","msgtype":"m.text"},"ts":1516909033000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Allowing an IDL any to be passed to dict extraction might be nice too","msgtype":"m.text"},"ts":1516909094000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And I guess using Type() on IDL any is wrongish too","msgtype":"m.text"},"ts":1516909121000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Need to reverse those steps","msgtype":"m.text"},"ts":1516909130000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I argued a bit for allowing implicit interchange between those types. But I realized I am biased because I work a lot in spec areas that are on the boundaries. So for most people allowing implicit treatment as either would be confusing.","msgtype":"m.text"},"ts":1516909215000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"sg","msgtype":"m.text"},"ts":1516909325000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hey everyone. :)","msgtype":"m.text"},"ts":1516915200000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"annevk: ping","msgtype":"m.text"},"ts":1516915206000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"Heya, I hope Domenic can help you out as I’m about to sleep 💤","msgtype":"m.text"},"ts":1516915289000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Okay, no worries.","msgtype":"m.text"},"ts":1516915301000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"Domenic: ping","msgtype":"m.text"},"ts":1516915320000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"What's up?","msgtype":"m.text"},"ts":1516915324000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Have you had a look at the data channel streams discussion lately?","msgtype":"m.text"},"ts":1516915340000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"I've been trying to follow, although I haven't had time to really digest. My main impression is that you all know more about the data channel domain than I do, and in the streams domain you seem to be pretty on track as well, so I'm positive :)","msgtype":"m.text"},"ts":1516915446000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That's good for starters. :) Do you have an idea what Harald is on about (https://github.com/w3c/webrtc-pc/issues/1732#issuecomment-360507120)? I'm quite puzzled...","msgtype":"m.text"},"ts":1516915499000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"Is there something related to Blob I have not seen so far?","msgtype":"m.text"},"ts":1516915518000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"Hmm","msgtype":"m.text"},"ts":1516915557000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I mean they're vaguely related in that both blobs and streams allow you to not hold the data all in memory at one time?","msgtype":"m.text"},"ts":1516915580000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It almost feels like a wrong-thread though, weird.","msgtype":"m.text"},"ts":1516915597000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I thought maybe you're familiar with Blob as well and there's some way to get a stream out of a Blob... even though I can already see that it would fail on the receiver side with the current API.","msgtype":"m.text"},"ts":1516915660000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"Because it really is a chicken-egg problem: How do I know what the user wants to do with the data (in form of a Blob) before it's complete.","msgtype":"m.text"},"ts":1516915715000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"Ah, there is a hacky way to convert blob to stream actually","msgtype":"m.text"},"ts":1516915826000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"What would really help me is a side-by-side comparison of streams vs. Blob. I think that should do as a viable response to that comment. Do we have something like that somewhere? Thinking of stuff like backpressure, ...","msgtype":"m.text"},"ts":1516915826000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"(new Response(blob)).body","msgtype":"m.text"},"ts":1516915832000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ah sure, using the body mixin.","msgtype":"m.text"},"ts":1516915861000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"I guess we don't have that preexisting, because they're really different... you can't actually get at the data in the blob without using FileReader which is a huge mess...","msgtype":"m.text"},"ts":1516915863000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah, it is and it's also really, really slow.","msgtype":"m.text"},"ts":1516915903000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"(In case you're interested how slow in comparison: https://jsperf.com/dc-reassembly)","msgtype":"m.text"},"ts":1516916025000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"Okay, so we don't have that... but is there a short document that emphasizes the advantages of streams in comparison with what we have in browsers at the moment?","msgtype":"m.text"},"ts":1516916130000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"What I have in mind is: Handling backpressure on both sides (I'm not actually sure the term 'backpressure' is applicable to both sides), low-level API when needed, high-level API when possible (pipeTo), ... and I'm sure there are other advantages I haven't considered, yet.","msgtype":"m.text"},"ts":1516916460000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"Domenic: Ping (still there?) :)","msgtype":"m.text"},"ts":1516918134000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"lgrahl: sorry, in meetings for the next while","msgtype":"m.text"},"ts":1516918152000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://github.com/whatwg/streams/blob/master/Requirements.md and https://github.com/whatwg/streams/blob/master/FAQ.md might be somewhat helpful","msgtype":"m.text"},"ts":1516918181000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://streams.spec.whatwg.org/#intro and the following section probably should help too","msgtype":"m.text"},"ts":1516918205000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But in the end we might be missing exactly what you describe, which is good feedback and we should fix...","msgtype":"m.text"},"ts":1516918219000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Cheers! I'll have a look at these.","msgtype":"m.text"},"ts":1516918271000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"(ricea ^)","msgtype":"m.text"},"ts":1516918511000,"senderName":"Domenic","senderId":"Domenic@irc"}
]