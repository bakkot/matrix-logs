[
{"content":{"body":"TabAtkins: can I pass in custom metadata with bikeshed's --md-xxx syntax? I am getting \"Unknown metadata key\" errors","msgtype":"m.text"},"ts":1421280249000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Nope, I have a note in the issue saying that I'm not adding it until someone asks, because it's a little troublesome. ^_^","msgtype":"m.text"},"ts":1421280284000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hmm maybe i can repurpose another metadata","msgtype":"m.text"},"ts":1421280315000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: I basically want to smuggle in some custom text from the command line, so I can do `var currentCommitURL = \"[commiturl]\"`","msgtype":"m.text"},"ts":1421280391000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"any better way to do that than asking you to implement custom metadata?","msgtype":"m.text"},"ts":1421280405000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That won't work in the first place, since there's no way to set custom text macros.","msgtype":"m.text"},"ts":1421280423000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ah, macros vs. metadata","msgtype":"m.text"},"ts":1421280430000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so uh yeah any ideas","msgtype":"m.text"},"ts":1421280500000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Log an issue on me and I'll think about it. ^_^","msgtype":"m.text"},"ts":1421280800000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"anybody know that github is using Flash for?","msgtype":"m.text"},"ts":1421308801000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"in Chrome I get a popup notification about it having blocked a pop-up from Flash","msgtype":"m.text"},"ts":1421308850000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"document.querySelectorAll(\"object\")[0].id","msgtype":"m.text"},"ts":1421308975000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"\"global-zeroclipboard-flash-bridge\"","msgtype":"m.text"},"ts":1421308976000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":":-)","msgtype":"m.text"},"ts":1421308981000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"https://assets-cdn.github.com/flash/ZeroClipboard.v2.1.6.swf I guess","msgtype":"m.text"},"ts":1421309007000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ondras: yeah","msgtype":"m.text"},"ts":1421309017000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Domenic: are you awake?","msgtype":"m.text"},"ts":1421311987000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: thanks. validator.nu is back","msgtype":"m.text"},"ts":1421313038000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"looks like I need to write some kind of watchdog for this","msgtype":"m.text"},"ts":1421313049000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"like I have with Apache+Bugzilla, which is combo that gets killed by the kernel occasionally","msgtype":"m.text"},"ts":1421313082000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"so I have a cron job telling apache to start frequently","msgtype":"m.text"},"ts":1421313099000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"heycam|away: whoa, 100Mbps for AUD 1500 is ... move to Europe ;-)","msgtype":"m.text"},"ts":1421313299000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"my first v.nu PR https://github.com/validator/validator/pull/25","msgtype":"m.text"},"ts":1421317765000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"righteous","msgtype":"m.text"},"ts":1421317801000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"i guess there's no spec for x-ua-compatible http header","msgtype":"m.text"},"ts":1421317870000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"only some scattered msdn stuff, how-to, not spec","msgtype":"m.text"},"ts":1421318002000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"maybe the message should say what the value was","msgtype":"m.text"},"ts":1421318149000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"that's always nice to have","msgtype":"m.text"},"ts":1421318215000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"especially in this case","msgtype":"m.text"},"ts":1421318228000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"since it's coming from a header","msgtype":"m.text"},"ts":1421318249000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: the docs say there's error, fatalError and warning. and the other errors are actually fatal. so this should be error","msgtype":"m.text"},"ts":1421318838000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"unless error somehow doesn't work and it needs to choose between fatalError and warning","msgtype":"m.text"},"ts":1421318872000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: ok. haven't looked back at the rest of the code yetãƒ¼ I'm on from my phone","msgtype":"m.text"},"ts":1421318968000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://twitter.com/awbjs/status/555755196488241152 :/","msgtype":"m.text"},"ts":1421338159000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Is there nobody that does any triaging on ES bugs?","msgtype":"m.text"},"ts":1421338169000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"What's the point in filing them if they keep getting deferred unless you're on some committee","msgtype":"m.text"},"ts":1421338196000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"What makes you think there is a point?","msgtype":"m.text"},"ts":1421338225000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"haha thinking doing anything with TC-39 is worthwhile if you're not a member of TC-39, that's cute","msgtype":"m.text"},"ts":1421338252000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: am awake","msgtype":"m.text"},"ts":1421338610000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"curious on your thoughts on my latest custom elements post","msgtype":"m.text"},"ts":1421338624000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i think it makes upgrading a minimum viable part of the mvp","msgtype":"m.text"},"ts":1421338637000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: the Dmitry solution?","msgtype":"m.text"},"ts":1421338663000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1421338669000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I was not thrilled at first, but then I read Jonas' almost-synchronous solution which wasn't great either","msgtype":"m.text"},"ts":1421338712000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think the Dmitry solution is pretty nice. The biggest problem with the current setup is that C1 = document.registerElement(\"my-el\", C2) gives C1 !== C2","msgtype":"m.text"},"ts":1421338747000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"with Dmitry's solution they are ===","msgtype":"m.text"},"ts":1421338756000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: it seems even wycats is not too opposed to the Dmitry solution although it has the Brain transplant properties...","msgtype":"m.text"},"ts":1421338771000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: the main thing I dislike is that it's quite a bit different from normal elements","msgtype":"m.text"},"ts":1421338918000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: but I guess that's always going to be the case, given where we put the security boundaries","msgtype":"m.text"},"ts":1421338939000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"For parses that happen after registration you could use the real constructor using Jonas's technique more or less, I think. But for parses before registration I think not having identity at parse time is the only reasonable thing.","msgtype":"m.text"},"ts":1421338987000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I don't think we should do both","msgtype":"m.text"},"ts":1421339008000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: that makes it racy whether certain things end up working","msgtype":"m.text"},"ts":1421339023000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Normal elements could probably work the way of the Dmitry solution","msgtype":"m.text"},"ts":1421339036000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Probably nobody wants to implement that but seems doable.","msgtype":"m.text"},"ts":1421339096000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: the element-constructors repo looks really great btw","msgtype":"m.text"},"ts":1421339097000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Thanks :). Needs a bit more work, but I am happy that it is possible.","msgtype":"m.text"},"ts":1421339136000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah, I think as some suggested on the list we want to require magic tokens for a few to make forward compatibility a bit better, but overall this looks like the way to go","msgtype":"m.text"},"ts":1421339176000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm so happy that someone who understands JS better than I do is making this happen. ^_^","msgtype":"m.text"},"ts":1421339204000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hopefully can restrict it to HTMLUnknownElement.","msgtype":"m.text"},"ts":1421339210000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Even though it's rather weird that elements have both duck typing and identity but I guess we're not going to remove that anytime soon","msgtype":"m.text"},"ts":1421339234000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"What do you mean by that exactly?","msgtype":"m.text"},"ts":1421339478000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":": Node Module Of The Week -> http://nmotw.in/isomorphic-fetch/ ","msgtype":"m.emote"},"ts":1421339628000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"Domenic: that you check the identity of an element by name/namespace rather than class","msgtype":"m.text"},"ts":1421339793000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah but if we maintain the invariants in the readme then those have a 1:1 correspondence so it becomes observably the same","msgtype":"m.text"},"ts":1421339828000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: similar to how ES prescribes that you check for [[WeakMapData]] but then makes these slots so unique you can do it either way...","msgtype":"m.text"},"ts":1421339829000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I would like <my-button> to be able to be a subclass of <button> at some point","msgtype":"m.text"},"ts":1421339877000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: not right away, but at some point","msgtype":"m.text"},"ts":1421339894000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah I see","msgtype":"m.text"},"ts":1421339912000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: and forget about is=\"\" for now since it's ugly and Apple is not interested","msgtype":"m.text"},"ts":1421339913000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is=\"\" is currently the only way to get accessibility","msgtype":"m.text"},"ts":1421339927000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Plus other various gaps that HTML as Custom Elements documents","msgtype":"m.text"},"ts":1421339946000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"What's wrong with ARIA?","msgtype":"m.text"},"ts":1421339977000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it doesn't cover e.g. focus","msgtype":"m.text"},"ts":1421339992000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"isn't super-hyped about dropping something when it's sure to lead to more \"Google spec doesn't care about a11y\" shouting...","msgtype":"m.emote"},"ts":1421339994000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: heh, Mozilla is already getting the blame. https://twitter.com/stevefaulkner/status/555757553062535168","msgtype":"m.text"},"ts":1421340024000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: anything with tabindex can get focus","msgtype":"m.text"},"ts":1421340024000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: or general manipulability with the keyboard. You have to hand-code all the event listeners.https://w3c.github.io/webcomponents/spec/custom/#custom-tag-example","msgtype":"m.text"},"ts":1421340079000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Is is=\"\" going to be the new longdesc=\"\"?","msgtype":"m.text"},"ts":1421340088000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: if your element is doing anything novel that is going to be the case either way, but to be clear I wouldn't want this to stay this way forever","msgtype":"m.text"},"ts":1421340119000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"No, eventually we'll just have <my-button>, presumably.","msgtype":"m.text"},"ts":1421340124000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: I would like to solve this too, but I don't think is=\"\" is the way to go","msgtype":"m.text"},"ts":1421340133000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"<my-button> subclassing button seems doable if Boris changes all the Gecko code and we fill all the HTML as Custom Elements gaps","msgtype":"m.text"},"ts":1421340141000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: I think Dmitry's approach is the local-maxima for brain transplants","msgtype":"m.text"},"ts":1421340144000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I'd like to explore options other than brain transplants though","msgtype":"m.text"},"ts":1421340153000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"wycats: I have the options here: https://wiki.whatwg.org/wiki/CustomElements#Upgrading","msgtype":"m.text"},"ts":1421340177000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wycats: though explanation/drawbacks is not as complete as it could be","msgtype":"m.text"},"ts":1421340201000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I need to propose the \"import-in-html\" thing","msgtype":"m.text"},"ts":1421340214000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"which isn't represented there","msgtype":"m.text"},"ts":1421340217000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"\"Not having identity at creation-time is a giant mismatch with the rest of the platform.\" I think in theory the rest of the platform could match","msgtype":"m.text"},"ts":1421340220000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: if all browsers change all the code rather :-P","msgtype":"m.text"},"ts":1421340220000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Or at least I would be interested to tease out the exact problems that occur if we tried to make it match","msgtype":"m.text"},"ts":1421340245000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: seems tricky","msgtype":"m.text"},"ts":1421340257000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"wycats: I don't see how. If we run createdCallback \"before user script\", it's only inside the createdCallback that the uninitialized state of other elements is observable","msgtype":"m.text"},"ts":1421340286000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wycats: even with import-in-html one of these four strategies needs to be used I think to actually create instances from markup","msgtype":"m.text"},"ts":1421340314000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and you can't override the createdCallbacks that the built-ins supplied to the browser at start-up time","msgtype":"m.text"},"ts":1421340315000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: sure, yes","msgtype":"m.text"},"ts":1421340323000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"really three strategies, I only added the existing prototype one for comparison sake","msgtype":"m.text"},"ts":1421340364000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I *guess* this scenario would be observably different: <my-el></my-el><p>; inside the createdCallback() for my-el you would observe this.nextSibling is HTMLElement instead of HTMLParagraphElement","msgtype":"m.text"},"ts":1421340376000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But you could solve even that if you create a priority queue system where the elements that are registered first are called first","msgtype":"m.text"},"ts":1421340403000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So then just say that <p> registered its callbacks before <my-el> so it gets upgraded + createdCallback first, so inside <my-el>'s createdCallback() you end up seeing the post-upgrade <p>.","msgtype":"m.text"},"ts":1421340438000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess I need to reread how Dmitry's solution works exactly","msgtype":"m.text"},"ts":1421340449000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So I think the brain transplant is not observably different from the existing platform.","msgtype":"m.text"},"ts":1421340451000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i.e. all existing elements can be explained in terms of it.","msgtype":"m.text"},"ts":1421340464000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: fwiw, this is my very very very very very very straw-man: https://gist.github.com/wycats/b67eb065e5862902a7ee","msgtype":"m.text"},"ts":1421340477000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"with this additional idea that you run callbacks in order of registration","msgtype":"m.text"},"ts":1421340480000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"for imports-in-html","msgtype":"m.text"},"ts":1421340480000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"like... so straw man that the syntax isn't worth bikeshedding at all","msgtype":"m.text"},"ts":1421340497000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"the key point is the semantics","msgtype":"m.text"},"ts":1421340502000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"wycats: so you can only use custom elements inside templates?","msgtype":"m.text"},"ts":1421340504000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: <template> is a straw-man to get inert DOM","msgtype":"m.text"},"ts":1421340522000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"sure I don't care about the name","msgtype":"m.text"},"ts":1421340529000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So you can't just write .html files using custom elements","msgtype":"m.text"},"ts":1421340535000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: my original approach was to just say that any element that contained imports was inert","msgtype":"m.text"},"ts":1421340549000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"which is also fine","msgtype":"m.text"},"ts":1421340554000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"so that's just equivalent to sync script then","msgtype":"m.text"},"ts":1421340562000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"deny","msgtype":"m.text"},"ts":1421340566000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Domenic: read down","msgtype":"m.text"},"ts":1421340570000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"it's async, and there is fallback content","msgtype":"m.text"},"ts":1421340582000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"right, but same idea of blocking the real content until the definition loads.","msgtype":"m.text"},"ts":1421340597000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1421340601000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"but not actually blocking the main thread","msgtype":"m.text"},"ts":1421340613000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"sure, <script> doesn't block the main thread, it just blocks parsing the real content","msgtype":"m.text"},"ts":1421340627000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: the thing that I'm most struggling with is the fact that usually \"loading\" is a coarser thing than a single element","msgtype":"m.text"},"ts":1421340633000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Domenic: I don't think it's worth analogizing to sync script","msgtype":"m.text"},"ts":1421340644000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"it's not meant to work like sync script","msgtype":"m.text"},"ts":1421340649000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"it is very much worth analogizing because this is just a tweak to the sync script proposal","msgtype":"m.text"},"ts":1421340661000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the sync script proposal has no way to show other subsequent content","msgtype":"m.text"},"ts":1421340689000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"it seems... not the same?","msgtype":"m.text"},"ts":1421340699000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"sure it does","msgtype":"m.text"},"ts":1421340701000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"just place the ocntent there and replace it when hte script runs","msgtype":"m.text"},"ts":1421340707000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the main characteristic of sync script is that the sync script blocks the world","msgtype":"m.text"},"ts":1421340714000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"that... is not how scripts work","msgtype":"m.text"},"ts":1421340721000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"they block parsing, not the world","msgtype":"m.text"},"ts":1421340727000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: by \"the world\", what I mean is that no further content can be put on the page","msgtype":"m.text"},"ts":1421340756000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Domenic: maybe we're talking past each other","msgtype":"m.text"},"ts":1421340785000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"so yours allows placing the fallback content spatially after the <import> in the source document; but with <scirpt> you just place it spatially before","msgtype":"m.text"},"ts":1421340797000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yes, and then you're responsible for removing it, AND you cannot put anything else on the page once you hit an area of HTML that requires custom elements","msgtype":"m.text"},"ts":1421340839000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Domenic: I'm pretty sure we're not talking about the same thing","msgtype":"m.text"},"ts":1421340851000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"what I'm suggesting encapsulates the \"blocking\" to an area of HTML","msgtype":"m.text"},"ts":1421340868000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"it does not block ALL subsequent parsing","msgtype":"m.text"},"ts":1421340881000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"and the thing is: you usually want loading behavior to be coarser than targeting individual unknown elements with CSS","msgtype":"m.text"},"ts":1421340907000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Domenic: <script> blocks the main thread, no?","msgtype":"m.text"},"ts":1421341049000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I don't think so. E.g. if you do <script>setTimeout(fn);</script><script src=\"takes-a-long-time-to-load.js\"></script> I am pretty sure fn runs after ~0 ms, not after the load.","msgtype":"m.text"},"ts":1421341086000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: sure, but anything after <script> won't show","msgtype":"m.text"},"ts":1421341120000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: right that's what I mean by blocking parsing but not the main thread","msgtype":"m.text"},"ts":1421341133000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: from what I understood from the <import> idea the parser would just keep going constructing the DOM","msgtype":"m.text"},"ts":1421341198000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: you'd get a placeholder of sorts","msgtype":"m.text"},"ts":1421341202000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yes, for the container containing the <import>s","msgtype":"m.text"},"ts":1421341220000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"but not for anything subsequent","msgtype":"m.text"},"ts":1421341225000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"and the placeholder could be user-supplied fallback content, like a coarse-grained loader spinner","msgtype":"m.text"},"ts":1421341305000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"it's pretty analogous to how the notional <module> will work","msgtype":"m.text"},"ts":1421341878000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"but for HTML instead of script","msgtype":"m.text"},"ts":1421341882000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"wycats: given that you still need one of the upgrading mechanisms from the wiki page, wouldn't it make sense to pick one from those? Or do you think this proposal would influence the decision? (In which case my advice would be to write up the basic processing model and post it someplace...)","msgtype":"m.text"},"ts":1421343472000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think it would influence it because it eliminates user-visible unknown elements in these cases","msgtype":"m.text"},"ts":1421343557000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Which I think is a weakness in the other async proposals","msgtype":"m.text"},"ts":1421343584000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"annevk: in other words, DOM replacement may work just fine because there's no space for someone to qSA and grab onto the wrong element","msgtype":"m.text"},"ts":1421343667000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"if it's not observable you could choose any of the alternatives","msgtype":"m.text"},"ts":1421343699000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"DOM replacement would still fire observable mutation observer callbacks though","msgtype":"m.text"},"ts":1421343714000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wycats: what kind of DOM replacement is this?","msgtype":"m.text"},"ts":1421343727000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wycats: the original node is not an actual element?","msgtype":"m.text"},"ts":1421343739000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://www.fastcompany.com/3037803/the-oral-history-of-the-poop-emoji-or-how-google-brought-poop-to-america \"I used some external power. I went to the product manager of Gmail, who manages everything about Gmail, and got [him to agree] that this is the most useful emoji.\"","msgtype":"m.text"},"ts":1421344028000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: no","msgtype":"m.text"},"ts":1421344319000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Domenic: let me try to be precise","msgtype":"m.text"},"ts":1421344330000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"it sounds like there is some consternation about *actually* running user code during the time period of parsing","msgtype":"m.text"},"ts":1421344350000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I can understand that","msgtype":"m.text"},"ts":1421344359000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"so what I'm proposing is a second pass that replaces the dummy nodes inserted *in the algorithm* with new nodes","msgtype":"m.text"},"ts":1421344373000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"but no mutation observers would fire and the entire process would be purely in-algorithm","msgtype":"m.text"},"ts":1421344392000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"is this observably different from blocking the parse (for that subtree) as you run the constructors","msgtype":"m.text"},"ts":1421344439000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it seems like it is because nextSibling would be null in blocking the parse but would be a dummy node in your version","msgtype":"m.text"},"ts":1421344475000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"which is bad because the observable dummy node would be replaced by a custom element but no mutation observers would fire","msgtype":"m.text"},"ts":1421344502000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I personally would prefer if user-code worked just like platform code (and constructors run inline) but that seems to be a no-go","msgtype":"m.text"},"ts":1421344564000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Domenic: why would nextSibling be the dummy node in my version?","msgtype":"m.text"},"ts":1421344586000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"you would run the constructor before doing the replacement","msgtype":"m.text"},"ts":1421344592000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"yes but you've only replaced one of them","msgtype":"m.text"},"ts":1421344601000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh i see","msgtype":"m.text"},"ts":1421344608000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it's not even in the DOM when the constructor is run","msgtype":"m.text"},"ts":1421344618000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Same problem with attachedCallback thoug","msgtype":"m.text"},"ts":1421344640000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"user-code can work just like platform-code in the Dmitry version, as I outlined","msgtype":"m.text"},"ts":1421344659000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: say more about attachedCallback?","msgtype":"m.text"},"ts":1421344734000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"<my-el1></my-el1><my-el2></my-el2>","msgtype":"m.text"},"ts":1421344759000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wouldn't you wait to run those callbacks until all nodes were replaced?","msgtype":"m.text"},"ts":1421344762000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"basically try to make the observable semantics equivalent to inline constructors","msgtype":"m.text"},"ts":1421344776000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"the definition of attachedCallback is that it runs when inserting","msgtype":"m.text"},"ts":1421344782000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"if you change that I guess you can avoid observing it","msgtype":"m.text"},"ts":1421344793000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"there is no other user code that runs","msgtype":"m.text"},"ts":1421344804000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"surely the only real requirement is that it runs after inserting and before any other user code?","msgtype":"m.text"},"ts":1421344814000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"yes but they have to run in order","msgtype":"m.text"},"ts":1421344830000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"right. I guess what I'm saying is that we make the semantics \"execute constructors inline\" and that this is a strategy implementations can use that is equivalent to those semantics","msgtype":"m.text"},"ts":1421344867000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"that won't pwn their existing code","msgtype":"m.text"},"ts":1421344881000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Ah so the Jonas solution.","msgtype":"m.text"},"ts":1421344888000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I don't see it in annevk's list","msgtype":"m.text"},"ts":1421344943000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"or do I","msgtype":"m.text"},"ts":1421344945000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Hmm yeah I don't think it's linked","msgtype":"m.text"},"ts":1421344952000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"shit yeah, that needs to be added","msgtype":"m.text"},"ts":1421344969000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The almost-synchronous constructor","msgtype":"m.text"},"ts":1421344986000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wycats: for now, see https://lists.w3.org/Archives/Public/public-webapps/2014JanMar/0098.html","msgtype":"m.text"},"ts":1421345004000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wycats: \"in a modules world\" is a bad way to lead an argument :-/","msgtype":"m.text"},"ts":1421345010000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"if we have learned anyhting over the last two years it's that you can't block a feature on modules eventually shipping","msgtype":"m.text"},"ts":1421345045000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: we think modules aren't going to be the dominant way people write JS in 5 years?","msgtype":"m.text"},"ts":1421345046000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"hm","msgtype":"m.text"},"ts":1421345059000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I didn't realize I was suggesting that we block something","msgtype":"m.text"},"ts":1421345066000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"maybe I missed something subtle?","msgtype":"m.text"},"ts":1421345070000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"you weren't suggesting it outright, but the implication that your suggestion works better in a modules world makes it easy to immediately dismiss your suggestion","msgtype":"m.text"},"ts":1421345100000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"would be better to just work in the world we have and use `Element.ready` instead of `ready`","msgtype":"m.text"},"ts":1421345114000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: annevk: ha! The Jonas solution is almost 1:1 with the way Ember handles components!","msgtype":"m.text"},"ts":1421345116000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1421345131000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Domenic: that makes sense","msgtype":"m.text"},"ts":1421345141000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"[Element.ready] works fine too","msgtype":"m.text"},"ts":1421345146000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"and is hardly longer than readyCallback","msgtype":"m.text"},"ts":1421345152000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"yeah I am coming around to the symbols","msgtype":"m.text"},"ts":1421345165000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"do you want to reply with that or should I follow-up and say you suggested it?","msgtype":"m.text"},"ts":1421345168000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I can do it","msgtype":"m.text"},"ts":1421345181000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: As a framework author, I'm loathe to be as dismissive of the future issues","msgtype":"m.text"},"ts":1421345202000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"symbols let you be really short and declarative about what you're doing, at the cost of slightly more boilerplate around the symbol","msgtype":"m.text"},"ts":1421345227000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"strings make you have to worry about all other ecosystem users","msgtype":"m.text"},"ts":1421345241000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"See A.p.contains :P","msgtype":"m.text"},"ts":1421345246000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"s/declarative/clear/","msgtype":"m.text"},"ts":1421345260000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"wycats: would you suggest symbols for everything though? If we add a new property to an element?","msgtype":"m.text"},"ts":1421345442000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wycats: or just hooks?","msgtype":"m.text"},"ts":1421345446000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: just hooks","msgtype":"m.text"},"ts":1421345463000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"good","msgtype":"m.text"},"ts":1421345467000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm why","msgtype":"m.text"},"ts":1421345469000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i don't want to add symbols for everything but i don't see why the argument doesn't apply","msgtype":"m.text"},"ts":1421345487000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: hm... mostly experience with Ember but I should try to quantify","msgtype":"m.text"},"ts":1421345490000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Domenic: so the concern would be that a subclass of <img> adds .exif and then the browser can no longer add it? Or the browser adds it and breaks the subclass? Meh","msgtype":"m.text"},"ts":1421345541000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"right... those issues seem minor","msgtype":"m.text"},"ts":1421345554000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"compared to hooks","msgtype":"m.text"},"ts":1421345557000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"where you could be invoking random code","msgtype":"m.text"},"ts":1421345562000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"that didn't expect to be invoked","msgtype":"m.text"},"ts":1421345567000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"that makes sense","msgtype":"m.text"},"ts":1421345574000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: it's similar to how we can get away with new globals","msgtype":"m.text"},"ts":1421345588000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"because worst-case things get shadowed","msgtype":"m.text"},"ts":1421345593000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Domenic: Polymer decided not to use *Callback it seems","msgtype":"m.text"},"ts":1421345661000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"they removed all of the `Callback` suffixes :P","msgtype":"m.text"},"ts":1421345674000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"http://note.io/1ygHes0","msgtype":"m.text"},"ts":1421345693000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I don't really know the details but I think polymer element definitions don't correspond to the CE prototype exactly","msgtype":"m.text"},"ts":1421345701000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1421345707000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"this table has some details","msgtype":"m.text"},"ts":1421345712000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"lunch, bbl","msgtype":"m.text"},"ts":1421345730000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I think obviously internal DOM properties should be using private state of some stripe","msgtype":"m.text"},"ts":1421345752000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"https://wiki.whatwg.org/wiki/CustomElements#Upgrading now has \"Jonas\"","msgtype":"m.text"},"ts":1421345765000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(which is a real issue with subclasses in Ember and we're pretty careful with `_` which doesn't help enough)","msgtype":"m.text"},"ts":1421345770000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"annevk: I find it interesting that Ember's approach is similar to Jonas","msgtype":"m.text"},"ts":1421345792000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"we do breadth-first recursive rendering","msgtype":"m.text"},"ts":1421345803000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"and we have an abstraction called \"morph\"","msgtype":"m.text"},"ts":1421345817000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"which is the bookkeeping","msgtype":"m.text"},"ts":1421345821000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"it uses empty text nodes","msgtype":"m.text"},"ts":1421345826000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Domenic: what was the outcome of this thread? https://lists.w3.org/Archives/Public/public-webapps/2014JulSep/0355.html","msgtype":"m.text"},"ts":1421350633000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"dglazkov: nothing, nobody cares :(","msgtype":"m.text"},"ts":1421350910000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess that one was where I learned a few things and cleared up a few of my wrong misconceptions. It eventually fed into https://github.com/domenic/html-as-custom-elements/blob/master/docs/accessibility.md which is more accurate than that thread's OP","msgtype":"m.text"},"ts":1421350977000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"dglazkov: Domenic: I'd be happy to help tackle that, making accessibility work is important","msgtype":"m.text"},"ts":1421351169000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1421351179000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Looking forward to a faithful <custom-span>!","msgtype":"m.text"},"ts":1421351196000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah, I've been focusing on figuring out the new low-level bits now JavaScript is finally in shape, but we should definitely revisit old threads such as that one","msgtype":"m.text"},"ts":1421351305000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm starting to dislike the timezone difference for this project, but I guess it's going well enough","msgtype":"m.text"},"ts":1421351366000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I need to wake up earlier, heh","msgtype":"m.text"},"ts":1421351428000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Been getting in at 11 this week :-/","msgtype":"m.text"},"ts":1421351438000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: there is also a proposal for fixing focus, https://docs.google.com/document/d/1k93Ez6yNSyWQDtGjdJJqTBPmljk9l2WS3JTe5OHHB50/edit, although it is pretty confused right now. (See my comment at the top.)","msgtype":"m.text"},"ts":1421351539000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"who's in charge of WebIDL these days?","msgtype":"m.text"},"ts":1421352580000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Still heycam|away","msgtype":"m.text"},"ts":1421352599000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie, and bz in practice","msgtype":"m.text"},"ts":1421352682000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"k, thanks","msgtype":"m.text"},"ts":1421352889000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ccs bz","msgtype":"m.emote"},"ts":1421352892000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"when an event handler for the beforeunload event returns an object where the toString method throws an exception","msgtype":"m.text"},"ts":1421353395000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"should the browser fire an error event","msgtype":"m.text"},"ts":1421353416000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"or should it just swallow the exception and continue to unload?","msgtype":"m.text"},"ts":1421353427000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"looks at the spec","msgtype":"m.emote"},"ts":1421353476000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i can tell you what chrome does","msgtype":"m.text"},"ts":1421353487000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"if the navigation was triggered from js, it fires the error event, if it was triggered by the user, it crashes","msgtype":"m.text"},"ts":1421353504000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"well it definitely shouldn't crash. :-)","msgtype":"m.text"},"ts":1421353556000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"can't we just spec it like that?","msgtype":"m.text"},"ts":1421353595000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"i'm actually trying to fix it, but i don't know what the right fix would be","msgtype":"m.text"},"ts":1421353609000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1421353625000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the specs are very unhelpful here","msgtype":"m.text"},"ts":1421353630000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"even the most generous reading of HTML, WebIDL, and JS doesn't answer the question","msgtype":"m.text"},"ts":1421353652000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so","msgtype":"m.text"},"ts":1421353691000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"what should i do?","msgtype":"m.text"},"ts":1421353695000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"not sure how to fix this","msgtype":"m.text"},"ts":1421353695000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"If the return value is null, then cancel the event.\"","msgtype":"m.text"},"ts":1421353701000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"Otherwise, If the Event object E is a BeforeUnloadEvent object, and the Event object E's returnValue attribute's value is the empty string, then set the returnValue attribute's value to return value.\"","msgtype":"m.text"},"ts":1421353710000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"does that first call valueOf() then toString() ?","msgtype":"m.text"},"ts":1421353741000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or valueOf() then toString() on that?","msgtype":"m.text"},"ts":1421353751000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or...?","msgtype":"m.text"},"ts":1421353765000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh wait wait","msgtype":"m.text"},"ts":1421353772000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'm looking in the wrong place","msgtype":"m.text"},"ts":1421353779000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i should be looking in the handling of callback return values","msgtype":"m.text"},"ts":1421353789000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"http://heycam.github.io/webidl/#es-invoking-callback-functions","msgtype":"m.text"},"ts":1421353834000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"end these steps and allow the exception to propagate\"","msgtype":"m.text"},"ts":1421353867000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so i should catch the exception in the \"event handler processing algorithm\"","msgtype":"m.text"},"ts":1421353908000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"mhm","msgtype":"m.text"},"ts":1421353908000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"in step 3","msgtype":"m.text"},"ts":1421353915000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but where does it propagate to, if script is not running?","msgtype":"m.text"},"ts":1421353930000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"my algorithm, which then crashes with an uncaught exception","msgtype":"m.text"},"ts":1421353953000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so technically chrome is matching the spec","msgtype":"m.text"},"ts":1421353958000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":":-P","msgtype":"m.text"},"ts":1421353959000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"for DOM event dispatch, the dom spec says \"If this throws any exception, report the exception.\"","msgtype":"m.text"},"ts":1421353970000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i just need to add that sentence to HTML","msgtype":"m.text"},"ts":1421353976000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well actually","msgtype":"m.text"},"ts":1421353990000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"no!","msgtype":"m.text"},"ts":1421353991000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"this is well defined after all!","msgtype":"m.text"},"ts":1421353995000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(well not really but arguably)","msgtype":"m.text"},"ts":1421354000000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"my algorithm gets the exception, aborting it (that's poorly defined but matches exception semantics)","msgtype":"m.text"},"ts":1421354021000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"then it gets back to the DOM algorithm","msgtype":"m.text"},"ts":1421354027000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"which reports the exception","msgtype":"m.text"},"ts":1421354030000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so to answer your question: it should fire an error event","msgtype":"m.text"},"ts":1421354046000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1421354103000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"sounds like a plan :)","msgtype":"m.text"},"ts":1421354106000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"thx","msgtype":"m.text"},"ts":1421354109000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"i'll make HTML clearer about this","msgtype":"m.text"},"ts":1421354252000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hrm, webidl doesn't actually give a hook for calling callbacks","msgtype":"m.text"},"ts":1421354675000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that seems like an omission of note...","msgtype":"m.text"},"ts":1421354682000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what do i replace DOMStringList with, if I have to spec an API that uses DOMStringList?","msgtype":"m.text"},"ts":1421356810000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"uses in implementations, i mean","msgtype":"m.text"},"ts":1421356826000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"It returns a list of DOMStrings? Is it live?","msgtype":"m.text"},"ts":1421356842000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: ancestorOrigins. Can't be changed, so not really live.","msgtype":"m.text"},"ts":1421358077000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Oh, is this an attribute on something?","msgtype":"m.text"},"ts":1421358109000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Location.ancestorOrigins","msgtype":"m.text"},"ts":1421358130000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"returns the origins of the ancestor frames","msgtype":"m.text"},"ts":1421358136000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Bah.  WebIDL still doesn't allow using a sequence<> in attributes (but also still doesn't provide any other option).","msgtype":"m.text"},"ts":1421358159000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"what is api-compatible with DOMStringList? anything?","msgtype":"m.text"},"ts":1421358183000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Aside from .item(), Array is compatible.","msgtype":"m.text"},"ts":1421358247000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(It now has a .contains() method.)","msgtype":"m.text"},"ts":1421358254000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"maybe i just return an Array","msgtype":"m.text"},"ts":1421358279000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":" .includes(), actually","msgtype":"m.text"},"ts":1421358285000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":".contains() is dead","msgtype":"m.text"},"ts":1421358292000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: Ugh, MDN is out of date, then.","msgtype":"m.text"},"ts":1421358321000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: You can't return an array in an attribute.","msgtype":"m.text"},"ts":1421358334000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"May well be","msgtype":"m.text"},"ts":1421358335000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"looks","msgtype":"m.emote"},"ts":1421358340000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"At least, not through WebIDL.","msgtype":"m.text"},"ts":1421358341000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"why not?","msgtype":"m.text"},"ts":1421358349000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Because it's not possible.","msgtype":"m.text"},"ts":1421358355000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"readonly attribute object foo;","msgtype":"m.text"},"ts":1421358369000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"That's not enough. It doesn't protect the array from being changed.","msgtype":"m.text"},"ts":1421358384000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It just means you can't *replace* the array.","msgtype":"m.text"},"ts":1421358391000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Wuh","msgtype":"m.text"},"ts":1421358396000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"<TabAtkins> Hixie: You can't return an array in an attribute.","msgtype":"m.text"},"ts":1421358403000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Sure you can","msgtype":"m.text"},"ts":1421358406000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"you just return a readonly array","msgtype":"m.text"},"ts":1421358410000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"readonly just means there's only a getter, not a setter.","msgtype":"m.text"},"ts":1421358411000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The array is still mutable.","msgtype":"m.text"},"ts":1421358419000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"not if you say it's not...","msgtype":"m.text"},"ts":1421358429000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"There's no way to indicate otherwise in WebIDL.","msgtype":"m.text"},"ts":1421358445000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Are we talking Array or T[]?","msgtype":"m.text"},"ts":1421358449000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"T[] isn't an Array at all.","msgtype":"m.text"},"ts":1421358459000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It's called one","msgtype":"m.text"},"ts":1421358479000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Well, not Array, but array","msgtype":"m.text"},"ts":1421358493000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: It's possible that i'm still totally turned around by the sequence<T>/T[]/Array mess that IDL is full of.","msgtype":"m.text"},"ts":1421358498000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"the prototype of a T[] is Array","msgtype":"m.text"},"ts":1421358506000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Anyway, T[] is dead","msgtype":"m.text"},"ts":1421358510000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"so it seems pretty arrayy to me","msgtype":"m.text"},"ts":1421358511000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"there's a bunch of places in HTML where i return read-only arrays iirc","msgtype":"m.text"},"ts":1421358528000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"in any case i don't really care what i return","msgtype":"m.text"},"ts":1421358534000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"just need to know what it should be","msgtype":"m.text"},"ts":1421358540000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"in what sense is T[] dead?","msgtype":"m.text"},"ts":1421358581000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"http://heycam.github.io/webidl/#es-array seems to describe them in detail","msgtype":"m.text"},"ts":1421358597000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"In that no APIs should use them.","msgtype":"m.text"},"ts":1421358603000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"In that heycam|away should edit the spec","msgtype":"m.text"},"ts":1421358624000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"They're not Arrays, they're magical platform objects with Array on their prototype.","msgtype":"m.text"},"ts":1421358628000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"sounds good to me","msgtype":"m.text"},"ts":1421358642000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the plan is to have FrozenArray<T> or something","msgtype":"m.text"},"ts":1421358766000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"heycam|away says that's his next priority IIRC","msgtype":"m.text"},"ts":1421358784000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ugh i hate frozen stuff","msgtype":"m.text"},"ts":1421358786000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it doesn't let you add custom properties","msgtype":"m.text"},"ts":1421358794000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"in any case it looks like my choices are: a) revive DOMStringList and exactly match Chrome's implementation; b) use the deprecated read only array DOMString[] platform array object; c) punt even longer","msgtype":"m.text"},"ts":1421358870000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"looks like other uses of DOMStringList got turned into DOMString[]","msgtype":"m.text"},"ts":1421359551000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so i'll go with that for now","msgtype":"m.text"},"ts":1421359562000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"anyone got an IDN site that uses arrays handy?","msgtype":"m.text"},"ts":1421359821000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1421359823000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that uses iframes, even","msgtype":"m.text"},"ts":1421359825000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yes I should just get around and do that","msgtype":"m.text"},"ts":1421361279000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: If I can get off my ass and finally write the @extend spec, you can fix up that part of WebIDL. ^_^","msgtype":"m.text"},"ts":1421361990000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Also: figure out how I can do the same with dicts, plzkthx.","msgtype":"m.text"},"ts":1421362008000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]