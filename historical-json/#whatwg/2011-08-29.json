[
{"content":{"body":"Conclusion from the last two days of HTML related email: there is nothing interesting happening.","msgtype":"m.text"},"ts":1314607740000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"finally gets around to looking at what heycam changed in WebIDL because of him :P","msgtype":"m.emote"},"ts":1314614100000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Though trying to load the spec on train wifi isn't working brilliantly","msgtype":"m.text"},"ts":1314614160000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(I guess dev.w3.org being on a sewing machine doesn't help)","msgtype":"m.text"},"ts":1314614220000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"imagines a server getting electricity from an old singer http://upload.wikimedia.org/wikipedia/commons/0/00/Singer_sewing_machine.jpg","msgtype":"m.emote"},"ts":1314614520000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"maybe they let the sewing machine \"render\" the page on actual fabric and automatically take a photo of it and deliver that as the web page","msgtype":"m.text"},"ts":1314614580000,"senderName":"tomasf","senderId":"tomasf@irc"},
{"content":{"body":"Lack of a CSS media type for fabric suggests that isn't the case","msgtype":"m.text"},"ts":1314614760000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Does anyone have tests for canvas objects in \"data\" documents","msgtype":"m.text"},"ts":1314617040000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"something like","msgtype":"m.text"},"ts":1314617100000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"document.implementation.createHTMLDocument(\"\").createElement(\"canvas\").getContext(\"2d\");","msgtype":"m.text"},"ts":1314617101000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and then using that context somehow","msgtype":"m.text"},"ts":1314617102000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"If they say html5 should be \"backwards compatible\" ... how far back in time are they talking about?","msgtype":"m.text"},"ts":1314617760000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"If who says what?","msgtype":"m.text"},"ts":1314617820000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"For developing HTML5 the tenets were more like \"support existing content\" and \"no mode switching\"","msgtype":"m.text"},"ts":1314617880000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I remember a discussion about why a <dl> only has \"assumed\" list items (no unique container)","msgtype":"m.text"},"ts":1314617881000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"It was said that adding one was not backwardds compatible with what existed today.","msgtype":"m.text"},"ts":1314617940000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"So you can't make changes that break (large enoguh numbers of) existing sites (that browser makers would be reluctant to make the changes). Since some sites are as old as the web, that gives a timescale","msgtype":"m.text"},"ts":1314617941000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Wouldn't it be interesting to make a \"intermediate\" tracks. Support two modes, until the old way of working gets fazed out?","msgtype":"m.text"},"ts":1314618000000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"No","msgtype":"m.text"},"ts":1314618001000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"It's a lot of effort","msgtype":"m.text"},"ts":1314618002000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"and there is no good idea of what the timescale for the old way fading out is","msgtype":"m.text"},"ts":1314618003000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Yeah ...","msgtype":"m.text"},"ts":1314618004000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"woef: How many things have ever been fazed out?","msgtype":"m.text"},"ts":1314618005000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"image maps?","msgtype":"m.text"},"ts":1314618060000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"flash slowly is going away.","msgtype":"m.text"},"ts":1314618061000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"(pretty sure phased is spelt wityh a ph and an s)","msgtype":"m.text"},"ts":1314618062000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"fazed is the \"i'm a cool geek\" way of spelling ;)","msgtype":"m.text"},"ts":1314618063000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"Ah. I never get those memos for some reaswon","msgtype":"m.text"},"ts":1314618120000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I'm afraid we don't really do the whole ph-thing in Belgium :)","msgtype":"m.text"},"ts":1314618121000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"I get that wrong a lot.","msgtype":"m.text"},"ts":1314618122000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"woef: image maps are still supported by all browsers.","msgtype":"m.text"},"ts":1314618123000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"woef: Yeah, but gsnedders is scottish. That's almost english, so he doesn't have an excuse","msgtype":"m.text"},"ts":1314618124000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Hah!","msgtype":"m.text"},"ts":1314618180000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"woef: An extreme example is the plaintext element, noted as being deprecated in the first ever HTML spec, still special-cased in the parser in HTML 5.","msgtype":"m.text"},"ts":1314618181000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I once tried to read some Irvine Welsh books, my English lessons didn't really help.","msgtype":"m.text"},"ts":1314618240000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"jgraham: I just copied what woef said!","msgtype":"m.text"},"ts":1314618241000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: You know I can't spell. :P","msgtype":"m.text"},"ts":1314618242000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Copying others is normally better than guessing myself :P","msgtype":"m.text"},"ts":1314618243000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"is unphased by homonyms","msgtype":"m.emote"},"ts":1314618244000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(It also provides a convenient way to mitigate blame for my inability to spell.)","msgtype":"m.text"},"ts":1314618245000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Is someone who is phased by homonyms a homophobe?","msgtype":"m.text"},"ts":1314618300000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"woef: Speaking of Welsh, the only book I found hard to read was one with phonetic transcription of dialect from where I grew up. :)","msgtype":"m.text"},"ts":1314618360000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(I can cope with it fine when spoken.)","msgtype":"m.text"},"ts":1314618361000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I think I tried Trainspotting once.","msgtype":"m.text"},"ts":1314618660000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"But if I get it right, we'll never have a <dl> list with proper list items?","msgtype":"m.text"},"ts":1314618661000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"Or nested <a>-tags?","msgtype":"m.text"},"ts":1314618662000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"woef: nested a-elements will break existing sites, so there's no way you'll get browsers to change behaviour. Equally, what does a link within a link *do*?","msgtype":"m.text"},"ts":1314618780000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"woef: What's the use-case for changing dl though? What's unclear about dt/dd?","msgtype":"m.text"},"ts":1314618781000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"link to it's href?","msgtype":"m.text"},"ts":1314618782000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"woef: which href?","msgtype":"m.text"},"ts":1314618783000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: (pretty obvious what it does, really)","msgtype":"m.text"},"ts":1314618784000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"The one with the deepest nesting.","msgtype":"m.text"},"ts":1314618785000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"Still won't happen ofc","msgtype":"m.text"},"ts":1314618786000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(Presumably it does the same as it does if you nest <a> in XHTML)","msgtype":"m.text"},"ts":1314618840000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Like \"i block-level-link my blog intro but the contained link to the comment section goes there immediately\"","msgtype":"m.text"},"ts":1314618841000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"jgraham: (that would require half a second of thought which I'm not doing while on vacation, even if I am responding to spec changes I requested)","msgtype":"m.text"},"ts":1314618842000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Or in HTML with script","msgtype":"m.text"},"ts":1314618843000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"woef: Still, changing the parser would break existing sites.","msgtype":"m.text"},"ts":1314618844000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: how so?","msgtype":"m.text"},"ts":1314618845000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"I hope nobody is nesting links now, if you see the dom-crap that ensues :)","msgtype":"m.text"},"ts":1314618900000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"hahaha","msgtype":"m.text"},"ts":1314618960000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1314618961000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"woef: Plenty of people are. The vast majority of the web doesn't follow the spec.","msgtype":"m.text"},"ts":1314618962000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Like, approximately 100% of the webhas invalid HTML.","msgtype":"m.text"},"ts":1314618963000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"But these sites break by default :p","msgtype":"m.text"},"ts":1314618964000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"I wonder what the half life of this conversation is","msgtype":"m.text"},"ts":1314619020000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Breaking the web would cause people to not use a browser, so good luck getting any browser to change :P","msgtype":"m.text"},"ts":1314619021000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"We've had the same discussion with different people since 2004","msgtype":"m.text"},"ts":1314619022000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Hopefully it will eventually stop","msgtype":"m.text"},"ts":1314619023000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"As for the <dl>, I just don't like that there is no <li> equivalent.","msgtype":"m.text"},"ts":1314619024000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"That one at least might be changable","msgtype":"m.text"},"ts":1314619080000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"There was a long thread on WHATWG a while back","msgtype":"m.text"},"ts":1314619081000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I don't remembert the conclusions","msgtype":"m.text"},"ts":1314619082000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"You just say that to increase the suspense.","msgtype":"m.text"},"ts":1314619140000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"Yep, it's practically Resident Evil in here","msgtype":"m.text"},"ts":1314619200000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"At least it's not the merky darkness of Doom 3.","msgtype":"m.text"},"ts":1314619260000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Does it count as suspense when you're 100% certain a monster is going to spring into existence behind you when you enter a room?","msgtype":"m.text"},"ts":1314619680000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Okay, true, once you get beyond the first few levels it is like that.","msgtype":"m.text"},"ts":1314619740000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"It killed AvsP2","msgtype":"m.text"},"ts":1314619741000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"The first one was creepy as hell though.","msgtype":"m.text"},"ts":1314619800000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"Damn motion detector.","msgtype":"m.text"},"ts":1314619801000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"looks like ISSUEs are as important as ever http://www.w3.org/html/wg/tracker/issues/170","msgtype":"m.text"},"ts":1314624000000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"looking at the number of duplicates on https://bugzilla.mozilla.org/show_bug.cgi?id=162653 I wonder if mattur will be able to find an XML design thread from 1997 or 1998 containing an assertion that HTML authors won't be confused by XML doing <foo/>","msgtype":"m.text"},"ts":1314624600000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Is (char)(int)1 a plausible way to check endianness of integers","msgtype":"m.text"},"ts":1314625260000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1314625261000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Won't the compiler get upset by that?","msgtype":"m.text"},"ts":1314625440000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"See also http://stackoverflow.com/questions/1001307/detecting-endianness-programmatically-in-a-c-program","msgtype":"m.text"},"ts":1314625441000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(Yay for writing code that depends on endianness)","msgtype":"m.text"},"ts":1314625442000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"int i = 1; char c[sizeof(int)]; memcpy(c, &i, sizeof(int)); bool is_littleendian = c[0];","msgtype":"m.text"},"ts":1314625680000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I'm not sure the union trick is actually legal C (though I'm not sure it's illegal either)","msgtype":"m.text"},"ts":1314625740000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"but memcpy is always safe","msgtype":"m.text"},"ts":1314625741000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: It's illegal, I'm pretty certain. At least people have managed to cite quite obvious bits of the spec about it.","msgtype":"m.text"},"ts":1314625800000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(Well, it's not illgal, it's just undefined.)","msgtype":"m.text"},"ts":1314625801000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(char)(int)1 will always just give you 1, and *(char*)&i will give you bogus results depending on what compiler version and optimisation settings you use","msgtype":"m.text"},"ts":1314625802000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(The union thing works in all compilers in practice, though)","msgtype":"m.text"},"ts":1314625920000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Casting to char always take the low-bits?","msgtype":"m.text"},"ts":1314625921000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Philip`: bool is C99?","msgtype":"m.text"},"ts":1314625980000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"would imageine without knowing that casting to char does an actual type conversion rather than just reading some subset of the bits","msgtype":"m.emote"},"ts":1314626040000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: What else can it do?","msgtype":"m.text"},"ts":1314626041000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: a char is just a numberic type","msgtype":"m.text"},"ts":1314626100000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"*numeric","msgtype":"m.text"},"ts":1314626101000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Well yes, I know that","msgtype":"m.text"},"ts":1314626102000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"It could overflow differently, for example. And be endianness independent.","msgtype":"m.text"},"ts":1314626103000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"If char is unsigned, then (char)i adds or subtracts 256 to/from i until it's in the range [0, 255] and then returns that","msgtype":"m.text"},"ts":1314626160000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"If char is signed, and i is in [0, 255] then it returns that, else it's implementation-defined behaviour","msgtype":"m.text"},"ts":1314626161000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: I could remember there was some magic about char, but I couldn't remember what.","msgtype":"m.text"},"ts":1314626162000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"The magic thing is that you don't know whether it's signed or unsigned","msgtype":"m.text"},"ts":1314626220000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"And about casting as well? Which I guess is the adding/subtracting…","msgtype":"m.text"},"ts":1314626221000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(bool isn't in C99; use a BOOL or int or whatever, or use C++)","msgtype":"m.text"},"ts":1314626280000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"In C99, casting is the same process for any integer types (except _Bool)","msgtype":"m.text"},"ts":1314626340000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"...except replace \"256\" by appropriate values etc","msgtype":"m.text"},"ts":1314626341000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"according to http://en.wikipedia.org/wiki/Stdbool.h , bool expands to _Bool in C99","msgtype":"m.text"},"ts":1314626400000,"senderName":"tomasf","senderId":"tomasf@irc"},
{"content":{"body":"Philip`: (Yeah, I know what to do)","msgtype":"m.text"},"ts":1314626401000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Basically it always does the mathematically obvious thing, except it's unwilling to assume two's-complement representation so any cases of signed overflow are implementation-defined behaviour","msgtype":"m.text"},"ts":1314626460000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"and it's all endian-independent until you try to read the char representation of a larger value","msgtype":"m.text"},"ts":1314626520000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"But in any case, it's usually more useful to know endianness at compile-time and not run-time","msgtype":"m.text"},"ts":1314626580000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"so reading an int into a short is endian dependent, assuming they're different sizes?","msgtype":"m.text"},"ts":1314626640000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"since then you can have byte-swap macros that get replaced with noops","msgtype":"m.text"},"ts":1314626641000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"so you should have a configure script or something to detect it and set a macro","msgtype":"m.text"},"ts":1314626642000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"What do you mean by \"reading into\"?","msgtype":"m.text"},"ts":1314626643000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"*read the short representation of an int","msgtype":"m.text"},"ts":1314626700000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"What do you mean by that?","msgtype":"m.text"},"ts":1314626880000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: (But yes, it makes sense to do this in a saner way once I have all the setup to do that, which is pretty much going to be when I stop playing around with this code as a standalone application","msgtype":"m.text"},"ts":1314626881000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(Values have byte repesentations, not short representations)","msgtype":"m.text"},"ts":1314626882000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"wants to give up on IRC as this internet connection isn't working well","msgtype":"m.emote"},"ts":1314626940000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"is on the WCML being all fancy and stuff in first-class, because Bank Holiday Monday => cheap upgrades.","msgtype":"m.emote"},"ts":1314626941000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"In practice, the solution that works 99.99% of the time is \"#define IS_LITTLE_ENDIAN 1\"","msgtype":"m.text"},"ts":1314627360000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"That's effectively what this code already is. :)","msgtype":"m.text"},"ts":1314627480000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"http://glandium.org/blog/?p=2180","msgtype":"m.text"},"ts":1314628320000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"About the article tag ... why is it the author's responsability to decide what content is syndicable?","msgtype":"m.text"},"ts":1314628380000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"Or is the \"syndication\" part just a way of helping you decide whether to use an article tag?","msgtype":"m.text"},"ts":1314628620000,"senderName":"woef","senderId":"woef@irc"},
{"content":{"body":"hey, a spambug reported from http://html5.clearboth.org/spec !","msgtype":"m.text"},"ts":1314634080000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"anyone here have some time to consider some Web IDL?","msgtype":"m.text"},"ts":1314634260000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"X implements Y;","msgtype":"m.text"},"ts":1314634320000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"interface Y: Z;","msgtype":"m.text"},"ts":1314634321000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"Z implements P;","msgtype":"m.text"},"ts":1314634322000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"the contents of the interfaces are omited for brevity and the names have been changed to protect the guilty","msgtype":"m.text"},"ts":1314634323000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"the question is?","msgtype":"m.text"},"ts":1314634380000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"err lemme make sure i got that last line right","msgtype":"m.text"},"ts":1314634440000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"yeah, i did","msgtype":"m.text"},"ts":1314634441000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"well, first of all, is one really supposed to be using `implements` on interfaces which are inherited by other interfaces?","msgtype":"m.text"},"ts":1314634442000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"thought that `implements` was generally for objects and not interfaces","msgtype":"m.emote"},"ts":1314634443000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"note to self: send feedback to list requesting a line \"Generally you should use `dictionary Foo` instead of `[NoInterfaceObject] interface Foo`.\"","msgtype":"m.text"},"ts":1314634560000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"yeah implements might be a bad word","msgtype":"m.text"},"ts":1314634620000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"though i don't see what's wrong with using it on interfaces that are inherited","msgtype":"m.text"},"ts":1314634680000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"well","msgtype":"m.text"},"ts":1314634860000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"the problem is this:","msgtype":"m.text"},"ts":1314634861000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"ConcreteObject A;","msgtype":"m.text"},"ts":1314634862000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"A implements IFoo;","msgtype":"m.text"},"ts":1314634863000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"A implements IBar;","msgtype":"m.text"},"ts":1314634864000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"A implements IBaz;","msgtype":"m.text"},"ts":1314634865000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"ConcreteObject B;","msgtype":"m.text"},"ts":1314634866000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"B implements IFoo;","msgtype":"m.text"},"ts":1314634867000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"if someone decides that they have a `B` and want to make B's IFoo interface do more","msgtype":"m.text"},"ts":1314634920000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"they might say:","msgtype":"m.text"},"ts":1314634921000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"IFoo implements IMyFooMore;","msgtype":"m.text"},"ts":1314634922000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"expecting it to make B more powerful","msgtype":"m.text"},"ts":1314634923000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"but at the same time, it causes random effects on A","msgtype":"m.text"},"ts":1314634924000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"note that we had this experience in mozilla land","msgtype":"m.text"},"ts":1314634925000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"the rule which we try to enforce is this:","msgtype":"m.text"},"ts":1314634926000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"Only the owner of IFoo is allowed to extend IFoo until IFoo is frozen, at which point, IFoo /may/ but probably /should not/ be extended by others","msgtype":"m.text"},"ts":1314634980000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"roughly that translates into `You, owner of ConcreteObject X are free to use 'X implements IWhatever;'","msgtype":"m.text"},"ts":1314635040000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"but you are not free to use 'IStandardsBodyThing implements IWhatever;'.`","msgtype":"m.text"},"ts":1314635041000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"good morning, Whatwg!","msgtype":"m.text"},"ts":1314637020000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"sees HTML5 supports &measuredangle;, which he will make good use of next time he wants to do some dangle measuring","msgtype":"m.emote"},"ts":1314641220000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1314641221000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"i need to send some feedback to some app vendors","msgtype":"m.text"},"ts":1314641222000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"they aren't unescaping entities :(","msgtype":"m.text"},"ts":1314641223000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"(it makes names of people and places really hard to read)","msgtype":"m.text"},"ts":1314641224000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"TabAtkins: ping","msgtype":"m.text"},"ts":1314641460000,"senderName":"ojan","senderId":"ojan@irc"},
{"content":{"body":"death to entities","msgtype":"m.text"},"ts":1314642300000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"jgraham, this seems to not produce any output anymore.  http://dvcs.w3.org/hg/html/raw-file/tip/tests/submission/AryehGregor/reflection/reflection-onepage.html","msgtype":"m.text"},"ts":1314647880000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"can't see why","msgtype":"m.emote"},"ts":1314648240000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"It's not just the number of tests, I don't think.","msgtype":"m.text"},"ts":1314648300000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"sighs","msgtype":"m.emote"},"ts":1314648301000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"maybe i was reading the wrong spec?","msgtype":"m.text"},"ts":1314648302000,"senderName":"timeless","senderId":"timeless@irc"},
{"content":{"body":"AryehGregor: So it doesn't. I will look tomorrow","msgtype":"m.text"},"ts":1314653940000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham, thanks.","msgtype":"m.text"},"ts":1314653941000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Accio Hixie!","msgtype":"m.text"},"ts":1314654420000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"Hixie: are you working on the dialog plumbing?","msgtype":"m.text"},"ts":1314654421000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"TabAtkins: in your flex rewriting this week...are you touching flex-flow?","msgtype":"m.text"},"ts":1314654720000,"senderName":"ojan","senderId":"ojan@irc"},
{"content":{"body":"TabAtkins: what's there now seems...complicated","msgtype":"m.text"},"ts":1314654721000,"senderName":"ojan","senderId":"ojan@irc"},
{"content":{"body":"hey fsamuel!","msgtype":"m.text"},"ts":1314655020000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"fsamuel: this is Hixie's natural habitat. You can see a glimpse of him eating a banana here. Be very, very still.","msgtype":"m.text"},"ts":1314655080000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"dglazkov, Hixie: Hi dglazkov, hi hixie! :)","msgtype":"m.text"},"ts":1314655140000,"senderName":"fsamuel","senderId":"fsamuel@irc"},
{"content":{"body":"Hixie: meet fsamuel. He's been very interested in building user-stylable select menu drop-downs. I wondered if there's an overlap with your thinking on <dialog>","msgtype":"m.text"},"ts":1314655200000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"AryehGregor: ping","msgtype":"m.text"},"ts":1314656580000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____, pong.","msgtype":"m.text"},"ts":1314656581000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"AryehGregor: about http://html5.org/specs/dom-range.html#range-behavior-under-document-mutation and splitText","msgtype":"m.text"},"ts":1314656582000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"what if textnode's parent is null","msgtype":"m.text"},"ts":1314656640000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Don't I handle that explicitly?","msgtype":"m.text"},"ts":1314656641000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"\"If old node's parent is not null, . . .\"","msgtype":"m.text"},"ts":1314656642000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"AryehGregor: you handle not-null case","msgtype":"m.text"},"ts":1314656643000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but where is the is null","msgtype":"m.text"},"ts":1314656644000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"That's a corner case, so nothing special happens.  Regular range mutation rules apply.","msgtype":"m.text"},"ts":1314656700000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"IIRC I used to handle it, but decided it was pointless to worry about it.","msgtype":"m.text"},"ts":1314656701000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1314656702000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Often you can't do better than the default behavior anyway.","msgtype":"m.text"},"ts":1314656703000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Since the range can't span the two text nodes.","msgtype":"m.text"},"ts":1314656704000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"AryehGregor: so what if you split text between the boundary points","msgtype":"m.text"},"ts":1314656705000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"If the parent is null?  Exactly what Gecko does now: any boundary point after the offset you're splitting at is clamped to the end of the node.","msgtype":"m.text"},"ts":1314656760000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"There's no special case then.","msgtype":"m.text"},"ts":1314656761000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1314656820000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1314656821000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"a bit hard to read but ok","msgtype":"m.text"},"ts":1314656822000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I mean the draft","msgtype":"m.text"},"ts":1314656823000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"What wording would you suggest?","msgtype":"m.text"},"ts":1314656880000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"well, I was assuming that since there is the \"If old node's parent is not null\" case, there would be also the \"is null\" case","msgtype":"m.text"},"ts":1314656940000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Would you assume that when reading code?  If it doesn't give the case, it's not there.","msgtype":"m.text"},"ts":1314657000000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"This is really just pseudocode.","msgtype":"m.text"},"ts":1314657001000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"well, there is the other case defined","msgtype":"m.text"},"ts":1314657002000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"\"User agents must run the following steps whenever they execute splitText()\"","msgtype":"m.text"},"ts":1314657003000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Right, just sometimes they do nothing.  Of course, the horrible way this is written is a hack to work around the fact that we haven't merged it into DOM Core yet.","msgtype":"m.text"},"ts":1314657060000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"well, they need to update the boundary points when parent is null","msgtype":"m.text"},"ts":1314657061000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"that is not \"do nothing\"","msgtype":"m.text"},"ts":1314657062000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"It's \"do nothing extra\".","msgtype":"m.text"},"ts":1314657120000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"the draft doesn't say that do something, but when splitText() is called, do something extra","msgtype":"m.text"},"ts":1314657121000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"It says UAs have to run the steps as though they were written at the end of splitText().","msgtype":"m.text"},"ts":1314657180000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Earlier than that, splitText() replaced data and probably inserted a node.","msgtype":"m.text"},"ts":1314657181000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"That already triggered different mutation rules.","msgtype":"m.text"},"ts":1314657182000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"I have a note there that points this out explicitly: \"Thus they must be executed after following the range mutation rules for any changes to data or insertions that the method caused.\"","msgtype":"m.text"},"ts":1314657183000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Also, one of the steps is \"Let original offset equal what the boundary point's offset was before this splitText invocation replaced the data of node.\"  That doesn't make any sense if you didn't already have range mutation rules running beforehand.","msgtype":"m.text"},"ts":1314657240000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"I'd ask for suggestions to make this clearer, but it will be moot once it's merged into DOM Core.","msgtype":"m.text"},"ts":1314657241000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"a lot clearer would be to add just the case for null parent","msgtype":"m.text"},"ts":1314657300000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"or at least a link","msgtype":"m.text"},"ts":1314657301000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"A link to what?","msgtype":"m.text"},"ts":1314657360000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"to the part of the spec which says what to do when parent is null","msgtype":"m.text"},"ts":1314657361000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"You do nothing extra when the parent is null.","msgtype":"m.text"},"ts":1314657362000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"this is about readability of the spec","msgtype":"m.text"},"ts":1314657420000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"not correctness","msgtype":"m.text"},"ts":1314657421000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Readability is a mess because it's trying to hack extra steps onto DOM Core when DOM Core doesn't provide hooks for it.","msgtype":"m.text"},"ts":1314657422000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"This will be solved when DOM Range is merged into DOM Core, so this will just be an extra step or two in the splitText() algorithm itself.","msgtype":"m.text"},"ts":1314657423000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"}
]