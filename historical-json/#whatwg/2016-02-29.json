[
{"content":{"body":"nox: for any future PRs to DOM you should now be able to create branches directly on the main repository (please don't push to master)","msgtype":"m.text"},"ts":1456743767000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: the advantage of that is that the person committing (mostly me I guess) can rebase before landing, resulting in automatic closure of the PR and some automatic cross-referencing of the commit to the PR","msgtype":"m.text"},"ts":1456743806000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ok cool.","msgtype":"m.text"},"ts":1456743925000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: https://github.com/whatwg/html/pull/748 reviews for this one?, i am unclear about some of the sections","msgtype":"m.text"},"ts":1456744024000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"ritsyy: looking","msgtype":"m.text"},"ts":1456744216000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ritsyy: reviewed","msgtype":"m.text"},"ts":1456744490000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ritsyy: yes, renaming it, thanks!","msgtype":"m.text"},"ts":1456744539000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"ritsyy: thanks for the ping, if you pushed that commit a few days ago, remember to say something in the issue, otherwise reviewers won't get a notification","msgtype":"m.text"},"ts":1456744548000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: no no i just did the commit, i thought to ping you here, will comment there too after this commit","msgtype":"m.text"},"ts":1456744602000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"ah okay","msgtype":"m.text"},"ts":1456744685000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: might be worth to switch to gitlab, it has many features that you seem to want (rebase in PRs, protected branches and permissions let some people push to non-protected branches only, etc)","msgtype":"m.text"},"ts":1456744747000,"senderName":"ralt","senderId":"ralt@irc"},
{"content":{"body":"or at least, look at gitlab :)","msgtype":"m.text"},"ts":1456744754000,"senderName":"ralt","senderId":"ralt@irc"},
{"content":{"body":"ralt: wow cool, I want that, but with the community from GitHub","msgtype":"m.text"},"ts":1456744960000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It was already hard to imagine we're the only ones with these issues","msgtype":"m.text"},"ts":1456744984000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://github.com/tabatkins/bikeshed/commit/152f137ad3946c665c8a78648ac0d803369642b5","msgtype":"m.text"},"ts":1456747253000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"That's the bug I think.","msgtype":"m.text"},"ts":1456747257000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: https://github.com/tabatkins/bikeshed/pull/611","msgtype":"m.text"},"ts":1456747557000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: OOOOOH, I think I got a workaround to unblock DOM.","msgtype":"m.text"},"ts":1456752466000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Call TabAtkins?","msgtype":"m.text"},"ts":1456752496000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Nah.","msgtype":"m.text"},"ts":1456752546000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"And I failed. :(","msgtype":"m.text"},"ts":1456752552000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: I hoped &equals; would do the trick given it's just regexps. :P","msgtype":"m.text"},"ts":1456752568000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: We can also do 'src= \"insanity-wolf\"' for now.","msgtype":"m.text"},"ts":1456752684000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Nah, let's wait","msgtype":"m.text"},"ts":1456752709000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins discouraged me to work around flaws","msgtype":"m.text"},"ts":1456752728000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"K.","msgtype":"m.text"},"ts":1456752780000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"We should set up CI for the bikeshed specs so that (a) we don't have to check in generated code; (b) we can pin to a specific Bikeshed version.","msgtype":"m.text"},"ts":1456759209000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I envision a metadata file in the repo (maybe .travis.yml, maybe something else) that contains the Bikeshed commit hash that the spec is meant to be built with","msgtype":"m.text"},"ts":1456759233000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"And you can update that every once in a while","msgtype":"m.text"},"ts":1456759237000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I would not mind such a setup","msgtype":"m.text"},"ts":1456759971000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess the important question is whether we have any desire to review BS output. Probably not really, because it's just too noisy.","msgtype":"m.text"},"ts":1456760343000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: it's somewhat useful to do, especially since I often type <span> instead of <a>, but it's very noisy indeed","msgtype":"m.text"},"ts":1456760732000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TIL about the word \"excrescence\"","msgtype":"m.text"},"ts":1456761778000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"1 of 1 matches","msgtype":"m.text"},"ts":1456762596000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip++","msgtype":"m.text"},"ts":1456763013000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: I tried quite hard to find something to complain about, but the truth is you write tests almost exactly like I would aspire to :)","msgtype":"m.text"},"ts":1456763091000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"Ms2ger: if you're in a good mood, the top two in https://github.com/w3c/web-platform-tests/pulls/foolip need review","msgtype":"m.text"},"ts":1456763162000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"does actually know what mood has to do with it...","msgtype":"m.emote"},"ts":1456763187000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"doesn't!","msgtype":"m.text"},"ts":1456763192000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj, r+ and r+ with rebase and nit","msgtype":"m.text"},"ts":1456763391000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"While we're talking tests... is https://github.com/yaycmyk/jsdom/blob/label-input-activation/test/web-platform-tests/to-upstream/html/semantics/forms/the-label-element/proxy-click-to-associated-element.html#L24-L29 the correct pattern for testing events, or should we be using EventWatcher maybe, or...?","msgtype":"m.text"},"ts":1456763715000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"EventWatcher seems pretty heavyweight for single events I guess","msgtype":"m.text"},"ts":1456763739000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wonders if nox has studied Shadow DOM yet","msgtype":"m.emote"},"ts":1456763765000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Not yet.","msgtype":"m.text"},"ts":1456763773000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"But given I implemented <template>, I probably will at some point.","msgtype":"m.text"},"ts":1456763784000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic, assert_true(true); is dumb","msgtype":"m.text"},"ts":1456763810000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: just do t.done()?","msgtype":"m.text"},"ts":1456763825000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic, input.addEventListener(\"click\", t.step_func_done()) is probably what I'd use","msgtype":"m.text"},"ts":1456763835000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: hmm, that's not documented in http://testthewebforward.org/docs/testharness-library.html#promise-tests","msgtype":"m.text"},"ts":1456763873000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You're correct","msgtype":"m.text"},"ts":1456763907000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I'll see if I can pull off a PR from the web interface","msgtype":"m.text"},"ts":1456763947000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: ETA on structured clone?","msgtype":"m.text"},"ts":1456763968000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: thanks!","msgtype":"m.text"},"ts":1456763976000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"annevk: within the hour","msgtype":"m.text"},"ts":1456763977000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ms2ger: oh lol I see why they did assert_true. The docs told them to.","msgtype":"m.text"},"ts":1456763988000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ms2ger: \"The above example can be rewritten as:\"","msgtype":"m.text"},"ts":1456763998000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I want to make the change I suggested in the PR, but other than that I think it's good, but who knows, you might find something again ðŸ˜ƒ","msgtype":"m.text"},"ts":1456764025000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Huh","msgtype":"m.text"},"ts":1456764025000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Domenic: in the PR thread*","msgtype":"m.text"},"ts":1456764036000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I will change it to assert_equals(1+1, 2)","msgtype":"m.text"},"ts":1456764088000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic, are you updating the docs?","msgtype":"m.text"},"ts":1456764488000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: https://github.com/w3c/testharness.js/pull/186","msgtype":"m.text"},"ts":1456764525000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic, reviewed","msgtype":"m.text"},"ts":1456764671000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: dang, now I have to go make changes using not the web interface :P. Will fix after reviewing this HTML PR...","msgtype":"m.text"},"ts":1456764690000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic, I'll review again tomorrow if nobody beats me to it :)","msgtype":"m.text"},"ts":1456764731000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: I'm working on it this morning, don't worry.","msgtype":"m.text"},"ts":1456765826000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"nox's PR seems hacky but workable, I'll merge in a few minutes.","msgtype":"m.text"},"ts":1456765972000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: It doesn't pass tests.","msgtype":"m.text"},"ts":1456765981000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"TabAtkins: I'm not sure what's that thing is supposed to match btw, because I don't see =type= in that shorthands file.","msgtype":"m.text"},"ts":1456765996000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Yeah, that's why I can't merge from my phone.","msgtype":"m.text"},"ts":1456766002000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Haven't updated the docs yet, was waiting for any problems to shake out. ðŸ˜€","msgtype":"m.text"},"ts":1456766026000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ugh","msgtype":"m.text"},"ts":1456766522000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: it basically delayed fixing stuff in DOM by two days, that's not a great way to operate","msgtype":"m.text"},"ts":1456766536000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: please fix the way you develop bikeshed","msgtype":"m.text"},"ts":1456766543000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: const a = []; Object.defineProperty(a, \"length\", { get() { return 5; } }) throws","msgtype":"m.text"},"ts":1456766786000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I based my code on similar-looking code in ECMAScript","msgtype":"m.text"},"ts":1456766808000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: hmm, I don't think it should, per spec...","msgtype":"m.text"},"ts":1456766826000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: ah I see, length is non-configurable...","msgtype":"m.text"},"ts":1456766855000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: OK, that part looks good","msgtype":"m.text"},"ts":1456766883000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: should we go through the placeholder stuff here?","msgtype":"m.text"},"ts":1456767121000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: or is it clear now?","msgtype":"m.text"},"ts":1456767126000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it is definitely not clear, but I will try re-reading it with your new explanation in mind and suggesting better text...","msgtype":"m.text"},"ts":1456767144000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: this is basically what the old text had too","msgtype":"m.text"},"ts":1456767168000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: though replacing the placeholder with the transferred object lived in postMessage()","msgtype":"m.text"},"ts":1456767181000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: well, I didn't review the old text :)","msgtype":"m.text"},"ts":1456767185000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: sure, but basically a lot of improvements are being blocked on this now","msgtype":"m.text"},"ts":1456767217000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: could it be rephrased as \"Everywhere placeholderResult shows up inside clone, replace it with transferResult\"?","msgtype":"m.text"},"ts":1456767274000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: basically if you have an object-graph in your engine, you want to take the placeholder object and replace it directly with the transferred object","msgtype":"m.text"},"ts":1456767275000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: right but e.g. does that mean crawling the graph with GetOwnProperties etc.?","msgtype":"m.text"},"ts":1456767298000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: no, because then if it didn't show up inside clone it wouldn't be replaced","msgtype":"m.text"},"ts":1456767313000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: that is the main part of my question. where else can it show up.","msgtype":"m.text"},"ts":1456767348000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I'm not sure what GetOwnProperties is or how it relates","msgtype":"m.text"},"ts":1456767352000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: it's returned in [[TransferList]]","msgtype":"m.text"},"ts":1456767366000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: hmm, maybe it cannot show up there, those don't use memory at the moment","msgtype":"m.text"},"ts":1456767395000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: right that's step 5.4. But in 5.3, which we are discussing, it isn't in outputTransferList","msgtype":"m.text"},"ts":1456767408000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I was thinking that objects ending up in [[TransferList]] could have references, but that's currently not possible","msgtype":"m.text"},"ts":1456767456000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: that might change though if we start passing memory to [[Transfer]] in the future for some new use case","msgtype":"m.text"},"ts":1456767474000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: let's worry about that then?","msgtype":"m.text"},"ts":1456767484000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: sure, I can add a comment under [[Transfer]] similar to what I have under [[Clone]]","msgtype":"m.text"},"ts":1456767536000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"What kind of comment?","msgtype":"m.text"},"ts":1456767552000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh you mean <!-- comment","msgtype":"m.text"},"ts":1456767556000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"<!-- if we add memory, we need to change so and so -->","msgtype":"m.text"},"ts":1456767568000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Thanks.","msgtype":"m.text"},"ts":1456767586000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"This pushes the major imprecision into the single phrase \"inside clone\", which we can live with","msgtype":"m.text"},"ts":1456767597000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ideally we'd specify exactly how you go crawling the object graph and replacing these placeholders. Or figure out what implementations actually do.","msgtype":"m.text"},"ts":1456767619000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"All right, nox's fix worked, dom builds cleanly now.","msgtype":"m.text"},"ts":1456767621000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I see, I thought that was more or less a given since we created placeholder objects inside the StructuredCloneWithTransfer algorithm and that algorithm only ever returns clone/transferList or an exception","msgtype":"m.text"},"ts":1456767645000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: ^ still not entirely clear to me why you think it's unclear now, but I guess I can add \"in /clone/\"","msgtype":"m.text"},"ts":1456767729000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I am trying to figure out if there are observable consequences to different ways of doing this replacement (because there are many: different ways of graph traversal; different ways of getting the list of properties; etc.) but I am not sure yet one way or the other.","msgtype":"m.text"},"ts":1456767801000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I suspect this actually happens at a much lower level than getting properties in engines","msgtype":"m.text"},"ts":1456767837000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"They have these placeholder objects allocated with some pointer, and they just make that point someplace else","msgtype":"m.text"},"ts":1456767875000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Right, I guess so.","msgtype":"m.text"},"ts":1456767887000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"nox: Unfortunately using entities doesn't avoid the shorthands, as all but a few run over the parsed DOM, not raw text, so they see the entity already substituted. Haven't come up with a good way around that yet. :/","msgtype":"m.text"},"ts":1456767891000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Yeah understood that afterwards. :) I saw regexps and just thought bikeshed was crazier than I had thought initially. Sorry for that. :P","msgtype":"m.text"},"ts":1456767932000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic: it would only be observable if you could get cause code to run in targetRealm while cloning, which should be impossible","msgtype":"m.text"},"ts":1456767963000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I agree that it would be nice if we had better language to define this, but I don't think ECMAScript gives low-level access to allocated objects","msgtype":"m.text"},"ts":1456767995000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: I'd actually thought of the case that DOM hit, but remembered that it wouldn't be hit by normal attributes. I did not consider code examples. ^_^","msgtype":"m.text"},"ts":1456768031000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: maybe I should ask in #jslang if anyone has ideas","msgtype":"m.text"},"ts":1456768054000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Anyway, DOM is being put into the integration suite now, and I'm gonna put a bunch more in too, so it's unlikely I'll break anything without noticing again.","msgtype":"m.text"},"ts":1456768066000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: thank you, dom.bs and url.bs are the main pain points","msgtype":"m.text"},"ts":1456768292000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: notifications.bs seems to get by, mostly","msgtype":"m.text"},"ts":1456768299000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: asked there, but no high hopes","msgtype":"m.text"},"ts":1456768329000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: kk, I'll put url.bs in too. No reason not to, testing is already slow enough that slowing it down by another minute or so is fine.","msgtype":"m.text"},"ts":1456768334000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: just clarifying that it's scoped to clone is enough for now for me","msgtype":"m.text"},"ts":1456768340000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: you might want to improve those build times :-P","msgtype":"m.text"},"ts":1456768365000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Man don't I know it.  Got a few things lined up to work on for that, then gonna dive in and see what else is slowing things down.","msgtype":"m.text"},"ts":1456768389000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Got a decent profiler already hooked up, so it's just a matter of putting in the time.","msgtype":"m.text"},"ts":1456768410000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hi. Is this a valid link? <a href=#shared-internal-slot:-[[crossoriginpropertydescriptormap]]>...</a>","msgtype":"m.text"},"ts":1456769639000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"think so","msgtype":"m.text"},"ts":1456769725000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Shouldn't square brackets be %-encoded?","msgtype":"m.text"},"ts":1456769752000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"IZh: I guess per https://url.spec.whatwg.org/#syntax-url-fragment they should","msgtype":"m.text"},"ts":1456769817000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"IZh: that might be hard to fix though","msgtype":"m.text"},"ts":1456769844000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Well, the spec has only one wrong anchor.","msgtype":"m.text"},"ts":1456769870000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"IZh: it's generated, that's the problem","msgtype":"m.text"},"ts":1456769900000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"IZh: although I suppose we could just override the id of that header and forget about it","msgtype":"m.text"},"ts":1456769915000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: But why not to fix escaping code? I suppose it must already %-encode non-ASCII symbols. Why not just add the square brackets to the set?","msgtype":"m.text"},"ts":1456769969000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"annevk: I'm not url-encoding anchors in several spots, I'm happy to go through and fix that.","msgtype":"m.text"},"ts":1456769985000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(I haven't needed to be precise with that, because Bikeshed only generates IDs that are url-safe without any escaping needed.)","msgtype":"m.text"},"ts":1456770056000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"This is Wattsi though :)","msgtype":"m.text"},"ts":1456770166000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It seems that https is not supported on IPv6 address of whatwg.org.","msgtype":"m.text"},"ts":1456770292000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"IZh: as I said, that might be tricky","msgtype":"m.text"},"ts":1456770433000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"IZh: file an issue against whatwg/wattsi","msgtype":"m.text"},"ts":1456770444000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"IZh: or a PR ðŸ˜ƒ","msgtype":"m.text"},"ts":1456770450000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: if you can take another look now maybe we can land it today","msgtype":"m.text"},"ts":1456770603000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Filed #22.","msgtype":"m.text"},"ts":1456770691000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"IZh: thank you, is this breaking anything for you or just something you noticed?","msgtype":"m.text"},"ts":1456770801000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Just something another validator is barking on. :-)","msgtype":"m.text"},"ts":1456770860000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"annevk: I'm periodically validating the spec. :-)","msgtype":"m.text"},"ts":1456770891000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"Because the spec has to conform to itself.","msgtype":"m.text"},"ts":1456770932000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"Domenic: would \"across event loops, i.e., ...\" work?","msgtype":"m.text"},"ts":1456771056000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I mainly don't like the \":\"","msgtype":"m.text"},"ts":1456771062000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah it would. I like the colon slightly more but both should be ok","msgtype":"m.text"},"ts":1456771118000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Heading upstairs from lunch now, we can indeed probably land this today","msgtype":"m.text"},"ts":1456771168000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: or \"I.e., they support being cloned across ...\"","msgtype":"m.text"},"ts":1456771171000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah although I prefer to start sentences with \"that is\" instead of \"I.e.\"","msgtype":"m.text"},"ts":1456771204000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1456771247000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: Well Bikeshed has the same issue, so I'm still filing an issue on myself. ^_^","msgtype":"m.text"},"ts":1456771666000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: thanks so much for all the reviewing","msgtype":"m.text"},"ts":1456772355000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks for doing this!! it's so much nicer.","msgtype":"m.text"},"ts":1456772373000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: ECMAScript prose is rather addictive","msgtype":"m.text"},"ts":1456772391000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You can close https://github.com/whatwg/html/issues/575 and https://github.com/whatwg/html/issues/557 now if you want :)","msgtype":"m.text"},"ts":1456772412000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"haha yeah I do like the precision","msgtype":"m.text"},"ts":1456772421000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"how many times should I write the same function before I propose a convenience version in the spec?","msgtype":"m.text"},"ts":1456773695000,"senderName":"wanderview_pto","senderId":"wanderview_pto@irc"},
{"content":{"body":"in this case, a promise-returning service worker wait_for_state()","msgtype":"m.text"},"ts":1456773695000,"senderName":"wanderview_pto","senderId":"wanderview_pto@irc"},
{"content":{"body":"That sounds like a function very useful for tests and not that useful for other code?","msgtype":"m.text"},"ts":1456773847000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1456774033000,"senderName":"wanderview_pto","senderId":"wanderview_pto@irc"},
{"content":{"body":"I dunno, are you writing tests or demos?","msgtype":"m.text"},"ts":1456774211000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"tests","msgtype":"m.text"},"ts":1456774272000,"senderName":"wanderview_pto","senderId":"wanderview_pto@irc"},
{"content":{"body":"tests + demos for me; I'd love that too.","msgtype":"m.text"},"ts":1456774402000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"wanderview_pto: I think we talked about that very early on, maybe decided not to because the \"sw-as-progressive-enhancement\" scenario shouldn't use it.","msgtype":"m.text"},"ts":1456774688000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"But still, +1","msgtype":"m.text"},"ts":1456774771000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: I dunno... I can think of progressive use cases... something like navigator.serviceWorker.register(script).then(swr => swr.installing.waitFor('active')).then(_ => enableOfflineUI())","msgtype":"m.text"},"ts":1456774793000,"senderName":"wanderview_pto","senderId":"wanderview_pto@irc"},
{"content":{"body":"you only get the offline UI if you can register a service worker that goes acitve","msgtype":"m.text"},"ts":1456774806000,"senderName":"wanderview_pto","senderId":"wanderview_pto@irc"},
{"content":{"body":"Right.","msgtype":"m.text"},"ts":1456774810000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"although I guess for 'active' we already have the .ready promise","msgtype":"m.text"},"ts":1456774818000,"senderName":"wanderview_pto","senderId":"wanderview_pto@irc"},
{"content":{"body":"I find the .ready promise a bit weird, tbh","msgtype":"m.text"},"ts":1456774840000,"senderName":"wanderview_pto","senderId":"wanderview_pto@irc"}
]