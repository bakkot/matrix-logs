[
{"content":{"body":"TabAtkins: about the highlighter, --output html seems to not work","msgtype":"m.text"},"ts":1528161364000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"echo '[\"pre\", {}, \"interface Foo {};\"]' | python2.7 ./highlighter/__init__.py --output html webidl","msgtype":"m.text"},"ts":1528161372000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"...still emits JSON output","msgtype":"m.text"},"ts":1528161383000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Do folks think https://github.com/w3c/resource-hints/issues/74 is the \"right\" place to specify the `Purpose` header sent by prefetch requests, or would another place be better, like Fetch or an IETF draft?","msgtype":"m.text"},"ts":1528198747000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: I suspect it needs some Fetch integration","msgtype":"m.text"},"ts":1528198944000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: in particular, it seems this is another header that violates the same-origin policy?","msgtype":"m.text"},"ts":1528198974000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's probably true that prefetch in general could use some Fetch integration. I don't immediately see the same-origin violation here; what are you thinking of?","msgtype":"m.text"},"ts":1528199047000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: it's a non-safelisted header included in cross-origin requests","msgtype":"m.text"},"ts":1528199088000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://fetch.spec.whatwg.org/#cors-safelisted-request-header in particular?","msgtype":"m.text"},"ts":1528199113000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: now arguably this is a little muddy, as certain protocol headers such as Host are not safelisted either, but basically each addition beyond what we did in 2000 or so I'd count","msgtype":"m.text"},"ts":1528199149000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: yeah","msgtype":"m.text"},"ts":1528199174000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Thanks. Would you put the full specification of the header in Fetch, or just have us make sure to add it to the appropriate lists there?","msgtype":"m.text"},"ts":1528199211000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: it doesn't matter much since the value isn't attacker-controlled (and when it is, there'll be a preflight), but still","msgtype":"m.text"},"ts":1528199217000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: something similar to Sec-Metadata I suspect","msgtype":"m.text"},"ts":1528199234000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(although that might not be fully defined yet)","msgtype":"m.text"},"ts":1528199251000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think Sec-Metadata is still in the sketch phase, while Purpose is actually shipped without the matching specification.","msgtype":"m.text"},"ts":1528199280000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: I guess I'd expect something similar to https://github.com/whatwg/fetch/pull/751","msgtype":"m.text"},"ts":1528199298000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: check if request's initiator is \"prefetch\", then append it","msgtype":"m.text"},"ts":1528199337000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: maybe also prerender?","msgtype":"m.text"},"ts":1528199345000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yep, whichever actually controls it in Chrome. There's also a rumble of sending it from browser-initiated requests (https://groups.google.com/a/chromium.org/d/topic/blink-dev/IT3pYF5B_p4/discussion), but specifying that probably shouldn't go in Fetch.","msgtype":"m.text"},"ts":1528199564000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: browser-initiated fetches ideally still go through Fetch","msgtype":"m.text"},"ts":1528199682000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ok, good to know.","msgtype":"m.text"},"ts":1528199694000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: otherwise it's easy to accidentally bypass SOP","msgtype":"m.text"},"ts":1528199710000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: sleevi might not necessarily agree though, https://github.com/whatwg/fetch/issues/530 has a bunch of details","msgtype":"m.text"},"ts":1528199744000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Anyone any idea why https://software.hixie.ch/utilities/js/live-dom-viewer/saved/5987 does not work? In particular, they/them are supposed to be shared with Singular/Plural row","msgtype":"m.text"},"ts":1528202748000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Is it just too complicated to allocate the cells and therefore browsers / the spec give up?","msgtype":"m.text"},"ts":1528202786000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think per spec I'm doing the right thing (and the conformance checker agrees), but browsers are sad","msgtype":"m.text"},"ts":1528203329000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: isn't it, though? set a height to 3em the they cell to visualize it","msgtype":"m.text"},"ts":1528203882000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"zcorpan_: I'm not sure I follow","msgtype":"m.text"},"ts":1528203982000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan_: I filed https://github.com/whatwg/html/issues/3738 meanwhile","msgtype":"m.text"},"ts":1528203990000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: commented","msgtype":"m.text"},"ts":1528204103000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"zcorpan_: why would it be collapsed?","msgtype":"m.text"},"ts":1528204216000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: cells shrink-wrap and it doesn't need more space than that?","msgtype":"m.text"},"ts":1528204244000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"Yeah I guess, that's rather weird","msgtype":"m.text"},"ts":1528204256000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"you can see a slight jigger caused by the cell spacing","msgtype":"m.text"},"ts":1528204279000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"I guess there's still the magic issue with the spec, but it does seem this \"works as intended\"","msgtype":"m.text"},"ts":1528204300000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"just a heads up but I'm PR'ing Node to add a JS API for accessing the MIME Parsing API from https://mimesniff.spec.whatwg.org/","msgtype":"m.text"},"ts":1528206038000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: did you see https://github.com/whatwg/mimesniff/issues/43?","msgtype":"m.text"},"ts":1528206365000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I had missed that issue but saw the package Domenic made. I'm still not keen on involving myself w/ whatwg as I've stated in the past though","msgtype":"m.text"},"ts":1528206416000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"the PR I made closely resembles Domenic's idea but has some minor differences. I am not a browser implementor and haven't had good experiences in this arena so it is more of a heads up than me wanting to get involved in this sphere currently","msgtype":"m.text"},"ts":1528206479000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"most of the difference is wanting to match URLSearchParams more closely I think","msgtype":"m.text"},"ts":1528206513000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"That sounds wrong, since that allows for duplicates and this doesn't, afaik","msgtype":"m.text"},"ts":1528206551000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: i had .getAll originally but pulled it before I PR'd due to it not being used anywhere I can see right now. The parser I wrote is exposing all the parameters though, it is just not available once I turn it into a JS representation","msgtype":"m.text"},"ts":1528206623000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I don't know what that means","msgtype":"m.text"},"ts":1528206682000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If it means you support duplicate names, it's not an implementation of the standard you referenced","msgtype":"m.text"},"ts":1528206728000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the C++ parser in that PR takes `foo/bar;a=1;a=2` and exposes both pairs of `a=1` and `a=2`. The API using the parser though only exposes `a=1`","msgtype":"m.text"},"ts":1528206761000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"annevk: correct in a sense, but I'm not sure why multiple parameters aren't supported in MIME, I just prevented exposing the duplicates to user code for now. all existing stuff I saw only uses the first parameter of a given name so I think it was written to drop duplicates for existing matching usage, but there doesn't seem to be a reason why to expose them, since you have to parse the duplicates anyway","msgtype":"m.text"},"ts":1528206889000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: does Node.js's HTML parser expose duplicate attributes?","msgtype":"m.text"},"ts":1528206921000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Node doesn't have an HTML parser, but it does expose duplicate query parameters","msgtype":"m.text"},"ts":1528206946000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"and http headers too","msgtype":"m.text"},"ts":1528206959000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"For both of those it's explicitly part of the data model","msgtype":"m.text"},"ts":1528206976000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That's a pretty significant difference","msgtype":"m.text"},"ts":1528206987000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: do you have a clear reference to where something says they are not part of the data model when they are duplicates, i spidered out from https://tools.ietf.org/html/rfc6838#section-4.3 but may have missed something but https://tools.ietf.org/html/rfc2045 doesn't note anything that I saw","msgtype":"m.text"},"ts":1528207177000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"per the WHATWG parser it does explicitly drop duplicates, but that doesn't seem to be a requirement of MIME itself","msgtype":"m.text"},"ts":1528207221000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: I'm not sure it can be directly derived from RFC2046, but given that parameters are unordered and all implementations handle them as maps, I think it's highly likely that was the intent","msgtype":"m.text"},"ts":1528207713000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bradleymeck: there's also no hint that I know of that indicates they are to be multimaps","msgtype":"m.text"},"ts":1528207727000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the whatwg tests actually require the parameters to be ordered","msgtype":"m.text"},"ts":1528207736000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"but that might just be a symptom of how they are written","msgtype":"m.text"},"ts":1528207762000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"if you want to make a comment that duplicates should not be exposed, feel free to do so on the PR; currently they are not exposed in a way that users could access them though.","msgtype":"m.text"},"ts":1528207817000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: https://tools.ietf.org/html/rfc2045#section-5 at least says it's a set","msgtype":"m.text"},"ts":1528207828000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"seems good enough to make a statement that we should not multi-map it, still a bit vague on if the set is based upon the entire value+key or just key but 🤷 I'll comment on PR with this restriction that this API should not be extended","msgtype":"m.text"},"ts":1528207934000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: there's other differences too, such as the WHATWG standard handling text/html; per how servers expect clients to do so","msgtype":"m.text"},"ts":1528208012000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: is there something that needs to be done beyond following https://mimesniff.spec.whatwg.org/ 's algorithm for that?","msgtype":"m.text"},"ts":1528208056000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I was running all my tests against the data in https://github.com/web-platform-tests/wpt/tree/master/mimesniff/mime-types/resources","msgtype":"m.text"},"ts":1528208130000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: I meant relative to the RFC","msgtype":"m.text"},"ts":1528208174000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah, yes, thats largely why I am not going with RFC as the parsing algorithm.","msgtype":"m.text"},"ts":1528208194000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: since if you rather follow that and its data model, this is not the way to go","msgtype":"m.text"},"ts":1528208196000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1528208200000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"data model restriction on WHATWG parser is fine, just seemed a restriction by implementation not by any problems with the model if you only use the first declared parameter of a given name to my knowledge","msgtype":"m.text"},"ts":1528208275000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"requires that the parameters be ordered if you do that, but the whatwg tests fail if you produce things out of order","msgtype":"m.text"},"ts":1528208295000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I wonder if we should consider changing that, but it doesn't really seem worth it since then we'd either have to sort or randomize","msgtype":"m.text"},"ts":1528208448000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But I guess we'd be slightly more interoperable with other MIME types","msgtype":"m.text"},"ts":1528208480000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"why not change the `output` to be an `{ type: string, subtype: string, parameters { [key: string]: value: string }`? wouldn't that avoid randomizing or sorting?","msgtype":"m.text"},"ts":1528208537000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I could PR that, but thought it might be a bit of a burden for people using the existing tests","msgtype":"m.text"},"ts":1528208559000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: there's a number of places that need to serialize","msgtype":"m.text"},"ts":1528208596000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"could include a possible output per test and ensure both `input` and `output` produce the same type/subtype/parameters when parsed (against a \"golden\" parsed form like the above object type). Seems a bit odd though, since serializing will make things ordered in a sense anyway","msgtype":"m.text"},"ts":1528208862000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: right, for serializing you'd need sorting (so you can rely on order) or randomizing (so nobody relies on order)","msgtype":"m.text"},"ts":1528208972000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"you could also just have a few duplicates I think, maybe make the serialized form an array : [`a/b;foo=1;bar=2`, `a/b;bar=2;foo=1`] and let test harnesses ensure all possible serialized forms match expectations?","msgtype":"m.text"},"ts":1528209203000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I'm not sure how that would meet the requirements","msgtype":"m.text"},"ts":1528209267000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if your `input` has to match multiple `output`s that are in different order wouldn't that ensure that it is unordered?","msgtype":"m.text"},"ts":1528209390000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"MikeSmith: Yes, it emits a JSON object. But the value of the \"html\" key is a string of HTML, not of JSON-encoded HTML.","msgtype":"m.text"},"ts":1528210193000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: so what does --output html do?","msgtype":"m.text"},"ts":1528210217000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1528210227000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"What I just said, controls what format the \"html\" key is in.","msgtype":"m.text"},"ts":1528210231000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1528210234000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I was hoping to get just HTML back","msgtype":"m.text"},"ts":1528210262000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the consuming code I wrote in wattsi just expects HTML","msgtype":"m.text"},"ts":1528210277000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I need to emit the HTML and CSS separately so you don't spam CSS into the spec for every single highlight.","msgtype":"m.text"},"ts":1528210278000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1528210284000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1528210295000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"well the bigger problem I’ve realized I have is that all the HTML examples in the HTML spec use &lt; instead of \"<\"","msgtype":"m.text"},"ts":1528210346000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"because, you know, they’re in an HTML document","msgtype":"m.text"},"ts":1528210358000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but Pygments apparently doesn’t recognize character entities","msgtype":"m.text"},"ts":1528210392000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"That shouldn't be a problem? Your HTML parser should have turned them into text by the time you read the DOM and construct the JSON.","msgtype":"m.text"},"ts":1528210413000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah that '","msgtype":"m.text"},"ts":1528210426000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah that’s not the way wattsi works","msgtype":"m.text"},"ts":1528210451000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I mean that if your input is `&lt;pre>`, then by the time you read the DOM you should just get out \"<pre>\", right?","msgtype":"m.text"},"ts":1528210451000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Sigh.","msgtype":"m.text"},"ts":1528210456000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I don’t read the DOM","msgtype":"m.text"},"ts":1528210466000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I don’t re-parse the source","msgtype":"m.text"},"ts":1528210473000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"at the point where I emit this content, wattsi just sees strings","msgtype":"m.text"},"ts":1528210521000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"How much escapes you got? Just &lt;?","msgtype":"m.text"},"ts":1528210608000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I think so","msgtype":"m.text"},"ts":1528210637000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it is whatever escapes were used by whoever authored the particular example","msgtype":"m.text"},"ts":1528210664000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think by convention everybody only escapes the \"<\"","msgtype":"m.text"},"ts":1528210689000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"because that’s the only one necessary","msgtype":"m.text"},"ts":1528210699000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"example:","msgtype":"m.text"},"ts":1528210710000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"  [","msgtype":"m.text"},"ts":1528210713000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"    \"pre\",","msgtype":"m.text"},"ts":1528210713000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"    {","msgtype":"m.text"},"ts":1528210713000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"      \"id\": \"intro-early-example\"","msgtype":"m.text"},"ts":1528210713000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"    },","msgtype":"m.text"},"ts":1528210713000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"    \"&lt;!DOCTYPE html>\\n&lt;html lang=\\\"en\\\">\\n &lt;head>\\n  &lt;title>Sample page&lt;/title>\\n &lt;/head>\\n &lt;body>\\n  &lt;h1>Sample page&lt;/h1>\\n  &lt;p>This is a &lt;a href=\\\"demo.html\\\">simple&lt;/a> sample.&lt;/p>\\n  &lt;!-- this is a comment -->\\n &lt;/body>\\n&lt;/html>\"","msgtype":"m.text"},"ts":1528210715000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"  ]","msgtype":"m.text"},"ts":1528210720000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"If it's a finite set, I can give you an option for a quick unescape.","msgtype":"m.text"},"ts":1528210765000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1528210772000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think just &lt;","msgtype":"m.text"},"ts":1528210781000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"anyway to be clear, even in terms of the DOM, the contents of all the examples are just text nodes","msgtype":"m.text"},"ts":1528210814000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"inside <pre> elements","msgtype":"m.text"},"ts":1528210826000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1528210844000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I thought you wanted to highlight the webidl parts too?","msgtype":"m.text"},"ts":1528210870000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1528210875000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Which have <a>, <dfn>, etc.","msgtype":"m.text"},"ts":1528210878000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1528210884000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that is the exception","msgtype":"m.text"},"ts":1528210889000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and that is the other big problem I ran into","msgtype":"m.text"},"ts":1528210908000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Yeah, I thought that was the whole point of adapting my tool, as there are lots of highlighters that don't understand HTML but can just handle a string.","msgtype":"m.text"},"ts":1528210917000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"the highlighter does not seem to handle those as expected","msgtype":"m.text"},"ts":1528210923000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"[ \"pre\", { \"class\": \"idl\" }, \"[Exposed=Window,\\n \", [ \"a\", { \"href\": \"#htmlconstructor\", \"id\": \"the-menu-element:htmlconstructor\" }, \"HTMLConstructor\" ], \"]\\ninterface \", [ \"dfn\", { \"id\": \"htmlmenuelement\" }, \"HTMLMenuElement\" ], \" : \", [ \"a\", { \"href\": \"#htmlelement\", \"id\": \"the-menu-element:htmlelement\" }, \"HTMLElement\" ], \" {\\n};\" ],","msgtype":"m.text"},"ts":1528210990000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"or simpler case:","msgtype":"m.text"},"ts":1528211053000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"echo '[ \"pre\", { \"class\": \"idl\" }, \"[NoInterfaceObject]\\ninterface \", [ \"dfn\", { \"id\": \"noncedelement\" }, \"NoncedElement\" ], \" {\\n attribute DOMString nonce;\\n};\" ]' | python2.7 ./highlighter/__init__.py webidl","msgtype":"m.text"},"ts":1528211055000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"=> TypeError: sequence item 1: expected string or Unicode, list found","msgtype":"m.text"},"ts":1528211070000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"... if I remove [ \"dfn\", { \"id\": \"noncedelement\" }, \"NoncedElement\" ] from that JSON object, that error goes away","msgtype":"m.text"},"ts":1528211103000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Sigh, I just spotted the bug. Fix is pushed.","msgtype":"m.text"},"ts":1528211117000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Me looping over a container then returning the container rather than the item. :/","msgtype":"m.text"},"ts":1528211135000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"glad it was an easy fix :)","msgtype":"m.text"},"ts":1528211293000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Okay, added a --unescape flag that unescapes the \"big 5\" for HTML - &<>'\"","msgtype":"m.text"},"ts":1528212154000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\\o/ thank you thank you thank you","msgtype":"m.text"},"ts":1528212325000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"will get back to it in the morning my time","msgtype":"m.text"},"ts":1528212349000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: --unescape working beautifully, and the embedded markup in IDL too","msgtype":"m.text"},"ts":1528215354000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"working on integrating it back into wattsi+html-build","msgtype":"m.text"},"ts":1528215393000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"(as long as my insomnia lasts)","msgtype":"m.text"},"ts":1528215405000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Do you want, like, a --just-html and --just-css argument too, so you can get them independently and shove them in easier?","msgtype":"m.text"},"ts":1528215450000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: yes please","msgtype":"m.text"},"ts":1528215470000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think I only need the CSS once, right?","msgtype":"m.text"},"ts":1528215486000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"(The only problem with --just-css is that the returned CSS can vary based on what arguments you give. But as long as you're always/never doing line-numbers/line-highlighting, it'll stay the same.)","msgtype":"m.text"},"ts":1528215496000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"aha","msgtype":"m.text"},"ts":1528215502000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1528215506000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"So you can just pass some nonsense el to it to get the CSS out when you need it, I suppose.","msgtype":"m.text"},"ts":1528215542000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah as long as the class names are consistent, and the associated CSS rules consistent, I can just add the styles to the main stylesheet, once","msgtype":"m.text"},"ts":1528215559000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think","msgtype":"m.text"},"ts":1528215562000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"oh hey one thing: in the --output html output, newlines get emitted as \"\\n\" (like for JSON) instead of as newlines","msgtype":"m.text"},"ts":1528215606000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ah but that’s within JSON","msgtype":"m.text"},"ts":1528215653000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"tries to remember if we have a JSON parser in the wattsi code","msgtype":"m.emote"},"ts":1528215683000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Right.","msgtype":"m.text"},"ts":1528215820000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"With --output=html --just=html it'll print directly, no \\n","msgtype":"m.text"},"ts":1528215874000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"MikeSmith: And pushed","msgtype":"m.text"},"ts":1528216026000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"...and just pulled","msgtype":"m.text"},"ts":1528216066000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"beautiful","msgtype":"m.text"},"ts":1528216074000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"perfect","msgtype":"m.text"},"ts":1528216077000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"thanks very very much","msgtype":"m.text"},"ts":1528216081000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"np","msgtype":"m.text"},"ts":1528216084000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I should be able to get the related wattsi+html-build stuff landed this week","msgtype":"m.text"},"ts":1528216142000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and then finally syntax-hightlighted examples in the HTML spec","msgtype":"m.text"},"ts":1528216166000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"thanks to magic of combining Free Pascal + Python + TabAtkins","msgtype":"m.text"},"ts":1528216207000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Yay!","msgtype":"m.text"},"ts":1528216263000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1528216271000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and a bonus is that this may push the size of the single-page output of the spec up to 10MB!","msgtype":"m.text"},"ts":1528216380000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"after all the years we been trying hard to get it there","msgtype":"m.text"},"ts":1528216392000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"currently it’s still just a tiny 8.5MB","msgtype":"m.text"},"ts":1528216421000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: euh that's probably worth a discussion before we land?","msgtype":"m.text"},"ts":1528216421000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: or is it already close to 10?","msgtype":"m.text"},"ts":1528216430000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: I see","msgtype":"m.text"},"ts":1528216441000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: only 8.5MB now","msgtype":"m.text"},"ts":1528216443000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1528216445000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"maybe this won’t really add an additional 1.5MB, I dunno","msgtype":"m.text"},"ts":1528216469000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but we got a lot of examples...","msgtype":"m.text"},"ts":1528216478000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"That seems good to verify as a 15-20% increase or so will also affect the speed of multipage","msgtype":"m.text"},"ts":1528216551000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah this basically makes the source of each example at least 4 times bigger","msgtype":"m.text"},"ts":1528216627000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"anyway we’ll find out soon enough, once I got the highlighter plugged in","msgtype":"m.text"},"ts":1528216692000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"If HTML had added <c> for inline text (for \"character\") we'd shave a lot of weight off of that. ^_^","msgtype":"m.text"},"ts":1528216952000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And then I'd be able to write my terrible talk \"Learn the <a> <b> <c>s of HTML\".","msgtype":"m.text"},"ts":1528216974000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1528217170000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"would \"Learn the <a> <b> <c-s> of HTML\" work?","msgtype":"m.text"},"ts":1528217434000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"astearns: Learn the <a> <b> Cs(s) of HTML?","msgtype":"m.text"},"ts":1528217621000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"astearns: That's only a 2-characters savings per element, and so not very impressive. (one per tag)","msgtype":"m.text"},"ts":1528217784000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Wait tho.","msgtype":"m.text"},"ts":1528217869000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Actually... if I could bake the classes into the tagname, it would save a bunch more characters.","msgtype":"m.text"},"ts":1528217895000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"<c-kt>...</c-kt>, versus <span class=kt>...</span>","msgtype":"m.text"},"ts":1528217930000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I *think* it highlights with only a single class per? I'd have to check.","msgtype":"m.text"},"ts":1528217941000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Are arbitrary attributes allowed on custom elements, or do they still have to be data-*?","msgtype":"m.text"},"ts":1528218084000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Looks like arbitrary attributes are allowed, per both MDN and spec examples, nice.","msgtype":"m.text"},"ts":1528218526000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"<c- kt>...</c-> is 12 characters of weight, and looks to be valid, versus <span class='kt'>...</span> which is 24 characters of weight. I can literally halve the weight-cost of highlighting.","msgtype":"m.text"},"ts":1528218736000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"watches as TabAtkins rediscovers XML ;)","msgtype":"m.emote"},"ts":1528218972000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"golfing ftw","msgtype":"m.text"},"ts":1528219023000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"remembers when it was tennis","msgtype":"m.emote"},"ts":1528219047000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"TabAtkins: I think I like the idea of being able to wrap things for test annotations, <span>, <li>, <tr> -- could it be an attribute wpt-test?","msgtype":"m.text"},"ts":1528219067000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah, it def could be. Just requires some more sophisticated handling for output.","msgtype":"m.text"},"ts":1528219092000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"👍","msgtype":"m.text"},"ts":1528219832000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I love it when a dumb joke turns into a terrible hack","msgtype":"m.text"},"ts":1528219903000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"And... pushed. Highlight weight is now magically cut in half.","msgtype":"m.text"},"ts":1528220447000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I could cut it a little bit more if I explode out the namespace - going with <kt->...</kt-> saves one character, and for the single-char classes I'd save 3.","msgtype":"m.text"},"ts":1528220833000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But nah, that'd stomp on the element-name namespace too much, make it difficult for me to do this sort of minification on other things. But I can at least rejigger the highlight-names so that i use the entire single-letter alphabet before I go to two letters, save a character on a bunch of stuff.","msgtype":"m.text"},"ts":1528221204000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: I believe there's no intention of unifying DOM streams and Node.js streams. Is that correct?","msgtype":"m.text"},"ts":1528224460000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"jugglinmike: up to Node.js, I guess?","msgtype":"m.text"},"ts":1528224471000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh, okay","msgtype":"m.text"},"ts":1528224492000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"are Blobs frowned upon these days? I do see them in Response objects but was wondering","msgtype":"m.text"},"ts":1528225586000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":" Blobs are OK. The FileReader API is terrible, but there's no good alternative yet. Blob URLs are frowned upon in general.","msgtype":"m.text"},"ts":1528225858000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: thanks","msgtype":"m.text"},"ts":1528226490000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"MikeSmith, FYI, incoming in a few weeks, new aria roles blockquote paragraph and caption < https://w3c.github.io/aria/#changelog >","msgtype":"m.text"},"ts":1528229372000,"senderName":"a-ja","senderId":"a-ja@irc"},
{"content":{"body":"there is a great alternative to the FileReader API: new Response(blob).body gives you a ReadableStream to read the blob","msgtype":"m.text"},"ts":1528230809000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"and yeah, Blob URLs are terrible","msgtype":"m.text"},"ts":1528230821000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"new Response(blob).whatever still feels like a hack to me, but you're right :)","msgtype":"m.text"},"ts":1528239735000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: per https://drafts.csswg.org/css-fonts-3/#font-prop is body { font: 3.5mm message-box,serif,helvetica,sans-serif; }","msgtype":"m.text"},"ts":1528240870000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":".. valid?","msgtype":"m.text"},"ts":1528240883000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the context is https://github.com/validator/validator/issues/661#issuecomment-394836779","msgtype":"m.text"},"ts":1528240899000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the CSS checker reports an error for body { font: 3.5mm message-box,serif,helvetica,sans-serif; }","msgtype":"m.text"},"ts":1528240935000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but not for body { font: 3.5mm message-box,serif,helvetica,sans-serif; }","msgtype":"m.text"},"ts":1528240955000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"as far as I read that grammar, both should actually be valid, right?","msgtype":"m.text"},"ts":1528240987000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"    [ [ <‘font-style’> || <font-variant-css21> || <‘font-weight’> || <‘font-stretch’> ]? <‘font-size’> [ / <‘line-height’> ]? <‘font-family’> ] | caption | icon | menu | message-box | small-caption | status-bar","msgtype":"m.text"},"ts":1528241037000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"...","msgtype":"m.text"},"ts":1528241048000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"though in both cases “message-box” doesn’t mean the system font but instead is just a (non-existent) font-family name?","msgtype":"m.text"},"ts":1528241136000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Yes","msgtype":"m.text"},"ts":1528241143000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"OK thanks","msgtype":"m.text"},"ts":1528241154000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"If you want the message box font, you do it all by itself","msgtype":"m.text"},"ts":1528241172000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1528241178000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1528241180000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"But yeah it's valid","msgtype":"m.text"},"ts":1528241199000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hai","msgtype":"m.text"},"ts":1528241206000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so I dunno why the checker reports an error for the first case but not the second, but I guess the case-switch the code is using isn’t written in quite the order it should be","msgtype":"m.text"},"ts":1528241297000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"}
]