[
{"content":{"body":"Domenic: BTW, I was looking at FormData and noticed the passive-aggressive note (^_^) and realized you can get around what Bikeshed's angry about and get the overloads to have the same argument name again.","msgtype":"m.text"},"ts":1517272936000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If you instead use:","msgtype":"m.text"},"ts":1517272961000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"interface FormData {","msgtype":"m.text"},"ts":1517272977000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"  void append(USVString name, USVString value);","msgtype":"m.text"},"ts":1517272977000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"  void append(USVString name, Blob blobValue, optional USVString filename);","msgtype":"m.text"},"ts":1517272978000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"}","msgtype":"m.text"},"ts":1517272978000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ugh, sorry, bad copy-paste. One sec.","msgtype":"m.text"},"ts":1517272989000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"interface FormData {","msgtype":"m.text"},"ts":1517273041000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"  void foo(USVString name, (USVString or Blob) value);","msgtype":"m.text"},"ts":1517273041000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"  void foo(USVString name, Blob value, USVString filename);","msgtype":"m.text"},"ts":1517273041000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"};","msgtype":"m.text"},"ts":1517273041000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"There we go. Same meaning, but the signatures no longer clash.","msgtype":"m.text"},"ts":1517273068000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk ^","msgtype":"m.text"},"ts":1517280627000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: about https://github.com/w3c/csswg-drafts/pull/2169 as I just noted in my comment there, the problem remains that the CSS Align spec as currently written doesnâ€™t define align-items: left and align-items: right as valid","msgtype":"m.text"},"ts":1517284420000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I'm confused. As I said, we *don't* want them to be valid in align-items.","msgtype":"m.text"},"ts":1517284499000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: ah I was assuming what you had told me previously here was true","msgtype":"m.text"},"ts":1517284753000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://freenode.logbot.info/whatwg/20180104#c1392608","msgtype":"m.text"},"ts":1517284771000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Nah man, I wrote the comment about consulting with fantasai *after* I told you the opposite here in chat. ^_^","msgtype":"m.text"},"ts":1517284778000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"got it","msgtype":"m.text"},"ts":1517284805000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1517284806000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Domenic: TabAtkins: that is not semantically equivalent when passing undefined as the third parameter","msgtype":"m.text"},"ts":1517295547000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: TabAtkins: another strong reason for fixing Bikeshed as I really hope folks are not working around Bikeshed in the way you suggest and moving away from idiomatic JavaScript","msgtype":"m.text"},"ts":1517295570000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah, indeed. Nm then.","msgtype":"m.text"},"ts":1517295570000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"No, everyone else who's ever dealt with overloads and told me about it has been fine with making the argument names different.","msgtype":"m.text"},"ts":1517295618000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That doesn't make it okay...","msgtype":"m.text"},"ts":1517295749000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"There's no way to \"fix\" Bikeshed here. Tons of specs depend on Bikeshed recognizing things according to the argument names. The most I could do is add a completely separate linking strategy that autolinks based on argument types instead, and figure out some way to syntactically distinguish that from referring to argument names. And you wouldn't use it except in these precise two instances.","msgtype":"m.text"},"ts":1517295753000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Since almost all of the time, you can instead get away with autolinking without args at all.)","msgtype":"m.text"},"ts":1517295777000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That is true, ideally there's no overloads to begin with","msgtype":"m.text"},"ts":1517295793000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Overloads are just frustrating, is what I'm saying.","msgtype":"m.text"},"ts":1517295794000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: added some outline-relevant use counters to the checker","msgtype":"m.text"},"ts":1517296497000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://validator.w3.org/nu/stats.html","msgtype":"m.text"},"ts":1517296514000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: 0.245 means 25%?","msgtype":"m.text"},"ts":1517302936000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: that'd be a lot of <h1> usage","msgtype":"m.text"},"ts":1517302945000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, 25%","msgtype":"m.text"},"ts":1517303114000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"If those documents also use <section> and <article> there'd be a lot of potential for improvement there AT-wise","msgtype":"m.text"},"ts":1517303481000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I can probably add a more granular use counter, to check if more than one <section> element is open at the point where it finds an additional <h1>","msgtype":"m.text"},"ts":1517303646000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: ideal would be article, aside, nav, or section","msgtype":"m.text"},"ts":1517303705000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: does https://github.com/whatwg/html/issues/3407 address your concerns with hit regions?","msgtype":"m.text"},"ts":1517310473000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I need to page in hit regions to my mind","msgtype":"m.text"},"ts":1517314080000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: https://github.com/whatwg/html/issues/1030#issuecomment-208989397 had some of your thoughts on the previous iteration, if that helps","msgtype":"m.text"},"ts":1517314287000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: ah... i thought I saw something about devrel all being in SF, so thought maybe we lapped the planet and were back","msgtype":"m.text"},"ts":1517322538000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"^we^you","msgtype":"m.text"},"ts":1517322545000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: do you know why FetchEvent.clientId might have gone from null to empty string for indicating \"no client id\"?  Is that conforming to an overall spec convention or something?","msgtype":"m.text"},"ts":1517323663000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I'm not sure; I might have argued that if it cannot be the empty string it always being a string seeming nicer","msgtype":"m.text"},"ts":1517323768000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1517323780000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk/hsivonen: Can you give me a clue about how a metaformat should specify its error handling? It's tricky because not all formats based on CBOR will be happy with the web's \"stop on error\" policy. I'm kinda hopeful I can land a patch to CBORbis that allows formats to either stream output or return a full item at once, and either stop on error or replace the offending item and resume at a defined byte. Is that good","msgtype":"m.text"},"ts":1517331518000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"enough?","msgtype":"m.text"},"ts":1517331518000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: basically you need to have an answer for any arbitrary byte sequence","msgtype":"m.text"},"ts":1517332480000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: I don't really know CBOR so it's hard to go into specifics","msgtype":"m.text"},"ts":1517332496000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: I think ideally if there's some kind of subsetting going on that's made explicit by parser choices","msgtype":"m.text"},"ts":1517332569000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: so you'd invoke the CBOR parser with \"streaming\" and \"stop on error\" or some such and then everything ends up being well-defined","msgtype":"m.text"},"ts":1517332597000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: does that make sense?","msgtype":"m.text"},"ts":1517332603000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ok, cool. Yep, that should be straightforward.","msgtype":"m.text"},"ts":1517332681000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Thanks!","msgtype":"m.text"},"ts":1517332706000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Domenic: pushed a small commit to the data: URL tests that writes out the full MIME type everywhere","msgtype":"m.text"},"ts":1517333309000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: if you r+ I'm gonna land all the things and see if I need any new browser bugs","msgtype":"m.text"},"ts":1517333334000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: added more-granular stats https://validator.w3.org/nu/stats.html","msgtype":"m.text"},"ts":1517354571000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the 25% for multiple h1 that it was showing previously was due to a mistake in the initial logic that is now corrected","msgtype":"m.text"},"ts":1517354635000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the percentage of documents with multiple h1s appears to in fact be quite lower","msgtype":"m.text"},"ts":1517354677000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"more like only 4% or 5%","msgtype":"m.text"},"ts":1517354700000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but anyway we should get data through other means to compare that against","msgtype":"m.text"},"ts":1517354747000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think Steve may already have data on multiple h1 too. Or at least he has a corpus he can run a query on","msgtype":"m.text"},"ts":1517354792000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and maybe foolip can run one","msgtype":"m.text"},"ts":1517354819000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"note that maybe should instead be made to count h1s with section/article/aside/nav ancestors rather than just parents","msgtype":"m.text"},"ts":1517355257000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"because I notice that there are cases where the document has thigns like <section><div>h1 or <section><header><h1>","msgtype":"m.text"},"ts":1517355310000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"also noticing more cases than I would have expected of multiple h1 without any section/article etc at all, but instead the document just uses nested <div>s with h1s at arbitrary levels","msgtype":"m.text"},"ts":1517355447000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith, curious as to how expensive enabling outlines by default would be","msgtype":"m.text"},"ts":1517355525000,"senderName":"a-ja","senderId":"a-ja@irc"}
]