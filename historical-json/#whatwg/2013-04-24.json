[
{"content":{"body":"Hixie: is there a reason http://www.whatwg.org/specs/web-apps/current-work/multipage/infrastructure.html#valid-mime-type mentions RFC2616 instead of RFC4288 which has the actual grammar in it?","msgtype":"m.text"},"ts":1366762831000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"probably not","msgtype":"m.text"},"ts":1366763021000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"okay, trying to understand the deal with mime types. Webkit tries to respect all the RFCs","msgtype":"m.text"},"ts":1366763049000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"2616 seems to have actual gramar too...","msgtype":"m.text"},"ts":1366763070000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Gecko completely ignores everything, in fact any mime type with the substring \"xml\" is considered XML in Firefox :/","msgtype":"m.text"},"ts":1366763072000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"where does 4288 define this?","msgtype":"m.text"},"ts":1366763113000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i don't see what i would reference in 4288","msgtype":"m.text"},"ts":1366763148000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I don't see the grammar in 2616","msgtype":"m.text"},"ts":1366763153000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"Hixie: http://tools.ietf.org/html/rfc4288#section-4.2","msgtype":"m.text"},"ts":1366763158000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"it's in the section mentioned","msgtype":"m.text"},"ts":1366763159000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that doesn't define what the html spec needs","msgtype":"m.text"},"ts":1366763176000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: the section doesn't say what chars are actually allowed in the parts","msgtype":"m.text"},"ts":1366763178000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"sure, it then references other stuff","msgtype":"m.text"},"ts":1366763214000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"none of those seem to say either","msgtype":"m.text"},"ts":1366763226000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"at least not clearly that I could find","msgtype":"m.text"},"ts":1366763234000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"fwiw, i expect in the medium term we'll be dumping all these references are referencing a new spec or mimesniff or some such, or defining it inline","msgtype":"m.text"},"ts":1366763248000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the mime type specs aren't as much of a mess as other things, but they're still pretty messed up","msgtype":"m.text"},"ts":1366763279000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"gave me headaches with the blob mime type stuff recently","msgtype":"m.text"},"ts":1366763295000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"esprehn: \"token\" in the HTTP spec is defined in 2.2","msgtype":"m.text"},"ts":1366763304000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"esprehn: as \"1*<any CHAR except CTLs or separators>\"","msgtype":"m.text"},"ts":1366763316000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(the whole \"blob mime types shouldn't contain subtypes\" thing, what an ugly mess)","msgtype":"m.text"},"ts":1366763318000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"esprehn: which is the definition HTML is trying to use","msgtype":"m.text"},"ts":1366763330000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ah I see","msgtype":"m.text"},"ts":1366763372000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1366763374000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"4288 is a lot more clear, I see the token = and CHAR but not section now though","msgtype":"m.text"},"ts":1366763401000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"4288 doesn't define this at all","msgtype":"m.text"},"ts":1366763419000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"as far as i ca ntell","msgtype":"m.text"},"ts":1366763423000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it doesn't have a definition of media type as being type \"/\" subtype","msgtype":"m.text"},"ts":1366763434000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"no, it specifies what type and subtype are","msgtype":"m.text"},"ts":1366763468000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"(the whole idea of \"type/subtype\" seems practically useless today, i just think of them as opaque strings)","msgtype":"m.text"},"ts":1366763472000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"\"Type and subtype names MUST conform to the following ABNF\"","msgtype":"m.text"},"ts":1366763478000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"esprehn: right but what the HTML spec needs is a definition of the format type / subtype ; parameter ; parameter","msgtype":"m.text"},"ts":1366763503000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1366763515000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"That's actually specified in a couple places","msgtype":"m.text"},"ts":1366763532000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"to varying degrees of vagueness","msgtype":"m.text"},"ts":1366763540000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"ietf degrees","msgtype":"m.text"},"ts":1366763559000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"esprehn: right","msgtype":"m.text"},"ts":1366763624000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"esprehn: hence i picked one, rfc2616 :-)","msgtype":"m.text"},"ts":1366763630000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: should you be able to do things like DOMPaser.parseFromString(..., \"text/html;charset=utf-8\") ?","msgtype":"m.text"},"ts":1366763687000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"oh I see parseFromString doesn't even really do mime types either","msgtype":"m.text"},"ts":1366763772000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"http://domparsing.spec.whatwg.org/#dom-domparser-parsefromstring","msgtype":"m.text"},"ts":1366763773000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"zewt: indeed they are opaue strings, marginally better than the guids that MS folks love so much","msgtype":"m.text"},"ts":1366763797000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"i'd say more than marginally (in that humans don't have to look them up every time), i'd just like the fiction of type/subtype to go away","msgtype":"m.text"},"ts":1366763838000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"dunno, parseFromString isn't mine :-)","msgtype":"m.text"},"ts":1366763856000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I don't actually care about that, I just needed to know if the stuff for validating content types is correct in webkit","msgtype":"m.text"},"ts":1366763872000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"the processing of mime types varies wildly from api endpoint to api endpoint","msgtype":"m.text"},"ts":1366763874000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i doubt that any single implementation can be consistently used in many places","msgtype":"m.text"},"ts":1366763889000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"specifically XHR will only allow responseXML if we think it's XML or HTML","msgtype":"m.text"},"ts":1366763896000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"the term in the html spec is mainly used for conformance checkers, not browsers","msgtype":"m.text"},"ts":1366763897000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ah well for XHR, see the XHR spec :-) xhr.spec.whatwg.org","msgtype":"m.text"},"ts":1366763915000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yes, it has an even more vague one that says effectively \"any valid mime that ends in +xml\"","msgtype":"m.text"},"ts":1366763938000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"i'd think it'd be simplest for responseXML to always work, as long as it's parsable (but no idea off-hand about security and webcompat concerns)","msgtype":"m.text"},"ts":1366763939000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"esprehn: file a bug on anne :-)","msgtype":"m.text"},"ts":1366763991000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"do you have an :-) button","msgtype":"m.text"},"ts":1366764004000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"esprehn: mimesniff.spec.whatwg.org is probably what we should link to","msgtype":"m.text"},"ts":1366764013000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Webkit matches the type/subtype against the grammar, Gecko you can return an XML file with hixie$$xml$$/webgl and you get responseXML since indexOf(\"xml\") != -1","msgtype":"m.text"},"ts":1366764013000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"esprehn: dunno if it defines it yet","msgtype":"m.text"},"ts":1366764018000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"zewt: on my phone, yes. but on the laptop, i have to type them. :-(","msgtype":"m.text"},"ts":1366764034000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I wonder if IE actually checks the format of the mime","msgtype":"m.text"},"ts":1366764056000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"bbl","msgtype":"m.text"},"ts":1366764130000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"seems particularly odd since i'd guess that there are tons of formats that use xml where responseXML would be useful for, but which have their own mime types (not that i have any examples off the top of my head)","msgtype":"m.text"},"ts":1366764137000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: per the spec they should all be foo/foo+xml as the mime","msgtype":"m.text"},"ts":1366764357000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"but i don't know what the practical value of restricting the responseXML feature to that is","msgtype":"m.text"},"ts":1366764382000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"but i'm not up to speed on that stuff","msgtype":"m.text"},"ts":1366764411000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"dunno, ask anne","msgtype":"m.text"},"ts":1366764422000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"the spec requires checks for responseXML","msgtype":"m.text"},"ts":1366764430000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"hmm. how long does it usually take for an email to appear in the Web archive on lists.w3.org?","msgtype":"m.text"},"ts":1366785802000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: minutes, at most?","msgtype":"m.text"},"ts":1366786039000,"senderName":"SimonSapin1","senderId":"SimonSapin1@irc"},
{"content":{"body":"SimonSapin1: it's been 16 minutes now without my message appearing","msgtype":"m.text"},"ts":1366786251000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Did you get it back from being subscribed to the list? (Usually appears in the archives before that, for me)","msgtype":"m.text"},"ts":1366786366000,"senderName":"SimonSapin1","senderId":"SimonSapin1@irc"},
{"content":{"body":"Did you get an email asking for permission to publish it in the archives? (If you’ve never written to that list before and not given permission for all W3C lists)","msgtype":"m.text"},"ts":1366786366000,"senderName":"SimonSapin1","senderId":"SimonSapin1@irc"},
{"content":{"body":"SimonSapin1: I don't get my own messages back in general. I didn't get a permission email.","msgtype":"m.text"},"ts":1366786433000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"or if I do get my own messages back, Gmail hides them","msgtype":"m.text"},"ts":1366786487000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I think Gmail hides them, I get them in Thunderbird with a custom MTA","msgtype":"m.text"},"ts":1366786691000,"senderName":"SimonSapin1","senderId":"SimonSapin1@irc"},
{"content":{"body":"ok. it took 30 minutes for the message to appear","msgtype":"m.text"},"ts":1366787134000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"what's the context of the latest meme on w3cmemes? I thought EME already supported CDNs.","msgtype":"m.text"},"ts":1366792514000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"smaug____: Polyglot is wring HTML and XHTML at the same time meeting the constraints of both","msgtype":"m.text"},"ts":1366795735000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: looking at the URLQuery interface of the URL spec, how are querys of the form …?foo=123&bar handled by the JS API?","msgtype":"m.text"},"ts":1366795925000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: more specifically: how do  you set \"bar\" in the above example?","msgtype":"m.text"},"ts":1366795980000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"s/set/set or append/","msgtype":"m.text"},"ts":1366796048000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: using set or append","msgtype":"m.text"},"ts":1366796095000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: what would you set the value to?","msgtype":"m.text"},"ts":1366796119000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"the empty string?","msgtype":"m.text"},"ts":1366796127000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"true?","msgtype":"m.text"},"ts":1366796130000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"not specify a value?","msgtype":"m.text"},"ts":1366796141000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: you'll get bar=","msgtype":"m.text"},"ts":1366796152000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: per IDL it ToString's the value","msgtype":"m.text"},"ts":1366796173000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: so empty string","msgtype":"m.text"},"ts":1366796178000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what if what you want is ?foo=123&bar and not ?foo=123&bar=","msgtype":"m.text"},"ts":1366796200000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"you wouldn't use this API","msgtype":"m.text"},"ts":1366796218000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"should getDefaultComputedStyle apply presentational hints or not?","msgtype":"m.text"},"ts":1366796232000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: what does getDefault mean?","msgtype":"m.text"},"ts":1366796247000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"isn't that a serious shortcoming?","msgtype":"m.text"},"ts":1366796254000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: like getComputedStyle but without author styles (and always computed style instead of resolved style)","msgtype":"m.text"},"ts":1366796275000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"tobie: it matches what you can do with <form>","msgtype":"m.text"},"ts":1366796282000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: oh really?","msgtype":"m.text"},"ts":1366796303000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: the underlying format is shared","msgtype":"m.text"},"ts":1366796313000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: it's basically an API for application/x-www-form-urlencoded","msgtype":"m.text"},"ts":1366796343000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: Re http://www.w3.org/Style/CSS/Tracker/issues/316 , the question is whether we should just remove the quirk or make it standard. The latter (#1hash is a valid ID selector) simplifies both specs and implementations.","msgtype":"m.text"},"ts":1366796345000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"aren't radio buttons and checkboxes sent as \b: bar rather than bar=?","msgtype":"m.text"},"ts":1366796353000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"SimonSapin: right. i'm saying we should remove the quirk.","msgtype":"m.text"},"ts":1366796371000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"SimonSapin: it's just IE that needs to change","msgtype":"m.text"},"ts":1366796383000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"SimonSapin: how does HASH simplify anything?","msgtype":"m.text"},"ts":1366796416000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"and preserve the current standard behavior, ie. restrict ID selectors to #<ident>? Why?","msgtype":"m.text"},"ts":1366796422000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: because it's what gecko/webkit/blink do in all their rendering modes","msgtype":"m.text"},"ts":1366796446000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"tobie: 'If the field element has a value attribute specified, then let value be the value of that attribute; otherwise, let value be the string \"on\".'","msgtype":"m.text"},"ts":1366796448000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: why change?","msgtype":"m.text"},"ts":1366796449000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: darn it's been a while. Thanks for the clarification.","msgtype":"m.text"},"ts":1366796490000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"with the restriction, the tokenizer needs a special case to detect #1hash vs. #\\31hash, and a flag on hash tokens","msgtype":"m.text"},"ts":1366796492000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"also, apparently HTML now allows id=\"1hash\", and consistency is nice","msgtype":"m.text"},"ts":1366796513000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: IDENT is used in other places than ID selectors, no?","msgtype":"m.text"},"ts":1366796548000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yes any keyword, but as a IDENT token, not a HASH token with the \"id\" flag","msgtype":"m.text"},"ts":1366796607000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: HTML allows non-HASH IDs, too, so you're still not consistent","msgtype":"m.text"},"ts":1366796608000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i'm not following","msgtype":"m.text"},"ts":1366796695000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"That’s the definition for @id, right? http://www.whatwg.org/specs/web-apps/current-work/multipage/elements.html#the-id-attribute","msgtype":"m.text"},"ts":1366796705000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"I was replying to \"IDENT is used in other places than ID selectors, no?\", but I’m not sure where you were going with this","msgtype":"m.text"},"ts":1366796760000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"zcorpan: so you're gonna expose the underdocumented user agent styles even more prominently?","msgtype":"m.text"},"ts":1366796767000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"maybe it'll help getting them aligned","msgtype":"m.text"},"ts":1366796788000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: you said it would simplify the tokenizer","msgtype":"m.text"},"ts":1366796807000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ok i see how it could simplify the tokenizer","msgtype":"m.text"},"ts":1366796994000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Yes. In the tokenizer, all of #ident #1hash and #\\31hash are HASH tokens. Selectors say that ID selectors are '#' + IDENT, but it’s not tokenized that way. In particular, #1hash and #\\31hash have the same parsed value but only the latter is a valid ID selectors.","msgtype":"m.text"},"ts":1366797000000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"So we need to add a flag to HASH token, saying whether it had valid identifier syntax before un-escaping, and add behavior in the tokenizer to set that flag","msgtype":"m.text"},"ts":1366797000000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"http://dev.w3.org/csswg/css-syntax/#hash-state","msgtype":"m.text"},"ts":1366797037000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"It’s not terrible, but I find it a bit silly.","msgtype":"m.text"},"ts":1366797104000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1366797108000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"(#1FF still has to be a valid HASH in case it’s a color)","msgtype":"m.text"},"ts":1366797122000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"we have interop in standards mode, and only one browser engine that is still maintained does it in quirks mode","msgtype":"m.text"},"ts":1366797166000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"the web compat impact of changing this in standards mode is not known","msgtype":"m.text"},"ts":1366797180000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Yes, we could just keep the current standard behavior. That’s least risky.","msgtype":"m.text"},"ts":1366797218000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"But it’s also nice that authors don’t need to escape IDs that start with a digit, although it’s minor","msgtype":"m.text"},"ts":1366797239000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"maybe it’s not worth spending so much time on this whole thing","msgtype":"m.text"},"ts":1366797260000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"being nice for authors is a valid argument though i don't remember seeing that argument being made until now :-)","msgtype":"m.text"},"ts":1366797296000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"It’s hidden under consistency with HTML","msgtype":"m.text"},"ts":1366797315000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"HTML allows id=\"#\"","msgtype":"m.text"},"ts":1366797338000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"and id=\"{};\"","msgtype":"m.text"},"ts":1366797362000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"which would need to be escaped in CSS: #\\#, #\\{\\}","msgtype":"m.text"},"ts":1366797373000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"yes. so what's the difference between that and id=\"1\"?","msgtype":"m.text"},"ts":1366797398000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"digits are especially annoying to escape: \\1 is U+0001, you have to use \\31 for U+0031","msgtype":"m.text"},"ts":1366797420000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"a-f never need escaping","msgtype":"m.text"},"ts":1366797431000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"but classes would still need to be escaped: class=\"1\" → .\\31","msgtype":"m.text"},"ts":1366797584000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"tobie: btw, if you can collect feedback on desired URL comparison capabilities somehow that'd be awesome","msgtype":"m.text"},"ts":1366797620000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: (somewhat unrelated)","msgtype":"m.text"},"ts":1366797629000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: one thing I've had to do in the past was to check whether two urls were of the same origin","msgtype":"m.text"},"ts":1366797698000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: url.origin == url.origin will cover that","msgtype":"m.text"},"ts":1366797724000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: awesome.","msgtype":"m.text"},"ts":1366797743000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"things I've been thinking about: ignoring hash, ignoring hash and query/search, ignoring order in query/search, ignoring the trailing host dot","msgtype":"m.text"},"ts":1366797791000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(had missed the origin property while skimming over the spec)","msgtype":"m.text"},"ts":1366797796000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: do you have an API in mind for this?","msgtype":"m.text"},"ts":1366797829000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Just trying to have a better understanding of what you're looking at.","msgtype":"m.text"},"ts":1366797851000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"SimonSapin: consistency with classes seems important","msgtype":"m.text"},"ts":1366798090000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"classes are tokenizer as DELIM(.) + IDENT. I guess we could add a token, but I don’t know if it’s worth it","msgtype":"m.text"},"ts":1366798184000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"tobie: something like url.isEqual(url/string, options)","msgtype":"m.text"},"ts":1366798343000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"classes would be even more silly that what we have with id selectors if we want to support starting with a number for both","msgtype":"m.text"},"ts":1366798356000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"tobie: I also kinda want url == url2 to work, but that would require it either becoming a native JS object, or overloading of == which does not exist yet","msgtype":"m.text"},"ts":1366798392000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that would mean a new token I suppose","msgtype":"m.text"},"ts":1366798399000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"except .1 still needs to be a NUMBER in other places","msgtype":"m.text"},"ts":1366798451000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"The Unity guys also dropping Flash, even more focus on HTML/WebGL: http://blogs.unity3d.com/2013/04/23/sunsetting-flash/","msgtype":"m.text"},"ts":1366798456000,"senderName":"asmodai","senderId":"asmodai@irc"},
{"content":{"body":"annevk: that would be cool.","msgtype":"m.text"},"ts":1366798462000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"C++ is getting URLs as a first-class citizen reportedly","msgtype":"m.text"},"ts":1366798512000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh, yeah, a class token won’t work. .1 is a number, and .1foo is a dimension","msgtype":"m.text"},"ts":1366798531000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"(leaving the implementation of URLs undefined)","msgtype":"m.text"},"ts":1366798534000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: C++ has a lot of first-class citizens","msgtype":"m.text"},"ts":1366798836000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: but if we had operator overloading it wouldn't really matter if it was first-class or not I think","msgtype":"m.text"},"ts":1366798887000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"then everything is first-class","msgtype":"m.text"},"ts":1366798893000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: indeed.","msgtype":"m.text"},"ts":1366798916000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Is operator overloading on the ES timeline?","msgtype":"m.text"},"ts":1366798933000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"my backchannel tells me ES7-8","msgtype":"m.text"},"ts":1366798956000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1366799039000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I'm not looking forward to the amount of abuse operator overloading will create at first.","msgtype":"m.text"},"ts":1366799118000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"SimonSapin: (1.4% of all id=\"\" attributes in http://webdevdata.org/ dec2012 start with a number)","msgtype":"m.text"},"ts":1366799147000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: do you that kind of data for stylesheets? More important are invalid selectors that would break a page when they become valid","msgtype":"m.text"},"ts":1366799263000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: webdevdata doesn't include external style sheets so it's a bit limited","msgtype":"m.text"},"ts":1366799315000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"SimonSapin: but if you can come up with a regexp that matches selectors you're interested in i can run it","msgtype":"m.text"},"ts":1366799346000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"# is not special in regexps, is it? Try #[0-9][0-9a-zA-Z]*[g-zG-Z] , ie. a HASH token that starts with a digit but is not a hex color","msgtype":"m.text"},"ts":1366799711000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Also try #- although I suspect it’s be much less frequent","msgtype":"m.text"},"ts":1366799733000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: the problem is not matching things that are not selectors in arbitrary HTML documents","msgtype":"m.text"},"ts":1366799736000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"including color:#123","msgtype":"m.text"},"ts":1366799745000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"now trying: grep -aEi \"<style(\\d[^>]+)?>[^<\\{]+([^<\\{]+{[^<\\{\\}]+}[^<\\{]*)*#\\d\"","msgtype":"m.text"},"ts":1366799772000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"uh","msgtype":"m.text"},"ts":1366799788000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"why \\d in <style(\\d[^>]+)?> ?","msgtype":"m.text"},"ts":1366799828000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"oops","msgtype":"m.text"},"ts":1366799868000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"meant \\s","msgtype":"m.text"},"ts":1366799907000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"body #2degrees-click:hover {cursor:pointer;cursor:hand;}","msgtype":"m.text"},"ts":1366799959000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I think the consistency with classes is the strongest argument","msgtype":"m.text"},"ts":1366800184000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"(Which is not that strong, but more so than anything else in this discussion.)","msgtype":"m.text"},"ts":1366800213000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1366800317000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"huh, i get a few results of the grep that don't even contain \"<style\"","msgtype":"m.text"},"ts":1366800342000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"anyway, assuming i didn't mess up the regexp, the above instance was the only id selector starting with a digit in the data set","msgtype":"m.text"},"ts":1366800396000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"which is http://www.3news.co.nz/","msgtype":"m.text"},"ts":1366800523000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"http://www.w3.org/mid/50786331.6080905⊙me - what are override style sheets?","msgtype":"m.text"},"ts":1366802965000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: User stylesheets, no?","msgtype":"m.text"},"ts":1366803001000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"no (user style sheets was addressed later in the thread)","msgtype":"m.text"},"ts":1366803037000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Then idk","msgtype":"m.text"},"ts":1366803048000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"zcorpan: I’m not sure, but css-cascade refers to this: http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-OverrideAndComputed","msgtype":"m.text"},"ts":1366803076000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"zcorpan: SVG uses those I think for animations","msgtype":"m.text"},"ts":1366803177000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: the DOM had an API for that once too but it never got implemented","msgtype":"m.text"},"ts":1366803197000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok thanks","msgtype":"m.text"},"ts":1366804138000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"TabAtkins: was there a conclusion for this thread? http://www.w3.org/mid/CAAWBYDA2o-k+Jwd8wbEsuAFbHxubrPTjRt6gaaHZGOi4vkNRVQ⊙mgc","msgtype":"m.text"},"ts":1366805692000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"https://plus.google.com/100132233764003563318/posts/hqHFwvZhbDS","msgtype":"m.text"},"ts":1366806466000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: why a new tag instead of a facility to make <iframe> disconnect JS from parent?","msgtype":"m.text"},"ts":1366806544000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"don't ask me","msgtype":"m.text"},"ts":1366806556000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"there's also <webview>, apparently","msgtype":"m.text"},"ts":1366806791000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: the Firefox OS equivalent to <webview> is an attribute on <iframe>","msgtype":"m.text"},"ts":1366806843000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: does the attribute do anything for normal web pages?","msgtype":"m.text"},"ts":1366806874000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: Dunno. probably not.","msgtype":"m.text"},"ts":1366806906000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: what is the attribute called?","msgtype":"m.text"},"ts":1366806980000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"mozbrowser?","msgtype":"m.text"},"ts":1366807106000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://developer.mozilla.org/en-US/docs/HTML/Element/iframe lists mozapp and mozbrowser","msgtype":"m.text"},"ts":1366807151000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hsivonen: we regard the attribute as a mistake though","msgtype":"m.text"},"ts":1366808048000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: the attribute is ignored for normal web pages","msgtype":"m.text"},"ts":1366808081000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"wonders who \"we\" is in this case","msgtype":"m.emote"},"ts":1366808082000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: implementer","msgtype":"m.text"},"ts":1366808117000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: Ergh, getting pull requests on code that will conflict with all the flake changes. Yay. :|","msgtype":"m.text"},"ts":1366808156000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: YEah, I need to finish your review :p","msgtype":"m.text"},"ts":1366808189000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(I just rejected the pull request because it made us fail tests. :P)","msgtype":"m.text"},"ts":1366808219000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I saw","msgtype":"m.text"},"ts":1366808255000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: what should be used instead?","msgtype":"m.text"},"ts":1366808490000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: oh i see","msgtype":"m.text"},"ts":1366808514000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: you mean the attribute should work for normal web pages, too?","msgtype":"m.text"},"ts":1366808540000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"TabAtkins: why are custom properties case sensitive?","msgtype":"m.text"},"ts":1366808685000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: no, from what I read it would've been better as an element","msgtype":"m.text"},"ts":1366808712000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: makes an easier boundary","msgtype":"m.text"},"ts":1366808724000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: i don't follow","msgtype":"m.text"},"ts":1366808767000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"our goal is to move to something like <webview>","msgtype":"m.text"},"ts":1366808784000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"zcorpan: the general principle is that author-defined stuff is case-sensitive: http://dev.w3.org/csswg/css-values/#custom-idents","msgtype":"m.text"},"ts":1366808915000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Future.resolve(value) would be equal to Future.any(value)... I guess that's okay.","msgtype":"m.text"},"ts":1366809148000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: am i missing something or can i just say that getPropertyValue() must \"serialize a CSS value\" for the given property? https://dvcs.w3.org/hg/csswg/raw-file/tip/cssom/Overview.html#widl-CSSStyleDeclaration-getPropertyValue-DOMString-DOMString-property https://dvcs.w3.org/hg/csswg/raw-file/tip/cssom/Overview.html#serializing-css-values","msgtype":"m.text"},"ts":1366810366000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: wouldn't that include !important?","msgtype":"m.text"},"ts":1366810515000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: it wasn't entirely clear whether !important should be there or not iirc","msgtype":"m.text"},"ts":1366810537000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not sure what the other issues were","msgtype":"m.text"},"ts":1366810545000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wonder if I kept track of them somehow","msgtype":"m.text"},"ts":1366810563000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"serialize a CSS component value\" doesn't have an entry for !important","msgtype":"m.text"},"ts":1366810642000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: ah yeah, and then there's the thing with style.color being defined in terms of getPropertyValue, but actually potentially returning different values","msgtype":"m.text"},"ts":1366810646000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess the latter does need to return !important but getPropertyValue doesn't or some such","msgtype":"m.text"},"ts":1366810700000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"overall though that API is broken and not a good time","msgtype":"m.text"},"ts":1366810714000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"!important doesn't seem to be returned by style.color","msgtype":"m.text"},"ts":1366810814000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"oh okay, so maybe it's all somewhat saner than my recollection :)","msgtype":"m.text"},"ts":1366810892000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"maybe :-) thanks","msgtype":"m.text"},"ts":1366810927000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"any opinion on null vs empty string for unknown properties?","msgtype":"m.text"},"ts":1366811565000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"chrome returns null, opera/firefox \"\"","msgtype":"m.text"},"ts":1366811590000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ie10 \"\"","msgtype":"m.text"},"ts":1366811667000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hixie: I saw you introduced some nice terminology for worker-related stuff","msgtype":"m.text"},"ts":1366812594000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: I'm thinking of sprinkling that around to XMLHttpRequest & friends, URL, FormData, Event?, Future","msgtype":"m.text"},"ts":1366812638000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: is there anything I should be aware of?","msgtype":"m.text"},"ts":1366812646000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: he said in the relevant bug that he might tweak it some more","msgtype":"m.text"},"ts":1366812694000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I know","msgtype":"m.text"},"ts":1366812788000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hence the impatient IRC questions","msgtype":"m.text"},"ts":1366812815000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, mounir: ok. moving to something like <webview> is news to me","msgtype":"m.text"},"ts":1366813425000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"tobie: how often are new released of Respec shipped?","msgtype":"m.text"},"ts":1366817158000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"hsivonen: that is not a long planned thing though","msgtype":"m.text"},"ts":1366819085000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"good morning, Whatwg!","msgtype":"m.text"},"ts":1366819780000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"gsnedders: It depends on fullTree=False, right? Which isn't really an internal API","msgtype":"m.text"},"ts":1366821452000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"marcosc: I usually bug darobin for this.","msgtype":"m.text"},"ts":1366821709000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"iirc, he sent me a list of instructions on how to do a release.","msgtype":"m.text"},"ts":1366821727000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Will look for the,","msgtype":"m.text"},"ts":1366821734000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"s/the,/them/","msgtype":"m.text"},"ts":1366821746000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Fwiw, it's not clear if <iframe mozbrowser> will stay","msgtype":"m.text"},"ts":1366822880000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Oh look, people said that","msgtype":"m.text"},"ts":1366822913000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"jgraham: Regardless, the existing code was broken. :P","msgtype":"m.text"},"ts":1366822942000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"dglazkov: lets discuss it in the week of May 6","msgtype":"m.text"},"ts":1366823252000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"dglazkov: I'm not at this TPAC thing you speak of","msgtype":"m.text"},"ts":1366823260000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"dglazkov: well, at least not one that's running this week","msgtype":"m.text"},"ts":1366823272000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: Okay, if you're using a non-standard etree API which allows access to parents then it can leak. But that's it, I believe.","msgtype":"m.text"},"ts":1366823935000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: (The existing code is totally b0rked because it tries to use JS scoping rules in PYthon.)","msgtype":"m.text"},"ts":1366823968000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: What am I missing? You can call getEtreeBuilder with fullTree=True","msgtype":"m.text"},"ts":1366824149000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"And then you get that node out","msgtype":"m.text"},"ts":1366824156000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: But then html5lib.parseFragment cuts it off, no?","msgtype":"m.text"},"ts":1366824182000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"If you call parseFragment you can't set fullTree, so I don't see how that's relevant","msgtype":"m.text"},"ts":1366824402000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I dunno, and I have doomexam tomorrow, so I'm not looking at it.","msgtype":"m.text"},"ts":1366824436000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"You can do something like builder = getTreeBuilder(\"etree\", fullTree=True)","msgtype":"m.text"},"ts":1366824456000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"HTML5Parser(builder)","msgtype":"m.text"},"ts":1366824489000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":".parseFragment","msgtype":"m.text"},"ts":1366824502000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Well if you have an exam, why are you here chatting?","msgtype":"m.text"},"ts":1366824515000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(I think the only real fix I want is the error to be something better. I don't see the point of going out of our way to support an edge case)","msgtype":"m.text"},"ts":1366824559000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"zcorpan: Custom properties are case-sensitive because they can contain arbitrary unicode, and we didn't want either (a) unicode case-insensitive matching, nor (b) ascii-case-insensitive matching mixed with non-ascii literal matching.","msgtype":"m.text"},"ts":1366824925000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"zcorpan: Only way around that was to just say that it's entirely case-sensitive.","msgtype":"m.text"},"ts":1366824942000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"zcorpan: Also, what SimonSapin said - author-defined stuff is generally case-sensitive (for the reasons I gave, though).","msgtype":"m.text"},"ts":1366824979000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: by, the way, css-counter-styles is a bit weird regarding this","msgtype":"m.text"},"ts":1366825054000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"\"Counter style names are case-sensitive. \tHowever, the names defined in this specification are ASCII lower-cased on parse \twherever they are used as counter styles, e.g. \tin the list-style set of properties, \tin the @counter-style rule, \tand in the counter() functions.\"","msgtype":"m.text"},"ts":1366825080000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"The two sentences seem contradictory","msgtype":"m.text"},"ts":1366825080000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"But I got it later: \"the names defined in this specification\" shoud be \"the name of pre-defined counter styles\", with links to section 5 and 6","msgtype":"m.text"},"ts":1366825169000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"(Which, by the way, is a bit annoying to implement but meh.)","msgtype":"m.text"},"ts":1366825195000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: Yes, the names defined *in* this spec.  ^_^","msgtype":"m.text"},"ts":1366825764000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"SimonSapin: And I'm sure it's annoying to implement, but that's what you get when you invade an existing namespace.","msgtype":"m.text"},"ts":1366825784000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah, the implementation is manageable","msgtype":"m.text"},"ts":1366825846000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"By \"you invade\" I of course mean \"I invade\".","msgtype":"m.text"},"ts":1366825864000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But I’m still having a hard time with \"names defined in this spec\".","msgtype":"m.text"},"ts":1366825880000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Hm?","msgtype":"m.text"},"ts":1366825895000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"like, <counter-style-name> is defined in this spec","msgtype":"m.text"},"ts":1366825898000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"?_?","msgtype":"m.text"},"ts":1366825913000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(?_? is the best emoji, by the way.  The question marks look like raised eyebrows!)","msgtype":"m.text"},"ts":1366825937000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It took me a long time to understand that this means just the names of predefined styles, not all counter style names","msgtype":"m.text"},"ts":1366825962000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Should I change it to \"the names of counter styles defined in this specification\"?","msgtype":"m.text"},"ts":1366825988000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I’d like the spec to clarify, by saying something like \"the name of predefined styles\"","msgtype":"m.text"},"ts":1366825991000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"\"predefined\" indicates \"these particular instances\" rather than \"the general concept of counter styles\"","msgtype":"m.text"},"ts":1366826068000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Works for me.","msgtype":"m.text"},"ts":1366826086000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"can't you spell it out in the parser?","msgtype":"m.text"},"ts":1366826516000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: In what parser?","msgtype":"m.text"},"ts":1366826528000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"the value parser I guess","msgtype":"m.text"},"ts":1366826535000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Not really, no.","msgtype":"m.text"},"ts":1366826542000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Or rather, not without a lot of difficulty.","msgtype":"m.text"},"ts":1366826550000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Given the context-sensitivity.","msgtype":"m.text"},"ts":1366826555000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"don't you have a value parser per property?","msgtype":"m.text"},"ts":1366826565000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: spell what out?","msgtype":"m.text"},"ts":1366826579000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"We have *grammars* per property, which verify that the parsed value is correct per the property's grammar.","msgtype":"m.text"},"ts":1366826587000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1366826598000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Actual parsing is taken care of by a generic error-handling parser, which doesn't care about the individual property grammars.","msgtype":"m.text"},"ts":1366826606000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Otherwise we'd have to amend the parser every time we add a new property or value.)","msgtype":"m.text"},"ts":1366826624000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"tobie: thanks for the info","msgtype":"m.text"},"ts":1366827280000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"in regards to WEBVTT -- is there a way that users can add cuetext via java script?","msgtype":"m.text"},"ts":1366830874000,"senderName":"reyre_pc","senderId":"reyre_pc@irc"},
{"content":{"body":"we see currently that they can add and create TextTrackCues via javascript","msgtype":"m.text"},"ts":1366830889000,"senderName":"reyre_pc","senderId":"reyre_pc@irc"},
{"content":{"body":"nvm all, i think we've solved the question","msgtype":"m.text"},"ts":1366831700000,"senderName":"reyre_pc","senderId":"reyre_pc@irc"},
{"content":{"body":"reyre_pc: you mean modify the text of an existing cue?","msgtype":"m.text"},"ts":1366832732000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: yeah that's what we realized","msgtype":"m.text"},"ts":1366832774000,"senderName":"reyre_pc","senderId":"reyre_pc@irc"},
{"content":{"body":"ok. so cue.text :-)","msgtype":"m.text"},"ts":1366832786000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: if a cue's cue text is modified via script is there a way to detect that it happened","msgtype":"m.text"},"ts":1366832799000,"senderName":"reyre_pc","senderId":"reyre_pc@irc"},
{"content":{"body":"ho","msgtype":"m.text"},"ts":1366832808000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"oh, even","msgtype":"m.text"},"ts":1366832810000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i know there are events for adding and removing cues to a text track","msgtype":"m.text"},"ts":1366832818000,"senderName":"reyre_pc","senderId":"reyre_pc@irc"},
{"content":{"body":"but haven't seen any for cuetext changing","msgtype":"m.text"},"ts":1366832830000,"senderName":"reyre_pc","senderId":"reyre_pc@irc"},
{"content":{"body":"there's no event for that afaict","msgtype":"m.text"},"ts":1366833002000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"what's the use case?","msgtype":"m.text"},"ts":1366833013000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hixie: does the webvtt spec need to be updated to say to run \"time marches on\" when .text, .align, etc, are set?","msgtype":"m.text"},"ts":1366833272000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: a user changes a cues cuetext. we want to use lazy loading so we'd like a way to know that the cue's cuetext has changed","msgtype":"m.text"},"ts":1366833275000,"senderName":"reyre_pc","senderId":"reyre_pc@irc"},
{"content":{"body":"reyre_pc: how does the user change cuetext? do you need to know internally or want to expose to scripts on the page?","msgtype":"m.text"},"ts":1366833339000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"well as far as we understand you can grab cues from the dom via their identifiers in javascript","msgtype":"m.text"},"ts":1366833361000,"senderName":"reyre_pc","senderId":"reyre_pc@irc"},
{"content":{"body":"yes or just iterate through them","msgtype":"m.text"},"ts":1366833382000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"then you can set that TextTrackCues 'text' member","msgtype":"m.text"},"ts":1366833384000,"senderName":"reyre_pc","senderId":"reyre_pc@irc"},
{"content":{"body":"changing the cuetext","msgtype":"m.text"},"ts":1366833395000,"senderName":"reyre_pc","senderId":"reyre_pc@irc"},
{"content":{"body":"by user you mean author (the web developer), not the end-user?","msgtype":"m.text"},"ts":1366833415000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"well, whoever wants to use java script to manipulate cues on a webpage","msgtype":"m.text"},"ts":1366833450000,"senderName":"reyre_pc","senderId":"reyre_pc@irc"},
{"content":{"body":"we'd like to know internally so we can know when to re-parse the cuetext","msgtype":"m.text"},"ts":1366833484000,"senderName":"reyre_pc","senderId":"reyre_pc@irc"},
{"content":{"body":"ok. i guess you need to have an internal listener for changes to the .text attribute or so. how to do that is an implementation detail","msgtype":"m.text"},"ts":1366833728000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"reyre: I didn't think of cue.text ouch","msgtype":"m.text"},"ts":1366833735000,"senderName":"rillian","senderId":"rillian@irc"},
{"content":{"body":"bets that's broken everywhere","msgtype":"m.emote"},"ts":1366833745000,"senderName":"rillian","senderId":"rillian@irc"},
{"content":{"body":"zcorpan: okay thanks for clarifying :)","msgtype":"m.text"},"ts":1366833764000,"senderName":"reyre","senderId":"reyre@irc"},
{"content":{"body":"rillian: oh noe","msgtype":"m.text"},"ts":1366833773000,"senderName":"reyre","senderId":"reyre@irc"},
{"content":{"body":"i think the webvtt spec needs to say to run the \"time marches on\" steps when .text et al are set","msgtype":"m.text"},"ts":1366833779000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"like e.g. http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#dom-texttrackcue-starttime does","msgtype":"m.text"},"ts":1366833815000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: makes sense","msgtype":"m.text"},"ts":1366833921000,"senderName":"reyre","senderId":"reyre@irc"},
{"content":{"body":"oh wait that's covered already, fixed in http://html5.org/tools/web-apps-tracker?from=7429&to=7430","msgtype":"m.text"},"ts":1366834108000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"end of http://dev.w3.org/html5/webvtt/#data-model","msgtype":"m.text"},"ts":1366834166000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: okay, saw that one before but was unsure about it","msgtype":"m.text"},"ts":1366834268000,"senderName":"reyre","senderId":"reyre@irc"},
{"content":{"body":"thanks :)","msgtype":"m.text"},"ts":1366834292000,"senderName":"reyre","senderId":"reyre@irc"},
{"content":{"body":"np","msgtype":"m.text"},"ts":1366834311000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Where's the best version of WebVTT to link to?","msgtype":"m.text"},"ts":1366834500000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Provided without comment: What's wrong with DRM in HTML5: http://yro.slashdot.org/story/13/04/24/209234/whats-actually-wrong-with-drm-in-html5","msgtype":"m.text"},"ts":1366834530000,"senderName":"manu-db","senderId":"manu-db@irc"},
{"content":{"body":"TabAtkins: http://dev.w3.org/html5/webvtt/ was the last place Silvia mentioned updating","msgtype":"m.text"},"ts":1366834745000,"senderName":"rillian","senderId":"rillian@irc"},
{"content":{"body":"that's not a frozen publication though","msgtype":"m.text"},"ts":1366834787000,"senderName":"rillian","senderId":"rillian@irc"},
{"content":{"body":"rillian: Not a concern.","msgtype":"m.text"},"ts":1366834817000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"rillian: I just need somewhere to point to as an example of the time-based selectors.","msgtype":"m.text"},"ts":1366834835000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TIL I learned in the HTML WG f2f that we don't actually need to do testing any more to determine interoperability","msgtype":"m.text"},"ts":1366835969000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"we just get to decide","msgtype":"m.text"},"ts":1366835976000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"spread the word","msgtype":"m.text"},"ts":1366835989000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Yay!","msgtype":"m.text"},"ts":1366836110000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"http://t.co/HA2sgpjs3z","msgtype":"m.text"},"ts":1366836391000,"senderName":"cabanier1","senderId":"cabanier1@irc"},
{"content":{"body":"TabAtkins: should the spec say something differently for presentational hints?","msgtype":"m.text"},"ts":1366836512000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"cabanier1: Please pre-resolve your t.co links before posting.  ^_^ http://w3cmemes.tumblr.com/post/48714963874/we-dont-need-a-comprehensive-test-suite-to-exit","msgtype":"m.text"},"ts":1366836615000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"zcorpan: Lemme check, I didn't actually look at the text.","msgtype":"m.text"},"ts":1366836634000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: do you have an example of UA-level preshint?","msgtype":"m.text"},"ts":1366836657000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: Anything in the UA stylesheet.  For example, the styling of <i> is, technically, a preshint.","msgtype":"m.text"},"ts":1366836679000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Difference is just whether we arbitrarily decide it's a \"user-agent default\" or an \"author choice\".","msgtype":"m.text"},"ts":1366836701000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: oh. i thought that wasn't called preshint","msgtype":"m.text"},"ts":1366836709000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Meh, depends on where you're looking perhaps.","msgtype":"m.text"},"ts":1366836723000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"In casual conversation it has been called such, at least.","msgtype":"m.text"},"ts":1366836730000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Where is the function actually defined?","msgtype":"m.text"},"ts":1366836755000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"https://dvcs.w3.org/hg/csswg/raw-file/tip/cssom/Overview.html#widl-Window-getDefaultComputedStyle-CSSStyleDeclaration-Element-elt-DOMString-pseudoElt","msgtype":"m.text"},"ts":1366836771000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Nope, spec's fine, since all of those things are qualified with \"author-level\".","msgtype":"m.text"},"ts":1366836917000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"zcorpan: The issue on serializing <number> can go away, since we allow scinot in numbers now.","msgtype":"m.text"},"ts":1366836973000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"zcorpan: And I don't understand the issue in <length>.","msgtype":"m.text"},"ts":1366836986000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"author-level was only intended to apply to \"author-level style rules\"","msgtype":"m.text"},"ts":1366836999000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: In that case, move it to further down in the list.  Leading adjectives normally distribute over lists.","msgtype":"m.text"},"ts":1366837035000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But if you qualify \"preshints\" with \"author-level\", it's completely correct and non-ambiguous.","msgtype":"m.text"},"ts":1366837172000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ok fixed","msgtype":"m.text"},"ts":1366837609000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: Looks good!","msgtype":"m.text"},"ts":1366837693000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1366837702000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Are there UAs on board with implementing DRM? (If this question opens a can of worms, ignore it.)","msgtype":"m.text"},"ts":1366837946000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"Sigh, yes.  IE, Chrome, and Safari are all doing it, I believe.","msgtype":"m.text"},"ts":1366838079000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Firefox is the holdout.","msgtype":"m.text"},"ts":1366838082000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"For now.","msgtype":"m.text"},"ts":1366838086000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ah, so, same as it ever was.","msgtype":"m.text"},"ts":1366838139000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"zcorpan: Btw, no conclusion on the constructable stylesheets thread.  We're not to the point of needing to decide on it yet, so feel free to ignore it.  We'll poke if it comes up again.","msgtype":"m.text"},"ts":1366838302000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Not to say that I wouldn't mind more constructable things, but I don't have a use-case for them right now.)","msgtype":"m.text"},"ts":1366838320000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: ok thanks","msgtype":"m.text"},"ts":1366838321000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"marks that thread as read","msgtype":"m.emote"},"ts":1366838421000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: https://github.com/whatwg/url/commit/1d866b441eef031481bffaa0df9f43630e6fe62e - it's not just when setting .href to something that doesn't resolve, it's setting it to any value","msgtype":"m.text"},"ts":1366838814000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"HTML WG f2f update; current status: suffering fools unlightly","msgtype":"m.text"},"ts":1366839100000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: .","msgtype":"m.text"},"ts":1366839174000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"I thought one suffered fools gladly","msgtype":"m.text"},"ts":1366839263000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"How do you do it (un)lightly?","msgtype":"m.text"},"ts":1366839272000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"And is that the same as suffering them heavily?","msgtype":"m.text"},"ts":1366839290000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I sort of imagine that you are all starting to sound like Neil from The Young Ones","msgtype":"m.text"},"ts":1366839310000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"TabAtkins: when calling a function that returns a Future, if that function should throw an exception when too few arguments are passed, should it be done via throw via the resolver's reject mechanism?","msgtype":"m.text"},"ts":1366839846000,"senderName":"dlongley","senderId":"dlongley@irc"},
{"content":{"body":"when using w3c's idl test harness for WebIDL implementations, functions that return a Future are expected to throw TypeErrors if the number of arguments given is insufficient ...","msgtype":"m.text"},"ts":1366839912000,"senderName":"dlongley","senderId":"dlongley@irc"},
{"content":{"body":"but this is problematic if you're wrapping something that uses a callback style API -- as the error will not be returned (via the callback) until the Future has actually been resolved (rejected)","msgtype":"m.text"},"ts":1366839941000,"senderName":"dlongley","senderId":"dlongley@irc"},
{"content":{"body":"i'm hoping that you agree that this is a bug with the idl test harness ... and that if a function returns a future it should be checking that Future for a rejection, rather than looking for exceptions thrown in the method that generates the Future.","msgtype":"m.text"},"ts":1366839988000,"senderName":"dlongley","senderId":"dlongley@irc"},
{"content":{"body":"anyone else in here know anything about DOM Futures?","msgtype":"m.text"},"ts":1366840018000,"senderName":"dlongley","senderId":"dlongley@irc"},
{"content":{"body":"dlongley: Just plain throwing is the same thing as calling reject.","msgtype":"m.text"},"ts":1366842473000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: Does \"url\" imply hierarchical?  Context is us defining the :local-link pseudoclass - need a term for something with hierarchy, such that we can match urls against a subset of the url.","msgtype":"m.text"},"ts":1366843069000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"no; data: URLs have no hierarchy, but are still URLs","msgtype":"m.text"},"ts":1366843235000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the url spec has a concept of \"relative scheme\"","msgtype":"m.text"},"ts":1366843249000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"which may be what you want","msgtype":"m.text"},"ts":1366843253000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(you probably just want a url that resolves to a parsed url with a relative scheme, and that has the same scheme, host, and port as the reference url)","msgtype":"m.text"},"ts":1366843297000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"No, not relative scheme.","msgtype":"m.text"},"ts":1366843881000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":":local-link(n) matches urls who match the document's url up to the first n segments.","msgtype":"m.text"},"ts":1366843902000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"did i get the name wrong?","msgtype":"m.text"},"ts":1366843903000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1366843909000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"segment?","msgtype":"m.text"},"ts":1366843911000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yes, url segments.  Defined in the url spec.","msgtype":"m.text"},"ts":1366843924000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The parts of scheme data in between /s and ?.","msgtype":"m.text"},"ts":1366843940000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oh, wow, i had no idea the url spec actually went to the level of detail of path segments","msgtype":"m.text"},"ts":1366843948000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1366843951000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Now I just need it to go into a little bit more details, so I can ref it instead of just assuming that people will get what I mean when I say \"if the url is hierarchical\".  ^_^","msgtype":"m.text"},"ts":1366843979000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: Please add the concept of \"hierarchical URL\" to the URL spec, so I can ref it from the Selectors definition of :local-link().","msgtype":"m.text"},"ts":1366844007000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i don't understand what you mean by hierarchical URL if you don't mean \"has a relative scheme\", btw","msgtype":"m.text"},"ts":1366844120000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Scheme-relative just refers to a url without a specified scheme (so when it absolutized, it takes its scheme from the document).  It has nothing to do with hierarchy, I think.","msgtype":"m.text"},"ts":1366844290000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"not \"Scheme-relative\", \"relative scheme\"","msgtype":"m.text"},"ts":1366844312000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(anne graduated from my school of confusing naming, i think :-) )","msgtype":"m.text"},"ts":1366844346000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I don't know what that means, because it doesn't have a real definition, just a pointer to a table.","msgtype":"m.text"},"ts":1366844349000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"if i'm not mistaken, the parser treats urls with \"relative schemes\" differently than those without","msgtype":"m.text"},"ts":1366844401000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"namely, it parses a path out only if it's relative, i think","msgtype":"m.text"},"ts":1366844448000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Maybe, but if so, Anne has left that detail encoded in the parser, rather than stating it directly.  ^_^","msgtype":"m.text"},"ts":1366844450000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'd still prefer a \"hierarchical url\" term to refer to, rather than having to say \"a url with a relative scheme\".","msgtype":"m.text"},"ts":1366844480000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"no argument from me there","msgtype":"m.text"},"ts":1366844541000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: http://quirks.spec.whatwg.org/#the-hashless-hex-color-quirk","msgtype":"m.text"},"ts":1366845140000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"cabanier1: yt?","msgtype":"m.text"},"ts":1366846199000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"tantek: Why did you recommend using rel=discussion?  It's not yet registered in the Microformats wiki.","msgtype":"m.text"},"ts":1366847445000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"zcorpan: Looks good to em.","msgtype":"m.text"},"ts":1366847624000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"zcorpan: What's the meaning of the plain <span>s in the markup?  It looks like they should be <i> (for a technical term) and/or links.","msgtype":"m.text"},"ts":1366847820000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"http://www.whatwg.org/specs/web-apps/current-work/multipage/text-level-semantics.html#the-i-element","msgtype":"m.text"},"ts":1366847839000,"senderName":"fantasai","senderId":"fantasai@irc"}
]