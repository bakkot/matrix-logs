[
{"content":{"body":"does anyone here know what happens in an IETF meeting other than WG meetings?","msgtype":"m.text"},"ts":1513219567000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Seems like a good question to ask on that thread... I found https://ietf.org/tao.html#rfc.section.3","msgtype":"m.text"},"ts":1513219625000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: smaug____ is not here","msgtype":"m.text"},"ts":1513224041000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I support updating the mailing list with news and tweeting interesting threads","msgtype":"m.text"},"ts":1513224191000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Happy to help next week","msgtype":"m.text"},"ts":1513224201000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"littledan: you should really split up your spec repo so you can add pr-preview to it.","msgtype":"m.text"},"ts":1513242733000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"littledan:","msgtype":"m.text"},"ts":1513242740000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Ms2ger: the promise cleanup isn't on OKRs or anything, but Mike has only next week to work on it. Review appreciated, but I could to it too if you like.","msgtype":"m.text"},"ts":1513247805000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Or at least someone who's being paid to, if it's not fun and rewarding.","msgtype":"m.text"},"ts":1513247842000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"tobie: Interesting idea. Seems like we'd need to do some work to integrate ecmarkup and pr-preview... another thing on my todo list I guess","msgtype":"m.text"},"ts":1513248183000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I didn't know about that tool. thanks for the link","msgtype":"m.text"},"ts":1513248192000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"ecmarkup is a node project, right? It would be trivial to integrate as a post-processor.","msgtype":"m.text"},"ts":1513248247000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"littledan: happy to hook it up for you.","msgtype":"m.text"},"ts":1513248259000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"that'd be really helpful!","msgtype":"m.text"},"ts":1513248280000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"foolip, how about I see what the PR ends up looking like, and I'll ping you if I won't have time?","msgtype":"m.text"},"ts":1513250755000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: SGTM, thanks!","msgtype":"m.text"},"ts":1513253233000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"In https://github.com/whatwg/dom/issues/544 I don't see the string \"compat\". It seems unlikely to me that adding such a short and useful name on EventTarget would be web compatible, has anyone done any digging yet?","msgtype":"m.text"},"ts":1513256822000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"^ annevk","msgtype":"m.text"},"ts":1513256827000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: at this point we don't have implementer interest although othermaciej did comment with some questions, so I'm not sure it's worth bikeshedding names","msgtype":"m.text"},"ts":1513257079000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: that thread is already way longer than is ideal, but not unexpected due to the excited around new things 😃","msgtype":"m.text"},"ts":1513257127000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok, good","msgtype":"m.text"},"ts":1513259893000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"JakeA: \"This also happens before unsetting the event's passive listener flag, so preventing default should be fine for spec-dispatched events\" is not true","msgtype":"m.text"},"ts":1513261085000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: unless you want to change all algorithms that dispatch an event and look at its canceled flag afterwards to wait for all microtasks to end first, effectively breaking compat of sorts","msgtype":"m.text"},"ts":1513261129000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: as currently you can expect that by the time the microtask runs the spec-defined action has already happened","msgtype":"m.text"},"ts":1513261156000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: huh, but aren't microtasks handled as part of calling the callback?","msgtype":"m.text"},"ts":1513261171000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: hmm, I see, so click() and a normal mouse click would be different","msgtype":"m.text"},"ts":1513261232000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: that's going to be somewhat confusing","msgtype":"m.text"},"ts":1513261266000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: especially now EventTarget is constructible/extendable, we'll see more dispatchEvent usage","msgtype":"m.text"},"ts":1513263088000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Since I don't know the history behind AbortController and AbortSignal, why are they separate things?","msgtype":"m.text"},"ts":1513263481000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: being able to hand someone a signal without giving away control","msgtype":"m.text"},"ts":1513263529000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: folks really wanted the ability to abort and the ability to be abortable to be separate","msgtype":"m.text"},"ts":1513263533000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Why wouldn't there be just Abortable object which inherits EventTarget (or possibly just have a getter for a promise which is resolved when aborted or something)","msgtype":"m.text"},"ts":1513263544000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Why they need to be separate?","msgtype":"m.text"},"ts":1513263564000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: eg, in a service worker, fetchEvent.request.signal will tell you if the browser wants the request to be cancelled","msgtype":"m.text"},"ts":1513263617000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"this might be because some JS on the page called controller.abort(), or it might be because a tab closed","msgtype":"m.text"},"ts":1513263634000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"hmm, why wouldn't request be EventTarget with onabort on it","msgtype":"m.text"},"ts":1513263690000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"oh well, the ship has probably sailed","msgtype":"m.text"},"ts":1513263697000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: So you have onabort on requests & onabort on controllers?","msgtype":"m.text"},"ts":1513263745000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"smaug____: Request is carrying information around, it doesn't really represent an ongoing thing","msgtype":"m.text"},"ts":1513263764000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: that also wouldn't really allow you to pass the signal around to other things that might need to react to it","msgtype":"m.text"},"ts":1513263795000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I would have expected request itself basically been the signal","msgtype":"m.text"},"ts":1513263819000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(the ship has sailed, FWIW, but it would be good to have a shared understanding)","msgtype":"m.text"},"ts":1513263825000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: so every API that takes a signal would have to take a Request?","msgtype":"m.text"},"ts":1513263838000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1513263854000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"signal could have been a mixin or so","msgtype":"m.text"},"ts":1513263864000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: https://developers.google.com/web/updates/2017/09/abortable-fetch#in_a_service_worker might help","msgtype":"m.text"},"ts":1513263877000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"not really","msgtype":"m.text"},"ts":1513263922000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: is your proposal fetch(url, { signal: event.request })?","msgtype":"m.text"},"ts":1513263970000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I wanted there to be a clear distinction between \"pls attempt to abort\" and \"this has aborted\"","msgtype":"m.text"},"ts":1513264043000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"With request.onabort, it wouldn't be clear which that was","msgtype":"m.text"},"ts":1513264067000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I guess I don't understand why we want the same signal in fetch(url, { signal: event.request.signal })","msgtype":"m.text"},"ts":1513264133000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"looks wrong to me","msgtype":"m.text"},"ts":1513264144000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but this is serviceworkers, so I stop looking at this now","msgtype":"m.text"},"ts":1513264153000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: you want the fetch (or multiple of them) in the service worker to be dependent on the main thread","msgtype":"m.text"},"ts":1513264376000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fetchEvent.request gives details on the request the browser would make if the service worker wasn't there. It includes the abort signal. You may want to make a different request, but one that's 'inspired' by the original request. Eg use some of the same headers, search string etc etc. One of the things you probably want to copy is any intent to abort.","msgtype":"m.text"},"ts":1513264454000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: so what if the original request is aborted or you end up using same signal with many fetch calls","msgtype":"m.text"},"ts":1513264864000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I think I'm missing something in this expected pattern","msgtype":"m.text"},"ts":1513264880000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: using the same signal with many fetches is fine if they're related https://developers.google.com/web/updates/2017/09/abortable-fetch#one_signal_many_fetches","msgtype":"m.text"},"ts":1513264918000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: signal says it is aborted","msgtype":"m.text"},"ts":1513264981000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but it is just one of the fetches","msgtype":"m.text"},"ts":1513264997000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I guess you're saying that if one is interested in the case when any of the fetches in a group fails, then this works fine","msgtype":"m.text"},"ts":1513265055000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: fetchStory() is an operation that may involve n fetches. Aborting that operation will involve aborting any of those active fetches, and avoiding any additional ones.","msgtype":"m.text"},"ts":1513265136000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"hmm, still missing something :) I would understand this if signal (should be then called something else) was abortable, and calling abort() on it would abort all the fetch and then abort event would be dispatched. But I guess the controller is now somewhere else, hidden","msgtype":"m.text"},"ts":1513265333000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: So, I give you a buzzer, and tell you to do star jumps until the buzzer buzzes. I, the owner of the buzzer, know the special code to emit to make the buzzer buzz. The signal is the buzzer.","msgtype":"m.text"},"ts":1513265746000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"You can't make the buzzer buzz. It's my buzzer.","msgtype":"m.text"},"ts":1513265768000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"You're holding it, so you can react to it buzzing.","msgtype":"m.text"},"ts":1513265800000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"And why we want this pattern?","msgtype":"m.text"},"ts":1513265842000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"wonders what is going on here...","msgtype":"m.emote"},"ts":1513265879000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"anyhow, sounds like I should read all the relevant discussions which has lead to this","msgtype":"m.text"},"ts":1513265882000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"reads backscroll...","msgtype":"m.emote"},"ts":1513265885000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: nothing too useful. I'm not being familiar with various reasoning around service worker related API design","msgtype":"m.text"},"ts":1513265916000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"definitely an area I should stay away :)","msgtype":"m.text"},"ts":1513265942000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: this isn't a service worker API","msgtype":"m.text"},"ts":1513265961000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"smaug____: Other languages have similar things https://msdn.microsoft.com/en-us/library/system.threading.cancellationtoken(v=vs.110).aspx#Anchor_6","msgtype":"m.text"},"ts":1513265978000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"smaug____: I think its just separation of concerns... separate interfaces for \"ability react to the abort\" and \"ability to trigger the abort\"","msgtype":"m.text"},"ts":1513266053000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"smaug____: some people really wanted this and I think it made some things cleaner to integrate with fetch, streams, and service worker","msgtype":"m.text"},"ts":1513266079000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"smaug____: but fetch abort was a massive bikeshed fest... honestly I accept anything JakeA/annevk/Domenic were able to get consensus on just to have the capability","msgtype":"m.text"},"ts":1513266107000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"ok. And yeah, I'm not proposing any changes since the ship has sailed, as I said.  Occasionally it would be just nice to understand the reasoning.","msgtype":"m.text"},"ts":1513266202000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: it's entirely possible there's a better pattern that wasn't considered, as with everything","msgtype":"m.text"},"ts":1513266253000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"do you have one in mind?","msgtype":"m.text"},"ts":1513266256000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"not sure it is even worth to think about that now.","msgtype":"m.text"},"ts":1513266316000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(random note, I wish more people would have commented microtasks when they were introduced. Perhaps we would have found some better idea.)","msgtype":"m.text"},"ts":1513266350000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"its also easier to combine separate interfaces into a single object (put abort() on signal) then it is to split things in the future... so it seemed safer to start with this","msgtype":"m.text"},"ts":1513266435000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"maybe we can make a simplified abort interface in the future","msgtype":"m.text"},"ts":1513266445000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: https://searchfox.org/mozilla-central/source/dom/html/HTMLInputElement.cpp#180 already seems like a different feature","msgtype":"m.text"},"ts":1513267803000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: and it's not even behind a flag","msgtype":"m.text"},"ts":1513267808000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: ^^","msgtype":"m.text"},"ts":1513267810000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wonders if that inputmode thing impl is hooked up to something","msgtype":"m.emote"},"ts":1513267835000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I thought it is used on android, but I could be wrong","msgtype":"m.text"},"ts":1513267883000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I think I'm wrong","msgtype":"m.text"},"ts":1513267972000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"othermaciej: was Event's having cancel() a typo? Firefox does not have that method at least","msgtype":"m.text"},"ts":1513268704000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"IT was, I meant stopPropagation(), as Jake correctly inferred","msgtype":"m.text"},"ts":1513268725000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Just so I can avoid asking more basic questions in the issue, where in the event dispatch process is the microtask queue drained?","msgtype":"m.text"},"ts":1513268793000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Is it after every individual event listener gets called?","msgtype":"m.text"},"ts":1513268803000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: it depends on whether the JavaScript stack is empty","msgtype":"m.text"},"ts":1513268823000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"othermaciej: and yes, that is the point","msgtype":"m.text"},"ts":1513268837000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"othermaciej: that invokes an algorithm defined in IDL that integrates with HTML that drains the microtask queue if the JavaScript stack is empty","msgtype":"m.text"},"ts":1513268866000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"othermaciej: https://dom.spec.whatwg.org/#concept-event-listener-inner-invoke step 7, to https://heycam.github.io/webidl/#call-a-user-objects-operation step 16.2, to https://html.spec.whatwg.org/multipage/webappapis.html#clean-up-after-running-script","msgtype":"m.text"},"ts":1513268877000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"making the timing of event delivery depend on whether the JavaScript stack is empty seems bad","msgtype":"m.text"},"ts":1513268883000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"smaug____ should know why microtasks work this way","msgtype":"m.text"},"ts":1513268919000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's probably about time we start adding note around it","msgtype":"m.text"},"ts":1513268935000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"besides dispatching custom events by hand, I'm pretty sure there are Web Platform APIs that will synchronously dispatch an event from a method called from JavaScript","msgtype":"m.text"},"ts":1513268942000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"for example element.click()","msgtype":"m.text"},"ts":1513268967000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"or element.focus()","msgtype":"m.text"},"ts":1513268973000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"This seems like a big weakness of the Observable proposal, yet is required to get the nice integration with async/await","msgtype":"m.text"},"ts":1513268998000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"abortController.abort() causes the \"abort\" event to fire on the related signal without a turn of the event loop too","msgtype":"m.text"},"ts":1513269087000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"The idea with microtask behaving that way was to let event listeners work without necessarily affecting each others. So that when a listener is called, all the mutation observer callbacks would have been called already.","msgtype":"m.text"},"ts":1513269100000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Note, Microtasks were designed way before all the Promise stuf","msgtype":"m.text"},"ts":1513269128000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"That behaviour enables IDB to be wrapped in promises, so I'm a fan","msgtype":"m.text"},"ts":1513269156000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"or perhaps there were ideas of Promises or Futures, but their scheduling definitely wasn't based on microtasks initially","msgtype":"m.text"},"ts":1513269167000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I am definitely not questioning the timing of microtasks","msgtype":"m.text"},"ts":1513269177000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I just wanted to understand what it is","msgtype":"m.text"},"ts":1513269185000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Since this Observable proposal for events depends on it","msgtype":"m.text"},"ts":1513269202000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"(I have started to question the timing of microtasks because devs seem to misuse them badly by creating long promise chains, and that causes jank)","msgtype":"m.text"},"ts":1513269225000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(but as I said, microtasks were not designed with Promise kind of thing in mind. )","msgtype":"m.text"},"ts":1513269292000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(I only mention the IDB thing because that's when I 'discovered' that microtasks happen between event callbacks in stack-empty cases)","msgtype":"m.text"},"ts":1513269309000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"MikeSmith: I don't see any changes at https://github.com/validator/validator/commits/master, but the validator in the CI build for HTML started reporting the focus-within etc. CSS errors again. Any chance you pushed some changes to the .tgz or something that might have regressed?","msgtype":"m.text"},"ts":1513273888000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"hmm could be","msgtype":"m.text"},"ts":1513274021000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"looks","msgtype":"m.emote"},"ts":1513274024000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Domenic: fixed","msgtype":"m.text"},"ts":1513275848000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"sorry about that","msgtype":"m.text"},"ts":1513275851000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Phew. What happened?","msgtype":"m.text"},"ts":1513275859000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the formatting of the messages changed","msgtype":"m.text"},"ts":1513275865000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I added “ and ” around the literals in the messages","msgtype":"m.text"},"ts":1513275889000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"> Unknown pseudo-element or pseudo-class “:focus-within”","msgtype":"m.text"},"ts":1513275905000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"> “leader(\". \")” is not a “content” value","msgtype":"m.text"},"ts":1513275923000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"those were unquoted before","msgtype":"m.text"},"ts":1513275932000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the filter expression didn’t account for the quotes","msgtype":"m.text"},"ts":1513275953000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I’ll add some tests","msgtype":"m.text"},"ts":1513275985000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so that I don’t regress it again","msgtype":"m.text"},"ts":1513276000000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1513276018000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"jgraham: https://github.com/whatwg/meta/issues/58","msgtype":"m.text"},"ts":1513289435000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Thanks","msgtype":"m.text"},"ts":1513289955000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"someone explained to me CORS as follow: \"Lets make it easier. badsite.com sends a JS asset to your browser and in that JS it tells your browser to request bank.com/send-money-to-the-bad-guys, bank.com is the one who sets the headers that allow requests to come from badsite.com\"","msgtype":"m.text"},"ts":1513290545000,"senderName":"muteki","senderId":"muteki@irc"},
{"content":{"body":"but is it true if badsite is not aware by bank.com, the request send-money-to-the-bad-guys still be issued by the browser and processed by bank.com, it's just the response not being processed by the browser?","msgtype":"m.text"},"ts":1513290556000,"senderName":"muteki","senderId":"muteki@irc"},
{"content":{"body":"muteki: how does badsite.com send a JS asset in the first place?","msgtype":"m.text"},"ts":1513291206000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"good question, I didn't ask, but I guess probably the user wander to that page accidentally?","msgtype":"m.text"},"ts":1513291321000,"senderName":"muteki","senderId":"muteki@irc"},
{"content":{"body":"I was basically asking some general concepts behind CORS and that's the response I got","msgtype":"m.text"},"ts":1513291344000,"senderName":"muteki","senderId":"muteki@irc"},
{"content":{"body":"muteki: did you read through the examples in the Fetch Standard?","msgtype":"m.text"},"ts":1513292224000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: you meant 3.2.6 in https://fetch.spec.whatwg.org/#cors-protocol ?","msgtype":"m.text"},"ts":1513292296000,"senderName":"muteki","senderId":"muteki@irc"},
{"content":{"body":"I think I understand how it works, but I am just trying to understand the rationale behind it and what does it use to protect against... especially the example mentioned by others about bank.com, seems to be not quite fitting the actual CORS protocol","msgtype":"m.text"},"ts":1513292407000,"senderName":"muteki","senderId":"muteki@irc"},
{"content":{"body":"muteki: I have to admit I don’t quite follow that example either","msgtype":"m.text"},"ts":1513292445000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wondering maybe that example (badsite.com/bank.com) is not quite accurate","msgtype":"m.text"},"ts":1513292461000,"senderName":"muteki","senderId":"muteki@irc"},
{"content":{"body":"muteki: CORS in principle does not protect; it enables sharing of otherwise protected resources","msgtype":"m.text"},"ts":1513292499000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"muteki: the reason those resources are protected is because they might contain confidential information about the user or the user’s local network","msgtype":"m.text"},"ts":1513292555000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think that makes sense, because the resource can be accessed regardless using curl or other method, but it's to workaround (or provide way to add exception) to the same origin policy enforced by the browser, am I correct?","msgtype":"m.text"},"ts":1513292573000,"senderName":"muteki","senderId":"muteki@irc"},
{"content":{"body":"muteki: you cannot always fetch it with curl","msgtype":"m.text"},"ts":1513292618000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"muteki: consider a fetch with the cookies from the user","msgtype":"m.text"},"ts":1513292634000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"muteki: or to a local IP or IP-authenticated server","msgtype":"m.text"},"ts":1513292657000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"muteki: https://annevankesteren.nl/2015/02/same-origin-policy might also help","msgtype":"m.text"},"ts":1513292672000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"thanks, let me read through that","msgtype":"m.text"},"ts":1513292693000,"senderName":"muteki","senderId":"muteki@irc"},
{"content":{"body":"annevk: thanks for the link, so here is what I gathered after reading your blog plus the example people gave me, please let me know if I am missing anything...  it sounds like his badsite.com is untrusted.example as described in your blog and bank.com is intranet.example.  so, without CORS, bad JS hosting by untrusted.example can ask user's browser to access resource on intranet.example.  but even with","msgtype":"m.text"},"ts":1513294857000,"senderName":"muteki","senderId":"muteki@irc"},
{"content":{"body":"CORS, untrusted.example can still serve bad JS to browser, and browser will send request to intranet.example and response will be sent but not process by browser..  and if we want to prevent request (or full power request in your blog) processed by intranet, we need preflight requests for further protection.  am I correct?","msgtype":"m.text"},"ts":1513294863000,"senderName":"muteki","senderId":"muteki@irc"}
]