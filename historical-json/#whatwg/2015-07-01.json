[
{"content":{"body":"Anyone with latest Safari mind testing if Array.prototype.includes is present?","msgtype":"m.text"},"ts":1435723350000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Also Uint8Array.prototype.includes","msgtype":"m.text"},"ts":1435723537000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Safari 6.1.6 returns undefined for both","msgtype":"m.text"},"ts":1435723820000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Sorry, should have specified I was looking for Safari 8 and 9","msgtype":"m.text"},"ts":1435723866000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: neither in Safari 8.0.5","msgtype":"m.text"},"ts":1435728443000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"I have reports of it being in 8.1","msgtype":"m.text"},"ts":1435728463000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: 8.1 here","msgtype":"m.text"},"ts":1435729664000,"senderName":"terinjokes","senderId":"terinjokes@irc"},
{"content":{"body":"Array.prototype.includes üëç, Uint8Array.prototype.includes üëé","msgtype":"m.text"},"ts":1435729731000,"senderName":"terinjokes","senderId":"terinjokes@irc"},
{"content":{"body":"JakeA: I guess we could revisit the new Request() aspect of fetch(), if someone has the time, though that still leaves open what new Request() should do","msgtype":"m.text"},"ts":1435739417000,"senderName":"annevk_","senderId":"annevk_@irc"},
{"content":{"body":"annevk: I'm not suggesting it's wrong, just couldn't work out why it was different","msgtype":"m.text"},"ts":1435739486000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: so request has a pointer to a stream; then you create a new request that then gets to own that stream","msgtype":"m.text"},"ts":1435739529000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: the old request now no longer has a pointer to a stream, sure, the used flag can be set, but body would be null","msgtype":"m.text"},"ts":1435739551000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: and then you get into the thing what null body should mean...","msgtype":"m.text"},"ts":1435739574000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ahh, I thought new Request(request) would create a new stream that read from the original request stream","msgtype":"m.text"},"ts":1435739675000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"your way is more efficient","msgtype":"m.text"},"ts":1435739681000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"has been reading too much C++... this is basically auto_ptr vs. shared_ptr","msgtype":"m.emote"},"ts":1435741232000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I am not sure what the use case is for a \"copy constructor\" for Request anyway?","msgtype":"m.text"},"ts":1435741273000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: mostly to normalize the request","msgtype":"m.text"},"ts":1435742766000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: while making sure we don't forget anything","msgtype":"m.text"},"ts":1435742776000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"In what case can a Request be un-normalized?","msgtype":"m.text"},"ts":1435742808000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: the one passed to FetchEvent","msgtype":"m.text"},"ts":1435742873000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: (and anything passed to FetchEvent that's then passed to cache.put())","msgtype":"m.text"},"ts":1435742924000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: how did the author generate an un-normalized Request to pass to FetchEvent though?","msgtype":"m.text"},"ts":1435742925000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: the UA did","msgtype":"m.text"},"ts":1435742935000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: why would the UA do something seemingly crazy like that?","msgtype":"m.text"},"ts":1435742950000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: it's not crazy, it reflects the settings for the document, but not all of those can be used for the service worker, so you need a reset of sorts before you go to the network","msgtype":"m.text"},"ts":1435742981000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: the document/worker/shared worker*","msgtype":"m.text"},"ts":1435742995000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm. I don't really understand, but I'll take your word for it...","msgtype":"m.text"},"ts":1435743036000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: e.g. the client of a request passed to FetchEvent will be the document/worker","msgtype":"m.text"},"ts":1435743079000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: but the request resulting from fetch() should always have a client that is the global environment","msgtype":"m.text"},"ts":1435743120000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: there's a ton of stuff like that","msgtype":"m.text"},"ts":1435743130000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1435743135000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"refers back to his Twitter rant about not enough people understanding what is going on","msgtype":"m.emote"},"ts":1435743169000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hey annevk Domenic :)","msgtype":"m.text"},"ts":1435743205000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"so what about the promise rejection events?","msgtype":"m.text"},"ts":1435743210000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"hahaha","msgtype":"m.text"},"ts":1435743218000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"do you think mozilla will implement them?","msgtype":"m.text"},"ts":1435743236000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"Oh, wait, I thought you said cancelation","msgtype":"m.text"},"ts":1435743239000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bz seemed open to implementing them","msgtype":"m.text"},"ts":1435743252000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"would be cool to get some feedback on the current spec","msgtype":"m.text"},"ts":1435743270000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"I didn't really follow that thread admittedly","msgtype":"m.text"},"ts":1435743278000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jochen__: pointer?","msgtype":"m.text"},"ts":1435743281000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"impl. in blink is done % feedback from other vendors","msgtype":"m.text"},"ts":1435743282000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"https://github.com/domenic/unhandled-rejections-browser-spec","msgtype":"m.text"},"ts":1435743299000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"+ the three pull requests from me :)","msgtype":"m.text"},"ts":1435743308000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"jochen__: I need to update for https://github.com/domenic/unhandled-rejections-browser-spec/issues/2#issuecomment-113226244","msgtype":"m.text"},"ts":1435743313000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it seems like this is a new phase after microtasks","msgtype":"m.text"},"ts":1435743323000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://github.com/domenic/unhandled-rejections-browser-spec/issues/1 seems important","msgtype":"m.text"},"ts":1435743341000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Sigh, I should do that too, it's just so much less exciting","msgtype":"m.text"},"ts":1435743362000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"#1 is spec'd and implemented, so just close it?","msgtype":"m.text"},"ts":1435743378000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"To be clear, it's about *Worker objects having .onunhandledrejection etc.","msgtype":"m.text"},"ts":1435743383000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"No, #1 is not specced or implemented","msgtype":"m.text"},"ts":1435743388000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Worker global scopes have the events. Worker objects do not yet.","msgtype":"m.text"},"ts":1435743409000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1435743417000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"not sure that's desirable","msgtype":"m.text"},"ts":1435743426000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"\"Environment settings object seems to be a place to dump stuff?\" sounds about right","msgtype":"m.text"},"ts":1435743426000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"haha","msgtype":"m.text"},"ts":1435743433000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that would require dispatching the events cross process","msgtype":"m.text"},"ts":1435743446000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"jochen__: yeah, it's kind of a \"nobody has asked for this, but it's consistent with onerror\" thing","msgtype":"m.text"},"ts":1435743463000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Does Worker's onerror fire for all exceptions or just during compile?","msgtype":"m.text"},"ts":1435743519000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i'd be surprised","msgtype":"m.text"},"ts":1435743536000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"Good question... bz seemed to imply all errors, but worth checking...","msgtype":"m.text"},"ts":1435743540000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I do agree that being consistent would be nice","msgtype":"m.text"},"ts":1435743553000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if it fired for all exceptions","msgtype":"m.text"},"ts":1435743561000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"And it doesn't seem super hard to post a message across the process...","msgtype":"m.text"},"ts":1435743564000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"because out of process","msgtype":"m.text"},"ts":1435743565000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"what would the message contain?","msgtype":"m.text"},"ts":1435743574000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"Nah, all errors https://html.spec.whatwg.org/multipage/workers.html#runtime-script-errors-2","msgtype":"m.text"},"ts":1435743577000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"For dedicated workers, if the error is still not handled afterwards, the user agent must queue a task to fire a trusted event that uses the ErrorEvent interface...\"","msgtype":"m.text"},"ts":1435743592000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ohhhh interesting","msgtype":"m.text"},"ts":1435743602000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"and with the error attribute initialised to null\"","msgtype":"m.text"},"ts":1435743610000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"jochen__: sorry, I meant internally the browser would use a message to transmit the error...","msgtype":"m.text"},"ts":1435743613000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"instead of trying to structured clone the error object or something","msgtype":"m.text"},"ts":1435743621000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that is the problem in this case","msgtype":"m.text"},"ts":1435743623000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"there's no structured cloning of Error objects","msgtype":"m.text"},"ts":1435743635000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"to get a coherent PromiseRejectionEvent you'd have to structured clone the { promise, error } object","msgtype":"m.text"},"ts":1435743636000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1435743638000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so we could fire an event with no information...","msgtype":"m.text"},"ts":1435743647000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1435743667000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"The best we could do (messy) is switch from promise objects to promise IDs, and then also have a message field (optionally lineno/columno/filename).","msgtype":"m.text"},"ts":1435743723000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Seems not worth it","msgtype":"m.text"},"ts":1435743726000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think we should fix structured cloning of Error btw: https://www.w3.org/Bugs/Public/show_bug.cgi?id=28389","msgtype":"m.text"},"ts":1435743739000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"s/of Error// ;)","msgtype":"m.text"},"ts":1435743798000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"maha","msgtype":"m.text"},"ts":1435743805000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"good luck with that","msgtype":"m.text"},"ts":1435743809000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"there's no guarantee that the reason is a an error","msgtype":"m.text"},"ts":1435743810000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"could be an array buffer","msgtype":"m.text"},"ts":1435743815000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"But yeah, promises seems harder","msgtype":"m.text"},"ts":1435743815000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"^ right, also that","msgtype":"m.text"},"ts":1435743816000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"true","msgtype":"m.text"},"ts":1435743832000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so: no events on *Worker objects :)","msgtype":"m.text"},"ts":1435743843000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"We should get bz's buy in on that, but it sounds good to me...","msgtype":"m.text"},"ts":1435743866000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"also, the event isn't really like the error event","msgtype":"m.text"},"ts":1435743867000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"I mean in the other case we also fire without any information...","msgtype":"m.text"},"ts":1435743868000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"in the other case we have message/lineno/colno/filename","msgtype":"m.text"},"ts":1435743882000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that has a lot of special implications that are just not true for this event, i.e., it's own kind of event listener","msgtype":"m.text"},"ts":1435743889000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"so what about this phase after microtask checkpoint thing","msgtype":"m.text"},"ts":1435743917000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"Domenic: you can just do null defaulting in the dictionary","msgtype":"m.text"},"ts":1435743932000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: since the event cannot be constructed without the dictionary that's fine","msgtype":"m.text"},"ts":1435743965000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: this null thing is quite confusing actually","msgtype":"m.text"},"ts":1435743998000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: Firefox seems to give undefined for things HTML says are null","msgtype":"m.text"},"ts":1435744012000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1435744020000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"HTML is imprecise","msgtype":"m.text"},"ts":1435744044000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You don't have to use null","msgtype":"m.text"},"ts":1435744048000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"let me find what i am talking about","msgtype":"m.text"},"ts":1435744048000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"And you could require both a promise and a reason","msgtype":"m.text"},"ts":1435744056000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not sure what \"require any reason\" would imply though, I guess best to leave that optional","msgtype":"m.text"},"ts":1435744086000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(or even better, figure out what that means)","msgtype":"m.text"},"ts":1435744101000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: did you see my new pull requests btw?","msgtype":"m.text"},"ts":1435744267000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"jochen__: yeah, I've been having fun with V8 extras today, will probably merge when I get home from work","msgtype":"m.text"},"ts":1435744288000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: here is an example of null that confuses me. https://html.spec.whatwg.org/multipage/comms.html#messageevent","msgtype":"m.text"},"ts":1435744297000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"The data attribute must return the value it was initialised to. When the object is created, this attribute must be initialised to null.\"","msgtype":"m.text"},"ts":1435744310000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But (new MessageEvent({})).data === undefined","msgtype":"m.text"},"ts":1435744319000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: that's a bug","msgtype":"m.text"},"ts":1435744348000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Maybe because of how the constructor works? But teh constructor isn't specified outside of IDL as far as I can tell.","msgtype":"m.text"},"ts":1435744359000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"We have a generic description for event constructors: https://dom.spec.whatwg.org/#constructing-events","msgtype":"m.text"},"ts":1435744386000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It needs some cleaning up though to work with internal slots and stuff, but IDL hasn't formalized those :-(","msgtype":"m.text"},"ts":1435744401000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah OK, that's nifty","msgtype":"m.text"},"ts":1435744406000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So that definition implies .data === undefined I think since {}.data === undefined","msgtype":"m.text"},"ts":1435744419000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But note that if a dictionary member is undefined it's missing so it wouldn't be set by that constructor","msgtype":"m.text"},"ts":1435744432000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So I guess... null only matters for UA created MessageEvents that don't bother to set data?","msgtype":"m.text"},"ts":1435744434000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hmm","msgtype":"m.text"},"ts":1435744442000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So it would be null per the prose rules","msgtype":"m.text"},"ts":1435744445000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"for each dictionary member defined therein find the attribute on event whose identifier matches the key of the dictionary member and then set the attribute to the value of that dictionary member\" I dunno","msgtype":"m.text"},"ts":1435744462000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"data\" sounds like a dictionary member defined therein","msgtype":"m.text"},"ts":1435744468000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But instead of relying on prose it's way better to just default to null in the dictionary for events that can't be created through document.createEvent()","msgtype":"m.text"},"ts":1435744474000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"OK well defaulting to null seems like a good plan I'll file that on myself and fix later.","msgtype":"m.text"},"ts":1435744511000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I think IDL says that if a member is \"undefined\" it's not defined","msgtype":"m.text"},"ts":1435744541000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I read it as referring to the actual definition, i.e. `dictionary MessageEventInit { ... }`","msgtype":"m.text"},"ts":1435744575000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Nope, it refers to the argument passed","msgtype":"m.text"},"ts":1435744599000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But it should use \"present\" and \"not present\" as terminology...","msgtype":"m.text"},"ts":1435744638000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"*shrug*","msgtype":"m.text"},"ts":1435744649000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"bbiab, food time","msgtype":"m.text"},"ts":1435744653000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"enjoy","msgtype":"m.text"},"ts":1435745267000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"wanderview: that bug report on Twitter‚Ä¶ Firefox fails a CORS check for fetch('//other-origin/foo') from a page, even if the serviceworker returns a valid non-opaque response","msgtype":"m.text"},"ts":1435747842000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I wonder why Google Calendar can confirm via email that someone is attending but cannot actually show that information in the event... Maybe a bug specific for organizations using Google Calendar?","msgtype":"m.text"},"ts":1435748945000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: it seems weird that Streams makes many states unobservable","msgtype":"m.text"},"ts":1435750864000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: streams are supposed to be largely stateless","msgtype":"m.text"},"ts":1435750879000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: e.g. not being able to distinguish an empty stream from a non-read canceled stream is just... uh","msgtype":"m.text"},"ts":1435750890000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: e.g. consider arrays, you don't care how the array became empty","msgtype":"m.text"},"ts":1435750891000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"they're a data structure, not a record of what's happened in your system","msgtype":"m.text"},"ts":1435750909000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hmm, guess I have to think about it more","msgtype":"m.text"},"ts":1435750961000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: why is it a good thing that they don't keep track? Most asynchronous data structures seem to keep track in some way...","msgtype":"m.text"},"ts":1435752401000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And more specifically I'd think most stream implementations would keep track of such details","msgtype":"m.text"},"ts":1435752449000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: no async data structures I can think of keep track. Certainly not promises. No data structures in general, that I can think of. Why? Hmm...","msgtype":"m.text"},"ts":1435753523000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: https://w3c.github.io/FileAPI/#dfn-Blob does","msgtype":"m.text"},"ts":1435753553000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: no, it definitely doesn't. Example:","msgtype":"m.text"},"ts":1435753575000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: isClosed?","msgtype":"m.text"},"ts":1435753585000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You can't distinguish between a blob with [1,2,3,4,5] created from scratch, versus a blob with [1,2,3,4,5] created from slicing a blob [1,...,1000]","msgtype":"m.text"},"ts":1435753609000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"sure, but all closed blobs are the same","msgtype":"m.text"},"ts":1435753630000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"nobody cares if the closed blob used to have 1000 bytes in it or 0","msgtype":"m.text"},"ts":1435753644000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but they're distinguishable from empty blobs","msgtype":"m.text"},"ts":1435753648000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i mean, empty but not-yet-closed streams are distinguishable from empty-and-closed streams","msgtype":"m.text"},"ts":1435753679000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it's just that if you know there's no more data to put in the stream, there's not much point in keeping the stream unclosed.","msgtype":"m.text"},"ts":1435753696000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I thought wanderview said that was not true","msgtype":"m.text"},"ts":1435753702000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"just makes it annoying for anyone to figure out whether the stream is over yet","msgtype":"m.text"},"ts":1435753711000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"same as blobs","msgtype":"m.text"},"ts":1435753713000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ehhhh it's borderline, it's a matter of whether .getReader().closed fulfills immediately or not","msgtype":"m.text"},"ts":1435753747000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"we could add synchronous querying of the fact, but in general it's better to just write generic code that isn't so concerned with the state, and deals with the generic starts-readable-becomes-closed scenario, with starts-readable-immediately-becomes-closed as a special case.","msgtype":"m.text"},"ts":1435753812000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess it's okay, it seems somewhat weird that if you cancel a stream it's suddenly treated as the empty string, but folks will deal","msgtype":"m.text"},"ts":1435753879000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"remember you can only cancel if you \"own\" it (i.e. you can get a reader)","msgtype":"m.text"},"ts":1435753937000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So actually, is that not a problem for the synthetic case we've been discussing?","msgtype":"m.text"},"ts":1435754191000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm how so?","msgtype":"m.text"},"ts":1435754202000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You can now empty any response from a server and the browser cannot tell whether the server returned the empty string or someone meddled with the stream","msgtype":"m.text"},"ts":1435754254000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"@#&*()*$","msgtype":"m.text"},"ts":1435754273000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"OK. I will think about that tomorrow. That caught me by surprise a lot. Dammit.","msgtype":"m.text"},"ts":1435754328000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"We should just have an isDirty flag, would work instead of offset too... :-P","msgtype":"m.text"},"ts":1435754464000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I mean, last time my mind was blown, I went from \"no state!!\" to \"OK I guess offset is not the worst thing ever.\" Maybe tomorrow I'll come around to isDirty :(","msgtype":"m.text"},"ts":1435754504000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess a wrapper also would handle all of this","msgtype":"m.text"},"ts":1435754526000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Would that impact speed? But sure...","msgtype":"m.text"},"ts":1435754570000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But yhirano_ worries about performance, especially with piping","msgtype":"m.text"},"ts":1435754573000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1435754574000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ideally what we expose here is the lowest of the lowest-level stuff, minus all the security bugs","msgtype":"m.text"},"ts":1435754606000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"in theory it shouldn't but in the still-somewhat-speculative world of off-main-thread piping, it could. So far that world is pretty vague but we've tried to maintain enough flexibility.","msgtype":"m.text"},"ts":1435754611000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You can also do yhirano_'s preferred wrapper https://github.com/yutakahirano/fetch-with-streams/pull/43#issuecomment-110968431 which should not impact perf","msgtype":"m.text"},"ts":1435755171000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i should sleep","msgtype":"m.text"},"ts":1435755178000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"jochen__: Domenic: https://bugzilla.mozilla.org/show_bug.cgi?id=1179244","msgtype":"m.text"},"ts":1435761351000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"Your password fails to meet the security requirements\" blabla","msgtype":"m.text"},"ts":1435761433000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"annevk: so the promise event stuff will be in DOM or HTML spec?","msgtype":"m.text"},"ts":1435762446000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"at least the DOM Event part of it?","msgtype":"m.text"},"ts":1435762451000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"it's described as patches to HTML and ECMAScript","msgtype":"m.text"},"ts":1435762472000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"another question, annevk did you figure out where and when the custom element meeting actually will be?","msgtype":"m.text"},"ts":1435762569000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(even if I had stronger opinions on custom elements, the timing is rather bad. July is the holiday month in Finland )","msgtype":"m.text"},"ts":1435762656000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: not yet, the ball is with slightlyoff it seems","msgtype":"m.text"},"ts":1435762661000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: it's very likely in Mountain View","msgtype":"m.text"},"ts":1435762674000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: but it could move to San Francisco I suppose","msgtype":"m.text"},"ts":1435762685000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm staying in San Francisco since that's where the service worker meetup will be, I believe","msgtype":"m.text"},"ts":1435762711000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh, right, that one too","msgtype":"m.text"},"ts":1435762731000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"waiting to see the time when SW is stable and implemented everywhere","msgtype":"m.text"},"ts":1435762808000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"maybe next year","msgtype":"m.text"},"ts":1435762835000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"annevk: the custom elements meeting is on July 21st, right? < smaug____","msgtype":"m.text"},"ts":1435764630000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: yes","msgtype":"m.text"},"ts":1435764658000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yes, that one, but still unclear where","msgtype":"m.text"},"ts":1435764702000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"ah ok","msgtype":"m.text"},"ts":1435764722000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I assumed it will be at Google in Mountain View where we had it last","msgtype":"m.text"},"ts":1435764795000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"*where we had the Shadow DOM meeting","msgtype":"m.text"},"ts":1435764809000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but that room was too small","msgtype":"m.text"},"ts":1435764825000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and not arranged so well","msgtype":"m.text"},"ts":1435764831000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"or I dunno, maybe that actually helped the meeting be more productive","msgtype":"m.text"},"ts":1435764859000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I hope there's not going to be a ton of people...","msgtype":"m.text"},"ts":1435765764000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"no holographic telepresence at google yet?","msgtype":"m.text"},"ts":1435765966000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"annevk: MikeSmith: one thing which made the last meeting a bit hard was the proposals coming right before the meeting","msgtype":"m.text"},"ts":1435767804000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"getting proposals a week earlier or so would have perhaps made the meeting even more productive","msgtype":"m.text"},"ts":1435767827000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: agreed","msgtype":"m.text"},"ts":1435767875000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I've been trying to do my homework https://esdiscuss.org/topic/will-any-new-features-be-tied-to-constructors but so far that has made me skeptical of doing Custom Elements at all...","msgtype":"m.text"},"ts":1435767907000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: btw, I think cloning for printing isn't  perhaps that interesting case, since we wouldn't probably run ctors, but try to clone whatever there is in shadow DOM or so, I think","msgtype":"m.text"},"ts":1435768189000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"not sure  though","msgtype":"m.text"},"ts":1435768193000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"in Gecko we don't run scripts in the clone document","msgtype":"m.text"},"ts":1435768202000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"beforeprint may change the original document right before printing and then afterprint restore the state after cloning","msgtype":"m.text"},"ts":1435768247000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"as of now","msgtype":"m.text"},"ts":1435768251000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: if in order to create an element you need to run its constructor, cloning would need to do that too","msgtype":"m.text"},"ts":1435768266000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not sure about clone-for-printing","msgtype":"m.text"},"ts":1435768347000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"that is rather odd case","msgtype":"m.text"},"ts":1435768352000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"bz likes to bring it up","msgtype":"m.text"},"ts":1435768362000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but same goes for text selection and then copying things","msgtype":"m.text"},"ts":1435768372000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it just needs some state which can be printed","msgtype":"m.text"},"ts":1435768376000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1435768390000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"selection is perhaps more valid case, and just plain normal cloneNode()","msgtype":"m.text"},"ts":1435768412000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"cloneNode() invoking some JavaScript seems harmless","msgtype":"m.text"},"ts":1435768460000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the parser invoking JavaScript is potentially problematic, since non-</script> points are not vetted","msgtype":"m.text"},"ts":1435768485000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and then there's various algorithms in browsers that want to clone elements, such as printing and editing, that might not anticipate the world to change","msgtype":"m.text"},"ts":1435768512000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"cloneNode(true): when should the ctors run?","msgtype":"m.text"},"ts":1435768612000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: prolly in tree order","msgtype":"m.text"},"ts":1435768956000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: richt: davve: is the plan to support Web Audio without <audio> / <video> indirection?","msgtype":"m.text"},"ts":1435768981000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: but during cloning or right after?","msgtype":"m.text"},"ts":1435769123000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"annevk: yes.","msgtype":"m.text"},"ts":1435769152000,"senderName":"richt","senderId":"richt@irc"},
{"content":{"body":"smaug____: during, but I see how that would be problematic","msgtype":"m.text"},"ts":1435769157000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"richt: hey, I have some other questions I'd like to ask","msgtype":"m.text"},"ts":1435769180000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mostly relaying from sicking","msgtype":"m.text"},"ts":1435769186000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"richt: can \"content\" playback tell apart the user pressing pause and transient-solo happening?","msgtype":"m.text"},"ts":1435769207000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: not currently, no.","msgtype":"m.text"},"ts":1435769229000,"senderName":"richt","senderId":"richt@irc"},
{"content":{"body":"annevk: deliberately so that \"content\" playback respects the transient-solo interruption.","msgtype":"m.text"},"ts":1435769255000,"senderName":"richt","senderId":"richt@irc"},
{"content":{"body":"richt: e.g. if the user presses pause we'd like for the app to indicate in its controls that the user can resume","msgtype":"m.text"},"ts":1435769256000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"richt: but with transient-solo the app would want to disable its own controls","msgtype":"m.text"},"ts":1435769268000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"richt: it seems we have to enforce that interruption at a higher level either way","msgtype":"m.text"},"ts":1435769326000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"richt: I filed https://github.com/whatwg/mediasession/issues/89 to track this","msgtype":"m.text"},"ts":1435769445000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it's a good question. let's discuss further on gh.","msgtype":"m.text"},"ts":1435769515000,"senderName":"richt","senderId":"richt@irc"},
{"content":{"body":"JakeA: annevk: sanity check me please... a service worker script itself (an its importScripts()) should not be able to be intercepted, right?","msgtype":"m.text"},"ts":1435777710000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: correct, they shouldn't","msgtype":"m.text"},"ts":1435777934000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I'm glad you survived your train ride","msgtype":"m.text"},"ts":1435777951000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"and thanks","msgtype":"m.text"},"ts":1435777985000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I only just survived. I'm all out of sweat that's for sure.","msgtype":"m.text"},"ts":1435778298000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: Is there a way to inspect CacheStorage/window.caches visually in Chrome? (akin to the other Resources)","msgtype":"m.text"},"ts":1435785462000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: yes, in the resources tab","msgtype":"m.text"},"ts":1435785820000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Hm.. perhaps under a few layers of experimental options?","msgtype":"m.text"},"ts":1435785844000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: might only be in beta/Canary","msgtype":"m.text"},"ts":1435785850000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"tries Chromium instead of canary","msgtype":"m.emote"},"ts":1435785850000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Canary is my defualt","msgtype":"m.text"},"ts":1435785858000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: but yeah, enable the devtools experiments flag","msgtype":"m.text"},"ts":1435785876000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Ha, got it.","msgtype":"m.text"},"ts":1435785931000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"I had one random window open in Chrome stable","msgtype":"m.text"},"ts":1435785943000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"the one I happened to be using the console of","msgtype":"m.text"},"ts":1435785947000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1435785948000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Yeah,it's there in canary. great.","msgtype":"m.text"},"ts":1435785968000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"JakeA: You mentioned there were security concerns about exposing caches on window. You reckon that may realistically result in it being withdrawn?","msgtype":"m.text"},"ts":1435786205000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"I'm seeing a benefit in being able to populate caches on the first hit when SW isn't active yet.","msgtype":"m.text"},"ts":1435786226000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: I think it'll stay. Worst comes to the worst, you can postmessage to your installing worker telling it to cache some stuff","msgtype":"m.text"},"ts":1435786513000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: Yeah.","msgtype":"m.text"},"ts":1435786552000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"While somewhat \"uncool\", we're also looking into trying without SW. Just being honest.","msgtype":"m.text"},"ts":1435787140000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"We don't need the 'fetch' event from SW as requests go via our loader function. SW also means we have to re-create large parts of the loader function to know which requests to ignore.","msgtype":"m.text"},"ts":1435787151000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"From window we can populate and access cache. This does necessitate indirect eval, but localStorage does that already now :-/","msgtype":"m.text"},"ts":1435787160000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Without SW, it won't work offline. But, working offline won't work anyway until other infrastructure adapts. Getting SW right as the first puzzle piece for offline would be cool, but we're looking to get big performance gains first. Offline is not our team's objective :(","msgtype":"m.text"},"ts":1435787179000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"zcorpan: so resize event","msgtype":"m.text"},"ts":1435788435000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I couldn't land the patch implementing the behavior the spec has","msgtype":"m.text"},"ts":1435788448000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"since it regresses performance","msgtype":"m.text"},"ts":1435788457000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"this is the generic issue that too much stuff is happening around animation frame tick","msgtype":"m.text"},"ts":1435788483000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"if an event listener takes much time, updating the graphics may be postponed too much","msgtype":"m.text"},"ts":1435788564000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: ywah?","msgtype":"m.text"},"ts":1435788690000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"smaug____: ok. the relative order of things is in the html spec, so file a bug for hixie","msgtype":"m.text"},"ts":1435788796000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: the issue is that I don't really have any good proposal how resize handling should be spec'ed","msgtype":"m.text"},"ts":1435788863000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: file a bug anyway describing the problem :-)","msgtype":"m.text"},"ts":1435788895000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"files","msgtype":"m.emote"},"ts":1435788955000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I think I filed a separate, but related bug to have a way to say a callback should be called after animation frame tick","msgtype":"m.text"},"ts":1435788997000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"i need to sleep now. will be offline for some more weeks","msgtype":"m.text"},"ts":1435789218000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"file bugs or send me email for anything i should look at later :-)","msgtype":"m.text"},"ts":1435789264000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"he left, but https://www.w3.org/Bugs/Public/show_bug.cgi?id=28876","msgtype":"m.text"},"ts":1435789559000,"senderName":"smaug____","senderId":"smaug____@irc"}
]