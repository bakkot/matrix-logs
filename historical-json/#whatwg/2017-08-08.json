[
{"content":{"body":"domfarolino: that's cool, enjoy whatever else meanwhile","msgtype":"m.text"},"ts":1502174047000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: Unicode and fragments is a bit of a hassle still","msgtype":"m.text"},"ts":1502174082000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: probably best avoided, though it'll probably work","msgtype":"m.text"},"ts":1502174101000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: so FYI Watti seems to have a global table of IDs that it uses for deduping; then it can just use numeric suffixes. That seems less error-prone than your strategy?","msgtype":"m.text"},"ts":1502177534000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wanderview: JakeA: it sounds like you did figure out the idea. Which is that byte streams allow more transferring optimizations. (Even with non-BYOB readers.)","msgtype":"m.text"},"ts":1502177569000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: that guidance seems good, although an example (perhaps the RIC one genericized) would help drive it home. People do seem to really like stack inspection sometimes, instead of explicit parameter passing.","msgtype":"m.text"},"ts":1502177624000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: together we got there!","msgtype":"m.text"},"ts":1502177659000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I should spend more time on streams stuff.....","msgtype":"m.text"},"ts":1502177717000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: no, no... let us catch up first","msgtype":"m.text"},"ts":1502198818000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"What are examples of interfaces that declare a named property getter but not an indexed property getter?","msgtype":"m.text"},"ts":1502200334000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: Storage","msgtype":"m.text"},"ts":1502200443000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: DOMStringMap","msgtype":"m.text"},"ts":1502200461000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ta","msgtype":"m.text"},"ts":1502200479000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"wanderview: I wasn't aware Firefox had double keying","msgtype":"m.text"},"ts":1502202549000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Similar to the Safari thing?","msgtype":"m.text"},"ts":1502202555000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: its behind a pref and called something else I think... I believe we imported it from tor project","msgtype":"m.text"},"ts":1502202581000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"exciting though!","msgtype":"m.text"},"ts":1502202596000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: but our containers work in a similar way...  add some private data to the origin and its extra unique, etc","msgtype":"m.text"},"ts":1502202611000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: looks like privacy.firstparty.isolate","msgtype":"m.text"},"ts":1502202709000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: we may not have things like \"visiting a site as first party exempts it from double-keying\" like safari, though","msgtype":"m.text"},"ts":1502202728000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I haven't tried it","msgtype":"m.text"},"ts":1502202789000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"We are looking into something similar to that (\"origin attributes\" is what it's called I believe) especially to underlie things like suborigins","msgtype":"m.text"},"ts":1502203059000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: that's what Firefox has and some folks at Chrome want to copy","msgtype":"m.text"},"ts":1502203117000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: we also call it OriginAttributes :-)","msgtype":"m.text"},"ts":1502203119000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Yeah it's based on a paper some FF folks wrote I believe","msgtype":"m.text"},"ts":1502203134000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ah, cool","msgtype":"m.text"},"ts":1502203143000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"is a \"paper\" like a blog?","msgtype":"m.text"},"ts":1502203148000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk:  in https://github.com/heycam/webidl/pull/402#discussion_r131709808 you mention enum order is defined by underlying infra list. Are all APIs with named props specified with an underlying infra list?","msgtype":"m.text"},"ts":1502203168000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: pretty sure that's a no","msgtype":"m.text"},"ts":1502203236000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: I do think order is defined though typically","msgtype":"m.text"},"ts":1502203263000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: and when it's not that's a bug","msgtype":"m.text"},"ts":1502203269000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: and not using Infra list a minor bug that'd be nice to fix","msgtype":"m.text"},"ts":1502203282000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: shouldn't WebIDL call that out somehow, though? Or maybe infra's for each should?","msgtype":"m.text"},"ts":1502203346000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: it's called out by requiring it to be a list, which are ordered by definition","msgtype":"m.text"},"ts":1502203394000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Oh! It had somehow never really clicked that while \"while\" was defined in 3.3 Iteration \"for each\" was just a reference to list/for each.","msgtype":"m.text"},"ts":1502203663000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: I guess that makes sense and will even more obvious as infra becomes ubiquitous.","msgtype":"m.text"},"ts":1502203753000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Anyone else have opinions on https://lists.w3.org/Archives/Public/public-whatwg-archive/2017Aug/0001.html ?","msgtype":"m.text"},"ts":1502204096000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"@annevk What's troublesome about unicode in fragments? They seem to work just fine.  (I had to implement my own fragment-escaper, as Python2's urllib escaper doesn't understand unicode, but I did so by consulting HTML, so it should be correct.)","msgtype":"m.text"},"ts":1502212501000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hello all, has there been any work (or interest) in standardizing `'assert'`? It's been bugging me, and I see it is used in the platform tests","msgtype":"m.text"},"ts":1502212540000,"senderName":"refack","senderId":"refack@irc"},
{"content":{"body":"@Domenic Yeah, I have the same, it isn't a matter of a *practical* trouble in deduping, just that it can make the refs a little ambiguous to read when you have terms with a numeric suffix.  Purely aesthetic.","msgtype":"m.text"},"ts":1502212575000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: URL parser may or may not escape it if you put it in raw","msgtype":"m.text"},"ts":1502212875000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"refack: in JavaScript you mean?","msgtype":"m.text"},"ts":1502212900000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm exactly following what HTML says is the valid charset for fragments, and %-escaping the rest.","msgtype":"m.text"},"ts":1502212907000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If URL and HTML differ, obviously one of them should be fixed. ^_^","msgtype":"m.text"},"ts":1502212921000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I've no idea what HTML says :-)","msgtype":"m.text"},"ts":1502212925000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yes, specifically node's (or CommonJS)","msgtype":"m.text"},"ts":1502212952000,"senderName":"refack","senderId":"refack@irc"},
{"content":{"body":"refack: I don't think that's the same assert. ;)","msgtype":"m.text"},"ts":1502212953000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: Ah, I didn't even realize the HTML links sent me over to URL anyway ^_^ https://url.spec.whatwg.org/#url-fragment-string","msgtype":"m.text"},"ts":1502212980000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Not the \"Assert\" in the docs, the `require('assert') in the tests","msgtype":"m.text"},"ts":1502212981000,"senderName":"refack","senderId":"refack@irc"},
{"content":{"body":"refack: anyway, I know of no such efforts","msgtype":"m.text"},"ts":1502212983000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(I *was* wondering when HTML got syntax highlighting...)","msgtype":"m.text"},"ts":1502212988000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1502212996000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"this throws in FF: (function() { \"use strict\"; document.createElement(\"div\").attributes[\"3\"] = 123 })();","msgtype":"m.text"},"ts":1502213041000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: anyway, if it works it's fine, since we can't break that, I just know there's a couple of minor issues and browser differences left, but they might not get exposed when simply navigating","msgtype":"m.text"},"ts":1502213058000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But not this: document.createElement(\"div\").attributes[\"3\"] = 123;","msgtype":"m.text"},"ts":1502213068000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"kk","msgtype":"m.text"},"ts":1502213068000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Is this a known issue?","msgtype":"m.text"},"ts":1502213138000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: haven't seen that discussed before","msgtype":"m.text"},"ts":1502213199000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: typically IDL doesn't care about strict mode","msgtype":"m.text"},"ts":1502213205000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If I volunteer, is there interest? I know only `node` has an implementation, but it is used by the test e.g. https://github.com/whatwg/console/blob/master/test/tests/timing.js#L3","msgtype":"m.text"},"ts":1502213213000,"senderName":"refack","senderId":"refack@irc"},
{"content":{"body":"It is sort of arbitrary, and definatly not rigorous","msgtype":"m.text"},"ts":1502213236000,"senderName":"refack","senderId":"refack@irc"},
{"content":{"body":"annevk: what do you mean by \"typically IDL doesn't care about strict mode\"","msgtype":"m.text"},"ts":1502213251000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: no different code path gets taken","msgtype":"m.text"},"ts":1502213273000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"refack: since it's a JavaScript extension I suspect #tc39 or es-discuss is a better place to ask","msgtype":"m.text"},"ts":1502213309000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: right, so these two things code snippets should not behave differently.","msgtype":"m.text"},"ts":1502213317000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"s/things //","msgtype":"m.text"},"ts":1502213347000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"refack: if there's some interest and someone is willing to present your proposal to the committee thingie they got going on you can write a proposal along the lines of the others: https://github.com/tc39/proposals","msgtype":"m.text"},"ts":1502213356000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmmm","msgtype":"m.text"},"ts":1502213373000,"senderName":"refack","senderId":"refack@irc"},
{"content":{"body":"tobie: yeah, but maybe this is a weird case where the two worlds intersect? bit out of my depth","msgtype":"m.text"},"ts":1502213395000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: hmm, there is some stuff that behaves differently based on strict mode: https://heycam.github.io/webidl/#LenientSetter","msgtype":"m.text"},"ts":1502213434000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: this might just be one of those","msgtype":"m.text"},"ts":1502213439000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"thanks, my intuition was that WHATWG would be easier, but I get what you are saying","msgtype":"m.text"},"ts":1502213440000,"senderName":"refack","senderId":"refack@irc"},
{"content":{"body":"refack: if you want it as an extension of the Console API you could do it through WHATWG","msgtype":"m.text"},"ts":1502213473000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"refack: not really sure we have a home for a generic assert library","msgtype":"m.text"},"ts":1502213486000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"refack: (and I'm also not entirely sure we need one, but that's a different discussion)","msgtype":"m.text"},"ts":1502213535000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: right, it didn't seem like NamedNodeMap was one of those, though.","msgtype":"m.text"},"ts":1502213550000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"That was my lead, but I see how tc39 should be my first attempt. I agree it not an eco-system interop issue (yet)","msgtype":"m.text"},"ts":1502213574000,"senderName":"refack","senderId":"refack@irc"},
{"content":{"body":"tobie: I suspect it is looking at the algorithms","msgtype":"m.text"},"ts":1502213759000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: if there's no setter for a property you end up throwing in strict mode","msgtype":"m.text"},"ts":1502213861000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: that's what I think is happening","msgtype":"m.text"},"ts":1502213881000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: and there's no setter since NamedNodeMap only defines a getter","msgtype":"m.text"},"ts":1502213897000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: where is that defined, though? I thought this was only for readonly attributes not all properties?","msgtype":"m.text"},"ts":1502214152000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: it's no different from a readonly attribute afaict","msgtype":"m.text"},"ts":1502214365000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: a readonly attribute is a property with a getter and an undefined setter","msgtype":"m.text"},"ts":1502214388000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: this is no different","msgtype":"m.text"},"ts":1502214392000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: back tomorrow","msgtype":"m.text"},"ts":1502214399000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: night","msgtype":"m.text"},"ts":1502214410000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: OK, I got it now. You're right. And this has been fixed in chrome canary too.","msgtype":"m.text"},"ts":1502215793000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: annevk: in general returning \"false \"from various meta-object protocol operations will throw in strict and no-op in sloppy. So this is pretty widespread even if it's not obviously so.","msgtype":"m.text"},"ts":1502218151000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"refack: those console tests are kind of old and maybe should be removed; the canonical ones are at https://github.com/w3c/web-platform-tests/tree/master/console","msgtype":"m.text"},"ts":1502218189000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Note how they are nicely written in .any.js format so you can run them easily in Node :)","msgtype":"m.text"},"ts":1502218225000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: where's the harness? I'd like to take inspiration from it.","msgtype":"m.text"},"ts":1502218332000,"senderName":"refack","senderId":"refack@irc"},
{"content":{"body":"refack: well Node has an implementation at https://github.com/nodejs/node/blob/master/test/common/wpt.js","msgtype":"m.text"},"ts":1502218368000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"boo 😜 that uses require('assert')... I want to make 'assert' better","msgtype":"m.text"},"ts":1502218458000,"senderName":"refack","senderId":"refack@irc"},
{"content":{"body":"Oh well I kind of doubt Node will want to change its assert module much","msgtype":"m.text"},"ts":1502218542000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But there's https://github.com/w3c/web-platform-tests/blob/master/resources/testharness.js","msgtype":"m.text"},"ts":1502218559000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'm not sure it's super-great code tbh","msgtype":"m.text"},"ts":1502218570000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: right.","msgtype":"m.text"},"ts":1502218571000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: looking at https://github.com/TimothyGu/webidl-keys-test/blob/master/test-named-node-map.js#L23","msgtype":"m.text"},"ts":1502218580000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: shouldn't that be a no-op by virtue of  NamedNodeMap not having a named prop setter?","msgtype":"m.text"},"ts":1502218642000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: doesn't it fall through to https://heycam.github.io/webidl/#legacy-platform-object-set step 3?","msgtype":"m.text"},"ts":1502218730000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"then it goes to https://heycam.github.io/webidl/#legacy-platform-object-defineownproperty step 2...","msgtype":"m.text"},"ts":1502218753000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It falls through to step 2, first","msgtype":"m.text"},"ts":1502218805000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"no>","msgtype":"m.text"},"ts":1502218809000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"no?","msgtype":"m.text"},"ts":1502218813000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"step 2 is just LegacyPlatformObjectGetOwnProperty right?","msgtype":"m.text"},"ts":1502218837000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think it is a no-op because we end up in https://heycam.github.io/webidl/#legacy-platform-object-defineownproperty step 2.2","msgtype":"m.text"},"ts":1502218856000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wait no","msgtype":"m.text"},"ts":1502218874000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Right, so it comes back with a desc object that has writable as false, no?","msgtype":"m.text"},"ts":1502218890000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"it is not a no-op because we reach 2.2, but the condition is not met, so we go on to stop 3 + 4","msgtype":"m.text"},"ts":1502218891000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"correct, writable = false","msgtype":"m.text"},"ts":1502218923000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1502218926000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so it will *throw*","msgtype":"m.text"},"ts":1502218928000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"in strict","msgtype":"m.text"},"ts":1502218932000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1502218941000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and no-op elsewhere","msgtype":"m.text"},"ts":1502218943000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"which is what this test is","msgtype":"m.text"},"ts":1502218943000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1502218945000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So going back to the test","msgtype":"m.text"},"ts":1502218966000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"ownProp should not show up in Reflect.ownKeys","msgtype":"m.text"},"ts":1502219015000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I agree","msgtype":"m.text"},"ts":1502219023000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Although the fact I stumbled through several different outcomes implies my judgment might be suspect","msgtype":"m.text"},"ts":1502219034000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1502219043000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"well, fwiw, both FF and Chrome Canary throw in that case for indexed prop in strict mode.","msgtype":"m.text"},"ts":1502219090000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"That's good at least :)","msgtype":"m.text"},"ts":1502219103000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"haven't tested beyond, yet.","msgtype":"m.text"},"ts":1502219105000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"This is good stuff in general","msgtype":"m.text"},"ts":1502219113000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TimothyGu remains amazing","msgtype":"m.text"},"ts":1502219120000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"And thanks for backing him up with more testing work","msgtype":"m.text"},"ts":1502219130000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"slash fact-checking","msgtype":"m.text"},"ts":1502219139000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yes, it's really great to see people coming in with super solid PRs like this.","msgtype":"m.text"},"ts":1502219189000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I think the Bikeshed conversion can take some credit","msgtype":"m.text"},"ts":1502219210000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: thanks","msgtype":"m.text"},"ts":1502219226000,"senderName":"refack","senderId":"refack@irc"},
{"content":{"body":"I was about to say so","msgtype":"m.text"},"ts":1502219229000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Yeah, the old webidl was *so damn hard* to edit.","msgtype":"m.text"},"ts":1502219239000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Moving to any modern processor would have improved that.","msgtype":"m.text"},"ts":1502219251000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: so I think I made an error earlier","msgtype":"m.text"},"ts":1502221143000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: in https://heycam.github.io/webidl/#legacy-platform-object-set","msgtype":"m.text"},"ts":1502221155000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Step 2 has last argument of  LegacyPlatformObjectGetOwnProperty see to true","msgtype":"m.text"},"ts":1502221214000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: which means that we fall through to 3 in LegacyPlatformObjectGetOwnProperty","msgtype":"m.text"},"ts":1502221274000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic:  (As ignoreNamedProps is true)","msgtype":"m.text"},"ts":1502221297000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"grumbles something about using ignoreNamedProps as a name for a boolean","msgtype":"m.emote"},"ts":1502221393000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: documented those here: https://github.com/w3c/web-platform-tests/commit/0d8209f","msgtype":"m.text"},"ts":1502222230000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: and here: https://github.com/w3c/web-platform-tests/pull/6786","msgtype":"m.text"},"ts":1502222523000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"hi all, i'd be curious about anyone's feedback on this proposal to allow rel=bookmark to be used with <link> https://github.com/whatwg/html/issues/2899","msgtype":"m.text"},"ts":1502226740000,"senderName":"edsu","senderId":"edsu@irc"},
{"content":{"body":"https://stackoverflow.com/questions/45578828/dataset-vs-setattribute-performance","msgtype":"m.text"},"ts":1502233835000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"}
]