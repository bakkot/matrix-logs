[
{"content":{"body":"JakeA: I'm cleaning up the SW issue list a bit","msgtype":"m.text"},"ts":1428232309000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: in particular those issues referenced from Fetch that should probably move elsewhere","msgtype":"m.text"},"ts":1428232326000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: cool, will have a crawl through them on Tuesday too","msgtype":"m.text"},"ts":1428233414000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"is trying to figure out IRC urls... irc://freenode.net:6697/whatwg look good?","msgtype":"m.emote"},"ts":1428236998000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I sort of want to encourage SSL, but there doesn't seem to be ircs...","msgtype":"m.text"},"ts":1428237035000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm, there's a draft https://tools.ietf.org/html/draft-butcher-irc-url-04#section-2.1 that does define \"ircs\", but nothing that's an RFC afaict","msgtype":"m.text"},"ts":1428237133000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Freenode has SSL on port 7000","msgtype":"m.text"},"ts":1428238293000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"https://en.wikipedia.org/wiki/Template:Freenode#Example","msgtype":"m.text"},"ts":1428238451000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"irc://irc.freenode.net/#wikipedia-en","msgtype":"m.text"},"ts":1428238457000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Looks right yeah","msgtype":"m.text"},"ts":1428238466000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: yeah, except ircs:// doesn't work :-(","msgtype":"m.text"},"ts":1428243054000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Krinkle: btw, did my reply to your storage email help?","msgtype":"m.text"},"ts":1428243083000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Right. When opening it in an IRC client you'd need a way to tell the app to use SSL.","msgtype":"m.text"},"ts":1428243093000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"In LimeChat there's a checkbox for it.","msgtype":"m.text"},"ts":1428243102000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"I don't think there's a way to programmatically set that based on a url.","msgtype":"m.text"},"ts":1428243117000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"ircs makes sense.","msgtype":"m.text"},"ts":1428243123000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"annevk: Yep.","msgtype":"m.text"},"ts":1428243127000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: https://wiki.whatwg.org/wiki/Storage has some v2 markers now, planning on elaborating a bit in the next couple weeks","msgtype":"m.text"},"ts":1428243141000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The current situation is indeed rather messy and if we want to be competitive we should address that","msgtype":"m.text"},"ts":1428243189000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, our native app doesn't have these issues for instance.","msgtype":"m.text"},"ts":1428243214000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Not that that's really a solution either. But from a dev perspective it's great","msgtype":"m.text"},"ts":1428243229000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"not have to deal with a limit","msgtype":"m.text"},"ts":1428243236000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: another thing I was interested in is how Wikipedia plans on addressing its issues with having multiple origins for locales","msgtype":"m.text"},"ts":1428243315000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"At the moment that's not really a concern to us.","msgtype":"m.text"},"ts":1428243342000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: it seems like if e.g. Wikipedia gets a location-based service of sorts you'd want users to have to opt into that only once","msgtype":"m.text"},"ts":1428243343000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"They're independent websites.","msgtype":"m.text"},"ts":1428243347000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"separate content, communities and user priviledges.","msgtype":"m.text"},"ts":1428243360000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"not translations.","msgtype":"m.text"},"ts":1428243363000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: nothing is automated between them?","msgtype":"m.text"},"ts":1428243379000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"okay","msgtype":"m.text"},"ts":1428243385000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Of course, they're all hosted by the same foundation. And we share the source code (differnet configuration loads based on http hostname).","msgtype":"m.text"},"ts":1428243392000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"But lots of version and plugin differences do exist, so we currently dont' share anything client-side.","msgtype":"m.text"},"ts":1428243428000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Many modules (e.g. jquery ui) can vary based on language and skin.","msgtype":"m.text"},"ts":1428243447000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Interesting","msgtype":"m.text"},"ts":1428243458000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The cookieless domain bits.wikimedia.org is what serves most static resources from a hostname subdirectory.","msgtype":"m.text"},"ts":1428243475000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"virtual, not on disk.","msgtype":"m.text"},"ts":1428243480000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"But the localStorage system is indeed occopying the actual userfacing website origin (e.g. en.wikipedia.org, not bits.wm.o)","msgtype":"m.text"},"ts":1428243521000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Which causes other plugins and power-user apps to fail sometimes due to space conflicts.","msgtype":"m.text"},"ts":1428243547000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"We have not solved this as of yet.","msgtype":"m.text"},"ts":1428243552000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Other than to basically reject anything that uses localStorage and defer to other storage areas instead, which sucks.","msgtype":"m.text"},"ts":1428243623000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"We even had to revert some code that switches from cookies to localstorage  where it made sense. But didn't work (e.g. hide-banner and boolean stuff like that)","msgtype":"m.text"},"ts":1428243647000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"so those are back in cookies at the moment.","msgtype":"m.text"},"ts":1428243659000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"We'll probably move a the js/css module storage  to IndexDB which nobody uses.","msgtype":"m.text"},"ts":1428243679000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":":-)","msgtype":"m.text"},"ts":1428243696000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: so we are planning on putting all storage APIs into the same bucket so that might not help you much","msgtype":"m.text"},"ts":1428243748000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Krinkle: but maybe having multiple buckets per site will help","msgtype":"m.text"},"ts":1428243771000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"There would have to be some way to limit the size or priority of a sub-bucket.","msgtype":"m.text"},"ts":1428243775000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"like a namespace of sorts","msgtype":"m.text"},"ts":1428243789000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"storage = Storage.instance('<rfee key>', { prio: -2 });","msgtype":"m.text"},"ts":1428243818000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"just thinking out loud","msgtype":"m.text"},"ts":1428243822000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Yeah, the idea is to have names that you can use with IDB and the Cache API (not sure it can work for localStorage)","msgtype":"m.text"},"ts":1428243828000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it would create it ondemand, and re-configure if pre-existing.","msgtype":"m.text"},"ts":1428243829000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"And yeah, then use LRU across all buckets meaning often used buckets get cleared less","msgtype":"m.text"},"ts":1428243875000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ideally we'd have LRU within a bucket as well.","msgtype":"m.text"},"ts":1428243905000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"And the other idea is having an LRU variant of the Cache API. Allowing you to store static resources there. And then the browser could do global reasoning about all LRU Cache APIs...","msgtype":"m.text"},"ts":1428243925000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So that if a user visited the patrol app once but never comes back, it'll drop off eventually","msgtype":"m.text"},"ts":1428243931000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Yeah, basically that","msgtype":"m.text"},"ts":1428243953000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is there actually structure between origins recognised? I forget.","msgtype":"m.text"},"ts":1428243998000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"e.g. could we hack up a modules.en.wikipedia.org and access that from en.wikipedia.org","msgtype":"m.text"},"ts":1428244010000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":":P","msgtype":"m.text"},"ts":1428244010000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"for storage only","msgtype":"m.text"},"ts":1428244020000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Through an <iframe>","msgtype":"m.text"},"ts":1428244031000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Right","msgtype":"m.text"},"ts":1428244036000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"If the user doesn't disable third-party cookies...","msgtype":"m.text"},"ts":1428244045000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"cookies\"","msgtype":"m.text"},"ts":1428244052000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Well yeah, again that's something we don't do well currently, but cookies need to be grouped together with all the other storage bits for these settings to have the effect the user expects","msgtype":"m.text"},"ts":1428244087000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"pumping 4-10 MB of serialised js/css/images through an iframe doesn't sound great though :D","msgtype":"m.text"},"ts":1428244098000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1428244116000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"cookies is what users know","msgtype":"m.text"},"ts":1428244122000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"at least the few users that are aware of it","msgtype":"m.text"},"ts":1428244128000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"that's the customer facing term","msgtype":"m.text"},"ts":1428244133000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"The one other thing that's a bit unclear still is what the scope of storage is. eTLD+1 or origin. And we might want to make it different for \"best effort\" vs \"persistent\"...","msgtype":"m.text"},"ts":1428244139000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yup","msgtype":"m.text"},"ts":1428244147000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, so tentative plan is persistent, multiple buckets, and a LRU API, and then see if that works...","msgtype":"m.text"},"ts":1428244230000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"an LRU I guess?","msgtype":"m.text"},"ts":1428244246000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"LRU cache is what I tend to say","msgtype":"m.text"},"ts":1428244419000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Though it'd be interesting to see if there is usecase for multiple cache algorythms.","msgtype":"m.text"},"ts":1428244441000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"But I guess it's best to not bloat","msgtype":"m.text"},"ts":1428244451000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"instead provide a way for users to build their own if needed.","msgtype":"m.text"},"ts":1428244463000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"perhaps service worker can be authorised to routinely kick in and evaluate cache content based on some logic.","msgtype":"m.text"},"ts":1428244507000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"with native being told it's \"persistent\" but it will loop through and clear things based on its own logic","msgtype":"m.text"},"ts":1428244550000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"There's a proposal for an eviction event of sorts, but based on other systems that tried you probably want something like /tmp instead","msgtype":"m.text"},"ts":1428244553000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"At the moment you need to clear having to ask a dozen apps is not deal","msgtype":"m.text"},"ts":1428244608000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ideal*","msgtype":"m.text"},"ts":1428244612000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1428244699000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"definitely not on the main thread synchronous","msgtype":"m.text"},"ts":1428244722000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"also evictable storage might be managed by something outside of the browser, eg. on mobile","msgtype":"m.text"},"ts":1428246443000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: instead of a storage pressure event, what do you think about at least exposing a \"systemStoragePressure\" boolean attribute on StorageManager.","msgtype":"m.text"},"ts":1428253786000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: what does that mean?","msgtype":"m.text"},"ts":1428253817000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: instead of firing storage pressure events at origins... allow the origin to opt-in, check that storage pressure state, and manually free stuff when its running anyway","msgtype":"m.text"},"ts":1428253854000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I dunno... it was just an idea I had the other day","msgtype":"m.text"},"ts":1428253873000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"not sure it makes sense","msgtype":"m.text"},"ts":1428253878000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"the app might just want to do something different if the overall system disk is almost full to avoid having itself get deleted","msgtype":"m.text"},"ts":1428253914000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"but we don't spin up the app automatically to handle it, etc","msgtype":"m.text"},"ts":1428253934000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"its probably a bad idea","msgtype":"m.text"},"ts":1428253946000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I would imagine a sensible application would already do everything it can to keep storage low","msgtype":"m.text"},"ts":1428254090000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: that's another reason I'm somewhat skeptical about this event","msgtype":"m.text"},"ts":1428254113000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: gigantic apps will be at the top of the list for the user to remove, you'd try hard not to end up there","msgtype":"m.text"},"ts":1428254150000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I guess I was more observing that the current \"getEstimate\" API we have only provides info on the origin's quota/storage vs overall system state...  might be nice to include something about if the system is under pressure there","msgtype":"m.text"},"ts":1428254155000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: telling the app about the user's hard drive might be tricky, but maybe if the user opts into persistent mode we could expose a bit more stuff?","msgtype":"m.text"},"ts":1428254206000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'm not talking about exact amounts for the system... just a \"system low on disk space\" signal","msgtype":"m.text"},"ts":1428254247000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I'm happy to leave that off for now","msgtype":"m.text"},"ts":1428254262000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yeah might be interesting to have a 80%-90% full indication","msgtype":"m.text"},"ts":1428254297000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: though with persistent you'd probably get to see that amount anyway unless the user agent caps it, we haven't really discussed the finer details of that","msgtype":"m.text"},"ts":1428254324000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: if nothing else, this could be a compromise with people who want a storage pressure event","msgtype":"m.text"},"ts":1428254339000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: my plan is to write a slightly more detailed model of the existing and proposed architecture somewhere next week","msgtype":"m.text"},"ts":1428254371000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1428254406000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I'm going to be focusing on streams this week, I think","msgtype":"m.text"},"ts":1428254414000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"yay","msgtype":"m.text"},"ts":1428254526000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: quite happy you're reviewing the proposed Fetch integration","msgtype":"m.text"},"ts":1428254548000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: wish I had time to do it earlier!","msgtype":"m.text"},"ts":1428254577000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: are there existing cases of that GC behavior that is proposed?","msgtype":"m.text"},"ts":1428254591000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"make some DOM call, and then system resources are potentially leaked forever","msgtype":"m.text"},"ts":1428254608000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I missed that, does forever mean until you close the tab?","msgtype":"m.text"},"ts":1428254658000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(there's a lot of that)","msgtype":"m.text"},"ts":1428254682000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it explicitly says if you do response.body.getReadable() then the UA cannot terminate the fetch","msgtype":"m.text"},"ts":1428254688000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"cannot terminate the fetch due to GC","msgtype":"m.text"},"ts":1428254699000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: oh that makes sense, but closing the tab would not be GC","msgtype":"m.text"},"ts":1428254726000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: closing the tab is akin to \"end-user abort\"","msgtype":"m.text"},"ts":1428254757000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I guess I'm worried on the stream just blocking on back pressure (because no one is actually reading) and then it just doesn't close until the tab closes","msgtype":"m.text"},"ts":1428254787000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I think WebSocket has a similar thing about not allowing the connection to be closed due to GC","msgtype":"m.text"},"ts":1428254791000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: and actually, even XMLHttpRequest has that: https://xhr.spec.whatwg.org/#garbage-collection","msgtype":"m.text"},"ts":1428254813000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: anything to avoid exposing GC","msgtype":"m.text"},"ts":1428254824000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Granted that this case is a little different, but still similar enough","msgtype":"m.text"},"ts":1428254935000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: hmm... but what if there was no close handler registered.... seems like it should be GC'able then","msgtype":"m.text"},"ts":1428254967000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"was afraid momentarily that they were exposing GC","msgtype":"m.emote"},"ts":1428254971000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: good to know that there is precedent, though","msgtype":"m.text"},"ts":1428254986000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: if there are no handlers that might be okay, though I think jsbell has a trick for that case","msgtype":"m.text"},"ts":1428255015000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it seems the XHR spec says it must not be GC'd only if it has an event handler set","msgtype":"m.text"},"ts":1428255246000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yeah, I think jsbell's argument was that you could detect GC in such a case by having a side-channel open and logging the TCP closing time on the server","msgtype":"m.text"},"ts":1428255302000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: but I don't think any specification is concerned with that trick at the moment, not even WebSocket","msgtype":"m.text"},"ts":1428255323000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: uh... that sounds akin to saying \"you can detect GC by attaching with a debugger\"","msgtype":"m.text"},"ts":1428255334000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: so presumably streams shouldn't either","msgtype":"m.text"},"ts":1428255334000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: well except there's no debugger","msgtype":"m.text"},"ts":1428255351000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: do you know what Domenic meant by:   It's the same as if you allocate a large array buffer and then don't clean it up. You've manually said \"I want this potentially-large resource to stick around.\"","msgtype":"m.text"},"ts":1428255431000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"do ArrayBuffers not GC??","msgtype":"m.text"},"ts":1428255436000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I would expect them to GC just fine","msgtype":"m.text"},"ts":1428255468000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: I've never heard anyone talk about magic GC abilities of ArrayBuffer","msgtype":"m.text"},"ts":1428255494000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I don't understand the opaque response stuff well enough to comment on https://github.com/slightlyoff/ServiceWorker/issues/590#issuecomment-89757518","msgtype":"m.text"},"ts":1428256864000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: ping","msgtype":"m.text"},"ts":1428259947000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: pong","msgtype":"m.text"},"ts":1428259975000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: hi! I was reading this, but have a question https://github.com/yutakahirano/fetch-with-streams/issues/15","msgtype":"m.text"},"ts":1428260010000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"there you wrote: \"The graph in this scenario is: resolve -> foo.closedPromise. So even if author code stops using foo and we GC foo, foo.closedPromise is not GCed until the UA code frees resolve.\"","msgtype":"m.text"},"ts":1428260040000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: do you know who else I could ping?","msgtype":"m.text"},"ts":1428260055000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: doesn't the graph go the other way? foo.closePromise -> resolve?  I don't see how resolve holds a ref to the promise","msgtype":"m.text"},"ts":1428260071000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: nsm is probably good","msgtype":"m.text"},"ts":1428260083000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: no, resolve holds the ability to change the state of closePromise","msgtype":"m.text"},"ts":1428260092000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ta","msgtype":"m.text"},"ts":1428260099000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"assume a function ResolvePromise(p, value)","msgtype":"m.text"},"ts":1428260103000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"then resolve = ResolvePromise.bind(foo.closePromise)","msgtype":"m.text"},"ts":1428260110000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"or, resolve = function (value) { ResolvePromise(foo.closePromise, value); }","msgtype":"m.text"},"ts":1428260122000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh... resolve is set to a function, ok","msgtype":"m.text"},"ts":1428260129000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"right, yeah","msgtype":"m.text"},"ts":1428260139000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: this is pretty different from the c++ :-)","msgtype":"m.text"},"ts":1428260144000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"welp :P","msgtype":"m.text"},"ts":1428260150000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"In C++ I guess it would be a PromiseResolver object?","msgtype":"m.text"},"ts":1428260159000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"with resolve and reject methods, and a promise private field?","msgtype":"m.text"},"ts":1428260168000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I think what you are saying is we can GC the stream, but hold the promise alive","msgtype":"m.text"},"ts":1428260174000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: is that accurate?","msgtype":"m.text"},"ts":1428260184000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: right, I think that is what I am saying :P","msgtype":"m.text"},"ts":1428260198000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"this stuff gets confusing...","msgtype":"m.text"},"ts":1428260203000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"tries to find the point in the streams spec that says to resolve one of these promises.","msgtype":"m.emote"},"ts":1428260223000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Ctrl+F \"Resolve reader@[[closedPromise]]\"","msgtype":"m.text"},"ts":1428260277000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh hey, found some dead code -_-","msgtype":"m.text"},"ts":1428260346000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yea... CloseReadableStreamReader is not used any more?","msgtype":"m.text"},"ts":1428260374000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"yep X_X","msgtype":"m.text"},"ts":1428260383000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"killing it with fire","msgtype":"m.text"},"ts":1428260385000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wow it's even gone from the reference impl","msgtype":"m.text"},"ts":1428260396000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I was like ... this code looks pretty similar ... couldn't I refactor it out into a shared operation? And then I saw why it was similar ... I already factored it elsewhere and forgot to delete the old one.","msgtype":"m.text"},"ts":1428260455000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: so... it seems to me the spec requires doing other things with the stream when that promise is resolved... I don't see anything that lets us handle it separately from the stream object for when the socket closes","msgtype":"m.text"},"ts":1428260513000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: not sure I understand the question/dillema...","msgtype":"m.text"},"ts":1428260538000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I don't see anything that says \"when the socket closes, resolve the promise\"... the streams spec has us modifying state variables and other stuff on the stream object... which implies we cannot GC the stream object","msgtype":"m.text"},"ts":1428260586000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: Right. You can close the socket and not call close(), i.e. not signal to the stream implementation that the stream itself should start acting closed","msgtype":"m.text"},"ts":1428260639000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: maybe its also just a conceptual issue for me... feels weird to say \"here is an object that represents the stream\", but that object can be destroyed without actually closing the underlying stream","msgtype":"m.text"},"ts":1428260645000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1428260652000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So my take is that this underlying source object is adapting the socket or whatever into a stream object that reflects the state of the socket","msgtype":"m.text"},"ts":1428260671000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If the object goes away that doesn't necessarily mean the socket does, but it could if you want to set up a weak reference thingy to do so","msgtype":"m.text"},"ts":1428260700000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: but the fetch-with-streams doesn't define this \"socket or whatever\", but implies we have to give the promise to it directly","msgtype":"m.text"},"ts":1428260706000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"right ... i'm getting confused now :(","msgtype":"m.text"},"ts":1428260733000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I have to go in a few minutes","msgtype":"m.text"},"ts":1428260753000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"ok, i probably should too. (why are we working on sunday? :P)","msgtype":"m.text"},"ts":1428260772000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"we can pick this up later ... i agree it's confusing and probably can be made clearer in fetch-with-streams","msgtype":"m.text"},"ts":1428260794000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: this is why I find it easier to define it as a ref holding the stream alive... and GC causes abort","msgtype":"m.text"},"ts":1428260798000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"ok, have a good Easter!","msgtype":"m.text"},"ts":1428260810000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"byte","msgtype":"m.text"},"ts":1428260812000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"bye","msgtype":"m.text"},"ts":1428260814000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"later!","msgtype":"m.text"},"ts":1428260845000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Wait, we're allowed breaks on Sunday?","msgtype":"m.text"},"ts":1428262746000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: only easter sunday","msgtype":"m.text"},"ts":1428276171000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"A properly defined grammar for the html5lib test format would be great, because dear god trying to parse this","msgtype":"m.text"},"ts":1428277264000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Pretty sure we're LR(2)","msgtype":"m.text"},"ts":1428277327000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"At least in the simple definition","msgtype":"m.text"},"ts":1428277336000,"senderName":"gsnedders","senderId":"gsnedders@irc"}
]