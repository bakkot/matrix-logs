[
{"content":{"body":"Hi! Does anyone know if there is a recommendation for html includes?Â  Eg to include html custom elements, or vue components, etc?","msgtype":"m.text"},"ts":1615349524000,"senderName":"br3nt","senderId":"br3nt@irc"},
{"content":{"body":"annevk: Regarding your comment on my HTML PR, can you clarify? In the same algorithm step 17 seems to be \"Run process a navigate response with navigationType , the source browsing context , and navigationParams .\" I don't see reservedEnvironment though","msgtype":"m.text"},"ts":1615365357000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: I was looking at the live HTML version, so it might be a slightly different number in your local copy","msgtype":"m.text"},"ts":1615365487000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: it's the Let navigationParams be step","msgtype":"m.text"},"ts":1615365517000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: so one before","msgtype":"m.text"},"ts":1615365545000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ugh, good call. I thought I got them all","msgtype":"m.text"},"ts":1615365572000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"thx","msgtype":"m.text"},"ts":1615365577000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: can you also fix the other one while there? you'd want to replace it with navigationParams's reserved environment I suppose","msgtype":"m.text"},"ts":1615365638000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yep I was just going to do that too","msgtype":"m.text"},"ts":1615365654000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"thanks!","msgtype":"m.text"},"ts":1615365661000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'll let Domenic verify and land later today","msgtype":"m.text"},"ts":1615365671000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"When running html-build as of recently I get this error:","msgtype":"m.text"},"ts":1615383580000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Traceback (most recent call last):","msgtype":"m.text"},"ts":1615383584000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"  File \"/usr/local/bin/bs-highlighter-server\", line 5, in <module>","msgtype":"m.text"},"ts":1615383584000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"    from highlighter.server import cli","msgtype":"m.text"},"ts":1615383586000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ModuleNotFoundError: No module named 'highlighter'","msgtype":"m.text"},"ts":1615383588000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Is https://github.com/tabatkins/highlighter the expected module?","msgtype":"m.text"},"ts":1615383688000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"MikeSmith: Domenic: ^","msgtype":"m.text"},"ts":1615383706000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: I think so","msgtype":"m.text"},"ts":1615384809000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I thought it was optional though, but I haven't checked recently","msgtype":"m.text"},"ts":1615384832000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it's optional in that I can skip highlighting with -h","msgtype":"m.text"},"ts":1615385102000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"but I wonder why I get the error now. Is there a step missing in https://github.com/whatwg/wattsi#building-and-running-wattsi-manually ?","msgtype":"m.text"},"ts":1615385142000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"littledan: I saw something come by on Twitter that makes me suspect you'll find yourself having opinions on https://github.com/whatwg/fetch/issues/1175 in due course","msgtype":"m.text"},"ts":1615387000000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"No ETA at all, and I may not do anything at all in the end, but the idea of writing a spec to parse an HTTP answer, looking at Blink/Gecko/WebKit/cURL/Squid/nginx is growing on em.","msgtype":"m.text"},"ts":1615387050000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"On me*, I don't think Eminem does HTTP parsing.","msgtype":"m.text"},"ts":1615387061000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Keep me posted","msgtype":"m.text"},"ts":1615387209000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: wow, well, I thought the status quo meshed well with the stuff I am working on. I have to learn some more before I will manage to have my own opinion here.","msgtype":"m.text"},"ts":1615387465000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Thanks for the pointer","msgtype":"m.text"},"ts":1615387473000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"zcorpan: html-build should install the highlighter for you: https://github.com/whatwg/html-build/blob/main/build.sh#L223","msgtype":"m.text"},"ts":1615390888000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk, yoav: I've made a lot of changes to https://github.com/whatwg/fetch/pull/1185/files. Instead of saving a redirectStart/redirectEnd in FETCH, I'm saving a list of redirects, and RT/NT can extrapolate data from it later. It makes the processing model a bit less wonky IMO, and makes it clearer about things like workerStart in its current form. Still missing cache processing, which I'm going to do next, but it's ready","msgtype":"m.text"},"ts":1615390975000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"for an intermediate look.","msgtype":"m.text"},"ts":1615390975000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: I'd like for the data that Fetch hands out to be safe, which that would not be, although I suppose there are some violations of that already...","msgtype":"m.text"},"ts":1615391079000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: thanks. deleting /usr/local/bin/bs-highlighter-server  and running html-build/build.sh again made it install again and now it works","msgtype":"m.text"},"ts":1615391096000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Fun times...","msgtype":"m.text"},"ts":1615391107000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: it's cleaned up for TAO before handing out, it's as safe as previous data that's handed out.","msgtype":"m.text"},"ts":1615391150000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: k","msgtype":"m.text"},"ts":1615391201000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: regarding yesterday's chat about responseEnd, it's true that the different callers enqueue RT at different times, but I dug deep into the chromium implementation, and regardless of when it is queued, `responseEnd` is indeed either the stream's EOF or when the connection is closed.","msgtype":"m.text"},"ts":1615391865000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"so it might be OK to enqueue the RT as a response to stream EOF rather than deal with the different callers, as we need that anyway in order to compute responseEnd","msgtype":"m.text"},"ts":1615391904000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"^^^ yoav","msgtype":"m.text"},"ts":1615391956000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: so I think that works (assuming it's true for service worker responses too), but I think the larger question with the callers is RT object creation and whether or not we want to have some kind of relationship between that object and the caller at some point (e.g., loadEvent.rtObject)","msgtype":"m.text"},"ts":1615392004000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"noamr: that is, I'd like us to define in what task these objects get created","msgtype":"m.text"},"ts":1615392041000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yea, it's true for service worker responses as well (the service worker creates the stream, and stream EOF generates responseEnd)","msgtype":"m.text"},"ts":1615392044000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"(in meetings... :/ )","msgtype":"m.text"},"ts":1615392071000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"annevk: I believe the RT object creation should be done on the main thread by RT and not by FETCH. Isn't there some kind of mechanism to \"queue a task on the global object's main thread\"?","msgtype":"m.text"},"ts":1615392257000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: and for that I think we can maybe get away with a default implementation that does the right thing (the EOF task does the creation of the object; and the caller does the firing of the load/error event in it), but there needs to be some way to override prolly for media at least","msgtype":"m.text"},"ts":1615392268000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I don't believe media is different from the default; it would enqueue the RT object once it's fully streamed","msgtype":"m.text"},"ts":1615392330000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: media can do range requests and as you said it would likely do its stuff off the main thread","msgtype":"m.text"},"ts":1615392356000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(though maybe we can gloss over that as an optimization)","msgtype":"m.text"},"ts":1615392392000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yea, so in the end we would get to something like streams.EOF -> FETCH.report-timing -> RT.queue task on the main thread to add an RT object","msgtype":"m.text"},"ts":1615392423000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"the fact that media decoder runs on some thread is not relevant to that","msgtype":"m.text"},"ts":1615392438000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: the caller that is reading the response body should also be able to perform actions in that task though, that's what I'm trying to say","msgtype":"m.text"},"ts":1615392579000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ah I see. so for that purpose we can, like you said, keep the off-thread decoding et al as an optimization that has to deal with its own thread safety","msgtype":"m.text"},"ts":1615392656000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"So for instance, https://html.spec.whatwg.org/#default-fetch-and-process-the-linked-resource step 11.5 would happen in this task (and not queue its own task)","msgtype":"m.text"},"ts":1615392738000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And that probably has to happen after RT object creation, but Fetch can handle that ordering","msgtype":"m.text"},"ts":1615392764000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I don't think ordering matters in this case. There is no guarantee that RT would be enqueued before/after the contents of the resource are handled in practice. it's ok if it's racy","msgtype":"m.text"},"ts":1615392983000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: right I disagree with that","msgtype":"m.text"},"ts":1615393005000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: fair enough. by \"fetch can handle that ordering\", you mean something like \"send the EOF state forward, and only then enqueue an RT entry\"?","msgtype":"m.text"},"ts":1615393145000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: with recent changes fetch queues the task and calls a callback from the caller","msgtype":"m.text"},"ts":1615393392000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"noamr: before it calls that callback it could call the instruction that creates the RT object","msgtype":"m.text"},"ts":1615393425000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"noamr: this would require something special for reading response bodies I suspect","msgtype":"m.text"},"ts":1615393492000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok, let me tinker with it","msgtype":"m.text"},"ts":1615393518000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"catching up","msgtype":"m.emote"},"ts":1615394881000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"So, right now that ordering is not defined, but it would be good if we can make it well defined and queue the RT entry in a task that's somehow relative to other tasks such as the onload event and the resource processing","msgtype":"m.text"},"ts":1615395508000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"If Fetch can make sure that happens that would be ideal","msgtype":"m.text"},"ts":1615395591000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"I've been using the spec to aid my in writing a simple web browserBut I've not gotten very far lol https://usercontent.irccloud-cdn.com/file/IZoDHgO1/browser.png","msgtype":"m.text"},"ts":1615399345000,"senderName":"EveryOS","senderId":"EveryOS@irc"},
{"content":{"body":"yoav: yea, I'll check if that's doable inside fetch or if caller integration is needed.","msgtype":"m.text"},"ts":1615400995000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"ð","msgtype":"m.text"},"ts":1615404018000,"senderName":"yoav","senderId":"yoav@irc"}
]