[
{"content":{"body":"Where in the Fetch spec does it say to set the Origin header for WebSocket requests?","msgtype":"m.text"},"ts":1490609039000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: where it mentions ws: and wss: protocol?","msgtype":"m.text"},"ts":1490609975000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I thought it does there","msgtype":"m.text"},"ts":1490609981000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"loosk","msgtype":"m.emote"},"ts":1490609986000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I don't see that.","msgtype":"m.text"},"ts":1490609991000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"MikeSmith: All I see is \"If the CORS flag is set or httpRequest’s method is neither `GET` nor `HEAD`, then append `Origin`/httpRequest’s origin, serialized and UTF-8 encoded, to httpRequest’s header list.\"","msgtype":"m.text"},"ts":1490610009000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Step 11 of http-network-or-cache-fetch,","msgtype":"m.text"},"ts":1490610021000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"but AFAIK with a WebSocket request the CORS flag is unset.","msgtype":"m.text"},"ts":1490610034000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"hmm then maybe in the HTML spec, where it calls the fetch algorithm for WebSocket requests","msgtype":"m.text"},"ts":1490610066000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: https://html.spec.whatwg.org/multipage/comms.html#dom-websocket Doesn't seem like it.","msgtype":"m.text"},"ts":1490610084000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1490610126000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I see that just references https://fetch.spec.whatwg.org/#concept-websocket-establish","msgtype":"m.text"},"ts":1490610134000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Seems like the step I mentioned should have an additional condition,","msgtype":"m.text"},"ts":1490610303000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"MikeSmith: 'or request's mode is \"websocket\"'","msgtype":"m.text"},"ts":1490610315000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"hmm yeah","msgtype":"m.text"},"ts":1490610614000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: When going through establish a ws connection,","msgtype":"m.text"},"ts":1490610971000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"MikeSmith: can the response returned by basic fetch ever be a filtered response?","msgtype":"m.text"},"ts":1490610986000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"In step 14 of https://fetch.spec.whatwg.org/#concept-main-fetch, that is.","msgtype":"m.text"},"ts":1490611007000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"loosk","msgtype":"m.emote"},"ts":1490611059000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"nox: if the response tainting is the default “basic” it can, right?","msgtype":"m.text"},"ts":1490611268000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Maybe?","msgtype":"m.text"},"ts":1490611310000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"i heard Maybe was botie taking notes of who are going to TPAC","msgtype":"m.text"},"ts":1490611310000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"request’s mode is \"navigate\" or \"websocket\"","msgtype":"m.text"},"ts":1490611310000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"        Set request’s response tainting to \"basic\".","msgtype":"m.text"},"ts":1490611311000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"nox: if even same-origin WebSocket includes it I agree that we need a change there","msgtype":"m.text"},"ts":1490611326000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: Yeah but I'm not sure it matters in the particular case of websocket.","msgtype":"m.text"},"ts":1490611326000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Set response to the following filtered response with response as its internal response, depending on request’s response tainting:","msgtype":"m.text"},"ts":1490611348000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"nox: I guess the WebSocket handshake request uses GET?","msgtype":"m.text"},"ts":1490611349000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"basic\"","msgtype":"m.text"},"ts":1490611351000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"    basic filtered response","msgtype":"m.text"},"ts":1490611354000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: It does.","msgtype":"m.text"},"ts":1490611359000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"yeah it does","msgtype":"m.text"},"ts":1490611373000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"nox: I think you're right then that we need to include mode is websocket","msgtype":"m.text"},"ts":1490611390000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it does use GET because it defaults to that, right?","msgtype":"m.text"},"ts":1490611391000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Oh I see the step you pasted,","msgtype":"m.text"},"ts":1490611463000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"MikeSmith: but the previous step to the one which you pasted is \"If response is not a network error and response is not a filtered response, then run these substeps:\",","msgtype":"m.text"},"ts":1490611484000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"MikeSmith: can HTTP fetch itself return a filtered response for ws?","msgtype":"m.text"},"ts":1490611507000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"aha","msgtype":"m.text"},"ts":1490611507000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"nox: it cannot there as far as I can see","msgtype":"m.text"},"ts":1490611534000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Thanks!","msgtype":"m.text"},"ts":1490611707000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"cheers","msgtype":"m.text"},"ts":1490611802000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the more I read the Fetch spec the more I think there’s no way to understand it without implementing it","msgtype":"m.text"},"ts":1490611848000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"which I’m not doing","msgtype":"m.text"},"ts":1490611858000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but which I guess you are","msgtype":"m.text"},"ts":1490611864000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: It's worse than that.","msgtype":"m.text"},"ts":1490611943000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"MikeSmith: Our Fetch impl currently doesn't allow us to use these algos from the websocket case,","msgtype":"m.text"},"ts":1490611959000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"MikeSmith: and the three existing Rust impls of websocket don't play well with that spec in general,","msgtype":"m.text"},"ts":1490611978000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"so I'm reimplementing these algos special-cased for ws, and doing ws handshake myself from Servo's code directly.","msgtype":"m.text"},"ts":1490611996000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"The unfiltered internal response does not matter in the ws case, right?","msgtype":"m.text"},"ts":1490612026000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Actually, does filtering these responses matter at all?","msgtype":"m.text"},"ts":1490612076000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"The response is never exposed to the Web for websockets, right?","msgtype":"m.text"},"ts":1490612086000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I guess not unless some other spec says it is?","msgtype":"m.text"},"ts":1490612106000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: You devil.","msgtype":"m.text"},"ts":1490612129000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"which if so should only be the HTML spec I’d think","msgtype":"m.text"},"ts":1490612130000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1490612133000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"*snort*","msgtype":"m.text"},"ts":1490612138000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the Fetch spec should be used on people as a test of how must perseverance they have","msgtype":"m.text"},"ts":1490612221000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Heh.","msgtype":"m.text"},"ts":1490612240000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"MikeSmith, annevk: https://github.com/whatwg/fetch/pull/518","msgtype":"m.text"},"ts":1490614588000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"reviewed","msgtype":"m.text"},"ts":1490615337000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Amended.","msgtype":"m.text"},"ts":1490615357000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: do you know if we have tests?","msgtype":"m.text"},"ts":1490615399000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Absolutely no idea, but the Origin header seems core to WS to me, so it wouldn't surprise me if we do.","msgtype":"m.text"},"ts":1490615427000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk, MikeSmith: Shouldn't step 22.5.2. be avoided for websocket stuff?","msgtype":"m.text"},"ts":1490620767000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk, MikeSmith: Why should even the response be cached at all if the cache mode is no-store?","msgtype":"m.text"},"ts":1490620782000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Ah nevermind, that's covered by the mentioned RFC...","msgtype":"m.text"},"ts":1490620806000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: might be a recent regression, mnot revamped the cache bits","msgtype":"m.text"},"ts":1490620827000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wants \"right after rAF\" callback","msgtype":"m.emote"},"ts":1490622444000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"smaug: I think you filed a bug for that at some point, it hasn't gotten fixed thus far","msgtype":"m.text"},"ts":1490622552000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I did","msgtype":"m.text"},"ts":1490622561000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"it just occurs every now and then when I write some benchmarking like code that I end up doing rAF(function(setTimeout(...)))","msgtype":"m.text"},"ts":1490622614000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"hmm, perhaps I could use requestIdleCallback","msgtype":"m.text"},"ts":1490622634000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"annevk: What about the last bullet of step 5 of https://fetch.spec.whatwg.org/#concept-http-network-fetch?","msgtype":"m.text"},"ts":1490624272000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: Is the server allowed to return some non-101 1xx response, and then the 101 one, for WebSocket?","msgtype":"m.text"},"ts":1490624294000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: per the new definition yes, but this wasn't tested","msgtype":"m.text"},"ts":1490624490000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: not sure what's desired","msgtype":"m.text"},"ts":1490624509000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: making the handshake behave as much as the rest of the networking stack as possible probably is, so ignoring seems better?","msgtype":"m.text"},"ts":1490624535000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: per grep  websockets/Create-Secure-blocked-port.htm is the only resource that makes use of websocket.sub.js","msgtype":"m.text"},"ts":1490625730000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: huh","msgtype":"m.text"},"ts":1490625750000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: I think I'll push another fixup that basically inlines the creation of that function","msgtype":"m.text"},"ts":1490625755000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: sorry, for CreateWebSocketWithBlockedPort","msgtype":"m.text"},"ts":1490625771000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: per \"grep CreateWebSocketWithBlockedPort -r *\"","msgtype":"m.text"},"ts":1490625783000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ah, yes indeed","msgtype":"m.text"},"ts":1490625792000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"need .sub.html on test then to get the port that should work","msgtype":"m.text"},"ts":1490625846000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ah right, skipped inlining for now and just made it return","msgtype":"m.text"},"ts":1490626099000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"websocket.sub.js already returns sometimes","msgtype":"m.text"},"ts":1490626108000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: ping for https://github.com/whatwg/html/issues/2460","msgtype":"m.text"},"ts":1490626192000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"will do","msgtype":"m.text"},"ts":1490626193000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"domfarolino: filed an Edge issue successfully just now btw","msgtype":"m.text"},"ts":1490626585000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks for the heads up! Forgot to reply the other day, ended up using the twitter reporting which worked great","msgtype":"m.text"},"ts":1490626743000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"annevk: Thanks! I've thrown it at folks smarter than me.","msgtype":"m.text"},"ts":1490627036000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"annevk: In step 5 of https://fetch.spec.whatwg.org/#concept-http-network-fetch,","msgtype":"m.text"},"ts":1490627285000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"it says 'If request’s header list contains `Transfer-Encoding`/`chunked` and response is transferred via HTTP/1.0 or older, then return a network error.',","msgtype":"m.text"},"ts":1490627295000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"and then 'Transmit body for request',","msgtype":"m.text"},"ts":1490627306000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"how can we know the response is transferred via HTTP/1.0 before even sending the body?","msgtype":"m.text"},"ts":1490627318000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: it's possible in theory to get an early response, but I guess that should be part of the caveats somehow","msgtype":"m.text"},"ts":1490627466000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: all of step 5 is sort of continuous in a way :/","msgtype":"m.text"},"ts":1490627522000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: main problem is that standards are not nicely layered","msgtype":"m.text"},"ts":1490627537000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Oh really! ;)","msgtype":"m.text"},"ts":1490627554000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"There really should be some kind of way to rebase where it adds a commit for rebase conflicts that makes the rebasing work and that can then be reviewed","msgtype":"m.text"},"ts":1490629704000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Just rebasing and force pushing and no longer being sure about your entire review is really bad","msgtype":"m.text"},"ts":1490629739000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: looking at https://github.com/heycam/webidl/pull/286 today hoping to be able to merge it, I'm left wondering whether the right decision wouldn't be to have a separate syntax for type modifiers vs. extended attributes.","msgtype":"m.text"},"ts":1490653304000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: [clamp] on a dictionary member clearly addresses the type, while the hinted at [SecureContext] on the same member, clearly addresses the member.","msgtype":"m.text"},"ts":1490653408000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: mmm. letting it sink in, it seems these distinctions will be completely opaque unless you're attempting to specify extended attributes.","msgtype":"m.text"},"ts":1490654006000,"senderName":"tobie","senderId":"tobie@irc"}
]