[
{"content":{"body":"annevk: do you recall off the top of your head if anything in webidl or infra explicitly talks about changing the \"value pairs to iterate over\" during iteration? I'm looking at a blink XHR bug that might be just working as intended (plus gecko and webkit behave identically)","msgtype":"m.text"},"ts":1616498365000,"senderName":"rakuco","senderId":"rakuco@irc"},
{"content":{"body":"rakuco: I came across this for Headers recently and I think that unless the specification says to make a copy, making changes during iteration will yield \"unexpected\" results","msgtype":"m.text"},"ts":1616498648000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rakuco: see https://bugzilla.mozilla.org/show_bug.cgi?id=1697114","msgtype":"m.text"},"ts":1616498660000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I see, thanks. FWIW I'm looking at https://crbug.com/1190240 which is about FormData","msgtype":"m.text"},"ts":1616500207000,"senderName":"rakuco","senderId":"rakuco@irc"},
{"content":{"body":"rakuco: seems invalid","msgtype":"m.text"},"ts":1616500681000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, I agree. thanks for checking too","msgtype":"m.text"},"ts":1616503459000,"senderName":"rakuco","senderId":"rakuco@irc"},
{"content":{"body":"hi yoav, annevk: I think all the comments on the FETCH/RT PR were handled, what's next? :)","msgtype":"m.text"},"ts":1616512629000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"From my perspective, I LGTMed","msgtype":"m.text"},"ts":1616513430000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"noamr: it seems the current setup doesn't quite allow for aligning the load event with the RT object","msgtype":"m.text"},"ts":1616514398000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the load event for which caller?","msgtype":"m.text"},"ts":1616514419000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: say the <img> element","msgtype":"m.text"},"ts":1616514427000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"or <link rel=stylesheet> or some such","msgtype":"m.text"},"ts":1616514447000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: we said that we'll deal with FETCH and XHR, and deal with additional callers at the next phase. the <img> element is currently not integrated with FETCH","msgtype":"m.text"},"ts":1616514450000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: I was hoping that the setup in Fetch would at least work though","msgtype":"m.text"},"ts":1616514502000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: this is different from what I understood from our earlier conversations. we said that we'd use XHR and FETCH as the first proof of concept, and when we can integrate other callers we will add the setup for them in FETCH","msgtype":"m.text"},"ts":1616514574000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: ah okay, they can call \"finalize and report timing\" themselves","msgtype":"m.text"},"ts":1616514581000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yes, exactly","msgtype":"m.text"},"ts":1616514588000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"we can do something with processEndOfBody but no callers use it as of yet (except sync XHR, which doesn't need this for the purpose of RT)","msgtype":"m.text"},"ts":1616514645000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"(I mean processResponseEndOfBody)","msgtype":"m.text"},"ts":1616514661000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"Yeah I was wondering if that should move to finalize response, but maybe it's okay this way","msgtype":"m.text"},"ts":1616514732000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I was wondering the same initially, but I think this way allows the caller to control the order with its load event etc., and to do special handling like fire the event on image-decode error","msgtype":"m.text"},"ts":1616514818000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"I don't think there is a difference? Other than that the status quo setup starts reading sooner which is arguably better even in \"hand wave\" land","msgtype":"m.text"},"ts":1616514873000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not sure I follow","msgtype":"m.text"},"ts":1616514933000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"reading sooner?","msgtype":"m.text"},"ts":1616514946000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"I think the difference is that the control of the order is resource-specific rather than something internal in FETCH. The resource-specific caller also might have extra knowledge about the global object and about the \"initiator type\" (which might be a tag name), which also makes this slightly different","msgtype":"m.text"},"ts":1616515056000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: \"finalize response\" is invoked once the network sees the final byte of the response (or an error)","msgtype":"m.text"},"ts":1616515059000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"noamr: \"fetch finalize\" is invoked once the response headers have been parsed, basically","msgtype":"m.text"},"ts":1616515078000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"noamr: so if you invoke \"fully read\" in the former, it'd be much later in the process","msgtype":"m.text"},"ts":1616515107000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess you're talking about who gets to call \"finalize and report timing\"?","msgtype":"m.text"},"ts":1616515160000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yes","msgtype":"m.text"},"ts":1616515173000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"I don't think images and other callers would use \"process response done\" as a trigger for reading. For now it's for FETCH, where the response and the reading are somewhat parallel in nature","msgtype":"m.text"},"ts":1616515231000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"Yeah, that's another thing and might well end up being caller-specific; we'll see","msgtype":"m.text"},"ts":1616515264000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"noamr: I'm gonna do an editorial pass and push that to your branch; I also want to change the unsafe timing bits which I can do tomorrow and read it through once more","msgtype":"m.text"},"ts":1616516550000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: sounds good!","msgtype":"m.text"},"ts":1616517132000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: for ALPN, is there a specific form of percent-encoding used? Can we reference https://url.spec.whatwg.org/#percent-encoded-bytes somehow?","msgtype":"m.text"},"ts":1616517174000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav ^^","msgtype":"m.text"},"ts":1616517313000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"I'm not sure, but can loop in folks that would know","msgtype":"m.text"},"ts":1616517453000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"annevk: according to IETF (https://tools.ietf.org/html/rfc7639#section-2.2), it's URL percent encoding (https://tools.ietf.org/html/rfc3986#section-2.1)","msgtype":"m.text"},"ts":1616519161000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: oh so wait, so we shouldn't really say anything here","msgtype":"m.text"},"ts":1616519230000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"noamr: because the ALPN Protocol ID is already percent-encoded by the time we see it and we're not going to remove the percent-encoding I assume","msgtype":"m.text"},"ts":1616519256000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: not sure about the specifics of this","msgtype":"m.text"},"ts":1616519347000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"judging by the code in chromium, the list of possible ALPN protocols doesn't have any percent encoding or percent-encoded characters  (https://source.chromium.org/chromium/chromium/src/+/master:net/http/http_response_info.cc;l=542;drc=846866e2fd11fab4534420c06375bcaa54f1b823;bpv=1;bpt=1)","msgtype":"m.text"},"ts":1616519640000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: is worker start time only for service workers?","msgtype":"m.text"},"ts":1616520351000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"noamr: I pushed a commit with some nits and TODO comments, hopefully we can sort those out tomorrow and land this","msgtype":"m.text"},"ts":1616520864000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If anyone else wants to review Resource Timing integration into Fetch, now would be a good time: https://github.com/whatwg/fetch/pull/1185","msgtype":"m.text"},"ts":1616520894000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: re worker start, yes it is.","msgtype":"m.text"},"ts":1616521196000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"I will look at the TODOs tomorrow morning, thanks a lot","msgtype":"m.text"},"ts":1616521218000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: I'm happy to finish the TODOs btw, just want your feedback/take on them; I think we should rename worker time in that case to service worker time, even if it ends up exposed as workerTime in the API","msgtype":"m.text"},"ts":1616521303000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Got it","msgtype":"m.text"},"ts":1616521654000,"senderName":"noamr","senderId":"noamr@irc"}
]