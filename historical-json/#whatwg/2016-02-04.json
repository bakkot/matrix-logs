[
{"content":{"body":"tobie: they're shims for most everything.... streams, buffer (their alternative to typed arrays), etc.","msgtype":"m.text"},"ts":1454545293000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"mounir: hey. I'm busy this week but will look at it next week, if that's ok.","msgtype":"m.text"},"ts":1454546757000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"ritsyy (and everyone else): make sure to update whatwg/html-build","msgtype":"m.text"},"ts":1454574114000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"we landed some changes that require updating it","msgtype":"m.text"},"ts":1454574128000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: okay, ta","msgtype":"m.text"},"ts":1454574633000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"ritsyy: maybe also wattsi","msgtype":"m.text"},"ts":1454574647000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ritsyy: the upshot is that everything should go a little faster","msgtype":"m.text"},"ts":1454574667000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: okay, is the script updated to work offline?","msgtype":"m.text"},"ts":1454574783000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"ritsyy: still requires two downloads if you don't set -n, but they are relatively small","msgtype":"m.text"},"ts":1454575082000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: oh okay, great!","msgtype":"m.text"},"ts":1454575185000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"how make a fetch post request with content-type json/application? when i put json.stringify(json) in the body, the content-type is set to text/plain..","msgtype":"m.text"},"ts":1454579750000,"senderName":"skender","senderId":"skender@irc"},
{"content":{"body":"hallvors, ping","msgtype":"m.text"},"ts":1454582298000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: here :)","msgtype":"m.text"},"ts":1454582391000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"hallvors, do you know if there's a test that readystatechange is dispatched sync from xhr.open()?","msgtype":"m.text"},"ts":1454582421000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hm.. I'll look. I think so but can't say for sure","msgtype":"m.text"},"ts":1454582487000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"Ms2ger: I guess https://github.com/w3c/web-platform-tests/blob/master/XMLHttpRequest/open-open-sync-send.htm might do?","msgtype":"m.text"},"ts":1454582635000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"Seems like it does, yes","msgtype":"m.text"},"ts":1454582679000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Thanks :)","msgtype":"m.text"},"ts":1454582683000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"it's not explictly about that (it's a bit weirder) but covers it","msgtype":"m.text"},"ts":1454582702000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"perhaps we should have an explicit non-weird test too ..","msgtype":"m.text"},"ts":1454582715000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"it doesn't cover the synchronous bit though","msgtype":"m.text"},"ts":1454582718000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it just checks that a transition happened, not when","msgtype":"m.text"},"ts":1454582739000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But it does that check before the event loop spins","msgtype":"m.text"},"ts":1454582763000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I think I had written some tests where I also added logging before and after the open call","msgtype":"m.text"},"ts":1454582778000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But something more explicit would of course be nice :)","msgtype":"m.text"},"ts":1454582796000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Oh wait, I guess the xhr might spin the event loop","msgtype":"m.text"},"ts":1454582828000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"we can always add a couple more asserts to that test..","msgtype":"m.text"},"ts":1454582839000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"Ms2ger: not per spec","msgtype":"m.text"},"ts":1454582844000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"like one before send()","msgtype":"m.text"},"ts":1454582858000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"I also think we have some that do more detailed logging, just need to find them..","msgtype":"m.text"},"ts":1454582887000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"(I haven't found any bugs here, btw, but it seems like something worth testing)","msgtype":"m.text"},"ts":1454582932000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk, Ms2ger: I'll just add a specific test..","msgtype":"m.text"},"ts":1454584265000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"Thanks","msgtype":"m.text"},"ts":1454584303000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Do we not yet have a better way to write \"If parsing mime analogously to the value of the `Content-Type` header fails...\"?","msgtype":"m.text"},"ts":1454585020000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: https://critic.hoppipolla.co.uk/r/6166","msgtype":"m.text"},"ts":1454585255000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"Thanks, will look in a bit","msgtype":"m.text"},"ts":1454585280000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Pardon the mess with the first PR being mistakenly branched off a branch full of clipboard stuff..","msgtype":"m.text"},"ts":1454585292000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"wishes those clipboard tests get merged soon..","msgtype":"m.emote"},"ts":1454585305000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"wants git to ask \"are you sure\" when doing checkout -b newbranch and not on master","msgtype":"m.emote"},"ts":1454585350000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"no haste, but also a veeeery simple review, won't take you long ;)","msgtype":"m.text"},"ts":1454585406000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"hallvors, reviewed, and want one more test :)","msgtype":"m.text"},"ts":1454585952000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Now, lunch","msgtype":"m.text"},"ts":1454585959000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"your wish is my command, Sir :)","msgtype":"m.text"},"ts":1454585979000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"hallvors, I probably would have stuck it in the same file, but eh :)","msgtype":"m.text"},"ts":1454588075000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"hallvors, I also want all the XHR tests to run in workers too :)","msgtype":"m.text"},"ts":1454588181000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"hm.. most of them don't, seems like a bit of work to fix that..","msgtype":"m.text"},"ts":1454588216000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":":/","msgtype":"m.text"},"ts":1454588235000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1454588254000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I really want a fix for https://github.com/w3c/web-platform-tests/issues/2558","msgtype":"m.text"},"ts":1454588319000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: wouldn't be that much work if we wrote a script that would extract all the code from the XHR tests into .js files","msgtype":"m.text"},"ts":1454588519000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"The one thing we'd lose is the spec links, I guess","msgtype":"m.text"},"ts":1454588568000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Though that seems fixable","msgtype":"m.text"},"ts":1454588576000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: Presumably you could do the same as the .worker.js files but with a .global.js or something with something to tell the test what context it is running in (a boolean doesn't seem ideal)","msgtype":"m.text"},"ts":1454588580000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Yeah, agreed","msgtype":"m.text"},"ts":1454588591000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Then the question is what to do with shared/service workers","msgtype":"m.text"},"ts":1454588617000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Maybe if (type === \"service worker\") return","msgtype":"m.text"},"ts":1454588635000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Or have some mechanism to define what kind of tests should be run","msgtype":"m.text"},"ts":1454588707000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Like","msgtype":"m.text"},"ts":1454588710000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":" //test contexts(worker, window)","msgtype":"m.text"},"ts":1454588732000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"and run a regexp in the manifest parser","msgtype":"m.text"},"ts":1454588748000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"That seems like the least wasteful approach","msgtype":"m.text"},"ts":1454588806000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"wants the spec links and the xpaths preserved..","msgtype":"m.emote"},"ts":1454589164000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"Here's another one for you, Ms2ger :) https://github.com/w3c/web-platform-tests/pull/2563","msgtype":"m.text"},"ts":1454590585000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"Woo, <details> landed in Gecko","msgtype":"m.text"},"ts":1454590678000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"\\o/!!!","msgtype":"m.text"},"ts":1454590805000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"just when i was thinking esprehn had me convinced to remove it from the spec","msgtype":"m.text"},"ts":1454590822000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I don't understand https://github.com/annevk/html-cross-origin-objects/issues/32","msgtype":"m.text"},"ts":1454590959000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I think you're making some assumptions that might be false","msgtype":"m.text"},"ts":1454590968000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: while you are correct that Location is exotic and Window will not be, the behavior implemented by Location and Window*Proxy* will be nearly identical","msgtype":"m.text"},"ts":1454591051000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I'd much rather have an answer to https://github.com/annevk/html-cross-origin-objects/issues/32#issuecomment-179817893","msgtype":"m.text"},"ts":1454591204000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: other than that the specification works as-is, afaict","msgtype":"m.text"},"ts":1454591216000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: if the behavior implemented will be nearly identical, then I think the spec needs to be a lot more identical","msgtype":"m.text"},"ts":1454591237000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: that is why they all use shared abstract operations","msgtype":"m.text"},"ts":1454591257000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: they shouldn't, since WIndowProxy needs to delegate to its target, instead of calling defaultinternalmethod. That is my answer to the linked comment.","msgtype":"m.text"},"ts":1454591282000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(\"In general I think CrossOriginGetOwnProperty should probably be removed in favor of explicit different algorithms for each of the two objects.\")","msgtype":"m.text"},"ts":1454591290000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If you want them to be identical then you should make Location a proxy too","msgtype":"m.text"},"ts":1454591301000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: why can't they use shared abstract operations that operate on different objects?","msgtype":"m.text"},"ts":1454591312000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: show me how that fails","msgtype":"m.text"},"ts":1454591318000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it doesn't fail right now, assuming you redefine window named properties. It's just bad software engineering practice to rely on the internal implementation details of the object you're proxying","msgtype":"m.text"},"ts":1454591346000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: this is part of the definition of that object though","msgtype":"m.text"},"ts":1454591365000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: WindowProxy should be a proxy. So it should delegate to its target. I'm not sure how to make that any clearer.","msgtype":"m.text"},"ts":1454591390000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: this is kind of the whole point","msgtype":"m.text"},"ts":1454591395000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: that we know about the details of Window and can therefore do things on WindowProxy","msgtype":"m.text"},"ts":1454591409000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"to make them work well together","msgtype":"m.text"},"ts":1454591417000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"How is that the whole point? They should be layered, not intertwingled.","msgtype":"m.text"},"ts":1454591425000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"they are intertwingled in impls too","msgtype":"m.text"},"ts":1454591439000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that's not true in chrome","msgtype":"m.text"},"ts":1454591445000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and I doubt that bz would use this kind of defaultinternalmethod stuff, but we can ask him","msgtype":"m.text"},"ts":1454591464000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"This is not a hard change to make","msgtype":"m.text"},"ts":1454591476000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh, I want to reply DefaultInternalMethod with Ordinary*","msgtype":"m.text"},"ts":1454591479000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I am unclear why you are pushing back on it","msgtype":"m.text"},"ts":1454591481000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"sure whatever","msgtype":"m.text"},"ts":1454591483000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"same bad practice, different name","msgtype":"m.text"},"ts":1454591488000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I don't understand what change you are proposing","msgtype":"m.text"},"ts":1454591493000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It sounds like you want to duplicate all these abstract operations","msgtype":"m.text"},"ts":1454591503000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"While they do exactly the same","msgtype":"m.text"},"ts":1454591506000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"use W.[[GetOwnProperty]](...), not OrdinaryGetOwnProperty(W, ...)","msgtype":"m.text"},"ts":1454591510000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that is the important higher-order bit","msgtype":"m.text"},"ts":1454591514000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah, that would require duplicating all the text with much more chance for divergence","msgtype":"m.text"},"ts":1454591596000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I can't think of an easy way to do that without either: (a) creating separate algorithms for window and location, or (b) making Location a proxy too.","msgtype":"m.text"},"ts":1454591597000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That seems extremely silly","msgtype":"m.text"},"ts":1454591632000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but I think it will match impls better, be more maintainable longer-run due to the decoupling, and either be clearer about the fact that both are proxies, or be clearer about the fact that both are very different types of objects","msgtype":"m.text"},"ts":1454591644000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Given that this is all legacy and we'll never make these objects even worse I doubt any of that is really true","msgtype":"m.text"},"ts":1454591696000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"OK I think I found a (c)","msgtype":"m.text"},"ts":1454591708000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The main problem that gives us that reviewing will be much harder","msgtype":"m.text"},"ts":1454591712000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Instead of step 1 of CrossOriginX(...) being \"if is same origin, use defaultinternalmethod\"","msgtype":"m.text"},"ts":1454591729000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"To ensure that the security properties are indeed identical","msgtype":"m.text"},"ts":1454591730000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"move that step into the caller","msgtype":"m.text"},"ts":1454591737000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and leave CrossOriginX(...) to be only for the cross origin case","msgtype":"m.text"},"ts":1454591745000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"then that step can use either DefaultInternalMethod for Location, or delegation for WindowProxy","msgtype":"m.text"},"ts":1454591761000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"There, that's pretty easy.","msgtype":"m.text"},"ts":1454591773000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I still don't really see what that buys us. If we ever change Window to be exotic we could do this rewrite then","msgtype":"m.text"},"ts":1454591851000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"In any event, that doesn't solve https://github.com/annevk/html-cross-origin-objects/issues/32#issuecomment-179817893","msgtype":"m.text"},"ts":1454591859000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Remembering that we have to is a problem.","msgtype":"m.text"},"ts":1454591864000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"zcorpan, https://github.com/w3c/web-platform-tests/pull/2513","msgtype":"m.text"},"ts":1454591866000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I don't think so","msgtype":"m.text"},"ts":1454591883000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I mean, I don't think we ever want to make platform objects more exotic and if we did we'd have to review it for Window/Location carefully anyway","msgtype":"m.text"},"ts":1454591930000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Re https://github.com/annevk/html-cross-origin-objects/issues/32#issuecomment-179817893 I think in general the CrossOriginXs should not branch on their input, so I guess the \"remove step 4\" thing","msgtype":"m.text"},"ts":1454591937000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: if an abstract operation doesn't return anything, is the return value undefined?","msgtype":"m.text"},"ts":1454591962000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's just ... gah ... I can't really explain this as anything more than best practices. Proxies should act like an actual proxy, and be decoupled from internal knowledge of their target.","msgtype":"m.text"},"ts":1454591980000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: I'll check, not sure","msgtype":"m.text"},"ts":1454591989000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: is there a way to pass the correct thing to call into the CrossOrigin operations?","msgtype":"m.text"},"ts":1454592032000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: you could invent notation for it but it'd not be much shorter than just passing in the spec line that you would plan to write anyway.","msgtype":"m.text"},"ts":1454592068000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: that would avoid a bunch of duplication and make it a little more explicit what the difference actually is","msgtype":"m.text"},"ts":1454592070000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't understand, with what I've described there's almost no duplication","msgtype":"m.text"},"ts":1454592084000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"okay, let me ponder a bit","msgtype":"m.text"},"ts":1454592129000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I actually can't find any no-return abstract ops in ES... most of them return a completion value.","msgtype":"m.text"},"ts":1454592215000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I guess I could just return undefined as a new final step that the caller can branch on","msgtype":"m.text"},"ts":1454592238000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: what is this for?","msgtype":"m.text"},"ts":1454592248000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: the named property checkup only needs to happen in the cross-origin case for Window","msgtype":"m.text"},"ts":1454592299000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sure, what does undefined have to do with it?","msgtype":"m.text"},"ts":1454592353000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: so this would be a way to make CrossOriginGetOwnProperty reusable without branching inside the abstract operation on _O_","msgtype":"m.text"},"ts":1454592356000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm","msgtype":"m.text"},"ts":1454592365000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: rather than throwing in the end it would return undefined, the caller would then be responsible for throwing","msgtype":"m.text"},"ts":1454592398000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You could just branch on the return value being an exception","msgtype":"m.text"},"ts":1454592402000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Nah I guess that doesn't work","msgtype":"m.text"},"ts":1454592438000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"if there's e.g. a cross-origin getter that throws a TypeError","msgtype":"m.text"},"ts":1454592448000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah returning undefined seems OK. But I'd rename it to CrossOriginGetOwnPropertyHelper since it no longer has the same semantics as GetOwnProperty.","msgtype":"m.text"},"ts":1454592508000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Well... it kind of does... GOP returns undefined on missing property... but I'd think CrossOriginGOP would throw... I dunno, could go either way.","msgtype":"m.text"},"ts":1454592607000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Probably needs a NOTE though at the top of CrossOriginGOP explaining that the caller is expected to eventually throw","msgtype":"m.text"},"ts":1454592652000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"happy to name it helper","msgtype":"m.text"},"ts":1454592874000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"BTW - two more pending XHR test PRs here: https://github.com/w3c/web-platform-tests/pull/2505 https://github.com/w3c/web-platform-tests/pull/2509","msgtype":"m.text"},"ts":1454593090000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"in case somebody wants to review :)","msgtype":"m.text"},"ts":1454593099000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"hallvors, did you check if the errorFunc think worked in 2505?","msgtype":"m.text"},"ts":1454594112000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: likely not","msgtype":"m.text"},"ts":1454594303000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"whistles","msgtype":"m.emote"},"ts":1454594308000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"(think?)","msgtype":"m.text"},"ts":1454594332000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"needs autocorrect in his brain","msgtype":"m.emote"},"ts":1454594342000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"would be very, very worried about a built-in autocorrect in his brain :-p","msgtype":"m.emote"},"ts":1454594438000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"philipj: would like to know more for this one  https://www.w3.org/Bugs/Public/show_bug.cgi?id=28829 , the wearable should also be mentioned?","msgtype":"m.text"},"ts":1454595067000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"annevk: @fetchstandard may want to note that Microsoft has announced they will be implementing the Fetch API in Edge","msgtype":"m.text"},"ts":1454595140000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: https://twitter.com/jacobrossi/status/694944666827886592 and https://dev.windows.com/en-us/microsoft-edge/platform/status/fetchapi","msgtype":"m.text"},"ts":1454595166000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"they have moved it to Under Development there in their Platform Status page","msgtype":"m.text"},"ts":1454595254000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"same for Notifications","msgtype":"m.text"},"ts":1454595348000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://dev.windows.com/en-us/microsoft-edge/platform/status/webnotifications","msgtype":"m.text"},"ts":1454595458000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"though they link to the old spec, I think we can be confident they'll eventually get on board with the current Notifications spec","msgtype":"m.text"},"ts":1454595466000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"especially since they have service workers Under Consideration at \"Roadmap Priority: High — We intend to begin development soon.\"","msgtype":"m.text"},"ts":1454595516000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://dev.windows.com/en-us/microsoft-edge/platform/status/serviceworker","msgtype":"m.text"},"ts":1454595521000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Ms2ger: what Firefox version will <details> ship in?","msgtype":"m.text"},"ts":1454597318000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: done","msgtype":"m.text"},"ts":1454597377000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith, it hasn't made it to mozilla-central yet, so now +16 weeks or so?","msgtype":"m.text"},"ts":1454597397000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"was referring this issue https://www.w3.org/Bugs/Public/show_bug.cgi?id=27451 and in the spec https://html.spec.whatwg.org/multipage/semantics.html#the-wbr-element i think wbr usage should be explained more thoroughly as it adds the line break in the way user wants when the browser window is resized","msgtype":"m.text"},"ts":1454597427000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"I think we're in general happy to have more explanatory prose","msgtype":"m.text"},"ts":1454597508000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Domenic: what's JS for \"is a function\"?","msgtype":"m.text"},"ts":1454598068000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"IsCallable()?","msgtype":"m.text"},"ts":1454598132000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"ah yeah","msgtype":"m.text"},"ts":1454598166000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: arf https://github.com/ljharb/is-callable/blob/master/index.js","msgtype":"m.text"},"ts":1454598194000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Ms2ger: thanks (for release estimate)","msgtype":"m.text"},"ts":1454598227000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Np","msgtype":"m.text"},"ts":1454598238000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"There should really be Object.isCallable()","msgtype":"m.text"},"ts":1454598240000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1454598340000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: does chrome spin up service workers in incognito mode?","msgtype":"m.text"},"ts":1454599776000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yep","msgtype":"m.text"},"ts":1454599799000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: although I'm not sure push works","msgtype":"m.text"},"ts":1454599808000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: so it stores the registration and then throws it away at the end of the session?","msgtype":"m.text"},"ts":1454599821000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yeah, incognito is pretty much an in-memory profile that disappears with the final incognito tab","msgtype":"m.text"},"ts":1454599855000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: in FF we disable serviceWorker.register() in private browsing... was thinking its a possible solution for that twitter person's \"concerns\"","msgtype":"m.text"},"ts":1454599919000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"(even though SW is kind of beside the point, etc)","msgtype":"m.text"},"ts":1454599930000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: from what jsbell told me previously, I think incognito mode in chrome goes to a temp folder on disk... so not pure in-memory","msgtype":"m.text"},"ts":1454599964000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: another thought I had was, it would be nice if we had a bit in IP or TCP header indicating \"metered\"... then the part of the network charging by the byte could flip it and browsers could tell even if they are a few steps downstream","msgtype":"m.text"},"ts":1454600081000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"but I imagine smarter people have already discussed all that","msgtype":"m.text"},"ts":1454600089000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"hi ritsyy!","msgtype":"m.text"},"ts":1454600571000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"agreed that wbr usage should be explained more thoroughly","msgtype":"m.text"},"ts":1454600589000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"wanderview: agreed, dunno if it's already a thing","msgtype":"m.text"},"ts":1454601087000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: the problem with failing .register is it makes private browsing observable, which might be a concern","msgtype":"m.text"},"ts":1454601108000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: we already fail IDB in private browsing... so yea","msgtype":"m.text"},"ts":1454601129000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"ah fair enough, failing for SW is consistent then","msgtype":"m.text"},"ts":1454601141000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: but we try very hard not to write to disk... so doing pure memory everything is both harder and OOMy","msgtype":"m.text"},"ts":1454601153000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: apart from https://github.com/annevk/html-cross-origin-objects/issues/32 I'm not aware of any issues","msgtype":"m.text"},"ts":1454601157000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"in private browsing mode, I mean","msgtype":"m.text"},"ts":1454601166000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: would still be quite some work to put it in HTML of course","msgtype":"m.text"},"ts":1454601172000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: there should not be; it is redundant with typeof. That repo is overcomplicated for no reason; IsCallable(x) <=> typeof x === \"function\"","msgtype":"m.text"},"ts":1454601443000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: hah, good point","msgtype":"m.text"},"ts":1454601518000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: I don't understand https://github.com/annevk/html-cross-origin-objects/issues/32#issuecomment-179912391. COGOPH doesn't need any customizations as written.","msgtype":"m.text"},"ts":1454601682000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: \"Let originalDesc be OrdinaryGetOwnProperty(O, P).\"","msgtype":"m.text"},"ts":1454601712000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1454601747000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: why does it call OrdinaryGetOwnProperty(O, P) once for each e? That's observable, which seems bad.","msgtype":"m.text"},"ts":1454601883000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: it doesn't?","msgtype":"m.text"},"ts":1454601949000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: it only does it if something is SameValue, which can only happen once","msgtype":"m.text"},"ts":1454601964000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah right -_-","msgtype":"m.text"},"ts":1454601971000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: how would it be observable though?","msgtype":"m.text"},"ts":1454601974000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"maybe i should get some caffeine...","msgtype":"m.text"},"ts":1454601977000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: in the hypothetical case where we have no idea what Window does?","msgtype":"m.text"},"ts":1454601996000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess it would not be, I was thinking triggering getters or installing a proxy, but that doesn't make sense","msgtype":"m.text"},"ts":1454602021000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"On the other hand, since it's *un*observable, then here's a solution, I think: factor out getting originalDesc into the caller. The caller already has to do so anyway.","msgtype":"m.text"},"ts":1454602053000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hmm, that seems potentially leaky","msgtype":"m.text"},"ts":1454602103000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We should only get it I think if it's actually on the safelist","msgtype":"m.text"},"ts":1454602114000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So instead of \"3. If IsWindowOrLocationSameOrigin(W), then return OrdinaryGetOwnProperty(W, P). 4. Let property be CrossOriginGetOwnPropertyHelper(W, P).\"","msgtype":"m.text"},"ts":1454602142000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it becomes \"3. Let property be W.[[GetOwnProperty]](P). 4. If IsWindowOrLocationSameOrigin(W), return property. 5. Set property to CrossOriginGetOwnPropertyHelper(W, P, property).\"","msgtype":"m.text"},"ts":1454602145000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"hmm why?","msgtype":"m.text"},"ts":1454602155000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I thought we just convinced ourselves it's unobservable...","msgtype":"m.text"},"ts":1454602167000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess it does not convey intent great though.","msgtype":"m.text"},"ts":1454602209000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess what I'm saying is that it makes the setup more fragile","msgtype":"m.text"},"ts":1454602209000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well, the only thing I can think of is either two algorithms that get inlined into the two [[GOP]]s, which seems fine personally since [[GOP]] has so much variation anyway and the shared code is minor; or, figure out some spec convention for passing \"() => W.[[GetOwnProperty(P)]]\" and \"() => OrdinaryGetOwnProperty(this, P)\" to the algorithm...","msgtype":"m.text"},"ts":1454602303000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess you could define a helper like you were suggesting, like having DefaultInternalMethod switch on the object type and just keep using that.","msgtype":"m.text"},"ts":1454602391000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I was wondering if something like Call([[GetOwnProperty]], W, P) / Call(OrdinaryGetOwnProperty, this, P) would work","msgtype":"m.text"},"ts":1454602448000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Doesn't really work, since [[GOP]] is a method with one argument and OGOP is a function with two arguments","msgtype":"m.text"},"ts":1454602488000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You could maybe just pass a flag as the last parameter to COGOPH","msgtype":"m.text"},"ts":1454602594000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"COGOPH(W, P, \"delegate\") vs. COGOPH(this, P, \"use ordinary\")","msgtype":"m.text"},"ts":1454602622000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Seems reasonable, I might ask bz what he thinks about this","msgtype":"m.text"},"ts":1454602708000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But yeah, this seems solvable, so tomorrow the big HTML PR then maybe","msgtype":"m.text"},"ts":1454602726000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1454602735000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So bz doesn't care since it's not observable, but Gecko does just call the internal method, not the ordinary default internal method","msgtype":"m.text"},"ts":1454603314000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So... Meh","msgtype":"m.text"},"ts":1454603333000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh right, also need TC39 to get back to me on the Ordinary* refactoring stuff I suppose","msgtype":"m.text"},"ts":1454603356000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bterlson ^","msgtype":"m.text"},"ts":1454604035000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(spec builds are so fast now... whee)","msgtype":"m.text"},"ts":1454604044000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(and I can do just ../build.sh instead of cding up a directory)","msgtype":"m.text"},"ts":1454604074000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: heh","msgtype":"m.text"},"ts":1454604103000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: so the other thing we could do is add some asserts about W not being an exotic object","msgtype":"m.text"},"ts":1454604121000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'm starting to feel less strong about all this, and that would help, but I still think it's weird for a proxy not to delegate to its target.","msgtype":"m.text"},"ts":1454604166000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: about the Call() thing earlier, both have the same amount of arguments there; the question is more whether you can rearrange things like that","msgtype":"m.text"},"ts":1454604222000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: they don't... OGOP has two arguments, W.[[GOP]] has one","msgtype":"m.text"},"ts":1454604268000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"location.assign() has one argument too but you can also do Location.prototype.assign.call(location, argument) iirc","msgtype":"m.text"},"ts":1454604325000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sure but then you can't use the same .call() on a two-argument function and only pass two arguments","msgtype":"m.text"},"ts":1454604357000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"you can't do setTimeout.call(fn, time)","msgtype":"m.text"},"ts":1454604372000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think I understand now","msgtype":"m.text"},"ts":1454604417000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"time ./build.sh -n 10.6 seconds","msgtype":"m.text"},"ts":1454604617000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and that's on my puny laptop","msgtype":"m.text"},"ts":1454604679000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh, the other thing aside from JS that needs updating is IDL","msgtype":"m.text"},"ts":1454604842000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But I guess we don't have to wait on IDL or even JS, necessarily","msgtype":"m.text"},"ts":1454604881000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"both of them accept PRs, although IDL has that super-great spec tooling...","msgtype":"m.text"},"ts":1454604962000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I submitted a PR to JS already, and opened an issue with a question on whether another PR would be accepted that went a bit further than cleanup","msgtype":"m.text"},"ts":1454604993000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah just waiting for bterlson to get working today I guess","msgtype":"m.text"},"ts":1454605043000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I will be back at ecmascript stuff around 12:00pst for the record :-P","msgtype":"m.text"},"ts":1454605074000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"wasn't there another PR on a similar thing just recently?","msgtype":"m.text"},"ts":1454605356000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"oh yes, found it, and also see I missed annevk","msgtype":"m.text"},"ts":1454605421000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"'s post at the bottom, sorry","msgtype":"m.text"},"ts":1454605426000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"bterlson: there was another issue, https://github.com/tc39/ecma262/issues/343#issuecomment-178450008","msgtype":"m.text"},"ts":1454605643000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rgr, sorry aboutnot replying to you","msgtype":"m.text"},"ts":1454605661000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"tell me more about perf advancements?","msgtype":"m.text"},"ts":1454606116000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"will do","msgtype":"m.text"},"ts":1454606116000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"I want 10s build for ecma262 :-P","msgtype":"m.text"},"ts":1454606127000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"probably need to jettison the DOM and have a 1-pass build process","msgtype":"m.text"},"ts":1454606175000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"bterlson: well in this case most of the perf improvements were from eliminating downloads and compilation of entities and quote data from CLDR and Unicode. Those things change rarely enough there's no need to update them.","msgtype":"m.text"},"ts":1454606718000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"bterlson: the actual build still uses a HTML parser (one hand-crafted by Hixie_ in FreePascal, admittedly) and I am pretty sure it outputs something DOM-like","msgtype":"m.text"},"ts":1454606751000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh lol","msgtype":"m.text"},"ts":1454606752000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"MikeSmith: hello :) , yeah so i think i could give it a try to add some more points to wbr spec","msgtype":"m.text"},"ts":1454606754000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"bterlson: I think you should just work to make jsdom faster :)","msgtype":"m.text"},"ts":1454606757000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I would have much fun doing that :-D maybe when I'm not under water 24/7 :-P","msgtype":"m.text"},"ts":1454606782000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"^_^","msgtype":"m.text"},"ts":1454606810000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: have you tried using jsdom for generating that dom structure?","msgtype":"m.text"},"ts":1454606883000,"senderName":"Sebmaster","senderId":"Sebmaster@irc"},
{"content":{"body":"Sebmaster: which one? bterlson uses it already for the ES spec.","msgtype":"m.text"},"ts":1454606934000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Haven't tried it on the HTML spec though","msgtype":"m.text"},"ts":1454606944000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Huh, sweet","msgtype":"m.text"},"ts":1454606963000,"senderName":"Sebmaster","senderId":"Sebmaster@irc"},
{"content":{"body":"Sebmaster: he is why we need to make URL parsing lazy :P","msgtype":"m.text"},"ts":1454607086000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ES spec has lots of <a>s... I am hoping 8.0.0 speeds it up a lot.","msgtype":"m.text"},"ts":1454607102000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh huh, I wonder how the parser rewrite will impact speed :S","msgtype":"m.text"},"ts":1454607163000,"senderName":"Sebmaster","senderId":"Sebmaster@irc"},
{"content":{"body":"i would guess not much... it removes a small layer of indirection","msgtype":"m.text"},"ts":1454607220000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"bterlson: Domenic: I'm not sure about the context for what you were discussing about build process and \"10s build for ecma262\" and the HTML parser for the HTML spec build, but Hixie's HTML does expose a subset of the standard DOM APIs, as well as some custom convenience methods https://github.com/whatwg/wattsi/blob/master/src/html/dom.pas","msgtype":"m.text"},"ts":1454607546000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"bterlson: and as far as the \"10s build\" part, I would be surprised if you could end up finding something that would do anything faster than Hixie's parser can. In my environment, it takes less than 4s for it to process the entire 5.8MB HTML spec sourceーto parse it and run all the processing it does to generate the actual fully-formatted spec","msgtype":"m.text"},"ts":1454607720000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"*Hixie's HTML does *parser* expose a subset of the standard DOM APIs","msgtype":"m.text"},"ts":1454607767000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"oofs still off by one word there but you know what I mean","msgtype":"m.text"},"ts":1454607991000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I suspect BS build process is also much less involved than ecma262 so probably 10s is impossible :-P","msgtype":"m.text"},"ts":1454608371000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"bterlson: yeah I think I fear learning the details of the ecma262 spec :) The output on its own scares me enough already 😆","msgtype":"m.text"},"ts":1454608750000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but if by “BS build process” you mean Bikeshed: For the HTML spec we're not using Bikeshed but instead a custom tool that Hixie wrote that's better :)","msgtype":"m.text"},"ts":1454608858000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it's certainly faster","msgtype":"m.text"},"ts":1454608867000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Bikeshed would take about 80s at least to process the same source","msgtype":"m.text"},"ts":1454608923000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"*fear learning the details of the ecma262 spec *build*","msgtype":"m.text"},"ts":1454608980000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"look on the bright side, at least you don't have to author these things in LaTeX or anything","msgtype":"m.text"},"ts":1454609106000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"how the dfn are defined in the spec, i mean as to add a id https://www.w3.org/Bugs/Public/show_bug.cgi?id=27503 should it not be <dfn data-x=\"origin-opaque-identifier\"> ?","msgtype":"m.text"},"ts":1454610493000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"ritsyy: that sounds about right","msgtype":"m.text"},"ts":1454610573000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: okay actually i got confused with the concept-origin , you mentioned in the comment","msgtype":"m.text"},"ts":1454610622000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"ritsyy: oh. Well, we usually start IDs for things like that with a \"concept-\" prefix, so yeah, maybe include that.","msgtype":"m.text"},"ts":1454610642000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: okay could you explain a bit, i mean why \"concept-\" is used","msgtype":"m.text"},"ts":1454610707000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"ritsyy: it's not followed everywhere, but it seems like the idea is to use \"concept-\" for things that are conceptual, \"dom-\" for APIs, and there are a few others... I think there was a document on the wiki somewhere...","msgtype":"m.text"},"ts":1454610748000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: oh okay, thanks got your point","msgtype":"m.text"},"ts":1454610832000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"ritsyy: here is the list https://wiki.whatwg.org/wiki/Specs/howto#Definitions we should maybe put that in the readme or something...","msgtype":"m.text"},"ts":1454610934000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah mentioning some heading for these points and their wiki links would be helpful in the readme","msgtype":"m.text"},"ts":1454611054000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"MikeSmith: is this the wattsi tool that you're using?","msgtype":"m.text"},"ts":1454617480000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"MikeSmith: you must not have too much generation going from source doc --> output doc I guess?","msgtype":"m.text"},"ts":1454617511000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"MikeSmith: just curious how it's so fast :-P","msgtype":"m.text"},"ts":1454617520000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"bterlson: there's a lot of generation...","msgtype":"m.text"},"ts":1454617926000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"bterlson: it's an AOT language I guess","msgtype":"m.text"},"ts":1454617937000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and an optimized DOM instead of a general purpose one, I presume","msgtype":"m.text"},"ts":1454617962000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"philipj: in https://github.com/whatwg/html-build/pull/75, what do you mean about those being removed? Is that bad? Or is it more, they should never have been linked in the first place?","msgtype":"m.text"},"ts":1454617981000,"senderName":"Domenic","senderId":"Domenic@irc"}
]