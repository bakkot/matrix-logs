[
{"content":{"body":"HTML forms should support more HTTP methods like PUT, and also support sending requests with a WWW-Authenticate header","msgtype":"m.text"},"ts":1493344228000,"senderName":"luxio","senderId":"luxio@irc"},
{"content":{"body":"Is there a reason these aren't implemented?","msgtype":"m.text"},"ts":1493344240000,"senderName":"luxio","senderId":"luxio@irc"},
{"content":{"body":"s/WWW-Authenticate/Authorization","msgtype":"m.text"},"ts":1493344395000,"senderName":"luxio","senderId":"luxio@irc"},
{"content":{"body":"Domenic: only indexed properties needed special considerations; bz suggested this setup","msgtype":"m.text"},"ts":1493350474000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"luxio: not something that enough sites would use and quite complex to add","msgtype":"m.text"},"ts":1493350520000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Not enough sites use authentication?","msgtype":"m.text"},"ts":1493351041000,"senderName":"luxio","senderId":"luxio@irc"},
{"content":{"body":"Login is done with POST, and it definitely shouldn't - that's not what the POST method is for.","msgtype":"m.text"},"ts":1493351051000,"senderName":"luxio","senderId":"luxio@irc"},
{"content":{"body":"annevk: I guess I don't remember what's different between indexed and named. And I vaguely remember the idea being that Window was ordinary (no exotic methods needed).","msgtype":"m.text"},"ts":1493351137000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: indexed you need to do the array index dance for; and yeah, we lost ordinary","msgtype":"m.text"},"ts":1493351281000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: we could move it if there's demand","msgtype":"m.text"},"ts":1493351302000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"luxio: not what I said","msgtype":"m.text"},"ts":1493351325000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Perhaps I'm not understanding then - what did you mean to say?","msgtype":"m.text"},"ts":1493351368000,"senderName":"luxio","senderId":"luxio@irc"},
{"content":{"body":"Kind of doubt it matters, but Chrome people were fixing related code and it felt strange to point them to different spec sections for named vs. indexed.","msgtype":"m.text"},"ts":1493351376000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"luxio: I meant what I said; you generalized from HTTP auth to auth in general","msgtype":"m.text"},"ts":1493352148000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah I'm saying sites should use HTTP auth, but they're not able to do that with forms","msgtype":"m.text"},"ts":1493352221000,"senderName":"luxio","senderId":"luxio@irc"},
{"content":{"body":"\"not what POST is for\" sounds like you're interpreting the original concept of HTTP requests, which have very little relevance today","msgtype":"m.text"},"ts":1493352224000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: does HTTP not have standards anymore?","msgtype":"m.text"},"ts":1493352240000,"senderName":"luxio","senderId":"luxio@irc"},
{"content":{"body":"Why'd they lose relevance?","msgtype":"m.text"},"ts":1493352271000,"senderName":"luxio","senderId":"luxio@irc"},
{"content":{"body":"\"that's not what the founding fathers intended\" reasoning doesn't go very far","msgtype":"m.text"},"ts":1493352292000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"ignore the first question, is strawman","msgtype":"m.text"},"ts":1493352353000,"senderName":"luxio","senderId":"luxio@irc"},
{"content":{"body":"but why'd they change? makes more sense to have those different methods","msgtype":"m.text"},"ts":1493352361000,"senderName":"luxio","senderId":"luxio@irc"},
{"content":{"body":"instead of just clumping them all together into POST","msgtype":"m.text"},"ts":1493352368000,"senderName":"luxio","senderId":"luxio@irc"},
{"content":{"body":"things change based on how things are actually used, and how they develop over time, and the main things POST means is \"don't blindly send this request a second time because it may have side-effects\" and \"this has a request body\"","msgtype":"m.text"},"ts":1493352434000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"they're clumped together because POST is general purpose, so the protocol doesn't *need* to know special things about something being an authentication request or anything else","msgtype":"m.text"},"ts":1493352538000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"similarly you almost never see DELETE used in good protocols, since there's no reason at all for HTTP to know that something is abstractly deleting something ... it's just transporting a request","msgtype":"m.text"},"ts":1493352604000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I disagree, TCP is transporting a request. HTTP is designed to have semantics.","msgtype":"m.text"},"ts":1493352665000,"senderName":"not-an-aardvark","senderId":"not-an-aardvark@irc"},
{"content":{"body":"Generally I would agree that using POST for a bunch of things is probably fine, but I wouldn't say there's \"no reason at all for HTTP to know that something is abstractly deleting something\". The information seems like it would be useful for caches, etc.","msgtype":"m.text"},"ts":1493352842000,"senderName":"not-an-aardvark","senderId":"not-an-aardvark@irc"},
{"content":{"body":"there's no benefit for HTTP knowing that something is a deletion (beyond telling clients/proxies not to repeat the request, which you get from POST), it's purely a holdover from before the usage of the protocol was well established","msgtype":"m.text"},"ts":1493352862000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"But DELETE is idempotent and POST is not. Clients and proxies should repeat DELETE requests, but not POST requests.","msgtype":"m.text"},"ts":1493352914000,"senderName":"not-an-aardvark","senderId":"not-an-aardvark@irc"},
{"content":{"body":"DELETE is definitely not idempotent: if you create a file, send a DELETE request, then create a file in its place, sending that DELETE again is destroying information","msgtype":"m.text"},"ts":1493352943000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"That would apply to PUT too -- if you send a PUT, and then send another request modifying the resource, and then resend the original PUT, you're destroying information.","msgtype":"m.text"},"ts":1493353104000,"senderName":"not-an-aardvark","senderId":"not-an-aardvark@irc"},
{"content":{"body":"(and more generally, filesystem-like things are much more complex than HTTP methods can represent--there's no RENAME which is just as destructive as DELETE if it overwrites a file)","msgtype":"m.text"},"ts":1493353105000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"that's the point, the notion of having a bunch of methods to let HTTP know all about your filesystem-like protocol you're putting on top of it doesn't work at all","msgtype":"m.text"},"ts":1493353138000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Idempotence doesn't apply anyway if someone is modifying the resource between your two requests.","msgtype":"m.text"},"ts":1493353176000,"senderName":"not-an-aardvark","senderId":"not-an-aardvark@irc"},
{"content":{"body":"re. DELETE being idempotent, see https://tools.ietf.org/html/rfc7231#section-4.2.2","msgtype":"m.text"},"ts":1493353185000,"senderName":"not-an-aardvark","senderId":"not-an-aardvark@irc"},
{"content":{"body":"Anyway I think this discussion is off-topic for this channel so maybe we should take it elsewhere","msgtype":"m.text"},"ts":1493353221000,"senderName":"not-an-aardvark","senderId":"not-an-aardvark@irc"},
{"content":{"body":"someone can always modify the resource between requests if you send a request twice.","msgtype":"m.text"},"ts":1493353222000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Domenic: going to land SAB tests now, will probably land the PR and post later today","msgtype":"m.text"},"ts":1493354418000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"All done","msgtype":"m.text"},"ts":1493374543000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm, at some point Chrome starts returning null from the window getter","msgtype":"m.text"},"ts":1493389214000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Cannot invoke open() on null","msgtype":"m.text"},"ts":1493389225000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"*Gossip Girl voice*: spotted, tobie created a local branch on web-platform-tests","msgtype":"m.text"},"ts":1493389712000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"What did I do?","msgtype":"m.text"},"ts":1493389751000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I recall you saying you always create remote branches to emulate the experience of new contributors","msgtype":"m.text"},"ts":1493389850000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, used the Web interface to avoid a massive git fetch/rebase","msgtype":"m.text"},"ts":1493389931000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: iirc, GH used to let you choose to which repo you'd branch.","msgtype":"m.text"},"ts":1493390208000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: seems it no longer the case, so I got lazy. :)","msgtype":"m.text"},"ts":1493390254000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"It'll be remembered for future arguments ðŸ˜›","msgtype":"m.text"},"ts":1493390696000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that I get lazy? ;)","msgtype":"m.text"},"ts":1493391149000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"JakeA: igrigorik: Hey. Got a question about preload. As of this week, it's in use on Wikipedia for a simple use case (Main site logo). I'd like to use it more but wonder whether my use case is (or should be) supported.","msgtype":"m.text"},"ts":1493409867000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"We've got a small async script that bootstraps the environment. This url is unversioned and stuck in HTML static cache. That script response than is purged whenever we deploy new code and contains the versioned/immutable urls. I can't add preload for the versioned urls to the HTML response, but I could add them to the async script. I wonder if that's","msgtype":"m.text"},"ts":1493409933000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"supported: Link preload headers on javascript responses.","msgtype":"m.text"},"ts":1493409934000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"It would mean the browser can discover the url much earlier (not after the js download finishes, and executes async/deferred)","msgtype":"m.text"},"ts":1493409953000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"But I get the impression it's HTML only.","msgtype":"m.text"},"ts":1493409963000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"or rather, \"page view\" only, the same way Link-stylesheet works for image files in Firefox, but obviously only when you're viewing it as its own tab.","msgtype":"m.text"},"ts":1493409989000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Hmm service workers don't control third-party iframes, right?","msgtype":"m.text"},"ts":1493413473000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Otherwise I was hoping to use one to block the tracker requests from Disqus comments (see http://donw.io/post/github-comments/)","msgtype":"m.text"},"ts":1493413486000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: A service worker on yourself (first party)? No, they don't - they'd have to be installed on the third party in the first place to control the iframe.","msgtype":"m.text"},"ts":1493413619000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yeah, so sad","msgtype":"m.text"},"ts":1493414038000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It seems like it would be a pretty major security violation to let your service worker control a third-party domain's loading. ^_^","msgtype":"m.text"},"ts":1493414089000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"True","msgtype":"m.text"},"ts":1493414111000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"someone did a thing about trying to use service workers to sanitize requests from a sandbox recently... SW isn't really designed for it","msgtype":"m.text"},"ts":1493414167000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: this thread: https://twitter.com/freddyb/status/841041787120693251","msgtype":"m.text"},"ts":1493414371000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"TabAtkins: Although, iirc, service workers do get to intercept/cache script/css/img/fetch requests from the page right? So it doesn't seem *that* weird if iframes would be allowed, too. It'd have to be opaque though.","msgtype":"m.text"},"ts":1493422197000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: Now that we're talking about requests the iframe'd page is making, not the iframe request itself.","msgtype":"m.text"},"ts":1493422362000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"*Note","msgtype":"m.text"},"ts":1493422370000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Ah, I see. Yeah, makes sense.","msgtype":"m.text"},"ts":1493422386000,"senderName":"Krinkle","senderId":"Krinkle@irc"}
]