[
{"content":{"body":"JakeA: it was awesome","msgtype":"m.text"},"ts":1484092926000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"Hello fetch developers","msgtype":"m.text"},"ts":1484101137000,"senderName":"Ascend","senderId":"Ascend@irc"},
{"content":{"body":"Does anybody have an idea when the fetch standard will be set in stone, so that we can use it in production?","msgtype":"m.text"},"ts":1484101153000,"senderName":"Ascend","senderId":"Ascend@irc"},
{"content":{"body":"Ascend: http://caniuse.com/#search=fetch","msgtype":"m.text"},"ts":1484101609000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"Ascend: set in stone, never. https://wiki.whatwg.org/wiki/FAQ#What_does_.22Living_Standard.22_mean.3F use in production, see http://caniuse.com/#search=fetch","msgtype":"m.text"},"ts":1484101861000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"For anyone with an html5.org ssh account, DreamHost moved servers, so you might get the \"this is wrong\" message...","msgtype":"m.text"},"ts":1484116134000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: btw, I'm not sure I'm the best person to review your service worker / fetch test","msgtype":"m.text"},"ts":1484123036000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: maybe jungkees could do it or someone implementing?","msgtype":"m.text"},"ts":1484123059000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: ah, Mek?","msgtype":"m.text"},"ts":1484123073000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the PR auto-pinged mek & ehsan","msgtype":"m.text"},"ts":1484123712000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: good times","msgtype":"m.text"},"ts":1484123723000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(because they're in the owners file)","msgtype":"m.text"},"ts":1484123745000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: FWIW, the new WHATWG process is such that we land the spec PR after the test PR lands","msgtype":"m.text"},"ts":1484123762000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I should probably get foolip_sheriff to document that somewhere","msgtype":"m.text"},"ts":1484123783000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: which PR?","msgtype":"m.text"},"ts":1484123888000,"senderName":"ehsan","senderId":"ehsan@irc"},
{"content":{"body":"annevk: gotcha. I'll be proactive about getting someone to review the test","msgtype":"m.text"},"ts":1484123906000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"ehsan: https://github.com/w3c/web-platform-tests/pull/4518","msgtype":"m.text"},"ts":1484124125000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it's unlikely I'll get to that soon :/","msgtype":"m.text"},"ts":1484126656000,"senderName":"ehsan","senderId":"ehsan@irc"},
{"content":{"body":"annevk, JakeA: https://github.com/whatwg/html/blob/master/CONTRIBUTING.md#tests and https://github.com/whatwg/html/blob/master/TEAM.md#handling-pull-requests is the current documentation, do we need more?","msgtype":"m.text"},"ts":1484129942000,"senderName":"foolip_sheriff","senderId":"foolip_sheriff@irc"},
{"content":{"body":"foolip_sheriff: one thing we need to do somehow is elevate the requirements to whatwg/*","msgtype":"m.text"},"ts":1484130143000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip_sheriff: perhaps by moving this kind of documentation to whatwg/meta? Although I guess that would make it a little more annoying to get to","msgtype":"m.text"},"ts":1484130175000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: do you think we can declare the experiment a success and \"encourage\" tests everywhere?","msgtype":"m.text"},"ts":1484131289000,"senderName":"foolip_sheriff","senderId":"foolip_sheriff@irc"},
{"content":{"body":"foolip_sheriff: yeah","msgtype":"m.text"},"ts":1484131424000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'm writing a short comment on https://github.com/whatwg/html/issues/1849 to ask how everyone is finding it.","msgtype":"m.text"},"ts":1484131455000,"senderName":"foolip_sheriff","senderId":"foolip_sheriff@irc"},
{"content":{"body":"foolip_sheriff: in particular it would be good if it was part of the PR guidelines","msgtype":"m.text"},"ts":1484131459000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://github.com/w3c/dom/issues o_O","msgtype":"m.text"},"ts":1484131499000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's really hard to sympathize with what's going on there","msgtype":"m.text"},"ts":1484131518000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://github.com/whatwg/html/issues/1849#issuecomment-271840126","msgtype":"m.text"},"ts":1484132433000,"senderName":"foolip_sheriff","senderId":"foolip_sheriff@irc"},
{"content":{"body":"annevk: wait, they didn't start from an up-to-date copy of the spec?","msgtype":"m.text"},"ts":1484132467000,"senderName":"foolip_sheriff","senderId":"foolip_sheriff@irc"},
{"content":{"body":"foolip_sheriff: I don't even, somewhat surprised to see rbyers cheering them on, despite it failing massively last time around","msgtype":"m.text"},"ts":1484132535000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: cheering, or just being polite?","msgtype":"m.text"},"ts":1484132572000,"senderName":"foolip_sheriff","senderId":"foolip_sheriff@irc"},
{"content":{"body":"foolip_sheriff: https://github.com/w3c/dom/issues/13","msgtype":"m.text"},"ts":1484132615000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the responsible party there seems well-intentioned and acting in good faith to carry out the task as it’s been explained to them","msgtype":"m.text"},"ts":1484133890000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that said, I guess it’s not super encouraging that for something which intends to be seen as a referencable spec for the DOM, the person working on it does not have an accurate understanding of the implementation status of Shadow DOM, nor apparently understand how in general to get an accurate understanding of the implementation status for a feature","msgtype":"m.text"},"ts":1484133953000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"regardless this reminds me that we need to come up with better guidelines for editors, whatever they’re working on","msgtype":"m.text"},"ts":1484134073000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"regardless of what they are working on there are some basic things to know about so they at least don’t end up costing other people time to explain to them","msgtype":"m.text"},"ts":1484134162000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"like, our editor guidelines should say, Do not assume any site anywhere has accurate information about the implementation status of something. If you want to determine implementation status, find test or make test and run them yourself in different UAs to see what the results are.","msgtype":"m.text"},"ts":1484134256000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"etc.","msgtype":"m.text"},"ts":1484134262000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Annevk: I wouldn't say I'm cheering them on.  I started by trying to fix the references to W3C Dom in PE: https://github.com/w3c/pointerevents/issues/160","msgtype":"m.text"},"ts":1484137412000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"rbyers: apologies, should have gotten lunch first","msgtype":"m.text"},"ts":1484137645000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":".. My \"always up to date\" requirement was something I assumed would never happen.","msgtype":"m.text"},"ts":1484137661000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"But after reading slightlyoff@'s take on this, I'm trying hard not to be hostile about it.  It sucks and I'm not going to waste any time reading/PRing it.","msgtype":"m.text"},"ts":1484137818000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"But I'm not going to stand in their way or refuse to file bugs when asked...","msgtype":"m.text"},"ts":1484137899000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"Sounds interesting, but prolly internal?","msgtype":"m.text"},"ts":1484138325000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip_sheriff: FWIW, Fetch and URL have also used the \"require tests\" policy and it's been working out well, though with Fetch it's trickier sometimes to get good tests (new features)","msgtype":"m.text"},"ts":1484138757000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: awesome, looks like there's a future in this tests thing. new features are indeed tricky, whatever you learn from Fetch would be great to document somehow. I suppose in some cases tests are punted?","msgtype":"m.text"},"ts":1484138832000,"senderName":"foolip_sheriff","senderId":"foolip_sheriff@irc"},
{"content":{"body":"foolip_sheriff: what happens is that we end up with one or a couple trivial tests","msgtype":"m.text"},"ts":1484138865000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip_sheriff: see e.g. https://github.com/whatwg/fetch/pull/425 which really needs hundreds of tests","msgtype":"m.text"},"ts":1484138887000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: is anyone attempting to track what's still missing tests?","msgtype":"m.text"},"ts":1484138907000,"senderName":"foolip_sheriff","senderId":"foolip_sheriff@irc"},
{"content":{"body":"foolip_sheriff: but hopefully those will be written during implementation","msgtype":"m.text"},"ts":1484138910000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip_sheriff: nope","msgtype":"m.text"},"ts":1484138916000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Although it's not at all obvious that trying to be pedantic about maintaining such a \"missing tests\" list would be the best use of time, it's easy to see it become just a huge list of TODOs, and someone else just starts from scratch ignoring it.","msgtype":"m.text"},"ts":1484138962000,"senderName":"foolip_sheriff","senderId":"foolip_sheriff@irc"},
{"content":{"body":"foolip_sheriff: also, what we found with URL is that having an implementation modified per spec changes and then run the tests is kinda vital to ensuring the new tests and spec changes are good","msgtype":"m.text"},"ts":1484138975000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip_sheriff: it's hard to tell from just new tests and new spec text alone without having an impl","msgtype":"m.text"},"ts":1484138996000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, I think this all works best with small iterative changes a la HTML or URL, I guess for new things one could leave it just untested until there is an implementation, and then do one big pass of what test coverage is still there. Although it should be a good citizen implementer doing that.","msgtype":"m.text"},"ts":1484139099000,"senderName":"foolip_sheriff","senderId":"foolip_sheriff@irc"},
{"content":{"body":"foolip_sheriff: as for \"missing tests\", couldn't we use code coverage tooling for that?","msgtype":"m.text"},"ts":1484139235000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip_sheriff: with URL it wasn't new things, it was just existing algorithms that were wrong in some way, but the newly written algorithm wasn't necessarily correct either","msgtype":"m.text"},"ts":1484139313000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: probably for one-off checks that would work, but unless the implementation has the spec algorithms all in one place it might be tricky to see what steps have missing error handling tests and so on","msgtype":"m.text"},"ts":1484139323000,"senderName":"foolip_sheriff","senderId":"foolip_sheriff@irc"},
{"content":{"body":"maybe nobody cares that I'm sheriff today :)","msgtype":"m.text"},"ts":1484139354000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"(it's for #chromium)","msgtype":"m.text"},"ts":1484139366000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: I don't know, it was fun to imagine you in a nice hat with a shiny badge","msgtype":"m.text"},"ts":1484140149000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: https://sheriff-o-matic.appspot.com/chromium does have a shiny favicon.ico","msgtype":"m.text"},"ts":1484140183000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: And a very boring acces denied page :)","msgtype":"m.text"},"ts":1484140341000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: oh. well the page itself is boring too.","msgtype":"m.text"},"ts":1484140358000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"If I have promise_test(() => { fetch().then(...) }), why does adding a return statement before fetch() help?","msgtype":"m.text"},"ts":1484142490000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Because of the { and } it seems?","msgtype":"m.text"},"ts":1484142544000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess I still don't understand how things work","msgtype":"m.text"},"ts":1484142554000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah because of the { and }","msgtype":"m.text"},"ts":1484142665000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: () => blah(); is shorthand for () => { return blah(); }","msgtype":"m.text"},"ts":1484142767000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I think I ran into this at least once or twice before, things just no longer stick in memory","msgtype":"m.text"},"ts":1484142882000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"welcome to getting older","msgtype":"m.text"},"ts":1484142905000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"\"what did I come into this room for?\", \"where are my pants?\", \"whose garden is this?\" all things to look forward to","msgtype":"m.text"},"ts":1484142994000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk being old is terrifying","msgtype":"m.text"},"ts":1484143017000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Soon gsnedders will be old and then I'll be the one in the corner sobbing","msgtype":"m.text"},"ts":1484143034000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"gsnedders is still a teen, right?","msgtype":"m.text"},"ts":1484143046000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, I'm twenty-four-teen","msgtype":"m.text"},"ts":1484154927000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1484154970000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Do we have other restriction models? So far I can think of iframe sandboxing, allow* attributes/feature policy, and secure contexts. https://github.com/whatwg/html/issues/2259#issuecomment-271931992","msgtype":"m.text"},"ts":1484155342000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: CSP, x-iframe-options","msgtype":"m.text"},"ts":1484155621000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Ooh, good ones","msgtype":"m.text"},"ts":1484155636000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: rel=noopener","msgtype":"m.text"},"ts":1484155645000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Everyone loves rel=noopener","msgtype":"m.text"},"ts":1484155669000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I feel like this deserves some kind of reference page or blog post or something.","msgtype":"m.text"},"ts":1484155869000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I actually realized I don't have a great sense of how CSP works... I just know that if I want to productionize a website I should try to slap as tight of a CSP policy on it as possible.","msgtype":"m.text"},"ts":1484155895000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"CSPs break bookmarklets and that makes me super sad. I get why, but still. :'-(","msgtype":"m.text"},"ts":1484155968000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: same-origin policy?","msgtype":"m.text"},"ts":1484157008000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: even if it's not getting fixed, I'm curious to dig for rationale","msgtype":"m.text"},"ts":1484157543000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: having more control over the server in WPT would be great though","msgtype":"m.text"},"ts":1484157561000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: and I'd be happy to see a rewrite that also allows early responses","msgtype":"m.text"},"ts":1484157575000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: essentially, they use RFC2822-like parsing for it","msgtype":"m.text"},"ts":1484157896000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: which I think matches RFC 2616?","msgtype":"m.text"},"ts":1484157941000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: it doesn't afaict","msgtype":"m.text"},"ts":1484158019000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: only HT, CR, LF, and SP count as whitespace in HTTP","msgtype":"m.text"},"ts":1484158033000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it says they do, but then the ABNF disagrees, I think?","msgtype":"m.text"},"ts":1484158082000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: no","msgtype":"m.text"},"ts":1484158088000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"HTTP header fields […] follow the same generic format as that given in Section 3.1 of RFC 822\"","msgtype":"m.text"},"ts":1484158116000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: oh, you meant it the other way around","msgtype":"m.text"},"ts":1484158152000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: if you have a chance, could you have a look at https://github.com/w3c/webappsec-referrer-policy/issues/89 and the PR I linked to whether this makes sense?","msgtype":"m.text"},"ts":1484158159000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"annevk: yeah","msgtype":"m.text"},"ts":1484158179000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"\"Request (section 5) and Response (section 6) messages use the generic message format of RFC 822\"","msgtype":"m.text"},"ts":1484158191000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: I don't see anything in 822 that is special for 0B and 0C though","msgtype":"m.text"},"ts":1484158226000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: uses the exact same productions afaict","msgtype":"m.text"},"ts":1484158280000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"FWIW it might be possible to rewrite just the header parsing in wptserve by making a class with the same interface as mimetools.Message","msgtype":"m.text"},"ts":1484158323000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yeah, I think it is","msgtype":"m.text"},"ts":1484158331000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"It's just defined as a class attribute so it's swappable without replacing the entire server class","msgtype":"m.text"},"ts":1484158369000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(OTOH that won't give you early responses or so)","msgtype":"m.text"},"ts":1484158383000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I think we probably want to do something that works for HTTP/2 well at the same time","msgtype":"m.text"},"ts":1484158413000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Well","msgtype":"m.text"},"ts":1484158442000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jochen__: it seems that doesn't quite address bz's comment","msgtype":"m.text"},"ts":1484158445000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jochen__: if presentation attributes turn into some kind of CSS declaration block too that is","msgtype":"m.text"},"ts":1484158463000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think that http/2 might end up using hyper or something to provide the protocol implementation","msgtype":"m.text"},"ts":1484158466000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: right","msgtype":"m.text"},"ts":1484158474000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(the python thing, not the similarly named rust thing)","msgtype":"m.text"},"ts":1484158477000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"So I don't see how that would affect the HTTP/1 case","msgtype":"m.text"},"ts":1484158494000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: https://github.com/python/cpython/blob/2.7/Lib/email/feedparser.py is the thing used ultimately","msgtype":"m.text"},"ts":1484158522000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jochen__: my advice is again to ask the CSS WG how the layering works, since I think there's not enough terminology/layering to describe what we need","msgtype":"m.text"},"ts":1484158524000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: we want the same API to get responses, no?","msgtype":"m.text"},"ts":1484158599000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: maybe the rather sloppy lastvalue = [line[i+1:].lstrip()] is the culprit?","msgtype":"m.text"},"ts":1484158599000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: oh, probably","msgtype":"m.text"},"ts":1484158608000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Yeah, that's a reasonable point. I haven't looked into the http2 case enough to figure out if it will require breaking api changes though","msgtype":"m.text"},"ts":1484158734000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"For the internal API exposed to .py handlers I mean","msgtype":"m.text"},"ts":1484158751000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: there's also a small desire to be able to transmit HTTP/1.0 responses, but I think that's possible right?","msgtype":"m.text"},"ts":1484158771000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: some stream stuff should fail on HTTP/1.0, but not HTTP/1.1","msgtype":"m.text"},"ts":1484158789000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm, I'm not actually sure that you can do that easilly at the moment because it's baked into the server that it's a HTTP 1.1 server. Although you can certainly write a raw response, which is probably fine for the small number of cases that require it","msgtype":"m.text"},"ts":1484158872000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Yeah, I think that's all we need","msgtype":"m.text"},"ts":1484158943000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"equally the 0.9 response case","msgtype":"m.text"},"ts":1484158960000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: HTTP/2 adds the ability to do duplex stuff so we need API extensions but they should be optional for handlers","msgtype":"m.text"},"ts":1484158999000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: e.g., so they can push resources","msgtype":"m.text"},"ts":1484159017000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: we probably just *optionally* let the handler have a new arg, and handle the case when we get a TypeError throwing it?","msgtype":"m.text"},"ts":1484159185000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: I'm trying that since a few months, and so did Boris, but we haven't gotten any answer :-/","msgtype":"m.text"},"ts":1484159206000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"gsnedders: Yeah I'm sure it's possible to design a thing","msgtype":"m.text"},"ts":1484159529000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"is so sleep deprived, did not sleep well last night ;_;","msgtype":"m.emote"},"ts":1484159740000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Is it a CSS meeting or something?","msgtype":"m.text"},"ts":1484159887000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1484160056000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Oh dang, new CSSOM became mutable again","msgtype":"m.text"},"ts":1484160092000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"is going through his red-ink covered copy of the wpt docs","msgtype":"m.emote"},"ts":1484160097000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jochen__: no fast access to TabAtkins for you?","msgtype":"m.text"},"ts":1484161554000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jochen__: did you file an issue?","msgtype":"m.text"},"ts":1484161567000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Wait what's up?","msgtype":"m.text"},"ts":1484162705000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yeah, I haven't seen this particular issue. :/","msgtype":"m.text"},"ts":1484162785000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: Yeah, mutable but not live.","msgtype":"m.text"},"ts":1484162801000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Was an efficiency issue - you can now create a complex object (like a transform list) and just tweak it and repeatedly re-set it, rather than having to constrantly create new objects.","msgtype":"m.text"},"ts":1484162834000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: so Foo: b\\x0bar should result in a Foo header with a value of b\\x0bar right?","msgtype":"m.text"},"ts":1484164604000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Which doesn't work per RFC 822 and its sucessors because a field value cannot contain \\x0b","msgtype":"m.text"},"ts":1484164789000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: that already works","msgtype":"m.text"},"ts":1484164907000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: leading or trailing is the issue","msgtype":"m.text"},"ts":1484164928000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"does it?","msgtype":"m.text"},"ts":1484164954000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: see the test I wrote","msgtype":"m.text"},"ts":1484164968000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"then WTF am I seeing happen","msgtype":"m.text"},"ts":1484164969000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Sleep deprivation? 😜","msgtype":"m.text"},"ts":1484165001000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1484165021000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I might be missing something though, more time tomorrow","msgtype":"m.text"},"ts":1484165032000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Trying this in the Python command-line has this work fine","msgtype":"m.text"},"ts":1484165064000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"oh wait","msgtype":"m.text"},"ts":1484165153000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I'm testing the wrong thing","msgtype":"m.text"},"ts":1484165160000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: okay, so this is fixed in Py3","msgtype":"m.text"},"ts":1484165923000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"given, e..g, Access-Control-Allow-Origin, we could try making this out to be a security issue","msgtype":"m.text"},"ts":1484166171000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"MikeSmith: There's no body. bug? doesn't happen in firefox in live dom viewer. https://checker.html5.org/parsetree/?parser=html5&content=<%21doctype+html><template><plaintext>a<%2Ftemplate>b&submit=Print+Tree","msgtype":"m.text"},"ts":1484174801000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Domenic, annevk: in the infra standard, would it make sense to have a dfn for a map entry, list item, etc.?","msgtype":"m.text"},"ts":1484176052000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: yeah it probably would","msgtype":"m.text"},"ts":1484176066000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: for lists, sets, queues and stacks, it's clearly \"item\", it's less consistant for maps which use: \"key/value pair\",  \"entry\", and \"item\".","msgtype":"m.text"},"ts":1484177866000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Good bug report :). I guess I would pick entry? \"Each key/value pair is called an entry\"?","msgtype":"m.text"},"ts":1484177925000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: likewise","msgtype":"m.text"},"ts":1484177953000,"senderName":"tobie","senderId":"tobie@irc"}
]