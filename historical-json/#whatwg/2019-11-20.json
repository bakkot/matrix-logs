[
{"content":{"body":"Does anyone know which task source is used when queuing a task here? https://html.spec.whatwg.org/multipage/parsing.html#the-end:event-load","msgtype":"m.text"},"ts":1574211642000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"jugglinmike: > Except where otherwise specified, the task source for the tasks mentioned in this section is the DOM manipulation task source.","msgtype":"m.text"},"ts":1574212273000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"that's at the bottom of the section","msgtype":"m.text"},"ts":1574212284000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"So it is. Thanks, TimothyGu!","msgtype":"m.text"},"ts":1574212351000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"annevk: Regarding lazy loading spec, would you like the PR to handle intersection observer more rigorously, or is what you mentioned non-blocker?","msgtype":"m.text"},"ts":1574225455000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"I am unsure what IO primitives we can use to make the section you outlined more-clear, but I could take a look..","msgtype":"m.text"},"ts":1574225525000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: yeah, either more rigorous or some wording that doesn’t result in something weird","msgtype":"m.text"},"ts":1574230014000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: does Bikeshed not support using the caniuse=\"\" attribute to link to Can I Use IDs for features where Can I Use gets the data from the browser-compat repo?","msgtype":"m.text"},"ts":1574237372000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: Can I Use has https://caniuse.com/#feat=mdn-api_abstractrange but if I try caniuse=mdn-api_abstractrange with the DOM spec, I get \"FATAL ERROR: Unrecognized Can I Use feature ID: mdn-api_abstractrange\"","msgtype":"m.text"},"ts":1574237460000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: does Bikeshed have a cached copy perhaps?","msgtype":"m.text"},"ts":1574238606000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: nah, after poking around a bit, I think the limitation is due to Can I Use upstream. It doesn’t expose JSON data for the features where the data comes from the MDN browser-compat repo","msgtype":"m.text"},"ts":1574241668000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"as far as I can see, I think Bikeshed just copies the Can I Use JSON files from https://github.com/Fyrd/caniuse/tree/master/features-json","msgtype":"m.text"},"ts":1574241715000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"..and the only files there are for features where the data is maintained within Can I Use itself, but not for the (many other) features that only have data in MDN browser-compat","msgtype":"m.text"},"ts":1574241786000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"What capabilities does Native File System give beyond <input type=fiile webkitdirectory>? Is it basically writing?","msgtype":"m.text"},"ts":1574260597000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: ^","msgtype":"m.text"},"ts":1574260606000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: did MDN ever get added to bikeshed directly?","msgtype":"m.text"},"ts":1574260675000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: nope, not yet","msgtype":"m.text"},"ts":1574260693000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"domfarolino: heya, we discussed loading=lazy a bit more and there's a couple things we might have to tweak further. I suspect I'll look into them tomorrow as well. 1) Have the specification advice developers to set width/height (and also in CSS as appropriate I suppose) to the extent it doesn't already. 2) Ensure the specification uses a replaced element from the get go and not an inline box. 3) In the intersection","msgtype":"m.text"},"ts":1574270497000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"observer integration we might also wanna hint at having margins there to start loading a bit before the image is visible. 4) We need to check that if you change the base URL the correct image is still loaded. That's basically a worse variant of the referrer policy problem. And also test this.","msgtype":"m.text"},"ts":1574270497000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ecobos: ^","msgtype":"m.text"},"ts":1574270509000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I don’t think I understand (2). For (1) & (3), you’re saying this would be a note or something non-normative? (4) SGTM","msgtype":"m.text"},"ts":1574271922000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Yes, for 2, there’s some text somewhere that says how img is rendered. It should render the same as an img waiting on a server. I was not sure if we covered that.","msgtype":"m.text"},"ts":1574272057000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Woohoo, same site all fixed up now. https://lists.w3.org/Archives/Public/public-webappsec/2019Nov/0004.html","msgtype":"m.text"},"ts":1574272307000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Nice!","msgtype":"m.text"},"ts":1574272369000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"annevk: OK (feel free to mention that on the PR thread too). I'll add (4) to the list of things-to-test for this.","msgtype":"m.text"},"ts":1574272389000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Intersection Observer things worry me a bit just because I don't really know much at all about the spec, but I'll think about it more","msgtype":"m.text"},"ts":1574272433000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"I think IO is not so bad. Just gotta do a small refactoring PR to the IO spec to make its algorithm a bit more callable.","msgtype":"m.text"},"ts":1574272477000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Took me a second to realize you were not talking about I/O","msgtype":"m.text"},"ts":1574272788000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah I actually didn't take a close look at \"compute the intersection\" before, but I think see now","msgtype":"m.text"},"ts":1574273438000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Lol the I/O algorithm","msgtype":"m.text"},"ts":1574273451000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Domenic: Hm just reading around randomly...should https://www.w3.org/TR/intersection-observer/#queue-an-intersection-observer-task specify a task source (probably DOM task source)?","msgtype":"m.text"},"ts":1574275118000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: yes. I wonder what task source implementations use.","msgtype":"m.text"},"ts":1574275836000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Also, avoid /TR, use https://w3c.github.io/IntersectionObserver/","msgtype":"m.text"},"ts":1574275908000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Thanks. I was surprised to find the GitHub repo didn't link to that","msgtype":"m.text"},"ts":1574276025000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Looks like Chrome uses its own IO task source https://cs.chromium.org/chromium/src/third_party/blink/public/platform/task_type.h?g=0&l=204, unsure about FF & friends","msgtype":"m.text"},"ts":1574276064000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"That's the most flexible so I'd lean toward speccing that","msgtype":"m.text"},"ts":1574276083000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Maybe there is some global declaration in the spec...","msgtype":"m.text"},"ts":1574276092000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(no, there is not.)","msgtype":"m.text"},"ts":1574276106000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ya lol I also couldn't find it..will file an issue","msgtype":"m.text"},"ts":1574276287000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Domenic: Also regarding the IO integration with lazy load..is it still weird that we'd be, in parallel, waiting for the \"compute the intersection\" algorithm to indicate an intersection? This kinda feels like it bypasses the convenience of just flat-out using an intersection observer in the lazy load PR","msgtype":"m.text"},"ts":1574276425000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Or is OK that we write it that way, because it's flexible enough for implementations to implement that behavior with an IO under-the-hood (what Chrome does IIRC)","msgtype":"m.text"},"ts":1574276499000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: hmm I hadn't considered that. I think chrishtr is concerned that we not cause synchronous layout janks, and so piggybacking on the asynchronous IO machinery seems better.","msgtype":"m.text"},"ts":1574276505000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"s/janks//","msgtype":"m.text"},"ts":1574276514000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Interesting, OK, SGTM","msgtype":"m.text"},"ts":1574276543000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Domenic: Am I crazy or do we not need to reference the \"compute the intersection\" algorithm at all? It seems that IO only uses it when computing the exact |intersectionRatio|.","msgtype":"m.text"},"ts":1574287763000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Haha wow maybe, let's see","msgtype":"m.text"},"ts":1574287776000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://w3c.github.io/IntersectionObserver/#update-intersection-observations-algo","msgtype":"m.text"},"ts":1574287789000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Otherwise, they compute |isIntersecting| by seeing if the targetRect and rect around the \"root\" intersect (these are both DOMRects from what I can tell)","msgtype":"m.text"},"ts":1574287807000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Fascinating","msgtype":"m.text"},"ts":1574287891000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So we just need the equivalent of \"Let isIntersecting be true if targetRect and rootBounds intersect or are edge-adjacent, even if the intersection has zero area (because rootBounds or targetRect have zero area); otherwise, let isIntersecting be false.\"","msgtype":"m.text"},"ts":1574287898000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Seems like it","msgtype":"m.text"},"ts":1574287908000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"I think we all kind of assumed there would be a formal definition for \"intersect\", and thus went looking for one and found \"compute the intersection\"","msgtype":"m.text"},"ts":1574287918000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'm not sure exactly what the right phrasing is for intersects the viewport then","msgtype":"m.text"},"ts":1574287990000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Well, shit, maybe it's https://html.spec.whatwg.org/#intersect-the-viewport","msgtype":"m.text"},"ts":1574288011000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"This whole exercise may have been an overzealous demand for rigor...","msgtype":"m.text"},"ts":1574288030000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"We should just copy what video does. (Probably abstract it out a bit?)","msgtype":"m.text"},"ts":1574288059000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"This must be frustrating","msgtype":"m.text"},"ts":1574288074000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oof no it's interesting I'm glad we took a closer look.","msgtype":"m.text"},"ts":1574288101000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Yeah using that dfn would probably make the most sense, seems that no dependency on IO would buy us any more than that I think?","msgtype":"m.text"},"ts":1574288148000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Even IO is a little hand-wavey when computing an intersection with the viewport I think; I'm not sure what \"the viewport's size\" is in https://w3c.github.io/IntersectionObserver/#intersectionobserver-root-intersection-rectangle (a DOMRect, since that's what getBounding[...] returns?)","msgtype":"m.text"},"ts":1574288299000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Hi Folks, I believe I've found an inconsistency in the implementation of some behavior in the fetch spec between chrome and firefox. Wondering if anyone has thoughts before I go and file bugs with the relevant parties.","msgtype":"m.text"},"ts":1574292369000,"senderName":"JonasNZ","senderId":"JonasNZ@irc"},
{"content":{"body":"The flow we're doing is roughly this","msgtype":"m.text"},"ts":1574292371000,"senderName":"JonasNZ","senderId":"JonasNZ@irc"},
{"content":{"body":"fetch -> POST example.com/path1 (with body = a FormData object)","msgtype":"m.text"},"ts":1574292373000,"senderName":"JonasNZ","senderId":"JonasNZ@irc"},
{"content":{"body":"  This causes the request to have \"Content-Type: multipart/form-data\"","msgtype":"m.text"},"ts":1574292375000,"senderName":"JonasNZ","senderId":"JonasNZ@irc"},
{"content":{"body":"  The post body is properly encoded.","msgtype":"m.text"},"ts":1574292377000,"senderName":"JonasNZ","senderId":"JonasNZ@irc"},
{"content":{"body":"  The response is a 302 to example.com/path2","msgtype":"m.text"},"ts":1574292379000,"senderName":"JonasNZ","senderId":"JonasNZ@irc"},
{"content":{"body":"# fetch then follows the redirect (specifically step 11 of https://fetch.spec.whatwg.org/#http-redirect-fetch)","msgtype":"m.text"},"ts":1574292381000,"senderName":"JonasNZ","senderId":"JonasNZ@irc"},
{"content":{"body":"fetch -> GET example.com/path2","msgtype":"m.text"},"ts":1574292383000,"senderName":"JonasNZ","senderId":"JonasNZ@irc"},
{"content":{"body":"  This is where Chrome and Firefox behave differently.","msgtype":"m.text"},"ts":1574292385000,"senderName":"JonasNZ","senderId":"JonasNZ@irc"},
{"content":{"body":"  Chrome: drops Content-Type header and body.","msgtype":"m.text"},"ts":1574292387000,"senderName":"JonasNZ","senderId":"JonasNZ@irc"},
{"content":{"body":"  Firefox: only drops body.","msgtype":"m.text"},"ts":1574292389000,"senderName":"JonasNZ","senderId":"JonasNZ@irc"},
{"content":{"body":"My feeling is that Chrome is behaving correctly here and firefox is misbehaving","msgtype":"m.text"},"ts":1574292391000,"senderName":"JonasNZ","senderId":"JonasNZ@irc"}
]