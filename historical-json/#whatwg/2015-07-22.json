[
{"content":{"body":"JakeA: a quick fetch question: is it possible to make a cross-domain anonymous request (no credentials, response available to JS) ?","msgtype":"m.text"},"ts":1437561009000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1437567818000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"anyone else with a decent fetch knowledge?","msgtype":"m.text"},"ts":1437567827000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: no, that's not allowed","msgtype":"m.text"},"ts":1437568902000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Unless the response is CORS","msgtype":"m.text"},"ts":1437568950000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"fetch(url) won't use credentials, but if it's cross origin it'll fail unless it passed a CORS check","msgtype":"m.text"},"ts":1437569054000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"damn","msgtype":"m.text"},"ts":1437569090000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"that would be a nice feature (as in AnonXMLHttpRequest), something not doable with a XHR I think","msgtype":"m.text"},"ts":1437569111000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"JakeA: what is the reasoning for not allowing this?","msgtype":"m.text"},"ts":1437569162000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: it'd mean you could use the user as a proxy for content that's supposed to be secured by their wifi login","msgtype":"m.text"},"ts":1437569253000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Intranets etc","msgtype":"m.text"},"ts":1437569260000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Ideally those would have their own login, but that often isn't the case","msgtype":"m.text"},"ts":1437569286000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"aha, interesting, thanks","msgtype":"m.text"},"ts":1437569337000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"Eg \"if IP address looks like Apple employee, scan for test servers and see what they're working on\"","msgtype":"m.text"},"ts":1437569341000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"makes full sense.","msgtype":"m.text"},"ts":1437569354000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"unfortunately, due to absence of progress + abort + timeout, looks like I will have to use XHR for my next project :/","msgtype":"m.text"},"ts":1437569372000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"good luck on moving forward with these!","msgtype":"m.text"},"ts":1437569383000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"Of course, native apps have this ability to scan, but hey","msgtype":"m.text"},"ts":1437569405000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"ondras: cheers. What's your abort use-case btw?","msgtype":"m.text"},"ts":1437569425000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"As in, what kind if resources are you likely to abort, and under what conditions?","msgtype":"m.text"},"ts":1437569460000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: in a map app, every time the use pans the viewport, I have to request data from server to display on the map","msgtype":"m.text"},"ts":1437569491000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"JakeA: this is a potentially lengthy operation and the user can pan/zoom the map frequently","msgtype":"m.text"},"ts":1437569511000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"I would like to abort the non-completed \"lookup\" request as soon as a new needs to be generated","msgtype":"m.text"},"ts":1437569526000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"Ms2ger: Hey. I'm working on the implementing the permissions API in blink/chromium along with mounir.","msgtype":"m.text"},"ts":1437569542000,"senderName":"tilal6991","senderId":"tilal6991@irc"},
{"content":{"body":"i.e. the one at https://w3c.github.io/permissions/","msgtype":"m.text"},"ts":1437569571000,"senderName":"tilal6991","senderId":"tilal6991@irc"},
{"content":{"body":"annevk mentioned on our intent to implement that what we have for request may not be valid idl because we cannot distinguish between a dictionary and a sequence of dictionaries","msgtype":"m.text"},"ts":1437569639000,"senderName":"tilal6991","senderId":"tilal6991@irc"},
{"content":{"body":"However, having read the webidl spec, it seems like distinguishing between the two is actually possible","msgtype":"m.text"},"ts":1437569666000,"senderName":"tilal6991","senderId":"tilal6991@irc"},
{"content":{"body":"Can you let me know if this is the case?","msgtype":"m.text"},"ts":1437569677000,"senderName":"tilal6991","senderId":"tilal6991@irc"},
{"content":{"body":"ondras: gotcha. Would you say the a abort would more likely occur before receiving any of the response body, or during the response?","msgtype":"m.text"},"ts":1437569787000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: before","msgtype":"m.text"},"ts":1437569814000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: cheers","msgtype":"m.text"},"ts":1437569902000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: good luck with fetch. and thanks for the explanation! :)","msgtype":"m.text"},"ts":1437569942000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"Domenic: ?","msgtype":"m.text"},"ts":1437570700000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"tilal6991, seems like you might be correct","msgtype":"m.text"},"ts":1437572043000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: awesome thnaks :)","msgtype":"m.text"},"ts":1437572377000,"senderName":"tilal6991","senderId":"tilal6991@irc"},
{"content":{"body":"tilal6991: Yeah, it *originally* wasn't possible to distinguish, but this was brought up as an issue a while ago, and we decided to make them distinguishable.  All it means is that if your dictionary has a .length property as well, it might get mistaken as a sequence accidentally. ^_^","msgtype":"m.text"},"ts":1437582677000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, sequence uses @@iterator","msgtype":"m.text"},"ts":1437582738000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: Ah, kk. That's safer, then.","msgtype":"m.text"},"ts":1437582760000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: Domenic: https://etherpad.mozilla.org/streams-f2f-july","msgtype":"m.text"},"ts":1437585486000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: What does \"distributed streams\" mean?","msgtype":"m.text"},"ts":1437586079000,"senderName":"yhirano_","senderId":"yhirano_@irc"},
{"content":{"body":"wanderview: sorry, i misread.","msgtype":"m.text"},"ts":1437586096000,"senderName":"yhirano_","senderId":"yhirano_@irc"},
{"content":{"body":"yhirano_: disturbed streams means reading the first part of the stream, unlocking, and then passing it on...","msgtype":"m.text"},"ts":1437586135000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: thanks, then it is part of bodyUsed problem?","msgtype":"m.text"},"ts":1437586166000,"senderName":"yhirano_","senderId":"yhirano_@irc"},
{"content":{"body":"so... the idea that partial stream reads should block further use of the Response object","msgtype":"m.text"},"ts":1437586170000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"yhirano_: yea, a lot of these are related","msgtype":"m.text"},"ts":1437586177000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I have a question, can I write to the pad? or is it better to ask here?","msgtype":"m.text"},"ts":1437586409000,"senderName":"yhirano_","senderId":"yhirano_@irc"},
{"content":{"body":"yhirano_: either way is fine","msgtype":"m.text"},"ts":1437586629000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yhirano_: I guess you're not in SF?","msgtype":"m.text"},"ts":1437586638000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm in japan","msgtype":"m.text"},"ts":1437586648000,"senderName":"yhirano_","senderId":"yhirano_@irc"},
{"content":{"body":":/ but thanks for paying attention!","msgtype":"m.text"},"ts":1437586661000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"IsDisturbed can be called for locked stream? I think it would be good to disallow monitoring locked stream.","msgtype":"m.text"},"ts":1437586742000,"senderName":"yhirano_","senderId":"yhirano_@irc"},
{"content":{"body":"good point...","msgtype":"m.text"},"ts":1437586780000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it's not author-accessible though","msgtype":"m.text"},"ts":1437586788000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1437586857000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yhirano_: thanks for bringing that up","msgtype":"m.text"},"ts":1437586866000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"respondWith(resp.body); console.log(resp.body.bodyUsed)","msgtype":"m.text"},"ts":1437586874000,"senderName":"yhirano_","senderId":"yhirano_@irc"},
{"content":{"body":"I think \"at least one byte was read by already released readers\" makes sense.","msgtype":"m.text"},"ts":1437587111000,"senderName":"yhirano_","senderId":"yhirano_@irc"},
{"content":{"body":"it might be easier to just do \".read() was ever called\" even if that gives unintuitive results for empty streams","msgtype":"m.text"},"ts":1437587246000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"otherwise it's hard to avoid bodyUsed true -> false transitions","msgtype":"m.text"},"ts":1437587256000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"sorry I don't think my proposal causes true -> false transition.","msgtype":"m.text"},"ts":1437587417000,"senderName":"yhirano_","senderId":"yhirano_@irc"},
{"content":{"body":"yhirano_: yes, but I think we want resp.body.json(); resp.bodyUsed === true","msgtype":"m.text"},"ts":1437587478000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yhirano_: otherwise consumers would have to do if (!resp.bodyUsed && !resp.body.locked) { /* can use */ }","msgtype":"m.text"},"ts":1437587593000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"hmm. I thought anyway the author should see .locked","msgtype":"m.text"},"ts":1437587607000,"senderName":"yhirano_","senderId":"yhirano_@irc"},
{"content":{"body":"yhirano_: what we're coming around to is that you have explicit empty (null) and maybe empty (a stream where you don't know it's really empty until you start reading it)","msgtype":"m.text"},"ts":1437587686000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yhirano_: and that for the latter it's fine that IsDisturbed gets set when you start reading it, even though nothing might end up being read","msgtype":"m.text"},"ts":1437587712000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"thanks for the explanation.","msgtype":"m.text"},"ts":1437587804000,"senderName":"yhirano_","senderId":"yhirano_@irc"},
{"content":{"body":"yhirano_: does it seem acceptable?","msgtype":"m.text"},"ts":1437587871000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yes.","msgtype":"m.text"},"ts":1437587885000,"senderName":"yhirano_","senderId":"yhirano_@irc"},
{"content":{"body":"yay :)","msgtype":"m.text"},"ts":1437587891000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1437587895000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"read() on maybe empty stream sets IsDisturbed looks not so different from getReader() on maybe empty stream sets IsDisturbed, though","msgtype":"m.text"},"ts":1437588045000,"senderName":"yhirano_","senderId":"yhirano_@irc"},
{"content":{"body":"that's true","msgtype":"m.text"},"ts":1437588071000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"except that you might use getReader() to observe the stream without disturbing it","msgtype":"m.text"},"ts":1437588124000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yes...","msgtype":"m.text"},"ts":1437588138000,"senderName":"yhirano_","senderId":"yhirano_@irc"},
{"content":{"body":"E.g. with .closed (although that would be messy code) or some potential future .state or .queueSize or similar","msgtype":"m.text"},"ts":1437588146000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so it is probably better to stick with .read()/.cancel() as the disturbers","msgtype":"m.text"},"ts":1437588173000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yea... mutators should disturb... and allow getters without disturbing","msgtype":"m.text"},"ts":1437588213000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"ok, I have no shiny idea then.","msgtype":"m.text"},"ts":1437588244000,"senderName":"yhirano_","senderId":"yhirano_@irc"},
{"content":{"body":"wanderview, annevk, Domenic: thank you, I have to go to bed...","msgtype":"m.text"},"ts":1437589754000,"senderName":"yhirano_","senderId":"yhirano_@irc"},
{"content":{"body":"nn","msgtype":"m.text"},"ts":1437589766000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tilal6991: hmm, it just works? Interesting, I thought dictionary or ... wasn't a thing","msgtype":"m.text"},"ts":1437589842000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tilal6991: still not convinced this is the API we want to implement though","msgtype":"m.text"},"ts":1437589856000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: It *originally* wasn't a thing, but that ended up being really annoying, so instead we do type-checking on the object first and only match it to dictionary if it fails.","msgtype":"m.text"},"ts":1437590084000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1437591143000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://github.com/whatwg/streams/issues/378","msgtype":"m.text"},"ts":1437597435000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://github.com/whatwg/streams/milestones/Fetch%20with%20streams%20integration%20prerequisites","msgtype":"m.text"},"ts":1437598743000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://w3c.github.io/mediacapture-main/getusermedia.html","msgtype":"m.text"},"ts":1437605175000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://w3c.github.io/media-source/","msgtype":"m.text"},"ts":1437605201000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: !","msgtype":"m.text"},"ts":1437605483000,"senderName":"Sebmaster","senderId":"Sebmaster@irc"},
{"content":{"body":"I had a thing","msgtype":"m.text"},"ts":1437605492000,"senderName":"Sebmaster","senderId":"Sebmaster@irc"},
{"content":{"body":"Lemme check what it was","msgtype":"m.text"},"ts":1437605503000,"senderName":"Sebmaster","senderId":"Sebmaster@irc"},
{"content":{"body":"annevk: https://github.com/jsdom/whatwg-url/compare/ee5da1da68e016a4bcf6addd1d29f4a98191323c...590d1fa4fd9e4270c3fd8f8cdb08d7f94a65eb31 basically","msgtype":"m.text"},"ts":1437605642000,"senderName":"Sebmaster","senderId":"Sebmaster@irc"},
{"content":{"body":"file a bug against web-platform-tests?","msgtype":"m.text"},"ts":1437605839000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if you mean you have new test","msgtype":"m.text"},"ts":1437605849000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah that too, but I noticed it because the spec doesn't handle 0s well","msgtype":"m.text"},"ts":1437606049000,"senderName":"Sebmaster","senderId":"Sebmaster@irc"},
{"content":{"body":"annevk: wanderview https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL","msgtype":"m.text"},"ts":1437606056000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Sebmaster: hmm, file a bug on the spec","msgtype":"m.text"},"ts":1437606060000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Sebmaster: ideally with a pointer to that diff","msgtype":"m.text"},"ts":1437606072000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Will do... Tomorrow","msgtype":"m.text"},"ts":1437606080000,"senderName":"Sebmaster","senderId":"Sebmaster@irc"},
{"content":{"body":"Sebmaster: don't really have time today either","msgtype":"m.text"},"ts":1437606086000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Sebmaster: ta!","msgtype":"m.text"},"ts":1437606092000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: Domenic: https://github.com/whatwg/fetch/issues/49","msgtype":"m.text"},"ts":1437606257000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jsbell: hey","msgtype":"m.text"},"ts":1437607185000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jsbell: are you in the SF office by any chance and have a spare minute?","msgtype":"m.text"},"ts":1437607199000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yep...","msgtype":"m.text"},"ts":1437607214000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: we're wondering about structured cloning of streams","msgtype":"m.text"},"ts":1437607224000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jsbell: we can sort of figure it out, but the somewhat harder case is indexed db","msgtype":"m.text"},"ts":1437607237000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: where are you?","msgtype":"m.text"},"ts":1437607252000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: we're at the Moz office","msgtype":"m.text"},"ts":1437607261000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jsbell: actually, Domenic thinks he wants to think it through first","msgtype":"m.text"},"ts":1437607274000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jsbell: so let's leave it for today","msgtype":"m.text"},"ts":1437607284000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: okie dokie","msgtype":"m.text"},"ts":1437607289000,"senderName":"jsbell","senderId":"jsbell@irc"}
]