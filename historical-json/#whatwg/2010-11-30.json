[
{"content":{"body":"TabAtkins, I asked the alpha gradients question to several people at an extended family gathering. most “non-IT” people initially insist that while the description “50% translucent blue” is understandable (if you have some opaque reference blue), “fully transparent” is something that neither should nor could not be assigned a color in some meaningful way.","msgtype":"m.text"},"ts":1291075320000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"Fully transparent black is a rather amusing concept","msgtype":"m.text"},"ts":1291075380000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"That matches my thoughts exactly, erlehmann.  The fact that \"transparent\" has a color in the standard rgba syntax is an accident of notation, and shouldn't be considered meaningful imo.","msgtype":"m.text"},"ts":1291075381000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The downside is that the IPU is no longer a paradox","msgtype":"m.text"},"ts":1291075440000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"it's a coordinate singularity","msgtype":"m.text"},"ts":1291075441000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"indeed","msgtype":"m.text"},"ts":1291075442000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"Anyway, my mind's made up on the matter.  We use premultiplied in CSS transitions and gradients, and that's that.","msgtype":"m.text"},"ts":1291075500000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And this is why the common sense approach — linear transitioning each value, but having several colors that look transparent, thus using \"fully transparent red\" when the gradient includes red and \"fully transparent blue\" — breaks down as soon as we allow that gradients can have more than two control points: It is simply not possible to go from red to transparent to blue then while conforming to our intuition regarding hues.","msgtype":"m.text"},"ts":1291075501000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"Right.","msgtype":"m.text"},"ts":1291075502000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I don't even want to consider how you would apply that approach to a mesh gradient.","msgtype":"m.text"},"ts":1291075560000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, The end of the story was rather satisfying: My brother sketched a a circle with hue transitions around the border and a transparent center point; thus treating the hue as angle and transparency as radius. It was obvious that using simple vector addition, we could go from every point to every other one and adding more dimensions would preserve this capability.","msgtype":"m.text"},"ts":1291075561000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"And I think sketching out that colorspace further gave us premultiplying. ;)","msgtype":"m.text"},"ts":1291075562000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"Yeah, it does.","msgtype":"m.text"},"ts":1291075620000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"In hsla, the premultiplied space is a hypercone.","msgtype":"m.text"},"ts":1291075621000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(It's a hyper-triangular prism or whatever in rgba space, but same deal.)","msgtype":"m.text"},"ts":1291075622000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"erlehmann: wouldn't you go red -> transparent red -> transparent blue -> blue ?","msgtype":"m.text"},"ts":1291075800000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yes, premultiplied alpha has been the only sane way to do it for like 25 years now","msgtype":"m.text"},"ts":1291075801000,"senderName":"bckenny","senderId":"bckenny@irc"},
{"content":{"body":"the only problem is precision, but graphics libraries shouldnt be filtering on 8 bit linear color anyway...","msgtype":"m.text"},"ts":1291075802000,"senderName":"bckenny","senderId":"bckenny@irc"},
{"content":{"body":"Hixie: The point is that having to explicitly put in *two* transparent colors is silly.","msgtype":"m.text"},"ts":1291075803000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"linear-gradient(red, rgba(255,0,0,0) 50%, rgba(0,0,255,0) 50%, blue) is ridiculous.  It should just be linear-gradient(red, transparent, blue)","msgtype":"m.text"},"ts":1291075860000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"no disagreement from me there","msgtype":"m.text"},"ts":1291075920000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, it is not only weird notation, you also cannot express something that from intuition has 3 control points reliably with that — as soon as something has alpha, all is lost.","msgtype":"m.text"},"ts":1291075921000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"so for opaque: red -> green -> blue i can use 3 points. but for transparent i'd need four. weird, wouldn't it be?","msgtype":"m.text"},"ts":1291075922000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"well we could certainly make the browsers magically expand \"transparent\" to two colours in a list of colours like that","msgtype":"m.text"},"ts":1291075980000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"DON'T. ;_;","msgtype":"m.text"},"ts":1291076040000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"We could.  Or we could just work in premultiplied space, where that comes for free.","msgtype":"m.text"},"ts":1291076041000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"sounds good to me!","msgtype":"m.text"},"ts":1291076042000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(And the \"auto-expanding\" doesn't work for gradients with non-colinear color-stops, like mesh gradients.)","msgtype":"m.text"},"ts":1291076043000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(how does it just work in premultiplied space?)","msgtype":"m.text"},"ts":1291076100000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I've already suggested it on the list.  Moz and Webkit are in favor.  ^_^","msgtype":"m.text"},"ts":1291076101000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, is this referring (or “refering”) to canvas gradients? <TabAtkins> Anyway, my mind's made up on the matter.  We use premultiplied in CSS transitions and gradients, and that's that.","msgtype":"m.text"},"ts":1291076102000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"Hixie: In premultiplied, the space of possible colors shrink as the alpha drops, with transparent itself being the only possible color at alpha=0.  The particular transformation of the color-space that this implies means that a straight line from a solid color to transparent always passes through equal-hued variants of the color.","msgtype":"m.text"},"ts":1291076160000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Even if you don't want it to pass through equal-hued variants :-p )","msgtype":"m.text"},"ts":1291076161000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"it's my brother's napkin-sketch circle, only in THREE DEE!","msgtype":"m.text"},"ts":1291076220000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"Philip`, think outside the cone!","msgtype":"m.text"},"ts":1291076221000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"(Properly, the number of possible colors doesn't shrink, but the range you can specify does.  If you specify colors with discrete components like integers, it reduces the total number of colors, but theoretically there is still the same amount until you hit alpha=0.)","msgtype":"m.text"},"ts":1291076222000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oh wait, it's 4D.","msgtype":"m.text"},"ts":1291076223000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"so going from red to blue via transparent will still have you darkening the colour in the middle?","msgtype":"m.text"},"ts":1291076224000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: No, it looks exactly like it would if you did the two-transparent version.","msgtype":"m.text"},"ts":1291076280000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i'll take your word for it :-)","msgtype":"m.text"},"ts":1291076340000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Particularly, things like a transition from white->transparent composited on a white background will be properly invisible, rather than going to a gray in the middle.","msgtype":"m.text"},"ts":1291076341000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"well that sounds like a win","msgtype":"m.text"},"ts":1291076342000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I can draw you diagrams that would make it clearer, but IRC-sized soundbites are hard to communicate color math through.","msgtype":"m.text"},"ts":1291076343000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"no need, i have every confidence in your abilities :-)","msgtype":"m.text"},"ts":1291076344000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"goes back to trying to work out how navigation should work during load","msgtype":"m.emote"},"ts":1291076400000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Heh, I just properly learned my color-math last week.  Before this I was trusting *Boris's* abilities, which admittedly is a pretty good idea in general.","msgtype":"m.text"},"ts":1291076401000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie, basically, the alpha is the lower bound for the rest of the values, since every value gets multiplied with the alpha. you can see, 50% transparent dark-gray should not occur naturally.","msgtype":"m.text"},"ts":1291076402000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"Nonono, 50% transparent dark gray is perfectly fine.","msgtype":"m.text"},"ts":1291076460000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I mean in that whitey transition.","msgtype":"m.text"},"ts":1291076461000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"Oh, okay.","msgtype":"m.text"},"ts":1291076520000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"white -> transparent","msgtype":"m.text"},"ts":1291076521000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"But still, saying \"the alpha is the lower bound for the rest of the values\" isn't right.  First, it's an upper bound, and second, it's not actually a bound.","msgtype":"m.text"},"ts":1291076522000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oh.","msgtype":"m.text"},"ts":1291076523000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"Not in the way that saying that naively implies.","msgtype":"m.text"},"ts":1291076524000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"AryehGregor: yt?","msgtype":"m.text"},"ts":1291076525000,"senderName":"jamesr__","senderId":"jamesr__@irc"},
{"content":{"body":"jamesr__, yes.","msgtype":"m.text"},"ts":1291076526000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"(briefly)","msgtype":"m.text"},"ts":1291076527000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Yes, the 4-tuple representing a premultiplied color has no components higher than the alpha.  But that's a notational convenience.","msgtype":"m.text"},"ts":1291076580000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, I retract my statement and state the opposite. And yes, I relied on custom of notation.","msgtype":"m.text"},"ts":1291076581000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"It doesn't imply that any colors are omitted.  A color like rgba(0,0,255,.5) is just represented as (0,0,127.5,.5) in the premultiplied tuple, but it represent the same full-blue color.","msgtype":"m.text"},"ts":1291076582000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so how do you represent rgb(0,0,127.5) with 50% transparency?","msgtype":"m.text"},"ts":1291076640000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(half-transparent half-full blue, like rgba(0,0,127,.5), is instead written as (0,0,63.5,.5).)","msgtype":"m.text"},"ts":1291076641000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1291076642000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ba-dum. tssss.","msgtype":"m.text"},"ts":1291076643000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"so how do you know what colour you're representing when alpha=0?","msgtype":"m.text"},"ts":1291076700000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"You're representing \"transparent\".","msgtype":"m.text"},"ts":1291076701000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"You're *not* representing a color - that's the point.","msgtype":"m.text"},"ts":1291076702000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"transparent is hueless.","msgtype":"m.text"},"ts":1291076703000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The other channels are fairly useless in that case, after all.","msgtype":"m.text"},"ts":1291076704000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"So, as an example of why this is good, say you're transitioning from blue to transparent.","msgtype":"m.text"},"ts":1291076705000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Start by converting to components - rgba(0,0,255,1) and rgba(0,0,0,0).","msgtype":"m.text"},"ts":1291076760000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Then convert to premultiplied tuples - (0,0,255,1) and (0,0,0,0).","msgtype":"m.text"},"ts":1291076761000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie, on the risk of being corrected again: it's the tip of the hypercone. all unmultiplied RGB colors with full transparency are mapped to it.","msgtype":"m.text"},"ts":1291076762000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"Then linearly interpolate.","msgtype":"m.text"},"ts":1291076763000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Halfway through, you have the premultiplied color (0,0,127.5,.5).  Convert that back to rgba space by dividing each component by the alpha, and you find that this is the representation for the color rgba(0,0,255,.5).","msgtype":"m.text"},"ts":1291076820000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"One problem is when you need to convert from premultiplied to non-premultiplied, for (0,0,0,0) you have to arbitrarily pick some non-premultiplied colour which is typically (0,0,0,0) but there's no justification for that","msgtype":"m.text"},"ts":1291076821000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"so if you're going from white to transparent, why don't you go through grey? isn't one of the interpolated colours going to be (127,127,127,0.5)?","msgtype":"m.text"},"ts":1291076822000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, yes, but in postmultiplied form that's (255, 255, 255, 0.5).","msgtype":"m.text"},"ts":1291076823000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"You only use the premultiplied form for interpolation, not rendering.","msgtype":"m.text"},"ts":1291076880000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"hugs the html parser like a safety blanket","msgtype":"m.emote"},"ts":1291076881000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Careful, it's spiky.","msgtype":"m.text"},"ts":1291076882000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Hixie: Yeah, it will.  Now, convert that tuple back to rgba by dividing each component by the alpha.","msgtype":"m.text"},"ts":1291076883000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(You converted from rgba to premult by multiplying each component by the alpha, so dividing is the obvious inverse transform.)","msgtype":"m.text"},"ts":1291076884000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Now, what happens when you interpolate between two colors where an intermediate color is imaginary?  I.e., it doesn't physically exist and can't be displayed?  Someone asked that on the list, and I thought it was a cool question, although it's kind of irrelevant to standard monitors.","msgtype":"m.text"},"ts":1291076940000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"I guess the UA rounds to the nearest existing color.  I wonder how that would look in practice, though.","msgtype":"m.text"},"ts":1291076941000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"AryehGregor: The obvious thing.  You get an imaginary color at some points, which is mapped to an in-gamut color, usually by clipping component-wise.","msgtype":"m.text"},"ts":1291076942000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"wait wait, no need to translate back to unpremultiplied","msgtype":"m.text"},"ts":1291076943000,"senderName":"bckenny","senderId":"bckenny@irc"},
{"content":{"body":"AryehGregor: Actually, you often use the premultiplied for rendering as well, because it actually simplifies the compositing math.","msgtype":"m.text"},"ts":1291077000000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"bckenny, ?","msgtype":"m.text"},"ts":1291077001000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"(127,127,127,0.5) is half transparent, so when its composited it takes half of the background components and adds 127 to them","msgtype":"m.text"},"ts":1291077002000,"senderName":"bckenny","senderId":"bckenny@irc"},
{"content":{"body":"However, we're used to seeing colors in the rgba space, so it's useful to convert back when talking about colors.","msgtype":"m.text"},"ts":1291077003000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Okay, well, I mean that what's displayed is the same as what you get if you specify rgba(255, 255, 255, 0.5) in CSS.","msgtype":"m.text"},"ts":1291077004000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Yes.","msgtype":"m.text"},"ts":1291077005000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"compositing is color =  background * (1-alpha) + foreground","msgtype":"m.text"},"ts":1291077006000,"senderName":"bckenny","senderId":"bckenny@irc"},
{"content":{"body":"keep premultiplied for compositing, win price!","msgtype":"m.text"},"ts":1291077060000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"so over white, white to transparent would stay white, but over black it would indeed be grey halfway through...but thats what half transparent white over black looks like","msgtype":"m.text"},"ts":1291077061000,"senderName":"bckenny","senderId":"bckenny@irc"},
{"content":{"body":"ah, sorry, TabAtkins was saying the same thing simultaneously","msgtype":"m.text"},"ts":1291077120000,"senderName":"bckenny","senderId":"bckenny@irc"},
{"content":{"body":"AryehGregor: Unfortunately, Alan Gresley (the guy who asked the question about imaginary colors) doesn't really know what he's talking about.  I answered his questions (they're all trivial), but he's very confused about how colors work.","msgtype":"m.text"},"ts":1291077720000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"commits feed at CIA.vc for the spec appears to be working now","msgtype":"m.text"},"ts":1291077721000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"http://cia.vc/stats/project/html-spec/.rss","msgtype":"m.text"},"ts":1291077722000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I guess I'll need to tweak it to filter only on one of the files","msgtype":"m.text"},"ts":1291077780000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"because the way it is now, it will send duplicates each time","msgtype":"m.text"},"ts":1291077781000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"AryehGregor: sorry ran off. still there?","msgtype":"m.text"},"ts":1291078500000,"senderName":"jamesr__","senderId":"jamesr__@irc"},
{"content":{"body":"i'm seeing some really slow script on wikipedia.org and want to report it but dunno where","msgtype":"m.text"},"ts":1291078560000,"senderName":"jamesr__","senderId":"jamesr__@irc"},
{"content":{"body":"Pretty sure he's gone by now, jamesr__ - Aryeh's on east coast time.","msgtype":"m.text"},"ts":1291078800000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"it's only 8pm :P","msgtype":"m.text"},"ts":1291078860000,"senderName":"jamesr__","senderId":"jamesr__@irc"},
{"content":{"body":"It's only 1am.","msgtype":"m.text"},"ts":1291078861000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"There again, I'm a student, so what do people expect? :P","msgtype":"m.text"},"ts":1291078862000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"it's midday, don't know what you're talking about!","msgtype":"m.text"},"ts":1291079100000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"Philip`: yt?","msgtype":"m.text"},"ts":1291079460000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I have http://twitter.com/html5 working again","msgtype":"m.text"},"ts":1291082040000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1291082041000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"were you using my code before?","msgtype":"m.text"},"ts":1291082100000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and if so, does that mean your new code is a drop-in replacement? :-0)","msgtype":"m.text"},"ts":1291082101000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"s/0//","msgtype":"m.text"},"ts":1291082102000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"anyone know if <figcaption> can be used block level with nested elements ?","msgtype":"m.text"},"ts":1291086360000,"senderName":"oojacoboo","senderId":"oojacoboo@irc"},
{"content":{"body":"I am looking to use it in a case with a legend","msgtype":"m.text"},"ts":1291086420000,"senderName":"oojacoboo","senderId":"oojacoboo@irc"},
{"content":{"body":"where I have a figure with number representing sections of a screenshot, and want to use <figcaption> with an ordered list to describe the points of the figure","msgtype":"m.text"},"ts":1291086421000,"senderName":"oojacoboo","senderId":"oojacoboo@irc"},
{"content":{"body":"feeling an earthquake just now in Tokyo","msgtype":"m.text"},"ts":1291087440000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"pretty decent size","msgtype":"m.text"},"ts":1291087441000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: \"6.9 earthquake hits 502 miles South of TOKYO, Japan \"","msgtype":"m.text"},"ts":1291088100000,"senderName":"aaaazzz","senderId":"aaaazzz@irc"},
{"content":{"body":"MikeSmith: http://earthquake.usgs.gov/earthquakes/recenteqsww/Maps/region/Asia.php","msgtype":"m.text"},"ts":1291088101000,"senderName":"aaaazzz","senderId":"aaaazzz@irc"},
{"content":{"body":"ha, wow","msgtype":"m.text"},"ts":1291088102000,"senderName":"oojacoboo","senderId":"oojacoboo@irc"},
{"content":{"body":"I was living in Taipei a few months back and we'd get earthquakes all the time","msgtype":"m.text"},"ts":1291088160000,"senderName":"oojacoboo","senderId":"oojacoboo@irc"},
{"content":{"body":"once every month or so","msgtype":"m.text"},"ts":1291088161000,"senderName":"oojacoboo","senderId":"oojacoboo@irc"},
{"content":{"body":"aaaazzz: thanks","msgtype":"m.text"},"ts":1291088162000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that thing must have been pretty strong in Okinawa","msgtype":"m.text"},"ts":1291088220000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"note the big red square. that's an earthquake in the last few minutes.","msgtype":"m.text"},"ts":1291088221000,"senderName":"aaaazzz","senderId":"aaaazzz@irc"},
{"content":{"body":"6.9 is decent, but not for Japan, the buildings there handle that with ease","msgtype":"m.text"},"ts":1291088222000,"senderName":"oojacoboo","senderId":"oojacoboo@irc"},
{"content":{"body":"probably not much damage","msgtype":"m.text"},"ts":1291088223000,"senderName":"oojacoboo","senderId":"oojacoboo@irc"},
{"content":{"body":"oojacoboo: I think there are earthquakes in Japan pretty much everyday; just that most of them are not very strong at all","msgtype":"m.text"},"ts":1291088280000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it's like that most all places on faults","msgtype":"m.text"},"ts":1291088281000,"senderName":"oojacoboo","senderId":"oojacoboo@irc"},
{"content":{"body":"1-2-3-4 scale quakes","msgtype":"m.text"},"ts":1291088282000,"senderName":"oojacoboo","senderId":"oojacoboo@irc"},
{"content":{"body":"you can start to feel it in the upper 4s and 5s, of course, depending on the depth of the quake itself","msgtype":"m.text"},"ts":1291088340000,"senderName":"oojacoboo","senderId":"oojacoboo@irc"},
{"content":{"body":"Anyone here good with javascript and ranges?","msgtype":"m.text"},"ts":1291094040000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"http://p2pdns.baywords.com/2010/11/30/hello-world/","msgtype":"m.text"},"ts":1291105260000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Will they be leveraging the web of trust?","msgtype":"m.text"},"ts":1291106640000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"Aren't we onto the  Web 2.0 of Trust now? The one where you trust facebook for everything?","msgtype":"m.text"},"ts":1291108680000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: I think that requires Semantic Web 2.0 to work","msgtype":"m.text"},"ts":1291111440000,"senderName":"Workshiva","senderId":"Workshiva@irc"},
{"content":{"body":"hsivonen: BTW there is now an \"official\" call for comments about testharness.js on public-html-testsuite","msgtype":"m.text"},"ts":1291111620000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: thanks","msgtype":"m.text"},"ts":1291111920000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"my computer use experience became so much better after I patched libgtk-vnc. I guess I should attempt patching libvte again","msgtype":"m.text"},"ts":1291112220000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"maybe I should try patching xserver-xorg-input-wacom, too","msgtype":"m.text"},"ts":1291112280000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Hixie: Pong","msgtype":"m.text"},"ts":1291112820000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"hsivonen: so we've gotten multiple reports about validator error messages for src-less script elements being confusing/misleading","msgtype":"m.text"},"ts":1291114740000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"specifically, for the case where you have a script element with an inline script","msgtype":"m.text"},"ts":1291114800000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that is, non-empty","msgtype":"m.text"},"ts":1291114801000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but you have, e.g., a charset attribute on it","msgtype":"m.text"},"ts":1291114802000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"strings over enums","msgtype":"m.text"},"ts":1291116000000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it does make some sense","msgtype":"m.text"},"ts":1291116001000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: well, I suppose hacking Jing would be too hard","msgtype":"m.text"},"ts":1291116900000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"MikeSmith: so I guess this needs to move to assertions.sch/Assertions.java :-(","msgtype":"m.text"},"ts":1291116901000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1291116902000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hsivonen: I think that's the easiest thing","msgtype":"m.text"},"ts":1291116903000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I'm working on it now","msgtype":"m.text"},"ts":1291116904000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hsivonen: please try <script defer>var foo;</script> or something at http://www.w3.org/html/check and let me know what you think","msgtype":"m.text"},"ts":1291117440000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"or async or charset","msgtype":"m.text"},"ts":1291117441000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: looks good","msgtype":"m.text"},"ts":1291117680000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"steps away for a bit","msgtype":"m.emote"},"ts":1291117681000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ah cool","msgtype":"m.text"},"ts":1291117682000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I'll send you a patch to review","msgtype":"m.text"},"ts":1291117683000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1291117684000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1291117685000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"wonders how to do printf debugging with X input drivers","msgtype":"m.emote"},"ts":1291117686000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"maybe there's a function for dumping stuff in the X server log or something","msgtype":"m.text"},"ts":1291117740000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"http://timesofindia.indiatimes.com/cms.dll/xml/uncomp/articleshow?msid=167551 gives me the YSoD (link from Hixie's anti-XSLT blog post from years ago)","msgtype":"m.text"},"ts":1291118640000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"\"non-xslt top-level element with null namespace uri\"","msgtype":"m.text"},"ts":1291118700000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"good times","msgtype":"m.text"},"ts":1291118701000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"That is not possible. Developers would fix the mistake before it hits users.\"","msgtype":"m.text"},"ts":1291118760000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Maybe the error message should read \"Something impossible just happened. If you have any feedback on our handling of this issue, please contact tbray⊙tc\"","msgtype":"m.text"},"ts":1291119000000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"\"Also, the author of this site is a bozo.\"","msgtype":"m.text"},"ts":1291119120000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"and had several off-line meetings with the HTML5 chairs\" -- http://www.w3.org/QA/2010/11/progress_in_lyon_-_tpac_2010.html -- such usage of \"offline\" always strikes me as weird","msgtype":"m.text"},"ts":1291120440000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"One piece of advice from the AB was to support our current policy of having dues paid in three currencies; even as they advised that this should be reviewed on a regular basis.\"","msgtype":"m.text"},"ts":1291120560000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"?!","msgtype":"m.text"},"ts":1291120561000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You have to pay 1/3 in each currency?","msgtype":"m.text"},"ts":1291120740000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"no, depends on which W3C host you're associated with","msgtype":"m.text"},"ts":1291120800000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I just don't see how the above is advice","msgtype":"m.text"},"ts":1291120860000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: is trimming whitespace before comparing encoding names an HTML thing or a Web Platform thing?","msgtype":"m.text"},"ts":1291120980000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"that is, should I fix it in the HTML parser or in Gecko's charset alias service?","msgtype":"m.text"},"ts":1291120981000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"that is a good question","msgtype":"m.text"},"ts":1291120982000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and I don't really know; guess it depends on what happens in XML","msgtype":"m.text"},"ts":1291121040000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"or you can maybe test it with charset=\" ...\" in HTTP, but Gecko had issues with quotes there...","msgtype":"m.text"},"ts":1291121041000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what about @charset in CSS?","msgtype":"m.text"},"ts":1291121100000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1291121160000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"though I guess it ought to be tested in IE","msgtype":"m.text"},"ts":1291121161000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and I don't have Windows yet so I cannot help","msgtype":"m.text"},"ts":1291121162000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok.","msgtype":"m.text"},"ts":1291121280000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"annevk: The case shifting for getAttribute et. al. should happen for any node in a HTML document, right?","msgtype":"m.text"},"ts":1291121400000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1291121460000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"no, no","msgtype":"m.text"},"ts":1291121461000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"oh wait","msgtype":"m.text"},"ts":1291121462000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So how does one deal with foreign content where the name is case shifted","msgtype":"m.text"},"ts":1291121463000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"only if the element is in the HTML namespace","msgtype":"m.text"},"ts":1291121464000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"rtfs instead","msgtype":"m.text"},"ts":1291121465000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html","msgtype":"m.text"},"ts":1291121466000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah, somehow I missed the first clause","msgtype":"m.text"},"ts":1291121467000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Sorry for being sumb","msgtype":"m.text"},"ts":1291121520000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"*dumb","msgtype":"m.text"},"ts":1291121521000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"does anyone happen to have CSS @charset tests with spaces inside the quoted string?","msgtype":"m.text"},"ts":1291125780000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"(I could make some, but I think I've configured my servers to send a HTTP-level charset for CSS...)","msgtype":"m.text"},"ts":1291125781000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"you could check if Content-Type: text/html;charset=\"utf-8\" works in IE and then play with that","msgtype":"m.text"},"ts":1291125960000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think I'll make a zip file of my test and run it locally on Windows","msgtype":"m.text"},"ts":1291126140000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Gecko rejects CSS with bogus @charset","msgtype":"m.text"},"ts":1291126260000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Chrome uses the default charset","msgtype":"m.text"},"ts":1291126261000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"annevk: IE9 doesn't trim spaces in CSS @charset","msgtype":"m.text"},"ts":1291126380000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"and rejects the sheet","msgtype":"m.text"},"ts":1291126440000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"annevk: I guess that makes the behavior of Opera 11 beta a bug","msgtype":"m.text"},"ts":1291126441000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"(Opera 11 beta trims space)","msgtype":"m.text"},"ts":1291126442000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1291126740000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess only case-insensitive matching is a platform thing then","msgtype":"m.text"},"ts":1291126741000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"does Opera 11 beta no longer do UTS22?","msgtype":"m.text"},"ts":1291126742000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"in other news","msgtype":"m.text"},"ts":1291126800000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if you define an attribute for the web platform","msgtype":"m.text"},"ts":1291126801000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and its setter sometimes throws and only accepts certain values","msgtype":"m.text"},"ts":1291126802000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but eventually the attribute \"becomes\" that value","msgtype":"m.text"},"ts":1291126860000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it would be nice if that didn't require a separate variable","msgtype":"m.text"},"ts":1291126861000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"e.g. http://dev.w3.org/2006/webapi/XMLHttpRequest-2/#the-withcredentials-attribute has a separate \"credentials flag\"","msgtype":"m.text"},"ts":1291126862000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"which is really just reflecting the attribute","msgtype":"m.text"},"ts":1291126920000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"could I say for step 4 \"set the withCredentials attribute to the given value\"","msgtype":"m.text"},"ts":1291126921000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if you read that literally I guess you would get recursion...","msgtype":"m.text"},"ts":1291126980000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bah","msgtype":"m.text"},"ts":1291126981000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"set the withCredentials attribute value to the given value makes it work, I think","msgtype":"m.text"},"ts":1291127100000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie did something like that in the <canvas> API","msgtype":"m.text"},"ts":1291127101000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heycam, maybe Web IDL should have support for \"string enums\"","msgtype":"m.text"},"ts":1291127700000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heycam, i.e. attributes that accept a limited amount of string values","msgtype":"m.text"},"ts":1291127701000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heycam, it's an extensible pattern  that is used quite a lot","msgtype":"m.text"},"ts":1291127760000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is hixie.ch down?","msgtype":"m.text"},"ts":1291129020000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"ah just really slow","msgtype":"m.text"},"ts":1291129021000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"heycam, I emailed public-script-coord with somewhat more context","msgtype":"m.text"},"ts":1291131720000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"RESOLVED: The TAG endorses the health warning \"If you deploy a 30x Location: C#D, then be aware that anyone who creates a URI A#B, might be inconvenienced (since there are no fragment combination rules).\"","msgtype":"m.text"},"ts":1291132320000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh god","msgtype":"m.text"},"ts":1291132321000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"this is the first time I have seen a RESOLVED from the TAG","msgtype":"m.text"},"ts":1291132322000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"does this mean they don't do much?","msgtype":"m.text"},"ts":1291132323000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"no they were just jammed in a corner and that was the best all round advise for the web - real solution would be to drop frags from HTTP alltogether, Location should be an absolute or relative-uri and not oen with clientside identifiers in it","msgtype":"m.text"},"ts":1291132440000,"senderName":"webr3","senderId":"webr3@irc"},
{"content":{"body":"hard to fix deployed mistakes, so can only offer best practise advice in those circumstances","msgtype":"m.text"},"ts":1291132500000,"senderName":"webr3","senderId":"webr3@irc"},
{"content":{"body":"imo","msgtype":"m.emote"},"ts":1291132501000,"senderName":"webr3","senderId":"webr3@irc"},
{"content":{"body":"better to tell people that they should know that they're inconveniencing other people (how they're being inconvenienced i have no idea)","msgtype":"m.text"},"ts":1291132560000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"the problem is that fragment identifiers are removed from the request","msgtype":"m.text"},"ts":1291132620000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"imo","msgtype":"m.text"},"ts":1291132621000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and how they work with Location will become interoperable over time, pretty sure of that","msgtype":"m.text"},"ts":1291132622000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but they were created for the client, specified by the mediattype and so that no protocol or anything on the web could have juristiction over them, if you need server to know use one of the other uri parts - like query params","msgtype":"m.text"},"ts":1291132680000,"senderName":"webr3","senderId":"webr3@irc"},
{"content":{"body":"if you make them webwide, then they are pointless and may as well just be dropped in favour of querystring only","msgtype":"m.text"},"ts":1291132740000,"senderName":"webr3","senderId":"webr3@irc"},
{"content":{"body":"webwide as in servers and protocols have knowledge","msgtype":"m.text"},"ts":1291132741000,"senderName":"webr3","senderId":"webr3@irc"},
{"content":{"body":"querystrings don't have the same features","msgtype":"m.text"},"ts":1291132742000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but I guess if you still believe in content negotiation and such this all works differently","msgtype":"m.text"},"ts":1291132800000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what features are missing from querystring but in fragments? (other than the clientside per mediatype nature of them)","msgtype":"m.text"},"ts":1291132920000,"senderName":"webr3","senderId":"webr3@irc"},
{"content":{"body":"in particular, you want to know the fragment identifier on the server if you moved from largedocument#foo to just foo","msgtype":"m.text"},"ts":1291132921000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so links remain working","msgtype":"m.text"},"ts":1291132922000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aye that's a problem for sure","msgtype":"m.text"},"ts":1291133100000,"senderName":"webr3","senderId":"webr3@irc"},
{"content":{"body":"that I've avoided thus far by not makign hugedocument#foo in the first place :p","msgtype":"m.emote"},"ts":1291133101000,"senderName":"webr3","senderId":"webr3@irc"},
{"content":{"body":"no blog with #comments?","msgtype":"m.text"},"ts":1291133160000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"#recentcomments and /all-comments","msgtype":"m.text"},"ts":1291133220000,"senderName":"webr3","senderId":"webr3@irc"},
{"content":{"body":"I see the problem btw, have done for ages, but think solving it in this way will create more problems, for instance how long before my blog post is just the post, and comments are pull in from other uris (and on other sites) dynamically depending on the view of the page","msgtype":"m.text"},"ts":1291133340000,"senderName":"webr3","senderId":"webr3@irc"},
{"content":{"body":"and/or client considerations","msgtype":"m.text"},"ts":1291133341000,"senderName":"webr3","senderId":"webr3@irc"},
{"content":{"body":"jgraham: With canvas tests, I want to wait for onload and then set some variables (canvas, ctx) which all the subsequent code uses","msgtype":"m.text"},"ts":1291135860000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"For synchronous tests, I think I can just do \"test(function() { var canvas = ...; subsequent code });\" and that's fine","msgtype":"m.text"},"ts":1291135920000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"but for async tests I don't see an easy way to do that","msgtype":"m.text"},"ts":1291135921000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: at the moment the harness assumes that all test objects have been created before onload","msgtype":"m.text"},"ts":1291135922000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"so you would have to do ","msgtype":"m.text"},"ts":1291135980000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"var t = async_test()","msgtype":"m.text"},"ts":1291135981000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"addEventListener(\"load\", function() {t.step(function() {/*do the setup here*/})}, false)","msgtype":"m.text"},"ts":1291135982000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"or so","msgtype":"m.text"},"ts":1291135983000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Unless I am missing your point","msgtype":"m.text"},"ts":1291136040000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"If you have a better way, I am open to suggestions","msgtype":"m.text"},"ts":1291136041000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Hmm, including the setup code that'd be like addEventListener(\"load\", function() { t.step(function() { var canvas = ...; img.onload = t.step(function() { use canvas, img; t.done(); }); } }, false);, I think","msgtype":"m.text"},"ts":1291136280000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Maybe it'd be nice if I could write \"var t = test(function() { var canvas = ...; img.onload = t.step(function() { use canvas, img; t.done(); }); });\"","msgtype":"m.text"},"ts":1291136400000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Oh, actually, synchronous test doesn't wait for onload either","msgtype":"m.text"},"ts":1291136460000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I think","msgtype":"m.text"},"ts":1291136461000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"so I'll have to make almost every test asynchronous (since they need to wait for images and fonts etc to load)","msgtype":"m.text"},"ts":1291136580000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Yeah, sync tests really are sync, they just run straight away","msgtype":"m.text"},"ts":1291136700000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I suppose one could have some hack like \"if you pass an async test a function(){} it gets run on onload, and if that test calls a step() before onload() it is an error\"","msgtype":"m.text"},"ts":1291136880000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"s/onload/load/g","msgtype":"m.text"},"ts":1291136881000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"and remove some ()","msgtype":"m.text"},"ts":1291136882000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(does that sound like it would be useful?)","msgtype":"m.text"},"ts":1291137120000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Depends on whether running after onload is far more common than the alternative, I guess","msgtype":"m.text"},"ts":1291137180000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Hmm, when I said \"img.onload = t.step(function() { use canvas, img; t.done(); });\" I think that was wrong","msgtype":"m.text"},"ts":1291137240000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"and it needs \"img.onload = function() { t.step(function() { use canvas, img; t.done(); }); };\"","msgtype":"m.text"},"ts":1291137241000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Well I guess there might be a large class of tests for which some resource is needed after onload","msgtype":"m.text"},"ts":1291137300000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Could t.step return a function that can be called later to execute the test step, rather than executing it immediately?","msgtype":"m.text"},"ts":1291137301000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"It could","msgtype":"m.text"},"ts":1291137302000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"so that onload = t.step(function() ...) would do the right thing","msgtype":"m.text"},"ts":1291137303000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Or there could be a different method for that","msgtype":"m.text"},"ts":1291137304000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"t.step_func or something","msgtype":"m.text"},"ts":1291137360000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"In what cases is the current t.step useful?","msgtype":"m.text"},"ts":1291137361000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I agree it seems like an appealing design","msgtype":"m.text"},"ts":1291137362000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"can't think of any cases where he'd want t.step to execute the step immediately","msgtype":"m.emote"},"ts":1291137480000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I guess it is always trivial to get the other behaviour, just by doing t.step(function() {})()","msgtype":"m.text"},"ts":1291137540000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"So, yes, that seems like an improvement","msgtype":"m.text"},"ts":1291137600000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I guess I should email public-html-testsuite","msgtype":"m.text"},"ts":1291137601000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Since it is a breaking change","msgtype":"m.text"},"ts":1291137660000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I suppose there's no fundamental difference, it just seems more syntactically convenient to get a test-happy wrapped function you can use in async event handlers directly","msgtype":"m.text"},"ts":1291137720000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Then I can do var t = async_test(\"%(name)s\"); on_event(window, \"load\", t.step(function() { ...; t.done(); })); which isn't terribly verbose","msgtype":"m.text"},"ts":1291137840000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Indeed","msgtype":"m.text"},"ts":1291138020000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"\"people who have already submitted tests\" - there's less than 100 tests currently using .step, and hypothetically probably at least two orders of magnitude more tests that need to be written in the future using these functions, so it doesn't seem particularly important to maintain backward compatibility yet","msgtype":"m.text"},"ts":1291138440000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Anyone here good with createRange, selections, etc?","msgtype":"m.text"},"ts":1291139280000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Ranges and selections confuse me.","msgtype":"m.text"},"ts":1291140360000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, me too.","msgtype":"m.text"},"ts":1291140720000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Yesterday I decided I wanted to write a wysiwyg.","msgtype":"m.text"},"ts":1291140721000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Now you have many problems.","msgtype":"m.text"},"ts":1291140722000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Now you have problem{2,}","msgtype":"m.text"},"ts":1291141080000,"senderName":"Workshiva","senderId":"Workshiva@irc"},
{"content":{"body":"I like the word \"issues\"","msgtype":"m.text"},"ts":1291141320000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"ponders the value of changing <b> into <span> with font-weight: bold;","msgtype":"m.emote"},"ts":1291141380000,"senderName":"Workshiva","senderId":"Workshiva@irc"},
{"content":{"body":"Workshiva: From where?","msgtype":"m.text"},"ts":1291141440000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"In this page I'm working on","msgtype":"m.text"},"ts":1291141500000,"senderName":"Workshiva","senderId":"Workshiva@irc"},
{"content":{"body":"Well, actually, I'm moving a <th> and <td> out of a table, and to preserve the visuals I need to make the part from the th bold somehow","msgtype":"m.text"},"ts":1291141560000,"senderName":"Workshiva","senderId":"Workshiva@irc"},
{"content":{"body":"Some people, when presented with this problem think \"I know, I'll use <b>\". Now they have change comments.","msgtype":"m.text"},"ts":1291141620000,"senderName":"Workshiva","senderId":"Workshiva@irc"},
{"content":{"body":"doesn't understand Workshiva's problem","msgtype":"m.emote"},"ts":1291142040000,"senderName":"beowulf","senderId":"beowulf@irc"},
{"content":{"body":"TabAtkins: waht's an effective way to report a bug like https://bugzilla.mozilla.org/show_bug.cgi?id=614864 to people responsible for Google search front end code?","msgtype":"m.text"},"ts":1291143000000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: I don't know the proper official way.  I just use internal Buzz, and it finds its way to the right people.  ^_^","msgtype":"m.text"},"ts":1291143660000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'll push it along, and also ask for a public way to report it and get back to you.","msgtype":"m.text"},"ts":1291143720000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: thanks","msgtype":"m.text"},"ts":1291143721000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"othermaciej: I haven't fully understood your email to public-html-testsuite, but it seems a bit like the \"doctor, doctor, it hurts when I do this\" joke","msgtype":"m.text"},"ts":1291143780000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: look at the test I cited","msgtype":"m.text"},"ts":1291143781000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"jgraham: is there a way to do it \"right\", but still report each assertion independently in the output?","msgtype":"m.text"},"ts":1291143840000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"You're not supposed to create multiple independent tests where the result of one depends on dom manipulation in another","msgtype":"m.text"},"ts":1291143841000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I know","msgtype":"m.text"},"ts":1291143842000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"that's why I assume I did it \"wrong\"","msgtype":"m.text"},"ts":1291143843000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"but I like the output produced by my version a lot more than what happens if I do it in the intended way","msgtype":"m.text"},"ts":1291143900000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"If they are logically independent tests they should have seperate test() functions","msgtype":"m.text"},"ts":1291143901000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"in fact, I don't see anything wrong with the way I did it, other than grungy syntax and failing to match the intended philosophy of the test framework","msgtype":"m.text"},"ts":1291143902000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"what if they are dependent, but I want to report each result independently?","msgtype":"m.text"},"ts":1291143960000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"\"don't do that\"","msgtype":"m.text"},"ts":1291143961000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"-> food","msgtype":"m.emote"},"ts":1291143962000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"biab","msgtype":"m.text"},"ts":1291143963000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"are you saying my use case is invalid?","msgtype":"m.text"},"ts":1291143964000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I don't think having a single result line that says \"The second half of the id tests, because at this point I started doing DOM mutation\" would improve the quality of my tests","msgtype":"m.text"},"ts":1291144020000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Heck yes, finally did it.","msgtype":"m.text"},"ts":1291144021000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"and even for fully independent tests, having to wrap it in test() { function() { assert_equals(... seems like needless verbiage","msgtype":"m.text"},"ts":1291144022000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: Given the simplicity of your DOM manipulations, your test is probably fine","msgtype":"m.text"},"ts":1291146000000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: besides my theoretical problem with going against the philosophy (which I'm satisfied to ignore), I think the syntax for doing a series of assertions and reporting on each independently is a bit overly verbose","msgtype":"m.text"},"ts":1291146060000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"for this test at least, I would have found it handy to be able to say test_equals(function() { return \"foo\"; }, \"foo\");","msgtype":"m.text"},"ts":1291146120000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: Possibly, but that seems to be optimising for your specific case","msgtype":"m.text"},"ts":1291146180000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"well, I expect any script test with many assertions would benefit","msgtype":"m.text"},"ts":1291146181000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"almost any non-trivial script test is likely to have a dozen or so assertions which are worth reporting independently","msgtype":"m.text"},"ts":1291146182000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"It would have the side effect of moving all the calls to e.g. setAttribute out of the try/catch","msgtype":"m.text"},"ts":1291146183000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"the other possibility is to report each assertion, not just each test","msgtype":"m.text"},"ts":1291146184000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"that would have also satisfied my goals and would be syntactically nicer","msgtype":"m.text"},"ts":1291146240000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: Not necessarily e.g. Opera house style is one test/file","msgtype":"m.text"},"ts":1291146241000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"doing this set of id tests as one test per file would be a poor way to do it","msgtype":"m.text"},"ts":1291146242000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"it would be even more wastefully verbose","msgtype":"m.text"},"ts":1291146300000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Reporting each assertion seems very bad because, by design, the number of assertions can vary","msgtype":"m.text"},"ts":1291146301000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"WebKit style is to put related tests for one feature in one file","msgtype":"m.text"},"ts":1291146302000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"It seems like you can get most of what you want by having an array of functions and running each in turn","msgtype":"m.text"},"ts":1291146303000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"what's the reason not to report each assertion?","msgtype":"m.text"},"ts":1291146360000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I do not understand the benfit of running 100 assertions and reporting only one vague pass/fail result","msgtype":"m.text"},"ts":1291146361000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Because one assertion might not be meaningful on its own","msgtype":"m.text"},"ts":1291146362000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"In this case it is","msgtype":"m.text"},"ts":1291146363000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yes, I could invent something myself, but I would like the test framework to be good for this kind of test","msgtype":"m.text"},"ts":1291146364000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I believe it is not","msgtype":"m.text"},"ts":1291146365000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"But in a more complex case one assertion !== one pass","msgtype":"m.text"},"ts":1291146366000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"you asked for feedback","msgtype":"m.text"},"ts":1291146420000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: Yes, I know :)","msgtype":"m.text"},"ts":1291146421000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"can you give me an example of an assertion that would not be worth reporting?","msgtype":"m.text"},"ts":1291146422000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"e.g. if you are checking that part of the dom has a given structure and you do that in several stages","msgtype":"m.text"},"ts":1291146480000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"e.g. first you check the number of child nodes for a given element","msgtype":"m.text"},"ts":1291146481000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"http://philip.html5.org/tests/canvas/suite/tests/2d.state.saverestore.stackdepth.html does 512 assertions and it's probably not very interesting to know that it's passed 512 of them","msgtype":"m.text"},"ts":1291146540000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"why would it be bad to report which of those steps failed?","msgtype":"m.text"},"ts":1291146541000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"then you check they have the expected tag names","msgtype":"m.text"},"ts":1291146542000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"It does report which of those steps failed","msgtype":"m.text"},"ts":1291146543000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"or are you saying that in some cases it might not make sense to even run the later assertions?","msgtype":"m.text"},"ts":1291146544000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"It doesn't even run them","msgtype":"m.text"},"ts":1291146545000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I can see how that is a possibility, but I suspect it is the rare case, not the common case","msgtype":"m.text"},"ts":1291146546000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"e.g. if you find that node x has 0 children there is no point in trying to find out what their tag names are","msgtype":"m.text"},"ts":1291146600000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"and indeed if you do try you are likely to run into more problems","msgtype":"m.text"},"ts":1291146601000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(assuming you expected it to have > 0 for the test to pass)","msgtype":"m.text"},"ts":1291146660000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"we use assertion-style tests in WebKit (using a different harness) and I don't think we've ever had a serious problem with this","msgtype":"m.text"},"ts":1291146661000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"so I am skeptical that it is the common case","msgtype":"m.text"},"ts":1291146662000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"nontheless, if all steps of a multi-step test pass, it seems useful to report that they all passed","msgtype":"m.text"},"ts":1291146663000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"at the very least while developing the test, so you can confirm that all the assertions you expected to be run were run","msgtype":"m.text"},"ts":1291146664000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Well that is possible of course","msgtype":"m.text"},"ts":1291146720000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But it doesn't change the fact that, for your case, multiple test()s are the intended approach ","msgtype":"m.text"},"ts":1291146721000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I agree that it is intended","msgtype":"m.text"},"ts":1291146780000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I find it overly syntactically inconvenient","msgtype":"m.text"},"ts":1291146781000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I think this type of test is not uncommon","msgtype":"m.text"},"ts":1291146782000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"while writing it, I saw sicking and weinig writing similar multi-assertion tests where it was worthwhile reporting each","msgtype":"m.text"},"ts":1291146840000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"(it was during TPAC)","msgtype":"m.text"},"ts":1291146841000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"sicking ended up wrapping it all in one test(), so you only get a single pass/fail result, which is unfortunate for anyone trying to use the test to find and fix bugs","msgtype":"m.text"},"ts":1291146900000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"So, I am open to suggestions for API changes that would improve the situation","msgtype":"m.text"},"ts":1291146901000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I suggested two possibilities","msgtype":"m.text"},"ts":1291146902000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"if you want, I can make them more concrete and detailed","msgtype":"m.text"},"ts":1291146903000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"(will post details on the list in that case)","msgtype":"m.text"},"ts":1291146960000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I think blurring the line between an assertion and a test() is the wrong approach. I think one test() === one thing that is reported to the top level harness","msgtype":"m.text"},"ts":1291147020000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"and one assertion === one thing required for a test to pass","msgtype":"m.text"},"ts":1291147021000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Adding a more convenient way to run multiple sync tests is possible","msgtype":"m.text"},"ts":1291147080000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Although, in all honesty, I think async tests are more common","msgtype":"m.text"},"ts":1291147081000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"that may be so; I chose to make a sync test because it was easier","msgtype":"m.text"},"ts":1291147140000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"but HTML5 has a lot of DOM interfaces that can be tested sync","msgtype":"m.text"},"ts":1291147141000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I expect there could be thousands of such tests","msgtype":"m.text"},"ts":1291147142000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I wouldn't expect they all can (or should) be tested with assert_equals though","msgtype":"m.text"},"ts":1291147200000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"e.g. you might well want to use assert_readonly","msgtype":"m.text"},"ts":1291147201000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"no, but I expect they can all be tested with the assert_* functions provided","msgtype":"m.text"},"ts":1291147202000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"So optimising for the specific case of assert_equals seems wrong","msgtype":"m.text"},"ts":1291147203000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I think another way to state my issue is this: test() combines multiple purposes","msgtype":"m.text"},"ts":1291147260000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"- It is the exception-catching block that prevents the test framework itself from failing to report a result","msgtype":"m.text"},"ts":1291147261000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"- It is the unit of result reporting","msgtype":"m.text"},"ts":1291147320000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"\"XHTML 1.0 - the first baby step toward a well-formed, valid web.\"","msgtype":"m.text"},"ts":1291147321000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"I guess there is some truth in this, since people will never write valid HTML if we don't force them :)","msgtype":"m.text"},"ts":1291147322000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"- It is the unit of stop-fail combination of assertions (such that if one fails you do not run the rest)","msgtype":"m.text"},"ts":1291147323000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Dashiva: XHTML proponents say that it's ok to send XHTML as text/html, so how is it different?","msgtype":"m.text"},"ts":1291147380000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's more like \"XHTML - another step towards ensuring that all pages are invalid\"","msgtype":"m.text"},"ts":1291147381000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"for tests where it is useful to report each test assertion separately, having all those properties for one construct, but a separate construct for the assert, is inconvenient","msgtype":"m.text"},"ts":1291147440000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I'll make some concrete proposals with worked examples","msgtype":"m.text"},"ts":1291147441000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I agree that adding *only* test_equals would suck, but I think adding a test_* for each assert_* is one viable option","msgtype":"m.text"},"ts":1291147442000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Hixie: It introduced an optional failure point by sending as application/xhtml+xml","msgtype":"m.text"},"ts":1291147500000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"othermaciej: If you were going to go down that path I would prefer test_assert or something where you pass the function in","msgtype":"m.text"},"ts":1291147501000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"another viable option is to report each assertion independently by default, and run all within a test by default, and add new constructs for the case where you want to bail after a failure, or combine reporting of several assertions","msgtype":"m.text"},"ts":1291147502000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Dashiva: text/html had an optional failure point too, called validation :-)","msgtype":"m.text"},"ts":1291147560000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I'll post something more precise to the list later today or tomorrow","msgtype":"m.text"},"ts":1291147561000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I really really dislike the idea of reporting each assertion seperatly","msgtype":"m.text"},"ts":1291147562000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"then you can tell me what details of my proposal suck","msgtype":"m.text"},"ts":1291147563000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"jgraham: why? We do that in mochitest which we use for firefox testing. It makes writing tests quite nice","msgtype":"m.text"},"ts":1291147620000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"I really dislike reporting just one result for many assertions","msgtype":"m.text"},"ts":1291147621000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"it makes the test much less useful for a partially-conforming implementation","msgtype":"m.text"},"ts":1291147622000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"and it makes it harder to see what the test tested, even if it passes","msgtype":"m.text"},"ts":1291147623000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"if there is really a legit reason to do it in some cases, it should be an unusual case and not the default behavior","msgtype":"m.text"},"ts":1291147680000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"jgraham: one thing that you can do is to by default only print failed assertions. Then you can easily handle having literally thousands of passing assertions without making the result unreadable ","msgtype":"m.text"},"ts":1291147681000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Hixie: This is true, but with xhtml a server admin can disable server-side scripting and set the mime-type for .html! :P","msgtype":"m.text"},"ts":1291147682000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"I kind of like printing the passing assertions as well, but I can see an argument either way","msgtype":"m.text"},"ts":1291147740000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"ah well, this is all water under the bridge anyway","msgtype":"m.text"},"ts":1291147741000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"othermaciej: It should also be noted that test(f) is a shorthand for async_test().step(f)","msgtype":"m.text"},"ts":1291147742000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"So the fact that test() does multiple things is just a convenience","msgtype":"m.text"},"ts":1291147743000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"othermaciej: i think it's a requirement to at least be able to hide them, but i don't care much if they are hidden or displayed by default","msgtype":"m.text"},"ts":1291147800000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"note that i think that showing/hiding should be an action the tester-person takes, not that the test itself takes","msgtype":"m.text"},"ts":1291147801000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: it should be easy to make a setup that can show only failures in the UI","msgtype":"m.text"},"ts":1291147860000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: true","msgtype":"m.text"},"ts":1291147861000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"also useful would be a failure count at the top, maybe","msgtype":"m.text"},"ts":1291147862000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"all you really need is a distinct class on the result rows that failed","msgtype":"m.text"},"ts":1291147863000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"sicking: The conceptual divide is that a test() corresponds to one thing that you want to test whereas an assertion is just a means to an end i.e. you might use many asserts to determine if you got the expected result of your test","msgtype":"m.text"},"ts":1291147864000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I often see tests that have var apssed = passed1 && passed2 && passed3 and so on","msgtype":"m.text"},"ts":1291147920000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Which is bad","msgtype":"m.text"},"ts":1291147921000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I don't ever see that in WebKit script tests","msgtype":"m.text"},"ts":1291147922000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"where we report each assertion","msgtype":"m.text"},"ts":1291147923000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I don't mind printing the results of asserts in the output","msgtype":"m.text"},"ts":1291147924000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: i'm not sure i understand the purpose of the test/assertion distinction","msgtype":"m.text"},"ts":1291147980000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: Did you see my earlier example?","msgtype":"m.text"},"ts":1291147981000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: no","msgtype":"m.text"},"ts":1291147982000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Where you do something (e.g. set innerHTML) and want to check that you get the DOM you expect","msgtype":"m.text"},"ts":1291147983000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"it's useful in the case where you want to make running an assertion conditional on a previous one passing","msgtype":"m.text"},"ts":1291147984000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"So you check a number of things about the resulting DOM","msgtype":"m.text"},"ts":1291148040000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"which I think is the rare case, not the common case","msgtype":"m.text"},"ts":1291148041000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Like the number of nodes, their names, their values, etc.","msgtype":"m.text"},"ts":1291148042000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"right, i'm not sure i've ever needed to do that","msgtype":"m.text"},"ts":1291148043000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"I don't think I have either, and I have written a lot of assertion-based tests for WebKit","msgtype":"m.text"},"ts":1291148044000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"(answering maciej)","msgtype":"m.text"},"ts":1291148045000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"I see that sort of thing all the time","msgtype":"m.text"},"ts":1291148046000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Philip` had another example from his canvas tests","msgtype":"m.text"},"ts":1291148100000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"can you point to it?","msgtype":"m.text"},"ts":1291148101000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"as in, got link?","msgtype":"m.text"},"ts":1291148102000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"I would be highly surprised if it is the majority case","msgtype":"m.text"},"ts":1291148103000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"indeed","msgtype":"m.text"},"ts":1291148160000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"http://philip.html5.org/tests/canvas/suite/tests/2d.state.saverestore.stackdepth.html","msgtype":"m.text"},"ts":1291148161000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"why do you need the assert/test distinction there?","msgtype":"m.text"},"ts":1291148220000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"It was at least a rather common case last time I used a harness with a similar design (testing pure ECMAScript)","msgtype":"m.text"},"ts":1291148221000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"isn't sure he's understanding the argument","msgtype":"m.emote"},"ts":1291148222000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Because you don't want 512 individual assertions","msgtype":"m.text"},"ts":1291148280000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"why not?","msgtype":"m.text"},"ts":1291148281000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"That test should contribute 1 to the overall results","msgtype":"m.text"},"ts":1291148282000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"why?","msgtype":"m.text"},"ts":1291148283000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"the number of pass/fails are meaningless. It's fails != 0 that matters","msgtype":"m.text"},"ts":1291148340000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Because it tests a single point from the spec","msgtype":"m.text"},"ts":1291148341000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I think it would be useful if that test reported exactly which cases passed or failed","msgtype":"m.text"},"ts":1291148342000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"first of all that's not really true","msgtype":"m.text"},"ts":1291148343000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"that testcase tests at least 3 different APIs on canvas","msgtype":"m.text"},"ts":1291148400000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"in the unlikely case that only some of the cases fail, rather than all or none, it's very useful to know precisely which all at once","msgtype":"m.text"},"ts":1291148401000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"The number of fails matters in a spec conformance testsuite","msgtype":"m.text"},"ts":1291148402000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"how?","msgtype":"m.text"},"ts":1291148403000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"either a browser passes or it fails ","msgtype":"m.text"},"ts":1291148404000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"it matters if people start marketing their x% pass rate and comparing to someone else's y%","msgtype":"m.text"},"ts":1291148460000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Not the way it is presented at the moment","msgtype":"m.text"},"ts":1291148461000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"but I don't think tests should optimize for that","msgtype":"m.text"},"ts":1291148462000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I don't think I am optimising for that","msgtype":"m.text"},"ts":1291148463000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"indeed. It's really really hard to get people to write tests as it is, i don't want to lay the additional constraint of asking them to worry about marketing as well","msgtype":"m.text"},"ts":1291148520000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"FWIW qunit uses a similar design","msgtype":"m.text"},"ts":1291148521000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"i have never cared about how many tests i fail. Only if i the fail count is 0 or not","msgtype":"m.text"},"ts":1291148522000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"As does dojo object harness","msgtype":"m.text"},"ts":1291148523000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"So there is at least precedent for the one test / multiple assertions in successful existing harnesses","msgtype":"m.text"},"ts":1291148580000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"There is also precedent for the other way","msgtype":"m.text"},"ts":1291148581000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I don't think precedent is a slam dunk","msgtype":"m.text"},"ts":1291148640000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"indeed. We're not really breaking new ground here, so I don't think we need to worry about doing something so outragous that people will ask if there is precedence or not","msgtype":"m.text"},"ts":1291148641000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Sure. But my point is that I am not proposing something unreasonable","msgtype":"m.text"},"ts":1291148642000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"IMO we want to make it easy to write tests that are useful to implementors","msgtype":"m.text"},"ts":1291148643000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"you're not. I just think there are better solutions","msgtype":"m.text"},"ts":1291148644000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1291148645000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"reporting failing assertions individually, and reporting multiple failures at once, is generally better for implementors","msgtype":"m.text"},"ts":1291148700000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"for two reasons:","msgtype":"m.text"},"ts":1291148701000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"(1) you can fix more bugs at once pass without having to tackle failing asserts one at a time","msgtype":"m.text"},"ts":1291148702000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"(2) if your implementation is not fully conforming, you can more usefully use the test as a regression test, because you will see if assertions past the first failure go from fail to pass","msgtype":"m.text"},"ts":1291148703000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"(and bonus reason (3), sometimes the first failure is hard to fix but later failures are easy to fix)","msgtype":"m.text"},"ts":1291148760000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"If things are independent in the way you suggest they are seperate test()s, not seperate asserts","msgtype":"m.text"},"ts":1291148761000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"therefore, in my opinion the harness should optimize for that case","msgtype":"m.text"},"ts":1291148762000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"by making it the obvious and easy path to create tests that work that way","msgtype":"m.text"},"ts":1291148763000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"If the syntax of test()s is too difficult let's wok on that","msgtype":"m.text"},"ts":1291148820000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"*work","msgtype":"m.text"},"ts":1291148821000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: i still don't understand the need for the test/assert distinction","msgtype":"m.text"},"ts":1291148822000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"i'd rather not ever see anyone be asked \"can you merge these three tests into one with three asserts as they kind'a test the same thing\"","msgtype":"m.text"},"ts":1291148880000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: Then I don't know how to convince you. I see people perform contortions in tests to make the result depend on multiple independent things all the time","msgtype":"m.text"},"ts":1291148881000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(or the other way obviously)","msgtype":"m.text"},"ts":1291148882000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"If you can write it as three test()s then it shouldn't be one test","msgtype":"m.text"},"ts":1291148883000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"you can write *any* test as a single test()","msgtype":"m.text"},"ts":1291148940000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Right","msgtype":"m.text"},"ts":1291148941000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"That's what I said","msgtype":"m.text"},"ts":1291148942000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"just do all the testing and set a boolean to false once anything fails. At the end do test(boolean) (or whatever the syntax is, i forget)","msgtype":"m.text"},"ts":1291148943000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"i also argue that there is no such thing as testing a single feature","msgtype":"m.text"},"ts":1291148944000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"That is exactly what I want to avoid","msgtype":"m.text"},"ts":1291148945000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"in HTML5 test suite syntax, I have to do this:","msgtype":"m.text"},"ts":1291149000000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"test(function() {","msgtype":"m.text"},"ts":1291149001000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"        assert_equals(document.getElementById(\"abcd\"), document.getElementsByTagName(\"i\")[0]);","msgtype":"m.text"},"ts":1291149002000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"    }, \"User agents must associate the element with an id value for purposes of getElementById.\");","msgtype":"m.text"},"ts":1291149003000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"it is *very* common for our regression tests to catch regressions in features they don't think they are testing","msgtype":"m.text"},"ts":1291149004000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"The \"set a boolean to false and make all assertions just assert_true\")","msgtype":"m.text"},"ts":1291149005000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"but it could be this:","msgtype":"m.text"},"ts":1291149006000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"sicking: Yes, I am well aware of this fact","msgtype":"m.text"},"ts":1291149007000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But I don't see how it is related","msgtype":"m.text"},"ts":1291149008000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"test_equals('document.getElementById(\"abcd\")', 'document.getElementsByTagName(\"i\")[0])', \"User agents must associate the element with an id value for purposes of getElementById.\");","msgtype":"m.text"},"ts":1291149060000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Except that you are encouraged to put all code inside *some* test() ","msgtype":"m.text"},"ts":1291149061000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"i thought the argument of having test/assert distinction was so that you can test separate features in separate test()s","msgtype":"m.text"},"ts":1291149062000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"(or skip the message if the expressions are informative enough)","msgtype":"m.text"},"ts":1291149063000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: I hate the \"code as a string\" pattern","msgtype":"m.text"},"ts":1291149064000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Also in the webkit tests :)","msgtype":"m.text"},"ts":1291149120000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"or alternately, if I could wrap all my asserts in a single test(), I could drop the single-qoutes from that","msgtype":"m.text"},"ts":1291149121000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"(with test() being there mainly to centralize the exception-catching)","msgtype":"m.text"},"ts":1291149122000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"i'm not sure what the test() pattern is really buying us. Why can't we just use assertions direction","msgtype":"m.text"},"ts":1291149180000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"I don't see the benefit of requiring the more verbose version to get detailed result reporting","msgtype":"m.text"},"ts":1291149181000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"err","msgtype":"m.text"},"ts":1291149182000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"directly","msgtype":"m.text"},"ts":1291149183000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"and make the test harness hook into onerror to catch exceptions","msgtype":"m.text"},"ts":1291149184000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"it seems like that discourages creating tests with detailed result reporting","msgtype":"m.text"},"ts":1291149185000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"sicking: Because then you can only have one test per file or have to manually deal with unexpected exceptions","msgtype":"m.text"},"ts":1291149186000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"at some point in the future browsers will implement onerror, at which point they'll start failing if they erronously throw somewhere","msgtype":"m.text"},"ts":1291149187000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"onerror is not yet supported enough to do that","msgtype":"m.text"},"ts":1291149188000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Anyway I will haveto bow out of this conversation for a bit","msgtype":"m.text"},"ts":1291149240000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"othermaciej: but it will be soon enough (say a year or two) i'm assuming","msgtype":"m.text"},"ts":1291149241000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"anyway, I have to run to grab lunch","msgtype":"m.text"},"ts":1291149242000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1291149243000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"(while I remember, another good example of why you want seperate assert() functions is to check that a feature exists before you try to do something with it, and fail if it does not)","msgtype":"m.text"},"ts":1291149600000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"sicking: OK, I'll write the ISSUE-27 CP","msgtype":"m.text"},"ts":1291150020000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"sicking: when's it due?","msgtype":"m.text"},"ts":1291150080000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"hober: yay!! thanks!","msgtype":"m.text"},"ts":1291150081000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"hober: it's way overdue already :( I'll ask maciej when he gets back from food what would be a good new due date","msgtype":"m.text"},"ts":1291150082000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"ahh, ok","msgtype":"m.text"},"ts":1291150083000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"good times :)","msgtype":"m.text"},"ts":1291150140000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"othermaciej: any chance I can get a deadline in the future for the host-the-rel-registry-on-the-µf-wiki ISSUE-27 CP?","msgtype":"m.text"},"ts":1291150200000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"hober: if you volunteer on the list and give a specific reasonable deadline, I expect the chairs would accept that","msgtype":"m.text"},"ts":1291150260000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"(like 1-2 weeks from today max)","msgtype":"m.text"},"ts":1291150261000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1291150262000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"sounds good","msgtype":"m.text"},"ts":1291150263000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"jgraham: i don't know why you'd want to do that. Just use the feature and if it fails then you fail the test","msgtype":"m.text"},"ts":1291150440000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sent","msgtype":"m.text"},"ts":1291150441000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"jgraham: the only thing i could think of is if you'd want to use some feature that isn't in HTML5, and thus shouldn't be relied upon. But first of all I can't think of a case when that would be, second in this to me seemingly very rare case, you can always just use feature detection and separate code paths. No need for harness support for this.","msgtype":"m.text"},"ts":1291150560000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Hixie: btw I strongly disagree about linking tests to the spec. Unless we link tests to the spec it is almost impossible to determine if we have coverage of a particular area","msgtype":"m.text"},"ts":1291152480000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I don't think questioning invalid tests is the main problem","msgtype":"m.text"},"ts":1291152540000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"linking tests to the spec doesn't help you with determining coverage either, unless you plan to have an ungodly number of links per test and plan to be updating them frequently","msgtype":"m.text"},"ts":1291152541000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Why an ungodly number of links per test? I don't think it is a disaster if tests fail to link to APIs that they only use for setup","msgtype":"m.text"},"ts":1291152600000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Because those APIs need detailed tests of their own","msgtype":"m.text"},"ts":1291152601000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(indeed it is probably a good thing)","msgtype":"m.text"},"ts":1291152660000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Certainly what Philip` has done with the <canvas> tests is extremely useful","msgtype":"m.text"},"ts":1291152661000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: the vast majority of tests will be testing combinations of features","msgtype":"m.text"},"ts":1291156020000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"jgraham: and even many of the tests that don't test combinations will be testing things that are specified across many sections","msgtype":"m.text"},"ts":1291156021000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"jgraham: consider any test for 'unload'","msgtype":"m.text"},"ts":1291156080000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I don't think that changes my point","msgtype":"m.text"},"ts":1291157160000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"so when will some decisions be announced?","msgtype":"m.text"},"ts":1291157760000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"when i spoke to the chairs a few weeks ago, they said \"monday\"","msgtype":"m.text"},"ts":1291157820000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but that was last monday","msgtype":"m.text"},"ts":1291157821000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so...","msgtype":"m.text"},"ts":1291157822000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"monday\" is a great date","msgtype":"m.text"},"ts":1291158120000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"they were referring to last monday","msgtype":"m.text"},"ts":1291158240000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"22nd","msgtype":"m.text"},"ts":1291158241000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"isn't that the Monday before last?","msgtype":"m.text"},"ts":1291158600000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not that it matters","msgtype":"m.text"},"ts":1291158601000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"this monday\" is yesterday","msgtype":"m.text"},"ts":1291158602000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"last monday\" is the monday before","msgtype":"m.text"},"ts":1291158603000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's Wednesday here","msgtype":"m.text"},"ts":1291158604000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it's tuesday until you've slept! :-P","msgtype":"m.text"},"ts":1291158660000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I wonder when the ISSUE-41 decision will be published.","msgtype":"m.text"},"ts":1291158661000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"last Monday","msgtype":"m.text"},"ts":1291158662000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"with apologies to markp, I must be new here. :)","msgtype":"m.text"},"ts":1291158720000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"Hixie, ooh, that can lead to six-day weeks","msgtype":"m.text"},"ts":1291158721000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, i used to live monday,tuesday,wednesday,thursday,friday,weekend back when i was at netscape","msgtype":"m.text"},"ts":1291158722000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and my \"friday\" started rather late","msgtype":"m.text"},"ts":1291158723000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"28-hour days, or just long weekends?","msgtype":"m.text"},"ts":1291158724000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"28","msgtype":"m.text"},"ts":1291158780000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"What was the problem in canvas with something having different behavior based on rounding?  Something about arcs?","msgtype":"m.text"},"ts":1291159080000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"is writing an email.","msgtype":"m.emote"},"ts":1291159081000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"there was a problem once with 0..2pi being either a full circle or a dot depending on how you rounded","msgtype":"m.text"},"ts":1291159082000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but i think we resolved it","msgtype":"m.text"},"ts":1291159083000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ah, right.","msgtype":"m.text"},"ts":1291159140000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"goes and looks it up.","msgtype":"m.emote"},"ts":1291159141000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Dammit, I keep typing \"whatwg.orc/C\".  At least chrome suggests the correct url to me now.","msgtype":"m.text"},"ts":1291159142000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"shouldn't you just be able to type \"w\" by now","msgtype":"m.text"},"ts":1291159200000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Not at work.  For reasons I haven't yet gotten the energy to diagnose, Chrome on my work linux machine no longer has permissions to my profile, so autocomplete is totally dead.","msgtype":"m.text"},"ts":1291159320000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1291159321000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"good times","msgtype":"m.text"},"ts":1291159322000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ah, the way we solved the arcTo() issue doesn't help here.","msgtype":"m.text"},"ts":1291159560000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Darn.","msgtype":"m.text"},"ts":1291159561000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"is trying to solve the problem of interpolating colors in hsl space when the hues are 180deg apart.","msgtype":"m.emote"},"ts":1291159562000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The best I've got so far is (1) Shrug, or (2) when transitioning, always increase/decrease/wrap/don't wrap the hue.","msgtype":"m.text"},"ts":1291159620000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(2) solves the problem, but makes other cases bad.  So I'm leaning towards (1).","msgtype":"m.text"},"ts":1291159621000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"my suggestion is pick your favourite colour, and then when you're in that one edge case, require that the transition go in the direction that would go through your favourite colour","msgtype":"m.text"},"ts":1291159680000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"That doesn't work when I'm transitioning to/from my favorite color.","msgtype":"m.text"},"ts":1291159681000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"and when one of the two ends is that colour, um, do the same with your second-favourite colour, i guess","msgtype":"m.text"},"ts":1291159682000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"And before you suggest \"pick two\", what if my two favorites are 180deg apart?","msgtype":"m.text"},"ts":1291159683000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Dammit.","msgtype":"m.text"},"ts":1291159740000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"or define your favourite colour as something that you can't specify, e.g. if you only accept integers, give a value with a fractional component","msgtype":"m.text"},"ts":1291159741000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"also, if your favourite colour is white or black, i can't help you","msgtype":"m.text"},"ts":1291159742000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(or grey)","msgtype":"m.text"},"ts":1291159800000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Actually, that doesn't solve the problem anyway.  The issue isnt' that 180deg apart is ambiguous (that's solveable), but rather than rounding can make something be in or out of the edge case unpredictably.","msgtype":"m.text"},"ts":1291159801000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"aah","msgtype":"m.text"},"ts":1291159802000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"can't you define the rounding algorithm?","msgtype":"m.text"},"ts":1291159803000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Which was the problem with arcTo(), but you solved that.","msgtype":"m.text"},"ts":1291159804000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"We don't even define the numeric precision of CSS numbers.","msgtype":"m.text"},"ts":1291159805000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1291159806000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well","msgtype":"m.text"},"ts":1291159807000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(We should.)","msgtype":"m.text"},"ts":1291159808000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"maybe","msgtype":"m.text"},"ts":1291159860000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"with arcTo the solution iirc was to make it so that there was no edge case, right?","msgtype":"m.text"},"ts":1291159861000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yes.","msgtype":"m.text"},"ts":1291159862000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i recommend the same approach.","msgtype":"m.text"},"ts":1291159863000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"good luck!","msgtype":"m.text"},"ts":1291159864000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ducks","msgtype":"m.emote"},"ts":1291159865000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"@_@","msgtype":"m.text"},"ts":1291159866000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The \"make it so there's no edge case\" approach is my (2), which unfortunately it's great for half of all gradients.","msgtype":"m.text"},"ts":1291159920000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"you could always do (3), have the author specify whether to transition clockwise or anticlockwise","msgtype":"m.text"},"ts":1291159921000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"For example, if the strategy is \"never wrap the hue\", then you can't actually transition from purple to orange through red.","msgtype":"m.text"},"ts":1291159922000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That doesn't solve the problem, Hixie.","msgtype":"m.text"},"ts":1291159923000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"why not?","msgtype":"m.text"},"ts":1291159924000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Or, well, it does if you mean \"do (2), but give the author a choice\".","msgtype":"m.text"},"ts":1291159980000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"essentially, yeah, make the author pick which solution to use","msgtype":"m.text"},"ts":1291159981000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but that's lame most of hte time","msgtype":"m.text"},"ts":1291159982000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"But, still not very well.  *None* of the choices interpolate well in general.","msgtype":"m.text"},"ts":1291159983000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So I'm going with \"shrug\" as my answer.","msgtype":"m.text"},"ts":1291160040000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"boo","msgtype":"m.text"},"ts":1291160041000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"In animations and gradients, the author can get around it by providing a third color between the two points.","msgtype":"m.text"},"ts":1291160042000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You can't do that in Transitions currently, but you will once we support keyframes in transitions.","msgtype":"m.text"},"ts":1291160100000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Which'll be like Transitions 4 I guess.","msgtype":"m.text"},"ts":1291160101000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yay, the bug feature is still working","msgtype":"m.text"},"ts":1291160102000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(if you don't specify it, some browser will get big adoption and force the rounding of css values to be defined a particular way)","msgtype":"m.text"},"ts":1291160103000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"bug feature?","msgtype":"m.text"},"ts":1291160104000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"on html5.org","msgtype":"m.text"},"ts":1291160105000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"puts W3C bugs in a separate column","msgtype":"m.text"},"ts":1291160160000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: will this be for any properties specified in hsl? what if you want to author in hsl but interpolate in rgb?","msgtype":"m.text"},"ts":1291160161000,"senderName":"bckenny","senderId":"bckenny@irc"},
{"content":{"body":"oh on the tracker?","msgtype":"m.text"},"ts":1291160162000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"looks","msgtype":"m.emote"},"ts":1291160163000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"neat","msgtype":"m.text"},"ts":1291160164000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or is this for approximately the same time as transition-strategy or what have you?","msgtype":"m.text"},"ts":1291160165000,"senderName":"bckenny","senderId":"bckenny@irc"},
{"content":{"body":"bckenny: It would just be an interpolation strategy.  It doesn't matter how you specify the endpoints.","msgtype":"m.text"},"ts":1291160166000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1291160220000,"senderName":"bckenny","senderId":"bckenny@irc"},
{"content":{"body":"A color is a color is a color, after all, regardless of the colorspace you use.","msgtype":"m.text"},"ts":1291160221000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: di you need an answer to http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2010-August/027987.html ?","msgtype":"m.text"},"ts":1291160222000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"It's just when you try to draw \"straigt lines\" between colors that the colorspace matters.","msgtype":"m.text"},"ts":1291160223000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"you could sidestep the problem then by requiring that the browsers draw wavy lines","msgtype":"m.text"},"ts":1291160280000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"The nature of the curve varies from space to space as well.","msgtype":"m.text"},"ts":1291160281000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"the extra color stop is a fine (eventual) solution","msgtype":"m.text"},"ts":1291160340000,"senderName":"bckenny","senderId":"bckenny@irc"},
{"content":{"body":"though it is unfortunate that browsers and anyone generating dynamic colors will have to detect that situation","msgtype":"m.text"},"ts":1291160400000,"senderName":"bckenny","senderId":"bckenny@irc"},
{"content":{"body":"oh, tab, i have another solution!","msgtype":"m.text"},"ts":1291160401000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but it's ambiguous, so what are you going to do","msgtype":"m.text"},"ts":1291160402000,"senderName":"bckenny","senderId":"bckenny@irc"},
{"content":{"body":"pick your favourite colour again defined as something that can't be specified exactly, and then require that that colour be transitioned to in between each other colour","msgtype":"m.text"},"ts":1291160403000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that way it's never ambiguous, right?","msgtype":"m.text"},"ts":1291160404000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Right, that's just another (2) strategy, which is guaranteed to be bad for about half of all transitions.","msgtype":"m.text"},"ts":1291160460000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(It's equivalent to \"always wrap the hue\", with the wrap point being the favorite color rather than 0deg.)","msgtype":"m.text"},"ts":1291160461000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie, no, it sort of resolved itself I think","msgtype":"m.text"},"ts":1291160520000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"still need to update CSSOM View","msgtype":"m.text"},"ts":1291160521000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1291160580000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: true","msgtype":"m.text"},"ts":1291160581000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: but it has the advantage of making the web prettier for you","msgtype":"m.text"},"ts":1291160582000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: as you'd see your favourite colour more often","msgtype":"m.text"},"ts":1291160583000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"This is true.","msgtype":"m.text"},"ts":1291160584000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(I don't need to make my favorite color unspecifable if I just specify two favorite colors that aren't 180deg apart.)","msgtype":"m.text"},"ts":1291160585000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"well if you have two favourite colours, sure","msgtype":"m.text"},"ts":1291160700000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"They can be 1deg apart.","msgtype":"m.text"},"ts":1291160701000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ultraviolet","msgtype":"m.text"},"ts":1291160702000,"senderName":"bckenny","senderId":"bckenny@irc"},
{"content":{"body":"take that, gamut","msgtype":"m.text"},"ts":1291160703000,"senderName":"bckenny","senderId":"bckenny@irc"},
{"content":{"body":"Pretty sure ultraviolet doesn't exist in the sRGB space at all, let alone the sRGB gamut.","msgtype":"m.text"},"ts":1291160704000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hi","msgtype":"m.text"},"ts":1291161000000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"we have found some issue","msgtype":"m.text"},"ts":1291161001000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"i want auto \"lang\" attribute","msgtype":"m.text"},"ts":1291161060000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"if i do not set it manualy","msgtype":"m.text"},"ts":1291161120000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"What's the problem you're trying to solve?","msgtype":"m.text"},"ts":1291161121000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i have static html page","msgtype":"m.text"},"ts":1291161122000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"TabAtkins: is there a www-style IRC channel?","msgtype":"m.text"},"ts":1291161180000,"senderName":"jamesr_","senderId":"jamesr_@irc"},
{"content":{"body":"i want  that it works w/o js","msgtype":"m.text"},"ts":1291161181000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"jamesr_: Are you already on the w3.org server?","msgtype":"m.text"},"ts":1291161182000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"nope. should i be?","msgtype":"m.text"},"ts":1291161240000,"senderName":"jamesr_","senderId":"jamesr_@irc"},
{"content":{"body":"so a while ago aryeh suggested changing th.scope and td.wrap to be limited to known values, which is a change away from every browser, but makes some modicum of sense... any opinions?","msgtype":"m.text"},"ts":1291161241000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yeah.  irc.w3.org, port 6665.","msgtype":"m.text"},"ts":1291161242000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Then channel #css","msgtype":"m.text"},"ts":1291161243000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"and i want that this will be multilangage","msgtype":"m.text"},"ts":1291161244000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"are there real people there?","msgtype":"m.text"},"ts":1291161245000,"senderName":"jamesr_","senderId":"jamesr_@irc"},
{"content":{"body":"Hixie: I support the change.","msgtype":"m.text"},"ts":1291161246000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jamesr_: Yes, though we don't pay a ton of attention.  We'll see a question eventually, though.","msgtype":"m.text"},"ts":1291161247000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jamesr_: It helps if you know who you want to talk to and can target them.","msgtype":"m.text"},"ts":1291161300000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"CSS + HTML5 question...","msgtype":"m.text"},"ts":1291161301000,"senderName":"cying","senderId":"cying@irc"},
{"content":{"body":"what do the width and height attributes mean for images in HTML5? how do they react when styled?","msgtype":"m.text"},"ts":1291161302000,"senderName":"cying","senderId":"cying@irc"},
{"content":{"body":"<span class=\"ru\">привет</span><span class=\"en\">hi</span>","msgtype":"m.text"},"ts":1291161303000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"bga_: You haven't described a problem yet.","msgtype":"m.text"},"ts":1291161304000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"cying: That's defined in the rendering chapter of HTML5.","msgtype":"m.text"},"ts":1291161305000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"what they _mean_ is defined in the elements section","msgtype":"m.text"},"ts":1291161360000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what they do is defined in the rendering section","msgtype":"m.text"},"ts":1291161361000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"cying: Simply, @width and @height are presentational hints for the 'width' and 'height' CSS properties.","msgtype":"m.text"},"ts":1291161362000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"span{ display:none; }  :lang(ru) span.ru { display: inline; }; :lang(en) span.en { display: inline; };","msgtype":"m.text"},"ts":1291161363000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"TabAtkins: hmmm","msgtype":"m.text"},"ts":1291161364000,"senderName":"cying","senderId":"cying@irc"},
{"content":{"body":"Hixie: cool","msgtype":"m.text"},"ts":1291161365000,"senderName":"cying","senderId":"cying@irc"},
{"content":{"body":"cying: Pres hints are treated as author-level rules that are less specific than any other rule.","msgtype":"m.text"},"ts":1291161366000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"do you understand me? :)","msgtype":"m.text"},"ts":1291161420000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"TabAtkins: i'm wondering what people think about -moz-crisp-edges for the image-rendering property. i'm interested in giving it a non-shit name and implementing it","msgtype":"m.text"},"ts":1291161421000,"senderName":"jamesr_","senderId":"jamesr_@irc"},
{"content":{"body":"in webkit","msgtype":"m.text"},"ts":1291161422000,"senderName":"jamesr_","senderId":"jamesr_@irc"},
{"content":{"body":"bga_: dir=\"auto\" was added to HTML a few weeks ago, http://www.whatwg.org/specs/web-apps/current-work/complete.html#attr-dir-auto","msgtype":"m.text"},"ts":1291161423000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"bga_: Your design isn't good.  If the page is loaded without CSS, the user will see both the russian and english words.","msgtype":"m.text"},"ts":1291161424000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"bga_: oh, wait, you're asking for lang=auto","msgtype":"m.text"},"ts":1291161425000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"nevermind","msgtype":"m.text"},"ts":1291161426000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: so if i were to say: <img width=\"500\" height=\"500\" src=\"...\"> and then style it with { width: 250px; height: auto; } it'll size it to 250px x 250px?","msgtype":"m.text"},"ts":1291161427000,"senderName":"cying","senderId":"cying@irc"},
{"content":{"body":"what tab said","msgtype":"m.text"},"ts":1291161428000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"bga_: If you're wanting to give different languages on the same page and display only one of them, that should be done server-side as you build the page.","msgtype":"m.text"},"ts":1291161429000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"cying: Yes.","msgtype":"m.text"},"ts":1291161480000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"html doesn't support in-page localisation","msgtype":"m.text"},"ts":1291161481000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: coooool","msgtype":"m.text"},"ts":1291161482000,"senderName":"cying","senderId":"cying@irc"},
{"content":{"body":"cying: Or, um, whatever height:auto does for replaced elements.  It's magic.","msgtype":"m.text"},"ts":1291161483000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: cool. i like magic :)","msgtype":"m.text"},"ts":1291161484000,"senderName":"cying","senderId":"cying@irc"},
{"content":{"body":"Hixie :(","msgtype":"m.text"},"ts":1291161485000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"bga_: why would you want to send the user multiple copies of the page? just send them the copy that has the language you want","msgtype":"m.text"},"ts":1291161540000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i want static page w/o backend","msgtype":"m.text"},"ts":1291161541000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"bga_: in practice, localisation requires changing much more than just text, anyway. For example, localising to arabic means moving the scrollbar to a different position. To Japanese might mean having hte entire layout be vertical instead of horizontal. To French will mean different date styles. etc.","msgtype":"m.text"},"ts":1291161542000,"senderName":"Hixie","senderId":"Hixie@irc"}
]