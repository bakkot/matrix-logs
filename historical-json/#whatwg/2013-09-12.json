[
{"content":{"body":"what's the thing that's supposed to make reset stylesheets go away? `default`? it's not `initial`, is it?","msgtype":"m.text"},"ts":1378975808000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"It's called \"unset\" now.","msgtype":"m.text"},"ts":1378976259000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"== initial or inherit, whichever is correct.","msgtype":"m.text"},"ts":1378976278000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"thanks. and is there a nesting spec still active?","msgtype":"m.text"},"ts":1378976491000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"hierarchies, got it","msgtype":"m.text"},"ts":1378976536000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: The syntax in Hierarchies isn't what we're going to use.  It's too annoying, and prevents some stuff that SASS allows, like \"foo { bar & {...} }\".","msgtype":"m.text"},"ts":1378977726000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic_: To do that, we need an explicit wrapper switching our context to selectors, and I think I'm just going to do {}.","msgtype":"m.text"},"ts":1378977793000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Like \"foo { color: red; { bar { color: blue; } } }\"","msgtype":"m.text"},"ts":1378977811000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That's really hard to read here in linear form, but it's fine when properly indented in a stylesheet. ^_^","msgtype":"m.text"},"ts":1378977831000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie_: the task queuing part of Fetch is broken","msgtype":"m.text"},"ts":1378978091000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: yay for closing issues","msgtype":"m.text"},"ts":1378978247000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: fascinating. FWIW I've never been able to use SASS's ampersand-afterwards style very effectively, so something without it seems OK. But I'll trust you on this one.","msgtype":"m.text"},"ts":1378978458000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: ya, I thought it was time.","msgtype":"m.text"},"ts":1378978470000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: The explicit context also lets you drop the ampersand from \"& bar\", like SASS does, which is nice.","msgtype":"m.text"},"ts":1378978513000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: why doesn't SASS's exact syntax work? (Sorry I know these are nooby questions that could be answered by finding the right forum threads.)","msgtype":"m.text"},"ts":1378978562000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"SASS is willing to do arbitrary lookahead to disambiguate selectors and properties.  CSS isn't.","msgtype":"m.text"},"ts":1378978588000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"gotcha","msgtype":"m.text"},"ts":1378978614000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"You can't tell whether \"a:hover a a a a a a a...\" is a selector or a property until you hit a \"{\" or a \";\".","msgtype":"m.text"},"ts":1378978616000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"foolip: yo, I told the i18n guys I wouldn't do Encoding standard updates for a couple of weeks, so I'll get back to that in October","msgtype":"m.text"},"ts":1378978843000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: wanted to let you know that and thank you for big5 research once more :)","msgtype":"m.text"},"ts":1378978856000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"anyone want to review https://critic.hoppipolla.co.uk/r/307 ?","msgtype":"m.text"},"ts":1378980274000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Domenic_: so jQuery supports node.is(\"> test\") // doesn't throw","msgtype":"m.text"},"ts":1378980435000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: how does that ever make sense?","msgtype":"m.text"},"ts":1378980441000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"whoa, but <body>.is(\"html > body\") // true","msgtype":"m.text"},"ts":1378980473000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that seems very weird","msgtype":"m.text"},"ts":1378980487000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1378980644000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: tbh mostly i use very simple selectors with .is, like tag names.","msgtype":"m.text"},"ts":1378980665000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I think it should behave just like the selectors passed to querySelector","msgtype":"m.text"},"ts":1378980705000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i agree .is(\"> test\") doesn't make much sense, but then again, not throwing might be a useful property","msgtype":"m.text"},"ts":1378980710000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"The thing is, if you parse it as a relative selector, is .is(\"body\") going to work?","msgtype":"m.text"},"ts":1378980742000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"<body>.is(\"html > body\") seems good, I would use that","msgtype":"m.text"},"ts":1378980752000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Then you cannot parse it as a relative selector","msgtype":"m.text"},"ts":1378980767000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is there any reason it shouldn't just be an absolute selector? hmm","msgtype":"m.text"},"ts":1378980790000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Or we'd have to redefine relative selector to be \"sometimes relative selector\" or some such and a different algorithm","msgtype":"m.text"},"ts":1378980794000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, I don't know","msgtype":"m.text"},"ts":1378980807000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Lachy: why did spec .matches() as taking a relative selector?","msgtype":"m.text"},"ts":1378980824000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: Elements.prototype.matches() should exist too right?","msgtype":"m.text"},"ts":1378980838000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm, maybe something like queryFilter() would be more useful","msgtype":"m.text"},"ts":1378980864000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: hmm probably, with for-all semantics i assume (not there-exists)?","msgtype":"m.text"},"ts":1378980870000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: yes","msgtype":"m.text"},"ts":1378980883000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"shall i add to gist?","msgtype":"m.text"},"ts":1378980928000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: dunno, I'm suggesting this because http://dev.w3.org/2006/webapi/selectors-api2/#the-apis has it","msgtype":"m.text"},"ts":1378981022000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: (matches() having a second argument for reference nodes)","msgtype":"m.text"},"ts":1378981056000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: btw, if I were to define Elements as a JavaScript thing, is there some ES6 precedent I can follow for that?","msgtype":"m.text"},"ts":1378981101000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: you mean, if you were to write a spec? hmm.","msgtype":"m.text"},"ts":1378981121000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I think GeneratorFunction derives from Generator?","msgtype":"m.text"},"ts":1378981138000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"err, from Function","msgtype":"m.text"},"ts":1378981147000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: doesn't look like it","msgtype":"m.text"},"ts":1378981328000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: no, it does. It's not very clear though. e.g. \"The value of the [[Prototype]] internal data property of the GeneratorFunction constructor is the intrinsic object %Function%.\"","msgtype":"m.text"},"ts":1378981400000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Plus \"The value of the [[Prototype]] internal data property of the GeneratorFunction prototype object is the %FunctionPrototype% intrinsic object.\"","msgtype":"m.text"},"ts":1378981432000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"the first is constructor-side inheritance, the second prototype-side, together I think they do the trick.","msgtype":"m.text"},"ts":1378981459000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"\"The GeneratorFunction prototype object is an ordinary object. It is not a function object and does not have a [[Code]] internal data property or any other of the internal data properties listed in Table 25 or Table 39.\"","msgtype":"m.text"},"ts":1378981544000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, that's useful when there are reference nodes passed as well, so you can see if an element matches a selector relative to other specified elements.","msgtype":"m.text"},"ts":1378981588000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: but it makes <body>.matches(\"html > body\") fail, no?","msgtype":"m.text"},"ts":1378981632000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"e.g. element.matches(\">span\", [el1, el2, el3]); matches if the element is a span that is a child of one of those elements.","msgtype":"m.text"},"ts":1378981652000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"No.","msgtype":"m.text"},"ts":1378981654000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"a relative selector doesn't always prepend :scope","msgtype":"m.text"},"ts":1378981664000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Oh, it's always potentially relative?","msgtype":"m.text"},"ts":1378981694000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah that's just the standard ES6 thing of making X.prototype not a useful instance of X.","msgtype":"m.text"},"ts":1378981703000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"from memory, I think the algorithm for parsing relative selectors checks if there are any reference nodes first.","msgtype":"m.text"},"ts":1378981711000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"if there aren't any, no :scope is prepended.","msgtype":"m.text"},"ts":1378981735000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"or something like that.","msgtype":"m.text"},"ts":1378981742000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"(bbl, lunch)","msgtype":"m.text"},"ts":1378981770000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: okay, so why does a bunch of things need to be redefined?","msgtype":"m.text"},"ts":1378981776000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: which things?","msgtype":"m.text"},"ts":1378981790000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: e.g. the constructor","msgtype":"m.text"},"ts":1378981796000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: I guess it has a different constructor?","msgtype":"m.text"},"ts":1378981804000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: well probably yeah, generators are pretty different from functions","msgtype":"m.text"},"ts":1378981814000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: it seems to me for Elements we'd only have to define a minimal set of things, right?","msgtype":"m.text"},"ts":1378981832000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: agree, I am pretty sure.","msgtype":"m.text"},"ts":1378981846000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Lachy: annevk: has anyone implemented \"absolutize relative selector list\" algorithm in JS? THat may be the easiest way to ensure it does what we want.","msgtype":"m.text"},"ts":1378981944000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: dunno, it'd require parsing selectors in JS... http://dev.w3.org/csswg/selectors/#absolutizing","msgtype":"m.text"},"ts":1378982008000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, sure, as long as it's on your radar. but why did the i18n people not want you to update the spec?","msgtype":"m.text"},"ts":1378982061000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Lachy: http://dev.w3.org/csswg/selectors/#absolutizing seems to pretty much always prepend :scope? TabAtkins?","msgtype":"m.text"},"ts":1378982129000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: they want to publish a fork on TR/","msgtype":"m.text"},"ts":1378982146000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, ew, but I take it you'll allow it?","msgtype":"m.text"},"ts":1378982193000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: I'd just have to notify them if I made a change so they could sync up again before publication, seemed easier to not update for a bit","msgtype":"m.text"},"ts":1378982203000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: I agreed to this before I decided it was a bad idea :/","msgtype":"m.text"},"ts":1378982217000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: also, CC0","msgtype":"m.text"},"ts":1378982274000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I sure hope no one finds that TR/ spec and implements big5 with the wrong error handling","msgtype":"m.text"},"ts":1378982278000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"annevk, do you know if similar conditions might be needed for similar encodings?","msgtype":"m.text"},"ts":1378982302000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: yeah, if you follow the link at the top of the spec for open bugs, you'll find we're trying to figure out the right behavior for most multi-byte encodings :/","msgtype":"m.text"},"ts":1378982341000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: I need to study browsers some more basically","msgtype":"m.text"},"ts":1378982353000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, no open bug for gb* encodings, which do decrease the byte pointer. is that an oversight or are you confident it's already correct?","msgtype":"m.text"},"ts":1378982414000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: I think gbk / gb18030 are correct, however, the mapping story needs work","msgtype":"m.text"},"ts":1378982460000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, btw, I tried to figure out what error handling chromium has, but it looks like maybe libicu is used and I couldn't grep my way to the source","msgtype":"m.text"},"ts":1378982470000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: they use ICU","msgtype":"m.text"},"ts":1378982483000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: but modified","msgtype":"m.text"},"ts":1378982487000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, I saw some patches there as well","msgtype":"m.text"},"ts":1378982495000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"but still nothing that looks like \"decode big5 here\" so I guess that it shares the algorithm with some other encodings or some such","msgtype":"m.text"},"ts":1378982521000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: http://src.chromium.org/viewvc/chrome/trunk/deps/third_party/icu51/","msgtype":"m.text"},"ts":1378982534000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, in any event, thanks for the feedback. I'm guessing that Mozilla is the most likely first implementor of the Big5 changes so I'm not worried that they/you'll look at the wrong spec :)","msgtype":"m.text"},"ts":1378982614000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: and maybe http://src.chromium.org/viewvc/chrome/trunk/deps/third_party/icu46/ I suppose, looks like it has more patches, but maybe they've been upstreamed meanwhile","msgtype":"m.text"},"ts":1378982644000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: yeah, sure hope we fix that mess","msgtype":"m.text"},"ts":1378982664000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"chromium really should too, AFAIK it's still using PUA mappings :/","msgtype":"m.text"},"ts":1378982687000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"annevk, check the algorithm I had in my fork of dom on github. That should have had the most recent version that I wrote.","msgtype":"m.text"},"ts":1378982714000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: yours is different from the one that's in the Selectors specification","msgtype":"m.text"},"ts":1378982870000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":/","msgtype":"m.text"},"ts":1378982876000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: ping","msgtype":"m.text"},"ts":1378982887000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"annevk: It prepends :scope unless there's already a :scope somewhere in it.","msgtype":"m.text"},"ts":1378982891000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: looking at https://github.com/lachlanhunt/dom/commit/453f2e2457202f49bd2743966a6f2f66f78a771a we don't want to prepend :scope if there's no reference elements","msgtype":"m.text"},"ts":1378982913000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"There's a difference between \"no reference elements\" and \"empty array of reference elements\".","msgtype":"m.text"},"ts":1378982953000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: ooh, and it looks like there was a way with a :scope flag","msgtype":"m.text"},"ts":1378982962000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: no reference elements ends up at \" Otherwise, this is a spec error. Please report it to the relevant standards body. \"","msgtype":"m.text"},"ts":1378982999000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah, we don't have a clause for explicitly \"no reference elements\", because there wasn't a way to do that in Selectors API 2, I thought.","msgtype":"m.text"},"ts":1378983062000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Really, if you have no reference elements at all, you shouldn't absolutize it - it's already an absolute selector.","msgtype":"m.text"},"ts":1378983087000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: so what Selectors Level 2 had was a \"scope flag\"","msgtype":"m.text"},"ts":1378983114000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Btw, if there's context missing in the scrollback, let me know - I'm too busy with the meeting to read back right now.","msgtype":"m.text"},"ts":1378983131000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: so for matches(\"html > body\") it would not turn into \":scope html > body\"","msgtype":"m.text"},"ts":1378983137000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: but matches(\"> body\") would turn into \":scope > body\"","msgtype":"m.text"},"ts":1378983157000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Huh, so it wants to be stricter about relative-ness?","msgtype":"m.text"},"ts":1378983178000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"isn't sure how you can match :scope > body in the first place.","msgtype":"m.emote"},"ts":1378983196000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: it's more like \"potentially relative\"","msgtype":"m.text"},"ts":1378983205000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: the latter would not match and would only work if you provide reference elements...","msgtype":"m.text"},"ts":1378983218000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah, kk.","msgtype":"m.text"},"ts":1378983260000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: it's not entirely clear to me whether we want the reference element feature if we're going to let things work on Elements, but jQuery parity would require not throwing for \"> body\" and making \"html > body\" work","msgtype":"m.text"},"ts":1378983268000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If you need it, I can provide an \"absolutize a potentially relative selector\" algo.","msgtype":"m.text"},"ts":1378983275000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: it looks like jQuery always uses that","msgtype":"m.text"},"ts":1378983331000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: e.g.  w($(\"body\").select(\"html > body\")) returns the body element","msgtype":"m.text"},"ts":1378983341000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Depends on the function.  jQuery's find() uses the currently specced algo.","msgtype":"m.text"},"ts":1378983349000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"$(\"body\").find(\"body\") returns an empty set.","msgtype":"m.text"},"ts":1378983375000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"iirc","msgtype":"m.text"},"ts":1378983376000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: ah you're right","msgtype":"m.text"},"ts":1378983409000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Like I said, just let me know, and I can add the alternate algo.","msgtype":"m.text"},"ts":1378983439000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: do I file bugs somewhere?","msgtype":"m.text"},"ts":1378983460000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"send email, please.","msgtype":"m.text"},"ts":1378983470000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"or just tell me right here, since I can do that immediately.","msgtype":"m.text"},"ts":1378983481000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: alright, I'll send a single email once I know all the things I want","msgtype":"m.text"},"ts":1378983489000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"kk","msgtype":"m.text"},"ts":1378983491000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic_: seems .is() has any semantics","msgtype":"m.text"},"ts":1378984041000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: e.g. [<script>, <div>].is(\"div\") -> true","msgtype":"m.text"},"ts":1378984064000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Also seems like is(\"> ..\") has no useful semantics other than not throwing...","msgtype":"m.text"},"ts":1378984523000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, right. .is() in jquery is more limited than matches() was specced to be in that regard, because matches(\"> …\", refNodes) made that syntax potentially more useful than simply not throwing.","msgtype":"m.text"},"ts":1378985811000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Adding support to refNodes and using a relative selector there was a way to address the syntax error issue, though the actual use case for using them with matches() is somewhat limited in practice. So, if you decide not to support refNodes in matches(), at least for now, and instead work around the syntax issue in some other way, then it wouldn't be a huge loss.","msgtype":"m.text"},"ts":1378986080000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"mounir: pong","msgtype":"m.text"},"ts":1378986883000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: any semantics seem ok, dunno, seems like a rare case.","msgtype":"m.text"},"ts":1378986934000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: Lachy: seems like unlike find, for matches the reference nodes actually have a meaning, maybe. (although as Lachy says, not a terribly useful one.)","msgtype":"m.text"},"ts":1378987035000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"in any case I think singleElement.matches(...) would be the 95% case.","msgtype":"m.text"},"ts":1378987147000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"does body.is(\"> body\") work? feels like it should","msgtype":"m.text"},"ts":1378987271000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"nope, false","msgtype":"m.text"},"ts":1378987286000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_, no, it doesn't.","msgtype":"m.text"},"ts":1378987288000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"weird","msgtype":"m.text"},"ts":1378987288000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"why would that be weird? You're basically asking is it a child of some undefined element","msgtype":"m.text"},"ts":1378987307000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"to me it feels like asking if it's the child of any element","msgtype":"m.text"},"ts":1378987328000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"but i guess i can't think of a real reason for that feeling so shrug","msgtype":"m.text"},"ts":1378987348000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"if that's what you want, then use \"*>body\" or check if parentNode is null","msgtype":"m.text"},"ts":1378987361000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"right, \"* > body\" works, seems good.","msgtype":"m.text"},"ts":1378987382000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Lachy: the syntax being compatible was deemed important?","msgtype":"m.text"},"ts":1378988355000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Lachy: my inclination would be to throw for .matches(\"> test\")","msgtype":"m.text"},"ts":1378988378000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: I'd be inclined to not support Element.prototype.matches() until someone makes a compelling case","msgtype":"m.text"},"ts":1378988478000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You could do that too. Then when jquery uses matches, it can just catch the exception and ignore if it ever happens.","msgtype":"m.text"},"ts":1378988510000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"annevk: really? do you not think it'd be the 95% case?","msgtype":"m.text"},"ts":1378988516000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: sorry, Elements*","msgtype":"m.text"},"ts":1378988542000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah ok. yes in that case i agree.","msgtype":"m.text"},"ts":1378988549000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Lachy: yeah","msgtype":"m.text"},"ts":1378988572000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It seems kind of weird to start copying the quirks of libraries...","msgtype":"m.text"},"ts":1378988605000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i think the question is, should asking whether something is a match ever throw","msgtype":"m.text"},"ts":1378988625000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Although I guess we're doing that with promises...","msgtype":"m.text"},"ts":1378988627000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I liked it though, cause it basically gave refNodes support in matches for negligible implementation cost, once they're implemented for find()","msgtype":"m.text"},"ts":1378988635000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Domenic_: I was wondering where the name Promise#race came from, I didn't see it in other libraries but I might as well have not searched enough","msgtype":"m.text"},"ts":1378988652000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"Domenic_: jQuery throws for e.g. is(\"::blah\") which is a parse error in Selectors too","msgtype":"m.text"},"ts":1378988657000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Lachy: we don't want them for find() anymore","msgtype":"m.text"},"ts":1378988678000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"why not?","msgtype":"m.text"},"ts":1378988683000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"mounir: no libraries really have the operation, but MarkM's concurrency strawman does and Q added it recently based on that.","msgtype":"m.text"},"ts":1378988684000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Lachy: see public-webapps","msgtype":"m.text"},"ts":1378988690000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"at least for document.find(), there were some valuable use cases","msgtype":"m.text"},"ts":1378988691000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"ok, will look","msgtype":"m.text"},"ts":1378988700000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"annevk: hmm ok, well if it does throw in some cases then throwing for \"> body\" seems totally fine.","msgtype":"m.text"},"ts":1378988709000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: why is that added in the first place? is this a commonly used feature?","msgtype":"m.text"},"ts":1378988745000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"mounir: not really sure, MarkM likes it I guess, and it was in the original DOM promises, so that is probably the impetus.","msgtype":"m.text"},"ts":1378988808000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk, is Elements.from() specced anywhere yet?","msgtype":"m.text"},"ts":1378989011000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"I'm assuming that's the alternative solution to refNodes you're talking about","msgtype":"m.text"},"ts":1378989031000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: that's like Array.from()","msgtype":"m.text"},"ts":1378989039000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Lachy: Elements is just an array subclass that has query/queryAll as methods","msgtype":"m.text"},"ts":1378989053000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Lachy: and is the return value for query/queryAll","msgtype":"m.text"},"ts":1378989067000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah, ok. Is that Elements object specced somewhere then?","msgtype":"m.text"},"ts":1378989081000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: it's https://gist.github.com/domenic/5864658","msgtype":"m.text"},"ts":1378989096000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Lachy: I'm going to turn that into a spec at some point, once I figure out how","msgtype":"m.text"},"ts":1378989108000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1378989128000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"That looks like a reasonable alternative to refNodes to me, in which case, I agee, just make matches a normal selector instead of relative.","msgtype":"m.text"},"ts":1378989179000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"*agree","msgtype":"m.text"},"ts":1378989188000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"sounds like we're going with query instead of select, updating","msgtype":"m.text"},"ts":1378989394000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: yeah, seems safer","msgtype":"m.text"},"ts":1378989672000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: and hey, we just got everyone used to the name query...","msgtype":"m.text"},"ts":1378989686000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what was wrong with the name \"find\"?","msgtype":"m.text"},"ts":1378990071000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: Array.prototype.find is a thing","msgtype":"m.text"},"ts":1378990108000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh, right.","msgtype":"m.text"},"ts":1378990120000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"I think I'll just use my own IDL syntax until heycam|away fixes bugs","msgtype":"m.text"},"ts":1378992034000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Don't really want to go all ES6 on this as implementers are not going to use that anyway for the foreseeable future","msgtype":"m.text"},"ts":1378992050000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mmm, yeah, lack of @@create is hurting.","msgtype":"m.text"},"ts":1378992910000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"i guess i should file those bugs","msgtype":"m.text"},"ts":1378992926000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"engine bugs? cc me please","msgtype":"m.text"},"ts":1378993030000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"this one already exists it seems. https://bugzilla.mozilla.org/show_bug.cgi?id=838540","msgtype":"m.text"},"ts":1378993052000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I'll add a comment","msgtype":"m.text"},"ts":1378993069000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"for all the benefits closer cooperation with ES brings, speeding things up is not one of them :/","msgtype":"m.text"},"ts":1378993070000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1378993083000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"*hah","msgtype":"m.text"},"ts":1378993085000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: sorry to start again with Promise#race(), I was called for an urgent meeting","msgtype":"m.text"},"ts":1378993234000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"Domenic_: reading the issue, it seems like some people are not trilled with the name and the behaviour","msgtype":"m.text"},"ts":1378993249000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"Domenic_: why not simply not add it to the standardise subset?","msgtype":"m.text"},"ts":1378993260000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"mounir: it's more of a question of \"why not simply remove it from the standard,\" which is quite a different question. Under a different name, it's in DOM promises.","msgtype":"m.text"},"ts":1378993469000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: I know it was in DOM promises","msgtype":"m.text"},"ts":1378993668000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"but why was it there?","msgtype":"m.text"},"ts":1378993671000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"Domenic_: DOM promises wasn't stable enough to be an authoritative document ;)","msgtype":"m.text"},"ts":1378993695000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"Domenic_: I mean, I don't see the pros in adding this to the spec and there seem to be cons, if it was a Web API, I would say that the simplest solution would be to simply not add it and figure out later how things evolve","msgtype":"m.text"},"ts":1378993845000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"mounir: I won't shed a tear if it dies, but nobody gave any real arguments against it that were more than \"I don't like the bikeshed color\" (and nobody even proposed a better color).","msgtype":"m.text"},"ts":1378993891000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"mounir: if you really want to campaign to kill someone's pet feature, be ready for having a fight on your hands, and start opening issues/gathering consensus from parties involved.","msgtype":"m.text"},"ts":1378993917000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: I will not campaign against it but I just don't understand the reasons behind this feature","msgtype":"m.text"},"ts":1378994154000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"mounir: basically it is an easy-to-spec combinator that some people, in particular MarkM, have found useful in their work.","msgtype":"m.text"},"ts":1378994244000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: will file an issue and see how it goes","msgtype":"m.text"},"ts":1378994327000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"I will not die on that hill and no need to discuss it in a not-so-public way","msgtype":"m.text"},"ts":1378994352000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"seems like a plan","msgtype":"m.text"},"ts":1378994414000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: not sure Mark felt that strongly about it","msgtype":"m.text"},"ts":1378994503000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: agree, he probably wouldn't mind that much, but just mentioning that he is the one who has actually used it.","msgtype":"m.text"},"ts":1378994541000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: you were probably planning on it already, but would love a cc on that www-style thread.","msgtype":"m.text"},"ts":1378996467000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: wasn't :)","msgtype":"m.text"},"ts":1378996482000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: how are you handling people putting non-elements in Elements? The gist handles it by blowing up in the appropriate place.","msgtype":"m.text"},"ts":1378996702000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: I copy Element nodes from the array before doing anything","msgtype":"m.text"},"ts":1378996756000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: also to enable subclassing ideally `queryAll` should return an instance of `this.constructor`, not necessarily an `Elements`.","msgtype":"m.text"},"ts":1378996756000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"hmm yeah","msgtype":"m.text"},"ts":1378996812000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"somehow allen convinced me blowing up was better, i wonder why. will have to re-read.","msgtype":"m.text"},"ts":1378996878000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: https://www.w3.org/Bugs/Public/show_bug.cgi?id=18878","msgtype":"m.text"},"ts":1378996920000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: you mean throw if something fails the brand check?","msgtype":"m.text"},"ts":1378996930000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: ooh, wait, just calling the internal thing","msgtype":"m.text"},"ts":1378996940000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah like that, although it's essentially equivalent.","msgtype":"m.text"},"ts":1378996960000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"not quite","msgtype":"m.text"},"ts":1378996974000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm right subclasses and such","msgtype":"m.text"},"ts":1378996991000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"well depends on how the brand is installed?","msgtype":"m.text"},"ts":1378997001000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"i mean the hard part is allowing implementations room for optimization","msgtype":"m.text"},"ts":1378997046000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"but then again i guess the es spec generally just says \"do this\" and implementations are like \"i'll do something vaguely like that, but probably completely different under the covers, as long as the semantics are the same.\"","msgtype":"m.text"},"ts":1378997073000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"there's a whole bunch of these things we'll have to sort out in due course","msgtype":"m.text"},"ts":1378997077000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"for a whole lot of objects","msgtype":"m.text"},"ts":1378997083000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm not too worried about this one right now","msgtype":"m.text"},"ts":1378997091000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fair","msgtype":"m.text"},"ts":1378997101000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"i think the this.constructor thing would be nice to get in soon though","msgtype":"m.text"},"ts":1378997113000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"yeah, have to see what heycam|away has to say to the IDL bugs, and bz","msgtype":"m.text"},"ts":1378997183000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: I guess I could indicate the intent for now","msgtype":"m.text"},"ts":1378997201000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: emailed www-style, figured I didn't need to add you in To: since it's kinda the same thing :p","msgtype":"m.text"},"ts":1378997469000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yes, it's actually preferable that you don't, so I get the list version of the mail and can get at the archived-at header if necessary.","msgtype":"m.text"},"ts":1378997494000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: in replies, it's preferable you copy me, as I'm not on the list","msgtype":"m.text"},"ts":1378997690000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"kk","msgtype":"m.text"},"ts":1378997696000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"gmail does that automatically, so that's fine.","msgtype":"m.text"},"ts":1378997705000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic_: Yeah, the \"black box\" clause is always in effect - you can do whatever you like, as long as it's not observably different from what the spec requires.","msgtype":"m.text"},"ts":1378998173000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"wycats: I assume http://w3ctag.github.io/jsidl/jsidl.html isn't updated actively anymore?","msgtype":"m.text"},"ts":1379003348000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"It will be shortly","msgtype":"m.text"},"ts":1379003385000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Domenic_ is working on it","msgtype":"m.text"},"ts":1379003406000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"ES6 deadlines are consuming my available time atm","msgtype":"m.text"},"ts":1379003431000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"indeed. sidetracked by promises-unwrapping but that has quieted.","msgtype":"m.text"},"ts":1379003445000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"same with dherman, who is also helping","msgtype":"m.text"},"ts":1379003464000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Domenic_: psyched that you'll be at TC39","msgtype":"m.text"},"ts":1379003482000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Domenic_: I feel like Streams would be a more effective use of your time ^_^","msgtype":"m.text"},"ts":1379003504000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: oh right, hrmmmm","msgtype":"m.text"},"ts":1379003519000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"dammit i need a standards job","msgtype":"m.text"},"ts":1379003523000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"basically i need annevk's job","msgtype":"m.text"},"ts":1379003535000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: some reasoning in the spec would be nice","msgtype":"m.text"},"ts":1379003631000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"in the spec or elsewhere","msgtype":"m.text"},"ts":1379003638000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"would be easier to understand why that is needed when we have webidl spec too","msgtype":"m.text"},"ts":1379003649000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: yeah definitely.","msgtype":"m.text"},"ts":1379003656000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"smaug____: I do like annevk's idea of nudging WebIDL more JS-ward though in the meantime.","msgtype":"m.text"},"ts":1379003689000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"smaug____: basically, there's an ever growing mismatch between IDL and JS; I don't really care how we fix that gap, but we need to fix it","msgtype":"m.text"},"ts":1379003719000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(currently I think some people just don't like some aspects of WebIDL, so another idl spec is need. But I could be very wrong , since I don't know where to read the reasoning. )","msgtype":"m.text"},"ts":1379003743000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"annevk: that \"ever growing mismatch between IDL and JS\" is not clear to me","msgtype":"m.text"},"ts":1379003779000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"My bet is that fixing IDL is better, because IDL is implemented so the implications of changes are more apparent, but I'm not opposed to a dual strategy.","msgtype":"m.text"},"ts":1379003779000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I mean, is there a list of mismatches somewhere","msgtype":"m.text"},"ts":1379003795000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"i think people don't realize how far off WebIDL is from JS","msgtype":"m.text"},"ts":1379003798000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"and reasoning why something is a mismatch","msgtype":"m.text"},"ts":1379003803000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: that would be a good idea","msgtype":"m.text"},"ts":1379003804000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"smaug____: e.g. subclassing of JavaScript types is not possible, defining reusable prototype methods as JavaScript does is not really possible","msgtype":"m.text"},"ts":1379003812000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: a bunch of it is mostly due to changes in ES6, granted","msgtype":"m.text"},"ts":1379003853000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, before ES6, subclassing JS types was impossible :)","msgtype":"m.text"},"ts":1379003950000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"but yeah other things like argument defaulting semantics were clarified in ES6 whereas there were only 5 or 10 examples in the ES5 spec.","msgtype":"m.text"},"ts":1379003980000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I assume these idl changes would be still backwards compatible","msgtype":"m.text"},"ts":1379004099000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: right","msgtype":"m.text"},"ts":1379004181000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: potentially marking existing constructs \"legacy\" as we've done in the past if we really want something else and it's breaking","msgtype":"m.text"},"ts":1379004213000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"my hope would be to make all the backward-compat exceptions to ES semantics move to prose, but that might not be palatable by implementers, so a bevvy of [LegacyDefaultingSemantics] etc. annotations might be the way to go.","msgtype":"m.text"},"ts":1379004235000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"smaug____: not breaking the web is something TC39 shares","msgtype":"m.text"},"ts":1379004236000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it's unclear though what's breaking, e.g. WebIDL is continually debating changing their function .length algorithm, so i guess they are assuming that doesn't break anything.","msgtype":"m.text"},"ts":1379004279000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: also consider people writing the specs, it'd be a lot of work to rewrite all those algorithms","msgtype":"m.text"},"ts":1379004279000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: for sure. it has to be usable to be useful.","msgtype":"m.text"},"ts":1379004296000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: breaking is measured by testing","msgtype":"m.text"},"ts":1379004299000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: ship and back out and such","msgtype":"m.text"},"ts":1379004311000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah but deciding whether it's worth the time to try shipping is the step i'm talking about","msgtype":"m.text"},"ts":1379004330000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Ah, that's cost benefit analysis","msgtype":"m.text"},"ts":1379004374000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"e.g. .length changes are presumed unlikely to break so they'll probably try it. Whereas I'm not so sure about switching from `null` to `undefined` as default-triggerer, that seems like it might not be possible.","msgtype":"m.text"},"ts":1379004376000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"A lot of people use null","msgtype":"m.text"},"ts":1379004393000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but how much of the old stuff would  be \"[legacy]\"? It would be rather bad to end up to a situation where the platform has rather inconsistent semantics because of lots stuff  is legacy and new stuff uses some other setup","msgtype":"m.text"},"ts":1379004401000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: I think that's largely an unknown at this point","msgtype":"m.text"},"ts":1379004448000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: unclear. but, is inconsistent with ES/consistent with itself better than the other way around?","msgtype":"m.text"},"ts":1379004452000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"right, that is what I expected :)","msgtype":"m.text"},"ts":1379004460000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"If everything outside ES is consistent, maybe ES should change","msgtype":"m.text"},"ts":1379004479000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I doubt that though","msgtype":"m.text"},"ts":1379004501000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nah user-space libraries and ES are generally consistent","msgtype":"m.text"},"ts":1379004502000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"ok, so, who do I talk to about host objects having getters/setters/properties and DOM attributes not matching up for various fun stuff like MutationObservers and tabIndex. spent some time a couple months back writing to the mailing list and basically got aback a  \"thats the way it works\" so, onto round 2","msgtype":"m.text"},"ts":1379004589000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: you mean stuff like inputelement.value vs. <input value=\"\"> ?","msgtype":"m.text"},"ts":1379004637000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"the controls not matching up with change events is a big one, yes","msgtype":"m.text"},"ts":1379004671000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"well, .value handling can't be changed, and MutationObserver is about changes to DOM...so I'm not sure there is much to discuss there, unless you have some great proposal :)","msgtype":"m.text"},"ts":1379004761000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"bradleymeck: the problem is \"don't break the web\"; we can't change the value attribute to suddenly not be retarded.","msgtype":"m.text"},"ts":1379004812000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"bradleymeck: but most new attributes seem to work fine, e.g. <details> open attribute and .open property stay in sync.","msgtype":"m.text"},"ts":1379004830000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"this kind of sucks though since you can use MutationObserver on <details> but not on <input> :(","msgtype":"m.text"},"ts":1379004852000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"well I don't want to change it from a getter, but setting does already tie into a change event, so I am looking more towards having a way for events hook into mutation observers","msgtype":"m.text"},"ts":1379005194000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"cause the JS side notifying the DOM tree that something important has happened seems an ok use case","msgtype":"m.text"},"ts":1379005234000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i am not sure i get it... you're talking about firing synthetic events on DOM elements?","msgtype":"m.text"},"ts":1379005295000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: i guess you could say it that way, notification for MutationObservers only, not quite full events","msgtype":"m.text"},"ts":1379005415000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"oh i think i see, so, artificially trigger a mutation observer callback?","msgtype":"m.text"},"ts":1379005445000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1379005473000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"well, for now you could just call the callback manually","msgtype":"m.text"},"ts":1379005478000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but we could add a getter for the callback","msgtype":"m.text"},"ts":1379005489000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but detecting which mutation observers are observing a node?","msgtype":"m.text"},"ts":1379005498000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: you want something like https://bugzilla.mozilla.org/show_bug.cgi?id=912874 ?","msgtype":"m.text"},"ts":1379005537000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(in Gecko that is available for chrome code only, not for web pages)","msgtype":"m.text"},"ts":1379005561000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(the API in bug 912874 isn't super pretty but gives what devtools needed)","msgtype":"m.text"},"ts":1379005631000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"you could perform this using MutationObserver enumeration, but I am hesitant about exposing what mutation observers are looking at a node, just sending a new MutationRecord to any observer listening to a node would seem less scope creep","msgtype":"m.text"},"ts":1379005693000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: the additions to MutationObserver let's one to get the callback","msgtype":"m.text"},"ts":1379005734000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"you can skip the change to Node :)","msgtype":"m.text"},"ts":1379005747000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"something akin to EventTarget.dispatchEvent(VirtualMutationEvent) was what I was thinking","msgtype":"m.text"},"ts":1379005769000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"oh, you want virtual MutationRecords","msgtype":"m.text"},"ts":1379005800000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"cause telling people to iterate when a scripting property is the authority for mutation might be ugly","msgtype":"m.text"},"ts":1379005801000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it does not need to have bubble / propagation / etc, so I am unsure it should be an event even","msgtype":"m.text"},"ts":1379005922000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: something like somenode.notifyMutationObservers(new MutationRecord({type: \"attributes\", target: somenode, attributeName: \"value\"}))","msgtype":"m.text"},"ts":1379005929000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1379005944000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"or, perhaps no need for MutationRecord ctor, dictionary would be enough","msgtype":"m.text"},"ts":1379005970000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but since it is virtual I would constrain type, this should only be talking about the host object not the DOM side","msgtype":"m.text"},"ts":1379005979000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"then we don't have to confuse attributes on host vs attributes on dom itself","msgtype":"m.text"},"ts":1379006014000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"and we only really need this since history about change events and value attributes sigh","msgtype":"m.text"},"ts":1379006126000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: right, sounds like your use case is firing artificial changes for `attributeName: \"value\"` from the `\"input\"` event, so that value behaves like everything else. opt-in fixing of `value` with respect to MutationObserver.","msgtype":"m.text"},"ts":1379006199000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"thats the basic idea","msgtype":"m.text"},"ts":1379006234000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"seems great, now we just need to get the attention of whoever's in charge of mutationobservers. I think they're in DOM now, so maybe annevk?","msgtype":"m.text"},"ts":1379006345000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"(gtg, rejectjs afterparty.)","msgtype":"m.text"},"ts":1379006355000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: they've always been in DOM, I thought we were going to wait for Object.observe()?","msgtype":"m.text"},"ts":1379007503000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: are you talking about mutation observers?","msgtype":"m.text"},"ts":1379007555000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: yeah","msgtype":"m.text"},"ts":1379007608000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bradleymeck: just read scrollback, I suppose we could consider synthetic changes, not sure exactly what the best way forward is","msgtype":"m.text"},"ts":1379007661000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bradleymeck: would you mind filing a bug against http://dom.spec.whatwg.org/ (link at the top) with some more detail? Emailing is fine too","msgtype":"m.text"},"ts":1379007682000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I can write up the history reasoning etc. tonight","msgtype":"m.text"},"ts":1379007843000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"thanks annevk","msgtype":"m.text"},"ts":1379007908000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: cool","msgtype":"m.text"},"ts":1379007937000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: what i meant by referencing SVG was e.g. http://hixie.ch/tests/adhoc/svg/use/001-with-base.html","msgtype":"m.text"},"ts":1379007974000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"annevk: chrome in particular is interesting on that test, since it does what we're talking about doing for everything _but_ hyperlinks","msgtype":"m.text"},"ts":1379008000000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"[24~in svg","msgtype":"m.text"},"ts":1379008004000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: ah, bz mentioned that too","msgtype":"m.text"},"ts":1379008018000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"my bad","msgtype":"m.text"},"ts":1379008022000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"anyway, i would imagine that anything we do here would happen for everything, not just links in one place","msgtype":"m.text"},"ts":1379008030000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"but i guess this is a url spec thing, so i'll leave you that thread :-)","msgtype":"m.text"},"ts":1379008044000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"potentially affects all callers","msgtype":"m.text"},"ts":1379008057000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but yeah","msgtype":"m.text"},"ts":1379008061000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I mostly feel inertia is like \"meh\"","msgtype":"m.text"},"ts":1379008073000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fear*","msgtype":"m.text"},"ts":1379008076000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah i admit i don't really care about what happens with <base>","msgtype":"m.text"},"ts":1379008147000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"what we're doing is pretty obviously bad, but i don't know what one would do about it","msgtype":"m.text"},"ts":1379008179000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"the alternative is pretty magical, and not in the ooooh shiny way","msgtype":"m.text"},"ts":1379008196000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"as to your other thread... i guess if resolving a url punycodes it already, then every address would already by punycoded, so it's a moot point","msgtype":"m.text"},"ts":1379008259000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"so i'll leave that as is for now","msgtype":"m.text"},"ts":1379008280000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I did the thing you suggested btw and picked IDNA2003","msgtype":"m.text"},"ts":1379008376000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"turns out most people didn't like that, even though it's the most compatible","msgtype":"m.text"},"ts":1379008385000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but then there's no real agreement on a replacement other than some variant of UTS #46 that might change over time","msgtype":"m.text"},"ts":1379008412000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what do browsers do?","msgtype":"m.text"},"ts":1379008465000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"if they do what you specced, then people like it, by definition :-)","msgtype":"m.text"},"ts":1379008500000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: turns out no","msgtype":"m.text"},"ts":1379008938000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"they don't do what you specced? what do they do?","msgtype":"m.text"},"ts":1379008988000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: browsers do IDNA2003, except for IE11, which does some variant of UTS #46; Gerv from Mozilla is pushing another variant of UTS #46; Jungshik and Mark from Google want some variant of UTS #46, potentially more restrictive over time","msgtype":"m.text"},"ts":1379009063000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie_: nobody is being very specific about the exact details of UTS #46 and clarifying the issues it has now","msgtype":"m.text"},"ts":1379009095000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie_: thread might revive in a bit once people are back from vacation, we'll see","msgtype":"m.text"},"ts":1379009107000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"all i heard there is \"browsers do IDNA2003\", and that's what matters. :-)","msgtype":"m.text"},"ts":1379009107000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"people can \"push\" anything they want, but if it doesn't get implemented, it's entirely academic","msgtype":"m.text"},"ts":1379009129000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"the IETF \"pushed\" IDNA2008 or whatever it's called","msgtype":"m.text"},"ts":1379009137000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yeah, UTS #46 is an IDNA2003-compatible variant of IDNA2008","msgtype":"m.text"},"ts":1379009182000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"registrars are adopting IDNA2008 too, it's a mess","msgtype":"m.text"},"ts":1379009216000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that just changes what you can put in a second-level domain label, right?","msgtype":"m.text"},"ts":1379009267000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"annevk: is the \"iterators intead of live NodeLists\" thread one you can deal with? looks like DOM Core stuff","msgtype":"m.text"},"ts":1379009614000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"good morning, Whatwg!","msgtype":"m.text"},"ts":1379009663000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"i'm assuming the thread \"BinaryEncoding for Typed Arrays using window.btoa and window.atob\" is feedback on http://encoding.spec.whatwg.org/#textencoder and am therefore not responding to that either","msgtype":"m.text"},"ts":1379009867000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: apparently they're considering obsoleting your portal domain too","msgtype":"m.text"},"ts":1379010418000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie_: they don't care","msgtype":"m.text"},"ts":1379010422000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i don't think any browsers actually show the smiley anyway","msgtype":"m.text"},"ts":1379010443000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"but yeah, i know. they're lame.","msgtype":"m.text"},"ts":1379010448000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"boo.","msgtype":"m.text"},"ts":1379010450000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: and seemingly inmume to http://www.w3.org/Provider/Style/URI.html","msgtype":"m.text"},"ts":1379010459000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie_: yeah, both of those are on my radar","msgtype":"m.text"},"ts":1379010492000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"who specs window.devicePixelRatio these days?","msgtype":"m.text"},"ts":1379010694000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"nominates zcorpan","msgtype":"m.emote"},"ts":1379010837000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"makes sense","msgtype":"m.text"},"ts":1379010889000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie: 140 characters is hard ... moving question over here","msgtype":"m.text"},"ts":1379012420000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"Hixie_: page A is in example.com, it contains an iframe to page B in example.org - that page (B) has a manifest","msgtype":"m.text"},"ts":1379012483000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"Hixie_: B's manifest lists file X.js (in example.org) in both CACHE: and NETWORK:","msgtype":"m.text"},"ts":1379012521000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"what's the question?","msgtype":"m.text"},"ts":1379012649000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: now page B requests X.js via xhr.  What should happen?","msgtype":"m.text"},"ts":1379012654000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"it gets it from the cache, like i said on twitter :-)","msgtype":"m.text"},"ts":1379012667000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"is the spec not clear?","msgtype":"m.text"},"ts":1379012677000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: but origin is null?","msgtype":"m.text"},"ts":1379012680000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"origin?","msgtype":"m.text"},"ts":1379012684000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: So there is no problem with page B xmlhttprequest acessing cache when it is in iframe from another page/diff domain?","msgtype":"m.text"},"ts":1379012775000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"i don't understand how the iframe changes anything. what in the spec makes you think it might?","msgtype":"m.text"},"ts":1379012800000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"tries to find logical response","msgtype":"m.emote"},"ts":1379012853000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"Hixie_: In figuring something out, I thought I understood some things","msgtype":"m.text"},"ts":1379012914000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"Hixie_: Browsers in some cases aren't cooperating","msgtype":"m.text"},"ts":1379012927000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"Hixie_: Basically trying to figure out which is bug and which is me misunderstanding","msgtype":"m.text"},"ts":1379012945000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1379012950000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"if there's a test case i can look at, that might b\bmake this easier :-)","msgtype":"m.text"},"ts":1379012960000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"ah!","msgtype":"m.text"},"ts":1379012965000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"Hixie_: I forgot to mention it was sandboxed?","msgtype":"m.text"},"ts":1379012982000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"oh! well","msgtype":"m.text"},"ts":1379012996000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"if it's sandboxed","msgtype":"m.text"},"ts":1379013002000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"all bets are off","msgtype":"m.text"},"ts":1379013005000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"haha!","msgtype":"m.text"},"ts":1379013006000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"what's the sandbox=\"\" value?","msgtype":"m.text"},"ts":1379013008000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"right!","msgtype":"m.text"},"ts":1379013013000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"just allow-scripts?","msgtype":"m.text"},"ts":1379013027000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1379013030000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"allow-same-origin too","msgtype":"m.text"},"ts":1379013034000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"sandbox=\"allow-scripts allow-same-origin\"?","msgtype":"m.text"},"ts":1379013058000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"that's generally a foot gun, but ok","msgtype":"m.text"},"ts":1379013062000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i guess if you're loading a cross-origin file you're probably ok","msgtype":"m.text"},"ts":1379013072000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1379013082000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"just checked to make sure I didn't lie with all of the changes I made trying to figure this out","msgtype":"m.text"},"ts":1379013110000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"indeed, this iframe is not even sandboxed!","msgtype":"m.text"},"ts":1379013121000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"if you have allow-scripts allow-same-origin, or if you're not sandboxed at all, i don't see why there'd be a problem","msgtype":"m.text"},"ts":1379013145000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"ok, I will make a way stripped down test case with nothing but that and see if I can illustrate","msgtype":"m.text"},"ts":1379013148000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"if you're not allow-same-origin, then i think it's likely appcache will just fail","msgtype":"m.text"},"ts":1379013161000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"how much have you played with actual implementations of this?","msgtype":"m.text"},"ts":1379013169000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"but i'd have to audit the spec to be sure one way or the other on that","msgtype":"m.text"},"ts":1379013172000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"not... as much as you'd expect","msgtype":"m.text"},"ts":1379013177000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":";)","msgtype":"m.text"},"ts":1379013180000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"in particular, not the combination of both","msgtype":"m.text"},"ts":1379013203000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"so like, mozilla is currently blocking idb access in all iframes in a diff origin regardless of any of this","msgtype":"m.text"},"ts":1379013230000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"i don't have many uses for sandboxing in my apps, and while appcache would be perfect for my projects, it's something i avoid doing until my apps are done, and, well, my apps are never done","msgtype":"m.text"},"ts":1379013239000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"basically, it works just like being sandboxed without the allow-same-origin in that respect","msgtype":"m.text"},"ts":1379013253000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"that's probably due to third-party cookie blocking","msgtype":"m.text"},"ts":1379013264000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"it is","msgtype":"m.text"},"ts":1379013269000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"but localStorage works..?","msgtype":"m.text"},"ts":1379013275000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"there is a bug, they'll address... it made more sense when they did it, but in retrospect, no","msgtype":"m.text"},"ts":1379013305000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"ok, let me see if I can make a simple stupid test to get to the bottom of this","msgtype":"m.text"},"ts":1379013333000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"I think when you combine these + browsers - there is incompat at the edges","msgtype":"m.text"},"ts":1379013353000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"significant in some cases","msgtype":"m.text"},"ts":1379013366000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"thx","msgtype":"m.text"},"ts":1379013379000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"good luck","msgtype":"m.text"},"ts":1379013481000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"TabAtkins: i've been confused about the order argument because as far as i recall the discussion in both email and f2f was like \"the set is unordered, this doesn't work for margin-start.\" \"the set is ordered already.\" \"yes.\" \"...\"","msgtype":"m.text"},"ts":1379016786000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I see why you're confused.  The underlying declaration block is ordered, yes.  The API exposed by gCS's return value, though, looks unordered.","msgtype":"m.text"},"ts":1379016832000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Since it's just an object map, iterated in alphabetical order.","msgtype":"m.text"},"ts":1379016848000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"the return value of getComputedStyle is not relevant since it's readonly so setProperty throws","msgtype":"m.text"},"ts":1379016872000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Sure, but the same is true of el.style.","msgtype":"m.text"},"ts":1379016925000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1379016931000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"el.style uses what cssom calls 'specified order', and setProperty either appends a new declaration to the end or updates a declaration's value without moving it in the list","msgtype":"m.text"},"ts":1379016991000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"You can only observe that by iteration, though.","msgtype":"m.text"},"ts":1379017031000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That's a very weak form of ordering.","msgtype":"m.text"},"ts":1379017037000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The normal interaction mode with it is as an object map, which is effectively unordered.","msgtype":"m.text"},"ts":1379017050000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yes? i'm still confused","msgtype":"m.text"},"ts":1379017111000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"does setProperty need to move an existing declaration to the end, or not? and why?","msgtype":"m.text"},"ts":1379017140000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"My point is just that things like Arrays are strongly, observably ordered.  Maps are weakly ordered at best, with the order only observable through iteration.","msgtype":"m.text"},"ts":1379017301000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1379017326000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Basing semantics on a strongly-ordered set when it's usually exposed as a weakly-ordered thing isn't a great idea.  That's why I still don't really like the resolution from the f2f, but I got something usable (setPropertyValue), so I can accept it.","msgtype":"m.text"},"ts":1379017343000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So to answer your question, I dunno.","msgtype":"m.text"},"ts":1379017382000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1379017414000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"bummer, i paged the parser out already and now i don't understand why we have \"template\" end tag entries everywhere","msgtype":"m.text"},"ts":1379017543000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"and why \"template\"'s end tag is handled in \"in head\" and not in \"in template\".","msgtype":"m.text"},"ts":1379017564000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: [CORS] says it references Cross-origin Resource Sharing but references Anne's fetch spec. The fetch spec does not describe terms like \"omit credentials flag\" as noted in http://www.whatwg.org/specs/web-apps/current-work/multipage/infrastructure.html#omit-credentials-flag (just as one example)","msgtype":"m.text"},"ts":1379018878000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"odd","msgtype":"m.text"},"ts":1379018898000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"why would anne drop the term","msgtype":"m.text"},"ts":1379018904000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"oh i don't use it anyway","msgtype":"m.text"},"ts":1379018918000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"any other examples?","msgtype":"m.text"},"ts":1379018933000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"looks like all those terms aren't used","msgtype":"m.text"},"ts":1379018953000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"wait wait wait","msgtype":"m.text"},"ts":1379018964000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i was looking at a subset of the spec","msgtype":"m.text"},"ts":1379018973000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"duh","msgtype":"m.text"},"ts":1379018974000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"tries again","msgtype":"m.emote"},"ts":1379018979000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: hm, looks like the names are just slighlt off. cmd+f searched for the whole term","msgtype":"m.text"},"ts":1379019012000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"oh i'm guessing this is all gonna change once we reference his Fetch algorithm instead of defining our own","msgtype":"m.text"},"ts":1379019023000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"is happy hixie made a similar mistake just now to the one he made earlier","msgtype":"m.emote"},"ts":1379019026000,"senderName":"bkardell__","senderId":"bkardell__@irc"},
{"content":{"body":"hehe","msgtype":"m.text"},"ts":1379019038000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"krit: the plan is to completely revamp how HTML does fetch once anne's spec is ready to take over","msgtype":"m.text"},"ts":1379019060000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"krit: so i'm ignoring this problem for now","msgtype":"m.text"},"ts":1379019068000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1379019072000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"Hixie_: Question to SVG image fetching. SVG images can have resources them self (like references to other images)","msgtype":"m.text"},"ts":1379019131000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"TabAtkins: ping https://www.w3.org/Bugs/Public/show_bug.cgi?id=22118","msgtype":"m.text"},"ts":1379019140000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: is there a defined restriction?","msgtype":"m.text"},"ts":1379019143000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"krit: i don't understand the question","msgtype":"m.text"},"ts":1379019158000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"<img src=\"image.svg\"> -> <svg><image xlink:href=\"image2.svg\"/></svg>","msgtype":"m.text"},"ts":1379019199000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"Hixie_: is image.svg allowed to fetch image2.svg?","msgtype":"m.text"},"ts":1379019230000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"that seems like an SVG question?","msgtype":"m.text"},"ts":1379019277000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: or the following <img src=\"image.svg\"> -> <svg><foreignObject><iframe src=\"index.html\"/></foreignObject></svg>","msgtype":"m.text"},"ts":1379019281000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"i think <img> stops scripts in SVG, but that's all","msgtype":"m.text"},"ts":1379019290000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"check the spec","msgtype":"m.text"},"ts":1379019300000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: I know that it is not specified in SVG :)","msgtype":"m.text"},"ts":1379019315000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"Hixie_: but sounds like it wouldn't be anywhere else","msgtype":"m.text"},"ts":1379019336000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"check HTML's <img> section","msgtype":"m.text"},"ts":1379019417000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: \"the img element's crossorigin attribute's mode, and, if that mode is not http://www.whatwg.org/specs/web-apps/current-work/multipage/fetching-resources.html#attr-crossorigin-none\" but I can not find the initial value of 'crossorigin' attribute. Just the defintion for this attribute","msgtype":"m.text"},"ts":1379019726000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"\"initial value\"?","msgtype":"m.text"},"ts":1379019741000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"well, if it is not set, I assume it is No CORS, right?","msgtype":"m.text"},"ts":1379019777000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"Hixie_: the algorithm for resolving states that it needs to identify an image by a topple","msgtype":"m.text"},"ts":1379019812000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"don't assume :-)","msgtype":"m.text"},"ts":1379019813000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: and one part of the toople is the value of crossorigin attribtue","msgtype":"m.text"},"ts":1379019835000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"\"The crossorigin attribute is a CORS settings attribute.\" => http://www.whatwg.org/specs/web-apps/current-work/#cors-settings-attribute","msgtype":"m.text"},"ts":1379019836000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"\"A CORS settings attribute is an enumerated attribute.\" => http://www.whatwg.org/specs/web-apps/current-work/#enumerated-attribute","msgtype":"m.text"},"ts":1379019856000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: ok, thanks","msgtype":"m.text"},"ts":1379019877000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"\"When the attribute is not specified, if there is a missing value default state defined, then that is the state represented by the (missing) attribute.\"","msgtype":"m.text"},"ts":1379019880000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"then back to CORS setting attribute: \"The missing value default, used when the attribute is omitted, is the No CORS state.\"","msgtype":"m.text"},"ts":1379019894000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: yes, it is defined. Couldn't find it on the first try. But didn't see that there is another link to \"CORS settings attribute\"","msgtype":"m.text"},"ts":1379020603000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"krit: crossorigin=\"\" seems unrelated to the question you asked","msgtype":"m.text"},"ts":1379021435000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: to the SVG example? yes. But I was trying to understand the algorithm for fetching. And this was a requirement.","msgtype":"m.text"},"ts":1379021500000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"ah, ok","msgtype":"m.text"},"ts":1379021512000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i think the svg spec should define what the behavior should be when loaded via <img> or css background-image and similar","msgtype":"m.text"},"ts":1379021560000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: I do not disagree. I wanted to check what already is defined and what isn't.","msgtype":"m.text"},"ts":1379021670000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"Hixie_: when does invoking the parser spin the event loop?","msgtype":"m.text"},"ts":1379022231000,"senderName":"jamesr_`","senderId":"jamesr_`@irc"},
{"content":{"body":"jamesr_`: when parsing scripts","msgtype":"m.text"},"ts":1379023029000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"GPHemsley: https://github.com/html5lib/html5lib-tests/tree/master/sniffer may be of interest to you","msgtype":"m.text"},"ts":1379023031000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"GPHemsley: I may well remove that from html5lib-tests soon. It's been unused for years and miles off the spec nowadays.","msgtype":"m.text"},"ts":1379023055000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hixie_: i didn't file https://www.w3.org/Bugs/Public/show_bug.cgi?id=22488","msgtype":"m.text"},"ts":1379023063000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: Fortunately, I don't think legacy encodings are something that changes much once it is specced.","msgtype":"m.text"},"ts":1379023068000,"senderName":"Yuhong","senderId":"Yuhong@irc"},
{"content":{"body":"zcorpan: yeah, that's why i removed the whiteboard thing","msgtype":"m.text"},"ts":1379023085000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"oh, ok","msgtype":"m.text"},"ts":1379023106000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"instead of pinging you here","msgtype":"m.text"},"ts":1379023115000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"hopes anne checks his bugmail","msgtype":"m.emote"},"ts":1379023127000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"(i marked several of his bugs NEEDSINFO)","msgtype":"m.text"},"ts":1379023132000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"re devicePixelRatio, filed https://www.w3.org/Bugs/Public/show_bug.cgi?id=23228","msgtype":"m.text"},"ts":1379024450000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"gsnedders: It doesn't look like there's much there","msgtype":"m.text"},"ts":1379027434000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"GPHemsley: There isn't. :)","msgtype":"m.text"},"ts":1379027452000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hixie_: just for the wait-for-blocking-stylesheets behavior?","msgtype":"m.text"},"ts":1379027609000,"senderName":"jamesr_`","senderId":"jamesr_`@irc"},
{"content":{"body":"i don't think we implement that as the text is written, but i think it only matters when doc.writing() from somewhere not in a <script>","msgtype":"m.text"},"ts":1379027630000,"senderName":"jamesr_`","senderId":"jamesr_`@irc"},
{"content":{"body":"will have to ponder how to actually test that","msgtype":"m.text"},"ts":1379027641000,"senderName":"jamesr_`","senderId":"jamesr_`@irc"}
]