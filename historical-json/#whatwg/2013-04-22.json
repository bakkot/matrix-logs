[
{"content":{"body":"zcorpan: have them mail me","msgtype":"m.text"},"ts":1366605836000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hello","msgtype":"m.text"},"ts":1366612895000,"senderName":"Joser","senderId":"Joser@irc"},
{"content":{"body":"Bye","msgtype":"m.text"},"ts":1366612990000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"zcorpan: sorry if I seemed overly dismissive in my response to that validator bug report","msgtype":"m.text"},"ts":1366619079000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: no problem","msgtype":"m.text"},"ts":1366619102000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"the context is that I was going through validator bugs this weekend and trying to resolve some of the stale onece","msgtype":"m.text"},"ts":1366619111000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"*ones","msgtype":"m.text"},"ts":1366619115000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that is, ones that I think have little chance of ever getting implemented","msgtype":"m.text"},"ts":1366619147000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and that bug seems like one of those","msgtype":"m.text"},"ts":1366619157000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"what I really want to do is just move the legacy validator to validator.w3.org/classic or something","msgtype":"m.text"},"ts":1366619216000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and completely remove the HTML5-checking from it","msgtype":"m.text"},"ts":1366619233000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and instead just move the validator.nu-based validator to validator.w3.org","msgtype":"m.text"},"ts":1366619273000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"then the kinds of problems like in that bug report disappear","msgtype":"m.text"},"ts":1366619304000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"\"classic\" does rather strongly suggest \"classic car\", which might not give quite the right impression.","msgtype":"m.text"},"ts":1366619321000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"and I could focus just on making the vnu validator as good as it should be","msgtype":"m.text"},"ts":1366619327000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I would make all sorts of serious suggestions","msgtype":"m.text"},"ts":1366619358000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: it's better than \"old\" or \"legacy\"","msgtype":"m.text"},"ts":1366619361000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"But really I just want it to be /steampunk","msgtype":"m.text"},"ts":1366619376000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1366619386000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"antique","msgtype":"m.text"},"ts":1366619420000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"emeritus","msgtype":"m.text"},"ts":1366619439000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"\"brocante\" is apparently translated as \"junk\"","msgtype":"m.text"},"ts":1366619470000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"MikeSmith: makes sense","msgtype":"m.text"},"ts":1366621026000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: Thanks for finishing that review","msgtype":"m.text"},"ts":1366630035000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"np","msgtype":"m.text"},"ts":1366630048000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Should register arewereviewedyet.com and plot number of open pull requests against time","msgtype":"m.text"},"ts":1366630142000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Actually it would be a pretty nice idea to make a web-platform-tests status dashboard","msgtype":"m.text"},"ts":1366630252000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"With # open pull requests","msgtype":"m.text"},"ts":1366630262000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Some measurements of test coverage","msgtype":"m.text"},"ts":1366630272000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Probably some other stuff","msgtype":"m.text"},"ts":1366630284000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"wonders what a \"branded future\" is","msgtype":"m.emote"},"ts":1366630435000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Apart from social commentary","msgtype":"m.text"},"ts":1366630448000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"zcorpan, jgraham, any of you want to merge? :)","msgtype":"m.text"},"ts":1366630802000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"\"Server reply: Merging pull request failed (you are not allowed to merge this pull request)\"","msgtype":"m.text"},"ts":1366630867000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Boo.","msgtype":"m.text"},"ts":1366630876000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"merging in github worked","msgtype":"m.text"},"ts":1366630905000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Ah","msgtype":"m.text"},"ts":1366630910000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"That button doesn't work :)","msgtype":"m.text"},"ts":1366630918000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Merging in critic is known-broken","msgtype":"m.text"},"ts":1366630921000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I don't know why","msgtype":"m.text"},"ts":1366630921000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I don't know why the button is still there ;)","msgtype":"m.text"},"ts":1366630935000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: BEcause I haven't dared revert to the version I put in critic-critic yet :)","msgtype":"m.text"},"ts":1366630987000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"s/revert/switch/","msgtype":"m.text"},"ts":1366630995000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"So you're asking the critics to review your critic which you aren't using to critic?","msgtype":"m.text"},"ts":1366631039000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Exactly","msgtype":"m.text"},"ts":1366631069000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Aha","msgtype":"m.text"},"ts":1366631073000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"goes back to Featherweight Java","msgtype":"m.emote"},"ts":1366631084000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Mmm, if I see Opera and Firefox send out a GET request for a favicon.ico and Chrome does not do it, can I assume Chrome's behaviour is buggy? (Empty caches and all that, so it ought to fetch a clean copy.) Or could a 302 redirect cause it to be missing out on sending this GET out? Not sure what the expected behaviour is in that case.","msgtype":"m.text"},"ts":1366632359000,"senderName":"asmodai","senderId":"asmodai@irc"},
{"content":{"body":"I would still expect it to send out a GET for the icon, even if it gets redirected though.","msgtype":"m.text"},"ts":1366632398000,"senderName":"asmodai","senderId":"asmodai@irc"},
{"content":{"body":"jgraham: branding is the way \"if /x/ is an Element\" type of checks work","msgtype":"m.text"},"ts":1366635132000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: it's not very explicit in current specifications","msgtype":"m.text"},"ts":1366635142000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: here's a gist explaining it https://gist.github.com/wycats/89b2a49a3431b04e88c7","msgtype":"m.text"},"ts":1366635167000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so CaretPosition#getClientRect would return a zero-width \"rectangle\"?","msgtype":"m.text"},"ts":1366635798000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: I rather suspect \"work\" in that sentence has nothing to do with actual implementations","msgtype":"m.text"},"ts":1366635962000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: sorry, will work","msgtype":"m.text"},"ts":1366635976000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Or rather, I doubt the contents of that gist are like what implkementations will do","msgtype":"m.text"},"ts":1366635990000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"And I don't really understand what point it's trying to make","msgtype":"m.text"},"ts":1366636029000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But you understand what I meant now?","msgtype":"m.text"},"ts":1366636296000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Not really, but I mgith be missing the context","msgtype":"m.text"},"ts":1366636388000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Although certainly using something that appears to be a recently-coined term doesn't make things clearer","msgtype":"m.text"},"ts":1366636423000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"It's a ES6 concept which I think es-discuss is quite familiar with and I was not until recently, but it helps explaining part of how host objects currently work.","msgtype":"m.text"},"ts":1366636495000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It was also a big part of the discussion leading up to futures so you might find it worth your time going through that.","msgtype":"m.text"},"ts":1366636535000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"huh. nothing on w3cmemes about the recent public-html-media thread","msgtype":"m.text"},"ts":1366638112000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"People still read that?","msgtype":"m.text"},"ts":1366638159000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"reads both public-html-media and w3cmemes","msgtype":"m.emote"},"ts":1366638219000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: So you seem to be the man to make it then :]","msgtype":"m.text"},"ts":1366638617000,"senderName":"odinho","senderId":"odinho@irc"},
{"content":{"body":"zcorpan++","msgtype":"m.text"},"ts":1366638640000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: hmm?","msgtype":"m.text"},"ts":1366638663000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Having an editor for cssom again is nice","msgtype":"m.text"},"ts":1366638676000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1366638688000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Ms2ger: who's editing CSSOM?","msgtype":"m.text"},"ts":1366638739000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Guessing zcorpan based on the increment.","msgtype":"m.text"},"ts":1366638773000,"senderName":"odinho","senderId":"odinho@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1366638788000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"great","msgtype":"m.text"},"ts":1366638908000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: is there a version history link available?","msgtype":"m.text"},"ts":1366639025000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://dvcs.w3.org/hg/csswg?","msgtype":"m.text"},"ts":1366639048000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":":/","msgtype":"m.text"},"ts":1366639087000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i'm not really getting along with glenn's build system","msgtype":"m.text"},"ts":1366640293000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: why don't you start from before he messed up my system?","msgtype":"m.text"},"ts":1366640325000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i guess that would involve kicking glenn out as editor and he said he wanted to continue to edit","msgtype":"m.text"},"ts":1366640507000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"anyone know what the purpose of keeping track of a 'language stack' in the webvtt cue text parsing rules is? http://dev.w3.org/html5/webvtt/#webvtt-cue-text-parsing-rules","msgtype":"m.text"},"ts":1366640744000,"senderName":"reyre__","senderId":"reyre__@irc"},
{"content":{"body":"reyre__: all webvtt nodes get an \"applicable language\" assigned from the top of the stack","msgtype":"m.text"},"ts":1366641172000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: :/","msgtype":"m.text"},"ts":1366641176000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"reyre__: so that :lang() works","msgtype":"m.text"},"ts":1366641194000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ah okay, i see that now. missed that point","msgtype":"m.text"},"ts":1366641241000,"senderName":"reyre__","senderId":"reyre__@irc"},
{"content":{"body":"thanks zcorpan :)","msgtype":"m.text"},"ts":1366641251000,"senderName":"reyre__","senderId":"reyre__@irc"},
{"content":{"body":"zcorpan: does the applicable language apply for text node objects ? or just internal node objects ?","msgtype":"m.text"},"ts":1366641322000,"senderName":"reyre__","senderId":"reyre__@irc"},
{"content":{"body":"looks like only internal node objects","msgtype":"m.text"},"ts":1366641357000,"senderName":"reyre__","senderId":"reyre__@irc"},
{"content":{"body":"reyre__: http://dev.w3.org/html5/webvtt/#dfn-attach-a-webvtt-internal-node-object","msgtype":"m.text"},"ts":1366641381000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: okay sounds good, thanks :)","msgtype":"m.text"},"ts":1366641434000,"senderName":"reyre__","senderId":"reyre__@irc"},
{"content":{"body":"<lang> is not tested in opera's testsuite","msgtype":"m.text"},"ts":1366641798000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Yay, PR 100","msgtype":"m.text"},"ts":1366642781000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"MikeSmith: whoa. the Html4Assertions class ended up being pretty short","msgtype":"m.text"},"ts":1366645865000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"jgraham: I think \"branding\" is a spec concept right now, but as soon as we have Symbols in JS, it'll be a real thing. Basically just means something that has been blessed by the runtime as a real thing, rather than having to use duck-typing to tell whether it's a Future or not.","msgtype":"m.text"},"ts":1366646745000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"zcorpan: I wouldn't worry about glenn's assertions that he wants to continue to edit.  He hasn't done any non-trivial editing in a year, so it's on him to prove that he's actually worth something to the spec.","msgtype":"m.text"},"ts":1366646809000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Yeah, I get the idea. It's bolt-on typing.","msgtype":"m.text"},"ts":1366647392000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Yes.","msgtype":"m.text"},"ts":1366647409000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"A form of nominative typing in a language without any explicit way to handle it.","msgtype":"m.text"},"ts":1366647436000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I should have a lot more on JSIDL soon","msgtype":"m.text"},"ts":1366647972000,"senderName":"wycats__","senderId":"wycats__@irc"},
{"content":{"body":"wycats__: Ooh, intrigued.  Got any pointers?","msgtype":"m.text"},"ts":1366647988000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It's important to think of JSIDL's types as coercion rules not typed","msgtype":"m.text"},"ts":1366647989000,"senderName":"wycats__","senderId":"wycats__@irc"},
{"content":{"body":"Types","msgtype":"m.text"},"ts":1366647991000,"senderName":"wycats__","senderId":"wycats__@irc"},
{"content":{"body":"http://wycats.github.io/jsidl/jsidl.html","msgtype":"m.text"},"ts":1366648021000,"senderName":"wycats__","senderId":"wycats__@irc"},
{"content":{"body":"good morning, Whatwg!","msgtype":"m.text"},"ts":1366648029000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"Please don't bikeshed yet. This is super early and missing a ton of stuff","msgtype":"m.text"},"ts":1366648060000,"senderName":"wycats__","senderId":"wycats__@irc"},
{"content":{"body":"Working with annevk and others","msgtype":"m.text"},"ts":1366648074000,"senderName":"wycats__","senderId":"wycats__@irc"},
{"content":{"body":"wycats__: I don't like the fonts","msgtype":"m.text"},"ts":1366648240000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"oh you said _don't_ bikeshed","msgtype":"m.text"},"ts":1366648257000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":":P","msgtype":"m.text"},"ts":1366648265000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"Java in JavaScript: http://int3.github.io/doppio/about.html Should've seen that coming I suppose.","msgtype":"m.text"},"ts":1366648713000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hey, if crazies are still gonna write Java applets, might as well run them without Java.","msgtype":"m.text"},"ts":1366648740000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"MikeSmith: there's a Version field in Bugzilla, you could create a \"legacy\" version and move the old bugs to that","msgtype":"m.text"},"ts":1366648851000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"So http://wikileaks.org/Transcript-Meeting-Assange-Schmidt was a pretty good read","msgtype":"m.text"},"ts":1366649149000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins, annevk: When you get a sec, could you sanity check that we're defining the Futures stuff correctly via the WebIDL in the JSON-LD API (ignore the big red issue marker, it no longer applies): http://www.markus-lanthaler.com/tmp-futures/json-ld-api/#the-jsonldprocessor-interface","msgtype":"m.text"},"ts":1366649207000,"senderName":"manu-db","senderId":"manu-db@irc"},
{"content":{"body":"manu-db: Will do.","msgtype":"m.text"},"ts":1366649363000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"manu-db: I think you need to specify that the returned future is initially pending.","msgtype":"m.text"},"ts":1366649445000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: yup, ok, thanks.","msgtype":"m.text"},"ts":1366649476000,"senderName":"manu-db","senderId":"manu-db@irc"},
{"content":{"body":"Otherwise, I'll defer to annevk to tell you whether your use of terminology is correct and sufficient.  (I hope it is, because that's a nice easy way to talk about futures.)","msgtype":"m.text"},"ts":1366649512000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"manu-db: you need to create a new future, return it, and say that the remaining steps have to be run asynchronously","msgtype":"m.text"},"ts":1366649524000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"manu-db: and then at some point you invoked the future's associated resolver's reject and resolve algorithms","msgtype":"m.text"},"ts":1366649555000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"manu-db: in those asynchronous steps","msgtype":"m.text"},"ts":1366649569000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: pending is the default state of a new future, so that's not needed","msgtype":"m.text"},"ts":1366649592000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: You're saying that we should document that in the spec, right? That is,  you're not telling me how futures work, you're saying that we need to make it clear to the developer that those are the steps that are going to occur when they make the call?","msgtype":"m.text"},"ts":1366649639000,"senderName":"manu-db","senderId":"manu-db@irc"},
{"content":{"body":"manu-db: yes you need to write that in the specification so implementors know what to do","msgtype":"m.text"},"ts":1366649667000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok, we'll do that, then. Seems a bit strange though, as the Futures spec should probably say that?","msgtype":"m.text"},"ts":1366649704000,"senderName":"manu-db","senderId":"manu-db@irc"},
{"content":{"body":"annevk: It would be great if we could abstract that away and just say \"reject the future with [value]\" or whatever.  Is there a reason we need to be specific about \"the future's associated resolver's reject algorithm\"?","msgtype":"m.text"},"ts":1366649705000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"manu-db: say what?","msgtype":"m.text"},"ts":1366649724000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Each future has only one resolver, after all.","msgtype":"m.text"},"ts":1366649727000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: what TabAtkins is saying.","msgtype":"m.text"},"ts":1366649737000,"senderName":"manu-db","senderId":"manu-db@irc"},
{"content":{"body":"I suppose we could provide a shortcut for specifications, but the idea is that when you create a future you get hold of a resolver object you control and that is not exposed to the outside world","msgtype":"m.text"},"ts":1366649775000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and that resolver object is what you use to influence the state of the future","msgtype":"m.text"},"ts":1366649800000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Unless I don't understand how the resolver works (which could very well be true), it seems like what you suggested that we put into the JSON-LD API spec is boilerplate text that should probably exist in the WHATWG DOM spec.","msgtype":"m.text"},"ts":1366649809000,"senderName":"manu-db","senderId":"manu-db@irc"},
{"content":{"body":"Yes, but that can all be implicit, since we're in spec land.","msgtype":"m.text"},"ts":1366649812000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"nods.","msgtype":"m.emote"},"ts":1366649817000,"senderName":"manu-db","senderId":"manu-db@irc"},
{"content":{"body":"I'm not entirely convinced that hiding the conceptual model is a net positive","msgtype":"m.text"},"ts":1366649844000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if we don't make it implicit, then the implication is that all the specs that use Futures will just repeat that same line, no?","msgtype":"m.text"},"ts":1366649846000,"senderName":"manu-db","senderId":"manu-db@irc"},
{"content":{"body":"It's just understood that, when a spec creates a future, it has access to its resolver.  Then we can just operate on the future's state directly.","msgtype":"m.text"},"ts":1366649848000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: It's not really hiding the conceptual model, it's that people should probably understand how a Future works and if they don't, they should read the spec that defines futures (or a tutorial)","msgtype":"m.text"},"ts":1366649886000,"senderName":"manu-db","senderId":"manu-db@irc"},
{"content":{"body":"annevk: Most APIs layered on top of the DOM don't get into the gory details of the conceptual model of the DOM, afaik.","msgtype":"m.text"},"ts":1366649914000,"senderName":"manu-db","senderId":"manu-db@irc"},
{"content":{"body":"TabAtkins, annevk: In this particular case, I'm fine with being a little more explicit about how the API works in the JSON-LD API since Futures are kinda new-ish to developers.","msgtype":"m.text"},"ts":1366649960000,"senderName":"manu-db","senderId":"manu-db@irc"},
{"content":{"body":"manu-db: gory? hah","msgtype":"m.text"},"ts":1366649962000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"manu-db: but yeah, I suppose we'll add some boilerplate shortcuts","msgtype":"m.text"},"ts":1366649988000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: The kind of text you're saying we need to use to invoke a future is indeed gory.  ^_^","msgtype":"m.text"},"ts":1366649994000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The futures spec itself uses it consistently too","msgtype":"m.text"},"ts":1366650016000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's not that bad really","msgtype":"m.text"},"ts":1366650045000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, TabAtkins: We'll try to write some text explaining the design of the API and I'll run it by both of you once we're done.","msgtype":"m.text"},"ts":1366650057000,"senderName":"manu-db","senderId":"manu-db@irc"},
{"content":{"body":"It... really is.  From your history with writing specs, it seems you're just bad at seeing stuff as gory.  ^_^","msgtype":"m.text"},"ts":1366650068000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"thanks annevk, TabAtkins... disappears.","msgtype":"m.emote"},"ts":1366650084000,"senderName":"manu-db","senderId":"manu-db@irc"},
{"content":{"body":"manu-db: the most important bits however are saying that you return a new future and that the remaining steps are to be run asynchronously","msgtype":"m.text"},"ts":1366650090000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nods.","msgtype":"m.emote"},"ts":1366650098000,"senderName":"manu-db","senderId":"manu-db@irc"},
{"content":{"body":"Hixie: would appreciate an answer to this: http://krijnhoetmer.nl/irc-logs/whatwg/20130418#l-611","msgtype":"m.text"},"ts":1366650108000,"senderName":"SteveF","senderId":"SteveF@irc"},
{"content":{"body":"Yeah, that part seems reasonable and necessary.","msgtype":"m.text"},"ts":1366650108000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"reasonable? come on TabAtkins","msgtype":"m.text"},"ts":1366650120000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1366650132000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"and the ad-hominem seems out-of-place too","msgtype":"m.text"},"ts":1366650234000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Uh, dude, back up a bit.","msgtype":"m.text"},"ts":1366650246000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'm saying that I think you have a problem with seeing complexity in your own specs.  This is not an ad hominem attack.  Please take it as a gentle criticism, and a request that you keep boilerplate minimization as a goal for specs calling into your own in the future.","msgtype":"m.text"},"ts":1366650321000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"As a simple example, \"invoke the future's associated resolver's reject algorithm with [value]\" is unacceptable boilerplate for a feature this simple.  \"Reject the future with [value].\" is acceptable - both easy to write, and easy for people (implementors and authors) to read.","msgtype":"m.text"},"ts":1366650481000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You probably want. Let f be future and r its associated resolver. Run r's reject with [value [and the synchronous flag set]]","msgtype":"m.text"},"ts":1366650679000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"This reminds me of a bug I need to comment on though...","msgtype":"m.text"},"ts":1366650707000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: I guess annevk already said this, but the second form seems suboptimal to me because it isn't totally clear which algorithm you are invoking","msgtype":"m.text"},"ts":1366650787000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I don't want any of that.  That's still far more complexity than I should need to specify for a spec, where it's assumed that I have access to the resolver for a future I've created in an earlier step.","msgtype":"m.text"},"ts":1366650799000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jgraham: There's only three algorithms: accept, resolve, and reject.  I'm unsure how it could be unclear which is being invoked when you say \"reject the future\".","msgtype":"m.text"},"ts":1366650826000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"reject the future\" doesn't obviously invoke *any* of the algorithms","msgtype":"m.text"},"ts":1366650862000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: I'd like a paragraph in the spec that says something like, \"To <dfn>reject a future</dfn>, let f be future and r its assocated resolver...\".","msgtype":"m.text"},"ts":1366650886000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"SteveF: do you mean, how should changes that the w3c has made in its fork of HTML be documented?","msgtype":"m.text"},"ts":1366650894000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Then I can just say \"Reject the future with [value]\", and link to your anchor.","msgtype":"m.text"},"ts":1366650902000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"SteveF: or do you mean, how should problems in the HTML standard be reported?","msgtype":"m.text"},"ts":1366650910000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Righ, if DOM defines the meaning of \"reject the future\" then things are different","msgtype":"m.text"},"ts":1366650917000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: You'll have to explain to me what confusion you're seeing.","msgtype":"m.text"},"ts":1366650919000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jgraham: Well, obviously. ^_^","msgtype":"m.text"},"ts":1366650929000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I'm seeing the confusion that you are trying to invoke a definition that doesn't yet exist :p","msgtype":"m.text"},"ts":1366650965000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Pedant. ^_^","msgtype":"m.text"},"ts":1366650973000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"This is spec land, I can just assume that an appropriate definition exists for me to invoke.","msgtype":"m.text"},"ts":1366650990000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Not if you want to write good specs :)","msgtype":"m.text"},"ts":1366651109000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"hixie: I mean the former","msgtype":"m.text"},"ts":1366651119000,"senderName":"SteveF","senderId":"SteveF@irc"},
{"content":{"body":"SteveF: the way that i used to do it in the whatwg spec seems like the simplest solution","msgtype":"m.text"},"ts":1366651138000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"SteveF: just have a section in the intro that lists every intentional difference","msgtype":"m.text"},"ts":1366651155000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and the rationale","msgtype":"m.text"},"ts":1366651172000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"SteveF: that way people could tell which were intentional and which were not","msgtype":"m.text"},"ts":1366651176000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"SteveF: and what the rationales were","msgtype":"m.text"},"ts":1366651183000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: I'd still like to see how you generalized so quickly from one example which I haven't even thought much about yet since there's no external consumers yet to me having a general habbit of doing the wrong thing.","msgtype":"m.text"},"ts":1366651234000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hixie: OK will discuss with the editor team - thanks","msgtype":"m.text"},"ts":1366651246000,"senderName":"SteveF","senderId":"SteveF@irc"},
{"content":{"body":"annevk: I'm generalizing from my experiences with CORS, which I still find impenetrable despite my best efforts. :/","msgtype":"m.text"},"ts":1366651381000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: the problem with CORS is that CSS doesn't have \"fetch\". And without \"fetch\" trying to understand CORS is like going way beyond where you are today.","msgtype":"m.text"},"ts":1366651428000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I can accept that, sure.","msgtype":"m.text"},"ts":1366651443000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: http://fetch.spec.whatwg.org/ should address that, though beware, it has no convenient hooks yet either","msgtype":"m.text"},"ts":1366651446000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"anyone got IE around? what does it alert in http://damowmow.com/playground/demos/cross-iframe-scripting/001.html ?","msgtype":"m.text"},"ts":1366651457000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: doesn't it have the old HTML \"fetch\" still?","msgtype":"m.text"},"ts":1366651468000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: CSS could use the HTML definitions, sure","msgtype":"m.text"},"ts":1366651483000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: problem solved :-)","msgtype":"m.text"},"ts":1366651527000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: oh you mean that specification? Yeah I have the mapping defined somewhere under \"Legacy\". I still haven't really figured out the right abstractions.","msgtype":"m.text"},"ts":1366651534000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Tell me where to define it, and I'll get it done","msgtype":"m.text"},"ts":1366651545000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: you should just make that the actual hook. There's no way I'm updating HTML to use another hook, that's way too risky, and way too much work, for way too little benefit.","msgtype":"m.text"},"ts":1366651564000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: and it's a nice simple API.","msgtype":"m.text"},"ts":1366651577000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: but the API doesn't handle CORS","msgtype":"m.text"},"ts":1366651585000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: right, there's the separate hook if you want CORS.","msgtype":"m.text"},"ts":1366651619000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: and the API cannot be used by XHR, and the new navigation controller stuff that's coming","msgtype":"m.text"},"ts":1366651629000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: you either do a \"fetch\", or a \"potentially CORS-enabled fetch\".","msgtype":"m.text"},"ts":1366651634000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: why not?","msgtype":"m.text"},"ts":1366651646000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(what is a \"navigation controller\"?)","msgtype":"m.text"},"ts":1366651671000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: https://github.com/slightlyoff/NavigationController/","msgtype":"m.text"},"ts":1366651726000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: and your current hooks have overlaps with e.g. the same-origin flag that's the same as \"No CORS\", fail","msgtype":"m.text"},"ts":1366651772000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: and don't sufficiently distinguish between credentials and CORS","msgtype":"m.text"},"ts":1366651797000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: i wouldn't describe that as \"stuff that's coming\" until it's, you know, actually discussed on a public list...","msgtype":"m.text"},"ts":1366651803000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: what's the difference between a public list and a public repo?","msgtype":"m.text"},"ts":1366651825000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: it's been announced on a public list","msgtype":"m.text"},"ts":1366651834000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"same thing that's wrong with creating a new mailing list","msgtype":"m.text"},"ts":1366651844000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"people aren't on it","msgtype":"m.text"},"ts":1366651848000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: Unrelated discussion - I'm finding it hard to follow exactly, but do Futures recursively resolve?  That is, in the following code:","msgtype":"m.text"},"ts":1366651939000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Well, there's some set of people that prefer working on it this way. And if that's the way they prefer to getting it done, that's the way it'll happen.","msgtype":"m.text"},"ts":1366651942000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(actually NavigationController was a private repo for a long time which is extremely distastful)","msgtype":"m.text"},"ts":1366651969000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"getFuture().then(function(){ return new Future(function(r) { r.accept(new Future(...)); })});","msgtype":"m.text"},"ts":1366652030000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: also, your current hooks are extremely hard to reason about with respect to the Origin header and the implications on security. And actually have several bugs. E.g. a cross-origin redirect to a javascript: URL will be CORS-same-origin...","msgtype":"m.text"},"ts":1366652036000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: or not happen, as the case may be :-)","msgtype":"m.text"},"ts":1366652038000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(In other words, .then() returns a future for a future.)","msgtype":"m.text"},"ts":1366652044000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: that's the next step","msgtype":"m.text"},"ts":1366652047000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"Does it resolve to just a future, or to the future-of-a-future's resolved value?","msgtype":"m.text"},"ts":1366652062000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: getting the design to a point where it's not a total shit-show is Step 1","msgtype":"m.text"},"ts":1366652065000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"TabAtkins: you need to use resolve for that, not accept","msgtype":"m.text"},"ts":1366652092000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"slightlyoff: just make sure you don't present a fait accompli... people always feel they need to change proposals before they're willing to adopt them. that's why i encourage people to put their shit shows in public first. :-)","msgtype":"m.text"},"ts":1366652107000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: designs need to hang together","msgtype":"m.text"},"ts":1366652122000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"annevk: I used accept for a reason, specifically so I could ask the question that I did.","msgtype":"m.text"},"ts":1366652135000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"slightlyoff: designs are not what should be presented first","msgtype":"m.text"},"ts":1366652136000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I'm more interested in \"good\" than \"inclusive\". The standards process has plenty of room for the later","msgtype":"m.text"},"ts":1366652147000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"TabAtkins: but you also said \"resolve\" :-)","msgtype":"m.text"},"ts":1366652151000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"slightlyoff: if you're interested in \"adopted\", then \"inclusive\" is more important than \"good\"","msgtype":"m.text"},"ts":1366652169000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: here's the new outline of the current design: https://github.com/slightlyoff/NavigationController/blob/master/explainer.md","msgtype":"m.text"},"ts":1366652187000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"Man, whatever the generic term is for \"has a value that isn't an error\".  ^_^","msgtype":"m.text"},"ts":1366652190000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"fulfilled\"?","msgtype":"m.text"},"ts":1366652198000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"slightlyoff: before we discuss design proposals, we should discuss the problem. on a public list.","msgtype":"m.text"},"ts":1366652218000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: \"accepted\"","msgtype":"m.text"},"ts":1366652233000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So, \"accepted\" just means that it's done, regardless of whether it was accepted with r.accept() or r.resolve()?","msgtype":"m.text"},"ts":1366652268000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: yeah, at some point resolve runs through accept","msgtype":"m.text"},"ts":1366652287000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Kk.","msgtype":"m.text"},"ts":1366652296000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: if it wasn't a future","msgtype":"m.text"},"ts":1366652299000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well thenable","msgtype":"m.text"},"ts":1366652303000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So returning a future of a future from a .then() callback just unwraps one level of future, not both.","msgtype":"m.text"},"ts":1366652324000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jgraham: i don't know what to do with https://www.w3.org/Bugs/Public/show_bug.cgi?id=17155","msgtype":"m.text"},"ts":1366652335000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: the problems with the current offline solution have been discussed to death though and have been used as input to this design.","msgtype":"m.text"},"ts":1366652359000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: if you use .accept, yes, if you use, .resolve, no","msgtype":"m.text"},"ts":1366652413000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: every discussion i've seen about the problems with the many current offline solutions have (a) not agreed about what those problems are, and (b) not actually been about offline, typically.","msgtype":"m.text"},"ts":1366652438000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Nor do I really :) I don't have any testcases to hand other than the one in the first comment","msgtype":"m.text"},"ts":1366652506000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: That response is confusing, so to be absolutely clear, let me rephrase in a simpler way.  Assume that \"Future.of(a)\" is equivalent to \"new Future(function(r) { r.accept(a); })\".","msgtype":"m.text"},"ts":1366652531000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jgraham: k","msgtype":"m.text"},"ts":1366652568000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Then, in this scenario:  \"getFuture().then(function() { return Future.of(Future.of(5)); }).then(function(v) { console.log(v); });\"","msgtype":"m.text"},"ts":1366652569000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The log will show a Future containing 5, not 5 itself, yes?","msgtype":"m.text"},"ts":1366652580000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Future.of() is a terrible API name, BTW","msgtype":"m.text"},"ts":1366652581000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"I hope we haven't accepted that (har har)","msgtype":"m.text"},"ts":1366652586000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"slightlyoff: Disagree, but neither here nor there.  ^_^","msgtype":"m.text"},"ts":1366652591000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: yes","msgtype":"m.text"},"ts":1366652619000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Okay, cool.","msgtype":"m.text"},"ts":1366652624000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: That's my preferred answer, but it's also different from Promises/A+ at the moment, which I think recursively unwraps in its resolve algorithm until it hits a non-thenable.","msgtype":"m.text"},"ts":1366652703000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jgraham: i guess part of my confusion is that as far as i can tell, the spec already says this is sync","msgtype":"m.text"},"ts":1366652718000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I think the main problem is that there are many different problems and developers need lower-level primitives to tackle them.","msgtype":"m.text"},"ts":1366652720000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(And .then() invokes the resolve algorithm on its callback's return value.)","msgtype":"m.text"},"ts":1366652721000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Recursive unwrapping is weird magic","msgtype":"m.text"},"ts":1366652733000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: Agreed, but some people don't. :/","msgtype":"m.text"},"ts":1366652744000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: they cannot all be tackled within the constraints of \"appcache\".","msgtype":"m.text"},"ts":1366652751000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I just want a damned monad. Is that so much to ask?","msgtype":"m.text"},"ts":1366652755000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: sure, but then we should document those problems. where was that done? how are we going to evaluate the proposals?","msgtype":"m.text"},"ts":1366652755000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: i didn't mention appcache","msgtype":"m.text"},"ts":1366652759000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: again, Promises/A+ would use r.resolve()","msgtype":"m.text"},"ts":1366652773000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: have you not read public-webapps in a while?","msgtype":"m.text"},"ts":1366652816000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: That's not what I asked.","msgtype":"m.text"},"ts":1366652861000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: unless something happened since friday, i think i'm up to date","msgtype":"m.text"},"ts":1366652865000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"jgraham: oh, nm, i see where it says it's async...","msgtype":"m.text"},"ts":1366652882000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: documentation is in http://lists.w3.org/Archives/Public/public-webapps/2013JanMar/0977.html and such","msgtype":"m.text"},"ts":1366652940000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: The only relevance of .accept() vs .resolve() in my question was to construct the nested future.  That's not important here, just assume that a nested future can be created somehow.","msgtype":"m.text"},"ts":1366653008000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: so Promises/A+ does not have a concept of accept() so it will of course always do resolve() and unwrap endlessly... What am I missing?","msgtype":"m.text"},"ts":1366653012000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: My point was about returning a nested future from the .then callback.","msgtype":"m.text"},"ts":1366653022000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Since .then(), even in DOM Futures, *does* use resolve semantics for its callback's return value.","msgtype":"m.text"},"ts":1366653040000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: yeah, that discussion was great, but then it just stopped","msgtype":"m.text"},"ts":1366653048000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: right, people moved to working on proposals","msgtype":"m.text"},"ts":1366653073000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: right","msgtype":"m.text"},"ts":1366653093000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: there was a proposal in that e-mail, that's where it should be...","msgtype":"m.text"},"ts":1366653121000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: Are you just saying that it's impossible to even construct a nested future using only Promises/A+ stuff, so that's why they go ahead and unwrap nested futures when they receive one?","msgtype":"m.text"},"ts":1366653139000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: yes","msgtype":"m.text"},"ts":1366653168000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Okay, makes sense.","msgtype":"m.text"},"ts":1366653176000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: (and i'm not convinced that this problem description really is the right starting point. it seems very focused on appcache, rather than on what the actual problem is.)","msgtype":"m.text"},"ts":1366653189000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I was just checking that my preferred interpretation was what was happening, and if so, that it was a willful break from A+, not an unintentional one.","msgtype":"m.text"},"ts":1366653215000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So I'm satisfied now. ^_^","msgtype":"m.text"},"ts":1366653222000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: I think the actual problem is lack of primitives so people can build their \"own appcache\".","msgtype":"m.text"},"ts":1366653237000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: it's not breaking Promises/A+. It's just a feature they don't have.","msgtype":"m.text"},"ts":1366653251000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: that's not a problem, that's the start of a solution.","msgtype":"m.text"},"ts":1366653252000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: Well, it does mean that if you receive a promises/a+ promise, chain off of it with .then(), and return a nested future, it'll have a different result than doing the same thing starting from a dom future.","msgtype":"m.text"},"ts":1366653292000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: fair enough. The problem is too much constraints.","msgtype":"m.text"},"ts":1366653298000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: it all depends on how you create the nested future really","msgtype":"m.text"},"ts":1366653338000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Hm, explain?","msgtype":"m.text"},"ts":1366653352000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: problems i've seen are things like \"we have a one-page web app and we'd like it to load instantly if the user comes back to it\"","msgtype":"m.text"},"ts":1366653410000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: (that particular one is handled fine by the appcache, and to a lesser extent, the http cache)","msgtype":"m.text"},"ts":1366653431000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: (i've seen other ones that aren't handled by either appcache or http)","msgtype":"m.text"},"ts":1366653453000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: that's what i mean by problem","msgtype":"m.text"},"ts":1366653462000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"jgraham: k well i had a go at fixing 17155, dunno how good it is","msgtype":"m.text"},"ts":1366653514000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"mounir: ping https://www.w3.org/Bugs/Public/show_bug.cgi?id=11937","msgtype":"m.text"},"ts":1366653532000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: actually, now I'm not sure anymore","msgtype":"m.text"},"ts":1366653681000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: Cool, thanks","msgtype":"m.text"},"ts":1366653685000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"TabAtkins: too late for this :/","msgtype":"m.text"},"ts":1366653691000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: okay, so the unwrapping works by invoking .then() on the future returned. What that future returns however is up to the implementation of that future.","msgtype":"m.text"},"ts":1366653844000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: I don't see what part of http://promises-aplus.github.io/promises-spec/ is violated though","msgtype":"m.text"},"ts":1366653971000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: it does not forbid fulfilling (in terms of A+) a promise with a promise","msgtype":"m.text"},"ts":1366654049000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: since there is a commit feed that lists every change https://github.com/w3c/html/commits/master would it not make sense to ensure that adequate exaplanation pointers  are provided in the commit info rather than having to rewrite stuff?","msgtype":"m.text"},"ts":1366654056000,"senderName":"SteveF","senderId":"SteveF@irc"},
{"content":{"body":"SteveF: simpler for what purpose?","msgtype":"m.text"},"ts":1366654112000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: if you feel that's a real issue, I'd like to see code that shows why","msgtype":"m.text"},"ts":1366654128000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"(other than instanceof users)","msgtype":"m.text"},"ts":1366654136000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"SteveF: i can't tell from that feed what's going on. For example, it credits me for a bunch of stuff but I've never checked anything into that repo.","msgtype":"m.text"},"ts":1366654136000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins:","msgtype":"m.text"},"ts":1366654138000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"ugg, typing faaaaail.","msgtype":"m.text"},"ts":1366654148000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"slightlyoff: If I feel *what* is a real issue?  Recursive assimilation, or lack of such?","msgtype":"m.text"},"ts":1366654180000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: with respect to fetch; basically the current abstractions from HTML make it extremely hard to reason about what is going to happen. That's my main beef with them","msgtype":"m.text"},"ts":1366654190000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Recursive assimilation (if I understand you correctly) happens when you use .resolve()","msgtype":"m.text"},"ts":1366654217000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"annevk: why?","msgtype":"m.text"},"ts":1366654231000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: for purpose of listing differences : a filtered feed could be made that lists only differences (for example)","msgtype":"m.text"},"ts":1366654233000,"senderName":"SteveF","senderId":"SteveF@irc"},
{"content":{"body":"TabAtkins: or did I miss the case?","msgtype":"m.text"},"ts":1366654235000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"TabAtkins: anyhow, send me mail. Need to eat.","msgtype":"m.text"},"ts":1366654251000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"slightlyoff: I'm worrying about the value returned by .then()'s callback.  That's processed with resolve semantics.","msgtype":"m.text"},"ts":1366654259000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"SteveF: i can't tell what is different from that feed.","msgtype":"m.text"},"ts":1366654260000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"SteveF: sometimes the diffs it credits to me are not what i did.","msgtype":"m.text"},"ts":1366654272000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: e.g. with potential CORS fetch it's pretty hard to figure out which requests will include an Origin header and which won't","msgtype":"m.text"},"ts":1366654284000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SteveF: sometimes the differences are that something i did doesn't get applied at all.","msgtype":"m.text"},"ts":1366654285000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: yes, today it is.","msgtype":"m.text"},"ts":1366654286000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"slightlyoff: With one level of unwrapping, it works properly as a monad.  With recursive unwrapping, it violates the monad contracts.","msgtype":"m.text"},"ts":1366654287000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: it's hard to figure out if same-origin flag is the same as NO CORS, fail","msgtype":"m.text"},"ts":1366654294000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Which one you choose isn't a resolve-vs-accept choice, but rather an implementation detail of your resolve algorithm.","msgtype":"m.text"},"ts":1366654312000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: it's hard to figure out if there are security bugs with data URLs when it comes to redirects (there are)","msgtype":"m.text"},"ts":1366654321000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: not sure how changing the API would affect any of that.","msgtype":"m.text"},"ts":1366654329000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: I'm having a hard time caring about that. You and MarkM can fight it out. He believes the current design to be correct for reasons that require reading his thesis","msgtype":"m.text"},"ts":1366654332000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"(which I have done and cant' actually summarize tersely for you here)","msgtype":"m.text"},"ts":1366654341000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"Hixie: so if it was stated in the commit THIS IS DIFFERENT from WHATWG would that make it suffice?","msgtype":"m.text"},"ts":1366654345000,"senderName":"SteveF","senderId":"SteveF@irc"},
{"content":{"body":"Hixie: by not having the weird interwoven mix of sometimes invoking potential CORS and sometimes fetch but instead have one call site you can remove all that ambiguity","msgtype":"m.text"},"ts":1366654367000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SteveF: no, because that still wouldn't cover the cases of commits that just aren't applied. or things that are done differently, then later changed to match.","msgtype":"m.text"},"ts":1366654373000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: but do cc me on the discussion","msgtype":"m.text"},"ts":1366654379000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"and annevk","msgtype":"m.text"},"ts":1366654384000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"Hixie: and actually reason about what kind of fetches are made","msgtype":"m.text"},"ts":1366654388000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok, really going","msgtype":"m.text"},"ts":1366654391000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"SteveF: the commit feed isn't useful for the purposes of someone just coming along and wanting to know in what ways the w3c changed the spec.","msgtype":"m.text"},"ts":1366654391000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"slightlyoff: Once I figure out what both DOM Futures and Promises/A+ actually say, I'll do so. ^_^","msgtype":"m.text"},"ts":1366654405000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: well i don't mind if you just have \"fetch\" and \"potentially cors-enabled fetch\" just immediately invoke the same underlying algorithm, that'd be fine","msgtype":"m.text"},"ts":1366654426000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: OK will have to think upon it","msgtype":"m.text"},"ts":1366654525000,"senderName":"SteveF","senderId":"SteveF@irc"},
{"content":{"body":"SteveF: (not does it give rationales)","msgtype":"m.text"},"ts":1366654596000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: yes, there's something like that now, but I think long term the HTML specification ought to be fixed to make this far less hard to read","msgtype":"m.text"},"ts":1366654605000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: that's the whole point of going through rationalising the platform's fetching algorithm","msgtype":"m.text"},"ts":1366654632000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SteveF: another way of putting it is, if someone looks at the two specs and finds a difference, where should they go to determine (a) if change was intentional and (b) why it was made, and then, (c) what other changes are made so they can determine (d) if any were not made that one would expect to have been made.","msgtype":"m.text"},"ts":1366654668000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: i don't think the call sites are problematic. i agree the implementation of fetch was a disaster and crossed multiple specs back and forth and we should fix that (thanks for doing that), but i don't understand what you want to do to the call sites.","msgtype":"m.text"},"ts":1366654723000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: maybe if you showed examples of call sites today and what you'd like them to look like instead that would help make your case.","msgtype":"m.text"},"ts":1366654742000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I suppose at some point I'll get to that","msgtype":"m.text"},"ts":1366654772000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"was hard enough figuring out what they were doing in the first place","msgtype":"m.text"},"ts":1366654801000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: OK I have endeavored to include pointers in my changes to bugs/wg discussions, what I would like to do is provide useful info but not do makework","msgtype":"m.text"},"ts":1366654821000,"senderName":"SteveF","senderId":"SteveF@irc"},
{"content":{"body":"SteveF: i don't think it's reasonable to expect people to even know the bugs exist, and the mailing lists are extremely high-volume, so it doesn't help people work out what's different and why.","msgtype":"m.text"},"ts":1366654977000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"SteveF: it's not make work, imho.","msgtype":"m.text"},"ts":1366654981000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"SteveF: it would have helped catch some of the more serious mistakes that have been made so far.","msgtype":"m.text"},"ts":1366655036000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: that is why I add links to bugs and discussions in commits so people can read the history of the change","msgtype":"m.text"},"ts":1366655097000,"senderName":"SteveF","senderId":"SteveF@irc"},
{"content":{"body":"again, people aren't going to know to look there","msgtype":"m.text"},"ts":1366655112000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: don't understand","msgtype":"m.text"},"ts":1366655141000,"senderName":"SteveF","senderId":"SteveF@irc"},
{"content":{"body":"SteveF: it's fairly common for downstream software projects to maintain a list of differences from upstream","msgtype":"m.text"},"ts":1366655159000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SteveF: and kind of expected","msgtype":"m.text"},"ts":1366655167000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: as i asked previously ted, silvia, robin et al were all editors before i started why are we having this discussion now?","msgtype":"m.text"},"ts":1366655229000,"senderName":"SteveF","senderId":"SteveF@irc"},
{"content":{"body":"SteveF: presumably because until now tracking has been not been considered too much work","msgtype":"m.text"},"ts":1366655274000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if some guy comes along and reads the specs, and wants to know why the w3c suggests that people who can see images shouldn't be told there's an audio captcha alternative, where should they go to find out?","msgtype":"m.text"},"ts":1366655276000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"SteveF: i'm having this discussion now because you asked me a question","msgtype":"m.text"},"ts":1366655285000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"SteveF: i'm happy to not have the discussion if you don't want to have it","msgtype":"m.text"},"ts":1366655295000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: hixie: do you have any pointers to examples that could act as a guide to whats expected","msgtype":"m.text"},"ts":1366655311000,"senderName":"SteveF","senderId":"SteveF@irc"},
{"content":{"body":"Hixie: I am perplexed as to why the question was never asked by others","msgtype":"m.text"},"ts":1366655339000,"senderName":"SteveF","senderId":"SteveF@irc"},
{"content":{"body":"SteveF: well you'd have to ask them, not me","msgtype":"m.text"},"ts":1366655353000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i will","msgtype":"m.text"},"ts":1366655366000,"senderName":"SteveF","senderId":"SteveF@irc"},
{"content":{"body":"SteveF: the way the whatwg spec listed differences back when i was doing this is an example of a low-maintenance way of doing it","msgtype":"m.text"},"ts":1366655374000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"SteveF: (at the time, the w3c refused to publish the list in their copy for reasons i still don't understand)","msgtype":"m.text"},"ts":1366655392000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"SteveF: i stopped maintaining the list when i lost track of what the differences were","msgtype":"m.text"},"ts":1366655415000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"SteveF: which is why the whatwg doesn't have it anymore","msgtype":"m.text"},"ts":1366655423000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"do you have apointer to a diff that shows what it was like, had a look but couldn't find when they were removed","msgtype":"m.text"},"ts":1366655424000,"senderName":"SteveF","senderId":"SteveF@irc"},
{"content":{"body":"or a rough date?","msgtype":"m.text"},"ts":1366655439000,"senderName":"SteveF","senderId":"SteveF@irc"},
{"content":{"body":"SteveF: (it's hard to maintain the list when you aren't the one making the changes)","msgtype":"m.text"},"ts":1366655441000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah hold on","msgtype":"m.text"},"ts":1366655444000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"SteveF: http://code.google.com/p/chromium-source-browsing/source/browse/README.chromium?repo=third-party--icu","msgtype":"m.text"},"ts":1366655486000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I have set up a wiki page and will record diffs there","msgtype":"m.text"},"ts":1366655512000,"senderName":"SteveF","senderId":"SteveF@irc"},
{"content":{"body":"(was fairly useful when figuring out what Chrome did with encodings)","msgtype":"m.text"},"ts":1366655524000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SteveF: we still have it here, for example: http://developers.whatwg.org/introduction.html","msgtype":"m.text"},"ts":1366655526000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"under \"How do the WHATWG and W3C specifications differ\"","msgtype":"m.text"},"ts":1366655532000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hixie:annevk: thanks both useful","msgtype":"m.text"},"ts":1366655543000,"senderName":"SteveF","senderId":"SteveF@irc"},
{"content":{"body":"SteveF: more detail would be great, but when i tried adding more detail i was told off for being \"political\" or some bs","msgtype":"m.text"},"ts":1366655569000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"which is why the differences mentioned are sometimes a bit vague","msgtype":"m.text"},"ts":1366655586000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: i will try to provide detail","msgtype":"m.text"},"ts":1366655594000,"senderName":"SteveF","senderId":"SteveF@irc"},
{"content":{"body":"the list anne mentioned is a good example of doing it in open source, yeah","msgtype":"m.text"},"ts":1366655626000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"didn't we have a bug somewhere about making form submission a little more async?","msgtype":"m.text"},"ts":1366656576000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"doesn't remember that","msgtype":"m.emote"},"ts":1366658036000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"getComputedValue() returns the used values, right?","msgtype":"m.text"},"ts":1366658688000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or is there some value type between computed and used that i'm forgetting about","msgtype":"m.text"},"ts":1366658698000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"specified is in the sheet, computed is inherited, used is what's used in layout, right?","msgtype":"m.text"},"ts":1366658713000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: you mean getComputedStyle()?","msgtype":"m.text"},"ts":1366658825000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"uh yeah","msgtype":"m.text"},"ts":1366658852000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: There are some edge cases where it's not really the used value","msgtype":"m.text"},"ts":1366658854000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"Hixie: it returns computed value for most properties, used value for a handful, iirc","msgtype":"m.text"},"ts":1366658869000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"for 'top'?","msgtype":"m.text"},"ts":1366658885000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"is this documented anywhere?","msgtype":"m.text"},"ts":1366658891000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i thought it was in the spec at some point but the current spec just says \"...\"","msgtype":"m.text"},"ts":1366658925000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1366658929000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"e.g. for example some browsers will tell you background-image is a url, even if they're not showing images","msgtype":"m.text"},"ts":1366658937000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"I think Chrome does that","msgtype":"m.text"},"ts":1366658944000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"zcorpan: fuck that was removed????","msgtype":"m.text"},"ts":1366658951000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"top is used value (unless the element is display:none)","msgtype":"m.text"},"ts":1366658964000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"https://dvcs.w3.org/hg/csswg/raw-file/tip/cssom/Overview.html#widl-CSSStyleDeclaration-getPropertyValue-DOMString-DOMString-property","msgtype":"m.text"},"ts":1366658992000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"webben: is the used value of 'background-image' set to none if the image isn't used? huh","msgtype":"m.text"},"ts":1366658993000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'll look into this","msgtype":"m.text"},"ts":1366659013000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hixie: Chrome sets it to the unused image URL.","msgtype":"m.text"},"ts":1366659030000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"zcorpan: https://dvcs.w3.org/hg/csswg/raw-file/tip/cssom/Overview.html#resolved-value","msgtype":"m.text"},"ts":1366659042000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"this is if you turn off images in chrome","msgtype":"m.text"},"ts":1366659047000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"webben: that seems to match the spec","msgtype":"m.text"},"ts":1366659056000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: ah","msgtype":"m.text"},"ts":1366659100000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: https://dvcs.w3.org/hg/csswg/raw-file/tip/cssom/Overview.html#widl-Window-getComputedStyle-CSSStyleDeclaration-Element-elt seems defined still","msgtype":"m.text"},"ts":1366659134000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"spent a bunch of time on that; I would have been interested in reading why someone would have removed that","msgtype":"m.emote"},"ts":1366659162000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: I guess that depends on how not using images is implemented","msgtype":"m.text"},"ts":1366659182000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"but yeah if this happens outside the cascade entirely I guess that's true","msgtype":"m.text"},"ts":1366659222000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"getActual would be kinda nice to have","msgtype":"m.text"},"ts":1366659309000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"i was looking at https://dvcs.w3.org/hg/csswg/raw-file/tip/cssom/Overview.html#widl-CSSStyleDeclaration-getPropertyValue-DOMString-DOMString-property","msgtype":"m.text"},"ts":1366659325000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"though i guess there would be security concerns with it leaking information about the user's system","msgtype":"m.text"},"ts":1366659325000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"webben: hard to say what \"actual\" means sometimes","msgtype":"m.text"},"ts":1366659393000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"e.g. if the image is being converted to black and white, the url wouldn't be the \"actual value\"...","msgtype":"m.text"},"ts":1366659448000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"data uri?","msgtype":"m.text"},"ts":1366659464000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1366659867000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"https://chromiumcodereview.appspot.com/14273007/ ouch","msgtype":"m.text"},"ts":1366660171000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ouch because ew, more accept headers?","msgtype":"m.text"},"ts":1366660350000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Not just \"ough Rietveld\"? :p","msgtype":"m.text"},"ts":1366660524000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"*ouch","msgtype":"m.text"},"ts":1366660528000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"In related news, is today international \"push more changes to closed pull requests\" day or something?","msgtype":"m.text"},"ts":1366660559000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Hixie: \"if some guy comes along and reads the specs, and wants to know why the w3c suggests that people who can see images shouldn't be told there's an audio captcha alternative, where should they go to find out?\" don't understand this, the spec does not say don't tell people","msgtype":"m.text"},"ts":1366660572000,"senderName":"SteveF","senderId":"SteveF@irc"},
{"content":{"body":"Hixie: uhuh","msgtype":"m.text"},"ts":1366660802000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SteveF: the example of a captcha in the w3c version only mentions the audio version if you don't see the image, whereas the example in the whatwg spec tells everyone about it.","msgtype":"m.text"},"ts":1366662206000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"SteveF: this is exactly the kind of difference where documentation would help determine if the difference is just a mistake or intentional","msgtype":"m.text"},"ts":1366662237000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: OK","msgtype":"m.text"},"ts":1366662273000,"senderName":"SteveF","senderId":"SteveF@irc"},
{"content":{"body":"Any Moz IDB folks around?","msgtype":"m.text"},"ts":1366671771000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Ah, sicking: IDB question for you: s = db.createObjectStore('s'); db.deleteObjectStore('s'); s.get(0); --> should throw InvalidStateError, per spec blather about operation on deleted object? FF20 appears not to. Bug or am I missing something?","msgtype":"m.text"},"ts":1366671872000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: hey","msgtype":"m.text"},"ts":1366672374000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"jsbell: i think you broke the spec :)","msgtype":"m.text"},"ts":1366672907000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: hrm... left something out in my removal of exception tables, or something more fundamental?","msgtype":"m.text"},"ts":1366672994000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: Throwing a InvalidStateError sounds correct. I don't know what you mean by \"spec blather\"? :)","msgtype":"m.text"},"ts":1366673000000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"jsbell: the TOC is completely busted","msgtype":"m.text"},"ts":1366673016000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Huh....","msgtype":"m.text"},"ts":1366673021000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: i see a lot of 0's everywhere","msgtype":"m.text"},"ts":1366673026000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Odd. Looks fine to me...","msgtype":"m.text"},"ts":1366673039000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"ble of Contents","msgtype":"m.text"},"ts":1366673043000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"0","msgtype":"m.text"},"ts":1366673044000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"    1. 00Introduction000","msgtype":"m.text"},"ts":1366673045000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"    0","msgtype":"m.text"},"ts":1366673047000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"    2. 00Conformance000","msgtype":"m.text"},"ts":1366673048000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"        2.1 00Dependencies000","msgtype":"m.text"},"ts":1366673049000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"        00","msgtype":"m.text"},"ts":1366673050000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"trying ff....","msgtype":"m.text"},"ts":1366673058000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"looks fine to me in FF20 as well.","msgtype":"m.text"},"ts":1366673081000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"https://dvcs.w3.org/hg/IndexedDB/raw-file/tip/Overview.html ?","msgtype":"m.text"},"ts":1366673086000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"woha, looks fine in chrome","msgtype":"m.text"},"ts":1366673088000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"ooh, and fine in FF20 too","msgtype":"m.text"},"ts":1366673117000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"perhaps you broke firefox? :)","msgtype":"m.text"},"ts":1366673119000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"i think i did :)","msgtype":"m.text"},"ts":1366673126000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"ignore \"blather\". I just meant the boilerplate on each method about throwing when the object is deleted","msgtype":"m.text"},"ts":1366673159000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"crazy, i rarely see such bad bustage on nightlies","msgtype":"m.text"},"ts":1366673161000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"dbaron: hey","msgtype":"m.text"},"ts":1366673174000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking, hi","msgtype":"m.text"},"ts":1366673184000,"senderName":"dbaron","senderId":"dbaron@irc"},
{"content":{"body":"dbaron: i going to blame your team for this :)","msgtype":"m.text"},"ts":1366673191000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking, what?","msgtype":"m.text"},"ts":1366673210000,"senderName":"dbaron","senderId":"dbaron@irc"},
{"content":{"body":"oh, man, it's in the DOM, i can't blame you","msgtype":"m.text"},"ts":1366673220000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"dbaron: spec bustage in nightlies","msgtype":"m.text"},"ts":1366673234000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking, I think there was some js stuff backed out, and nightlies respun","msgtype":"m.text"},"ts":1366673255000,"senderName":"dbaron","senderId":"dbaron@irc"},
{"content":{"body":"sicking, but yes, builds were pretty busted earlier","msgtype":"m.text"},"ts":1366673263000,"senderName":"dbaron","senderId":"dbaron@irc"},
{"content":{"body":"sicking: If you file a FF bug about throwing InvalidStateError, also consider the transitive cases (index of deleted store, cursors of deleted index/store). I just noticed we get those cases wrong in Chrome.","msgtype":"m.text"},"ts":1366673287000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: will do","msgtype":"m.text"},"ts":1366673332000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"jsbell: are you working on defining exception ordering?","msgtype":"m.text"},"ts":1366673359000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: no, per the spec bug I just got rid of the exception tables, didn't impose an ordering. but while doing so, had a nagging feeling about those edge cases","msgtype":"m.text"},"ts":1366673402000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: ah, i see","msgtype":"m.text"},"ts":1366673456000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"jsbell: are you coming on wednesday morning btw? With EricU?","msgtype":"m.text"},"ts":1366673477000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: yes!","msgtype":"m.text"},"ts":1366673495000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: sweet! I want to talk about temporary vs. permanent databases","msgtype":"m.text"},"ts":1366673533000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sgtm","msgtype":"m.text"},"ts":1366673579000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"MikeSmith: do you know if the bugzilla w3c uses supports the \"needsinfo\" fields?","msgtype":"m.text"},"ts":1366673990000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"jsbell: do you know if you guys have any additions to the current spec that you'd like to see sooner rather than later?","msgtype":"m.text"},"ts":1366674031000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: the low hanging fruit are continuePrimaryKey() and objectStore.openKeyCursor(); beyond that are things we need to experiment with first like indexeddb:// URLs, database observers, binary data keys, DOM Futures-based API, expression-based indexing...","msgtype":"m.text"},"ts":1366674214000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Apparently the TC39/I18n crew is proposing a text segmentation API which would help with full-text search if combined with expression indexing.","msgtype":"m.text"},"ts":1366674292000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: nice. I'd add index.openCursor which allows specifying a primary key too","msgtype":"m.text"},"ts":1366674313000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"i am very curious how we'd do indexeddb: URLs. Seems tricky unless you restrict what types of things you could access through it","msgtype":"m.text"},"ts":1366674351000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Given that Chrome doesn't support blobs-in-idb yet it's too early for us to even experiment.","msgtype":"m.text"},"ts":1366674378000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"ah, true","msgtype":"m.text"},"ts":1366674386000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"oh, i was curious if that's easier for you guys to implement now that you've forked webkit","msgtype":"m.text"},"ts":1366674407000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"The canonical example is album art for your IDB of music metadata.","msgtype":"m.text"},"ts":1366674416000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"sounded like one of the bug advantages was that you can simplify the process separation stuff","msgtype":"m.text"},"ts":1366674422000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"s/bug/big/","msgtype":"m.text"},"ts":1366674434000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: yes; we're refactoring to pull code out of blink into chromium now to remove a couple of layers of indirection","msgtype":"m.text"},"ts":1366674447000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"and blob support is something that'll get much easier","msgtype":"m.text"},"ts":1366674472000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"nice!","msgtype":"m.text"},"ts":1366674481000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"hmm.. i wonder if something as simple as indexeddb:http://foo.com/dbname/objectstore/key would be enough","msgtype":"m.text"},"ts":1366674615000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"it wouldn't let you address blobs inside of structured clones","msgtype":"m.text"},"ts":1366674649000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"and it's tricky if the key is something other than a string","msgtype":"m.text"},"ts":1366674660000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"but if you're willing to live with those limitations, it'd work","msgtype":"m.text"},"ts":1366674675000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"you could even allow \"indexeddb:http://foo.com/dbname/objectstore/foo/bar/baz.html\" if \"foo/bar/baz.html\" was the key","msgtype":"m.text"},"ts":1366674749000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"index gets would be nice","msgtype":"m.text"},"ts":1366674837000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"as would #key.path to pull out fragments of an object","msgtype":"m.text"},"ts":1366674847000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"hmm.. good point","msgtype":"m.text"},"ts":1366674847000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"but yeah, we need to ponder a bit","msgtype":"m.text"},"ts":1366674860000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"i think the keypath would have to be part of the url, not part of the fragment","msgtype":"m.text"},"ts":1366674875000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"and it should use the current version, but not trigger an upgrade to v1, etc etc.","msgtype":"m.text"},"ts":1366674876000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"so that you can use fragments to identify things within a blob","msgtype":"m.text"},"ts":1366674886000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Ah, good point","msgtype":"m.text"},"ts":1366674893000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"yeah.. this stuff gets messy :(","msgtype":"m.text"},"ts":1366675000000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"it would be very cool though","msgtype":"m.text"},"ts":1366675004000,"senderName":"sicking","senderId":"sicking@irc"}
]