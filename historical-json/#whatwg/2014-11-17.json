[
{"content":{"body":"gsnedders: Thanks!","msgtype":"m.text"},"ts":1416184640000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"misspellings to not make: \"bare with me\"","msgtype":"m.text"},"ts":1416201144000,"senderName":"zewt_","senderId":"zewt_@irc"},
{"content":{"body":"\"Fun fact: You can't visit http://html.spec.whatwg.org  if you disable RC4 in Firefox.\" < eh?","msgtype":"m.text"},"ts":1416214097000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"MikeSmith, thanks!","msgtype":"m.text"},"ts":1416214522000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: DreamHost updated all Shared, but not VPS","msgtype":"m.text"},"ts":1416214575000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: cheers","msgtype":"m.text"},"ts":1416214792000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Ms2ger: requiring RC4 is how we lead the web to its full potential","msgtype":"m.text"},"ts":1416216178000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"foolip: Thanks for looking at karlt's test chnages","msgtype":"m.text"},"ts":1416220473000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: fwiw, I turned off DNSSEC for hsivonen.fi. I haven't gotten around to blogging about it. TL;DR is: no real upsides considering what hsivonen.fi has in DNS, but did have a downside every 9 months due to the provider not implementing the rollover tooling the way it should be implemented","msgtype":"m.text"},"ts":1416221477000,"senderName":"hsivonen_","senderId":"hsivonen_@irc"},
{"content":{"body":"hsivonen: I thought there was an upside for email?","msgtype":"m.text"},"ts":1416227864000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: however, from everything I read it seems like something like DNSCurve would be preferable","msgtype":"m.text"},"ts":1416227892000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: np!","msgtype":"m.text"},"ts":1416229406000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Manishearth: you're asking the right questions","msgtype":"m.text"},"ts":1416229804000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Manishearth: now someone will ask you if you want to write the UI Event specification :p","msgtype":"m.text"},"ts":1416229828000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"context: https://www.w3.org/Bugs/Public/show_bug.cgi?id=27337","msgtype":"m.text"},"ts":1416229843000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Isn't DOM3 events supposed to handle that?","msgtype":"m.text"},"ts":1416230046000,"senderName":"Manishearth","senderId":"Manishearth@irc"},
{"content":{"body":"Also, if I were to write it, I would write \"Do whatever the hell you want\" :P","msgtype":"m.text"},"ts":1416230058000,"senderName":"Manishearth","senderId":"Manishearth@irc"},
{"content":{"body":"Manishearth, oh no you won't :)","msgtype":"m.text"},"ts":1416230131000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Manishearth: well DOM3 Events will be renamed since I think the editors finally agreed it has the wrong name","msgtype":"m.text"},"ts":1416230178000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hah","msgtype":"m.text"},"ts":1416230187000,"senderName":"Manishearth","senderId":"Manishearth@irc"},
{"content":{"body":"I thought DOM3 Events went to REC ages ago and we're changing the name now?","msgtype":"m.text"},"ts":1416231596000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Heh, rec","msgtype":"m.text"},"ts":1416231656000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"It's been to note, and nearly to cr","msgtype":"m.text"},"ts":1416231669000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"It's the spec that won't die","msgtype":"m.text"},"ts":1416231712000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Given that it doesn't even begin to answer the questions Manishearth asked in that bug it is neither worthy of REC nor CR","msgtype":"m.text"},"ts":1416231921000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I never questioned that :)","msgtype":"m.text"},"ts":1416232118000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Just as well the W3C doesn't have a history of releasing unfinished specs","msgtype":"m.text"},"ts":1416232149000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Sarcasm from jgraham? That's a first!","msgtype":"m.text"},"ts":1416232174000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: do you recall why you dropped Text.replaceWholeText() but not Text.wholeText?","msgtype":"m.text"},"ts":1416232471000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"goes to look up this strangely-named API","msgtype":"m.emote"},"ts":1416232549000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wow Text and CharacterData are more bananas than I realized","msgtype":"m.text"},"ts":1416232814000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"does anyone have any stats on percentage of Linux users have gstreamer h.264 codecs installed?","msgtype":"m.text"},"ts":1416232830000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: I can make some up: not enough to depend on it without telling users what to do when it's not the case :)","msgtype":"m.text"},"ts":1416232952000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: I know that's the case! :)","msgtype":"m.text"},"ts":1416233011000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: unless your software is already using GStreamer as the media framework, you might also want to check for a system-installed ffmpeg/libav","msgtype":"m.text"},"ts":1416233150000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: all browsers use gstreamer, no?","msgtype":"m.text"},"ts":1416233214000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: nope, the only ones I know of are Presto (dead) and GtkWebKit","msgtype":"m.text"},"ts":1416233245000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Oh. You guys all use ffmpeg/libav?","msgtype":"m.text"},"ts":1416233257000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"from memory:","msgtype":"m.text"},"ts":1416233285000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"I definitely had the impression that Gecko had some gstreamer impl","msgtype":"m.text"},"ts":1416233285000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Though now you mention it Chrome using ffmpeg rings a significant bell","msgtype":"m.text"},"ts":1416233308000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"WebKit uses the platform framework, which is different on Mac OS X and iOS","msgtype":"m.text"},"ts":1416233314000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Chromium uses a bundled ffmpeg","msgtype":"m.text"},"ts":1416233331000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"and my impression was that Gecko had a custom media framework","msgtype":"m.text"},"ts":1416233346000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"but there's content/media/gstreamer/ in gecko-dev","msgtype":"m.text"},"ts":1416233377000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"I care only about platforms that don't always have H.264 codecs installed, FWIW.","msgtype":"m.text"},"ts":1416233399000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"i.e., OS X/Windows/iOS/Android are for the most part irrelevant.","msgtype":"m.text"},"ts":1416233409000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"maybe ask rillian if Gecko's GStreamer stuff is always used or just to support proprietary codecs","msgtype":"m.text"},"ts":1416233427000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"gsnedders: didn't http://www.openh264.org","msgtype":"m.text"},"ts":1416233461000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"\"solve\" the problem?","msgtype":"m.text"},"ts":1416233467000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: pretty sure it is used only for proprietary codecs, only on X11 and only for media linked to via src","msgtype":"m.text"},"ts":1416233476000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"foolip: OpenH264 doesn't have all profiles yet","msgtype":"m.text"},"ts":1416233506000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: yeah, I'd be quite surprised if you used GStreamer for MSE","msgtype":"m.text"},"ts":1416233522000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Also means trusting third-party binaries. Don't yet have reproducible builds.","msgtype":"m.text"},"ts":1416233533000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: http://andreasgal.com/2014/10/14/openh264-now-in-firefox/#comment-6620","msgtype":"m.text"},"ts":1416233568000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"foolip: no not sure","msgtype":"m.text"},"ts":1416233570000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the definition of https://dom.spec.whatwg.org/#contiguous-text-nodes is cute :)","msgtype":"m.text"},"ts":1416233607000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"annevk: DNSSEC has an upside for email if your MX points to a name that has DNSSEC enabled and you control the TLS cert of the SMPT server","msgtype":"m.text"},"ts":1416233623000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"annevk: neither is currently true in the case of hsivonen.fi","msgtype":"m.text"},"ts":1416233634000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"foolip: bit of a copout, but it was the simplest I could come up with","msgtype":"m.text"},"ts":1416233643000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I hope to make both true in due course as baby care and work permit","msgtype":"m.text"},"ts":1416233654000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: still more trust than would be nice, though. can't be verified by third parties.","msgtype":"m.text"},"ts":1416233654000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: so maybe I'll end up re-enabling DNSSEC in the future","msgtype":"m.text"},"ts":1416233664000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"annevk: I'm plotting to remove replaceWholeText() from Blink. If you don't have data showing that wholeText is needed, I'll add a UseCounter, wait, and see.","msgtype":"m.text"},"ts":1416233698000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: I'm happy to UseCounter all the things","msgtype":"m.text"},"ts":1416233760000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: anyway, to re-enable DNSSEC, one of three things needs to happen: 1) I figure out how to run my own DNS server, or 2) EasyDNS figure out key sizes and rollover or 3) I locate a provider that has things figured out and is reasonable in other ways, too","msgtype":"m.text"},"ts":1416233813000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"gsnedders: it's also sandboxed","msgtype":"m.text"},"ts":1416233831000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"or maybe \"will be\"","msgtype":"m.text"},"ts":1416233842000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I've lost track of what code ships","msgtype":"m.text"},"ts":1416233849000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"annevk: I'm not saying DNSSEC is totally useless. Just saying that its usefulness is very narrow on balance considering how much trouble it is","msgtype":"m.text"},"ts":1416233956000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: I'm aware.","msgtype":"m.text"},"ts":1416234249000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"TabAtkins: hi, if I want to add a script to a bikeshed spec can I do it .bs?","msgtype":"m.text"},"ts":1416235424000,"senderName":"SteveF__","senderId":"SteveF__@irc"},
{"content":{"body":"annevk: fetch will auto-add Content-Length header when passing a non-streaming body, right?","msgtype":"m.text"},"ts":1416235731000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah","msgtype":"m.text"},"ts":1416236110000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: haven't really defined that part in detail yet","msgtype":"m.text"},"ts":1416236117000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"headers are hard","msgtype":"m.text"},"ts":1416236364000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: relevant https://github.com/joyent/node/blob/master/lib/_http_outgoing.js#L194-L201 (and https://github.com/joyent/node/blob/master/lib/_http_incoming.js#L158-L175 )","msgtype":"m.text"},"ts":1416236556000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That Node is reverse engineering Mozilla should be a sign to the IETF that they are doing something wrong","msgtype":"m.text"},"ts":1416236732000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hehehe","msgtype":"m.text"},"ts":1416236739000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Please tell mnot about it","msgtype":"m.text"},"ts":1416236741000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i wonder what's so special about set-cookie (a few lines above)","msgtype":"m.text"},"ts":1416236851000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"hmm i see. it's an array for set-cookie; drop duplicates for the long list; and concatenate with commas for anything else","msgtype":"m.text"},"ts":1416236902000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that's relatively common, and not the only header it's done for","msgtype":"m.text"},"ts":1416237096000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I think Cookie is actually becoming the only special case","msgtype":"m.text"},"ts":1416237213000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: then which","msgtype":"m.text"},"ts":1416237572000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"annevk: which other","msgtype":"m.text"},"ts":1416237593000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"annevk: if 'neither'","msgtype":"m.text"},"ts":1416237597000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"rektide: context?","msgtype":"m.text"},"ts":1416237605000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"annevk: inspecting event listeners kinda sucks too, so i guess it's all good\" \"rektide: by kind of sucks do you mean it sucks of people trying to do it, or it sucks taht people try to do it\" \"annevk: neither\"","msgtype":"m.text"},"ts":1416237705000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"i'd like to understand what others think of the un-inspectability of event listeners","msgtype":"m.text"},"ts":1416237823000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"It seems like being able to inspect them is anti-composition by providing global state that any script can read / mutate.","msgtype":"m.text"},"ts":1416237918000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"If you can only touch event listeners you own there isn't the worry that someone else might unregister your listeners","msgtype":"m.text"},"ts":1416237962000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"i thought the point of HTML being declarative was that it was revealing and mutable?","msgtype":"m.text"},"ts":1416238055000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"that's always what's been so glorious about it to me- nothing is hidden","msgtype":"m.text"},"ts":1416238064000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"i'm sorry for countering- i want to be learning here, not trying to contradict","msgtype":"m.text"},"ts":1416238084000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"I don't understand why you're sorry","msgtype":"m.text"},"ts":1416238104000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"i'm analyzing your statement, and i feel like we are in a pre-analysis mode","msgtype":"m.text"},"ts":1416238123000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"I don't think that declarativeness and mutability are really related","msgtype":"m.text"},"ts":1416238134000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"For example, at one time, web components promised declarativeness (at least to some degree) and encapsulation","msgtype":"m.text"},"ts":1416238162000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"In the end it looks like they may provide neither","msgtype":"m.text"},"ts":1416238175000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"now that's an arch i wish i'd gotten to see more intimiately","msgtype":"m.text"},"ts":1416238207000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"rektide: there's a thread on www-dom that goes into the subject to some extent","msgtype":"m.text"},"ts":1416238222000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But that doesn't mean that everything being a giant pile of shared global state is great design","msgtype":"m.text"},"ts":1416238228000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"rektide: but basically events are an observer system, if you start attaching meaning to the observers themselves, there's something wrong with the code","msgtype":"m.text"},"ts":1416238266000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"both of you are coming at this from a distinctly use-case driven viewpoint in my perspective","msgtype":"m.text"},"ts":1416238327000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"i see your framing in terms of how one ought be building their code","msgtype":"m.text"},"ts":1416238341000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"are there other use cases you feel your statements are appropriate to?","msgtype":"m.text"},"ts":1416238358000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"rektide: so like I said last time this came up, jquery / similar libraries will expose these event listeners, so you could just use those (or a similar strategy) to get around it","msgtype":"m.text"},"ts":1416238431000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"if you were so inclined","msgtype":"m.text"},"ts":1416238437000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"i think there's a case to be made taht hte web is something we ought be able to learn about and meddle with","msgtype":"m.text"},"ts":1416238469000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"and thusfar, in 98% of the cases, you can show up on someone's site and begin to meddle quite effectively","msgtype":"m.text"},"ts":1416238484000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"jquery is again another case of authorship, where you as author of a site, are enforcing a system on the site","msgtype":"m.text"},"ts":1416238502000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"(rather, you are delegating to jquery an enforcement)","msgtype":"m.text"},"ts":1416238520000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"that freedom to meddle, this being US the user's agent","msgtype":"m.text"},"ts":1416238545000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"rektide: a) that isn't true anymore sadly (most sites these days seems to use compiled, minified js that is very hard to understand as a human). However if you want to see event listeners as a user you can do that through devtools","msgtype":"m.text"},"ts":1416238574000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"giving site authors the freedom to meddle with their own event handlers","msgtype":"m.text"},"ts":1416238576000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"Uh, b) was supposed to be the However","msgtype":"m.text"},"ts":1416238593000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: because of the nature of event handlers, one just has to identify entrance points into the black box","msgtype":"m.text"},"ts":1416238623000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"jgraham: intercept on the way in and modify","msgtype":"m.text"},"ts":1416238631000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"jgraham: there is still a plasticity, at every level except the event handler level","msgtype":"m.text"},"ts":1416238645000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"event handlers are uniquely write-only in the whole scheme of things","msgtype":"m.text"},"ts":1416238666000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"and the defense is that it's good for authors, keeps them from doing bad things","msgtype":"m.text"},"ts":1416238674000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"That isn't true","msgtype":"m.text"},"ts":1416238707000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"You can't do lots of things","msgtype":"m.text"},"ts":1416238715000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"You can't change a tag name in place, for example","msgtype":"m.text"},"ts":1416238726000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"you can't instantaneously change a tag name, but you can effectively do so via createElement, moving the children, attaching","msgtype":"m.text"},"ts":1416238747000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"there's the ability to, over steps, mutate into a desired state","msgtype":"m.text"},"ts":1416238758000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"that's a malleability to me","msgtype":"m.text"},"ts":1416238768000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"Building larger web applications in the future will demand stronger invariants, not weaker ones","msgtype":"m.text"},"ts":1416238769000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: it comes of as really condescending to me that architects would defend systems that create unseeable, unchangeable data-systems, because they think it's what users need","msgtype":"m.text"},"ts":1416238825000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"i understand there is data in letting users see the state they've built, in letting them manipualte it","msgtype":"m.text"},"ts":1416238855000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"but i don't see removing that capability, blocking them from it as a feature","msgtype":"m.text"},"ts":1416238870000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"http://www.mexicosolidarity.org/sites/default/files/images/popcornhk.gif","msgtype":"m.text"},"ts":1416238909000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"And yet the ability to enforce invariants is considered one of the most important requirements for building large, maintainable, software systems","msgtype":"m.text"},"ts":1416238920000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"and it's extremely hugely detrimental to those trying to learn the web, those who want to see and experiment with web sites that they happen upon to further their own education","msgtype":"m.text"},"ts":1416238924000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"No, it isn't","msgtype":"m.text"},"ts":1416238934000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"ok let's take it step by step","msgtype":"m.text"},"ts":1416239005000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"Honestly, I have other things to do. I encourage you to send email","msgtype":"m.text"},"ts":1416239037000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"in that case, i just want to drop this: it's a usescript i tried to help my friend write to make his CodeSchool experience not suck. https://gist.github.com/johnelliott/690905bb909347a56941","msgtype":"m.text"},"ts":1416239098000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"he was not given the tools by the web to do the constructivist work he wanted","msgtype":"m.text"},"ts":1416239122000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"the web hid from him the valuable state he wanted to play with","msgtype":"m.text"},"ts":1416239134000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"his user agent was not his","msgtype":"m.text"},"ts":1416239138000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"it was the user agent of CodeSchool","msgtype":"m.text"},"ts":1416239143000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"and he was only using it","msgtype":"m.text"},"ts":1416239146000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"template strings are going to make those so much more readable in the future","msgtype":"m.text"},"ts":1416239182000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"can't wait :d","msgtype":"m.text"},"ts":1416239190000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"(my fork is a little better doc'ed, https://gist.github.com/rektide/b4f6d6ce9b780ed59512 )","msgtype":"m.text"},"ts":1416239218000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"\"so copy paste this content in rather than actually running it as a userscript\"","msgtype":"m.text"},"ts":1416239245000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"User scripts aren't the web, they are proprietary UA features. A user script could certainly expose a method to mess with state that authors can't.","msgtype":"m.text"},"ts":1416239304000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"i don't see why authors ought be prohibited from instrumenting themselves either","msgtype":"m.text"},"ts":1416239343000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"if i want to go wrap all my keyup handlers, i don't see why i should need jquery keeping track of all my handlers to do that","msgtype":"m.text"},"ts":1416239366000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"it's anti-constructivist to create a system which won't tell you what's in it","msgtype":"m.text"},"ts":1416239383000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"the whole point of the Document Object Model","msgtype":"m.text"},"ts":1416239393000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"as per the name","msgtype":"m.text"},"ts":1416239396000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"is to tell you the structure","msgtype":"m.text"},"ts":1416239403000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"this is obvious to me. this is basic tenants of constructivism. this is what makes things malleable. this is why the web is good.","msgtype":"m.text"},"ts":1416239428000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"this one tiny little corner is the one example where the web page refuses to report what state it holds","msgtype":"m.text"},"ts":1416239460000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"i mean, you don't need jquery to do it, you could do it with anything","msgtype":"m.text"},"ts":1416239486000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"caitp-: it implies a monolithic developmoent practice","msgtype":"m.text"},"ts":1416239497000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"caitp-: it mandates that whomever wants to do this starts by doing this one practice","msgtype":"m.text"},"ts":1416239510000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"heck, you could even monkeypatch Add/RemoveEventListener","msgtype":"m.text"},"ts":1416239511000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"rektide: HTTP is stateless by default. there are ways of introducing state, but that's a decision for that \"web page\".","msgtype":"m.text"},"ts":1416239513000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"caitp-: but you still have to get there first","msgtype":"m.text"},"ts":1416239518000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"it's not something everyone wants or needs to do :p","msgtype":"m.text"},"ts":1416239540000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"caitp-: it's still not modelled, it's still not something you can show up at latter and patch in","msgtype":"m.text"},"ts":1416239542000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"but the primitives are basically there to do it","msgtype":"m.text"},"ts":1416239547000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"caitp-: but why should this one thing be the one and only place in all the HTML lands where you don't have an object model to represet the state?","msgtype":"m.text"},"ts":1416239569000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"rektide: because http is stateless.","msgtype":"m.text"},"ts":1416239585000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"boogyman: html is nothing but state","msgtype":"m.text"},"ts":1416239591000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"html and the dom are crazy, i wouldn't expect much from them","msgtype":"m.text"},"ts":1416239596000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"boogyman: it is the declared, mutable embodiment of state","msgtype":"m.text"},"ts":1416239608000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"boogyman: the dom is nothing but state handling","msgtype":"m.text"},"ts":1416239622000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"boogyman: i really have no idea at all what you think the http connection has to do with anything topical to the DOM not exposing an object model for one tiny corner of itself","msgtype":"m.text"},"ts":1416239655000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"rektide: so it is your view that everything on a webpage should be mutable? including things like the scroll bar, the address bar, the bookmarks bar etc…","msgtype":"m.text"},"ts":1416239743000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"the point of the dom is to make state mutable. the defenses i've heard in here today are that: a) you can track state yourself (if you get there first and instrument/monkeypatch), b) you shouldn't need/want to track state. these seem insufficient. i would love to broaden my horizon of objections to my point of view; if you can help me find other categorical objections to my ask (model this aspect of the document), i'd love to hear","msgtype":"m.text"},"ts":1416239787000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"boogyman: those aren't the webpage, those are the user agent. and yes, those aspects fo the user agent should be an in some user agents are alterable. for instance: i can change the scheme in my OS. i can add awesomebar extensions to my browser. you're throwing some real softballs my way friend.","msgtype":"m.text"},"ts":1416239843000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"i can css3 style the scrollbar too, actually","msgtype":"m.text"},"ts":1416239872000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"So your viewpoint is that once a fragment gets parsed by the rendering engine, that should be mutable?","msgtype":"m.text"},"ts":1416239940000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"boogyman: you rules lawyer me. i don't know what definition you are setting up to pull me on me now. i believe that it's intuitively obvious that the Document Object Model models the elements in it, and that it's failure to model the events is a clear fault in the scope of what it models","msgtype":"m.text"},"ts":1416240043000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"I'm trying to understand your viewpoint, so I can make an accurate assessment and potentially \"find categorical objections\"","msgtype":"m.text"},"ts":1416240118000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"annevk: i respect you as someone who provides a lot of direction, and i really would appreciate a clash from you on this at some point. i'll try to find a way to cobble together something for a mailing list, but i was hoping to better understand the background and viewpoints ahead of time.","msgtype":"m.text"},"ts":1416240146000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"boogyman: i don't think teh view engine is concerned at all in this topic, would be my main distinction. this is an issue of the DOM, outside what renders: the DOM is the living breathing state object, and it shows us a model of that state. with this one rare peculiar exception: events.","msgtype":"m.text"},"ts":1416240255000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"parsing is incidental, is a means of getting into that state-holding system","msgtype":"m.text"},"ts":1416240284000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"So, are you asking for mutable access to events?","msgtype":"m.text"},"ts":1416240333000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"access of a defined event*","msgtype":"m.text"},"ts":1416240368000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"yes, i would like the Document Object Model- the thing that exposes the state- to expose events as a part of that state that it exposes","msgtype":"m.text"},"ts":1416240368000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"rektide: look at e.g. promises or observers","msgtype":"m.text"},"ts":1416240377000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rektide: none of these systems provide a means to get to the listeners","msgtype":"m.text"},"ts":1416240395000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, neither of those have 'Model' in their name","msgtype":"m.text"},"ts":1416240416000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"as a quick start","msgtype":"m.text"},"ts":1416240422000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"rektide: events don't have 'Model' in their name either","msgtype":"m.text"},"ts":1416240434000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"DOM does and EventTArget is defined in the DOM","msgtype":"m.text"},"ts":1416240446000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"rektide: events, promises, and, observers are all roughly equivalent","msgtype":"m.text"},"ts":1416240457000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"this anti-constructivist trend is one i'd like to strike at, as you see","msgtype":"m.text"},"ts":1416240494000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"and it's growth is worrying","msgtype":"m.text"},"ts":1416240499000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"i agree that the problem is growing rapidly","msgtype":"m.text"},"ts":1416240509000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"i'll try to mention these others in my eventual email","msgtype":"m.text"},"ts":1416240566000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"MutationObserverTarget here we come.","msgtype":"m.text"},"ts":1416240581000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"gods above willing","msgtype":"m.text"},"ts":1416240597000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"ugg i've yet again wasted my chances to pick up intel from the enemy","msgtype":"m.text"},"ts":1416240706000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"drat","msgtype":"m.text"},"ts":1416240711000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"(・_・ヾ)???","msgtype":"m.text"},"ts":1416240752000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"caitp-: i was un-asiding that i've already made progressive conversation- getting annevk to go on & give me more context for this- much harder, much less likely","msgtype":"m.text"},"ts":1416240855000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"i think my first step here might be to get on hte horn with kris kowal and pick his brain on promises for a while","msgtype":"m.text"},"ts":1416240936000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"i don't necessarily want to go into that domain- DOM has Model in the name, whereas promises, in contrast, as ALWAYS a procedural instantiation- but see what weaknesses he thinks closuring everything up has","msgtype":"m.text"},"ts":1416240983000,"senderName":"rektide","senderId":"rektide@irc"},
{"content":{"body":"well, bon voyag","msgtype":"m.text"},"ts":1416241204000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"e","msgtype":"m.text"},"ts":1416241205000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"feels stupid. Doesn't quite understand what annevk means with data properties. How are those different to [Unforgeable]","msgtype":"m.emote"},"ts":1416241753000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-type IDL only supports accessor properties at the moment, afaik","msgtype":"m.text"},"ts":1416241828000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah, so it would be without a getter","msgtype":"m.text"},"ts":1416241866000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1416241920000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Just trying to knock down the walls between JS and IDL","msgtype":"m.text"},"ts":1416241963000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"would there be any reason to use data property and not just normal webidl readonly attribute?","msgtype":"m.text"},"ts":1416242077000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"It can be overkill to use the latter, especially from a self-hosting perspective, as it requires internal state","msgtype":"m.text"},"ts":1416242180000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SteveF__: Yeah, .bs is just .html with more syntax additions. You can drop in a <script> no problem.","msgtype":"m.text"},"ts":1416242773000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: thanks","msgtype":"m.text"},"ts":1416242800000,"senderName":"SteveF__","senderId":"SteveF__@irc"},
{"content":{"body":"(And as long as the start and end tags are on a line by themselves, Bikeshed will recognize them, and will avoid trying to do any \"helpful\" syntax conversions inside of your script.)","msgtype":"m.text"},"ts":1416242892000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"good to know","msgtype":"m.text"},"ts":1416242912000,"senderName":"SteveF__","senderId":"SteveF__@irc"},
{"content":{"body":"Turns out that you shouldn't add things that aren't friendly with a language's tokenization rules, especially for languages without contextual tokenization algorithms.","msgtype":"m.text"},"ts":1416262636000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Writing up the specification of unicode-range in terms of CSS tokens is tricky and dumb.)","msgtype":"m.text"},"ts":1416262654000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: oh?","msgtype":"m.text"},"ts":1416263252000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: what's the difficulty?","msgtype":"m.text"},"ts":1416263261000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"For example, u+2e-30 parses as IDENT(u) NUMBER(2e-30)","msgtype":"m.text"},"ts":1416263405000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"While u+2a-30 parses as IDENT(u) DIMENSION(2, a-30)","msgtype":"m.text"},"ts":1416263635000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And u+20-30 parsed as IDENT(u) NUMBER(20) NUMBER(-30)","msgtype":"m.text"},"ts":1416263655000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"There are actually five parses to deal with, with different variations in the hex digits triggering the cases in a difficult-to-predict way.","msgtype":"m.text"},"ts":1416263717000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: can't you just change the tokeniser to have a U+<hex> token?","msgtype":"m.text"},"ts":1416263956000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"The point was that I just *removed* the specialized unicode-range token from the tokenizer.","msgtype":"m.text"},"ts":1416263976000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1416263986000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"why?","msgtype":"m.text"},"ts":1416263987000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Because special-purpose tokens are the devils' work, and cause confusing bugs elsewhere.","msgtype":"m.text"},"ts":1416263988000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"For example, `u+a { font-weight: bold; }` is a syntax error.","msgtype":"m.text"},"ts":1416264009000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(becuase the selector parsed as a unicode-range token)","msgtype":"m.text"},"ts":1416264023000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"wait, why are you using the same tokens for selectors as property vluaes","msgtype":"m.text"},"ts":1416264029000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Because CSS's tokenizer isn't contextually interwoven with its parser.","msgtype":"m.text"},"ts":1416264043000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i have a proposal!","msgtype":"m.text"},"ts":1416264052000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"NOPE","msgtype":"m.text"},"ts":1416264056000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(why not?)","msgtype":"m.text"},"ts":1416264098000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Because that kind of interweaving makes it harder to write parsers, and requires more state.","msgtype":"m.text"},"ts":1416264112000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Also: requires knowledge of the language inside of the parser, preventing generic processing.","msgtype":"m.text"},"ts":1416264135000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"seems pretty straight-forward to have a set of selector tokens and a set of value tokens, but ok","msgtype":"m.text"},"ts":1416264154000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Also: selectors can appear in more places than just the prelude of blocks.","msgtype":"m.text"},"ts":1416264158000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ah, that's an interesting one","msgtype":"m.text"},"ts":1416264168000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"can they appear in values?","msgtype":"m.text"},"ts":1416264175000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yes.  Inside of some functions, for example.","msgtype":"m.text"},"ts":1416264185000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"funky","msgtype":"m.text"},"ts":1416264192000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Well, when you're referring to one element from within another element...","msgtype":"m.text"},"ts":1416264205000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"how do you handle #color vs #id ?","msgtype":"m.text"},"ts":1416264215000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"#hash","msgtype":"m.text"},"ts":1416264224000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Both of those are just <hash-token>s, and contextually interpreted.","msgtype":"m.text"},"ts":1416264231000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"By the property-level grammars.","msgtype":"m.text"},"ts":1416264238000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(In other words, a <hash-token> is a valid <color>.  A <hash-token> is also a valid <id-selector>.)","msgtype":"m.text"},"ts":1416264285000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"is there any string that causes a tokenisation-level error when parsing a value, short of an unexpected EOF?","msgtype":"m.text"},"ts":1416264319000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"No.","msgtype":"m.text"},"ts":1416264325000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1416264330000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"If by \"error\" you mean \"abort processing\".","msgtype":"m.text"},"ts":1416264335000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"by \"error\" i mean \"throw property away\"","msgtype":"m.text"},"ts":1416264343000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"There are some strings of characters that generate guaranteed-invalid tokens.","msgtype":"m.text"},"ts":1416264348000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"the way 'color:#ABC;color:#XYZ;' results in the second colour being dropped","msgtype":"m.text"},"ts":1416264361000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"But still, throwing away is done at the property-grammar level, or block-grammar level.","msgtype":"m.text"},"ts":1416264365000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oh what are the guaranteed-invalid tokens?","msgtype":"m.text"},"ts":1416264373000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"That's the cascade level, which is even further down the stream.","msgtype":"m.text"},"ts":1416264378000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"<bad-string-token> and <bad-url-token>","msgtype":"m.text"},"ts":1416264387000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"you(SP)'ve written the grammar such that there is no sequence of valid tokens that does not result in a valid production?","msgtype":"m.text"},"ts":1416264436000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"A string which contains an unescaped literal newline becomes a <bad-string-token>.  An unquoted url with spaces in it becomes a <bad-url-token>.","msgtype":"m.text"},"ts":1416264445000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so 'color:#XYZ' is dropped at a different spot than 'color:url( \\n )' ?","msgtype":"m.text"},"ts":1416264461000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"caitp: For what?","msgtype":"m.text"},"ts":1416264463000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"wait, you're talking about lexer errors right","msgtype":"m.text"},"ts":1416264498000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Hixie: No, those two are dropped at the same spot - that sort of <hash-token> isn't a valid <color>, and the 'color' grammar doesn't allow <bad-url-token>.","msgtype":"m.text"},"ts":1416264503000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"caitp: I use the term \"tokenizer\", but sure.","msgtype":"m.text"},"ts":1416264514000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ah, interesting","msgtype":"m.text"},"ts":1416264516000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"cool, carry on","msgtype":"m.text"},"ts":1416264521000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"lexer, scanner, tokenizer, tic tac to","msgtype":"m.text"},"ts":1416264533000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: The grammar of CSS is, like HTML, captured by the regex /.*/","msgtype":"m.text"},"ts":1416264550000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And is then filtered down afterwards according to various production grammars.","msgtype":"m.text"},"ts":1416264575000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(btw, to make that true required a hell of a long time arguing in the csswg)","msgtype":"m.text"},"ts":1416264589000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(back in the early 2000s)","msgtype":"m.text"},"ts":1416264606000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: It still wasn't technically true when I started work on Syntax, I think.  (I don't recall details, but I think there were still a few possible cases not covered by the error-recovery rules.)","msgtype":"m.text"},"ts":1416264625000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"really? wow","msgtype":"m.text"},"ts":1416264639000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"doesn't surprise me that we missed some","msgtype":"m.text"},"ts":1416264644000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"They were arcane, iirc.","msgtype":"m.text"},"ts":1416264646000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"we weren't being rigorous","msgtype":"m.text"},"ts":1416264647000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I'm pretty sure I talked about them on the ML when I was first writing Syntax.","msgtype":"m.text"},"ts":1416264683000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But yeah, error-recovery in grammars is a fucking trainwreck, and nobody should ever do it.  Do your parsing explicitly, *then* apply grammars on top of that.","msgtype":"m.text"},"ts":1416264725000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Because at that point you can validly say \"nope, you don't match, throw the whole thing out\" where \"the whole thing\" is some construct within the file that's already well-delimited.","msgtype":"m.text"},"ts":1416264768000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hear hear","msgtype":"m.text"},"ts":1416264832000,"senderName":"Hixie","senderId":"Hixie@irc"}
]