[
{"content":{"body":"nox: should always be 1:1","msgtype":"m.text"},"ts":1445238949000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I mean null vs empty value.","msgtype":"m.text"},"ts":1445239206000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: oh sorry","msgtype":"m.text"},"ts":1445239260000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: I'm not sure","msgtype":"m.text"},"ts":1445239293000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: maybe that would be nice, dunno","msgtype":"m.text"},"ts":1445239304000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: seems like it might be tricky to represent it being the empty string then","msgtype":"m.text"},"ts":1445239350000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Is there actually any difference in how the two are handled or serialised?","msgtype":"m.text"},"ts":1445239994000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: yeah, the difference is whether you see a ? in the URL","msgtype":"m.text"},"ts":1445240029000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh.","msgtype":"m.text"},"ts":1445240102000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"hello whatwg","msgtype":"m.text"},"ts":1445241766000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hola zcorpan","msgtype":"m.text"},"ts":1445241816000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Morning","msgtype":"m.text"},"ts":1445241921000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Domenic: formatting in https://streams.spec.whatwg.org/#get-viewed-array-buffer seems wrong","msgtype":"m.text"},"ts":1445262513000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: previously you were telling me you thought e.respondWith() should not timeout the SW like waitUntil() does","msgtype":"m.text"},"ts":1445266371000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: what about if the script does e.respondWith(new Promise())... a promise that never resolves...  how does chrome handle that?","msgtype":"m.text"},"ts":1445266390000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: of course, now I'm trying to remember why we wanted long running respondWith() anyway","msgtype":"m.text"},"ts":1445266680000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: so the approach for Location seems to be to just define an object and override all the internal methods somehow","msgtype":"m.text"},"ts":1445269618000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: that seems totally legit. It's an exotic object.","msgtype":"m.text"},"ts":1445269654000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: would be implemented with a Proxy in self-hosted land","msgtype":"m.text"},"ts":1445269667000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: however, is there some way to use the default behavior for an internal method from the overriding variant?","msgtype":"m.text"},"ts":1445269673000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yes, let me see if I can find some prose that does that.","msgtype":"m.text"},"ts":1445269695000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: e.g. [[Delete]] does the ordinary [[Delete]] behavior for \"same-origin\", but simply throws otherwise","msgtype":"m.text"},"ts":1445269697000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: well maybe there is an OrdinaryDelete etc.... here is how Array delegates to OrdinaryDefineOwnProperty: https://tc39.github.io/ecma262/#sec-array-exotic-objects-defineownproperty-p-desc","msgtype":"m.text"},"ts":1445269786000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: it doesn't look like everything is factored to allow this though","msgtype":"m.text"},"ts":1445269827000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"which is something we could in theory pull request to ES for","msgtype":"m.text"},"ts":1445269834000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"okay","msgtype":"m.text"},"ts":1445269841000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that would make sense perhaps","msgtype":"m.text"},"ts":1445269851000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But it also seems legit to say something like \"return the result of applying the [[GetOwnProperty]]() method for ordinary objects to O\" or something","msgtype":"m.text"},"ts":1445269897000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If \"same-origin\", then TODOOrdinaryDelete(this, P).","msgtype":"m.text"},"ts":1445269924000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm yeah, was wondering about that","msgtype":"m.text"},"ts":1445269935000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'll open an issue","msgtype":"m.text"},"ts":1445269968000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Maybe Allen will have advice","msgtype":"m.text"},"ts":1445269972000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Or maybe he'll be like \"yeah we should have factored them all out\"","msgtype":"m.text"},"ts":1445269979000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So next is the own properties... W should probably have a heading per thing. \"set href\" etc. However, maybe they shouldn't really be properties but just behave as such from the outside?","msgtype":"m.text"},"ts":1445270223000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm, if you are redefining [[Set]]/[[Get]] then yeah, your object isn't going to have properties really","msgtype":"m.text"},"ts":1445270262000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Especially with the \"A Caller-Appropriate Cross-Origin Representation of a Method, Getter, or Setter\" stuff defining properties directly seems kind of pointless since their behavior needs to be wrapped","msgtype":"m.text"},"ts":1445270264000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah I think each of your internal method definitions is going to have some sort of lookup.","msgtype":"m.text"},"ts":1445270291000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If P is \"href\", return X. If P is \"origin\", return Y.","msgtype":"m.text"},"ts":1445270330000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Maybe use a table or a <ul class=\"switch\"> or whatever","msgtype":"m.text"},"ts":1445270343000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: an alternate idea approach for all this is that if there happens to be a real underlying object (or several), you can dispatch to it","msgtype":"m.text"},"ts":1445270517000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: so \"If flag X is set, throw. Otherwise, return SetPrototypeOf(targetObj, V)\"","msgtype":"m.text"},"ts":1445270536000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"[[SetPrototypeOf]] always happens to throw","msgtype":"m.text"},"ts":1445270676000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but yeah","msgtype":"m.text"},"ts":1445270678000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that might be a tad more readable","msgtype":"m.text"},"ts":1445270686000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: I think respondWith should time out like regular requests do (unless there's a good reason to do something different?)","msgtype":"m.text"},"ts":1445270768000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: you mean timeout the network request, not the service worker lifetime timeout, right?","msgtype":"m.text"},"ts":1445270794000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: yeah actually now that I think about it, you'll almost certainly need a few targetObjs to implement the caller-appropriate cross-origin representation thing.","msgtype":"m.text"},"ts":1445271422000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Otherwise you'll need some place to store the getter/setter function objects","msgtype":"m.text"},"ts":1445271436000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: well yeah, my plan for that was to have a WeakMap","msgtype":"m.text"},"ts":1445271460000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Seems better to have a caller-appropriate cross-origin target object","msgtype":"m.text"},"ts":1445271462000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1445271466000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I guess it could be an object on the other side of the WeakMap rather than a function...","msgtype":"m.text"},"ts":1445271514000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i guess i am just saying that the distinction between a WeakMap mapping callers to { hrefSet, hrefGet, originSet, originGet, ... } and a WeakMap mapping callers to CrossOriginLocation-esque objects is not big","msgtype":"m.text"},"ts":1445271528000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"whichever is more convenient to spec I guess","msgtype":"m.text"},"ts":1445271549000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"In the hrefSet scenario those would simply be internal slots, right?","msgtype":"m.text"},"ts":1445271583000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"internal slots of what?","msgtype":"m.text"},"ts":1445271615000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"of the Location object","msgtype":"m.text"},"ts":1445271620000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and then when [[Get]] happens it would try to pull them out of the weakmap and if that fails wrap them and put them in the weakmap and then return them","msgtype":"m.text"},"ts":1445271658000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I still don't understand what internal slots you are talking about","msgtype":"m.text"},"ts":1445271673000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: to describe Location.protocol et al","msgtype":"m.text"},"ts":1445271703000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: can you give these slots a name and what object they live on please?","msgtype":"m.text"},"ts":1445271719000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I'm talking about the behavior of e.g. the protocol getter/setter, where that has to live","msgtype":"m.text"},"ts":1445271760000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: so you need one getter/setter per caller right?","msgtype":"m.text"},"ts":1445271771000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(for some definition of \"caller\")","msgtype":"m.text"},"ts":1445271800000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: per tuple of sorts, right","msgtype":"m.text"},"ts":1445271804000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: though for cross-origin there's really only two: set href / replace","msgtype":"m.text"},"ts":1445271826000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So I see two possibilities: 1. let wm = this@[[AccessorWeakMap]]; 2. if wm has caller, let accessors = get caller from wm and return accessors.[[Get]]; 3. otherwise, create accessors, store, return.","msgtype":"m.text"},"ts":1445271885000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"or","msgtype":"m.text"},"ts":1445271888000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"1. let wm = this@[[RepresentationWeakMap]]; 2. if wm has caller, let obj = get caller from wm; 3. otherwise, let obj = new CrossOriginLocationRepresentation, and store it in wm; 4. return Get(obj, \"origin\")","msgtype":"m.text"},"ts":1445271938000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I tend to think the latter will work better","msgtype":"m.text"},"ts":1445271999000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If you go with the former though it probably won't be bad, just maybe a little messy, and we could refactor it into the latter if indeed it ends up isomorphic","msgtype":"m.text"},"ts":1445272033000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: so since for Location it's only \"href\" and \"replace\" that are magical cross-origin, perhaps actually defining own properties and having some special behavior cross-origin with the WeakMap would be even simpler","msgtype":"m.text"},"ts":1445272227000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: you can't define own properties once you've taken over the definition of [[Get]]/[[Set]]/[[DefineOwnProperty]]/et al.","msgtype":"m.text"},"ts":1445272264000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: and \"href\" and \"replace\" and the cross-origin variants of them would simply invoke an abstract operation","msgtype":"m.text"},"ts":1445272265000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"In other words proxies cannot have own properties","msgtype":"m.text"},"ts":1445272269000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: oh, they cannot defer?","msgtype":"m.text"},"ts":1445272276000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: okay","msgtype":"m.text"},"ts":1445272279000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"They can defer to a different target object","msgtype":"m.text"},"ts":1445272286000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: in that case defining a LocationBackend seems sensible","msgtype":"m.text"},"ts":1445272297000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And they can use the ordinary behavior","msgtype":"m.text"},"ts":1445272300000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hmm actually","msgtype":"m.text"},"ts":1445272317000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"How does Array length work","msgtype":"m.text"},"ts":1445272321000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I might be wrong","msgtype":"m.text"},"ts":1445272363000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Array length is defined like https://tc39.github.io/ecma262/#sec-properties-of-array-instances-length","msgtype":"m.text"},"ts":1445272369000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It doesn't","msgtype":"m.text"},"ts":1445272372000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ah and then DefineOwnProperty handles that specially https://tc39.github.io/ecma262/#sec-array-exotic-objects-defineownproperty-p-desc","msgtype":"m.text"},"ts":1445272399000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So annevk I think your strategy is also valid","msgtype":"m.text"},"ts":1445272408000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But you'll need to have [[Get]]/etc. say \"if P is not href or replace, do the ordinary thing\"","msgtype":"m.text"},"ts":1445272463000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah, I was just thinking that; if you can defer to the ordinary thing, this should also work","msgtype":"m.text"},"ts":1445272590000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Is XHR standardization now done at WHATWG completely (as opposed to at W3C)?","msgtype":"m.text"},"ts":1445279545000,"senderName":"jsx","senderId":"jsx@irc"},
{"content":{"body":"jsx: yes. See https://wiki.whatwg.org/wiki/Fork_tracking","msgtype":"m.text"},"ts":1445280415000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"We should probably add HTML there hrm","msgtype":"m.text"},"ts":1445280463000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ok, thanks.","msgtype":"m.text"},"ts":1445280510000,"senderName":"jsx","senderId":"jsx@irc"},
{"content":{"body":"\"Confusion Persists\"","msgtype":"m.text"},"ts":1445280633000,"senderName":"jsx","senderId":"jsx@irc"},
{"content":{"body":"Why does the wiki always recaptcha me...","msgtype":"m.text"},"ts":1445280938000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"In case anyone going to Japan knows: http://travel.stackexchange.com/questions/57622/ana-domestic-carry-on-allowance-can-i-take-a-laptop-bag-as-well-as-a-rucksack","msgtype":"m.text"},"ts":1445281089000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic: made you an admin on the wiki, hope that helps","msgtype":"m.text"},"ts":1445285840000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: if not, ping GPHemsley","msgtype":"m.text"},"ts":1445285848000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"regardless of whether or not it's possible to get rid of a vendor prefixed name for something at a specific point in time, what is the point in validating its existence in a spec document?","msgtype":"m.text"},"ts":1445287908000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"What is the point of speccing any feature that web pages are using?","msgtype":"m.text"},"ts":1445288575000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"what is the normative reference for one hand clapping?","msgtype":"m.text"},"ts":1445290062000,"senderName":"jamesr","senderId":"jamesr@irc"},
{"content":{"body":"One hand clapping is just an example, it has no normative status","msgtype":"m.text"},"ts":1445290524000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"One hand clapping doesn't sound very informative","msgtype":"m.text"},"ts":1445291019000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"gsnedders: in practice, you can carry both a laptop bag and rucksack on domestic flights in Japan. I don't know what the documented rules but if the rules say you can only have one bag, I can say that they are certainly not strict about enforcing that.","msgtype":"m.text"},"ts":1445292850000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"gsnedders: and even in the case if they were to question you about it, it would not be confrontational/rude/matter-of-fact thing like what would happen in the US or some parts of Europe.","msgtype":"m.text"},"ts":1445292929000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"gsnedders: If you just be human (nice) and ask nicely and treat other people like fellow humans here, it goes a long way. And people generally bend over backwards to be accomodating.","msgtype":"m.text"},"ts":1445293012000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"gsnedders: and there is a saying in Japanese busines, お客様は神様です (\"The customer is God.\") which is not a joke, really. People in service jobs in Japan take that very seriously and take doing their jobs the right way (that is, actually helping people) very seriously no matter how menial anyone else might judge their jobs to be.","msgtype":"m.text"},"ts":1445293189000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"gsnedders: in short, plan to take your rucksack and laptop bag on, and if there's any problem, plan for success at working with the airline staff to get it worked out without any drama","msgtype":"m.text"},"ts":1445293272000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"caitp: documenting it so that all browser-engine implementors (current and future) are working from the same set of information, and there are no ambiguities, no undocumented lore that only those already in the know are aware of","msgtype":"m.text"},"ts":1445293463000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: ping","msgtype":"m.text"},"ts":1445297622000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"or perhaps JakeA","msgtype":"m.text"},"ts":1445297629000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: I reckon both are afk/asleep at this point (and you may be the only person here who keeps even weirder hours than me)","msgtype":"m.text"},"ts":1445297921000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hey, it isn't even 3am","msgtype":"m.text"},"ts":1445298022000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"doesn't know where JakeA lives","msgtype":"m.emote"},"ts":1445298039000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Speaking of weird hours I guess I should be asleep","msgtype":"m.text"},"ts":1445298262000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"JakeA is in the UK I think","msgtype":"m.text"},"ts":1445298271000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"that's where he resides, but he was in the US last week i believe.","msgtype":"m.text"},"ts":1445298317000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"So who knows what state his body clock could be in","msgtype":"m.text"},"ts":1445298343000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Probably best to spam him once an hour ;)","msgtype":"m.text"},"ts":1445298355000,"senderName":"jgraham","senderId":"jgraham@irc"}
]