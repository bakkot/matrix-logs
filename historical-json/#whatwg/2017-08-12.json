[
{"content":{"body":"FWIW I wrote some tests for data: URLs for a node module a while a back: https://github.com/TooTallNate/node-data-uri-to-buffer/blob/master/test/test.js","msgtype":"m.text"},"ts":1502522460000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"some things I noticed: Firefox defaults to US-ASCII (well windows-1252) by default for both data:,text and data:text/plain,text, but Chrome uses UTF-8 for data:text/plain,text and US-ASCII data:,text","msgtype":"m.text"},"ts":1502522712000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"just another data point, hope it helps","msgtype":"m.text"},"ts":1502522732000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: how did you test the defaulting? Did you have a control test that was delivered over HTTP instead?","msgtype":"m.text"},"ts":1502532480000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TimothyGu: Chrome has a non-standard encoding sniffer, so I'd be very suspect","msgtype":"m.text"},"ts":1502532503000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I just navigated to the data: URL. I don't expect fetch/xhr to act any differently though","msgtype":"m.text"},"ts":1502533913000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"I also used a UTF-8 string to test (data:text/plain,%E4%B8%AD%E6%96%87)","msgtype":"m.text"},"ts":1502533968000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"i.e. \"ä¸­æ–‡\"","msgtype":"m.text"},"ts":1502533978000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: I suspect that's just Chrome's behavior when you load a text/plain resource containing those bytes","msgtype":"m.text"},"ts":1502534052000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TimothyGu: not really related to data URLs","msgtype":"m.text"},"ts":1502534065000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah that's what I think as well","msgtype":"m.text"},"ts":1502534087000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"per RFC data:,text defaults to text/plain;charset=US-ASCII, but data:text/plain,text is just text/plain","msgtype":"m.text"},"ts":1502534132000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"This might be the only location we expose US-ASCII as a string","msgtype":"m.text"},"ts":1502534158000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So sad","msgtype":"m.text"},"ts":1502534163000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":/","msgtype":"m.emote"},"ts":1502534208000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"is there a PR or anything yet for whatwg/fetch?","msgtype":"m.text"},"ts":1502534243000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"for data: that is","msgtype":"m.text"},"ts":1502534255000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"annevk: IMO https://gist.github.com/annevk/4287452653921b2b7de35e4208b4a985 should also have a URL with text/plain but without charset","msgtype":"m.text"},"ts":1502534546000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: there's nothing, I only worked on it a couple hours yesterday","msgtype":"m.text"},"ts":1502534632000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TimothyGu: and yeah, need hundreds more tests","msgtype":"m.text"},"ts":1502534651000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"...","msgtype":"m.text"},"ts":1502534715000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1502534778000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TimothyGu: to be clear, that gist was mostly just a mockup for test format, the plan is to have that on WPT, probably with the tests in some kind of JSON resource again so they can be shared across impls","msgtype":"m.text"},"ts":1502534962000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"just a bit surprised by \"hundreds more tests\"","msgtype":"m.text"},"ts":1502534970000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"okay, that's wonderful","msgtype":"m.text"},"ts":1502534983000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: oh, well, data URLs are complex","msgtype":"m.text"},"ts":1502534986000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"in a way","msgtype":"m.text"},"ts":1502534992000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'd say faulty URL parsing is the most common problem on the net","msgtype":"m.text"},"ts":1502538587000,"senderName":"Younder","senderId":"Younder@irc"},
{"content":{"body":"It does not render itself well to regexp parsing","msgtype":"m.text"},"ts":1502538637000,"senderName":"Younder","senderId":"Younder@irc"},
{"content":{"body":"How does US-ASCII get exposed?","msgtype":"m.text"},"ts":1502541995000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(Fun story: in fifth grade I practiced how to pronounce ASCII, an unfamiliar phrase. Then I went to computer camp and the other kids made fun of me for saying \"ay ess see eye eye\" instead of \"askee\".)","msgtype":"m.text"},"ts":1502542127000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TimothyGu: you should feel free to take over issues from Domenic I think","msgtype":"m.text"},"ts":1502554655000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TimothyGu: especially if they haven't been touched in a while","msgtype":"m.text"},"ts":1502554663000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TimothyGu: plenty on his plate","msgtype":"m.text"},"ts":1502554669000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: the Content-Type header of the generated response has text/plain;charset=US-ASCII (consistently so across all impls)","msgtype":"m.text"},"ts":1502554703000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: and .characterSet and aliases reflect the label, not the encosing name?","msgtype":"m.text"},"ts":1502554735000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: .characterSet will be windows-1252","msgtype":"m.text"},"ts":1502554756000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh ok... Next guess how the header is observable: new Response().headers?","msgtype":"m.text"},"ts":1502554808000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yup","msgtype":"m.text"},"ts":1502554818000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm. That's a rather new API... But I guess XHR has the same problem","msgtype":"m.text"},"ts":1502554854000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: you can do fetch(dataURL).then(res => console.log(res.headers.get(\"content-type\"))","msgtype":"m.text"},"ts":1502554861000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: yeah","msgtype":"m.text"},"ts":1502554872000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm not even going to try change that really","msgtype":"m.text"},"ts":1502554896000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's the same across all impls and the RFC sorta requires it","msgtype":"m.text"},"ts":1502554917000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's silly, but whatever, it'll likely be way more effort to change that than it's worth, and the most we could change it too is windows-1252 I think, which isn't great","msgtype":"m.text"},"ts":1502554968000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm leaning towards first splitting on \",\" which is somewhat contrary to the RFC, but is what everyone is doing","msgtype":"m.text"},"ts":1502555059000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Nobody does data:x/x;x=\",\",x correctly","msgtype":"m.text"},"ts":1502555084000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so Iâ€™m wondering where itâ€™s defined that using a ReadableStream object for uploads will result in a CORS preflight","msgtype":"m.text"},"ts":1502555866000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: ðŸ‘†","msgtype":"m.text"},"ts":1502555919000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: it's rather opaque","msgtype":"m.text"},"ts":1502556120000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: the flag is set in step 38.2 of the Request constructor","msgtype":"m.text"},"ts":1502556151000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: annevk: I also don't understand that PR. I thought a bunch of other things caused CORS preflights, like unknown headers or methods.","msgtype":"m.text"},"ts":1502556198000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"MikeSmith: the reason we get there is because for a ReadableStream body's source will be null (it's the only object for which that is the case)","msgtype":"m.text"},"ts":1502556200000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: that's different, those don't have a need for this flag as we can just check that in the fetch algorithm","msgtype":"m.text"},"ts":1502556240000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: for these two cases the fetch algorithm has nothing to go on, that's why the flag is there","msgtype":"m.text"},"ts":1502556256000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm OK. Well if we're planning on directing StackOverflow people there, maybe a note explaining that the use-CORS-preflight flag is just one factor in deciding whether to use a CORS preflight would be helpful","msgtype":"m.text"},"ts":1502556297000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: ah OK yeah I knew that step is the only point in the Fetch spec itself wehre the use-CORS-preflight flag gets set, but didnâ€™t know using a ReadableStream object for uploads would lead to that step","msgtype":"m.text"},"ts":1502556358000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Domenic: good point, would you mind adding that MikeSmith?","msgtype":"m.text"},"ts":1502556386000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I can expand on the note","msgtype":"m.text"},"ts":1502556387000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1502556390000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I also updated the MDN CORS article for this point recently","msgtype":"m.text"},"ts":1502556418000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think yutakahirano did a good job with the streams stuff, but it would've been nice if we had more reviewers and more people invested in the various algorithms","msgtype":"m.text"},"ts":1502556562000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA's been reviewing a bit due to cancelation integration which has helped I think","msgtype":"m.text"},"ts":1502556580000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I keep being surprised that you need something like Uint8Array to access data in an ArrayBuffer","msgtype":"m.text"},"ts":1502556787000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"OK, pushed an update do that PR","msgtype":"m.text"},"ts":1502557235000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"now reads:","msgtype":"m.text"},"ts":1502557241000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"> The use-CORS-preflight flag being set is just one of several conditions that can result in a CORS-preflight request. The use-CORS-preflight flag will be set if either one or more event listeners are registered on an XMLHttpRequestUpload object, or else if a ReadableStream object is used for uploads.","msgtype":"m.text"},"ts":1502557253000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"steps away now to get some sleep","msgtype":"m.emote"},"ts":1502557274000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"}
]