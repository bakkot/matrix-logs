[
{"content":{"body":"When XPIDL says an argument is [array, size_is(aLength)] in uint8_t aBytes, is an ArrayBuffer accepted from a JS caller?","msgtype":"m.text"},"ts":1491291723000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"oops. wrong channel. sorry.","msgtype":"m.text"},"ts":1491291740000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"annevk: http://software.hixie.ch/utilities/js/live-dom-viewer/saved/5000 has different results in webkit, chromium, and gecko. :-( do you know if it's tested and reported?","msgtype":"m.text"},"ts":1491319460000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: not sure about ??","msgtype":"m.text"},"ts":1491319869000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: url/setters_tests.json (or some such) should make that clear (the corresponding HTML resource tests <a>, <area>, and URL","msgtype":"m.text"},"ts":1491319963000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: there's \"new_value\": \"??lang=fr\",","msgtype":"m.text"},"ts":1491320218000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"and \"new_value\": \"?\",","msgtype":"m.text"},"ts":1491320228000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"which i think covers the buggyness in webkit and chromium","msgtype":"m.text"},"ts":1491320275000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"https://bugs.chromium.org/p/chromium/issues/detail?id=682150#c7","msgtype":"m.text"},"ts":1491320934000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"https://bugs.webkit.org/show_bug.cgi?id=170452","msgtype":"m.text"},"ts":1491321526000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"TabAtkins: Is there any CSS spec that defines what it means for a UA to “apply styles”?","msgtype":"m.text"},"ts":1491324316000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the context is https://html.spec.whatwg.org/#attr-style-media","msgtype":"m.text"},"ts":1491324324000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"> The media attribute says which media the styles apply to. The value must be a valid media query list. The user agent must apply the styles when the media attribute's value matches the environment and the other relevant conditions apply, and must not apply them otherwise.","msgtype":"m.text"},"ts":1491324332000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"in “The user agent must apply the styles” the “apply the styles” part does not link to any definition anywhere","msgtype":"m.text"},"ts":1491324386000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"also at https://html.spec.whatwg.org/#interactions-of-styling-and-scripting","msgtype":"m.text"},"ts":1491324420000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"> When a style sheet is ready to be applied, its style sheet ready flag must be set.","msgtype":"m.text"},"ts":1491324438000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"“to be applied” does not link to any definition anywhere","msgtype":"m.text"},"ts":1491324464000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and within https://html.spec.whatwg.org/#the-link-element","msgtype":"m.text"},"ts":1491324499000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"> The exact behavior for links to external resources depends on the exact relationship, as defined for the relevant link type. Some of the attributes control whether or not the external resource is to be applied (as defined below).","msgtype":"m.text"},"ts":1491324516000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"“the external resource is to be applied” does not link to any definition anywhere","msgtype":"m.text"},"ts":1491324546000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Nah, \"apply styles\" is just English for, uh, applying styles.","msgtype":"m.text"},"ts":1491324573000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"ready to be applied\" should probably get a dfn somewhere, I agree.","msgtype":"m.text"},"ts":1491324598000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1491324650000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"well as far as that “external resource is to be applied”, I wonder if we actually have any types of external resources other than CSS stylesheets that do get “applied”","msgtype":"m.text"},"ts":1491324689000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"seems like, e.g., rel=icon doesn’t cause anything to be “applied”","msgtype":"m.text"},"ts":1491324744000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"It \"applies\" the icon to the tab?","msgtype":"m.text"},"ts":1491324760000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I guess so but that seems like stretching the normal meaning of the word","msgtype":"m.text"},"ts":1491324834000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"eh","msgtype":"m.text"},"ts":1491324857000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I think that language has been there in the spec that way since the very beginning","msgtype":"m.text"},"ts":1491324864000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan++","msgtype":"m.text"},"ts":1491329969000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I have an interface that has state we don't want expose for now (it'll reside in a slot). What should I use for this?","msgtype":"m.text"},"ts":1491339133000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: What do you mean?","msgtype":"m.text"},"ts":1491339335000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: well originally, it was an enum. Now that it's no longer exposed, what should it be turned into?","msgtype":"m.text"},"ts":1491339433000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: just infra strings?","msgtype":"m.text"},"ts":1491339447000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1491339475000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Or, you don't need actual strings.","msgtype":"m.text"},"ts":1491339480000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Just *handwave* values.","msgtype":"m.text"},"ts":1491339488000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: do you just turn them into regular dfns in Bikeshed?","msgtype":"m.text"},"ts":1491340055000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"No, slots should be dfn'd as IDL attributes, ideally with `[[...]]` names.","msgtype":"m.text"},"ts":1491340119000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Then you can ref them like `{{[[foo]]}}`","msgtype":"m.text"},"ts":1491340127000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Which is an unfortunate level of stacking, but hey.","msgtype":"m.text"},"ts":1491340134000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"what about the values?","msgtype":"m.text"},"ts":1491340202000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"No linking, just \"\"?","msgtype":"m.text"},"ts":1491340258000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Depends on if you think they're useful to link or not.  If so, yeah, probably make them \"dfn\" type, with a `for` to help scope them.","msgtype":"m.text"},"ts":1491340329000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"makes sense. thanks.","msgtype":"m.text"},"ts":1491340351000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"So <dfn interface>\\[[state]]</dfn>?","msgtype":"m.text"},"ts":1491340662000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"<dfn attribute for=Foo>\\[[state]]</dfn>","msgtype":"m.text"},"ts":1491340953000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ty","msgtype":"m.text"},"ts":1491341036000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"does anyone here know what webkit uses as their javascript engine?","msgtype":"m.text"},"ts":1491341245000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"JavaScriptCore","msgtype":"m.text"},"ts":1491341459000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Considering three states \"idle\", \"activating\" and \"activated\", which one would you favor?","msgtype":"m.text"},"ts":1491342177000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"a) If |sensor_state| is either \"activating\" or \"activated\", then return.","msgtype":"m.text"},"ts":1491342177000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"b) If |sensor_state| is not \"idle\", then return.","msgtype":"m.text"},"ts":1491342177000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"c) Unless |sensor_state| is \"idle\", return.","msgtype":"m.text"},"ts":1491342177000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"my pick is a)","msgtype":"m.text"},"ts":1491342197000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"a","msgtype":"m.text"},"ts":1491342200000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"speaking as an implementor, this is the least confusing statement","msgtype":"m.text"},"ts":1491342231000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"KiChjang: you mean the clearest?","msgtype":"m.text"},"ts":1491342275000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":";)","msgtype":"m.text"},"ts":1491342280000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Alright a) it is. Thanks!","msgtype":"m.text"},"ts":1491342319000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"yes, my other pet peeve when reading a spec like this is that usually the definition of the possible states are elsewhere","msgtype":"m.text"},"ts":1491342444000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"and being a live document, it doesn't necessarily have to stay constant through time - we may add more states as necessary in the future","msgtype":"m.text"},"ts":1491342489000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"Yup, that's exactly my reasoning too - the states can change, and (a) is least subject to accidentally changing meaning due to the editor forgetting to update the reference.","msgtype":"m.text"},"ts":1491343878000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"tobie: `1. If |sensor_state| is either \"activating\" or \"activated\", then return. 2. Assert: |sensor_state| is \"idle\". 3. …`","msgtype":"m.text"},"ts":1491349028000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Or \"Otherwise, |sensor_state| is \"idle\": ...\"","msgtype":"m.text"},"ts":1491349106000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Bikeshed gives \"Assert:\" nice styling. ;)","msgtype":"m.text"},"ts":1491349262000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"But I don't care much. :)","msgtype":"m.text"},"ts":1491349268000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Oh yeah, I forgot about that.","msgtype":"m.text"},"ts":1491349454000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]