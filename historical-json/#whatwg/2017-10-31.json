[
{"content":{"body":"JakeA: Found an odd not-so-funny IE script loading bug. https://phabricator.wikimedia.org/T178943","msgtype":"m.text"},"ts":1509412761000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"TL;DR: onreadystate fires before script has actually executed, in IE 10, if and only if a certain strange <link rel=stylesheet> is on the page.","msgtype":"m.text"},"ts":1509412788000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"(after the <script async src>)","msgtype":"m.text"},"ts":1509412794000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"I was hoping your depressing article https://www.html5rocks.com/en/tutorials/speed/script-loading/ would cover this, but unfortunately not (as far as I can see)","msgtype":"m.text"},"ts":1509412822000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Only IE10+ is required.","msgtype":"m.text"},"ts":1509412827000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"I think I'll get rid of the onreadystate as starting point, to make sure it really is that one that is the issue and not script.onload","msgtype":"m.text"},"ts":1509412851000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Edge will have URLâ€™s toJSON soonish","msgtype":"m.text"},"ts":1509427964000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hayato: commented on the composedPath issue. Do you still see there to be some performance issue?","msgtype":"m.text"},"ts":1509436387000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"since I don't","msgtype":"m.text"},"ts":1509436390000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"annevk: does my suggestion there for composedPath sound somewhat reasonable?","msgtype":"m.text"},"ts":1509436918000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____:  I commented in the issue.","msgtype":"m.text"},"ts":1509436995000,"senderName":"hayato","senderId":"hayato@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1509437001000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: I suspect I don't have time to look into it soonish unless it's high priority","msgtype":"m.text"},"ts":1509438783000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: well, I need to implement something","msgtype":"m.text"},"ts":1509438800000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: ah okay, I'll have a look","msgtype":"m.text"},"ts":1509438829000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"great thanks","msgtype":"m.text"},"ts":1509438838000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____, annevk: i guess the change is to just pre-compute the composed path upfront?","msgtype":"m.text"},"ts":1509438925000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: btw, it is hard to know what all you spec authors are busy with.  Like you and Domenic are dealing with so many different spec issues","msgtype":"m.text"},"ts":1509438934000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____, annevk: that seems fine with your proposed optimization.","msgtype":"m.text"},"ts":1509438943000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: I'm mostly busy with a baby at the moment ðŸ˜Š","msgtype":"m.text"},"ts":1509438986000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rniwa: I wouldn't call it precomputation. Just annotate the tuples so that the composed path can be calculated later","msgtype":"m.text"},"ts":1509438987000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"annevk: oh sure. I thought you'd be mostly offline, but since you aren't ... ;)","msgtype":"m.text"},"ts":1509439014000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: so the challenge here is that we'd still have to compute which tree is visible to which tree","msgtype":"m.text"},"ts":1509439099000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: that could be expensive","msgtype":"m.text"},"ts":1509439107000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: yeah, I'm not entirely sure how smaug____'s model works","msgtype":"m.text"},"ts":1509439157000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: you'd remember which tree is visible to which tree upfront","msgtype":"m.text"},"ts":1509439189000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"If we stored a reference to the root of the item in event's path for instance I don't think we'd have enough information","msgtype":"m.text"},"ts":1509439196000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: and then store that information along with event path","msgtype":"m.text"},"ts":1509439197000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: right, because a shadow host can be moved from one tree to another","msgtype":"m.text"},"ts":1509439224000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: so you'd have to remember the entire tree relationship :(","msgtype":"m.text"},"ts":1509439248000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"now that i think about it, we probably don't want to make this change.","msgtype":"m.text"},"ts":1509439261000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"it'd make event dispatching a lot more expensive...","msgtype":"m.text"},"ts":1509439270000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Yeah, it seems you'd basically have to do that ancestor check during dispatch instead","msgtype":"m.text"},"ts":1509439287000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm strongly against the current model","msgtype":"m.text"},"ts":1509439295000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: okay but we've already shipped with the spec behavior","msgtype":"m.text"},"ts":1509439314000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"since one can't rely on composedPath to return the path","msgtype":"m.text"},"ts":1509439314000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: of re-computing which node is visible to which node","msgtype":"m.text"},"ts":1509439324000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: we don't have the blink bug, for example","msgtype":"m.text"},"ts":1509439330000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"I wonder how expensive it would be though to calculate during dispatch","msgtype":"m.text"},"ts":1509439384000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Since we have to do some traversal","msgtype":"m.text"},"ts":1509439388000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: to do this, we'd have to remember the current/old \"parent\" tree for each shadow root.","msgtype":"m.text"},"ts":1509439430000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: i've specifically designed webkit's event dispatching code not having to do those kinds of expensive computations or storing of information","msgtype":"m.text"},"ts":1509439478000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"so I'd be very much against changing the status quo","msgtype":"m.text"},"ts":1509439486000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"it's really annoying that event dispatching code keeps getting more complex & expensive","msgtype":"m.text"},"ts":1509439686000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"at some point, we ought to start care about perf of these things...","msgtype":"m.text"},"ts":1509439716000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"event path already remembers the old parent","msgtype":"m.text"},"ts":1509439723000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"event path knows the dispatch time DOM structure","msgtype":"m.text"},"ts":1509439739000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: old parent node, sure, not old parent node's shadow tree's parent tree","msgtype":"m.text"},"ts":1509439763000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"I do care about performance a lot","msgtype":"m.text"},"ts":1509439765000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"it knows the path through shadow trees","msgtype":"m.text"},"ts":1509439815000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"what am I missing here","msgtype":"m.text"},"ts":1509439821000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: so the problem is that let's say a path contains n1 > n2","msgtype":"m.text"},"ts":1509439836000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"where n1 and n2 are nodes","msgtype":"m.text"},"ts":1509439850000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"if they belong to two different trees, say, t1, and t2","msgtype":"m.text"},"ts":1509439859000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"the relationship between t1 and t2 may have changed.","msgtype":"m.text"},"ts":1509439873000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"sure, and we don't care about that change","msgtype":"m.text"},"ts":1509439884000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"t1 and t2 could belong to two completely disjoint shadow trees","msgtype":"m.text"},"ts":1509439892000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"right. I don't want to keep that in mind at all","msgtype":"m.text"},"ts":1509439906000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: if we don't isn't there a possibility that we end up revealing something that should be hidden?","msgtype":"m.text"},"ts":1509439909000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: well, you should. otherwise, how do we decide whether n1 is visible to n2 or not?","msgtype":"m.text"},"ts":1509439919000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: if I move a node into a closed tree during dispatch for instance","msgtype":"m.text"},"ts":1509439932000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh, you're worried about moving something from an open shadow dom to a closed one?","msgtype":"m.text"},"ts":1509439950000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: yeah, that can totally happen","msgtype":"m.text"},"ts":1509439958000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"I'm not worried about that all","msgtype":"m.text"},"ts":1509439961000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"that is a case which is totally fine. The node was already in path","msgtype":"m.text"},"ts":1509439974000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"which exposed it to the outside world","msgtype":"m.text"},"ts":1509439982000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: you can move n1 into n2 or vice versa as well","msgtype":"m.text"},"ts":1509439983000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"so hiding it then suddenly doesn't really matter","msgtype":"m.text"},"ts":1509439993000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: well, it totally matters depending on when the change was made","msgtype":"m.text"},"ts":1509440030000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: the very DOM mutation that just happened may have been done to hide those nodes","msgtype":"m.text"},"ts":1509440047000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"composedPath should be able to answer to the question which all event targets will handle the event","msgtype":"m.text"},"ts":1509440062000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: except it shouldn't disclose nodes in the closed shadow trees","msgtype":"m.text"},"ts":1509440085000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"right. But that modification happens after event path is created","msgtype":"m.text"},"ts":1509440109000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: i'd be opposed to any API change that results in a node inside a closed shadow tree to be exposed to the outside world","msgtype":"m.text"},"ts":1509440109000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: that would break the very important encapsulation invariant","msgtype":"m.text"},"ts":1509440117000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"if one can move non-closed node to be inside closed shadow root, there is already some leak happening","msgtype":"m.text"},"ts":1509440154000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"it is similar to having random node in non-shadow dom, keeping js ref to it, and then just move it to closed shadow dom","msgtype":"m.text"},"ts":1509440200000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"you definitely give access to the internals of the closed shadow dom there","msgtype":"m.text"},"ts":1509440214000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"so I'm missing to see the issue here","msgtype":"m.text"},"ts":1509440225000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: sure, it's not really a security threat model we're talking about here","msgtype":"m.text"},"ts":1509440228000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: the whole point of event retargeting and composedPath() is there to hide nodes in the shadow tree at the time of the event dispatching","msgtype":"m.text"},"ts":1509440255000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"exactly. at the time of event dispatching","msgtype":"m.text"},"ts":1509440295000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"not later","msgtype":"m.text"},"ts":1509440299000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: when I say dispatch I mean when we call event listener on each node","msgtype":"m.text"},"ts":1509440313000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: as in https://dom.spec.whatwg.org/#concept-event-listener-invoke","msgtype":"m.text"},"ts":1509440368000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"and when I say event dispatching, I mean the time when event is actually dispatched.","msgtype":"m.text"},"ts":1509440381000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and if one moves open nodes to be suddenly inside closed trees, they are already having issues with encapsulation","msgtype":"m.text"},"ts":1509440417000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: I don't understand why a leak is acceptable in this small edge case","msgtype":"m.text"},"ts":1509440419000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"small?","msgtype":"m.text"},"ts":1509440431000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"having a composedPath() which lies is totally nuts","msgtype":"m.text"},"ts":1509440442000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: having it violate encapsulation seems equally wrong","msgtype":"m.text"},"ts":1509440474000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I see it so that one has already exposed the node","msgtype":"m.text"},"ts":1509440499000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"since it wasn't in a closed tree","msgtype":"m.text"},"ts":1509440504000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Okay, I guess I can buy that","msgtype":"m.text"},"ts":1509440528000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I am somewhat sympathetic to your point of view, I guess the question is figuring out a model that satisfies rniwa","msgtype":"m.text"},"ts":1509440554000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, smaug____: i don't think the visibility of a node should be computed upfront.","msgtype":"m.text"},"ts":1509440704000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"why?","msgtype":"m.text"},"ts":1509440720000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"annevk, smaug____: it should be computed each time composedPath() is called","msgtype":"m.text"},"ts":1509440721000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: to keep the encapsulation invariant valid","msgtype":"m.text"},"ts":1509440733000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"I'd prefer a fast composedPath","msgtype":"m.text"},"ts":1509440747000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: I like fast event dispatching.","msgtype":"m.text"},"ts":1509440763000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: since most people won't be using composedPath","msgtype":"m.text"},"ts":1509440769000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"my model doesn't slow down event dispatching","msgtype":"m.text"},"ts":1509440779000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: i don't want to increase the cost of dispatching an event","msgtype":"m.text"},"ts":1509440789000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: it absolutely would","msgtype":"m.text"},"ts":1509440793000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1509440799000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"well, sure, some flags","msgtype":"m.text"},"ts":1509440806000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: storing the extra tree scope information & its parent tree scope","msgtype":"m.text"},"ts":1509440813000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: is quit expensive","msgtype":"m.text"},"ts":1509440819000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"you don't need that all","msgtype":"m.text"},"ts":1509440822000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"you play with the path only","msgtype":"m.text"},"ts":1509440828000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: we would totally need that in our implementation","msgtype":"m.text"},"ts":1509440834000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"I don't see why the encapsulation need to work that way","msgtype":"m.text"},"ts":1509440846000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: Reverse computing the tree path computation from the event path would be insanely complicated","msgtype":"m.text"},"ts":1509440860000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: I think the problem is that rniwa doesn't agree with you on composedPath() revealing previously non-closed nodes","msgtype":"m.text"},"ts":1509440867000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1509440878000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and I don't understand why","msgtype":"m.text"},"ts":1509440883000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"any listener in the path may have taken references to such nodes already and revealing the nodes anyhow","msgtype":"m.text"},"ts":1509440917000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: here's a question. if you think moving a node from one tree to another is not really a serious concern","msgtype":"m.text"},"ts":1509440919000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: then why do you care about this behavior at all?","msgtype":"m.text"},"ts":1509440924000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: no. that's not at all true","msgtype":"m.text"},"ts":1509440933000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"I care about API sanity","msgtype":"m.text"},"ts":1509440943000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: you can move a node from one tree to another before any other node would have received the event","msgtype":"m.text"},"ts":1509440954000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"right now we have API which doesn't return the value one would expect","msgtype":"m.text"},"ts":1509440956000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"rniwa: what smaug____ cares about is that composedPath() reflects the true event path","msgtype":"m.text"},"ts":1509440956000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: it totally does.","msgtype":"m.text"},"ts":1509440963000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: and it does that","msgtype":"m.text"},"ts":1509440972000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"it does not","msgtype":"m.text"},"ts":1509440987000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____, annevk: event path itself is computed upfront","msgtype":"m.text"},"ts":1509440995000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____, annevk: the only thing that's dynamically computed is whether a given node is visible to the current event target or not","msgtype":"m.text"},"ts":1509441041000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"which is weird","msgtype":"m.text"},"ts":1509441073000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____, annevk: i don't see why that affects anything about event path","msgtype":"m.text"},"ts":1509441077000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: it's not weird at all","msgtype":"m.text"},"ts":1509441081000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"and doesn't let us optimize composePath calls","msgtype":"m.text"},"ts":1509441087000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: everywhere else in the DOM API where we support shaodw tree","msgtype":"m.text"},"ts":1509441092000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: we hide nodes whenever the node is closed-shadow-hidden from another node","msgtype":"m.text"},"ts":1509441108000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: you can totally optimize composedPath.","msgtype":"m.text"},"ts":1509441120000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: the only thing you need is detect a case where a shadow tree gets moved from one tree to another and becomes visible","msgtype":"m.text"},"ts":1509441145000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: since such a DOM mutation is very rare, you can keep using the cached composed path in most cases","msgtype":"m.text"},"ts":1509441160000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: do we expect frequent composedPath() calls? (It seems there's some opportunity to optimize in any case though.)","msgtype":"m.text"},"ts":1509441162000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: just like you'd do for live node lists like getElementsByTagName.","msgtype":"m.text"},"ts":1509441191000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: tracking whether some particular tree is moved around isn't exactly fast","msgtype":"m.text"},"ts":1509441208000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"live node lists are horrible for the performance","msgtype":"m.text"},"ts":1509441225000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: sure it is. you'd have to already update the value of isConnected for every node.","msgtype":"m.text"},"ts":1509441228000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"yes. and that code is very hot","msgtype":"m.text"},"ts":1509441263000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: so your engine already needs to be aware when a node gets removed from the tree","msgtype":"m.text"},"ts":1509441265000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"adding more stuff there makes it slower","msgtype":"m.text"},"ts":1509441272000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: well, adding stuff to event dispatch also makes things slower","msgtype":"m.text"},"ts":1509441298000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: event dispatching is also quite hot.","msgtype":"m.text"},"ts":1509441308000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: storing extra 2-3 objects in our event path code would end up introducing more dependent loads & writes","msgtype":"m.text"},"ts":1509441336000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"and I wouldn't want to sure more objects there","msgtype":"m.text"},"ts":1509441381000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but we disagree with encapsulation here","msgtype":"m.text"},"ts":1509441391000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: it seems so","msgtype":"m.text"},"ts":1509441397000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: i really don't understand why you think it's okay to leak nodes in this case","msgtype":"m.text"},"ts":1509441413000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"this isn't much different to leaking closed shadow via event.target or so","msgtype":"m.text"},"ts":1509441423000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"first event.target is in open tree, one takes a ref to event, then target is moved to a closed tree","msgtype":"m.text"},"ts":1509441449000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: that's why event.target gets re-targeted not to do that","msgtype":"m.text"},"ts":1509441449000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"you leak closed shadow","msgtype":"m.text"},"ts":1509441455000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: if you get to have access to it first, yes","msgtype":"m.text"},"ts":1509441484000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: but you can't always do that","msgtype":"m.text"},"ts":1509441493000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"adding capturing listener to window is quite effective","msgtype":"m.text"},"ts":1509441559000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: unless the target is already in another closed shadow tree","msgtype":"m.text"},"ts":1509441581000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"well, in my example target was in open tree","msgtype":"m.text"},"ts":1509441616000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: you can be in open tree inside a closed shadow tree","msgtype":"m.text"},"ts":1509441635000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"oh sure. composedPath wouldn't leak that case, since it was initially hidden too from light dom","msgtype":"m.text"},"ts":1509441691000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: it would leak to the open trees of that closed shadow tree","msgtype":"m.text"},"ts":1509441720000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: I think to make useful progress you'd have to make a more detailed proposal that rniwa can then critique","msgtype":"m.text"},"ts":1509441776000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but you leak that already if you move anything from open to closed.","msgtype":"m.text"},"ts":1509441782000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: that's not really true.","msgtype":"m.text"},"ts":1509441857000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____","msgtype":"m.text"},"ts":1509441862000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":" smaug____: if you're talking about the security level of leak, then yes","msgtype":"m.text"},"ts":1509441873000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: but you're talking about accidental leaks, then no","msgtype":"m.text"},"ts":1509441885000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"easily. If you just happen to keep the reference to the originally open node","msgtype":"m.text"},"ts":1509441934000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: since shadow tree in its current form isn't a security feature, i don't think making an observation that something is technically possible isn't even useful","msgtype":"m.text"},"ts":1509441941000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"and then start to play with it when it has been moved to closed tree","msgtype":"m.text"},"ts":1509441946000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: well, it's totally okay for a node to be in an open tree for a brief moment of time","msgtype":"m.text"},"ts":1509441970000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: right. So then I don't get your point here :)","msgtype":"m.text"},"ts":1509441972000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: also, JS keeping a reference to a node isn't really a serious concern to me since this is not really a security model","msgtype":"m.text"},"ts":1509441992000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: so let's say you have some component which moves child nodes of a shadow host into its own tree","msgtype":"m.text"},"ts":1509442011000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: and it does this lazily","msgtype":"m.text"},"ts":1509442015000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: and that lazily movement may happen when it detects that an event got dispatched on its host element","msgtype":"m.text"},"ts":1509442050000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: with the event target being one of the child nodes of the host","msgtype":"m.text"},"ts":1509442064000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: in that case, if this component moves the nodes into its closed shadow tree","msgtype":"m.text"},"ts":1509442078000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: then the outside observer who is listening to this event shouldn't be able to see these nodes as target's","msgtype":"m.text"},"ts":1509442095000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"except if the outside observer is capturing listener, and would handle the event before the listener in the host","msgtype":"m.text"},"ts":1509442137000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: again, this is not a security model","msgtype":"m.text"},"ts":1509442165000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"why would the composedPath be different for capturing vs. bubble listener","msgtype":"m.text"},"ts":1509442167000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1509442173000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I'm talking about API consistency","msgtype":"m.text"},"ts":1509442180000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: well, the component might be moving nodes at the capturing phase","msgtype":"m.text"},"ts":1509442188000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: the API is consistent to the extent nodes inside a closed shadow tree is always hidden","msgtype":"m.text"},"ts":1509442207000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: I agree that the list of nodes inside a composed event path shouldn't change","msgtype":"m.text"},"ts":1509442235000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: in fact, composedTree as currently spec'ed would always return the same event path if there are no closed shadow trees","msgtype":"m.text"},"ts":1509442258000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"smaug____: however, there is a very important invariant for closed shadow trees, which is that no node inside a closed shadow tree is exposed to the outside DOM tree.","msgtype":"m.text"},"ts":1509442293000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"but the node has been exposed to the outside world already... this is going circles or how does one say it in English","msgtype":"m.text"},"ts":1509442331000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: going in circles","msgtype":"m.text"},"ts":1509442341000,"senderName":"rniwa","senderId":"rniwa@irc"}
]