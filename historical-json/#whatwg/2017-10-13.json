[
{"content":{"body":"tantek: It went through TAG review a couple months ago, so I've seen it - what about it?","msgtype":"m.text"},"ts":1507856706000,"senderName":"sangwhan","senderId":"sangwhan@irc"},
{"content":{"body":"TL:DR; summary is letting <video> to be thrown at your Apple TV or equivalent OTT box - has some worms in terms of cross browser/device pair interop though","msgtype":"m.text"},"ts":1507857348000,"senderName":"sangwhan","senderId":"sangwhan@irc"},
{"content":{"body":"sangwhan: do you still build Chrome and if some are you using jumbo builds and if so how much has it reduced your build time in your environment","msgtype":"m.text"},"ts":1507859460000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"in particular, how much has it reduced it for a full build from a clean working directory","msgtype":"m.text"},"ts":1507859502000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"*still build Chrome and if *so* are you using jumbo builds","msgtype":"m.text"},"ts":1507859555000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Does anyone here know how to hack Elvenar to get mo","msgtype":"m.text"},"ts":1507866793000,"senderName":"DDK","senderId":"DDK@irc"},
{"content":{"body":"more diamonds*","msgtype":"m.text"},"ts":1507866800000,"senderName":"DDK","senderId":"DDK@irc"},
{"content":{"body":"sangwhan: the attribute disableRemotePlayback sounded vaguely DRMish so I thought I'd ask critical crowd like here :)","msgtype":"m.text"},"ts":1507868557000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"MikeSmith: last time I had to build chrome I recall using sumo, but that was quite a while ago. Not sure if sumo is jumbo based - sounds dangerous to do on Chrome.","msgtype":"m.text"},"ts":1507869632000,"senderName":"sangwhan","senderId":"sangwhan@irc"},
{"content":{"body":"annevk: about “Credentials","msgtype":"m.text"},"ts":1507873034000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"are HTTP cookies, TLS client certificates, and authentication entries.”","msgtype":"m.text"},"ts":1507873040000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"in the Fetch spec","msgtype":"m.text"},"ts":1507873049000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"*authentication entries* is a link just to https://fetch.spec.whatwg.org/#authentication-entry","msgtype":"m.text"},"ts":1507873076000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"which dfn does not normatively include proxy-authentication entries","msgtype":"m.text"},"ts":1507873111000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"> An authentication entry and a proxy-authentication entry are tuples of username, password, and realm, associated with one or more requests.","msgtype":"m.text"},"ts":1507873154000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so should the definition of credentials instead be:","msgtype":"m.text"},"ts":1507873260000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"> Credentials are HTTP cookies, TLS client certificates, authentication entries, and proxy-authentication entries.","msgtype":"m.text"},"ts":1507873262000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: or to help clarify and fix that open issue:","msgtype":"m.text"},"ts":1507873390000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"> Credentials are HTTP cookies, TLS client certificates, and, for HTTP Authentication, authentication entries and proxy-authentication entries.","msgtype":"m.text"},"ts":1507873433000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"or even better:","msgtype":"m.text"},"ts":1507873782000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"> Credentials are HTTP cookies, TLS client certificates, and, for HTTP Authentication, authentication entries and proxy-authentication entries. [COOKIES] [TLS] [HTTP-AUTH]","msgtype":"m.text"},"ts":1507873784000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: oh, does the definition of credentials intentionally not include proxy authentication?","msgtype":"m.text"},"ts":1507879843000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"because I notice that XHR defines “user credentials” as not including proxy authentication","msgtype":"m.text"},"ts":1507879919000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"> The term user credentialsfor the purposes of this specification means cookies, HTTP authentication, and TLS client certificates. Specifically it does not refer to proxy authentication or the Origin header.","msgtype":"m.text"},"ts":1507879927000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"...","msgtype":"m.text"},"ts":1507879933000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"or are what the Fetch spec defines as “credentials” and what the XHR spec defines as “user credentials” not actually exactly the same thing?","msgtype":"m.text"},"ts":1507879992000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: hey","msgtype":"m.text"},"ts":1507880175000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: I'm not sure about proxies","msgtype":"m.text"},"ts":1507880181000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: I basically have never played with them, but as far as I know user agents consider them part of credentials; though that might have changed or might differ across user agents","msgtype":"m.text"},"ts":1507880219000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: it seems safest to exclude them as long as we're not sure","msgtype":"m.text"},"ts":1507880249000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"OK but don'","msgtype":"m.text"},"ts":1507880306000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"oofs","msgtype":"m.text"},"ts":1507880309000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"OK but don't see how “it seems safest to exclude them as long as we're not sure” follows from “as far as I know user agents consider them part of credentials”..","msgtype":"m.text"},"ts":1507880345000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but anyway I will update the Fetch PR to (re)exclude them","msgtype":"m.text"},"ts":1507880381000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: well that was going from memory","msgtype":"m.text"},"ts":1507880558000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1507880574000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: if Fetch and XHR don't include proxies I'd rather we continue to do so","msgtype":"m.text"},"ts":1507880577000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hai","msgtype":"m.text"},"ts":1507880662000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"will do the XHR PR in a bit (to change it to just reference the Fetch dfn)","msgtype":"m.text"},"ts":1507880683000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I'm trying to implement        ] [ mmn            ] [ tyoshino      ]","msgtype":"m.text"},"ts":1507885518000,"senderName":"qswz","senderId":"qswz@irc"},
{"content":{"body":"I'm trying to implement https://dom.spec.whatwg.org/#dom-childnode-replacewith here: https://github.com/caub/jsdom/blob/a/lib/jsdom/living/nodes/ChildNode-impl.js#L53-L78","msgtype":"m.text"},"ts":1507885553000,"senderName":"qswz","senderId":"qswz@irc"},
{"content":{"body":"but for the moment it makes no sense in terms of code","msgtype":"m.text"},"ts":1507885565000,"senderName":"qswz","senderId":"qswz@irc"},
{"content":{"body":"for .after and .before I think it's good, but .replaceWith's spec is harder to understand","msgtype":"m.text"},"ts":1507885592000,"senderName":"qswz","senderId":"qswz@irc"},
{"content":{"body":"qswz: What's your issue?","msgtype":"m.emote"},"ts":1507886426000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"qswz: rows 69..70 don't match up with the spec, right?","msgtype":"m.text"},"ts":1507888487000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: no, it doesn't","msgtype":"m.text"},"ts":1507890702000,"senderName":"qswz","senderId":"qswz@irc"},
{"content":{"body":"until then it was following it, but after I'm super confused","msgtype":"m.text"},"ts":1507890731000,"senderName":"qswz","senderId":"qswz@irc"},
{"content":{"body":"I understand it's problematic if nodes contains the context object","msgtype":"m.text"},"ts":1507890867000,"senderName":"qswz","senderId":"qswz@irc"},
{"content":{"body":"so I tried something","msgtype":"m.text"},"ts":1507890898000,"senderName":"qswz","senderId":"qswz@irc"},
{"content":{"body":"annevk: in what case would the condition in step 14 substep 1 of request constructor ever be triggered? I ask because it seems we can't ever construct a Request object whose mode is \"navigate\" without throwing a TypeError right?","msgtype":"m.text"},"ts":1507911789000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: I think you can in a FetchEvent handler with new Request(evt.request), no?","msgtype":"m.text"},"ts":1507911866000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"in that case the input Request object was created by the browser for FetchEvent.request","msgtype":"m.text"},"ts":1507911883000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: so evt.request would have to be a request whose mode is \"navigate\"?","msgtype":"m.text"},"ts":1507912252000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: yeah, you get that in a service worker","msgtype":"m.text"},"ts":1507912340000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: annevk: ok that makes sense, how exactly is this request whose mode is \"navigate\" constructed then? Because if the browser constructs it internally, doesn't that still sort of violate step 18 where we throw?","msgtype":"m.text"},"ts":1507912750000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"In other words, do internally constructed objects not necessarily follow the constructor steps outlined in the spec?","msgtype":"m.text"},"ts":1507912775000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"hm that might be a naïve question","msgtype":"m.text"},"ts":1507912809000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: yup, browser has special powers","msgtype":"m.text"},"ts":1507913101000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: it can just create a Request object instance and then back it with an arbitrary request","msgtype":"m.text"},"ts":1507913156000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: this pattern is used a lot, but we haven't been very formal about it thus far; at some point IDL will define object allocation/creation, which should make it a little clearer whenever it happens","msgtype":"m.text"},"ts":1507913185000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ok so I believe I've heard that the objects defined in fetch spec are used in general browser resource loading (all managed internally)...so does this mean when the browser \"fetches\" things like images and stylesheets, it creates request and possibly other objects under the hood, just it its own way?","msgtype":"m.text"},"ts":1507913534000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"annevk: Gotcha, thanks. Ah yeah that sounds pretty helpful!","msgtype":"m.text"},"ts":1507913562000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: yes","msgtype":"m.text"},"ts":1507913621000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: that's also why there's a distinction between a \"request\" and a Request object, to some extent","msgtype":"m.text"},"ts":1507913639000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: we could potentially merge them into one, but it's a little weird for non-JavaScript algorithms to pass around JavaScript objects, whereas abstract concepts seems a bit more natural","msgtype":"m.text"},"ts":1507913690000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"again though, largely convention, not formalized","msgtype":"m.text"},"ts":1507913716000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Right that makes sense. That's what was a tad confusing to me at first because I figured if a browser constructed this object internally (i.e. not in JavaScript), it couldn't necessarily throw a TypeError, so it must not be following the rules. So when we say \"request\" instead of Request object, do we expect internals to actually create an object of type Request, just in its own way? Or is it valid for the","msgtype":"m.text"},"ts":1507913845000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"internal representation to be whatever the heck it wants, so long as objects exposed to the DOM are compliant","msgtype":"m.text"},"ts":1507913845000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: a request doesn't necessarily have an associated Request","msgtype":"m.text"},"ts":1507913957000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: service workers ends up creating a Request object for them","msgtype":"m.text"},"ts":1507913980000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: that's how they end up exposed, but the way it creates those Request objects doesn't go through the constructor, it just allocates a shell and fills in the slots","msgtype":"m.text"},"ts":1507914022000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Right, but when an image is fetched let's say, can we expect somewhere in c++ land is calling `new Request(...)`, even though there is no formal requirement to do so","msgtype":"m.text"},"ts":1507914033000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Ah ok that's what I was getting at yes","msgtype":"m.text"},"ts":1507914039000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: for <img> I'd expect C++^H^H^H^HRust land to do something like create_request() which creates some internal object which maps to the request concept","msgtype":"m.text"},"ts":1507914100000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It wouldn't involve the Request class at all, unless there's a service worker","msgtype":"m.text"},"ts":1507914147000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok, so it won't involve the literal class, it would just need the attributes defined in https://fetch.spec.whatwg.org/#concept-request","msgtype":"m.text"},"ts":1507914477000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"smaug____: if you happen to know why setAttribute(\"test\", sameValueAsNow) creates a mutation record, maybe reply to https://github.com/whatwg/dom/issues/520?","msgtype":"m.text"},"ts":1507914530000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: yeah, could be a struct or whatever","msgtype":"m.text"},"ts":1507914552000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: or even just parameters, as long as the end result is the same","msgtype":"m.text"},"ts":1507914571000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: implementations can pretty much do whatever they want as long as they give the same outputs","msgtype":"m.text"},"ts":1507914605000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: see also paragraph after example here https://infra.spec.whatwg.org/#algorithms","msgtype":"m.text"},"ts":1507914702000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Right, as long as main fetch can perform with whatever the input “request” is, all is well.","msgtype":"m.text"},"ts":1507914733000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"annevk: excellent that makes sense, thank you","msgtype":"m.text"},"ts":1507914846000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Yeah the differentiation between “request” and Request makes a lot of sense, I guess wasn’t something I put much thought into before","msgtype":"m.text"},"ts":1507915592000,"senderName":"domfarolino","senderId":"domfarolino@irc"}
]