[
{"content":{"body":"Hixie: I'm just now going through the backlog of wiki admin stuff... the non-account request e-mails can be quite entertaining","msgtype":"m.text"},"ts":1397008766000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"(Subject: \"I'm going to sue you\") \"I'm tired of you controlling everything I do. I'm going to sue you for all your open source, ifc, developer, xmtl bullshit. It is a total invasion of privacy.\"","msgtype":"m.text"},"ts":1397008807000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"Oh, wait, I left off the kicker","msgtype":"m.text"},"ts":1397008827000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"\"Sent from my iPhone\"","msgtype":"m.text"},"ts":1397008829000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"I also love the numerous spam product catalogs for traffic cones","msgtype":"m.text"},"ts":1397008900000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"oh, and apparently html5banners.com will soon be available for auction","msgtype":"m.text"},"ts":1397008969000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"What books do you recommend reading about specifications/standards/schemas?","msgtype":"m.text"},"ts":1397011802000,"senderName":"aretecode","senderId":"aretecode@irc"},
{"content":{"body":"GPHemsley: sounds like i have better spam filtering than you, i hadn't seen any of those :-)","msgtype":"m.text"},"ts":1397012328000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"aretecode: i haven't seen any especially brilliant ones, i'd mostly recommend reading the specs and joining the mailing lists","msgtype":"m.text"},"ts":1397012358000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, thanks for your input. Can I buy the specs on paper?","msgtype":"m.text"},"ts":1397012714000,"senderName":"aretecode","senderId":"aretecode@irc"},
{"content":{"body":"you can buy paper and i think some companies still make printers :-)","msgtype":"m.text"},"ts":1397012777000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"aretecode: most of them are living nowadays, it seems","msgtype":"m.text"},"ts":1397012784000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"yeah most of the good specs these days are maintained, meaning they get bug fixes regularly","msgtype":"m.text"},"ts":1397012807000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"like, daily or weekly","msgtype":"m.text"},"ts":1397012811000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's not like buying a TeX manual that you could use for >1/4 century","msgtype":"m.text"},"ts":1397012817000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"(depending on how interested you are in having all the errata fixed by other than literal copy&paste)","msgtype":"m.text"},"ts":1397012867000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I understand, still, I find it easier to speed read on paper & printing them off is such a hassle.","msgtype":"m.text"},"ts":1397012889000,"senderName":"aretecode","senderId":"aretecode@irc"},
{"content":{"body":"(Yes, Knuth makes patches that you can print out and paste into the manual!)","msgtype":"m.text"},"ts":1397012911000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"aretecode, for some of these specs, by the time you're done printing them, what you've printed out is already obsolete (changes have occured).","msgtype":"m.text"},"ts":1397013029000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"even more likely for anything \"preprinted\"","msgtype":"m.text"},"ts":1397013047000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"like \"books\"","msgtype":"m.text"},"ts":1397013051000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"True, I will just have to read these online - thank you :-)","msgtype":"m.text"},"ts":1397013205000,"senderName":"aretecode","senderId":"aretecode@irc"},
{"content":{"body":"If you wait long enough, they'll probably stabilize eventually","msgtype":"m.text"},"ts":1397013290000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"And then you could print them","msgtype":"m.text"},"ts":1397013296000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"HTML is pretty stable, but i doubt it'll be unchanging before it's obsolete","msgtype":"m.text"},"ts":1397013516000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and it'll probably have a wave of desperate changes just after being obsolete :-)","msgtype":"m.text"},"ts":1397013539000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if you want stuff on paper, buy a kindle","msgtype":"m.text"},"ts":1397013630000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"gsnedders: r+","msgtype":"m.text"},"ts":1397040836000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"\"The problem is that the CSS Working Group doesn't follow the W3C Process for maintaining specifications.\"","msgtype":"m.text"},"ts":1397051147000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"giggles","msgtype":"m.emote"},"ts":1397051149000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":":-o","msgtype":"m.text"},"ts":1397051237000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"'Not following the W3C process' kind of sounds like a feature to me.","msgtype":"m.text"},"ts":1397056986000,"senderName":"galineau","senderId":"galineau@irc"},
{"content":{"body":"good morning, Whatwg!","msgtype":"m.text"},"ts":1397056998000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"good morning to you too, Monsieur Glazkov","msgtype":"m.text"},"ts":1397057027000,"senderName":"galineau","senderId":"galineau@irc"},
{"content":{"body":"galineau, well, you know there's one person who'd disagree :)","msgtype":"m.text"},"ts":1397057575000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"good morning, galineau and Ms2ger!","msgtype":"m.text"},"ts":1397057648000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"Ms2ger: only one? OMG I've never been this close to consensus before","msgtype":"m.text"},"ts":1397057653000,"senderName":"galineau","senderId":"galineau@irc"},
{"content":{"body":"Ha","msgtype":"m.text"},"ts":1397057659000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"One person in particular","msgtype":"m.text"},"ts":1397057674000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"who says \"The problem is that the CSS Working Group doesn't follow the W3C Process for maintaining specifications\"","msgtype":"m.text"},"ts":1397060526000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"don't make me have to go and read www-style","msgtype":"m.text"},"ts":1397060547000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"nm","msgtype":"m.text"},"ts":1397060621000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I should have guessed","msgtype":"m.text"},"ts":1397060641000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Yeah, that argument from Björn is totally valid.","msgtype":"m.text"},"ts":1397062388000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The errata for CSS2 is a disgrace. :/","msgtype":"m.text"},"ts":1397062396000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"galineau: Urg, you're gonna break my name-autocompletion memory with a nick like that.","msgtype":"m.text"},"ts":1397062431000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: I remembered that I was supposed to ping you when I'd written this spec: http://dev.w3.org/csswg/css-scoping/#scoping-mechanisms","msgtype":"m.text"},"ts":1397062444000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So you can point <style scoped> to it.","msgtype":"m.text"},"ts":1397062451000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"isn't the errata for CSS2 called \"CSS2.1\" ?","msgtype":"m.text"},"ts":1397062658000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"fwiw, I call \"CSS2\" all of 2.0, 2.1, and any future 2.x","msgtype":"m.text"},"ts":1397062743000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin - if you'd worked on CSS2 (or tried to implement it), you would have no desire to refer to anything as CSS2 except in a legacy / dismissive manner","msgtype":"m.text"},"ts":1397063065000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"tantek: that’s not incompatible with what I just said","msgtype":"m.text"},"ts":1397063217000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Ha","msgtype":"m.text"},"ts":1397063244000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"SimonSapin, Y U NO LIKE CSS2.1?","msgtype":"m.text"},"ts":1397063498000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"tantek: Because it's full of wrong things that are only corrected in the errata that nobody ever reads.","msgtype":"m.text"},"ts":1397063793000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so the 2.1 errata is in a sad state, is that what's being asserted?","msgtype":"m.text"},"ts":1397063817000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"s/2.1//","msgtype":"m.text"},"ts":1397063825000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1397063852000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Nobody ever bothers with errata in the csswg","msgtype":"m.text"},"ts":1397063858000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"What was the thing you said about mailing lists again tantek?","msgtype":"m.text"},"ts":1397063899000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"on a long enough timeline, open mailing lists turn into support forums","msgtype":"m.text"},"ts":1397063940000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"annevk: http://w3cmemes.tumblr.com/post/27939749113/the-conversation-in-whatwg-whenever-tanteks","msgtype":"m.text"},"ts":1397063940000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"Ah too bad, does not entirely feel how I think about errata","msgtype":"m.text"},"ts":1397063981000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"s/feel/match/","msgtype":"m.text"},"ts":1397064013000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm not much of a fan of errata either - the \"nobody checks errata\" problem makes errata not every useful in practice even if they do exist and are updated.","msgtype":"m.text"},"ts":1397064026000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"I'm much more in favor of the \"luke-warm spec\" model - \"finished\" specs continue being updated inline with any errata to their feature set","msgtype":"m.text"},"ts":1397064089000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"sounds like a living standard","msgtype":"m.text"},"ts":1397064188000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Lukewarm makes it sound like a zombie standard","msgtype":"m.text"},"ts":1397064223000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"i guess the distinction tantek is making is \"no new features\"?","msgtype":"m.text"},"ts":1397064343000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"jgraham, are zombies warm?","msgtype":"m.text"},"ts":1397064401000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"annevk: yt?","msgtype":"m.text"},"ts":1397064417000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: yeah","msgtype":"m.text"},"ts":1397064422000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: do you remember why we couldn't make querySelectorAll return Elements?","msgtype":"m.text"},"ts":1397064432000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic, yes, specific (frozen) feature sets are useful to various folks.","msgtype":"m.text"},"ts":1397064442000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"rniwa: Elements didn't exist yet","msgtype":"m.text"},"ts":1397064453000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"annevk: I know we could replace all static NodeList with Array or make it inherit from Array","msgtype":"m.text"},"ts":1397064456000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: we might be able to, it didn't seem worth the hassle of finding out","msgtype":"m.text"},"ts":1397064457000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hober: I know.","msgtype":"m.text"},"ts":1397064459000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: interesting","msgtype":"m.text"},"ts":1397064469000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tantek, I'm unconvinced","msgtype":"m.text"},"ts":1397064471000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk, hober: It seems like querySelectorAll should simply return a JS Array (or Elements when it's introduced)","msgtype":"m.text"},"ts":1397064492000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: given .queryAll() I didn't really see the need to find out","msgtype":"m.text"},"ts":1397064494000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: sweet, thanks","msgtype":"m.text"},"ts":1397064525000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: well, it kind of sucks to force authors to use new function just because of that.","msgtype":"m.text"},"ts":1397064528000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: I'd be okay with supporting that in the specification if you implement it","msgtype":"m.text"},"ts":1397064533000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rniwa: yeah I guess, the new functions also do other things authors asked for","msgtype":"m.text"},"ts":1397064554000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rniwa: e.g. jQuery selector parsing compat","msgtype":"m.text"},"ts":1397064562000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: you mean queryAll?","msgtype":"m.text"},"ts":1397064573000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: right, because it supports relative selector.","msgtype":"m.text"},"ts":1397064590000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: yes and yes","msgtype":"m.text"},"ts":1397064610000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: but it kind of sucks that we have to block the work to make querySelectorAll's results usable until we can implement the relative selector","msgtype":"m.text"},"ts":1397064616000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: because the latter requires a substantial amount of work","msgtype":"m.text"},"ts":1397064628000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Ms2ger, clearly you're not various folks ;)","msgtype":"m.text"},"ts":1397064632000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"rniwa: as I said, I'd be happy to back a WebKit change with a spec change","msgtype":"m.text"},"ts":1397064639000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rniwa: you might want to ping the list and copy bz and arv_","msgtype":"m.text"},"ts":1397064656000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tantek: I imagine zombies follow Newton's law of cooling","msgtype":"m.text"},"ts":1397064657000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: I guess the only risk is that someone might calling item() on the result :/","msgtype":"m.text"},"ts":1397064658000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"arv_: ^","msgtype":"m.text"},"ts":1397064662000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: yeah","msgtype":"m.text"},"ts":1397064664000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bzed: are you bz?","msgtype":"m.text"},"ts":1397064677000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"shakes fist at item()","msgtype":"m.emote"},"ts":1397064682000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"bzed != bz","msgtype":"m.text"},"ts":1397064688000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks.","msgtype":"m.text"},"ts":1397064693000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"jgraham maybe warm blooded vs. cold blooded (mammals vs reptiles) could be another analogy","msgtype":"m.text"},"ts":1397064704000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"rniwa: What's so hard about relative selectors? Absolutizing them is a simple algo.","msgtype":"m.text"},"ts":1397064707000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: another risk is that WebKit has historically supported stupid namedItem :(","msgtype":"m.text"},"ts":1397064708000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic_: item() laughs at you","msgtype":"m.text"},"ts":1397064713000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: I'm not saying it's hard. It requires a lot of work.","msgtype":"m.text"},"ts":1397064736000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: that hasn't been refactored?","msgtype":"m.text"},"ts":1397064741000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"then again, even mammals don't typically spontaneously grow never-before-seen limbs (features)","msgtype":"m.text"},"ts":1397064761000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"annevk: you mean namedItem?","msgtype":"m.text"},"ts":1397064770000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: not in WebKit","msgtype":"m.text"},"ts":1397064772000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: it has been in Blink.","msgtype":"m.text"},"ts":1397064775000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"TabAtkins: proper Elements support also requires a lot of work","msgtype":"m.text"},"ts":1397064777000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: (I think)","msgtype":"m.text"},"ts":1397064785000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: ait","msgtype":"m.text"},"ts":1397064788000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah...","msgtype":"m.text"},"ts":1397064791000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"But going with Array for now seems safe","msgtype":"m.text"},"ts":1397064796000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: we might just do Array first and then add Elements later.","msgtype":"m.text"},"ts":1397064799000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"All right.  Not really sure how (you just do a quick check on the selector, then maybe prepend :scope), but whatever.","msgtype":"m.text"},"ts":1397064803000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: Yeah, I'd believe that.","msgtype":"m.text"},"ts":1397064809000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"living things typically have a static total feature set (gene sequence)","msgtype":"m.text"},"ts":1397064845000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"that's interesting. having queryAll return an Array and then upgrading it to Elements later might be a backward-compat change","msgtype":"m.text"},"ts":1397064860000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"living things that grow new things here and there that were outside that feature set are typically the result of cancers","msgtype":"m.text"},"ts":1397064865000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"It's actually correct to just do a string search on the selector (assuming we never define a ::scope pseudo-element).","msgtype":"m.text"},"ts":1397064865000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so perhaps \"living spec\" would make more sense to apply to static feature set but inline updated errata specs","msgtype":"m.text"},"ts":1397064904000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"this is actually really good. it means queryAll could get implemented much faster.","msgtype":"m.text"},"ts":1397064909000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"tantek: it would be nice to have snapshots of living standards with errata.","msgtype":"m.text"},"ts":1397064944000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"tantek: And \"cancerous spec\" to ones like HTML?","msgtype":"m.text"},"ts":1397064957000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"mutagenic\"","msgtype":"m.text"},"ts":1397064968000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"tantek: i always get surprised by how much things have changed whenever i look at living standards :(","msgtype":"m.text"},"ts":1397064969000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"and a spec that grows new features beyond its base feature set would make m\u001core sense labled a \"cancerous spec\"","msgtype":"m.text"},"ts":1397064970000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Domenic_: not so fast in WebKit but yeah... at least we can unblock it from having implemented Elements.","msgtype":"m.text"},"ts":1397065007000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa - ah yes, you're one of the \"various folks\" I mentioned then","msgtype":"m.text"},"ts":1397065008000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"rniwa: is implementing relativize absolute selector that much work? feels like pull-request material...","msgtype":"m.text"},"ts":1397065080000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: note that rniwa and I were discussing returning an Array from querySelectorAll, not queryAll, though the latter seems ok too","msgtype":"m.text"},"ts":1397065165000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rniwa - that sort of \"living spec\" model is what I'm seeing if I can push W3C to do.","msgtype":"m.text"},"ts":1397065171000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"since errata are pretty broken (in many ways)","msgtype":"m.text"},"ts":1397065179000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"tantek: yeah, that'll be nice.","msgtype":"m.text"},"ts":1397065182000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"tantek: in fact, that's how we release software products, right?","msgtype":"m.text"},"ts":1397065191000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1397065196000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"tantek: we have trunk and then we branch for each release","msgtype":"m.text"},"ts":1397065196000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"lots of lessons to be reapplied","msgtype":"m.text"},"ts":1397065202000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"tantek: \"errata's\" being merged into each branch","msgtype":"m.text"},"ts":1397065210000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"tantek: as humans grow, they're able to do more things, until they die, not sure the feature set is necessarily static","msgtype":"m.text"},"ts":1397065214000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"precisely rniwa","msgtype":"m.text"},"ts":1397065233000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"However, I don't object to branching, if we can find more people working in this space first...","msgtype":"m.text"},"ts":1397065249000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: if you consider the feature set as the physical characteristics of a person, then it doesn't change much over the course of a human life","msgtype":"m.text"},"ts":1397065249000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"tantek: if you do consider it as his/her knowledge, then it does.","msgtype":"m.text"},"ts":1397065257000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"It's not like we have many editors to go around fixing the platform bugs","msgtype":"m.text"},"ts":1397065259000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk - they're able to do more things (applications) with the same genetics/physical expression (features)","msgtype":"m.text"},"ts":1397065263000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"annevk: THAT (scarcity of good editors) is the biggest problem we have :(","msgtype":"m.text"},"ts":1397065285000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: I'd rather have you and other good spec. editors writing actual specs and participating in discussions","msgtype":"m.text"},"ts":1397065300000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: than doing branches and merging fixes :(","msgtype":"m.text"},"ts":1397065304000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: because the latter is more of a tedious work...","msgtype":"m.text"},"ts":1397065326000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa, tell webapps","msgtype":"m.text"},"ts":1397065328000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"so all you \"master editors\" have taken an apprentice right? ;)","msgtype":"m.text"},"ts":1397065334000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Ms2ger: tomorrow!","msgtype":"m.text"},"ts":1397065336000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"for smaller specs branching/tagging meaningful versions is pretty easy i think","msgtype":"m.text"},"ts":1397065358000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"for html it seems infeasible","msgtype":"m.text"},"ts":1397065363000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"but for e.g. fullscreen probably fine","msgtype":"m.text"},"ts":1397065367000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"rniwa are you coming to the webapps f2f tomorrow?","msgtype":"m.text"},"ts":1397065385000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"(cue Annie soundtrack)","msgtype":"m.text"},"ts":1397065386000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"annevk: http://en.wikipedia.org/wiki/List_of_human_anatomical_features ;)","msgtype":"m.text"},"ts":1397065406000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Domenic_: seems like a chore, maintaining Fullscreen currently takes a couple hours every other week, that would make it worse","msgtype":"m.text"},"ts":1397065412000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tantek: ok ok, maybe my argument is that I don't really buy the analogy :p","msgtype":"m.text"},"ts":1397065433000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tantek: mostly, if someone could solve the resources problem, we can look at it again","msgtype":"m.text"},"ts":1397065453000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk ok that's fair ;)","msgtype":"m.text"},"ts":1397065457000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"annevk, the resources to do spec branching/tagging don't have to be as capable as those editing trunk.","msgtype":"m.text"},"ts":1397065488000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"I'll let you draw your own conclusions where there are such resources ;)","msgtype":"m.text"},"ts":1397065510000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Hixie: I'm curious about the script \"entry settings object\" (http://www.whatwg.org/specs/web-apps/current-work/multipage/webappapis.html#entry-settings-object); in particular I'm interested under what circumstances you'd expect there to be no entry settings object","msgtype":"m.text"},"ts":1397065764000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"also, from a higher level, I'm wondering if the new ES6 tasks stuff breaks some expectation of HTML that the latter (HTML, that is) is always the actor calling into script","msgtype":"m.text"},"ts":1397065812000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"Domenic_: you might also be interested in my higher level concern, above","msgtype":"m.text"},"ts":1397065881000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"starts listening","msgtype":"m.emote"},"ts":1397065899000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"rniwa, annevk: Having querySelectorAll return an Array sounds good to me. We'll be happy to follow if you make this change in WebKit.","msgtype":"m.text"},"ts":1397065913000,"senderName":"arv_","senderId":"arv_@irc"},
{"content":{"body":"O_O","msgtype":"m.text"},"ts":1397065939000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: in trying to make V8 run Promise callbacks itself, we ended up in a position where Blink didn't have enough information about the page context","msgtype":"m.text"},"ts":1397065941000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"Domenic_: https://code.google.com/p/chromium/issues/detail?id=360891 is the bug, if you're interested; the use of Object.observe could be replaced with a Promises example","msgtype":"m.text"},"ts":1397065980000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: you want to talk to bz probably","msgtype":"m.text"},"ts":1397066014000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I definitely want someone from Mozilla, yeah, as I suspect the entry settings object goes back a long way","msgtype":"m.text"},"ts":1397066038000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"its behavior is pretty surprising","msgtype":"m.text"},"ts":1397066043000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"yeah these sound like similar concerns to ones bz was voicing","msgtype":"m.text"},"ts":1397066051000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"ES6 *does* define the Realm in which these functions are called","msgtype":"m.text"},"ts":1397066072000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"ah, where/when was bz voicing these concerns?","msgtype":"m.text"},"ts":1397066074000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"namely, the same realm they were created in","msgtype":"m.text"},"ts":1397066084000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"presumably \"script settings object\" could be a property of the realm","msgtype":"m.text"},"ts":1397066092000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"sure, that's how all functions work","msgtype":"m.text"},"ts":1397066092000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"that's some super hairy stuff :(","msgtype":"m.text"},"ts":1397066126000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"the distinction is between the \"entry\" settings object and any old settings object","msgtype":"m.text"},"ts":1397066127000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: he posted some examples to es-discuss I believe","msgtype":"m.text"},"ts":1397066138000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok, will go look","msgtype":"m.text"},"ts":1397066143000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: about what promises doesn't define at the moment","msgtype":"m.text"},"ts":1397066145000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aklein: I'm not sure I understand that distinction","msgtype":"m.text"},"ts":1397066153000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"aklein: when no script is running","msgtype":"m.text"},"ts":1397066158000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"aklein: my understanding is that window.location.href in that callback should refer to the window.location.href for wherever the function was created","msgtype":"m.text"},"ts":1397066203000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: nope, it's much crazier than that","msgtype":"m.text"},"ts":1397066212000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"so if you got the function from another iframe it would affect the other iframe","msgtype":"m.text"},"ts":1397066220000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: it actually depends not on where the function that's calling window.location.href lives","msgtype":"m.text"},"ts":1397066240000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"but instead on which document had the event or script tag in it","msgtype":"m.text"},"ts":1397066268000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: ah ok, this is one of those crazy web-compat things where the straightforward answer is not compatible","msgtype":"m.text"},"ts":1397066273000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"aklein: please be sure to add that to ES6/W3C test suite.","msgtype":"m.text"},"ts":1397066278000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"it is starting to come back to me now","msgtype":"m.text"},"ts":1397066286000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Hixie: so you'd be surprised if there was script running but there was no entry settings object?","msgtype":"m.text"},"ts":1397066296000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"feels that \"those crazy web-compat things\" come up way too often in anything related to ES5/ES6","msgtype":"m.emote"},"ts":1397066332000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: there are already incompatibilities between Blink and Gecko :(","msgtype":"m.text"},"ts":1397066345000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: I'm sure there are plenty of them","msgtype":"m.text"},"ts":1397066358000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: I mean in this particular case of Location","msgtype":"m.text"},"ts":1397066367000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"and \"entry\" settings","msgtype":"m.text"},"ts":1397066374000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"rniwa: you don't happen to know how JSC handles this notion, by any chance?","msgtype":"m.text"},"ts":1397066392000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: definitely not, sorry :(","msgtype":"m.text"},"ts":1397066409000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"aklein: http://esdiscuss.org/topic/specification-styles#content-11 is the specific email I was thinking about","msgtype":"m.text"},"ts":1397066426000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aklein: you might want to check with weinig or ggaren on #webkit?","msgtype":"m.text"},"ts":1397066428000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"aklein: a script running without a settings object would go horribly wrong for a number of APIs","msgtype":"m.text"},"ts":1397066461000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it certainly goes horribly wrong in chrome :)","msgtype":"m.text"},"ts":1397066483000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: all APIs that deal with URLs for instance","msgtype":"m.text"},"ts":1397066489000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(except for new URL, funnily enough)","msgtype":"m.text"},"ts":1397066499000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aklein: there should definitely be a script settings entry whatsit if a script is running","msgtype":"m.text"},"ts":1397066524000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"aklein: any time code executes, it has to go through http://www.whatwg.org/specs/web-apps/current-work/#jump-to-a-code-entry-point to execute","msgtype":"m.text"},"ts":1397066545000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"aklein: that first calls http://www.whatwg.org/specs/web-apps/current-work/#prepare-to-run-a-callback which pushes a script settings object onto the stack of script settings objects","msgtype":"m.text"},"ts":1397066567000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"aklein: actually, there's one other way script can run, which is callbacks run by WebIDL; WebIDL pushes the script settings objects onto the stack manually. See WebIDL 4.8.","msgtype":"m.text"},"ts":1397066664000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"heycam|away|away: looks like webidl hasn't been updated to the new terminology regarding script settings objects btw","msgtype":"m.text"},"ts":1397066704000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: excellent, that is exactly the case, I'll study bz's post","msgtype":"m.text"},"ts":1397067002000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"Hixie: unfortunately https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tasks-and-task-queues also calls into script and doesn't use the HTML hook","msgtype":"m.text"},"ts":1397067064000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: might be worth posting that tidbit to es-discuss; both Allen and Domenic_ were surprised ES didn't match reality","msgtype":"m.text"},"ts":1397067069000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(for obvious reasons, but still)","msgtype":"m.text"},"ts":1397067069000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: and I'm not sure they quite followed what bz went on about","msgtype":"m.text"},"ts":1397067084000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aklein: seems like ES should expose some hooks (one of the other hooks it still needs is for a configurable this object)","msgtype":"m.text"},"ts":1397067149000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm constantly amused that the way specs are segmented leads implementations to be broken in exactly the same way as the specs they implement","msgtype":"m.text"},"ts":1397067187000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"in this case, it's V8 caring not at all about tagging things as \"entry\" settings objects","msgtype":"m.text"},"ts":1397067213000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"conway's law + murphy's law?","msgtype":"m.text"},"ts":1397067217000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"indeed","msgtype":"m.text"},"ts":1397067260000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"Hixie: the thread annevk linked to (http://esdiscuss.org/topic/specification-styles#content-11) might be interesting to you too...","msgtype":"m.text"},"ts":1397067318000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"TabAtkins: there is another sylvaing in #whatwg","msgtype":"m.text"},"ts":1397068034000,"senderName":"galineau","senderId":"galineau@irc"},
{"content":{"body":"galineau: then use sgalineau so i can still s<TAB>","msgtype":"m.text"},"ts":1397068065000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"Yus.","msgtype":"m.text"},"ts":1397068077000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"STAB","msgtype":"m.text"},"ts":1397068087000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Stab Atkins!","msgtype":"m.text"},"ts":1397068111000,"senderName":"galineau","senderId":"galineau@irc"},
{"content":{"body":"Stab Bat-Skins is my halloween name.","msgtype":"m.text"},"ts":1397068124000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: what if we created a custom addEventListener for service workers that did something similar to what onmessage does in the port API? See https://github.com/slightlyoff/ServiceWorker/issues/225 for context","msgtype":"m.text"},"ts":1397068128000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: ^","msgtype":"m.text"},"ts":1397068141000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"RESOLVED","msgtype":"m.text"},"ts":1397068307000,"senderName":"sgalineau","senderId":"sgalineau@irc"},
{"content":{"body":"renamed himself. Must be Last Call!","msgtype":"m.emote"},"ts":1397068342000,"senderName":"sgalineau","senderId":"sgalineau@irc"},
{"content":{"body":"aklein: sounds like a bug in ES","msgtype":"m.text"},"ts":1397068430000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: any particular reason we're using events here rather than just having a dedicated callback mechanism with one callback per \"event\"? that would make it unambiguous that it had different semantics.","msgtype":"m.text"},"ts":1397068529000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: you can importScripts 3rd party services which may want a say too","msgtype":"m.text"},"ts":1397068730000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1397068762000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so what happens if two event handlers do contradictory things?","msgtype":"m.text"},"ts":1397068773000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"With fetch in particular, you're responding to a thing that happened and potentially making it do something other then the default, events seem to fit","msgtype":"m.text"},"ts":1397068813000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"*shrug*","msgtype":"m.text"},"ts":1397068859000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: handing the request (respondWith) is an implicit prevent Default and stopImmediatePropogation","msgtype":"m.text"},"ts":1397068870000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"uh","msgtype":"m.text"},"ts":1397068878000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ugh, my phone made that really difficult to type","msgtype":"m.text"},"ts":1397068883000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"this sounds less and less like true DOM events","msgtype":"m.text"},"ts":1397068892000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i think if you find yourself having to adjust how the API works both in registration and in handling, you might be better off just making a new API, personally","msgtype":"m.text"},"ts":1397068998000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(this isn't a bad thing)","msgtype":"m.text"},"ts":1397069017000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"JakeA: that could actually be nice","msgtype":"m.text"},"ts":1397069858000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: we could have callbacks that have a promise as return value and such","msgtype":"m.text"},"ts":1397069882000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: well, app.get(urlRe, callback) will be the first library I build","msgtype":"m.text"},"ts":1397070674000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: but I want a catch-all to do the usual get-it-from-the-cache-if-its-there bit","msgtype":"m.text"},"ts":1397070697000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I mean that instead of event.respondWith() and waitUntil(), you'd have self.add(\"fetch\", function() { return promise })","msgtype":"m.text"},"ts":1397070776000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: annevk: It feel really similar to an event. Eg, I can observe click, I can also prevent the default and do something else. Fetch is like that, but the alternative response is passed to event.respondWith, which also calls event.preventDefault & event.stopImmediatePropogation","msgtype":"m.text"},"ts":1397070787000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"or self.listen() / self.observe()","msgtype":"m.text"},"ts":1397070792000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm not against it","msgtype":"m.text"},"ts":1397070801000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"But is it different enough to warrant it?","msgtype":"m.text"},"ts":1397070826000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I can see us having an API in future where there's a url match. Might be a useful optimisation, but mostly useful for third party code","msgtype":"m.text"},"ts":1397070891000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I don't see the current system matching events much","msgtype":"m.text"},"ts":1397070910000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We want register side effects, we want to return promises","msgtype":"m.text"},"ts":1397070944000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It tells you about a thing that happened at a time when you can override default behaviour. Do we have DOM APIs that do that that aren't events?","msgtype":"m.text"},"ts":1397070968000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":".sort()","msgtype":"m.text"},"ts":1397071015000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"array.sort()?","msgtype":"m.text"},"ts":1397071035000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"That starts a sort, it doesn't listen for one","msgtype":"m.text"},"ts":1397071074000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"The callback is called and allows overriding behavior","msgtype":"m.text"},"ts":1397071097000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"callbacks with a promise as a return value? why would you want that?","msgtype":"m.text"},"ts":1397071113000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: Well, that's exactly how .then() is","msgtype":"m.text"},"ts":1397071142000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"othermaciej: current API is onfetch = function(e) { e.respondWith(promise) }","msgtype":"m.text"},"ts":1397071157000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I probably lack sufficient context but who is the ultimate consumer of the promise?","msgtype":"m.text"},"ts":1397071189000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"is there another layer of API that returns it?","msgtype":"m.text"},"ts":1397071203000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I agree that calling an event method with a promise in an event handler seems dodgy","msgtype":"m.text"},"ts":1397071242000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: the browser consumes it and extracts a response object","msgtype":"m.text"},"ts":1397071244000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I see what you mean, but .sort triggers the event, and once it's complete, it doesn't happen again","msgtype":"m.text"},"ts":1397071277000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"the idea of returning a promise that the browser itself is supposed to use seems weird to me, but probably due to lack of understanding","msgtype":"m.text"},"ts":1397071318000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"JakeA: it seems we're not really using any bit from the event API and hacking around where it does not meet our needs","msgtype":"m.text"},"ts":1397071378000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: it's not entirely clear what it buys us","msgtype":"m.text"},"ts":1397071385000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I would expect the straightforward way to do it would be that a fetch callback gets some object that it can report to when (asynchronously) done","msgtype":"m.text"},"ts":1397071415000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: When the browser makes a resource request, imagine it's creating a promise for the response. If the response fails, it does something else (eg, an image with an x). You get to provide that promise.","msgtype":"m.text"},"ts":1397071446000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"othermaciej: so the idea is that a response is an async value","msgtype":"m.text"},"ts":1397071452000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but I guess if the async fetch it would do already naturally returns a promise, then it’s convenient","msgtype":"m.text"},"ts":1397071467000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: so we don't have to load the entire thing into memory","msgtype":"m.text"},"ts":1397071467000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"othermaciej: so yes, if you do a fetch in the worker it'll return a promise, which you would then give to the browser","msgtype":"m.text"},"ts":1397071493000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sure, I assume you do potentially-asynchronous I/O in response to a fetch request","msgtype":"m.text"},"ts":1397071508000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: we looked at respondWith(fetch(url)) vs fetch(url).then(respondWith) - the latter gets really messy fast","msgtype":"m.text"},"ts":1397071537000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I am just not sure what the promise adds other than extra levels of indirection","msgtype":"m.text"},"ts":1397071554000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: right, so it seems kind of natural that you have dofetchrequest(callback) and callback returns a promise that handles the request et al","msgtype":"m.text"},"ts":1397071569000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"othermaciej: what else would you do?","msgtype":"m.text"},"ts":1397071589000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don’t know what respondWith is in that example","msgtype":"m.text"},"ts":1397071591000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: you might want to read up a bit on https://github.com/slightlyoff/ServiceWorker/","msgtype":"m.text"},"ts":1397071626000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I’m obviously not “thinking with promises” yet because you seem to expect that statement to be completely intuititvely obvious and it’s not to me","msgtype":"m.text"},"ts":1397071629000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: In ServiceWorker's onfetch event, it's the mechanism to hijack the request and respond with something else","msgtype":"m.text"},"ts":1397071631000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"othermaciej: yeah sorry","msgtype":"m.text"},"ts":1397071652000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"actually, it should be respondWith(fetch(url)) vs fetch(url).then(respondWith, respondWith)","msgtype":"m.text"},"ts":1397071662000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"othermaciej: I wish I could explain in person","msgtype":"m.text"},"ts":1397071665000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"othermaciej: Providing a promise allows you to synchronously state your intention to handle the request but handle it in an async way","msgtype":"m.text"},"ts":1397071720000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: where is the viewable form of the spec in that?","msgtype":"m.text"},"ts":1397071728000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"... so is there special magic that the browser does when it consumes a primitive promise in the return value of this failure callback?","msgtype":"m.text"},"ts":1397071732000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"like, never actually building the promised value?","msgtype":"m.text"},"ts":1397071758000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I'm not sure I get what you mean","msgtype":"m.text"},"ts":1397071782000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"othermaciej: http://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html is some of it I suppose","msgtype":"m.text"},"ts":1397071784000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"othermaciej: but I recommend reading https://github.com/slightlyoff/ServiceWorker/blob/master/explainer.md first","msgtype":"m.text"},"ts":1397071810000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SamB: It waits for the promise to resolve, if it rejects it's a network error. If it resolves with not-a-response, networkerror","msgtype":"m.text"},"ts":1397071817000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"that seems to have large chunks of missing and/or misformatted content so I assumed it was not the right thing","msgtype":"m.text"},"ts":1397071833000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"ok, looking at the example of the use of onfetch","msgtype":"m.text"},"ts":1397071900000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I would have thought the natural thing would be that you can call e.respondWith at any later time, so if your actual fetch is asynchronous, you end up calling it outside the scope of the fetch callback","msgtype":"m.text"},"ts":1397071927000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"but I assume there’s some reason that is not good enough, or something","msgtype":"m.text"},"ts":1397071935000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"it also seems a bit weird to use an event listener for this, because there can only be one response","msgtype":"m.text"},"ts":1397071974000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"if there are 10 listeners registered, which one wins?","msgtype":"m.text"},"ts":1397071999000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":" othermaciej: Providing a promise allows you to synchronously state your intention to handle the request but handle it in an async way","msgtype":"m.text"},"ts":1397072016000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"does respondsWith implicitly prevent further event dispatch?","msgtype":"m.text"},"ts":1397072017000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1397072022000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"preventDefault and stopImmediatePropogation","msgtype":"m.text"},"ts":1397072041000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1397072071000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"If you allow e.respondWith to be called at a later time, you get that race condition you mention","msgtype":"m.text"},"ts":1397072081000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"this seems pretty hard to understand for the uninitiated","msgtype":"m.text"},"ts":1397072084000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"it almost seems better to have a single callback, since otherwise you have a strong dependency on registration order, so your callbacks have to coordinate anyway","msgtype":"m.text"},"ts":1397072145000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"We need to allow third party imports","msgtype":"m.text"},"ts":1397072177000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Order matters, just as it does with click events","msgtype":"m.text"},"ts":1397072192000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"if you do that, there’s no need to synchronously indicate intent to reply, and the whole thing becomes a lot simpler","msgtype":"m.text"},"ts":1397072194000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Yep, it makes it simpler with event listeners in general","msgtype":"m.text"},"ts":1397072243000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"is capture supported?","msgtype":"m.text"},"ts":1397072257000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"No","msgtype":"m.text"},"ts":1397072267000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I'm open to the idea of this being not-an-event-listener (should be discussed on github), but we must support multiple \"listeners\"","msgtype":"m.text"},"ts":1397072371000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I would say I’ll review it when there’s a spec, but by then it will probably be too late to five feedback","msgtype":"m.text"},"ts":1397072379000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"*give","msgtype":"m.text"},"ts":1397072396000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"There's a ts file with the API if you want to give feedback earlier. It needs updating from the most recent f2f but it's pretty solid","msgtype":"m.text"},"ts":1397072458000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Oh, they're gone","msgtype":"m.text"},"ts":1397072461000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: what is gone?","msgtype":"m.text"},"ts":1397072705000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"othermaciej: There's a ts file with the API if you want to give feedback earlier. It needs updating from the most recent f2f but it's pretty solid","msgtype":"m.text"},"ts":1397072816000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: othermaciej vanished for a moment","msgtype":"m.text"},"ts":1397072829000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"returning a promise is attractive FWIW","msgtype":"m.text"},"ts":1397072983000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"We should consider adding http://www.nohello.com/ to the topic, although it happens rarely enough I suppose","msgtype":"m.text"},"ts":1397073626000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: yes, the current API is ugly","msgtype":"m.text"},"ts":1397073645000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: although we'd have to treat some return values as \"unhandled\", probably just undefined","msgtype":"m.text"},"ts":1397074718000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic_: returning an actual response object should work","msgtype":"m.text"},"ts":1397074744000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: just Promise.resolve() the return value","msgtype":"m.text"},"ts":1397075001000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: hmm, feels nicer not to require that of the developer","msgtype":"m.text"},"ts":1397075599000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: that's what I meant; the implementation should Promise.resolve() the return value","msgtype":"m.text"},"ts":1397075618000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"JakeA: step 8 onward of https://github.com/whatwg/streams#constructor-start-pull-cancel-","msgtype":"m.text"},"ts":1397075667000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: but that gets racey if you have multiple \"listeners\"","msgtype":"m.text"},"ts":1397075676000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: how so more racey than e.waitUntil?","msgtype":"m.text"},"ts":1397075705000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Something needs to be a sync signal of \"nahhh, I'm not handling this\"","msgtype":"m.text"},"ts":1397075706000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"oh gross","msgtype":"m.text"},"ts":1397075714000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"so the function has both sync and async behavior","msgtype":"m.text"},"ts":1397075720000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: onfetch doesn't have waituntil","msgtype":"m.text"},"ts":1397075721000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic_: depends how you think of it. You synchronously provide a promise, but that promise represents an async value","msgtype":"m.text"},"ts":1397075785000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Eg, you can't asynchronously provide a value to .then(), you need to return the response synchronously","msgtype":"m.text"},"ts":1397075849000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"But yeah, undefined becomes \"not handling\" in the onfetch case. I guess this is why respondWith is a better intent","msgtype":"m.text"},"ts":1397076119000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I guess I still prefer promise.then(respondWith) but I'll take your word for it that it's ugly.","msgtype":"m.text"},"ts":1397076175000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I can already see that it's ugly for error-handling","msgtype":"m.text"},"ts":1397076184000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: and racing","msgtype":"m.text"},"ts":1397076690000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic_: eg two handlers","msgtype":"m.text"},"ts":1397076739000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"sorry for not being available (was in TC39 meetings). othermaciej: happy to answer questions about fetch events","msgtype":"m.text"},"ts":1397078503000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"Domenic_: it's super ugly","msgtype":"m.text"},"ts":1397078521000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"Domenic_: the control inversion also doesn't work well with the need to get out of the way early","msgtype":"m.text"},"ts":1397078550000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"Domenic_: the bigger issue is that \".then(resolveOtherThing)\" still misses some way of saying \"i've got this, keep me alive until I'm done\"","msgtype":"m.text"},"ts":1397078741000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"Domenic_: so even if you refactored this into 2 apis, you'd still need the moral equivalent of waitUntil() for deciding to \"own\" the transaction","msgtype":"m.text"},"ts":1397078765000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"Domenic_: this is something that's also going to be required when we rework IDB","msgtype":"m.text"},"ts":1397078778000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"slightlyoff: hmm interesting stuff","msgtype":"m.text"},"ts":1397078812000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"having two use cases will help refine","msgtype":"m.text"},"ts":1397078821000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: agreed.","msgtype":"m.text"},"ts":1397078898000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"hi all!","msgtype":"m.text"},"ts":1397079721000,"senderName":"full_vlad","senderId":"full_vlad@irc"},
{"content":{"body":"Can anyone help me with this problem? https://groups.google.com/a/chromium.org/forum/#!topic/chromium-extensions/sBCw0_jfLhI","msgtype":"m.text"},"ts":1397079776000,"senderName":"full_vlad","senderId":"full_vlad@irc"},
{"content":{"body":"it involves running a content script in all frames from a webpage","msgtype":"m.text"},"ts":1397079970000,"senderName":"full_vlad","senderId":"full_vlad@irc"},
{"content":{"body":"This channel probably isn't helpful for Chrome Extensions questions.","msgtype":"m.text"},"ts":1397080333000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"http://www.whatwg.org/specs/web-apps/current-work/#dom-form-requestautocomplete","msgtype":"m.text"},"ts":1397080373000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"full_vlad: they haven't even begun to standardize content scripts, so they'll not be of much help I'm afraid :-P","msgtype":"m.text"},"ts":1397080381000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"what I found so far is this:","msgtype":"m.text"},"ts":1397080555000,"senderName":"full_vlad","senderId":"full_vlad@irc"},
{"content":{"body":"Domenic_: Sanity check: In cases where we provide promise equivalents to events, the promise should resolve after the event right? (https://code.google.com/p/chromium/issues/detail?id=343630#c10)","msgtype":"m.text"},"ts":1397080569000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"the extension runs well on Facebook, Twitter, old google chat (GTalk)","msgtype":"m.text"},"ts":1397080581000,"senderName":"full_vlad","senderId":"full_vlad@irc"},
{"content":{"body":"it doesn't run on Hangouts","msgtype":"m.text"},"ts":1397080598000,"senderName":"full_vlad","senderId":"full_vlad@irc"},
{"content":{"body":"JakeA: I agree with your reasoning. I also think requestAutocomplete is *perfect* for promises","msgtype":"m.text"},"ts":1397080642000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"but when I change the tabs it works, it just doesn't work on refresh","msgtype":"m.text"},"ts":1397080735000,"senderName":"full_vlad","senderId":"full_vlad@irc"},
{"content":{"body":"The Google Plus page (with Hangouts) has many iframes in it, so the content script has to run in its specific iframe (the one with the chat). If i run the privly.run() function inside that specific iframe manually it works","msgtype":"m.text"},"ts":1397080773000,"senderName":"full_vlad","senderId":"full_vlad@irc"},
{"content":{"body":"Domenic_: Yeah, adding promises was always the intention. They just wanted out the door before they were available. Although that availability window turned out to be like a week or something","msgtype":"m.text"},"ts":1397080799000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"full_vlad: again, we don't really know about that stuff here!","msgtype":"m.text"},"ts":1397080807000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Facebook and Twitter implement their chat box in the top frame, so I think that's the difference","msgtype":"m.text"},"ts":1397080808000,"senderName":"full_vlad","senderId":"full_vlad@irc"},
{"content":{"body":"ok, sorry","msgtype":"m.text"},"ts":1397080819000,"senderName":"full_vlad","senderId":"full_vlad@irc"},
{"content":{"body":"Hixie: Looking at http://www.whatwg.org/specs/web-apps/current-work/#allowed-to-show-a-popup - So touchevents aren't a strong enough signal?","msgtype":"m.text"},"ts":1397080848000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"SamB, I just found a reference to your site in the Google content script documentation :p lol","msgtype":"m.text"},"ts":1397080885000,"senderName":"full_vlad","senderId":"full_vlad@irc"},
{"content":{"body":"JakeA: that list was based on what browsers did at the time; i'm happy to add more if browsers want to add more","msgtype":"m.text"},"ts":1397080933000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you mean whatwg.org? that's not *my* site :-)","msgtype":"m.text"},"ts":1397080938000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"though honestly, on mobile, popups are even worse","msgtype":"m.text"},"ts":1397080941000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"'s mind is blown ... how can there be popups on mobile?","msgtype":"m.emote"},"ts":1397080970000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"should think about getting a smartphone sometime ...","msgtype":"m.emote"},"ts":1397080986000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Hixie: gotcha","msgtype":"m.text"},"ts":1397081040000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"anyone else getting frequent 408s from bugzilla?","msgtype":"m.text"},"ts":1397081097000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I think we want the autocomplete events to bubble","msgtype":"m.text"},"ts":1397081229000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"Hixie: is there a reason you have all the new events not bubbling? We've gotten complaints from developers since it doesn't work with event delegation frameworks","msgtype":"m.text"},"ts":1397081252000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"i tried to test chrome and it didn't seem to bubble there","msgtype":"m.text"},"ts":1397081411000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(you can always use capturing event handlers, btw, regardless of bubbling)","msgtype":"m.text"},"ts":1397081426000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'm happy to make them bubble if chrome is going to change","msgtype":"m.text"},"ts":1397081471000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hsivonen: ping https://www.w3.org/Bugs/Public/show_bug.cgi?id=23940 and ping on the registry proposal thread","msgtype":"m.text"},"ts":1397081621000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: https://src.chromium.org/viewvc/blink?revision=170827&view=revision","msgtype":"m.text"},"ts":1397081668000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"Hixie: maybe Chrome is wrong","msgtype":"m.text"},"ts":1397081669000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Hixie: what was the reason for making simple events not bubble by default?","msgtype":"m.text"},"ts":1397081722000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"esprehn: i like my defaults to be 0/false/\"\"/null, generally. no other reason.","msgtype":"m.text"},"ts":1397081908000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"esprehn: ah, good to see that change. will make them bubble.","msgtype":"m.text"},"ts":1397081934000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"esprehn: done","msgtype":"m.text"},"ts":1397082117000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"most events should bubble unless there's a security or privacy reason not to","msgtype":"m.text"},"ts":1397082338000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"slightlyoff: or a \"that will really complicate applications\" reason?","msgtype":"m.text"},"ts":1397082391000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"yeah I think we might want to change the default, or at the very least fix up some events","msgtype":"m.text"},"ts":1397082417000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"Hixie: ex. the form validation events don't bubble","msgtype":"m.text"},"ts":1397082427000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"like 'invalid' ?","msgtype":"m.text"},"ts":1397082487000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you probably don't want 'invalid' to bubble, because there's not really any logical way to handle that generically","msgtype":"m.text"},"ts":1397082508000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"slightlyoff: i don't see how there could be a security or privacy implication to any events bubbling or not. I think a bigger concern is whether it makes the API sane or not. e.g. clicking makes sense to bubble -- you click something, you're clicking its container. But 'load' on <img> doesn't make sense to bubble, because then it would get confused with the 'load' event on Window.","msgtype":"m.text"},"ts":1397082612000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"with <form>, since you can't nest them, it doesn't really make any difference either way, so bubbling is probably fine","msgtype":"m.text"},"ts":1397082643000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"'toggle' on <details> wouldn't make sense to bubble since <details> can be nested, and you'd get confused about which one just opened.","msgtype":"m.text"},"ts":1397082706000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and so forth","msgtype":"m.text"},"ts":1397082713000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: 408s from w3c bugzilla?","msgtype":"m.text"},"ts":1397082818000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"[24~yeah","msgtype":"m.text"},"ts":1397082823000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah, even","msgtype":"m.text"},"ts":1397082825000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it seems significantly better to have a general \"the way this works\" than to try to special-case based on local reasoning.","msgtype":"m.text"},"ts":1397082911000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"trying to teach the web platform is really, really hard for these sorts of reasons","msgtype":"m.text"},"ts":1397082931000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"nah, designing APIs to just follow arbitrary rules doesn't make things better, imho.","msgtype":"m.text"},"ts":1397082948000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'm all for consistency, but not to the point of making APIs hard to use.","msgtype":"m.text"},"ts":1397082966000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i don't think anyone has trouble with the fact that <img onload> and <body onload> are different events.","msgtype":"m.text"},"ts":1397082983000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: all the entities in the acknowledgements section are double escaped","msgtype":"m.text"},"ts":1397082989000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"but i think they'd get _really_ confused if <img onload> bubbles to <body onload>.","msgtype":"m.text"},"ts":1397082997000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"esprehn: yeah, known bug (only affects the multipage copy)","msgtype":"m.text"},"ts":1397083005000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ah okay","msgtype":"m.text"},"ts":1397083014000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"esprehn: a fix is in the works but i want to do a long-term fix for a bunch of related issues so for now it's still broken :-)","msgtype":"m.text"},"ts":1397083024000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: if that was just the way \"it worked\", they'd start to filter by event target and/or we'd provide a good filtering API for them","msgtype":"m.text"},"ts":1397083043000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"Hixie: why would you get confused? the event.target points to the one that toggled?","msgtype":"m.text"},"ts":1397083059000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"Hixie: but as it stands there's not good filtering API, no way to teach how it works without \"...except in all of these other cases becaues that's the way it is\" and no clear model for what got decided in which direction","msgtype":"m.text"},"ts":1397083091000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"esprehn: because <body onload=\"start()\"> would work fine until you inserted an <img>, and then your code would run twice and you'd have no idea why","msgtype":"m.text"},"ts":1397083120000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I meant the <details> case, not that one","msgtype":"m.text"},"ts":1397083137000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"onload we can't change, too much content doesn't understand","msgtype":"m.text"},"ts":1397083151000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"but modern content does check the target. Developers are used to dealing with click like things","msgtype":"m.text"},"ts":1397083162000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"Hixie: Why would toggle on details be confusing? It's no more confusing than \"click\".  Being unable to do event delegation for things like \"toggle\" is annoying.","msgtype":"m.text"},"ts":1397083169000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"esprehn: well again, <details ontoggle=\"animate(this)\"> would work fine until you nested them, then it would break","msgtype":"m.text"},"ts":1397083177000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"how is that different than onclick=\"animate(this)\" ?","msgtype":"m.text"},"ts":1397083195000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"the difference is that \"click\", conceptually, does affect all the elements in the chain","msgtype":"m.text"},"ts":1397083209000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you're clicking on the whole stack","msgtype":"m.text"},"ts":1397083216000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(No less confusing than \"click\" either, but the solution to figure out the target element is the same in both cases.)","msgtype":"m.text"},"ts":1397083218000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: You're projecting a *particular* mental model on that, which may not make any sense in some cases.","msgtype":"m.text"},"ts":1397083238000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"In some cases for the author, it's really a particular element being clicked.  Like a button.","msgtype":"m.text"},"ts":1397083255000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: that doesn't match conversations we'e had with developers recently","msgtype":"m.text"},"ts":1397083260000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"they've complained that \"invalid\" and other new events don't bubble","msgtype":"m.text"},"ts":1397083269000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"More importantly, though, the ergonomics of non-bubbling is annoying, as esprehn and slightlyoff are saying.","msgtype":"m.text"},"ts":1397083291000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Because you have to specifically register a listener on every element you want to listen to, rather than doing one for a subtree or the whole page.","msgtype":"m.text"},"ts":1397083314000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"<form oninvalid=\"...\"> doesn't seem unreasonable, you want a single listener that opens some kind of error bubble","msgtype":"m.text"},"ts":1397083318000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"It uses event.target to figure out what thing wants the bubble","msgtype":"m.text"},"ts":1397083336000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"Each-element listeners make it more complicated to do dynamic HTML updates.","msgtype":"m.text"},"ts":1397083338000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"file a bug, if there's no compat problem we can change it","msgtype":"m.text"},"ts":1397083338000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"whatwg.org/newbug","msgtype":"m.text"},"ts":1397083345000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"There's also the non-trivial costs to many apps of needing to do specific registration","msgtype":"m.text"},"ts":1397083361000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"yeah, onload should probably not bubble ...","msgtype":"m.text"},"ts":1397083371000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"i'm just objecting to the idea that we should blindly make all cases bubble","msgtype":"m.text"},"ts":1397083378000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: yeah, of course not blindly","msgtype":"m.text"},"ts":1397083395000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"remember, btw, that you can always get the bubbling behaviour using capturing handlers","msgtype":"m.text"},"ts":1397083397000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"we implemented delegation in Dojo for many of the common event types (transparently to the users) to prevent us from incurring the (pretty bad) costs of having to thunk through the DOM everywhere vs. add a node to a filter list","msgtype":"m.text"},"ts":1397083399000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"I'd need to look at which events are captureable in which browsers. I think there's some legacy baggage I'm carrying around in my head which might no longer be valid","msgtype":"m.text"},"ts":1397083601000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"all events can always be captured","msgtype":"m.text"},"ts":1397084034000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"There are cases when non-bubbling is exactly what you want. mouseenter/leave","msgtype":"m.text"},"ts":1397084056000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"yeah, those are a good example too","msgtype":"m.text"},"ts":1397084068000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but capturing events has a different event order; for delegation i usually want the delegate event listener to happen in the bubble phase, not capture","msgtype":"m.text"},"ts":1397084098000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"you could always add a capture handler that cancels the event and redispatches it with bubbling enabled :-)","msgtype":"m.text"},"ts":1397084147000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i think i basically never, ever want any event to not be bubbling; that's something that should be decided by the person listening, not the person dispatching (if I'm a listener and I want the behavior of a non-bubbling event, I'll just check the event phase)","msgtype":"m.text"},"ts":1397084168000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"that's far worse :)","msgtype":"m.text"},"ts":1397084180000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: mouseenter/leave don't make sense if they bubble","msgtype":"m.text"},"ts":1397084215000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"not sure that mouseenter/leave make sense at all","msgtype":"m.text"},"ts":1397084339000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"seem like a lot of complexity just to save having to say if(e.eventPhase == e.BUBBLING_PHASE) return;","msgtype":"m.text"},"ts":1397084471000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"the difference between nothing at all, and something at all, is significant, imho.","msgtype":"m.text"},"ts":1397084498000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"onload=\"if (e.target == window) start()\" vs onload=\"start()\"","msgtype":"m.text"},"ts":1397084529000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"And 99% of the time mouseenter/leave is exactly what you want","msgtype":"m.text"},"ts":1397084544000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"the difference between all events having the same dispatch semantics, and some bubbling and some not, is also significant","msgtype":"m.text"},"ts":1397084545000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: if(e.eventPhase == e.BUBBLING_PHASE) return; isn't enough","msgtype":"m.text"},"ts":1397084588000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"too late to fix it now, but it should have been a flag on addEventListener","msgtype":"m.text"},"ts":1397084591000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"smaug____: was trying to think if there are differences, but none came to mind","msgtype":"m.text"},"ts":1397084626000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(performance, maybe)","msgtype":"m.text"},"ts":1397084645000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: yeah i'm not saying i would have designed it this way from the start, certainly","msgtype":"m.text"},"ts":1397084652000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(but you're still going through capture phase)","msgtype":"m.text"},"ts":1397084655000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"if you move mouse from being on top of subtree A to be on top of subtree B, all the elements in subtree A get a mouseleave and in B a mouseenter. But you'd get only one mouseout/mouseover","msgtype":"m.text"},"ts":1397084845000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Hixie: no indication of timeouts in the bugzilla server logs","msgtype":"m.text"},"ts":1397085028000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and nobody else reporting anything as far as I know","msgtype":"m.text"},"ts":1397085053000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: odd","msgtype":"m.text"},"ts":1397085711000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"MikeSmith: might just be a Chrome dev issue","msgtype":"m.text"},"ts":1397085717000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"MikeSmith: i just get it intermittently","msgtype":"m.text"},"ts":1397085742000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1397085809000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zewt: If you don't think mouseenter/leave make sense, then I'm not sure you've ever tried to do anything robust with mouseover/out.","msgtype":"m.text"},"ts":1397086594000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ah, reading further, yeah, you've probably never done anything with it.  There are several complicated edge-cases to handle. It's *way* more than just worrying about doubling.","msgtype":"m.text"},"ts":1397086656000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"bubbling, rather.","msgtype":"m.text"},"ts":1397086663000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Mousing over a child fires mouseout on your element, for example.","msgtype":"m.text"},"ts":1397086678000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"that's an ... interesting choice ...","msgtype":"m.text"},"ts":1397086702000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"It's possible to have a mouseover without a corresponding mouseout, and vice versa.","msgtype":"m.text"},"ts":1397086704000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"the discussion was about bubbling, not about any of that","msgtype":"m.text"},"ts":1397086715000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"SamB: It makes sense *for the chosen semantics of mouseover/out*.","msgtype":"m.text"},"ts":1397086717000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But those semantics don't match what people want most of the time.","msgtype":"m.text"},"ts":1397086726000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah, that's why I said interesting and not braindead","msgtype":"m.text"},"ts":1397086749000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"and I was only talking about the difference between a non-bubbling event and just checking the event phase","msgtype":"m.text"},"ts":1397086755000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: Ah, ok.  Yeah, a bubbling mouseenter would make sense, since you can check whether you're getting it for the element you want or not.","msgtype":"m.text"},"ts":1397086788000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so, presumably none of these four make sense bubbling?","msgtype":"m.text"},"ts":1397086789000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"every event makes sense bubbling (eg. delegation)","msgtype":"m.text"},"ts":1397086816000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"oh, but the non-pairing doesn't really sound like a good idea","msgtype":"m.text"},"ts":1397086822000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"(it could use a more concise way to check it, of course--these old DOM APIs aren't famous for being brief)","msgtype":"m.text"},"ts":1397086851000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"hmm, well, if you just want to have one listener that feeds the events into a different API, sure","msgtype":"m.text"},"ts":1397086861000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"however for your plain old onfoo= ...","msgtype":"m.text"},"ts":1397086917000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"i doubt any change would make sense today (we're already stuck with non-bubbling events) so i'm not really suggesting a change, but one approach would be for \"non-bubbling\" events to really mean event handlers (not listeners) ignore the event when in the bubble phase","msgtype":"m.text"},"ts":1397087098000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Now *that* sounds really reasonable.","msgtype":"m.text"},"ts":1397087116000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"personally i'm pretty sure if i was designing this from scratch the entire approach would be quite different :-)","msgtype":"m.text"},"ts":1397087218000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"maybe more based on promises or something","msgtype":"m.text"},"ts":1397087224000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Promises aren't suitable for repeating events, but something *like* promises is.  I drew up some initial thoughts on the matter a while ago <http://www.xanthir.com/b4PV0>, and something like that should either pop out of Streams or show up independently soon enough.","msgtype":"m.text"},"ts":1397087324000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"mounir: i usually take patches and complaints of lacks of a spec as the firmest indication of interest short of shipping. :-)","msgtype":"m.text"},"ts":1397087822000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: ping","msgtype":"m.text"},"ts":1397087920000,"senderName":"a-ja","senderId":"a-ja@irc"}
]