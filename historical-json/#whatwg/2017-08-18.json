[
{"content":{"body":"rbyers: I'm probably not the right person to ask, smaug____ et al designed that","msgtype":"m.text"},"ts":1503040806000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rbyers: aklein is probably closer to you timezone wise, although you never know with smaug____","msgtype":"m.text"},"ts":1503042761000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Is there something like ripgrep for blame?","msgtype":"m.text"},"ts":1503042820000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____ tends to hover between US west coast and US east coast as far as timezones go","msgtype":"m.text"},"ts":1503042966000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"wanderview: https://github.com/WICG/background-fetch/issues/47 might explain the use-cases better. Supporting list[index] should be fine. The JS equivalent for getRange is list.slice, but it doesn't seem like that comes by default with webidl iterators.","msgtype":"m.text"},"ts":1503044537000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I guess you can always file an issue. We'd need to check whether adding it in WebIDL would conflict with other interfaces implementing iterators and then whether there's implementor interest.","msgtype":"m.text"},"ts":1503045134000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"It makes me sad the number of MDN pages that suggest APIs are \"unstable\". Who has the power to change policy here? Who do I have to convince?","msgtype":"m.text"},"ts":1503045554000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Eg, two unflagged stable implementations shouldn't be considered experimental/unstable (eg https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API)","msgtype":"m.text"},"ts":1503045584000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Talk to sheppy","msgtype":"m.text"},"ts":1503045683000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"On irc.m.o","msgtype":"m.text"},"ts":1503045692000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"pings sheppy on this matter","msgtype":"m.emote"},"ts":1503045915000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"http://www.w3.org/mid/BAA808E3-0BCA-45AF-845C-541D35D7A330⊙wo ... wonder if i should point Tim to crbug.com/new ? Also shouldn't it be Vary: access-control-allow-origin ?","msgtype":"m.text"},"ts":1503046291000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: Vary: Origin is correct, I suspect it's credentials that's biting him","msgtype":"m.text"},"ts":1503046585000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: https://github.com/whatwg/fetch/issues/307","msgtype":"m.text"},"ts":1503046629000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah right, I somehow thought Vary was for response headers","msgtype":"m.text"},"ts":1503046695000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: so one of https://github.com/whatwg/fetch/pull/496#issuecomment-287659974 ?","msgtype":"m.text"},"ts":1503047108000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: no","msgtype":"m.text"},"ts":1503047594000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: the spec still doesn't specify that behavior because only Fx implements it and Chrome is opposed (well Ryan Sleevi is) and I dunno about Safari and Edge","msgtype":"m.text"},"ts":1503047629000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rbyers: FWIW, I think MutationObserver part of the spec is quite reasonable.","msgtype":"m.text"},"ts":1503051025000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(I do regret microtasks a bit, but that isn't so much to do with MutationObserver anymore.)","msgtype":"m.text"},"ts":1503051090000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"annevk: I’m pretty sure Tim’s case is that he is sending credentials. Otherwise he’d just have the server responding with the wildcard in the ACAO value, instead of an origin","msgtype":"m.text"},"ts":1503054284000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but I don’t understand why it’s not just a Chrome bug, regardless of whether the request includes credentials","msgtype":"m.text"},"ts":1503054335000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I mean, on the face of it at least, it seems like Chrome is ignoring the Vary: Origin header and not invalidating its cache when it should be","msgtype":"m.text"},"ts":1503054367000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: oh, that does seem like a more basic bug, yes","msgtype":"m.text"},"ts":1503054548000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah to be clear, as far as I understand, Tim’s issue isn’t about credentialed and non-credentialed requests and expecting the cache to be shared between those","msgtype":"m.text"},"ts":1503054661000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"his issue is sorta the oppositi","msgtype":"m.text"},"ts":1503054682000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"he described this problem to me a long time ago but I didn","msgtype":"m.text"},"ts":1503054717000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"didn’t know what to say other than that it sounded like a browser bug to meーnon-conformant behavior","msgtype":"m.text"},"ts":1503054750000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"JakeA: MDN is also a wiki... you can make changes directly","msgtype":"m.text"},"ts":1503063350000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: I guess I still just wish IDB had a bulk getter that didn't require contiguous ranges","msgtype":"m.text"},"ts":1503063496000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: So, I'm looking at https://github.com/w3c/preload/issues/95 and I think we need to say (in HTML) that `as` defines both the potential destination as well as the resulting request type","msgtype":"m.text"},"ts":1503064997000,"senderName":"yoav_","senderId":"yoav_@irc"},
{"content":{"body":"and wondered what's the best way to define destination=>type mapping","msgtype":"m.text"},"ts":1503065041000,"senderName":"yoav_","senderId":"yoav_@irc"},
{"content":{"body":"it's already \"defined\" in the non-normative note table in Fetch","msgtype":"m.text"},"ts":1503065063000,"senderName":"yoav_","senderId":"yoav_@irc"},
{"content":{"body":"but could probably benefit from a normative definition","msgtype":"m.text"},"ts":1503065080000,"senderName":"yoav_","senderId":"yoav_@irc"},
{"content":{"body":"where is request type set today?","msgtype":"m.text"},"ts":1503065096000,"senderName":"yoav_","senderId":"yoav_@irc"},
{"content":{"body":"yoav_: it's set by the places that create a request to fetch","msgtype":"m.text"},"ts":1503065757000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav_: there's not really a destination=>type mapping though, they are separate things","msgtype":"m.text"},"ts":1503065796000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: so if I want to define such mapping for preload, should I do that in the preload spec?","msgtype":"m.text"},"ts":1503067026000,"senderName":"yoav_","senderId":"yoav_@irc"},
{"content":{"body":"yoav_: I don't think it makes sense","msgtype":"m.text"},"ts":1503067264000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav_: they're intentionally separate","msgtype":"m.text"},"ts":1503067276000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: What I want to define is that for `<link rel=preload as=image>` the a","msgtype":"m.text"},"ts":1503067295000,"senderName":"yoav_","senderId":"yoav_@irc"},
{"content":{"body":"Accept headers will state supported image types","msgtype":"m.text"},"ts":1503067308000,"senderName":"yoav_","senderId":"yoav_@irc"},
{"content":{"body":"similarly to <img src>","msgtype":"m.text"},"ts":1503067314000,"senderName":"yoav_","senderId":"yoav_@irc"},
{"content":{"body":"that's currently vaguely defined in the preload spec, in the section that you said is a duplicate in https://github.com/w3c/preload/issues/95","msgtype":"m.text"},"ts":1503067368000,"senderName":"yoav_","senderId":"yoav_@irc"},
{"content":{"body":"smaug____, annevk: thank you!","msgtype":"m.text"},"ts":1503067590000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"yoav_: looking over the current setup I wonder if we can do away with type now that destination is a strict superset (I don't think it was before)","msgtype":"m.text"},"ts":1503067616000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav_: we'd have to define some shorthand for \"is a script destination\" though and update CSP and such","msgtype":"m.text"},"ts":1503067661000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that'd be good from my perspective","msgtype":"m.text"},"ts":1503067670000,"senderName":"yoav_","senderId":"yoav_@irc"},
{"content":{"body":"yoav_: (in particular, I think before media was a destination and types had audio and video)","msgtype":"m.text"},"ts":1503067684000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, and then we broke them up","msgtype":"m.text"},"ts":1503067701000,"senderName":"yoav_","senderId":"yoav_@irc"},
{"content":{"body":"yoav_: I think that's probably the best course of action; we'd need review from mkwst and some other folks and figure out who depends on the current setup, would have to change quite a few standards I think","msgtype":"m.text"},"ts":1503067766000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I do agree that caniuse.com etc probably does a better job than spec snapshots, but this is intended to be a compromise.","msgtype":"m.text"},"ts":1503077012000,"senderName":"Yuhong","senderId":"Yuhong@irc"},
{"content":{"body":"annevk: I think rbyers was also asking about spec style.","msgtype":"m.text"},"ts":1503078409000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Yeah, I just watched your \"how to write good specs\" talk, so am extra motivated to get better at using very precise style :-)","msgtype":"m.text"},"ts":1503078482000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"Domenic: oh, I haven't reviewed that section in a while, but it's probably okay","msgtype":"m.text"},"ts":1503078569000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It does seem OK","msgtype":"m.text"},"ts":1503078616000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"DOM still does a lot of foo's <b>bar</b> instead of foo's <a>bar</a>","msgtype":"m.text"},"ts":1503078634000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But it seems to use internal slots correctly and such","msgtype":"m.text"},"ts":1503078647000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Except for Event","msgtype":"m.text"},"ts":1503078668000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh, no, MutationRecord doesn't use slots properly","msgtype":"m.text"},"ts":1503078681000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Basically because MutationRecord should be a dictionary","msgtype":"m.text"},"ts":1503078693000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"And DOM has a problem in general with not having [[PlatformBrand]] in IDL","msgtype":"m.text"},"ts":1503078708000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rbyers: so yeah, MutationRecord being an interface instead of a dictionary seems not so good; otherwise things seem reasonable.","msgtype":"m.text"},"ts":1503078744000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Thanks!","msgtype":"m.text"},"ts":1503078926000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"Domenic: note that esprehn will argue strongly for not using dictionaries for such things as it's hard for Chrome to cope","msgtype":"m.text"},"ts":1503079179000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"For return values?","msgtype":"m.text"},"ts":1503079226000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1503079240000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's not really a return value, it's passed to a callback","msgtype":"m.text"},"ts":1503079281000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah, agree; records are a bad pattern that we shouldn't be using. :(","msgtype":"m.text"},"ts":1503079288000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: Same diff really.","msgtype":"m.text"},"ts":1503079297000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"smaug____: I thought you said https://bugzilla.mozilla.org/show_bug.cgi?id=825057 was something we supported","msgtype":"m.text"},"ts":1503079312000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Note that esprehn has left Chrome to work elsewhere in Google. :(","msgtype":"m.text"},"ts":1503079323000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: you agree with esprehn?","msgtype":"m.text"},"ts":1503079328000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"o_O","msgtype":"m.text"},"ts":1503079336000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I often do?","msgtype":"m.text"},"ts":1503079348000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: hmm, I thought data was working","msgtype":"m.text"},"ts":1503079358000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I do too, but for this issue","msgtype":"m.text"},"ts":1503079359000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, we shouldn't have done records, returning \"dumb data objects\" makes it user-observable if/when we change it to something with methods on it or with more complicated behavior.","msgtype":"m.text"},"ts":1503079403000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And passing to a callback is functionally identical to returning.","msgtype":"m.text"},"ts":1503079420000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: data: seems to work here","msgtype":"m.text"},"ts":1503079564000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"oh, silly me","msgtype":"m.text"},"ts":1503079585000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"that was inside data: page","msgtype":"m.text"},"ts":1503079594000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"not data: worker","msgtype":"m.text"},"ts":1503079597000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but I get PASS with the testcase there","msgtype":"m.text"},"ts":1503079660000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"If there are any other problems, I want to ask about them.","msgtype":"m.text"},"ts":1503080713000,"senderName":"Yuhong","senderId":"Yuhong@irc"},
{"content":{"body":"Has anyone started writing down the matching algorithm between request headers within Fetch and the request headers in a PUSH_PROMISE frame?","msgtype":"m.text"},"ts":1503087896000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"why do we only have one option for client-side scripting languages?","msgtype":"m.text"},"ts":1503100462000,"senderName":"luxio","senderId":"luxio@irc"}
]