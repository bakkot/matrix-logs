[
{"content":{"body":"Does anyone here know whether Unicode NFC removes U+0000 from input? I have a hard time figuring out how Unicode defines this...","msgtype":"m.text"},"ts":1452073649000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Context: https://github.com/w3c/web-platform-tests/commit/b9dfb676b3e67fa5cb6da2e757a5527d9c0bc0f3#commitcomment-15225993","msgtype":"m.text"},"ts":1452073815000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"GitHub disappoints: https://github.com/whatwg/html/pull/443/files","msgtype":"m.text"},"ts":1452075438000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Not sure it does.","msgtype":"m.text"},"ts":1452079007000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: https://github.com/w3c/web-platform-tests/commit/b9dfb676b3e67fa5cb6da2e757a5527d9c0bc0f3#commitcomment-15285524","msgtype":"m.text"},"ts":1452079164000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: haha","msgtype":"m.text"},"ts":1452079513000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: Chrome didn't test their ICU integration properly it seems","msgtype":"m.text"},"ts":1452079524000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Tests should continue to test U+0000 and \\x00 as there's always bugs everywhere","msgtype":"m.text"},"ts":1452079565000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I know I know. :)","msgtype":"m.text"},"ts":1452080216000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"TabAtkins, ping","msgtype":"m.text"},"ts":1452087690000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"if in WebIDL I have many things that inherit from the Foo interface, how can I refer to them generically? I'd like to say something like  \"the relevant Foo subclass\" or \"Foo subclasses.\"","msgtype":"m.text"},"ts":1452090910000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"context: https://w3c.github.io/sensors/#model","msgtype":"m.text"},"ts":1452091065000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I'd just go with Foo's subclasses, but then also call it the Foo class etc.","msgtype":"m.text"},"ts":1452091253000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: at some point IDL needs to be updated to change interface to class and introduce mixins for the other thing","msgtype":"m.text"},"ts":1452091274000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"In Servo we say Foo's derived interfaces.","msgtype":"m.text"},"ts":1452091290000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"DOM uses that terminology for Event it seems","msgtype":"m.text"},"ts":1452091312000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but it'll go away in due course","msgtype":"m.text"},"ts":1452091321000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, nox: ty both","msgtype":"m.text"},"ts":1452091433000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: Go away in favour of what?","msgtype":"m.text"},"ts":1452091460000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: class/subclass","msgtype":"m.text"},"ts":1452091472000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ok.","msgtype":"m.text"},"ts":1452091478000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"heycam wants some kind of complete plan for changing IDL syntax rather than just changing things incrementally","msgtype":"m.text"},"ts":1452091507000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: So he wants class Node { … }?","msgtype":"m.text"},"ts":1452091530000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"if by mid-2016 things still haven't moved I think I'll try to push for incremental changes","msgtype":"m.text"},"ts":1452091532000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: well, some of us want that","msgtype":"m.text"},"ts":1452091544000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I might have a time frame to move WebIDL to Bikeshed during Spring.","msgtype":"m.text"},"ts":1452091575000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"If that's wanted.","msgtype":"m.text"},"ts":1452091579000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"not sure about Node btw, might need a distinction between abstract classes and classes","msgtype":"m.text"},"ts":1452091583000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Nice, Ms2ger and I are upstreaming [Abstract] in Gecko.","msgtype":"m.text"},"ts":1452091601000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: you should ask heycam to be sure","msgtype":"m.text"},"ts":1452091603000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: I think IDL might actually want to use the same tools that ECMAScript uses, since everything should be pretty similar","msgtype":"m.text"},"ts":1452091638000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I just started converting to bs","msgtype":"m.text"},"ts":1452091681000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: Oh nice.","msgtype":"m.text"},"ts":1452091710000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I really don't want to deal with yet another tool","msgtype":"m.text"},"ts":1452091727000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Same.","msgtype":"m.text"},"ts":1452091969000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: what's the practical distinction between abstract classes and classes in the context of the Web?","msgtype":"m.text"},"ts":1452092811000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: the constructor of the abstract class throws?","msgtype":"m.text"},"ts":1452092850000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"No","msgtype":"m.text"},"ts":1452092863000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Most throws whether they are abstract or not.","msgtype":"m.text"},"ts":1452092865000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"But you never have an instance of Node that is just an instance of Node.","msgtype":"m.text"},"ts":1452092876000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I'm not sure how that is important, spec-wise.","msgtype":"m.text"},"ts":1452092888000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Ms2ger: ?","msgtype":"m.text"},"ts":1452093007000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"An abstract class is one that cannot be instantiated directly","msgtype":"m.text"},"ts":1452093039000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Web-exposed constructors are unrelated","msgtype":"m.text"},"ts":1452093078000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: Is it important for Web exposure to know that they aren't instantiated directly?","msgtype":"m.text"},"ts":1452093096000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Not really","msgtype":"m.text"},"ts":1452093167000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: yeah--I'm aware of this. My question was more akin to nox's. How does that manifest itself differently than the absence of a constructor extended attribute?","msgtype":"m.text"},"ts":1452093194000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"It doesn't","msgtype":"m.text"},"ts":1452093205000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"tobie: Even if you don't have a constructor,","msgtype":"m.text"},"ts":1452093213000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"you could have a Document.createNode.","msgtype":"m.text"},"ts":1452093222000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Or whatever else that would be defined to instantiate Node objects.","msgtype":"m.text"},"ts":1452093254000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Ms2ger: Should we make a new release of rust-mozjs, or shrug?","msgtype":"m.text"},"ts":1452093293000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Wrong channel.","msgtype":"m.text"},"ts":1452093298000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I guess","msgtype":"m.text"},"ts":1452093350000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I guess I was thinking that a class would always have a constructor","msgtype":"m.text"},"ts":1452093552000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I see","msgtype":"m.text"},"ts":1452093581000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: hey! I want to add a usage example for supports() as a feature detection mechanism","msgtype":"m.text"},"ts":1452093663000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"PRed it to https://github.com/w3c/preload/pull/39 but Ilya suggested that it may be better off at a generic location","msgtype":"m.text"},"ts":1452093683000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"Do you think it'd fit in DOM?","msgtype":"m.text"},"ts":1452093696000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: yeah, with some rewording","msgtype":"m.text"},"ts":1452093872000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1452093886000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"annevk: What would happen of ParentNode and things like that?","msgtype":"m.text"},"ts":1452094043000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: mixins","msgtype":"m.text"},"ts":1452094058000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: \"mixin ParentNode\"?","msgtype":"m.text"},"ts":1452094096000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: something like that","msgtype":"m.text"},"ts":1452094355000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: my thought was that classes always have constructors but you could explicitly opt in to [ThrowsWithoutSecret] or [ThrowsFromAuthorCode] or similar.","msgtype":"m.text"},"ts":1452094365000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: that could work too","msgtype":"m.text"},"ts":1452094391000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The important thing is that you can only create class instances via their constructors, even if you're a spec. A spec might just have to use language like \"construct-with-secret a new HTMLHRElement passing the parsed values as arguments\" or something...","msgtype":"m.text"},"ts":1452094473000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess there's not a lot of value in passing arguments to a secret-protected constructor vs. just calling a no-arg secret-protected constructor and then directly reaching in and setting internal slots. Unless you cared about inter-spec encapsulation/invariant preservation or similar.","msgtype":"m.text"},"ts":1452094642000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I dunno, still unsure on the value of changing IDL syntax. There's so much to do in just updating it for latest ES, un-splitting the type definitions, etc.","msgtype":"m.text"},"ts":1452094715000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Not too crazy about doing that work on a non-CC0 document though","msgtype":"m.text"},"ts":1452094726000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah I've told heycam the same","msgtype":"m.text"},"ts":1452094926000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: that might be a good reason not to convert to bikeshed, at least not until the licensing situation changes","msgtype":"m.text"},"ts":1452094961000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ok.","msgtype":"m.text"},"ts":1452095005000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: https://github.com/whatwg/dom/pull/144","msgtype":"m.text"},"ts":1452098002000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"Ms2ger: pong","msgtype":"m.text"},"ts":1452098948000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, I filed issues instead","msgtype":"m.text"},"ts":1452099011000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: Elaborating a bit on the issues would help. ^_^","msgtype":"m.text"},"ts":1452099063000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Like actually describing what problem you're having, and what you'd like me to do.","msgtype":"m.text"},"ts":1452099090000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, I started converting WebIDL to use bikeshed, and the first two issues I hit were missing references and missing highlighting for idl code","msgtype":"m.text"},"ts":1452099117000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"TabAtkins, also, there may be issues with links to ecmascript definitions","msgtype":"m.text"},"ts":1452099144000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Okay. Ref requests need to be filed against SpecRef.","msgtype":"m.text"},"ts":1452099158000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"https://github.com/Ms2ger/webidl/tree/bs is my wip","msgtype":"m.text"},"ts":1452099176000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"is about to head out","msgtype":"m.emote"},"ts":1452099184000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"\"highlighting for idl code\" - is this for IDL definition blocks (<pre class=idl>), or for some other arbitrary IDL code?","msgtype":"m.text"},"ts":1452099186000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The \"IDL informal syntax examples\" bit (which is probably hard), and the \"Code blocks\" bit at https://heycam.github.io/webidl/#conventions","msgtype":"m.text"},"ts":1452099293000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Okay. Hm. So pygments doesn't already have an IDL highlighter?","msgtype":"m.text"},"ts":1452099444000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It does, but not for an IDL that expands to Interface Description Language","msgtype":"m.text"},"ts":1452099488000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ah, kk.","msgtype":"m.text"},"ts":1452099646000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hm.  To make that work I'd need to write my own lexer/parser then.","msgtype":"m.text"},"ts":1452099659000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oh, and I ignored the grammar things","msgtype":"m.text"},"ts":1452099660000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"(I already need to write a new lexer/parser for CSS because the Pygments one is total shit, so learning how to do that is on my list already.)","msgtype":"m.text"},"ts":1452099689000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Anyway, I'm off for real","msgtype":"m.text"},"ts":1452099693000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"kk!","msgtype":"m.text"},"ts":1452099698000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And thanks!","msgtype":"m.text"},"ts":1452099724000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"is getting tempted to write another new spec gen tool","msgtype":"m.emote"},"ts":1452100275000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"because obviously that's what we need","msgtype":"m.text"},"ts":1452100278000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: I'll kill you.","msgtype":"m.text"},"ts":1452100537000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Specgen Thunderdome!","msgtype":"m.text"},"ts":1452101083000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"TabAtkins: plz no","msgtype":"m.text"},"ts":1452102221000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"TabAtkins: i won't  be very helpful to the web community if I'm dead","msgtype":"m.text"},"ts":1452102246000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"You won't be harmful either.","msgtype":"m.text"},"ts":1452102407000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And you won't have to deal with the pain of maintaining compat with Bikeshed's dfn metadata format as it expands.","msgtype":"m.text"},"ts":1452102427000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"you might like https://github.com/jsdom/webidl2js","msgtype":"m.text"},"ts":1452102429000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"Domenic: I missed the commit where you removed event handler scripts and therefore thought the compiled copy was not up-to-date","msgtype":"m.text"},"ts":1452102879000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ah yeah. those were short lived haha.","msgtype":"m.text"},"ts":1452102916000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Going to be such a pain to fix the bug adam found/spec async... i thought it'd be easy to just piggyback on defer, but no, no free lunch for me","msgtype":"m.text"},"ts":1452103050000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I also missed that the URL restrictions didn't apply to <script type=module src>, but that makes sense","msgtype":"m.text"},"ts":1452103071000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: he finds the best bugs","msgtype":"m.text"},"ts":1452103103000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: what do you mean URL restrictions didn't apply?","msgtype":"m.text"},"ts":1452103128000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: has to start with ../ / ./","msgtype":"m.text"},"ts":1452103149000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ah yeah.","msgtype":"m.text"},"ts":1452103166000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I wonder if the type attribute requirements are better worded in a different way. E.g., say something along the lines of the script element can be used to specify classic scripts, module scripts, and data blocks. Then say, that if it is a module script, the type attribute must be specified and its value must be an ASCII case-insensitive match for","msgtype":"m.text"},"ts":1452103644000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"module\".","msgtype":"m.text"},"ts":1452103644000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: currently that's not really required","msgtype":"m.text"},"ts":1452103662000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: same of course for classic scripts and data blocks","msgtype":"m.text"},"ts":1452103685000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah I am not sure on this whole author-facing section; it almost feels like it wants to be split into three subsections (like <input type>) or something","msgtype":"m.text"},"ts":1452103697000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: some of what is done there, such as a table with attribute combination overview, would not be a bad addition","msgtype":"m.text"},"ts":1452103761000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: not sure we need all the complexity of several subsections though","msgtype":"m.text"},"ts":1452103779000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think it would help. They'd be small subsections, not with their own headers and such.","msgtype":"m.text"},"ts":1452103805000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I was just about to say that I wouldn't mind a header above script state and prepare script...","msgtype":"m.text"},"ts":1452103904000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah...","msgtype":"m.text"},"ts":1452103918000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"Processing model\" perhaps","msgtype":"m.text"},"ts":1452103958000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah, though mint an ID along with it","msgtype":"m.text"},"ts":1452103978000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"otherwise all the existing ones get renumbered","msgtype":"m.text"},"ts":1452103993000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"haha yes true","msgtype":"m.text"},"ts":1452104053000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hi WHATWG, how can I apply for membership?","msgtype":"m.text"},"ts":1452117933000,"senderName":"dbkaplun","senderId":"dbkaplun@irc"},
{"content":{"body":"dbkaplun: I will accept membership requests and financial donations via P.O. box 4967, panama city FL, 32403","msgtype":"m.text"},"ts":1452121949000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"care of WHATWG registrar","msgtype":"m.text"},"ts":1452121968000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"JoWie: https://github.com/jsdom/webidl2js looks pretty cool","msgtype":"m.text"},"ts":1452122762000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://www.talater.com/chrome-is-listening/ \"Chrome Bugs Allow Sites to Listen to Your Private Conversations\"","msgtype":"m.text"},"ts":1452123808000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"「I reported this exploit to Google’s security team in private on September 13 [2014]. By September 19, their engineers have identified the bugs and suggested fixes. On September 24, a patch which fixes the exploit was ready, and three days later my find was nominated for Chromium’s Reward Panel... But then time passed, and the fix didn’t make it to users’ desktops. A month and a half later, I a","msgtype":"m.text"},"ts":1452123897000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"sked the team why the fix wasn’t released. Their answer was that there was an ongoing discussion within the Standards group, to agree on the correct behaviour - “Nothing is decided yet.” As of today, almost four months after learning about this issue, Google is still waiting for the Standards group to agree on the best course of action, and your browser is still vulnerable.」","msgtype":"m.text"},"ts":1452123903000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I wonder if that's still not been fixed","msgtype":"m.text"},"ts":1452123926000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"}
]