[
{"content":{"body":"aa: ping","msgtype":"m.text"},"ts":1190691480000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"aa: the second example in http://code.google.com/p/google-gears/wiki/HigherLevelDatabaseAPI uses |row| without declaring it","msgtype":"m.text"},"ts":1190691540000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: presumably the intent is var row = rows[i] inside the loop","msgtype":"m.text"},"ts":1190692980000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"i assume so, yeah","msgtype":"m.text"},"ts":1190693160000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I think it would be better to use a pseudo-array for the rows instead of a literal JS array, and especially so for the object representing an individual result row","msgtype":"m.text"},"ts":1190693280000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"but we want it to inherit whatever is on the Array prototype","msgtype":"m.text"},"ts":1190693281000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"most functions on the Array prototype are generic, so it's possible to require inheriting them without requiring being an array","msgtype":"m.text"},"ts":1190693340000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"sounds complex","msgtype":"m.text"},"ts":1190693341000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(\"generic\" in the sense that they are required to work on any JS object that has numeric properties and a property named \"length\")","msgtype":"m.text"},"ts":1190693400000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"(by ECMAScript)","msgtype":"m.text"},"ts":1190693401000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"other than increasing the complexity of the spec, what is gained by making it not an object?","msgtype":"m.text"},"ts":1190693402000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1190693403000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"not an Array","msgtype":"m.text"},"ts":1190693404000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's harder to do lazy computation tricks while literally subclassing JS array, and it's not clear if the few non-generic Array methods are desired here","msgtype":"m.text"},"ts":1190693460000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"in any case, it's more obvious to me for the objects representing a row, since you want both named and indexed access","msgtype":"m.text"},"ts":1190693461000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"the objects representing the row are just Object elements","msgtype":"m.text"},"ts":1190693462000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1190693463000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Object objects","msgtype":"m.text"},"ts":1190693464000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"as it were","msgtype":"m.text"},"ts":1190693465000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yes, I know","msgtype":"m.text"},"ts":1190693520000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"that leaves out any way to do index-based operations","msgtype":"m.text"},"ts":1190693521000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"just enumerate them","msgtype":"m.text"},"ts":1190693522000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(thought if they chose to implementations could still do lazy computation for the properties)","msgtype":"m.text"},"ts":1190693523000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"for (field in row) { ... }","msgtype":"m.text"},"ts":1190693524000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"for..in loops are somewhat inefficient in JS, and while you can do similar things to forEach, filter and map, being able to use functional programming style directly can be handy","msgtype":"m.text"},"ts":1190693580000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"i guess we can make them custom objects implementing interfaces specific for this case, but that basically just makes the spec complicated without an obvious gain as far as i can tell","msgtype":"m.text"},"ts":1190693581000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i don't really see what the use case is for non-named access to the fields","msgtype":"m.text"},"ts":1190693640000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(debugging being the exception, but it's not like performance is a high priority there)","msgtype":"m.text"},"ts":1190693760000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"indexed access is likely to be higher-performance than named access, even in a non-looping context","msgtype":"m.text"},"ts":1190694420000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"though probably harder to read, if you just did that directly","msgtype":"m.text"},"ts":1190694480000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"FWIW in WebKit we'd probably implement it as a custom object subclass anyway, if only to make conversion from SQLite API data types to JS types lazy","msgtype":"m.text"},"ts":1190694481000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"at which point is seems gratuitous not to offer indexed as well as named access","msgtype":"m.text"},"ts":1190694540000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"i'd expect it to be implemented as a subclass, yes","msgtype":"m.text"},"ts":1190694600000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i can make the object have non-enumerable numeric properties","msgtype":"m.text"},"ts":1190694601000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but i don't want to give it a \"length\" property","msgtype":"m.text"},"ts":1190694660000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or any other named properties for that matter (like namedItem())","msgtype":"m.text"},"ts":1190694661000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"since anything i add here is a column name you can't use","msgtype":"m.text"},"ts":1190694662000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well, it would be a column name that it would be inconvenient to use, at the very least (since you could always use function accessors for such a column, if there were a complete set)","msgtype":"m.text"},"ts":1190694780000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"that would be really confusing","msgtype":"m.text"},"ts":1190694840000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"non-enumerable numeric properties are somewhat less valuable without \"length\", since you can't use any array functions","msgtype":"m.text"},"ts":1190694841000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"i agree","msgtype":"m.text"},"ts":1190694842000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but \"length\" seems like something you'd want to call a column relatively often","msgtype":"m.text"},"ts":1190694843000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but it does seem like \"length\" might be a likely column name","msgtype":"m.text"},"ts":1190694844000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"we could put the number of fields on SQLResultSet, though that doesn't help you use generic methods","msgtype":"m.text"},"ts":1190694900000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I guess I'm sort of convinced that it's better not to have a special interface","msgtype":"m.text"},"ts":1190694901000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"it's a weird set of constraints","msgtype":"m.text"},"ts":1190694960000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i don't really know how best to handle it","msgtype":"m.text"},"ts":1190694961000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it looks like the only array methods that are not rebindable are toString and toLocaleString","msgtype":"m.text"},"ts":1190694962000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"so if you override those it's possible to inherit the array prototype without inheriting from the Array implementation is the \"class\" sense","msgtype":"m.text"},"ts":1190695020000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"(that's in reference to the rows array)","msgtype":"m.text"},"ts":1190695021000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"is that preferable to just implementing an Array internally?","msgtype":"m.text"},"ts":1190695080000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's distinguishable at the JS level, so it's not like the spec can punt on this","msgtype":"m.text"},"ts":1190695081000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"notes that having a variadic set of arguments on sqlExecute in the _middle_ of the arguments list is probably going to cause issues in non-JS languages","msgtype":"m.emote"},"ts":1190695140000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but you really want the callback at the end","msgtype":"m.text"},"ts":1190695141000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"maybe we should always require the array syntax","msgtype":"m.text"},"ts":1190695142000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"executeSql(['sql', arguments...], callback)","msgtype":"m.text"},"ts":1190695143000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"no wait","msgtype":"m.text"},"ts":1190695144000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it would be","msgtype":"m.text"},"ts":1190695145000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"executeSql([['sql', arguments...]], callback)","msgtype":"m.text"},"ts":1190695146000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"boy is that ugly","msgtype":"m.text"},"ts":1190695147000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1190695148000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"non-JS languages could certainly implement only the array version","msgtype":"m.text"},"ts":1190695200000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"you can't really express the other version well in the type system of any statically typed language","msgtype":"m.text"},"ts":1190695201000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"not without a buttload of overloads, no","msgtype":"m.text"},"ts":1190695260000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"how is it distinguishable at the JS level whether you subclass Array or just have its prototype in your prototype chain?","msgtype":"m.text"},"ts":1190695320000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"well if it's not, it doesn't matter what the spec says","msgtype":"m.text"},"ts":1190695321000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but as far as I can tell, an Array doesn't have a prototype chain","msgtype":"m.text"},"ts":1190695380000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so you could distinguish by checking to see if it had one","msgtype":"m.text"},"ts":1190695381000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"an Array instance does have a prototype chain","msgtype":"m.text"},"ts":1190695440000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"however anything that was either a subclass of Array or for other reasons had a prototype chain that included Array's prototype would have a longer prototype chain","msgtype":"m.text"},"ts":1190695441000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"your spec, if read literally, would possibly rule out a custom subclass of Array","msgtype":"m.text"},"ts":1190695500000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"why?","msgtype":"m.text"},"ts":1190695501000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"since it says \"must return a native array of objects\"","msgtype":"m.text"},"ts":1190695502000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"assuming you mean \"native\" in the sense of the ECMAScript spec","msgtype":"m.text"},"ts":1190695503000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"you can implement a native array however you like","msgtype":"m.text"},"ts":1190695560000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it does disallow a different prototype chain length, though, yes","msgtype":"m.text"},"ts":1190695561000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(var x = new Array(); x.__prototype__; returns 'undefined' in mozilla.)","msgtype":"m.text"},"ts":1190695562000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I think the property is named __proto__","msgtype":"m.text"},"ts":1190695620000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1190695621000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"checks that","msgtype":"m.emote"},"ts":1190695622000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"var x = new Array(); x.__proto__ == Array.prototype; returns true","msgtype":"m.text"},"ts":1190695680000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so yes","msgtype":"m.text"},"ts":1190695681000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so anyway that constraint seems of marginal value to JS coders and would make it hard to implement as a custom Array subclass in at least Gecko and WebKit afaik","msgtype":"m.text"},"ts":1190695682000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"(probably not impossible, but shouldn't simplicity of implementation trump simplicity of the spec?)","msgtype":"m.text"},"ts":1190695740000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"yes it should","msgtype":"m.text"},"ts":1190695741000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so what would you want it to say?","msgtype":"m.text"},"ts":1190695742000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I'm not sure","msgtype":"m.text"},"ts":1190695800000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"another issue with Array is that it has to allow adding arbitrary array properties and those must be reflected in \"length\" and in behavior of the array methods","msgtype":"m.text"},"ts":1190695801000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"which would make a completely custom implementation that used a different backing store even harder","msgtype":"m.text"},"ts":1190695802000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"yeah i'd be ok with making it immutable","msgtype":"m.text"},"ts":1190695860000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so you'd want something that had a length and an item() method?","msgtype":"m.text"},"ts":1190695861000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"we really need a way to make these objects enumerable in JS","msgtype":"m.text"},"ts":1190695862000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"same problem with NodeList, et al","msgtype":"m.text"},"ts":1190695863000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yes, NodeList's non-arrayness is inconvenient","msgtype":"m.text"},"ts":1190695920000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"thinking...","msgtype":"m.text"},"ts":1190695980000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I think giving the row list item(), a read-only length, indexed access via array syntax, and requiring that it have all normal methods of Array would make implementation not too hard and would give JS coders all they need","msgtype":"m.text"},"ts":1190695981000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"similar requirements could be placed on NodeList et al for convenience","msgtype":"m.text"},"ts":1190696040000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"the downside is you couldn't use any of the mutating array methods usefully since they all modify length","msgtype":"m.text"},"ts":1190696041000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"maybe it is better not to have them than to have non-working versions","msgtype":"m.text"},"ts":1190696042000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"yeah i'm not sure how to require that though","msgtype":"m.text"},"ts":1190696043000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'm really not sure how to handle errors with the array form of executeSql","msgtype":"m.text"},"ts":1190696160000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"doesn't really want to add it","msgtype":"m.emote"},"ts":1190696161000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"all methods available on Array instances except those that may modify any property of the array","msgtype":"m.text"},"ts":1190696162000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Hixie: the form that lets you pass an array of statements?","msgtype":"m.text"},"ts":1190696163000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1190696164000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it doesn't seem super essential","msgtype":"m.text"},"ts":1190696165000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"but you could say in case of error the callback is delivered after the first error, with only as the ResultSets for the successful statements up to the first failing one, plus the first failing one","msgtype":"m.text"},"ts":1190696220000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Hixie: should I send my comments about the \"native array\" requirement to the list? (you've explained away my concerns about the row objects themselves)","msgtype":"m.text"},"ts":1190700600000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Hixie, yt?","msgtype":"m.text"},"ts":1190711340000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"what's the point of the version parameter in the openDatabase() function?","msgtype":"m.text"},"ts":1190711341000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: lets you ensure the database is using the schema you expect","msgtype":"m.text"},"ts":1190711880000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"othermaciej: yeah, send mail, in case i forget","msgtype":"m.text"},"ts":1190712060000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ok, so authors can check the version number and then, if necessary, run some ALTER TABLE queries or whatever to upgrade to the right schema","msgtype":"m.text"},"ts":1190713680000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1190713740000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and if they do that while any other pages are using the db","msgtype":"m.text"},"ts":1190713741000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"those pages will start raising exceptions instead of corrupting the database","msgtype":"m.text"},"ts":1190713742000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: another possible coment I had was that maybe version should be an integer and only be allowed to go up, but I'm not really sure if that's better","msgtype":"m.text"},"ts":1190713800000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"actually I think it is good","msgtype":"m.text"},"ts":1190713920000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"since there is no atomic test-and-set of the version, there is no way right now to tell if you are overwriting a newer version with an older one","msgtype":"m.text"},"ts":1190713921000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"seems to artificially impose a constrain on the developer","msgtype":"m.text"},"ts":1190713922000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"we could add an atomic change","msgtype":"m.text"},"ts":1190713980000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it would have to be atomic test-and-set and you'd need to pass all versions you know how to upgrade","msgtype":"m.text"},"ts":1190714040000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"database.changeVersion(oldVersion, newVersion) -> bool (true if changed, false if old version didn't match)","msgtype":"m.text"},"ts":1190714041000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"no just get the old version, check that you like it and can upgrade it, and if you can call db.changeVersion(oldVersion, '1.4');","msgtype":"m.text"},"ts":1190714042000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it","msgtype":"m.text"},"ts":1190714100000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's not like it's gonna change frequently","msgtype":"m.text"},"ts":1190714101000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I guess you'd have to possibly loop in case of partial upgrade in between","msgtype":"m.text"},"ts":1190714102000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"the only clash you're likely to get is that the update was done for you","msgtype":"m.text"},"ts":1190714103000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"true, it's kind of an edge case","msgtype":"m.text"},"ts":1190714104000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"but it is nice to have a design that at least can possibly work in the odd case that you end up running v1, v2 and v3 schema code all at once","msgtype":"m.text"},"ts":1190714160000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"another issue - should you bump the version before or after the upgrade transaction?","msgtype":"m.text"},"ts":1190714220000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"seems like it has to be done as part of an exclusive transaction","msgtype":"m.text"},"ts":1190714221000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"i'd bump it twice","msgtype":"m.text"},"ts":1190714280000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but the version itself is not subject to the exclusive access lock","msgtype":"m.text"},"ts":1190714281000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"once to a temporary \"upgrading\" version, and once to the final version","msgtype":"m.text"},"ts":1190714282000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"makes sense","msgtype":"m.text"},"ts":1190714283000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"and do all the changes in one transaction","msgtype":"m.text"},"ts":1190714284000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you could bump to upgrading before the upgrade transaction, and to the final inside the transaction at the very end","msgtype":"m.text"},"ts":1190714285000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"(inside the transaction you'd have to retest that it's still the expected upgrading value)","msgtype":"m.text"},"ts":1190714340000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"and if you find the version is in an \"upgrading\" stage, you could wait a few seconds and if it doesn't change offer the user to \"fix the corruption\" somehow","msgtype":"m.text"},"ts":1190714341000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i was originally considering just extending SQL to have a SET VERSION statement","msgtype":"m.text"},"ts":1190714400000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but that seemed more trouble than it's worth","msgtype":"m.text"},"ts":1190714401000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it would certainly solve the atomic test and set problem (indeed, atomic test old version, perform upgrade and set new version)","msgtype":"m.text"},"ts":1190714580000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1190714581000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it would also solve the problem of the db being in an inconsistent state","msgtype":"m.text"},"ts":1190714582000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"as you'd be able to set the version in the same transaction as the changes","msgtype":"m.text"},"ts":1190714640000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and so a rollback would roll everything back","msgtype":"m.text"},"ts":1190714641000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's hard to do better than only being able to change version inside a transaction","msgtype":"m.text"},"ts":1190714642000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1190714643000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but i fear it puts too much burden on the implementors","msgtype":"m.text"},"ts":1190714644000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"they'd all have to hack sqlite to do it","msgtype":"m.text"},"ts":1190714645000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or use a dedicated table with a reserved name","msgtype":"m.text"},"ts":1190714700000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"that's rather heavy-weight","msgtype":"m.text"},"ts":1190714820000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and you have to do things like prevent it from being dropped, etc","msgtype":"m.text"},"ts":1190714821000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the biggest problem I see will be that different UAs will use different DBs on the backend.  Mozilla and Safari will probably use SQLLite, but IE will probably use some MS database, and there will be differences in the supported SQL features","msgtype":"m.text"},"ts":1190714880000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"we'll have to define the sql subset before the latter happens","msgtype":"m.text"},"ts":1190715000000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"at some point the query language has to be specced","msgtype":"m.text"},"ts":1190715001000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"yeah, add SQL5 to your todo list :-)","msgtype":"m.text"},"ts":1190715060000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"some relatively easilly defined subset of SQL92 might be sufficient","msgtype":"m.text"},"ts":1190715120000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"i'll have to get a copy of SQL9x","msgtype":"m.text"},"ts":1190715121000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"why not SQL:2006 or at least 2003?","msgtype":"m.text"},"ts":1190715180000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"i've updated the spec to have a locking changeVersion()","msgtype":"m.text"},"ts":1190715181000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Lachy: whichever is latest is fine by me. i haven't been able to find _any_ version of that spec.","msgtype":"m.text"},"ts":1190715182000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"SQL 2006 is ISO/IEC 9075-14:2006 (according to wikipedia)","msgtype":"m.text"},"ts":1190715183000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1190715240000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ISO specs aren't free","msgtype":"m.text"},"ts":1190715241000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"is SQL one of those standards that are kept secret in Geneva?","msgtype":"m.text"},"ts":1190715242000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"http://en.wikipedia.org/wiki/SQL#Standardization","msgtype":"m.text"},"ts":1190715243000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"othermaciej: the only issue really with changeVersion() now, afaict, is that if the script somehow dies without setting the version properly, the db can be left in a messy state","msgtype":"m.text"},"ts":1190715244000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"othermaciej: but that could happen whatever do, really","msgtype":"m.text"},"ts":1190715245000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"whoa. they've added XML to SQL","msgtype":"m.text"},"ts":1190715246000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Do ISO specs require interop before becoming standards?","msgtype":"m.text"},"ts":1190715360000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Hixie: well, atomic commit/rollback would reduce the likelihood if the version change were part of the transaction","msgtype":"m.text"},"ts":1190715361000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Lachy: I do not believe so, as a general rule","msgtype":"m.text"},"ts":1190715362000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I don't think they even require op, let alone interop","msgtype":"m.text"},"ts":1190715363000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"but I think individual technical committees can set their own rules","msgtype":"m.text"},"ts":1190715420000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"obviously SQL needs to be fully AJAX compliant","msgtype":"m.text"},"ts":1190715421000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Hixie, I think there may be a problem with the way .insertId is defined.","msgtype":"m.text"},"ts":1190715660000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"mapping from SQL types to JS types will also need defining at some point","msgtype":"m.text"},"ts":1190715661000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"it says \"If the statement inserted multiple rows, the ID of the last row must be the one returned\"","msgtype":"m.text"},"ts":1190715662000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"not sure how many non-obvious cases there will be","msgtype":"m.text"},"ts":1190715663000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"but I was reading in the MySQL docs that the LAST_INSERT_ID returns the id of the first row","msgtype":"m.text"},"ts":1190715720000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"(I know it's unintuitive, but the MySQL docs said there was a reason for it)","msgtype":"m.text"},"ts":1190715721000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: what does sqlite do?","msgtype":"m.text"},"ts":1190716080000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"othermaciej: yeah, a transaction would make it easier to do the right thing, but i doubt that would actually result in many more cases of the right thing. ;-)","msgtype":"m.text"},"ts":1190716140000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, I tried looking for that, but the sqllite docs were very unclear","msgtype":"m.text"},"ts":1190716200000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"see http://nl.php.net/manual/en/function.sqlite-last-insert-rowid.php","msgtype":"m.text"},"ts":1190716201000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"for some reason I'm on wanadoo and freenode, this can't last long","msgtype":"m.text"},"ts":1190716202000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: I'll try to get you implementation feedback on the versioning thing","msgtype":"m.text"},"ts":1190716203000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: k","msgtype":"m.text"},"ts":1190716204000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"othermaciej: in the meantime, we have a readonly version and a method changeVersion(old, new)","msgtype":"m.text"},"ts":1190716260000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(and the rest of it)","msgtype":"m.text"},"ts":1190716261000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"weird. when Gecko adds Zapfino ligature support, WebKit regresses it","msgtype":"m.text"},"ts":1190718480000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"did WebKit ever have it?","msgtype":"m.text"},"ts":1190720880000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"as far as I know, our fast code path never supported ligatures or other contextual forms","msgtype":"m.text"},"ts":1190720881000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"but the code paths that require shaping do","msgtype":"m.text"},"ts":1190720882000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: http://weblogs.mozillazine.org/roc/archives/2007/09/textalicious.html look different (better) in Safari 2.0.4 than it does in the latest WebKit nightly","msgtype":"m.text"},"ts":1190724840000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"s/look/looks/","msgtype":"m.text"},"ts":1190724841000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"with a dualcore CPU, I'd like to get my share of the shaping eyecandy for English as well. ","msgtype":"m.text"},"ts":1190725020000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"executeSql('sql', arguments).addCallback(callback)","msgtype":"m.text"},"ts":1190726100000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(to avoid callback argument after varargs)","msgtype":"m.text"},"ts":1190726220000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"or steal more from Twisted and have","msgtype":"m.text"},"ts":1190726221000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"executeSql('sql', arguments).addCallback( function (res) { return executeSql('sql2', res.rows[0].id) }","msgtype":"m.text"},"ts":1190726222000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":").addCallback( function (res) { alert('Okay') }","msgtype":"m.text"},"ts":1190726223000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":").addErrback( function (err) { alert('Oops') }","msgtype":"m.text"},"ts":1190726224000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":")","msgtype":"m.text"},"ts":1190726225000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"wonders why he keeps losing newlines when pasting into IRC","msgtype":"m.emote"},"ts":1190726226000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Argh, it's harder doing APNG tests now that I've got one which segfaults Opera","msgtype":"m.text"},"ts":1190738880000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: file a bug, please","msgtype":"m.text"},"ts":1190739120000,"senderName":"virtuelv","senderId":"virtuelv@irc"},
{"content":{"body":"(I know you will, but I'd be interested in knowing the bug number)","msgtype":"m.text"},"ts":1190739121000,"senderName":"virtuelv","senderId":"virtuelv@irc"},
{"content":{"body":"virtuelv: 287173","msgtype":"m.text"},"ts":1190739300000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"ty","msgtype":"m.text"},"ts":1190739360000,"senderName":"virtuelv","senderId":"virtuelv@irc"},
{"content":{"body":"removes it from his test-case page for now","msgtype":"m.emote"},"ts":1190739361000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: out of curiosity: Which tools do you use for APNG?","msgtype":"m.text"},"ts":1190739780000,"senderName":"virtuelv","senderId":"virtuelv@irc"},
{"content":{"body":"Perl :-)","msgtype":"m.text"},"ts":1190739840000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"at least for creating APNG test cases","msgtype":"m.text"},"ts":1190739900000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I used the Firefox APNG Editor extension for http://philip.html5.org/demos/apng/sierpinski.png (with canvas code to draw each frame)","msgtype":"m.text"},"ts":1190739960000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"hsivonen: always using shaping APIs can cause overall page loading (not just text drawing) to be 20-25% slower","msgtype":"m.text"},"ts":1190741040000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"hsivonen: we haven't yet come up with a way to do contextual forms as fast as we do normal latin text, but we're certainly thinking about it","msgtype":"m.text"},"ts":1190741160000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"http://philip.html5.org/tests/apng/ - now with more tests","msgtype":"m.text"},"ts":1190742540000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I think my use of the alt attribute is non-conforming, but I'm not terribly concerned about how this page works in non-graphical UAs","msgtype":"m.text"},"ts":1190742541000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: things like alt=\"FAIL\" is ok for test cases :)","msgtype":"m.text"},"ts":1190744280000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"test cases don't need to comply with document conformance criteria from the specs they are using or testing","msgtype":"m.text"},"ts":1190744340000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Philip`: your .addCallback() idea would i'm sure result in people taking a reference to that object and then doing really evil things with it","msgtype":"m.text"},"ts":1190750220000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"<Hixie> Philip`: your .addCallback() idea would i'm sure result in people taking a reference to that object and then doing really evil things with it","msgtype":"m.text"},"ts":1190750340000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"In Twisted, the asynchronous methods return a Deferred (which indicates either a result or a soon-to-be-a-result), and you can keep it forever and do addCallback whenever, and the callback is either called immediately (if the Deferred has the result already) or later (when the result becomes available)","msgtype":"m.text"},"ts":1190750700000,"senderName":"Philip`_","senderId":"Philip`_@irc"},
{"content":{"body":"so there's not really anything evil you can do with the object","msgtype":"m.text"},"ts":1190750701000,"senderName":"Philip`_","senderId":"Philip`_@irc"},
{"content":{"body":"you can keep the transaction open forever","msgtype":"m.text"},"ts":1190750760000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"e.g. if you don't add a callback it'll never close","msgtype":"m.text"},"ts":1190750820000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I guess it's harder in JavaScript since GC isn't immediate, so you'd have to keep all the result data just in case someone's still got a reference to the deferred result","msgtype":"m.text"},"ts":1190750821000,"senderName":"Philip`_","senderId":"Philip`_@irc"},
{"content":{"body":"Ah, transactions sound harder too :-)","msgtype":"m.text"},"ts":1190750822000,"senderName":"Philip`_","senderId":"Philip`_@irc"},
{"content":{"body":"i like the api concept though","msgtype":"m.text"},"ts":1190750880000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"any preference as to which object the app cache api is on?","msgtype":"m.text"},"ts":1190759220000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"window? window.navigator?","msgtype":"m.text"},"ts":1190759221000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"window.cache?","msgtype":"m.text"},"ts":1190759280000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"isn't the window.navigator object already overloaded with all kinds of crap?","msgtype":"m.text"},"ts":1190759400000,"senderName":"virtuelv","senderId":"virtuelv@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1190759401000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so's window","msgtype":"m.text"},"ts":1190759402000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"heh, yeah","msgtype":"m.text"},"ts":1190759403000,"senderName":"virtuelv","senderId":"virtuelv@irc"},
{"content":{"body":"window.cache sounds more descriptive","msgtype":"m.text"},"ts":1190759460000,"senderName":"virtuelv","senderId":"virtuelv@irc"},
{"content":{"body":"but it adds yet another singleton","msgtype":"m.text"},"ts":1190759461000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"which is expensive","msgtype":"m.text"},"ts":1190759462000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"this is, in a nutshell, the misunderstanding that the pro-required-alt camp is stumbling upon, i think:","msgtype":"m.text"},"ts":1190760240000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"The issue is not to do so much with what the AT UA can do with an image","msgtype":"m.text"},"ts":1190760241000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"without the alt attribute, it is about what the UA cannot do.","msgtype":"m.text"},"ts":1190760242000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"-- http://html4all.org/pipermail/list_html4all.org/2007-September/000401.html","msgtype":"m.text"},"ts":1190760243000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"It cannot reliably differentiate between an important image without an alt","msgtype":"m.text"},"ts":1190760300000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"attribute and an unimportant image.\"","msgtype":"m.text"},"ts":1190760301000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(the problem being that _regardless_ of what the spec says, a UA cannot _reliably_ differentiate between an important image and an unimportant image)","msgtype":"m.text"},"ts":1190760302000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(as henri later points out in http://html4all.org/pipermail/list_html4all.org/2007-September/000409.html)","msgtype":"m.text"},"ts":1190760360000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"wow that thread is sad","msgtype":"m.text"},"ts":1190760600000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"henri explains the problem: http://html4all.org/pipermail/list_html4all.org/2007-September/000409.html","msgtype":"m.text"},"ts":1190760601000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"steven completely blanks on understanding it: http://html4all.org/pipermail/list_html4all.org/2007-September/000410.html","msgtype":"m.text"},"ts":1190760602000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"henri explains it again: http://html4all.org/pipermail/list_html4all.org/2007-September/000411.html","msgtype":"m.text"},"ts":1190760603000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"steven doesn't even reply: http://html4all.org/pipermail/list_html4all.org/2007-September/000412.html","msgtype":"m.text"},"ts":1190760660000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"good lord","msgtype":"m.text"},"ts":1190760661000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"good lord indeed","msgtype":"m.text"},"ts":1190760720000,"senderName":"kingryan","senderId":"kingryan@irc"},
{"content":{"body":"gave up awhile ago","msgtype":"m.emote"},"ts":1190760780000,"senderName":"kingryan","senderId":"kingryan@irc"},
{"content":{"body":"one reason to use window.navigator is that window.navigator.onLine is already there","msgtype":"m.text"},"ts":1190760960000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"http://html4all.org/pipermail/list_html4all.org/2007-September/000416.html - \"Moved to the public list\" - aha, it does sound like they have a new private list for the cabal","msgtype":"m.text"},"ts":1190761020000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"HAHAHAHAHA","msgtype":"m.text"},"ts":1190761021000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i totally missed that","msgtype":"m.text"},"ts":1190761022000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's awesome","msgtype":"m.text"},"ts":1190761023000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"html4all?","msgtype":"m.text"},"ts":1190761440000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I guess they worked out how to turn on the non-public flag this time","msgtype":"m.text"},"ts":1190761560000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"i read that as \"Moved [from private email]\", but i guess i'm not paraniod enough...","msgtype":"m.text"},"ts":1190761620000,"senderName":"tndH","senderId":"tndH@irc"},
{"content":{"body":"(Note to whoever's reading logs: I think the old public archives mentioned the list admin password at some point - you should probably make sure it's been changed)","msgtype":"m.text"},"ts":1190761621000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"((This is a much easier way of communicating than email))","msgtype":"m.text"},"ts":1190761680000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: especially as it allows us to be quoted without context while quoting a whole response","msgtype":"m.text"},"ts":1190761800000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hi mom!","msgtype":"m.text"},"ts":1190761801000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"waves","msgtype":"m.emote"},"ts":1190761802000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"realises what Dashiva is on about","msgtype":"m.emote"},"ts":1190761803000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hoo boy: \"why not develop a validator that looks for and fails the page if it has bogus alt? using heauristics, that shouldn't be so hard should it?\"","msgtype":"m.text"},"ts":1190761920000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"it baffles me how much they can miss the point","msgtype":"m.text"},"ts":1190761980000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"tndH: If it was, why would he explicitly say \"the public list\" instead of \"the list\"?","msgtype":"m.text"},"ts":1190762040000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"point. :)","msgtype":"m.text"},"ts":1190762100000,"senderName":"tndH","senderId":"tndH@irc"},
{"content":{"body":"Paranoia is more fun anyway, even if it's wrong - they can always correct us easily by saying there's only that one list :-)","msgtype":"m.text"},"ts":1190762101000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"i'm sure they'll cc us and their private list soon enough","msgtype":"m.text"},"ts":1190762160000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Philip`: Paranoia would suggest it was a cover-up","msgtype":"m.text"},"ts":1190762220000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"Like with our secret invite-only IRC channel?","msgtype":"m.text"},"ts":1190762520000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"ok i still don't have a good answer as to what we do with <?xml-stylesheet?>s and offline app caches","msgtype":"m.text"},"ts":1190763000000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"since they come before the application=\"\" is seen","msgtype":"m.text"},"ts":1190763001000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"If it ought to come before everything, there's <!DOCTYPE html PUBLIC \"application\" \"foo\">","msgtype":"m.text"},"ts":1190763360000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(That is probably not a serious suggestion)","msgtype":"m.text"},"ts":1190763361000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1190763420000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that would be _hi_larious","msgtype":"m.text"},"ts":1190763421000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"You mean mlarious","msgtype":"m.text"},"ts":1190763422000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"\"hi everyone, we're co-opting the DOCTYPE tag, hope y'all are ok with that\"","msgtype":"m.text"},"ts":1190763423000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it might even take attention away from the alt text stuff!","msgtype":"m.text"},"ts":1190763480000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Look over there, a <div>ersion!","msgtype":"m.text"},"ts":1190763481000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"http://html4all.org/pipermail/list_html4all.org/2007-September/000415.html - it doesn't even need to be handled by the browser - just create a font with ligatures for sequences of characters like \"color\" so it gets rendered as \"colour\"","msgtype":"m.text"},"ts":1190763840000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"it needs markup-level support because you'd need to do context-sensitive substitution in all but the most trivial of cases","msgtype":"m.text"},"ts":1190764020000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"wonders what \"Content-Type: image/jpeg; charset=utf-8\" means","msgtype":"m.emote"},"ts":1190764740000,"senderName":"Philip`","senderId":"Philip`@irc"}
]