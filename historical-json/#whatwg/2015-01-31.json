[
{"content":{"body":"smaug____: http://dev.w3.org/csswg/css-forms/ Feel free to comment on www-style. ^_^","msgtype":"m.text"},"ts":1422662917000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: jeeez, that + @extends make this quite a day for you. Although presumably the work of the last few weeks.","msgtype":"m.text"},"ts":1422663363000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"Any elements with class=my-button receive the same styling as actual button elements, as if they had a tagname of button in addition to their normal tagname.\" woah!","msgtype":"m.text"},"ts":1422663429000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Things often clump in time.","msgtype":"m.text"},"ts":1422663434000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"that clause is super useful for custom elements","msgtype":"m.text"},"ts":1422663466000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"custom-button { @extends button; }","msgtype":"m.text"},"ts":1422663473000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yup yup.","msgtype":"m.text"},"ts":1422663521000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: @fosdem. I'll try to look at that tomorrow","msgtype":"m.text"},"ts":1422664096000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"hmm, \"The source file for the page css-forms/Overview.html has recently been updated and automatic generation is pending.\"","msgtype":"m.text"},"ts":1422664109000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Give it a minute or two.","msgtype":"m.text"},"ts":1422664120000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"background is btw interesting case, if it includes bg image","msgtype":"m.text"},"ts":1422664247000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"IIRC gecko is the only one which support bg image for select popup","msgtype":"m.text"},"ts":1422664271000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and it had to limit how the popup is shown to prevent popup to cover the whole screen","msgtype":"m.text"},"ts":1422664310000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"TabAtkins: Domenic: pointer to @extends?","msgtype":"m.text"},"ts":1422695612000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"I don't like your API. It creates too much objects. Let me wrap it in a polyfill.\" Yes, that will make things more efficient","msgtype":"m.text"},"ts":1422696251000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://tabatkins.github.io/specs/css-extend-rule/","msgtype":"m.text"},"ts":1422696857000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: ta!","msgtype":"m.text"},"ts":1422697220000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: do you know why the rationale in the introduction is not applicable to using .serious.error instead?","msgtype":"m.text"},"ts":1422697290000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"files https://github.com/tabatkins/specs/issues/38","msgtype":"m.emote"},"ts":1422697635000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't know","msgtype":"m.text"},"ts":1422698237000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"wonders if the spec defines that the selected files are emptied when changing input@type","msgtype":"m.emote"},"ts":1422700594000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I don't really follow how @extend would influence querySelector()","msgtype":"m.text"},"ts":1422706617000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Also, what's the object model story?","msgtype":"m.text"},"ts":1422706692000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"In this talk: Acid tests","msgtype":"m.text"},"ts":1422714748000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Also, namespaces. Namespaces everywhere.","msgtype":"m.text"},"ts":1422714970000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"And XPath","msgtype":"m.text"},"ts":1422715027000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: Are you sure you didn't slip into a nightmare?","msgtype":"m.text"},"ts":1422715206000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"No","msgtype":"m.text"},"ts":1422715243000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Aren't you around here?","msgtype":"m.text"},"ts":1422715268000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"No","msgtype":"m.text"},"ts":1422715412000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I sort of forgot about i","msgtype":"m.text"},"ts":1422715418000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"t","msgtype":"m.text"},"ts":1422715420000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1422715436000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Anyone got any idea why, given six web fonts with similar definitions, only two would load in IE8?","msgtype":"m.text"},"ts":1422715771000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"\"IE\"","msgtype":"m.text"},"ts":1422715779000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Like, just aren't loaded. At all.","msgtype":"m.text"},"ts":1422715783000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"That's almost as obscure as my question, which is basically \"why is Chrome not passing my wptrunner tests when it's basially using the same code as Gecko, which does pass\"","msgtype":"m.text"},"ts":1422715893000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Bah, you guys are smart!","msgtype":"m.text"},"ts":1422715928000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"And now I reload and they all load.","msgtype":"m.text"},"ts":1422715988000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"WHAT THE ACTUAL HELL.","msgtype":"m.text"},"ts":1422715991000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"flips IE","msgtype":"m.emote"},"ts":1422715993000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(I bet this is some CORE-44944-like bug)","msgtype":"m.text"},"ts":1422716006000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Oh joy. time.sleep(1) => tests pass","msgtype":"m.text"},"ts":1422716188000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1422716272000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hah","msgtype":"m.text"},"ts":1422716886000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"It fails if the window doesn't have focus","msgtype":"m.text"},"ts":1422716893000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"https://code.google.com/p/chromedriver/issues/detail?id=388","msgtype":"m.text"},"ts":1422717025000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: There's an issue in the spec about whether @extend should affect querySelector or not.  I'm undecided so far.","msgtype":"m.text"},"ts":1422720132000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: What's your concern about the object model?","msgtype":"m.text"},"ts":1422720139000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I don't see how it could affect querySelector()","msgtype":"m.text"},"ts":1422720361000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: just wondering what it looks like","msgtype":"m.text"},"ts":1422720367000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: if it flattens or something else","msgtype":"m.text"},"ts":1422720373000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: (I saw the open issue, just didn't see how it would possibly have an impact)","msgtype":"m.text"},"ts":1422720392000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"By... affecting what matches the selector?","msgtype":"m.text"},"ts":1422720405000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Such that a querySelector('.error') also returns .serious-error elements?","msgtype":"m.text"},"ts":1422720418000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"For OM, the rules just gain a .cssRules attribute, which @extend goes into.","msgtype":"m.text"},"ts":1422720441000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Why would .error match .serious-error if .serious-error copies styles from .error?","msgtype":"m.text"},"ts":1422720536000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Seems weird","msgtype":"m.text"},"ts":1422720542000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Because you're reading the spec wrong, I guess?  .serious-error elements gain the qualities necessary to match .error selectors, for the purpose of matching selectors.","msgtype":"m.text"},"ts":1422720808000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So when you write a selector like \".error { color: red; }\", .serious-error elements are targeted as well.","msgtype":"m.text"},"ts":1422720842000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So it makes at least some sense that querySelector(\".error\") would return .serious-error as well. Dunno if it's good in practice.","msgtype":"m.text"},"ts":1422720862000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The way that rule reads to me is like a mixin","msgtype":"m.text"},"ts":1422721020000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Which sort of follows from it being part of the block rather than being part of the selector","msgtype":"m.text"},"ts":1422721101000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: @extend is similar to @mixin, yes.  But they're not the same.","msgtype":"m.text"},"ts":1422721297000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If you ignore some fiddly details, they're functionally the same, applied in an inverse manner.","msgtype":"m.text"},"ts":1422721323000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But those fiddly details are important. ^_^","msgtype":"m.text"},"ts":1422721330000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And usability-wise they're very different once you get away from the trivial examples.","msgtype":"m.text"},"ts":1422721362000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"For example, you can create a whole suite of rules for styling .error in various situations.  With @extend, your .serious-error elements can opt into the entire thing with a single rule.  With @mixin, not so much.","msgtype":"m.text"},"ts":1422721401000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Technically possible to do so, by using nesting rules inside the @mixin block, but not a good practice or very common.)","msgtype":"m.text"},"ts":1422721424000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yeah I guess, and @extend is across all stylesheet boundaries (includes UA stylesheets)","msgtype":"m.text"},"ts":1422721432000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1422721437000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I don't think we would want layout to affect the results of querySelector() though","msgtype":"m.text"},"ts":1422721473000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"There's no layout involved?","msgtype":"m.text"},"ts":1422721519000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Unless you're using \"layout\" in a very broad and incorrect way.","msgtype":"m.text"},"ts":1422721531000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"@extend affects the cascade only.","msgtype":"m.text"},"ts":1422721556000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I love using layout in an incorrect way","msgtype":"m.text"},"ts":1422721578000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"^_^","msgtype":"m.text"},"ts":1422721624000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But yeah, having querySelector() depend on stylesheets in general","msgtype":"m.text"},"ts":1422721629000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, I was unsure if that was a good idea.  Or if it was a useful idea in general - I could see it being pretty confusing.","msgtype":"m.text"},"ts":1422721656000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Even if the technical details were fine.","msgtype":"m.text"},"ts":1422721664000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'm sure we could explain it, somehow (though would require synchronous cascade in some cases), but I'm not sure it'd be pretty","msgtype":"m.text"},"ts":1422721689000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Though if we want to do style isolation a la shadow trees as style primitive, maybe we need it?","msgtype":"m.text"},"ts":1422721711000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Still unsure that makes sense as a style primitive, rather than as a DOM API.","msgtype":"m.text"},"ts":1422721797000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Basically I'm vaguely uncomfortable with any attempt to do isolation/encapsulation stuff with a big global API like style.  I think we need something more direct and local.","msgtype":"m.text"},"ts":1422721877000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: any documentation for -webkit-tap-highlight-color anywhere btw?","msgtype":"m.text"},"ts":1422722221000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Doubt it!","msgtype":"m.text"},"ts":1422722228000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Just things like http://css-infos.net/property/-webkit-tap-highlight-color","msgtype":"m.text"},"ts":1422722264000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Google does not even return that for me","msgtype":"m.text"},"ts":1422722856000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I literally just googled for webkit-tap-highlight-color","msgtype":"m.text"},"ts":1422723478000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oh doh, the leading hyphen is a problem","msgtype":"m.text"},"ts":1422728084000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You'd think Google knows about CSS properties :p","msgtype":"m.text"},"ts":1422728103000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if they started adding heuristics to figure out if you meant \"negate this word\" or not, it would probably get even harder to use","msgtype":"m.text"},"ts":1422728162000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"All they need to do is recognize it as a word","msgtype":"m.text"},"ts":1422728242000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But -word already has a meaning - \"exclude matches with word\".","msgtype":"m.text"},"ts":1422728265000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"but sometimes it's a word and sometimes it's an operator","msgtype":"m.text"},"ts":1422728267000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"so you need inconsistent rules to figure out which is which","msgtype":"m.text"},"ts":1422728280000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I meant that you'd use --webkit-tap-highlight-color to exclude it","msgtype":"m.text"},"ts":1422728294000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if the word is quoted i think that should ideally work as expected","msgtype":"m.text"},"ts":1422728325000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"how woudl it know that -webkit-tap-highlight-color didn't mean \"exclude results with webkit-tap-highlight-color\"?","msgtype":"m.text"},"ts":1422728328000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(but it doesn't)","msgtype":"m.text"},"ts":1422728337000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"TabAtkins: because it knows the latter is not a word","msgtype":"m.text"},"ts":1422728344000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"How does it know that?","msgtype":"m.text"},"ts":1422728353000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: usage patterns, presumably","msgtype":"m.text"},"ts":1422728369000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And when *I* need to search for something and exclude \"webkit-foo\", how am I to know I need to double-negate it?","msgtype":"m.text"},"ts":1422728557000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"-webkit-foo\" << don't negate, -\"-webkit-foo\" << negate -webkit-foo","msgtype":"m.text"},"ts":1422728596000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"probably the most predictable way","msgtype":"m.text"},"ts":1422728601000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: Yeah, that uses well-known and consistent grammar.","msgtype":"m.text"},"ts":1422728639000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: if you want literals, use quotes","msgtype":"m.text"},"ts":1422730061000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I know that.","msgtype":"m.text"},"ts":1422730079000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You're the one saying otherwise. ^_^","msgtype":"m.text"},"ts":1422730085000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: no, I'm saying it should be better about words","msgtype":"m.text"},"ts":1422730117000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I thought that quotes on Google didn't actually work anymore","msgtype":"m.text"},"ts":1422734064000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Although I might be wrong. Doesn't seem impossible to have an algorithm where if -x results in nothing, you try the query again as if quoted","msgtype":"m.text"},"ts":1422734137000,"senderName":"jgraham","senderId":"jgraham@irc"}
]