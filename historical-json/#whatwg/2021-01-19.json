[
{"content":{"body":"annevk: w.r.t https://github.com/whatwg/html/pull/6287#issuecomment-762646151, see https://github.com/whatwg/html/issues/6247#issuecomment-753997698","msgtype":"m.text"},"ts":1611050414000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"I might have done a poor job explaining, but although \"string/File-sourced entries\" include programmatic inputs (such as some FACE inputs), \"FormData-sourced entries\" are all programmatic","msgtype":"m.text"},"ts":1611050445000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"so my initial idea was to keep things as they were in the spec, other than normalizing FormData-sourced entries for urlencoded and text/plain since Firefox and Chrome already do that","msgtype":"m.text"},"ts":1611050571000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"andreubotella: I might not have been clear enough either, I think I meant to not normalize them at all","msgtype":"m.text"},"ts":1611050808000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"andreubotella: it's kinda moot without implementer input though and I suspect it might be hard to get a quick take from someone given all the intricacies","msgtype":"m.text"},"ts":1611050862000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: true","msgtype":"m.text"},"ts":1611050876000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"andreubotella: I think you had a summary comment somewhere about the current state of things in implementations, perhaps that can be updated with the proposed state and then we get feedback on that?","msgtype":"m.text"},"ts":1611050951000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"andreubotella: pretty sure I can reach someone from Chrome; I think for Mozilla it doesn't matter much as long as we end up with interop","msgtype":"m.text"},"ts":1611050980000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: turns out that for Firefox, doing it some other way than the current state of https://github.com/whatwg/html/pull/6287 would need fixing https://bugzilla.mozilla.org/show_bug.cgi?id=1651887 first","msgtype":"m.text"},"ts":1611051117000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"but sure, I'll write that up","msgtype":"m.text"},"ts":1611051142000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"andreubotella: that bug is a good indicator that folks don't want their FormData \"magically\" changed","msgtype":"m.text"},"ts":1611051234000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(though more likely is that it's anecdata that reinforces my biases ðŸ™‚)","msgtype":"m.text"},"ts":1611051291000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Firefox and Chrome agree on normalizing FormData-sourced entries on urlencoded and text/plain, though","msgtype":"m.text"},"ts":1611051458000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"and Safari only doesn't because it can only create a payload from FormData-sourced entries with Request/Response.body","msgtype":"m.text"},"ts":1611051496000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"so if we don't want to normalize FormData entries on Request.body, the shortest path to interoperability would probably going with Chrome for multipart/form-data","msgtype":"m.text"},"ts":1611051603000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"andreubotella: I'm sorry, but I no longer know what that means","msgtype":"m.text"},"ts":1611051785000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Interop matters, but if everyone has to do a little more and we end up with something a lot simpler that's valuable too, esp. long term","msgtype":"m.text"},"ts":1611051832000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"andreubotella: what does (names and filenames N/A) mean?","msgtype":"m.text"},"ts":1611053725000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Firefox turns newlines into spaces in the MIME headers in multipart/form-data","msgtype":"m.text"},"ts":1611053767000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"with https://github.com/whatwg/html/pull/6282, that's no longer conforming to the spec","msgtype":"m.text"},"ts":1611053814000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"andreubotella: that might be worth noting","msgtype":"m.text"},"ts":1611053819000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1611053825000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"andreubotella: I hadn't really considered that names would become headers; can you even reliably parse that format if those contain newlines?","msgtype":"m.text"},"ts":1611053878000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://github.com/whatwg/html/pull/6282 makes them percent-escaped","msgtype":"m.text"},"ts":1611053902000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1611053911000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That should work","msgtype":"m.text"},"ts":1611053927000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That's why I waited to file both PRs together in the same Firefox bug","msgtype":"m.text"},"ts":1611053949000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"andreubotella: I still like the idea of normalizing for String/File and not normalizing for FormData","msgtype":"m.text"},"ts":1611054104000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'd prefer normalizing everything for urlencoded and text/plain and going the Chrome way on multipart/form-data","msgtype":"m.text"},"ts":1611054230000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"but let's wait to hear from the implementers","msgtype":"m.text"},"ts":1611054239000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"andreubotella: why is that your preference?","msgtype":"m.text"},"ts":1611054247000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'm not sure; the other options are definitely simpler","msgtype":"m.text"},"ts":1611054417000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"I don't care too much which way we end up going for multipart/form-data","msgtype":"m.text"},"ts":1611054453000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"annevk: I was thinking that for urlencoded and text/plain, it might not be simpler to not normalize for FormData, spec-wise and for implementations like Chrome","msgtype":"m.text"},"ts":1611057111000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"I'll try to put my words in order and write a post about it","msgtype":"m.text"},"ts":1611057125000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"JakeA: so how do you trick a media element into making multiple range requests?","msgtype":"m.text"},"ts":1611064367000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: give it back less than it wants. If it asks for 0-, give it 0-100 or whatever","msgtype":"m.text"},"ts":1611065017000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"it'll make another request for the rest","msgtype":"m.text"},"ts":1611065027000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"either that, or seek the media","msgtype":"m.text"},"ts":1611065031000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: so both Chrome and Firefox seem to give up for cross-origin audio, even without redirects, not sure what to make of this yet (perhaps DevTools is broken)","msgtype":"m.text"},"ts":1611071228000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: give up, as in don't make a second range request?","msgtype":"m.text"},"ts":1611071285000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yeah, and Firefox doesn't even show the first request","msgtype":"m.text"},"ts":1611071303000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: get a single progress event in Chrome, two in Fx","msgtype":"m.text"},"ts":1611071315000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://github.com/jakearchibald/range-request-test might be useful, as this logs the requests the server receives","msgtype":"m.text"},"ts":1611071449000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yeah, looking at WPT stashes now","msgtype":"m.text"},"ts":1611071472000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://github.com/web-platform-tests/wpt/blob/master/fetch/range/general.window.js here's what I did for the range stuff in wpt","msgtype":"m.text"},"ts":1611071536000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yeah I'm using some of that ðŸ™‚","msgtype":"m.text"},"ts":1611071553000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: if I get somewhere you might even get a review request","msgtype":"m.text"},"ts":1611071567000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but prolly not today at this rate","msgtype":"m.text"},"ts":1611071575000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ðŸ˜€ happy to","msgtype":"m.text"},"ts":1611071581000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: it's really weird, if I append a uuid it doesn't happen anymore; maybe it hits some cache somewhere","msgtype":"m.text"},"ts":1611073215000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: hmm, it's possible. Does no-store produce the same effect?","msgtype":"m.text"},"ts":1611075359000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: does not seem to matter; I've also \"disable cache\" enabled","msgtype":"m.text"},"ts":1611075705000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"huh, that is odd","msgtype":"m.text"},"ts":1611075718000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: anyway, not investigating that too much, looking more at redirects and such now","msgtype":"m.text"},"ts":1611075719000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: it seems that Chrome might stop at the first redirect, Firefox at the first cross-to-same-origin redirect, Safari keeps trucking, I guess I need to test cross-to-cross origin","msgtype":"m.text"},"ts":1611075778000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I seem to remember that Chrome would 'remember' the redirect, and consult the redirected-to URL for subsequent parts, whereas Firefox would go back to the original URL","msgtype":"m.text"},"ts":1611075833000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Or the other way around","msgtype":"m.text"},"ts":1611075839000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I can reproduce Firefox continuing with the original URL, but Chrome stops after it gets the 206 response from the redirect","msgtype":"m.text"},"ts":1611075992000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Which is admittedly weird and maybe a sign I'm doing something wrong as it would make more sense for Chrome to just abort upon seeing a redirect after the initial fetch","msgtype":"m.text"},"ts":1611076057000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: ah, if the initial request redirected I can reproduce that behavior in Chrome","msgtype":"m.text"},"ts":1611076108000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: but not if the second request redirects","msgtype":"m.text"},"ts":1611076116000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"basically branches of a request counter to try to make browsers do stupid stuff","msgtype":"m.emote"},"ts":1611076144000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ohhhh! I think that behaviour is new to me","msgtype":"m.text"},"ts":1611076145000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: maybe it still follows redirects in the hope that the final URL is identical and it will continue in that case? That does kinda match what mkwst described","msgtype":"m.text"},"ts":1611076234000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: As in redirects to another origin and back again? That would surprise me, but everything about this stuff surprises me","msgtype":"m.text"},"ts":1611076329000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: as in, if the first request ends up at /x and the second request thus goes to /x but then is redirected to various places including https://y/test but ends up at /x, it's okay (not verified though, will likely do so tomorrow)","msgtype":"m.text"},"ts":1611078075000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Are some directories in wpt magical, so that files in them aren't run?","msgtype":"m.text"},"ts":1611090654000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Or do all the .html files with \t<script src=\"/resources/testharness.js\"></script> or <script src=\"/resources/testharnessreport.js\"></script> or something get run as  a test","msgtype":"m.text"},"ts":1611090682000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"The latter","msgtype":"m.text"},"ts":1611091520000,"senderName":"Domenic","senderId":"Domenic@irc"}
]