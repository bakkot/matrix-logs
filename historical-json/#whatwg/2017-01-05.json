[
{"content":{"body":"botie, inform smaug the role of authoring roles in the HTML spec is to help authors catch mistakes they might have otherwise missed. They are essentially standardized linting/static-analysis checks. See https://checker.html5.org/about.html#why-validate","msgtype":"m.text"},"ts":1483582714000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"will do","msgtype":"m.text"},"ts":1483582714000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"botie, inform smaug for making HTML-checking tools useful it is best that we have a common normative set of rules to check. That is what the spec provides. Without that we instead just have makers of checking tools basing the checks on whatever whims or personal preferences they wantーlike what the situation is with some JavaScript linting tools.","msgtype":"m.text"},"ts":1483582900000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"will do","msgtype":"m.text"},"ts":1483582901000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"MikeSmith++","msgtype":"m.text"},"ts":1483582986000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"is \"real\t2m6.762s\" actually unsurprising for the time it takes to |git annotate| around thirty lines of the HTML spec?  :-\\","msgtype":"m.text"},"ts":1483583814000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"'cause that's what I got for |time git annotate -L94793,94827 source| on the spec just now","msgtype":"m.text"},"ts":1483583853000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"aaaaugh so many restructurings making annotation a long series of manual jumpbacks","msgtype":"m.text"},"ts":1483585092000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"jwalden: fwiw what I do is, I dumped `git log -p` output to file and I just do string searches through the to trace changes","msgtype":"m.text"},"ts":1483588516000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it is still a PITA even doing it that way, but for me at least less of PITA than trying to use git annotate or any of the wrappers around it for doing recursive blames","msgtype":"m.text"},"ts":1483588580000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"on my machine it takes like 3-4 minutes or so to (re)dump out the full log","msgtype":"m.text"},"ts":1483588647000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and the log is not so huge, about 90M","msgtype":"m.text"},"ts":1483588674000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"git log --grep ftw","msgtype":"m.text"},"ts":1483598157000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: do you happen to recall why the index for Big5 in the Encoding Standard has duplicate entries instead of using CJK Compatibility Ideographs for what would otherwise be duplicates? (The other CJK indices use CJK Compatibility Ideograph code points for what would logically be duplicates.)","msgtype":"m.text"},"ts":1483600033000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"annevk: or do you happen to recall why?","msgtype":"m.text"},"ts":1483600331000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: no, sorry","msgtype":"m.text"},"ts":1483600492000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: what are the examples to your question","msgtype":"m.text"},"ts":1483600535000,"senderName":"timdream","senderId":"timdream@irc"},
{"content":{"body":"timdream: hmm. finding an example is harder than I expected. Maybe that's my answer. Still trying.","msgtype":"m.text"},"ts":1483600861000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hmm. Lunde says there are supposed to be two doubly-mapped characters in Big5, but I see many more in index-big5","msgtype":"m.text"},"ts":1483601069000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"can someone with Edge test what it does for https://github.com/whatwg/html/issues/2174#issuecomment-269965310 ?","msgtype":"m.text"},"ts":1483601237000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"timdream: so it turns out that the two characters that I infer Lunde refers to are U+FA0C and U+FA0D. and these two do appear in index-big5","msgtype":"m.text"},"ts":1483601698000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"but then there are *other* duplicates","msgtype":"m.text"},"ts":1483601711000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"now I don't know if the other duplicates arise from the HKSCS merge or if they arise from other reasons","msgtype":"m.text"},"ts":1483601744000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"According to Lunde and Unicode, the unextended Big5 is not supposed to have as many duplicates as index-big5 has","msgtype":"m.text"},"ts":1483601785000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: i think so. no idea, might have some if could give me some code points","msgtype":"m.text"},"ts":1483601808000,"senderName":"timdream","senderId":"timdream@irc"},
{"content":{"body":"U+89A6 and U+799B to pick a couple at semi-random","msgtype":"m.text"},"ts":1483601875000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: i was told the big5-to-unicode table should be based on big5-hkscs and unicode-to-big5 is strictly the original CP950","msgtype":"m.text"},"ts":1483601896000,"senderName":"timdream","senderId":"timdream@irc"},
{"content":{"body":"timdream: anythig with a red border in https://hsivonen.fi/encoding-visualization/big5.html","msgtype":"m.text"},"ts":1483601897000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: looking","msgtype":"m.text"},"ts":1483601934000,"senderName":"timdream","senderId":"timdream@irc"},
{"content":{"body":"I spot-checked some of the red-border characters, and they don't seem to have corresponding Compatibility Ideographs defined, so as far as Compatibility Ideographs go, there's nothing amiss after all","msgtype":"m.text"},"ts":1483602031000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: hum, i was wrong, encoding standard (an re-impl in Gecko) removes the asymmetrical mapping of Big5","msgtype":"m.text"},"ts":1483602144000,"senderName":"timdream","senderId":"timdream@irc"},
{"content":{"body":"timdream: there's an asymmetry: pointers below a certain threshold are ignored by the encoder","msgtype":"m.text"},"ts":1483602184000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: ok","msgtype":"m.text"},"ts":1483602202000,"senderName":"timdream","senderId":"timdream@irc"},
{"content":{"body":"hsivonen: sorry, i still have no idea on your duplication question though.","msgtype":"m.text"},"ts":1483602232000,"senderName":"timdream","senderId":"timdream@irc"},
{"content":{"body":"timdream: ok. thanks","msgtype":"m.text"},"ts":1483602241000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: would it be helpful if i try to find someone that could extract or run the legacy ET3 Chinese DOS system?","msgtype":"m.text"},"ts":1483602293000,"senderName":"timdream","senderId":"timdream@irc"},
{"content":{"body":"hsivonen: maybe take a screenshot of these \"duplicate\" glyphs...","msgtype":"m.text"},"ts":1483602326000,"senderName":"timdream","senderId":"timdream@irc"},
{"content":{"body":"timdream: no need. I was just curious. I don't have any real indication of there being an actual problem.","msgtype":"m.text"},"ts":1483602327000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: but that does mean Unicode did not achieve round-trip compatibility with Big5: https://www.wikiwand.com/en/CJK_Compatibility_Ideographs","msgtype":"m.text"},"ts":1483602409000,"senderName":"timdream","senderId":"timdream@irc"},
{"content":{"body":"timdream: It seems to me it did with unextended Big5, but that's not what the Encoding Standard has.","msgtype":"m.text"},"ts":1483602484000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: the community have collected a few mapping table here https://moztw.org/docs/big5/ ... at least in CP950 I don't see U+89A6 being mapped twice","msgtype":"m.text"},"ts":1483602606000,"senderName":"timdream","senderId":"timdream@irc"},
{"content":{"body":"(yet it got mapped twice in https://moztw.org/docs/big5/table/hkscs2001-b2u.txt )","msgtype":"m.text"},"ts":1483602685000,"senderName":"timdream","senderId":"timdream@irc"},
{"content":{"body":"timdream: OK. chances are that the duplicates come from HKSCS then","msgtype":"m.text"},"ts":1483602780000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"(sad face)","msgtype":"m.emote"},"ts":1483602851000,"senderName":"timdream","senderId":"timdream@irc"},
{"content":{"body":"hsivonen: yeah at least from your example I can see that CP950 does not map byte sequence 0x8F 0xCB while HKSCS do","msgtype":"m.text"},"ts":1483603054000,"senderName":"timdream","senderId":"timdream@irc"},
{"content":{"body":"timdream: OK.","msgtype":"m.text"},"ts":1483603098000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: what foolip did is basically a merge between \"normal\" Big5 and HKSCS, resolving the conflicts between the two somehow and maybe avoiding PUA here and there","msgtype":"m.text"},"ts":1483604291000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: it's described in an email somewhere","msgtype":"m.text"},"ts":1483604298000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mounir: https://notifications.spec.whatwg.org/#create-a-notification seems to do an eager parse for action icon URLs","msgtype":"m.text"},"ts":1483604869000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mounir: I hadn't actually looked at the specification yesterday, but it seems that's covered","msgtype":"m.text"},"ts":1483604880000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: having a link to that e-mail will be a great help allowing me to amend the mentioned docs :)","msgtype":"m.text"},"ts":1483605690000,"senderName":"timdream","senderId":"timdream@irc"},
{"content":{"body":"annevk: that document still says \"a new feature was landed in Mozilla 1.8\" for example","msgtype":"m.text"},"ts":1483605735000,"senderName":"timdream","senderId":"timdream@irc"},
{"content":{"body":"zcorpan: glad to see https://github.com/whatwg/wattsi/pull/39 getting OKed","msgtype":"m.text"},"ts":1483605737000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"timdream: I can have a look","msgtype":"m.text"},"ts":1483605822000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: yep. maybe one day i can try to fix the followup","msgtype":"m.text"},"ts":1483605859000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"timdream: https://lists.w3.org/Archives/Public/public-whatwg-archive/2012Apr/thread.html#msg42","msgtype":"m.text"},"ts":1483605902000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: 👍","msgtype":"m.text"},"ts":1483605925000,"senderName":"timdream","senderId":"timdream@irc"},
{"content":{"body":"zcorpan: Yeah if you want I can make time to look into changing it to use Hixie’s Ropes stuff, but given that he says it’s not a problem as-is, it is hard to prioritize that very high","msgtype":"m.text"},"ts":1483605941000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"timdream: https://lists.w3.org/Archives/Public/public-whatwg-archive/2012Mar/thread.html#msg259 also","msgtype":"m.text"},"ts":1483605964000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: but I guess we should at least take time to do some rough benchmarking with and without this change to find out if it actually introduces any measurable slowdown to the build time","msgtype":"m.text"},"ts":1483605999000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"timdream: and https://lists.w3.org/Archives/Public/public-whatwg-archive/2012Apr/thread.html#msg95 which somehow is a separate thread","msgtype":"m.text"},"ts":1483606008000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: my thoughts as well, trying to time generating the spec now :-)","msgtype":"m.text"},"ts":1483606050000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"super","msgtype":"m.text"},"ts":1483606089000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: https://github.com/whatwg/wattsi/issues/40#issuecomment-270597675","msgtype":"m.text"},"ts":1483607726000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"looks","msgtype":"m.emote"},"ts":1483607773000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: cool!","msgtype":"m.text"},"ts":1483607885000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"jgraham: ever encountered something like https://github.com/w3c/web-platform-tests/pull/4378#issuecomment-270597694 before?","msgtype":"m.text"},"ts":1483609136000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm not really sure what to think of it","msgtype":"m.text"},"ts":1483609172000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: There shouldn't be any console logging in tests","msgtype":"m.text"},"ts":1483609519000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: there isn't","msgtype":"m.text"},"ts":1483609547000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: Chrome prints test results to the console I suspect, but the console can also contain other bits","msgtype":"m.text"},"ts":1483609584000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: maybe the problem is their testharness though","msgtype":"m.text"},"ts":1483609600000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, I think that a system where races in log message printing can break your test output is broken by design","msgtype":"m.text"},"ts":1483610116000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"JakeA: in https://github.com/whatwg/fetch/issues/447 you reference the service worker case a few times, but it's not explained","msgtype":"m.text"},"ts":1483610677000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: oh I see, it's about whether the page did something","msgtype":"m.text"},"ts":1483610715000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'll add more detail","msgtype":"m.text"},"ts":1483611649000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: it kinda makes sense to expose it on FetchEvent, or maybe make respondWith reject","msgtype":"m.text"},"ts":1483611698000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: It seems like we need channels for anything \"request modifying\". Eg, if I try to change the priority of a request from a page, how do I hear about that in the service worker?","msgtype":"m.text"},"ts":1483611748000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I recommend saying \"fetch modifying\"","msgtype":"m.text"},"ts":1483611959000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: and yeah","msgtype":"m.text"},"ts":1483611974000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: becomes more like a ControlToken then or a FetchToken","msgtype":"m.text"},"ts":1483612134000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: which you can either propagate or ignore","msgtype":"m.text"},"ts":1483612160000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, if a fetch() gets a controller, a fetch event needs a controller observer","msgtype":"m.text"},"ts":1483612167000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yeah, it wants to observe, but it also wants to propagate to any fetches of its own (and perhaps any cache/db queries)","msgtype":"m.text"},"ts":1483612999000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: but maybe just observing is enough and the rest can be a library, but then observing could also be a library (through postMessage)","msgtype":"m.text"},"ts":1483613033000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: controllerObserver.pipeTo(controller) kinda thing","msgtype":"m.text"},"ts":1483613062000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: what about: const fetch = new Fetch(request); fetch.connected.then(response => …)","msgtype":"m.text"},"ts":1483615135000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I'm trying to avoid having to pass the controller back out of a revealing function","msgtype":"m.text"},"ts":1483615160000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: that's reasonable, though I believe Domenic doesn't want new constructors with side effects","msgtype":"m.text"},"ts":1483615386000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: so you'd need fetch.fetch() or requivalent","msgtype":"m.text"},"ts":1483615404000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: controllableFetch() then","msgtype":"m.text"},"ts":1483615406000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"hah","msgtype":"m.text"},"ts":1483615407000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: although that brings me back to just making fetch() return a thennable controller","msgtype":"m.text"},"ts":1483615440000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yeah, I still like that the best","msgtype":"m.text"},"ts":1483615455000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"otherwise it becomes a third network API...","msgtype":"m.text"},"ts":1483615495000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Why is document.open's spec weirdly written?","msgtype":"m.text"},"ts":1483616474000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"And by that I mean that it doesn't piggyback WebIDL as much as the rest of the HTML spec,","msgtype":"m.text"},"ts":1483616492000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"saying stuff like \"7. Let type be the value of the first argument.\"","msgtype":"m.text"},"ts":1483616503000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: old","msgtype":"m.text"},"ts":1483616708000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ok.","msgtype":"m.text"},"ts":1483616715000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I have a half-hearted patch somewhere","msgtype":"m.text"},"ts":1483616744000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But it's not complete and I noticed so many problems along the way I just moved on to other things","msgtype":"m.text"},"ts":1483616764000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: any reason why you didn't leave a comment regarding the freeze question?","msgtype":"m.text"},"ts":1483616801000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"mounir: pointer?","msgtype":"m.text"},"ts":1483616875000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Probably missed it","msgtype":"m.text"},"ts":1483616883000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I only get one notification per thread and I didn't read the whole thing","msgtype":"m.text"},"ts":1483616910000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://github.com/WICG/mediasession/pull/162#discussion_r94619550","msgtype":"m.text"},"ts":1483616933000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"smaug, at 2017-01-05 02:18 UTC, MikeSmith said: the role of authoring roles in the HTML spec is to help authors catch mistakes they might have otherwise missed. They are essentially standardized linting/static-analysis checks. See https://checker.html5.org/about.html#why-validate and at 2017-01-05 02:21","msgtype":"m.text"},"ts":1483617020000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"UTC, MikeSmith said: for making HTML-checking tools useful it is best that we have a common normative set of rules to check. That is what the spec provides. Without that we instead just have makers of checking tools basing the checks on whatever whims or personal preferences they wantーlike what","msgtype":"m.text"},"ts":1483617020000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"the situation is with some JavaScript linting tools.","msgtype":"m.text"},"ts":1483617021000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"MikeSmith: but why authoring rules are different to the spec for implementers?","msgtype":"m.text"},"ts":1483617081000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"Couldn't those be the same","msgtype":"m.text"},"ts":1483617087000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"because implementors still have to deal with cases where authors don'","msgtype":"m.text"},"ts":1483617123000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"because implementors still have to deal with cases where authors don’t follow the rules","msgtype":"m.text"},"ts":1483617132000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"anyway I agree it is confusing to implementors to have authoring rules in the spec","msgtype":"m.text"},"ts":1483617168000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but the only alternative is to move them all out to a separate spec, which also has big downsides","msgtype":"m.text"},"ts":1483617222000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"of course I feel embarrassed when I happened to read authoring rules, but that was the first thing find-in-the-page gave me as result when looking at usemap stuff. I should have looked at that part was in 'authoring'.","msgtype":"m.text"},"ts":1483617326000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"smaug: you are not the first implementor who the spec has confused that way and you won’t be the last","msgtype":"m.text"},"ts":1483617465000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"IMHO in some ways we are getting the worst of both worlds by conflating UA implementation requirements and author requirements into the same spec","msgtype":"m.text"},"ts":1483617539000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the spec is rightly optimized essentially for that needs of implementors, because that it what functional specs are for, and that’s what the greatest need is","msgtype":"m.text"},"ts":1483617592000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I don't understand why the rules for authoring can be so different. I mean, in this case at least authoring rules could easily just follow what implementations should do","msgtype":"m.text"},"ts":1483617598000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"the less authoring requirements and implementation requirements differ, the better, I think","msgtype":"m.text"},"ts":1483617637000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"well there are a lot of cases where we make the author rules stricter than what UAs allow","msgtype":"m.text"},"ts":1483617638000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"why?","msgtype":"m.text"},"ts":1483617647000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"smaug: well for one, a couple implementations don't support id attributes","msgtype":"m.text"},"ts":1483617657000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sure I agree with you ideally that is how it should be","msgtype":"m.text"},"ts":1483617659000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"why authoring rules need to be stricter ?","msgtype":"m.text"},"ts":1483617673000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"smaug: so making developers stick to name will make more stuff work","msgtype":"m.text"},"ts":1483617674000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug: yes, because of https://checker.html5.org/about.html#why-validate","msgtype":"m.text"},"ts":1483617701000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"smaug: and will also be more backwards compatible","msgtype":"m.text"},"ts":1483617704000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"> There are some markup cases defined as errors because they are potential problems for accessibility, usability, interoperability, security, or maintainability—or because they can result in poor performance, or that might cause your scripts to fail in ways that are hard to troubleshoot.","msgtype":"m.text"},"ts":1483617709000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: thanks :)","msgtype":"m.text"},"ts":1483617711000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"> Along with those, some markup cases are defined as errors because they can cause you to run into potential problems in HTML parsing and error-handling behavior—so that, say, you’d end up with some unintuitive, unexpected result in the DOM.","msgtype":"m.text"},"ts":1483617720000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"JakeA: we can't subclass promise? Or would then() then return the wrong thing?","msgtype":"m.text"},"ts":1483617847000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: subclassedPromise.then() creates a new promise using subclassedPromise.constructor","msgtype":"m.text"},"ts":1483617882000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: and we cannot override that?","msgtype":"m.text"},"ts":1483617897000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: nope. There used to be a @@species thing in the spec to allow you to do that, but it's gone","msgtype":"m.text"},"ts":1483617918000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: @@species is still there, but I guess you're saying promises no longer use it?","msgtype":"m.text"},"ts":1483617966000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: https://tc39.github.io/ecma262/#sec-get-promise-@@species suggests it's still possible","msgtype":"m.text"},"ts":1483618008000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: oh wow. I wonder if it vanished & returned, or if I misunderstood","msgtype":"m.text"},"ts":1483618049000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: updated the comment to use @@species","msgtype":"m.text"},"ts":1483618392000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk, has anyone looked at whatwg.org recently?","msgtype":"m.text"},"ts":1483627485000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: it's known, but no solution","msgtype":"m.text"},"ts":1483627509000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Okay, thanks","msgtype":"m.text"},"ts":1483627518000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: apparently foolip setup monitoring software","msgtype":"m.text"},"ts":1483627544000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: but we don't have repair software","msgtype":"m.text"},"ts":1483627549000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I shouldn't be that hard to have better uptime than this...","msgtype":"m.text"},"ts":1483627584000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"We have multiple offers for sysadmins now...","msgtype":"m.text"},"ts":1483627631000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"uhum. if not for the wiki, would it be entirely static?","msgtype":"m.text"},"ts":1483627669000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"I guess there's the webhooks too","msgtype":"m.text"},"ts":1483627677000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"The webhooks are slowly being replaced with software that runs on Travis and uses scp to copy files over","msgtype":"m.text"},"ts":1483627738000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: Encoding's Big5 is essentially just the union of what implementations did at the time, I think typically siding with Big5-HKSCS in case of conflict. If there are duplicates, that's probably because implementations of Big5-HKSCS already did, but it's possible things have changed since.","msgtype":"m.text"},"ts":1483627820000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"If I'm not mistaken, the decoder is a superset of Big5-HKSCS, with no or very few (<5) exceptions.","msgtype":"m.text"},"ts":1483627859000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"wonders if foolip's grand plan involves making github pay for whatwg's bandwidth","msgtype":"m.emote"},"ts":1483628251000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: not really, but for just hosting static content, one doesn't have to do much thinking, just find a provider with high reliability.","msgtype":"m.text"},"ts":1483628304000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"any opinions on https://github.com/whatwg/html/pull/2236 ? i'm not a color profile expert but it seems to me that the first iteration with darker colors were more correct (since they matched SVG colors and XhmikosR's comments)","msgtype":"m.text"},"ts":1483629522000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"foolip: annevk: some of the demos use CGIs, and we use .htaccess a lot","msgtype":"m.text"},"ts":1483629614000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: ok, so no quickfix then :)","msgtype":"m.text"},"ts":1483629640000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"We could lose the CGIs without much sadness, but not sure what the contemporary alternatives to our htaccess funtimes are.","msgtype":"m.text"},"ts":1483629669000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"E.g. does nginx have an equivalent?","msgtype":"m.text"},"ts":1483629678000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah, we'd have to do some configuration differently","msgtype":"m.text"},"ts":1483629767000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The ngix docs say \".htaccess is horrible for performance, don't use it\"","msgtype":"m.text"},"ts":1483629822000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Don't we have enough people from Google working on WHATWG specs? Doesn't someone at Google know something about hosting a site? :)","msgtype":"m.text"},"ts":1483629915000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"As far as I can tell nginx wants you to use a single config file per server","msgtype":"m.text"},"ts":1483630085000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Which is definitely faster but is kind of sad in that we can no longer check them into the repos","msgtype":"m.text"},"ts":1483630101000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess we could check them into a separate repo","msgtype":"m.text"},"ts":1483630119000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You could create a single template and upon startup render the appropriate config","msgtype":"m.text"},"ts":1483630209000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"annevk: JakeA: what would fetch() look like if we designed it today?  would we return a Fetching object with a Fetching.response promise for what is currently returned by fetch()?","msgtype":"m.text"},"ts":1483630366000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"if we can agree on what we would like it to look like, maybe we can find the least painful way to backfill to current API","msgtype":"m.text"},"ts":1483630390000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: for me, fetch() would return a fetching object that'd have a .responded (or something) promise that'd resolve with what fetch() resolves with today","msgtype":"m.text"},"ts":1483630450000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: ok, lets just make fetch2() then!","msgtype":"m.text"},"ts":1483630467000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: that's why I'm keen on adding the controller stuff to the promise that fetch() returns","msgtype":"m.text"},"ts":1483630469000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"haha","msgtype":"m.text"},"ts":1483630472000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I mean, other than some embarrassment, what are the reasons not to add another function that does what we want?  then we have \"simple fetch\" and \"advanced fetch\"","msgtype":"m.text"},"ts":1483630531000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: it feels icky to add stuff onto the promise... seems like it will break with any aggregation with promise tools like Promise.all(), etc","msgtype":"m.text"},"ts":1483630585000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I mean, it feels like the \"promise type that does what we want\" has sailed","msgtype":"m.text"},"ts":1483630607000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: ^ see above where I suggested controlledFetch()","msgtype":"m.text"},"ts":1483630645000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: but the promise subclass thing works find with Promise.all() - you just get a regular promise in that case","msgtype":"m.text"},"ts":1483630670000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: oh... backscroll... I'll look!","msgtype":"m.text"},"ts":1483630675000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"(there's not much to see)","msgtype":"m.text"},"ts":1483630688000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: yeah, we'd put the whole thing in GitHub","msgtype":"m.text"},"ts":1483630713000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: oh, I don't see the controlledFetch() thing","msgtype":"m.text"},"ts":1483630736000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: going down that route is an advantage in some way, since we can just switch hosts whenever, since all the config is accounted for","msgtype":"m.text"},"ts":1483630745000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: ah, it was controllableFetch()","msgtype":"m.text"},"ts":1483630773000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"ah, I see","msgtype":"m.text"},"ts":1483630823000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: oh, so \"putting it on the promise\" is really just returning a FetchController with a .then() that returns a Response... it could be an alias for FetchController.responded.then()","msgtype":"m.text"},"ts":1483630897000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yeah, but not sure what the benefit in the alias would be","msgtype":"m.text"},"ts":1483630929000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: it makes me feel better to think about it from it starting as a different type and using Promise .then() compat feature","msgtype":"m.text"},"ts":1483630957000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: instead of having a Promise prototype with extra gunk added on","msgtype":"m.text"},"ts":1483630975000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: that would work (http://jsbin.com/zopaya/edit?js,console), but seems a bigger change as instanceof Promise is no longer true","msgtype":"m.text"},"ts":1483631034000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: FetchController could just be a subclass of Promise","msgtype":"m.text"},"ts":1483631080000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1483631121000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: the reason to avoid a new API is because that has a high cost (lots of additional tests, everyone has to relearn, existing code needs lots of conditionals, etc.)","msgtype":"m.text"},"ts":1483631138000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I'm not going to comment on the issue because its too long already... but this sound good to me","msgtype":"m.text"},"ts":1483631140000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: in terms of the subclass, that'll upset people who didn't like promise.cancel(), as the person they pass the promise to can control the fetch. But they can already control the response so I don't think it's a huge deal.","msgtype":"m.text"},"ts":1483631400000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"And they're one .then() away from blocking that if they want.","msgtype":"m.text"},"ts":1483631414000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yeah, just give .then() to your consumers","msgtype":"m.text"},"ts":1483631431000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: well, seems like we're in agreement. We just have to convince the rest of the world :D","msgtype":"m.text"},"ts":1483631470000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"hah","msgtype":"m.text"},"ts":1483631765000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: annevk: I think we have to accept some people will not be happy no matter what","msgtype":"m.text"},"ts":1483631945000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"general life advice","msgtype":"m.text"},"ts":1483631962000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: you could go the Trump route and troll them in the process, because why not?","msgtype":"m.text"},"ts":1483631981000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"(probably not a good idea)","msgtype":"m.text"},"ts":1483631997000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"hahaha","msgtype":"m.text"},"ts":1483631999000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"foolip: thanks","msgtype":"m.text"},"ts":1483632567000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"wtf, `document.querySelectorAll('a[href^=\"h')` (note: missing `\"]`) works somehow?","msgtype":"m.text"},"ts":1483633303000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"for what is worth, there's no reason to jump to nginx. A properly configured Apache site will be pretty fast nowadays","msgtype":"m.text"},"ts":1483633438000,"senderName":"XhmikosR","senderId":"XhmikosR@irc"},
{"content":{"body":"puts `body { color: green` in mathiasbynens's CSS","msgtype":"m.emote"},"ts":1483633484000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"mathiasbynens: there's a bug on csswg-drafts raised by me on that, works by design apparently","msgtype":"m.text"},"ts":1483639132000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Specs are back, for anyone who was waiting","msgtype":"m.text"},"ts":1483639154000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"mathiasbynens: https://github.com/w3c/csswg-drafts/issues/492","msgtype":"m.text"},"ts":1483639193000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic: https://github.com/w3c/wptserve/issues/80","msgtype":"m.text"},"ts":1483643361000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: do the optimized images look different on your screen? Now that we've deleted the SVG-to-PNG conversion ones, all that remain look the same to me.","msgtype":"m.text"},"ts":1483645770000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: they look the same to me in the current state of the PR","msgtype":"m.text"},"ts":1483645797000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: so we should probably merge then?","msgtype":"m.text"},"ts":1483645810000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: they looked different in the first iteration, before XhmikosR force-pushed new commits to make them look the same","msgtype":"m.text"},"ts":1483645821000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Domenic: well the point is that the current images appear to be bogus","msgtype":"m.text"},"ts":1483645836000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Domenic: but i don't care strongly either way","msgtype":"m.text"},"ts":1483645851000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Oh I see hmm","msgtype":"m.text"},"ts":1483645872000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Well I guess that's a separate issue","msgtype":"m.text"},"ts":1483645878000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"mathiasbynens: When you feed that string to a spec-conforming CSS parser, all open constructs get closed by EOF.","msgtype":"m.text"},"ts":1483646497000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"JakeA: annevk: should we put FetchController as an attribute on the Response in addition to returning it from fetch()?  So that existing code that does an immediate .then() can still get access to it easily after the headers arrive","msgtype":"m.text"},"ts":1483652913000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"jsbell: I'm trying to understand the upgrade transaction","msgtype":"m.text"},"ts":1483653679000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"when is the commit supposed to happen?","msgtype":"m.text"},"ts":1483653692000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"(in general \"commit\" seems to be quite vaguely defined in the spec)","msgtype":"m.text"},"ts":1483653718000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"is it basically in step 10 in http://w3c.github.io/IndexedDB/#steps-for-running-an-upgrade-transaction","msgtype":"m.text"},"ts":1483653754000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"smaug: tuning in, give me a second...","msgtype":"m.text"},"ts":1483654809000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"smaug: implicitly in step 8 - waiting for transaction to finish","msgtype":"m.text"},"ts":1483654847000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"right, so ok, in before step 10","msgtype":"m.text"},"ts":1483654876000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"yeah.","msgtype":"m.text"},"ts":1483654885000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: btw, I just updated https://github.com/w3c/IndexedDB/issues/87#issuecomment-270766086","msgtype":"m.text"},"ts":1483654897000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"Ah, \"immediately\" ...","msgtype":"m.text"},"ts":1483654901000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"I don't know how blink behaves with upgrade","msgtype":"m.text"},"ts":1483654913000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"does it still somehow use after-microtask model there?","msgtype":"m.text"},"ts":1483654926000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"(if so, where)","msgtype":"m.text"},"ts":1483654934000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"upgrades do not use the after-microtask. that's only needed for db.transaction() calls","msgtype":"m.text"},"ts":1483654948000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"db.transaction()-minted transactions are created active, upgrade transactions are created inactive","msgtype":"m.text"},"ts":1483654966000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: ok, good. Gecko has still somehow this after-promise model with upgrade, but I had to remove it to make tests pass when making promises to use microtasks","msgtype":"m.text"},"ts":1483655039000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"so, after-microtask with db.transactions(), but more explicit handling with upgrades","msgtype":"m.text"},"ts":1483655070000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"and yeah, that step 10 should be rewritten - it's like a monkey patch within the spec. :P Ah well, still better than v1.","msgtype":"m.text"},"ts":1483655120000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"that step 10 should really be a modification to http://w3c.github.io/IndexedDB/#commit-transaction step 3 and http://w3c.github.io/IndexedDB/#abort-transaction step 5, something like: \"#. Queue a task to run the following substeps. 1. If /transaction/ was an upgrade transaction, let /request/ be the request associated with /transaction/ and set /request/'s transaction to null. 2. Dispatch an event at /transaction/....\"","msgtype":"m.text"},"ts":1483655330000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"smaug: I'm curious about what's special about the upgrade transactions vs. microtasks.","msgtype":"m.text"},"ts":1483655401000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: well, in which microtask the upgrade transaction would be committed or so","msgtype":"m.text"},"ts":1483655484000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"upgrade transaction somehow implicitly happens asynchronously","msgtype":"m.text"},"ts":1483655561000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"during possibly multiple tasks","msgtype":"m.text"},"ts":1483655570000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"smaug: Fun. Ah. Shouldn't be different than any other transaction. After dispatching a request's success/error event (which implies running pending microtasks), when setting the transaction to inactive, if the transaction has no more requests then try and commit.","msgtype":"m.text"},"ts":1483655600000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"That's buried in the prose in http://w3c.github.io/IndexedDB/#transaction-lifetime-concept step 7 (a maze of twisty implications that all look alike.)","msgtype":"m.text"},"ts":1483655672000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"The exact timing shouldn't matter, since it can't happen while the transaction is active, and once the transaction goes inactive in that state it can implicitly never be active again.","msgtype":"m.text"},"ts":1483655721000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"... and any result of the commit attempt is a \"queue a task...\"","msgtype":"m.text"},"ts":1483655780000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Uh, swap 1/2 in the substeps I gave above.","msgtype":"m.text"},"ts":1483656261000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"hmm, there is explicitly no synchronization of any kind in (Local)Storage, right? So code like `for (let i = 0; i < localStorage.length; ++i) console.log(localStorage.key(i));` could easily have the storage be modified somewhere in the middle of iterating?","msgtype":"m.text"},"ts":1483657387000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Correct. The spec originally had basically a global lock, but nobody implemented it, and it was eventually dropped.  localStorage is just as racy as the cookie store.","msgtype":"m.text"},"ts":1483657537000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"AFAIK there's a \"SHOULD\"-level requirement to have a lock, with the expectation that nobody ever will. But, well…","msgtype":"m.text"},"ts":1483657730000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I'm not sure how a lock would even help with multiple consecutive operations? But yeah, makes sense that it doesn't have any such requirements (although it could have some kind of requirements to expect some consistency between the exposed state and the storage events that have or haven't been fired yet... but I'm glad there isn't such a requirement)","msgtype":"m.text"},"ts":1483657924000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Mek: I think you get a lock until you return to the event loop (thus maintaining JS's run-to-completion semantics for the data)?","msgtype":"m.text"},"ts":1483657958000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That is to say, I think I remember that being how the lock worked.","msgtype":"m.text"},"ts":1483657970000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ah yeah, I suppose that might work (for some deifnition of work)","msgtype":"m.text"},"ts":1483658028000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"IIRC Firefox has(? had?) a lock?","msgtype":"m.text"},"ts":1483658214000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"but with most JS running in a single thread anyway that's far less of an issue","msgtype":"m.text"},"ts":1483658234000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Do meta redirects in the <body> have an affect?","msgtype":"m.text"},"ts":1483660533000,"senderName":"gsnedders","senderId":"gsnedders@irc"}
]