[
{"content":{"body":"Domenic: annevk: happy to look at particular fetch+streams issues during the service worker meeting tomorrow since we're in the same building","msgtype":"m.text"},"ts":1474274771000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"sg","msgtype":"m.text"},"ts":1474274975000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"esprehn: ok, the global delayed microtask delivery point would still be consistent, so I can buy that. I assume it would be per global and not per connected-same-origin-global or such","msgtype":"m.text"},"ts":1474276367000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"mkwst: https://bugzilla.mozilla.org/show_bug.cgi?id=1302539 seems weird?","msgtype":"m.text"},"ts":1474276440000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: FWIW https://twitter.com/annevk/status/777800561366274048","msgtype":"m.text"},"ts":1474277649000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"FYI, really","msgtype":"m.text"},"ts":1474277663000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Saw it :)","msgtype":"m.text"},"ts":1474277713000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"not my call, but I think we should just break those pages and make them feel bad about themselves","msgtype":"m.text"},"ts":1474277744000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"(assuming usage is low enough)","msgtype":"m.text"},"ts":1474277754000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"Hi! Yeah, WebKit/Blink never implemented `nosniff` for anything other than script and style. From a security perspective, there didn't seem to be much value to doing so.","msgtype":"m.text"},"ts":1474277917000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"If it's hurting interop, it's certainly something we could investigate doing.","msgtype":"m.text"},"ts":1474277928000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Do y'all have any numbers?","msgtype":"m.text"},"ts":1474277937000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"If only someone wrote a fucking spec when it was implemented","msgtype":"m.text"},"ts":1474277972000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: Eh. It's an artifact from a different era. I think it shipped in IE8 or something.","msgtype":"m.text"},"ts":1474278014000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Like I said, if Chrome's behavior is breaking Firefox, then it's something we should address. But Chrome's behavior hasn't changed in at least ~3 years, so...","msgtype":"m.text"},"ts":1474278131000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: I asked for numbers in the bug","msgtype":"m.text"},"ts":1474278457000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: now would be a the right time to visit the Web Payments room","msgtype":"m.text"},"ts":1474280351000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"same for anybody else here whoâ€™s interested in the payments stuff","msgtype":"m.text"},"ts":1474280388000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: What's the topic?","msgtype":"m.text"},"ts":1474280397000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: Rouslan talking about the Chrome implementation of the PaymentRequest API","msgtype":"m.text"},"ts":1474280454000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: stuck elsewhere","msgtype":"m.text"},"ts":1474280481000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and in general about POV from implementors","msgtype":"m.text"},"ts":1474280490000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: ok","msgtype":"m.text"},"ts":1474280494000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"smaug: yeah per global, I don't understand the implementation complexity there since our microtask queue is inside v8 though","msgtype":"m.text"},"ts":1474280515000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"we're about to reach testing in the CSS WG, FWIW","msgtype":"m.text"},"ts":1474280538000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"esprehn: in Gecko microtask handling (used by MutationObserver, not Promises yet) could be quite easily modified to that delivery happens at end of task. I think. Except in case one MutationObserver is used to observe changes from a normal document _and_ changes form a document where delayed delivery is needed","msgtype":"m.text"},"ts":1474280777000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"hmm, I guess that should be reasonable easy too","msgtype":"m.text"},"ts":1474280786000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"(need to still sort out microtask handling in the spec too. I think there are couple of bugs and it is unclear to me why there ended up this special microtask thingie for mutation observers.)","msgtype":"m.text"},"ts":1474280853000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"okay","msgtype":"m.text"},"ts":1474280868000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"I need to think about the complexity of delivering for some documents and not others. I was imagining that the thing doing the calling skips it, so it'd be all contexts that would be invoked there","msgtype":"m.text"},"ts":1474280907000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"ex. a child iframe that does parentWindow.requestAnimationFrame or a childWindow.mutationObserver.observe(parentWindow) wouldn't make it behave different","msgtype":"m.text"},"ts":1474280951000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"if that's what you're suggesting, but it might be possible :)","msgtype":"m.text"},"ts":1474280985000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"esprehn: so if the behavior is per global and parent window has delayed mt but child doesn't, and childWindow's MO observes itself and parent, that is the case I'm talking about","msgtype":"m.text"},"ts":1474281234000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"I still wonder if the issue could be solved in Custom elements level","msgtype":"m.text"},"ts":1474281373000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"maybe not","msgtype":"m.text"},"ts":1474281442000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"it could be solved there, that during parsing callbacks are called at the end of the task","msgtype":"m.text"},"ts":1474281534000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"CSSWG seems to be discussing XSL:FO","msgtype":"m.text"},"ts":1474288979000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"What year is it?","msgtype":"m.text"},"ts":1474288983000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Nah mang it's dead.","msgtype":"m.text"},"ts":1474289255000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But still had some useful things that we had plans to import, if someone will actually do the work to dig it out.","msgtype":"m.text"},"ts":1474289274000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ms2ger: Earlier they were discussing tables. Next up jsss","msgtype":"m.text"},"ts":1474295465000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"spaces gifs were also mentioned","msgtype":"m.text"},"ts":1474295572000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I have a map from shorts to a particular dictionary type ({data:BufferSource, mask:BufferSource}), to express as an argument to a function. I want to have folks just pass objects, but getting the k/v pairs out is pretty hard to express in WebIDL. My fallback is to express it as an array of {id: short, data: bufferSource, mask: BufferSource}, and I'm leaning","msgtype":"m.text"},"ts":1474323774000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"toward that. Anyone have preferences?","msgtype":"m.text"},"ts":1474323774000,"senderName":"jyasskin","senderId":"jyasskin@irc"}
]