[
{"content":{"body":"dmarr: fetch just sends back whatever cookies are set for that domain, right?","msgtype":"m.text"},"ts":1503534958000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I think so. I have a call to my api which challenges the user with the Basic Auth creds, and then subsequent requests send in the Authentication request header. I'm trying to understand the hooks there","msgtype":"m.text"},"ts":1503535040000,"senderName":"dmarr","senderId":"dmarr@irc"},
{"content":{"body":"dmarr: to be clear, you know credentials: 'include' doesn’t affect the sending of the Authentication header?","msgtype":"m.text"},"ts":1503538511000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and I guess you probably mean Authorization header?","msgtype":"m.text"},"ts":1503538534000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"anyway, I wonder what actual error you’re running into","msgtype":"m.text"},"ts":1503538560000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"is the server not receiving cookies that you think it should be?","msgtype":"m.text"},"ts":1503538582000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://webkit.org/blog/7877/release-notes-for-safari-technology-preview-38/","msgtype":"m.text"},"ts":1503544714000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"> Enabled Payment Requests as an experimental feature","msgtype":"m.text"},"ts":1503544723000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"nice","msgtype":"m.text"},"ts":1503544797000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"... though I guess it might cause people to get their hopes up a little bit higher than intended","msgtype":"m.text"},"ts":1503544813000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"since so far what they landed seems to be literally just the experimental-feature flag for it, but not the actual API","msgtype":"m.text"},"ts":1503544868000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"anyway, progress","msgtype":"m.text"},"ts":1503544878000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"anyone got thoughts on https://github.com/nodejs/node/issues/14994? basically, a user wants to go to a domain with xn--a--a in it, but some Node.js internal issue caused a replacement character to be added because that domain isn't valid Punycode.","msgtype":"m.text"},"ts":1503546718000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"after https://github.com/whatwg/url/pull/309#issuecomment-301414556 the URL Standard decided to call ToASCII on all domains (including pure ASCII ones), and throw on invalid Punycode-encoded URLs, but I'm not sure if that's the best solution here, as the user (fairly) assumed pure ASCII input would not get transformed in any way","msgtype":"m.text"},"ts":1503546831000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"annevk: ^^","msgtype":"m.text"},"ts":1503546869000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: why would the user assume that?","msgtype":"m.text"},"ts":1503557112000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, the name \"ToASCII\" kind of means \"transform a domain to ASCII\"","msgtype":"m.text"},"ts":1503557159000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: ToASCII is an implementation detail of IDNA","msgtype":"m.text"},"ts":1503557195000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TimothyGu: not exposed to users","msgtype":"m.text"},"ts":1503557202000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TimothyGu: anyway, the xn--a--a is an interesting case, this is an internal domain that works, maybe even on some browsers?","msgtype":"m.text"},"ts":1503557235000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Chrome at least doesn't throw an error","msgtype":"m.text"},"ts":1503557251000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: Fx probably doesn't either","msgtype":"m.text"},"ts":1503557262000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TimothyGu: so even with ignore hyphens we still hit compat issues because of these rather weird domain names","msgtype":"m.text"},"ts":1503557291000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1503557292000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"sigh","msgtype":"m.text"},"ts":1503557293000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And Node gets bitten because browsers haven't fixed stuff yet","msgtype":"m.text"},"ts":1503557312000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The idea behind applying ToASCII to ASCII input is that the a-z character set shouldn't get special treatment over other character sets","msgtype":"m.text"},"ts":1503557355000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"However, actual compat issues probably might trump that, depending on severity and willingness of browsers to do the right thing anyway","msgtype":"m.text"},"ts":1503557404000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: would you mind explaining that in the issue?","msgtype":"m.text"},"ts":1503557900000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: the node one? I guess I can in a bit","msgtype":"m.text"},"ts":1503558191000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1503558200000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"done","msgtype":"m.text"},"ts":1503558675000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"thanks!","msgtype":"m.text"},"ts":1503559484000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: sorry for the back and forth on that small PR of yours. I can fix myself before merging if you prefer.","msgtype":"m.text"},"ts":1503560926000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: sure, go ahead!","msgtype":"m.text"},"ts":1503560965000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"zcorpan: well, making [Exposed] explicit certainly has some benefits given https://github.com/w3c/css-houdini-drafts/pull/464!","msgtype":"m.text"},"ts":1503561157000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"FYI https://wiki.whatwg.org/index.php?title=What_you_can_do&diff=10184&oldid=10178","msgtype":"m.text"},"ts":1503563457000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: the [GitHub repositories] link doesn't work","msgtype":"m.text"},"ts":1503575628000,"senderName":"xfq","senderId":"xfq@irc"},
{"content":{"body":"(since it's Wikitext, instead of Markdown)","msgtype":"m.text"},"ts":1503575630000,"senderName":"xfq","senderId":"xfq@irc"},
{"content":{"body":"xfq: thanks. danged wikitext","msgtype":"m.text"},"ts":1503575654000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"GPHemsley: you around? We're moving a bunch of stuff away from DreamHost and were wondering if you could help with the wiki","msgtype":"m.text"},"ts":1503580851000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"GPHemsley: if you can, foolip can give you server access and such","msgtype":"m.text"},"ts":1503580867000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: about the integrity bug where you said \"its reasonable to not do anything\"... you mean don't throw a TypeError and then check the integrity?  Or ignore the integrity check then?","msgtype":"m.text"},"ts":1503583671000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: I went ahead and filed a spec issue: https://github.com/whatwg/fetch/issues/583","msgtype":"m.text"},"ts":1503584136000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: sorry for being vague :/ I meant not throwing","msgtype":"m.text"},"ts":1503585139000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think the spec is good about ignoring the integrity value on opaque responses... but we don't have a check for it on implementation side","msgtype":"m.text"},"ts":1503586076000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"so I think we could probably just do that","msgtype":"m.text"},"ts":1503586087000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: it doesn't ignore it","msgtype":"m.text"},"ts":1503586174000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: it results in a network error","msgtype":"m.text"},"ts":1503586179000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the SRI spec does\\","msgtype":"m.text"},"ts":1503586183000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: hmm","msgtype":"m.text"},"ts":1503586194000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: are you saying fetch throws network error because it looks at the body instead of unfiltered body?  and the opaque body is filtered to be empty?","msgtype":"m.text"},"ts":1503586240000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I guess it has a note to that effect","msgtype":"m.text"},"ts":1503586252000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: \"If ... response does not match request’s integrity metadata, set response and internalResponse to a network error\"","msgtype":"m.text"},"ts":1503586268000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: it doesn't match for an opaque response","msgtype":"m.text"},"ts":1503586282000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: match is https://w3c.github.io/webappsec-subresource-integrity/#does-response-match-metadatalist","msgtype":"m.text"},"ts":1503586290000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the SRI spec has text suggesting if a <script integrity> results in a cross-origin no-cors, then integrity should be ignored","msgtype":"m.text"},"ts":1503586297000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"o_O","msgtype":"m.text"},"ts":1503586310000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh, maybe I misunderstood that bit","msgtype":"m.text"},"ts":1503586346000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"That's not what I thought we had agreement on, but I haven't studied SRI in detail","msgtype":"m.text"},"ts":1503586367000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think you are right","msgtype":"m.text"},"ts":1503586373000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I thought it mostly deferred to Fetch at this point","msgtype":"m.text"},"ts":1503586374000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I misread it","msgtype":"m.text"},"ts":1503586376000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: I wonder if it would be ok to reject immediately with network error when we go opaque and there is an integrity value... instead of computing hashes, etc","msgtype":"m.text"},"ts":1503586627000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"or waiting for body to complete","msgtype":"m.text"},"ts":1503586644000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: there'll be a timing difference but that should be okay","msgtype":"m.text"},"ts":1503587061000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: maybe should be clarified though as currently it reads like it's not okay","msgtype":"m.text"},"ts":1503587113000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think we will read to end and then evaluate against empty string","msgtype":"m.text"},"ts":1503587144000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: also, I don't think there are any fetch integrity tests against no-cors","msgtype":"m.text"},"ts":1503587163000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"AFAICT","msgtype":"m.text"},"ts":1503587199000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: I'm going to see if tt has time to look at this... he wrote our fetch integrity support initially","msgtype":"m.text"},"ts":1503587278000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: sounds good","msgtype":"m.text"},"ts":1503587673000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"saw this and wondered what folks here thought about the concept and general approach of a map/geo element to natively display a map on a page: https://shkspr.mobi/blog/2017/08/mapping-in-html-a-proposal-for-a-new-element/","msgtype":"m.text"},"ts":1503602063000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"tantek: why not offer as a custom element (at least as a first step)?","msgtype":"m.text"},"ts":1503604225000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie, agreed!","msgtype":"m.text"},"ts":1503604266000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"might be an interesting / complex enough real world example to really exercise the capabilities of web components","msgtype":"m.text"},"ts":1503604321000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"TabAtkins: could bikeshed somehow allow templating the advisement here: https://heycam.github.io/webidl/#LegacyArrayClass, it's used  on a number of extended attributes.","msgtype":"m.text"},"ts":1503604376000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tantek: yes, and there are high-level JS API requirements for navigation on top of it.","msgtype":"m.text"},"ts":1503604424000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"looks like the tweet thread links to a few custom element attempts https://twitter.com/edent/status/900677910998155265","msgtype":"m.text"},"ts":1503605897000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"tobie: You can use a <pre class=include> element https://tabatkins.github.io/bikeshed/#including","msgtype":"m.text"},"ts":1503608024000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I can't have those inline, can I? (cake + eat it too)","msgtype":"m.text"},"ts":1503608181000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Hmm, not right now, but open an issue on me. I'd have to do something different for the macros, is all.","msgtype":"m.text"},"ts":1503608210000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: as attributes?","msgtype":"m.text"},"ts":1503608232000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I'll figure it out.","msgtype":"m.text"},"ts":1503608315000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: awesome. Thanks. https://github.com/tabatkins/bikeshed/issues/1078","msgtype":"m.text"},"ts":1503608700000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"(Not gonna hit it immediately, I'm in the middle of making `bikeshed update` only download what's changed.)","msgtype":"m.text"},"ts":1503608731000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: no hurry. (And as far as I'm concerned, https://github.com/tabatkins/bikeshed/issues/1077 is higher up in my list of priorities.)","msgtype":"m.text"},"ts":1503611914000,"senderName":"tobie","senderId":"tobie@irc"}
]