[
{"content":{"body":"Domenic: platform objects by default should not require a proxy","msgtype":"m.text"},"ts":1475650425000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: likely Hixie","msgtype":"m.text"},"ts":1475650445000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: re-open dictionary, why are we not picking the same processing model for open dictionary than for existing dictionaries?","msgtype":"m.text"},"ts":1475653040000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: not sure, would make sense if we did","msgtype":"m.text"},"ts":1475653078000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: maybe currently impls don't, but does not seem like a breaking change","msgtype":"m.text"},"ts":1475653127000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: not sure what you mean. Open dic isn't implemented anywhere, is it?","msgtype":"m.text"},"ts":1475653172000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: Fx has MozMap","msgtype":"m.text"},"ts":1475653665000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: not sure what others do for Headers","msgtype":"m.text"},"ts":1475653687000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: IS the only use case of MozMap Headers?","msgtype":"m.text"},"ts":1475653706000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I think there is some other internal usage","msgtype":"m.text"},"ts":1475653737000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I see.","msgtype":"m.text"},"ts":1475653762000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: if we want open-dictionaries and dictionaries to be variants of the same \"type\" and want conversion with half-open dictionaries in the not too distant future, then I believe we want the same processing model for both","msgtype":"m.text"},"ts":1475653852000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: if the only reason for a model change is to map (pardon the pun) MozMap, then it feels like that shouldn't be a huge compat issue","msgtype":"m.text"},"ts":1475653957000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: if there are other reasons I'm not aware of (e.g. perf?) then the story is different.","msgtype":"m.text"},"ts":1475654004000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: note that I'm not sure what the reason for the diff is","msgtype":"m.text"},"ts":1475654010000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: jyasskin might know","msgtype":"m.text"},"ts":1475654021000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: but seems like something we should get clarified","msgtype":"m.text"},"ts":1475654044000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yup--commenting on the issue","msgtype":"m.text"},"ts":1475654063000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"ta","msgtype":"m.text"},"ts":1475654702000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: as I chatted with rniwa about alternative stylesheet handling in shadow dom, I read again https://github.com/w3c/webcomponents/issues/391 and found https://www.w3.org/Bugs/Public/show_bug.cgi?id=29349 is still open. Does it make sense to move the bug to csswg-drafts issue and work on it?","msgtype":"m.text"},"ts":1475656212000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"kochi: submitting a PR to close that bug is fine too","msgtype":"m.text"},"ts":1475656307000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"kochi: that's what we do for legacy bugs for most WHATWG drafts","msgtype":"m.text"},"ts":1475656330000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: okay, no need to migrate the issue to github.","msgtype":"m.text"},"ts":1475656475000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"kochi: yeah, perhaps only if it needs a lot more discussion that's worth it, since it's easier for folks to use GitHub","msgtype":"m.text"},"ts":1475656516000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"kochi: but moving all the issues from one place to another creates a lot of noise unfortunately","msgtype":"m.text"},"ts":1475656542000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: i see, probably the discussion is all set for the issue, what is left is to update cssom spec accordingly.","msgtype":"m.text"},"ts":1475656586000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"When is something a trusted event?","msgtype":"m.text"},"ts":1475658095000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If the ECMAScript stack is empty?","msgtype":"m.text"},"ts":1475658104000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If the UA dispatches it, generally","msgtype":"m.text"},"ts":1475658315000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: but click() is dispatched by the UA too","msgtype":"m.text"},"ts":1475658360000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"generally\" :)","msgtype":"m.text"},"ts":1475658406000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Yeah, so when would ECMAScript stack being empty not be a good condition?","msgtype":"m.text"},"ts":1475658433000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"postMessage? I guess that might run off a task","msgtype":"m.text"},"ts":1475658466000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: click() dispatches synchronously?","msgtype":"m.text"},"ts":1475658483000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: yes","msgtype":"m.text"},"ts":1475658512000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1475658544000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"Ms2ger: it does, but I guess it's an exception therefore, since isTrusted is false","msgtype":"m.text"},"ts":1475658590000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh, it is?","msgtype":"m.text"},"ts":1475658610000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Maybe smaug has more of this paged in","msgtype":"m.text"},"ts":1475658618000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I think he might be the only one","msgtype":"m.text"},"ts":1475658688000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, what's this \"trailer\" stuff in fetch?","msgtype":"m.text"},"ts":1475665485000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: feature from HTTP folks wanted to see exposed","msgtype":"m.text"},"ts":1475665516000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: some subset of implementers of most browsers seemed okay with it, but nobody started implementing afaik","msgtype":"m.text"},"ts":1475665548000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1475665556000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"smaug: per your comment about postMessage() needing to dispatch trusted events, does that mean it's basically about the JavaScript stack being empty?","msgtype":"m.text"},"ts":1475665943000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug: also, how does that make click() an exception? Since in that case the JavaScript stack wouldn't be empty (and the event is untrusted, or should that be trusted too?)","msgtype":"m.text"},"ts":1475665970000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: well, mutation events are trusted","msgtype":"m.text"},"ts":1475666005000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"smaug: I see","msgtype":"m.text"},"ts":1475666032000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug: that is a little weird","msgtype":"m.text"},"ts":1475666059000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug: but I guess it depends on what the principles all","msgtype":"m.text"},"ts":1475666079000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"are*","msgtype":"m.text"},"ts":1475666081000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"all the UA dispatched events are trusted,  and click() is a special case since it is just a shorthand to: element.dispatchEvent(new MouseEvent(\"click\"));","msgtype":"m.text"},"ts":1475666215000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"something like that","msgtype":"m.text"},"ts":1475666221000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"I think click() is a little more complicated than that, but okay","msgtype":"m.text"},"ts":1475666242000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm going to open an issue against whatwg/dom to get this settled throughout specifications","msgtype":"m.text"},"ts":1475666260000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"click() does check/set/clear the \"is handling click event flag\", but other than that, it just dispatches the event","msgtype":"m.text"},"ts":1475666365000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"why is a callback function not distinguishable from a dictionary?","msgtype":"m.text"},"ts":1475670981000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"â€¦or from an object?","msgtype":"m.text"},"ts":1475671064000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"A dictionary is just an object","msgtype":"m.text"},"ts":1475671288000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"write, but a callback function is a function, right?","msgtype":"m.text"},"ts":1475671388000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"And a function is little more than an object :)","msgtype":"m.text"},"ts":1475671455000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"well, it's precisely \"little\" more (it is callable).","msgtype":"m.text"},"ts":1475671512000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Sure","msgtype":"m.text"},"ts":1475671600000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Dunno if the distinguishability check ever looked at IsCallable","msgtype":"m.text"},"ts":1475671626000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":" tobie: annevk: how could you possibly have the same processing model for them? they're completely different.","msgtype":"m.text"},"ts":1475671639000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"dictionaries have a set of known keys, open dictionaries need to enumerate all keys.","msgtype":"m.text"},"ts":1475671649000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: it's about considering just own props vs also protoprops","msgtype":"m.text"},"ts":1475671679000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: that ^","msgtype":"m.text"},"ts":1475671690000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: that's one of the differences bz highlighted","msgtype":"m.text"},"ts":1475671699000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"OK.","msgtype":"m.text"},"ts":1475671703000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: tobie: I'm typing a reply to the issue atm","msgtype":"m.text"},"ts":1475671708000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think a JS implementation would probably do Object.keys()","msgtype":"m.text"},"ts":1475671719000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"in ES we've made a few decisions based on own-enumerable as the \"copying protocol\"","msgtype":"m.text"},"ts":1475671735000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"E.g. Object.assign or the upcoming { ...objectSpread }","msgtype":"m.text"},"ts":1475671745000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: so that would be different from dictionaries in IDL then","msgtype":"m.text"},"ts":1475671765000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Right, because they're very different models...","msgtype":"m.text"},"ts":1475671784000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: and wouldn't cater for flattening DOM objects","msgtype":"m.text"},"ts":1475671789000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"For dictionaries you just do `obj.prop`","msgtype":"m.text"},"ts":1475671790000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"For open-ended things you enumerate the props","msgtype":"m.text"},"ts":1475671805000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"At TC39 we discussed this as \"classes vs. records\"","msgtype":"m.text"},"ts":1475671822000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"classes have prototype chains, records do not","msgtype":"m.text"},"ts":1475671829000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Property access needs to work for both so it uses the prototype chain","msgtype":"m.text"},"ts":1475671837000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: you should totally weigh in with this stuff I thikn","msgtype":"m.text"},"ts":1475671841000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but things like Object.assign, Object.keys, { ...objectSpread } do not","msgtype":"m.text"},"ts":1475671849000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1475671850000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Just woke up ^_^","msgtype":"m.text"},"ts":1475671856000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: esp ...objectSpread, decisions made in TC39/JavaScript so far, etc.","msgtype":"m.text"},"ts":1475671859000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: fair","msgtype":"m.text"},"ts":1475671862000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But for devs, imagine how crazy it'll be if half-open dictionaries allow properties on the proto if those are defined by a  dictionary member but on the object only if they're not.","msgtype":"m.text"},"ts":1475671971000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: yeah, web animations seems to have that mismatch at the moment, I agree that's weird","msgtype":"m.text"},"ts":1475672015000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: ^","msgtype":"m.text"},"ts":1475672019000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think jyasskin's intuition is right and that the difference only matters in obfuscated JS contests","msgtype":"m.text"},"ts":1475672035000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"For the common case of foo({ bar: x, baz: y }) it does not matter","msgtype":"m.text"},"ts":1475672050000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I can totally imagine creating a base class with shared options, which would work well for those properties defined with member dictionaries but break unexpectedly the minute I add an unspecified property","msgtype":"m.text"},"ts":1475672253000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: that's the reason why we distinguish between classes and records.","msgtype":"m.text"},"ts":1475672273000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You can't in general use classes for options","msgtype":"m.text"},"ts":1475672280000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It'll break many parts of the language (Object.keys, Object.assign, object spread)","msgtype":"m.text"},"ts":1475672293000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Rereading that thread I notice that I indeed missed jyasskin already pointed out that difference (though no motivation, so asking still seems reasonable)","msgtype":"m.text"},"ts":1475672312000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But more importantly, bz dropped a StructuredClone bug report in there","msgtype":"m.text"},"ts":1475672322000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I really thought we went through StructuredClone with aklein and got everything right, last time :-S","msgtype":"m.text"},"ts":1475672344000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: can't we move away dictionaries from fetching stuff on the prototypes, then? OR would that break web-compat?","msgtype":"m.text"},"ts":1475672390000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I don't think that's desirable, since it would mean dictionaries do something more exotic than `foo.bar`. The problem here is with the JS language which hasn't reified the difference between records and class instances.","msgtype":"m.text"},"ts":1475672439000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: you mean apart from the serializing/deserializing mess? -_-","msgtype":"m.text"},"ts":1475672519000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1475672535000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"tobie: we can't move away from that, e.g., new Request(url, oldRequest) is a thing now","msgtype":"m.text"},"ts":1475672556000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but oldRequest isn't specified as a dictionary there, is it?","msgtype":"m.text"},"ts":1475672605000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: I understand your perspective and I agree that it makes sense from it, but that seems like favoring technical purity over dev experience.","msgtype":"m.text"},"ts":1475672632000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: it is, the class just happens to match the record layout","msgtype":"m.text"},"ts":1475672634000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(to use Domenic's terms)","msgtype":"m.text"},"ts":1475672654000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"'s head explodes","msgtype":"m.emote"},"ts":1475672670000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"maybe half-open dictionaries are a dreadful idea.","msgtype":"m.text"},"ts":1475672745000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: seems bz missed that StructuredClone fails on proxies, pfew","msgtype":"m.text"},"ts":1475672806000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: well, I think web animation shipped","msgtype":"m.text"},"ts":1475672832000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't think the dev experience will be changed either way","msgtype":"m.text"},"ts":1475672918000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"well, a long time ago I would have argued these weird corner cases are the reasons people hate Web developmentâ€¦","msgtype":"m.text"},"ts":1475673019000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"nowadays we have this: https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f","msgtype":"m.text"},"ts":1475673028000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: https://twitter.com/steveklabnik/status/783321843793010688","msgtype":"m.text"},"ts":1475673084000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Corner cases not working across browsers is more problematic I think","msgtype":"m.text"},"ts":1475673157000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And it's not clear we have good solutions here","msgtype":"m.text"},"ts":1475673168000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: imo that's missing the problem; the big problem with JS-land is we have multiple different package managers which work in different ways, many of which are really designed for server-side JS but we use them for client-side stuff anyway.","msgtype":"m.text"},"ts":1475673210000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"also the JS community is so full of fads that come and go so fast; there's so little stability in what's considered good","msgtype":"m.text"},"ts":1475673277000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: whereby \"here\" you're referring to the Web in general or half-open dictionaries?","msgtype":"m.text"},"ts":1475673320000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: sort of lost context","msgtype":"m.text"},"ts":1475673332000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: heh, half-open dicts","msgtype":"m.text"},"ts":1475673352000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: though I guess same for web in general?","msgtype":"m.text"},"ts":1475673361000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, the latter goes without saying, I could have framed my question more precisely. :)","msgtype":"m.text"},"ts":1475673429000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"speaking of web dev today, I find it kinda sad I have little motivation to write in JS or CSS, rather than languages that compile to them","msgtype":"m.text"},"ts":1475673587000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"there's only one package manager for JS these days, and it's designed for both ecosystems...","msgtype":"m.text"},"ts":1475674742000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"gsnedders: Which languages btw?","msgtype":"m.text"},"ts":1475674867000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic: depends whether you consider npm and bower the same, which they probably aren't","msgtype":"m.text"},"ts":1475674934000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"nox: TypeScript and SCSS mostly","msgtype":"m.text"},"ts":1475675109000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Nice. I fancy the TS engineering even though I don't use JS nor anything that targets it.","msgtype":"m.text"},"ts":1475675131000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"my experience with TypeScript is that it didn't really solve any real problems and just gave me a bunch of extra crap to do to get anything done, while simultaneously breaking liveedit and debugging","msgtype":"m.text"},"ts":1475675199000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I'm not sure why anyone feels that's a good thing, but I guess opinions and experiences vary :x","msgtype":"m.text"},"ts":1475675242000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"tobie: jyasskin : Domenic: so maybe the solution is to have record<ByteString, ByteString> and for half-open we could do (record<> or DictionaryName)","msgtype":"m.text"},"ts":1475675369000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bower doesn't really exist anymore","msgtype":"m.text"},"ts":1475675369000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess maybe polymer pretends it does","msgtype":"m.text"},"ts":1475675388000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: the union type doesn't work because halfopen wants to grab several fields with type conversions/required/etc. and then enumerate the rest","msgtype":"m.text"},"ts":1475675415000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah, I guess that would end up being a little confusing","msgtype":"m.text"},"ts":1475675439000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: as for why I'll argue npm is really designed for server-side stuff: it doesn't really handle non-JS assets in any decent way. bower is still relied on by a fair few things, for better or for worse.","msgtype":"m.text"},"ts":1475675632000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"well, given Domenic's input on the issue itself, it seems this is essentially a problem with ES itself.","msgtype":"m.text"},"ts":1475675646000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"caitp: I definitely have experiences of TS finding bugs that would've been missed otherwise in all likelihood. And given plenty of things rely on build-steps anyway, liveedit is pretty much already dead for better or for worse.","msgtype":"m.text"},"ts":1475675716000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: I guess this is just ignoring the reality of JS dev as it exists today, which is that people use npm for client side including all non-JS assets with no issues.","msgtype":"m.text"},"ts":1475675726000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: oh, I'm not saying people *don't* use it for it","msgtype":"m.text"},"ts":1475675750000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic: I'm just saying that it doesn't address those needs well","msgtype":"m.text"},"ts":1475675760000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: it'll eventually do so. it's on their roadmap","msgtype":"m.text"},"ts":1475675774000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I wouldn't be so offended by the \"extra crap it forces you to do\" if optional types were an engine feature, and I believe Mozilla is interested in exploring that possibility? At least, that's what \"typed objects\" sounds like","msgtype":"m.text"},"ts":1475675797000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"tobie: I don't doubt it; it's an obvious thing to fix for the front-end side of things.","msgtype":"m.text"},"ts":1475675805000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"caitp: I think there's generally an interest in adding gradual typing to ES, but I think there's some hesitancy about it given ES4's gradual typing was certainly a significant downfall","msgtype":"m.text"},"ts":1475675871000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"caitp: aren't typed objects just ArrayBuffer objects with fancy access?","msgtype":"m.text"},"ts":1475675931000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I have no idea, I'm not familiar with their plan for it","msgtype":"m.text"},"ts":1475675956000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: and, uh, what annevk just said.","msgtype":"m.text"},"ts":1475675960000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"but it sounds similar to v8's experiments","msgtype":"m.text"},"ts":1475675965000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"by title alone","msgtype":"m.text"},"ts":1475675971000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"annevk: they aren't necessarily array-like, though","msgtype":"m.text"},"ts":1475675998000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: what I remember sounded like structs, which I'm also not super familiar with, mind you","msgtype":"m.text"},"ts":1475676042000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"doesn't know quite what the current proposal is, having been out of the TC-39 world for a long while now","msgtype":"m.emote"},"ts":1475676072000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"are you thinking like, the \"value types\" thing?","msgtype":"m.text"},"ts":1475676139000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"annevk: wrt new Request(url, oldRequest), couldn't you redefine the constructor's second argument as (dictionary or Request) or are there weird WebIDL rules that prevent you from doing so?","msgtype":"m.text"},"ts":1475676156000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: it's possible, though it would be subtly different of course and doesn't address other places that take dictionaries","msgtype":"m.text"},"ts":1475676236000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: agreed.","msgtype":"m.text"},"ts":1475676250000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I guess we need to decide how important half-open is","msgtype":"m.text"},"ts":1475676288000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: otherwise record<> seems like the way to go for now","msgtype":"m.text"},"ts":1475676298000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: we could separately discuss if redoing dictionary is worth it, but I suspect not, given that dict.member is kinda intuitive","msgtype":"m.text"},"ts":1475676329000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: agree. well, not reaching into the proto chain could be explained by the fact we're passing by value.","msgtype":"m.text"},"ts":1475676373000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: i.e. there's some form of cloning going on (however that's described in the spec)","msgtype":"m.text"},"ts":1475676405000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"beverloo: I can try land that now","msgtype":"m.text"},"ts":1475677695000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, thanks! we're looking at one or two more things and then we're going to pause for a while, at least until you or Microsoft catch up","msgtype":"m.text"},"ts":1475677752000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"beverloo: actually, if John could enable contributions from others to that branch I can fix it up and land it","msgtype":"m.text"},"ts":1475677754000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"beverloo: he should have a little checkbox in the sidebar","msgtype":"m.text"},"ts":1475677780000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, done","msgtype":"m.text"},"ts":1475677890000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"beverloo: same","msgtype":"m.text"},"ts":1475678704000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"beverloo: please say \"thanks John\"","msgtype":"m.text"},"ts":1475678725000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"done :) Thank you!","msgtype":"m.text"},"ts":1475678754000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"annevk: Yeah, \"value types\" are fancy wrappers around array buffers basically, + some niceties about comparison and possibly operator overloading.","msgtype":"m.text"},"ts":1475679775000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"still really wants someone to champion them so we can use them in CSS.","msgtype":"m.emote"},"ts":1475679836000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"value types are different from typed objects","msgtype":"m.text"},"ts":1475679861000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i think it's typed objects that are wrappers around array buffers","msgtype":"m.text"},"ts":1475679871000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hmm I guess it all fits together per latest thinking https://github.com/nikomatsakis/typed-objects-explainer","msgtype":"m.text"},"ts":1475679952000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I was under the impression that value types were still limited in what they could contain to basically be array buffers.","msgtype":"m.text"},"ts":1475679953000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yeah, otherwise you don't get value equality.","msgtype":"m.text"},"ts":1475679967000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"How It Feels to Learn Javascript in 2017\" is going to be great with this stuff","msgtype":"m.text"},"ts":1475679990000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I liked https://twitter.com/jdalton/status/783348903940718593 on that subject","msgtype":"m.text"},"ts":1475680023000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think that tweet misses the point","msgtype":"m.text"},"ts":1475680118000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I disagree with all the disagreement to that article. JS really is in a confusing state right now, and has been for a few years. I don't think it's just a normal amoutn of complexity, compared to other languages.","msgtype":"m.text"},"ts":1475680144000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"it is a mess, definitely","msgtype":"m.text"},"ts":1475680180000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"The criticism of js is that there's a lot of accidential complexity that people deeply embedded in the community don't notice because they learnt each new thing incrementally","msgtype":"m.text"},"ts":1475680180000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"TabAtkins: In Bikeshed, if I have \"Let response be the result of fetching request\" and I wanted \"fetching\" to link to https://fetch.spec.whatwg.org/#concept-fetch, what's the best way to do that?","msgtype":"m.text"},"ts":1475680184000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Whereas for someone coming in it's a wall of WTF","msgtype":"m.text"},"ts":1475680201000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"JakeA: That should just work?","msgtype":"m.text"},"ts":1475680216000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jgraham: Right. And it hasn't been integrated or polished yet so that it's approachable for newcomers.","msgtype":"m.text"},"ts":1475680240000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"JakeA: <a>fetching</a> should work, that is.","msgtype":"m.text"},"ts":1475680259000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(and ftr I don't think it's a \"js-the-language\" criticism so much as a \"js-the-ecosystem\" criticism)","msgtype":"m.text"},"ts":1475680306000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"TabAtkins: Bikeshed somehow understands that \"<a>fetching</a>\" should point to https://fetch.spec.whatwg.org/#concept-fetch? I thought I'd have to add \"text: fetching; url: concept-fetch\" to the anchors","msgtype":"m.text"},"ts":1475680307000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I think you could write our own article about js-the-language, tbh, but yes","msgtype":"m.text"},"ts":1475680328000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"JakeA: Oh gosh no. Anchor block is just for specs that aren't in the Bikeshed db; Fetch definitely is.","msgtype":"m.text"},"ts":1475680329000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"the ecosystem is scary, but people feel they have to use that ecosystem instead of just js-the-language, so the two are sort of undistinguishable","msgtype":"m.text"},"ts":1475680388000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"TabAtkins: ahh, so is \"fetching\" linked to \"fetch\" somewhere?","msgtype":"m.text"},"ts":1475680396000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Or does it perform magic around <something>ing","msgtype":"m.text"},"ts":1475680410000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Bikeshed's got some auto-Englishing around \"dfn\" type autolinks.","msgtype":"m.text"},"ts":1475680423000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"caitp: I think I agree with that, but my point is that I don't see what language changes you could make to solve the problems","msgtype":"m.text"},"ts":1475680432000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Most of the standard English word variants will work.","msgtype":"m.text"},"ts":1475680441000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ahh ok. Cheers!","msgtype":"m.text"},"ts":1475680468000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"jgraham: they'll add new paragraphs about \"use babelXXX preset 2019 to use value types, but note that these are not the same as the support for typed objects by TypeFlowScript v. 29.0.1\"","msgtype":"m.text"},"ts":1475680484000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"http://cube-drone.com/comics/c/how-it-feels-to-learn-javascript-in-2016","msgtype":"m.text"},"ts":1475680593000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"compare it to learning rust or objc","msgtype":"m.text"},"ts":1475680666000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"anyways, time to get back to doing productive things","msgtype":"m.text"},"ts":1475680716000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I mean the fact that js seems to get far more feedback of this kind than any other language could mean something. Or you could ignore it and imply that everyone who isn't totally happy with the ecosystem is a caveman, I guess","msgtype":"m.text"},"ts":1475680741000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I imagine that, for example, Lisp had the same complaints about it before they went and standardized an enormous stdlib. Lots of different OO systems floated around for a while, for instance.","msgtype":"m.text"},"ts":1475680862000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jgraham: I think JS gets far more of this feedback because it is used far more.","msgtype":"m.text"},"ts":1475680908000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: how crazy would it be to have open dictionaries iterate the prototype chain? The spec language is more complicated, but it looks doable.","msgtype":"m.text"},"ts":1475680948000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: not _crazy_, but I tried to argue this morning for why I think it is a bad idea.","msgtype":"m.text"},"ts":1475680977000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I haven't read the issue yet; I'll go do that.","msgtype":"m.text"},"ts":1475681009000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Domenic: That would imply people are ~equally frustrated by ecosystem problems when they try to learn Java, C#, C, Python and PHP (based on various programming language popularity metrics I can find, which are of course not of great reliability)","msgtype":"m.text"},"ts":1475681407000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: that's been my experience, especially in Java and PHP.","msgtype":"m.text"},"ts":1475681427000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'm pretty sure it's not true of Python","msgtype":"m.text"},"ts":1475681449000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"So if your claim is \"js is no worse to use than Java or PHP\", I guess that might be true","msgtype":"m.text"},"ts":1475681480000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But it's a pretty low standard","msgtype":"m.text"},"ts":1475681488000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Well, the metrics I have seen indicate it outstrips those (especially Python) by a lot","msgtype":"m.text"},"ts":1475681536000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I don't think this discussion is terribly productive though, so we can just agree to disagree and move on.","msgtype":"m.text"},"ts":1475681552000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Sure, all I have are unreliable programming language ranking websites","msgtype":"m.text"},"ts":1475681570000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Sure","msgtype":"m.text"},"ts":1475681575000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"TabAtkins: How do I solve \"Multiple possible 'dfn'\"? I guess I'm looking for an attribute or something where I can remove the ambiguity","msgtype":"m.text"},"ts":1475683332000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: The error message should tell you how to solve that.","msgtype":"m.text"},"ts":1475683523000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Multiple possible 'dfn' local refs for 'type'. Arbitrarily chose the one with type 'dfn' and for 'service worker'.","msgtype":"m.text"},"ts":1475683550000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Doesn't seem so","msgtype":"m.text"},"ts":1475683555000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Oh, multiple locals.","msgtype":"m.text"},"ts":1475683567000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I want it to be https://fetch.spec.whatwg.org/#concept-response-type","msgtype":"m.text"},"ts":1475683571000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: you should know, what does promise.then(another_promise) do?","msgtype":"m.text"},"ts":1475688480000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"Smaug: nothing, it's just an error","msgtype":"m.text"},"ts":1475688592000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"aha","msgtype":"m.text"},"ts":1475688611000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"was just reading some code","msgtype":"m.emote"},"ts":1475688618000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"Domenic: hmm,  so promise.then(another_promise).then(function { console.log(\"foo\")}); won't print foo?","msgtype":"m.text"},"ts":1475688709000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"tests","msgtype":"m.emote"},"ts":1475688716000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"I think it will just ignore the first then","msgtype":"m.text"},"ts":1475688801000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It's equivalent to passing undefinef","msgtype":"m.text"},"ts":1475688812000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"aha","msgtype":"m.text"},"ts":1475688887000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"confusing","msgtype":"m.text"},"ts":1475688907000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"would expect then() to throw in this case","msgtype":"m.emote"},"ts":1475688918000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"but ok, thanks","msgtype":"m.text"},"ts":1475688950000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"Domenic: I'd also expect it to throw. Is this \"like undefined\" behavior due to the thenable-coercion we ended up speccing?","msgtype":"m.text"},"ts":1475691356000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"> Domenic: hmm,  so promise.then(another_promise).then(function { console.log(\"foo\")}); won't print foo? << it should throw, argument to then() must be callable","msgtype":"m.text"},"ts":1475691568000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"TabAtkins: no, unrelated.","msgtype":"m.text"},"ts":1475692636000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"caitp: no, if the argument to .then is not callable it's ignored.","msgtype":"m.text"},"ts":1475692648000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"At the time the only precedent was JSON.stringify/parse which ignored non-callables.","msgtype":"m.text"},"ts":1475692662000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ah, you're right","msgtype":"m.text"},"ts":1475692679000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I saw the \"If IsCallable(onFulfilled) is False, then...\" and assumed the worst :p","msgtype":"m.text"},"ts":1475692803000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"FWIW I once spent some considerable time tracking down a bug due to promise1.then(promise2) rather than promise1.then(()=>promise2)","msgtype":"m.text"},"ts":1475693266000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(it was less obvious than that in real life ofc because the argument to .then was a function call","msgtype":"m.text"},"ts":1475693302000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":")","msgtype":"m.text"},"ts":1475693305000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Yeah, I wouldn't be surprised if it's not changeable now, but my experience with the platform would lead me to believe that it would throw, as that's the usual WebIDL behavior when you pass something unsuitable.","msgtype":"m.text"},"ts":1475693314000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yeah, not waying we can change it","msgtype":"m.text"},"ts":1475693331000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Just that it's a design choice that caused a difficult-to-diagnose bug","msgtype":"m.text"},"ts":1475693350000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"*saying","msgtype":"m.text"},"ts":1475693358000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"IMO browser consoles should warn on it","msgtype":"m.text"},"ts":1475693383000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"A dead horse at this point, but still like Dion's perspective on the topic: https://medium.com/ben-and-dion/i-want-to-go-back-to-the-1950s-of-web-development-fa69d7fe357a","msgtype":"m.text"},"ts":1475693793000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"don't you think that would just incur performance hits that would lead people to just use Bluebird instead?","msgtype":"m.text"},"ts":1475693798000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I mean, they already use BB instead of native promises because of the performance anyways, but...","msgtype":"m.text"},"ts":1475693831000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Why does the number of nullable member types of a union type must be 0 or 1? (http://heycam.github.io/webidl/#dfn-number-of-nullable-member-types)","msgtype":"m.text"},"ts":1475693949000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"JakeA: Did you ever get an answer for your multiple-dfn error? I think you want `<a for=\"response\">type</a>`.","msgtype":"m.text"},"ts":1475693965000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"hi","msgtype":"m.text"},"ts":1475694252000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Oh shoot yeah, I didn't answer Jake.  Yeah, the `for=\"whatever\"` thing is what you want - just match whatever the <dfn> you want uses.  (Or if the one you want doesn't have a `for` attribute, use `for=/` on the link.)","msgtype":"m.text"},"ts":1475694282000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"tobie: Because otherwise you can't tell, when you recieve a null, which nullable type it was meant for. This is important if you change behavior based on the type you receive.","msgtype":"m.text"},"ts":1475694329000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: why then do we have an algorithm to count the number of nullable types of a union? http://heycam.github.io/webidl/#dfn-number-of-nullable-member-types","msgtype":"m.text"},"ts":1475694817000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: For the purpose of restricting you to 0 or 1.","msgtype":"m.text"},"ts":1475694870000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: :D","msgtype":"m.text"},"ts":1475694877000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I'm not being sarcastic - follow the uses of the definitions. ^_^","msgtype":"m.text"},"ts":1475694898000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I know. That's what's funny, actually.","msgtype":"m.text"},"ts":1475694953000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: this whole sections seems a lot simpler in practice than how it's specified.","msgtype":"m.text"},"ts":1475695034000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: Probably!","msgtype":"m.text"},"ts":1475695043000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Thanks for the explanation.","msgtype":"m.text"},"ts":1475695185000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: so you know which branch of the union null should go to, probably","msgtype":"m.text"},"ts":1475695620000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh tab already answered","msgtype":"m.text"},"ts":1475695638000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah--thanks","msgtype":"m.text"},"ts":1475695646000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"jyasskin: cheers! Will give that a go","msgtype":"m.text"},"ts":1475696011000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"tobie: I think there's a lot in WebIDL that we can simplify.","msgtype":"m.text"},"ts":1475696536000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Oh, so union types are not associative because of how null types work. `(DOMString? or Node)` is *not* the same as `(DOMString or Node)?`","msgtype":"m.text"},"ts":1475696577000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Hence (Foo or (DOMString or Node)?) != (Foo or DOMString or Node)?","msgtype":"m.text"},"ts":1475696699000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"jyasskin: I hope you're right","msgtype":"m.text"},"ts":1475696752000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Yes, that sounds right. You get extra \"which type\" information as you push the ? down. I hope nobody's taking advantage of that.","msgtype":"m.text"},"ts":1475696858000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: well if nobody is, the whole thing can be simplified to making union types associative and making the quality of being nullable bubble.","msgtype":"m.text"},"ts":1475697089000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"*bubble upwards.","msgtype":"m.text"},"ts":1475697111000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"That would be awesome. We'd probably have to lead with a Blink/Firefox patch doing it, to see what breaks.","msgtype":"m.text"},"ts":1475697136000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: coming mostly from JS, the whole idea of tying null to a type is sort of forain to me, so I find it hard to picture what this could break, here.","msgtype":"m.text"},"ts":1475697229000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Imagine that a spec has (DOMString? or Node), and then the text says \"if a DOMString was passed, do X; otherwise for a Node do Y\". By bubbling null, we force the spec to change to treat null explicitly.","msgtype":"m.text"},"ts":1475697492000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"We could try to make \"DOMString?\" an alias of (DOMString or Null), but then we get the restriction that (DOMString? or Node?) is banned right back.","msgtype":"m.text"},"ts":1475697657000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Well, it's banned for precisely the same reason, right? Not to have to treat null explicitly.","msgtype":"m.text"},"ts":1475698001000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I'm curious though as to real examples of APIs allowing null but not handling it explicitly.","msgtype":"m.text"},"ts":1475698085000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Me too. I don't have any, but my guess is that because it's possible, it's been done.","msgtype":"m.text"},"ts":1475698309000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Making the change in a browser is probably the best way to find examples.","msgtype":"m.text"},"ts":1475698336000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Yup and running the output through CI.","msgtype":"m.text"},"ts":1475698524000,"senderName":"tobie","senderId":"tobie@irc"}
]