[
{"content":{"body":"Language bindings between Ecmascript and a type-safe language sounds hard. If it were simply reflection, it wouldn't be too hard. But say you want to map a function to a native interface implementation. I can see a few options. The easiest sounding one is to tell the WebIDL binding library how to convert a function to a native interface implementation, say `registerBinding(\"EventListener\", EventListener.class,","msgtype":"m.text"},"ts":1603939516000,"senderName":"EveryOS","senderId":"EveryOS@irc"},
{"content":{"body":"func->((event)->func.call(event)))`, which would effectively tell our IDL code to convert a Javascript Function to the interface required by the language we are binding to.","msgtype":"m.text"},"ts":1603939516000,"senderName":"EveryOS","senderId":"EveryOS@irc"},
{"content":{"body":"But that wiould decrease modularity, by increasing dependency on the IDL Binding library. But I suppose there is no getting away from that, in the first place","msgtype":"m.text"},"ts":1603939570000,"senderName":"EveryOS","senderId":"EveryOS@irc"},
{"content":{"body":"The other option would be to generate and load bytecode on the fly, which would be much harder","msgtype":"m.text"},"ts":1603939589000,"senderName":"EveryOS","senderId":"EveryOS@irc"},
{"content":{"body":"so, img[crossorigin] - is there an API to detect a CORS error when loading such image (via JS) ?","msgtype":"m.text"},"ts":1603972704000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"are you allowed to invent custom attribute names for autonomous custom elements (declared in HTML alone, like <hello-world custom></hello-world> with no associated customElements definition)?","msgtype":"m.text"},"ts":1603980262000,"senderName":"innovati","senderId":"innovati@irc"},
{"content":{"body":"how does TLA work with multiple module tags","msgtype":"m.text"},"ts":1603980975000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in the context of this comment anyway https://github.com/tc39/proposal-compartments/issues/27#issuecomment-718772705","msgtype":"m.text"},"ts":1603981000000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hsivonen: hmmmmm, will gecko avoid speculatively fetching anything if the encoding is still unknown?","msgtype":"m.text"},"ts":1603981607000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: no, the encoding is always known by the time the non-meta-prescanner tokenizer runs.","msgtype":"m.text"},"ts":1603981657000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"zcorpan: however, it's possible that a charset reload is triggered later, but then that tokenization happens with an encoding that's treated as known","msgtype":"m.text"},"ts":1603981685000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"so what you call \"unknown\" is considered \"late\" but Gecko","msgtype":"m.text"},"ts":1603981726000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"and \"late\" reloads the page","msgtype":"m.text"},"ts":1603981740000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"unless it's a POST response","msgtype":"m.text"},"ts":1603981747000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: ok. with this change https://github.com/web-platform-tests/wpt/pull/24521/commits/08e66e7a5580e1750abea123806a026cd5ec667a , firefox no longer fetches the script in the \"page-load\" test","msgtype":"m.text"},"ts":1603981899000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: yeah, that look like it's working as expected","msgtype":"m.text"},"ts":1603981998000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: I don't understand why it doesn't speculatively fetch the script","msgtype":"m.text"},"ts":1603982259000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hmm. Yeah, the plaintext hasn't really happened at that point.","msgtype":"m.text"},"ts":1603982355000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I don't have an answer to that.","msgtype":"m.text"},"ts":1603982395000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: ok :) maybe it's a bug then","msgtype":"m.text"},"ts":1603982425000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I saw this and thought that there was an error in the browser implementation, but then I realized my battery was at 99% lol","msgtype":"m.emote"},"ts":1603984725000,"senderName":"EveryOS","senderId":"EveryOS@irc"},
{"content":{"body":"https://usercontent.irccloud-cdn.com/file/Q2wK8Hgf/image.png","msgtype":"m.text"},"ts":1603984735000,"senderName":"EveryOS","senderId":"EveryOS@irc"},
{"content":{"body":"Huh, IRC formatted my message weirdly","msgtype":"m.text"},"ts":1603984755000,"senderName":"EveryOS","senderId":"EveryOS@irc"},
{"content":{"body":"Lazy-loading fans may be interested in this tpac breakout session tomorrow: https://www.w3.org/2020/10/TPAC/breakout-schedule.html#intersectionobserver","msgtype":"m.text"},"ts":1604004762000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I haven't had much time to work on that DOM library I was writing (I've been busy). I'm currently on dispatching events, but I am not at home right now because I clock into work in a few minutes. Tomorrow I get a day off, so if I'm lucky, I might make some progress. I'm really wanting to get to the part where I implement nodes.","msgtype":"m.text"},"ts":1604008351000,"senderName":"EveryOS","senderId":"EveryOS@irc"},
{"content":{"body":"EveryOS: I assume you're aware of https://github.com/jsdom/jsdom ?","msgtype":"m.text"},"ts":1604008422000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"No, but I am actually using Java, not JS. But I just starred the repo in case it comes in handy.","msgtype":"m.text"},"ts":1604008572000,"senderName":"EveryOS","senderId":"EveryOS@irc"},
{"content":{"body":"Btw, the reason I don't just use the org.w3c package is that it appears outdated. It has methods that the spec specifically says should not exist, and that type of stuff.","msgtype":"m.text"},"ts":1604008638000,"senderName":"EveryOS","senderId":"EveryOS@irc"},
{"content":{"body":"I gotta clock in, so bye","msgtype":"m.text"},"ts":1604008799000,"senderName":"EveryOS","senderId":"EveryOS@irc"}
]