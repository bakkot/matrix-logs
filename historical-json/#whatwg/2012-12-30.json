[
{"content":{"body":"<!-- next section refers to previous section as \"previous section\" -->","msgtype":"m.text"},"ts":1356868999000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Glad we got that cleared.","msgtype":"m.text"},"ts":1356869166000,"senderName":"Velmont","senderId":"Velmont@irc"},
{"content":{"body":"Feel like reviewing some tests?","msgtype":"m.text"},"ts":1356869525000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"heycam|away: anything's possible","msgtype":"m.text"},"ts":1356873240000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"heycam|away: see https://www.w3.org/Bugs/Public/show_bug.cgi?id=20496","msgtype":"m.text"},"ts":1356898074000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"35,730 home pages (from top 50,000 sites) gathered yesterday, in 1 large zip file get it from http://www.webdevdata.org","msgtype":"m.text"},"ts":1356898151000,"senderName":"Stevef","senderId":"Stevef@irc"},
{"content":{"body":"me/ useful for revealing cowpaths and undermining arguments from authority","msgtype":"m.text"},"ts":1356898901000,"senderName":"Stevef","senderId":"Stevef@irc"},
{"content":{"body":"useful for revealing cowpaths and undermining arguments from authority","msgtype":"m.emote"},"ts":1356898976000,"senderName":"Stevef","senderId":"Stevef@irc"},
{"content":{"body":"SteveF - I prefer to think of evidence as outweighing (rather than undermining) arguments from authority. :)","msgtype":"m.text"},"ts":1356899136000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"tantek: yeah right, I used 'refuting' here https://twitter.com/stevefaulkner/status/285489160985382914 which I think is more fitting","msgtype":"m.text"},"ts":1356901076000,"senderName":"Stevef","senderId":"Stevef@irc"},
{"content":{"body":"thinks it would be great if a web company that has easy access to the sort of raw data that I have been collecting would make it available on a regular basis...","msgtype":"m.emote"},"ts":1356901226000,"senderName":"Stevef","senderId":"Stevef@irc"},
{"content":{"body":"ooh a CG too. (clicks Join)","msgtype":"m.text"},"ts":1356901379000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Hixie: if you want to treat Nan/Infinity different it seems you might need to do that in prose","msgtype":"m.text"},"ts":1356904355000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: unless we're going to introduce Nan and Infinity as values somehow so you can do (NaN or double)...","msgtype":"m.text"},"ts":1356904391000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: the video player thing, do you mean the way it seeks? It was annoying me to no end yesterday trying to find those bugs you referred to...","msgtype":"m.text"},"ts":1356905942000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: that has to be prose, but my point is just that the return value is always \"double\", not \"unrestricted double\" which is what the setter value has to be","msgtype":"m.text"},"ts":1356906932000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: yes, the way it seeks in particular","msgtype":"m.text"},"ts":1356906946000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: if the setter is more generic, it doesn't really matter","msgtype":"m.text"},"ts":1356906960000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"we could make all the attributes \"any\", too :-P","msgtype":"m.text"},"ts":1356906977000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: for readonly attributes, that's basically true :)","msgtype":"m.text"},"ts":1356906993000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(unless I'm missing something)","msgtype":"m.text"},"ts":1356907002000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"arv_: re es-discuss: does this mean the ArrayClass experiment has failed?","msgtype":"m.text"},"ts":1356907840000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"arv_: should we pursue something else instead? e.g. Hixie's toArray() suggestion?","msgtype":"m.text"},"ts":1356907859000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heycam: maybe we should have getattribute {type} {name}; and setattribute {type} {name}; for cases where they behave different? although that still does not help with PutForwards I guess...","msgtype":"m.text"},"ts":1356910260000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, maybe, I guess I'm not that fussed about the syntax particularly","msgtype":"m.text"},"ts":1356910292000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"annevk, I see the feature as \"the attribute actually has type X, but additional some values of other types are accepted when assigning and get converted to the appropriate value of type X, or handled in some other way\"","msgtype":"m.text"},"ts":1356910327000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"not really sure why it should be that controversial","msgtype":"m.text"},"ts":1356910351000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"I think it's mostly smaug____ that considers it controversial","msgtype":"m.text"},"ts":1356910397000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"though for everything but PutForwards one can just loosen the type as the prose already determines what is returned","msgtype":"m.text"},"ts":1356910459000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: bz and IIRC also sicking have been agains PutForwards","msgtype":"m.text"},"ts":1356910483000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"against","msgtype":"m.text"},"ts":1356910497000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"annevk_: the ArrayClass experiment?","msgtype":"m.text"},"ts":1356910572000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"heycam: btw https://mail.mozilla.org/pipermail/es-discuss/2012-December/027688.html (unclear per logs whether this got true)","msgtype":"m.text"},"ts":1356910638000,"senderName":"annevk_","senderId":"annevk_@irc"},
{"content":{"body":"s/true/through/","msgtype":"m.text"},"ts":1356910646000,"senderName":"annevk_","senderId":"annevk_@irc"},
{"content":{"body":"smaug____, I think asymmetric get/set types for attributes is dissimilar enough from PutForwards to consider it on its own merits","msgtype":"m.text"},"ts":1356910656000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"annevk_, oh interesting, will read","msgtype":"m.text"},"ts":1356910682000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"I'm not sure I understand its merits","msgtype":"m.text"},"ts":1356910683000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I think it just makes it clearer in the IDL that certain values will not be returned when getting the attribute","msgtype":"m.text"},"ts":1356910713000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"but it also gets around restrictions where we say e.g. sequences can't be the type of an attribute","msgtype":"m.text"},"ts":1356910730000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"it feels a bit odd if setting an attribute needs to run ctor of something taking the value as param","msgtype":"m.text"},"ts":1356910732000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"you could have it be allowed to be assigned to the attribute, as long as you return something different when getting","msgtype":"m.text"},"ts":1356910746000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"it is the creation-of-new-objects which is odd","msgtype":"m.text"},"ts":1356910786000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1356910791000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"so you'd rather have the author do an explicit `new FileList(sequenceOfBlobs)`?","msgtype":"m.text"},"ts":1356910809000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"values get converted all the time","msgtype":"m.text"},"ts":1356910857000,"senderName":"annevk_","senderId":"annevk_@irc"},
{"content":{"body":"e.g. 1 -> \"1\"","msgtype":"m.text"},"ts":1356910864000,"senderName":"annevk_","senderId":"annevk_@irc"},
{"content":{"body":"that is very different","msgtype":"m.text"},"ts":1356910872000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I don't see why","msgtype":"m.text"},"ts":1356910875000,"senderName":"annevk_","senderId":"annevk_@irc"},
{"content":{"body":"the restriction on sequence types for attributes is the only thing stopping writing `attribute (FileList? | sequence<blob>) files;`","msgtype":"m.text"},"ts":1356910878000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"and then having prose only ever return a value of type FileList","msgtype":"m.text"},"ts":1356910888000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"annevk: you certainly aren't creating new objects that way","msgtype":"m.text"},"ts":1356910947000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"is there any case when a new object is created automatically","msgtype":"m.text"},"ts":1356910971000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I don't really see value in differentiating primitives and objects","msgtype":"m.text"},"ts":1356910986000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: \"foo\".indexOf(\"a\") creates an object, if that counts","msgtype":"m.text"},"ts":1356911004000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"you'd want the same kind of behavior to apply to both","msgtype":"m.text"},"ts":1356911013000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think anne's point of 1 -> \"1\" is that this is the more general issue -- assigning one value, and getting a different value back if you get the attribute later","msgtype":"m.text"},"ts":1356911058000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: also, are there other use cases for this conversion?","msgtype":"m.text"},"ts":1356911088000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Hixie pointed out https://www.w3.org/Bugs/Public/show_bug.cgi?id=20496 earlier as another case that could use it","msgtype":"m.text"},"ts":1356911120000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"so you want to have some particular processing of Infinity/NaN when assigning, but you never want to return those values","msgtype":"m.text"},"ts":1356911141000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"you could just have `unrestricted double` as the type and in prose never return non-finite values","msgtype":"m.text"},"ts":1356911157000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"but it might be easier to understand for readers of the spec if it is in the idl","msgtype":"m.text"},"ts":1356911171000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"gsnedders: the email is about that, yes, and about how maybe we should introduce something like Array, but readonly, to solve it","msgtype":"m.text"},"ts":1356911301000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"do we actually have any interfaces defined with indexed property setters?","msgtype":"m.text"},"ts":1356911568000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"or are all our array-like interfaces read only","msgtype":"m.text"},"ts":1356911580000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1356911580000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"storage stuff","msgtype":"m.text"},"ts":1356911665000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"er, hmm","msgtype":"m.text"},"ts":1356911709000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1356911711000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"it is key-value","msgtype":"m.text"},"ts":1356911721000,"senderName":"smaug____","senderId":"smaug____@irc"}
]