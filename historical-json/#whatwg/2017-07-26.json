[
{"content":{"body":"smaug: I will work on upstreaming focus stuff to HTML & DOM","msgtype":"m.text"},"ts":1501058106000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"great","msgtype":"m.text"},"ts":1501058121000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"probably mostly to HTML","msgtype":"m.text"},"ts":1501059722000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"annevk, Domenic: what's the status of sync XHR? do we think it's actually ever going to be killed?","msgtype":"m.text"},"ts":1501081552000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"JakeA: how are you trying to measure memory in this test? https://cache-memory-test.glitch.me/","msgtype":"m.text"},"ts":1501081728000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"memory vs disk","msgtype":"m.text"},"ts":1501081731000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: poorly, unfortunately. I was taking processing time as an indication of what was being brought into JS. Chrome's memory devtools don't appear to be working as advertised here","msgtype":"m.text"},"ts":1501081797000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I'm being told in moz irc that we probably do have said magic to put back on disk","msgtype":"m.text"},"ts":1501081818000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Although I was told by our engineers at blob remains disk-backed in this case, and Andew said the same happens in moz","msgtype":"m.text"},"ts":1501081837000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yea, I'm wrong... https://searchfox.org/mozilla-central/source/dom/fetch/FetchConsumer.cpp#485","msgtype":"m.text"},"ts":1501081887000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: I thought we only did that for IDB... we grew this \"spill to file\" thing at some point in the last year or so I feel like","msgtype":"m.text"},"ts":1501081916000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: I don't understand why its a spec violation, though","msgtype":"m.text"},"ts":1501081951000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: Does \"read all the bytes\" not suggest that? https://fetch.spec.whatwg.org/#concept-body-consume-body","msgtype":"m.text"},"ts":1501082034000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: it suggests it will drain the source body stream... it doesn't say where they are read too","msgtype":"m.text"},"ts":1501082066000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"apparently we implemented the blob temp file thing for fetch in FF52 https://bugzilla.mozilla.org/show_bug.cgi?id=1312410","msgtype":"m.text"},"ts":1501082102000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: https://fetch.spec.whatwg.org/#concept-read-all-bytes-from-readablestream - that would suggest that the \"bytes\" variable here is on disk, is that ok?","msgtype":"m.text"},"ts":1501082160000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I mean, we can debate spec word smithing... but why is it a functional problem in practice?","msgtype":"m.text"},"ts":1501082218000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: I think our impression was that this was a non-observable thing that made the browser less crashy... win-win","msgtype":"m.text"},"ts":1501082244000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: and for what its worth, we *do* read it into a memory buffer, and we put it back on disk at the \"package data\" stage: https://fetch.spec.whatwg.org/#concept-body-package-data","msgtype":"m.text"},"ts":1501082317000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I want to make sure that you can get the final byte of a 1gb resource without bringing the 1gb into memory","msgtype":"m.text"},"ts":1501082334000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: ohhh, so Firefox will use 1gb of memory in this case?","msgtype":"m.text"},"ts":1501082348000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I think we probably stream to disk","msgtype":"m.text"},"ts":1501082358000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"but I'm not sure","msgtype":"m.text"},"ts":1501082363000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: looks like we read into memory until we hit 1MB and then start streaming to disk","msgtype":"m.text"},"ts":1501082599000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: so some amount of in-memory buffering will happen depending on read-speed vs write-speed, etc","msgtype":"m.text"},"ts":1501082627000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"but we should not use the full 1GB","msgtype":"m.text"},"ts":1501082637000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: its a bit sub-optimal that we read out of Cache API just to put back on disk... but Cache API does other things like decompressing, etc","msgtype":"m.text"},"ts":1501082663000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"in our implementation","msgtype":"m.text"},"ts":1501082667000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I think Chrome just points the blob at the same disk entry that the cache uses. I guess that means it can't really compress cache entries.","msgtype":"m.text"},"ts":1501082750000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: it can, its just more complicated... pretty sure we do that for IDB","msgtype":"m.text"},"ts":1501082777000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yeah, I was thinking of the amount of reading required to do blob.slice() in that case","msgtype":"m.text"},"ts":1501082848000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: we could probably figure out how to let the blob adopt the Cache API body stream... maybe I should file a bug on that","msgtype":"m.text"},"ts":1501082855000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: do you reckon this is just an implementation detail then, and not worth speccing?","msgtype":"m.text"},"ts":1501082888000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"That's where I'm leaning","msgtype":"m.text"},"ts":1501082893000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: sure, it would trigger a sequential read of the compressed stream which might spill back to disk... but you could avoid that until slice is called","msgtype":"m.text"},"ts":1501082901000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I guess you don't need to do anything until the blob is read","msgtype":"m.text"},"ts":1501082956000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I think so?  although the difference between file- and memory-backed blobs has been confusing for a while... it would be nice if Blob at least had a getter to say which it was","msgtype":"m.text"},"ts":1501082961000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"but I think that is more of a Blob issue","msgtype":"m.text"},"ts":1501082998000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: anyway, thanks for raising this... learned more about blobs","msgtype":"m.text"},"ts":1501083254000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I was thinking about polyfilling partial responses from the cache. I guess it's possible to polyfill without crashing the browser, it just may involve some disk copying","msgtype":"m.text"},"ts":1501083315000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: is this just because we don't have ReadableStream yet?","msgtype":"m.text"},"ts":1501084588000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: no, it seems like blob.slice() is a better way to handle this than streams. Eg, if I wanted to get the last 50k of a 1gb resource, it'd be inefficient to do that with streams","msgtype":"m.text"},"ts":1501084679000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: we should really add a skip() operation to ReadableStream","msgtype":"m.text"},"ts":1501084705000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: agreed. Or maybe add a seekable stream type","msgtype":"m.text"},"ts":1501084757000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"If it's disk-backed","msgtype":"m.text"},"ts":1501084770000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"But yeah, anything can have skip(bytes)","msgtype":"m.text"},"ts":1501084785000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I think trying to make ReadableStream have a backwards-capable seek would be too breaking at this point","msgtype":"m.text"},"ts":1501084812000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"there is some value in restricting the capabilities of the interface","msgtype":"m.text"},"ts":1501084824000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"something you don't hear often... \"Which is to say, IDB is the best and everyone should use it for everything.\"","msgtype":"m.text"},"ts":1501086293000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"hahaha","msgtype":"m.text"},"ts":1501086576000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I've promised to write a guide to IDB for years now and I will get to it at some point. It's really not that bad once you promisify it","msgtype":"m.text"},"ts":1501086617000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: sadly... https://bugzilla.mozilla.org/show_bug.cgi?id=1383029","msgtype":"m.text"},"ts":1501087878000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yeah, this is down to https://bugzilla.mozilla.org/show_bug.cgi?id=1193394#c1","msgtype":"m.text"},"ts":1501088206000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yea","msgtype":"m.text"},"ts":1501088216000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"sadly we have a lot of dumb internal tests that depend on our current broken behavior","msgtype":"m.text"},"ts":1501088230000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"You can still do the promises thing if you're only doing one thing per transaction","msgtype":"m.text"},"ts":1501088239000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"gsnedders: seems unlikely, but who knows","msgtype":"m.text"},"ts":1501089097000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: just, like, the text in the spec makes it sound like it will be removed","msgtype":"m.text"},"ts":1501089136000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: it's a bad enough feature for such a warning I think","msgtype":"m.text"},"ts":1501089175000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"now can't find the warning again","msgtype":"m.emote"},"ts":1501089185000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: https://xhr.spec.whatwg.org/#the-open()-method second box","msgtype":"m.text"},"ts":1501089210000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, found it now","msgtype":"m.text"},"ts":1501089224000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"for some reason thought that XHR was now in Fetch","msgtype":"m.text"},"ts":1501089230000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: that was a plan I had, but I never did it","msgtype":"m.text"},"ts":1501089703000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: Does `Assume Explicit For` prevent `link-for-hint` from working? I'd expected that combination to make [=foo=] look for [=hint/foo=], then [=/foo=] and then stop, but it seems to be searching for only [=/foo=].","msgtype":"m.text"},"ts":1501101237000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"I don't know, I'd have to check.","msgtype":"m.text"},"ts":1501101255000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It probably does prevent it tho.","msgtype":"m.text"},"ts":1501101263000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But you're right, it makes more sense for it to work.","msgtype":"m.text"},"ts":1501101281000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Should I file a bug, or did I just get what I deserve? ;)","msgtype":"m.text"},"ts":1501101281000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Cool. I'll file it.","msgtype":"m.text"},"ts":1501101286000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Fetch has \"user agents may, and are even encouraged to\". ... isn't that \"should\"?","msgtype":"m.text"},"ts":1501102200000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: I'd interpret SHOULD as a stronger statement than \"encouraged to\"","msgtype":"m.text"},"ts":1501104607000,"senderName":"gsnedders","senderId":"gsnedders@irc"}
]