[
{"content":{"body":"annevk: if/when you’re around (and not in the middle of working on something else), I wanted to ask you what exactly needs doing for https://github.com/whatwg/html/issues/5539#issuecomment-627952544 as far as updating the MDN articles","msgtype":"m.text"},"ts":1590739821000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"(either here on in MDN Web Docs on Mozilla Matrix)","msgtype":"m.text"},"ts":1590739861000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: basically, whether a document is in a secure context is a function of its top-level document and doesn't depend on the opener chain","msgtype":"m.text"},"ts":1590740022000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: so if http://example.com/ popups https://booyah.example/ the latter will be in a secure context","msgtype":"m.text"},"ts":1590740058000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: thanks for fixing that, happy to review","msgtype":"m.text"},"ts":1590740133000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1590740138000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"And I guess then we can close out the HTML issue","msgtype":"m.text"},"ts":1590740140000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1590740146000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"will try to get the changes made today","msgtype":"m.text"},"ts":1590740153000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"right now I’m reviewing the set of features in the HTML spec that are known not to have two implementations","msgtype":"m.text"},"ts":1590740274000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"starting from the raw list at https://w3c.github.io/mdn-spec-links/less-than-2.html?spec=html","msgtype":"m.text"},"ts":1590740289000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"...which has a number of false positives due to BCD having incomplete data","msgtype":"m.text"},"ts":1590740333000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so I need to update BCD for some of those features","msgtype":"m.text"},"ts":1590740353000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"navigator.mimeTypes for example","msgtype":"m.text"},"ts":1590740378000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"(not that any developers actually care about that at this point)","msgtype":"m.text"},"ts":1590740397000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Why is passing `undefined` or `null` supported in addEventListener?","msgtype":"m.text"},"ts":1590750300000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"I mean, `addEventListener('eventName', undefined)` :]?","msgtype":"m.text"},"ts":1590750311000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"benjamingr__: refactoring event tests seems somewhat reasonable, but it might be worth opening an issue first to discuss an approach","msgtype":"m.text"},"ts":1590750407000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hey, sure, so should I open an issue in the wpt repo?","msgtype":"m.text"},"ts":1590750450000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"benjamingr__: probably because not all user agents threw an exception there and adding exceptions later is hard","msgtype":"m.text"},"ts":1590750452000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"benjamingr__: yeah, that seems good","msgtype":"m.text"},"ts":1590750461000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"thanks, I will :]","msgtype":"m.text"},"ts":1590750472000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"benjamingr__: cc @smaug---- and @domenic I guess and me","msgtype":"m.text"},"ts":1590750479000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Opened, thanks a lot https://github.com/web-platform-tests/wpt/issues/23858","msgtype":"m.text"},"ts":1590750977000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"I'm still a bit confused about passive listeners, why is \"defaultPrevented\" a property of the event but passive a property of the listener? So the event listener keeps context regarding whether or not it's part of a passive event listener and if it is `preventDefault` is a no-op?","msgtype":"m.text"},"ts":1590752302000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"benjamingr__: passive listeners are a bit of a hack to allow UAs to dispatch events differently","msgtype":"m.text"},"ts":1590752411000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"benjamingr__: based on the listeners","msgtype":"m.text"},"ts":1590752418000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Is my understanding correct and the events keep internal state about whether preventDefault is being called from the context of a passive listener?","msgtype":"m.text"},"ts":1590752504000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"benjamingr__: well, the dispatcher can keep that state I think","msgtype":"m.text"},"ts":1590752545000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"benjamingr__: as it will have inspected the listeners in order to determine if it can dispatch a passive event","msgtype":"m.text"},"ts":1590752567000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"iirc","msgtype":"m.text"},"ts":1590752570000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it's been a while","msgtype":"m.text"},"ts":1590752573000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Thanks, I'll go digging through the spec and tests :] thanks a lot for the help btw, looking forward to having a universal spec compliant way to dispatch events and cancellation in JavaScript","msgtype":"m.text"},"ts":1590752623000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"Just checking, how bad would it be for Node to behave differently from `EventTarget` regarding `addEventListener('eventName', null)`? https://github.com/nodejs/node/pull/33637#pullrequestreview-420889677","msgtype":"m.text"},"ts":1590755108000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"benjamingr__: do you have a developer console equivalent?","msgtype":"m.text"},"ts":1590755227000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: We have `stdout` (and stderr for warnings) :]","msgtype":"m.text"},"ts":1590755282000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"I'd use that; I think as Domenic mentioned elsewhere, if you're not going for full compatibility, it'll just be confusing","msgtype":"m.text"},"ts":1590755286000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Use that to do what? Emit a warning for example?","msgtype":"m.text"},"ts":1590755355000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"benjamingr__: yes","msgtype":"m.text"},"ts":1590755369000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I  generally agree with Domenic (and that PoV). Would Node.js writing a warning to `stderr` for passing `undefined` or `null` as a second argument be allowed from a spec point of view?","msgtype":"m.text"},"ts":1590755437000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"benjamingr__: yeah, console is UI territory","msgtype":"m.text"},"ts":1590755478000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ok great, thanks again. I'll go ahead and suggest that in the issue and see if it helps.","msgtype":"m.text"},"ts":1590755506000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"Although I guess in Node.js it's probably observable from script? Bit icky, but still seems okay to me","msgtype":"m.text"},"ts":1590755522000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It is observable from the script though generally `stderr` is used for things that are not part of the program output (which is why Node emits warnings there). The downside is that the user won't likely see the warning in production but that's true for all warnings Node emits (because stdout is considered, well, output :])","msgtype":"m.text"},"ts":1590755678000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"Domenic: see also https://github.com/whatwg/storage/issues/95","msgtype":"m.text"},"ts":1590762318000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: still need to do Privacy/Security, maybe later, maybe next week","msgtype":"m.text"},"ts":1590762334000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: and not really sure what to do with 5 MiB, perhaps just leave that locally, but in a different place, closer to all the Storage infrastructure (or perhaps the proxy map)","msgtype":"m.text"},"ts":1590762371000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"concept-Storage-map*","msgtype":"m.text"},"ts":1590762384000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: makes sense. I'd appreciate more explicit links to the sections of the Storage Standard that you think contain the HTML text... it's not clear to me that Storage covers the same things, but I'm not the Storage editor.","msgtype":"m.text"},"ts":1590762673000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: feel free to add questions there","msgtype":"m.text"},"ts":1590765656000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hey, is https://dom.spec.whatwg.org/#window-current-event (window.event) fine not to implement in Node.js EventTarget? (Since it's marked  \"Legacy extensions\")","msgtype":"m.text"},"ts":1590793459000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"benjamingr__: yes, IMO. I would call it a separate API, similar to CustomEvent or MouseEvent.","msgtype":"m.text"},"ts":1590794561000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ack, thanks.","msgtype":"m.text"},"ts":1590794583000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"Also, practically speaking, it is mostly used by code in event handler attributes, e.g. `<body onclick=\"console.log(event.target)\">`. So I expect there to be very few interop issues that would come from omitting it.","msgtype":"m.text"},"ts":1590794604000,"senderName":"Domenic","senderId":"Domenic@irc"}
]