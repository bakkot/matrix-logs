[
{"content":{"body":"MikeSmith - standard rel=icon (still AFAIK) doesn't work in *mobile* Safari","msgtype":"m.text"},"ts":1482278610000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"if you have support / citation otherwise, would appreciate seeing it!","msgtype":"m.text"},"ts":1482278619000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"wow","msgtype":"m.text"},"ts":1482278629000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah it's an annoying wart","msgtype":"m.text"},"ts":1482278637000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"yeah nuts","msgtype":"m.text"},"ts":1482278645000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"wonder what reason they could possibly have for not adding support for standard rel=icon","msgtype":"m.text"},"ts":1482278677000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I can't think of any good reasons so I'm not going to speculate on malice / laziness.","msgtype":"m.text"},"ts":1482278864000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"annevk: https://github.com/whatwg/html/pull/2195","msgtype":"m.text"},"ts":1482310031000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: maybe foolip can review?","msgtype":"m.text"},"ts":1482310168000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: I'm technically not working the remainder of the week and only a bit next week","msgtype":"m.text"},"ts":1482310204000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok, sure. have a nice christmas annevk :-)","msgtype":"m.text"},"ts":1482310224000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"You too! ðŸŽ„","msgtype":"m.text"},"ts":1482310322000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: async_test(function(t) { runs the function synchronously, right?","msgtype":"m.text"},"ts":1482313463000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"smaug: yes","msgtype":"m.text"},"ts":1482313505000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"is there a reason we don't have data-dfn-type=\"element\" for only 14 elements in HTML, and not all of them?","msgtype":"m.text"},"ts":1482313563000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"s/don't/","msgtype":"m.text"},"ts":1482313569000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"huh, resource selection algorithm  is super hard to read","msgtype":"m.text"},"ts":1482315326000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"cancelling outer algorithms somewhere down deep in inner ones","msgtype":"m.text"},"ts":1482315352000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"and some wpt tests for it are racy","msgtype":"m.text"},"ts":1482315415000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"smaug: which tests?","msgtype":"m.text"},"ts":1482315581000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"resource-selection-pointer-remove-source.html","msgtype":"m.text"},"ts":1482315608000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"at least","msgtype":"m.text"},"ts":1482315614000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"smaug: the resource selection algorithm's synchronous section should run before the <script> executes, IIRC. So x1 should always get an error event. But x2 seems like it is racy, since the sync section ends for the first <source> and then it awaits a stable state again","msgtype":"m.text"},"ts":1482316091000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"exactly","msgtype":"m.text"},"ts":1482316113000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"one doesn't know whether event loop spins after </video>","msgtype":"m.text"},"ts":1482316138000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"filed https://github.com/w3c/web-platform-tests/issues/4376","msgtype":"m.text"},"ts":1482316578000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"in other news https://nerdydata.com/search looks pretty cool","msgtype":"m.text"},"ts":1482316624000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: I copied the microsyntax descriptions to https://github.com/validator/validator/wiki/Microsyntax-descriptions and marked https://wiki.whatwg.org/wiki/MicrosyntaxDescriptions as obsolete","msgtype":"m.text"},"ts":1482321714000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and I changed the checker to parse and use https://github.com/validator/validator/wiki/Microsyntax-descriptions from now on","msgtype":"m.text"},"ts":1482321748000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: ok","msgtype":"m.text"},"ts":1482321763000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"MikeSmith: looks like it needs some cleanup markup-wise","msgtype":"m.text"},"ts":1482321873000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yay wiki markup","msgtype":"m.text"},"ts":1482321902000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: do you happen to know about media attribute in <source>","msgtype":"m.text"},"ts":1482322426000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"in case of <video> being the parent element, WhatWG HTML and W3C HTML5 spec handle this case differently","msgtype":"m.text"},"ts":1482322458000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"or foolip","msgtype":"m.text"},"ts":1482322618000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"resource-selection-source-media.html seems to be related here","msgtype":"m.text"},"ts":1482322625000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"which is racy test, btw","msgtype":"m.text"},"ts":1482323011000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"smaug: we removed it from the spec","msgtype":"m.text"},"ts":1482323055000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: ok. apparently no implementation bugs were filed about it","msgtype":"m.text"},"ts":1482323088000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"at least Gecko","msgtype":"m.text"},"ts":1482323097000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"is just helping someone to go through failing media handling related tests","msgtype":"m.emote"},"ts":1482323113000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"smaug: this was a while ago, but i can file a bug for gecko","msgtype":"m.text"},"ts":1482323229000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: I think it is being filed","msgtype":"m.text"},"ts":1482323256000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"ah ok","msgtype":"m.text"},"ts":1482323265000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: rather annoying just to have this W3C HTML spec :)","msgtype":"m.text"},"ts":1482323274000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"which some people may accidentally even read","msgtype":"m.text"},"ts":1482323282000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"smaug: you can edit https://wiki.whatwg.org/wiki/W3C with concrete instances of it being annoying or wasting time","msgtype":"m.text"},"ts":1482323419000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: what kind of cleanup where?","msgtype":"m.text"},"ts":1482323448000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: &lt; should be <","msgtype":"m.text"},"ts":1482323460000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"MikeSmith: <nowiki>","msgtype":"m.text"},"ts":1482323468000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ah OK","msgtype":"m.text"},"ts":1482323482000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"will fix those","msgtype":"m.text"},"ts":1482323485000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I used pandoc to convert it. Itâ€™s very good but I guess it misses those","msgtype":"m.text"},"ts":1482323509000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"smaug: bug is https://www.w3.org/Bugs/Public/show_bug.cgi?id=19619","msgtype":"m.text"},"ts":1482323624000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1482323685000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"odd stuff there","msgtype":"m.text"},"ts":1482323734000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"why it was removed","msgtype":"m.text"},"ts":1482323737000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"oh well","msgtype":"m.text"},"ts":1482323739000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"zcorpan what is the most likely implementation of css encapsulation so that you can stop leakings of part of the html to the body, and from the body to parts of the html?","msgtype":"m.text"},"ts":1482328555000,"senderName":"inoas","senderId":"inoas@irc"},
{"content":{"body":"my 2 cents: imho, only this and wide http2 push adoption and the platform will get a huge boost in terms of reliabiltiy/maintainability and speed","msgtype":"m.text"},"ts":1482328616000,"senderName":"inoas","senderId":"inoas@irc"},
{"content":{"body":"inoas: i'm not sure i understand the question","msgtype":"m.text"},"ts":1482328631000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan currently you cannot isolate CSS to be only applied to parts of the DOM easily","msgtype":"m.text"},"ts":1482328651000,"senderName":"inoas","senderId":"inoas@irc"},
{"content":{"body":"and you cannot stop CSS that applies to the whole DOM from being applied to parts of the DOM easily","msgtype":"m.text"},"ts":1482328675000,"senderName":"inoas","senderId":"inoas@irc"},
{"content":{"body":"technologies like this try to workaround the issue: http://getbem.com/introduction/","msgtype":"m.text"},"ts":1482328732000,"senderName":"inoas","senderId":"inoas@irc"},
{"content":{"body":"but it creates a mess of classes and takes discipline","msgtype":"m.text"},"ts":1482328748000,"senderName":"inoas","senderId":"inoas@irc"},
{"content":{"body":"zcorpan: is my question clear now?","msgtype":"m.text"},"ts":1482328950000,"senderName":"inoas","senderId":"inoas@irc"},
{"content":{"body":"inoas: so basically scoped styles? plus resetting styles to UA defaults?","msgtype":"m.text"},"ts":1482328999000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"it should be obligatory that it does not leak outside and optional if you want to leak inside (e.g. not reset UA defaults)","msgtype":"m.text"},"ts":1482329036000,"senderName":"inoas","senderId":"inoas@irc"},
{"content":{"body":"it doesn't have to be the declarative shadow-dom or the scoped style tag","msgtype":"m.text"},"ts":1482329055000,"senderName":"inoas","senderId":"inoas@irc"},
{"content":{"body":"I am not religious here, but I am looking and hoping for a change that makes the BEM workaround (see above) obsolete","msgtype":"m.text"},"ts":1482329092000,"senderName":"inoas","senderId":"inoas@irc"},
{"content":{"body":"If you add HTTP2 server push into the mix, you can create awesome componentized sites","msgtype":"m.text"},"ts":1482329112000,"senderName":"inoas","senderId":"inoas@irc"},
{"content":{"body":"very clean separation of concerns, caching on HTTP tech, still only one request","msgtype":"m.text"},"ts":1482329132000,"senderName":"inoas","senderId":"inoas@irc"},
{"content":{"body":"inoas: i guess i would recommend compiling a list of use cases and requirements, with links to examples that would benefit or are working around the lack of this (like BEM), and list pros/cons of declarative shadow dom or other possible solutions","msgtype":"m.text"},"ts":1482329248000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"inoas: i have no idea what the most likely implementation is though :-)","msgtype":"m.text"},"ts":1482329275000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I really don't want to annoy - I just see there are huge gains for the average developers","msgtype":"m.text"},"ts":1482329290000,"senderName":"inoas","senderId":"inoas@irc"},
{"content":{"body":"e.g. a lot more speedy sites","msgtype":"m.text"},"ts":1482329302000,"senderName":"inoas","senderId":"inoas@irc"},
{"content":{"body":"i don't think anybody would be annoyed","msgtype":"m.text"},"ts":1482329351000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I don't know much about shadow-dom, the sexy part about a declarate interface to setting a shadow-dom root would be that those who embrace shadow-dom based web components would also get all the benefits because it is a unified solution","msgtype":"m.text"},"ts":1482329386000,"senderName":"inoas","senderId":"inoas@irc"},
{"content":{"body":"I read that the mode refers to the javascript of the component being able to read the parent dom, is that correct?","msgtype":"m.text"},"ts":1482329409000,"senderName":"inoas","senderId":"inoas@irc"},
{"content":{"body":"e.g. the javascript \"leaks outside\"","msgtype":"m.text"},"ts":1482329417000,"senderName":"inoas","senderId":"inoas@irc"},
{"content":{"body":"is the general dom able to read/write into the sub-tree of shadow-dom?","msgtype":"m.text"},"ts":1482329439000,"senderName":"inoas","senderId":"inoas@irc"},
{"content":{"body":"if latter is true, it would be able to \"leak inside\"","msgtype":"m.text"},"ts":1482329447000,"senderName":"inoas","senderId":"inoas@irc"},
{"content":{"body":"and for css the questions are the same and probabily the answers","msgtype":"m.text"},"ts":1482329461000,"senderName":"inoas","senderId":"inoas@irc"},
{"content":{"body":"i'm not a shadow dom expert, but there is an \"open\" and a \"closed\" mode that affects encapsulation","msgtype":"m.text"},"ts":1482329503000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"so cssMode would be required, which if set to open would inherit the outer CSS, else UA defaults","msgtype":"m.text"},"ts":1482329505000,"senderName":"inoas","senderId":"inoas@irc"},
{"content":{"body":"it could even use the same mode attribute, then you are forced however to either open js and css, or none.","msgtype":"m.text"},"ts":1482329528000,"senderName":"inoas","senderId":"inoas@irc"},
{"content":{"body":"if I want to open an issue any hints about what to name it and where to open? is github css wg ok?","msgtype":"m.text"},"ts":1482329624000,"senderName":"inoas","senderId":"inoas@irc"},
{"content":{"body":"https://github.com/w3c/csswg-drafts/issues","msgtype":"m.text"},"ts":1482329673000,"senderName":"inoas","senderId":"inoas@irc"},
{"content":{"body":"annevk: recently said there is little will to add anything to the html parser ... and that's where the whole endavour already ends... I really hope the core teams at whatwg and w3c can see the benefit (or have a lot better idea!)","msgtype":"m.text"},"ts":1482329727000,"senderName":"inoas","senderId":"inoas@irc"},
{"content":{"body":"inoas: csswg seems ok","msgtype":"m.text"},"ts":1482329822000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: Domenic: another spec question about document discarding...","msgtype":"m.text"},"ts":1482340889000,"senderName":"ajeffrey_","senderId":"ajeffrey_@irc"},
{"content":{"body":"in https://html.spec.whatwg.org/multipage/browsers.html#joint-session-history it says \"Entries in the joint session history are ordered chronologically by the time they were added to their respective session histories.\"","msgtype":"m.text"},"ts":1482340920000,"senderName":"ajeffrey_","senderId":"ajeffrey_@irc"},
{"content":{"body":"If an inactive document is discarded, then we traverse to it, which timestamp should we use?","msgtype":"m.text"},"ts":1482340959000,"senderName":"ajeffrey_","senderId":"ajeffrey_@irc"},
{"content":{"body":"I'm guessing we should use time timestamp of when the document was originally loaded,","msgtype":"m.text"},"ts":1482341000000,"senderName":"ajeffrey_","senderId":"ajeffrey_@irc"},
{"content":{"body":"otherwise we're going to get into an odd state where the session history order and timestamp order disagree with each other.","msgtype":"m.text"},"ts":1482341025000,"senderName":"ajeffrey_","senderId":"ajeffrey_@irc"},
{"content":{"body":"ajeffrey_: right, discarding doesn't reset \"the time they were added to their respective session histories\"","msgtype":"m.text"},"ts":1482341599000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: and neither does reloading?","msgtype":"m.text"},"ts":1482341666000,"senderName":"ajeffrey_","senderId":"ajeffrey_@irc"},
{"content":{"body":"ajeffrey_: IIRC reloading does do a navigation with replacement enabled which does replace the history entry with a new one","msgtype":"m.text"},"ts":1482341808000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: er, that sounds problematic.","msgtype":"m.text"},"ts":1482341835000,"senderName":"ajeffrey_","senderId":"ajeffrey_@irc"},
{"content":{"body":"Why?","msgtype":"m.text"},"ts":1482341847000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1482341857000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"do we not end up with a situation where the timestamp order disagrees with session history order?","msgtype":"m.text"},"ts":1482341858000,"senderName":"ajeffrey_","senderId":"ajeffrey_@irc"},
{"content":{"body":"My guess is that the chronological order is wrong","msgtype":"m.text"},"ts":1482341924000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"As the ordering is well-specified elsewhere","msgtype":"m.text"},"ts":1482341931000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(this is possibly an issue for reloading in general, not just as a result of discarding)","msgtype":"m.text"},"ts":1482341933000,"senderName":"ajeffrey_","senderId":"ajeffrey_@irc"},
{"content":{"body":"Or maybe \"added\" is meant to exclude the \"replaced\" case","msgtype":"m.text"},"ts":1482341962000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: where else is the joint session history order specified?","msgtype":"m.text"},"ts":1482341974000,"senderName":"ajeffrey_","senderId":"ajeffrey_@irc"},
{"content":{"body":"ajeffrey_: things are added to it one by one. You add things at the end","msgtype":"m.text"},"ts":1482341992000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The session history order is fine, it's the joint session history that is chronologically ordered.","msgtype":"m.text"},"ts":1482342004000,"senderName":"ajeffrey_","senderId":"ajeffrey_@irc"},
{"content":{"body":"Oh... /facepalm","msgtype":"m.text"},"ts":1482342015000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: :)","msgtype":"m.text"},"ts":1482342022000,"senderName":"ajeffrey_","senderId":"ajeffrey_@irc"},
{"content":{"body":"OK then my thing about reloading is probably wrong","msgtype":"m.text"},"ts":1482342029000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But hmm","msgtype":"m.text"},"ts":1482342036000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think the idea is that reloading shouldn't update the timestamp.","msgtype":"m.text"},"ts":1482342059000,"senderName":"ajeffrey_","senderId":"ajeffrey_@irc"},
{"content":{"body":"Yeah that seems likely","msgtype":"m.text"},"ts":1482342063000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"In general replacement should not update the timestamp I am pretty sure","msgtype":"m.text"},"ts":1482342071000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Wouldn't it be great if we added an explicit concept of timestamp to the spec??","msgtype":"m.text"},"ts":1482342089000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yes, there is an implicit timestamp in the jsh, it's just not explicitly discussed.","msgtype":"m.text"},"ts":1482342131000,"senderName":"ajeffrey_","senderId":"ajeffrey_@irc"},
{"content":{"body":"Domenic: should I file an issue?","msgtype":"m.text"},"ts":1482342147000,"senderName":"ajeffrey_","senderId":"ajeffrey_@irc"},
{"content":{"body":"ajeffrey_: I think it's all part of the \"update session history to match browsers\" issue","msgtype":"m.text"},"ts":1482342163000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Maybe add a comment there","msgtype":"m.text"},"ts":1482342166000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: do you know the issue number?","msgtype":"m.text"},"ts":1482342204000,"senderName":"ajeffrey_","senderId":"ajeffrey_@irc"},
{"content":{"body":"I can search for it","msgtype":"m.text"},"ts":1482342238000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://github.com/whatwg/html/issues/1454","msgtype":"m.text"},"ts":1482342250000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: thanks!","msgtype":"m.text"},"ts":1482342270000,"senderName":"ajeffrey_","senderId":"ajeffrey_@irc"},
{"content":{"body":"added comment https://github.com/whatwg/html/issues/1454#issuecomment-268592522.","msgtype":"m.text"},"ts":1482342579000,"senderName":"ajeffrey_","senderId":"ajeffrey_@irc"},
{"content":{"body":"https://github.com/w3c/csswg-drafts/issues/711#issuecomment-265861196","msgtype":"m.text"},"ts":1482342739000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: your comments on https://github.com/heycam/webidl/issues/188#issuecomment-268601139 appreciated","msgtype":"m.text"},"ts":1482345407000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: they all seem like good questions. I was kind of hoping we could just get away with telling everyone to define their own toJSON(), but maybe that's not convenient enough.","msgtype":"m.text"},"ts":1482345453000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The mixin idea is intriguing","msgtype":"m.text"},"ts":1482345479000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I wonder what bzbarsky thinks of it","msgtype":"m.text"},"ts":1482345484000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: there's an added issue with toJSON, though: the return value of serializing operations is currently defined with a mix of IDL types and what are de facto infra types.","msgtype":"m.text"},"ts":1482345551000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1482345567000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess asking spec authors to create their own dictionaries or similar is annoying","msgtype":"m.text"},"ts":1482345582000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"well but they only need to do that if they need something custom","msgtype":"m.text"},"ts":1482345610000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so if you need a custom version: define a dictionary type; define a custom toJSON() that returns an instance of that","msgtype":"m.text"},"ts":1482345624000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: well, we could get away with using record<DOMString, any> or the like I guess","msgtype":"m.text"},"ts":1482345629000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"(or returns a string or other JSON type)","msgtype":"m.text"},"ts":1482345632000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hmm true","msgtype":"m.text"},"ts":1482345635000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But the shape is fixed generally so dictionary is better","msgtype":"m.text"},"ts":1482345644000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The question is how to make it easy for the case where people just want to serialize all attributes","msgtype":"m.text"},"ts":1482345655000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that's my suggestion #4","msgtype":"m.text"},"ts":1482345673000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"just say: toJSON defaults to that behavior","msgtype":"m.text"},"ts":1482345693000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1482345705000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess I would probably want something explicit, like = default","msgtype":"m.text"},"ts":1482345714000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"because otherwise people will go searching for the definition in prose and not find it","msgtype":"m.text"},"ts":1482345728000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"well, you could just have an abstract operation in WebIDL and refer to it in prose","msgtype":"m.text"},"ts":1482345761000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Yeah I guess so","msgtype":"m.text"},"ts":1482345813000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It feels like you either want to use an abstract serialization mechanism throughout or only use toJSON.","msgtype":"m.text"},"ts":1482345884000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Mixing the two creates a lot of questions when they collide in the inheritance tree.","msgtype":"m.text"},"ts":1482345937000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: anyway, thanks for your feedback. I'll wait for bz's comments and move on from there.","msgtype":"m.text"},"ts":1482346068000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Yeah. I think you are on the right track. Custom toJSON, either completely custom or delegating to some helper abstract op in Web IDL.","msgtype":"m.text"},"ts":1482346099000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: wrt to https://github.com/heycam/webidl/issues/255, what are your thoughts?","msgtype":"m.text"},"ts":1482353077000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Hello. Is here an expert for html5 input elements?","msgtype":"m.text"},"ts":1482353110000,"senderName":"secureSuggest","senderId":"secureSuggest@irc"},
{"content":{"body":"tobie: https://github.com/heycam/webidl/pull/257#issuecomment-267100851","msgtype":"m.text"},"ts":1482353158000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think I have a suggestion for extending the standard, so I'd like to find someone who wants to talk about that topic.","msgtype":"m.text"},"ts":1482353171000,"senderName":"secureSuggest","senderId":"secureSuggest@irc"},
{"content":{"body":"Domenic: yeah, saw that. Is your suggestion to fix the language that originally made a distinction between the DFN and IDL type and no longer does?","msgtype":"m.text"},"ts":1482353300000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: yeah I guess so. I don't see what the distinction buys us.","msgtype":"m.text"},"ts":1482353318000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: it's sort of easier to reason about (at least that was my conclusion last week).","msgtype":"m.text"},"ts":1482353351000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Hmm I don't really see how.","msgtype":"m.text"},"ts":1482353380000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: well for one the fact that we're referring to it in plural multiple times throughout the spec was a good sign we were talking about the DOM exceptions and not DOMException","msgtype":"m.text"},"ts":1482353478000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I thought it just meant we were talking about DOMException instances","msgtype":"m.text"},"ts":1482353497000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I don't know what a \"DOM exception\" is, except a DOMException instance.","msgtype":"m.text"},"ts":1482353510000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: a DOM Exception is anyone of \"XXXError\" DOMException.","msgtype":"m.text"},"ts":1482353551000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: that doesn't really help; what are those? Are they DOMExceptions?","msgtype":"m.text"},"ts":1482353581000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"*a DOM exception...","msgtype":"m.text"},"ts":1482353581000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"they're an abstract concept, much like simple exceptions.","msgtype":"m.text"},"ts":1482353618000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"simple exceptions are not an abstract concept","msgtype":"m.text"},"ts":1482353633000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"They're one of four-ish specific types","msgtype":"m.text"},"ts":1482353641000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"a TypeError is a simple exception","msgtype":"m.text"},"ts":1482353651000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(5)","msgtype":"m.text"},"ts":1482353707000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I just can't see anything in https://github.com/heycam/webidl/pull/257/files which is improved by the distinction","msgtype":"m.text"},"ts":1482353740000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"In general I can't envision a situation where it's helpful to say \"no, that's not a DOMException, that's a DOM exception\"","msgtype":"m.text"},"ts":1482353754000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1482353783000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Ok. I'll see if I can fix the non-sensical sentences instead.","msgtype":"m.text"},"ts":1482353901000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Then work on adding the ability to set props.","msgtype":"m.text"},"ts":1482353972000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"set props?","msgtype":"m.text"},"ts":1482353980000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"On DOMexceptions","msgtype":"m.text"},"ts":1482354016000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"oh, create new exception types you mean?","msgtype":"m.text"},"ts":1482354024000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Or maybe setting own props on normal DOMException types would be fine, interesting","msgtype":"m.text"},"ts":1482354041000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah. I think that was the conclusion from TPAC.","msgtype":"m.text"},"ts":1482354064000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Huh OK, I don't remember that at all, but I'm sure that's just my memory :)","msgtype":"m.text"},"ts":1482354083000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It is nice and simple","msgtype":"m.text"},"ts":1482354095000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah. It's in the notes.","msgtype":"m.text"},"ts":1482354121000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1482354139000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You said pretty much the same thing when it was mentioned then. :D","msgtype":"m.text"},"ts":1482354143000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I need to think through the slots a bit more.","msgtype":"m.text"},"ts":1482354189000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Understand the end goal better.","msgtype":"m.text"},"ts":1482354212000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: I'm confused, is it offset-before (https://drafts.csswg.org/css-position/#logical-box-offsets-beaso) or block-start (https://drafts.csswg.org/css-logical-props/#logical-controls) ?","msgtype":"m.text"},"ts":1482360157000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: hey, in https://github.com/whatwg/html/issues/1102, I canâ€™t quite tell, are you advocating merging <input capture> attribute into HTML?","msgtype":"m.text"},"ts":1482360263000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"TabAtkins: nevermind, cbeisinger found https://drafts.csswg.org/css-logical-props/#propdef-offset-block-start for me and told me css-position is outdated","msgtype":"m.text"},"ts":1482360457000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"weinig: yeah, at the very least least cross-reference","msgtype":"m.text"},"ts":1482360784000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok, cool","msgtype":"m.text"},"ts":1482360801000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"All your HTML belong to HTML","msgtype":"m.text"},"ts":1482360829000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: agreed","msgtype":"m.text"},"ts":1482360851000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"Domenic: yt?","msgtype":"m.text"},"ts":1482364315000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: yep","msgtype":"m.text"},"ts":1482364322000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: yt?","msgtype":"m.text"},"ts":1482364322000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: so, do you know anything about navigating to a fragment?","msgtype":"m.text"},"ts":1482364344000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: as far as i read the spec, it seems to imply that it needs to happen in the next task","msgtype":"m.text"},"ts":1482364356000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: mehhhh i reviewed some patches on that section of the spec at some point. Let's dig in...","msgtype":"m.text"},"ts":1482364378000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: however, this is what we implement nor do we intend to implement this.","msgtype":"m.text"},"ts":1482364380000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"not* what we implement","msgtype":"m.text"},"ts":1482364386000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: scrolling on iOS happen completely asynchronously","msgtype":"m.text"},"ts":1482364401000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: tracing through spec links it seems like we end up in https://drafts.csswg.org/cssom-view/#perform-a-scroll","msgtype":"m.text"},"ts":1482364485000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"rniwa: it sounds like maybe what we want here is to give UAs license to always do a smooth scroll?","msgtype":"m.text"},"ts":1482364509000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: or maybe that the definition of \"instant scroll\" needs to change","msgtype":"m.text"},"ts":1482364572000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: yeah maybe that would make sense... so if you do document.body.scrollTo(x, y), document.body.scrollTop === x; that will generally be false in WebKit?","msgtype":"m.text"},"ts":1482364610000,"senderName":"Domenic","senderId":"Domenic@irc"}
]