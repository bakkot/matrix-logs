[
{"content":{"body":"es-discuss proves the trivial topic thing once again... \"How should we refer to JavaScript?\" Oooh, lets write 50 emails within twelve hours!","msgtype":"m.text"},"ts":1422000615000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"let's","msgtype":"m.text"},"ts":1422000628000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i wonder if Spartan has any use of quirks.spec.whatwg.org","msgtype":"m.text"},"ts":1422000690000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Probably, it's just a major refactoring of Trident from what I heard","msgtype":"m.text"},"ts":1422001134000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Though the details of what that means are somewhat unclear","msgtype":"m.text"},"ts":1422001146000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i mean since they got rid of their document modes","msgtype":"m.text"},"ts":1422001661000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"<!--[if IE ]>","msgtype":"m.text"},"ts":1422008019000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"<!doctype html>","msgtype":"m.text"},"ts":1422008019000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"<![endif]-->","msgtype":"m.text"},"ts":1422008019000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">","msgtype":"m.text"},"ts":1422008020000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"view-source:http://www.telegraph.co.uk/","msgtype":"m.text"},"ts":1422008023000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hahaha","msgtype":"m.text"},"ts":1422008741000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"hsivonen: time to update https://hsivonen.fi/doctype/ about IE11 and Edge?","msgtype":"m.text"},"ts":1422011904000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hsivonen: also s/(which in invalid in HTML5)//g","msgtype":"m.text"},"ts":1422012139000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hmm, i had forgotten about Chrome Frame","msgtype":"m.text"},"ts":1422012216000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: yeah, I should find the time to update the doctype article","msgtype":"m.text"},"ts":1422015212000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Just made a riotjs timer demo -> http://jsbin.com/dopedo/","msgtype":"m.emote"},"ts":1422015582000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"annevk: I don't really understand the issue or question in https://github.com/slightlyoff/ServiceWorker/issues/607#issuecomment-71176152","msgtype":"m.text"},"ts":1422028836000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: we want Response to have some mutable state","msgtype":"m.text"},"ts":1422031580000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: question is mostly whether respondWith should halt the mutability","msgtype":"m.text"},"ts":1422031595000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: what about \"do we expect the Response object to be cloned at that point in a JavaScript-only world?\" ? That part seems especially confusing, possibly because I don't understand respondWith","msgtype":"m.text"},"ts":1422031913000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: so you have document A and service worker SW","msgtype":"m.text"},"ts":1422031950000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: SW has a Response object and hands it back to some fetch from A","msgtype":"m.text"},"ts":1422031963000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: how would that work?","msgtype":"m.text"},"ts":1422031977000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"hands it back to some fetch from A\" does this involve running any code in A? Or is the code entirely in the SW?","msgtype":"m.text"},"ts":1422032040000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I was trying to reason from a platform-implemented-in-JS-perspective","msgtype":"m.text"},"ts":1422032164000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, me too :)","msgtype":"m.text"},"ts":1422032173000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: well for A to do a fetch, code has to run, no?","msgtype":"m.text"},"ts":1422032187000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok, so A's JS code does fetch(req)","msgtype":"m.text"},"ts":1422032206000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"SW's js code does .onfetch = function (e) { e.respondWith(new Response(...)); }","msgtype":"m.text"},"ts":1422032233000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"A's JS code gets back a Response object from the promise callback","msgtype":"m.text"},"ts":1422032281000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Is the question then about the relation between the `new Response(...)` in SW and the Response A gets back in the promise callback?","msgtype":"m.text"},"ts":1422032299000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah","msgtype":"m.text"},"ts":1422032809000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: and in particular up until what point mutations to it in SW affect what A sees","msgtype":"m.text"},"ts":1422032845000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: OK so in that case I think they're definitely cloned, even in pure-JS land. Since it's across \"vats\" which are super-separated.","msgtype":"m.text"},"ts":1422032860000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: so the question would be when exactly the cloning happens I guess.","msgtype":"m.text"},"ts":1422032871000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: and whether the object remaining in SW needs to be guarded at some point to further mutations","msgtype":"m.text"},"ts":1422032877000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I would naively guess the cloning happens when the promise you pass to respondWith() has its IDL-registered set of callbacks run","msgtype":"m.text"},"ts":1422032974000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah agreed","msgtype":"m.text"},"ts":1422033120000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I arrived at that conclusion too","msgtype":"m.text"},"ts":1422033127000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: just not sure how to write this out","msgtype":"m.text"},"ts":1422033134000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: should respondWith set a flag on Response that prevents further mutation?","msgtype":"m.text"},"ts":1422033151000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Meh, I'm not sure users need to be protected that much. Is this the first mutable state on Response?","msgtype":"m.text"},"ts":1422033228000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You'd have to define that the internal slot gets cloned as part of structured clone, for sure.","msgtype":"m.text"},"ts":1422033259000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So we can't call devs authors, but users is okay?","msgtype":"m.text"},"ts":1422033356000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"authors, editors, biographers, depends what they're developing :u","msgtype":"m.text"},"ts":1422033571000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Blah I am used to saying \"users\" from all the io.js I've been doing recently","msgtype":"m.text"},"ts":1422033784000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins, you should bikeshed FileAPI some time","msgtype":"m.text"},"ts":1422035217000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I’m a little unclear on DOM4’s .append method. Will it apply to just Element or Node as well (for document.append usage)?","msgtype":"m.text"},"ts":1422037759000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"i believe that applies to the ParentNode partial interface","msgtype":"m.text"},"ts":1422038120000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"so Element, Document and DocumentFragment","msgtype":"m.text"},"ts":1422038143000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: excellent.","msgtype":"m.text"},"ts":1422038364000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Does that mean I would find it on the Node prototype? Or only on ParentNode?","msgtype":"m.text"},"ts":1422038407000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"well there's no ParentNode exposed to Js","msgtype":"m.text"},"ts":1422038436000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"you'd see the methods of ParentNode in the interfaces i listed above","msgtype":"m.text"},"ts":1422038454000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"What does the spec say?","msgtype":"m.text"},"ts":1422038597000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: that’s what I was having trouble following and decided to asked about.","msgtype":"m.text"},"ts":1422038646000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Document implements ParentNode; DocumentFragment implements ParentNode; Element implements ParentNode;","msgtype":"m.text"},"ts":1422038692000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"So it's on Document.prototype, DocumentFragment.prototype, and Element.prototype","msgtype":"m.text"},"ts":1422038717000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"eg, if you wanted to polyfill it, you'd have to do it for each of those","msgtype":"m.text"},"ts":1422038720000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"That’s very helpful. Thanks.","msgtype":"m.text"},"ts":1422038743000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Relevant spec is https://heycam.github.io/webidl/#es-implements-statements","msgtype":"m.text"},"ts":1422038864000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: Where's it stored?","msgtype":"m.text"},"ts":1422039212000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I also really wanna Bikeshed DOM, as there's always tons of links to that from these JS-heavy specs.","msgtype":"m.text"},"ts":1422039357000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It's gotten a lot easier to link to non-Bikeshedded specs now, but still not 0 effort, so I have work to do.","msgtype":"m.text"},"ts":1422039419000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Nice close, caitp.","msgtype":"m.text"},"ts":1422039565000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"huh?","msgtype":"m.text"},"ts":1422039583000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"https://github.com/angular/angular.js/issues/9967 ?","msgtype":"m.text"},"ts":1422039663000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"anyone on this channel know what the current state of the art is wrt. browsers communicating w/ native apps? If I want my website to trigger a native app to handle a payment, for example. What would folks suggest?","msgtype":"m.text"},"ts":1422039687000,"senderName":"manu","senderId":"manu@irc"},
{"content":{"body":"heh, it probably wasn't going to happen","msgtype":"m.text"},"ts":1422039700000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: they do it over at https://octane.github.io/promise/tests/browser.html","msgtype":"m.text"},"ts":1422039740000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"so, browser page sends JSON data to native app, JSON data is processed by native app and response is sent back to browser page.","msgtype":"m.text"},"ts":1422039743000,"senderName":"manu","senderId":"manu@irc"},
{"content":{"body":"is postMessage() + offline mode the \"best\" way to accomplish something like this nowadays?","msgtype":"m.text"},"ts":1422039762000,"senderName":"manu","senderId":"manu@irc"},
{"content":{"body":"(given that web intents is dead?)","msgtype":"m.text"},"ts":1422039847000,"senderName":"manu","senderId":"manu@irc"},
{"content":{"body":"Would this be a good doc to fork if I wanted to suggest features?","msgtype":"m.text"},"ts":1422042166000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"^ https://github.com/WebReflection/dom4","msgtype":"m.text"},"ts":1422042358000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"WRONG","msgtype":"m.text"},"ts":1422042370000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Ahem https://github.com/whatwg/dom","msgtype":"m.text"},"ts":1422042389000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"When did replace become replaceWith? How can I keep up to date with these changes?","msgtype":"m.text"},"ts":1422042524000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"just a few days ago JonathanNeal","msgtype":"m.text"},"ts":1422042851000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"JonathanNeal: https://github.com/whatwg/dom/commits/master seems like a good way to do so.  There's even RSS: https://feedly.com/i/subscription/feed/https://github.com/whatwg/dom/commits/master.atom","msgtype":"m.text"},"ts":1422042852000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"@Domenic great you just tell me where I can stuff forEach =D","msgtype":"m.text"},"ts":1422043224000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"JonathanNeal: already there: https://dom.spec.whatwg.org/#collections:-elements","msgtype":"m.text"},"ts":1422043243000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So, for polyfilling, Elements can mirror to NodeList? And HTMLCollection is the older, living collection version, right?","msgtype":"m.text"},"ts":1422043346000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"I don't know what \"mirror to NodeList\" means","msgtype":"m.text"},"ts":1422043415000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Until I see global.Elements, I can expect Elements = NodeList?","msgtype":"m.text"},"ts":1422043449000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"The main difference between NodeList and HTMLCollection is the former contains nodes and the latter contains elements","msgtype":"m.text"},"ts":1422043450000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"No, you cannot... they are different things entirely.","msgtype":"m.text"},"ts":1422043462000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Okay, so querySelectorAll and childNodes will still return NodeList or will they return Elements?","msgtype":"m.text"},"ts":1422043531000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"They will return NodeList","msgtype":"m.text"},"ts":1422043546000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Which can never have forEach per https://stackoverflow.com/questions/13433799/why-doesnt-nodelist-have-foreach/27024188#27024188","msgtype":"m.text"},"ts":1422043562000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"There’s this line in the spec “It's the new NodeList / HTMLCollection.”","msgtype":"m.text"},"ts":1422043564000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Yes. That doesn't change what other things return.","msgtype":"m.text"},"ts":1422043582000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Having it on query but not nodeList will probably bum folks out.","msgtype":"m.text"},"ts":1422043666000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Despite the concat bug.","msgtype":"m.text"},"ts":1422043688000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"The hope is in the beautiful future you won't be seeing many NodeLists","msgtype":"m.text"},"ts":1422043727000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"How does that happen? Are there significant changes to DOM traversing coming?","msgtype":"m.text"},"ts":1422043773000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Well .queryAll() will take care of many cases","msgtype":"m.text"},"ts":1422043934000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ah, so like queryAll(':nth-child(n)’) ?","msgtype":"m.text"},"ts":1422043942000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"I... don't know why you would ever do that.","msgtype":"m.text"},"ts":1422043971000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I … want a Elements collection. =)","msgtype":"m.text"},"ts":1422043991000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"what elements are represented by :nth-child(n)","msgtype":"m.text"},"ts":1422044004000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Is that the same as \"> *\"","msgtype":"m.text"},"ts":1422044009000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Sure, either selector.","msgtype":"m.text"},"ts":1422044025000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"No I think it's the same as \"*\"","msgtype":"m.text"},"ts":1422044025000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But yes, in general, use .queryAll(\"> *\") instead of .children, etc.","msgtype":"m.text"},"ts":1422044080000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So, folks would need to queryAll(‘>*’) ?","msgtype":"m.text"},"ts":1422044081000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Maybe we add more aliases once the very basic part of the idea proves its worth","msgtype":"m.text"},"ts":1422044103000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"although with children and childNodes it's already getting kind of crowded in there","msgtype":"m.text"},"ts":1422044120000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"And this is to avoid the thing with named properties on HTMLCollection and concat treating non-array-iterables weird?","msgtype":"m.text"},"ts":1422044143000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"yeah basically. stated more generally, to avoid the problem where making NodeList or HTMLCollection subclass Array breaks the web.","msgtype":"m.text"},"ts":1422044177000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You also get benefits that .queryAll(\"> *\") actually works, whereas .querySelectorAll(\"> *\") throws, because of the slightly-better way in which queryAll interprets selectors","msgtype":"m.text"},"ts":1422044218000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I’ve been eager for queryAll since Resig blogged about the issues with querySelectorAll.","msgtype":"m.text"},"ts":1422044331000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"I am surprised browsers weren’t faster to adopt it, but I guess it’s a win for the Elements class.","msgtype":"m.text"},"ts":1422044355000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"They're waiting for ES6 subclassing to work","msgtype":"m.text"},"ts":1422044496000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: :nth-child(n) is identical to \"*\".","msgtype":"m.text"},"ts":1422044540000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Except for specificity, which doesn't matter here. ^_^","msgtype":"m.text"},"ts":1422044547000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I just wanted to write something worse than *, is all.","msgtype":"m.text"},"ts":1422044575000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Anything going on spec-wise with event listeners / handlers or event delegation?","msgtype":"m.text"},"ts":1422046212000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Anyone know where the File API source is kept?  Can't find if there's a github or something for it.","msgtype":"m.text"},"ts":1422048269000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"probably in a file system","msgtype":"m.text"},"ts":1422048334000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"You lose 1 point for purposeful obtuseness.","msgtype":"m.text"},"ts":1422048352000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"File / file? too obv? sorry.","msgtype":"m.text"},"ts":1422048373000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"No, no, I got it. You still lose the point.","msgtype":"m.text"},"ts":1422048389000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I wanna Bikeshed it, but dunno where it's kept; I'd vastly prefer messing with the source over the generated output.","msgtype":"m.text"},"ts":1422048428000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: Could I Bikeshed DOM?","msgtype":"m.text"},"ts":1422049010000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hey, we might all have opinions on bikeshedding that should be discussed before you go and bikeshed.","msgtype":"m.text"},"ts":1422049200000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Not allowed.","msgtype":"m.text"},"ts":1422049208000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]