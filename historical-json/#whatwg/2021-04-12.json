[
{"content":{"body":"annevk: Would you mind merging https://github.com/web-platform-tests/wpt/pull/26740 ?","msgtype":"m.text"},"ts":1618217349000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"andreubotella: you got it","msgtype":"m.text"},"ts":1618218434000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh, I see now that it was marked as needs spec decision, but maybe that happened while I was away?","msgtype":"m.text"},"ts":1618218459000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: There wasn't a lot of work done on this while you were OOO, but it seemed like there was some consensus in doing things that way","msgtype":"m.text"},"ts":1618218603000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"I'm messing around with the render blocking status of resources, and confused by the \"non-blocking\" script flag in HTML: https://html.spec.whatwg.org/multipage/scripting.html#non-blocking","msgtype":"m.text"},"ts":1618218979000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"It seems like when dynamically adding script resources and setting their async attr to true, their non_blocking is unset","msgtype":"m.text"},"ts":1618218980000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"and I'm trying to understand why that would be the case..","msgtype":"m.text"},"ts":1618219132000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"^^ JakeA","msgtype":"m.text"},"ts":1618219172000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"from memory, that bit of the spec is really confusing","msgtype":"m.text"},"ts":1618219223000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I think it's kind of overloaded as a bit of bookkeeping, and the non_blocking flag is set later","msgtype":"m.text"},"ts":1618219244000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"It doesn't in our impl as far as I can tell","msgtype":"m.text"},"ts":1618219807000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"(or maybe it's set after I report the render blocking status)","msgtype":"m.text"},"ts":1618219826000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"I guess my question is: should dynamic scripts with async=true be materially different than dynamic scripts with no async attribute?","msgtype":"m.text"},"ts":1618219874000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"in terms of execution order, priority, etc","msgtype":"m.text"},"ts":1618219894000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"welcome back annevk! when you have time I want to tie loose ends with FETCH/RT (https://github.com/whatwg/fetch/pull/1202 for now)","msgtype":"m.text"},"ts":1618220187000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"@yoav I don't think they should be different","msgtype":"m.text"},"ts":1618220717000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: ok, so there's no way to \"turn off\" the blocking nature of a dynamic script once you touched it?","msgtype":"m.text"},"ts":1618220770000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"once you touched its async attribute","msgtype":"m.text"},"ts":1618220787000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: I don't think so. async=false is still non-blocking, but it changes execution order","msgtype":"m.text"},"ts":1618220808000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"it may be \"non-blocking\" but its non-blocking flag is unset","msgtype":"m.text"},"ts":1618220847000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"(which caused me some confusion)","msgtype":"m.text"},"ts":1618220860000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yeah, I get confused by that too","msgtype":"m.text"},"ts":1618220873000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: when you get a chance, https://github.com/w3c/ServiceWorker/pull/1575 is ready for another look","msgtype":"m.text"},"ts":1618228015000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: hey, I hope I'll get to it by Wednesday, maybe tomorrow; there's a lot","msgtype":"m.text"},"ts":1618237727000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: sure, whenever you get to it. thanks.","msgtype":"m.text"},"ts":1618237757000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"annevk: thoughts on https://github.com/WICG/app-history/issues/71 would be much appreciated; JakeA and I seem to have different ideas from creis about the boundaries of cross-origin isolation and extra perspective would be great.","msgtype":"m.text"},"ts":1618240426000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I guess these URLs would not leak with the current history API because the parent process manages them?","msgtype":"m.text"},"ts":1618240756000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: and they are not directly exposed?","msgtype":"m.text"},"ts":1618240765000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, it seems like the question is whether same-origin URLs are sensitive","msgtype":"m.text"},"ts":1618240781000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: if so, creis has a point","msgtype":"m.text"},"ts":1618240783000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Like, should we have some sub-origin concept where URLs that are same-origin but COI are considered sensitive from the non-COI parts of the origin...","msgtype":"m.text"},"ts":1618240835000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: so say you are on example.com/sensitive-id and the navigate to example.com/ which includes an ad, and the former protects itself with COOP+COEP and also prevents referrer leaking, then the latter would now be able to obtain something new","msgtype":"m.text"},"ts":1618240940000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yes. If we consider example.com/sensitive-id and example.com to be in an adverserial relationship then indeed something leaks. I just kind of thought we never did that, because the origin was our security boundary.","msgtype":"m.text"},"ts":1618240979000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: well example.com includes an ad, perhaps via <script> and doesn't use COOP+COEP so it can be Spectre-read","msgtype":"m.text"},"ts":1618241011000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: so is the idea that in general same-origin sites need to be protected from reading each other now, i.e. origin is no longer the security boundary but instead agent cluster key is?","msgtype":"m.text"},"ts":1618241057000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: so example.com/ itself is not the adversary, but the ad is, I guess the ad is generally problematic for read access to history","msgtype":"m.text"},"ts":1618241062000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well if the ad is cross-origin it can't access parent.appHistory.entries()","msgtype":"m.text"},"ts":1618241085000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I don't think so, I'm just trying to make sense of what information is being exposed","msgtype":"m.text"},"ts":1618241087000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess it could Spectre parent.appHistory.entries() though in non-OOPIF browsers.","msgtype":"m.text"},"ts":1618241103000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: a lot of ads get included through <script>, but yeah, a lot of stuff would be vulnerable then","msgtype":"m.text"},"ts":1618241109000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I think there is something to be said for willing to be excluded from history, similar to referrer, I don't think it necessarily ties to COOP+COEP","msgtype":"m.text"},"ts":1618241170000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah that makes a bit more sense to me...","msgtype":"m.text"},"ts":1618241249000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"appHistory.entries() can only be Spectre'd if it's possible with low res timers","msgtype":"m.text"},"ts":1618241317000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"We could have a header that forces a new session on navigation (as defined in https://github.com/whatwg/html/issues/6356). That would limit app history","msgtype":"m.text"},"ts":1618241412000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"But it all seems risky without true sub-origins","msgtype":"m.text"},"ts":1618241427000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I left a summary of sorts in a comment","msgtype":"m.text"},"ts":1618243076000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: Google Docs at least doesn't seem to care about leaking the URL to itself","msgtype":"m.text"},"ts":1618243763000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, in general I'd be surprised if same-origin pages were trying to prevent other parts of the origin within a single user's history from learning their URLs...","msgtype":"m.text"},"ts":1618243797000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I can see how it's more concerning though as depending on how much the user browses around on your origin it could be quite some interesting data you normally might not keep client-side","msgtype":"m.text"},"ts":1618243890000,"senderName":"annevk","senderId":"annevk@irc"}
]