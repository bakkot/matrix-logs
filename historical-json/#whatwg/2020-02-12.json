[
{"content":{"body":"annevk: I think the idea is to tell host environments that they're wrong if they do something like [Unforgeable]. So I'm not sure what it'd mean in practice. https://github.com/Agoric/proposal-preserve-virtualizability","msgtype":"m.text"},"ts":1581503017000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: ah, Agoric","msgtype":"m.text"},"ts":1581503151000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"they did make a positive shoutout to annevk 's work making WebIDL in terms of the JS object model","msgtype":"m.text"},"ts":1581503200000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Wait, why are they writing EcmaScript?","msgtype":"m.text"},"ts":1581503201000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what do you mean?","msgtype":"m.text"},"ts":1581503216000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I thought it was ECMAScript","msgtype":"m.text"},"ts":1581503235000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, it is. I guess this could be a PR? But IMO the higher priority PR would be saying exactly what the proposal would mean","msgtype":"m.text"},"ts":1581503277000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Oh I see, the whole thing is generally quite sloppy about casing","msgtype":"m.text"},"ts":1581503282000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I like how Mark et al first went through great trouble to get ECMAScript to match Host capabilities and now they want to limit what Hosts can do","msgtype":"m.text"},"ts":1581503366000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If I had these goals I might put more effort into IDL I suppose","msgtype":"m.text"},"ts":1581503434000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"In terms of limiting what hosts can introduce and influencing the people that can help with that, it's a good place","msgtype":"m.text"},"ts":1581503510000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm trying to convince Mark that he should try to build consensus with web people if he wants to influence the web, rather than put prohibitions into the JS spec saying the web is wrong","msgtype":"m.text"},"ts":1581505093000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"but, sounds like marking [Unforgeable] as legacy would be a good way to influence things, yeah","msgtype":"m.text"},"ts":1581505129000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"looks like Trusted Types makes pretty heavy use of Unforgeable. Is this what we want? https://w3c.github.io/webappsec-trusted-types/dist/spec/","msgtype":"m.text"},"ts":1581505187000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: dunno, https://github.com/mozilla/standards-positions/issues/20","msgtype":"m.text"},"ts":1581505368000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"littledan: I had not looked deeply at the APIs there, mostly on when code would run","msgtype":"m.text"},"ts":1581505398000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: This doesn't seem specific to a Mozilla position, so I filed https://github.com/w3c/webappsec-trusted-types/issues/257","msgtype":"m.text"},"ts":1581505911000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: thanks","msgtype":"m.text"},"ts":1581505952000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"there were some earlier ideas about trusted types which had to do with enforcement of the literal-ness of strings. I really liked that approach. This has evolved into TC39's `Array.isTemplateObject` proposal, which could be used to build a TT policy and set of template tags that checks that strings were literals created with a particular tag.","msgtype":"m.text"},"ts":1581506092000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"the concern was, restricting entirely to literal strings if the CSP policy is on would be too inflexible to work in practice, so this may be one element of a more detailed policy","msgtype":"m.text"},"ts":1581506121000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"(and the other concern was a misunderstanding about whether such literal-ness checks would be possible through TC39--I think the current progress of `Array.isTemplateObject` shows that it is possible, but I think this wasn't clear for a while.)","msgtype":"m.text"},"ts":1581506194000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"andreubotella: I'll take a stab at that string issue","msgtype":"m.text"},"ts":1581511110000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I see. I was gonna try and glance at the usages of \"length\" in some of the specs linked in the wiki.","msgtype":"m.text"},"ts":1581512179000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"andreubotella: that sounds great","msgtype":"m.text"},"ts":1581512287000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"andreubotella: I'm mostly leaning towards replacing any usages of string's length with code unit length or code point length and then removing both concepts of length","msgtype":"m.text"},"ts":1581512337000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"andreubotella: and I guess if we keep the single word length around it will have to mean code unit length as otherwise it's too confusing with JS","msgtype":"m.text"},"ts":1581512381000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wouldn't be opposed to just removing both concepts, but I'd prefer keeping length as code unit length.","msgtype":"m.text"},"ts":1581512451000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"I could go for length and code point length too, let's see what Domenic and Addison think","msgtype":"m.text"},"ts":1581512841000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Right","msgtype":"m.text"},"ts":1581513091000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"annevk: Thanks a bunch for all of the reviews and design discussions recently. Glad to have lazy load landed!","msgtype":"m.text"},"ts":1581518829000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1581518979000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: if you have some advice for https://github.com/web-platform-tests/wpt/pull/21146 that'd be cool; I haven't worked a lot with templating before and the whole thing ends up looking rather messy even though there's not a whole lot of duplication left","msgtype":"m.text"},"ts":1581524850000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Will take a look, hmm","msgtype":"m.text"},"ts":1581525111000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"In general in tests I favor duplication/explicitness over clever loops/templating","msgtype":"m.text"},"ts":1581525134000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: yeah I guess that would be my advice, is to just have explicit files with the tests (maybe one file per test), instead of using JavaScript to create strings repeatedly. If you really need to then you can write a Python/Node.js script to generate the tests but the actual test files would be easier to understand if they were not templated.","msgtype":"m.text"},"ts":1581525360000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://testing.googleblog.com/2019/12/testing-on-toilet-tests-too-dry-make.html","msgtype":"m.text"},"ts":1581525360000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I don't really agree with that","msgtype":"m.text"},"ts":1581525609000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"OK, well, it's kind of standard engineering best practice, but, I'm not going to block tests merging over it.","msgtype":"m.text"},"ts":1581525634000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"To some extent sure, but verifying for correctness is also relevant over a series of tests","msgtype":"m.text"},"ts":1581525635000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And then a loop can help to verify there's no copypasta somewhere","msgtype":"m.text"},"ts":1581525658000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So can code generation, if that's the higher priority than auditability","msgtype":"m.text"},"ts":1581525679000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The point though is that loops without tests are bug-factories","msgtype":"m.text"},"ts":1581525699000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So using them in tests, which are themselves untested, is not great","msgtype":"m.text"},"ts":1581525707000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Also, this isn't using loops","msgtype":"m.text"},"ts":1581525908000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"True, yeah, I was going to say, loops can be fairly easy to understand...","msgtype":"m.text"},"ts":1581525930000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"This templating though, I just have no idea how many tests are being generated.","msgtype":"m.text"},"ts":1581525941000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(Do you?)","msgtype":"m.text"},"ts":1581525946000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"18 iirc","msgtype":"m.text"},"ts":1581526112000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"5 * 2 for blobs and 4 * 2 for datas","msgtype":"m.text"},"ts":1581526141000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"OK, well, I guess if one person understands the tests, that's something","msgtype":"m.text"},"ts":1581526189000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1581526303000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: intuitively speaking what does the loop in process a navigate fetch do? Is it following redirects through the location header?","msgtype":"m.text"},"ts":1581526788000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: for HTTP URLs, yes","msgtype":"m.text"},"ts":1581527646000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: non-HTTP in a location is post-loop atm","msgtype":"m.text"},"ts":1581527668000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Cool. I think it'd be a bit clearer if \"location URL\" was typographically \"`Location` URL\"","msgtype":"m.text"},"ts":1581527674000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'll open a fetch issue","msgtype":"m.text"},"ts":1581527688000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: well it’s a type","msgtype":"m.text"},"ts":1581527700000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Isn't it a field of response?","msgtype":"m.text"},"ts":1581527721000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: and Fetch has processed the value","msgtype":"m.text"},"ts":1581527721000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: sure but it’s not the Location header","msgtype":"m.text"},"ts":1581527742000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah I'm just saying \"location\" is pretty ambiguous, I didn't know you were talking about the location header","msgtype":"m.text"},"ts":1581527746000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Okay, add it to the existing refactoring issue for that field?","msgtype":"m.text"},"ts":1581527778000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Meh, I guess if I just clicked on the dfn, it'd be clear enough","msgtype":"m.text"},"ts":1581527778000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Nah I changed my mind, things don't need to be 100% clear for people who are too lazy to click on <dfn>s when they are confused :)","msgtype":"m.text"},"ts":1581527802000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: quick review on https://github.com/whatwg/html/pull/5212 ? littledan already approved so mostly editorial","msgtype":"m.text"},"ts":1581528479000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: you got it","msgtype":"m.text"},"ts":1581529401000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Also, agreed that we need to define a user-initiated navigation to a data URL. Maybe the time has finally come to try to sort out again if source browsing context can finally become source document","msgtype":"m.text"},"ts":1581530670000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And then also what to do if it's null","msgtype":"m.text"},"ts":1581530699000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That'd be fun :)","msgtype":"m.text"},"ts":1581530788000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So much yak shaving around COOP+COEP/Spectre, but yeah, it's mostly good; still a bit scared of history, but I've been thinking of more concretely writing down what browsers are reportedly doing as some kind of model description","msgtype":"m.text"},"ts":1581531015000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I mean these are kind of your favorite yaks to shave; seems good to have an excuse to work on it :)","msgtype":"m.text"},"ts":1581531944000,"senderName":"Domenic","senderId":"Domenic@irc"}
]