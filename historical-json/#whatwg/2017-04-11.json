[
{"content":{"body":"botie, forget context","msgtype":"m.text"},"ts":1491873408000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I forgot context","msgtype":"m.text"},"ts":1491873408000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"TabAtkins: Domenic thanks for the tip on <{link/rel/serviceworker}>, will update the https://github.com/whatwg/html/pull/2517#issuecomment-293070580 PR right now","msgtype":"m.text"},"ts":1491873707000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Bikeshed rocks","msgtype":"m.text"},"ts":1491873745000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"'s entry settings object alarm goes off (re: wanderview's link)","msgtype":"m.emote"},"ts":1491873853000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: that error message was written based on old spec text I believe","msgtype":"m.text"},"ts":1491873890000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"and we haven","msgtype":"m.text"},"ts":1491873901000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"we haven't implemented the new spec text yet for the multi-global tests you wrote","msgtype":"m.text"},"ts":1491873919000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Êúâ‰∫∫ÂêóÔºü","msgtype":"m.text"},"ts":1491885439000,"senderName":"HTH-GG","senderId":"HTH-GG@irc"},
{"content":{"body":"anyone thereÔºü","msgtype":"m.text"},"ts":1491885463000,"senderName":"HTH-GG","senderId":"HTH-GG@irc"},
{"content":{"body":"aklein: we waited for two years on TC39 not looking at the problem much ourselves","msgtype":"m.text"},"ts":1491887573000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aklein: when we then started looking after third state et al failed we found several things that could be tightly coupled in a rather nice way","msgtype":"m.text"},"ts":1491887630000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aklein: and would not have been possible with the TC39 proposals","msgtype":"m.text"},"ts":1491887664000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aklein: and then a subset of that functionality got extracted as a set of base classes since it turned out we did want it in multiple places","msgtype":"m.text"},"ts":1491887765000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aklein: that last one was rather recent","msgtype":"m.text"},"ts":1491887787000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: nothing I can help with right? I believe we removed all the exception \"footguns\"","msgtype":"m.text"},"ts":1491887848000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://github.com/Fyrd/caniuse/issues/885#issuecomment-293136872","msgtype":"m.text"},"ts":1491892758000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://caniuse.com/ üéâ","msgtype":"m.text"},"ts":1491892801000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"It seems really slow","msgtype":"m.text"},"ts":1491900372000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1491901436000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"same here","msgtype":"m.text"},"ts":1491901440000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"loads slow","msgtype":"m.text"},"ts":1491901444000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: do you still care about the HTML4 validation modes in v.nu code?","msgtype":"m.text"},"ts":1491907690000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: nope","msgtype":"m.text"},"ts":1491907801000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: thanks","msgtype":"m.text"},"ts":1491907813000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"planning to yank them?","msgtype":"m.text"},"ts":1491907827000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"if so, happy to help","msgtype":"m.text"},"ts":1491907834000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: very possibly","msgtype":"m.text"},"ts":1491907837000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1491907846000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I'm currently trying to make the parser go faster, and I'm wondering if I should keep the HTML4-related flags on the attribute names","msgtype":"m.text"},"ts":1491907869000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1491907886000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah especially if it would be a performance gain, no reason to keep them","msgtype":"m.text"},"ts":1491907907000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"good times. the parser knows about https://msdn.microsoft.com/en-us/library/ms533706(v=vs.85).aspx Can't even remember why.","msgtype":"m.text"},"ts":1491908299000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"apparently because HTML 4.01 reserves it for future use!","msgtype":"m.text"},"ts":1491908466000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"dataformatas I always read that as \"data formatas\", not \"data format as\"","msgtype":"m.text"},"ts":1491908530000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"me too","msgtype":"m.text"},"ts":1491908558000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"veryverythickmathspace","msgtype":"m.text"},"ts":1491908594000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Domenic: your definition of \"agent\" was wrong too","msgtype":"m.text"},"ts":1491910758000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: a user agent is allowed to have one event loop for all its browsing contexts","msgtype":"m.text"},"ts":1491910776000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: do we just want to make that disallowed since it cannot be observed if a user agent does that or do we actually want to work around it some other way?","msgtype":"m.text"},"ts":1491910813000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: what ECMAScript calls the \"executing thread\" is what we call the event loop","msgtype":"m.text"},"ts":1491912127000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: right, I was just mentioning it hit a relatively large site unfortunately","msgtype":"m.text"},"ts":1491915842000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"and I guess asking JakeA if they had plans to impl the footgun fixes","msgtype":"m.text"},"ts":1491915873000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I'll chase it","msgtype":"m.text"},"ts":1491916017000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"maybe its fixed in canary?  I only tested in release chrome... although I don't remember seeing a chromium issue for it","msgtype":"m.text"},"ts":1491916104000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Reminder to self: don't volunteer for seemingly trivial tasks","msgtype":"m.text"},"ts":1491919447000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I have more detailed nits on the Abort stuff I think from a quick skim, but I'll wait a bit for more high-level feedback first","msgtype":"m.text"},"ts":1491920052000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: overall though it seems ready enough to me to determine implementation interest and write tests","msgtype":"m.text"},"ts":1491920099000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Cool. I just pushed some more to the fetch branch. Will fix the nits","msgtype":"m.text"},"ts":1491920151000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I guess I would like to have it explained why we normalize to FetchSignal","msgtype":"m.text"},"ts":1491920234000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: not in spec, here or in a comment on the PR is fine","msgtype":"m.text"},"ts":1491920254000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I was worried that devs might write code expecting request.signal to be a particular type, and get caught out when it turns out to be another type for a rare code path","msgtype":"m.text"},"ts":1491920315000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I guess the signal doesn't have methods though","msgtype":"m.text"},"ts":1491920348000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"But if they expect .priority to be there & be a number","msgtype":"m.text"},"ts":1491920395000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: if they don't pass one in themselves it'll just be null, no?","msgtype":"m.text"},"ts":1491920400000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: and if they pass one in themselves it should be somewhat clear what they get","msgtype":"m.text"},"ts":1491920431000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I was thinking of cases where they get the request object from elsewhere","msgtype":"m.text"},"ts":1491920439000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yeah okay, I guess it's okay","msgtype":"m.text"},"ts":1491920484000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: should I remove FetchController?","msgtype":"m.text"},"ts":1491920519000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I guess we don't need it","msgtype":"m.text"},"ts":1491920525000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: you cannot get a FetchSignal otherwise and that would mean you always get an allocation each time you invoke fetch() with a signal","msgtype":"m.text"},"ts":1491920563000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hah, although if we start with FetchSignal without .priority, developers are going to have to test for its existence anyway","msgtype":"m.text"},"ts":1491920564000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: good point","msgtype":"m.text"},"ts":1491920574000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: maybe just drop it entirely then","msgtype":"m.text"},"ts":1491920581000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: agreed, I'll remove the casting","msgtype":"m.text"},"ts":1491920602000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"pffft wish I'd figured that out early","msgtype":"m.text"},"ts":1491920614000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Well, you've learned something I'm sure","msgtype":"m.text"},"ts":1491920640000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1491920656000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"the only way Artur Janc could have a cooler name is if his first name were Antti","msgtype":"m.text"},"ts":1491922025000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: I think it might be time to disallow that because SABs make it observable","msgtype":"m.text"},"ts":1491926671000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It seems related to how I had to delete the sequential consistency guarantee from early in the spec","msgtype":"m.text"},"ts":1491926689000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: 1) apparently an Agent is not an event loop, but maybe SAB still makes it observable somehow? If so, that seems bad?","msgtype":"m.text"},"ts":1491928769000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I am still pretty sure an agent is an event loop.","msgtype":"m.text"},"ts":1491928779000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I just talked at length with lth in jslang and he told me that was wrong","msgtype":"m.text"},"ts":1491928798000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah i think he is wrong :)","msgtype":"m.text"},"ts":1491928804000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"sigh","msgtype":"m.text"},"ts":1491928813000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i know :-/","msgtype":"m.text"},"ts":1491928821000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it was very surprising to wake up to find out the creator of agents thinks they are just redundant with realms","msgtype":"m.text"},"ts":1491928832000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: 2) I noticed that JavaScript has consistency requirements for Agent clusters and when I ported that requirement over to HTML WebKit folks blocked it","msgtype":"m.text"},"ts":1491928843000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, those were unilaterally added by lth without cross-browser agreement i guess","msgtype":"m.text"},"ts":1491928864000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"we should probably raise that in tc39","msgtype":"m.text"},"ts":1491928883000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: in particular, those agent cluster requirements would apply to when you kill workers and such","msgtype":"m.text"},"ts":1491928885000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"since i don't think the jsc folks realized what was being put in the spec","msgtype":"m.text"},"ts":1491928899000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and they should talk to their webkit teammates","msgtype":"m.text"},"ts":1491928904000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"more sigh","msgtype":"m.text"},"ts":1491928908000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If someone wants to introduce a new platform feature they should really work it through all the way","msgtype":"m.text"},"ts":1491928931000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We should try to make that a requirement of sorts, you can't just land something in ecma262 and call it a day","msgtype":"m.text"},"ts":1491928953000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"At least not something with obvious Host implications","msgtype":"m.text"},"ts":1491928968000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: re: cancellation. hypothetically, had ES shipped some cancellation thing a year ago, would fetch use it? or would you have said \"no, we need this to mesh well with events\"?","msgtype":"m.text"},"ts":1491929226000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: I suspect we would have used it","msgtype":"m.text"},"ts":1491929261000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aklein: but a year ago we also had a pretty poor understanding of what this could look like","msgtype":"m.text"},"ts":1491929289000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aklein: so we might have just gone down the fastline of adding cancelation since folks are waiting on that (and have been for over two years now)","msgtype":"m.text"},"ts":1491929328000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: oh, other question from yesterday. you said \"observables are gone\"...what was that in reference to?","msgtype":"m.text"},"ts":1491929434000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: I forgot who I got that from, but I got the distinct impression that it didn't have sufficient interest from implementers and the only host consumer might be events, and we could also solve events on our own","msgtype":"m.text"},"ts":1491929511000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aklein: I got the impression there was not sufficient need to add it as a primitive to the core language","msgtype":"m.text"},"ts":1491929538000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aklein: and so browsers wouldn't ship it","msgtype":"m.text"},"ts":1491929560000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: huh, I wonder if that's what you took away from our conversation","msgtype":"m.text"},"ts":1491929588000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: could be or maybe from Domenic, my memory is not super clear on it so maybe I'm just wrong","msgtype":"m.text"},"ts":1491929626000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: myself, as an implementer, I'm certainly cautious to add new core things to the language. but I think there is still interest in the committee, including at least one implementer","msgtype":"m.text"},"ts":1491929647000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"(not that memory is ever clear...)","msgtype":"m.text"},"ts":1491929649000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aklein: okay, I have been blocking a bit on it in DOM as well as earlier indications TC39 might do some event thing (that was long ago though), but nothing materialized thus far and it does seem nice to make the event API a little better soonish","msgtype":"m.text"},"ts":1491929751000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aklein: we got most of jQuery covered","msgtype":"m.text"},"ts":1491929762000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Jafar is the person to talk to about whether it's dead or not. he hasn't been able to make it to the last few meetings, so it keeps getting dropped off the agenda.","msgtype":"m.text"},"ts":1491929803000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"annevk: but this cancellation is indeed an interesting place to re-raise the event question","msgtype":"m.text"},"ts":1491929850000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: it's somewhat problematic that stuff needs to be actively lobbied through a committee and host concerns are generally not cared much for","msgtype":"m.text"},"ts":1491930416000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess that's too unspecific, but I've noticed this with jobs, SharedArrayBuffer (see what's an agent?), and maybe also things like observables","msgtype":"m.text"},"ts":1491930546000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You really can only make a case when you're in the room or have someone in the room that knows the full argument","msgtype":"m.text"},"ts":1491930580000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I guess the silver lining is that even though I based things on settings objects, what I wrote down is easily convertible and more accurate in the worker edge cases (I think!)","msgtype":"m.text"},"ts":1491931651000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: but with awb's comment I'm becoming somewhat surprised I've led myself be deluded that much, since I was involved in a bunch of the previous discussions","msgtype":"m.text"},"ts":1491931715000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: awb's comment seems about right to me. In particular the \"The realms in the set are private to the Agent and may not be accessible to any other agent.\" seems to break the 1:1ness","msgtype":"m.text"},"ts":1491932221000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(as I expected)","msgtype":"m.text"},"ts":1491932243000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah, I guess I just thought when lth told me that they revamped the whole concept somehow","msgtype":"m.text"},"ts":1491932780000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: anyway, glad I filed the bug","msgtype":"m.text"},"ts":1491932805000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, agreed","msgtype":"m.text"},"ts":1491932826000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I also like awb's suggestions of actually defining the internals in much more detail","msgtype":"m.text"},"ts":1491932898000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah honestly i thought at least some of those were already defined but i guess i haven't read the agents spec recently","msgtype":"m.text"},"ts":1491932915000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it sounds like people have great misunderstanding about passive listeners","msgtype":"m.text"},"ts":1491932937000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"that they somehow magically make performance good everywhere","msgtype":"m.text"},"ts":1491932956000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"I wonder what the source on https://twitter.com/antimattur/status/851850917662117888 is","msgtype":"m.text"},"ts":1491933014000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"smaug: oh my, not totally unexpected, but still","msgtype":"m.text"},"ts":1491933183000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: let me know when you find it","msgtype":"m.text"},"ts":1491933526000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I don't think there's any general fix here. cross-cutting concerns are cross-cutting. this comes up in plenty of places other than ES <-> HTML/DOM","msgtype":"m.text"},"ts":1491933866000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"annevk: in this case, I suspect that Lars's \"document\" just doesn't match your concept of \"document\". need to go catch up on the thread","msgtype":"m.text"},"ts":1491936750000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: I recommend reading the jslang backlog, we discussed it in depth","msgtype":"m.text"},"ts":1491940331000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, I see that this conversation is split across several media","msgtype":"m.text"},"ts":1491940880000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"annevk: having read all that, still seems like this is a miscommunication, not a fundamental flaw. hopefully the github issue will help sort out the communication issues","msgtype":"m.text"},"ts":1491941567000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"yes, i am also leaning toward miscommunication","msgtype":"m.text"},"ts":1491941591000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins or anyone: is there no default \"W3C\" boilerplate? In particular I am pretty sure CC0/OWFa is not correct when I put \"Group: W3C\"","msgtype":"m.text"},"ts":1491947866000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"There is not, no.","msgtype":"m.text"},"ts":1491947875000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So you're just getting the default boilerplate with that group.","msgtype":"m.text"},"ts":1491947883000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hmm so if i want to write a spec without a group i need to submit a bikeshed PR for that group adding all the boilerplate? :-/","msgtype":"m.text"},"ts":1491947928000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(There's no such thing as a generic W3C spec; everything's produced under a group.)","msgtype":"m.text"},"ts":1491947930000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"s/\"without a group\"/for a group that isn't in Bikeshed's tree yet","msgtype":"m.text"},"ts":1491947947000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Nah, you can add the boilerplate locally in your spec folder.","msgtype":"m.text"},"ts":1491947948000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Well OK, that's slightly better, but still a lot of yak-shaving","msgtype":"m.text"},"ts":1491947966000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess I don't have any better suggestion though, just complaints","msgtype":"m.text"},"ts":1491947983000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It's... the minimum amount to actually publish a valid W3C spec?","msgtype":"m.text"},"ts":1491947986000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I guess the issue is I don't want to publish a valid W3C spec at this point, I just want to publish something that isn't under a license that'll get me in trouble.","msgtype":"m.text"},"ts":1491948011000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(in trouble when I do want to go through all the work of actually publishing, that is)","msgtype":"m.text"},"ts":1491948026000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Swap out the copyright.include locally, then. Just put in an \"all rights reserved\" or something for now.","msgtype":"m.text"},"ts":1491948041000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: Which group is it in? Can you use WICG?","msgtype":"m.text"},"ts":1491948043000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Always easy to loosen things.","msgtype":"m.text"},"ts":1491948048000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jyasskin: web payments","msgtype":"m.text"},"ts":1491948048000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: copyright.include, roger roger.","msgtype":"m.text"},"ts":1491948058000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: And you can do that actually inside your spec.","msgtype":"m.text"},"ts":1491948078000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"<div boilerplate=copyright>All rights reserved</div> should work.","msgtype":"m.text"},"ts":1491948088000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Seem to be in good shape. Thanks as always for the help.","msgtype":"m.text"},"ts":1491948463000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: wasn't there a way to tell Bikeshed how much indentation I plan on using? Can't find it searching for \"indent\" in the docs","msgtype":"m.text"},"ts":1491948727000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Ah, hm, it's not documented. It's \"Indent: <integer>\"","msgtype":"m.text"},"ts":1491951237000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: have a moment for a question or two about the new extended attributes on types in WebIDL?","msgtype":"m.text"},"ts":1491952003000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"might be the wrong dominic :(","msgtype":"m.text"},"ts":1491952018000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"nope, got it right!","msgtype":"m.text"},"ts":1491952043000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"basically, the question is, int the case of something like","msgtype":"m.text"},"ts":1491952178000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"[Clamp] attribute long foo;","msgtype":"m.text"},"ts":1491952197000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"should the [Clamp] be in annotated type of foo","msgtype":"m.text"},"ts":1491952236000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"The https://heycam.github.io/webidl/#idl-type-extended-attribute-associated-with algorithm stiplilates that is should for union, argument, dictionary and typedef productions, but not for attributes","msgtype":"m.text"},"ts":1491952279000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"tobie: perhaps you know","msgtype":"m.text"},"ts":1491952348000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"weinig: back from dinner! Let's see","msgtype":"m.text"},"ts":1491953221000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: hi there","msgtype":"m.text"},"ts":1491953229000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"weinig: so the idea is that that is now an error since [Clamp] cannot be used except on types. We need to go update all the specs to do attribute [Clamp] long foo;","msgtype":"m.text"},"ts":1491953243000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'm sorry we didn't do that immediately :(","msgtype":"m.text"},"ts":1491953273000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: ok, I‚Äôm not sure there are any","msgtype":"m.text"},"ts":1491953287000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"I think there might be some for [TreatNullAs], but yeah, I guess it is kind of rare in general","msgtype":"m.text"},"ts":1491953317000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I couldn‚Äôt immediately find any use like that in real use, only our tests","msgtype":"m.text"},"ts":1491953319000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"nods","msgtype":"m.emote"},"ts":1491953326000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"The more common case is [X] optional Y -> optional [X] Y","msgtype":"m.text"},"ts":1491953328000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"in arguments lists","msgtype":"m.text"},"ts":1491953334000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yes, is that still allowed?","msgtype":"m.text"},"ts":1491953343000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"No, optional is an annotation on the type, so it needs to become optional [X] Y","msgtype":"m.text"},"ts":1491953359000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic was too fast for","msgtype":"m.text"},"ts":1491953377000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"me.","msgtype":"m.text"},"ts":1491953387000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1491953396000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: oh i see, so step 4 of https://heycam.github.io/webidl/#idl-type-extended-attribute-associated-with, is only refereing to the non-optional variant of the argument production","msgtype":"m.text"},"ts":1491953454000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1491953457000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"Yeah, I guess \"within\" is ambiguous between \"directly within\" and \"within after expanding the grammar\"","msgtype":"m.text"},"ts":1491953493000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I was a bit confused :)","msgtype":"m.text"},"ts":1491953510000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"Let me file an issue and fix over the next day or two","msgtype":"m.text"},"ts":1491953521000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: thanks","msgtype":"m.text"},"ts":1491953525000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"https://github.com/heycam/webidl/issues/341","msgtype":"m.text"},"ts":1491953673000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the other question was what step 3 of that algorithm is trying to do, does it mean that for something like [Clamp] long or DOMString) , the longs annotated type might have [Clamp]?","msgtype":"m.text"},"ts":1491953708000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"or am I reading that totally wrong","msgtype":"m.text"},"ts":1491953715000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"I think the intention is that [Clamp] (long or double) means that the long has a [Clamp] associated with it","msgtype":"m.text"},"ts":1491953764000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: ok,","msgtype":"m.text"},"ts":1491953776000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"I hope the parens are required when defining union types...","msgtype":"m.text"},"ts":1491953781000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh damn, I forgot a (","msgtype":"m.text"},"ts":1491953785000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"ah yes they are, phew","msgtype":"m.text"},"ts":1491953796000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: they are, I just mistyped :(","msgtype":"m.text"},"ts":1491953798000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"It'd be good to add examples to each of these steps, actaully","msgtype":"m.text"},"ts":1491953818000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I am unclear how that doesn‚Äôt lead to an error case however, since the [Clamp] would get added to double as well, which is not allowed","msgtype":"m.text"},"ts":1491953852000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"Oh, I forgot where clamp is allowed","msgtype":"m.text"},"ts":1491953865000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"OK, integer types only, so I guess... there is no good example for clamp at least","msgtype":"m.text"},"ts":1491953893000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: just integers","msgtype":"m.text"},"ts":1491953896000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"Yeah and you can't put two integers in a union I am pretty sure","msgtype":"m.text"},"ts":1491953909000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"right, or two strings","msgtype":"m.text"},"ts":1491953916000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"so i guess that step is pretty much dead code given the current set of extended attributes applicable to types","msgtype":"m.text"},"ts":1491953953000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess, maybe in the future, there will be an extended attribute useful on all types :)","msgtype":"m.text"},"ts":1491953957000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"But it will be very important for [AllowShared]","msgtype":"m.text"},"ts":1491953961000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Because then [AllowShared] (ArrayBuffer or Uint8Array or ...) will work","msgtype":"m.text"},"ts":1491953971000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"We will likely typedef that to SharedBufferSource","msgtype":"m.text"},"ts":1491953981000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"cool beans","msgtype":"m.text"},"ts":1491953983000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"thanks, this really helped clarify things","msgtype":"m.text"},"ts":1491953995000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"Awesome, glad to help. I'll do my best to reflect these things back into the spec ASAP. (And also update specs to use the new syntax.)","msgtype":"m.text"},"ts":1491954020000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"howdy weinig!","msgtype":"m.text"},"ts":1491954866000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hi MikeSmith!","msgtype":"m.text"},"ts":1491954913000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"MikeSmith: gotta run though :)","msgtype":"m.text"},"ts":1491954928000,"senderName":"weinig","senderId":"weinig@irc"}
]