[
{"content":{"body":"domfarolino: donâ€™t think so, I think the main problem is updating existing tests;","msgtype":"m.text"},"ts":1520381895000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: because of that it would be useful to have a browser with the fix","msgtype":"m.text"},"ts":1520381922000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: but maybe affected tests can be located with a couple greps","msgtype":"m.text"},"ts":1520381953000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ah that makes sense. I can take a look sometime this week assuming a patch to change default credentials behavior is fairly trivial","msgtype":"m.text"},"ts":1520384861000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: cool","msgtype":"m.text"},"ts":1520384907000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I suspect that for https://github.com/whatwg/fetch/issues/145 you'll have to find a new networking person given that tyoshino left","msgtype":"m.text"},"ts":1520388543000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: happy to help figure out things for this API","msgtype":"m.text"},"ts":1520396174000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1520396180000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: imperative slotting, that is","msgtype":"m.text"},"ts":1520396181000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I'm mainly wondering what developers would want to happen in various places","msgtype":"m.text"},"ts":1520396202000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah yeah. I was kind of hoping they would never mix styles, but developers sometimes surprise us.","msgtype":"m.text"},"ts":1520396227000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: e.g., if you modify the children of a host element, is it fine that everything gets reset?","msgtype":"m.text"},"ts":1520396241000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: should this allow elements that are not in a tree? (what if they get removed?)","msgtype":"m.text"},"ts":1520396279000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: not connected I mean (everything is in a tree)","msgtype":"m.text"},"ts":1520396298000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Interesting, why would it get reset?","msgtype":"m.text"},"ts":1520396302000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: that's how we redistribute; if something changes we assign things anew","msgtype":"m.text"},"ts":1520396363000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: e.g., step 10 of https://dom.spec.whatwg.org/#concept-node-remove","msgtype":"m.text"},"ts":1520396381000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Maybe I am misunderstanding what you mean by \"host element\"?","msgtype":"m.text"},"ts":1520396382000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Right OK, an assigned element","msgtype":"m.text"},"ts":1520396394000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Not the whole shadow host","msgtype":"m.text"},"ts":1520396426000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hmm, I guess it's not quite connected either, but we require it to be a child of a host element atm","msgtype":"m.text"},"ts":1520396435000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Blah I should refresh my memory of this stuff","msgtype":"m.text"},"ts":1520396492000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It'd be nice to get some examples into the spec","msgtype":"m.text"},"ts":1520396500000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Some are trapped in the old spec","msgtype":"m.text"},"ts":1520396505000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"FWIW, I guess rniwa probably knew about this when he proposed this","msgtype":"m.text"},"ts":1520396591000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So I suspect his stance here is that if you mutate the tree you'll have to deal with the consequences","msgtype":"m.text"},"ts":1520396613000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I am hopeful that is fine with developers","msgtype":"m.text"},"ts":1520396629000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But would be good to make that clear with some examples around the API maybe","msgtype":"m.text"},"ts":1520396631000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah exactly","msgtype":"m.text"},"ts":1520396635000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I think the main question we should answer is what happens if they are already assigned, and how do we update those other slot elements","msgtype":"m.text"},"ts":1520397312000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: presumably we do want to fire slotchange at least","msgtype":"m.text"},"ts":1520397323000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: it'd be more productive if you proposed something you have in mind in that issue","msgtype":"m.text"},"ts":1520406700000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I am not in favor of the feature in general, so I am not inclined to spend time on developing it. I am happy to give my constraints though.","msgtype":"m.text"},"ts":1520406725000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: it just came to mind that built-ins don't have is=\"\", but do have namespaces to consider, so their registry is different anyway","msgtype":"m.text"},"ts":1520406735000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: it just seems so weird to suddenly insist built-ins be treated the same while there's no such consistency enforced elsewhere","msgtype":"m.text"},"ts":1520406799000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: it appears you're just being arbitrary to stall things","msgtype":"m.text"},"ts":1520406811000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The problem is the same for both: the browser has a registry, and some frameworks can't deal with just constructors, so need some sort of side-table.","msgtype":"m.text"},"ts":1520406825000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I don't think it's arbitrary to insist we expose the primitives.","msgtype":"m.text"},"ts":1520406866000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But as I've shown it's not the same primitive and it doesn't live in the same place","msgtype":"m.text"},"ts":1520406883000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The primitive for custom elements lives on the custom element registry","msgtype":"m.text"},"ts":1520406900000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The other primitive exists, but it's not layered in the same way at all","msgtype":"m.text"},"ts":1520406910000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So insisting on the same API or solving them at the same time is arbitrary","msgtype":"m.text"},"ts":1520406920000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We also don't have something.get(localname, namespace) that returns a constructor for built-ins","msgtype":"m.text"},"ts":1520406977000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Why didn't you add that? Where is the consistency?","msgtype":"m.text"},"ts":1520406995000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Indeed, I'm saying we should add that","msgtype":"m.text"},"ts":1520407198000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The problem space needs to be considered holistically.","msgtype":"m.text"},"ts":1520407206000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If we're to address these frameworks which can't cope","msgtype":"m.text"},"ts":1520407218000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But you haven't done that","msgtype":"m.text"},"ts":1520407222000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Indeed, I have not. I've only solved the important use cases so far.","msgtype":"m.text"},"ts":1520407230000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Right, what's the problem with continuing to do so?","msgtype":"m.text"},"ts":1520407245000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The problem posed in the OP is the same for built-in elements and custom ones","msgtype":"m.text"},"ts":1520407269000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I've looked at it holistically and I've outlined how all this could work, but we don't need to add all at once","msgtype":"m.text"},"ts":1520407269000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So we should not solve only half the problem","msgtype":"m.text"},"ts":1520407278000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Right and as pointed out in the meeting and even by that person, it's not a problem for built-ins (also as shown by other issues)","msgtype":"m.text"},"ts":1520407436000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I feel like we're going in circles...","msgtype":"m.text"},"ts":1520407452000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't agree it's not a problem for built-ins. For built-ins people keep a large table.","msgtype":"m.text"},"ts":1520407479000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"They can do the same for custom elements","msgtype":"m.text"},"ts":1520407485000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But they don't want to","msgtype":"m.text"},"ts":1520407487000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: okay, I guess I can try to solve this more generically; it is a little weird that ElementRegistry will have a different API shape from CustomElementRegistry","msgtype":"m.text"},"ts":1520407620000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"can whatwg definitions be used in the mdn glossary? in particular \"insertion point\" is a dead link but the whatwg definition is here https://html.spec.whatwg.org/multipage/parsing.html#insertion-point","msgtype":"m.text"},"ts":1520442734000,"senderName":"railgun","senderId":"railgun@irc"},
{"content":{"body":"mdn uses \"(CC-BY-SA), v2.5 or any later version\" so that should be compatible with CC-BY-4.0 (if they didn't say \"or any later version\" it wouldn't be compatible?)","msgtype":"m.text"},"ts":1520442959000,"senderName":"railgun","senderId":"railgun@irc"}
]