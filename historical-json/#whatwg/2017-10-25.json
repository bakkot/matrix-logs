[
{"content":{"body":"annevk: The two prongs of https://tools.ietf.org/html/draft-ietf-dnsop-let-localhost-be-localhost-00#section-4.2 are the fundamental disagreement.","msgtype":"m.text"},"ts":1508913563000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"annevk: The latest round of the discussion starts at https://www.ietf.org/mail-archive/web/dnsop/current/msg20963.html.","msgtype":"m.text"},"ts":1508913571000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"annevk: The discussion group question is probably answered in https://tools.ietf.org/html/rfc7322. :)","msgtype":"m.text"},"ts":1508913637000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"annevk, tobie: Ping! I haven't actually run https://github.com/mikewest/tc39-proposal-literals/blob/master/README.md by V8/TC39 folks yet to see if their heads explode, but WDYT about it from a WebIDL perspective?","msgtype":"m.text"},"ts":1508917066000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: would that create a new WebIDL string type?","msgtype":"m.text"},"ts":1508918803000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I think that'show we'd need to do it. I'm very open to other options, though, if you have different ideas!","msgtype":"m.text"},"ts":1508918843000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: so we'd be able to tighten security requirements for DOMString for new APIs. But not do much for old ones unless folks opted in via CSP or what not, right?","msgtype":"m.text"},"ts":1508918976000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"mkwst: do `strings` fall in the literal category too (I imagine not)?","msgtype":"m.text"},"ts":1508919065000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"mkwst: might also be worth talking to the React folks who've been working around this space with https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml","msgtype":"m.text"},"ts":1508919417000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"mkwst: that said, it seems this is quite restrictive in its application, no? It's basically strings that are part of the UI layer on apps that aren't designed to be translated, right?","msgtype":"m.text"},"ts":1508919594000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"mkwst: would \"x\" + \"x\" also throw?","msgtype":"m.text"},"ts":1508920422000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: if TC39 would add such a language feature I see no reason for us not to accommodate","msgtype":"m.text"},"ts":1508920458000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(Sorry, ran off to get a flu shot)","msgtype":"m.text"},"ts":1508921226000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"tobie: It is restrictive. That's more or less the idea. *shrug* Google's security team tells me that the majority of `SafeHtml` instantiations in Google's production code is string literals.","msgtype":"m.text"},"ts":1508921289000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"It surprises me, but I don't have much reason to doubt them. :)","msgtype":"m.text"},"ts":1508921338000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"annevk: Closure's compiler deals with `\"x\" + \"x\"`. If we can do the same, great. If that turns out to be hard, I'm sure we could live without it.","msgtype":"m.text"},"ts":1508921379000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: just to be clear, this implies these strings are statically analysed to be safe?","msgtype":"m.text"},"ts":1508921460000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"mkwst: (I think I'm not super clear as to what threat we're trying to mitigate against.)","msgtype":"m.text"},"ts":1508921512000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: In some cases, yes (e.g. HTML strings are statically determined to be valid HTML without dangling markup).","msgtype":"m.text"},"ts":1508921516000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"In other cases, reviewers will look at them with their eyeballs.","msgtype":"m.text"},"ts":1508921527000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Either way, analyzing a static string is simpler than analyzing an HTML sanitizer, and we can make reasonable decisions about the risk a given string literal presents.","msgtype":"m.text"},"ts":1508921563000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: I guess I'm more curious about the TC39 proposal than the IDL one","msgtype":"m.text"},"ts":1508922422000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: since that seems potentially far more controversial","msgtype":"m.text"},"ts":1508922436000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Request domintro nit addressed","msgtype":"m.text"},"ts":1508934041000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"mkwst: my prediction is that you'll get pushback of the form \"this should be solved by a static analysis tool like TypeScript\"","msgtype":"m.text"},"ts":1508934229000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: Ah, sorry I missed this earlier. Yes. I imagine the TC39 side will be harder. I'm hoping to convince the V8 team to fall on that particular sword for me. :)","msgtype":"m.text"},"ts":1508934268000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"domfarolino: landed","msgtype":"m.text"},"ts":1508934283000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: That pushback is reasonable, it's what Google does today.","msgtype":"m.text"},"ts":1508934298000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"(and thanks!)","msgtype":"m.text"},"ts":1508934299000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But it would be significantly more effective if we built it into the platform. *shrug* I'm happy to have that discussion.","msgtype":"m.text"},"ts":1508934329000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"I wonder how many people realized wasm came with non-detachable ArrayBuffer objects","msgtype":"m.text"},"ts":1508934339000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That seems like a fairly major change","msgtype":"m.text"},"ts":1508934344000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: was there a plan to use a template string tag for trusted types? I thought I saw that, and it seemed so nice.","msgtype":"m.text"},"ts":1508934418000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Yeah. That's on the list somewhere. I think koto built a prototype, even.","msgtype":"m.text"},"ts":1508934444000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"It does look really nice.","msgtype":"m.text"},"ts":1508934449000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Cool, looking forward to seeing more of that","msgtype":"m.text"},"ts":1508934470000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"how many ways can you supply credentials when performing a fetch?","msgtype":"m.text"},"ts":1508971712000,"senderName":"KiChjang_","senderId":"KiChjang_@irc"},
{"content":{"body":"i know that using the URL works, username:password⊙ec","msgtype":"m.text"},"ts":1508971751000,"senderName":"KiChjang_","senderId":"KiChjang_@irc"},
{"content":{"body":"there's also the Authentication header","msgtype":"m.text"},"ts":1508971758000,"senderName":"KiChjang_","senderId":"KiChjang_@irc"},
{"content":{"body":"KiChjang_: TLS client certificates","msgtype":"m.text"},"ts":1508975042000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and username:password⊙ec won’t work with the fetch API","msgtype":"m.text"},"ts":1508975071000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"huh","msgtype":"m.text"},"ts":1508975081000,"senderName":"KiChjang","senderId":"KiChjang@irc"}
]