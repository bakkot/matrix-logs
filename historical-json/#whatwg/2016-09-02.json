[
{"content":{"body":"jyasskin: Sounds like what you want is the thing I'm calling a \"ReactiveValue\" in http://www.xanthir.com/b4PV0","msgtype":"m.text"},"ts":1472777863000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"An object Stream which exposes its current value synchronously.","msgtype":"m.text"},"ts":1472777880000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Object streams, uh, don't exist yet tho.","msgtype":"m.text"},"ts":1472777898000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: thats a great way to leak windows if someone send a DOM object through a stream","msgtype":"m.text"},"ts":1472778154000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Uh, no more so than literally any other way of communicating values?","msgtype":"m.text"},"ts":1472781017000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: it keeps the value around forever until another value is produced in the stream, no?  I've seen this used carelessly to distribute \"window closed\" events which of course always leaked the last window that was closed","msgtype":"m.text"},"ts":1472783814000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I had to change our event channel things in our addon-sdk to hold their last value weakly to avoid these leaks: https://bugzilla.mozilla.org/show_bug.cgi?id=1267693","msgtype":"m.text"},"ts":1472783873000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"TabAtkins: Yep, ReactiveValue<boolean> sounds right for this use case. The API needs to avoid sending values until someone subscribes though.","msgtype":"m.text"},"ts":1472786962000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Although the API for ReactiveValue is bigger than I think would be useful for watching availability","msgtype":"m.text"},"ts":1472787246000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: doesn't look great to me? In particular it seems like those would work better as something like PresentationAvailability.request(\"...\").then(...)? But I dunno maybe in that domain there are actually two separate concepts of request and availability that are important, as seen by the start/reconnect methods?","msgtype":"m.text"},"ts":1472795184000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"hi","msgtype":"m.text"},"ts":1472804196000,"senderName":"WisdomSky","senderId":"WisdomSky@irc"},
{"content":{"body":"hi, WisdomSky","msgtype":"m.text"},"ts":1472804196000,"senderName":"botie1","senderId":"botie1@irc"},
{"content":{"body":"Thoughts on dropping the \" (Second Edition)\" suffix from the Web IDL spec title? (Seems obvious to me—it should be a living standard—but there might be some backstory I'm not aware of here.)","msgtype":"m.text"},"ts":1472805241000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"^ annevk","msgtype":"m.text"},"ts":1472805339000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"(as you're the only one awake right now.)","msgtype":"m.text"},"ts":1472805365000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: fine with me","msgtype":"m.text"},"ts":1472805373000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: the whole distinction never made much sense to me","msgtype":"m.text"},"ts":1472805382000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ta","msgtype":"m.text"},"ts":1472805382000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"good","msgtype":"m.text"},"ts":1472805391000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: should also remove \"Latest Version:\" as it's not actually the latest version and maybe clean that header up in general","msgtype":"m.text"},"ts":1472805422000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, that's easier to do manually (there's a bunch of manual changed queued once all the automated things are done)","msgtype":"m.text"},"ts":1472805471000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"*changes","msgtype":"m.text"},"ts":1472805479000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1472805483000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nearly there","msgtype":"m.text"},"ts":1472805489000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: did someone get around to reviewing things yet?","msgtype":"m.text"},"ts":1472805492000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh yeah--heycam filed something like 30 issues","msgtype":"m.text"},"ts":1472805508000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"oh nice","msgtype":"m.text"},"ts":1472805520000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that's very quick, excellent","msgtype":"m.text"},"ts":1472805530000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, that's a question of perspective","msgtype":"m.text"},"ts":1472805533000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":":D","msgtype":"m.text"},"ts":1472805536000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1472805542000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: one of the last things I want to check it the dfn stuff you mentioned.","msgtype":"m.text"},"ts":1472805620000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"what precisely is the DOM spec relying on to do all of the linking to WebIDL?","msgtype":"m.text"},"ts":1472805664000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: does it map bikeshed behavior 1:1?","msgtype":"m.text"},"ts":1472805719000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: basically bikeshed has some kind of \"dfn contract\"","msgtype":"m.text"},"ts":1472805739000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: Shepherd, some \"global\" tool that indexes specs, uses that contract for cross-spec links","msgtype":"m.text"},"ts":1472805760000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: IDL implements that \"dfn contract\" for some terms today","msgtype":"m.text"},"ts":1472805769000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: other specs rely on IDL doing that","msgtype":"m.text"},"ts":1472805790000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so if I go by: https://github.com/tabatkins/bikeshed/blob/master/docs/dfn-contract.md, I'm good?","msgtype":"m.text"},"ts":1472805796000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: yeah","msgtype":"m.text"},"ts":1472805806000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: the main thing that's important is that stuff that has data-dfn-for=\"\" and such today, has data-dfn-for=\"\" / for=\"\" going forward","msgtype":"m.text"},"ts":1472805840000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok, that's informally what I followed. Just want to write a bunch of test that verifies this, now. Thanks.","msgtype":"m.text"},"ts":1472805842000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: note that in your source you can spell it the shorter for=\"\", bikeshed should handle the rest","msgtype":"m.text"},"ts":1472805880000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: the other data-* also have shorthands","msgtype":"m.text"},"ts":1472805889000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: should all be specified in \"dfn contract\"","msgtype":"m.text"},"ts":1472805902000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yes, I think I got those mostly right. There might be a couple of corner cases though. I'll write a bunch of tests.","msgtype":"m.text"},"ts":1472806042000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Easier to fix them now than later.","msgtype":"m.text"},"ts":1472806059000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"On the other hand, will be much easier for folks to contribute with bikeshed","msgtype":"m.text"},"ts":1472806218000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: fyi https://github.com/plinss/widlparser/issues/17","msgtype":"m.text"},"ts":1472809498000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Ta","msgtype":"m.text"},"ts":1472813652000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Could maybe use underscore hack, but…","msgtype":"m.text"},"ts":1472813676000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: wonder why github is highlighting this? https://github.com/w3c/webappsec-csp/commit/bb49255376c3f485831c9ce90c710157cd12c507#diff-117d6498d2aa8019cc0abf5eeb87a9faR3513","msgtype":"m.text"},"ts":1472817404000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Looks like I missed a `. https://github.com/w3c/webappsec-csp/commit/bb49255376c3f485831c9ce90c710157cd12c507#diff-117d6498d2aa8019cc0abf5eeb87a9faL3486","msgtype":"m.text"},"ts":1472817458000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Somewhere. Or maybe GitHub is nuts? :)","msgtype":"m.text"},"ts":1472817527000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"A problem is that this document really isn't HTML. It's mostly HTML.","msgtype":"m.text"},"ts":1472817561000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"looks like github's syntax highlighter is incredibly confused","msgtype":"m.text"},"ts":1472817594000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"And HTML syntax highlighters aren't thrilled with the mix of markdown and HTML.","msgtype":"m.text"},"ts":1472817602000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Somewhere on my list is to go through the doc and consistently use the new bikeshedisms that have cropped up over the last year.","msgtype":"m.text"},"ts":1472817633000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"I think the real issue here is that I have unclosed elements in the document on purpose.","msgtype":"m.text"},"ts":1472817874000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"https://github.com/w3c/webappsec-csp/blob/master/index.src.html#L3441 <--","msgtype":"m.text"},"ts":1472817922000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: I think you could write that as &lt; to unconfused github.","msgtype":"m.text"},"ts":1472833198000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"*unconfuse","msgtype":"m.text"},"ts":1472833201000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"tobie: Ideally you convert down to the minimal Bikeshed representation - <dfn data-dfn-type=foo> just becomes <dfn foo>, all the other <dfn data-dfn-*=\"bar\">s become <dfn *=\"bar\">.","msgtype":"m.text"},"ts":1472833403000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If a data-dfn-* is on an ancestor of some <dfn>s, it converts down to dfn-* (have to be able to distinguish between the dfn-* and link-* set when it's not on a <dfn> or <a>).","msgtype":"m.text"},"ts":1472833457000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I think I got the first part mostly right.","msgtype":"m.text"},"ts":1472833751000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I'm not sure I understand the second part nor it if applies to WebIDL.","msgtype":"m.text"},"ts":1472833785000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"<dfn data-dfn-for=Foo>bar</dfn> can be written as <dfn for=Foo>bar</dfn> in Bikeshed.","msgtype":"m.text"},"ts":1472833878000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You *never* need to type a data- prefix for any of Bikeshed's attributes in an actual Bikeshed document.","msgtype":"m.text"},"ts":1472833910000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And for <dfn> and <a>, you can omit the whole data-dfn- and data-link- prefix, because it's obvious.","msgtype":"m.text"},"ts":1472833944000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yes. Got that part. What I didn't get: what are data-link- prefixes and how does the ancestor system works","msgtype":"m.text"},"ts":1472834164000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: ^","msgtype":"m.text"},"ts":1472834175000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Oh, autolinking technically runs off of data-link-* attributes, identical to the data-dfn-* attributes. You just never see them, because they're *only* useful in Bikeshed documents, where you never have to write them. ^_^","msgtype":"m.text"},"ts":1472834221000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But you can put the dfn/link attributes on an ancestor element and they'll apply to all the <dfn>/<a> descendants (unless overridden).","msgtype":"m.text"},"ts":1472834246000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And when you do so, you can omit the data- prefix, but need to keep the dfn- or link- part (so you can put both <dfn> and <a> in a block and not have them both receive the same defaults, as that's rarely useful).","msgtype":"m.text"},"ts":1472834323000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"OK, I get it.","msgtype":"m.text"},"ts":1472834355000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: if you read XSLT: https://github.com/tobie/webidl/blob/c84a0f7/WebIDL-bs.xsl#L350-L382","msgtype":"m.text"},"ts":1472834609000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I think that covers all but the ancestor cases.","msgtype":"m.text"},"ts":1472834639000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Looks good to me.","msgtype":"m.text"},"ts":1472834654000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Which I think WebIDL doesn't have (but will check).","msgtype":"m.text"},"ts":1472834660000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"mounir: ping","msgtype":"m.text"},"ts":1472844364000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Domenic: I'm translating the Presentation pattern to \"navigator.bluetooth.getAvailability()..then(avail => ...)\", and then avail.value holds whether the user has any bluetooth adapter at all. Are you suggesting that we should put a requestBluetooth() function in front of requestDevice(), and have it fail if there's no adapter? How would it behave if the user","msgtype":"m.text"},"ts":1472849803000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"then unplugged the adapter? Or plugged the first one in?","msgtype":"m.text"},"ts":1472849803000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: I don't really understand the second idea, so it's probably not what I'm suggesting :)","msgtype":"m.text"},"ts":1472849929000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"jyasskin: To me the biggest question is whether availability needs to be its own class (with a .value property) or not. The weird thing in the presentation API was separate request and availability classes","msgtype":"m.text"},"ts":1472849947000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":":) If Presentation spelled their thing PresentationAvailability.request(\"...\").then(...), how would folks sign up to be notified if availability changed?","msgtype":"m.text"},"ts":1472849972000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"I think I see. Putting it on whatever their \"navigator.bluetooth\" is seems reasonable to me.","msgtype":"m.text"},"ts":1472850033000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"navigator.bluetooth.onavailable = ..., or even navigator.bluetooth.whenAvailable.then(...)","msgtype":"m.text"},"ts":1472850059000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"With just onavailable, how do we get the initial value?","msgtype":"m.text"},"ts":1472850095000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"whenAvailable as a Promise doesn't work well because we also want to eagerly say \"no\" if no adapter's available.","msgtype":"m.text"},"ts":1472850127000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"We could do a Promise<boolean> and put the onavailable at the top level.","msgtype":"m.text"},"ts":1472850164000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: yeah that last is what I was thinking","msgtype":"m.text"},"ts":1472850176000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"This is indeed, as Tab mentioned, an instance of a more general concept we see a lot","msgtype":"m.text"},"ts":1472850194000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"inputEl.value/inputEl.oninput, etc.","msgtype":"m.text"},"ts":1472850204000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ok, I'll follow https://xkcd.com/927/ and do what you're suggesting. :)","msgtype":"m.text"},"ts":1472850214000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"I guess the question is whether this should be a synchronous getter or promise getter for the initial thing","msgtype":"m.text"},"ts":1472850228000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"We want a promise getter for the initial thing so we don't have to send it to every renderer.","msgtype":"m.text"},"ts":1472850250000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"With the event, I think we need a new event type so it can transmit the value? I don't really want to make folks do getAvailability().then(...) inside the event handler.","msgtype":"m.text"},"ts":1472850345000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Seems true... I'm a little surprised we don't have a generic ValueEvent, ick.","msgtype":"m.text"},"ts":1472850389000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I can specify ValueEvent in WebBT. ;)","msgtype":"m.text"},"ts":1472850679000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Domenic or TabAtkins: do you know of any frameworks that have implemented this pattern? I think what we really want is a kind of event listener that's guaranteed to fire with an initial value. TabAtkins' ReactiveValue has a whole bunch layered on top of that, but we don't really need the complexity.","msgtype":"m.text"},"ts":1472850680000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"I mean, th epoint of having a stream is that there's a ridiculous amount of great stuff you can do with the combinators once you get a good ecosystem going. Same with promises - any individual usage is typically okay with something smaller than a Promise.","msgtype":"m.text"},"ts":1472850733000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Benefit is that the value/time dependency is reified and manipulable.","msgtype":"m.text"},"ts":1472850757000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jyasskin: not really; people usually use something more general and just shoehorn this in. They are called \"signals\" in https://github.com/kriskowal/gtor/ and in my presentation https://vimeo.com/132786072","msgtype":"m.text"},"ts":1472850775000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That's fair. I'm worried about specifying too much up front, especially in a spec that's not specifically focused on reactivity primitives. What's the minimum subset? Just availability.forEach(callback), where callback is guaranteed to be called once with the current value?","msgtype":"m.text"},"ts":1472851043000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"oof, I would not... I would just specify ValueEvent, onavailable, and getAvailability().then(aBool => ...)","msgtype":"m.text"},"ts":1472851097000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: SGTM","msgtype":"m.text"},"ts":1472851114000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Yeah, I'd def stay simple with this until we get something useful actually specced.","msgtype":"m.text"},"ts":1472852734000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Somehow [[!DOM#constructing-events]] is producing the text \"DOM Standard §constructing-events\" despite https://dom.spec.whatwg.org/#constructing-events. I think DOM's in Shepherd. Have I done something dumb?","msgtype":"m.text"},"ts":1472855178000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"(That should be \"[[DOM#constructing-events]]\")","msgtype":"m.text"},"ts":1472855237000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Oh phew, I was like \"how the HELL\"","msgtype":"m.text"},"ts":1472855246000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And no, probably not your fault. Doing some final testing on something right now, will get to this in a sec.","msgtype":"m.text"},"ts":1472855265000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Thanks!","msgtype":"m.text"},"ts":1472855278000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"(I noticed something similar on a CSSWG spec today.)","msgtype":"m.text"},"ts":1472855283000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Do we have a \"Encodings for web standards dorks\" doc that explains JS's strings are 16-bit code units (and JS's various string/character handling FUNctions), DOMStrings are 16-bit clean not UTF-16, fun edge cases to be aware of, when USVString is appropriate, etc etc? I think our collected knowledge is just strewn across notes in places like WebIDL and TAG notes, but maybe someone's consolidated it?","msgtype":"m.text"},"ts":1472855538000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Told a new developer \"make sure to test with \\uDC00\\uD800\" and he found a bug in Firefox. :P","msgtype":"m.text"},"ts":1472855592000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"TabAtkins: Could you add https://w3c.github.io/fingerprinting-guidance/ to Shepherd?","msgtype":"m.text"},"ts":1472856414000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"TabAtkins: what does a bright pink highlight mean in a Bikeshed source?","msgtype":"m.text"},"ts":1472856439000,"senderName":"botond","senderId":"botond@irc"},
{"content":{"body":"jsbell: https://simonsapin.github.io/wtf-8/ ?","msgtype":"m.text"},"ts":1472856439000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: That too. :)","msgtype":"m.text"},"ts":1472856450000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"botond: I just use it for highlighting headings, to make the section breaks more obvious in the Sublime minimap.","msgtype":"m.text"},"ts":1472856469000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: but not markdown-style headings, apparently","msgtype":"m.text"},"ts":1472856550000,"senderName":"botond","senderId":"botond@irc"},
{"content":{"body":"Yeah, as I said the other day, I haven't updated the highlighting styles in a long while. Latest revision predates markdown-style headings being valid.","msgtype":"m.text"},"ts":1472856585000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jyasskin: Done. Give it a few for those to filter into the db.","msgtype":"m.text"},"ts":1472856790000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Thanks!","msgtype":"m.text"},"ts":1472856799000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Aw dang, Status metadata now emits a proper error message when you're in a new group and try to use a W3C status.","msgtype":"m.text"},"ts":1472858693000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"This was a lot of work, but it's *super* helpful to the user now, which makes me happy. The previous failure state was terrible and confusing.","msgtype":"m.text"},"ts":1472858720000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]