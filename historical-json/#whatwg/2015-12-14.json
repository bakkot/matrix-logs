[
{"content":{"body":"anybody used letsencrypt yet for a cert for one of your domains?","msgtype":"m.text"},"ts":1450083204000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1450083351000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"I did","msgtype":"m.text"},"ts":1450083353000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"about a week ago","msgtype":"m.text"},"ts":1450083363000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"MikeSmith: me too, and davve","msgtype":"m.text"},"ts":1450084174000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"ondras, philipj: was the setup as easy as you'd expected? do you know roughly how long it took you?","msgtype":"m.text"},"ts":1450084757000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: it was more manual than I expected, and I probably spend 4-8 hours on it in total, two evenings I think","msgtype":"m.text"},"ts":1450085000000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"well, getting the certs was pretty quick, but tweaking everything to make https://www.ssllabs.com/ssltest/ happy took more time","msgtype":"m.text"},"ts":1450085035000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1450085054000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1450085069000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that's kind of what I figured","msgtype":"m.text"},"ts":1450085078000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"getting the cert was easy, using the \"certonly\" feature","msgtype":"m.text"},"ts":1450085087000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1450085093000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it worked OOTB using the git version","msgtype":"m.text"},"ts":1450085095000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1450085107000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ondras: were you running an HTTP server on that host at the time?","msgtype":"m.text"},"ts":1450085112000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"but getting an \"A\" rank (just for teh lulz, probably) meant updating to apache 2.4","msgtype":"m.text"},"ts":1450085113000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"on my old debian box","msgtype":"m.text"},"ts":1450085116000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"philipj: yes, precisely","msgtype":"m.text"},"ts":1450085120000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"and updating apache 2.2 -> 2.4 was a major pita","msgtype":"m.text"},"ts":1450085130000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"I was, and thus I coulnd't use the automatic stuff, had to had some files to make my exsiting server serve the files","msgtype":"m.text"},"ts":1450085133000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"due to poor and old vhost config on that machine","msgtype":"m.text"},"ts":1450085137000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"had to *add* some files, and change the Content-Type too","msgtype":"m.text"},"ts":1450085152000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"well the \"certonly\" with \"--webroot\" worked automatically for me","msgtype":"m.text"},"ts":1450085158000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"it placed some files to webroot, used them and removed afterwards","msgtype":"m.text"},"ts":1450085171000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"I think that one empy .someletsencryptstuff dir remained there","msgtype":"m.text"},"ts":1450085192000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"I deleted that manually","msgtype":"m.text"},"ts":1450085200000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"*empty","msgtype":"m.text"},"ts":1450085203000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"oh, I didn't know about --webroot","msgtype":"m.text"},"ts":1450085221000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"MikeSmith: I also had to install some packages to satisfy dependencies, as letsencrypt was not available as a .deb package for my distro","msgtype":"m.text"},"ts":1450085248000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"MikeSmith: but just getting this thing set up and getting the cert was about half an hour of work","msgtype":"m.text"},"ts":1450085261000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"pretty easy even with my lame admin skills","msgtype":"m.text"},"ts":1450085273000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: good to know. And I'm running Debian testing, so I reckon I shouldn't have a problem with getting the packages","msgtype":"m.text"},"ts":1450085380000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"for the first domain I want to set up I also already have my nginx tweaks in place with my existing cert at a full A+ https://www.ssllabs.com/ssltest/analyze.html?d=sideshowbarker.net","msgtype":"m.text"},"ts":1450085472000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so I'm hoping I won't need to (re)make those changes","msgtype":"m.text"},"ts":1450085498000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"current cert expires in February so I reckon switching over before then would be good","msgtype":"m.text"},"ts":1450085538000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"nice holiday project","msgtype":"m.text"},"ts":1450085546000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1450085837000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"shall be straightforward in your case","msgtype":"m.text"},"ts":1450085846000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"good luck :)","msgtype":"m.text"},"ts":1450085849000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"cheers","msgtype":"m.text"},"ts":1450086087000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ondras: did have trouble with https://github.com/letsencrypt/letsencrypt/issues/1668 ?","msgtype":"m.text"},"ts":1450086117000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: no. I used \"--webroot -d domain.name -w /path/to/webroot\"","msgtype":"m.text"},"ts":1450086178000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"not sure if the bug applies in this setup","msgtype":"m.text"},"ts":1450086186000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: thanks, that worked, now renewing is just a one-liner :)","msgtype":"m.text"},"ts":1450087329000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"exactly :)","msgtype":"m.text"},"ts":1450087374000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"I guess for whatwg.org we'll just wait for DreamHost to roll out Let's Encrypt...","msgtype":"m.text"},"ts":1450090234000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Unless that doesn't happen by the summer, in which case we might have to do something one way or another","msgtype":"m.text"},"ts":1450090250000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: JakeA: what do you think about the suggestion in https://github.com/whatwg/fetch/issues/20#issuecomment-164421065?","msgtype":"m.text"},"ts":1450100518000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: why does that need to be an api, given it can be implemented on top of abort() really easily?","msgtype":"m.text"},"ts":1450101467000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I guess folks don't want to wait for abort()","msgtype":"m.text"},"ts":1450101504000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: but yeah, you're right","msgtype":"m.text"},"ts":1450101511000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: maybe we need to look for an abort solution that doesn't have as many external dependencies as cancellable promises :/","msgtype":"m.text"},"ts":1450101656000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: did I see you post that there'd been discussions on cancellable promises at tc39?","msgtype":"m.text"},"ts":1450101702000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: that is an alternative, though none look attractive enough","msgtype":"m.text"},"ts":1450101732000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: basically the API would become worse than XHR, afaict","msgtype":"m.text"},"ts":1450101747000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: kind of, basically still waiting on me though.","msgtype":"m.text"},"ts":1450102186000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: I definitely don't like providing a halfway abort method","msgtype":"m.text"},"ts":1450102212000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: I think waiting is still the right move here tbh. XHR isn't going anywhere for now.","msgtype":"m.text"},"ts":1450102240000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: the only feasible thing I can think of is if we say that cancelation/abortion is different from timeout, and timeout is somehow actually an error condition. In which case adding a sugary { timeout: ... } option seems somewhat OK.","msgtype":"m.text"},"ts":1450102270000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I still think it's better composed in that case","msgtype":"m.text"},"ts":1450102412000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"A timeout being a time-based reaction, where aborting the request will be one part, but rejecting could be another","msgtype":"m.text"},"ts":1450102549000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: XMLHttpRequest is not exposed in service workers, but I guess the latter are still somewhat experimental","msgtype":"m.text"},"ts":1450102689000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I don't think I understand what you're saying","msgtype":"m.text"},"ts":1450102965000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh hmm I think I do now","msgtype":"m.text"},"ts":1450102991000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I could create a promise that aborts a fetch then rejects","msgtype":"m.text"},"ts":1450103010000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yeah, makes sense","msgtype":"m.text"},"ts":1450103026000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But we could say that { timeout } is sugar for that","msgtype":"m.text"},"ts":1450103034000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"instead of sugar for just aborting the fetch","msgtype":"m.text"},"ts":1450103041000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: in regards to your comment here, I personally don't like streams for progress notifications https://github.com/whatwg/fetch/issues/20#issuecomment-164457161","msgtype":"m.text"},"ts":1450104914000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: its problematic to get the same \"progress based on when bytes are written-to/read-from OS kernel\" that we have today with streams that might be piped together through many layers, etc","msgtype":"m.text"},"ts":1450104990000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"thought I would mention it here, since that issue is not really about progress","msgtype":"m.text"},"ts":1450105043000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: why is sugar for timeout ok, but sugar for failing on a non-success code not ok?","msgtype":"m.text"},"ts":1450105095000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: hmm, does that apply to both uploads and downloads?","msgtype":"m.text"},"ts":1450105161000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: definitely applies to uploads... I'm unsure about the requirements for downloads","msgtype":"m.text"},"ts":1450105231000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: requiring someone to hook the stream seems very heavyweight from an API perspective as well","msgtype":"m.text"},"ts":1450105252000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: I'd rather just have progress events","msgtype":"m.text"},"ts":1450105261000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"ProgressPromise?","msgtype":"m.text"},"ts":1450105304000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: is this something that can wait though?","msgtype":"m.text"},"ts":1450105331000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: seems like doing some iterations with streams first would be good before we go higher-level again","msgtype":"m.text"},"ts":1450105358000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I only mention it because I see people saying \"streams is the primitive for progress everyone should plan on using\"","msgtype":"m.text"},"ts":1450105362000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: not if it means we have to contort the streams implementation to accomodate these weird \"progress-at-the-kernel\" requirements","msgtype":"m.text"},"ts":1450105381000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: what does the browser use internally for progress events?","msgtype":"m.text"},"ts":1450105389000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if we can relax those requirements, then fine by me","msgtype":"m.text"},"ts":1450105393000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: for uploads it fires events based on when things write() is called on the socket","msgtype":"m.text"},"ts":1450105435000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: not based on when it reads the data out of the upload stream","msgtype":"m.text"},"ts":1450105447000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1450105527000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: you don't think placing progress observers on streams makes sense at all?","msgtype":"m.text"},"ts":1450105581000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: it's not really OK.","msgtype":"m.text"},"ts":1450105646000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: sure it does, but I don't think trying to make a streams progress reflect downstream operations (like writing to the kernel) makes sense...","msgtype":"m.text"},"ts":1450105660000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: so if people are ok with it not really being at the external interface boundary, I'm fine with it","msgtype":"m.text"},"ts":1450105683000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I'm not sure what that means","msgtype":"m.text"},"ts":1450105878000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: what JakeA said in that issue makes sense to me and has been our idea about \"progress\" for a while","msgtype":"m.text"},"ts":1450105905000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: if that is wrong, file an issue against streams? Or maybe against fetch? Though it seems like the streams folks would have to be convinced we need something else","msgtype":"m.text"},"ts":1450105937000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok... I haven't seen the issue or PR to add this stuff... so its a bit abstract still... I am just thinking back to the debates about WritableStream for Request.body with the goal of trying to get progress at the os kernel layer... I think we backed away from that... I want to make sure we don't end up there again","msgtype":"m.text"},"ts":1450106051000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"discovers that the ISO-2022-JP decoder in the Encoding Standard can unread two bytes after reading one byte","msgtype":"m.emote"},"ts":1450106052000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":":-(","msgtype":"m.text"},"ts":1450106143000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: I think you need a buffer of three or so","msgtype":"m.text"},"ts":1450106183000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I guess another way to state my view... I'm fine with a progress monitor on a stream as long as its monitoring the state of that stream instance and not something else in the system","msgtype":"m.text"},"ts":1450106193000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: why three?","msgtype":"m.text"},"ts":1450106200000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I don't want to implement any actual prepending. Unreading the byte that was just read is fine, though. Just moves the pointer backwards in a way that's never out of bounds.","msgtype":"m.text"},"ts":1450106260000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"tries to work out what'll happen next when the two prepended bytes are processed","msgtype":"m.emote"},"ts":1450106308000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: oh, maybe two is sufficient with the prepend rewrite, I was just going from memory and what Joshua told me at some point","msgtype":"m.text"},"ts":1450106372000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: that makes sense","msgtype":"m.text"},"ts":1450106487000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"looks like I will need to work out what the possible combinations for the fields of the ISO-2022-JP decoder are at the end of the escape state :-(","msgtype":"m.text"},"ts":1450106500000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"wanderview: perhaps it's worth raising an issue on fetch-with-streams then to point out XMLHttpRequest progress events cannot be done on top of streams?","msgtype":"m.text"},"ts":1450106515000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: thank you btw for rewriting the way workers work","msgtype":"m.text"},"ts":1450107132000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: it bugged me too, but I thought rewriting it would require changing the way MessageChannel works","msgtype":"m.text"},"ts":1450107159000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: seems you carefully navigated around that","msgtype":"m.text"},"ts":1450107292000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, that was... fun :)","msgtype":"m.text"},"ts":1450107353000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: should we have some compat label for HTML issues? To indicate interop issues and make it easier to track them?","msgtype":"m.text"},"ts":1450107826000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: what were you thinking?","msgtype":"m.text"},"ts":1450107858000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: wanderview: streams for reading downloads makes sense to me. When I report 50% done I expect to have 50% of the resource in my possession (ignoring lies in content-length). I agree that it might not fit for uploads.","msgtype":"m.text"},"ts":1450107928000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Since its possible for my stream to be 100% consumed but none of it sent to the server. Especially as fetch does its own buffering for redirects","msgtype":"m.text"},"ts":1450107974000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yea... download is less problematic than upload... I guess because download is about \"read status\", while upload is really about \"write status\"","msgtype":"m.text"},"ts":1450107977000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: a label called \"compat\" e.g., for https://github.com/whatwg/html/issues/387 which I guess is an addition/proposal, but not really in the same sense","msgtype":"m.text"},"ts":1450108003000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah I still think sent to the kernel or TCP ACKed would be ideal, but wanderview doesn't want to implement that :(","msgtype":"m.text"},"ts":1450108036000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: seems reasonable, yeah","msgtype":"m.text"},"ts":1450108063000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I don't mind implementing it (we do it today)... I just don't want a stream created before actually opening the socket to report that status","msgtype":"m.text"},"ts":1450108071000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: hmm I am confused, when was anyone proposing that?","msgtype":"m.text"},"ts":1450108098000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: back when there was the suggestion Request should provide a WritableStream","msgtype":"m.text"},"ts":1450108129000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"not recently","msgtype":"m.text"},"ts":1450108138000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I don't understand. The writable stream proposal was never saying that the write() method on the writable stream should report that status before the socket is opened.","msgtype":"m.text"},"ts":1450108162000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I'm saying the Request object is time disconnected from the socket write... so is not a good place to report written-to-os-kernel status... but I don't really want to replay the whole debate again","msgtype":"m.text"},"ts":1450108280000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: right, OK. I was thinking of the proposal where we have a separate API for establishing an upload writable stream, not accounting for Request per se.","msgtype":"m.text"},"ts":1450108329000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But yeah I remember the time-disconnectedness of Request being a problem.","msgtype":"m.text"},"ts":1450108341000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess I just want to make sure we know we need something other than stream progress monitor to achieve XHR upload progress events","msgtype":"m.text"},"ts":1450108370000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1450108457000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think my current mental model is that there is a separate establishUploadWritableStream() API","msgtype":"m.text"},"ts":1450108473000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and fetch(request) does const ws = establishUploadWritableStream(); request.body.pipeTo(ws)","msgtype":"m.text"},"ts":1450108495000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"just a mental model though","msgtype":"m.text"},"ts":1450108513000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: implementation will likely be very different from that... javascript runs in the child process while writting the upload stream to the kernel will take place in the parent process","msgtype":"m.text"},"ts":1450108806000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: reportedly bz (on vacation now) has a promise implementation of toBlob somewhere in a Mozilla bug","msgtype":"m.text"},"ts":1450109017000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: just waiting for a decision on a new name and such","msgtype":"m.text"},"ts":1450109029000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: we should decide on a name and let blink-dev know then...","msgtype":"m.text"},"ts":1450109071000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'm happy with encode/convert, but would be good to double check with bz in January","msgtype":"m.text"},"ts":1450109120000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"HTML's use of ES ArrayBuffer vs. IDL ArrayBuffer is pretty confused still hmm what should I do","msgtype":"m.text"},"ts":1450109159000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: structured clone biting you?","msgtype":"m.text"},"ts":1450109177000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I would use IDL everywhere but the spec likes to talk about \"creating ArrayBuffers\" which IDL doesn't really deal with","msgtype":"m.text"},"ts":1450109180000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: oh <canvas>","msgtype":"m.text"},"ts":1450109196000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: in theory IDL should deal with that to some extent, to make sure the object setup is correct","msgtype":"m.text"},"ts":1450109225000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: e.g., when we say \"a new promise\" or \"a new XMLHttpRequest object\", it has all the same problems","msgtype":"m.text"},"ts":1450109242000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1450109246000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess I'll switch to IDL everywhere?","msgtype":"m.text"},"ts":1450109251000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah, structured cloning itself should probably move to IDL or be rewritten to some extent","msgtype":"m.text"},"ts":1450109274000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: but just creating objects should be fine and IDL needs some language around what \"new\" means or \"create\"","msgtype":"m.text"},"ts":1450109296000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: similar to how it has language around \"throw\"","msgtype":"m.text"},"ts":1450109305000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: ideally longer term it also defines loops and such","msgtype":"m.text"},"ts":1450109315000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: sad that it fall upon you to define globalThis in JavaScript, but glad you did","msgtype":"m.text"},"ts":1450110395000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah glad to finally knock that out","msgtype":"m.text"},"ts":1450110409000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: so that was the other thing I wanted to ask about, should we use \"JavaScript\" or \"ECMAScript\" throughout?","msgtype":"m.text"},"ts":1450110419000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the current spec has a note about that somewhere","msgtype":"m.text"},"ts":1450110438000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: it seems IDL uses ECMAScript, most WHATWG specs, including the one named javascript, use JavaScript","msgtype":"m.text"},"ts":1450110441000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think even (some of) TC39 wants to use JavaScript, but Brendan mentioned some issues with Oracle iirc","msgtype":"m.text"},"ts":1450110485000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"The term \"JavaScript\" is used to refer to ECMA262, rather than the official term ECMAScript, since the term JavaScript is more widely known.\"","msgtype":"m.text"},"ts":1450110491000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"waits for Oracle sue","msgtype":"m.emote"},"ts":1450110492000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I think using JS is pretty good","msgtype":"m.text"},"ts":1450110499000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: there are issues with Oracle because they own the JavaScript trademark","msgtype":"m.text"},"ts":1450110510000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Okay, I guess we should just stick to that then","msgtype":"m.text"},"ts":1450110516000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm I won't bother updating this \"lives in a window\"/\"lives in a worker\" thing. It is not as easy in HTML as it is in XHR. We should just kill those sections ASAP.","msgtype":"m.text"},"ts":1450110530000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"BTW I am having ES take over the stack of scripts basically","msgtype":"m.text"},"ts":1450110657000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It will also work with modules","msgtype":"m.text"},"ts":1450110667000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(This is not in the current PR, it's upcoming)","msgtype":"m.text"},"ts":1450110675000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://github.com/tc39/ecma262/pull/242","msgtype":"m.text"},"ts":1450110686000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: including script settings?","msgtype":"m.text"},"ts":1450110743000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: or will those remain HTML things?","msgtype":"m.text"},"ts":1450110760000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think script settings will stay for noe","msgtype":"m.text"},"ts":1450110823000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But each ES script/module will have a [[HostDefined]] slot containing the script settings object. And so ES can track the stack of them.","msgtype":"m.text"},"ts":1450110895000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://en.wikipedia.org/wiki/JavaScript#Trademark suggests Mozilla has a license for use of the JavaScript trademark, but the link does not really verify that claim","msgtype":"m.text"},"ts":1450111081000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: if you instantiate your own Realm don't you get a different kind of global associated with it? But I guess things can be refactored once that actually happens","msgtype":"m.text"},"ts":1450111633000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: hmm perhaps true... but yeah.","msgtype":"m.text"},"ts":1450111668000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I made some progress last week btw on figuring out what the setup for Location needs to become and also Window/WindowProxy","msgtype":"m.text"},"ts":1450112140000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: it seems like WindowProxy will need to handle all the security checks currently on Window too","msgtype":"m.text"},"ts":1450112157000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: good to hear yeah... still not sure how to best handle the IDL vs. not-IDL thing","msgtype":"m.text"},"ts":1450112160000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Location becomes an IDL thing, but IDL will also support redefining internal methods for IDL things","msgtype":"m.text"},"ts":1450112192000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm","msgtype":"m.text"},"ts":1450112203000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"One path I thought might work is to define Window + Location in IDL completely but then define WindowProxy + LocationProxy in ES terms","msgtype":"m.text"},"ts":1450112226000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(or, I guess, Window + BackingLocation and WindowProxy + Location)","msgtype":"m.text"},"ts":1450112239000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But by now you are much more familiar with the problem space than I.","msgtype":"m.text"},"ts":1450112261000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: I guess this is related? https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/bpbq0Rcpauk","msgtype":"m.text"},"ts":1450112317000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"maybe we don't need that level of granularity any more?","msgtype":"m.text"},"ts":1450112332000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: that's not related","msgtype":"m.text"},"ts":1450113191000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: that's some legacy stuff, older names for \"loaded\" and \"total\" https://xhr.spec.whatwg.org/#interface-progressevent","msgtype":"m.text"},"ts":1450113238000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: been bouncing the idea of transactional cache stuff in my head. Starting to settle on something like cache.transactionUntil(promise) - meaning this instance of cache holds a write-lock until the promise settles","msgtype":"m.text"},"ts":1450117876000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(or the instance is GC'd, which could be a sticking point)","msgtype":"m.text"},"ts":1450117893000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: Hello. Months have passed. It's time for me to ask about UndoManager again. What's up with it, what is its problem? Is it missing a consistency model, is that is? Or is there a simpler reason why it's stuck on the 2012 Niwa draft?","msgtype":"m.text"},"ts":1450117960000,"senderName":"paxcoder","senderId":"paxcoder@irc"},
{"content":{"body":"wanderview: I'm moving away from batching, as it doesn't allow you to read from a cache, then do writes based on what you read","msgtype":"m.text"},"ts":1450117989000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"paxcoder: heh, I'm not sure","msgtype":"m.text"},"ts":1450117998000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"paxcoder: Gecko reportedly has some implementation of which the state is unclear to me; rniwa left Google and joined Apple and at the same time realigned interests I think","msgtype":"m.text"},"ts":1450118051000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"paxcoder: so, there's nobody that's working on it, and nobody is really interested in pursuing it as far as I can tell","msgtype":"m.text"},"ts":1450118087000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That's weird. Esp. with Github's Atom editor and Microsoft's fork.","msgtype":"m.text"},"ts":1450118146000,"senderName":"paxcoder","senderId":"paxcoder@irc"},
{"content":{"body":"Well, what does have some traction is a different more low-level approach to editing","msgtype":"m.text"},"ts":1450118326000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"What do you mean?","msgtype":"m.text"},"ts":1450118348000,"senderName":"paxcoder","senderId":"paxcoder@irc"},
{"content":{"body":"So perhaps if that is done UndoManager can be a thing that is implemented by the application more easily","msgtype":"m.text"},"ts":1450118350000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I haven't really followed what is going on since it's not clear to me it's going well, but https://w3c.github.io/editing/","msgtype":"m.text"},"ts":1450118379000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: you should talk to jsbell; he has ideas around transactions/locking/etc. in general.","msgtype":"m.text"},"ts":1450118634000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: If I'm silent I'm looking into things, doesn't mean I don't appreciate. FYI","msgtype":"m.text"},"ts":1450118645000,"senderName":"paxcoder","senderId":"paxcoder@irc"},
{"content":{"body":"annevk: BTW. While I'm reading this, I ran into your voice on... what was it.. The Web Platform Podcast perhaps? Idk. Anyway still refreshing my feeds hoping to scoop up a blog post of yours some time.","msgtype":"m.text"},"ts":1450118768000,"senderName":"paxcoder","senderId":"paxcoder@irc"},
{"content":{"body":"paxcoder: ah yes, I have an idea for a blog post now, so maybe it'll happen :-)","msgtype":"m.text"},"ts":1450118836000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"paxcoder: and I did appear on such a podcast once, so perhaps","msgtype":"m.text"},"ts":1450118870000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: yeah, I know IDB is going with the waitUntil model, but good point about locking. I'd like to get away with write-locking only, but this is where I have less experience.","msgtype":"m.text"},"ts":1450118906000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"paxcoder: and yeah, I think having UndoManager handled by the browser could definitely help out a bunch of folks, but I think in the end it hasn't been fully tackled since it was too hard and editing in the browser still largely sucks","msgtype":"m.text"},"ts":1450118918000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"paxcoder: perhaps you can reach out to rniwa on Twitter or IRC somewhere and get a more complete story","msgtype":"m.text"},"ts":1450118951000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: The looks of these input events remind me of iOS, but iOS has rich string thingies, and the web does not, so I don't see how that helps with syntax highlighting or WYSIWG editors. What will the blog post be about if I may inquire?","msgtype":"m.text"},"ts":1450119039000,"senderName":"paxcoder","senderId":"paxcoder@irc"},
{"content":{"body":"annevk: does rniwa come here or did you mean some other channel?","msgtype":"m.text"},"ts":1450119300000,"senderName":"paxcoder","senderId":"paxcoder@irc"},
{"content":{"body":"Question for everybody: What do you use instead of caniuse.com?","msgtype":"m.text"},"ts":1450119502000,"senderName":"paxcoder","senderId":"paxcoder@irc"},
{"content":{"body":"begins to suspect execCommand may have something to do with the missing richstring feature","msgtype":"m.emote"},"ts":1450119596000,"senderName":"paxcoder","senderId":"paxcoder@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1450119875000,"senderName":"paxcoder","senderId":"paxcoder@irc"},
{"content":{"body":"JakeA: I'd like to know the real world use case driving transactions for Cache","msgtype":"m.text"},"ts":1450123368000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: or another way to ask the question... if some needs the complexity of transactional behavior, can they just use IDB?","msgtype":"m.text"},"ts":1450123496000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: also, I think we already have a transaction mechanism in SW...  the install and activate events","msgtype":"m.text"},"ts":1450124052000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"maybe thats over stating it, but they fill a similar role","msgtype":"m.text"},"ts":1450124092000,"senderName":"wanderview","senderId":"wanderview@irc"}
]