[
{"content":{"body":"Domenic: I see! Thanks!","msgtype":"m.text"},"ts":1557880535000,"senderName":"cybai|leave","senderId":"cybai|leave@irc"},
{"content":{"body":"annevk: does the Web Platform have support for identity encode into Uint8Buffer?","msgtype":"m.text"},"ts":1557905700000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"annevk: i.e. take the low 8 bits of each code unit in a JS string and put them into an array buffer?","msgtype":"m.text"},"ts":1557905722000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"(assuming the high half of each UTF-16 code unit is zero)","msgtype":"m.text"},"ts":1557905744000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: there's https://infra.spec.whatwg.org/#isomorphic-encode, which unfortunately has an assert against having non-zero high half","msgtype":"m.text"},"ts":1557905816000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: did you need something like that in a spec without the assert?","msgtype":"m.text"},"ts":1557905907000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: (uhm) ^^","msgtype":"m.text"},"ts":1557905940000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"hsivonen: ByteString, but nothing exposed \"raw\"","msgtype":"m.text"},"ts":1557905954000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: ByteString throws for > U+0255","msgtype":"m.text"},"ts":1557905981000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"euhm","msgtype":"m.text"},"ts":1557905990000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"> U+00FF","msgtype":"m.text"},"ts":1557906015000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I need more sleep","msgtype":"m.text"},"ts":1557906028000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TimothyGu: I meant: Is that exposed as a JS API?","msgtype":"m.text"},"ts":1557906048000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: nope, we had some requests for \"true iso-8859-1\" but nothing came of that thus far","msgtype":"m.text"},"ts":1557906119000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that is, do we have a story for piece-wise migration from JS strings as containers for binary data to Uint8Array?","msgtype":"m.text"},"ts":1557906120000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"annevk: thanks","msgtype":"m.text"},"ts":1557906127000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: I think in part because you strongly opposed some of this early on","msgtype":"m.text"},"ts":1557906149000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh?","msgtype":"m.text"},"ts":1557906162000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: well, maybe not distinct APIs, but putting them in TextEncoder/TextDecoder","msgtype":"m.text"},"ts":1557906186000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that's different","msgtype":"m.text"},"ts":1557906203000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Okay, so I've seen requests for \"true ascii\" and \"true iso-8859-1\", not sure about ignoring the non-significant bits though","msgtype":"m.text"},"ts":1557906264000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And there've been requests for TextEncoder/TextDecoder-style APIs around base64","msgtype":"m.text"},"ts":1557906290000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's not entirely clear to me what the right approach is as I'm not sure they're worth that much additional classes","msgtype":"m.text"},"ts":1557906325000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And putting first-class support for these in JS and not putting first-class support for UTF-8 in JS could also give the wrong incentive to folks","msgtype":"m.text"},"ts":1557906388000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"at this time, I'm not asking for anything to be added","msgtype":"m.text"},"ts":1557906413000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: okay, curious what made you consider this; did you see a bunch of JS strings containing \"binary data\"?","msgtype":"m.text"},"ts":1557907401000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Thunderbird","msgtype":"m.text"},"ts":1557907798000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"so not a Web use case","msgtype":"m.text"},"ts":1557907829000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"ta","msgtype":"m.text"},"ts":1557908925000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Script experts! In https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block , can currentScript ever not be null if the script is a module script?","msgtype":"m.text"},"ts":1557926643000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Domenic, zcorpan ^","msgtype":"m.text"},"ts":1557926652000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: depends on what you mean. That step will set it to null. But if you then synchronously insert a <script>, maybe it can overwrite it... not sure if that's possible though since we disallow top-level document.write, and inserting a script from script will make it async...","msgtype":"m.text"},"ts":1557926744000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it is both null and not null until you observe it","msgtype":"m.text"},"ts":1557926814000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Probably though any top-level code that runs inside a <script type=module> or its dependencies will see document.currentScript === null. My guess is there are not any tricks to break that, without going back to the event loop in some way.","msgtype":"m.text"},"ts":1557926839000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"No, I mean, I think it should already be null at the start of the algorithm, since module scripts never execute sync (right?)","msgtype":"m.text"},"ts":1557926842000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Oh","msgtype":"m.text"},"ts":1557926852000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Wow, interesting, I think you are correct. That's a nice simplification...","msgtype":"m.text"},"ts":1557926907000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Ms2ger: the only caller i'm unsure about whether it is free of bugs is https://html.spec.whatwg.org/multipage/xhtml.html#parsing-xhtml-documents:execute-the-script-block","msgtype":"m.text"},"ts":1557927273000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"(I mean, I'm not sure any other part is free of bugs, but you know what I mean)","msgtype":"m.text"},"ts":1557927308000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Can a module script be the pending parsing-blocking script?","msgtype":"m.text"},"ts":1557927335000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Even with import() you cannot dictate when execution happens?","msgtype":"m.text"},"ts":1557927353000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"import() returns a promise","msgtype":"m.text"},"ts":1557927382000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"It cannot be a pending parsing-blocking script, I just traced it","msgtype":"m.text"},"ts":1557927407000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(Wow, that XML <script> section is scary.)","msgtype":"m.text"},"ts":1557927418000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ms2ger: no. I think this part of the spec is fine, upon closer thought. \"Prepare\" is the same as for text/html parsing","msgtype":"m.text"},"ts":1557927429000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Ms2ger: it's the other thing that it does that's important, but I guess it queues a task to execute and resolve the promise","msgtype":"m.text"},"ts":1557927441000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(and not give you a handle on something you get to execute)","msgtype":"m.text"},"ts":1557927468000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: can Wasm be an escape hatch?","msgtype":"m.text"},"ts":1557927522000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"execute a script block\" is only for <script>s","msgtype":"m.text"},"ts":1557927584000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"A more explicit name would probably be something like \"run a script created by a script element\"","msgtype":"m.text"},"ts":1557927627000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ah yeah","msgtype":"m.text"},"ts":1557927680000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://github.com/whatwg/html/pull/4627","msgtype":"m.text"},"ts":1557928511000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"nox: I have a fun test","msgtype":"m.text"},"ts":1557940165000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: https://software.hixie.ch/utilities/js/live-dom-viewer/saved/6910","msgtype":"m.text"},"ts":1557940198000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger who hopefully reads scrollback: littledan: I think we should be able to merge JSON modules into the spec tomorrow-ish, I don't recall any blockers besides maybe some nits, and the tests M2ger has done seem good enough to get us started until an implementer gets involved to add more alongside their implementation. The PRs to merge are Web IDL synthetic modules, then HTML + WPT. I'll try to do that tomorrow.","msgtype":"m.text"},"ts":1557958203000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: 🍾","msgtype":"m.text"},"ts":1557958833000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Your test suggestions seemed good to me; agree there is still a bit more to do there","msgtype":"m.text"},"ts":1557958870000,"senderName":"littledan","senderId":"littledan@irc"}
]