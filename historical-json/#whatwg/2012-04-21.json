[
{"content":{"body":"If a browser supports SVG, is there a 100% chance (or at least close) that it will support XHTML + SVG?","msgtype":"m.text"},"ts":1334966843000,"senderName":"Von_Davidicus","senderId":"Von_Davidicus@irc"},
{"content":{"body":"No.","msgtype":"m.text"},"ts":1334966860000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"What is the likelihood, then?","msgtype":"m.text"},"ts":1334967144000,"senderName":"Von_Davidicus","senderId":"Von_Davidicus@irc"},
{"content":{"body":"It's high, but that's not a useful number. You need to know the specific versions of browsers that didn't support inline SVG.","msgtype":"m.text"},"ts":1334967196000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Okay.  *Is working on a way to let people know if their browser will support SVG+XHTML+CSS3*","msgtype":"m.text"},"ts":1334967723000,"senderName":"Von_Davidicus","senderId":"Von_Davidicus@irc"},
{"content":{"body":"jzaefferer: you around?","msgtype":"m.text"},"ts":1334971656000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: Syntax component added","msgtype":"m.text"},"ts":1334972055000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: http://dvcs.w3.org/hg/encoding/rev/94f075e5eabb seems to be working fine now","msgtype":"m.text"},"ts":1334972190000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I don't know what the problem was","msgtype":"m.text"},"ts":1334972202000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Managed to scare a computer tech today.  I've been saying over the past couple of weeks that I needed a computer that was over 15 years old repaired.  And today, I brought it in.","msgtype":"m.text"},"ts":1334979553000,"senderName":"Von_Davidicus","senderId":"Von_Davidicus@irc"},
{"content":{"body":"Hixie: text-wrap is supported in browsers (at least 'normal' and 'word-wrap')","msgtype":"m.text"},"ts":1334988847000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"though i think making white-space a shorthand for text-wrap might not be web-compatible (it'd make text-wrap reset if you do text-wrap:word-wrap; white-space:normal;)","msgtype":"m.text"},"ts":1334988982000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: https://bitbucket.org/validator/validator/changeset/7dac5fb16df7","msgtype":"m.text"},"ts":1334989075000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hmm, isn't http://www.whatwg.org/specs/web-apps/current-work/multipage/#text-type-text-state-and-search-state-type-search supposed to redirect?","msgtype":"m.text"},"ts":1334989111000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"dev.w3.org/html5/spec/#text-type-text-state-and-search-state-type-search does","msgtype":"m.text"},"ts":1334989145000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1334989186000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I guess that's because I added code on the w3c side to make it work","msgtype":"m.text"},"ts":1334989203000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: LGTM","msgtype":"m.text"},"ts":1334989558000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1334989567000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I was thinking about the problem of support for double-res images for devices like Apple's Retina display, and I was wondering what ppl think of adding support for a <meta img-x2-res=\"_x2\" /> tag, which would alert the browser of the likely presence of 'filename_x2.ext' when it sees img tags, and it would fall back with a second request for 'filename.ext' in case it's not found. This seems","msgtype":"m.text"},"ts":1334991255000,"senderName":"TomPenzer","senderId":"TomPenzer@irc"},
{"content":{"body":"relatively easy to implement (especially for web developers), and degrades gracefully on older browsers.","msgtype":"m.text"},"ts":1334991255000,"senderName":"TomPenzer","senderId":"TomPenzer@irc"},
{"content":{"body":"what does \"img-x2-res\" stand for?","msgtype":"m.text"},"ts":1334991398000,"senderName":"Von_Davidicus","senderId":"Von_Davidicus@irc"},
{"content":{"body":"img times 2 resolution","msgtype":"m.text"},"ts":1334991411000,"senderName":"TomPenzer","senderId":"TomPenzer@irc"},
{"content":{"body":"or double-resolution","msgtype":"m.text"},"ts":1334991445000,"senderName":"TomPenzer","senderId":"TomPenzer@irc"},
{"content":{"body":"Hm.","msgtype":"m.text"},"ts":1334991556000,"senderName":"Von_Davidicus","senderId":"Von_Davidicus@irc"},
{"content":{"body":"as a web developer, i would be eternally grateful! : P","msgtype":"m.text"},"ts":1334991658000,"senderName":"TomPenzer","senderId":"TomPenzer@irc"},
{"content":{"body":"i mean, besides everything these people have already done to make that even possible","msgtype":"m.text"},"ts":1334991721000,"senderName":"TomPenzer","senderId":"TomPenzer@irc"},
{"content":{"body":"Hixie: yes, I do want to define encoding sniffing","msgtype":"m.text"},"ts":1334991902000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: presumably by defining what Gecko has, unless someone has a better idea","msgtype":"m.text"},"ts":1334991945000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"a more fleshed out version of the idea is to have the meta tag include a property for 'assume-present', as such: <meta img-x2-res=\"_x2\" assume-present=\"false\" />, and then for any img tags for which double-res assets are available, you could add a property to the img tag as such: <img x2-res=\"true\" />. Or, you could leave the 'assume-present' property off, as 'true' is default, and put <img","msgtype":"m.text"},"ts":1334992357000,"senderName":"TomPenzer","senderId":"TomPenzer@irc"},
{"content":{"body":"x2-res=\"false\" /> on any images for which double-res assets are unavailable. This would avoid a second request when the first fails.","msgtype":"m.text"},"ts":1334992357000,"senderName":"TomPenzer","senderId":"TomPenzer@irc"},
{"content":{"body":"annevk: hi","msgtype":"m.text"},"ts":1334992417000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"How about x2-res work like sort of like a boolean attribute?  If it's not there, it's *assumed* to be false?","msgtype":"m.text"},"ts":1334992420000,"senderName":"Von_Davidicus","senderId":"Von_Davidicus@irc"},
{"content":{"body":"rereads your post.","msgtype":"m.emote"},"ts":1334992472000,"senderName":"Von_Davidicus","senderId":"Von_Davidicus@irc"},
{"content":{"body":"yeah, if the meta tag isn't present, it's assumed to be false. The =\"_x2\" is to allow different developers to choose a double resolution filename key that works for their naming conventions","msgtype":"m.text"},"ts":1334992479000,"senderName":"TomPenzer","senderId":"TomPenzer@irc"},
{"content":{"body":"Oh, okay.","msgtype":"m.text"},"ts":1334992491000,"senderName":"Von_Davidicus","senderId":"Von_Davidicus@irc"},
{"content":{"body":"annevk: we might need to re-visit the decision to make NodeList inherit from Array","msgtype":"m.text"},"ts":1334992503000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"I have a question of my own:  Is it acceptable to include a test in a webpage that will determine whether or not a browser will properly display something?  What I have after a hyperlink is an <object> element that displays an XHTML + SVG page that shows a checkmark, coloured green via HSL notation.  If the viewer sees that the checkmark is black, or doesn't show up at all, then the viewer knows that the browser won't properly support the page on ","msgtype":"m.text"},"ts":1334992522000,"senderName":"Von_Davidicus","senderId":"Von_Davidicus@irc"},
{"content":{"body":"annevk: https://bugs.webkit.org/show_bug.cgi?id=81573#c36 indicates that making this change isn't compatible with the Web :(","msgtype":"m.text"},"ts":1334992559000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"sad","msgtype":"m.text"},"ts":1334992739000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"just file a bug I guess if it doesn't work out and we'll revert the spec change","msgtype":"m.text"},"ts":1334992771000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah... not a happy ending :(","msgtype":"m.text"},"ts":1334992809000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Von_Davidicus: acceptable measured how?","msgtype":"m.text"},"ts":1334992811000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: i'll double check with arv before filing a bug","msgtype":"m.text"},"ts":1334992821000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: not entirely unexpected I guess that changing such a core API breaks the web","msgtype":"m.text"},"ts":1334992837000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: right.","msgtype":"m.text"},"ts":1334992856000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"I'm curious what removing Attr nodes will do","msgtype":"m.text"},"ts":1334992860000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"As in \"considered a good idea by the webdeveloping community at large\"","msgtype":"m.text"},"ts":1334992917000,"senderName":"Von_Davidicus","senderId":"Von_Davidicus@irc"},
{"content":{"body":"given that you can get on the final page directly, worrying about it is probably not worth it","msgtype":"m.text"},"ts":1334992965000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hm?","msgtype":"m.text"},"ts":1334992993000,"senderName":"Von_Davidicus","senderId":"Von_Davidicus@irc"},
{"content":{"body":"annevk: yeah, that'll be an interesting adventure.","msgtype":"m.text"},"ts":1334993271000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"oh cool","msgtype":"m.text"},"ts":1334994253000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"WebKit has a shared encoding sniffing library","msgtype":"m.text"},"ts":1334994261000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://trac.webkit.org/browser/trunk/Source/WebCore/loader/TextResourceDecoder.cpp","msgtype":"m.text"},"ts":1334994262000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is that really all WebKit has?","msgtype":"m.text"},"ts":1334994287000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"worst idea ever: -webkit-image-set( url(image.png) 1x, url(image⊙2p) 2x )","msgtype":"m.text"},"ts":1334994298000,"senderName":"TomPenzer","senderId":"TomPenzer@irc"},
{"content":{"body":"TomPenzer: why?","msgtype":"m.text"},"ts":1334994367000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: https://bugs.webkit.org/show_bug.cgi?id=18270 says that \"x-user-defined\" must mean windows-1252","msgtype":"m.text"},"ts":1334994385000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"because all the 2x images on my site are going to have the same \"_2x\" or \"@2x\" filename key, and i shouldn't have to do all this busy work","msgtype":"m.text"},"ts":1334994411000,"senderName":"TomPenzer","senderId":"TomPenzer@irc"},
{"content":{"body":"zcorpan: also https://bugs.webkit.org/show_bug.cgi?id=15555 ugh","msgtype":"m.text"},"ts":1334994512000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://mxr.mozilla.org/mozilla-central/source/extensions/universalchardet/src/base/JISFreq.tab#338 so why include it?","msgtype":"m.text"},"ts":1334995966000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wonder how much of the universalchardet code is still relevant","msgtype":"m.text"},"ts":1334995978000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"e.g. there's code for iso-2022-cn in there, which IE does not even support","msgtype":"m.text"},"ts":1334995991000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and Thai was not detected before 2009? https://bugzilla.mozilla.org/show_bug.cgi?id=488426","msgtype":"m.text"},"ts":1334996174000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess I should start keeping notes somewhere","msgtype":"m.text"},"ts":1334996213000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If you wish to keep notes, I can suggest a few good music programs.","msgtype":"m.text"},"ts":1334996643000,"senderName":"Von_Davidicus","senderId":"Von_Davidicus@irc"},
{"content":{"body":"not sure if serious... or joking","msgtype":"m.text"},"ts":1334996812000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I was being ridiculous.  :)","msgtype":"m.text"},"ts":1334996842000,"senderName":"Von_Davidicus","senderId":"Von_Davidicus@irc"},
{"content":{"body":"I like to have a little pun with English now and then.","msgtype":"m.text"},"ts":1334996879000,"senderName":"Von_Davidicus","senderId":"Von_Davidicus@irc"},
{"content":{"body":"hsivonen: why did you limit utf-16 sniffing to HTML?","msgtype":"m.text"},"ts":1334997211000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"notes are tracked here http://wiki.whatwg.org/wiki/Encoding#Sniffing","msgtype":"m.text"},"ts":1334997629000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what would also be interesting is Mozilla Telemetry data on universalchardet","msgtype":"m.text"},"ts":1335004466000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but probably only if it's included in a non-beta release...","msgtype":"m.text"},"ts":1335004503000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh sweet","msgtype":"m.text"},"ts":1335007159000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Fullscreen advocacy is already underway and only caters to WebKit/Gecko proprietary extensions","msgtype":"m.text"},"ts":1335007180000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sighs","msgtype":"m.emote"},"ts":1335007200000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"thank your colleague http://www.slideshare.net/robnyman/javascript-apis-the-web-is-the-platform-mdn-hack-day-buenos-aires :p","msgtype":"m.text"},"ts":1335007246000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Boo","msgtype":"m.text"},"ts":1335007553000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"https://bugzilla.mozilla.org/show_bug.cgi?id=746437 \"I can't think of a good reason to not implement it as-is.\"","msgtype":"m.text"},"ts":1335007655000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that's good at least","msgtype":"m.text"},"ts":1335007660000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"can anyone tell me why this is not working http://jsfiddle.net/uBXr2/1/ ?","msgtype":"m.text"},"ts":1335015644000,"senderName":"ruby_on_tails","senderId":"ruby_on_tails@irc"},
{"content":{"body":"ruby_on_tails: onLoad","msgtype":"m.text"},"ts":1335015809000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"it is onload","msgtype":"m.text"},"ts":1335015812000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1335015843000,"senderName":"ruby_on_tails","senderId":"ruby_on_tails@irc"},
{"content":{"body":"it works now","msgtype":"m.text"},"ts":1335015845000,"senderName":"ruby_on_tails","senderId":"ruby_on_tails@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1335015846000,"senderName":"ruby_on_tails","senderId":"ruby_on_tails@irc"},
{"content":{"body":"annevk: I wasn't needed for anything else and it was late in the release cycle","msgtype":"m.text"},"ts":1335016371000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"annevk: the whole thing might have been an overreaction from a single data point","msgtype":"m.text"},"ts":1335016403000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: Opera has something similar, but only checks the first four bytes","msgtype":"m.text"},"ts":1335017402000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: any idea why this doesnt grayscale the image ? http://jsfiddle.net/32f6h/","msgtype":"m.text"},"ts":1335017502000,"senderName":"ruby_on_tails","senderId":"ruby_on_tails@irc"},
{"content":{"body":"weird, tried 3 codes from 3 different tutorial, none of them works, not sure whats wrong","msgtype":"m.text"},"ts":1335017642000,"senderName":"ruby_on_tails","senderId":"ruby_on_tails@irc"},
{"content":{"body":"ruby_on_tails: You're not waiting for the image to finish loading, before you do the getImageData/putImageData code","msgtype":"m.text"},"ts":1335017797000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"but there is the onload thing right ?","msgtype":"m.text"},"ts":1335017825000,"senderName":"ruby_on_tails","senderId":"ruby_on_tails@irc"},
{"content":{"body":"so you're greyscaling the empty canvas and then (once the image has loaded, later) drawing the image","msgtype":"m.text"},"ts":1335017835000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"i am trying http://spyrestudios.com/html5-canvas-image-effects-black-white/ and http://beej.us/blog/data/html5s-canvas-2-pixel/","msgtype":"m.text"},"ts":1335017852000,"senderName":"ruby_on_tails","senderId":"ruby_on_tails@irc"},
{"content":{"body":"But it still won't work the other way around because if you drawImage an image from a different domain, then you're not allowed to call getImageData","msgtype":"m.text"},"ts":1335017870000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1335017883000,"senderName":"ruby_on_tails","senderId":"ruby_on_tails@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1335017884000,"senderName":"ruby_on_tails","senderId":"ruby_on_tails@irc"},
{"content":{"body":"to prevent people stealing image data from non-public sites","msgtype":"m.text"},"ts":1335017891000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"let me try a local image then","msgtype":"m.text"},"ts":1335017898000,"senderName":"ruby_on_tails","senderId":"ruby_on_tails@irc"},
{"content":{"body":"doesnt work on even a local image","msgtype":"m.text"},"ts":1335017930000,"senderName":"ruby_on_tails","senderId":"ruby_on_tails@irc"},
{"content":{"body":"If you move the getImageData...putImageData code into the onload function, just after the drawImage, it should be closer to working","msgtype":"m.text"},"ts":1335017964000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"bleh its my first day, i am not kind of getting it","msgtype":"m.text"},"ts":1335018116000,"senderName":"ruby_on_tails","senderId":"ruby_on_tails@irc"},
{"content":{"body":"jsFiddle seems to already wrap your stuff in an onload thing, and runs it in some not-immediately-obvious domain","msgtype":"m.text"},"ts":1335018295000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"http://software.hixie.ch/utilities/js/live-dom-viewer/?saved=1485 is a less confusing environment, and seems to work","msgtype":"m.text"},"ts":1335018326000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"oh man","msgtype":"m.text"},"ts":1335018559000,"senderName":"ruby_on_tails","senderId":"ruby_on_tails@irc"},
{"content":{"body":"i had to put the greyscaling code inside that onload","msgtype":"m.text"},"ts":1335018567000,"senderName":"ruby_on_tails","senderId":"ruby_on_tails@irc"},
{"content":{"body":"it works now","msgtype":"m.text"},"ts":1335018614000,"senderName":"ruby_on_tails","senderId":"ruby_on_tails@irc"},
{"content":{"body":"thanks Philip`","msgtype":"m.text"},"ts":1335018617000,"senderName":"ruby_on_tails","senderId":"ruby_on_tails@irc"},
{"content":{"body":"once I've used pushState() to shove parameters up into the URI, what event can I use instead of 'load' to get older param states as the user walks back through the history?","msgtype":"m.text"},"ts":1335036437000,"senderName":"shepazu","senderId":"shepazu@irc"},
{"content":{"body":"popstate?","msgtype":"m.text"},"ts":1335037094000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: thanks, tried it, didn't work, nor did hashchange… wonder if I'm using it wrong, or if maybe it doesn't work in SVG for some reason?","msgtype":"m.text"},"ts":1335037205000,"senderName":"shepazu","senderId":"shepazu@irc"},
{"content":{"body":"ah, I think I was using it wrong","msgtype":"m.text"},"ts":1335037536000,"senderName":"shepazu","senderId":"shepazu@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1335037541000,"senderName":"shepazu","senderId":"shepazu@irc"},
{"content":{"body":"oh, popstate fires before the URI is changed… odd","msgtype":"m.text"},"ts":1335037843000,"senderName":"shepazu","senderId":"shepazu@irc"},
{"content":{"body":"inconvenient if you're using the URI to store state in parameters","msgtype":"m.text"},"ts":1335037874000,"senderName":"shepazu","senderId":"shepazu@irc"},
{"content":{"body":"uri where?","msgtype":"m.text"},"ts":1335037953000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"History.state is changed before popstate","msgtype":"m.text"},"ts":1335037965000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(window.history.state)","msgtype":"m.text"},"ts":1335038047000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: thanks… I was using location.href","msgtype":"m.text"},"ts":1335038145000,"senderName":"shepazu","senderId":"shepazu@irc"},
{"content":{"body":"(also popstate's event.state)","msgtype":"m.text"},"ts":1335038193000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i'd expect that to be set before the events, too (don't know off-hand though)","msgtype":"m.text"},"ts":1335038260000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html#history-traversal not sure which step that is, but i'd guess 5","msgtype":"m.text"},"ts":1335038293000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: I'd have expected that too… SVG in FF doesn't seem to happen, though","msgtype":"m.text"},"ts":1335038299000,"senderName":"shepazu","senderId":"shepazu@irc"},
{"content":{"body":"(no clue about svg)","msgtype":"m.text"},"ts":1335038306000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: Is the goal of the encoding standard to intercept any non-UTF-8 encoding and output it as UTF-8? If not, would that be a good idea? (I'm not great with encodings.)","msgtype":"m.text"},"ts":1335044868000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"GPHemsley: given a definition of a decoder and a UTF-8 encoder you can do that","msgtype":"m.text"},"ts":1335044898000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Would that be a good thing to do? I'm just wondering","msgtype":"m.text"},"ts":1335044925000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"GPHemsley: The more important thing to define is how to get a sequence of Unicode codepoints from an encoding and how to get them to the encoding","msgtype":"m.text"},"ts":1335044928000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"GPHemsley: If you want to change the encoding of something, that's what you do. And the spec defines enough to do that. (As it defines all the decoders, and UTF-8 encoding is well-defined.)","msgtype":"m.text"},"ts":1335044957000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"well presumably the user doesn't particularly care what the encoding is, as long as it looks like it's supposed to, right?","msgtype":"m.text"},"ts":1335044992000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"and the encoding would only become relevant for copy and paste and the like","msgtype":"m.text"},"ts":1335045008000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"(if we're talking only about browsers here)","msgtype":"m.text"},"ts":1335045024000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"Basically, all browsers have an internal Unicode representaiton, which is irrelevant what it is. (I believe everyone uses UTF-16.)","msgtype":"m.text"},"ts":1335045069000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"The important thing is how to decode the byte-stream, and how to encode to a byte-stream.","msgtype":"m.text"},"ts":1335045089000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Then the internal representation is an impl detail which isn't black-box observable.","msgtype":"m.text"},"ts":1335045110000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: What decides the byte-stream that the user actually sees, though?","msgtype":"m.text"},"ts":1335045375000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"9doesn't gecko use not-utf-16 sometimes?)","msgtype":"m.text"},"ts":1335045427000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"s/9/(/","msgtype":"m.text"},"ts":1335045433000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"GPHemsley: Typically the browser hands off the string as UTF-16 to the platform layer.","msgtype":"m.text"},"ts":1335045831000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1335045844000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"What happens in the platform layer I don't really know, I treat it as a black-box :)","msgtype":"m.text"},"ts":1335045930000,"senderName":"gsnedders","senderId":"gsnedders@irc"}
]