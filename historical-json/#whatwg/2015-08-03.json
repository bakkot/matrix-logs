[
{"content":{"body":"Ugh, some kind of OS X autocorrect thing added a space between opaque and redirect","msgtype":"m.text"},"ts":1438582800000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Fortunately that only happened in the commit message","msgtype":"m.text"},"ts":1438582817000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: and UAs implement that beyond 1024 bytes?","msgtype":"m.text"},"ts":1438583759000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: html5lib has code for it, but Iâ€™ll have to test it in other impls","msgtype":"m.text"},"ts":1438588735000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Any love here for range.insert(nodes...)? https://www.w3.org/Bugs/Public/show_bug.cgi?id=27650","msgtype":"m.text"},"ts":1438594227000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: using \"<a spec=url>URL</a>\" within DOM doesn't give the expected result","msgtype":"m.text"},"ts":1438595377000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"why not make document fragments easier to use","msgtype":"m.text"},"ts":1438596072000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"keep ranges as they are, and support something like document.createDocumentFragment(node1, node2, ...)","msgtype":"m.text"},"ts":1438596207000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"well, we could add that to new DocumentFragment() I guess","msgtype":"m.text"},"ts":1438596236000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess the question is whether we'll ever need more arguments to support","msgtype":"m.text"},"ts":1438596251000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well in that case we could add a second method that is intended just for this convenience","msgtype":"m.text"},"ts":1438596313000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"instead of using new DocumentFragment or document.createDocumentFragment","msgtype":"m.text"},"ts":1438596372000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"could even add such a convenience method to collections","msgtype":"m.text"},"ts":1438596399000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"JoWie: maybe add that comment to that bug","msgtype":"m.text"},"ts":1438596414000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"range.insertNode(document.getElementsByClassName('foo').toFragment())","msgtype":"m.text"},"ts":1438596430000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1438596455000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"new DocumentFragment(...document.getElementsByClassName('foo'))?","msgtype":"m.text"},"ts":1438596486000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"yes or that","msgtype":"m.text"},"ts":1438596534000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"Ms2ger: yeah, JoWie, I meant the \"make DocumentFragment easier\" comment","msgtype":"m.text"},"ts":1438596535000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JoWie: that seems spot on, toFragment() a lot less","msgtype":"m.text"},"ts":1438596553000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"posted the comment","msgtype":"m.text"},"ts":1438597045000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"bugzilla redirected me to a completely different bug after I submitted it, very weird","msgtype":"m.text"},"ts":1438597063000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"it does that sometimes when stuff is part of a collection or so","msgtype":"m.text"},"ts":1438597096000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so you get to see more bugs? I'm not really sure what the purpose is","msgtype":"m.text"},"ts":1438597109000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the whole page refresh is kind of oldfashioned","msgtype":"m.text"},"ts":1438597119000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Changes submitted for bug 27650... then on the same page: Bug 27688 - Odd comment in DO...","msgtype":"m.text"},"ts":1438597134000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"speaking of that bug annevk, does subclassing Array work well with the live-ness of the dom collections?","msgtype":"m.text"},"ts":1438597270000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"JoWie: not sure which bug you're talking about, but a subclass of Array would only be used for a snapshot","msgtype":"m.text"},"ts":1438597300000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://www.w3.org/Bugs/Public/show_bug.cgi?id=27688#c3","msgtype":"m.text"},"ts":1438597310000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"the one i was redirected to ;)","msgtype":"m.text"},"ts":1438597330000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"Weird, that one is fixed","msgtype":"m.text"},"ts":1438597404000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: Are you aware of a case where \"prescan a byte stream to determine its encoding\" would fail to find an encoding when given 1024 bytes, but tree construction would still \"change the encoding\" based on a meta start tag in the first 1024 bytes?","msgtype":"m.text"},"ts":1438601839000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"philipj: any opinions on https://www.w3.org/Bugs/Public/show_bug.cgi?id=27456 and https://bugzilla.mozilla.org/show_bug.cgi?id=1061578?","msgtype":"m.text"},"ts":1438603307000,"senderName":"annevk_","senderId":"annevk_@irc"},
{"content":{"body":"SimonSapin: I think hsivonen might have some statistics","msgtype":"m.text"},"ts":1438603326000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ugh, namespace lookup?","msgtype":"m.text"},"ts":1438604697000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"annevk: commented on the bug, but haven't looked at any of this before","msgtype":"m.text"},"ts":1438605208000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"Hopefully Arkadiusz replies since indeed, ugh, namespaces","msgtype":"m.text"},"ts":1438605408000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"They're not the greatest APIs for dealing with them either","msgtype":"m.text"},"ts":1438605437000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Are they supposed to reflect something like \"the prefix->namespace\" mappings that the parser would have used here?","msgtype":"m.text"},"ts":1438605811000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"move \" to the end","msgtype":"m.text"},"ts":1438605823000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: something like that, I suppose","msgtype":"m.text"},"ts":1438605849000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: designed before my time","msgtype":"m.text"},"ts":1438605854000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, it sure looks weird as implemented in Blink","msgtype":"m.text"},"ts":1438605864000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"so I hope Arkadiusz will just tell me what to do :)","msgtype":"m.text"},"ts":1438605956000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: https://www.w3.org/Bugs/Public/show_bug.cgi?id=25428?","msgtype":"m.text"},"ts":1438606649000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: hasFeature() now always returns true in Blink","msgtype":"m.text"},"ts":1438606732000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"annevk: I'll comment and close the bug","msgtype":"m.text"},"ts":1438606874000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: ta","msgtype":"m.text"},"ts":1438606881000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: is there a way to close Bugzilla components for new bugs while still letting you mess around with existing bugs?","msgtype":"m.text"},"ts":1438607586000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: I think other than HTML/Unwelcome, we're probably ready for such a switch within WHATWG and perhaps some WebAppsWG components","msgtype":"m.text"},"ts":1438607626000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: and https://www.w3.org/Bugs/Public/show_bug.cgi?id=27386?","msgtype":"m.text"},"ts":1438607751000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is doing some bug triage today","msgtype":"m.emote"},"ts":1438607762000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"can tell","msgtype":"m.emote"},"ts":1438607772000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"annevk: how much effort do you want to spend trying to kill CDATASection?","msgtype":"m.text"},"ts":1438607830000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"I don't know","msgtype":"m.text"},"ts":1438607840000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: ^^?","msgtype":"m.text"},"ts":1438607849000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: I have stopped caring about a lot of these things, although any simplification we can make would still be nice","msgtype":"m.text"},"ts":1438607876000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I tried to measure the cases where CDATASection was serialized at one point, but failed, and even if we could measure it I don't know what it would say about the risk","msgtype":"m.text"},"ts":1438607899000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"Well, if it never happens then the risk is low","msgtype":"m.text"},"ts":1438607907000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"but since CDATASection can't be nuked thoroughly, I'd vote to just keep it around and wait until time machines become available","msgtype":"m.text"},"ts":1438607959000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"I know I don't want to add it to Servo :)","msgtype":"m.text"},"ts":1438608038000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"philipj: why can't we nuke it thoroughly?","msgtype":"m.text"},"ts":1438608094000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: because createCDATASection is used","msgtype":"m.text"},"ts":1438608107000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: that could return a Text node?","msgtype":"m.text"},"ts":1438608119000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it could, but it's not as thoroughly nuked as it could be","msgtype":"m.text"},"ts":1438608147000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"Well, the node is gone","msgtype":"m.text"},"ts":1438608162000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That's what matters","msgtype":"m.text"},"ts":1438608165000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sure, that's not bad","msgtype":"m.text"},"ts":1438608172000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"createCDATASection itself is a lot less complexity compared to another Node type","msgtype":"m.text"},"ts":1438608180000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"since CDATASection inherits from Text there isn't much complexity here","msgtype":"m.text"},"ts":1438608214000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"I tried to remove it just to see, and it wasn't a lot of code that needed fixing or could be removed","msgtype":"m.text"},"ts":1438608241000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"that being said, I'd be happy to see it gone, I'm just not excited enough to spend a lot of effort figuring out how to do it","msgtype":"m.text"},"ts":1438608266000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"Thanks, let me summarize this in a new comment, I guess I'll just leave it open for now","msgtype":"m.text"},"ts":1438608332000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: got time to talk about RequestMode and navigations?","msgtype":"m.text"},"ts":1438609858000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yes","msgtype":"m.text"},"ts":1438609866000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: can you explain why you think navigations should get RequestMode 'same-origin'?  It seems navigations can normally redirect cross-origin, etc","msgtype":"m.text"},"ts":1438609904000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I guess google does this when you click on a search result, etc","msgtype":"m.text"},"ts":1438609921000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: a navigation doesn't follow redirects","msgtype":"m.text"},"ts":1438609933000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: each redirect is examined by the navigate algorithm and then acted upon with probably fresh request","msgtype":"m.text"},"ts":1438609969000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: although whether we should model it that way is still a bit unclear to me","msgtype":"m.text"},"ts":1438609988000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I guess this annoyance I am running into is that RequestMode almost maps to our new gecko security policies: https://dxr.mozilla.org/mozilla-central/source/netwerk/base/nsILoadInfo.idl?from=nsILoadInfo.idl&case=true#38","msgtype":"m.text"},"ts":1438610045000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: except for navigations... the navigations will get SEC_ALLOW_CROSS_ORIGIN_DATA_INHERITS I think... but I will have to special case RequestMode on navigations to force same-origin","msgtype":"m.text"},"ts":1438610081000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"which makes me wonder if the same-origin RequestMode is correct","msgtype":"m.text"},"ts":1438610106000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"You think it should be \"no-cors\"?","msgtype":"m.text"},"ts":1438610123000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Or a special mode?","msgtype":"m.text"},"ts":1438610154000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: well, we used to have a \"if client request, then do extra check\" in HTTP Fetch step 2.2","msgtype":"m.text"},"ts":1438610257000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: also, chrome currently gives navigations \"no-cors\" (but has the old extra client request check you removed)","msgtype":"m.text"},"ts":1438610287000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: well, workers are same-origin, we agree on that, right?","msgtype":"m.text"},"ts":1438610328000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yes, although chrome also seems to give them no-cors... I think thats incorrect, though","msgtype":"m.text"},"ts":1438610353000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: workers will get a SEC_SAME_ORIGIN security policy","msgtype":"m.text"},"ts":1438610377000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"in gecko","msgtype":"m.text"},"ts":1438610381000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"we could keep say that navigations are no-cors and add a check for navigation requests (not clients)","msgtype":"m.text"},"ts":1438610422000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"maybe that's better and maybe even navigations keep some state around when they hit a redirect","msgtype":"m.text"},"ts":1438610454000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"e.g. I guess Referrer is still the same","msgtype":"m.text"},"ts":1438610472000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: what does bz think?","msgtype":"m.text"},"ts":1438610581000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: or jgraham?","msgtype":"m.text"},"ts":1438610584000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rumour has it jgraham is happy with that option","msgtype":"m.text"},"ts":1438610584000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"fascinating","msgtype":"m.text"},"ts":1438610594000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, smaug____, can you battle it about nullability of ClipboardEvent.clipboardData?","msgtype":"m.text"},"ts":1438610598000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"jgraham outsources his opinions to a bot","msgtype":"m.text"},"ts":1438610601000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: if we already shipped that, do it?","msgtype":"m.text"},"ts":1438610629000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: I don't care strongly","msgtype":"m.text"},"ts":1438610637000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I guess it depends what the purpose of RequestMode is... is it supposed to reflect the overall security policy for the request or is it really only there for service worker interception stuff?","msgtype":"m.text"},"ts":1438610653000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: if you don't follow redirects automatically, its value is a whole lot less interesting","msgtype":"m.text"},"ts":1438610729000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: unless we have some automated way of following redirects, where given a Request and Response you get a new Request","msgtype":"m.text"},"ts":1438610758000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: let me ask you this... what motivated you to add RequestMode?","msgtype":"m.text"},"ts":1438610782000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: when will you be 30?","msgtype":"m.text"},"ts":1438610804000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"wanderview: I think someone asked if we could expose it to script","msgtype":"m.text"},"ts":1438610808000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: 363 days, unless it's one of those special years next, which I guess it might be?","msgtype":"m.text"},"ts":1438610836000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: so I guess happy recent birthday?","msgtype":"m.text"},"ts":1438610855000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: heh, yes","msgtype":"m.text"},"ts":1438610865000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: the reason it exists at all is security decisions in Fetch of course, the reason it's exposed is mostly so you can ask for a policy in fetch()","msgtype":"m.text"},"ts":1438610916000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: reflecting it on Request.prototype.mode was the next logical step","msgtype":"m.text"},"ts":1438610930000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: are there other places its used besides Http Fetch step 2.2?","msgtype":"m.text"},"ts":1438611156000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"looks","msgtype":"m.emote"},"ts":1438611319000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yes, lots of places","msgtype":"m.text"},"ts":1438611366000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: ah, the main reason actually that I didn't think \"no-cors\" made sense for navigate was that the response could never be opaque","msgtype":"m.text"},"ts":1438611391000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: the response is always treated as same-origin","msgtype":"m.text"},"ts":1438611399000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: so either you have some new kind of mode that doesn't cause the response to be masked, or you just always make same-origin requests to ever changing URLs...","msgtype":"m.text"},"ts":1438611432000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sorry it took me a while to get to that","msgtype":"m.text"},"ts":1438611441000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I guess the main disconnect I am running into is that fetch expects new RequestMode values for redirects while gecko's security policy flag encompasses redirects (I think)","msgtype":"m.text"},"ts":1438611480000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I don't expect new values for redirects...","msgtype":"m.text"},"ts":1438611550000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: new Request objects","msgtype":"m.text"},"ts":1438611563000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"no?","msgtype":"m.text"},"ts":1438611565000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I thought thats what you said above","msgtype":"m.text"},"ts":1438611568000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I expect navigate to make new requests when its a redirect, since it doesn't follow them automatically","msgtype":"m.text"},"ts":1438611568000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"when it hits a redirect*","msgtype":"m.text"},"ts":1438611579000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: I guess you're saying even for navigate we have some kind of callback all the way from Necko that navigate does something with before Necko follows the redirect?","msgtype":"m.text"},"ts":1438611697000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: such a design seems somewhat distasteful...","msgtype":"m.text"},"ts":1438611721000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: in gecko the docshell (window container thing) starts a network request... it then gets told when everything is done... the docshell checks the final URL on the network request to see if it ended up redirecting... all the redirects happen transparently in that single network request","msgtype":"m.text"},"ts":1438611828000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"AIUI","msgtype":"m.text"},"ts":1438611833000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: so we have the security policy settings that say \"allow cross-origin or require same-origin\", etc... in this case navigations will get a cross-origin policy which conflicts with your vision of RequestMode","msgtype":"m.text"},"ts":1438611867000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"this is the only conflict between our security policy and RequestMode as far as I can tell","msgtype":"m.text"},"ts":1438611884000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I don't understand what it means for a navigation to have a cross-origin policy","msgtype":"m.text"},"ts":1438612003000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: allow a cross-origin redirect","msgtype":"m.text"},"ts":1438612018000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"cross-origin as defined by your original navigation URL","msgtype":"m.text"},"ts":1438612030000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: but what does that mean for the response?","msgtype":"m.text"},"ts":1438612032000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"RequestMode is really about what kind of responses you allow","msgtype":"m.text"},"ts":1438612041000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And \"no-cors\" allows opaque responses","msgtype":"m.text"},"ts":1438612049000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And whenever you hit a redirect with navigation you need to do all kinds of things","msgtype":"m.text"},"ts":1438612084000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: so either we make it \"no-cors\" and navigate needs to open up some opaque responses, but not others, ...","msgtype":"m.text"},"ts":1438612217000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: or we keep it same-origin and each navigate attempt is a newish fetch with some accumulated state","msgtype":"m.text"},"ts":1438612253000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: it's not entirely clear to me how the \"no-cors\" processing model would work","msgtype":"m.text"},"ts":1438612273000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: our network stack is modeled differently from the fetch spec... makes it really hard to reason about the two","msgtype":"m.text"},"ts":1438612304000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: say I navigate to http://example.com/redirect and end up at http://crossorigin.example/","msgtype":"m.text"},"ts":1438612323000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: that second will become an opaque response if mode is \"no-cors\"","msgtype":"m.text"},"ts":1438612335000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: it's not clear to me how we can allow that while disallowing arbitrary opaque responses","msgtype":"m.text"},"ts":1438612353000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: though I guess we could compare the request and response URL or some such...","msgtype":"m.text"},"ts":1438612366000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: that's why I suggested involving bz and maybe jgraham who have some experience with navigation and might know what's best","msgtype":"m.text"},"ts":1438612398000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: isn't that exactly what we are saying behavior should be, though... the browser follows redirects on navigation even cross-origin... but we don't want a service worker to do an opaque cross-origin interception","msgtype":"m.text"},"ts":1438612405000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: bz is on pto","msgtype":"m.text"},"ts":1438612419000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"we could ask sicking","msgtype":"m.text"},"ts":1438612426000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: the browser doesn't follow redirects automatically though","msgtype":"m.text"},"ts":1438612432000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"when CA wakes up","msgtype":"m.text"},"ts":1438612435000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: navigate does all kinds of things with the response before even deciding to go to the network again","msgtype":"m.text"},"ts":1438612453000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: are you saying some redirects are not permitted?","msgtype":"m.text"},"ts":1438612485000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: some redirects result in skype or some such","msgtype":"m.text"},"ts":1438612515000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: for navigate","msgtype":"m.text"},"ts":1438612530000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: whereas in fetch that would end up as a network error","msgtype":"m.text"},"ts":1438612553000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: does fetch permit the case of clicking on a google link that goes to google and then redirects to the actual search result?","msgtype":"m.text"},"ts":1438612619000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"sure, the navigate algorithm is priveliged code","msgtype":"m.text"},"ts":1438612651000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"this is not Fetch, mind you, this is HTML","msgtype":"m.text"},"ts":1438612665000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Fetch has nothing to do with navigate","msgtype":"m.text"},"ts":1438612676000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it only supports not following redirects for it","msgtype":"m.text"},"ts":1438612686000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is thoroughly confused now.","msgtype":"m.emote"},"ts":1438612698000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"as navigate is the only consumer that needs that","msgtype":"m.text"},"ts":1438612699000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(though there's some API support for it added to fetch() too now)","msgtype":"m.text"},"ts":1438612712000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'll just special case navigations to force same-origin RequestMode for now","msgtype":"m.text"},"ts":1438612720000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: something else to consider, a navigate would never result in a service worker seeing a request for a cross-origin URL","msgtype":"m.text"},"ts":1438612758000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think some of the confusion is coming from there being no rules for how to actually set RequestMode","msgtype":"m.text"},"ts":1438612762000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: it will always be a request for a same-origin URL","msgtype":"m.text"},"ts":1438612766000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: what do you mean, no rules?","msgtype":"m.text"},"ts":1438612778000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok... so its really just ServiceWorkerRequestMode?","msgtype":"m.text"},"ts":1438612780000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"no :-/","msgtype":"m.text"},"ts":1438612796000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: how do I as a browser implementer determine what to set RequestMode to for any given Request?  obviously confusion here since Chrome also sets navigations to no-cors","msgtype":"m.text"},"ts":1438612877000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: oh you mean no specification","msgtype":"m.text"},"ts":1438612904000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: yeah that is unfortunate","msgtype":"m.text"},"ts":1438612912000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"we'll get it fixed, will just take a bit more time","msgtype":"m.text"},"ts":1438612925000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: no specification and it seems your expectations are not matching what has been shipped","msgtype":"m.text"},"ts":1438612927000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"which suggests there is a disconnect somewhere","msgtype":"m.text"},"ts":1438612936000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Well service workers have been implemented as a hack on top of existing code, so that much is pretty clear...","msgtype":"m.text"},"ts":1438612975000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'd be happy to discuss this with mattto et al though","msgtype":"m.text"},"ts":1438612997000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: for now I will just match the current spec... which involves basically doing the \"if navigation for same-origin mode\" since that mode value doesn't match gecko's internal concept","msgtype":"m.text"},"ts":1438613049000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: it seems the only other same-origin Requests will be worker scripts and xmldocument.load()?","msgtype":"m.text"},"ts":1438613128000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: <track> when you don't specify crossorigin","msgtype":"m.text"},"ts":1438613146000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I looked at track and it appears to use CORS... where does it define same-origin?","msgtype":"m.text"},"ts":1438613174000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: it says potentially CORS","msgtype":"m.text"},"ts":1438613186000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: step 8 here says \"No CORS\" https://html.spec.whatwg.org/multipage/embedded-content.html#start-the-track-processing-model","msgtype":"m.text"},"ts":1438613221000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yeah, but that combination means \"same-origin\"","msgtype":"m.text"},"ts":1438613258000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: because \"default origin behaviour set to fail\"","msgtype":"m.text"},"ts":1438613274000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok, thanks","msgtype":"m.text"},"ts":1438613318000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"that was.... non-obvious","msgtype":"m.text"},"ts":1438613324000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"yeah, rewrite coming up within some months","msgtype":"m.text"},"ts":1438613347000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: I'll try to give you a definition tomorrow for elements and attributes","msgtype":"m.text"},"ts":1438613542000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: bit tired","msgtype":"m.text"},"ts":1438613548000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: No problem, happy to help measure if it'd answer any questions.","msgtype":"m.text"},"ts":1438613670000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"smaug____: pong","msgtype":"m.text"},"ts":1438613883000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: did I ping?","msgtype":"m.text"},"ts":1438614524000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and if I did, I have no idea what I was going to ask","msgtype":"m.text"},"ts":1438614549000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: ok. the ping was pretty old (a couple of weeks)","msgtype":"m.text"},"ts":1438614564000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1438614569000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"SimonSapin: hsivonen is around","msgtype":"m.text"},"ts":1438614700000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(this is why you shouldn't ping, ask a question...)","msgtype":"m.text"},"ts":1438614753000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"thanks jgraham","msgtype":"m.text"},"ts":1438614773000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"But the channel was pretty quiet anyway, so there's also the entertainment value to consider","msgtype":"m.text"},"ts":1438614779000,"senderName":"Workshiva","senderId":"Workshiva@irc"},
{"content":{"body":"hsivonen: Do you know if there is a way around keeping unbounded amount of input in memory in case the parser decides to \"change the encoding\", when parsing HTML from bytes?","msgtype":"m.text"},"ts":1438614825000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: there intentionally is not supposed to be one","msgtype":"m.text"},"ts":1438614872000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"and, to test if browsers do it, are you aware of a case where \"prescan a byte stream to determine its encoding\" would fail to find an encoding when given 1024 bytes, but tree construction would still \"change the encoding\" based on a meta start tag in the first 1024 bytes?","msgtype":"m.text"},"ts":1438614883000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"hsivonen: intentionally? Why?","msgtype":"m.text"},"ts":1438615013000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: to answer the previous question: after the 1024-byte boundary, the parser instance commits to one encoding. However, a late meta or a Japanese/Russian/Ukrainian detector can still trigger a reload with a different encoding","msgtype":"m.text"},"ts":1438615187000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"SimonSapin: in which case a new parser instance starts a new parse","msgtype":"m.text"},"ts":1438615225000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: Iâ€™m trying to decide what to do in html5ever, which doesnâ€™t necessarily have a notion of reload","msgtype":"m.text"},"ts":1438615244000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: IIRC, WebKit/Blink doesn't support late <meta> triggering a reload. I don't know if they do it for their Japanese detection","msgtype":"m.text"},"ts":1438615262000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"SimonSapin: as for \"intentionally\", the intention of the 1024-byte boundary is precisely to make sure that the parser doesn't keep buffering forever and not produce any output","msgtype":"m.text"},"ts":1438615337000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"SimonSapin: I suggest committing to an encoding at the latest when you've seen 1024 bytes","msgtype":"m.text"},"ts":1438615363000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"SimonSapin: I can't recall why I implemented the late <meta> thing in the new parser","msgtype":"m.text"},"ts":1438615391000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"SimonSapin: initially, I make the detectors see at most 1024 bytes so that they couldn't trigger a reload","msgtype":"m.text"},"ts":1438615412000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"SimonSapin: but that broke Japanese Planet Debian","msgtype":"m.text"},"ts":1438615424000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"SimonSapin: and people get really nervous if you break a Japanese site","msgtype":"m.text"},"ts":1438615438000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"so...","msgtype":"m.text"},"ts":1438615441000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Japanese Planet Debian has since been fixed","msgtype":"m.text"},"ts":1438615451000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"it's quite possible that we could get rid of the Russian and Ukrainian detectors and limit the Japanese detector to 1024 bytes and the sky wouldn't fall","msgtype":"m.text"},"ts":1438615531000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: I see, thanks. So only run the byte-based prescanner, or can tree construction find meta tags that the pre-scanner doesnâ€™t?","msgtype":"m.text"},"ts":1438615538000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"hsivonen: Iâ€™m referring to https://html.spec.whatwg.org/multipage/#parsing-main-inhead:change-the-encoding","msgtype":"m.text"},"ts":1438615603000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: I suggest only running the prescanner. (but I bet it's possible to construct something that the prescanner doesn't see but the tree builder sees)","msgtype":"m.text"},"ts":1438615604000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: WebKit only has a Japanese detector iirc","msgtype":"m.text"},"ts":1438615643000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: oh. the reason I added support for late <meta> may be that the spec said so!","msgtype":"m.text"},"ts":1438615653000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"SimonSapin: but IIRC, WebKit doesn't honor the spec there","msgtype":"m.text"},"ts":1438615664000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"we should fix the spec","msgtype":"m.text"},"ts":1438615675000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: it quite possible that the spec says so because the old parser in Gecko behaved like that","msgtype":"m.text"},"ts":1438615683000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"SimonSapin: I'm not sure what IE did at the time the spec was written, but my vague recollection is that it supported late <meta>","msgtype":"m.text"},"ts":1438615709000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hmm. an obvious way to create a <meta> seen by the tree builder but not by the prescanner is, of course, document.write","msgtype":"m.text"},"ts":1438615811000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"This wasn't one of the cases where Hixie was concerned about the security impact of an attacker that could cause early termination of the byte stream?","msgtype":"m.text"},"ts":1438615834000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: I don't recall this topic co-occurring with that topic","msgtype":"m.text"},"ts":1438615858000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"isn't quite sure what such an attack would look like given incremental parsing","msgtype":"m.emote"},"ts":1438615865000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: that was about comments and scripts","msgtype":"m.text"},"ts":1438615865000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1438615946000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: so about bugzilla, short answer is Yes, we can. I think.","msgtype":"m.text"},"ts":1438615968000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"SimonSapin: so I suggest 1) implementing just the prescan until 1024 bytes, 2) being aware that you might end up having to implement something that allows you to signal to the browsing context to reload if #1 Breaks the Web, 3) researching if old IE actually supports late <meta> and if it doesn't, filing a spec bug","msgtype":"m.text"},"ts":1438615973000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"it's possible that a spec bug is warranted just based on the success of WebKit, though","msgtype":"m.text"},"ts":1438615988000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: Chrome doesnâ€™t reaload, it switches encodings mid-stream: https://gist.github.com/anonymous/addad9f51781a6cd2cf9","msgtype":"m.text"},"ts":1438615989000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Firefox reloads","msgtype":"m.text"},"ts":1438616001000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: whoa!","msgtype":"m.text"},"ts":1438616005000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Firefox makes two HTTP requests","msgtype":"m.text"},"ts":1438616040000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"annevk: In the admin UI for components, every component has a \"Enabled For Bugs\" which by default is enabled; I think the scope of the effect of disabling is that it just prevents anybody from creating new bugs in that component, but you can still comment on existing bugs and edit them. I think.","msgtype":"m.text"},"ts":1438616043000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"SimonSapin: Firefox making two requests is expected","msgtype":"m.text"},"ts":1438616059000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"SimonSapin: the Chrome behavior is news to me","msgtype":"m.text"},"ts":1438616067000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Chrome 46 dev, donâ€™t have Release at hand","msgtype":"m.text"},"ts":1438616112000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"beverloo: on Android, \"new Notification(...)\" intentionally no longer works in Chrome, right? (from 42 on? or 43?)","msgtype":"m.text"},"ts":1438616271000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: my current assumption is that the Russian and Ukrainian detectors misfiring is a greater problem than the problems they fix, but I don't have proof","msgtype":"m.text"},"ts":1438616275000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"MikeSmith, yup","msgtype":"m.text"},"ts":1438616284000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1438616287000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith, we shipped it in Chrome 42 on Android","msgtype":"m.text"},"ts":1438616291000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"MikeSmith, we'll support it eventually, but they'll be more like Android toasts","msgtype":"m.text"},"ts":1438616300000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"have to figure out the right ux :)","msgtype":"m.text"},"ts":1438616308000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"annevk: I want to get rid of those two detectors but I feel I need something more concrete than a guess that they have negative utility","msgtype":"m.text"},"ts":1438616313000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"MikeSmith: that sounds good to me","msgtype":"m.text"},"ts":1438616371000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: it changes the decoder on the fly?","msgtype":"m.text"},"ts":1438616428000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"beverloo: what's there now seems to fairly well already. I mean was far as how the notifications get displayed in the status area, and what's shown if you pull down to view more","msgtype":"m.text"},"ts":1438616431000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"SimonSapin: now that is interesting","msgtype":"m.text"},"ts":1438616439000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: OK, so shall I go ahead and disable \"Enabled For Bugs\" for all WHATWG components except \"Unwelcome\"?","msgtype":"m.text"},"ts":1438616481000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith, yes, but there's lifetime issues with that (the OS can kill the page whenever it feels like it). That's why the spec now mentions they're a more ephemeral form of notifications","msgtype":"m.text"},"ts":1438616490000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"MikeSmith: they're still welcome for the HTML components too","msgtype":"m.text"},"ts":1438616507000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: for the time being","msgtype":"m.text"},"ts":1438616511000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ah yeah ok, sure","msgtype":"m.text"},"ts":1438616524000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"beverloo: oh, ok","msgtype":"m.text"},"ts":1438616540000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: oh, Books and Figures too","msgtype":"m.text"},"ts":1438616568000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: howcome hasn't switched it seems","msgtype":"m.text"},"ts":1438616576000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, those I figured to leave as is","msgtype":"m.text"},"ts":1438616581000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"beverloo: was there an intent-to-deprecate message sent out to blink-dev about de-supporting the Notification constructor?","msgtype":"m.text"},"ts":1438616614000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: seems mimesniff hasn't migrated either","msgtype":"m.text"},"ts":1438616615000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"GPHemsley: ^^","msgtype":"m.text"},"ts":1438616624000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith, we still support it on desktop (but are considering changing UX there too, part of a larger \"what do we want with notifications\"-effort)","msgtype":"m.text"},"ts":1438616645000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"MikeSmith: neither has HTML Differences","msgtype":"m.text"},"ts":1438616646000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I sent a PSA, let me find a link for you","msgtype":"m.text"},"ts":1438616649000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"MikeSmith: hmm, perhaps I can better list what we should disable :-/","msgtype":"m.text"},"ts":1438616656000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith, https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/BygptYClroM","msgtype":"m.text"},"ts":1438616684000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"annevk: OK, for now, so I just did only Encoding, Fetch, and URL","msgtype":"m.text"},"ts":1438616685000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: to disable: JavaScript, URL","msgtype":"m.text"},"ts":1438616697000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"beverloo: thanks","msgtype":"m.text"},"ts":1438616702000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: ok just did JavaScript too","msgtype":"m.text"},"ts":1438616725000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith, up for a drink later this week btw? :)","msgtype":"m.text"},"ts":1438616735000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"would be good to meet you","msgtype":"m.text"},"ts":1438616738000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"whoah","msgtype":"m.text"},"ts":1438616746000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"beverloo: you in Tokyo?","msgtype":"m.text"},"ts":1438616750000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"flying on Wednesday","msgtype":"m.text"},"ts":1438616755000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"MikeSmith: Quirks Mode lists a very old URL in its description","msgtype":"m.text"},"ts":1438616761000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: what should it be?","msgtype":"m.text"},"ts":1438616774000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: https://quirks.spec.whatwg.org/","msgtype":"m.text"},"ts":1438616784000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"beverloo: oh man, on Thursday morning I'm flying to Shanghai for a few days. Do you arrive in Tokyo on Wednesday or Thursday?","msgtype":"m.text"},"ts":1438616869000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: OK, updated","msgtype":"m.text"},"ts":1438616895000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1438616908000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith, Thursday morning at Haneda (7:20am)","msgtype":"m.text"},"ts":1438616931000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"beverloo: OK I think I fly from Haneda on Thursday at 1pm :(","msgtype":"m.text"},"ts":1438616997000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"beverloo: but will be back in the evening on the 9th (sunday), so could meet up then","msgtype":"m.text"},"ts":1438617029000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Clearly the two of you should meet for drinks at the airport","msgtype":"m.text"},"ts":1438617286000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1438617326000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: oh, Firefox on Android is going to continue supporting the old-style Notification constructor?","msgtype":"m.text"},"ts":1438618306000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"per your comment at https://github.com/whatwg/notifications/issues/26#issuecomment-126310459","msgtype":"m.text"},"ts":1438618320000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: non-persistent notifications are toasts, just a different name","msgtype":"m.text"},"ts":1438618347000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: also, I'm not familiar with Firefox' product plans","msgtype":"m.text"},"ts":1438618372000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah I see, the \"we\" in \"we're keeping non-persistent notifications\" was about the spec itself","msgtype":"m.text"},"ts":1438618469000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: yeah, WHATWG-we","msgtype":"m.text"},"ts":1438618507000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1438618525000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I guess that's confusing, unless it's clear from context, I believe I usually make it quite clear when I speak of Mozilla or its products","msgtype":"m.text"},"ts":1438618560000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but unless*","msgtype":"m.text"},"ts":1438618566000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"goes to look at the HTML parser","msgtype":"m.emote"},"ts":1438618585000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: see recent post on blink-dev, making createElement() match the HTML parser seems hard","msgtype":"m.text"},"ts":1438620403000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I didn't really understand that post.","msgtype":"m.text"},"ts":1438620420000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It seemed to contradict itself a couple times? Incompatible, but a full subset?","msgtype":"m.text"},"ts":1438620461000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"refers back to him being  tired","msgtype":"m.emote"},"ts":1438620541000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: there's a distinction between requirements on the first code point and any remaining code points","msgtype":"m.text"},"ts":1438620577000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess I am not able to find an actual example of incompatibility in that message","msgtype":"m.text"},"ts":1438620655000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Maybe... HTML does not allow a start of xEFFFF, but XML does?","msgtype":"m.text"},"ts":1438620680000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It seems fine if createElement allows more characters than the parser does","msgtype":"m.text"},"ts":1438620696000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: HTML only allows a-zA-Z at the start of an element","msgtype":"m.text"},"ts":1438620733000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: OK. Why is that a problem?","msgtype":"m.text"},"ts":1438620770000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: XML and createElement() allow more, per the production I pointed too","msgtype":"m.text"},"ts":1438620790000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: again, why is that a problem.","msgtype":"m.text"},"ts":1438620816000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: if you make createElement() a superset of both, you're suddenly allowing in new elements your code base might not have considered","msgtype":"m.text"},"ts":1438620826000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what elements?","msgtype":"m.text"},"ts":1438620841000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"what is an example?","msgtype":"m.text"},"ts":1438620854000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it seems like any example could be either created by the parser or by createElement, so nothing new is happening.","msgtype":"m.text"},"ts":1438620869000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: \":>\"","msgtype":"m.text"},"ts":1438620893000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: that cannot be created by the parser or by createElement() today","msgtype":"m.text"},"ts":1438620916000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sorry","msgtype":"m.text"},"ts":1438620927000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: then don't allow it. nobody is asking for *new* elements","msgtype":"m.text"},"ts":1438620929000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: \":<\"","msgtype":"m.text"},"ts":1438620932000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: well either you restrict per the HTML parser or you restrict per XML","msgtype":"m.text"},"ts":1438620961000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: HTML parser has restrictions on the first code point","msgtype":"m.text"},"ts":1438620969000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the proposal is very simple. allow a union of both.","msgtype":"m.text"},"ts":1438620982000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: if you open those up, you automatically allow more and allow things that cannot be done through XML","msgtype":"m.text"},"ts":1438620984000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: start char = union of (what xml allows) + (what HTML allows) = what XML allows","msgtype":"m.text"},"ts":1438621003000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: so making it more complex?","msgtype":"m.text"},"ts":1438621012000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I guess...","msgtype":"m.text"},"ts":1438621018000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: rest of chars = union of (what xml allows) + (what HTML allows)","msgtype":"m.text"},"ts":1438621019000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"well, you'd need to validate either or in that case","msgtype":"m.text"},"ts":1438621038000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1438621044000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"if the first char is a non-HTML char remaining cannot be HTML char","msgtype":"m.text"},"ts":1438621050000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"there's something on the platform that is creating elements and following these rules","msgtype":"m.text"},"ts":1438621052000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the internals might not actually care about the names I suspect","msgtype":"m.text"},"ts":1438621072000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"then we should expose that","msgtype":"m.text"},"ts":1438621078000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"saying that the platform can create elements you can't is the silly part people are against","msgtype":"m.text"},"ts":1438621102000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"though it's a bit trickier with XML namespaces of course","msgtype":"m.text"},"ts":1438621119000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but that's namespaced elements and those likely have their own path anyway","msgtype":"m.text"},"ts":1438621131000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":-S","msgtype":"m.text"},"ts":1438621133000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: I'll check it out, thanks.","msgtype":"m.text"},"ts":1438621414000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: thanks, it seems we also haven't quite figured out references yet","msgtype":"m.text"},"ts":1438621459000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1438621468000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oh, biblio stuff","msgtype":"m.text"},"ts":1438621476000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: yeah, DOM still has SELECTORS4 and SELECTORS-4 whereas I just want SELECTORS","msgtype":"m.text"},"ts":1438621492000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, I need to finish working on deduping that. I've done *some* deduping.","msgtype":"m.text"},"ts":1438621510000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: editor's drafts have dates listed next to them too","msgtype":"m.text"},"ts":1438621525000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: also, it seems syntax for dated references doesn't work? https://dom.spec.whatwg.org/#informative for UIEVENTS is quite wrong","msgtype":"m.text"},"ts":1438621575000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hm, there's no syntax for them, it's just another ref name.  I'll see what's up.","msgtype":"m.text"},"ts":1438621611000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But perhaps DOM stating it supersedes them is no longer necessary either... At some point that's just the new normal.","msgtype":"m.text"},"ts":1438621631000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Looks like URL's not in Shepherd's database, which is why that link didn't work. ^_^  Tell me which WHATWG specs are bikeshedded and I'll add them.","msgtype":"m.text"},"ts":1438622024000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk, thanks for the suggestion, that makes more sense actually. Trivial proposal writeup at http://littledan.github.io/global.html","msgtype":"m.text"},"ts":1438623943000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: probably want to explain that this is then either shadowed by or in conflict with HTML's `self`, which is a getter","msgtype":"m.text"},"ts":1438624096000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh, it's readonly? I see","msgtype":"m.text"},"ts":1438624150000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"yeah, we definitely can't make it readonly, due to SES, but shadowed makes sense to me","msgtype":"m.text"},"ts":1438624179000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"that's annoying","msgtype":"m.text"},"ts":1438624189000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: not readonly. a getter.","msgtype":"m.text"},"ts":1438624200000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"{ get, configurable: true, enumerable: true } instead of { writable: true, configurable: true, enumerable: false }","msgtype":"m.text"},"ts":1438624222000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"looks like the IDL for Window says readonly, which translates into a getter in ES, right?","msgtype":"m.text"},"ts":1438624231000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"right.","msgtype":"m.text"},"ts":1438624236000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and all IDL attributes are enumerable true","msgtype":"m.text"},"ts":1438624241000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh, interesting","msgtype":"m.text"},"ts":1438624260000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"doesn't that make enumerability pretty limited utility?","msgtype":"m.text"},"ts":1438624272000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"note also that globals are special-cased and their getters/methods are on the instance, not the prototype. otherwise, if this was a normal IDL object, you'd have another mismatch","msgtype":"m.text"},"ts":1438624281000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yes. yes it does.","msgtype":"m.text"},"ts":1438624287000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh, well if it were on the prototype, then it'd just be shadowed and that's fine","msgtype":"m.text"},"ts":1438624321000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"yeah, but it's not","msgtype":"m.text"},"ts":1438624327000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"you're allowed to have a writable thing shadow something","msgtype":"m.text"},"ts":1438624339000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i think it's just a conflict","msgtype":"m.text"},"ts":1438624339000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"one or the other spec would have to change","msgtype":"m.text"},"ts":1438624354000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah, OK, so in spec-land, the DOM is written on top of the new ES realm after all of the ES primordials are set","msgtype":"m.text"},"ts":1438624381000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"right?","msgtype":"m.text"},"ts":1438624389000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i guess. there's never really been a conflict of this sort where the ordering needed to be established.","msgtype":"m.text"},"ts":1438624401000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so if I just say, in a note, this is occurring, then that's enough","msgtype":"m.text"},"ts":1438624402000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"well, the ES spec is pretty explicit about how a realm is established and then stuff is written to it imperatively","msgtype":"m.text"},"ts":1438624427000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"right, but that stuff doesn't reflect reality, it's just allen's imagination","msgtype":"m.text"},"ts":1438624439000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"similar to \"jobs\"","msgtype":"m.text"},"ts":1438624444000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"do you think this will be a difficult thing to do in implementations?","msgtype":"m.text"},"ts":1438624465000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i am really not sure (i.e. i would bet either way with 50% probability)","msgtype":"m.text"},"ts":1438624482000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"to have them make it a writable configurable property in, basically, their shell?","msgtype":"m.text"},"ts":1438624483000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"engines can do it, but then what does an engine's IDL binding do when a global object IDL attribute has to override an existing property?","msgtype":"m.text"},"ts":1438624507000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"depends on what APIs are used to implement the IDL binding layer","msgtype":"m.text"},"ts":1438624514000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It's solvable, but might require writing custom bindings.","msgtype":"m.text"},"ts":1438624537000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It would be better to hope that we can change `self` from a getter to a data property so that it isn't defined by HTML at all.","msgtype":"m.text"},"ts":1438624553000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so the question is, would it be better for HTML to make it a writable/configurable data property, or can we figure out if SES can accept it in its current for (which I guess it would have to to make it work on the current web)","msgtype":"m.text"},"ts":1438624603000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I think if it is web-compatible the best approach would be to move self to ES as a writable/configurable data property.","msgtype":"m.text"},"ts":1438625035000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"however, experimenting with that sounds like a decent amount of implementation work, and the potential to break websites, for very little benefit.","msgtype":"m.text"},"ts":1438625062000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so i am not sure that the best approach will end up happening.","msgtype":"m.text"},"ts":1438625072000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"alternate approaches include: figuring out if SES can live with `self` as a configurable, enumerable getter, and trying to move that to ES; or going for `global` to avoid such issues.","msgtype":"m.text"},"ts":1438625116000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"OK, this whole thing sounds like too little benefit for me to pursue","msgtype":"m.text"},"ts":1438625393000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"maybe we should just suggest to Node people to add 'self' in some way or another to make things easier for library authors","msgtype":"m.text"},"ts":1438625419000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"or the problem just doesn't exist at all","msgtype":"m.text"},"ts":1438625429000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"yeah the cost/benefit tradeoff is indeed quite high","msgtype":"m.text"},"ts":1438625519000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that is why this has not happened yet :)","msgtype":"m.text"},"ts":1438625527000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"OK, I'm new, I'm still learning this stuff","msgtype":"m.text"},"ts":1438625588000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":":) all good!","msgtype":"m.text"},"ts":1438625600000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: I am trying to write a spec with bikeshed and <pre class=\"idl\">... MediaStream ... </pre> and it is complaining that \"No 'idl-name' refs found for 'MediaStream'\"","msgtype":"m.text"},"ts":1438637790000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I've searched a lot of docs and haven't found how to tell it where to get MediaStream","msgtype":"m.text"},"ts":1438637806000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: https://github.com/tabatkins/bikeshed/blob/master/docs/definitions-autolinks.md#providing-custom-definitions","msgtype":"m.text"},"ts":1438637968000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: thanks. I guess I have to use url if I want to avoid lowercasing?","msgtype":"m.text"},"ts":1438638136000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah, if you use text it auto-gens the url based on Bikeshed's normal id-generation rules. If your target doesn't conform to that, supply url manually.  (You can still combine with urlPrefix; url is appended to the urlPrefix.)","msgtype":"m.text"},"ts":1438638191000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: any ideas on how I can make a <h4> into a definition for an IDL thingy without nesting a <dfn> inside it (which gets its own auto-generated id etc.)?","msgtype":"m.text"},"ts":1438640395000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Don't?","msgtype":"m.text"},"ts":1438640409000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: that is literally all of the streams spec","msgtype":"m.text"},"ts":1438640421000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(That is to say, there is nothing in Bikeshed that supports that, and I don't really plan to make it.)","msgtype":"m.text"},"ts":1438640425000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"methods and getters and constructors are all defined as headings","msgtype":"m.text"},"ts":1438640436000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"all of ES too","msgtype":"m.text"},"ts":1438640438000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So what's wrong with getting a different heading?  You'll get one formatted properly for IDL stuff, after all.","msgtype":"m.text"},"ts":1438640481000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Well, those are abstract ops, not IDL. Hm.","msgtype":"m.text"},"ts":1438640498000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I don't understand the question. What's wrong with <h4><dfn> is that then I get dfn styles and two IDs (one for hte h4 and one for hte dfn)","msgtype":"m.text"},"ts":1438640505000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"No, all the public API is done the same way.","msgtype":"m.text"},"ts":1438640512000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Styling is trivially fixable, obviously.  Two ids isn't, tho.","msgtype":"m.text"},"ts":1438640548000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I also get two self-link <a>s, a consequence of the double-IDs. Super-ugly.","msgtype":"m.text"},"ts":1438640552000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah, that's definitely ugly.","msgtype":"m.text"},"ts":1438640558000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Okay, file a bug on me, I'll think about it.","msgtype":"m.text"},"ts":1438640565000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1438640576000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"jsbell: I was hoping that someone who had looked at those tests before would review, but if they haven't I'll look tomorrow","msgtype":"m.text"},"ts":1438640881000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: thx","msgtype":"m.text"},"ts":1438642559000,"senderName":"jsbell","senderId":"jsbell@irc"}
]