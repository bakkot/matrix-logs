[
{"content":{"body":"smaug____: We have yet to support all that composedPath stuff in Servo, I guess we should wait for your new algo to land, right?","msgtype":"m.text"},"ts":1509627330000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: right","msgtype":"m.text"},"ts":1509629112000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: once you have something you'll update the DOM issue?","msgtype":"m.text"},"ts":1509629441000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I saw you mention O(1) event firing btw,","msgtype":"m.text"},"ts":1509629470000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"yeah. Just got back, so will on that soonish","msgtype":"m.text"},"ts":1509629475000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"annevk: and I think we do that in Servo, IIRC. Last time I wanted to update that code, I quickly went away because the spec wasn't nearly as simple as last time I remember reading it. :)","msgtype":"m.text"},"ts":1509629494000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: shadow trees complicated it quite a bit","msgtype":"m.text"},"ts":1509629524000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yep, and we don't have that.","msgtype":"m.text"},"ts":1509629530000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"So I have to squint at the spec to detect which parts are irrelevant for us.","msgtype":"m.text"},"ts":1509629541000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: oh, you could implement composedPath just fine now, if you don't expect to have shadow DOM soon.","msgtype":"m.text"},"ts":1509629675000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: cool, I'll have more time to work on things now, about 4h each day for a month, then mostly back to full-time","msgtype":"m.text"},"ts":1509632579000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"FWIW, I think annotating the tuples should be super simple, but it is creating sane composedPaths afterwards in a not too slow way requires some thinking. I need to ensure my ideas from last night actually work there...","msgtype":"m.text"},"ts":1509632667000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but first some code reviews","msgtype":"m.text"},"ts":1509632673000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"gsnedders: Quite a bit, yeah. You're deep in tests; from the outside, keeping track of which tests map to what text, so you even *know* when \"a test needs to be moved\", is already quite a task.","msgtype":"m.text"},"ts":1509641790000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"nox: it seems like the existence of composedPath() makes O(1) event firing impossible. I'm curious if you find otherwise.","msgtype":"m.text"},"ts":1509642043000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: I meant under the assumption that we have the tests organised such that they're grouped by section, and hopefully have clear enough filenames to know what maps to what text","msgtype":"m.text"},"ts":1509642156000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"TabAtkins: I mean, most things aren't as bad as much of the CSS tests with hundreds of files per directory :)","msgtype":"m.text"},"ts":1509642167000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic: Yeah I was saying we have O(1) event firing because we don't support this method.","msgtype":"m.text"},"ts":1509642199000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic: Also every time I look at the method, all I see is word salad, but that's probably because I'm not familiar with shadow DOM terminology.","msgtype":"m.text"},"ts":1509642246000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic: how does existence of composedPath affect to event firing O() ?","msgtype":"m.text"},"ts":1509642262000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: Have to precompute the path even if no one calls composedPath.","msgtype":"m.text"},"ts":1509642281000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1509642300000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"well, event  firing is always O(n)","msgtype":"m.text"},"ts":1509642310000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"n being the number of event targets in the path","msgtype":"m.text"},"ts":1509642320000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and path needs to be created before event propagation","msgtype":"m.text"},"ts":1509642343000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but composedPath can be different for each target in the path","msgtype":"m.text"},"ts":1509642364000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"so it should be calculated lazily","msgtype":"m.text"},"ts":1509642373000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Mmhâ€¦","msgtype":"m.text"},"ts":1509642380000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Oh right, even if the event isn't bubbling there is still stuff to do on each target in the path.","msgtype":"m.text"},"ts":1509642394000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"but calculating it lazily should lead to same result as if it was calculated eagerly for each target","msgtype":"m.text"},"ts":1509642398000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"there is always capture phase","msgtype":"m.text"},"ts":1509642419000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Yeah, that.","msgtype":"m.text"},"ts":1509642436000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: \"Outlawing a style of test\" isn't the goal at all. The more granular your tests, the more benefit you'll get from putting them inline next to the granular thing they're testing, but if you've got a single mega-test file, that's fine. It's just no real benefit to you in that case; there's nothing to move or track, you've just got the one spec and the one test.","msgtype":"m.text"},"ts":1509642479000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: yeah, that's why I just gave high-level feedback here","msgtype":"m.text"},"ts":1509642512000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: I'm supportive of more experiments in this area","msgtype":"m.text"},"ts":1509642552000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: the one we did for XHR with detailed annotations kinda failed, but perhaps this one will go differently","msgtype":"m.text"},"ts":1509642573000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'd love to see details on that, I missed it entirely.","msgtype":"m.text"},"ts":1509642585000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: basically all tests were annotated with XPath expressions pointing to the statements in the spec; there was some scraper to collect all those expressions into a JSON thing that the spec then used to reference all the tests once you clicked a checkbox from the matched statements","msgtype":"m.text"},"ts":1509642836000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: however, I didn't do a good job of keeping it in sync, since we didn't do spec-test development in tandem yet","msgtype":"m.text"},"ts":1509642866000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: and the unmaintained scripts started breaking, etc.","msgtype":"m.text"},"ts":1509642883000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah, kk, and it was done in the other direction, too.","msgtype":"m.text"},"ts":1509642885000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"smaug____: nox: no need to do the capture phase if there are no capture listeners","msgtype":"m.text"},"ts":1509643743000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: well, fine. Browsers can always optimize","msgtype":"m.text"},"ts":1509643770000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"like, not firing events at all","msgtype":"m.text"},"ts":1509643777000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Yes... when we're talking about O() we're definitely talking about optimizations.","msgtype":"m.text"},"ts":1509643782000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"if there are no listeners","msgtype":"m.text"},"ts":1509643783000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"why?","msgtype":"m.text"},"ts":1509643795000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"when we're talking about O(), we're talking about the spec level algorithms, I would have thought","msgtype":"m.text"},"ts":1509643819000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I guess that was a misunderstanding then","msgtype":"m.text"},"ts":1509644142000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'm much more interested in efficient implementations (and specs that enable efficient implementations) than I am in efficient specs","msgtype":"m.text"},"ts":1509644157000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"My understanding is that before composedPath, a browser could optimize to O(1). But after its introduction, that's impossible.","msgtype":"m.text"},"ts":1509644177000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: browser can optimize to O(1) with composed path too","msgtype":"m.text"},"ts":1509644507000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"need to deal with DOM mutations","msgtype":"m.text"},"ts":1509644519000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"OK, it seemed impossible to me, but happy to be told I'm wrong","msgtype":"m.text"},"ts":1509644521000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and if such is happening, capture the path","msgtype":"m.text"},"ts":1509644528000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and then do the dom mutation","msgtype":"m.text"},"ts":1509644534000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"not fun thing to implement, but doable","msgtype":"m.text"},"ts":1509644541000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"of course, then listeners shouldn't modify dom too much","msgtype":"m.text"},"ts":1509644583000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but without composedPath there are also limitations, like not having capturing listeners everywhere etc","msgtype":"m.text"},"ts":1509644625000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Domenic: oh, and even without composedPath, what if you have listener on target only, but that listener adds another (bubble) listener to the root of the tree","msgtype":"m.text"},"ts":1509644701000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"you need to know that root","msgtype":"m.text"},"ts":1509644709000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"so it isn't clear to me which O(1) case we're talking about here","msgtype":"m.text"},"ts":1509644724000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: this is the case I repeated 3-4 times in the thread, non-bubbling events where there are no capture listeners for that event type","msgtype":"m.text"},"ts":1509656435000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: so you'd like to get rid of composedPath altogether ?","msgtype":"m.text"},"ts":1509656780000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"to make it easier for implementations to optimize event dispatch","msgtype":"m.text"},"ts":1509656801000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I mean, implementers don't seem to care about O(1) event dispatch, so I'm not going to stand on it.","msgtype":"m.text"},"ts":1509656805000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(it is still possible to optimize out path creation with composedPath, but just trickier)","msgtype":"m.text"},"ts":1509656835000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"the current setup isn't O(1) either","msgtype":"m.text"},"ts":1509656863000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Domenic: have folks been able to quantify the cost somehow? Mutation evens vs observers for instance","msgtype":"m.text"},"ts":1509657652000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, I'm not sure, I guess hayato is looking in to some of this stuff.","msgtype":"m.text"},"ts":1509657674000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"rniwa: in https://github.com/w3c/webcomponents/issues/688#issuecomment-341567895 you said \"We're going with ${~}\", which is probably a typo, but a pretty confusing one.","msgtype":"m.text"},"ts":1509661115000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: oops, it's missing \"if\". Fixed.","msgtype":"m.text"},"ts":1509661147000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1509661156000,"senderName":"Domenic","senderId":"Domenic@irc"}
]