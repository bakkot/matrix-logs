[
{"content":{"body":"... so you want sites to arbitrarily disable browser features for everyone? whether you want autofill is an issue between you and your browser, not websites","msgtype":"m.text"},"ts":1400025617000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: yes, and i know i am in the minority, but i know i am more data sensitive than most.","msgtype":"m.text"},"ts":1400025621000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"it's my personal opinion that this should be an \"opt-in\" option for sites, not an \"opt out\" by UA, but as i stated before, that's really on the authors, not the spec.","msgtype":"m.text"},"ts":1400025717000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"sorry, but unless you can defend that a bit better, i think that's an opinion without merit","msgtype":"m.text"},"ts":1400025741000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"\"browsers should make it easier to globally disable autofill\" would be fine, but \"99% of users should have an inconsistent and severely inconvenient browsing experience so 1% of people don't have to go into a menu\" frankly seems absurd","msgtype":"m.text"},"ts":1400025794000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"you'd hope that public computers give you a new profile every time you login, and I think most/many do","msgtype":"m.text"},"ts":1400025835000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"but the world is a big place, and there are an awful lot of public computers","msgtype":"m.text"},"ts":1400025862000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"personally i'd say if you're entering information into a public computer, no matter what settings you're changing it'd better not be sensitive info","msgtype":"m.text"},"ts":1400025888000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"if you have access to change settings (and if the profile doesn't reset every time, as caitp says), then you probably have access to install user scripts for the next guy...","msgtype":"m.text"},"ts":1400025922000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"the opinion has merit, just probably not applicable to the \"99%\" as you stated.","msgtype":"m.text"},"ts":1400026062000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"no opinion has merit if it's not defended :)","msgtype":"m.text"},"ts":1400026107000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"bleh, still need to unscrew firefox after that last horrific update, and I assume the inspector still doesn't work with chrome windows...","msgtype":"m.text"},"ts":1400026200000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"what do you mean by \"upload user scripts\", anyway? you mean like, they'd sign into someone elses account because the info was autofilled, and exploit that by using their credentials to get some other exploit onto the server?","msgtype":"m.text"},"ts":1400026251000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"The opinion was based upon the notion that i don't believe pii/pci data should have the option to enable autocomplete=on, but the difficulty there is around defining unique inputs for things that will contain that type of data, but once again, it's really up to the authors to implement the most semantically appropriate tag.","msgtype":"m.text"},"ts":1400026262000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"no, just install a foo.user.js as a plugin","msgtype":"m.text"},"ts":1400026272000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"that's not really defending the opinion at all, it's just stating it","msgtype":"m.text"},"ts":1400026313000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"*why* do you think that I should be disallowed from having my billing and shipping info autofilled?","msgtype":"m.text"},"ts":1400026338000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"because it's good practice to memorize your credit card number and home address","msgtype":"m.text"},"ts":1400026375000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"while i agree caitp, that's not a reason for why the spec should demand it. the defense comes in the form of personal defense of that information and business liability (although you really cannot prevent stupid).","msgtype":"m.text"},"ts":1400026471000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"that was not a serious statement boogyman, it can be hard to tell with me sometimes","msgtype":"m.text"},"ts":1400026489000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"There's always a tradeoff of ease of use and security and performance.","msgtype":"m.text"},"ts":1400026495000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"I think the trade off between security and ease of use is often imaginary","msgtype":"m.text"},"ts":1400026561000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it's more like security -> ease of use -> privacy","msgtype":"m.text"},"ts":1400026580000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"well, if you're not going to explain why you think the vast majority of users in the world should be severely inconvenienced, then I'm moving on","msgtype":"m.text"},"ts":1400026585000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"how do you define \"new login\", because most places I know do not default their \"internet\" icons to launch in private mode.","msgtype":"m.text"},"ts":1400026593000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"and yeah the browser inspector is still unusable in chrome ... it can attach to the browser window, but it won't actually inspect things like tabbrowser","msgtype":"m.text"},"ts":1400026623000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"in firefox, rather","msgtype":"m.text"},"ts":1400026635000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: identity theft is a huge inconvenience.","msgtype":"m.text"},"ts":1400026636000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"and I'm sure bruce schneier or someone has written endless articles about how you can actually get quite good security which is easy to use, just at the expense of depending on third parties like Apple or Facebook","msgtype":"m.text"},"ts":1400026643000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"non-sequiturs are also inconvenient","msgtype":"m.text"},"ts":1400026669000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"how was my statement not relevant?","msgtype":"m.text"},"ts":1400026717000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"incidentally, both chrome and FF let you open windows that don't store any info (\"incognito window\", \"private window\") with a single hotkey, so \"i don't want to go into settings and disable things\" is a non-argument too","msgtype":"m.text"},"ts":1400026738000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: again not for the spec, but tell that to chrome on android devices. it remembers url history.","msgtype":"m.text"},"ts":1400026804000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"and that's an argument to email google and ask for a private browsing mode in android, not for anything else","msgtype":"m.text"},"ts":1400026860000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"boogyman: so wait, back up. what are you worried about will happen with these shared computers?","msgtype":"m.text"},"ts":1400027742000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"having any of my information stored by the browser or site that i do not authorize.","msgtype":"m.text"},"ts":1400027953000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"I think it's a fair point, that the next billion or 2 billion people on the net might not all have the technical know-how to cover their tracks when they need to, or might otherwise not have an opportunity to do that, and this can lead to breaches of privacy","msgtype":"m.text"},"ts":1400028186000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"which is a different kind of security violation, but it's not irrelevant","msgtype":"m.text"},"ts":1400028213000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I don't think you can really solve that problem at the W3C or WHATWG though, that's something individual applications and browser vendors need to worry about, and is probably not a real argument against autofill","msgtype":"m.text"},"ts":1400028333000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"boogyman: well, stored by the browser is up to the browser and how you configure it. stored by the site, if you don't want the site to store your information, good luck. :-)","msgtype":"m.text"},"ts":1400028364000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"boogyman: doesn't seem to have much to do with autofill though","msgtype":"m.text"},"ts":1400028379000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it would be good if you could create a law by which all user agents had to abide, which ensured that it was easy to understand and configure privacy settings","msgtype":"m.text"},"ts":1400028490000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"auto-fill is a post storage concern. If the UA did store the data, it could then auto complete(fill) those same fields.","msgtype":"m.text"},"ts":1400028492000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"and magically ensured that all users knew about them and their importance","msgtype":"m.text"},"ts":1400028505000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"but as good as that might be, it's probably not something feasible in the real world","msgtype":"m.text"},"ts":1400028673000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"(keep laws out of browsers used by people in every country)","msgtype":"m.text"},"ts":1400028737000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"well, fixed up the broken tab bar, time for the address bar...","msgtype":"m.text"},"ts":1400028980000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: how's your status bar doing?","msgtype":"m.text"},"ts":1400029017000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"i don't have one of those. heh","msgtype":"m.text"},"ts":1400029069000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"https://zewt.org/~glenn/blah.png getting there","msgtype":"m.text"},"ts":1400029318000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"oh jesus, the address bar animates around","msgtype":"m.text"},"ts":1400031504000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: OUUUCH","msgtype":"m.text"},"ts":1400031807000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I can't *wait* for australis to hit ESR","msgtype":"m.text"},"ts":1400031823000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"https://zewt.org/~glenn/blah2.png well, good enough for now","msgtype":"m.text"},"ts":1400032467000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"wonder which tab in firefox is making my cpu spin up constantly","msgtype":"m.text"},"ts":1400043689000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"mysteries","msgtype":"m.text"},"ts":1400043693000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"quick question for the webidl2.js interface: what's a good name for a type that can take another type as a parameter? (cc tobie)","msgtype":"m.text"},"ts":1400058623000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"e.g. Promise<Foo> or sequence<Bar>","msgtype":"m.text"},"ts":1400058637000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"parametrised type?","msgtype":"m.text"},"ts":1400058644000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"We need that because some specs (*cough* ServiceWorkers *cough*) are extending the Promise type e.g.: ResponsePromise<any>","msgtype":"m.text"},"ts":1400058755000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"and it would be nice if what you get in the AST matched something that people can vaguely understand","msgtype":"m.text"},"ts":1400058794000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"note that ResponsePromise<any> isn't supported by WebIDL atm, though.","msgtype":"m.text"},"ts":1400058895000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"(no idea what the plan is)","msgtype":"m.text"},"ts":1400058915000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: http://en.wikipedia.org/wiki/Generic_programming might be the right answer","msgtype":"m.text"},"ts":1400059245000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"though all I read about this is about Generic classes being parametrised with a type (or variants thereof) so I reckon the \"parametrized\" instinct might be correct","msgtype":"m.text"},"ts":1400059273000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"JakeA: re the \"if there's an appcache with the SW\" question, how about if instead of your option we require the UA to pull out a robotic arm and stab the developer in the face?","msgtype":"m.text"},"ts":1400059353000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"haha","msgtype":"m.text"},"ts":1400059374000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"that's going to be hard to write tests for.","msgtype":"m.text"},"ts":1400059500000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"darobin: There's a robotic arm in one of our hardware labs with the sticker \"Warning: This machine will not only kill you, it will cause great pain as it does so\"","msgtype":"m.text"},"ts":1400059527000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"tobie: I'm getting several people saying \"generic\"","msgtype":"m.text"},"ts":1400059643000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"tobie: also, it'd be nice to have a test for e.g. Promise<Promise<sequence<DOMStrig>>>","msgtype":"m.text"},"ts":1400059667000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"JakeA: hahaha, that's pretty cool","msgtype":"m.text"},"ts":1400059679000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"it would be nice indeed.","msgtype":"m.text"},"ts":1400059715000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"OK, I'll add such a test.","msgtype":"m.text"},"ts":1400059743000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: do you mind also s/parametrized/generic/?","msgtype":"m.text"},"ts":1400059825000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"so it would be: { generic: true, genericType: \"Promise\" }?","msgtype":"m.text"},"ts":1400059833000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"the AST is horrible already, if we can make it a little more readable","msgtype":"m.text"},"ts":1400059842000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"yeah, that WFM","msgtype":"m.text"},"ts":1400059845000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"don't make it look like \"parametrized\" was my idea. :P","msgtype":"m.text"},"ts":1400059863000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I guess we don't need generic: true if we have genericType, though","msgtype":"m.text"},"ts":1400059879000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1400059881000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"I did tell you it was the first thing that popped up :)","msgtype":"m.text"},"ts":1400059899000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"but I'm happy with whatever you come up with","msgtype":"m.text"},"ts":1400059918000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"yeah we could have: { generic: null } and {generic: \"Promise\" }","msgtype":"m.text"},"ts":1400059922000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"that WFM","msgtype":"m.text"},"ts":1400059931000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"ok.","msgtype":"m.text"},"ts":1400059949000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"thanks a lot!","msgtype":"m.text"},"ts":1400059955000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"np","msgtype":"m.text"},"ts":1400059958000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"SimonSapin: http://stackoverflow.com/questions/2050973/what-encoding-are-filenames-in-ntfs-stored-as","msgtype":"m.text"},"ts":1400060815000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"thanks annevk, but that doesn’t really answer my question","msgtype":"m.text"},"ts":1400060909000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Hmm, I thought generic(s) was the language feature enabled by something that could be parameterised over types rather than the name for the thing itself","msgtype":"m.text"},"ts":1400061896000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But maybe I am wrong","msgtype":"m.text"},"ts":1400061902000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(and that Foo<T> where Foo and T are types implied that Foo is a parameterised type)","msgtype":"m.text"},"ts":1400061972000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Hmm, but wikipedia seems to use \"generic type\" so ignore me","msgtype":"m.text"},"ts":1400062180000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: I sort of thought that but basically walked the same path you just did","msgtype":"m.text"},"ts":1400062262000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"likewise.","msgtype":"m.text"},"ts":1400066506000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"when we have Foo<Bar> , Foo's the Generic type and Bar's the parameterized type, correct?","msgtype":"m.text"},"ts":1400066568000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"s/correct/do we agree/","msgtype":"m.text"},"ts":1400066587000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"^ jgraham, darobin","msgtype":"m.text"},"ts":1400066634000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: hmmm, I'm not sure that's the correct terminology, or in fact that there *is* a correct terminology that holds across the board","msgtype":"m.text"},"ts":1400066677000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"why do you need the distinction?","msgtype":"m.text"},"ts":1400066682000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"For the README. :)","msgtype":"m.text"},"ts":1400066696000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Promise<any> => { generic: \"Promise\", idlType: \"any\" } reads kind of weird tbh.","msgtype":"m.text"},"ts":1400066758000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"But oh well.","msgtype":"m.text"},"ts":1400066792000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I don't think it's generic at the moment","msgtype":"m.text"},"ts":1400067329000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"There's sequence<T> and Promise<T>","msgtype":"m.text"},"ts":1400067334000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: great use of `generic` in the above sentence.","msgtype":"m.text"},"ts":1400067492000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: agree WebIDL doesn't support that at present. But SW requires it.","msgtype":"m.text"},"ts":1400067522000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I might be missing something, what does SW require?","msgtype":"m.text"},"ts":1400067564000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ResponsePromise<T>","msgtype":"m.text"},"ts":1400067578000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I'm not advocating for this, btw. Just pointing it out.","msgtype":"m.text"},"ts":1400067603000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Ah subclassing. Subclassing is not supported by IDL basically","msgtype":"m.text"},"ts":1400067604000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"agreed.","msgtype":"m.text"},"ts":1400067616000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"We need Team Domenic(tm) for that","msgtype":"m.text"},"ts":1400067621000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Question is: will it?","msgtype":"m.text"},"ts":1400067623000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"K.","msgtype":"m.text"},"ts":1400067629000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Yeah, once we align with ES6, @@create will be sprinkled around the DOM","msgtype":"m.text"},"ts":1400067641000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Implications unforeseen","msgtype":"m.text"},"ts":1400067655000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well, in the meantime, the parser supports that more generic syntax for generics.","msgtype":"m.text"},"ts":1400067669000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"that is, once darobin pulls in https://github.com/darobin/webidl2.js/pull/15","msgtype":"m.text"},"ts":1400067714000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1400067725000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: and merged it is","msgtype":"m.text"},"ts":1400068123000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"shipping now","msgtype":"m.text"},"ts":1400068125000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"awesome. ty.","msgtype":"m.text"},"ts":1400068142000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: and npm published as 2.0.6 — thanks a bundle!","msgtype":"m.text"},"ts":1400068227000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"Yes. Now only  [EnsureUTF16] needs fixing.","msgtype":"m.text"},"ts":1400068324000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: so did you see my latest question in that bug?","msgtype":"m.text"},"ts":1400068656000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: I think if everyone agrees that UTF16String means code units in, scalar values out, we should move ahead and use that as a type","msgtype":"m.text"},"ts":1400068685000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: and add a typedef to DOMString for now","msgtype":"m.text"},"ts":1400068696000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I did see the question. Didn't understand most of your premises, though. :(","msgtype":"m.text"},"ts":1400068724000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"seems the amount of tabs tobie uses, wonders how he copes","msgtype":"m.emote"},"ts":1400068729000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"doesn't","msgtype":"m.emote"},"ts":1400068740000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"jgraham: fyi http://dev.w3.org/csswg/cssom-view/#the-features-argument-to-the-open()-method","msgtype":"m.text"},"ts":1400069802000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"tobie: re appcache, it might indeed be a good idea to campaign to phase it out once SW becomes broadly available","msgtype":"m.text"},"ts":1400070205000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"zcorpan: That seems exactly equivalent to what's in the HTML spec (every actual action is optional), so it's rather unfortunate that it doesn't live there. It also doesn't seem to actually match UAs  (c.f. https://developer.mozilla.org/en-US/docs/Web/API/Window.open )","msgtype":"m.text"},"ts":1400070206000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: i recall seeing different behavior when testing it (unsurprisingly), so i specified what i thought was most useful","msgtype":"m.text"},"ts":1400070401000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"jgraham: what in particular did you have in mind not matching UAs?","msgtype":"m.text"},"ts":1400070416000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: Well it seems to have fewer features and a different default behaviour (I'm just comparing to the MDN page)","msgtype":"m.text"},"ts":1400070483000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"signing web content via pgp has probably been brought up several times, any idea why it was not successful? http://daten.dieweltistgarnichtso.net/src/http-content-pgp-signature/","msgtype":"m.text"},"ts":1400070574000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"e.g. based on the Gecko bug report I assume that \"\" is treated like no value passed, but \"null\" implies the default when passing a value which include e.g. scrollbars=no","msgtype":"m.text"},"ts":1400070609000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk some time ago i had a proposal that media elements in html could be addressed using media fragments. would this require changes in the URL spec? http://daten.dieweltistgarnichtso.net/src/media-fragments-html-polyfill/","msgtype":"m.text"},"ts":1400070716000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"jgraham: ok, thx. yeah the spec doesn't have such \"default\" behavior","msgtype":"m.text"},"ts":1400070724000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i see now that both chrome and firefox open a new tab for empty features but a popup for non-empty","msgtype":"m.text"},"ts":1400070827000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Yeah, this seems to be pretty nasty and confusing :(","msgtype":"m.text"},"ts":1400071026000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: i looked through the list in MDN and didn't see any feature name that i want to put in the spec. but let me know if something is needed for compat","msgtype":"m.text"},"ts":1400071179000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: Well I guess people are relying on specific features, maybe for intranet apps. So the default behaviour should match and there should be some escape hatch for using the other tokens, I guess","msgtype":"m.text"},"ts":1400071427000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"erlehmann: The URL spec provides a string for the fragment, that string could be parsed as a media fragment or as something else. They seem pretty independent","msgtype":"m.text"},"ts":1400073077000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin the point is that my polyfill introduces the concept of a sub-fragment. but other specs already have this, so it probably makes sense to specify this on an HTML level, no?","msgtype":"m.text"},"ts":1400073502000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"what’s a sub-fragment?","msgtype":"m.text"},"ts":1400073532000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin see the example at http://daten.dieweltistgarnichtso.net/src/media-fragments-html-polyfill/","msgtype":"m.text"},"ts":1400073555000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"it links to http://daten.dieweltistgarnichtso.net/src/media-fragments-html-polyfill/#audio&t=8","msgtype":"m.text"},"ts":1400073563000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"which means „the resource embedded by the element with the id audio at time 8“","msgtype":"m.text"},"ts":1400073594000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"Hum, maybe that should be in HTML near http://whatwg.org/C#scroll-to-fragid , but I don’t think it needs any change in the URL spec","msgtype":"m.text"},"ts":1400073699000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"or http://daten.dieweltistgarnichtso.net/src/media-fragments-html-polyfill/#video&t=00:20","msgtype":"m.text"},"ts":1400073707000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"the video at time 00:20","msgtype":"m.text"},"ts":1400073707000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"well, media fragments are only for media resources (like an actual image or video), right? it's a lot more complex if you want to do it to html, where the fragment is in use","msgtype":"m.text"},"ts":1400074185000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"sounds like a case for the ##key=value thing that was talked about a few weeks ago","msgtype":"m.text"},"ts":1400074274000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"SimonSapin sorry","msgtype":"m.text"},"ts":1400074532000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"connection was lost","msgtype":"m.text"},"ts":1400074571000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"SimonSapin did you see my last messages about http://daten.dieweltistgarnichtso.net/src/media-fragments-html-polyfill/#video&t=00:20 signifying the video element at time 00:20?","msgtype":"m.text"},"ts":1400074590000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"erlehmann http://krijnhoetmer.nl/irc-logs/whatwg/20140514#l-633","msgtype":"m.text"},"ts":1400074623000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"thx","msgtype":"m.text"},"ts":1400074627000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"erlehmann: yes. Did you see mine? http://krijnhoetmer.nl/irc-logs/whatwg/20140514#l-626","msgtype":"m.text"},"ts":1400074637000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"yes, zewt, something like http://example.org#video##t=00:20 would probably result in even less collisions with actual content","msgtype":"m.text"},"ts":1400074682000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"specifically, it allows authors to have hash urls that by design are compatible with ##stuff (not that it would happen automatically, of course)","msgtype":"m.text"},"ts":1400074717000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"though i have gone through content already and the ampersand followed by letters followed by an equals sign is really rare","msgtype":"m.text"},"ts":1400074720000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"SimonSapin http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2012-December/080689.html","msgtype":"m.text"},"ts":1400074774000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"i've done it personally, so i doubt it","msgtype":"m.text"},"ts":1400074776000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"> Also, img elements could certainly benefit from spatial media fragments.","msgtype":"m.text"},"ts":1400074794000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"zewt in ids of elements?","msgtype":"m.text"},"ts":1400074815000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"i often use urls like http://foo.com/server/path?server=1&query=2#client/path?client=1&query=2","msgtype":"m.text"},"ts":1400074844000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2012-December/080703.html","msgtype":"m.text"},"ts":1400074849000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"zewt so you have then an element with id „client/path?client=1&query=2” ?","msgtype":"m.text"},"ts":1400074864000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"where \"server/path?server=1&query=2\" and \"client/path?client=1&query=2\" are logically equivalent and parsed the same way, except the former is for the server's use and the latter is for script use","msgtype":"m.text"},"ts":1400074897000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"no, of course not, it's for history API-based scripts","msgtype":"m.text"},"ts":1400074911000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"sounds exceedingly brittle","msgtype":"m.text"},"ts":1400074911000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"well, then we have no conflict","msgtype":"m.text"},"ts":1400074918000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"nope, works perfectly fine","msgtype":"m.text"},"ts":1400074920000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"conflict only would be if there is a collision","msgtype":"m.text"},"ts":1400074924000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"there's a conflict because i might have a client query key named \"t\", which could suddenly trigger a video to seek or something","msgtype":"m.text"},"ts":1400074954000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt only if you have a video that has an id!","msgtype":"m.text"},"ts":1400074986000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"that is the whole point of my proposal","msgtype":"m.text"},"ts":1400074991000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"take http://example.com/server/path?server=1&query=2#client/path?client=1&query=2&t=3","msgtype":"m.text"},"ts":1400075012000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"a lot of assumptions, and it prevents the use of your thing with client-side queries, which is exactly something the ##thing is meant to allow","msgtype":"m.text"},"ts":1400075037000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"then you would need to have a video with the id of 'client/path?client=1' for anything to go haywire","msgtype":"m.text"},"ts":1400075037000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"can you point me to the ## thing?","msgtype":"m.text"},"ts":1400075046000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"i just want a simple thing to link to media on web pages. this is currently *not* possible","msgtype":"m.text"},"ts":1400075064000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"it was a long and noisy discussion that i probably should have summarized on the list","msgtype":"m.text"},"ts":1400075073000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(one sec, i summarized it on irc at the time, searching for it)","msgtype":"m.text"},"ts":1400075138000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i am not at all interested in javascript. i just want to conflicts","msgtype":"m.text"},"ts":1400075141000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"no conflicts","msgtype":"m.text"},"ts":1400075146000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"and a simple declarative way to say „this video on that page at that time“","msgtype":"m.text"},"ts":1400075157000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"HEY LOOK AT THAT KITTEN","msgtype":"m.text"},"ts":1400075162000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"something that currently needs js which is implemented differently every single time","msgtype":"m.text"},"ts":1400075175000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"or stuff like „hey, look at her face here on this page“","msgtype":"m.text"},"ts":1400075185000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"we shouldn't be introducing features that \"aren't interested in javascript\"","msgtype":"m.text"},"ts":1400075189000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"oh you","msgtype":"m.text"},"ts":1400075201000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"read that again. *i* am not interested in javascript.","msgtype":"m.text"},"ts":1400075216000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"the feature should surely not prevent its use","msgtype":"m.text"},"ts":1400075223000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"which implies \"i don't care if this feature works with JS\"","msgtype":"m.text"},"ts":1400075229000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"wrong","msgtype":"m.text"},"ts":1400075238000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"it implies “i don't want a feature that needs js”","msgtype":"m.text"},"ts":1400075253000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"... what needs js?","msgtype":"m.text"},"ts":1400075276000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"the point is allowing browser features in the fragment to be compatible with scripts that also use the fragment (not for browser features to require JS when they don't have to)","msgtype":"m.text"},"ts":1400075339000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"because we already have an incompatible mess of scripts that forward to a point in time of an embedded media resource","msgtype":"m.text"},"ts":1400075362000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"sorry, network","msgtype":"m.text"},"ts":1400075555000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"the ## proposal is essentially: http://foo.com##key1=value2##key2=value, or http://foo.com#anything##key1=value1##key2=value2, probably parsed as \"search for ##key1= in the hash, the value is everything until the next # or the end of string\" (doesn't need to be anything fancier than that, I think)","msgtype":"m.text"},"ts":1400075589000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt doesn't that ensure that private semantics are used?","msgtype":"m.text"},"ts":1400075642000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"the main use case at the time was http://foo.com##text=hello (\"find the first string \"hello\" and jump to it\")","msgtype":"m.text"},"ts":1400075643000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"erlehmann: what do you mean?","msgtype":"m.text"},"ts":1400075650000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"ah, i misunderstood it probably.","msgtype":"m.text"},"ts":1400075662000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"private semantics, that people “invent“ keys","msgtype":"m.text"},"ts":1400075673000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"like with hashbangs","msgtype":"m.text"},"ts":1400075690000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"it's intended to be used for browser features like these, while allowing users to put their own stuff in the hash like I do (without them colliding)","msgtype":"m.text"},"ts":1400075699000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i see","msgtype":"m.text"},"ts":1400075707000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"lets not encourage making uris even less uniform and more stupid","msgtype":"m.text"},"ts":1400075721000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"please","msgtype":"m.text"},"ts":1400075723000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i see users putting “their own stuff” in the hash as something evil","msgtype":"m.text"},"ts":1400075726000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"they're bad enough as it is","msgtype":"m.text"},"ts":1400075726000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"eg. if I have http://foo.com#activeTab=settings, the two can coexist: http://foo.com#activeTab=settings##text=hello","msgtype":"m.text"},"ts":1400075727000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"what caitp says","msgtype":"m.text"},"ts":1400075740000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"caitp: right, this is meant to give some uniformity to custom hash stuff (it can't enforce it, but it gives an option)","msgtype":"m.text"},"ts":1400075758000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"erlehmann: well, i couldn't disagree more :)","msgtype":"m.text"},"ts":1400075820000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"but that's probably too long a discussion for now as I need to head to work","msgtype":"m.text"},"ts":1400075829000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"people already don't really understand uris, and abuse them in all sorts of bizarre ways that they were never intended for","msgtype":"m.text"},"ts":1400075856000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"but people putting data in the hash is a common, accepted practice, supported by the web (History.pushState) and it's not going away","msgtype":"m.text"},"ts":1400075865000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"it doesn't need another abuse vector @_@","msgtype":"m.text"},"ts":1400075868000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"yeah, what caitp says","msgtype":"m.text"},"ts":1400075876000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"this recent “haha, privacy is bad enough, lets give more fingerprinting options” is something like that","msgtype":"m.text"},"ts":1400075892000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"“the web is broken, lets break it more!”","msgtype":"m.text"},"ts":1400075901000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"alright, this conversation is turning rhetorical rather than informative so I'm headed to work now :)","msgtype":"m.text"},"ts":1400075924000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"erlehmann: Not really.  The fingerprinting thing is \"We're already broken almost completely, and are very unlikely to fix it in any meaningful way, so more breaking doesn't hurt anything.\".","msgtype":"m.text"},"ts":1400075983000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(though it does seem a little weird to say \"putting data in the hash is evil and abusive\" alongside \"i want to encode video timestamps in the hash\" is a very confusing pair)","msgtype":"m.text"},"ts":1400076016000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(that was a fascinating sentence structure)","msgtype":"m.text"},"ts":1400076034000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"It's an aspect that hits a maximum brokenness and then doesn't get more broken, unlike other things.","msgtype":"m.text"},"ts":1400076038000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"don't irc while you drive, zewt","msgtype":"m.text"},"ts":1400076045000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"jeeze man","msgtype":"m.text"},"ts":1400076048000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"irc has the effect of sucking people back in and making them late for work :P","msgtype":"m.text"},"ts":1400076068000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"TabAtkins i know, but i think it is really a bad thing to inform untrusted software of how much resources it can afford to waste regardless.","msgtype":"m.text"},"ts":1400076118000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"erlehmann: As argued by multiple other people, you can already figure this out roughly with a pretty easy stress-test.","msgtype":"m.text"},"ts":1400076151000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins i think one should not make it easier.","msgtype":"m.text"},"ts":1400076259000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"OTOH, maybe you don't think that the linux OOM killer is a pretty good idea.","msgtype":"m.text"},"ts":1400076278000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"because if an application wants to “stress test” the memory subsystem, it will be terminated","msgtype":"m.text"},"ts":1400076293000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"Shrug. It *is* a useful piece of information.","msgtype":"m.text"},"ts":1400076301000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"what's your stance on that?","msgtype":"m.text"},"ts":1400076301000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"and that i think not. i think it is something that encourages wasteful programming.","msgtype":"m.text"},"ts":1400076321000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"and user differentiation. i have already seen web pages that tell me to get a new graphics card.","msgtype":"m.text"},"ts":1400076347000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"which makes the web less universal","msgtype":"m.text"},"ts":1400076357000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"if people had to be competent kernel developers to write web applications, the web would be a lot tinier","msgtype":"m.text"},"ts":1400076372000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"“this web pages needs at least 4 cores”","msgtype":"m.text"},"ts":1400076375000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"caitp it is not about kernel developers. it is about app developers","msgtype":"m.text"},"ts":1400076388000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"I have some webapp that benefits from parallelization.  It's silly to spawn up more workers than a comp can possibly use; it'll just mean I waste more time in scheduling.","msgtype":"m.text"},"ts":1400076396000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"as soon as you find out that there *is* an OOM killer, you try to allocate the least amount of memory reasonably possible","msgtype":"m.text"},"ts":1400076406000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"lest your app is killed","msgtype":"m.text"},"ts":1400076411000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"TabAtkins that's quite true. though my core uno machine only becomes notably less responsive when load is >200","msgtype":"m.text"},"ts":1400076462000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"so kudos to the scheduling people","msgtype":"m.text"},"ts":1400076467000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"(yes, two zeros)","msgtype":"m.text"},"ts":1400076487000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"TabAtkins may i ask why “use all available resources” is important in your case?","msgtype":"m.text"},"ts":1400076521000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"instead of having a baseline and then going all linear growth / exponential backoff from that?","msgtype":"m.text"},"ts":1400076546000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"Because it's simpler and more likely to get right immediately.  It's definitely not as good as dynamic scaling, but is simpler.","msgtype":"m.text"},"ts":1400076579000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins so what would happen if something like your page is opened in two tabs?","msgtype":"m.text"},"ts":1400076650000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"both spawn maximum workers?","msgtype":"m.text"},"ts":1400076655000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"Yeah, probably.","msgtype":"m.text"},"ts":1400076664000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I mean, the thing in back is gonna get scaled back by the browser anywya.","msgtype":"m.text"},"ts":1400076676000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"well, then it sounds to me that the “give me an integer for concurrency” proposal is simple and more likely to be horribly wrong","msgtype":"m.text"},"ts":1400076709000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"because if it is simple, people will use it","msgtype":"m.text"},"ts":1400076717000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"More likely to be right than guessing an arbitrary number, which is what most people do today.","msgtype":"m.text"},"ts":1400076731000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"and advice might be “spawn the number of workers that navigator.concurrency” gives","msgtype":"m.text"},"ts":1400076736000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"instant scheduler hell.","msgtype":"m.text"},"ts":1400076742000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"The options are: (1) guess, (2) use what the browser tells you, or (3) implement dynamic perf scaling.","msgtype":"m.text"},"ts":1400076755000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The first two are way easier, and (2) is better than (1).","msgtype":"m.text"},"ts":1400076765000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"maybe (3) can be made easier","msgtype":"m.text"},"ts":1400076767000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"it would help if people stopped thinking of concurrency as multithreading","msgtype":"m.text"},"ts":1400076780000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Everyone keeps suggesting that we can invent things that make (3) and other more complex multi-core scheduling easier. But nobody's produced such a thing, so shrug.","msgtype":"m.text"},"ts":1400076798000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ideally you shouldn't have to care how many processing units you have to decide how many coroutines you need","msgtype":"m.text"},"ts":1400076897000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"because they shouldn't be related","msgtype":"m.text"},"ts":1400076911000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"TabAtkins i think the difference is that some people (me included) think that more deliberation is going to produce a better outcome than immediate action.","msgtype":"m.text"},"ts":1400076926000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"TabAtkins there is precedent for gcd-style stuff in js https://github.com/skylar/node-tasks/blob/master/examples.js","msgtype":"m.text"},"ts":1400077013000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"And you're more than welcome to deliberate and develop such a thing so we can replace it.  In the meantime, replacing the \"just guess a number\" approach is a benefit, simplifies something you can already do, and can be done on every other platform.","msgtype":"m.text"},"ts":1400077038000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"why not have a call that instantiates a worker and then provides a return value to say if it is safe to instantiate another?","msgtype":"m.text"},"ts":1400077159000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"or something?","msgtype":"m.text"},"ts":1400077167000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1400077168000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"TabAtkins, if workers were more like goroutines or even rust tasks, (which they already are, sort of, in an API sense), it becomes much less of a problem, because you don't necessitate a new thread or process","msgtype":"m.text"},"ts":1400077177000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i'm pulling that out of my ass and should really not comment on that. i am not qualified.","msgtype":"m.text"},"ts":1400077180000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"and you don't have to worry as much about how many simultaneous jobs you can run","msgtype":"m.text"},"ts":1400077191000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"they may or may not be simultaneous, it's not important","msgtype":"m.text"},"ts":1400077198000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"erlehmann: How is that not equivalent to just providing a number of workers you can instantiate up front?","msgtype":"m.text"},"ts":1400077201000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"caitp: Yeah, even lighter-weight routines are nice, but they're not what Workers are.","msgtype":"m.text"},"ts":1400077248000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"but they could be","msgtype":"m.text"},"ts":1400077261000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"TabAtkins it encourages dynamic scaling","msgtype":"m.text"},"ts":1400077273000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"web developers don't need pthreads","msgtype":"m.text"},"ts":1400077285000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"ensuring that they're heavyweight creates this problem and doesn't necessarily benefit people","msgtype":"m.text"},"ts":1400077309000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"erlehmann: Devs would just quickly gen everything they need until they get a false return value.  Identical to getting the number up-front and generating the number they need.","msgtype":"m.text"},"ts":1400077318000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"caitp: Sometimes you do need heavier threads.","msgtype":"m.text"},"ts":1400077334000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"sometimes, but what if you need them and only have a single core machine","msgtype":"m.text"},"ts":1400077352000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i think the distinction between threads and coroutines is pretty arbitrary","msgtype":"m.text"},"ts":1400077355000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"but you still have two tasks you want to run concurrently","msgtype":"m.text"},"ts":1400077363000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: Well they get scheduled against each other then.  Ah well.","msgtype":"m.text"},"ts":1400077379000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I mean, you could let the OS do the scheduling for you, but then you have the cost of context switching between them","msgtype":"m.text"},"ts":1400077387000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"and that's not very helpful is it","msgtype":"m.text"},"ts":1400077395000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"the browser has this knowledge, and it can decide to split things across 1, 2, 4, 8 or N jobs, the developer shouldn't have to care. even if they think they need to care, they probably don't","msgtype":"m.text"},"ts":1400077487000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"what caitp says","msgtype":"m.text"},"ts":1400077567000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"if they think they have to care, there should be an api to group workers that should be run in parallel","msgtype":"m.text"},"ts":1400077582000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"TabAtkins: AFAICT the arguments in favour of .hardwareConcurrency simultaneously assume that you can just rely on the scheduler to cover you when you spin up N workers on an N core machine and M cores are either unlike the other cores, or are running some other tasks, and assume that the scheduler can't cover you if you just guess that \"8\" is probably","msgtype":"m.text"},"ts":1400077598000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"TabAtkins: AFAICT the arguments in favour of .hardwareConcurrency simultaneously assume that you can just rely on the scheduler to cover you when you spin up N workers on an N core machine and M cores are either unlike the other cores, or are running some other tasks, and assume that the scheduler can't cover you if you just guess that \"8\" is probablyQuery matches in addon-sdk/Makefile.in Line \tCode Snippet","msgtype":"m.text"},"ts":1400077603000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Hmm","msgtype":"m.text"},"ts":1400077610000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"parse error, redo from start","msgtype":"m.text"},"ts":1400077625000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"that \"4\" or \"8\" is probably an OK value","msgtype":"m.text"},"ts":1400077625000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Not quite for the latter one.  It's that we can improve over just guessing \"8\"; for machines with less useful cores, you can use the smaller number and avoid contending with the scheduler overhead unnecessarily.","msgtype":"m.text"},"ts":1400077705000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Computer's about to die, so I'll probably check out.)","msgtype":"m.text"},"ts":1400077726000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"An improvement that is likely to be just as wrong in many cases seems like a very margianal improvement indeed","msgtype":"m.text"},"ts":1400077803000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Luckily it's a very marginal cost as well.","msgtype":"m.text"},"ts":1400077861000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"when one implementor says \"we'll just cap it to 8 [and screw over people with powerful computers]\" it makes one skeptical, heh","msgtype":"m.text"},"ts":1400078081000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"exactly what are you doing in your web app that you need 10+ proper threads?","msgtype":"m.text"},"ts":1400078155000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"what? any task that's CPU-bound and parallelizes well (\"reencode lots of files from MP3 to Vorbis\", etc)","msgtype":"m.text"},"ts":1400078218000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(I also note that 1 worker = one thread is not required anywhere)","msgtype":"m.text"},"ts":1400078279000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"it's not required, but it is pretty much hinted at","msgtype":"m.text"},"ts":1400078299000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"(and that's not how presto implements it, for example)","msgtype":"m.text"},"ts":1400078302000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yeah, that should be treated as an implementation detail","msgtype":"m.text"},"ts":1400078331000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"the spec says that workers are heavyweight, and can be pretty much expected to be OS threads","msgtype":"m.text"},"ts":1400078358000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"no sense creating lots of system threads if they're I/O-bound workers that sit around waiting for messages a lot","msgtype":"m.text"},"ts":1400078359000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"the spec is occasionally mistaken","msgtype":"m.text"},"ts":1400078373000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"in other words no scheduling algorithm is specified and it's up to the host platform","msgtype":"m.text"},"ts":1400078375000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"unless the browser comes up with something on its own, which may or may not be adequate","msgtype":"m.text"},"ts":1400078390000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"the spec doesn't distinguish between the \"OS\" and the \"browser\" in any real way, as far as I know, they're all just implementation details","msgtype":"m.text"},"ts":1400078467000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i'm not saying the web workers spec should tell browsers how to schedule microtasks or anything, but it would probably be good if browsers were encouraged to implement them","msgtype":"m.text"},"ts":1400078561000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"what detectable behavior do you think is underspecified?","msgtype":"m.text"},"ts":1400078616000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"caitp: workers don't have to be heavyweight though. i think the impl in presto was lightweight, but then it also didn't take advantage of multiple cores","msgtype":"m.text"},"ts":1400078647000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"it's not that they have to be heavyweight","msgtype":"m.text"},"ts":1400078676000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"but the spec sort of says \"they're probably heavyweight, they're allowed to be heavyweight\"","msgtype":"m.text"},"ts":1400078691000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1400078697000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"and as a result, they likely are OS threads","msgtype":"m.text"},"ts":1400078714000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i'd expect browsers to have a small pool of real threads, and to schedule workers on them, so it would use multiple cores but also allow limiting the number of real threads and not taking whole threads for blocking workers","msgtype":"m.text"},"ts":1400078728000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Normatively workers are \"a separate thread or process or equivalent construct\"","msgtype":"m.text"},"ts":1400078753000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"welcome to chromium where you have entirely different processes all over the place","msgtype":"m.text"},"ts":1400078755000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"not using multiple real threads is lame and poor implementation quality, but the spec shouldn't try to prevent it (if browsers want to pretend that each tab only gets one CPU, they can do that)","msgtype":"m.text"},"ts":1400078805000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Domenic: \"equivalent construct\" is a lot of leeway","msgtype":"m.text"},"ts":1400078878000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Domenic: i don't think a phrase starting with \"i.e.\" can be considered normative, heh","msgtype":"m.text"},"ts":1400078957000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: I think \"i.e.\" can; \"e.g.\" cannot.","msgtype":"m.text"},"ts":1400078976000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"more practically, i'm not sure what detectable behavior we're talking about that we think is wrong or underspecified","msgtype":"m.text"},"ts":1400079004000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I'm not sure I think that anything is wrong or underspecified","msgtype":"m.text"},"ts":1400079033000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I don't think you want the spec to encourage applications to care about how many cores they have available","msgtype":"m.text"},"ts":1400079115000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"just IMO","msgtype":"m.text"},"ts":1400079118000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"the browser should care, but script contexts not so much","msgtype":"m.text"},"ts":1400079137000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"are you referring to the \"are workers threads\" discussion, or are you talking about something else?","msgtype":"m.text"},"ts":1400079145000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I'm referring to the \"integer telling you how many cores you have\" thing","msgtype":"m.text"},"ts":1400079166000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"okay, context change marker needed :)","msgtype":"m.text"},"ts":1400079177000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i'm very unconvinced about that feature too","msgtype":"m.text"},"ts":1400079185000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(not to say I'm totally convinced against it, either)","msgtype":"m.text"},"ts":1400079255000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"in my mind, once you start going down that road, before you know it you've got WebIDL mapping 1:1 with pthreads","msgtype":"m.text"},"ts":1400079345000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"and nobody wants that","msgtype":"m.text"},"ts":1400079351000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"asm.js people want that","msgtype":"m.text"},"ts":1400079358000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"sounds like a bit of a giant leap","msgtype":"m.text"},"ts":1400079365000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"they think they want that, they don't really","msgtype":"m.text"},"ts":1400079366000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"no, literally, e.g. epic games wants to be able to compile their pthread-using C++ to JS","msgtype":"m.text"},"ts":1400079379000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that stuff has always seemed like impractical nonsense to me","msgtype":"m.text"},"ts":1400079400000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I think it is okay to say \"hint that this worker probably wants to have its own OS thread\"","msgtype":"m.text"},"ts":1400079423000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"why would you need to do that?","msgtype":"m.text"},"ts":1400079440000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"because maybe you're Epic Games or whoever","msgtype":"m.text"},"ts":1400079453000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"sorry, that does help explain what we're talking about now","msgtype":"m.text"},"ts":1400079469000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"yeah, this is a different discussion, i was jumping off of your full pthread-API idea","msgtype":"m.text"},"ts":1400079488000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but it seems like we're far away from \"scripts want to know how many threads to use\"","msgtype":"m.text"},"ts":1400079492000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"it's all related","msgtype":"m.text"},"ts":1400079500000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"web workers, even as heavyweight threads, are so far from pthreads","msgtype":"m.text"},"ts":1400079501000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so, there's a distinction between concurrency and parallelism, do you agree","msgtype":"m.text"},"ts":1400079509000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"concurrent tasks may or may not be run in parallel","msgtype":"m.text"},"ts":1400079520000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"they're synonyms, so no","msgtype":"m.text"},"ts":1400079526000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"they're not actually synonyms","msgtype":"m.text"},"ts":1400079532000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i am not really interested in a first-principles schooling on concurrency vs. parallelism, so count me out.","msgtype":"m.text"},"ts":1400079539000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"people mistake them for synonyms, but they're not","msgtype":"m.text"},"ts":1400079541000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"yeah i have things i'd rather be doing","msgtype":"m.text"},"ts":1400079563000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"that's fine, but it's worth learning about when you have time","msgtype":"m.text"},"ts":1400079593000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"than \"take two words that every english speaker uses interchangeably and assign subtle extra meanings to them that nobody has used since their college class on threading fifteen years ago\"","msgtype":"m.text"},"ts":1400079611000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"well, getting too philosophical about it isn't really worth doing","msgtype":"m.text"},"ts":1400079694000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"but the point is, you have N things you want to do, and you want to do them roughly simultaneously to meet some end","msgtype":"m.text"},"ts":1400079736000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"you might do them in parallel, or you might do them in sequence a little bit of each at a time","msgtype":"m.text"},"ts":1400079760000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"both are concurrent","msgtype":"m.text"},"ts":1400079769000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"the distinction, ideally, does not matter to the developer","msgtype":"m.text"},"ts":1400079786000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"not sure how that matters here","msgtype":"m.text"},"ts":1400079791000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"it matters because when you stop caring about parallelism vs concurrent, you stop needing to worry about the hardware limits of your platform","msgtype":"m.text"},"ts":1400079862000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"the browser allocates your task somewhere, whether on the current thread or some new thread, and you're none the wiser","msgtype":"m.text"},"ts":1400079913000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"that's how it should be, invisible to the web developer","msgtype":"m.text"},"ts":1400079920000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"sounds very academic; in practice if you start far more processes than CPUs you pay a cost of extra overhead","msgtype":"m.text"},"ts":1400079943000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"because the web developer does not know or care whether she's running her task on a different core or not, she doesn't need to care how many cores there are","msgtype":"m.text"},"ts":1400079955000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"right, so the browser will be clever and not start more threads than it thinks are appropriate","msgtype":"m.text"},"ts":1400079993000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"if you have an embarassingly parallel problem to solve (eg. \"do a bunch of work to each of 1000 files\") which can scale to any number of CPUs, and you want your program to work well on both 2-CPU machines and 128-CPU machines, you don't want to just start 128 processes, since the 2-CPU machine will have a ton of extra overhead as a result","msgtype":"m.text"},"ts":1400080014000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"currently the browser has no idea what the threads are for, so it has no way of knowing what to do","msgtype":"m.text"},"ts":1400080044000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"you're a web application, you aren't going to try and do the work that a 128-processor machine will do","msgtype":"m.text"},"ts":1400080050000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it's not realistic","msgtype":"m.text"},"ts":1400080058000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"for example, if each worker is processing one file, then the ideal thing for the browser to do in that particular case is to run two workers at a time, and just queue the others and not do any work on them","msgtype":"m.text"},"ts":1400080098000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I'm a microtask, for my current turn through my event loop, I'm doing this much work, and taking this long","msgtype":"m.text"},"ts":1400080127000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"the browser keeps track of this information, and uses it to schedule how long I run","msgtype":"m.text"},"ts":1400080140000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"if I do a lot of work, maybe I get moved to a new thread","msgtype":"m.text"},"ts":1400080147000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"if I stop doing a lot of work, maybe I join the main thread","msgtype":"m.text"},"ts":1400080162000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it's not super relevant","msgtype":"m.text"},"ts":1400080167000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"we can do the math and sort it out","msgtype":"m.text"},"ts":1400080174000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: Most browser engines can't suspend scripts midway through execution, so that idea doesn't work","msgtype":"m.text"},"ts":1400080182000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"you mean chopping up a turn through the event loop","msgtype":"m.text"},"ts":1400080237000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"yes, that would take some work","msgtype":"m.text"},"ts":1400080245000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Presto could","msgtype":"m.text"},"ts":1400080255000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: if browsers are putting workers on a single thread and can't suspend them, that sounds like a big bug","msgtype":"m.text"},"ts":1400080263000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"if you're running V8's jit compiled code on the main thread, you might have a hard time stopping it","msgtype":"m.text"},"ts":1400080312000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"if one worker going while(true); can stop other workers from ever running","msgtype":"m.text"},"ts":1400080314000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: There's a reason why Presto was the only one that could suspend and did workers on a single thread :)","msgtype":"m.text"},"ts":1400080330000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"course, it doesn't have to be hard to stop it, that could change","msgtype":"m.text"},"ts":1400080336000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: Carakan's JIT had no effect. Essentially it could suspend at any point GC could run. Which is plenty of places.","msgtype":"m.text"},"ts":1400080357000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"zewt: I don't know that there is any combination of browser that does multiple workers per thread and can't suspend","msgtype":"m.text"},"ts":1400080359000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I think.","msgtype":"m.text"},"ts":1400080363000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"It's just that there is only one that does multiple workers per thread","msgtype":"m.text"},"ts":1400080385000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"and it isn't actively developed","msgtype":"m.text"},"ts":1400080392000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"which is too bad, because that's really the right way to do it","msgtype":"m.text"},"ts":1400080411000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Except that can't have been it. Because how would that handle while(true);... oh well, I forget","msgtype":"m.text"},"ts":1400080411000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"anyways yeah, it's a bit of work for jit compiled script, but I think it would be good to encourage implementations to do that, instead of exposing all of the pthreads nonsense to web developers","msgtype":"m.text"},"ts":1400080591000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"not that workers are a bad thread api","msgtype":"m.text"},"ts":1400080613000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"if you're going to have heavyweight threads, web workers aren't a bad approach","msgtype":"m.text"},"ts":1400080623000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Maybe we could stop on any backedge too, idk?","msgtype":"m.text"},"ts":1400080665000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I think it would be a *lot* of work to allow that, mainly in the dom code rather than in the js engine","msgtype":"m.text"},"ts":1400080670000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"And it's not really clear that it helps with the fundamental problem","msgtype":"m.text"},"ts":1400080690000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"the fundamental problem of doing lots of things?","msgtype":"m.text"},"ts":1400080706000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"In fact it might well make it worse (by trashing the cache)","msgtype":"m.text"},"ts":1400080712000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"oh probably","msgtype":"m.text"},"ts":1400080723000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"but I mean, context switches between OS threads aren't really free either","msgtype":"m.text"},"ts":1400080744000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I don't think there was any complexity in the DOM? The big problem was the cost of reflowing too often.","msgtype":"m.text"},"ts":1400080744000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Because nobody else would reflow during JS execution.","msgtype":"m.text"},"ts":1400080760000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: I think there was","msgtype":"m.text"},"ts":1400080771000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But someone who has current access to Presto is probably better to speak to than the two of us. :P","msgtype":"m.text"},"ts":1400080778000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"But you would have to ask bratell or jl or someone","msgtype":"m.text"},"ts":1400080790000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"idk, I never touched the DOM code much","msgtype":"m.text"},"ts":1400080826000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: i can't get the response writer thing to work. the resource never finishes loading","msgtype":"m.text"},"ts":1400080840000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: Are you setting a content-length header?","msgtype":"m.text"},"ts":1400080863000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"hmm. nope","msgtype":"m.text"},"ts":1400080873000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: You either need to set a content-length header of make sure that the connection gets closed after the response finishes","msgtype":"m.text"},"ts":1400080907000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"which you can do by setting response.close_connection = True","msgtype":"m.text"},"ts":1400080975000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"content-length worked. thanks","msgtype":"m.text"},"ts":1400081005000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"OK. Are the docs wrong? This changed when we enabled HTTP/1.1","msgtype":"m.text"},"ts":1400081022000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"It looks like they are","msgtype":"m.text"},"ts":1400081057000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"the example in https://github.com/w3c/wptserve/pull/24 doesn't do either at least","msgtype":"m.text"},"ts":1400081066000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"http://validator.nu/ is down","msgtype":"m.text"},"ts":1400081086000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"hsivonen: MikeSmith: ^","msgtype":"m.text"},"ts":1400081223000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"mathiasbynens: thanks. It's up again now.","msgtype":"m.text"},"ts":1400081565000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: thanks!","msgtype":"m.text"},"ts":1400081579000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Is there anything like http://api.jquery.com/closest/ coming into native JS?","msgtype":"m.text"},"ts":1400083660000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"JonathanNeal: I don't think anyone is working on that","msgtype":"m.text"},"ts":1400083854000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"that would be nice","msgtype":"m.text"},"ts":1400084081000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it is a kind of shitty name though","msgtype":"m.text"},"ts":1400084090000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":".ancestor(selector) might work better","msgtype":"m.text"},"ts":1400084099000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: .ancestor(selector) would sound to me more like jQuery's .parents(selector)","msgtype":"m.text"},"ts":1400085310000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"darobin: singular vs. plural seems to be the key here","msgtype":"m.text"},"ts":1400085329000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":".ancestors vs. .ancestor","msgtype":"m.text"},"ts":1400085332000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: mmmm, I'm not so sure — I mean they do rather different things","msgtype":"m.text"},"ts":1400085361000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"or rather, I take your point, but that sort of difference in behaviour for just one \"s\" scares me","msgtype":"m.text"},"ts":1400085388000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"(not to say that closest() is great either)","msgtype":"m.text"},"ts":1400085401000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"in this case i'd say \"closest\" is a good name just because it's the one people are alreay familiar with (that and there's no well-known tree structure term for it)","msgtype":"m.text"},"ts":1400086096000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i often roll that function myself, and I call it \"closest\" too","msgtype":"m.text"},"ts":1400086114000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: you don't think \"ancestor\" is a well-known tree struture term?","msgtype":"m.text"},"ts":1400086139000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: it's wrong, because this.closest() can return this","msgtype":"m.text"},"ts":1400086159000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"this isn't an ancestor of this","msgtype":"m.text"},"ts":1400086162000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"ah, it can? I've never actually used that.","msgtype":"m.text"},"ts":1400086171000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"in that case I agree .closest() sounds best.","msgtype":"m.text"},"ts":1400086184000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah, and i often depend on that behavior","msgtype":"m.text"},"ts":1400086187000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"http://dom.spec.whatwg.org/#trees \"inclusive ancestor\" heh","msgtype":"m.text"},"ts":1400086259000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"for example, container.addEventListener(\"click\", function(e) { var actualTarget = e.target.closest(\".button\"); }, true);","msgtype":"m.text"},"ts":1400086311000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"where the .button might actually also be the target","msgtype":"m.text"},"ts":1400086349000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(doesn't currentTarget work for that?)","msgtype":"m.text"},"ts":1400086353000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"if you have <div class=container><div class=button><lots of stuff/></div></div> and you click somewhere inside \"lots of stuff\", <div class=button> is nothing special to the event","msgtype":"m.text"},"ts":1400086409000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"so it just means \"see if we clicked a .button, or something nested inside a .button (we don't care which)\"","msgtype":"m.text"},"ts":1400086435000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Ah yeah, I guess this is usually abstracted away from me by jQuery et al's event delegation","msgtype":"m.text"},"ts":1400086548000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"$('.container').on('click', '.button', function (e) { /* e.currentTarget is always the .button */ })","msgtype":"m.text"},"ts":1400086568000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: ancestor suffers the same problem as contains https://developer.mozilla.org/en-US/docs/Web/API/Node.contains","msgtype":"m.text"},"ts":1400089258000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"It implies that it does not match itself.","msgtype":"m.text"},"ts":1400089272000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"JonathanNeal: yeah, scroll up a bit :)","msgtype":"m.text"},"ts":1400089293000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I read, but I thought it was worth bringing up a related method and quantifying it a bit more.","msgtype":"m.text"},"ts":1400089358000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"I just posted https://github.com/jonathantneal/closest I rather niavely ask people to write a spec if they think it deserves to be a real DOM method. I wish I could provide better direction. Can you think of a way to provide more constructive direction?","msgtype":"m.text"},"ts":1400089452000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"*naively","msgtype":"m.text"},"ts":1400089613000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"I'm not sure what you're asking.","msgtype":"m.text"},"ts":1400089856000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the spec is probably one line, e.g. some slightly-better phrased version of \"return the first inclusive ancestor of element\"","msgtype":"m.text"},"ts":1400089903000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(The better-phrasing would come in re: making sure \"first\" is well-defined.)","msgtype":"m.text"},"ts":1400089924000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"innermost?","msgtype":"m.text"},"ts":1400089942000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"just needs to be something already defined in the DOM standard","msgtype":"m.text"},"ts":1400089953000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"not sure if there's an ordering on inclusive ancestors","msgtype":"m.text"},"ts":1400089961000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"that is last in tree order\" might work","msgtype":"m.text"},"ts":1400090017000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If any of you can think of one that is sympathetic with the existing DOM, would you ping me when you share it? I’ll update the documentation. What I want to do in the README is tell people “If you want to see this in a real DOM standard, do the following:”","msgtype":"m.text"},"ts":1400090351000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"the answer to that is \"convince annevk to add it and convince implementers to implement it.\"","msgtype":"m.text"},"ts":1400090483000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"as always.","msgtype":"m.text"},"ts":1400090485000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"gah, I wasn't logged in when I submitted: https://www.w3.org/Bugs/Public/show_bug.cgi?id=25716","msgtype":"m.text"},"ts":1400092217000,"senderName":"jcgregorio","senderId":"jcgregorio@irc"},
{"content":{"body":"in case anyone wants to update the bug to list me as the reporter","msgtype":"m.text"},"ts":1400092235000,"senderName":"jcgregorio","senderId":"jcgregorio@irc"},
{"content":{"body":"jcgregorio: I don't think you can change the reporter in bugzilla","msgtype":"m.text"},"ts":1400092418000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: OK, thanks","msgtype":"m.text"},"ts":1400092454000,"senderName":"jcgregorio","senderId":"jcgregorio@irc"},
{"content":{"body":"dear world: if your documentation contains the phrase \"Alice wants to\", please step away and let somebody else write the documentation","msgtype":"m.text"},"ts":1400102890000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(thanks)","msgtype":"m.text"},"ts":1400102895000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"But if the alternative is no documentation?","msgtype":"m.text"},"ts":1400102964000,"senderName":"odinho","senderId":"odinho@irc"},
{"content":{"body":"i'd almost take no documentation over getting a headache reading about some make-believe Alice when i'm trying to read technical docs","msgtype":"m.text"},"ts":1400103021000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"If your documentation contains \"Alice wants to\" you are either doing cryptography, or trying to make your software seem as complex as crypto","msgtype":"m.text"},"ts":1400103265000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Yeah. Alice and Bob.","msgtype":"m.text"},"ts":1400103278000,"senderName":"odinho","senderId":"odinho@irc"},
{"content":{"body":"in this instance it's Amazon API docs, some of which is silly complex","msgtype":"m.text"},"ts":1400103334000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Hurrah, time for an early xkcd http://xkcd.com/177/","msgtype":"m.text"},"ts":1400103335000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(though this particular API is probably the simplest amazon API I've ever seen--read a URL from inside a VM, it spits out your instance's ID)","msgtype":"m.text"},"ts":1400103366000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"In CSS, what is the term for the definition \"The group of all Rule Set(s)\" ?","msgtype":"m.text"},"ts":1400107681000,"senderName":"aretecode","senderId":"aretecode@irc"},
{"content":{"body":"block?","msgtype":"m.text"},"ts":1400108093000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"in the CSSOM or something else?","msgtype":"m.text"},"ts":1400108217000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Yes, caitp","msgtype":"m.text"},"ts":1400109098000,"senderName":"aretecode","senderId":"aretecode@irc"},
{"content":{"body":"estellevw, like `Rule Set Block` ?","msgtype":"m.text"},"ts":1400109112000,"senderName":"aretecode","senderId":"aretecode@irc"},
{"content":{"body":"grr, firefox has been chewing a whole CPU and spinning my fans up nonstop since that last update","msgtype":"m.text"},"ts":1400110074000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: If you can isolate the problem at all, report a bug","msgtype":"m.text"},"ts":1400110434000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"It is working fine for me at least","msgtype":"m.text"},"ts":1400110441000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"it's probably some tab causing it, and binary searching my dozens of tabs would be tedious","msgtype":"m.text"},"ts":1400110702000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(same tab set as before the update where it didn't happen, though)","msgtype":"m.text"},"ts":1400110728000,"senderName":"zewt","senderId":"zewt@irc"}
]