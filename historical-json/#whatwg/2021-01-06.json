[
{"content":{"body":"Domenic: yes, sorry for not having gotten to it yet","msgtype":"m.text"},"ts":1609907213000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"since December 14 launch of mdn/content, have not had much free cycles","msgtype":"m.text"},"ts":1609907273000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"to regenerate mdn-spec-links, I still need to rewrite my MDN-consuming code to consume the different (better) JSON format that’s now exposed","msgtype":"m.text"},"ts":1609907363000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"in the mean time, been working today on https://github.com/mdn/content/pull/893","msgtype":"m.text"},"ts":1609907475000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"updating https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset","msgtype":"m.text"},"ts":1609907495000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and, at the risk of embarrassing myself, I have to admit I don’t think I understand date.getTimezoneOffset()","msgtype":"m.text"},"ts":1609907534000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I *thought* I did — I thought it was simple: regardless of what Date instance the getTimezoneOffset() method is called from, the result isn’t calculated based on the value of the particular Date instance, but is instead always just the difference between UTC time and local time","msgtype":"m.text"},"ts":1609907707000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but https://github.com/mdn/content/pull/893/files#r551959459 suggests that ain’t so","msgtype":"m.text"},"ts":1609907764000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"however, from reading https://tc39.es/ecma262/#sec-date.prototype.gettimezoneoffset I find no indication how the behavior could be anything other than one what I described — that is, it’s not calculated by looking at he instance","msgtype":"m.text"},"ts":1609907879000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but I had anyway already been wondering, if that’s so, why then is getTimezoneOffset() an instance method rather than being a static method of Date?","msgtype":"m.text"},"ts":1609907997000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: LocalTime(t), and in particular LocalTZA(t), is a function of t, I guess? And t = the time value of the particular instance","msgtype":"m.text"},"ts":1609911709000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://tc39.es/ecma262/#sec-local-time-zone-adjustment seems to have an example","msgtype":"m.text"},"ts":1609911744000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah, I have since read through the spec to get to some of that","msgtype":"m.text"},"ts":1609911771000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://tc39.es/ecma262/#sec-local-time-zone-adjustment","msgtype":"m.text"},"ts":1609911772000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"> When tlocal represents local time repeating multiple times at a negative time zone transition (e.g. when the daylight saving time ends or the time zone offset is decreased due to a time zone rule change) or skipped local time at a positive time zone transitions (e.g. when the daylight saving time starts or the time zone offset is increased due to a time zone rule change), tlocal must be interpreted","msgtype":"m.text"},"ts":1609911790000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"using the time zone offset before the transition.","msgtype":"m.text"},"ts":1609911796000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"this “time zone transition” stuff","msgtype":"m.text"},"ts":1609911803000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://tc39.es/ecma262/#sec-time-values-and-time-range","msgtype":"m.text"},"ts":1609911820000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"> A time value that is a multiple of 24 × 60 × 60 × 1000 = 86,400,000 (i.e., is equal to 86,400,000 × d for some integer d) represents the instant at the start of the UTC day that follows the epoch by d whole UTC days (preceding the epoch for negative d). Every other finite time value t is defined relative to the greatest preceding time value s that is such a multiple, and represents the instant","msgtype":"m.text"},"ts":1609911830000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that occurs within the same UTC day as s but follows it by t − s milliseconds.","msgtype":"m.text"},"ts":1609911836000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"...","msgtype":"m.text"},"ts":1609911839000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so I think that means, if a Date instance’s value is a multiple of 86,400,000, then calling getTimezoneOffset() from that instance will give the time zone offset prior to DST transition","msgtype":"m.text"},"ts":1609912016000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Right?","msgtype":"m.text"},"ts":1609912020000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"That much, I cannot answer at 1am, sorry :)","msgtype":"m.text"},"ts":1609912080000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I can try to help out tomorrow!","msgtype":"m.text"},"ts":1609912089000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"hai :)","msgtype":"m.text"},"ts":1609912134000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Domenic: (when you’re back) found https://esdiscuss.org/topic/override-localtza","msgtype":"m.text"},"ts":1609915801000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"> I understand that an implementation of ECMAScript is expected to determine the local time zone adjustment [1].","msgtype":"m.text"},"ts":1609915804000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"> This is really convenient -- most of the time. However, it would be great to override this for a given Date object.","msgtype":"m.text"},"ts":1609915807000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"OK from testing I’ve managed to glean that it depends on whether the date of the instance is/was during DST","msgtype":"m.text"},"ts":1609916453000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"basically","msgtype":"m.text"},"ts":1609916478000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"only “basically” because I guess there is probably some more complicated checking of the https://www.iana.org/time-zones tzdb","msgtype":"m.text"},"ts":1609916649000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"(end monologue; apologies to channel; /me heads off to try to document this in MDN)","msgtype":"m.text"},"ts":1609916943000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"}
]