[
{"content":{"body":"Hello, How I may enable content-encoding compression from a CGI script? I mean how I can set the correct line in the http header?","msgtype":"m.text"},"ts":1390781432000,"senderName":"ytrezq","senderId":"ytrezq@irc"},
{"content":{"body":"So Test262 is on GitHub, and they're considering merging the PRs as enough for licensing, so yay easier submissions!","msgtype":"m.text"},"ts":1390784950000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"On the other hand, will they keep up with PRs?","msgtype":"m.text"},"ts":1390784958000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Ms2ger: looks like you should file a bug","msgtype":"m.text"},"ts":1390785958000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"is it considered ugly to use float in WebIDL?","msgtype":"m.text"},"ts":1390793696000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"we're considering making some attributes float in WebVTT, but if we go with double we're going to waste memory, which I don't want","msgtype":"m.text"},"ts":1390793737000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"but with float you can have a strange case that the value you set is not the value you then get back (in JavaScript, that is)","msgtype":"m.text"},"ts":1390793769000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"nessy: ^","msgtype":"m.text"},"ts":1390793775000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: float is part of WebIDL http://www.w3.org/TR/WebIDL/#idl-float - but yeah, is there a preference?","msgtype":"m.text"},"ts":1390794856000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"foolip: I just checked and there are no \"float\" values in use in IDL in the HTML spec, if that's any indication (they are all double)","msgtype":"m.text"},"ts":1390795528000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"foolip: my guess is it's left to the browser as a quality of implementation issue (but Hixie can clarify)","msgtype":"m.text"},"ts":1390795668000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"foolip: why would it waste memory, given that it's going to be a JS Number in any case?","msgtype":"m.text"},"ts":1390801820000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"foolip: http://heycam.github.io/webidl/#idl-float says double is preferred","msgtype":"m.text"},"ts":1390804447000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"One day, it will all be \"number.\" With some validation annotations.","msgtype":"m.text"},"ts":1390804739000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"https://www.w3.org/Bugs/Public/show_bug.cgi?id=24241#c4","msgtype":"m.text"},"ts":1390804855000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Hixie: if the IDL says double and you store it as float internally, it seems trivial to write a test case that would fail: cue.line=veryPreciseNumber;assert(cue.line==veryPrecisNumber)","msgtype":"m.text"},"ts":1390805777000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"zcorpan: have you looked through https://www.w3.org/Bugs/Public/show_bug.cgi?id=19836 ?","msgtype":"m.text"},"ts":1390805805000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: have now","msgtype":"m.text"},"ts":1390806013000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: WDYT?","msgtype":"m.text"},"ts":1390806373000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"I don't want the implementation to have to store these things as double internally, that's just wasteful","msgtype":"m.text"},"ts":1390806400000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: i'm not competent about memory stuff, but can't you just store as double when necessary and use a more compact type otherwise?","msgtype":"m.text"},"ts":1390806503000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"foolip: i'd just specify double and let the smart guys figure out how to do it efficiently :-)","msgtype":"m.text"},"ts":1390806553000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: not really, having two different representations massively complicates things, it'll end up worse than just using double everywhere","msgtype":"m.text"},"ts":1390806598000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"zcorpan: would you complain when your test case fails to get the same number out of the attribute as you put in?","msgtype":"m.text"},"ts":1390806619000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: that seems like the wrong question","msgtype":"m.text"},"ts":1390806660000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"foolip: more relevant is if authors would complain or worse, write buggy code but not realize it","msgtype":"m.text"},"ts":1390806688000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"foolip: but i fail to see how this attribute is different from all other doubles in html","msgtype":"m.text"},"ts":1390806802000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I don't know, is it common for things that are double to not actually have double precision?","msgtype":"m.text"},"ts":1390806821000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"at some point html changed all floats to doubles","msgtype":"m.text"},"ts":1390806856000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"so WebIDL says \"Unless there are specific reasons to use a 32 bit floating point type, specifications should use double rather than float\"","msgtype":"m.text"},"ts":1390806927000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"is \"we don't need double precision\" a \"specific reason\"? :)","msgtype":"m.text"},"ts":1390806946000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"if it was it wouldn't say that :-P","msgtype":"m.text"},"ts":1390806985000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"video.volume is double","msgtype":"m.text"},"ts":1390807123000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"the thing with cues is that you will have lots of them, so small differences matter more","msgtype":"m.text"},"ts":1390807149000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"so, OK, I guess that using float in WebIDL isn't cool, now what","msgtype":"m.text"},"ts":1390807214000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"I suppose just use float internally and hope that nobody writes that test case","msgtype":"m.text"},"ts":1390807290000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"no :-)","msgtype":"m.text"},"ts":1390807386000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ask on public-script-coord, the \"there are lots of cues\" reason might be valid","msgtype":"m.text"},"ts":1390807425000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"the same discussion was had about something in http://dev.w3.org/fxtf/geometry/ ... i don't remember what the reasoning was but it seems it now doesn't use float","msgtype":"m.text"},"ts":1390807493000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: ok, will allow double into the spec first and write that email second","msgtype":"m.text"},"ts":1390807583000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"nessy: ^","msgtype":"m.text"},"ts":1390807589000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Hrm","msgtype":"m.text"},"ts":1390810619000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"If you call click() on a disabled button, should a click event be fired?","msgtype":"m.text"},"ts":1390810653000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: \"yes\" seems like the simplest answer","msgtype":"m.text"},"ts":1390810746000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Is there anything wrong with my test at http://software.hixie.ch/utilities/js/live-dom-viewer/saved/2775?","msgtype":"m.text"},"ts":1390810779000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: probably, but http://www.whatwg.org/specs/web-apps/current-work/multipage/elements.html#run-synthetic-click-activation-steps doesn't seem to cared about disabled, so that bit doesn't seem wrong","msgtype":"m.text"},"ts":1390810942000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Hi, I dropped a mail to adminâŠ™wwo for an account, but did not yet get a reply. If someone here is able to help, please reply. Thanks!","msgtype":"m.text"},"ts":1390833080000,"senderName":"macfreek","senderId":"macfreek@irc"},
{"content":{"body":"(the mail was send last Friday)","msgtype":"m.text"},"ts":1390833096000,"senderName":"macfreek","senderId":"macfreek@irc"},
{"content":{"body":"macfreek: will look now","msgtype":"m.text"},"ts":1390833485000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"thanks.","msgtype":"m.text"},"ts":1390833494000,"senderName":"macfreek","senderId":"macfreek@irc"},
{"content":{"body":"but please hang around here longer than 5 minutes this time :)","msgtype":"m.text"},"ts":1390833511000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"NP :)","msgtype":"m.text"},"ts":1390833537000,"senderName":"macfreek","senderId":"macfreek@irc"},
{"content":{"body":"Is there any Java DOM impl that works with nu.validator.htmlparser.dom.HTMLDocumentBuilder with XMLViolationPolicy = ALLOW?","msgtype":"m.text"},"ts":1390833795000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: not that I'm aware of","msgtype":"m.text"},"ts":1390833848000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Okay.","msgtype":"m.text"},"ts":1390833861000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"but I'm not so familiar with what's out there","msgtype":"m.text"},"ts":1390833863000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hsivonen would certainly know better","msgtype":"m.text"},"ts":1390833875000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and maybe smola","msgtype":"m.text"},"ts":1390833880000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I'm probably best suited just creating a minimal TreeBuilder that just keeps the parser right, anyway.","msgtype":"m.text"},"ts":1390833902000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"yeah that might not require so much effort really","msgtype":"m.text"},"ts":1390833965000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"gsnedders: I don't know, but it seemed sensible to keep open the option that someone might write one","msgtype":"m.text"},"ts":1390834333000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"gsnedders: You might want SaxTree","msgtype":"m.text"},"ts":1390834360000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"macfreek: please either DM me your e-mail address and username you want, or just type in here","msgtype":"m.text"},"ts":1390834645000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hsivonen, MikeSmith: if I come up with a whole load of questions, should I ask you here, by email personally, or some ML?","msgtype":"m.text"},"ts":1390834933000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: I would be happier with questions here but hsivonen would be more help than me and I suspect he'd prefer direct e-mail so that's probably a better choice","msgtype":"m.text"},"ts":1390835295000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"The other important question before starting anything: is it up to date with the spec?","msgtype":"m.text"},"ts":1390835500000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: the parser behavior is as up to date with the spec as the gecko parser is","msgtype":"m.text"},"ts":1390836435000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"gsnedders: You can ask here or in email. the latest .zip release is not up to date. (I should fix.) The repo is almost up to date except for a couple of minor things.","msgtype":"m.text"},"ts":1390837149000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: I was looking at the repo anyway :)","msgtype":"m.text"},"ts":1390837180000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"well https://www.w3.org/Bugs/Public/show_bug.cgi?id=24408 is special","msgtype":"m.text"},"ts":1390846074000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"foolip: depends if it's readonly or writable, i'm not clear on what you're doing exactly","msgtype":"m.text"},"ts":1390846087000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ms2ger: https://www.w3.org/Bugs/Public/show_bug.cgi?id=24396 what am i supposed to do? is this different from the bug it was cloned from? i'm confused.","msgtype":"m.text"},"ts":1390846268000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, document != window","msgtype":"m.text"},"ts":1390846280000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"there's two sets of these? jesus","msgtype":"m.text"},"ts":1390846331000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"So the usual way of extending navigator with a \"namespace\" seems to be... creating a non-constructable class, somehow magically constructing an instance of it, then putting that instance on `navigator`?","msgtype":"m.text"},"ts":1390846402000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"what do you mean by \"namespace\"?","msgtype":"m.text"},"ts":1390846420000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"e.g. navigator.storageQuota.queryInfo(\"temporary\"), navigator.storageQuota.requestPersistentQuota(0), both functions are under the \"storageQuota\" namespace","msgtype":"m.text"},"ts":1390846467000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1390846503000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you don't want to use the word \"namespace\" for that, that's just confusing","msgtype":"m.text"},"ts":1390846510000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if you mean, \"how do i add members to an interface defined in another specification\", there's two ways that are considered good practice","msgtype":"m.text"},"ts":1390846529000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"1. ask the editor of said specification to add the member","msgtype":"m.text"},"ts":1390846535000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"2. create a \"partial interface\".","msgtype":"m.text"},"ts":1390846540000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Sure, that's not the part I'm confused on","msgtype":"m.text"},"ts":1390846561000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"The part I'm confused on is what you put in that partial interface","msgtype":"m.text"},"ts":1390846567000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"it seems the tradition is to create a non-constructible class, then put a magically-constructed instance of that class in the partial interface","msgtype":"m.text"},"ts":1390846580000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Yes","msgtype":"m.text"},"ts":1390846610000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"welp","msgtype":"m.text"},"ts":1390846657000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Well it's not like anyone actually finds it hard to use","msgtype":"m.text"},"ts":1390846683000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"wait, what?","msgtype":"m.text"},"ts":1390846697000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"how do you put a \"magically-constructed instance\" of a \"non-constructible class\" in an interface?","msgtype":"m.text"},"ts":1390846712000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and we couldn't have really waited until 20XY for ES to finally standardise modules","msgtype":"m.text"},"ts":1390846717000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: could have just used normal objects and functions","msgtype":"m.text"},"ts":1390846728000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Hixie: using magic WebIDL powers","msgtype":"m.text"},"ts":1390846737000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Hixie: I assume he means something like navigator in window.navigator","msgtype":"m.text"},"ts":1390846744000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"if you want to add \"requestPersistentQuota\" to \"storageQuota\" you just say \"partial interface StorageQuota { void requestPersistentQuota() }\"","msgtype":"m.text"},"ts":1390846758000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you can put [NoInterfaceObject] on something, but still somehow create instances of it by doing readonly attribute NonConstructibleClass thingy","msgtype":"m.text"},"ts":1390846759000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: Not sure how that would have been better. Or necessarily worked at all","msgtype":"m.text"},"ts":1390846768000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"oh you mean how do you put the storageQuota attribute itself onto Navigator?","msgtype":"m.text"},"ts":1390846793000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"jgraham: pretty simple. navigator.storageQuota = { queryInfo() { /* algorithm for query info */ }, requestPersistentQuota() { /* algorithm for requesting a quota */ } };","msgtype":"m.text"},"ts":1390846804000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Hixie: yes, that's the issue.","msgtype":"m.text"},"ts":1390846813000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"partial interface Navigator { readonly attribute StorageQuota storageQuota; }, \"on getting, the storageQuota attribute must return an instance of the StorageQuota interface. The same instance must be returned each time.\"","msgtype":"m.text"},"ts":1390846854000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and  interface StorageQuota { }","msgtype":"m.text"},"ts":1390846863000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"no need for any [attributes]","msgtype":"m.text"},"ts":1390846868000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: This isn't a practical question afaict","msgtype":"m.text"},"ts":1390846878000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1390846884000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"This is a theoretical purity question","msgtype":"m.text"},"ts":1390846885000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"well, ok, if StorageQuota is constructible, then that makes sense","msgtype":"m.text"},"ts":1390846887000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"this isn't very theoretical","msgtype":"m.text"},"ts":1390846891000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"this is a \"how would i implement this API in jsdom\" question","msgtype":"m.text"},"ts":1390846899000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"why would it be constructible?","msgtype":"m.text"},"ts":1390846900000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it has no constructor","msgtype":"m.text"},"ts":1390846903000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"how do you create instances of it then?","msgtype":"m.text"},"ts":1390846908000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"you just do","msgtype":"m.text"},"ts":1390846912000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the browser can do whatever","msgtype":"m.text"},"ts":1390846915000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"... O_O","msgtype":"m.text"},"ts":1390846916000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: In general the idea that you can write the DOM in pure JS with no external environment is brokwn","msgtype":"m.text"},"ts":1390846952000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"*broken","msgtype":"m.text"},"ts":1390846956000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"interfaces defined in IDL can't ever be constructed from JS, they're all \"magical\" in that they have browser code backing it","msgtype":"m.text"},"ts":1390846960000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i mean even if they have constructors, what you get back is a browser-implemented instance","msgtype":"m.text"},"ts":1390847004000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"jgraham: all i'm asking is for the DOM to expose objects to JavaScript that actually can be implemented in JavaScript. Not APIs that are impossible for a normal JS programmer to ever create and expose to another JS programmer.","msgtype":"m.text"},"ts":1390847013000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"the prototypes are browser-created prototypes","msgtype":"m.text"},"ts":1390847015000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"etc","msgtype":"m.text"},"ts":1390847016000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i don't understand","msgtype":"m.text"},"ts":1390847034000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"why would you ever want to create one of these from JS?","msgtype":"m.text"},"ts":1390847040000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"this is basically a document.all issue","msgtype":"m.text"},"ts":1390847041000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"it's impossible for JS to create an object that has properties but is falsy","msgtype":"m.text"},"ts":1390847049000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"similarly it's impossible for JS to create a non-constructible class that somehow also has instances existing as a property of navigator","msgtype":"m.text"},"ts":1390847065000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"it's like how you can't create a Win32 window without using the Win32 API","msgtype":"m.text"},"ts":1390847069000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"both are crazy","msgtype":"m.text"},"ts":1390847073000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"what do you mean by \"non-constructible class\" exactly?","msgtype":"m.text"},"ts":1390847255000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"in JS there are no classes and everything is constructible, no?","msgtype":"m.text"},"ts":1390847263000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i guess only Functions are constructible","msgtype":"m.text"},"ts":1390847282000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i don't really understand the question","msgtype":"m.text"},"ts":1390847303000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"class\" in JS is shorthand for constructor function with a well-defined prototype","msgtype":"m.text"},"ts":1390847323000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"(formalized in ES6 by the `class` keyword syntactic sugar)","msgtype":"m.text"},"ts":1390847333000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Hixie: There's no value of X such that new X() will give you back a storageQuota","msgtype":"m.text"},"ts":1390847336000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: and, that wouldn't be a problem, except that Object.getPrototypeOf(navigator.storageQuota) gives you a well defined StorageQuota.prototype object","msgtype":"m.text"},"ts":1390847367000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"jgraham: isn't that true for all objects in DOM?","msgtype":"m.text"},"ts":1390847368000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Not really","msgtype":"m.text"},"ts":1390847388000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I mean you can do new Event() these days","msgtype":"m.text"},"ts":1390847398000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"sure but it's not a generic JS-backed Event","msgtype":"m.text"},"ts":1390847405000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's a browser-implemented Event","msgtype":"m.text"},"ts":1390847410000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Sure","msgtype":"m.text"},"ts":1390847416000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"so it's not a \"class\"","msgtype":"m.text"},"ts":1390847426000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sure it is","msgtype":"m.text"},"ts":1390847430000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"it's a function which vends instances of its prototype","msgtype":"m.text"},"ts":1390847437000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"(when called with `new`)","msgtype":"m.text"},"ts":1390847446000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Well it depends on whether you can actually implement an Event in js with equivalent semantics","msgtype":"m.text"},"ts":1390847454000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"its prototype is kinda useless though, it's full of native code functions","msgtype":"m.text"},"ts":1390847458000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's a useful prototype","msgtype":"m.text"},"ts":1390847465000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"i guess i don't understand what we're talking about then","msgtype":"m.text"},"ts":1390847471000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the problem is not that sometimes methods can be [native code]","msgtype":"m.text"},"ts":1390847482000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"what's the problem we're trying to solve?","msgtype":"m.text"},"ts":1390847483000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the problem is that you can create frankenstein objects exposed to JS but not possible for a JS programmer to ever create himself, or to encounter outside of this weird browser world","msgtype":"m.text"},"ts":1390847516000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"OK, then I am also confused. I also don't understand how far down you want to push this","msgtype":"m.text"},"ts":1390847528000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I don't understand why you care about being able to do new X() but not about the fact that you can't implement any of the properties of an X","msgtype":"m.text"},"ts":1390847555000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"such as, a `storageQuota` property which is an instance of `StorageQuota.prototype` where `StorageQuota` is not actually a constructor but instead a function that always throws.","msgtype":"m.text"},"ts":1390847557000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"why is \"you can create frankenstein objects exposed to JS but not possible for a JS programmer to ever create himself\" a problem?","msgtype":"m.text"},"ts":1390847623000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well, i think that's our fundamental point of contention :)","msgtype":"m.text"},"ts":1390847643000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"(one could create an object in JS that would allow something to be constructed once, but not again, I think)","msgtype":"m.text"},"ts":1390847643000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Domenic_: is it a problem that the same is true in the Win32 API? That there are concepts that exist as singletons in the API and can't be created from user code?","msgtype":"m.text"},"ts":1390847684000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"jgraham: not a bad mental model. I might be pacified.","msgtype":"m.text"},"ts":1390847687000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Hixie: there are no concepts in the Win32 API that can't be implemented in C","msgtype":"m.text"},"ts":1390847703000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"that's the analogy","msgtype":"m.text"},"ts":1390847707000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: sure there are.","msgtype":"m.text"},"ts":1390847715000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Oh?","msgtype":"m.text"},"ts":1390847721000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: a Win32 Window can't be created by a C program without using the Win32 API.","msgtype":"m.text"},"ts":1390847728000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"jgraham: in pure JS, you can always just create a new object that is identical to an existing object, as far as i can tell. just copy all its members.","msgtype":"m.text"},"ts":1390847748000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sure. but Window itself is implementable in C","msgtype":"m.text"},"ts":1390847749000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: well sure. You could implement an entire browser in JavaScript, too.","msgtype":"m.text"},"ts":1390847760000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Window isn't some weird thing that follows different rules than all other objects exposed to C code","msgtype":"m.text"},"ts":1390847782000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"s/exposed to/created by/","msgtype":"m.text"},"ts":1390847789000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"yes it is?","msgtype":"m.text"},"ts":1390847795000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i mean, not _all_ other objects","msgtype":"m.text"},"ts":1390847801000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"there's tons of stuff vended by the Win32 API","msgtype":"m.text"},"ts":1390847806000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"File handles, for example","msgtype":"m.text"},"ts":1390847813000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sure. but they're structs, or pointers, or whatever","msgtype":"m.text"},"ts":1390847831000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"so?","msgtype":"m.text"},"ts":1390847835000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you can't just make your own","msgtype":"m.text"},"ts":1390847839000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you have to use the one handed to you by the Win32 API, otherwise it won't work","msgtype":"m.text"},"ts":1390847848000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"not, e.g. pointers which can only be dereferenced once, or some similar strange thing that breaks language invariants","msgtype":"m.text"},"ts":1390847853000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"just redefine your idea of what is a JS invariant to not include things that are done by the DOM API","msgtype":"m.text"},"ts":1390847897000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"then your problem is solved","msgtype":"m.text"},"ts":1390847902000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yes, that would certainly do the trick","msgtype":"m.text"},"ts":1390847910000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"a better analogy would be a unix process","msgtype":"m.text"},"ts":1390847940000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if I was programming in JS + magic C++ powers, I would have a different set of invariants. And I realize spec writers *are* programming in that language.","msgtype":"m.text"},"ts":1390847949000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"there's no way that a C program can create a process, short of asking the unix kernel to do so","msgtype":"m.text"},"ts":1390847953000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"But the process will be represented by a normal C object that obeys C invariants","msgtype":"m.text"},"ts":1390847979000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"no? at best it's represented as an integer.","msgtype":"m.text"},"ts":1390847997000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you can't actually get to the object itself.","msgtype":"m.text"},"ts":1390848002000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's only visible to kernel code.","msgtype":"m.text"},"ts":1390848009000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yes yes. an integer that obeys C invariants, is my point","msgtype":"m.text"},"ts":1390848011000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"the only thing visible to C is things that obey C invariants","msgtype":"m.text"},"ts":1390848033000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"that's exactly what I'm saying","msgtype":"m.text"},"ts":1390848039000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"no, the integer you get back is a kernel process handle.","msgtype":"m.text"},"ts":1390848042000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"no other integer is that.","msgtype":"m.text"},"ts":1390848045000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"whereas in the DOM there are many things available to JS that do not obey JS invariants","msgtype":"m.text"},"ts":1390848061000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"C integers have invariants like \"you can add 1 to it and it'll still be useful\"","msgtype":"m.text"},"ts":1390848063000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"*language* invariants","msgtype":"m.text"},"ts":1390848076000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"do that to a PID and you get nothing useful at all.","msgtype":"m.text"},"ts":1390848078000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what do you mean by \"language\"?","msgtype":"m.text"},"ts":1390848084000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"not human semantic \"invariants\"","msgtype":"m.text"},"ts":1390848085000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I mean, in the C language spec","msgtype":"m.text"},"ts":1390848090000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"so if we put the DOM spec inside the JS spec you'd suddenly be ok with it?","msgtype":"m.text"},"ts":1390848110000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yeah, I guess so.","msgtype":"m.text"},"ts":1390848123000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"ok. then imagine there is one huge spec labeled \"The Web\" that contains all these specs.","msgtype":"m.text"},"ts":1390848135000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's what i've been arguing we should do for years.","msgtype":"m.text"},"ts":1390848140000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1390848145000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"it's just that for practical purposes we're editing it in separate docs for now.","msgtype":"m.text"},"ts":1390848151000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i think there's value in stratifying into e.g. language and libraries","msgtype":"m.text"},"ts":1390848166000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"and making sure libraries obey invariants of the language","msgtype":"m.text"},"ts":1390848173000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"i think this requires defining \"language\" and that any such definition would be arbitrary","msgtype":"m.text"},"ts":1390848191000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"traditionally it's pretty clear how to define programming languages as separate from their runtimes or libraries. the success of JS in both node and browser environments seems like an obvious thing to bring up here.","msgtype":"m.text"},"ts":1390848232000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"nah, the line is always very blurry.","msgtype":"m.text"},"ts":1390848281000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"is CORE::* in Perl part of the language, or the library?","msgtype":"m.text"},"ts":1390848296000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"is system.oas part of the Pascal language, or the library?","msgtype":"m.text"},"ts":1390848318000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"system.pas even","msgtype":"m.text"},"ts":1390848322000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"are RegExp and Date part of the JS language, or the library?","msgtype":"m.text"},"ts":1390848342000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"is it bad that you can't create your own RegExp-like or String-like object with its own literals, in JS?","msgtype":"m.text"},"ts":1390848379000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or are they part of the language?","msgtype":"m.text"},"ts":1390848389000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"why is a \"realm\" part of the language, but \"Window\" part of the library?","msgtype":"m.text"},"ts":1390848409000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"fair. i guess you can take an empirical \"greatest common factor\" approach.","msgtype":"m.text"},"ts":1390848469000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"i'll agree to that, so long as you agree that the JS language used in Node and the JS language used in browsers are different JS languages.","msgtype":"m.text"},"ts":1390848525000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"very similar, granted, but different nonetheless.","msgtype":"m.text"},"ts":1390848537000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i don't see that; what's the argument?","msgtype":"m.text"},"ts":1390848596000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"\"this\", in browsers, isn't the global object","msgtype":"m.text"},"ts":1390848620000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's a WindowProxy object.","msgtype":"m.text"},"ts":1390848627000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh fuck :P","msgtype":"m.text"},"ts":1390848632000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"yeah you're right","msgtype":"m.text"},"ts":1390848636000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"also the JS in browsers has the ability to create falsy objects with properties","msgtype":"m.text"},"ts":1390848650000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"those are the two actual modifications to the language spec if i recall","msgtype":"m.text"},"ts":1390848689000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"at which point, the \"greatest common factor\" of the browser version of JS includes most of the DOM, so... :-)","msgtype":"m.text"},"ts":1390848694000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1390848705000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"i think i've been cornered by logic and must admit defeat","msgtype":"m.text"},"ts":1390848725000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Ã€ la fin de l'envoi, je touche.","msgtype":"m.text"},"ts":1390848732000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"btw i think a greatest common factor approach works for multiple implementations, but i don't know how to apply it to, say, perl5. is everything that ships with the basic compiler part of the language? That's a hell of a lot of libraries. I think a better approach may be to look at what you have access to without any explicit imports, which would include Core::* but not e.g. IO::Socket.","msgtype":"m.text"},"ts":1390849198000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but if you do that, then on browsers the DOM still gets included as part of the core.","msgtype":"m.text"},"ts":1390849208000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that definition would exclude the STL from C++, though, which is intuitively nice.","msgtype":"m.text"},"ts":1390849234000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and it would include system.pas but exclude sysutils.pas in ObjectPascal, which also works neatly.","msgtype":"m.text"},"ts":1390849250000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"in C++ it would mean you had thread-local variables as part of the language, but pthreads (needed to make use of them) as part of a library.","msgtype":"m.text"},"ts":1390849324000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it would mean that the kernel was not part of the language, too, which is interesting and in contrast to the JS/DOM pair.","msgtype":"m.text"},"ts":1390849340000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"dglazkov: ping?","msgtype":"m.text"},"ts":1390850067000,"senderName":"mrbkap","senderId":"mrbkap@irc"},
{"content":{"body":"Speaking of which","msgtype":"m.text"},"ts":1390850149000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I haven't bothered dglazkov about tests today","msgtype":"m.text"},"ts":1390850159000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: get in line!","msgtype":"m.text"},"ts":1390850168000,"senderName":"mrbkap","senderId":"mrbkap@irc"},
{"content":{"body":"jsbell, ping!","msgtype":"m.text"},"ts":1390850325000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: ?","msgtype":"m.text"},"ts":1390850338000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell, any reason the TextEncoder/Decoder tests aren't in web-platform-tests?","msgtype":"m.text"},"ts":1390850357000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"just lack of time. (I think I got myself added to the right github groups but never did the work)","msgtype":"m.text"},"ts":1390850427000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"good almost noon, Whatwg!","msgtype":"m.text"},"ts":1390850459000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"jsbell, you don't need any permissions to create a pull request :)","msgtype":"m.text"},"ts":1390850482000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"mrbkap: pong","msgtype":"m.text"},"ts":1390850512000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"dglazkov: hey, I was wondering if you'd seen https://www.w3.org/Bugs/Public/show_bug.cgi?id=24002 and https://www.w3.org/Bugs/Public/show_bug.cgi?id=24003","msgtype":"m.text"},"ts":1390850519000,"senderName":"mrbkap","senderId":"mrbkap@irc"},
{"content":{"body":"mrbkap: I had not. morrita is currently wearing the imports spec editor hat, though","msgtype":"m.text"},"ts":1390850604000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"dglazkov: oh, ok.","msgtype":"m.text"},"ts":1390850610000,"senderName":"mrbkap","senderId":"mrbkap@irc"},
{"content":{"body":"mrbkap: will comment, though","msgtype":"m.text"},"ts":1390850638000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"dglazkov: thanks.","msgtype":"m.text"},"ts":1390850735000,"senderName":"mrbkap","senderId":"mrbkap@irc"},
{"content":{"body":"Ms2ger: I will review moar things on critic too. Is critic-as-preferred-tool expressed/documented anywhere? Because I see peeps doing in-line github reviews, too.","msgtype":"m.text"},"ts":1390850788000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"dglazkov, I find it a lot easier to follow a review on github, but if you don't want to use better tools, you're free to comment on github :)","msgtype":"m.text"},"ts":1390850837000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"s/follow/follow *than*/","msgtype":"m.text"},"ts":1390850851000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"heycam: why do you have this restriction?: If [Exposed] appears on an overloaded operation, then it must appear on all overloads, with the same identifier list.","msgtype":"m.text"},"ts":1390851301000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"heycam: consider e.g. APIs that in workers take a string or an integer, but in Windows take a string, an integer, or a DOM node.","msgtype":"m.text"},"ts":1390851333000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"[heycam is in a meeting discussing https://www.w3.org/Bugs/Public/show_bug.cgi?id=23682]","msgtype":"m.text"},"ts":1390851358000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"ok that's probably a better use of this time, granted","msgtype":"m.text"},"ts":1390851414000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ms2ger: oh yay!","msgtype":"m.text"},"ts":1390851616000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Hixie, so that would have complicated invoking the overload resolution stuff and the checking of valid IDL stuff (things being distinguishable) so I wanted to avoid it unless we really need it","msgtype":"m.text"},"ts":1390854326000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: k","msgtype":"m.text"},"ts":1390859363000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"heycam: i'll get back to you if i find a case","msgtype":"m.text"},"ts":1390859368000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, cool; shouldn't be too hard to add, but more than I wanted to do at the time :)","msgtype":"m.text"},"ts":1390859381000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"ok so here's one possible case","msgtype":"m.text"},"ts":1390859398000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"from xhr:","msgtype":"m.text"},"ts":1390859401000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"  void send(optional (ArrayBufferView or Blob or Document or [EnsureUTF16] DOMString or FormData or URLSearchParams)? data = null);","msgtype":"m.text"},"ts":1390859402000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(man, that's quite the type description)","msgtype":"m.text"},"ts":1390859421000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"isn't it","msgtype":"m.text"},"ts":1390859425000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"i presume that the Document part of this will be Window-only","msgtype":"m.text"},"ts":1390859434000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1390859445000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"I wonder if we could do it automatically","msgtype":"m.text"},"ts":1390859451000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"knowing that Document is window only","msgtype":"m.text"},"ts":1390859455000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"or if that would be too subtle","msgtype":"m.text"},"ts":1390859460000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"well so that's an interesting point","msgtype":"m.text"},"ts":1390859467000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"does it matter what the _arguments_ to a method are?","msgtype":"m.text"},"ts":1390859474000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you can't actually get a Document from that","msgtype":"m.text"},"ts":1390859480000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"true","msgtype":"m.text"},"ts":1390859490000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"and since you can't get a Document at all, it doesn't much matter what the overloads are...","msgtype":"m.text"},"ts":1390859491000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you'll never have a Document","msgtype":"m.text"},"ts":1390859493000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"it might well be ok to just leave that there","msgtype":"m.text"},"ts":1390859513000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"yeah...","msgtype":"m.text"},"ts":1390859519000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I didn't add any IDL author conformance criteria preventing it","msgtype":"m.text"},"ts":1390859541000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"let me try to convert HTML to this and see what happens","msgtype":"m.text"},"ts":1390859561000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1390859574000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"[PrimaryGlobal] implies [Global=Window] ?","msgtype":"m.text"},"ts":1390859593000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1390859598000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1390859602000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well, it implies [Global=TheInterfaceIt'sOn]","msgtype":"m.text"},"ts":1390859610000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"oh ok","msgtype":"m.text"},"ts":1390859625000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1390859627000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"still trying to keep Window the name not special :)","msgtype":"m.text"},"ts":1390859636000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"let me know if anyone ever puts [PrimaryGlobal] on anything else","msgtype":"m.text"},"ts":1390859748000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'd love to see that!","msgtype":"m.text"},"ts":1390859750000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"do i have to expose things like enums or callbacks?","msgtype":"m.text"},"ts":1390859770000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"wow it's surprising how many interfaces html defines that are just on Window","msgtype":"m.text"},"ts":1390859822000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"how about typedefs?","msgtype":"m.text"},"ts":1390859844000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"Not sure where to put it? Why not try Window?\"","msgtype":"m.text"},"ts":1390859845000,"senderName":"jory","senderId":"jory@irc"},
{"content":{"body":"well mostly all the element interfaces","msgtype":"m.text"},"ts":1390859901000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"descendants of Node","msgtype":"m.text"},"ts":1390859903000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i wonder if i should expose all the Event types","msgtype":"m.text"},"ts":1390859938000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"just on general principle","msgtype":"m.text"},"ts":1390859942000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"SimonSapin: 1024 ftw","msgtype":"m.text"},"ts":1390860480000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"should ApplicationWorker be exposed to Window,Worker, or just Window,SharedWorker? it'd be useless in a dedicated worker...","msgtype":"m.text"},"ts":1390860751000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what's an ApplicationWorker?","msgtype":"m.text"},"ts":1390860940000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"uh","msgtype":"m.text"},"ts":1390860967000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ApplicationCache, my bad","msgtype":"m.text"},"ts":1390860972000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i have workers on the mind","msgtype":"m.text"},"ts":1390860975000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"darn it. I got excited :-\\","msgtype":"m.text"},"ts":1390860987000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"\"it's a worker that fills out various applications for you\"","msgtype":"m.text"},"ts":1390861016000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"new ApplicationWorker(\"mastercard\");","msgtype":"m.text"},"ts":1390861043000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1390861049000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"returns a Promise, of course.","msgtype":"m.text"},"ts":1390861076000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"one that never gets fulfilled? :-)","msgtype":"m.text"},"ts":1390861106000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's a asymptotic promise","msgtype":"m.text"},"ts":1390861132000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"heycam|away: is there any point doing [Exposed] on a [NoInterfaceObject] interface?","msgtype":"m.text"},"ts":1390861135000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"heycam|away: or should the [Exposed] maybe instead be on the \"implements\" statement?","msgtype":"m.text"},"ts":1390861153000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"heycam|away: or alternatively, there should be a rule that says that a Global to which an interface isn't exposed can't reference the interface, either via \"implements\" or via reference","msgtype":"m.text"},"ts":1390861826000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"heycam|away: and then that should continue down the chain, so we can check we haven't forgotten to expose something","msgtype":"m.text"},"ts":1390861839000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"heycam|away: i guess the ancestor of the global doesn't need to be told to be exposed, right?","msgtype":"m.text"},"ts":1390863538000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Sorry for slacking on the wiki username requests everyone (Hixie).","msgtype":"m.text"},"ts":1390863694000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"heh, i'm slacking too man","msgtype":"m.text"},"ts":1390863707000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"though, see thread on whatwg@","msgtype":"m.text"},"ts":1390863721000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"where i try to kill the main need :-)","msgtype":"m.text"},"ts":1390863728000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I generally approve that proposal","msgtype":"m.text"},"ts":1390864298000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"GPHemsley: yeah, need to get mike and henri on board though","msgtype":"m.text"},"ts":1390864660000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"mm","msgtype":"m.text"},"ts":1390864688000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"man, there's a lot of \"require\"s in the HTML spec","msgtype":"m.text"},"ts":1390865187000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"268 \"required\"","msgtype":"m.text"},"ts":1390865194000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"auditing that is gonna be a pain","msgtype":"m.text"},"ts":1390865202000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic_: is there a list of use cases for subclassing promises?","msgtype":"m.text"},"ts":1390865806000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"la5t call","msgtype":"m.emote"},"ts":1390865931000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"bah, wrong window","msgtype":"m.text"},"ts":1390865954000,"senderName":"astearns","senderId":"astearns@irc"}
]