[
{"content":{"body":"Do I have to write something special to say that an IDL method takes a TypedArray or a TypedArrayView, or is that implicit in saying TypedArray?","msgtype":"m.text"},"ts":1378252876000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Or maybe there's a typedef living somewhere that means that.","msgtype":"m.text"},"ts":1378252912000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Uint32Array is a \"typed array view\" interface","msgtype":"m.text"},"ts":1378252923000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: Right.  But there's no reason for a method taking a TypedArray to not take a Uint32Array, right?  So is there an easy way to just say \"any of those typed array things\"?","msgtype":"m.text"},"ts":1378253141000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"what is \"TypedArray\"?","msgtype":"m.text"},"ts":1378253163000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"the same as \"any of those typed array things\"?","msgtype":"m.text"},"ts":1378253185000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"sorry, ArrayBuffer","msgtype":"m.text"},"ts":1378253194000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1378253197000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Dunno why my fingers kept typing TypedArray.","msgtype":"m.text"},"ts":1378253200000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"tab: that API makes me sad, such a mess","msgtype":"m.text"},"ts":1378253213000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"what isn't","msgtype":"m.text"},"ts":1378253229000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"an unexcusable mess, as far as the distinction goes","msgtype":"m.text"},"ts":1378253246000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"TabAtkins, I don't think there's an existing typedef for \"an untyped ArrayBuffer or a specific typed array type\"","msgtype":"m.text"},"ts":1378253273000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"if that's what you're after","msgtype":"m.text"},"ts":1378253275000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Yeah, that's what I'm after.","msgtype":"m.text"},"ts":1378253286000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I guess someone needs to do a \"typedef BinaryData (ArrayBuffer or ...);\" somewhere.","msgtype":"m.text"},"ts":1378253306000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Because, again, there's definitely no reason that something taking an ArrayBuffer shouldn't be able to accept a JS Struct, once they finish speccing that stuff.","msgtype":"m.text"},"ts":1378253344000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Frex, you could set up a WOFF file as a somewhat-complex JS binary-data Struct, and you should be able to pass that directly to the FontFace constructor I'm writing.","msgtype":"m.text"},"ts":1378253380000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"all of the views should have just been subclasses of ArrayBuffer ... iirc, the only thing preventing doing that now is some difference in how slice() works, or something like that","msgtype":"m.text"},"ts":1378253411000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: You mean that .slice() works different on an ArrayBuffer versus a view?","msgtype":"m.text"},"ts":1378253478000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":".slice() doesn't seem to be defined on ArrayBufferViews at all - they have .subarray() instead, which is different (a sliced view, rather than a slice of the data).","msgtype":"m.text"},"ts":1378253616000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"earthquake in tokyo just now","msgtype":"m.text"},"ts":1378254120000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"great, now gmail is intentionally ignoring what I tell it to search for too","msgtype":"m.text"},"ts":1378254471000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"apparently all search engines from now on will treat the user like an imbecile, and assume search queries are just vague suggestions","msgtype":"m.text"},"ts":1378254509000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: If you saw the average search query...","msgtype":"m.text"},"ts":1378254661000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"how about: don't treat me like an idiot (and cripple my tools) because other people are idiots","msgtype":"m.text"},"ts":1378254690000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"</rant>","msgtype":"m.text"},"ts":1378254694000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"oh, i think i remember what I was thinking about","msgtype":"m.text"},"ts":1378254812000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"new UInt8Array(buffer) creates a copy, where it should have just created a view over the buffer","msgtype":"m.text"},"ts":1378254847000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"and new UInt8Array(buffer, offset, length) does create a view--which alongside the above, is confusing as hell","msgtype":"m.text"},"ts":1378254969000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"but the mantra of web apis: oh well, too late","msgtype":"m.text"},"ts":1378254989000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(not entirely sure that's what I was thinking about, but no real point in digging around to find it)","msgtype":"m.text"},"ts":1378255048000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"oh, lovely gmail bug","msgtype":"m.text"},"ts":1378255250000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i see an empty editing reply in a thread I'm reading; I discard it (assuming it was a temporary reply, which I often create before merging replies); then I go \"hold on\", hit undo discard, and surprise: there was a whole reply in there","msgtype":"m.text"},"ts":1378255297000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: Aw jeez, that's a really dumb behavior.","msgtype":"m.text"},"ts":1378255310000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Like, crazy stupid.","msgtype":"m.text"},"ts":1378255314000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"the arraybuffer thing or the gmail thing? (heh)","msgtype":"m.text"},"ts":1378255331000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(answer: yes)","msgtype":"m.text"},"ts":1378255335000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"The arraybuffer thing.","msgtype":"m.text"},"ts":1378255337000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Am I missing something, or is http://dom.spec.whatwg.org/#error-names-0 missing TypeError and RangeError?","msgtype":"m.text"},"ts":1378255497000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"two simple changes would have simplified typed arrays to a stupid degree: get rid of ArrayBuffer entirely (return Uint8Array from APIs, don't have a typeless class at all) and fix the ctor problem (to make it easy to cast Uint8Array to whatever you need)","msgtype":"m.text"},"ts":1378255763000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i think i suggested that and the response was something like \"some Java API did that and it caused performance problems so it's a bad idea\" o_O","msgtype":"m.text"},"ts":1378255791000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"That was indeed the response.  I didn't understand it well enough to really figure out what the issue was.","msgtype":"m.text"},"ts":1378255907000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"java and javascript have so little in common, all I can say is o_O","msgtype":"m.text"},"ts":1378255952000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Or no, that was about endianness.","msgtype":"m.text"},"ts":1378255955000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(wish I could remember where that discussion was, if only to verify my recollection, but I have no idea)","msgtype":"m.text"},"ts":1378255970000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"It wasn't a syntax issue, so Java vs Javascript is fairly irrelevant to the point.","msgtype":"m.text"},"ts":1378255971000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"err, java and javascript's differences are much deeper than syntax","msgtype":"m.text"},"ts":1378255986000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"probably the only thing they have in common is GC","msgtype":"m.text"},"ts":1378256000000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"None of which are particularly relevant to the treatment of binary data.","msgtype":"m.text"},"ts":1378256014000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"if somebody saw performance issues with returning a uint8_t* and then casting it to uint32_t* in Java, that doesn't inform JS API development at all","msgtype":"m.text"},"ts":1378256075000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"It was something about processors and memory pipelines or something like that.  Something pretty language-agnostic.","msgtype":"m.text"},"ts":1378256127000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"maybe it was a different conversation, since in the one I had I don't recall any technical followups","msgtype":"m.text"},"ts":1378256153000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Doesn't mean it was validly generalizable - it may have been something more API-specific, or dated.  But it wasn't *language*-specific.","msgtype":"m.text"},"ts":1378256154000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Kenneth Russell was the one talking about it.","msgtype":"m.text"},"ts":1378256167000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And Gregg Tavares.","msgtype":"m.text"},"ts":1378256173000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"nothing in my experience would explain a processor-level performance difference between \"return an object that accesses a void* as 8-bit unsigned ints, then create an object that accesses the same void* as 32-bit unsigned ints\" and \"return an opaque object holding a buffer, then create an object that accesses the buffer as 32-bit unsigned ints\"","msgtype":"m.text"},"ts":1378256281000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"The only Java-based performance argument I recall was one about endianness.  I don't really remember one about ArrayBuffer vs ArrayBufferView.","msgtype":"m.text"},"ts":1378256331000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If I pass a DOMString representing a url to a function, does it make sense to parse the url and reject it if there's a parse error?","msgtype":"m.text"},"ts":1378256356000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Or should I be forgiving and just work with whatever the URL parser spits out?","msgtype":"m.text"},"ts":1378256368000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i think i remember that conversation (but it's a different one, or at least a different subargument)","msgtype":"m.text"},"ts":1378256368000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Ah, then I dunno what we're talking about. ^_^","msgtype":"m.text"},"ts":1378256379000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"where we were saying \"having UInt32Array be the platform endianness is interop death and don't do it\"","msgtype":"m.text"},"ts":1378256403000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"TabAtkins: copy whatever new WebSocket(url) does?","msgtype":"m.text"},"ts":1378256534000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(was going to say \"xhr\", but thought better of that)","msgtype":"m.text"},"ts":1378256545000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Good point.","msgtype":"m.text"},"ts":1378256548000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Throw a SyntaxError and abort.  Can do.","msgtype":"m.text"},"ts":1378256615000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"now there's somebody on www-dom who's so important he's sending all his mails in Gigantic Red","msgtype":"m.text"},"ts":1378259121000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: How do I deal with a response once it's been returned by Fetch?","msgtype":"m.text"},"ts":1378259332000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Just check if it returned a code of 200 and a non-null body?","msgtype":"m.text"},"ts":1378259344000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(I presume redirects are automatically handled for me and I wont' see them, unless I've set the manual redirects flag.)","msgtype":"m.text"},"ts":1378259518000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: If it helps, I'm doing a synchronous fetch, because I'm already in an async portion of the algorithm, and it seemed like that was easiest.","msgtype":"m.text"},"ts":1378260249000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"also cool google joins the ranks of \"you gave us your email address, and we've decided it's okay to use it for ads\"","msgtype":"m.text"},"ts":1378267007000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"\"Your Google Wallet has exciting new updates\", as if I've ever used \"google wallet\" (much less opted into ads)","msgtype":"m.text"},"ts":1378267027000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: You should use Wallet - it's a lot more convenient than PayPay for sending people money.","msgtype":"m.text"},"ts":1378276919000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: so yes, don't do normalization in CSS. Just say people ought to normalize, but don't require it from implementations. Deal in 16-bit code units as the whole thing bottoms out to JavaScript in the end...","msgtype":"m.text"},"ts":1378277000000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: TypeError and RangeError are defined by JavaScript, not DOM (we need to revise DOMException in some way still, haven't figured out how)","msgtype":"m.text"},"ts":1378277027000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ah, the error thing is confusing.  Perhaps a note in the Event Names section is warranted?  I'll file a bug.","msgtype":"m.text"},"ts":1378277057000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: so there's a bug on moving the whole error thing over to Web IDL already","msgtype":"m.text"},"ts":1378277078000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah, then I'll just leave it alone I suppose.","msgtype":"m.text"},"ts":1378277102000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: as for something accepting bytes, just use ArrayBuffer for now and we'll think of something better once ES6 has assimilated the whole bunch","msgtype":"m.text"},"ts":1378277130000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I just did a typedef for (ArrayBuffer or ArrayBufferView).","msgtype":"m.text"},"ts":1378277153000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: yeah I guess, one technical problem with that is that ArrayBuffer/ArrayBufferView are no longer IDL-defined","msgtype":"m.text"},"ts":1378277250000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Meh.","msgtype":"m.text"},"ts":1378277263000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I guess I should file a bug on IDL for that too, though I suspect heycam might wanna wait for ES6 with that...","msgtype":"m.text"},"ts":1378277506000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"are they going in to the ES spec in the ES6 timeframe?","msgtype":"m.text"},"ts":1378277535000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"(not that I know what that timeframe is)","msgtype":"m.text"},"ts":1378277545000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"annevk: So what about my last question, regarding what to do with a response returned by fetch?","msgtype":"m.text"},"ts":1378278001000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"heycam: yeah, timeframe is end-of-year plus a year to fix bugs I think","msgtype":"m.text"},"ts":1378278026000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: we generally don't look at the response code at all, except for redirects which Fetch handles","msgtype":"m.text"},"ts":1378278038000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1378278064000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"TabAtkins: so you either get something back which you decode or you get a network error","msgtype":"m.text"},"ts":1378278066000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Okay, so I just trust that if I got a response rather than an error, I can read the body for the data?","msgtype":"m.text"},"ts":1378278068000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ooh, I have to decode it now?","msgtype":"m.text"},"ts":1378278080000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: that's how <img>, <script>, et al work, yes","msgtype":"m.text"},"ts":1378278081000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: dunno, depends on what you're fetching :)","msgtype":"m.text"},"ts":1378278096000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh, right, just font data, so no text decoding necessary.","msgtype":"m.text"},"ts":1378278108000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Okay.","msgtype":"m.text"},"ts":1378278110000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"This would be useful information in Fetch. ^_^","msgtype":"m.text"},"ts":1378278117000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: just font decoding then :)","msgtype":"m.text"},"ts":1378278122000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: file a bug?","msgtype":"m.text"},"ts":1378278141000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is still at the stage where he tries to make Fetch work for the entire platform","msgtype":"m.emote"},"ts":1378278165000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heycam: they're in http://people.mozilla.org/~jorendorff/es6-draft.html fwiw","msgtype":"m.text"},"ts":1378278390000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: I guess the other thing is that I hope example usage needs go away once more specs start using the revised building blocks; you just happen to be an early adaopter... :/","msgtype":"m.text"},"ts":1378285002000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yes. Tests are BSD/W3C dual licensed","msgtype":"m.text"},"ts":1378287204000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"i.e. they are BSD licensed but you don't get to call it the \"W3C testsuite\"","msgtype":"m.text"},"ts":1378287228000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"They cannot be more liberally licensed I guess?","msgtype":"m.text"},"ts":1378287234000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Not really","msgtype":"m.text"},"ts":1378287247000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I mean that's pretty reasonable I think","msgtype":"m.text"},"ts":1378287258000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(more liberal than any browser engine, for example)","msgtype":"m.text"},"ts":1378287282000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"TabAtkins: WebSocket throws if the url is invalid","msgtype":"m.text"},"ts":1378288333000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"TabAtkins: but there's probably also precedent for silent fail","msgtype":"m.text"},"ts":1378288354000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Like <a>","msgtype":"m.text"},"ts":1378288377000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And setting <a>.href","msgtype":"m.text"},"ts":1378288387000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Why has nobody noticed that http://encoding.spec.whatwg.org/#dom-textencoder-encode does not throw the exception it should?","msgtype":"m.text"},"ts":1378289297000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That's kind of disturbing...","msgtype":"m.text"},"ts":1378289305000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: probably because no one has read it?","msgtype":"m.text"},"ts":1378289418000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"Oh wait, only utf-8 / utf-16. Doh.","msgtype":"m.text"},"ts":1378289437000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"No people have read that and implemented it. I just assumed it had to work for arbitrary encodings which is not true.","msgtype":"m.text"},"ts":1378289455000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We might want to add that at some point I suppose.","msgtype":"m.text"},"ts":1378289469000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wonders where SimonSapin is","msgtype":"m.emote"},"ts":1378290193000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Behind you!","msgtype":"m.text"},"ts":1378290228000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger, typically that'd be very close, but today...","msgtype":"m.text"},"ts":1378290495000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I dunno, he's French, maybe on vacation? :):","msgtype":"m.text"},"ts":1378290522000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"So both the utf-8 and utf-16 encoders deal with lone surrogate input... Does that make sense?","msgtype":"m.text"},"ts":1378290631000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That also contradicts my earlier point about them always being safe...","msgtype":"m.text"},"ts":1378290684000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: draw a cone out from your back across the surface of the earth, and he is contained in the cone. At least if you allow it to wrap around the surface","msgtype":"m.text"},"ts":1378290718000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"So I guess he is behind you?","msgtype":"m.text"},"ts":1378290729000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"s = new TextEncoder(\"utf-16le\"); w(s.encode(\"\\ud800\"))","msgtype":"m.text"},"ts":1378290771000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Gives 0, 216","msgtype":"m.text"},"ts":1378290777000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: should it throw?","msgtype":"m.text"},"ts":1378290809000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: either that, or before it even reaches the encoder it should've been replaced with FFFD","msgtype":"m.text"},"ts":1378290877000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think currently the latter is what's required through IDL...","msgtype":"m.text"},"ts":1378290906000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm fixing https://www.w3.org/Bugs/Public/show_bug.cgi?id=23103 so I ran into this","msgtype":"m.text"},"ts":1378290942000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Gecko does the FFFD treatment for utf-8","msgtype":"m.text"},"ts":1378291099000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"uh. JS strings biting us again","msgtype":"m.text"},"ts":1378291105000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"The more I run into it, the more I think we should just embrace it and define everything in terms of 16-bit code units. Although that'd be a pain for some encodings...","msgtype":"m.text"},"ts":1378291177000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Like rewriting gbk to work on 16-bit code units is way less nice.","msgtype":"m.text"},"ts":1378291198000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And by everything I mean URL, Encoding, HTML, CSS, ...","msgtype":"m.text"},"ts":1378291228000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wonders why Promises are so hip","msgtype":"m.emote"},"ts":1378291726000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Because they are new and unproven and therefore we don't fully understand all the problems with them yet","msgtype":"m.text"},"ts":1378291783000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"zcorpan, jgraham: do you know if there's tests for MessageChannel and stuff somewhere?","msgtype":"m.text"},"ts":1378291808000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Or, to be less synical, because all the async primitives we have tried in in so far have sucked, so trying a new approach that has theoretical benefits and some positive experience in the js framework community seems like a good idea","msgtype":"m.text"},"ts":1378291888000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"*cynical","msgtype":"m.text"},"ts":1378291893000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Ms2ger: https://github.com/w3c/web-platform-tests/tree/master/webmessaging/message-channels","msgtype":"m.text"},"ts":1378291987000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan, thanks","msgtype":"m.text"},"ts":1378292078000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: code points everywhere","msgtype":"m.text"},"ts":1378294042000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: that might mean encoders that fail, depending on how we define them","msgtype":"m.text"},"ts":1378294092000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: do \"16bits units everywhere\" fix that? You can still get lone surrogates","msgtype":"m.text"},"ts":1378294371000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"is whatwg.org supposed to support https?","msgtype":"m.text"},"ts":1378294387000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"<link href=\"//www.whatwg.org/style/specification\" rel=\"stylesheet\"> times out from https://rawgithub.com","msgtype":"m.text"},"ts":1378294423000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"I don't think it is","msgtype":"m.text"},"ts":1378294443000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"HTML uses href=\"http://www.whatwg.org/style/specification\"","msgtype":"m.text"},"ts":1378294522000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Apparently the Google Authenticator update is no good","msgtype":"m.text"},"ts":1378295200000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"SimonSapin: yeah, but then we just embrace lone surrogates, and only catch them when absolutely necessary","msgtype":"m.text"},"ts":1378295329000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: which is almost never","msgtype":"m.text"},"ts":1378295345000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: same as with code points?","msgtype":"m.text"},"ts":1378295346000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: code points doesn't really exist","msgtype":"m.text"},"ts":1378295366000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: so that seems kinda pointless as a concept","msgtype":"m.text"},"ts":1378295375000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(In case you were wondering, that's false starting with ES6. It'll expose methods around String objects that deal with code points, not 16-bit code units, or Unicode scalar values. That's a first though I think.)","msgtype":"m.text"},"ts":1378301221000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I went through the Encoding changes. Looks good.","msgtype":"m.text"},"ts":1378301972000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Thanks. I guess next would be figuring out if I want that abstract stream concept...","msgtype":"m.text"},"ts":1378302007000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Or maybe look into the various issues around encodings...","msgtype":"m.text"},"ts":1378302039000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"W3C is updating its Bugzilla instance tomorrow! \\o/","msgtype":"m.text"},"ts":1378303265000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"W3C is breaking bugzilla tomorrow!","msgtype":"m.text"},"ts":1378303291000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1378303296000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"Where is Mozilla's JS engine source located?","msgtype":"m.text"},"ts":1378303829000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Preferably web-viewable","msgtype":"m.text"},"ts":1378303841000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"https://dxr.mozilla.org","msgtype":"m.text"},"ts":1378303981000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"http://dxr.mozilla.org/mozilla-central/source/js specifically","msgtype":"m.text"},"ts":1378304014000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Awesome, thanks","msgtype":"m.text"},"ts":1378304026000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"jgraham: what's the difference with http://mxr.mozilla.org/mozilla-central/source/js/ ?","msgtype":"m.text"},"ts":1378304059000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"dxr is shinier","msgtype":"m.text"},"ts":1378304083000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"It has a bunch of fancy features based on static analysis of the code","msgtype":"m.text"},"ts":1378304100000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But only works on m-c and one revision","msgtype":"m.text"},"ts":1378304118000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1378304118000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"But it's not live it seems","msgtype":"m.text"},"ts":1378304142000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"live?","msgtype":"m.text"},"ts":1378304164000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Right, it probably only gets updated sometimes","msgtype":"m.text"},"ts":1378304215000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Because you need to do all the static analysis","msgtype":"m.text"},"ts":1378304224000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I'm not sure how often, but the files seem to be dated 3rd September, so I guess daily?","msgtype":"m.text"},"ts":1378304301000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Mxr isn't live either","msgtype":"m.text"},"ts":1378305933000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk, r? https://critic.hoppipolla.co.uk/r/294 :)","msgtype":"m.text"},"ts":1378306297000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"long test is long","msgtype":"m.text"},"ts":1378306317000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: nothing I use supports it","msgtype":"m.text"},"ts":1378306549000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"That's a long test?","msgtype":"m.text"},"ts":1378306638000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Have you seen jgraham's loading tests?","msgtype":"m.text"},"ts":1378306698000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Well they're just silly","msgtype":"m.text"},"ts":1378306751000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Tests that require navigation to three different files","msgtype":"m.text"},"ts":1378306765000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I started reviewing, but...","msgtype":"m.text"},"ts":1378306795000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Yeah :|","msgtype":"m.text"},"ts":1378306826000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: I know I know","msgtype":"m.text"},"ts":1378306834000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I would love to say \"they were reviewed internally at Opera and are fine\"","msgtype":"m.text"},"ts":1378306841000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But that just isn't true","msgtype":"m.text"},"ts":1378306847000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Well","msgtype":"m.text"},"ts":1378306855000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"The result of that would probably be people filing bugs and bz having to review them","msgtype":"m.text"},"ts":1378306870000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"gsnedders probably reviewed them a bit, but they are quite likely to be buggy, and the spec was unstable and the implementation was never finished","msgtype":"m.text"},"ts":1378306887000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"So..","msgtype":"m.text"},"ts":1378306894000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: ES6 codePointAt and fromCodePoint are the only things that \"expose\" code points to the platform … but are unicode scalar values exposed ?","msgtype":"m.text"},"ts":1378306927000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Yes, utf-8","msgtype":"m.text"},"ts":1378306939000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if exposed means from JS","msgtype":"m.text"},"ts":1378306944000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"No it just means exposed","msgtype":"m.text"},"ts":1378306952000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"data:text/html,<script>document.write('\\uD800')</script> looks like a missing glyph in Gecko. Isn’t that the text subsystem working on code points?","msgtype":"m.text"},"ts":1378307089000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"(missing glyph, as opposed to replacement character)","msgtype":"m.text"},"ts":1378307101000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Ms2ger: So I don't mind bz reviewing them :)","msgtype":"m.text"},"ts":1378307102000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham, well, I'm not sure if I'd prioritize it over his other work ;)","msgtype":"m.text"},"ts":1378307130000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Maybe I should enlist the Servo folks","msgtype":"m.text"},"ts":1378307137000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Yeah, well the servo people are the ones that should benefit the most from this","msgtype":"m.text"},"ts":1378307190000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But afaict they are so far away from having a working DOM that it is too early to do any of this kind of testing","msgtype":"m.text"},"ts":1378307216000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Maybe I should work out how to build servo","msgtype":"m.text"},"ts":1378307224000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I mentioned getting testharness.js to work to jdm and he seemed positive","msgtype":"m.text"},"ts":1378307316000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"SimonSapin: doesn't seem interoperable","msgtype":"m.text"},"ts":1378307327000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"chrome just seems to just stop at lone surrogate and drop the rest of the string: data:text/html,<script>document.write('ab\\uD800cd')</script>","msgtype":"m.text"},"ts":1378307384000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"well, worse than that: data:text/html,<script>document.write('ab\\uD800cd')</script>ef","msgtype":"m.text"},"ts":1378307428000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"wonders how to update his tree again","msgtype":"m.emote"},"ts":1378307438000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: SimonSapin: there's a bit more code point exposure in ES6 than just those methods, e.g. http://www.slideshare.net/domenicdenicola/es6-is-nigh/41","msgtype":"m.text"},"ts":1378307464000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: I mentioned the iterator in my email I think","msgtype":"m.text"},"ts":1378307536000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: it's not in the draft though","msgtype":"m.text"},"ts":1378307541000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: anyway, it could do the same","msgtype":"m.text"},"ts":1378307551000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ah right, sorry missed that","msgtype":"m.text"},"ts":1378307559000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I believe the ES6 conceptual model was supposed to be 21 bit code points, with \"legacy\" string[i] and string.charCodeAt(i) exposing 16-bit code units.","msgtype":"m.text"},"ts":1378307624000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Yeah, it's pretty clear what they went for, I think it'd be better to align with Unicode's actual data model if possible (which means not exposing surrogates if we don't have to)","msgtype":"m.text"},"ts":1378307690000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't know very much about this so I'm not sure what they're doing wrong, heh.","msgtype":"m.text"},"ts":1378307747000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"well, if you have UTF-16 as your underlying storage, random access to indexed codepoints is hard, heh","msgtype":"m.text"},"ts":1378308385000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"If you have anything but utf-32? :)","msgtype":"m.text"},"ts":1378308457000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"The i in s.codePointAt(i) counts 16 bit units, not code points","msgtype":"m.text"},"ts":1378308459000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: sure, replying to \"supposed to be 21-bit codepoints\"","msgtype":"m.text"},"ts":1378308507000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Ms2ger: utf-32 is probably the right storage format","msgtype":"m.text"},"ts":1378308546000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"SimonSapin: I don't believe that's true, I believe it's supposed to count 21-bit code points.","msgtype":"m.text"},"ts":1378308566000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"zewt: Arguably that depends on what you think is important","msgtype":"m.text"},"ts":1378308581000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"If indexed access isn't important then UTF-32 is just a waste of memory in most cases","msgtype":"m.text"},"ts":1378308603000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Well, unless your system is mainly storing Linear-B I guess","msgtype":"m.text"},"ts":1378308625000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"indexed access isn't particularly important, as long as you have an API model that works with it ... JS developers are probably too programmed for it","msgtype":"m.text"},"ts":1378308639000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Domenic_: from the draft: Let first be the code unit value of the element at index position in the String S.","msgtype":"m.text"},"ts":1378308680000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"ie. first = S[position]","msgtype":"m.text"},"ts":1378308698000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: no, indexed positions are code points","msgtype":"m.text"},"ts":1378308722000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"SimonSapin: []s are not, but those are different from the spec term \"index position\"","msgtype":"m.text"},"ts":1378308797000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Uh","msgtype":"m.text"},"ts":1378308813000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"That's one confusing spec then","msgtype":"m.text"},"ts":1378308820000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"SimonSapin: compare codePointAt and charAt (which uses \"the code unit at position position\")","msgtype":"m.text"},"ts":1378308833000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"So is this wrong? https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt#Example_4.3A_ES_6_codePointAt_shim","msgtype":"m.text"},"ts":1378308890000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"exposing anything about codepoint indexes on top of utf-16 would be pretty ugly, though you can probably optimize the most common cases to avoid n^2 (forward and backward scanning)","msgtype":"m.text"},"ts":1378308898000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Domenic_: where is index position defined?","msgtype":"m.text"},"ts":1378308934000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-7.8.6","msgtype":"m.text"},"ts":1378308947000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"there are broken links pointing to 8.4, but that is outdated. (Wasn't keeping references up to date an actual feature of Word? :-S)","msgtype":"m.text"},"ts":1378308982000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: searching for \"index position\" doesn't get there...","msgtype":"m.text"},"ts":1378309030000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: right, but SV is an (indexed) sequence of CVs, which are defined there.","msgtype":"m.text"},"ts":1378309063000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"(though I guess caching could run into catastrophic performance dropoffs; eg. if only a single position is cached, and a parser is scanning linearly from two different places, performance would mysteriously fall through the floor)","msgtype":"m.text"},"ts":1378309125000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I’m confused","msgtype":"m.text"},"ts":1378309143000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Domenic_: CV only seems to talk about code unit sequences, not code point sequences","msgtype":"m.text"},"ts":1378309162000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I don't think so... e.g. the CV of \\u{six digits} is given as a single number","msgtype":"m.text"},"ts":1378309184000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: no, it says to unwrap it using utf-16 into two code units","msgtype":"m.text"},"ts":1378309202000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: if it's higher than U+FFFF anyway","msgtype":"m.text"},"ts":1378309213000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah yeah, you're right","msgtype":"m.text"},"ts":1378309263000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"hrm","msgtype":"m.text"},"ts":1378309264000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: the CV stuff is kinda confused","msgtype":"m.text"},"ts":1378309268000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: it suddenly starts talking about characters now and then rather than empty code unit sequence","msgtype":"m.text"},"ts":1378309281000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wonder if I have the intent right though. Notably codePointAt(i) and charAt(i) say very different things about what to do with `i`.","msgtype":"m.text"},"ts":1378309333000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"maybe :)","msgtype":"m.text"},"ts":1378309381000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it'd make codePointAt quite a bit slower","msgtype":"m.text"},"ts":1378309407000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://wiki.ecmascript.org/lib/exe/fetch.php?id=harmony%3Aunicode_supplementary_characters&cache=cache&media=harmony:supplementary_characters_for_ecmascript.pdf","msgtype":"m.text"},"ts":1378309490000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"The way TC39 operates reminds me of OMA back in 2005 when I started at Opera...","msgtype":"m.text"},"ts":1378309528000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's 2013, PDFs you have to download to read a proposal? Come on...","msgtype":"m.text"},"ts":1378309544000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"my hatred of PDFs has decreased significantly since pdfjs got into Firefox stable :)","msgtype":"m.text"},"ts":1378309571000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"pdf is still terrible, even in chrome's viewer","msgtype":"m.text"},"ts":1378309587000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"spent like a minute copying a couple pages of a list the other day because it wouldn't let me extend a selection (in osx)","msgtype":"m.text"},"ts":1378309623000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Domenic_: codePointAt is implemented in terms of charCodeAt there","msgtype":"m.text"},"ts":1378309630000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: passing index directly to charCodeAt that is to find the first surrogate (if any)","msgtype":"m.text"},"ts":1378309663000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: sure, but this is not served in a way that opens in pdf.js automatically","msgtype":"m.text"},"ts":1378309686000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, looks like I was just wrong, darn. codePointAt seems not very useful.","msgtype":"m.text"},"ts":1378309691000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: interesting, it opened in pdfjs automatically for me.","msgtype":"m.text"},"ts":1378309705000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: the language differences are kinda broken though","msgtype":"m.text"},"ts":1378309721000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: agreed, if they are supposed to be using the same indexing paradigm, the current spec does not make that clear.","msgtype":"m.text"},"ts":1378309757000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"could be maybe sort-of useful if it returned -1 for high surrogates, so you could say for(i=0;i<n;++i) { codepoint = s.codePointAt(n); if(codepoint == -1) continue; /* skip */ log(codepoint); }","msgtype":"m.text"},"ts":1378309819000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"It might be better to just have the iterator and maybe String.fromUnicode(...) or some such","msgtype":"m.text"},"ts":1378309827000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Does String.from() exist?","msgtype":"m.text"},"ts":1378309833000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1378309838000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"so you'd just skip over high surrogates (that you already dealt with at n-1)","msgtype":"m.text"},"ts":1378309845000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Why is not called String.from()?","msgtype":"m.text"},"ts":1378309855000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(er, probably flip high/low)","msgtype":"m.text"},"ts":1378309860000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i use http://people.mozilla.org/~jorendorff/es6-draft.html as the js spec, but i don't know if there's proposals in html format","msgtype":"m.text"},"ts":1378309865000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: same and there's the wiki pages...","msgtype":"m.text"},"ts":1378309886000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: what would you want as String.from()? Your proposed String.fromUnicode()?","msgtype":"m.text"},"ts":1378309904000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Hixie_: last meeting there was talk about putting it all in GH but inertia I guess","msgtype":"m.text"},"ts":1378309907000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: yeah, sequence of 21-bit code points, but with surrogates banned (so, Unicode scalar values)","msgtype":"m.text"},"ts":1378309940000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And you're not allowed to look at the wiki, because you have to smell that they're out of date, why are you even looking there, stupid","msgtype":"m.text"},"ts":1378309944000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: like... String.from(65, 1234, 23341)?","msgtype":"m.text"},"ts":1378309989000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"They could use some project management indeed. Outward communication is really poor. You kinda have to attend meetings to understand what's going on and how stuff works, which I'm doing atm...","msgtype":"m.text"},"ts":1378310009000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: yeah","msgtype":"m.text"},"ts":1378310010000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: just a better String.fromCharCode()","msgtype":"m.text"},"ts":1378310026000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That's called String.fromCodePoint() now :)","msgtype":"m.text"},"ts":1378310040000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: I know, but that one outputs lone surrogates","msgtype":"m.text"},"ts":1378310055000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: and I thought we preferred shorter names?","msgtype":"m.text"},"ts":1378310061000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well, that or put everything that's being implemented into the spec","msgtype":"m.text"},"ts":1378310081000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: they are in on that plan now I think","msgtype":"m.text"},"ts":1378310114000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"What other plan would there be O_o","msgtype":"m.text"},"ts":1378310145000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"But maybe also not have the spec in a word document that's only released once in a blue moon","msgtype":"m.text"},"ts":1378310168000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: so if something is missing we could file a bug... although BE does still value underdefining features","msgtype":"m.text"},"ts":1378310183000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: well they refused to document a bunch of stuff until we made it clear via e.g. http://javascript.spec.whatwg.org/ that it's actually implemented","msgtype":"m.text"},"ts":1378310225000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ah right that stuff.","msgtype":"m.text"},"ts":1378310235000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: I'm not sure if '<!--'-style comments are now?","msgtype":"m.text"},"ts":1378310240000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: there's a TODO for those in annex B I believe","msgtype":"m.text"},"ts":1378310256000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"they're gonna patch the core grammar in an annex? maha","msgtype":"m.text"},"ts":1378310269000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ideally Node.js would not need <!-- comments","msgtype":"m.text"},"ts":1378310306000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I don't really see what's ideal about having an additional code path in your ES engine about something so minor","msgtype":"m.text"},"ts":1378310329000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, sounds like css21","msgtype":"m.text"},"ts":1378310334000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"especially if it means more transition cost when converting JS files","msgtype":"m.text"},"ts":1378310343000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: Doesn't node.js get wahtever V8 provides?","msgtype":"m.text"},"ts":1378310455000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Which I assume includes <!--","msgtype":"m.text"},"ts":1378310464000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: yeah. you can do HTML comments in Node at the moment.","msgtype":"m.text"},"ts":1378310472000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Well","msgtype":"m.text"},"ts":1378310512000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ideally node doesn't use JS ;)","msgtype":"m.text"},"ts":1378310518000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"jgraham, Ms2ger: I vetted them for release, not so much following the spec. And given I know they never matched the spec…","msgtype":"m.text"},"ts":1378311004000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"hah, matjas ^^","msgtype":"m.text"},"ts":1378311047000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1378311086000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"still not as bad as php recognizing <script>","msgtype":"m.text"},"ts":1378311150000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"I hope Norbert has rationale for the surrogate thing because it sure seems like Brendan didn't think of it","msgtype":"m.text"},"ts":1378311838000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Allen mentioned use cases like strings containing “binary data” before","msgtype":"m.text"},"ts":1378311949000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"at one point he wanted to allow up to 8 digits for the new `\\u{xx}` escapes for that reason","msgtype":"m.text"},"ts":1378311965000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"maybe this surrogates thing is similar?","msgtype":"m.text"},"ts":1378312006000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"String containing binary data?","msgtype":"m.text"},"ts":1378312025000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"well, you know","msgtype":"m.text"},"ts":1378312031000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"Those aren't strings…","msgtype":"m.text"},"ts":1378312032000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Having a single data type for strings and random binary data is an oft-repeated mistake in language design","msgtype":"m.text"},"ts":1378312064000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"e.g. `foo © bar` becomes `\\x66\\x6F\\x6F\\x20\\xC2\\xA9\\x20\\x62\\x61\\x72` if you represent it as UTF-8","msgtype":"m.text"},"ts":1378312066000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"if you dont wanna use an array of bytes for some reason, i guess","msgtype":"m.text"},"ts":1378312088000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"matjas: I'd like to see why","msgtype":"m.text"},"ts":1378312101000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, i was glad when they decided only to allow 6 digits in \\u{xx}","msgtype":"m.text"},"ts":1378312113000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"in any event, climbing time","msgtype":"m.text"},"ts":1378312114000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://mail.mozilla.org/pipermail/es-discuss/2012-March/021919.html: “Exclude 0xD800-0xDFFF?  No.”","msgtype":"m.text"},"ts":1378312209000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"Why would you *possibly* want 8 character in \\u?","msgtype":"m.text"},"ts":1378314071000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Unicode is only 21 bits wide, which is 6 hex chars.  utf-8 is 4 bytes wide, or 8 hex chars, but \\u doesn't specify utf-8, it specifies unicode code points (or scalars, whatever).","msgtype":"m.text"},"ts":1378314151000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I mean, maybe plan for the future and make sure the syntax can be expanded up to 8, just in case we ever expand unicode up to 32 bits, but that's it.  (And the \\u{} syntax is okay with that, so we're good.)","msgtype":"m.text"},"ts":1378314238000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"A lot of languages use \\U00000000, because they go back to UCS-4 days.","msgtype":"m.text"},"ts":1378314307000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"TabAtkins: YOu might, if you wanted the string type to be used for both strings and arrays of binary data. Then \\u{} notation would provide a convenient way of specifying 32bits of data at a time","msgtype":"m.text"},"ts":1378314321000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(you would be wrong to want that, but lots of languages have historically worked like that so you would be in good company)","msgtype":"m.text"},"ts":1378314388000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: But... it *doesn't* specify 32 bits at a time.  Unless you have some magic switch in your encoder that says that codepoints greater than u+10ffff get encoded as raw 32-bit ints.","msgtype":"m.text"},"ts":1378314391000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Well you could have that","msgtype":"m.text"},"ts":1378314422000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Although I guess it still doesn't really work","msgtype":"m.text"},"ts":1378314433000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"So pass?","msgtype":"m.text"},"ts":1378314441000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Right.","msgtype":"m.text"},"ts":1378314473000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It sounds like the sort of thing you'd do only if you were certain that it would get encoded in ucs-4.","msgtype":"m.text"},"ts":1378314494000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"good morning, Whatwg!","msgtype":"m.text"},"ts":1378318015000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"marcosc: There an agenda posted for the ricg meetup next week?","msgtype":"m.text"},"ts":1378318625000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So there's no event for <details> opening and closing. My guess is you're supposed to use \"click\" on the <summary>?","msgtype":"m.text"},"ts":1378318925000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Hixie_ was just saying a few weeks ago that he was surprised nobody had ever requested a <details> event.  Yeah, for now you just use \"click\" on <summary>.","msgtype":"m.text"},"ts":1378319206000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"thanks! converting my boss to using semantic HTML :P","msgtype":"m.text"},"ts":1378319336000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: if you have an opinion on whether we should have onopen/onclose or just one event, comment on https://www.w3.org/Bugs/Public/show_bug.cgi?id=22942","msgtype":"m.text"},"ts":1378319479000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: hmm. I don't think I have a strong enough opinion. My opinion is more along the lines of \"damn browser vendors, hurry up and implement `Object.observe` already.\"","msgtype":"m.text"},"ts":1378319522000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"oh well if you just want that you can use a mutation observer on the open=\"\" attribute","msgtype":"m.text"},"ts":1378319552000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i get so confused on these boolean attributes, whether they work or not. i guess it's just [checked] vs. defaultChecked vs. checked that threw me off but the confusion persists.","msgtype":"m.text"},"ts":1378319621000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"TabAtkins: only an initial one - still waiting for confirmation from speakers. https://github.com/ResponsiveImagesCG/paris-meetup#proposed-agenda","msgtype":"m.text"},"ts":1378320171000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"marcosc: Good enough for me, I just had my boss request an agenda.","msgtype":"m.text"},"ts":1378320208000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie_: How should I hook into the Structured Clone algorithm to define a new type that can be cloned?","msgtype":"m.text"},"ts":1378321117000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I need to define that FontFace objects can be cloned to Workers (creating a fresh FontFace with the same information on the other end).","msgtype":"m.text"},"ts":1378321147000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"See the typed array spec","msgtype":"m.text"},"ts":1378321489000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"TabAtkins: e-mail me and i'll add it, probably","msgtype":"m.text"},"ts":1378321566000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"looking for bike shed colours in https://www.w3.org/Bugs/Public/show_bug.cgi?id=22942 (event name for <details>)","msgtype":"m.text"},"ts":1378321721000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"What was the point of the wheel event (as opposed to mousewheel)?","msgtype":"m.text"},"ts":1378323178000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"D3E not wanting to figure out what legacy browsers did, and instead inventing something else?","msgtype":"m.text"},"ts":1378323238000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"yeah ok that's what it seemed like","msgtype":"m.text"},"ts":1378323248000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"then FF had to go and implement wheel but not mousewheel :-S","msgtype":"m.text"},"ts":1378323256000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Disclaimer: I wasn't around at the time","msgtype":"m.text"},"ts":1378323263000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"TabAtkins: your email doesn't make sense","msgtype":"m.text"},"ts":1378323723000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: to elaborate, encoder != decoder, and the decoder already does the right thing","msgtype":"m.text"},"ts":1378323768000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: all the browser which implement mousewheel implement it in very different ways","msgtype":"m.text"},"ts":1378324096000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and it didn't have the features I wanted :)","msgtype":"m.text"},"ts":1378324118000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"hmm, who knows about hgroup?","msgtype":"m.text"},"ts":1378324145000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"why it is so controversial ?","msgtype":"m.text"},"ts":1378324171000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"doesn't want to read html wg mailing list","msgtype":"m.emote"},"ts":1378324189000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Because people like arguning over silly things","msgtype":"m.text"},"ts":1378324359000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"*arguing","msgtype":"m.text"},"ts":1378324373000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"is hgroup controversial?","msgtype":"m.text"},"ts":1378324454000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"I thought some people thought one thing, others thought another, but they didn't bother talking about it anymore","msgtype":"m.text"},"ts":1378324469000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"HTMLWG forked","msgtype":"m.text"},"ts":1378324478000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I can't actually remember what the controversy was about now, but I am pretty sure it was something that will become irrelevant once the feature is used","msgtype":"m.text"},"ts":1378324481000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Apart from that, no","msgtype":"m.text"},"ts":1378324484000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"(and will clearly be irrelevant if the feature is never used)","msgtype":"m.text"},"ts":1378324513000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I think the argument was that you were supposed to break the outline","msgtype":"m.text"},"ts":1378324516000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I reckon either the feature gets used, and the debate becomes irrelevant, or it doesn't get used, and the debate becomes irrelevant","msgtype":"m.text"},"ts":1378324517000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"but then again the outline is broken :)","msgtype":"m.text"},"ts":1378324533000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"pulling wheel out of the 927 trap might be more useful","msgtype":"m.text"},"ts":1378324576000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"darobin: well, we have a bug which has been reopened and closed many times depending on who is looking at it... the ones who care about W3C HTMLx specs close it, and the ones who care about WhatWG HTML spec reopen it","msgtype":"m.text"},"ts":1378324598000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: how can one open and close a bug on this? even the forked HTML WG version has it as a legacy element so browser can safely just support it","msgtype":"m.text"},"ts":1378324640000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"can or must?","msgtype":"m.text"},"ts":1378324701000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I don't recall","msgtype":"m.text"},"ts":1378324710000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"that's how much I care :)","msgtype":"m.text"},"ts":1378324718000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1378324721000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I should not care either","msgtype":"m.text"},"ts":1378324726000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"The element doesn't *do* anything in a typical browser","msgtype":"m.text"},"ts":1378324746000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"matjas: thanks for the help!","msgtype":"m.text"},"ts":1378324752000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well, the bug is about the mapping to a11y apis","msgtype":"m.text"},"ts":1378324766000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"smaug____: in the parser at least it's clearly must","msgtype":"m.text"},"ts":1378324768000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"Oh right","msgtype":"m.text"},"ts":1378324772000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"oh that","msgtype":"m.text"},"ts":1378324777000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"Well that is the one place it does make a difference","msgtype":"m.text"},"ts":1378324785000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"matjas: ooh, sad email is sad.","msgtype":"m.text"},"ts":1378324803000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: it actually makes very minor differences in a few other places","msgtype":"m.text"},"ts":1378324842000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"e.g. it closes a <p>","msgtype":"m.text"},"ts":1378324852000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"it's also in the UA style sheet with some non-default rules","msgtype":"m.text"},"ts":1378324886000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"but yeah, no big deal","msgtype":"m.text"},"ts":1378324888000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"interestingly, in the parsing section it's marked as having \"special parsing rules\", but then it proceeds to only appear under the comment \"the normal ones\" :)","msgtype":"m.text"},"ts":1378324946000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"anyway","msgtype":"m.text"},"ts":1378324948000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"trots off to read stuff made of paper","msgtype":"m.emote"},"ts":1378324981000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"Domenic_: I wondered whether it might be better to give you promises.spec.whatwg.org and note in dom.spec.whatwg.org the spec has moved","msgtype":"m.text"},"ts":1378332245000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: it seems you're doing a fine job of maintaining it and there's not really any good reason I can see for me to sit in the middle","msgtype":"m.text"},"ts":1378332280000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yt?","msgtype":"m.text"},"ts":1378334235000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"annevk: http://lists.w3.org/Archives/Public/public-whatwg-archive/2013Jun/thread.html#msg207 http://lists.w3.org/Archives/Public/public-whatwg-archive/2013Jul/thread.html#msg1 looks like a thread for your spec, but i don't see a response from you -- did it slip your radar or is it something you want me to deal with?","msgtype":"m.text"},"ts":1378334355000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: we wontfixed that plan before that thread started, not sure if someone referenced the bug","msgtype":"m.text"},"ts":1378334679000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"could you update the people on the thread and respond to any novel points there or point people to where the points are already answered?","msgtype":"m.text"},"ts":1378334719000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"or i can, if you know what bug it was","msgtype":"m.text"},"ts":1378334724000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: yeah I guess I can, not now though","msgtype":"m.text"},"ts":1378334759000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1378334804000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"What's an idiomatic way to write a \"safe\" version of a method for a spec to call (not overridable)?  Define some operation abstractly, then for the actual method, just say \"do foo\"?","msgtype":"m.text"},"ts":1378337109000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"that's a sound way to do it","msgtype":"m.text"},"ts":1378337217000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"but i basically rely on invokations of methods from prose implicitly not going through idl","msgtype":"m.text"},"ts":1378337243000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"so it's always gonna call the \"real\" one","msgtype":"m.text"},"ts":1378337250000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"imho","msgtype":"m.text"},"ts":1378337252000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Yeah, I've depended on that before too. It seems silly to *not* depend on it, but shrug.","msgtype":"m.text"},"ts":1378337293000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"heycam: The [MapClass] section says that if you're manually implementing the Map methods, you *must* match the method signatures given there.  CSSFontFeatureValuesMap doesn't do this, though: http://dev.w3.org/csswg/css-fonts/#om-fontfeaturevalues","msgtype":"m.text"},"ts":1378337654000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Its value type is sequence<unsigned long>, but its set() method accepts (unsigned long or sequence<unsigned long>), with prose converting the former into the latter, and I think that's reasonable.","msgtype":"m.text"},"ts":1378337688000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"heycam: Also, I'm now using SetClass, just by extrapolating from MapClass.","msgtype":"m.text"},"ts":1378337713000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah, that's probably ok for the type to be a superset there. I'll make a note to allow that.","msgtype":"m.text"},"ts":1378337777000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"TabAtkins, where are you using SetClass btw?","msgtype":"m.text"},"ts":1378337803000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Font Load Events.  I'll have a version uploaded in a moment.","msgtype":"m.text"},"ts":1378337827000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1378337838000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: Okay, it's still under heavy editing churn at the moment, but the SetClass-relevant parts are in now: http://dev.w3.org/csswg/css-font-load-events/#FontFaceSet-interface","msgtype":"m.text"},"ts":1378338310000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, I don't think you'd be able to inherit from EventTarget if you make it a SetClass","msgtype":"m.text"},"ts":1378338390000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"EventTarget is dumb.","msgtype":"m.text"},"ts":1378338403000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It shouldn't be a superclass. :/","msgtype":"m.text"},"ts":1378338414000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i tried to fight that","msgtype":"m.text"},"ts":1378338420000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"but lost.","msgtype":"m.text"},"ts":1378338421000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"people were like, \"oh, you'll always be able to inherit from it\"","msgtype":"m.text"},"ts":1378338446000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"TabAtkins: (you can cheat, just say \"MyInterface implements EventTarget\"... :-) )","msgtype":"m.text"},"ts":1378338469000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Heh, that works.","msgtype":"m.text"},"ts":1378338485000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Also: those people were dumb.  No.  Bad.","msgtype":"m.text"},"ts":1378338492000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]