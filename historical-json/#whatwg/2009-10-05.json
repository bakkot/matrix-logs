[
{"content":{"body":"man, this Nick guy i so verbose","msgtype":"m.text"},"ts":1254701100000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i don't think i've ever seen him write a comment on a bug report that actually fits on one page of my laptop's screen","msgtype":"m.text"},"ts":1254701160000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: You could try rotating the screen ninety degrees, assuming it's a widescreen laptop, and then it may be more likely to fit","msgtype":"m.text"},"ts":1254703260000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: even then...","msgtype":"m.text"},"ts":1254705060000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"othermaciej: http://www.w3.org/Bugs/Public/show_bug.cgi?id=7657#c8","msgtype":"m.text"},"ts":1254714300000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"othermaciej: any chance the official process will be made public soon? :-)","msgtype":"m.text"},"ts":1254714301000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Sam and I have a disagreement about some details - I'll try to get it settled soon (target is next week)","msgtype":"m.text"},"ts":1254714360000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1254714361000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'm pleased to see that boolean attributes work as css selectors, i.e., [list] {background:#ff0;}","msgtype":"m.text"},"ts":1254715380000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"(in opera/chromium)","msgtype":"m.text"},"ts":1254715381000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"are there any opera devs in the house?","msgtype":"m.text"},"ts":1254715440000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"They're either just waking up or starting work.  Give 'em a few hours.","msgtype":"m.text"},"ts":1254715620000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Or, if you wait until American morning, they're just ending work, and hang out a lot.","msgtype":"m.text"},"ts":1254715680000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: oh yeah, i suck at time zones.","msgtype":"m.text"},"ts":1254715681000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1254715682000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"np","msgtype":"m.text"},"ts":1254715683000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":" /b 19","msgtype":"m.text"},"ts":1254717960000,"senderName":"inimino","senderId":"inimino@irc"},
{"content":{"body":"oops","msgtype":"m.text"},"ts":1254717961000,"senderName":"inimino","senderId":"inimino@irc"},
{"content":{"body":"ok nn","msgtype":"m.text"},"ts":1254744720000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hsivonen: should i make the pseudo-attributes processing of xml-stylesheet unattached to processing instructions so that they can be invoked for any string (e.g. comment data)?","msgtype":"m.text"},"ts":1254750780000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: do you mean for reuse in other specs?","msgtype":"m.text"},"ts":1254750960000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: yeah","msgtype":"m.text"},"ts":1254751020000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: If it's easy to have that kind of generality, I guess having it doesn't hurt","msgtype":"m.text"},"ts":1254751021000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"it would be easy","msgtype":"m.text"},"ts":1254751022000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"seems like a good idea in that case","msgtype":"m.text"},"ts":1254751080000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"wonders if we're turning into framework designers :p","msgtype":"m.emote"},"ts":1254751200000,"senderName":"annevk2","senderId":"annevk2@irc"},
{"content":{"body":"annevk2: if you organize a program into methods, you aren't an astronaut just yet :-)","msgtype":"m.text"},"ts":1254751920000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Man, why does my optimism about humanity's inherent honesty have to be so sorely tested even on something where honesty should be so *simple* like a technical mailing list?","msgtype":"m.text"},"ts":1254752220000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"What makes you imagine it's a technical mailing list?","msgtype":"m.text"},"ts":1254752280000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"TabAtkins: which mailing list is testing your optimism about honesty?","msgtype":"m.text"},"ts":1254752281000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen, htmlwg.  ;_;","msgtype":"m.text"},"ts":1254752340000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: anything in particular that doesn't appear inherently honest?","msgtype":"m.text"},"ts":1254752341000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Philip`, it's the technology that does it, I think.","msgtype":"m.text"},"ts":1254752342000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hsivonen: Shelley's attempts to reframe your arguments.","msgtype":"m.text"},"ts":1254752343000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I don't think there's dishonesty involved. ","msgtype":"m.text"},"ts":1254752400000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"It is a bit annoying though that following up on the hypothetical offered previously is countered with additional requirements that don't seem to allow hypotheticals.","msgtype":"m.text"},"ts":1254752460000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I find it difficult to imagine that she's being honest in constantly turning your arguments over and poking at what she perceives is the weakest *social* point of it, while completely ignoring the technical discussion that is the point of your arguments.","msgtype":"m.text"},"ts":1254752461000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I think it's one of the most stark examples of incompatible worldviews I've ever personally witnessed.","msgtype":"m.text"},"ts":1254752520000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: what was the weakest social point in my argument?","msgtype":"m.text"},"ts":1254752580000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Imo, the fact that you are purposely playing dumb to force the other side to elucidate their proposals more concretely.","msgtype":"m.text"},"ts":1254752640000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Shelley then twists that into implying that you are either ignoring them for dishonest reasons, or are just too stupid to realize that they've given answers (inadequate though they may be).","msgtype":"m.text"},"ts":1254752700000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'm not purposely playing dumb. I honestly don't know if the set of characteristics of \"decentralized extensibility\" is a proper subset of the characteristics of Namespaces.","msgtype":"m.text"},"ts":1254752760000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"but every time I try to understand what's essence and what's incidental to an implementation, people don't want to answer me","msgtype":"m.text"},"ts":1254752761000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I know, that's what you're trying to force them to answer.  But they think the answer is obvious, and so assume that you're being dishonest.","msgtype":"m.text"},"ts":1254752820000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"frankly, if there's nothing you can change about Namespaces without it stopping being \"decentralized extensibility\", we should remove the fancy term and just talk about Namespaces","msgtype":"m.text"},"ts":1254752880000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Ah, but that removes the ability to trap people into agreeing on principle, so they can't reject Namespaces when the full proposal is put forth.","msgtype":"m.text"},"ts":1254752940000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"if there's a distinct principle to agree on, I think the principle should be explicitly formulated","msgtype":"m.text"},"ts":1254752941000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I agree 100%.  Which brings us around to my optimism about humanity's honesty being tested.","msgtype":"m.text"},"ts":1254753060000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Anyone know how to get a Print Preview out of Chrome?  Trying to debug a media=print stylesheet in it, and it's more difficult if I have to actually print every time (even if only to a pdf).","msgtype":"m.text"},"ts":1254754200000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Install Safari, select 'print preview' menu option?","msgtype":"m.text"},"ts":1254754380000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(I assume it has one...)","msgtype":"m.text"},"ts":1254754381000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I need to reinstall safari anyway, so sure.","msgtype":"m.text"},"ts":1254754440000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"on mac it uses the built-in platform print-preview, presumably","msgtype":"m.text"},"ts":1254754441000,"senderName":"gavin","senderId":"gavin@irc"},
{"content":{"body":"does it implement its own on windows?","msgtype":"m.text"},"ts":1254754442000,"senderName":"gavin","senderId":"gavin@irc"},
{"content":{"body":"Safari on Mac just generates a PDF for Print Preview - dunno what it does on Windows","msgtype":"m.text"},"ts":1254755460000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: What would be the best way to complain about Webkit's rendering of broken images with alt-text?","msgtype":"m.text"},"ts":1254755640000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(The bug I was addressing wasn't about print stylesheets at all, but rather about the print button on the page, which doesn't currently have an image.  I was relying on Firefox's treatment, where it's literally indistinguishable from just having the alt-text there instead.)","msgtype":"m.text"},"ts":1254755700000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(For small images, though, the \"broken image\" icon completely overlays the text.)","msgtype":"m.text"},"ts":1254755701000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(In webkit)","msgtype":"m.text"},"ts":1254755760000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"suggests fixing the image so it's not broken","msgtype":"m.emote"},"ts":1254755761000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Part of the reason I *add* alt-text, though, is so I can rely on the page still being usable when images *do* break for whatever reason.","msgtype":"m.text"},"ts":1254755762000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"In this case I was just waiting for the actual image, so I slid in an <img> tag without a @src for now.","msgtype":"m.text"},"ts":1254755820000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: https://bugs.webkit.org/show_bug.cgi?id=11200 and https://bugs.webkit.org/show_bug.cgi?id=5566","msgtype":"m.text"},"ts":1254755821000,"senderName":"Rik|work","senderId":"Rik|work@irc"},
{"content":{"body":"TabAtkins: bugzilla","msgtype":"m.text"},"ts":1254755822000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"TabAtkins: shake those oooold bugs","msgtype":"m.text"},"ts":1254755823000,"senderName":"Rik|work","senderId":"Rik|work@irc"},
{"content":{"body":"TabAtkins: but I suspect your complaints are known issues, so commenting in the existing bugs would be best","msgtype":"m.text"},"ts":1254755824000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Thanks, you two.","msgtype":"m.text"},"ts":1254756720000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hsivonen: btw, after having looked at http://philip.html5.org/data/script-open-in-escape.txt too, i found one site (www.jeuxactu.com) with 3 pages that breaks with proposal #3","msgtype":"m.text"},"ts":1254757440000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hsivonen: so it is on the order of 10 pages out of 425000 that break with proposal #3","msgtype":"m.text"},"ts":1254757500000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hsivonen: where there around 600-700 out of 425000 that break with what's in the spec now, afaict","msgtype":"m.text"},"ts":1254757620000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"How many break with what browsers currently implement?","msgtype":"m.text"},"ts":1254757680000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: 0 for the purposes of the numbers above","msgtype":"m.text"},"ts":1254757740000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"there might well be pages that do something like <script><!-- foo() </script> <script><!-- bar() //--></script> and expect both foo() and bar() to run","msgtype":"m.text"},"ts":1254757860000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"which they would with proposal #3 but don't in current browsers","msgtype":"m.text"},"ts":1254757861000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i haven't looked for such pages","msgtype":"m.text"},"ts":1254757862000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"(or there might be pages with that pattern but expect none of them to run)","msgtype":"m.text"},"ts":1254757980000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"sorry, 600-1300 out of 425000","msgtype":"m.text"},"ts":1254758160000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"since i don't know what the overlap is between the two sets of data","msgtype":"m.text"},"ts":1254758161000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hmm, if i look at http://www.marchander.com/catalog-9500-gallery.html it has commented out the script element, so it is not relevant","msgtype":"m.text"},"ts":1254758520000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"so the breakage could be less than 600","msgtype":"m.text"},"ts":1254758580000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"the win being no reparsing?","msgtype":"m.text"},"ts":1254758581000,"senderName":"annevk2","senderId":"annevk2@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1254758640000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"no reparsing means better performance, too","msgtype":"m.text"},"ts":1254758641000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"since we don't need to wait for the whole page to load before deciding where to close the script element","msgtype":"m.text"},"ts":1254758642000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"reparsing also means potentially reparsing several times","msgtype":"m.text"},"ts":1254758700000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"<script><!-- foo() </script> <script><!-- foo() </script> <script><!-- foo() </script> etc","msgtype":"m.text"},"ts":1254758760000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"more anecdotal namespace fun: http://www.w3.org/mid/op.u1b23ela64w2qv@annevk-t60","msgtype":"m.text"},"ts":1254760980000,"senderName":"annevk2","senderId":"annevk2@irc"},
{"content":{"body":"div[xml|lang|=\"ar\"]","msgtype":"m.text"},"ts":1254761100000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I like how the excellent unambiguous syntax makes it really easy to read","msgtype":"m.text"},"ts":1254761101000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"div:lang(ar)","msgtype":"m.text"},"ts":1254762060000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"they're not the same","msgtype":"m.text"},"ts":1254762120000,"senderName":"annevk2","senderId":"annevk2@irc"},
{"content":{"body":"people should not use a Selector such as [xml|lang] in general","msgtype":"m.text"},"ts":1254762121000,"senderName":"annevk2","senderId":"annevk2@irc"},
{"content":{"body":"Hixie: yt?","msgtype":"m.text"},"ts":1254763440000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: He went to bed not very many hours ago","msgtype":"m.text"},"ts":1254763560000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"What timezone is Hixie in?","msgtype":"m.text"},"ts":1254763620000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: America/San_Franicso","msgtype":"m.text"},"ts":1254763621000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: He's normally getting up around now, how am I to know? :P","msgtype":"m.text"},"ts":1254763622000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"k.  He acts like he lives in -12 or something.","msgtype":"m.text"},"ts":1254763680000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Does IE throw when it comes across an undefined variable in JS?","msgtype":"m.text"},"ts":1254765720000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: iirc then yes, for some definition of undefined","msgtype":"m.text"},"ts":1254767940000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"wonders what rev of html5lib he has installed at home, as he's getting diff. output from anolis :\\","msgtype":"m.emote"},"ts":1254767941000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"notes anolis does not work with html5lib tip","msgtype":"m.emote"},"ts":1254768060000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"wonders if this is the namespace issue or something else","msgtype":"m.emote"},"ts":1254768360000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Dunno/","msgtype":"m.text"},"ts":1254768600000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hmm, jgraham: you got any idea where I could get a couple of GB -> Euro power adapters here?","msgtype":"m.text"},"ts":1254770460000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"A drug store?","msgtype":"m.text"},"ts":1254770760000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"gsnedders: Clas Ohlson probably","msgtype":"m.text"},"ts":1254770940000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"Dashiva: Ah, that sounds likely.","msgtype":"m.text"},"ts":1254770941000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"shudders at the thought of trying to find things in Clas Ohlson","msgtype":"m.emote"},"ts":1254771240000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"That's what the catalogue and/or employees are for","msgtype":"m.text"},"ts":1254771540000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"is having fun abusing a \"functional programming is too inefficient!\" weenie who thinks that functional programming is just what you get when you use recursion.","msgtype":"m.emote"},"ts":1254771600000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":" /educating","msgtype":"m.text"},"ts":1254771720000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That seems backwards","msgtype":"m.text"},"ts":1254771780000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Recursion is what you get when you use functional programming","msgtype":"m.text"},"ts":1254771781000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Aw, Philip`, now I have to educate you too.","msgtype":"m.text"},"ts":1254771782000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"I have only learned now that there is a \"text/palin\" option that I have never heard of\"","msgtype":"m.text"},"ts":1254771783000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"Recursion is a low-level operation that you should use as little as possible.","msgtype":"m.text"},"ts":1254771784000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Functional programming can probably be best defined as using maps and folds a lot.","msgtype":"m.text"},"ts":1254771840000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"At least as a decent heuristic.","msgtype":"m.text"},"ts":1254771841000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Functional programming can be described as the designer forgetting to include variables","msgtype":"m.text"},"ts":1254771842000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"Iteration is perfectly fine in a functional language.  It's just usually unnecessary, just as recursion is usually unnecessary.","msgtype":"m.text"},"ts":1254771900000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Maps and folds are just abstractions of recursion","msgtype":"m.text"},"ts":1254771901000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Because you're almost always using much more powerful primitives.","msgtype":"m.text"},"ts":1254771902000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Philip`, um?  Maps and folds *can* be thought of as recursive.  They can also be thought of as iterative.  The distinction is really unnecessary here.","msgtype":"m.text"},"ts":1254771960000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Because both iteration and recursion are low-level operations that are basically equivalent.  You just choose one or the other based on how easy they make a particular problem.","msgtype":"m.text"},"ts":1254772020000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: The defining feature of functional languages is there's a simple core that just does (recursive) function calls and not much else, and everything else is built on top of that","msgtype":"m.text"},"ts":1254772021000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Perhaps of functional *languages*, yes.  Not functional *programming*.","msgtype":"m.text"},"ts":1254772080000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"and the underlying recursiveness is critical for issues like performance of folds","msgtype":"m.text"},"ts":1254772081000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"All functional programming needs is the ability to define functions as first-class objects.","msgtype":"m.text"},"ts":1254772082000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"?_?  You can get equal performance out of an iterative fold as you can with a recursive one.","msgtype":"m.text"},"ts":1254772140000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(and pure functional languages can't do iteration at all, because it doesn't make sense when there's no mutable state)","msgtype":"m.text"},"ts":1254772141000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"TabAtkins: I'm talking about functional programming in terms of programming in functional programming languages, not in terms of writing stuff with functions in other languages ;-)","msgtype":"m.text"},"ts":1254772200000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I'm talking about functional programming in terms of writing Lisp code that passes functions around properly.  I rarely iterate *or* recurse in my programs, because neither are necessary.","msgtype":"m.text"},"ts":1254772201000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And whether mapcar is implemented as a recursive function or an iterative is irrelevant to me, as long as it's performant.","msgtype":"m.text"},"ts":1254772260000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(The most natural implementation is a pretty trivial iterative one, actually, that builds a list by holding onto the tail as it constructs it.)","msgtype":"m.text"},"ts":1254772320000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: The performance issue is relevant because some folds might take O(n) stack space, due to their recursive nature","msgtype":"m.text"},"ts":1254772321000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"That's what kept nagging me about prolog","msgtype":"m.text"},"ts":1254772380000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"Sure, it works now. It works most of the time. But I can never be sure what crazy antics it will pull on me.","msgtype":"m.text"},"ts":1254772440000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"Indeed, performance is important.  But how it works underneath isn't.  If your fold primitive is inefficient because it's implemented recursively, then you need a better compiler that can instead unfold it into an iteration.","msgtype":"m.text"},"ts":1254772441000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Dashiva: I expect that's partly why C (and C++ to a lesser extent) is nice for high-performance code, because you can know pretty much exactly what any line of code is going to do, and you can read it and profile it and optimise it and it makes sense","msgtype":"m.text"},"ts":1254772620000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"whereas other languages might do all kinds of crazy black-box runtime stuff","msgtype":"m.text"},"ts":1254772621000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"That's what profilers are for, and hooks that allow you to drop down the abstraction ladder when necessary.","msgtype":"m.text"},"ts":1254772680000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"and even if other languages are theoretically more efficient (e.g. JITs can use dynamic profiling data), in practice it seems much harder to write efficient (because e.g. the JIT will magically stop working if you have too much bytecode and there's no good way to debug it and work out the problem)","msgtype":"m.text"},"ts":1254772740000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"TabAtkins: Dropping down the abstraction ladder can be really hard","msgtype":"m.text"},"ts":1254772800000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"So make sure you have a compiler that makes it unnecessary most of the time.  ^_^","msgtype":"m.text"},"ts":1254772801000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"and working out what high-level modifications will result in desired low-level changes, several levels of abstraction away, can also be really hard","msgtype":"m.text"},"ts":1254772860000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"TabAtkins: The ability for a compiler to make it unnecessary seems largely determined by the language","msgtype":"m.text"},"ts":1254772861000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`, explain?","msgtype":"m.text"},"ts":1254772920000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hence C being good because it encourages compilers to have very little abstraction from the hardware","msgtype":"m.text"},"ts":1254772921000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"and Prolog being less good because it takes a lot of effort to work out what the hardware's doing, regardless of how clever your tools are","msgtype":"m.text"},"ts":1254772922000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Okay, I see that.","msgtype":"m.text"},"ts":1254773040000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But many languages (especially multiparadigm functional languages) do make it relatively easy to do so.","msgtype":"m.text"},"ts":1254773041000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(I'm not convinced that logic programming is at all a good general paradigm, though, so my opinion of Prolog is fairly low to start with.)","msgtype":"m.text"},"ts":1254773160000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"wonders what multiparadigm functional languages are","msgtype":"m.emote"},"ts":1254773220000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Lisp, for one.","msgtype":"m.text"},"ts":1254773221000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"is a Lisper, and so uses a lot of examples from it.","msgtype":"m.emote"},"ts":1254773222000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(If it's not just syntactic sugar for lambda calculus then it doesn't sound like a functional programming language to me :-p )","msgtype":"m.text"},"ts":1254773223000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"It *can* be.  Or you can do OO programming with CLOS.  Or iteration with whatever the hell you want.  Or aspect-oriented.  Or logic programming.  Whatever.","msgtype":"m.text"},"ts":1254773280000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Lisp doesn't go out of its way to be pure, shutting down useful avenues for making a program easier to write (this is basically why I haven't switched to Haskell yet).","msgtype":"m.text"},"ts":1254773340000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"wonders if anyone else thought of Michael Palin rather than Sarah Palin","msgtype":"m.emote"},"ts":1254776100000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: http://www.michaelpalinforpresident.com/ did","msgtype":"m.text"},"ts":1254777120000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"TabAtkins: http://cgi.cse.unsw.edu.au/~dons/blog/2008/05/16 is rather suggestive of (at least one) functional language being non-trivial to optimize","msgtype":"m.text"},"ts":1254778980000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(although the author is trying to make quite the opposite point)","msgtype":"m.text"},"ts":1254778981000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"However I guess C and similar is rather hard to optimize when you move from simple single thread/core to highly concurent problems","msgtype":"m.text"},"ts":1254779040000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(although obviously it can be done; see MPI and similar)","msgtype":"m.text"},"ts":1254779041000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"saw a talk on automatic concurrency optimisation of Haskell programs","msgtype":"m.emote"},"ts":1254779220000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"and it didn't seem particularly awesome","msgtype":"m.text"},"ts":1254779221000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"With an infinite number of cores and zero added overhead it was at most something like 50% faster on real programs","msgtype":"m.text"},"ts":1254779280000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"which didn't really seem worth the effort","msgtype":"m.text"},"ts":1254779281000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(I've probably got the numbers entirely wrong)","msgtype":"m.text"},"ts":1254779282000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: That might be amdahl's fault, though","msgtype":"m.text"},"ts":1254780180000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"Dashiva: Indeed, and the result is that programmers still need to understand concurrency and data dependencies in order to optimise their code, and the language can't do it for you","msgtype":"m.text"},"ts":1254780300000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"sicking, http://dev.w3.org/2006/webapi/WebIDL/dom/","msgtype":"m.text"},"ts":1254780540000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"that is dom core etc. with nullable annotations added (and some getters and things)","msgtype":"m.text"},"ts":1254780541000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"what codec do I put in a <source type> for MP3? I have a <source> for OGG vorbis that is audio/ogg;codecs=vorbis but I don't know what audio/mpeg;codecs= should be","msgtype":"m.text"},"ts":1254780720000,"senderName":"sephr","senderId":"sephr@irc"},
{"content":{"body":"sephr: I'm thinking the answer is, it shouldn't: http://www.faqs.org/rfcs/rfc3003.html","msgtype":"m.text"},"ts":1254780840000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"webben: thanks, I thought there were differing codecs for audio/mpeg","msgtype":"m.text"},"ts":1254780960000,"senderName":"sephr","senderId":"sephr@irc"},
{"content":{"body":"(like the mp3 hd codec?)","msgtype":"m.text"},"ts":1254780961000,"senderName":"sephr","senderId":"sephr@irc"},
{"content":{"body":"i dunno... there may be ... but there doesn't appear to be a codecs parameter in the media type registration","msgtype":"m.text"},"ts":1254781020000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"heycam: should [Callback=FunctionOnly] allow objects that implement Call (like a NodeList) in addition to function objects?","msgtype":"m.text"},"ts":1254781200000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"weinig, currently yes that's what webidl requires","msgtype":"m.text"},"ts":1254781201000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"it just tries to do the [[Call]] at the appropriate time, iirc","msgtype":"m.text"},"ts":1254781260000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"webben, oh sorry i'm wrong","msgtype":"m.text"},"ts":1254781500000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"it explicitly mentions Function objects","msgtype":"m.text"},"ts":1254781501000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"er, weinig ^","msgtype":"m.text"},"ts":1254781502000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"nods","msgtype":"m.emote"},"ts":1254781503000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"opinions welcome on what makes sense","msgtype":"m.text"},"ts":1254781504000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"I think we allow passing objects that implement Call in most cases","msgtype":"m.text"},"ts":1254781560000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"heycam: Is this somthing that the ES people are likely to want changed?","msgtype":"m.text"},"ts":1254781561000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Since iirc ES5 says that only functions implement [[Call]]","msgtype":"m.text"},"ts":1254781620000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham, that's a good point, i'll bring it up","msgtype":"m.text"},"ts":1254781621000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"jgraham: really? Wouldn't the host object exception get around that?","msgtype":"m.text"},"ts":1254781680000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"weinig: The ES people don't like the host object exception ","msgtype":"m.text"},"ts":1254781681000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"weinig, sounds like the host object exception is something the ES folks don't want to be invoked","msgtype":"m.text"},"ts":1254781682000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1254781683000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1254781684000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"(They would like WebIDL APIs to be impementable in ECMAScript)","msgtype":"m.text"},"ts":1254781740000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"*implementable","msgtype":"m.text"},"ts":1254781741000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: ok, what is the use case for that","msgtype":"m.text"},"ts":1254781860000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"weinig: I'm not really sure. There was a lot of discussion and I didn't take all of it in","msgtype":"m.text"},"ts":1254781920000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"nods","msgtype":"m.emote"},"ts":1254781921000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"One suggestion was implementing secure mock-DOM objects in ECMAScript, but I think that was shown to be impractical","msgtype":"m.text"},"ts":1254781922000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Do you recall where that was shown?","msgtype":"m.text"},"ts":1254781980000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"weinig: It was in a post from othermaciej_ ","msgtype":"m.text"},"ts":1254781981000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"on public-html?","msgtype":"m.text"},"ts":1254782040000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"On the es-discuss / webapps/ public-html lists","msgtype":"m.text"},"ts":1254782041000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"too ... many ... lists ;)","msgtype":"m.text"},"ts":1254782042000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"saw that cross-posting awesomeness","msgtype":"m.emote"},"ts":1254782043000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"will ask maciej on the way to coffee","msgtype":"m.emote"},"ts":1254782100000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"webben: Basically he pointed out that you would end up needing to reimplement a substantial fraction of the browser","msgtype":"m.text"},"ts":1254782101000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"http://lists.w3.org/Archives/Public/public-html/2009Sep/1060.html","msgtype":"m.text"},"ts":1254782160000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"ta","msgtype":"m.text"},"ts":1254782161000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"it's worth noting that people are in practice trying to build DOM cages like that","msgtype":"m.text"},"ts":1254782162000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"e.g. Caja","msgtype":"m.text"},"ts":1254782163000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"jgraham: That link doesn't show a failure mode of Haskell as a functional language, but rather a failure mode from it being a *lazy* language.","msgtype":"m.text"},"ts":1254783240000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Fair enough","msgtype":"m.text"},"ts":1254783300000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"-> sleep","msgtype":"m.emote"},"ts":1254783301000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham is also a lazy language.","msgtype":"m.text"},"ts":1254783302000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Always sleeping...","msgtype":"m.text"},"ts":1254783303000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Also, jgraham: http://donsbot.wordpress.com/2008/06/","msgtype":"m.text"},"ts":1254784260000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Same author, a month later, explaining how the issue *can* be optimized away by the compiler, but GHC's current compiler is biased in a particular way that makes it difficult.","msgtype":"m.text"},"ts":1254784261000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"He then pulls out a library that augments the compiler (easy to do in GHC) that fixes the bias and optimizes it properly, while using very high-level concepts the whole time.","msgtype":"m.text"},"ts":1254784320000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Libraries that augment GHC compiler optimisations are very high-level concepts?","msgtype":"m.text"},"ts":1254785580000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`, huh?  No, the library makes the compiler smarter.","msgtype":"m.text"},"ts":1254785581000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Anything to do with compilers is by necessity probably not high-level.","msgtype":"m.text"},"ts":1254785582000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The point, though, is that then he can continue using proper high-level primitives in his code, secure in the knowledge that the compiler is smart enough to optimize it properly.","msgtype":"m.text"},"ts":1254785640000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: He wasn't secure before, and he isn't secure now. It's just a matter of time before he hits the next compiler weirdness.","msgtype":"m.text"},"ts":1254785880000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"TabAtkins: He can only be secure in that knowledge because he's looked at compiler details and disassembly output to work out that the compiler will be smart enough in this particular case","msgtype":"m.text"},"ts":1254785881000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Dashiva, Philip`, well duh.  There will always be places where the compiler fails.  What was shown is that you *can* achieve that super-tight assembly in pure Haskell, which means the rest of your code (which is *not* performance-critical) can also be in Haskell.  The person writing pure C has to do the entire thing in C, which is a punishment all by itself.","msgtype":"m.text"},"ts":1254786060000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And those compiler-failures are pretty much only relevant on tight inner loops, which you can find via profiling and spend the effort necessary to rewrite into a more efficient form.","msgtype":"m.text"},"ts":1254786120000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"As opposed to writing in a low-level language, where you have to deal with that sort of thing *all the time*, because you simply don't *have* higher-level primitives to work with.","msgtype":"m.text"},"ts":1254786180000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"At least the person writing C did the whole inner loop in a single line of pretty straightforward code, and got performance equivalent to a whole series of blog posts on writing the same thing in Haskell :-p","msgtype":"m.text"},"ts":1254786240000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"And it's amazing how something as simple as summing a list becomes a degenerate case :)","msgtype":"m.text"},"ts":1254786241000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"Dashiva: Summing a list of 1e9 doubles is a degenerate case in *any* language.","msgtype":"m.text"},"ts":1254786300000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Philip`, the trivial transformation for Haskell (done in the first post linked by jgraham) is basically equivalent to the C code.","msgtype":"m.text"},"ts":1254786360000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Except that it still gets to use the wonderful abstraction of a list of 1e9 doubles elsewhere, while C can *never* do so - it has to manually implement laziness at the point of necessity.","msgtype":"m.text"},"ts":1254786420000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"remembers reading a vaguely interesting thing about a game that was developed in a custom dialect of Lisp, including a whole sub-language for writing PS2 assembly code for performance-critical bits","msgtype":"m.emote"},"ts":1254786480000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"That'd be one of the Crash Bandicoot games.","msgtype":"m.text"},"ts":1254786540000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"One of the things it did was optimize the placement of resources on the disk, allowing for data-streaming at a level that would have been impossible by hand.","msgtype":"m.text"},"ts":1254786541000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It was in GamaSutra originally.","msgtype":"m.text"},"ts":1254786542000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"http://c2.com/cgi/wiki?LispInJakAndDaxter","msgtype":"m.text"},"ts":1254786660000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(But then they got bought by EA and had to standardise on C++)","msgtype":"m.text"},"ts":1254786661000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Sony owns Naughty Dog","msgtype":"m.text"},"ts":1254786720000,"senderName":"daedb","senderId":"daedb@irc"},
{"content":{"body":"Oh, okay, I guessed wrong :-)","msgtype":"m.text"},"ts":1254786721000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"notes that he can count the number of times he's wished for a list of 1e9 doubles on the fingers of one elbow","msgtype":"m.emote"},"ts":1254786780000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`, so you won't have to worry about the compiler failing when you use a naive strategy in Haskell, will you?","msgtype":"m.text"},"ts":1254786900000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And yeah, part of the problem with ND was they overevolved their dialect, so that when enough engineers left they no longer had the knowledge necessary to maintain it.","msgtype":"m.text"},"ts":1254786960000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]