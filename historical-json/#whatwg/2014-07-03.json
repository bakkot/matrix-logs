[
{"content":{"body":"Mounir_: Honestly I would rather have .screenAngle and .screenType at this point if abarth is going to block on introducing a record.","msgtype":"m.text"},"ts":1404360441000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"records Domenic's statement in his logfiles","msgtype":"m.emote"},"ts":1404361756000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"annevk: Oh, so you can only fetch HTTP(s). Alright, thanks. This deviates from the actual implementation in Gecko/Blink a bit, but no problem","msgtype":"m.text"},"ts":1404370644000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"ManishCloud: no you can't","msgtype":"m.text"},"ts":1404370655000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1404370662000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"ManishCloud: #concept-fetch handles all URL schemes","msgtype":"m.text"},"ts":1404370673000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ManishCloud: and defines the security policy for all of them too","msgtype":"m.text"},"ts":1404370686000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ManishCloud: however, CORS is an HTTP protocol","msgtype":"m.text"},"ts":1404370701000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it handles data and about","msgtype":"m.text"},"ts":1404370712000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"and http(s)","msgtype":"m.text"},"ts":1404370718000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"ManishCloud: so only the parts of #concept-fetch that end up in the HTTP pipeline will do CORS","msgtype":"m.text"},"ts":1404370723000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ManishCloud: and blob and ftp and file","msgtype":"m.text"},"ts":1404370729000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ManishCloud: and soon filesystem","msgtype":"m.text"},"ts":1404370733000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ManishCloud: a proper implementation of XMLHttpRequest is built on top a proper implementation of Fetch","msgtype":"m.text"},"ts":1404370764000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1404370779000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"annevk: of course, CORS is totally beside the point for data: URLs anyway, yes?","msgtype":"m.text"},"ts":1404370860000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I still don't see any rule for ftp. It handles data, then about, then some request modes, then it says that non-http/https should return a network error","msgtype":"m.text"},"ts":1404370878000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"SamB: strangely enough Blink doesn't seem to allow fetching of data","msgtype":"m.text"},"ts":1404370894000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"ManishCloud: it depends on the request mode","msgtype":"m.text"},"ts":1404370902000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ManishCloud: if you're only considering XMLHttpRequest, then yes, XMLHttpRequest can only Fetch ftp if from an ftp URL (as then they're same-origin)","msgtype":"m.text"},"ts":1404370942000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"okay","msgtype":"m.text"},"ts":1404370953000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"ManishCloud: but e.g. <img>'s request mode is \"No CORS\" by default, and therefore can fetch ftp all the time (although it would end up being a tainted response)","msgtype":"m.text"},"ts":1404370966000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SamB: yeah, it's not entirely inconceivable that we add CORS things to non-HTTP schemes, but I kind of doubt it","msgtype":"m.text"},"ts":1404371026000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh, I see","msgtype":"m.text"},"ts":1404371066000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"annevk: well, with data: the data is all in the URL anyway so it's totally pointless, no?","msgtype":"m.text"},"ts":1404371071000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"no information leakage is possible, as the information is pre-leaked","msgtype":"m.text"},"ts":1404371085000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: yeah","msgtype":"m.text"},"ts":1404371230000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: in case of an <img> it's an opaque taint, though. Isn't opaque almost the same as a network error?","msgtype":"m.text"},"ts":1404371250000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"(how does that work)","msgtype":"m.text"},"ts":1404371254000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"ManishCloud: the implementation of <img> has special privileges in that it can access the internal response to decode the bytes returned and leak some information through width/height","msgtype":"m.text"},"ts":1404371300000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ManishCloud: that's a bit of a legacy bug","msgtype":"m.text"},"ts":1404371318000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it doesn't also tell you if the load outright failed?","msgtype":"m.text"},"ts":1404371321000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: it does?","msgtype":"m.text"},"ts":1404371334000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't know","msgtype":"m.text"},"ts":1404371338000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I'm not sure what you're asking","msgtype":"m.text"},"ts":1404371348000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess you could guess pretty well though","msgtype":"m.text"},"ts":1404371350000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"if the placeholder image has a predictable width/height ...","msgtype":"m.text"},"ts":1404371362000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: if fetch returns a network error <img> will dispatch an error event","msgtype":"m.text"},"ts":1404371410000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that's what I was thinking of, yes","msgtype":"m.text"},"ts":1404371438000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"With legacy APIs you can definitely distinguish between tainting and network errors, it's a bit of a bug that's been exploited all over","msgtype":"m.text"},"ts":1404371443000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Oh, I see.","msgtype":"m.text"},"ts":1404371454000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"how hard can you exploit that?","msgtype":"m.text"},"ts":1404371473000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"doesn't seem as bad as the old :visited problem ...","msgtype":"m.text"},"ts":1404371496000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"oh, you know what I hate? auth dialogs for <img>s","msgtype":"m.text"},"ts":1404371554000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":":o","msgtype":"m.text"},"ts":1404371562000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"there was this one thing that tried to load favicons from a bunch of domains, I think the idea was to see if your ISP was blocking any of them?","msgtype":"m.text"},"ts":1404371646000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"but some of them popped up those stupid dialogs :-(","msgtype":"m.text"},"ts":1404371665000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Authentication dialogs can be spawn from pretty much any API","msgtype":"m.text"},"ts":1404371683000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SamB: imagine what happens when you're behind a misconfigured authenticated HTTP proxy","msgtype":"m.text"},"ts":1404371690000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"Only the very newest of APIs have that disabled","msgtype":"m.text"},"ts":1404371698000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"might be nice to rate limit them or something ;-)","msgtype":"m.text"},"ts":1404371730000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"has happened to me. They broke login; usually after a couple of failed logins it returns an html error page. But if there are many images, well, boom.","msgtype":"m.text"},"ts":1404371735000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"SamB: you can figure out whether someone has an account with a certain site (the problem is made worse due to sending cookies along with the request, but it essentially exists because the user resides on a different IP than the server)","msgtype":"m.text"},"ts":1404371768000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: hmm","msgtype":"m.text"},"ts":1404371810000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"so, like, do they have a met-art account or whatever","msgtype":"m.text"},"ts":1404371825000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"maybe something a bit more embarrassing","msgtype":"m.text"},"ts":1404371848000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Or if your government is hostile and tries to track which organizations you are affiliated with...","msgtype":"m.text"},"ts":1404372015000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"true","msgtype":"m.text"},"ts":1404372047000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"ManishCloud: you're implementing this for Servo?","msgtype":"m.text"},"ts":1404372067000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that's what he said","msgtype":"m.text"},"ts":1404372076000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"annevk: CORS? sort of","msgtype":"m.text"},"ts":1404372078000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"ManishCloud: I recommend implementing Fetch","msgtype":"m.text"},"ts":1404372098000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: So I'm writing it XHR-specific but I intend to integrate this into Teepee (a full Rust implementation of fetch.s.w.o) later","msgtype":"m.text"},"ts":1404372116000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"s.w.o?","msgtype":"m.text"},"ts":1404372132000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"spec.whatwg.org","msgtype":"m.text"},"ts":1404372136000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1404372140000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Teepee intends to implement the fetch spec (not the browser specific things like Request and fetch() )","msgtype":"m.text"},"ts":1404372167000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"Pointer to GitHub?","msgtype":"m.text"},"ts":1404372183000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"As far as implementing fetch() in Servo, I'll do that when Teepee is stable; no point implementing it with rust-http when I'll have to do all the plumbing that Teepee plans to do all over again","msgtype":"m.text"},"ts":1404372225000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"annevk: https://github.com/teepee/teepee","msgtype":"m.text"},"ts":1404372227000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"Sounds good I guess, as long as you guys have the better picture in mind","msgtype":"m.text"},"ts":1404372229000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't really care about fetch()","msgtype":"m.text"},"ts":1404372242000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: then?","msgtype":"m.text"},"ts":1404372247000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"I mostly care about Fetch","msgtype":"m.text"},"ts":1404372250000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh, #concept-fetch","msgtype":"m.text"},"ts":1404372267000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"That <img>, XMLHttpRequest, background-image, etc. all call into the same library to get a bag of bits","msgtype":"m.text"},"ts":1404372267000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Teepee ought to solve that problem","msgtype":"m.text"},"ts":1404372284000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"After that fetch() is relatively straightforward","msgtype":"m.text"},"ts":1404372288000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Exactly, that's why I haven't implemented it yet ;p","msgtype":"m.text"},"ts":1404372300000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"If Teepee is a generic HTTP toolkit, they might not be okay into making it something specific to clients","msgtype":"m.text"},"ts":1404372374000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm not the maintainer of Teepee, but I believe that it should be easy to just do `let req = Request::new(method, url, header, mode, blah)` and then call `req.fetch()` or something (with channels/hooks for the task queues)","msgtype":"m.text"},"ts":1404372376000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"annevk: it has both a client and server library. As well as some common stuff (like headers/methods)","msgtype":"m.text"},"ts":1404372403000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"It's not for browser specific stuff, but most of the spec isn't browser specific","msgtype":"m.text"},"ts":1404372440000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"Why would an HTTP library be interested in data URLs?","msgtype":"m.text"},"ts":1404372460000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Or service workers?","msgtype":"m.text"},"ts":1404372467000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Good point","msgtype":"m.text"},"ts":1404372474000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"Or CORS?","msgtype":"m.text"},"ts":1404372475000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I need to discuss this with Chris as well, but first I'll try to get CORS done. If Chris doesn't want #concept-fetch, I'll write a wrapper for Teepee","msgtype":"m.text"},"ts":1404372485000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"annevk: he said he does want CORS","msgtype":"m.text"},"ts":1404372498000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"one sec","msgtype":"m.text"},"ts":1404372499000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"Oh","msgtype":"m.text"},"ts":1404372504000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Fetch is basically a big superset of a client-side HTTP library with some tweaks","msgtype":"m.text"},"ts":1404372524000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And these days JavaScript hooks (service workers)","msgtype":"m.text"},"ts":1404372543000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://botbot.me/mozilla/rust/2014-06-30/?msg=17205109&page=9","msgtype":"m.text"},"ts":1404372582000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1404372647000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"I guess you can guys can sort out the planning, now you know how it works","msgtype":"m.text"},"ts":1404372663000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yep :P","msgtype":"m.text"},"ts":1404372892000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1404372894000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"anyway, thanks for the help!","msgtype":"m.text"},"ts":1404373088000,"senderName":"ManishCloud","senderId":"ManishCloud@irc"},
{"content":{"body":"tobie: asURL() still seems simplest, the others get tricky; e.g. request has an origin that won't be the origin of the URL","msgtype":"m.text"},"ts":1404379763000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: at least not always","msgtype":"m.text"},"ts":1404379769000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: I'll need to figure out how to deploy from git first. Not going to happen today. Tomorrow hopefully.","msgtype":"m.text"},"ts":1404383125000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: no rush then. Tomorrow's a US holiday anyway, so a lot of people would miss any announcement. So it can wait til next week or after.","msgtype":"m.text"},"ts":1404383233000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Ms2ger: should we revive the thing where we use a single entry to reference a bunch of specs?","msgtype":"m.text"},"ts":1404386052000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: seems somewhat useful for XML, but especially HTTP","msgtype":"m.text"},"ts":1404386062000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Mm, perhaps","msgtype":"m.text"},"ts":1404386067000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"so i'm working with this 3rd party / client that is sending us multi-part POST requests that have no Content-Length which has already caused problems where akamai immediately drops the request ( ddos protection etc )","msgtype":"m.text"},"ts":1404390623000,"senderName":"crankharder","senderId":"crankharder@irc"},
{"content":{"body":"is there any scenario where not specifying the content-length is valid or should I be pushing back on these guys about the finer points of the http spec?","msgtype":"m.text"},"ts":1404390652000,"senderName":"crankharder","senderId":"crankharder@irc"},
{"content":{"body":"crankharder: https://tools.ietf.org/html/rfc7230#section-3.3.2","msgtype":"m.text"},"ts":1404391725000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"crankharder: I believe if you specify Transfer-Encoding: chunked and the data gets sent in that fashion, Content-Length is not necessary","msgtype":"m.text"},"ts":1404391728000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I just managed to get my hands on the raw request: 'Transfer-Encoding: chunked'","msgtype":"m.text"},"ts":1404392673000,"senderName":"crankharder","senderId":"crankharder@irc"},
{"content":{"body":"dammit","msgtype":"m.text"},"ts":1404392676000,"senderName":"crankharder","senderId":"crankharder@irc"},
{"content":{"body":"crankharder: seems like an Akamai problem","msgtype":"m.text"},"ts":1404392746000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the whole point of chunked is to not specify a content length, you use it when you don't know the length in advance","msgtype":"m.text"},"ts":1404393352000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"eg. compression","msgtype":"m.text"},"ts":1404393385000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: not sure that bug's comment is the right place to have the URL conversation. :)","msgtype":"m.text"},"ts":1404398313000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: happy to take that elsewhere if you want.","msgtype":"m.text"},"ts":1404398377000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: so you want URL.parse to return an immutable object?","msgtype":"m.text"},"ts":1404398453000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: no. I'm just expressing confusion as to why we on one hand facilitate devs building URL objects and on the other, hope they use strings to represent urls as much as possible.","msgtype":"m.text"},"ts":1404398542000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"If we had value objects sooner URLs would be a value object","msgtype":"m.text"},"ts":1404398577000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"However, we don't, so they are strings. Similarly time representation is done through a floating point number.","msgtype":"m.text"},"ts":1404398615000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I need to refresh my memory about those.","msgtype":"m.text"},"ts":1404398616000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Meaning can be extracted through objects such as URL and Date","msgtype":"m.text"},"ts":1404398624000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: everybody agrees that the Date constructor in JS is terrible.","msgtype":"m.text"},"ts":1404398645000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: also mutable dates kind of blow my mind (but that's more subject to debate).","msgtype":"m.text"},"ts":1404398671000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: the constructor being terrible does not mean it's not the way to do time","msgtype":"m.text"},"ts":1404398707000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Anyway, the underlying platform model thing is a URL value object of sorts","msgtype":"m.text"},"ts":1404398819000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Which is serialized when you do request.url","msgtype":"m.text"},"ts":1404398843000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: mmm. Well, we're going on in circles, here, but given it's stringifiable(?) why don't we expose this as an immutable URL object then?","msgtype":"m.text"},"ts":1404399020000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: that doesn't exist","msgtype":"m.text"},"ts":1404399038000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: or do you mean the URLUtilsReadOnly thing?","msgtype":"m.text"},"ts":1404399058000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: yeah, I wouldn't mind doing that","msgtype":"m.text"},"ts":1404399067000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: on reflection, Domenic seemed opposed somewhat","msgtype":"m.text"},"ts":1404399076000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: no I mean the stringifier attribute.","msgtype":"m.text"},"ts":1404399118000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: (but I might be misunderstanding what it means.)","msgtype":"m.text"},"ts":1404399158000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: you lost me","msgtype":"m.text"},"ts":1404399179000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: :( God I hate WebIDL.","msgtype":"m.text"},"ts":1404399255000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"It's always easy to blame WebIDL","msgtype":"m.text"},"ts":1404399302000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"tobie: I'm happy with an explanation that does not involve IDL","msgtype":"m.text"},"ts":1404399338000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: wondering if all of this doesn't stem from my misunderstanding of what stringifier does.","msgtype":"m.text"},"ts":1404399503000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: reading up on it now.","msgtype":"m.text"},"ts":1404399510000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Ms2ger: heh.","msgtype":"m.text"},"ts":1404399516000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: that's just another word for toString()","msgtype":"m.text"},"ts":1404399523000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: right. So the URL object gets turned into url.href when coerced to a string, right?","msgtype":"m.text"},"ts":1404399571000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1404399598000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I guess I need to see more examples of SW before pushing for a change here.","msgtype":"m.text"},"ts":1404399937000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: if it is mostly the case that people use request.url to choose how to respond, then returning an immutable URL object makes sense.","msgtype":"m.text"},"ts":1404399986000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: if on the other hand, there's lots of manipulation of the URL object going on anyway, then we might as well keep the string.","msgtype":"m.text"},"ts":1404400050000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: changing this after the fact will be hard","msgtype":"m.text"},"ts":1404400131000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: at least in a nice way","msgtype":"m.text"},"ts":1404400144000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: vaguely related, but you mentioned the Request object has an origin attribute. Where is it defined? (can't find it)","msgtype":"m.text"},"ts":1404400275000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: true. I meant I want to look at a bit more examples.","msgtype":"m.text"},"ts":1404400290000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Within the next couple of weeks.","msgtype":"m.text"},"ts":1404400300000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: oh, it's not exposed","msgtype":"m.text"},"ts":1404400423000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: I think it might not be exposed because it would always be same-origin with the service worker","msgtype":"m.text"},"ts":1404400441000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: I kept some properties off Request for now until we have a v0 implementation","msgtype":"m.text"},"ts":1404400479000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: yeah, I guess we can change this in August still","msgtype":"m.text"},"ts":1404400508000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Right, that was my understanding wrt that origin prop.","msgtype":"m.text"},"ts":1404400700000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk, JakeA: is the promise returned by cache.add resolved with responseArray or void? Promise<any> seems to imply the former, the algorithm seems to imply the latter.","msgtype":"m.text"},"ts":1404402122000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk, JakeA: Trying to build an example which primes the cache after a cache miss: https://gist.github.com/tobie/0689c5dda8f6d49d500d#file-gistfile1-js-L25-L30","msgtype":"m.text"},"ts":1404402448000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"not sure, haven't followed Cache that much","msgtype":"m.text"},"ts":1404402617000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"waiting for rename, some more stability in the API","msgtype":"m.text"},"ts":1404402632000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"cache.add which does fetch in the background seems like a terrible name (and weird API)","msgtype":"m.text"},"ts":1404402836000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: also priming the cache before sending back a response shouldn't be that difficult.","msgtype":"m.text"},"ts":1404402873000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: work on it with Jake?","msgtype":"m.text"},"ts":1404403102000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: if that's how it works, then sure. :)","msgtype":"m.text"},"ts":1404403145000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I think JakeA is working on that API and making sure it's good","msgtype":"m.text"},"ts":1404403174000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If that's not the case I'd like to know, because then someone else should take ownership","msgtype":"m.text"},"ts":1404403193000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: reaching out to JakeA by email, cc'ing you.","msgtype":"m.text"},"ts":1404403570000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: or should I move that conversation to WHATWG mailing list directly?","msgtype":"m.text"},"ts":1404403634000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: public-webapps is the SW spec list, and since cache is there...","msgtype":"m.text"},"ts":1404403670000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ty","msgtype":"m.text"},"ts":1404403684000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: what about the waitUntil/respondWith issue?","msgtype":"m.text"},"ts":1404403814000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: could email there too, it's hard to attract people that want to change that part of the design","msgtype":"m.text"},"ts":1404403860000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: probably need to come up with a replacement design to get that through","msgtype":"m.text"},"ts":1404403877000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I have for waitUntil","msgtype":"m.text"},"ts":1404403891000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: https://github.com/slightlyoff/ServiceWorker/issues/256#issuecomment-47878042","msgtype":"m.text"},"ts":1404403955000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Hi. Is there API to specify which textarea should or shouldn't be spell checked by browser (if capable)?","msgtype":"m.text"},"ts":1404406383000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"And probably suggest language for checking.","msgtype":"m.text"},"ts":1404406424000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"May be for other types of input fields too.","msgtype":"m.text"},"ts":1404406572000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"is the script that generates the index published anywhere?","msgtype":"m.text"},"ts":1404406784000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"IZh: the spellcheck attribute","msgtype":"m.text"},"ts":1404406801000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: thanks.","msgtype":"m.text"},"ts":1404406830000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"IZh: language I guess is inferred from @lang?","msgtype":"m.text"},"ts":1404406842000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"but browsers may just always assume the current locale","msgtype":"m.text"},"ts":1404406858000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: May be. But it will be bad for online translator sites.","msgtype":"m.text"},"ts":1404406945000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"gsnedders, assuming not, given that it's part of Hixie's pipeline","msgtype":"m.text"},"ts":1404407449000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"there's no script that generates the index","msgtype":"m.text"},"ts":1404407475000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's manually managed","msgtype":"m.text"},"ts":1404407478000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: oh, okay","msgtype":"m.text"},"ts":1404407564000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: So you can have access to it, but only if you have a scapel","msgtype":"m.text"},"ts":1404408294000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Is there a proper way to select the elements of the first column of a table (:nth-child doesn't seem to work in the face of cells with rowspan > 1)?","msgtype":"m.text"},"ts":1404409253000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"No","msgtype":"m.text"},"ts":1404409311000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"adds a class","msgtype":"m.emote"},"ts":1404409356000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Hmm, it will also screw up alternating row background colours because the first column will get a random colour","msgtype":"m.text"},"ts":1404409485000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"many people have over the years proposed table-model-aware selectors","msgtype":"m.text"},"ts":1404409637000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Imagine if all those people instead worked on the table layout model... Oh wait","msgtype":"m.text"},"ts":1404418314000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Only dbaron actually understands the table layout model","msgtype":"m.text"},"ts":1404418545000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Although he does try to explain it to everyone he meets","msgtype":"m.text"},"ts":1404418558000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Which does mean that one day a second person might understand it","msgtype":"m.text"},"ts":1404418576000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"is reminded of http://quotes.burntelectrons.org/183","msgtype":"m.emote"},"ts":1404418799000,"senderName":"svl","senderId":"svl@irc"},
{"content":{"body":"There's some brilliant quotes there","msgtype":"m.text"},"ts":1404420723000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I should probably stop reading now","msgtype":"m.text"},"ts":1404421349000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"^_^","msgtype":"m.text"},"ts":1404421444000,"senderName":"svl","senderId":"svl@irc"},
{"content":{"body":"annevk: yeah! It makes my sadness for the depressing state of the geometry interfaces go away","msgtype":"m.text"},"ts":1404424616000,"senderName":"cabanier","senderId":"cabanier@irc"}
]