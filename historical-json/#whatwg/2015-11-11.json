[
{"content":{"body":"MikeSmith: perhaps close WebAppsWG / DOM as a thing on Bugzilla?","msgtype":"m.text"},"ts":1447229059000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"A confirmation email has been sent to you.\" - lies from Twitter","msgtype":"m.text"},"ts":1447230395000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: does it not have any open bugs?","msgtype":"m.text"},"ts":1447237223000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: When you have a minute*, I've reworked most of the bits in https://w3c.github.io/webappsec-credential-management/#opaque-data. I'd appreciate feedback about the things I've certainly missed.","msgtype":"m.text"},"ts":1447237283000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"And now I need to figure out how much work this is going to be to implement in Chrome. :/ Do you happen to know if anyone other than Firefox implements URLSearchParams? Edge, for instance?","msgtype":"m.text"},"ts":1447237321000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"MikeSmith: I meant close to new bugs","msgtype":"m.text"},"ts":1447238638000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah OK","msgtype":"m.text"},"ts":1447238655000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"mkwst: just Firefox","msgtype":"m.text"},"ts":1447238656000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah can do that now","msgtype":"m.text"},"ts":1447238673000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"mkwst: I wonder now, what you created seems a lot like COWL","msgtype":"m.text"},"ts":1447238710000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"kinda, I guess?","msgtype":"m.text"},"ts":1447238792000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: yeah, not entirely","msgtype":"m.text"},"ts":1447238866000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'd rather just not expose the data. Exposing it with an associated label would be pretty restrictive.","msgtype":"m.text"},"ts":1447238874000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"I guess the thing is that you only get the restrictions if you try to get to the data","msgtype":"m.text"},"ts":1447238942000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Right. So let's just not give you the data. :)","msgtype":"m.text"},"ts":1447238960000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"The use case, I suppose, is a site that wants to munge the password data before sending it up to the server.","msgtype":"m.text"},"ts":1447238986000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: 3.3 should mention the data gets given to service workers","msgtype":"m.text"},"ts":1447238992000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: you also need to patch the Response interface somehow so this doesn't get leaked through .body","msgtype":"m.text"},"ts":1447239031000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Doesn't Response just copy the body from the request? I assumed the flag would carry over.","msgtype":"m.text"},"ts":1447239054000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Hrm. Regarding service workers, I was thinking about setting the skip flag. There are probably edge cases that would break (apps doing some sort of local authentication...?), but it seems generally safe.","msgtype":"m.text"},"ts":1447239192000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"(Why is \"skip-service-worker flag\" referenced by `skip-service-worker` and not something like `concept-request-skip-service-worker-flag`?)","msgtype":"m.text"},"ts":1447239294000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: Response has some custom logic at the moment since only Response handles streams","msgtype":"m.text"},"ts":1447239313000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: (flag was a unique enough suffix to not have to bother)","msgtype":"m.text"},"ts":1447239360000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but, but... consistency! :)","msgtype":"m.text"},"ts":1447239378000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: wait if you pass in an opaque FormData that flag gets set?","msgtype":"m.text"},"ts":1447239385000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: how much magic are we introducing?","msgtype":"m.text"},"ts":1447239399000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: I'll accept PRs that consistify","msgtype":"m.text"},"ts":1447239421000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Lots of magic!","msgtype":"m.text"},"ts":1447239438000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Like, 3 magics.","msgtype":"m.text"},"ts":1447239443000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: though I'll note that the flags are consistent","msgtype":"m.text"},"ts":1447239448000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: hmm","msgtype":"m.text"},"ts":1447239454000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://w3c.github.io/webappsec-credential-management/#monkey-patching-fetch-2 <-- magic!","msgtype":"m.text"},"ts":1447239464000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"same-origin request, no redirects, and skip SW.","msgtype":"m.text"},"ts":1447239495000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"re: Response. Where does it expose the body of the request? It doesn't look like it does?","msgtype":"m.text"},"ts":1447239640000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: I'm not sure why request has anything to do with it","msgtype":"m.text"},"ts":1447239693000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: (new Response(opaqueData)).body","msgtype":"m.text"},"ts":1447239713000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah, I see. Synthetic response from a FormData object. Got it, thanks.","msgtype":"m.text"},"ts":1447239737000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: you'll need to patch sendBeacon() too I think","msgtype":"m.text"},"ts":1447239773000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: and XMLHttpRequest's send()","msgtype":"m.text"},"ts":1447239794000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: otherwise you can just leak this cross-origin there or via the service worker...","msgtype":"m.text"},"ts":1447239811000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: it seems like a rather fragile setup where you have to patch each place that might take these things","msgtype":"m.text"},"ts":1447239830000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: This is why I had my own everything.","msgtype":"m.text"},"ts":1447239843000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: perhaps a better way is to have CredentialData and let that have a pointer to a FormData and/or URLSearchParams object","msgtype":"m.text"},"ts":1447239941000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: for the additional public fields","msgtype":"m.text"},"ts":1447239950000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: and then make Fetch's Body deal with this new CredentialData thingie","msgtype":"m.text"},"ts":1447239975000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"`sendBeacon()` returns a boolean; where is the data exposed?","msgtype":"m.text"},"ts":1447239982000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: the cross-origin server?","msgtype":"m.text"},"ts":1447239996000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: or the service worker?","msgtype":"m.text"},"ts":1447240016000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I see, sorry. I thought we were still talking about JavaScript access. Thanks.","msgtype":"m.text"},"ts":1447240031000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Service worker is JavaScript :-P","msgtype":"m.text"},"ts":1447240049000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Regarding the \"better way\": I don't understand the suggestion. You're saying `[credential].toCredentialData()` is this new thing? And we pass that to `fetch()`?","msgtype":"m.text"},"ts":1447240089000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Maybe just [credential]?","msgtype":"m.text"},"ts":1447240126000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And give [credential] an additionalData member that can be either a FormData or URLSearchParams object","msgtype":"m.text"},"ts":1447240150000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"How does that make any of this simpler? :)","msgtype":"m.text"},"ts":1447240194000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"1) We don't have to make FormData or URLSearchParams special","msgtype":"m.text"},"ts":1447240220000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"2) The special casing in Fetch with respect to same-origin and such is clearly derived from credentials rather than opaque data","msgtype":"m.text"},"ts":1447240250000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"3) Any new API that accepts FormData and/or URLSearchParams does not have to worry","msgtype":"m.text"},"ts":1447240284000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"4) Any existing API that accepts FormData and/or URLSearchParams does not require branching","msgtype":"m.text"},"ts":1447240299000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(or updating)","msgtype":"m.text"},"ts":1447240309000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So, the developer would do something like `fetch([url], { body: [credential], ... })`?","msgtype":"m.text"},"ts":1447240361000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Yes","msgtype":"m.text"},"ts":1447240367000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And they'd configure the credential somehow to produce the right body for the fetch operation?","msgtype":"m.text"},"ts":1447240441000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: probably by assigning .additionalData to either a FormData or URLSearchParams object (which can be empty)","msgtype":"m.text"},"ts":1447240470000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: and we'd just default to that being FormData if it's undefined","msgtype":"m.text"},"ts":1447240485000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: and if there's clashes between the FormData/URLSearchParams and credential keys we'd probably drop those of the former","msgtype":"m.text"},"ts":1447240523000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ok. I have a feeling that that's just as invasive/weird, but I'll see what spelling it out looks like. I'm certainly happy to have the functionality tied to the credential object and not the opaqueness flag.","msgtype":"m.text"},"ts":1447240584000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: you don't think that not having to touch FormData and URLSearchParams and any of the APIs they interact with alone is worth it?","msgtype":"m.text"},"ts":1447240628000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I do think that's worth it. I'm just not sure I understand how it actually prevents the data from leaking, since it all boils down to a FormData/URLSearchParams under the hood.","msgtype":"m.text"},"ts":1447240688000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Let me walk through the steps before I argue about it, as I think I'm just misunderstanding the proposal. :)","msgtype":"m.text"},"ts":1447240712000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: yeah, there's no FormData or URLSearchParams under the hood, they're just there for the additional fields and determining serialization","msgtype":"m.text"},"ts":1447240757000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I feel somewhat silly for not having thought of this solution to the additional fields problem earlier","msgtype":"m.text"},"ts":1447240914000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ok. I'll spell it out after lunch to see if I can make it make sense to myself. :) Thanks!","msgtype":"m.text"},"ts":1447240985000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"annevk: Ok. I think I've wrapped my head around your suggestion. Assuming I've understood it, I like it!","msgtype":"m.text"},"ts":1447247787000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"annevk: I'm confused a bit about how to differentiate between the places where we want the body to be available and those where we don't, however.","msgtype":"m.text"},"ts":1447247813000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"When you have a minute*, let me know. :)","msgtype":"m.text"},"ts":1447247820000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"is there any reason why the spec here doesn't just specify CharacterData instead of those three structures specifically? https://dom.spec.whatwg.org/#dom-node-nodevalue","msgtype":"m.text"},"ts":1447247991000,"senderName":"frewsxcv","senderId":"frewsxcv@irc"},
{"content":{"body":"annevk:","msgtype":"m.text"},"ts":1447248100000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"annevk: JakeA I have a question about FetchEvent.clientId","msgtype":"m.text"},"ts":1447248130000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"annevk: JakeA for a navigation request event.clientId should be the id for the client of the source browsing context, right?","msgtype":"m.text"},"ts":1447248193000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"jungkees: I'm happy with that, if it matches fetch's definition of client (I think it does)","msgtype":"m.text"},"ts":1447248329000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: JakeA: I think request's client in fetch is also the environment where the request is initiated","msgtype":"m.text"},"ts":1447248442000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"annevk: JakeA: One thing I was confused is.. when the browsing context is navigated, a new client is created which is different from the one the request was initiated..","msgtype":"m.text"},"ts":1447248521000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"jungkees: in fetch, or in service worker?","msgtype":"m.text"},"ts":1447248550000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: new client here is in Navigate algorithm.. when a new Window object is created","msgtype":"m.text"},"ts":1447248612000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"mkwst: I was assuming we'd expose the body to \"fetch\" only and since passing a Credential sets the skip service worker flag and same-origin flag we don't really have to consider anything else","msgtype":"m.text"},"ts":1447248620000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: so clients.get(e.clientId) for a navigation request will not return any result","msgtype":"m.text"},"ts":1447248641000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"annevk: Well, we expose it to fetch by adding it to `BodyInit`, right? Which means we still need to poke at Beacon.","msgtype":"m.text"},"ts":1447248653000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"frewsxcv: I would probably accept a PR that simplifies that","msgtype":"m.text"},"ts":1447248679000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: is new window object always created in navigate? Even with content-disposition responses?","msgtype":"m.text"},"ts":1447248696000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: as the client for that id should be gone by that time.. Is it an expected behavior?","msgtype":"m.text"},"ts":1447248698000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"mkwst: we could also do (BodyInit or Credential) in Fetch","msgtype":"m.text"},"ts":1447248714000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't think with content-disposition case","msgtype":"m.text"},"ts":1447248720000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"mkwst: to avoid adding it elsewhere","msgtype":"m.text"},"ts":1447248720000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah. I was thinking that too.","msgtype":"m.text"},"ts":1447248728000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: I like that better since it avoids XMLHttpRequest too","msgtype":"m.text"},"ts":1447248739000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: But put that to the side for the moment.","msgtype":"m.text"},"ts":1447248749000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"JakeA: but in general in Navigate (https://html.spec.whatwg.org/multipage/browsers.html#navigate) step 24, it create a new Window object","msgtype":"m.text"},"ts":1447248782000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"It's not clear to me what pieces I need to define in order to ensure that `Body`'s various methods won't leak data, while at the same time allowing the Fetch mechanisms to actually submit something.","msgtype":"m.text"},"ts":1447248806000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"That is, if I override `extract` or `consume body`, I break various things.","msgtype":"m.text"},"ts":1447248827000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"jungkees: since the window isn't always created, I guess a client isn't always created. The clientId should reference the initiating client, or be undefined","msgtype":"m.text"},"ts":1447248917000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"mkwst: yeah, I see what you mean","msgtype":"m.text"},"ts":1447248921000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: yeah, I agree event.clientId should reference the *initiating client*.","msgtype":"m.text"},"ts":1447249057000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"mkwst: it seems like adding an opaque flag to request and setting/checking that would be the way to go","msgtype":"m.text"},"ts":1447249072000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: then in which occasion would it be undefined? when the document/window was discarded before the UA fires fetch event?","msgtype":"m.text"},"ts":1447249100000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"annevk: Doing that in \"consume body\", you mean?","msgtype":"m.text"},"ts":1447249120000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"(That is, throwing in \"consume body\" iff the flag is set)","msgtype":"m.text"},"ts":1447249132000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"jungkees: if the initiator was another origin","msgtype":"m.text"},"ts":1447249148000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"mkwst: yeah, similar to the disturbed flag","msgtype":"m.text"},"ts":1447249168000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok. i'll try that out.","msgtype":"m.text"},"ts":1447249179000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"JakeA: yeah that shouldn't be exposed","msgtype":"m.text"},"ts":1447249191000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"JakeA: so by saying \"a client for a navigation request could be null\" in our previous discussion meant that case basically?","msgtype":"m.text"},"ts":1447249257000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"jungkees: yep!","msgtype":"m.text"},"ts":1447249273000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: alright!","msgtype":"m.text"},"ts":1447249278000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"I think for navigation the client would be pretty much always null","msgtype":"m.text"},"ts":1447249295000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Since the client is what's being requested","msgtype":"m.text"},"ts":1447249300000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I don't think it is the case for FetchEvent.clientId?","msgtype":"m.text"},"ts":1447249349000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"annevk: Shouldn't it be *initiating* client's id?","msgtype":"m.text"},"ts":1447249384000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"Define initiating?","msgtype":"m.text"},"ts":1447249396000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I mean request's client","msgtype":"m.text"},"ts":1447249419000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"annevk: a fetch event abstracts a request basically","msgtype":"m.text"},"ts":1447249457000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"Hmm, I wonder if the specification is correct for all this","msgtype":"m.text"},"ts":1447249512000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Navigation is really poorly defined","msgtype":"m.text"},"ts":1447249522000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the client for a fetch event being a client for a destination of the requested resource seems odd though","msgtype":"m.text"},"ts":1447249555000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"annevk: in the current Navigate algorithm, request's client is set to the source browsing context's Window object's environment settings object always","msgtype":"m.text"},"ts":1447249600000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"Sure","msgtype":"m.text"},"ts":1447249638000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: you want to store clientID on document btw","msgtype":"m.text"},"ts":1447249700000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Anyway, I think it's unlikely we'll find good answers here until navigation is more flushed out","msgtype":"m.text"},"ts":1447249752000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I didn't look that bit yet","msgtype":"m.text"},"ts":1447249795000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"annevk: but I see places in Handle Fetch that I should update.. basically need to move some steps that update the service worker client's state to HTML I guess","msgtype":"m.text"},"ts":1447249882000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"annevk: When my next minute* comes around, I'd appreciate it if you could skim https://w3c.github.io/webappsec-credential-management/#monkey-patching-fetch.","msgtype":"m.text"},"ts":1447249981000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: you also need to propagate the flag when you create a new Request object from an existing Request object","msgtype":"m.text"},"ts":1447250343000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: and some of the stuff needs to use internal algorithms rather than set() directly, and we probably want to structured clone or equivalent FormData/URLSearchParams first as otherwise the password would still be exposed to those holding a reference","msgtype":"m.text"},"ts":1447250425000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Good points, all. Thanks.","msgtype":"m.text"},"ts":1447250631000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: ah, no structured clone defined yet, so you want to do something equivalent to that","msgtype":"m.text"},"ts":1447250842000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah. I wrote \"a copy of\" and will actually define things if we decide to go this route.","msgtype":"m.text"},"ts":1447250878000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"can I write something like \"Execute the initial value of `set(name, value)` on x and y\"? Or do I really need to copy/paste the algorithm out of XHR>?","msgtype":"m.text"},"ts":1447251050000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: I think it would be easier to update https://fetch.spec.whatwg.org/#concept-bodyinit-extract with something specific for credentials","msgtype":"m.text"},"ts":1447251330000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That's what I'm doing?","msgtype":"m.text"},"ts":1447251371000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: \"copy\" the form data or object's list, mangle that with the password stuff, serialize","msgtype":"m.text"},"ts":1447251373000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Or you mean, don't recurse into extract again?","msgtype":"m.text"},"ts":1447251378000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: yeah, perhaps do abstract out some bits from extract so you can reuse them","msgtype":"m.text"},"ts":1447251408000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It seems like that would be harder than just adjusting the FormData or URLSearchParams object.","msgtype":"m.text"},"ts":1447251470000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Well, maybe not. You're suggesting that I take out the internal list, operate on it, and then feed it into the appropriate encoding algorithm?","msgtype":"m.text"},"ts":1447251581000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":" I guess that would let me avoid defining structured clone on those objects.","msgtype":"m.text"},"ts":1447251599000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: yeah","msgtype":"m.text"},"ts":1447251602000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what does this mean? https://github.com/whatwg/dom/blob/master/dom.bs#L3227","msgtype":"m.text"},"ts":1447252338000,"senderName":"frewsxcv","senderId":"frewsxcv@irc"},
{"content":{"body":"JakeA: jungkees: you guys are saying if I follow a link from searchengine.com that is not controlled, and navigate to a controlled page, the clientid will point at the cross-origin, non-controlled searchengine.com?","msgtype":"m.text"},"ts":1447252883000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"or maybe you guys moved past that","msgtype":"m.text"},"ts":1447252920000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I think I agree with annevk the clientId should be null for navigate","msgtype":"m.text"},"ts":1447252951000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: we said it'd be undefined if the client was cross origin. Although I'm happy for always null, no strong feelings","msgtype":"m.text"},"ts":1447252984000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I've just been dealing with a lot of this stuff for getting console reports back to the right window for a navigation... its a major pain","msgtype":"m.text"},"ts":1447252992000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: undefined is fine... but it feels weird to me to point to the initiating client for a navigation","msgtype":"m.text"},"ts":1447253010000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"frewsxcv: {{Text}}?","msgtype":"m.text"},"ts":1447253026000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: sorry, line above that https://github.com/whatwg/dom/blob/master/dom.bs#L3226","msgtype":"m.text"},"ts":1447253042000,"senderName":"frewsxcv","senderId":"frewsxcv@irc"},
{"content":{"body":"frewsxcv: it's a bikeshed shortcut for referencing an object","msgtype":"m.text"},"ts":1447253042000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: why does it feel weird? (I don't disagree, just curious)","msgtype":"m.text"},"ts":1447253053000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"frewsxcv: ah, AttrExodus is basically https://github.com/whatwg/dom/issues/102","msgtype":"m.text"},"ts":1447253068000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I mean, what if the SW wants to postMessage() the client its controlling... I think it would be natural to assume that is FetchEvent.clientId","msgtype":"m.text"},"ts":1447253093000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"but in this case it would not be... it would some other random page","msgtype":"m.text"},"ts":1447253104000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: that would work fine in the content-disposition case","msgtype":"m.text"},"ts":1447253143000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Since the previous client remains","msgtype":"m.text"},"ts":1447253156000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I'm really thinking about non-controlled navigates to controlled case","msgtype":"m.text"},"ts":1447253176000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"doesn't have to be cross-origin... ctrl-shift-reload and you have a non-controlled window","msgtype":"m.text"},"ts":1447253197000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"But I agree it's not useful in a navigate case. Might be useful in a \"open in new tab\" case as the client stays around","msgtype":"m.text"},"ts":1447253201000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Ohh I see","msgtype":"m.text"},"ts":1447253213000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Yeah, this would be the one case where the request's client isn't controlled","msgtype":"m.text"},"ts":1447253246000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: well, it could also be across scope boundaries on same origin... from ~alice home dir to ~bob home dir","msgtype":"m.text"},"ts":1447253275000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: I guess it would be nice if we had some definition of FetchEvent.clientId that was consistent... \"always the client that initiated even if its not-controlled\"... or \"the client being controlled by this service worker related to this network event\"","msgtype":"m.text"},"ts":1447253353000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I think that latter is more likely to be what people expect","msgtype":"m.text"},"ts":1447253361000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"but I'm a terrible judge of these things","msgtype":"m.text"},"ts":1447253372000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: well, I think the definition we were going for is \"the client that initiated the request, unless it's cross-origin\"","msgtype":"m.text"},"ts":1447253627000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: but I'm happy to make an exception for navigations","msgtype":"m.text"},"ts":1447253636000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: hmm, ok... my confusion then... I don't think we should make an exception for navigation","msgtype":"m.text"},"ts":1447253699000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I'm not too bothered because I don't think client is useful for navigations","msgtype":"m.text"},"ts":1447253729000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: in future, we might want something like fetchEvent.getDestinationClient() that returns a promise for the client that processes the response","msgtype":"m.text"},"ts":1447253745000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"which, in a navigation's case, would be the new client","msgtype":"m.text"},"ts":1447253761000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I'm more worried about a service worker that tries to use it and doesn't distinguish between navigations and non-navigations... and gets unexpected behavior","msgtype":"m.text"},"ts":1447253764000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"not sure what would happen in the content-disposition case though… I guess that's still a new client","msgtype":"m.text"},"ts":1447253780000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: I can see people expecting clientId to be referencing the *new* client for navigations","msgtype":"m.text"},"ts":1447253828000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"but it seems too early to have that, maybe I'm wrong","msgtype":"m.text"},"ts":1447253855000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yea, it would be very different from a client is today I think... the window/worker/etc always exists before the Client object today AFAICT","msgtype":"m.text"},"ts":1447253880000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I guess we know there will be a new client, it's only <object> where it isn't deterministic","msgtype":"m.text"},"ts":1447253889000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: agreed","msgtype":"m.text"},"ts":1447253900000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: is there a client if the SW ends up rejecting the respondWith()?  is the error page considered a client?","msgtype":"m.text"},"ts":1447253932000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I suppose it's other-origin so no","msgtype":"m.text"},"ts":1447253957000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: not sure chrome considers it other-origin based on some wpt tests we saw","msgtype":"m.text"},"ts":1447253982000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: another condition that would be tricky... provide the Client object, but then the SW returns an opaqueredirect that goes... somewhere","msgtype":"m.text"},"ts":1447254002000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"you could end up same-origin or cross-origin","msgtype":"m.text"},"ts":1447254012000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: ohhh, so if I window.open a page, get a network failure, I can get at the DOM of the error page? That seems weird","msgtype":"m.text"},"ts":1447254026000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: ah yes, that's a perfect reason not to expose eventual client","msgtype":"m.text"},"ts":1447254051000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: some of the blink wpt tests assumed the frame.contentwindow was available to top level window, yes... we don't expose frame.contentwindow if the frame is an error page in gecko","msgtype":"m.text"},"ts":1447254058000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"maybe blink hides the contents of frame.contentwindow... I think error pages are basically unspec'd...","msgtype":"m.text"},"ts":1447254096000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"or loosely spec'd","msgtype":"m.text"},"ts":1447254102000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1447254121000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: might be interesting if we pass the initiating client in FetchEvent.clientId for a navigation... and then the SW uses it to call Client.navigate()","msgtype":"m.text"},"ts":1447254311000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: heh, I wonder when pages stop listening to further navigation attempts. I guess they don't until they're gone?","msgtype":"m.text"},"ts":1447254377000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I suppose navigate() could throw InvalidState or something... but its a bit wonky","msgtype":"m.text"},"ts":1447254423000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: does the spec say when a window is destroyed?","msgtype":"m.text"},"ts":1447254532000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I seem to recall bz telling me window destruction was basically not defined and everything leaks as far as the spec is concerned","msgtype":"m.text"},"ts":1447254550000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: I guess the ability to navigate something thats already navigating suggests to me maybe we shoudl just set clientId undefined for navigations","msgtype":"m.text"},"ts":1447254890000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"to start anyway","msgtype":"m.text"},"ts":1447254911000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: some of it is defined afaik","msgtype":"m.text"},"ts":1447255881000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: see stuff around \"discard a Document\"","msgtype":"m.text"},"ts":1447255925000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: doesn't seem to define clearly when thats invoked \"User agents may discard top-level browsing contexts at any time (typically, in response to user requests, e.g. when a user force-closes a window containing one or more top-level browsing contexts). \"","msgtype":"m.text"},"ts":1447256197000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: another problematic issue might be... with a navigation the initiating document might end up in the bfcache... if client means document, then allowing SW to postMessage a document in the bfcache seems weird to me... I guess thats impl issue, but its complexity","msgtype":"m.text"},"ts":1447256252000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yeah, it seems like undefined is a good answer until we work it out","msgtype":"m.text"},"ts":1447256310000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1447256359000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"jungkees: ^^^","msgtype":"m.text"},"ts":1447256362000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: JakeA: what was the outcome for this issue at the f2f?  its hard to tell from the issue text https://github.com/slightlyoff/ServiceWorker/issues/719","msgtype":"m.text"},"ts":1447260518000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: it's for annevk and sicking to fight it out still","msgtype":"m.text"},"ts":1447260996000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: no opinion from the Google sec team?","msgtype":"m.text"},"ts":1447261073000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: I'll try and drag one of them into it","msgtype":"m.text"},"ts":1447261119000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"cool, thanks","msgtype":"m.text"},"ts":1447261133000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"JakeA: sicking: does this pending cage match also include the same issue for Performance API?","msgtype":"m.text"},"ts":1447261154000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I assume so","msgtype":"m.text"},"ts":1447261170000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1447261171000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"ok, thanks","msgtype":"m.text"},"ts":1447261176000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"i don't know what the issue is for Performance API","msgtype":"m.text"},"ts":1447261183000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: it has the same problem where it provides information about subresources via timing markers and whatnot","msgtype":"m.text"},"ts":1447261208000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"but I think my opinion about 719 is pretty specific to stylesheets","msgtype":"m.text"},"ts":1447261213000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: right... its performance API + stylesheets issue","msgtype":"m.text"},"ts":1447261231000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: does it affect only stylesheets? Or other things as well?","msgtype":"m.text"},"ts":1447261232000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: just stylesheets. The resource timing API will tell you about imports and bg images, as serviceworker does/did","msgtype":"m.text"},"ts":1447261267000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"ok, then yeah, it'll probably be the same outcome","msgtype":"m.text"},"ts":1447261277000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: see the private message I sent you","msgtype":"m.text"},"ts":1447261286000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: I thought that was resolved to not introduce more SOP holes","msgtype":"m.text"},"ts":1447261489000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: that's certainly what we're doing for v1, but it's backwards compatible to change to the other thing should sicking defeat you in the battle of the century","msgtype":"m.text"},"ts":1447261556000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"If your CSS is on a static host it can make things tougher, but I get the SOP thing so I'm not fighting it","msgtype":"m.text"},"ts":1447261618000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: this is a crazy idea, but do you think it would be web compatible to load cross-site stylesheets without cookies?","msgtype":"m.text"},"ts":1447261642000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"wait, we want to implement this in v1 and then maybe remove it in v2?  its not really trivial to implement correctly","msgtype":"m.text"},"ts":1447261681000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: so far nobody from the security team has actually agreed with sicking so I doubt we'd remove it in v2","msgtype":"m.text"},"ts":1447261734000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: sicking: I'm thoroughly confused about what I should be implementing or not","msgtype":"m.text"},"ts":1447261774000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: unless you do something like <link rel=stylesheet crossorigin=\"use-credentials\">","msgtype":"m.text"},"ts":1447261799000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"wanderview: the version without the new SOP hole","msgtype":"m.text"},"ts":1447261810000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: my opinion is certainly that you shouldn't spend time on it. But clearly Anne disagrees","msgtype":"m.text"},"ts":1447261838000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: I'm not sure why we'd want to try that, let alone couple it with this","msgtype":"m.text"},"ts":1447261838000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I feel this is 180 degrees from the first response I got from JakeA","msgtype":"m.text"},"ts":1447261852000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: *shrug*. we don't have to couple it","msgtype":"m.text"},"ts":1447261866000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"wanderview: see above, I recalled something different from him","msgtype":"m.text"},"ts":1447261888000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sicking: if that was a good answer we'd allow access to the response of any non-credentialed request","msgtype":"m.text"},"ts":1447261894000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"but then there's the intranet & local server issue","msgtype":"m.text"},"ts":1447261902000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: i'm not saying that it makes it 100% safe. But it makes it *a lot* less likely that the response contains sensitive data","msgtype":"m.text"},"ts":1447261933000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"JakeA: is chrome putting in this block?  and how is it implementing the corner cases I ask about here? https://github.com/slightlyoff/ServiceWorker/issues/719#issuecomment-149908726","msgtype":"m.text"},"ts":1447261941000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: keep in mind that we're already leaking a lot of data from text/css resources on intranet/local servers","msgtype":"m.text"},"ts":1447261982000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: I agree, but it seems weird to do a special thing for CSS here. Personally I'm happy with exposing background img requests & @import, but I can't deny it's exposing more info than we do now","msgtype":"m.text"},"ts":1447262005000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: i'm not saying it's a perfect solution. There definitely aren't any here.","msgtype":"m.text"},"ts":1447262066000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: it's annevk you have to convince. I think it's safe to say that request triggered by resolved styles are already exposed through getComputedStyle, but font urls and @import are not. It's whether we care","msgtype":"m.text"},"ts":1447262191000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I don't particularly care… buuuuut I don't have a good argument aside from \"c'moooooon\"","msgtype":"m.text"},"ts":1447262209000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: my question is just if you think it's web-compatible","msgtype":"m.text"},"ts":1447262253000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"wanderview: those are good edge cases. I think the rule annevk wants is \"if the CSSOM doesn't expose it, the SW shouldn't hear about the requests it triggers\"","msgtype":"m.text"},"ts":1447262279000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"sicking: to drop cookies from CSS requests? That sounds like a big change. I worry about font providers","msgtype":"m.text"},"ts":1447262309000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: does CSSOM have the same issue?  can it bypass an intermediate cross-origin stylesheet and see stuff in a same-origin @import further down the tree?","msgtype":"m.text"},"ts":1447262323000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"But I don't have any failure cases to show off-hand","msgtype":"m.text"},"ts":1447262328000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: I don't know :(","msgtype":"m.text"},"ts":1447262336000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: nope","msgtype":"m.text"},"ts":1447262348000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it can see background-image further down the tree","msgtype":"m.text"},"ts":1447262365000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Actually, I think you'd need to go through the cross origin CSSOM to get to the import","msgtype":"m.text"},"ts":1447262367000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"and other uris that are part of style","msgtype":"m.text"},"ts":1447262392000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"so even if b.com's css @imports back to a.com, you won't be able to get the CSSOM for it","msgtype":"m.text"},"ts":1447262396000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"a rule like \".error { background-image: url(...)\" exposes the url no matter how deep in the import chain the rule lives","msgtype":"m.text"},"ts":1447262470000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"right, that's not the interesting case","msgtype":"m.text"},"ts":1447262513000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"although even there exposing the URL directly is very different from having to recreate all possible selectors","msgtype":"m.text"},"ts":1447262550000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sicking: font urls and @import aren't exposed through computed styles","msgtype":"m.text"},"ts":1447262560000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: right","msgtype":"m.text"},"ts":1447262570000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"annevk: i don't agree that it's very different","msgtype":"m.text"},"ts":1447262589000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"having to create all possible trees, really","msgtype":"m.text"},"ts":1447262589000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"try to explain to anyone what is and is not safe","msgtype":"m.text"},"ts":1447262611000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"I think the only reasonable thing you would say is \"that url is exposed\"","msgtype":"m.text"},"ts":1447262640000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"you don't have to enumerate all possible trees or all possible selectors","msgtype":"m.text"},"ts":1447262673000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"we still made :visited attacks harder","msgtype":"m.text"},"ts":1447262678000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that is very different","msgtype":"m.text"},"ts":1447262686000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Why don't you have to enumerate trees and classes, etc.?","msgtype":"m.text"},"ts":1447262700000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that wasn't about exposing information in stylesheets","msgtype":"m.text"},"ts":1447262701000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"you don't have to enumerate *all* trees/classes","msgtype":"m.text"},"ts":1447262716000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"you just have to enumerate enough of them","msgtype":"m.text"},"ts":1447262726000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"good luck explaining which ones can or can't be enumerated","msgtype":"m.text"},"ts":1447262737000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"if i saw a rule like the above, i would definitely tell the developer that that rule could be read","msgtype":"m.text"},"ts":1447262771000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"For that example, sure","msgtype":"m.text"},"ts":1447262841000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: so what is google implementing in this area?","msgtype":"m.text"},"ts":1447262989000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"But I think there is a difference between handing the attacker all URLs and making them work for a subset of URLs","msgtype":"m.text"},"ts":1447263018000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sicking: I haven't heard any objections to \"fixing\" this, but I haven't talked directly to the team about it","msgtype":"m.text"},"ts":1447263071000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: ok","msgtype":"m.text"},"ts":1447263081000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"annevk: the difference is fairly small, and comes at a high cost","msgtype":"m.text"},"ts":1447263106000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"I'm inclined not to block our release of SW on this issue","msgtype":"m.text"},"ts":1447263140000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"*shrug*","msgtype":"m.text"},"ts":1447263152000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: we've shipped with it, resource timing has the same issue","msgtype":"m.text"},"ts":1447263170000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: as an author, i would effectively have to assume that any rules can be guessed and not put sensitive information in URLs other than @import ones and fonts","msgtype":"m.text"},"ts":1447263170000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"JakeA: yea, and I think we should try to define some of the details before implementing... because there is enough nuance here we could end up with incompatible implementations","msgtype":"m.text"},"ts":1447263210000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I'm less worried about breaking the security of the web with this, more concerned about breaking sites that come to rely on current Chrome (and soon Firefox) behaviour","msgtype":"m.text"},"ts":1447263211000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"same here","msgtype":"m.text"},"ts":1447263245000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"JakeA: also, the spec has been changed for resource timing, but in a way which does not really address @import at all as far as I can tell","msgtype":"m.text"},"ts":1447263438000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"doesn't address the corner cases from @import, I mean","msgtype":"m.text"},"ts":1447263451000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: JakeA: did you guys talk about the storage API v2 stuff at all at the f2f?","msgtype":"m.text"},"ts":1447263654000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"storage pressure events vs boxes, etc","msgtype":"m.text"},"ts":1447263669000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: nah, we only dealt with v1 stuff","msgtype":"m.text"},"ts":1447263676000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1447263700000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"we'll have more fun at the next f2f with v2 stuff, which will be in the US","msgtype":"m.text"},"ts":1447263701000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: is there a date for it?","msgtype":"m.text"},"ts":1447263709000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: there's rumblings of a web components f2f… if that comes together in early December we'll try and sync with that. Otherwise it'll be mid-late Feb","msgtype":"m.text"},"ts":1447263755000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Then April in SF for the extensible web summit","msgtype":"m.text"},"ts":1447263776000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"ok, thanks","msgtype":"m.text"},"ts":1447263847000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"does anyone here have a link to that research that showed interstitials prompting to install apps reduced engagement?","msgtype":"m.text"},"ts":1447268037000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: I seem to recall you mentioning it before...","msgtype":"m.text"},"ts":1447268046000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"nevermind, I finally found it: http://googlewebmastercentral.blogspot.com/2015/07/google-case-study-on-app-download-interstitials.html","msgtype":"m.text"},"ts":1447268188000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: has ReadableStream constructor shipped in chrome yet?","msgtype":"m.text"},"ts":1447270775000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I guess not... I get \"Illegal constructor\" in canary devtools","msgtype":"m.text"},"ts":1447271059000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"and it still thinks ReadableByteStream is a thing","msgtype":"m.text"},"ts":1447271114000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Yeah still trying to land the patch but vacation plus BlinkOn plus TC39...","msgtype":"m.text"},"ts":1447271705000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: FWIW, early December won't have any Mozillians attending most likely","msgtype":"m.text"},"ts":1447271986000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: sorry, I meant if the plan comes together *by* December I'll sync with that, rather than organise something independent for February","msgtype":"m.text"},"ts":1447284498000,"senderName":"JakeA","senderId":"JakeA@irc"}
]