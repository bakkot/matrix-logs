[
{"content":{"body":"jyasskin: ta, wonder if that is something we should offer control over at some point","msgtype":"m.text"},"ts":1492664547000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: i now get a link error in cssom-view that https://w3c.github.io/uievents/#idl-mouseeventinit isn't marked for export, but it looks like it should be?","msgtype":"m.text"},"ts":1492671269000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: Looks good to me with a fresh update?","msgtype":"m.text"},"ts":1492672417000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Simons-MBP:cssom-view zcorpan$ bikeshed","msgtype":"m.text"},"ts":1492672522000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"LINK ERROR: No 'dictionary' refs found for 'MouseEventInit' that are marked for export.","msgtype":"m.text"},"ts":1492672523000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"TabAtkins: i just updated","msgtype":"m.text"},"ts":1492672532000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"wonder what's up with this id:   <p id=\"date-state-%28type=date%29\">When an <code>input</code> element's <code data-x=\"attr-input-type\">type</code> attribute is in","msgtype":"m.text"},"ts":1492673667000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"(only id with % in source)","msgtype":"m.text"},"ts":1492673674000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: would ( and ) trip something up?","msgtype":"m.text"},"ts":1492674199000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: a few lines above has   <h6 id=\"date-state-(type=date)\"><dfn data-x=\"attr-input-type-date\">Date</dfn> state (<code data-x=\"\">type=date</code>)</h6>","msgtype":"m.text"},"ts":1492674328000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"runs a blame","msgtype":"m.emote"},"ts":1492674342000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"oh, I wonder if it's a workaround for crappy browsers","msgtype":"m.text"},"ts":1492674460000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"b29fb58ce6139a1e297a915e7291e637c3e1b561 added these ids","msgtype":"m.text"},"ts":1492674622000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"the link on caniuse is https://html.spec.whatwg.org/multipage/forms.html#date-state-(type=date) - not percent-escaped","msgtype":"m.text"},"ts":1492674695000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"TabAtkins: https://drafts.csswg.org/bikeshed/cssom-view/","msgtype":"m.text"},"ts":1492677880000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"do we have branch snapshots for HTML?","msgtype":"m.text"},"ts":1492678155000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I don't think so, we should probably start poking at the tooling again a bit and maybe move more of it to Travis","msgtype":"m.text"},"ts":1492678214000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: OK","msgtype":"m.text"},"ts":1492678267000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"is there a way I can force a snapshot build for a PR?","msgtype":"m.text"},"ts":1492678283000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that is, by hacking on the .travis.yml on the branch maybe?","msgtype":"m.text"},"ts":1492678303000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"or deploy.sh on the branch?","msgtype":"m.text"},"ts":1492678311000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"looks while he’s waiting","msgtype":"m.emote"},"ts":1492678339000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: no, just locally","msgtype":"m.text"},"ts":1492678394000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh I see no deploy stuff gets called from Travis for the HTML spec","msgtype":"m.text"},"ts":1492678394000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1492678398000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: right","msgtype":"m.text"},"ts":1492678399000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: it's the only spec we build on the server making it a bit of a liability","msgtype":"m.text"},"ts":1492678439000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1492678470000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"well for now I just want to be able to generate multipage output with a change for y’all to look at","msgtype":"m.text"},"ts":1492678499000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I guess I can just scp it to my own server","msgtype":"m.text"},"ts":1492678514000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Ah yeah, that's what I do","msgtype":"m.text"},"ts":1492679268000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"adds a bunch of hashes to his CSP policy for all the inline style elements the HTML spec has","msgtype":"m.emote"},"ts":1492680194000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"finaally had to resort to 'unsafe-inline\" and 'unsafe-eval'","msgtype":"m.emote"},"ts":1492683197000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"morning folks. had a thought regarding custom elements.. couldn't i theoretically make my own custom elements via $('my-el-name').html('....') ? and maybe set some css on it to display: inline-block etc.","msgtype":"m.text"},"ts":1492687265000,"senderName":"timwis","senderId":"timwis@irc"},
{"content":{"body":"i know custom element spec provides more features but for basic stuff like abstracting a complex widget's html, it seems like this is a much lighter solution with a lot of browser support, no?","msgtype":"m.text"},"ts":1492687324000,"senderName":"timwis","senderId":"timwis@irc"},
{"content":{"body":"timwis: if you don't need complexity then you don't need it...","msgtype":"m.text"},"ts":1492687608000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it being custom element spec?","msgtype":"m.text"},"ts":1492687659000,"senderName":"timwis","senderId":"timwis@irc"},
{"content":{"body":"timwis: yeah, there's always multiple ways to do things, what is best depends on the requirements and use cases","msgtype":"m.text"},"ts":1492687815000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: i guess my question is whether there's anything bad about using a fake tag. pretty sure that's an HTMLUnknownElement. and just adding functionality to it","msgtype":"m.text"},"ts":1492687909000,"senderName":"timwis","senderId":"timwis@irc"},
{"content":{"body":"timwis: can't think of much right now","msgtype":"m.text"},"ts":1492687970000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"thanks annevk. Just threw together a proof of concept: https://github.com/timwis/standards-components/tree/unknown-element (demo: http://phl-standards-unknown-elements.surge.sh/)","msgtype":"m.text"},"ts":1492689592000,"senderName":"timwis","senderId":"timwis@irc"},
{"content":{"body":"timwis: it's confusing for other developers looking at your code. If you're just using a glorified div, then you should use the div tag.","msgtype":"m.text"},"ts":1492692530000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That was the one thing I could think of, but I figured it might be fine since the semantics are locally-bound anyway","msgtype":"m.text"},"ts":1492692597000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"web-platform-tests doesn't appear to have tests for Navigator objects...","msgtype":"m.text"},"ts":1492692782000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It does","msgtype":"m.text"},"ts":1492692970000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: https://github.com/w3c/web-platform-tests/tree/master/html/webappapis/system-state-and-capabilities/the-navigator-object","msgtype":"m.text"},"ts":1492692993000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh right, I somehow skipped right over that in my grep results","msgtype":"m.text"},"ts":1492693067000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Thanks","msgtype":"m.text"},"ts":1492693071000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: so the way we deal with tearoff objects from Window seems really quite bad, they all have their own language and model, some based on document, some on the Window object, but no consistent language","msgtype":"m.text"},"ts":1492694193000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: agreed","msgtype":"m.text"},"ts":1492695406000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: ah, you mean like <div data-component=\"phl-button\"></div>","msgtype":"m.text"},"ts":1492695411000,"senderName":"timwis","senderId":"timwis@irc"},
{"content":{"body":"timwis: sure, or just use class=\"\"","msgtype":"m.text"},"ts":1492695420000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"or data-button","msgtype":"m.text"},"ts":1492695427000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"is the only downside to using <phl-button> instead that it's less obvious what's going on to people reading the code?","msgtype":"m.text"},"ts":1492695435000,"senderName":"timwis","senderId":"timwis@irc"},
{"content":{"body":"There are probably a few other minor ones, including it being non-conformant HTML, but that's the major one.","msgtype":"m.text"},"ts":1492695471000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: the one thing I'm on sure on is whether there should be a central location saying \"Window has an associated X, Y, and Z\" or if each object should define that in its definition.","msgtype":"m.text"},"ts":1492695506000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: sorry if this is an obvious answer, but what's wrong with it being non-conformant HTML?","msgtype":"m.text"},"ts":1492695527000,"senderName":"timwis","senderId":"timwis@irc"},
{"content":{"body":"Domenic: not sure on?","msgtype":"m.text"},"ts":1492695584000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I'm fairly convinced still we want formalized slots and informal slots until that day comes","msgtype":"m.text"},"ts":1492695606000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: the current haphazard way of describing relations between objects and state makes that very clear to me","msgtype":"m.text"},"ts":1492695648000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: not sure whether WIndow should describe all its slots, or if e.g. Navigator should say \"each window has an associated Navigator object\"","msgtype":"m.text"},"ts":1492695751000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I think the latter style is confusing","msgtype":"m.text"},"ts":1492695946000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: it's acceptable, but not how I'd like things to be","msgtype":"m.text"},"ts":1492695966000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: what might work is that IDL takes care of most of it once we have formalized slots as I proposed long ago","msgtype":"m.text"},"ts":1492696043000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm still unclear on the benefits of formalized ones over informal ones.","msgtype":"m.text"},"ts":1492696059000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: so that when a Window object is allocated, IDL allocates a Navigator and Location object as well","msgtype":"m.text"},"ts":1492696062000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: in the same global","msgtype":"m.text"},"ts":1492696069000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: and then puts them in their respective slots, which navigator and location would end up returning from","msgtype":"m.text"},"ts":1492696098000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm, I never realized there was an implicit allocation of slot values implied.","msgtype":"m.text"},"ts":1492696113000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(most of that could effectively be codegen at that point)","msgtype":"m.text"},"ts":1492696126000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That's an idea for extending formal slots","msgtype":"m.text"},"ts":1492696145000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And making things easier to define and more robust by default","msgtype":"m.text"},"ts":1492696177000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Why is it easier to auto-create Navigator and Location into a formal slot than into their readonly attributes?","msgtype":"m.text"},"ts":1492697434000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: the latter doesn't work? That's just a getter","msgtype":"m.text"},"ts":1492697753000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: It seems like the same sort of webidl wording that would auto-create into slots could also specify that readonly attributes, maybe marked by an [ExtendedAttribute], have an instance in an implicit slot by default.","msgtype":"m.text"},"ts":1492697846000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: sure, that's a valid impl of formalized slots","msgtype":"m.text"},"ts":1492697872000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah, SG.","msgtype":"m.text"},"ts":1492697879000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: I'm just talking at a higher-level here","msgtype":"m.text"},"ts":1492697882000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: what would be a good way to get https://github.com/w3c/web-platform-tests/issues/5625 on the CSSWG's radar? File an issue on https://github.com/w3c/csswg-drafts/issues maybe? Mailing list? Trying to get some broad discussion.","msgtype":"m.text"},"ts":1492704277000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: Since it's part of the Blink ship process I filed a TAG spec review request for Storage. Hopefully any feedback given will be useful/constructive.","msgtype":"m.text"},"ts":1492711175000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: I thought we already did that once?","msgtype":"m.text"},"ts":1492711512000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jsbell: https://github.com/w3ctag/spec-reviews/issues/85","msgtype":"m.text"},"ts":1492711544000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jsbell: nothing really changed since then","msgtype":"m.text"},"ts":1492711555000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk; Oh! Hrm....","msgtype":"m.text"},"ts":1492711585000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"annevk: Huh... for some reason I thought I saw a note saying we intentionally hadn't. Maybe I was dreaming. :P Awesome, I'll close, never mind and thx","msgtype":"m.text"},"ts":1492711714000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Domenic: I'll add 5625 to today's meeting agenda (TabAtkins)","msgtype":"m.text"},"ts":1492725517000,"senderName":"astearns","senderId":"astearns@irc"}
]