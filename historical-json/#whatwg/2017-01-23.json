[
{"content":{"body":"specs don't have 80 chars per line in source rule?","msgtype":"m.text"},"ts":1485167511000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I wonder why, especially given how bad tools github has for reviewing","msgtype":"m.text"},"ts":1485167541000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: 100 generally, these days","msgtype":"m.text"},"ts":1485167546000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1485167553000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: though that's for WHATWG","msgtype":"m.text"},"ts":1485167558000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"no idea what anyone else is doing","msgtype":"m.text"},"ts":1485167568000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is it possible to see a raw diff of a commit ?","msgtype":"m.text"},"ts":1485167610000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: if you have a GitHub URL you can append \".diff\" I think","msgtype":"m.text"},"ts":1485167654000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: or maybe \".patch\", not sure","msgtype":"m.text"},"ts":1485167668000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Both work","msgtype":"m.text"},"ts":1485167684000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"hah","msgtype":"m.text"},"ts":1485167692000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what kind of url","msgtype":"m.text"},"ts":1485167706000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: a commit or PR URL, e.g. https://github.com/whatwg/dom/pull/397.diff","msgtype":"m.text"},"ts":1485167748000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh, after pr","msgtype":"m.text"},"ts":1485167770000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"after commit didn't seem to work in this case","msgtype":"m.text"},"ts":1485167780000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: hmm yeah, weird","msgtype":"m.text"},"ts":1485167802000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Probably fallout from the new review feature","msgtype":"m.text"},"ts":1485167825000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Still works on real commit URLs like https://github.com/whatwg/dom/commit/6b7621282c2e3b222ac585650e484abf4c0a416b.diff","msgtype":"m.text"},"ts":1485167844000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"smaug____: notice that if you just want unified, you can also enable that https://github.com/whatwg/dom/pull/397/files?diff=unified","msgtype":"m.text"},"ts":1485167965000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: see the \"Unified\" and \"Split\" buttons next to \"Review changes\"","msgtype":"m.text"},"ts":1485167985000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I just want wider area to look at the changes","msgtype":"m.text"},"ts":1485168048000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: sounds like you should get a bigger monitor","msgtype":"m.text"},"ts":1485168068000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: github UI has the changes in middle of the page","msgtype":"m.text"},"ts":1485168098000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"tons of white space on left and right","msgtype":"m.text"},"ts":1485168116000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"perhaps the UI has some way to make it look different ?","msgtype":"m.text"},"ts":1485168136000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug: for the \"Split\" view it seems to take up as much space as it can for me, though I don't have my browser fully maximized","msgtype":"m.text"},"ts":1485169268000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug: \"Unified\" does indeed seem rather poor","msgtype":"m.text"},"ts":1485169274000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: familiar with the distinction between named and regular constructor in WebIDL?","msgtype":"m.text"},"ts":1485173510000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: the former require a [[Call]] prop which seems strange.","msgtype":"m.text"},"ts":1485173537000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: as for example, `Image()` throws, while `new Image()` doesn't.","msgtype":"m.text"},"ts":1485173577000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: they are like constructers, but basically are factory methods that require new","msgtype":"m.text"},"ts":1485173655000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: well why don't they instead have a [[Construct]] prop?","msgtype":"m.text"},"ts":1485173715000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: the only named constructor I can think of right now is Image.","msgtype":"m.text"},"ts":1485173777000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: what are examples of other ones?","msgtype":"m.text"},"ts":1485173797000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: I'm not sure what \"factory method that requires new\" actually mean.","msgtype":"m.text"},"ts":1485173846000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: Audio is another one","msgtype":"m.text"},"ts":1485173899000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: right","msgtype":"m.text"},"ts":1485173905000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: I'm trying to understand what the differences are between named and non-named constructors beyond their identifier","msgtype":"m.text"},"ts":1485173956000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: if you used [[Construct]], would they not become Image instances rather than HTMLImageElement?","msgtype":"m.text"},"ts":1485173959000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: you're asking me? :D","msgtype":"m.text"},"ts":1485173979000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: that is why I would expect them to be different","msgtype":"m.text"},"ts":1485174018000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'll look it up in the ES spec","msgtype":"m.text"},"ts":1485174018000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: I think you're right in that's were the critical difference is.","msgtype":"m.text"},"ts":1485174036000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: I'n not sure [[Call]] works though","msgtype":"m.text"},"ts":1485174078000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Also Option()","msgtype":"m.text"},"ts":1485176930000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: oh, right.","msgtype":"m.text"},"ts":1485177026000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I'm trying to understand what NewTarget is precisely in the ES spec--","msgtype":"m.text"},"ts":1485177082000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Oh yes, that's weird","msgtype":"m.text"},"ts":1485177105000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"it's a reference to the constructor when using [[Construct]],","msgtype":"m.text"},"ts":1485177114000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"But then it only seems to be used to set the [[Prototype]] of the created object?","msgtype":"m.text"},"ts":1485177155000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"https://tc39.github.io/ecma262/#sec-built-in-function-objects may be useful? Dunno","msgtype":"m.text"},"ts":1485177175000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"well, for some value of useful, certainly","msgtype":"m.text"},"ts":1485177201000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"\"the [[Construct]] newTarget parameter provides the NewTarget value.\"","msgtype":"m.text"},"ts":1485177242000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"^ so now I know.","msgtype":"m.text"},"ts":1485177463000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I was someone would write a NewTarget explainer. I keep forgetting how it works","msgtype":"m.text"},"ts":1485177590000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And that it's not passed around as value isn't helping","msgtype":"m.text"},"ts":1485177597000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"don't get me started on that second comment","msgtype":"m.text"},"ts":1485177617000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"jochen__: interested in fixing https://github.com/whatwg/html/issues/2282?","msgtype":"m.text"},"ts":1485177676000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jochen__: or are you still stuck outside? ☃️","msgtype":"m.text"},"ts":1485177714000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"no, they let us back in :)","msgtype":"m.text"},"ts":1485178115000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"sure, can do","msgtype":"m.text"},"ts":1485178126000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"I also promised ms2ger a test for this :/","msgtype":"m.text"},"ts":1485178140000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"You did?","msgtype":"m.text"},"ts":1485178186000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: sssh","msgtype":"m.text"},"ts":1485178518000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"https://github.com/whatwg/html/pull/583#issuecomment-176751740","msgtype":"m.text"},"ts":1485178577000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"Hah","msgtype":"m.text"},"ts":1485178601000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Well, where is it? :)","msgtype":"m.text"},"ts":1485178607000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"good question","msgtype":"m.text"},"ts":1485178643000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"do we have a cross browser way that would somehow allow for accessing a document cross origin?","msgtype":"m.text"},"ts":1485178791000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"i thought firefox revokes access to the document if I pass it same origin and then use document.origin to change the current realms origin","msgtype":"m.text"},"ts":1485178825000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"jochen__: through document.domain you can access it","msgtype":"m.text"},"ts":1485178852000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jochen__: when the documents are same origin-domain, but not same origin","msgtype":"m.text"},"ts":1485178883000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh, so the access won't be revoked?","msgtype":"m.text"},"ts":1485178898000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"jochen__: you're thinking of another scenario, where documents are same origin, but then you revoke access in one of them by setting document.domain","msgtype":"m.text"},"ts":1485178991000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: trying to figure out the difference between NamedConstructors and regular ones. LMK if you're around to chat about it later on.","msgtype":"m.text"},"ts":1485179082000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: there's also discrepancies as to how the different vendors implement the spec.","msgtype":"m.text"},"ts":1485179110000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: e.g. Image.prototype === HTMLImageElement.prototype, which per spec should be true.","msgtype":"m.text"},"ts":1485179178000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: and isn't in Blink.","msgtype":"m.text"},"ts":1485179190000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"jochen__: https://dump.testsuite.org/js/documentdomain.htm is the one you're thinking of","msgtype":"m.text"},"ts":1485179302000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm having system fonts completely fail to work on Firefox on Linux. New and old profiles. The only things that work are the generic keywords (serif, sans-serif, etc.). Any ideas?","msgtype":"m.text"},"ts":1485179769000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: This doesn't seem like a channel where people are particularly informed about Firefox Linux fonts","msgtype":"m.text"},"ts":1485180835000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: no, but it's not obvious where is. the support channels are equally useless, and it's in principle a support request and hence off-topic for the dev channels","msgtype":"m.text"},"ts":1485180915000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: And yet it's a reasonably technical question that probably only someone who knows something about font lookup will be able to help with","msgtype":"m.text"},"ts":1485181010000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I'm going to assume that your reason for caring is to do with CSS tests","msgtype":"m.text"},"ts":1485181031000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Therefore it's a dev question","msgtype":"m.text"},"ts":1485181038000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Yes. Though is does coincidentally answer why Firefox has been using different fonts for everything for years. :)","msgtype":"m.text"},"ts":1485181250000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: random thought: Has enough time passed, from the bad old IE days, to do something with the return value of event handlers? For instance, service worker events could pass the return value to event.waitUntil, meaning service worker event listeners could be async functions","msgtype":"m.text"},"ts":1485181875000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: event handlers already do something with the return value","msgtype":"m.text"},"ts":1485182177000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I still suck at reading specs. https://dom.spec.whatwg.org/#concept-event-listener-inner-invoke is the best I could find in terms of a \"call\" point for listeners","msgtype":"m.text"},"ts":1485182339000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I couldn't see the return value being used","msgtype":"m.text"},"ts":1485182360000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: event handlers are not event listeners","msgtype":"m.text"},"ts":1485182362000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: an event handler is something like \"onclick\"","msgtype":"m.text"},"ts":1485182395000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: their processing model is defined in HTML","msgtype":"m.text"},"ts":1485182408000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Anyone can help me locate examples of callback interfaces with constants?","msgtype":"m.text"},"ts":1485182453000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: ohhh, wasn't aware that was the difference in terminology! I guess I meant \"listener\" rather than \"handler\"","msgtype":"m.text"},"ts":1485182478000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"tobie: NodeFilter","msgtype":"m.text"},"ts":1485182492000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"WebIDL claims all interfaces should have a name prop. Seems dubious for callback interfaces","msgtype":"m.text"},"ts":1485182496000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: ta","msgtype":"m.text"},"ts":1485182500000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"So maybe not dubious.","msgtype":"m.text"},"ts":1485182538000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"JakeA: so you want onfetch() and addEventListener(\"fetch\", ...) to be different with respect to return values?","msgtype":"m.text"},"ts":1485182549000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I mean, they already are somewhat, but this would really throw that in people's faces","msgtype":"m.text"},"ts":1485182577000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: it's also a little weird since you have multiple listeners","msgtype":"m.text"},"ts":1485182636000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, I see the problem. The same could be done for handlers. A little hacky though.","msgtype":"m.text"},"ts":1485182655000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"can have*","msgtype":"m.text"},"ts":1485182658000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: handlers already have a return value that maps to preventDefault()","msgtype":"m.text"},"ts":1485182675000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it should be fine for multiple listeners. It wouldn't make sense for respondWith, but waitUntil makes sense","msgtype":"m.text"},"ts":1485182693000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: yeah, it would be an exception to that, that's why it's a bit hacky","msgtype":"m.text"},"ts":1485182717000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Probably shouldn't try and make it work for onfetch","msgtype":"m.text"},"ts":1485182729000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"if at all","msgtype":"m.text"},"ts":1485182734000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: this is one of the arguments I put forward at some point as to why service workers should maybe not reuse EventTarget, but that got dismissed","msgtype":"m.text"},"ts":1485182734000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: everyone was in a rush to ship...","msgtype":"m.text"},"ts":1485182760000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, I saw media sessions used something different, which is a bit odd","msgtype":"m.text"},"ts":1485182798000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"tobie: named constructors are just weird factory functions","msgtype":"m.text"},"ts":1485184521000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: that explanation did not help when I tried it","msgtype":"m.text"},"ts":1485184542000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Heh","msgtype":"m.text"},"ts":1485184558000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"They're like... `function Image(x, y) { if (!new.target) { throw new TypeError(\"you didn't call me with new\"); } return useUAMagicToCreateNewImage(x, y); }; Image.prototype = HTMLImageElement.prototpe;`","msgtype":"m.text"},"ts":1485184565000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"They're pretty unrelated to constructors","msgtype":"m.text"},"ts":1485184591000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'd definitely put them in the legacy bucket","msgtype":"m.text"},"ts":1485184602000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh.","msgtype":"m.text"},"ts":1485184615000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"When are we going to prefix all legacy things with Legacy?","msgtype":"m.text"},"ts":1485184649000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's just so much churn...","msgtype":"m.text"},"ts":1485184656000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"For all dependent specs","msgtype":"m.text"},"ts":1485184661000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Maybe we need a platform-wide IDL index first","msgtype":"m.text"},"ts":1485184668000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yes!","msgtype":"m.text"},"ts":1485184675000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Well this one is only used by HTML","msgtype":"m.text"},"ts":1485184676000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Although usually leaning on bz doing a Gecko code search works pretty well","msgtype":"m.text"},"ts":1485184678000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh really?","msgtype":"m.text"},"ts":1485184683000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That's kind of nice","msgtype":"m.text"},"ts":1485184684000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Named getters is only a couple of specs","msgtype":"m.text"},"ts":1485184686000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think the churn is pretty manageable these days because of Gecko code search and GitHub PRs","msgtype":"m.text"},"ts":1485184715000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: looking at the spec it seems the new.target check is not in the spec?","msgtype":"m.text"},"ts":1485184720000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"not sure if that's a spec bug or what","msgtype":"m.text"},"ts":1485184727000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Huh I guess Gecko and Blink require new","msgtype":"m.text"},"ts":1485184757000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah, the whole area needs cleanup, frankly.","msgtype":"m.text"},"ts":1485184764000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"OK I'll start filing a few bugs","msgtype":"m.text"},"ts":1485184769000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"What's a platform object constructor that Edge would actually have...","msgtype":"m.text"},"ts":1485184833000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"events","msgtype":"m.text"},"ts":1485184858000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I would have hoped we could have one algorithm for construction, not two.","msgtype":"m.text"},"ts":1485184868000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"One of the bugs i\"m about to file is to rename the feature so you don't think that it's related to construction","msgtype":"m.text"},"ts":1485184926000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Well, you still need to construct the returned object, don't you?","msgtype":"m.text"},"ts":1485184962000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"No","msgtype":"m.text"},"ts":1485184968000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You need to use UA magic to create it","msgtype":"m.text"},"ts":1485184975000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i.e. call the algorithm supplied","msgtype":"m.text"},"ts":1485184989000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"...","msgtype":"m.text"},"ts":1485185031000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"The blink implementation is all weird, btw.","msgtype":"m.text"},"ts":1485185098000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"What'd you expect from a browser? :)","msgtype":"m.text"},"ts":1485185132000,"senderName":"Ms2ger`","senderId":"Ms2ger`@irc"},
{"content":{"body":"Image.name returns HTMLImageElement","msgtype":"m.text"},"ts":1485185133000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Image.prototype === HTMLImageElement returns false.","msgtype":"m.text"},"ts":1485185188000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"https://github.com/heycam/webidl/issues/276","msgtype":"m.text"},"ts":1485185198000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Sorry, Image.prototype === HTMLImageElement.prototype returns false.","msgtype":"m.text"},"ts":1485185279000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Oh, you saw those.","msgtype":"m.text"},"ts":1485185315000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Other bugs filed https://github.com/heycam/webidl/issues/275 and https://github.com/heycam/webidl/issues/277","msgtype":"m.text"},"ts":1485185332000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'll write the tests.","msgtype":"m.text"},"ts":1485185341000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1485185350000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"new.target is just \"the target of the new operator\" BTW. So in `new X()`, `new.target === X`. In `Y()`, `new.target === undefined`.","msgtype":"m.text"},"ts":1485185567000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"This gets interesting when super-construction is involved","msgtype":"m.text"},"ts":1485185573000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so if you do `class X extends SuperX { constructor() { super(); } }`","msgtype":"m.text"},"ts":1485185589000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"then inside `SuperX`'s constructor, `new.target === X` still","msgtype":"m.text"},"ts":1485185600000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: oh, so you can make the Super branch on subclasses? Okay","msgtype":"m.text"},"ts":1485187682000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I think I sorta new this, but I keep forgetting since I haven't written any code with it yet and we don't have actual subclassing in IDL yet","msgtype":"m.text"},"ts":1485187710000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: e.g., it  seems feasible to allow subclasses of some IDL-defined classes that don't rely on too much branding, but we haven't really gotten there it seems","msgtype":"m.text"},"ts":1485187748000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I guess we have custom elements","msgtype":"m.text"},"ts":1485187768000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic, annevk: While, we're at it, we do agree that callback interfaces, when they show up because of constants, should: have a name prop, a length prop of 0, a prototype === Function.prototype,  and throw both when called and constructed?","msgtype":"m.text"},"ts":1485188070000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: I'm kind of confused about the relationship between [[Call]], [[Construct]] and NewTarget. I imagined that if NewTarget was not undefined, you'd be calling [[Call]], but from NamedConstructors it seems this isn't the case.","msgtype":"m.text"},"ts":1485188269000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: frankly, the ES spec isn't being super helpful here.","msgtype":"m.text"},"ts":1485188295000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I don't remember the latest agreement on callback interfaces","msgtype":"m.text"},"ts":1485188310000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"NewTarget is defined for both [[Call]] and [[Construct]]","msgtype":"m.text"},"ts":1485188331000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"[[Construct]] almost always just delegates to [[Call]]","msgtype":"m.text"},"ts":1485188358000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think the spec was updated for callback interfaces so probably whatever's there is what was agreed on","msgtype":"m.text"},"ts":1485188384000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hmm I guess [[Construct]] delegating to [[Call]] is not quite right","msgtype":"m.text"},"ts":1485188463000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But they use the same algorithm for all built-in functions","msgtype":"m.text"},"ts":1485188476000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Just NewTarget is undefined for [[Call]]","msgtype":"m.text"},"ts":1485188484000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://tc39.github.io/ecma262/#sec-built-in-function-objects","msgtype":"m.text"},"ts":1485188499000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so then how can we only have a [[Call]] on NamedConstructors?","msgtype":"m.text"},"ts":1485188523000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"see: https://github.com/heycam/webidl/issues/275","msgtype":"m.text"},"ts":1485188578000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: ^","msgtype":"m.text"},"ts":1485188779000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Why do you think we only have [[Call]]?","msgtype":"m.text"},"ts":1485188813000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hmm I see I guess the spec does kind of imply that","msgtype":"m.text"},"ts":1485188832000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Will file an issue","msgtype":"m.text"},"ts":1485188851000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Well, we don't even need [[Call]] if calling without NewTarget needs to throw.","msgtype":"m.text"},"ts":1485188911000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: we don't have it for regular constructors either, so…","msgtype":"m.text"},"ts":1485188940000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"You always need [[Call]]","msgtype":"m.text"},"ts":1485188960000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Otherwise typeof is not \"function\"","msgtype":"m.text"},"ts":1485188963000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh. So constructors should have one too.","msgtype":"m.text"},"ts":1485189035000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: see what I mean. This is all very confusing.","msgtype":"m.text"},"ts":1485189095000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1485189097000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Constructors do have one","msgtype":"m.text"},"ts":1485189111000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://github.com/heycam/webidl/issues/278","msgtype":"m.text"},"ts":1485189117000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: implicitely. But they're explicit for NamedConstructors","msgtype":"m.text"},"ts":1485189147000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: hence my confusion","msgtype":"m.text"},"ts":1485189160000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1485189184000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It seems to me like constructors were updated and named constructors were not","msgtype":"m.text"},"ts":1485189193000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: well \"hence\" is maybe a bit exaggerated. Let's simply say it didn't help. :)","msgtype":"m.text"},"ts":1485189195000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1485189202000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah, I'm actually to blame for that. Partially.","msgtype":"m.text"},"ts":1485189215000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"So I was hoping to close webidl#135. The result? #135 is still open, and now I also have: #275, #276, #277, #278 and a headache.","msgtype":"m.text"},"ts":1485189442000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"heh :-S","msgtype":"m.text"},"ts":1485189548000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"tobie: But now you can fall asleep faster,","msgtype":"m.text"},"ts":1485189574000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"tobie: \"1 WebIDL ticket, 2 WebIDL tickets, 3 WebIDL tickets, ...\".","msgtype":"m.text"},"ts":1485189589000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: hehe","msgtype":"m.text"},"ts":1485189598000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: why can't we express calling NamedConstructor with: Construct (NamedConstructor, args, InterfaceObject) ?","msgtype":"m.text"},"ts":1485190110000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I don't understand what that means","msgtype":"m.text"},"ts":1485190146000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: referring to the Construct abstract operation in ES","msgtype":"m.text"},"ts":1485190228000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"What does \"calling NamedConstructor\" mean?","msgtype":"m.text"},"ts":1485190248000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"fair question :)","msgtype":"m.text"},"ts":1485190263000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"It also seems unlikely to work since e.g. HTMLImageElement just throws when you use Construct() on it","msgtype":"m.text"},"ts":1485190276000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Image() and Image(x, y) have an algorithm that uses UA magic to create HTMLImageElement instances","msgtype":"m.text"},"ts":1485190305000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I meant this: new Image() -> Construct(Image, [], HTMLImageElement)","msgtype":"m.text"},"ts":1485190306000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"That's circular","msgtype":"m.text"},"ts":1485190313000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"new Image() *means* Construct(Image, [], Image)","msgtype":"m.text"},"ts":1485190333000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Which calls Image.[[Construct]]([], Image)","msgtype":"m.text"},"ts":1485190367000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So now we need a definition for Image.[[Construct]]","msgtype":"m.text"},"ts":1485190374000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"hopefully not one that just calls Image.[[Construct]] again","msgtype":"m.text"},"ts":1485190383000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"What syntax do you even use to do Construct(Foo, [], NotFoo) ?","msgtype":"m.text"},"ts":1485190463000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"It's impossible","msgtype":"m.text"},"ts":1485190498000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh no","msgtype":"m.text"},"ts":1485190523000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It's super()","msgtype":"m.text"},"ts":1485190525000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Oh! That why","msgtype":"m.text"},"ts":1485190533000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"*That's","msgtype":"m.text"},"ts":1485190539000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Now I get it.","msgtype":"m.text"},"ts":1485190558000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"super() <-> Construct(SuperclassConstructor, [], ConstructorNewOperatorWasAppliedTo)","msgtype":"m.text"},"ts":1485190560000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Thanks","msgtype":"m.text"},"ts":1485190560000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1485190563000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So that solves a similar problem to the one we have, except not the one we have for which we prefer UA magic.","msgtype":"m.text"},"ts":1485190641000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I guess?","msgtype":"m.text"},"ts":1485190652000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Alright. Thanks. I'll put this to rest and try to come with a coherent whole.","msgtype":"m.text"},"ts":1485190731000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"What's up with the HTML-specific extended attributes?","msgtype":"m.text"},"ts":1485195401000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"They exist? They're nice?","msgtype":"m.text"},"ts":1485196093000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"gsnedders: Does html5lib emit parse errors at all?","msgtype":"m.text"},"ts":1485199773000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"gsnedders: (Context: https://github.com/tabatkins/bikeshed/issues/905)","msgtype":"m.text"},"ts":1485199828000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: It can I think, unless that got removed at some point, but I wouldn't trust them to be correct","msgtype":"m.text"},"ts":1485200049000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"TabAtkins: yes. they've not been udpated in forever and we ignore the tests for them.","msgtype":"m.text"},"ts":1485201423000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"TabAtkins: parser.errors, IIRC","msgtype":"m.text"},"ts":1485201429000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic: https://html.spec.whatwg.org/multipage/dom.html#htmlconstructor","msgtype":"m.text"},"ts":1485201776000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: https://html.spec.whatwg.org/multipage/scripting.html#cereactions","msgtype":"m.text"},"ts":1485201859000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Yes, I know what they are.","msgtype":"m.text"},"ts":1485201869000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"They exist and are nice.","msgtype":"m.text"},"ts":1485201873000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That's what's up with them?","msgtype":"m.text"},"ts":1485201880000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"We'll probably add [Reflect] at some point so we can stop with the repetitive prose","msgtype":"m.text"},"ts":1485201933000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh, misread your previous comment.","msgtype":"m.text"},"ts":1485201957000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I was just wondering if there were specific plans with them.","msgtype":"m.text"},"ts":1485202032000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Not that I know of; they're working pretty well as-is.","msgtype":"m.text"},"ts":1485202439000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: cool","msgtype":"m.text"},"ts":1485202675000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"didn't know about them and so was rather surprised.","msgtype":"m.emote"},"ts":1485202703000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: thoughts about https://github.com/heycam/webidl/issues/279?","msgtype":"m.text"},"ts":1485203503000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: matching the majority of browsers seems good yeah","msgtype":"m.text"},"ts":1485203544000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Where is the ES binding for callback-interfaces-with-constants defined?","msgtype":"m.text"},"ts":1485203652000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: it's sort of scattered","msgtype":"m.text"},"ts":1485203861000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"They're so gross","msgtype":"m.text"},"ts":1485203904000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So far I found https://heycam.github.io/webidl/#es-interfaces but not \"name\"","msgtype":"m.text"},"ts":1485203929000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: last paragraph of https://heycam.github.io/webidl/#es-constructible-interfaces","msgtype":"m.text"},"ts":1485203936000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Ugh","msgtype":"m.text"},"ts":1485203953000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yea","msgtype":"m.text"},"ts":1485203960000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I guess that heading is what's confusing","msgtype":"m.text"},"ts":1485203971000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"Interface object call/construct behavior\" might be more reasonable","msgtype":"m.text"},"ts":1485203982000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Or maybe \"Interface objects as functions\"","msgtype":"m.text"},"ts":1485203990000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Wait so all interface objects should have a \"length\" defined somewhere","msgtype":"m.text"},"ts":1485204021000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Not just callback interfaces","msgtype":"m.text"},"ts":1485204026000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh I see","msgtype":"m.text"},"ts":1485204033000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"There's an algorithm box around the \"non-callback interfaces get a length determined like this\" section","msgtype":"m.text"},"ts":1485204046000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah, I was thinking about refactoring the whole thing","msgtype":"m.text"},"ts":1485204149000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"they all need length, name and proto","msgtype":"m.text"},"ts":1485204164000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"So the new way to do this is to explicitly create the things and add them to the global object","msgtype":"m.text"},"ts":1485204351000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"See https://heycam.github.io/webidl/#es-namespaces","msgtype":"m.text"},"ts":1485204365000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Or, for how to create functions, see https://heycam.github.io/webidl/#dfn-attribute-getter","msgtype":"m.text"},"ts":1485204415000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess the \"add them to the global object\" step is not yet revamped","msgtype":"m.text"},"ts":1485204552000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Maybe do that last","msgtype":"m.text"},"ts":1485204561000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"None of this really seems necessary to solve https://github.com/heycam/webidl/issues/135 though","msgtype":"m.text"},"ts":1485204594000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah?","msgtype":"m.text"},"ts":1485204776000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: I wasn't too sure how to go about this","msgtype":"m.text"},"ts":1485204834000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"adding these as Asserts to constructor and NamedConstructor bindings?","msgtype":"m.text"},"ts":1485204914000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: oh, no, I was thinking just add a new section (e.g. \"creating objects\") that states basically what the bug states","msgtype":"m.text"},"ts":1485205226000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Maybe it defines \"new object\" or something","msgtype":"m.text"},"ts":1485205288000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Maybe Interface definition language > Interfaces > Creating instances of interfaces ?","msgtype":"m.text"},"ts":1485205366000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh or maybe just a paragraph or so in https://heycam.github.io/webidl/#idl-objects","msgtype":"m.text"},"ts":1485205384000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: got it","msgtype":"m.text"},"ts":1485205473000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: I've lost track of what I'm on the hook for for URL reviews. Let me know what's left. It seems like things are still kind of in the negotiation phase?","msgtype":"m.text"},"ts":1485208665000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: any plans for https://github.com/tabatkins/bikeshed/issues/812?","msgtype":"m.text"},"ts":1485209152000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: re https://github.com/tabatkins/bikeshed/issues/812#issuecomment-255341823, I hear XSLT has this thing called processing instructions... ;)","msgtype":"m.text"},"ts":1485209654000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Boooooooo","msgtype":"m.text"},"ts":1485209666000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":":D","msgtype":"m.text"},"ts":1485209701000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Why BodyInit uses UVString","msgtype":"m.text"},"ts":1485210535000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"USVString","msgtype":"m.text"},"ts":1485210543000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"that looks like a bug to me","msgtype":"m.text"},"ts":1485210550000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"annevk: still awake?","msgtype":"m.text"},"ts":1485210660000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"smaug: making the prose about when to use UVString is on my todo list: https://github.com/heycam/webidl/issues/84","msgtype":"m.text"},"ts":1485210677000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"smaug: oh, that's in fetch?","msgtype":"m.text"},"ts":1485210773000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1485210778000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"it didn't use to","msgtype":"m.text"},"ts":1485210784000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"it was taking DOMString","msgtype":"m.text"},"ts":1485210790000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"smaug: don't mind me, then.","msgtype":"m.text"},"ts":1485210795000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"it is after all just random data","msgtype":"m.text"},"ts":1485210796000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"ah, it is converted to utf8 anyhow","msgtype":"m.text"},"ts":1485210890000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"right right, makes sense","msgtype":"m.text"},"ts":1485210907000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"smaug: I guess it just means it'll turn whatever string is thrown its way into an UVString.","msgtype":"m.text"},"ts":1485210919000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"smaug: yeah, what you said above","msgtype":"m.text"},"ts":1485210943000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"smaug: relevant bit in WebIDL is https://heycam.github.io/webidl/#es-USVString","msgtype":"m.text"},"ts":1485211026000,"senderName":"tobie","senderId":"tobie@irc"}
]