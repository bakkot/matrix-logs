[
{"content":{"body":"annevk: did you get your t-shirt?","msgtype":"m.text"},"ts":1180743780000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"moin","msgtype":"m.text"},"ts":1180752600000,"senderName":"kfish","senderId":"kfish@irc"},
{"content":{"body":"is there any way to specify the authorship / authority of subparts of a web page?","msgtype":"m.text"},"ts":1180752601000,"senderName":"kfish","senderId":"kfish@irc"},
{"content":{"body":"s/is there/are there any proposals for/","msgtype":"m.text"},"ts":1180752660000,"senderName":"kfish","senderId":"kfish@irc"},
{"content":{"body":"<address>?","msgtype":"m.text"},"ts":1180752661000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"eg. if i wanted to say that the comments section of a web page was not authored by the site, could contain public comments ie. spam","msgtype":"m.text"},"ts":1180752662000,"senderName":"kfish","senderId":"kfish@irc"},
{"content":{"body":"basically, to set a nofollow attribute to an element","msgtype":"m.text"},"ts":1180752720000,"senderName":"kfish","senderId":"kfish@irc"},
{"content":{"body":"use rel=nofollow on the links","msgtype":"m.text"},"ts":1180752721000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"cheers :-)","msgtype":"m.text"},"ts":1180752780000,"senderName":"kfish","senderId":"kfish@irc"},
{"content":{"body":"using an outer <article> for the main post and nested <article>s for the comments would indicate that the inner articles were actually comments","msgtype":"m.text"},"ts":1180752840000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"kfish - you on mixi?","msgtype":"m.text"},"ts":1180754280000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"http://mixi.jp/show_friend.pl?id=299825 is me","msgtype":"m.text"},"ts":1180754281000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith, nice taste in music :-)","msgtype":"m.text"},"ts":1180754400000,"senderName":"kfish","senderId":"kfish@irc"},
{"content":{"body":"yeah cool, just sent you an invite","msgtype":"m.text"},"ts":1180754401000,"senderName":"kfish","senderId":"kfish@irc"},
{"content":{"body":"you can join my 全日本酔払い連合 community","msgtype":"m.text"},"ts":1180754580000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"All Japan Drunkard Association","msgtype":"m.text"},"ts":1180754581000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hahaha :-)","msgtype":"m.text"},"ts":1180754820000,"senderName":"kfish","senderId":"kfish@irc"},
{"content":{"body":"zcorpan_, yeah","msgtype":"m.text"},"ts":1180772700000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: did you wear it at reboot?","msgtype":"m.text"},"ts":1180772760000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"no :(","msgtype":"m.text"},"ts":1180772761000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1180772820000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1180773900000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the last e-mail about headers= is so confused","msgtype":"m.text"},"ts":1180773901000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"trying to read all kinds of silly meaning out of the HTML4 specification...","msgtype":"m.text"},"ts":1180773902000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: FWIW, in angels-on-heads-of-SGML-pins discussions one might claim that #IMPLIED attributes are magically there. In Web reality, of course, an attribute can be present or not present in the DOM.","msgtype":"m.text"},"ts":1180774920000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hmm, I was afraid of that","msgtype":"m.text"},"ts":1180775160000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think it makes more sense to distinguish absent attribute from attribute set to default value","msgtype":"m.text"},"ts":1180775220000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"(not that my opinion has much relevance)","msgtype":"m.text"},"ts":1180775221000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"yeah, you're an implementor","msgtype":"m.text"},"ts":1180775222000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"go away!","msgtype":"m.text"},"ts":1180775223000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh wait","msgtype":"m.text"},"ts":1180775224000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"part of the problem is that SGML and Web have a different notion of what a default value is","msgtype":"m.text"},"ts":1180775280000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"in SGML the parser reports it. on the Web, the default isn't in the DOM but the implementation reading the DOM uses the defaults if stuff isn't in the DOM","msgtype":"m.text"},"ts":1180775340000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"if people could just accept that \"the Web\" and not \"SGML-based HTML4\" is the where we are starting from...","msgtype":"m.text"},"ts":1180775341000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"my opinion on what works or doesn't may be well-informed, my opinion on what makes sense is as arbitrary as anybody's","msgtype":"m.text"},"ts":1180775342000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"<div contenteditable> and <div> are quite different for instance","msgtype":"m.text"},"ts":1180775343000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"empty vs. null","msgtype":"m.text"},"ts":1180775400000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"yeah, in the new-world getAttribute() terms :)","msgtype":"m.text"},"ts":1180775460000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: is there a new-world getAttribute() now? the old-world getAttribute() is definitely influenced by SGML thinking","msgtype":"m.text"},"ts":1180775461000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hasn't done enough JS DOM work lately: world view influenced by Java DOM","msgtype":"m.emote"},"ts":1180775520000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"someone needs to make a DOM Core spec that's useful for browsers","msgtype":"m.text"},"ts":1180775521000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"getAttribute() returns null if no attribute is specified","msgtype":"m.text"},"ts":1180775522000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"as opposed to the empty string which is required by the DOM spec","msgtype":"m.text"},"ts":1180775523000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: cool.","msgtype":"m.text"},"ts":1180775580000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"has written a bug in Java assuming the intuitive behavior when the library implemented the spec","msgtype":"m.emote"},"ts":1180775581000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"wonders why the Java API designers assume that for character decoding I want to either recover from errors silently or treat them in a Draconian way but they don't offer reported recovery","msgtype":"m.emote"},"ts":1180775700000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"i just found out about navigator.onLine.. it will work out quite nicely with google gears :)","msgtype":"m.text"},"ts":1180776660000,"senderName":"Lfe","senderId":"Lfe@irc"},
{"content":{"body":"Lfe, yeah, in due course the ideas of Google Gears should be integrated with the rest of the APIs I think","msgtype":"m.text"},"ts":1180776720000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: i agree. that's the kind of thing that needs to be \"standardized\" in order to work nicely","msgtype":"m.text"},"ts":1180776780000,"senderName":"Lfe","senderId":"Lfe@irc"},
{"content":{"body":"there's already a SQL API in the spec, but the offline caching API needs to be worked out","msgtype":"m.text"},"ts":1180776781000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"and reconciled with what Mozilla did","msgtype":"m.text"},"ts":1180776782000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"and there are these worker thread APIs","msgtype":"m.text"},"ts":1180776783000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is a bit disappointed in Moz for not going to standards with their stuff sooner","msgtype":"m.emote"},"ts":1180776784000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"the worker thread APIs are the simplest part","msgtype":"m.text"},"ts":1180776785000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"but also kinda the least useful","msgtype":"m.text"},"ts":1180776786000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"and you had some ideas about integrating persistent storage with the SQL stuff right?","msgtype":"m.text"},"ts":1180776840000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, just a throwaway suggestion","msgtype":"m.text"},"ts":1180776841000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"maybe there is a better way to integrate","msgtype":"m.text"},"ts":1180776842000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"but it bugs me that in the spec they are completely separate","msgtype":"m.text"},"ts":1180776900000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"otoh, the globalStorage stuff can go from key / value to key / object","msgtype":"m.text"},"ts":1180776901000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so you can store arbitrary DOM objects and such","msgtype":"m.text"},"ts":1180776902000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I suppose SVGDocument.title can just be dropped...","msgtype":"m.text"},"ts":1180777020000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't see how storing an arbitrary DOM node could possibly give sensible results","msgtype":"m.text"},"ts":1180777021000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"or even storing a function","msgtype":"m.text"},"ts":1180777022000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"(you could stringify, then they it's just a dumb key / value pair)","msgtype":"m.text"},"ts":1180777023000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"you could store E4X objects or a Document which you can use as XML database","msgtype":"m.text"},"ts":1180777080000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"storing a Node can't preserve identity, which in the case of DOM objects makes a difference","msgtype":"m.text"},"ts":1180777140000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"unlike strings","msgtype":"m.text"},"ts":1180777141000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"if you store an element that's in the document and has children, when you come back to that doc later and retrieve it, it won't still be in the document","msgtype":"m.text"},"ts":1180777142000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"so if you save nodes, you get the equivalent of serializing / deserializing markup anyway","msgtype":"m.text"},"ts":1180777200000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"oh, you mean they become detached?","msgtype":"m.text"},"ts":1180777260000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, it can't preserve identity across document reloads","msgtype":"m.text"},"ts":1180777261000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"that seems fine","msgtype":"m.text"},"ts":1180777262000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that just can't work","msgtype":"m.text"},"ts":1180777263000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"it's just that the browser does the serializing for you","msgtype":"m.text"},"ts":1180777264000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah but it's also not any more useful than storing strings","msgtype":"m.text"},"ts":1180777265000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"annevk: considering how the DOM is implemented, storing DOM nodes seems like a huge pain","msgtype":"m.text"},"ts":1180777320000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"basically you're asking it to store .innerHTML instead of .toString()","msgtype":"m.text"},"ts":1180777321000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"regarding the ManagedResourceStore.checkForUpdate() (how one should attain updated data) - gears seems to do a HTTP GET and compare mydata.currentVersion to the localized version string. Why not use HTTP HEAD / etag for this?","msgtype":"m.text"},"ts":1180777322000,"senderName":"Lfe","senderId":"Lfe@irc"},
{"content":{"body":"(or similar techniques)","msgtype":"m.text"},"ts":1180777323000,"senderName":"Lfe","senderId":"Lfe@irc"},
{"content":{"body":"HTTP HEAD is broken enough to be useless in practice","msgtype":"m.text"},"ts":1180777324000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"annevk: if I stick some random function objects onto a C++-backed DOM node, what would you store?","msgtype":"m.text"},"ts":1180777325000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1180777380000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"at some point Hixie defined it","msgtype":"m.text"},"ts":1180777381000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but removed it based on feedback from Mozilla (too much work iirc)","msgtype":"m.text"},"ts":1180777440000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: doing an XHR-like save operation to a local store would be a lot simpler that JS/C++ object serialization","msgtype":"m.text"},"ts":1180777441000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"serliazing JavaScript functions in a way that round trips properly is nearly impossible","msgtype":"m.text"},"ts":1180777442000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: isn't that up to the host to \"solve\"? a head/etag would save lots of potential kb's ","msgtype":"m.text"},"ts":1180777443000,"senderName":"Lfe","senderId":"Lfe@irc"},
{"content":{"body":"othermaciej: mmap :-)","msgtype":"m.text"},"ts":1180777500000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: the hard part is handling captured scope - there's no clearly right way to restore it across exit and subsequent reload","msgtype":"m.text"},"ts":1180777560000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"ah, manifestUrl != resourceUrl","msgtype":"m.text"},"ts":1180777620000,"senderName":"Lfe","senderId":"Lfe@irc"},
{"content":{"body":"othermaciej: powernap?","msgtype":"m.text"},"ts":1180778100000,"senderName":"Lfe","senderId":"Lfe@irc"},
{"content":{"body":"Lfe: no, saw something on another channel that caught my eye","msgtype":"m.text"},"ts":1180778160000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Shouldn't dir= default to something at some point?","msgtype":"m.text"},"ts":1180780980000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Say, ltr for the root element...","msgtype":"m.text"},"ts":1180780981000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"apparently unit tests can avoid the need for an XML serialiser.","msgtype":"m.text"},"ts":1180796940000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(when it comes to creating well-formed XML)","msgtype":"m.text"},"ts":1180796941000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"question: when the input stream is just \"<html>\", how are, according to the tree construction algorithm, the <head> and <body> elements created?","msgtype":"m.text"},"ts":1180800000000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"the current tree construction algorithm is not entirely correct as far as that goes","msgtype":"m.text"},"ts":1180800060000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah i see","msgtype":"m.text"},"ts":1180800120000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"html5lib is :)","msgtype":"m.text"},"ts":1180800121000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so html5lib does stuff that isn't in the spec ATM to create those two elements??","msgtype":"m.text"},"ts":1180800122000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"ok :p","msgtype":"m.text"},"ts":1180800123000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"and do you think those steps will eventually be added to the spec?","msgtype":"m.text"},"ts":1180800180000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"we also removed the insertion mode switch","msgtype":"m.text"},"ts":1180800181000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"or is it just temporarily?","msgtype":"m.text"},"ts":1180800182000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"and made it all phases","msgtype":"m.text"},"ts":1180800183000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the spec will be fixed, yes","msgtype":"m.text"},"ts":1180800184000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"some sites depend on it, so it does need to be fixed","msgtype":"m.text"},"ts":1180800240000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: yeah, I noticed html5lib does it differently than the spec","msgtype":"m.text"},"ts":1180800300000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"will that also be changed in the spec?","msgtype":"m.text"},"ts":1180800301000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"the spec has a note to that effect at the moment","msgtype":"m.text"},"ts":1180800302000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Jero: html5lib's deviations are for compatibility with the web, so yes","msgtype":"m.text"},"ts":1180800303000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"but if Hixie decides to write the same thing down in some other way... so be it","msgtype":"m.text"},"ts":1180800360000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"okay, but the output of html5lib is still compatible with the spec i assume, even though it changed the steps to process the token?","msgtype":"m.text"},"ts":1180800540000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"it's mostly equivalent","msgtype":"m.text"},"ts":1180800541000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh ok, than it doesn't really matter","msgtype":"m.text"},"ts":1180800542000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"bedankt :)","msgtype":"m.text"},"ts":1180800543000,"senderName":"Jero","senderId":"Jero@irc"},
{"content":{"body":"annevk: is the diff between the spec and html5lib documented?","msgtype":"m.text"},"ts":1180825500000,"senderName":"hsivonen","senderId":"hsivonen@irc"}
]