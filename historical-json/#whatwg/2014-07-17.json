[
{"content":{"body":"will be busy for the next half hour or so","msgtype":"m.emote"},"ts":1405558308000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://twitter.com/pamelafox/status/489541624154689536","msgtype":"m.text"},"ts":1405564688000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"\"To confirm, \"allow-popups\" means allow window.open? There's no way to prevent window.prompt/alert, correct?\"","msgtype":"m.text"},"ts":1405564697000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that true?","msgtype":"m.text"},"ts":1405564700000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hixie: ☝️","msgtype":"m.text"},"ts":1405564716000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"does it actually mean anything at all in non-IE browsers? afaik all of those properties basically don't work in chrome/ff","msgtype":"m.text"},"ts":1405564752000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"wat","msgtype":"m.text"},"ts":1405564767000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"certainly anything involving window decorations doesn't work, but from experimentation I've noticed that some other ones didn't either, so I'd be surprised if any of them really worked","msgtype":"m.text"},"ts":1405564807000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"any of what?","msgtype":"m.text"},"ts":1405564848000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"what are they called, the comma-separated options you can pass to window.open","msgtype":"m.text"},"ts":1405564868000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"the interop for those has basically always been a myth","msgtype":"m.text"},"ts":1405564929000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"oh, but I guess allow-popups isn't one of them","msgtype":"m.text"},"ts":1405564957000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"maybe I'm talking out of my ass after a few glasses of wine :)","msgtype":"m.text"},"ts":1405564967000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"are they talking about csp then or something? i'm confused :D","msgtype":"m.text"},"ts":1405565036000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"caitp-: yeah csp","msgtype":"m.text"},"ts":1405565428000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"she was replying to Mike West","msgtype":"m.text"},"ts":1405565470000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah, csp is probably less broken than window.open options","msgtype":"m.text"},"ts":1405565536000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"goes back to listening to Bigott's The Reno Poem","msgtype":"m.emote"},"ts":1405565611000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"caitp-: you're talking about those evil things that people used to use to pop up browser windows with the %^@@^@ chrome stripped off so you couldn't easily do what you wanted with them?","msgtype":"m.text"},"ts":1405565629000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"yeah, terrible stuff","msgtype":"m.text"},"ts":1405565659000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"best interop there is probably NOP","msgtype":"m.text"},"ts":1405565714000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"for the most part","msgtype":"m.text"},"ts":1405565732000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"i recall there was a thread on blink-dev about making those either actually work, or throwing them away entirely, recently","msgtype":"m.text"},"ts":1405565757000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"can't remember which it was","msgtype":"m.text"},"ts":1405565761000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"maybe some way to slim them down a bit, but let the user unslim at his/her whim, would be acceptable ...","msgtype":"m.text"},"ts":1405565852000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"anyway, it was my misunderstanding of a tweet, I blame alcohol, can't expect me to be fully lucid at any hour, let alone 11pm :)","msgtype":"m.text"},"ts":1405565926000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"MikeSmith: there's no way to either prevent or allow window.alert and company, correct. I would expect browsers to make sandboxed window.alert() rather uninteresting, though.","msgtype":"m.text"},"ts":1405568372000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: ok","msgtype":"m.text"},"ts":1405571269000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"krit, why rename DOMRectList yet again?","msgtype":"m.text"},"ts":1405587739000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"krit, that has a non-trivial engineering cost that could be better used elsewhere","msgtype":"m.text"},"ts":1405587777000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: not that I am favour for renaming it it Legacy... What is the engineering cost? After all, Gecko would require WebKit, Blink and ie I rename it from ClientRectList to the new name anyway.","msgtype":"m.text"},"ts":1405588041000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"Gecko and Servo have renamed ClientRectList already","msgtype":"m.text"},"ts":1405588068000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"excuse typos, am on my phone","msgtype":"m.emote"},"ts":1405588069000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"Haven't webkit and friend?","msgtype":"m.text"},"ts":1405588093000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"friends*","msgtype":"m.text"},"ts":1405588095000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"So? If you don't want the renaming, speak up on the mailing list. I renamed it since everyone wanted me to","msgtype":"m.text"},"ts":1405588116000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"No, no one renamed it yet","msgtype":"m.text"},"ts":1405588145000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"No one except two","msgtype":"m.text"},"ts":1405588152000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Alright, I'll complain","msgtype":"m.text"},"ts":1405588172000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Also, what happened to https://dvcs.w3.org/hg/FXTF/rev/46405013c12f?","msgtype":"m.text"},"ts":1405588177000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Well, it is no bug deal to rename","msgtype":"m.text"},"ts":1405588189000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"Putting \"Legacy\" in the name of things is just stupid","msgtype":"m.text"},"ts":1405588235000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Ms2ger: removed ArrayClass by request from hey am","msgtype":"m.text"},"ts":1405588236000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"Heycam","msgtype":"m.text"},"ts":1405588243000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"And now added it back?","msgtype":"m.text"},"ts":1405588251000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: but everyone else wanted it back","msgtype":"m.text"},"ts":1405588255000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"At least annevk replied that he's not part of \"everyone else\"","msgtype":"m.text"},"ts":1405588275000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: yeah, heycam admitted that it might have been a mistake to remove it","msgtype":"m.text"},"ts":1405588283000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"Ms2ger: vote for renaming it back on the mailing list and we will see what the TAG thinks about it","msgtype":"m.text"},"ts":1405588419000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"Done","msgtype":"m.text"},"ts":1405588506000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Anyway, I've already spent more time on this spec than I can justify","msgtype":"m.text"},"ts":1405588577000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: k, thanks","msgtype":"m.text"},"ts":1405590435000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"Returning true/false with a promise feels really awkward. Eg asyncMap.has(key).then(function(hasKey) { ... }) - I guess it's a lot more natural in async functions","msgtype":"m.text"},"ts":1405592175000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"…even more awkward with asyncMap.get(key).then(function(item) {  }) - where item is undefined if it's not in the map","msgtype":"m.text"},"ts":1405593645000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"hayato: so while implementing shadow dom in blink, did anyone go through all the is-in-doc and get-current-doc (which can be null, unlink ownerDoc) cases ?","msgtype":"m.text"},"ts":1405593785000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Ms2ger, jgraham, I'm thinking about adding some Fullscreen API tests to web-platform-tests, but all but the most trivial require a trusted click event, which would make them manual tests","msgtype":"m.text"},"ts":1405594123000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"In Blink/WebKit the test environment has a way to produce trusted clicks, which is used for this kind of thing","msgtype":"m.text"},"ts":1405594150000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Gecko has something similar, but jgraham doesn't like it :)","msgtype":"m.text"},"ts":1405594168000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Maybe WebDriver?","msgtype":"m.text"},"ts":1405594179000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I was going to say that I didn't think that anyone liked it :p","msgtype":"m.text"},"ts":1405594187000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Do you have any ideas about how to write tests so that the tests can be run both manually and automatically?","msgtype":"m.text"},"ts":1405594191000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"WebDriver is certainly the long-term solution","msgtype":"m.text"},"ts":1405594201000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"ok, I looked a bit at that yesterday actually, but wasn't sure what I was looking at","msgtype":"m.text"},"ts":1405594230000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"are there any existing tests on the form I'm talking about to compare with?","msgtype":"m.text"},"ts":1405594248000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Well the problem is that we're not really read to accept webdriver tests yet","msgtype":"m.text"},"ts":1405594249000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"We need to decide on a client binding","msgtype":"m.text"},"ts":1405594267000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"testharness could rely on some browser specific library. So when run in Gecko it would use SpecialPowers object to dispatch trusted events","msgtype":"m.text"},"ts":1405594279000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: that was basically my thinking, yes","msgtype":"m.text"},"ts":1405594337000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"smaug____: I think it wouldn't be quite that simple, but yeah, I guess the short term solution is to have a file that is empty by default and vendors can replace to provide a specific implementation of trusted clicks","msgtype":"m.text"},"ts":1405594388000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I suppose I could also just write manual tests, and then when importing those to Blink add a script that clicks the magic button after onload","msgtype":"m.text"},"ts":1405594434000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1405594449000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"how would things look with WebDriver, in the shiny future?","msgtype":"m.text"},"ts":1405594450000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Well with webdriver I guess you would have a python file that did something like webdriver.get(\"test.html\"); webdriver.getElementByCSSSelector(\"#button\").click()","msgtype":"m.text"},"ts":1405594537000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Assuming we have python bindings","msgtype":"m.text"},"ts":1405594561000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"with webdriver, is the python test the top-level thing?","msgtype":"m.text"},"ts":1405594585000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"if so each test would require an identical python counterpart?","msgtype":"m.text"},"ts":1405594596000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"that would be unimpressive","msgtype":"m.text"},"ts":1405594605000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"It would be interesting if we could invert the control somehow, or use templating","msgtype":"m.text"},"ts":1405594644000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"indeed, something like that","msgtype":"m.text"},"ts":1405594686000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"e.g have test.webdriver.html with <meta name=\"webdriver\" content=\"test.py\"> and test.py would look like webdriver.get(\"{{location}}\")[...]","msgtype":"m.text"},"ts":1405594707000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"That actually seems like a pretyt neat solution","msgtype":"m.text"},"ts":1405594765000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"python?","msgtype":"m.text"},"ts":1405594770000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"are there no JavaScript bindings for WebDriver?","msgtype":"m.text"},"ts":1405594771000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"There are","msgtype":"m.text"},"ts":1405594780000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But","msgtype":"m.text"},"ts":1405594782000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"They all require node","msgtype":"m.text"},"ts":1405594787000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"and webdriver is sync","msgtype":"m.text"},"ts":1405594794000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"So they are all hacks to make js act in a sync way","msgtype":"m.text"},"ts":1405594809000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1405594828000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"I'm not at all crazy about making node a dependency for the testsuite when python already is","msgtype":"m.text"},"ts":1405594854000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"+1","msgtype":"m.text"},"ts":1405594871000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"js would feel more natural ...","msgtype":"m.text"},"ts":1405594877000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"otherwise a <script language=\"text/javascript+webdriver\"> or something that'll be ignored by the browser could be a way","msgtype":"m.text"},"ts":1405594877000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"(and js is less horrible language)","msgtype":"m.text"},"ts":1405594885000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: I think that second point is highly debatable :p","msgtype":"m.text"},"ts":1405594906000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"based on empirical data, me writing python, python is a bad language. Slow to write and easy to make errors ;)","msgtype":"m.text"},"ts":1405594962000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and hard to read","msgtype":"m.text"},"ts":1405594981000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: Curiously I have the same experience with js :p","msgtype":"m.text"},"ts":1405594983000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But if you think python is hard to read I don't know what to tell you","msgtype":"m.text"},"ts":1405594997000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"so, um, trolling aside, I guess right now I can't make it all nice and pretty","msgtype":"m.text"},"ts":1405595004000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: Not really, sorry","msgtype":"m.text"},"ts":1405595022000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"We all know smaug____ has poor taste in languages :)","msgtype":"m.text"},"ts":1405595046000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"so I think I'll try the manual test thing, and include a script that inserts a button to click, which could be modified when integrated with Blink or Gecko","msgtype":"m.text"},"ts":1405595060000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"unfortunately those tests will have -manual in the name, which may cause problems","msgtype":"m.text"},"ts":1405595091000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Given that we haven't really solved \"have a testsuite requiring just web-exposed features that all browsers actually run\", getting one with opt-in to non-web-exposed features hasn't been a priority","msgtype":"m.text"},"ts":1405595101000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"or would it be ok to have them fail by default?","msgtype":"m.text"},"ts":1405595126000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Well I don't mind tests that fail, but tests that *can't* pass even if you implement the feature are going to upset peopke","msgtype":"m.text"},"ts":1405595162000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"*people","msgtype":"m.text"},"ts":1405595165000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"so maybe having them manual by default is the most conservative option","msgtype":"m.text"},"ts":1405595203000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Yeah, unfortunately I think it is","msgtype":"m.text"},"ts":1405595251000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Assuming we eventually solve this via webdriver, I guess there might be a plan by, say, the end of the year to get that working","msgtype":"m.text"},"ts":1405595313000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"ok, this stuff is hard, it seems","msgtype":"m.text"},"ts":1405595344000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Yeah, it's hard because it's not cross browser","msgtype":"m.text"},"ts":1405595509000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I mean we could probably solve it in a slightly hacky way, but I'm not super-desperate to extend the current gecko SpecialPowers stuff into wpt","msgtype":"m.text"},"ts":1405595567000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"One thing I realize now is that some tests will actually need trusted clicks multiple times, when entering nested fullscreen","msgtype":"m.text"},"ts":1405595640000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"the way the WebKit tests are written is to have a runWithKeyDown() helper that runs your function in a trusted event","msgtype":"m.text"},"ts":1405595671000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"converting that to WebDriver would require a way to ask the WebDriver to click somewhere, but does there exist a communication channel to make that request?","msgtype":"m.text"},"ts":1405595701000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Yeah, you can return data if needed","msgtype":"m.text"},"ts":1405595837000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"kind of like postMessage?","msgtype":"m.text"},"ts":1405595847000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"returning data once isn't going to be good enough I think","msgtype":"m.text"},"ts":1405595869000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Well the API isn't event based, so it's hard to react to a stream of events","msgtype":"m.text"},"ts":1405595907000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But you can do things like executeAsyncScript() which runs a function in the scope of the page, and can poll for data","msgtype":"m.text"},"ts":1405595946000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"ok, so you could fall back to polling for a button to press?","msgtype":"m.text"},"ts":1405595965000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"how well is the svg spec maintained ?","msgtype":"m.text"},"ts":1405595975000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"shepazu might know","msgtype":"m.text"},"ts":1405596003000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"foolip: If you only need to find a single button and there is an event you could executeAsyncScript(onevent = function(event) {callback(event.button)}) or something","msgtype":"m.text"},"ts":1405596047000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Or do that once per button you need to find","msgtype":"m.text"},"ts":1405596058000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"It's not that intuitive if you come from a browser background","msgtype":"m.text"},"ts":1405596245000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"It would have worked better if they'd made the API async. But the theory is that people testing web sites are typically not comforatble with that kind of programming :|","msgtype":"m.text"},"ts":1405596286000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"ok...","msgtype":"m.text"},"ts":1405597071000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"I guess it's all hypothetical until I can actually try WebDriver in wpt","msgtype":"m.text"},"ts":1405597105000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Yeah, I guess it's a worry that trying to seperate out this kind of priviledged action will be less convenient than SpecialPowers-like APIs which just allow people to wantonly mix browser-specific stuff into otherwise cross-browser tests, so they won't bother to write cross-browser tests at all","msgtype":"m.text"},"ts":1405597373000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"smaug____: which SVG spec? 1.1?","msgtype":"m.text"},"ts":1405600435000,"senderName":"MikeSmit1","senderId":"MikeSmit1@irc"},
{"content":{"body":"smaug____: krit could help probably","msgtype":"m.text"},"ts":1405600469000,"senderName":"MikeSmit1","senderId":"MikeSmit1@irc"},
{"content":{"body":"smaug____: SVG2? Depending of the kind of issue you have, pretty responsive https://svgwg.org/svg2-draft/","msgtype":"m.text"},"ts":1405600538000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"krit: I'm just going through is-in-doc checks","msgtype":"m.text"},"ts":1405600567000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: basic maintenance of SVG1.1… don’t expect updates till the next errata","msgtype":"m.text"},"ts":1405600572000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"in order to figure out how shadow dom actually should work","msgtype":"m.text"},"ts":1405600581000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: oh, shadow-dom :) well, that is very vague at the moment","msgtype":"m.text"},"ts":1405600606000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"smaug____: you can also email on www-svg and might get some feedback from Blink… they actively based <use> on shadow DOM","msgtype":"m.text"},"ts":1405600640000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"krit: well, in blink shadow dom + is-in-doc is rather random","msgtype":"m.text"},"ts":1405600793000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"things work against the current specs etc","msgtype":"m.text"},"ts":1405600801000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I'm mainly trying to figure out how on earth to implement shadow dom in interoperable way","msgtype":"m.text"},"ts":1405600839000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: in Blink?","msgtype":"m.text"},"ts":1405600885000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"smaug____: or across HTML/SVG ?","msgtype":"m.text"},"ts":1405600892000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"well, all that","msgtype":"m.text"},"ts":1405600909000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: ok, IIRC this is still an open question on the Shadow DOM side (I thought you meant <use> based on shadow DOM because I recently was speaking with someone about that)","msgtype":"m.text"},"ts":1405600963000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"smaug____: Many thinks in the Shadow DOM spec require HTMLElements","msgtype":"m.text"},"ts":1405601009000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"smaug____: currently SVGElement does not inherit from HTMLElement","msgtype":"m.text"},"ts":1405601020000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1405601037000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: you should ask dglazkov_ when it comes to Shadow DOM. He might have a way forward","msgtype":"m.text"},"ts":1405601066000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"Are there any APIs that suggest a response has status 200 (vs 4**/5**), even if the response is from another origin, aside from appcache?","msgtype":"m.text"},"ts":1405601711000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(assuming the request is no-cors)","msgtype":"m.text"},"ts":1405601719000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: none I can think of. Not that my knowledge could be considered broad..","msgtype":"m.text"},"ts":1405602295000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"looks at https://dvcs.w3.org/hg/dap/raw-file/tip/discovery-api/Overview.html","msgtype":"m.emote"},"ts":1405602392000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: trying to work out if the appcache thing was a mistake that shouldn't be repeated","msgtype":"m.text"},"ts":1405602435000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I think it wasn't an unintentional mistake at the time it was specced at least (as opposed to in hindsight now). But you'd probably want to hear from the guy who wrote it, as far as the rationale","msgtype":"m.text"},"ts":1405602569000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"provided he still remembers at this point","msgtype":"m.text"},"ts":1405602583000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Does any browser implement add*Event*Listener for MediaQueryList?","msgtype":"m.text"},"ts":1405605780000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I doubt it","msgtype":"m.text"},"ts":1405605787000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"foolip: So I realised on the tube that something like <script type=\"text/webdriver+python\">getElement(\"#button\").click()</script> would be rather straightforward to implement","msgtype":"m.text"},"ts":1405605808000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yeah MDN was unhelpful. but i noticed today for the first time that the spec included EventTarget","msgtype":"m.text"},"ts":1405605809000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It was discussed a while ago","msgtype":"m.text"},"ts":1405605863000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"you mean because it's not implemented in blink?","msgtype":"m.text"},"ts":1405610046000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"https://twitter.com/Aeyoun/status/489790384193548288","msgtype":"m.text"},"ts":1405613420000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"showModalDialog ... was never formally standardized","msgtype":"m.text"},"ts":1405613870000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"abarth, wat","msgtype":"m.text"},"ts":1405613872000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: Really?","msgtype":"m.text"},"ts":1405614104000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Ms2ger: hi","msgtype":"m.text"},"ts":1405614869000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"How is that claim true?","msgtype":"m.text"},"ts":1405614902000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"dunno","msgtype":"m.text"},"ts":1405614939000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"Why'd you make it, then?","msgtype":"m.text"},"ts":1405614947000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"i didn't write the blog post","msgtype":"m.text"},"ts":1405614983000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"despite it having my name attached to it :(","msgtype":"m.text"},"ts":1405614990000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"That seems like a poor situation","msgtype":"m.text"},"ts":1405615012000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"indeed","msgtype":"m.text"},"ts":1405615052000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"Hixie: http://whatwg.org/html#quotes uses selectors like :root:lang(af), :not(:lang(af)) > :lang(af). Why this rather than just :lang(af)? AFAICT they’re equivalent, assuming no other 'quotes' declaration in the UA stylesheet.","msgtype":"m.text"},"ts":1405615097000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"I think the issue was with <p lang=en>Voltaire said <q lang=fr>quelque chose</q>","msgtype":"m.text"},"ts":1405615277000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Does quotes apply to the element it's set on?","msgtype":"m.text"},"ts":1405615292000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"is not down with the kids enough to know which blog post is being refered to","msgtype":"m.emote"},"ts":1405615298000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"http://blog.chromium.org/2014/07/disabling-showmodaldialog.html","msgtype":"m.text"},"ts":1405615344000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"SimonSapin: the problem is other 'quotes' declarations in the UA stylesheet","msgtype":"m.text"},"ts":1405615907000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"SimonSapin: or the author style sheet","msgtype":"m.text"},"ts":1405615916000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh, right. In <div lang=en><p style=\"quotes: '«' '»'\"><q>, :lang(en) would apply instead of the inherited value.","msgtype":"m.text"},"ts":1405616234000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1405616288000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"there's a bug on the current selector though","msgtype":"m.text"},"ts":1405616298000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"arguably it's wrong","msgtype":"m.text"},"ts":1405616304000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i forget the problem","msgtype":"m.text"},"ts":1405616307000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"something about what language to use on the quotes itself, or something","msgtype":"m.text"},"ts":1405616315000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or whether to reset the counter when you change languages","msgtype":"m.text"},"ts":1405616324000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"can i just say that specificity was a mistake","msgtype":"m.text"},"ts":1405616731000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"a cool seeming, clever-sounding, mistake.","msgtype":"m.text"},"ts":1405616744000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"s/specificity/css/ ? :)","msgtype":"m.text"},"ts":1405616894000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"s/css/the web/?","msgtype":"m.text"},"ts":1405617015000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"css and the web as a whole aren't mistakes, they're good ideas with mistakes in them","msgtype":"m.text"},"ts":1405617176000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"specificity is just a mistake.","msgtype":"m.text"},"ts":1405617182000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"W3C Invites Implementations of Polyglot Markup: A robust profile of the HTML5 vocabulary\"","msgtype":"m.text"},"ts":1405617251000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Of course","msgtype":"m.text"},"ts":1405617333000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hixie: CSS isn't a mistake, but if you started from a clean slate today you would end up with something pretty different, I think","msgtype":"m.text"},"ts":1405618696000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"With or without the experience we've had with CSS?","msgtype":"m.text"},"ts":1405618719000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Either?","msgtype":"m.text"},"ts":1405618994000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: yeah. like, no specificity. :-)","msgtype":"m.text"},"ts":1405619275000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"jgraham: and pretty different layout model primitives","msgtype":"m.text"},"ts":1405619286000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and presumably none of these: http://wiki.csswg.org/ideas/mistakes","msgtype":"m.text"},"ts":1405619398000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"I was mostly thinking of the layout model primitives","msgtype":"m.text"},"ts":1405619432000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"And the sort of combinatorial explosion of complexity that happens every time you add a new one","msgtype":"m.text"},"ts":1405619478000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I really like that mistakes page","msgtype":"m.text"},"ts":1405619499000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it humanizes the CSSWG","msgtype":"m.text"},"ts":1405619506000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"some things in that list are wrong","msgtype":"m.text"},"ts":1405619982000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"e.g. \"Table layout should be sane\" isn't a CSS mistake","msgtype":"m.text"},"ts":1405619986000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it would have been far worse for CSS to not be compatible with what browsers already had","msgtype":"m.text"},"ts":1405619999000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and specificity is missing from that list :-)","msgtype":"m.text"},"ts":1405620052000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"It's a problem with CSS, if you call them mistakes. Whether the CSS WG could do anything about them is tangential.","msgtype":"m.text"},"ts":1405622253000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Someday fantasai and I will finish nailing down the actual layout primitives, so it'll at least be clear *what* things are exploding in complexity when you add a new one.","msgtype":"m.text"},"ts":1405625383000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: re: https://github.com/tc39/test262/pull/4#issuecomment-49222581 sure, once I get back from vacation :)","msgtype":"m.text"},"ts":1405627774000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: awesome :)","msgtype":"m.text"},"ts":1405627785000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: has there been any discussion on what to do with JS tests in https://github.com/w3c/web-platform-tests?","msgtype":"m.text"},"ts":1405627803000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"WPT has a lower barrier for entry (no CLA signing etc.) but test262 has a better structure, at least for JS specifically","msgtype":"m.text"},"ts":1405627865000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: I was not aware that those tests existed; I don't think anyone else was either.","msgtype":"m.text"},"ts":1405627909000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"mathiasbynens: how many of them are correct per ES6?","msgtype":"m.text"},"ts":1405628041000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: not sure","msgtype":"m.text"},"ts":1405628080000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"but it seems like something can be done now to avoid duplicate efforts in the future","msgtype":"m.text"},"ts":1405628100000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"even if it’s just adding a note to the WPT readme","msgtype":"m.text"},"ts":1405628113000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"it'd be nice to look through opjsunit too, but most of that is either really basic stuff or regression tests","msgtype":"m.text"},"ts":1405628198000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"i need to port http://mathias.html5.org/tests/javascript/ too (only the idenfitier tests need updating as per ES6)","msgtype":"m.text"},"ts":1405628275000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"JakeA: can you confirm that http://www.chromestatus.com/features/6561526227927040 should be moved to M38?","msgtype":"m.text"},"ts":1405630132000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: yes","msgtype":"m.text"},"ts":1405630621000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"A lot of stuff on that page is not up to date with blink-dev announcements, at least this morning","msgtype":"m.text"},"ts":1405631947000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ok, updated the SW section. you guys should probably get edit access ;)","msgtype":"m.text"},"ts":1405631986000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"JakeA: https://jakearchibald.github.io/isserviceworkerready/ doesn't reflect that Chrome 36 fixed Promise.resolve","msgtype":"m.text"},"ts":1405632081000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"http://domenic.me/aplus-tests-against-the-browser/ went from ~150 to 24 failures because of that","msgtype":"m.text"},"ts":1405632177000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Domenic: will update, cheers","msgtype":"m.text"},"ts":1405632347000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":" JakeA: have you considered returning Promise.race() for entries missing in the cache as suggested here: http://esdiscuss.org/topic/promise-any#content-7","msgtype":"m.text"},"ts":1405632783000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"tobie_: \"Returning promise.race()\" is a weird way to say \"return an eternally pending promise\".","msgtype":"m.text"},"ts":1405632818000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: well, it's a weird way to describe a weird concept. So it might be fitting.","msgtype":"m.text"},"ts":1405632896000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"What's weird about a pending promise?","msgtype":"m.text"},"ts":1405632907000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: nothing.","msgtype":"m.text"},"ts":1405632973000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"EXACTLY","msgtype":"m.text"},"ts":1405632979000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: an *eternally* pending one, on the other hand…","msgtype":"m.text"},"ts":1405632995000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"At least say \"new Promise()\". ^_^","msgtype":"m.text"},"ts":1405633013000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That throws.","msgtype":"m.text"},"ts":1405633028000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"(not sure if impl or spec issue.)","msgtype":"m.text"},"ts":1405633059000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"new Promise(function(){})","msgtype":"m.text"},"ts":1405633060000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Probably on purpose.","msgtype":"m.text"},"ts":1405633065000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That indeed reads better (than Promise.race()). Unsure why scott used Promise.race() instead.","msgtype":"m.text"},"ts":1405633266000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"It technically does the same thing.","msgtype":"m.text"},"ts":1405633277000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Well, sure, but one expresses the intent a lot more clearly. :)","msgtype":"m.text"},"ts":1405633335000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"Indeed. ^_^","msgtype":"m.text"},"ts":1405633342000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'm curious as to whether returning an eternally pending promise works accidentally for this given cache/network race scenario or has other interesting properties.","msgtype":"m.text"},"ts":1405633538000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"Depends on what you mean by \"accidentally\". It avoids triggering the race end-times behavior.","msgtype":"m.text"},"ts":1405633575000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Well sure, I understand the how it works in that case.","msgtype":"m.text"},"ts":1405633605000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"JakeA tweeted earlier about whether cache.get(missingEntry) should resolve to undefined or reject.","msgtype":"m.text"},"ts":1405633691000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"And both seem not ideal. Which is why I find this seemingly weird return an eternally pending promise suggestion at least worth looking into.","msgtype":"m.text"},"ts":1405633763000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"s/And both seem not/Neither seem/","msgtype":"m.text"},"ts":1405633811000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"Hmm, interesting.","msgtype":"m.text"},"ts":1405634162000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I don't think that eternally-pending is very great, though it has some interesting properties.","msgtype":"m.text"},"ts":1405634195000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It doesn't mix with future \"await\", for example.","msgtype":"m.text"},"ts":1405634211000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(You'd have to guard every get() with a Promise.race(cache.get(), Promise.timeout(...)), for example.)","msgtype":"m.text"},"ts":1405634247000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Not sure. Wasn't he suggesting resolving the initial promise with an an eternally pending promise? (Not sure if that changes anything.)","msgtype":"m.text"},"ts":1405634990000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"\"the initial promise\"?","msgtype":"m.text"},"ts":1405635025000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: the promise returned by cache.get would get \"resolved\" with an eternally pending promise as a value.","msgtype":"m.text"},"ts":1405637236000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"I don't think Jake was suggesting that, but I might need to reread his post.","msgtype":"m.text"},"ts":1405637266000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Jake wasn't. Scott was.","msgtype":"m.text"},"ts":1405637279000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"TabAtkins: http://esdiscuss.org/topic/promise-any#content-7","msgtype":"m.text"},"ts":1405637317000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"Ah, yes.","msgtype":"m.text"},"ts":1405637334000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Still, bad idea. It makes .race() \"just work\", but has a number of bad properties I don't think we should accept.","msgtype":"m.text"},"ts":1405637357000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"For example, you can't ever tell via .get() that the key wasn't in the map.","msgtype":"m.text"},"ts":1405637384000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"We shouldn't *ever* return an eternally-pending promise from UA operations, because once we get \"await\", it'll be a footgun that freezes your code execution.","msgtype":"m.text"},"ts":1405637422000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"will we always know they won't be eternal?","msgtype":"m.text"},"ts":1405637456000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(It's okay if something *ends up* as eternally-pending for outside reasons, like a network request that never happens to complete, but it shouldn't happen when we have control over everything.)","msgtype":"m.text"},"ts":1405637459000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ah, fair enough","msgtype":"m.text"},"ts":1405637504000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"though usually if you have complete control over everything, you don't need to use a promise :-)","msgtype":"m.text"},"ts":1405637527000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: yeah, so that was my initial question. Is the the fact it makes .run() just work accidental or is there something more interesting behind these eternally pending promise that would make it a worthwhile pattern to use.","msgtype":"m.text"},"ts":1405637540000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"Sounds like the answer is: nope that was accidental.","msgtype":"m.text"},"ts":1405637562000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"TabAtkins: are you saying that if it can be determined that a promise that already got returned is never gonna come back, it should then fail unless the browser has decided to apply sanctions to the relevant page anyway?","msgtype":"m.text"},"ts":1405637620000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"tobie_: Okay, in that context, definitely accidental.  It just happens to prevent .race() from prematurely ending.","msgtype":"m.text"},"ts":1405637889000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"How would the UA know about that in all but the most trivial cases? (Sounds like the halting problem to me.)","msgtype":"m.text"},"ts":1405637988000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"tobie_: Right, accidental.  It just happens to be what's needed to keep .race() from ending prematurely.","msgtype":"m.text"},"ts":1405638119000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"tobie_: the UA wouldn't know per se, but the UA implementor can prove it in many cases","msgtype":"m.text"},"ts":1405638204000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"tobie_: obviously I'm not saying this should happen in general, but there are often spots in the code where the UI implementor will know stuff like \"this operation can't possibly complete anymore\" and write it in a comment ...","msgtype":"m.text"},"ts":1405638507000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: No, I'm just saying that a UA should never do the equivalent of \"return new Promise(function(){});\" in its code.","msgtype":"m.text"},"ts":1405638576000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That is, they should never return a promise that, intentionally, doesn't return.","msgtype":"m.text"},"ts":1405638590000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"is now confused about whether promises are about lazy evaluation or async I/O","msgtype":"m.emote"},"ts":1405638640000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Both!","msgtype":"m.text"},"ts":1405638694000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so I'm not the only one then!","msgtype":"m.text"},"ts":1405638702000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"they can do both, and other stuff","msgtype":"m.text"},"ts":1405638717000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sounds overloaded","msgtype":"m.text"},"ts":1405638724000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"(And the conflict between those two sometimes means you're conflicted on whether to fulfill with a \"kinda failure\" value, or reject with an error.","msgtype":"m.text"},"ts":1405638726000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":")","msgtype":"m.text"},"ts":1405638730000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"are they short for \"campaign promises\"","msgtype":"m.text"},"ts":1405638738000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"that's like saying a function can be used for I/O and calculation, and is therefore overloaded...","msgtype":"m.text"},"ts":1405638740000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: yeah","msgtype":"m.text"},"ts":1405638756000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Like what Jake is stressing over - whether cache.get(), when the key isn't in the cache, should fulfill with undefined, or reject with a NotFoundError.","msgtype":"m.text"},"ts":1405638757000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: if it's for calculation, it should be a pure function that doesn't have any side effects","msgtype":"m.text"},"ts":1405638779000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"or, well, effects","msgtype":"m.text"},"ts":1405638786000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"so a function that does I/O should never e.g. concatenate a path and a filename? :-)","msgtype":"m.text"},"ts":1405638829000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"because that's a calculation? :-)","msgtype":"m.text"},"ts":1405638837000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well, if it involves IO it's stuck in the IO monad, obviously","msgtype":"m.text"},"ts":1405638951000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":";-P","msgtype":"m.text"},"ts":1405638958000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Promises, the *construct*, can be used for plenty of things.  They're a pretty general tool for representing any async computation.","msgtype":"m.text"},"ts":1405638962000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Any individual promise will only be used for one thing, of course.","msgtype":"m.text"},"ts":1405638971000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: one can only hope!","msgtype":"m.text"},"ts":1405638982000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Objecting to Promises being used for multiple things is like objecting to monads. ^_^","msgtype":"m.text"},"ts":1405638985000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"perhaps it would be helpful to have names for typical genres of promise","msgtype":"m.text"},"ts":1405639002000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"(I'm not saying that APIs should actually include those names, mind you; but they could be useful in API documentation.)","msgtype":"m.text"},"ts":1405639075000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"So far we haven't been using them for lazy eval, so it's not important yet.","msgtype":"m.text"},"ts":1405639187000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"tries to understand what, exactly, a Monad Objector would do","msgtype":"m.emote"},"ts":1405639192000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Go read es-discuss when we were discussing promises, and you'll see.","msgtype":"m.text"},"ts":1405639216000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Lots of people opposed to the \"complexity\" of monadic promises, because they don't understand what monads are.)","msgtype":"m.text"},"ts":1405639238000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It's because \"monad\" is a stupid ugly name that should die, of course, but still.","msgtype":"m.text"},"ts":1405639251000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"maybe binding promises would be a better name for such a thing","msgtype":"m.text"},"ts":1405639282000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"or not, that might be too punny","msgtype":"m.text"},"ts":1405639295000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I think actual lazy evalutation as a use for promises is looked down on, actually.","msgtype":"m.text"},"ts":1405639304000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It means the promise waiting until it gets a listener to do some work.","msgtype":"m.text"},"ts":1405639314000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: that's how lazy evaluation works, yes ;-)","msgtype":"m.text"},"ts":1405639360000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"What I mean is, you shouldn't use promises for that.  ^_^  At least, not directly.  Returning a thunk which you can *force* to evaluate (and when then returns a promise for such) is fine.","msgtype":"m.text"},"ts":1405639411000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Um... what the hell is a stylesheet with a href like this? <link href=\"//b.example.com/blabla.css\"?","msgtype":"m.text"},"ts":1405639415000,"senderName":"tokebloke","senderId":"tokebloke@irc"},
{"content":{"body":"Two //s in the beginning followed by a hostname...","msgtype":"m.text"},"ts":1405639426000,"senderName":"tokebloke","senderId":"tokebloke@irc"},
{"content":{"body":"tokebloke: //foo.com is a scheme-relative url.","msgtype":"m.text"},"ts":1405639429000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Means it'll use the same scheme (http or https) as the base url.","msgtype":"m.text"},"ts":1405639439000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Really? You can do that?!","msgtype":"m.text"},"ts":1405639440000,"senderName":"tokebloke","senderId":"tokebloke@irc"},
{"content":{"body":"Yup, supported everywhere.","msgtype":"m.text"},"ts":1405639447000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"...","msgtype":"m.text"},"ts":1405639450000,"senderName":"tokebloke","senderId":"tokebloke@irc"},
{"content":{"body":"anything but a promise for undefined is a horrible idea.","msgtype":"m.text"},"ts":1405639453000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"This piece of knowledge could've saved me hundreds of hours...","msgtype":"m.text"},"ts":1405639461000,"senderName":"tokebloke","senderId":"tokebloke@irc"},
{"content":{"body":"Domenic: I'm pretty sure I agree with you.","msgtype":"m.text"},"ts":1405639476000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Though the idea of using rejection as a control-flow mechanism is intriguing, it really should be reserved for the same stuff that we'd throw errors for in sync code.","msgtype":"m.text"},"ts":1405639506000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Because it'll turn into errors when we get \"await\".)","msgtype":"m.text"},"ts":1405639515000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: BTW I wanted to +1 your reply in pretty much every aspect. But I thought that would be contentless so I did not.","msgtype":"m.text"},"ts":1405639518000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Which one?","msgtype":"m.text"},"ts":1405639534000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"has been doing too manyt hings today.","msgtype":"m.emote"},"ts":1405639543000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"To the Promise.any thread","msgtype":"m.text"},"ts":1405639546000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ah, kk.","msgtype":"m.text"},"ts":1405639552000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"RSS feeds and HTML pages must be the most abused standards...","msgtype":"m.text"},"ts":1405639826000,"senderName":"tokebloke","senderId":"tokebloke@irc"},
{"content":{"body":"People just type whatever the hell they feel like with no regard to the standards.","msgtype":"m.text"},"ts":1405639839000,"senderName":"tokebloke","senderId":"tokebloke@irc"},
{"content":{"body":"Or logic, or common sense.","msgtype":"m.text"},"ts":1405639844000,"senderName":"tokebloke","senderId":"tokebloke@irc"},
{"content":{"body":"The \"thunk\" thing is similar to what I specced for FontFace, for example.  You can construct a FontFace with a url, and it doesn't do anything immediately.  If you observe the load status via .ready(), still nothing.  You have to explicitly ask it to start loading, via .load(), to get it to start doing work, and it returns a Promise at that point for the","msgtype":"m.text"},"ts":1405639845000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"completion fo the work.","msgtype":"m.text"},"ts":1405639845000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"tokebloke: See /topic.","msgtype":"m.text"},"ts":1405639853000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":":|","msgtype":"m.text"},"ts":1405639884000,"senderName":"tokebloke","senderId":"tokebloke@irc"},
{"content":{"body":"tokebloke: I'm sorry about your wasted hours!","msgtype":"m.text"},"ts":1405640771000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"and yes, RSS and HTML *are* pretty darn abused","msgtype":"m.text"},"ts":1405640793000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I should like to see an abuse of RSS 3.0, though, for some reason ;-)","msgtype":"m.text"},"ts":1405640887000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"(See <http://www.aaronsw.com/weblog/000574> and <http://www.aaronsw.com/2002/rss30>)","msgtype":"m.text"},"ts":1405641035000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I hate finding out actual useful stuff like that.","msgtype":"m.text"},"ts":1405641444000,"senderName":"tokebloke","senderId":"tokebloke@irc"}
]