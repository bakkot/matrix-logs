[
{"content":{"body":"*shakes fist* at difference in microtask behavior between normal event dispatch and dispatchEvent(). ","msgtype":"m.emote"},"ts":1485305092000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Well, https://annevankesteren.nl/2012/07/passion \"making HTML great again\" reads awkward today","msgtype":"m.text"},"ts":1485323712000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: https://bugs.chromium.org/p/chromium/issues/detail?id=591919 covers the weirdness with NodeFilter I think, that is why the prototype is wrong","msgtype":"m.text"},"ts":1485330664000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: good.","msgtype":"m.text"},"ts":1485330749000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"foolip: you might have some comments to make about https://github.com/heycam/webidl/pull/283","msgtype":"m.text"},"ts":1485331165000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: so many changes together, are they all co-dependent?","msgtype":"m.text"},"ts":1485331245000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Arguably the last one isn't. But it's a one liner.","msgtype":"m.text"},"ts":1485331299000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: made one comment :)","msgtype":"m.text"},"ts":1485331454000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: I saw. :)","msgtype":"m.text"},"ts":1485331469000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"clairvoyant","msgtype":"m.text"},"ts":1485331480000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: you're probably better off just looking at the output. It's mostly a complete rewrite of those sections.","msgtype":"m.text"},"ts":1485331534000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: even so it's a bunch of ES-style algorithms that I don't have much experience in reading. maybe Domenic would do a better job?","msgtype":"m.text"},"ts":1485331582000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: oh, I wasn't asking for a review. Just making sure you were aware of the upcoming changes and that they matched your expectations.","msgtype":"m.text"},"ts":1485331926000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: ah, well the summary all makes sense to me","msgtype":"m.text"},"ts":1485332015000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"callback interfaces are silly :)","msgtype":"m.text"},"ts":1485332056000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Good.","msgtype":"m.text"},"ts":1485332058000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Indeed.","msgtype":"m.text"},"ts":1485332066000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: Regarding the top-level vs. nested navigation request we discussed briefly yesterday: would you prefer an approach that added a new property to requests? Or would you prefer something like splitting the `document` destination into `nested document` and `top-level document`?","msgtype":"m.text"},"ts":1485338860000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: dunno, the latter might be tricky given that we already expose \"document\" I think","msgtype":"m.text"},"ts":1485338967000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh. Right. I forgot that `destination` is web-exposed.","msgtype":"m.text"},"ts":1485338996000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Ok. Scratch that.","msgtype":"m.text"},"ts":1485339008000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Why would Object.getOwnPropertyDescriptor(location, \"valueOf\") return undefined?","msgtype":"m.text"},"ts":1485341034000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Seems like that would be a bug","msgtype":"m.text"},"ts":1485341071000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Good","msgtype":"m.text"},"ts":1485341075000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Where does that happen?","msgtype":"m.text"},"ts":1485342503000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: in Safari TP","msgtype":"m.text"},"ts":1485343244000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: see my most recent WPT PR","msgtype":"m.text"},"ts":1485343247000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Fun","msgtype":"m.text"},"ts":1485343502000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"tobie: So, is heycam/webidl your new home now?","msgtype":"m.text"},"ts":1485348859000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: mostly splitting my time between it and w3c/sensors (and friends).","msgtype":"m.text"},"ts":1485348900000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Nice.","msgtype":"m.text"},"ts":1485348935000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"tobie: Are you changing any syntax?","msgtype":"m.text"},"ts":1485349007000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I think we have already (jyasskin introduced records, Domenic namespaces). Looking at mixins soonish and deprecating things.","msgtype":"m.text"},"ts":1485349116000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Ok.","msgtype":"m.text"},"ts":1485349124000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: e.g. callback interface {}; -> legacycallback interface {}; or some such.","msgtype":"m.text"},"ts":1485349176000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Oh.","msgtype":"m.text"},"ts":1485349182000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"tobie: I'll check whether Gecko's parser got these changes already.","msgtype":"m.text"},"ts":1485349193000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I'd love to find a simple system to better track those","msgtype":"m.text"},"ts":1485349241000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: Yeah I didn't mean to update Gecko's parser,","msgtype":"m.text"},"ts":1485349258000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"tobie: just that we rely on this one in Servo too,","msgtype":"m.text"},"ts":1485349266000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"on?","msgtype":"m.text"},"ts":1485349272000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"on Gecko's parser","msgtype":"m.text"},"ts":1485349282000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"so when I hear changes are coming I try to check whether Gecko's got updated, and updates it in Servo.","msgtype":"m.text"},"ts":1485349301000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I see.","msgtype":"m.text"},"ts":1485349315000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"suggestions on how to keep track of implementation status of features, bugs opened against rendering engines, other specs, parsers and test suites are welcome.","msgtype":"m.text"},"ts":1485350137000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie, I've talked for years about creating tooling for that","msgtype":"m.text"},"ts":1485351356000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Has anyone come close to a workable solution?","msgtype":"m.text"},"ts":1485351380000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"No","msgtype":"m.text"},"ts":1485351392000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I don't know if anyone started","msgtype":"m.text"},"ts":1485351399000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Microsoft worked on a thing but when I looked at it, it didn’t really fit the bill.","msgtype":"m.text"},"ts":1485351408000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"I was thinking of something rather basic like create an issue with a special tag name which references the different issues.","msgtype":"m.text"},"ts":1485351518000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Ideally, you'd have a small local script that would run it for you (file the issues with the different vendors or specs, collect their URLs, stick them in a GH issue in your repo)","msgtype":"m.text"},"ts":1485351575000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"That’s not a bad idea.","msgtype":"m.text"},"ts":1485351579000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"tobie: I wrote a small script to automatically file GitHub issues quoting which section for WebDriver: http://w3c.github.io/webdriver/webdriver-spec.html","msgtype":"m.text"},"ts":1485351610000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"tobie: It would not be hard to look up the nearest command/definition/whatever and add a label to the issue.","msgtype":"m.text"},"ts":1485351634000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"yeah, I'm actually more concerned about the APIs of the browser vendors trackers","msgtype":"m.text"},"ts":1485351680000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"and old W3C one.","msgtype":"m.text"},"ts":1485351690000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"The W3C tracker should be killed with fire.","msgtype":"m.text"},"ts":1485351789000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"What's the best practice for explainer content (outside explainer doc? informative sections? intro?) and why?","msgtype":"m.text"},"ts":1485358560000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Informative sections, because once you have a spec, nobody goes back to look at or update the explainer.","msgtype":"m.text"},"ts":1485358634000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"slightlyoff may disagree with me on that.","msgtype":"m.text"},"ts":1485358656000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Re the Hangouts plugin angst from yesterday: https://gsuiteupdates.googleblog.com/2016/09/new-early-adopter-programs-team-drives.html?m=1","msgtype":"m.text"},"ts":1485358838000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Googlers should be able to make meetings use the new thing. Googlers, ask me how.","msgtype":"m.text"},"ts":1485358869000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: it would be nice to have a blueprint for specs as to what questions need to be answered and why.","msgtype":"m.text"},"ts":1485358962000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"jyasskin: I've seen a lot of very good explainers lately, and I suspect that's because there's a good framework around what they're supposed to contain.","msgtype":"m.text"},"ts":1485359043000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Oooh, you mean for the content of explainers, often before there's a spec. I'll look once I get to a computer. At one point it was just \"imitate Service Workers.\"","msgtype":"m.text"},"ts":1485359205000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: well, no. I mean all non-normative content.","msgtype":"m.text"},"ts":1485359245000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"jyasskin: this could include high-level content, scope clarification, goal of the document, use cases, etc.","msgtype":"m.text"},"ts":1485359307000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I rarely see diagrams in specs while it sometimes helps to better grasp their content.","msgtype":"m.text"},"ts":1485365300000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"For example, I'm still struggling with how the different parts of WebIDL end-up exposed to the Web through their bindings.","msgtype":"m.text"},"ts":1485365301000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"A diagram would really help.","msgtype":"m.text"},"ts":1485365327000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"s/would/could/","msgtype":"m.text"},"ts":1485365346000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Are we avoiding those because the tooling to make them is terrible?","msgtype":"m.text"},"ts":1485365371000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"s/make/make and update/","msgtype":"m.text"},"ts":1485365388000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: What are the chances of integrating dot into Bikeshed?","msgtype":"m.text"},"ts":1485365913000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"If dot exists in Python, I'm amenable.","msgtype":"m.text"},"ts":1485365951000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"https://pypi.python.org/pypi/graphviz","msgtype":"m.text"},"ts":1485365972000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Ah, no, that's just a library to create dot files. It'd be just as easy to subprocess out to dot, for dot written inline in the spec.","msgtype":"m.text"},"ts":1485366033000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Yeah, subprocessing out to an external library isn't great. It won't work on many systems.","msgtype":"m.text"},"ts":1485366299000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: do you not rely on any extension modules currently, or is it specifically subprocess that's the worry?","msgtype":"m.text"},"ts":1485366387000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I rely on a few Python modules installable from pip.  Otherwise nothing.","msgtype":"m.text"},"ts":1485366412000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: pure-Python modules?","msgtype":"m.text"},"ts":1485366442000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"no, lxml is there","msgtype":"m.text"},"ts":1485366462000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"so there's already a depend on an external library","msgtype":"m.text"},"ts":1485366474000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(And I'm gradually moving toward the idea that I should just bake in all those modules; the pygments version differences are already annoying.)","msgtype":"m.text"},"ts":1485366475000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"gsnedders: Sure, but that's unfortunately a *very core* dependency.","msgtype":"m.text"},"ts":1485366493000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yeah, libxslt and libxml are the only external (non-Python) dependencies.","msgtype":"m.text"},"ts":1485366561000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Because they're dependencies of the lxml python module, which is my treebuilder, which I need because it's what the Selectors engine is built on top of.","msgtype":"m.text"},"ts":1485366588000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: any input on https://github.com/w3c/csswg-drafts/issues/904 ?","msgtype":"m.text"},"ts":1485367238000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"jochen__: Official response is: yup, I need to start speccing that stuff. ^_^","msgtype":"m.text"},"ts":1485367283000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: i'd also be happy with a PR for referrer policy that addresses https://github.com/w3c/webappsec-referrer-policy/issues/89","msgtype":"m.text"},"ts":1485367343000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":":D","msgtype":"m.text"},"ts":1485367347000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"Sure, I'll get to this.","msgtype":"m.text"},"ts":1485367365000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"cool, thx","msgtype":"m.text"},"ts":1485367381000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"jyasskin: Oh wait it looks like graphviz is, itself, a python library https://github.com/ellson/graphviz/","msgtype":"m.text"},"ts":1485370219000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"wait nm it's c","msgtype":"m.text"},"ts":1485370238000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1485370279000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: wrt to permissions, have you 1) considered permission levels (foreground, background, always on), like e.g. iOS has","msgtype":"m.text"},"ts":1485377233000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: So far, we only have foreground permissions, and we'd been thinking of things like geofencing (background location) as just having a separate permission name. But since we haven't done any background permissions, it's not at all clear that that's what we'll settle on.","msgtype":"m.text"},"ts":1485377307000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: 2) timestamps of when permission was granted. I'll want to make sure cached values such as geo coordinates are only provided to the developer if the permission was granted before they were requested","msgtype":"m.text"},"ts":1485377350000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"jyasskin: geofencing is really an \"always on\" state","msgtype":"m.text"},"ts":1485377393000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"jyasskin: different from background / not top-level","msgtype":"m.text"},"ts":1485377411000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"We haven't considered timestamps at all.","msgtype":"m.text"},"ts":1485377416000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"tobie: Is \"background\" \"in a tab but not the active one\"?","msgtype":"m.text"},"ts":1485377431000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: for the sake of this conversation: not top-level browsing context.","msgtype":"m.text"},"ts":1485377459000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"jyasskin: I guess Feature Policy is the thing for that","msgtype":"m.text"},"ts":1485377495000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Ok, so most permissions are \"background\" right now, but WebNFC is planning to be foreground-only.","msgtype":"m.text"},"ts":1485377499000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: right but there's no distinction at the permission level","msgtype":"m.text"},"ts":1485377523000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Right.","msgtype":"m.text"},"ts":1485377531000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: it's a non user-flippable thing.","msgtype":"m.text"},"ts":1485377556000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"And it would probably make sense to expose that in the shared infrastructure.","msgtype":"m.text"},"ts":1485377561000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Right now it's not user-flippable. It's plausible to let users toggle foreground vs background. Always-on tends to require the API to be designed to support it, but we could let users degrade that to fg or bg.","msgtype":"m.text"},"ts":1485377640000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: right-- this is not to say all of the features necessarily need to be available across all three \"states\"","msgtype":"m.text"},"ts":1485377794000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"jyasskin: just recognizing they're the same \"feature\" despite possible API differences and different levels of implied trust and privacy/security risks","msgtype":"m.text"},"ts":1485377904000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Yeah, you've identified something we should figure out in the permissions spec.","msgtype":"m.text"},"ts":1485377939000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: e.g.: It would be dumb to prompt a user of geofencing for geolocation access","msgtype":"m.text"},"ts":1485377946000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"jyasskin: it's implied","msgtype":"m.text"},"ts":1485377968000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"At the moment, we'd handle that by saying geofencing is \"stronger than\" geolocation (https://w3c.github.io/permissions/#permissiondescriptor-stronger-than), but we can do it in a more systematic way.","msgtype":"m.text"},"ts":1485377996000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: wasn't aware of that.","msgtype":"m.text"},"ts":1485378222000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"JakeA: annevk: a bit sad that this cancelation/observer design marks the end of fetch being platform-agnostic, but such is life. (Even if DOMException \"AbortError\" doesn't kill that dream, addEventListener definitely does.)","msgtype":"m.text"},"ts":1485378555000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: events should be a language feature","msgtype":"m.text"},"ts":1485378630000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"yeah, well, there are people in Chrome opposed to that too","msgtype":"m.text"},"ts":1485378679000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: no idea how to pull it off, but it's the number one thing that breaks platform agnosticism","msgtype":"m.text"},"ts":1485378679000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I guess Node could just copy EventTarget","msgtype":"m.text"},"ts":1485378721000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"haha","msgtype":"m.text"},"ts":1485378730000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I don't see any other path.","msgtype":"m.text"},"ts":1485378735000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"copy\"?","msgtype":"m.text"},"ts":1485378760000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Copy the design of, i.e. implement","msgtype":"m.text"},"ts":1485378773000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh, yeah. And then I'd be retroactively right to treat EventTarget as a mixin! ;-)","msgtype":"m.text"},"ts":1485378805000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Domenic: is it the same Chrome people/persons?","msgtype":"m.text"},"ts":1485379193000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"An overlapping group","msgtype":"m.text"},"ts":1485379236000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Node people tend to say: I guess browsers could just copy EventEmitter","msgtype":"m.text"},"ts":1485379272000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"0.5 million modules vs. break the web","msgtype":"m.text"},"ts":1485379306000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: yay for your deduplication into ConvertToInt(); it's making this SharedArrayBuffer/types-have-attributes thing I'm working on much easier.","msgtype":"m.text"},"ts":1485381586000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: cool. Great to see stuff like that paying off!","msgtype":"m.text"},"ts":1485381619000,"senderName":"tobie","senderId":"tobie@irc"}
]