[
{"content":{"body":"annevk: Finally rebased the lazyload PR and addressed your nit. I've responded to your latest comment as well; once we resolve that and once I file a follow-up issue, I think we might be finished after all.","msgtype":"m.text"},"ts":1580087938000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: sounds great!","msgtype":"m.text"},"ts":1580109295000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hi all. I'm discussing a way for wasm-bindgen to allow Webassembly generated with that tool to allow registering event listeners in Service Workers. Because Service Workers require this registration to happen on first execution, it seems that WebAssembly.Instance is the only way to do this.","msgtype":"m.text"},"ts":1580120439000,"senderName":"moshevds","senderId":"moshevds@irc"},
{"content":{"body":"However, a fear that WebAssembly.Instance might disappear has been raised. What is the best way (or community to ask) for me to get some assurances that there is no intention to remove support for running Webassembly before the window for registering listeners has passed? (By retaining WebAssembly.Instance at least until an alternative exists.)","msgtype":"m.text"},"ts":1580120512000,"senderName":"moshevds","senderId":"moshevds@irc"},
{"content":{"body":"The issue where we have been discussing this is at: https://github.com/rustwasm/wasm-bindgen/issues/1976","msgtype":"m.text"},"ts":1580120571000,"senderName":"moshevds","senderId":"moshevds@irc"},
{"content":{"body":"annevk: https://github.com/whatwg/html/issues/5223","msgtype":"m.text"},"ts":1580123976000,"senderName":"yhirano","senderId":"yhirano@irc"},
{"content":{"body":"annevk: currently we're not revealing redirect location, are you concerned about the case where malicious developers uses SAB to extract such secret information through SPECTRE-like attacks?","msgtype":"m.text"},"ts":1580124106000,"senderName":"yhirano","senderId":"yhirano@irc"},
{"content":{"body":"yhirano: yes","msgtype":"m.text"},"ts":1580138759000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yhirano: or secrets in other headers or the response body","msgtype":"m.text"},"ts":1580138813000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-5.2 and surrounding sections is pretty fun... look at that deep integration with Fetch and HTML inside an IETF document.","msgtype":"m.text"},"ts":1580156583000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Eh except > The term \"origin\", the mechanism of deriving an origin from a URI, and the \"the same\" matching algorithm for origins are defined in [RFC6454].","msgtype":"m.text"},"ts":1580156704000,"senderName":"Domenic","senderId":"Domenic@irc"}
]