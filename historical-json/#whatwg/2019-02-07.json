[
{"content":{"body":"jyasskin: not necessarily, session history is a bit broken","msgtype":"m.text"},"ts":1549515874000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Mek: yoav: ah, I read past browser, yeah, that is not specified that well; in parallel is sometimes that","msgtype":"m.text"},"ts":1549515982000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: only when script is inserted later on, aiui","msgtype":"m.text"},"ts":1549516031000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Thanks.","msgtype":"m.text"},"ts":1549516839000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"annevk: You may get a PR tomorrow.","msgtype":"m.text"},"ts":1549516863000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"ðŸ˜Š","msgtype":"m.text"},"ts":1549519527000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I feel like we should do a first patch to the insert algo, that makes differences between fragments and normal nodes disappear.","msgtype":"m.text"},"ts":1549534038000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: which differences are you thinking of?","msgtype":"m.text"},"ts":1549534093000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://dom.spec.whatwg.org/#concept-node-insert Make steps 7.1-7.3 its own loop, and reloop over each node in nodes for steps 7.4-7-7.","msgtype":"m.text"},"ts":1549534208000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: Oh also, I'm curious about why step 7 says \"For each node in nodes, *in tree order*\", nodes is supposed to be a list at that point.","msgtype":"m.text"},"ts":1549534273000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: that seems like a bug","msgtype":"m.text"},"ts":1549534318000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Making two loops make the algo not do dumb stuff if child's index changes.","msgtype":"m.text"},"ts":1549534375000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: so that means all nodes are inserted by the time we execute scripts?","msgtype":"m.text"},"ts":1549534377000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yes. This is still not exactly what Firefox and Chrome do but it brings us closer.","msgtype":"m.text"},"ts":1549534397000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: how does that work for <script></script><iframe></iframe>?","msgtype":"m.text"},"ts":1549534400000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: It doesn't fix that problem, according to the spec the iframe would still not have its insertion steps ran yet.","msgtype":"m.text"},"ts":1549534419000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"It just fix the issue of moving around child during the insertion of multiple nodes from a fragment.","msgtype":"m.text"},"ts":1549534443000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: I don't know if such partial fixes are a thing, hence me asking you :)","msgtype":"m.text"},"ts":1549534458000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I think we should do a complete solution","msgtype":"m.text"},"ts":1549534477000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ok","msgtype":"m.text"},"ts":1549534481000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: as we might well end up with a different setup in the end","msgtype":"m.text"},"ts":1549534486000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I have a complete solution in mind","msgtype":"m.text"},"ts":1549534490000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: e.g., protect against weird indexes or have this separate script loop thingy","msgtype":"m.text"},"ts":1549534504000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I don't know how one can protect against weird indexes without two separate non-nested loops though.","msgtype":"m.text"},"ts":1549534541000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"My idea for the script/iframe thing is: make \"insertion steps\" take a \"list of pending script preparations\", then after you looped over all elements to run their insertion steps, prepare each script in order in the list.","msgtype":"m.text"},"ts":1549534572000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"(And make scripts' insertion steps just add themselves to that list)","msgtype":"m.text"},"ts":1549534616000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"We may otherwise prefer to make insertion steps take a queue of pending script executions, and change \"Immediately execute the script block, even if other scripts are already executing.\" to \"Queue the script on the queue of pending script executations\" in the \"prepare a script\" algo.","msgtype":"m.text"},"ts":1549534771000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: so that would roughly be the Firefox approach?","msgtype":"m.text"},"ts":1549534792000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: And the Chrome one, I think?","msgtype":"m.text"},"ts":1549534804000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I don't remember ðŸ˜ƒ","msgtype":"m.text"},"ts":1549534828000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Heh.","msgtype":"m.text"},"ts":1549534832000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: I would very much prefer if the queue is an argument to the insertion steps, at the very least,","msgtype":"m.text"},"ts":1549534854000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: so yeah, something like that sounds like the best way forward, perhaps we don't want to call it quite script executions as style stuff was on that queue too, but overall sounds good","msgtype":"m.text"},"ts":1549534863000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: jdm added a similar concept to Servo, but he made the queue live on document,","msgtype":"m.text"},"ts":1549534866000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"and it was super hard to realise it's specific to DOM tree mutations and can be self-contained in the insertion algo.","msgtype":"m.text"},"ts":1549534884000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: so we hand the elements a queue they can put stuff in?","msgtype":"m.text"},"ts":1549534887000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1549534896000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: Not sure what you mean about styles.","msgtype":"m.text"},"ts":1549534902000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: iirc there's a case where you can observe when <style> gets its sheet set","msgtype":"m.text"},"ts":1549534917000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: it happens in that queue iirc","msgtype":"m.text"},"ts":1549534923000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: I like your approach of not introducing new global state, so +1 if that really works","msgtype":"m.text"},"ts":1549534943000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Nice","msgtype":"m.text"},"ts":1549534949000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"https://github.com/whatwg/dom/pull/576#issuecomment-368598457 Oh I misread that, I see what you mean.","msgtype":"m.text"},"ts":1549535033000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: queue of deferred insertion steps? What about a word related to \"finalization\"?","msgtype":"m.text"},"ts":1549535053000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: deferred seems good, finalization sounds like weak refs","msgtype":"m.text"},"ts":1549535103000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah, just not sure whether having both \"insertion steps\" and \"deferred insertion steps\" is a good idea","msgtype":"m.text"},"ts":1549535151000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: it seems fine, the latter is only a variable","msgtype":"m.text"},"ts":1549535183000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: could also name it _deferredSteps_ or some such","msgtype":"m.text"},"ts":1549535209000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ok","msgtype":"m.text"},"ts":1549535223000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: About https://github.com/whatwg/dom/pull/576#issuecomment-368598457","msgtype":"m.text"},"ts":1549535457000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I'll write a new test just to check something: I'm not sure it's null because it's really supposed to be done after scripts, or if it's null because we go through a fragment.","msgtype":"m.text"},"ts":1549535489000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Heyo, I've had this silly idea and wonder if it's worth trying to pursue or not. JS api that would trigger the emoji picker native to the platform (chrome has a emoji in context menu for any input), with how complicated emojis are with all the modifiers and what not, it might not be a terrible idea","msgtype":"m.text"},"ts":1549542205000,"senderName":"xPaw","senderId":"xPaw@irc"},
{"content":{"body":"Having a JS api to trigger it would allow web devs to replace any libraries implementing an emoji picker with the one native to the platform (e.g. button click event, call the emoji picker, which would pop up the native one)","msgtype":"m.text"},"ts":1549542253000,"senderName":"xPaw","senderId":"xPaw@irc"},
{"content":{"body":"xPaw: it does seem like a reasonable request given how prominent those kind of widgets are in OS stacks","msgtype":"m.text"},"ts":1549543504000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i don't know where to raise such an issue so it can be discussed or turned into a spec","msgtype":"m.text"},"ts":1549543604000,"senderName":"xPaw","senderId":"xPaw@irc"},
{"content":{"body":"chrome devs probably have a better idea, since they already had to deal with emoji pickers in each relevant platform","msgtype":"m.text"},"ts":1549543655000,"senderName":"xPaw","senderId":"xPaw@irc"},
{"content":{"body":"xPaw: https://discourse.wicg.io/ seems like a reasonable place to start for this","msgtype":"m.text"},"ts":1549543765000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"looks like it was discussed already https://discourse.wicg.io/t/invoke-emoji-input/1030","msgtype":"m.text"},"ts":1549543964000,"senderName":"xPaw","senderId":"xPaw@irc"},
{"content":{"body":"xPaw: yeah, though that's declarative; seems worth re-raising with the API angle as motivating factor, while acknowledging that past thread","msgtype":"m.text"},"ts":1549544062000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"anyway, up to you","msgtype":"m.text"},"ts":1549544069000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sure, thanks","msgtype":"m.text"},"ts":1549544073000,"senderName":"xPaw","senderId":"xPaw@irc"},
{"content":{"body":"xPaw: https://whatwg.org/faq#adding-new-features might also be of interest as general guidelines around this","msgtype":"m.text"},"ts":1549544084000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i've created https://discourse.wicg.io/t/js-api-to-trigger-the-platform-native-emoji-picker/3353","msgtype":"m.text"},"ts":1549544634000,"senderName":"xPaw","senderId":"xPaw@irc"},
{"content":{"body":"annevk: Is changing the contents of a Text node in a script element supposed to trigger its preparation?","msgtype":"m.text"},"ts":1549548603000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I'm not sure what HTML says, but bz did point out that Firefox at least does some amount of preparation when connected, and then executes the preparation in the deferred steps, so if an earlier deferred step modified the script that probably wouldn't affect what it will execute","msgtype":"m.text"},"ts":1549548769000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"looks at what HTML says","msgtype":"m.emote"},"ts":1549548777000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Pretty sure what Firefox does is the reason why my test with 3 scripts fail on it.","msgtype":"m.text"},"ts":1549548819000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"That's unrelated to my question though. :P","msgtype":"m.text"},"ts":1549548829000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"\"If node is a Text node and its parent is not null, run the child text content change steps for nodeâ€™s parent.\" when replacing data in a Text element,","msgtype":"m.text"},"ts":1549548862000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: understood, but I thought I'd mention that distinction here...","msgtype":"m.text"},"ts":1549548873000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and IIRC HTMLScriptElement doesn't have any child text content change steps.","msgtype":"m.text"},"ts":1549548876000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: yeah, script element processing model only triggers on being connected","msgtype":"m.text"},"ts":1549548897000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: and maybe when the src attribute is set for the first time? unclear","msgtype":"m.text"},"ts":1549548910000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Is there a test for that? Do you think I should write one?","msgtype":"m.text"},"ts":1549548919000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I suspect there might be some tests for that wherever the script element tests are","msgtype":"m.text"},"ts":1549548957000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ok!","msgtype":"m.text"},"ts":1549549117000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"(it is somewhat frustrating that it often feels like it'd be quicker to write a test then to find an existing HTML Standard test)","msgtype":"m.text"},"ts":1549549165000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: (yeah, that's definitely a problem too often :/)","msgtype":"m.text"},"ts":1549550029000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Who uses VS Code here?","msgtype":"m.text"},"ts":1549550547000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Tempted to quickly publish bikeshed syntax as an extension.","msgtype":"m.text"},"ts":1549550555000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: Aha https://dom.spec.whatwg.org/#concept-node-insert step 7.4","msgtype":"m.text"},"ts":1549550684000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Need to test inserting a script and a Text node into a style element and see if the style's child text content change steps get executed before or after the script.","msgtype":"m.text"},"ts":1549550720000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: sounds to me you're quickly catching up with zcorpan","msgtype":"m.text"},"ts":1549550777000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hah","msgtype":"m.text"},"ts":1549550784000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I'll take that as a compliment, for sure. :D","msgtype":"m.text"},"ts":1549550791000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: Oh btw, step 3 of https://html.spec.whatwg.org/multipage/#update-a-style-block","msgtype":"m.text"},"ts":1549550933000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"is a shadow root always itself in a document?","msgtype":"m.text"},"ts":1549550940000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: no","msgtype":"m.text"},"ts":1549550988000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Is that spec correct, then?","msgtype":"m.text"},"ts":1549550995000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I'm not sure, but the combination with the child text content change steps seem a little wrong, yeah","msgtype":"m.text"},"ts":1549551104000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: pretty sure there was a reason we didn't go with \"connected\" either though","msgtype":"m.text"},"ts":1549551124000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I interpreted step 3 as limiting the creation of the stylesheet to style elements which are actually in a document that is actually rendered and whatnot,","msgtype":"m.text"},"ts":1549551157000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"but I guess that it's the wrong interpretation anyway if it's just any document, right?","msgtype":"m.text"},"ts":1549551168000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"yeah, there are some tests that test these steps","msgtype":"m.text"},"ts":1549551193000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TIL stylesheets get loaded in any document, the more you knowâ€¦","msgtype":"m.text"},"ts":1549551253000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: So do you think the bit about shadow tree is wrong and it should use \"becomes connected\" instead?","msgtype":"m.text"},"ts":1549551332000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I.e. we shouldn't create style sheets for style elements that are in a shadow root that is itself not in a document tree?","msgtype":"m.text"},"ts":1549551352000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I'm not sure, nothing here changed in a while","msgtype":"m.text"},"ts":1549551465000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ok","msgtype":"m.text"},"ts":1549551470000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: per https://github.com/whatwg/html/issues/1194 it seems intentional","msgtype":"m.text"},"ts":1549551565000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Amazing","msgtype":"m.text"},"ts":1549551594000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Almost forgot to forget my sense of logic on this one.","msgtype":"m.text"},"ts":1549551621000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"2019 and people still haven't internalized the logic of the web","msgtype":"m.text"},"ts":1549551675000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(narrator: and for the better)","msgtype":"m.text"},"ts":1549551689000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Heh","msgtype":"m.text"},"ts":1549552331000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: At the very least, those investigations made me find out about CDATASection which we don't have in Servo,","msgtype":"m.text"},"ts":1549552362000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"and your wonderful comment about waiting to be 30yo to reinstate it, good stuff :D","msgtype":"m.text"},"ts":1549552374000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: now you need to wait until you're 30yo to impl it","msgtype":"m.text"},"ts":1549552419000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Joke's on you, I'm 31 already. :P","msgtype":"m.text"},"ts":1549552446000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: I'm probs going to make it an easy issue, that interface just exists and doesn't do anything particular, right?","msgtype":"m.text"},"ts":1549552460000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"An intern made a whole tutorial about adding an interface to Servo, may as well make use of it.","msgtype":"m.text"},"ts":1549552479000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: there might be some Text <> CDATASection stuff around normalize(), I forgot, but nothing too involved","msgtype":"m.text"},"ts":1549552500000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ok","msgtype":"m.text"},"ts":1549552507000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I've forwarded xPaw's discourse thread to the folks who did the Chrome emoji picker.","msgtype":"m.text"},"ts":1549576078000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"nox: I'd love a bikeshed syntax extension. I tried one locally based on the markdown syntax, and realized I don't know .tmLanguage well enough to do it right.","msgtype":"m.text"},"ts":1549576149000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Should the ->ES part of https://heycam.github.io/webidl/#es-DOMString be using https://tc39.github.io/ecma262/#sec-stringcreate?","msgtype":"m.text"},"ts":1549577547000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: There's already a tmLanguage for Bikeshed in the bikeshed repo?","msgtype":"m.text"},"ts":1549577607000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: ... I should have looked there.","msgtype":"m.text"},"ts":1549577630000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"hahaha","msgtype":"m.text"},"ts":1549577636000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It's not, like, perfect, but it does a decent job.","msgtype":"m.text"},"ts":1549577648000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jyasskin: nope, that creates objects like `new String(x)`, whereas we want to create new objects like `String(x)`. (Well, technically `String()` has a special-case for symbols which we don't want, but that's a separate story.)","msgtype":"m.text"},"ts":1549578166000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Ok then. At the very least, \"the String value that represents the same sequence of code units that the IDL DOMString represents\" isn't precise enough?","msgtype":"m.text"},"ts":1549578219000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: it's about as precise as the ES spec, where the equivalent is in https://tc39.github.io/ecma262/#sec-string-literals-static-semantics-stringvalue","msgtype":"m.text"},"ts":1549578318000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"Return the String value whose code units are the SV of this StringLiteral. \"","msgtype":"m.text"},"ts":1549578325000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Huh. Ok, then I won't worry about being more precise when I need to convert a URL's serialization to an ES String.","msgtype":"m.text"},"ts":1549578385000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Yeah, should be fine, although I'm a little worried about the fact that you're in a context where IDL can't shield you from that","msgtype":"m.text"},"ts":1549578438000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Yeah, I'm uncomfortable about that aspect of https://w3c.github.io/network-error-logging/#generate-a-network-error-report.","msgtype":"m.text"},"ts":1549579904000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Ah, right, that one :)","msgtype":"m.text"},"ts":1549579921000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"For now, I've decided that's not my circus.","msgtype":"m.text"},"ts":1549579952000,"senderName":"jyasskin","senderId":"jyasskin@irc"}
]