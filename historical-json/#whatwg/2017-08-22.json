[
{"content":{"body":"TabAtkins: yes, in theory, but unfortunately annevk's multimaps went with null, and he says it's probably too late to change","msgtype":"m.text"},"ts":1503368581000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Null, seriously? When Maps return undefined?","msgtype":"m.text"},"ts":1503368624000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yes.","msgtype":"m.text"},"ts":1503368634000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Although belay my above","msgtype":"m.text"},"ts":1503368638000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Apparently they return []","msgtype":"m.text"},"ts":1503368644000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Which seems pretty good now that I think about it","msgtype":"m.text"},"ts":1503368651000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Okay.","msgtype":"m.text"},"ts":1503368653000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Less null/undefined-testing","msgtype":"m.text"},"ts":1503368663000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah, I could lean either way","msgtype":"m.text"},"ts":1503368664000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If you're expecting to get an array of stuff, getting an empty one is usually what you want I think.","msgtype":"m.text"},"ts":1503368693000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Better if js had falsey empty arrays, but eh.","msgtype":"m.text"},"ts":1503368714000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: .get() returns undefined tho?","msgtype":"m.text"},"ts":1503368953000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If it returns null I'm not matching that.","msgtype":"m.text"},"ts":1503368971000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: that'd be good, to be consistent with JS, although it's not what Headers and URLSearchParams due, very sadly.","msgtype":"m.text"},"ts":1503368979000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Looks like maplike also does undefined for get()","msgtype":"m.text"},"ts":1503369009000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'll just write those off as legacy mistakes, yeah.","msgtype":"m.text"},"ts":1503369022000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"Better if js had falsey empty arrays, but eh.\" O_O","msgtype":"m.text"},"ts":1503388848000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: Not as good as falsey midnight though!","msgtype":"m.text"},"ts":1503389703000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: wow. Did not know that was a thing.","msgtype":"m.text"},"ts":1503389790000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: In Python it is.","msgtype":"m.text"},"ts":1503389815000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: yeah--googled it.","msgtype":"m.text"},"ts":1503389829000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: Why did you inflict this upon yourself!","msgtype":"m.text"},"ts":1503389840000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Some things are better left unknown.","msgtype":"m.text"},"ts":1503389851000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"JakeA: patches for https://bugzilla.mozilla.org/show_bug.cgi?id=1378342 are coming in atm","msgtype":"m.text"},"ts":1503389923000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"[insert it's happening gif]","msgtype":"m.text"},"ts":1503389932000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yay!!","msgtype":"m.text"},"ts":1503390067000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"tobie: I lost your train of thought in https://github.com/heycam/webidl/issues/365","msgtype":"m.text"},"ts":1503396867000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: I'd like that issue to be focused on removing the need for PrimaryGlobal","msgtype":"m.text"},"ts":1503396885000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: by adding Exposed= everywhere","msgtype":"m.text"},"ts":1503396891000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: and just that as that's a big enough task","msgtype":"m.text"},"ts":1503396902000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"OK, see, that's the part I was missing.","msgtype":"m.text"},"ts":1503396910000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I don't want to couple it with secure context changes","msgtype":"m.text"},"ts":1503396916000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm just going to edit the comments to makes things less confusing to others.","msgtype":"m.text"},"ts":1503396958000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: and I guess I was wondering if we have enough consensus so that I could start doing some things in that direction","msgtype":"m.text"},"ts":1503396961000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ta","msgtype":"m.text"},"ts":1503396965000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: we might have had this discussion already, but I'm not sure how making [Exposed] mandatory allows us to remove [PrimaryGlobal].","msgtype":"m.text"},"ts":1503397236000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: PrimaryGlobal is a fallback","msgtype":"m.text"},"ts":1503397269000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: if you haven't declared a global, you'll be exposed on PrimaryGlobal","msgtype":"m.text"},"ts":1503397279000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: if everything declares a global, there's no need for a fallback","msgtype":"m.text"},"ts":1503397292000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: oh. So all PrimaryGlobal -> Global","msgtype":"m.text"},"ts":1503397299000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"\"all\"","msgtype":"m.text"},"ts":1503397334000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: [PrimaryGlobal] is a marker on the Window object and IDL uses that as marker as a fallback for when an interface lacks Exposed","msgtype":"m.text"},"ts":1503397340000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: that this is still causing confusion is even more reason to get rid of it","msgtype":"m.text"},"ts":1503397361000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We had this discussion already.","msgtype":"m.text"},"ts":1503397362000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1503397366000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But it's easy enough to explain","msgtype":"m.text"},"ts":1503397388000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Indeed.","msgtype":"m.text"},"ts":1503397393000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: Alright. Updated the issue with the above so I don't ask about it again in n months.","msgtype":"m.text"},"ts":1503397671000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: churn wise, it does seem however that inverting [SecureContext] at the same time would make sense.","msgtype":"m.text"},"ts":1503397728000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: wrt your initial question, who should we gather consensus from to proceed with this?","msgtype":"m.text"},"ts":1503398121000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I'm in favour","msgtype":"m.text"},"ts":1503398361000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"tobie: I think I'm just going ahead and make it happen","msgtype":"m.text"},"ts":1503400349000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: might be wrong, but I think the warning belongs at the BS/ReSpec layer rather than at the parser level.","msgtype":"m.text"},"ts":1503406557000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: well this is basically saying you can't write interface without Exposed so I don't really see how it's not a parser concern","msgtype":"m.text"},"ts":1503406626000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Because it's described in prose, not as part of the grammar.","msgtype":"m.text"},"ts":1503406690000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: also it's ES-binding specific.","msgtype":"m.text"},"ts":1503406708000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Not sure I agree with that","msgtype":"m.text"},"ts":1503406901000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: with what?","msgtype":"m.text"},"ts":1503406913000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"That Exposed is ES-specific","msgtype":"m.text"},"ts":1503406924000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Yeah, seems that would apply to Wasm and such too","msgtype":"m.text"},"ts":1503406965000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"OTOH, all of WebIDL is de facto ES-specific, so it doesn't really matter :)","msgtype":"m.text"},"ts":1503406966000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: \"This section defines a number of extended attributes whose presence affects only the ECMAScript binding.\"","msgtype":"m.text"},"ts":1503406967000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"That's probably wrong","msgtype":"m.text"},"ts":1503406978000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well, we can't really find out, can we?","msgtype":"m.text"},"ts":1503406999000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":":D","msgtype":"m.text"},"ts":1503407004000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Anyway, for our specific concerns, here, I'm not sure how this is implemented in BS, but in ReSpec and idlharness, this would need to happen at above the parser level (as the code is designed to handle parser errors, but not warnings).","msgtype":"m.text"},"ts":1503407250000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: do you have the ability to warn there in a way that gets folks to fix things?","msgtype":"m.text"},"ts":1503407474000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: well, it's an extra check to add to do on the AST, but in practice that should be a lot easier than adding such logic to the parser (which isn't designed to check things like that).","msgtype":"m.text"},"ts":1503407680000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Okay, I don't really care how it gets done, just needs to be done","msgtype":"m.text"},"ts":1503407751000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: agreed. It just has a higher prob of getting done if the issue is on the right repository. ;)","msgtype":"m.text"},"ts":1503408330000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"plinss seems pretty good at closing issues so we'll find out soon enough","msgtype":"m.text"},"ts":1503408387000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"quarter-millimeters","msgtype":"m.text"},"ts":1503412013000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wonder what the use case for that was","msgtype":"m.text"},"ts":1503412019000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah okay, common in Japanese typesetting","msgtype":"m.text"},"ts":1503412270000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if you have multiple event listeners on an event, is event dispatcher order defined?","msgtype":"m.text"},"ts":1503420210000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"*dispatched","msgtype":"m.text"},"ts":1503420214000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"*dispatch","msgtype":"m.text"},"ts":1503420218000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: i.e. you called addEventListener() multiple times?","msgtype":"m.text"},"ts":1503420704000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: yeah","msgtype":"m.text"},"ts":1503420716000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"The order of addEventListener() calls determines the order the listeners are called.","msgtype":"m.text"},"ts":1503420733000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"wonders why his Google-foo couldn't find a clear statement saying that :)","msgtype":"m.emote"},"ts":1503420756000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jyasskin: thx!","msgtype":"m.text"},"ts":1503420760000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: https://dom.spec.whatwg.org/#concept-event-listener-invoke is probably a good place to start if you want to trace exactly how it's defined.","msgtype":"m.text"},"ts":1503420911000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: \"for each event listener associdated with object\" isn't that explicit about iteration order","msgtype":"m.text"},"ts":1503421008000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"also I've basically given up on the DOM spec when it comes to understanding events, given https://github.com/whatwg/dom/issues/474 makes it hard to understand stuff :\\","msgtype":"m.text"},"ts":1503421058000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"It'd be nice to be a bit clearer about that, but https://infra.spec.whatwg.org/#list-iterate says to go in order, and elements are added with https://infra.spec.whatwg.org/#list-append.","msgtype":"m.text"},"ts":1503421075000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"right, the list side is clear","msgtype":"m.text"},"ts":1503421185000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"it's not clear to me what the type of the association is","msgtype":"m.text"},"ts":1503421273000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Ah, that looks like a bug: \"For each event listener associated with object\" should be \"For each |listener| in the list of event listeners associated with object\", since https://dom.spec.whatwg.org/#interface-eventtarget is clear that the EventTarget has a *list* of associated listeners, not just a pile.","msgtype":"m.text"},"ts":1503421340000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: right, and that would be unambiguous","msgtype":"m.text"},"ts":1503421364000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"If only we had formalized slots long ago this kind of stuff would have been patterned and addressed","msgtype":"m.text"},"ts":1503423411000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I also hope that nobody tries to copy the Event specification text since it's full of badness","msgtype":"m.text"},"ts":1503423482000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"In particular around slots","msgtype":"m.text"},"ts":1503423494000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The best time to [fix spec infrastructure] is 20 years ago. ;)","msgtype":"m.text"},"ts":1503423509000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"wonders if slots are still on tobie's radar","msgtype":"m.emote"},"ts":1503423515000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: I like to stay optimistic and hope we're still at the start of it all","msgtype":"m.text"},"ts":1503423552000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That's the second half of the quote: \"The second-best time is now.\" :)","msgtype":"m.text"},"ts":1503423574000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1503423591000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"They should just be rewritten in Rust.","msgtype":"m.text"},"ts":1503423937000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"can we not rewrite them in something where we can more easily to formal analysis?","msgtype":"m.text"},"ts":1503423966000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: I wasn't being serious. :p","msgtype":"m.text"},"ts":1503423987000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I was only being somewhat serious. :P","msgtype":"m.text"},"ts":1503424130000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Too late. Rewrite all specs in Coq, you have two hours.","msgtype":"m.text"},"ts":1503424148000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: Coq? You are so French. ;P","msgtype":"m.text"},"ts":1503424166000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"🥖🥖","msgtype":"m.text"},"ts":1503424185000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"The glue code for specs should be something with a formal definition, but after thinking about the purpose of specs for a while, I've concluded that there are some bits in the core where we specifically have to avoid being too formal, either because we want to let implementations innovate (e.g. all the UI parts: how do you formalize \"ask the user for permission\"?) or because we're referring to other specifications","msgtype":"m.text"},"ts":1503424254000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"that use different styles.","msgtype":"m.text"},"ts":1503424254000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: Just wait two hours and all of them will be specified by gsnedders!","msgtype":"m.text"},"ts":1503424317000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"formally*","msgtype":"m.text"},"ts":1503424322000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"holds breath","msgtype":"m.emote"},"ts":1503424327000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"nox: unforuntately, I've already proven it impossible to formalise the HTML parser in Coq","msgtype":"m.text"},"ts":1503424349000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(okay, a bit hand-wavey argument, but I did do this in my bachelor's thesis)","msgtype":"m.text"},"ts":1503424376000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Why?","msgtype":"m.text"},"ts":1503424402000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Formalise, or implement?","msgtype":"m.text"},"ts":1503424432000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Apart from the elephant in the room that is JS, I mean. :P","msgtype":"m.text"},"ts":1503424532000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: the elephant in the room is the fact that HTML defines how to parse infinitely long documents, and Coq requires termination","msgtype":"m.text"},"ts":1503425203000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: That's for implementation.","msgtype":"m.text"},"ts":1503425220000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"gsnedders: You can still formalise it.","msgtype":"m.text"},"ts":1503425226000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: yeah, ok","msgtype":"m.text"},"ts":1503425263000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Otherwise AFAIU CompCert wouldn't be a thing.","msgtype":"m.text"},"ts":1503425291000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Or https://www.microsoft.com/en-us/research/wp-content/uploads/2016/12/coqasm.pdf which is pretty cute. That being said, I've never did a thesis or whatsoever and I only know Coq superficially.","msgtype":"m.text"},"ts":1503425336000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"IIRC there were some limitations on stuff which doesn't terminate","msgtype":"m.text"},"ts":1503425350000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"but it's been years since I've touched Coq at all, and even that was only a bit superficial","msgtype":"m.text"},"ts":1503425369000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"OK, so you can do nontermination provided you explicitly state where it is and prove each iteration is well-typed","msgtype":"m.text"},"ts":1503425482000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: I want to tackle mixins first.","msgtype":"m.text"},"ts":1503425487000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"gsnedders: The naive young me wanted to formalise the semantics of the Erlang VM, then I quickly realised I didn't have the skills.","msgtype":"m.text"},"ts":1503426527000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"The naive less young but still young me thinks maybe in a decade he will be able to do that.","msgtype":"m.text"},"ts":1503426543000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: you have me looking at stuff around Coq for the first time in years; I just about knew enough maths a few years ago to do some basic stuff, now I don't","msgtype":"m.text"},"ts":1503426978000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Eh eh.","msgtype":"m.text"},"ts":1503426996000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"gsnedders: It's been 10 minutes and you've yet to give me the formalised specs in Coq.","msgtype":"m.text"},"ts":1503431821000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"If we remove [PrimaryGlobal], where do we define the primary global interface?","msgtype":"m.text"},"ts":1503437171000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I think the idea is that there is no longer a concept of primary global interface","msgtype":"m.text"},"ts":1503437722000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Since IIUC it's only used to determine the exposure set when there's no [Exposed]","msgtype":"m.text"},"ts":1503437733000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: well, at least LegacyWindowAlias relies on that concept.","msgtype":"m.text"},"ts":1503438431000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"lol, I thought it'd hard-code Window, per the name.","msgtype":"m.text"},"ts":1503438451000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I can replace it by Window instead.","msgtype":"m.text"},"ts":1503438460000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I'd kind of rather leave this to annevk since he's excited about it; I think mixins would be more impactful right now.","msgtype":"m.text"},"ts":1503438505000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Well, I'm half-way through the PR at this point, so…","msgtype":"m.text"},"ts":1503438591000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"But yeah, agreed wrt to mixins","msgtype":"m.text"},"ts":1503438610000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Mmm, OK'","msgtype":"m.text"},"ts":1503438632000,"senderName":"Domenic","senderId":"Domenic@irc"}
]