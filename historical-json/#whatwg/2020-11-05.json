[
{"content":{"body":"Domenic: I suspect that‚Äôs fallout from shadow trees and that Chrome/Fx still haven‚Äôt fixed their bug but will double check later","msgtype":"m.text"},"ts":1604552846000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: thanks","msgtype":"m.text"},"ts":1604559667000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"https://bz.apache.org/bugzilla/show_bug.cgi?id=59311#c9 reminds me of Apache-sent text/plain for binary file vs. browsers, therefore, not treating text/plain as authoritative","msgtype":"m.text"},"ts":1604564680000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"sighs","msgtype":"m.emote"},"ts":1604564843000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sees https://bugs.webkit.org/show_bug.cgi?id=212069","msgtype":"m.emote"},"ts":1604569511000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Does WebKit support cross-origin isolation?","msgtype":"m.text"},"ts":1604569521000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"https://bugs.webkit.org/show_bug.cgi?id=215407","msgtype":"m.text"},"ts":1604569614000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"thanks zcorpan, left a comment on the first bug","msgtype":"m.text"},"ts":1604569865000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"üëç","msgtype":"m.text"},"ts":1604570017000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"is it possible for the root element to somehow not take up the entire viewport (through non-default styles)?","msgtype":"m.text"},"ts":1604572152000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: I think by default it doesn't do that","msgtype":"m.text"},"ts":1604572203000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mathiasbynens: just give it a border","msgtype":"m.text"},"ts":1604572207000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(background and overflow might be confusing here, but they end up applying to the viewport instead when set on the root + special behavior for HTML's body element)","msgtype":"m.text"},"ts":1604572257000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh my this renders differently on Chrome vs. Firefox","msgtype":"m.text"},"ts":1604572422000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"data:text/html,<style>:root{border:5px solid red","msgtype":"m.text"},"ts":1604572423000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"(note: quirks mode)","msgtype":"m.text"},"ts":1604572453000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"it renders the same in standards mode thankfully","msgtype":"m.text"},"ts":1604572461000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Not sure why Chromium and WebKit have that quirk","msgtype":"m.text"},"ts":1604572519000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"to be more precise, I'm trying to find out if there's a way for `:root { filter: ...; }` to not take effect on some part of the viewport","msgtype":"m.text"},"ts":1604572524000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Maybe ecobos can help; filter is too new for what I know","msgtype":"m.text"},"ts":1604572625000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://quirks.spec.whatwg.org/#the-html-element-fills-the-viewport-quirk","msgtype":"m.text"},"ts":1604572689000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"assuming Firefox devtools' \"computed\" tab actually shows the computed values, the width of the html element is the actual (used) width, not auto","msgtype":"m.text"},"ts":1604572716000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"So there's a difference between getComputedStyle() and computed value and I'm not sure what DevTools does","msgtype":"m.text"},"ts":1604572993000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm looking at wpt and there doesn't seem to be a test for that quirk","msgtype":"m.text"},"ts":1604573208000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"andreubotella: if you're interested in working on that spec I'm sure zcorpan would appreciate the help","msgtype":"m.text"},"ts":1604573410000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"this isn't a quirks mode thing, it's what getComputedStyle always does","msgtype":"m.text"},"ts":1604573479000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"https://drafts.csswg.org/cssom/#dom-window-getcomputedstyle step 5","msgtype":"m.text"},"ts":1604573550000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"-> https://drafts.csswg.org/cssom/#resolved-value","msgtype":"m.text"},"ts":1604573583000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah, it does seem likely that the devtools \"computed\" tab is showing the results from getComputedStyle","msgtype":"m.text"},"ts":1604573741000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"that was just me trying to debug, though","msgtype":"m.text"},"ts":1604573756000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"<mathiasbynens> oh my this renders differently on Chrome vs. Firefox","msgtype":"m.text"},"ts":1604573774000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"<mathiasbynens> data:text/html,<style>:root{border:5px solid red","msgtype":"m.text"},"ts":1604573774000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"css/cssom/computed-style-002.html tests almost this case (getComputedStyle returning used value for 'width')","msgtype":"m.text"},"ts":1604573863000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"andreubotella: so firefox still doesn't implement https://quirks.spec.whatwg.org/#the-html-element-fills-the-viewport-quirk","msgtype":"m.text"},"ts":1604573929000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"https://bugzilla.mozilla.org/show_bug.cgi?id=1259924","msgtype":"m.text"},"ts":1604573969000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"If Firefox DevTools use the resolved value for \"computed\" I wish that was called out somehow","msgtype":"m.text"},"ts":1604574434000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Although it would be even nicer to make the specification align with the name of the public-facing API","msgtype":"m.text"},"ts":1604574454000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So I think I'll write a wpt test for that quirk","msgtype":"m.text"},"ts":1604575486000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"andreubotella: great! http://wpt.live/quirks/ looks like there are some tests for body-fills-html","msgtype":"m.text"},"ts":1604579461000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"but firefox passes those, so not sure","msgtype":"m.text"},"ts":1604579521000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"it looks like those tests are specifically checking that the quirk *doesn't* apply in the cases that the spec excludes, and nothing's checking that it applies elsewhere","msgtype":"m.text"},"ts":1604579902000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"also, that's \"body fills html\", not \"html fills viewport\"","msgtype":"m.text"},"ts":1604579912000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"ah right","msgtype":"m.text"},"ts":1604579944000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"but if firefox isn't implementing that quirk, maybe it's not needed for web compat","msgtype":"m.text"},"ts":1604579965000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"yeeeeah, except they have web compat problems documented in the bug, and chromium and webkit aren't removing it","msgtype":"m.text"},"ts":1604580011000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"the spec at first sided with gecko, until they asked me to change the spec","msgtype":"m.text"},"ts":1604580024000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"if you can get the 4% of the web that uses quirks mode down to 0%, maybe we can drop quirks mode altogether :)","msgtype":"m.text"},"ts":1604580101000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah, I don't think that's something I can do :D","msgtype":"m.text"},"ts":1604580237000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":":( :( :(","msgtype":"m.text"},"ts":1604580263000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"mathiasbynens: `:root { filter: ... }` is special","msgtype":"m.text"},"ts":1604582220000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"mathiasbynens: and it applies on the whole viewport, including fixed-pos elements and so on (on all browsers except FF, but we need to change that)","msgtype":"m.text"},"ts":1604582263000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"ecobos: thanks for confirming! any idea which (part of which) spec mandates this?","msgtype":"m.text"},"ts":1604582294000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: see https://bugzilla.mozilla.org/show_bug.cgi?id=1423746 / https://github.com/w3c/fxtf-drafts/issues/11. It should really be https://drafts.fxtf.org/filter-effects/#FilterProperty (I commented on that issue a while ago to ask for that change), but it is in here: https://drafts.fxtf.org/compositing/#pagebackdrop","msgtype":"m.text"},"ts":1604582406000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"mathiasbynens: spec could be clearer","msgtype":"m.text"},"ts":1604582414000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"ecobos: cheers!","msgtype":"m.text"},"ts":1604582424000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: one way to get around it could be to apply an inverse filter on a given part of the page","msgtype":"m.text"},"ts":1604582450000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"mathiasbynens: (but that only works for filters that are actually invertible)","msgtype":"m.text"},"ts":1604582463000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"zcorpan: looks like webkit's skipping the \"auto computed value\" exception for html fills viewport","msgtype":"m.text"},"ts":1604587389000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"s/exception/restriction","msgtype":"m.text"},"ts":1604587422000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"(+1 to \"it would be even nicer to make the specification align with the name of the public-facing API\"; I made this pitch several years back but the CSSWG folks seem really attached to their computed/used/resolved hierarchy and not willing to do any renames...)","msgtype":"m.text"},"ts":1604587433000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"andreubotella: do you have a demo?","msgtype":"m.text"},"ts":1604587475000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"that tests this in particular no, but it came up in tests for body fills html","msgtype":"m.text"},"ts":1604587498000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"TabAtkins: ^ (re computed value)","msgtype":"m.text"},"ts":1604587505000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"but give me a minute","msgtype":"m.text"},"ts":1604587532000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"hm, turns out that's not the case","msgtype":"m.text"},"ts":1604587849000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"there bug is with body fills html, but it's quite an odd one","msgtype":"m.text"},"ts":1604587872000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"https://software.hixie.ch/utilities/js/live-dom-viewer/?saved=8657","msgtype":"m.text"},"ts":1604588156000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"the body spans the whole viewport even though webkit's devtools have the html at 200x200","msgtype":"m.text"},"ts":1604588204000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"then again, I'm testing this with various webkit representatives on linux because I don't have a mac around, so ymmv","msgtype":"m.text"},"ts":1604588240000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"really hates that quirk","msgtype":"m.emote"},"ts":1604588467000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"Hey, we're ( Node.js ) considering graduating our EventTarget and AbortController from experimental to stable and would love a glance by some skilled eyes on the code to make sure it looks good ( https://github.com/nodejs/node/pull/35949 is the PR). We were unable to port the WPT (since it tests node) but we added quite a bit of coverage to it.","msgtype":"m.text"},"ts":1604588805000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"Also pinging Domenic and annevk who have been very helpful in this undertaking in the past :]","msgtype":"m.text"},"ts":1604588806000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"andreubotella: thanks. this makes it a bit clearer:  https://software.hixie.ch/utilities/js/live-dom-viewer/saved/8658","msgtype":"m.text"},"ts":1604589864000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"andreubotella: so yes, it seems webkit makes body fill the viewport, rather than filling the <html>","msgtype":"m.text"},"ts":1604589885000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"(the <span> is not necessary here)","msgtype":"m.text"},"ts":1604589942000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: right, I just copied from the existing tests","msgtype":"m.text"},"ts":1604590057000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"benjamingr__: nothing really comes to mind, other than wondering whether the tests you have also pass in browsers","msgtype":"m.text"},"ts":1604591190000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"They all do, I usually run them in the browser console first to iterate quickly :]","msgtype":"m.text"},"ts":1604592924000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"Domenic: if you don't mind - is there a specific reason event handler ordering works this way? (that is in https://github.com/nodejs/node/pull/35949#issuecomment-722496598 ) the behaviour is 1 2 3 4 and not 1 3 2 4 ?","msgtype":"m.text"},"ts":1604595365000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"benjamingr__: onmessage invokes addEventListener the first time it's called with a function that invokes the passed in function, roughly","msgtype":"m.text"},"ts":1604595505000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"benjamingr__: it falls out from how event handler attributes work, basically (defined in HTML)","msgtype":"m.text"},"ts":1604595528000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, I'm trying to figure out _why_ that's the behaviour","msgtype":"m.text"},"ts":1604595640000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"That is, I assume event handlers behave this way for some reason (good or not), right?","msgtype":"m.text"},"ts":1604595655000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"annevk: how much work would it be to convert Web IDL to use spec-factory? I assume spec-factory is currently only for WHATWG specs?","msgtype":"m.text"},"ts":1604595767000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"benjamingr__: I suspect it's just because that's what someone implemented back in the day","msgtype":"m.text"},"ts":1604595791000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"benjamingr__: it's not like a lot of the early web had a lot of collaborative design","msgtype":"m.text"},"ts":1604595810000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TimothyGu: yeah, that's the case; not sure how much work it would be","msgtype":"m.text"},"ts":1604595869000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what in specific am i being pinged for?","msgtype":"m.text"},"ts":1604596481000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: <Domenic> (+1 to \"it would be even nicer to make the specification align with the name of the public-facing API\"; I made this pitch several years back but the CSSWG folks seem really attached to their computed/used/resolved hierarchy and not willing to do any renames...)","msgtype":"m.text"},"ts":1604596817000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"ah k. yeah, that's not happening now, it would involve changing so much verbage across so many specs; the split happened like 15 years ago","msgtype":"m.text"},"ts":1604596862000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The CSSWG at the time of the CSS2 -> CSS2.1 development made a bunch of \"no, it's the children that are wrong\"-type mistake","msgtype":"m.text"},"ts":1604597382000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"What's that site with COEP/COOP/CORP stats? Something like isolation.policy, but not...","msgtype":"m.text"},"ts":1604599263000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: got it :D","msgtype":"m.text"},"ts":1604599317000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"By the way, two more questions I am unsure about a) are we allowed to expose a static utility to get the event listeners of an event target (kind of like `getEventListeners` in chrome)? b) are we allowed to warn (to stderr) if the number of listeners is above a certain threshold?","msgtype":"m.text"},"ts":1604599413000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"benjamingr__: no new methods not in the spec... I'm not aware of Chrome having such a nonstandard method.","msgtype":"m.text"},"ts":1604599439000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"warn seems fine (assuming in the console)","msgtype":"m.text"},"ts":1604599465000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"benjamingr__: console is generally up to the implementation. We do try to standardize some warnings, but a lot remain browser-specific, and that's fine, since (on the web) it's not observable","msgtype":"m.text"},"ts":1604599479000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"benjamingr__: I guess you are referring to the method that only exists when you have the console open in Chrome? As long as it's not on the EventTarget interface itself, then it's fair game, yeah.","msgtype":"m.text"},"ts":1604599510000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic:  I mean something like a `utils.getEventListeners(eventTarget)` and not a `eventTarget.getEventListeners`","msgtype":"m.text"},"ts":1604599511000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"Ah yeah, then that'd be fine","msgtype":"m.text"},"ts":1604599517000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ah, thanks, people have been asking for that for inspecting targets","msgtype":"m.text"},"ts":1604599529000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"People have been asking for it in the spec too, but we're a bit stuck between the encapsulation folks and others...","msgtype":"m.text"},"ts":1604599551000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://github.com/whatwg/dom/issues/412","msgtype":"m.text"},"ts":1604599572000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Interesting, thanks","msgtype":"m.text"},"ts":1604599594000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"Does the fetch standard also define how img and script html tags fetch the resources?","msgtype":"m.text"},"ts":1604600743000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"croraf: HTML does, but it uses fetch to do so","msgtype":"m.text"},"ts":1604600757000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So the HTML standard says \"fetch standard should be used for fetching\"?","msgtype":"m.text"},"ts":1604600793000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"croraf: a lil more, but effectively that","msgtype":"m.text"},"ts":1604600903000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, thanks","msgtype":"m.text"},"ts":1604600914000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"croraf: standards do have access to some fields of the request that aren't available from the javascript fetch API, if that's something you care about","msgtype":"m.text"},"ts":1604600996000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"Ah yeah, although we haven't really updated HTML yet to poke at the internal response for <img> and <script>","msgtype":"m.text"},"ts":1604601065000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"andreubotella, I just meant in general, if the HTML spec in the tags for fetching resources requires the use of resource fetching aligned with the fetch standard.","msgtype":"m.text"},"ts":1604601090000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"annevk: <script> does poke at the internal response, it's <link> that doesn't","msgtype":"m.text"},"ts":1604601173000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"That is, it requries the underlying fetching is aligned with the fetch standard","msgtype":"m.text"},"ts":1604601175000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"I'll write a PR for that, but it looks like <link rel=\"icon\"> won't be testable (https://github.com/whatwg/html/issues/6122)","msgtype":"m.text"},"ts":1604601204000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"andreubotella, \"That is, HTML requires the underlying fetching for the tags is done using the fetch standard\" Is this quote of mine correct?","msgtype":"m.text"},"ts":1604601364000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1604601381000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"Thanks. My next question is regarding the fetch JS API. It has the options argument, which defines headers['content-type'] property, and a body property.","msgtype":"m.text"},"ts":1604601620000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Now, these two must be aligned, kind of.","msgtype":"m.text"},"ts":1604601671000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"croraf: So, depending on what JS object you pass as the body, you might get a default content-type automatically, but you can override it by setting the header explicitly","msgtype":"m.text"},"ts":1604601846000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"For example, a URLSearchParams object will get you Content-Type: application/x-www-form-urlencoded","msgtype":"m.text"},"ts":1604601878000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"I think that's part of the JS API, not the main fetch infrastructure","msgtype":"m.text"},"ts":1604601894000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"But the fetch standard also defines the JS API. It says that in the Preface: \"The Fetch Standard also defines the fetch() JavaScript API\"","msgtype":"m.text"},"ts":1604601961000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"sure, but the fetch infrastructure is defined at the spec level, not in terms of JS","msgtype":"m.text"},"ts":1604602039000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"thus why specs can use things JS doesn't have access to","msgtype":"m.text"},"ts":1604602053000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"I understand that the spec can access more things. My question is in the other direction. That is, where can I read how are header[\"content-type\"] and body coordinated?","msgtype":"m.text"},"ts":1604602205000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"https://fetch.spec.whatwg.org/#dom-request step 37, and https://fetch.spec.whatwg.org/#concept-bodyinit-extract","msgtype":"m.text"},"ts":1604602314000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"as you can see, if you explicitly set the content-type header, your header wins","msgtype":"m.text"},"ts":1604602352000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"OK. And if there is no content-type header it is set by this \"body extraction\"?","msgtype":"m.text"},"ts":1604602846000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"andreubotella,","msgtype":"m.text"},"ts":1604602849000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"step 37 in the new Request algorithm starts with \"If init[\"body\"] exists and is non-null\"","msgtype":"m.text"},"ts":1604602903000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"my bad, I misread","msgtype":"m.text"},"ts":1604602935000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"that's right","msgtype":"m.text"},"ts":1604602939000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"What is init[\"body\"] is that just the value of the \"body\" property?","msgtype":"m.text"},"ts":1604603098000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"basically yeah","msgtype":"m.text"},"ts":1604603115000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"So if it is an object of ReadableStream type the extraction proceeds normally, and if it is not it will try to \"cast\" the body to ReadableStream?","msgtype":"m.text"},"ts":1604603265000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"I think this is relatively recent, so not all browsers will support a stream as the body, but yeah","msgtype":"m.text"},"ts":1604603355000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"I'm talking about 1. in https://fetch.spec.whatwg.org/#concept-bodyinit-extract","msgtype":"m.text"},"ts":1604603403000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"It is not clear to me what will be done if body is a plain JS object, or just a string, or a number...","msgtype":"m.text"},"ts":1604603425000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"that's where the \"basically yeah\" I gave above breaks down","msgtype":"m.text"},"ts":1604603448000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"Seems like JS object, a string, or number will have to be converted to the ReadableStream.","msgtype":"m.text"},"ts":1604603471000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Oh, OK. So in which step is that handled?","msgtype":"m.text"},"ts":1604603480000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Somewhere prior to step 37 in https://fetch.spec.whatwg.org/#dom-request ?","msgtype":"m.text"},"ts":1604603531000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"RequestInit's `body` takes the `BodyInit?` (\"nullable BodyInit\") WebIDL type","msgtype":"m.text"},"ts":1604603568000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"WebIDL handles the rest of JS objects, casting them to a string I suspect","msgtype":"m.text"},"ts":1604603607000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"step 1 creates a new ReadableStream, step 5 defines an \"action\" depending on the type of the body, and step 6 runs the action to enqueue data into the stream","msgtype":"m.text"},"ts":1604603609000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Mek, but how does ReadableStream get created from a string, a plain JS object, or a number?","msgtype":"m.text"},"ts":1604603783000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"a string ends up in the \"scalar value string\" branch, which defines \"action\" as utf-8 encoding the string.","msgtype":"m.text"},"ts":1604603824000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Step 6 then enqueues a Uint8Array containing that encoding to the stream that was created","msgtype":"m.text"},"ts":1604603840000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"and indeed, webidl will tostring anything that doesn't match any of the types in BodyInit","msgtype":"m.text"},"ts":1604603873000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Since WebIDL handles the conversions before the params to the JS function ever get to spec-land, the \"extract\" algorithm won't ever have any type that isn't part of the BodyInit union","msgtype":"m.text"},"ts":1604603891000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"I think I see now. But the step 1 is confusing me very much","msgtype":"m.text"},"ts":1604604022000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"But this is kind of irrelevant because 5 is switching on an object, not on the stream.","msgtype":"m.text"},"ts":1604604067000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Step 1 doesn't do any conversion, it just creates a new ReadableStream if the body wasn't one already","msgtype":"m.text"},"ts":1604604072000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"Step 5 then sets \"action\", which in step 6.1 populates the stream","msgtype":"m.text"},"ts":1604604097000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"Oh, so 1 will take the body if it is a ReadableStream, otherwise will create an empty ReadableStream (irrespective of the content of the body)?","msgtype":"m.text"},"ts":1604604135000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1604604141000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"I see.","msgtype":"m.text"},"ts":1604604145000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"And you did conclude that when entering here, the object is necesarily one of the types in the switch (5)?","msgtype":"m.text"},"ts":1604604308000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"here = https://fetch.spec.whatwg.org/#concept-bodyinit-extract","msgtype":"m.text"},"ts":1604604324000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Since RequestInit's `body` is of type BodyInit?, init[\"body\"] on the spec-land definition for new Request() is either missing (~= undefined), null, or one of the types in BodyInit","msgtype":"m.text"},"ts":1604604466000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"And the condition to step 37 is \"if init[\"body\"] exists and is non-null\"","msgtype":"m.text"},"ts":1604604485000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1604604651000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"So if it is a string Content-Type is set to text/plain;charset=UTF-8","msgtype":"m.text"},"ts":1604604711000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"If it is URLSearchParams to application/x-www-form-urlencoded;charset=UTF-8`.","msgtype":"m.text"},"ts":1604604729000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"FormData to multipart/form-data, and the only other option that sets the Content-Type is the Blob","msgtype":"m.text"},"ts":1604604813000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"If it is of type ReadableStream, BufferSource or byte sequence, seems like Content-Type will be extracted as null.","msgtype":"m.text"},"ts":1604604858000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"which gets filtered out by new Request's step 37.4","msgtype":"m.text"},"ts":1604604903000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"No, 37.4 has nothing to do with what I said.","msgtype":"m.text"},"ts":1604605010000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"\"if Content-Type is non-null\"","msgtype":"m.text"},"ts":1604605044000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"37.4 non-null, as you said before, deals with the explicit Content-Type property value","msgtype":"m.text"},"ts":1604605053000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"does anyone happen to have a state machine diagram for XHR lying around?","msgtype":"m.text"},"ts":1604605061000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Oh, sorry, indeed, 37.4 also deals with the extraction","msgtype":"m.text"},"ts":1604605072000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"that is done in 37.3","msgtype":"m.text"},"ts":1604605077000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Is init['body'] of type BodyInit?","msgtype":"m.text"},"ts":1604605457000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"I mean it can also be null, anything else?","msgtype":"m.text"},"ts":1604605518000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"croraf: WebIDL dictionary fields that don't have the \"required\" keyword will let you set the value to undefined in JS-land","msgtype":"m.text"},"ts":1604606187000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"the spec-level language for this is: init[\"body\"] is missing, or init[\"body\"] does not exist","msgtype":"m.text"},"ts":1604606211000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"Bakkot: that is such a reasonable ask, but sadly I don't know of one. I'm surprised Google image search doesn't seem to have one either.","msgtype":"m.text"},"ts":1604607892000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"andreubotella, my point was more about the options handled in the switch not present in the interface: the byte sequence, and the scalar value string (which has a similar but not identical item in the interface at USVString)","msgtype":"m.text"},"ts":1604608729000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"scalar value string === USVString","msgtype":"m.text"},"ts":1604608924000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"byte sequence might be leftover; I can't find any callers that pass a byte sequence","msgtype":"m.text"},"ts":1604608983000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic, you think that byte sequence can perhaps be removed from the switch (5)?","msgtype":"m.text"},"ts":1604609254000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"croraf: correct","msgtype":"m.text"},"ts":1604609287000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"And about scalar value string, why is it named differently than USVString?","msgtype":"m.text"},"ts":1604609303000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"I think we added that recently for something","msgtype":"m.text"},"ts":1604609312000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah you requested byte sequence Domenic üòä","msgtype":"m.text"},"ts":1604609444000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://github.com/whatwg/fetch/issues/1073","msgtype":"m.text"},"ts":1604609448000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nice...","msgtype":"m.text"},"ts":1604609454000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh, I see, I missed all the call sites of \"safely extract\"","msgtype":"m.text"},"ts":1604609515000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So yeah it definitely has uses","msgtype":"m.text"},"ts":1604609522000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(just not ones that appear from the fetch() API)","msgtype":"m.text"},"ts":1604609527000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"OK. What about \"scalar value string\", can it be replaced with USVString in the switch (5)?","msgtype":"m.text"},"ts":1604609588000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"And perhaps remove \"scalar value string\" completely from https://infra.spec.whatwg.org/#scalar-value-string","msgtype":"m.text"},"ts":1604609615000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"We prefer the term \"scalar value string\"","msgtype":"m.text"},"ts":1604609770000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The fact that IDL uses WordsSmushedTogether instead of words like normal means there's a slight mismatch, but it's OK.","msgtype":"m.text"},"ts":1604609822000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"1 word instead of 3 is more concise, and more clear visually that a \"specific type\" is meant.","msgtype":"m.text"},"ts":1604609852000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Doesn't matter, but the \"inconsistency\" might be slightly confusing.","msgtype":"m.text"},"ts":1604609901000,"senderName":"croraf","senderId":"croraf@irc"}
]