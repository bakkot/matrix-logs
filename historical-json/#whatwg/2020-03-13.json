[
{"content":{"body":"I'm playing around with the storage access API, and it just seemsâ€¦ totally broken. Am I holding it wrong? https://static-misc-2.glitch.me/storage-in-iframe/","msgtype":"m.text"},"ts":1584092336000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"In Firefox, there appears to be _no change_ after calling `requestStorageAccess`, other than `hasStorageAccess` now returning true","msgtype":"m.text"},"ts":1584092370000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"IDB, localstorage, cache storage, service worker, are not double keyed to begin with","msgtype":"m.text"},"ts":1584092405000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Cookie setting via JS appears to be a no-op before and after `requestStorageAccess`","msgtype":"m.text"},"ts":1584092432000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Actually, I'm wrong on the cookie thing. Cookies are not double-keyed/blocked either","msgtype":"m.text"},"ts":1584092673000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: it seems weird that hasStorageAccess returned false before if there was no change, file a bug on that?","msgtype":"m.text"},"ts":1584092902000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I suspect the general issue is that Firefox only uses this API for domains categorized as trackers","msgtype":"m.text"},"ts":1584092918000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: which makes it harder to test","msgtype":"m.text"},"ts":1584092934000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Maybe. Safari's behaviour seems nonsensical here too fwiw, but in exciting different ways. Maybe if there was a specâ€¦","msgtype":"m.text"},"ts":1584092957000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: afaik Safari only flips cookies from blocked to non-blocked","msgtype":"m.text"},"ts":1584092978000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: no disagreement there","msgtype":"m.text"},"ts":1584093006000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I've been trying to figure out a way forward, but it's rather hard given all the constraints everyone has and all the weird hacks that have been piled on to date","msgtype":"m.text"},"ts":1584093045000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Safari seems weirder than that. If I get storage access, setting cookies still fails, unless I also set the cookie in the top level page, _then_ the iframed page can also set cookies","msgtype":"m.text"},"ts":1584093077000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"So weird","msgtype":"m.text"},"ts":1584093079000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"ðŸ˜ž","msgtype":"m.text"},"ts":1584093162000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'll ping Joh about it","msgtype":"m.text"},"ts":1584093171000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"um, John*","msgtype":"m.text"},"ts":1584093176000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: filed https://bugzilla.mozilla.org/show_bug.cgi?id=1622212. Dunno if it's in the right component","msgtype":"m.text"},"ts":1584093797000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: thanks, has the right triage owner so that'll be fine","msgtype":"m.text"},"ts":1584093868000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: While you're here, do you know anyone at Mozilla that'd be interested in chatting about <portal>? I'm working on making it requestStorageAccess friendly, and trying to persuade Chrome folks to strongly align it with bfcache.","msgtype":"m.text"},"ts":1584094012000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: https://github.com/mozilla/standards-positions/issues/157 suggests dbaron has thoughts (not necessarily positive)","msgtype":"m.text"},"ts":1584094162000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The \"not explained enough\" thing is totally fair, and that's what I'm trying to fix. I guess I'd rather this was designed across browsers rather than it being Chrome-only design and other vendors getting a binary choice.","msgtype":"m.text"},"ts":1584094432000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: I'm a bit worried about using \"obtaining an agent cluster key\" for the cache key as we don't want that to change based on COOP+COEP","msgtype":"m.text"},"ts":1584117362000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: we should probably have a \"obtain a site\" algorithm that it delegates to","msgtype":"m.text"},"ts":1584117389000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: that makes sense","msgtype":"m.text"},"ts":1584117543000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: shall we turn convert-policy into publish-sg-data or some such?","msgtype":"m.text"},"ts":1584117909000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm, I guess technically we could write a separate python script for the non-markdown stuff","msgtype":"m.text"},"ts":1584117937000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"maybe that's nicer","msgtype":"m.text"},"ts":1584117941000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"shu: another way would be SAB -> ABS","msgtype":"m.text"},"ts":1584118899000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: like as an alias?","msgtype":"m.text"},"ts":1584118933000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I'm not sure how strongly I feel about not making constructor-exposure host controlled though","msgtype":"m.text"},"ts":1584118936000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"shu: I was thinking rename","msgtype":"m.text"},"ts":1584118947000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, i guess that doesn't \"break\" feature detection code but deteriorates existing sites, i guess","msgtype":"m.text"},"ts":1584118979000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it's a bigger refactor ask","msgtype":"m.text"},"ts":1584118983000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"annevk: btw how do you feature detect COOP+COEP?","msgtype":"m.text"},"ts":1584119340000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"(in the version where SAB isn't gated)","msgtype":"m.text"},"ts":1584119354000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: self.crossOriginIsolated","msgtype":"m.text"},"ts":1584119640000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"cool thanks","msgtype":"m.text"},"ts":1584119648000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: https://annevankesteren.nl/2020/01/shared-memory-feature-detection","msgtype":"m.text"},"ts":1584119649000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i'm also wondering if it's possible to build use counters in such a way so we can gauge risk of eventually making SAB available everywhere","msgtype":"m.text"},"ts":1584119835000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i guess it'd be a counter that, on either SAB construction or self.crossOriginIsolated, checks if the other was also used in this page load","msgtype":"m.text"},"ts":1584119873000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"not sure if the infra supports that","msgtype":"m.text"},"ts":1584119877000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"annevk: sure, in the spec we can say constructor exposure host-dependent, though of course it'd be nicer for there to be interop here when we launch COOP+COEP","msgtype":"m.text"},"ts":1584120001000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"technically, i'm not very convinced by luke's future-proofing motivation here. i do like the symmetry though","msgtype":"m.text"},"ts":1584120098000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: that phrase meant to say that I'm okay with adopting what you were (initially) proposing","msgtype":"m.text"},"ts":1584120193000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah, okay","msgtype":"m.text"},"ts":1584120216000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"host is HTML, it'd still be defined","msgtype":"m.text"},"ts":1584120230000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it'd require changes to ECMAScript though which is its own hurdle","msgtype":"m.text"},"ts":1584120251000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: let's circle back on monday, i'm waiting to chat with the wasm team here about what they want to do about WebAssembly.Memory({shared:true})","msgtype":"m.text"},"ts":1584120254000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"annevk: what needs to change in ecma262?","msgtype":"m.text"},"ts":1584120263000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: well it currently exposes the constructor","msgtype":"m.text"},"ts":1584120274000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"shu: that would need to be gated on some host-provided flag, no?","msgtype":"m.text"},"ts":1584120290000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the conditional removal, because of a host-defined thing, instead of squinting and saying that the host is able to delete stuff already?","msgtype":"m.text"},"ts":1584120298000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"annevk: i'll bring it up at the upcoming meeting","msgtype":"m.text"},"ts":1584120311000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: I guess there's a question as to how much is not exposed and if you could still get at a SAB if there were something that returned them","msgtype":"m.text"},"ts":1584120358000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: right, i'm not approaching it mainly as a compat concern","msgtype":"m.text"},"ts":1584120391000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"as for Wasm.Memory, I was under the impression that was all SAB under the hood","msgtype":"m.text"},"ts":1584120394000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the postMessage check is going to remain","msgtype":"m.text"},"ts":1584120409000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"err, s/not//","msgtype":"m.text"},"ts":1584120414000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i *am* approaching it mainly as a compat concern","msgtype":"m.text"},"ts":1584120420000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it is SAB under the hood, but IIUC there's no compat concern about making WebAssembly.Memory({shared:true}) always available","msgtype":"m.text"},"ts":1584120477000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"or maybe there's just no research","msgtype":"m.text"},"ts":1584120480000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"maybe the wasm folks have independent reason to want that to be always available","msgtype":"m.text"},"ts":1584120502000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I'm gonna be out for two weeks or so, though probably will be mostly at home so might check in from time to time, Luke will (hopefully) take point","msgtype":"m.text"},"ts":1584120548000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"got it","msgtype":"m.text"},"ts":1584120604000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"annevk: shu: I don't think it requires ES changes. We just modify https://html.spec.whatwg.org/#creating-a-new-javascript-realm to delete SharedArrayBuffer from the resulting global object.","msgtype":"m.text"},"ts":1584121248000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"beautiful","msgtype":"m.text"},"ts":1584121297000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"a note on the allowance is probably warranted from the 262 side","msgtype":"m.text"},"ts":1584121323000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"nahhhhh","msgtype":"m.text"},"ts":1584141059000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Seems similar to a note allowing running scripts which use the delete operator. Anything configurable is fair game IMO.","msgtype":"m.text"},"ts":1584141099000,"senderName":"Domenic","senderId":"Domenic@irc"}
]