[
{"content":{"body":"http://sockpuppet.org/blog/2015/01/15/against-dnssec/ \"The Internet loses nothing if it declares a TKO on DNSSEC and starts fresh. There are better DNS security proposals circulating already. They tend to start at the browser and work their way back to the roots. Support those proposals, and keep DNSSEC code off your servers.\"","msgtype":"m.text"},"ts":1421400550000,"senderName":"annevk_","senderId":"annevk_@irc"},
{"content":{"body":"However, if you tell that to the IETF they'll puke at the word browser and stop listening...","msgtype":"m.text"},"ts":1421400572000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: so we just replace the word \"browser\" with the word \"user\" there","msgtype":"m.text"},"ts":1421404644000,"senderName":"MikeSmit1","senderId":"MikeSmit1@irc"},
{"content":{"body":"And it's still the same point","msgtype":"m.text"},"ts":1421404665000,"senderName":"MikeSmit1","senderId":"MikeSmit1@irc"},
{"content":{"body":"MikeSmit1: I would be surprised if they give up on DNSSEC anytime soon","msgtype":"m.text"},"ts":1421404819000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmit1: though with both IDNA and DNS management IETF hasn't really shined","msgtype":"m.text"},"ts":1421404840000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmit1: or IPv6...","msgtype":"m.text"},"ts":1421404912000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"HTTP/2 is the only thing I can think of that's quite exciting","msgtype":"m.text"},"ts":1421404935000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: wait, what should IETF have done wrt IPv6 and IPv4 address space exhaustion?","msgtype":"m.text"},"ts":1421406235000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"It's not a matter of what, it's that the rollout isn't going very well","msgtype":"m.text"},"ts":1421406283000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well, yes. But how could the IETF have shined? I don't see anything they could've done to make that go quicker?","msgtype":"m.text"},"ts":1421406317000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I forgot the specifics, but from what I remember there's various parts that could've been done better","msgtype":"m.text"},"ts":1421406378000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Most of what's hurt the rollout for most of the time is it's taken a long while to get hardware support for IPv6 in routers, and then the consumer routers where the problem is now is simply cost-cutting to the extreme by ISPs…","msgtype":"m.text"},"ts":1421406534000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Yes, IPv6 could be better in some ways. But I don't think it'd have had an appreciable difference in the rollout.","msgtype":"m.text"},"ts":1421406555000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"https://mobile.twitter.com/sideshowbarker/status/520358150583508992","msgtype":"m.text"},"ts":1421407585000,"senderName":"MikeSmit1","senderId":"MikeSmit1@irc"},
{"content":{"body":"http://blog.bimajority.org/2014/09/05/the-network-nightmare-that-ate-my-week/","msgtype":"m.text"},"ts":1421407595000,"senderName":"MikeSmit1","senderId":"MikeSmit1@irc"},
{"content":{"body":"but yeah we really do need IPV6","msgtype":"m.text"},"ts":1421407640000,"senderName":"MikeSmit1","senderId":"MikeSmit1@irc"},
{"content":{"body":"so it's a shame","msgtype":"m.text"},"ts":1421407649000,"senderName":"MikeSmit1","senderId":"MikeSmit1@irc"},
{"content":{"body":"\"We have seen Windows machines with more than 300 IPv6 addresses — which, recall, means that every 150 seconds they will be transmitting 30 multicast packets per second which have to be flooded through the network.\"","msgtype":"m.text"},"ts":1421407771000,"senderName":"MikeSmit1","senderId":"MikeSmit1@irc"},
{"content":{"body":"IPv6 \"privacy\" addresses","msgtype":"m.text"},"ts":1421407855000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: anyway about your earlier comment, we really should just all start using some code word for \"browsers\", like \"user-facing web clients\"","msgtype":"m.text"},"ts":1421408069000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"or Facing-to User Clients","msgtype":"m.text"},"ts":1421408127000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"FUCs","msgtype":"m.text"},"ts":1421408137000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"in discussions with IETFers","msgtype":"m.text"},"ts":1421408172000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"seriously the biggest thing that distinguishes browsers from the myriad of other kinds of web clients that the IETFers always like to drag into every discussion is that browsers are user-facing, and used by billions of real people","msgtype":"m.text"},"ts":1421408328000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I'M A PERSON NOT A MACHINE.","msgtype":"m.text"},"ts":1421408480000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(the myriads of other kinds of web clients that supposedly exist, according to them, and that the rest of us need to consider even though they almost never give concrete examples)","msgtype":"m.text"},"ts":1421408554000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Is there some common name for the combination (method, url)?","msgtype":"m.text"},"ts":1421409463000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"When describing a HTTP API","msgtype":"m.text"},"ts":1421409490000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I've seen request-line used occasionally for that, but nothing else.","msgtype":"m.text"},"ts":1421409742000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"considers going with \"endpoint\"","msgtype":"m.emote"},"ts":1421409798000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"MikeSmith: yeah, that's one of the articles","msgtype":"m.text"},"ts":1421409822000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: thanks","msgtype":"m.text"},"ts":1421409842000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: endpoint is the URL","msgtype":"m.text"},"ts":1421409873000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: methurl","msgtype":"m.text"},"ts":1421410005000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: citation needed","msgtype":"m.text"},"ts":1421410257000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: just search? E.g. http://camel.apache.org/endpoint.html","msgtype":"m.text"},"ts":1421410445000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I did search and found WSDL which was a) incomprehensible and b) somewhat suggestive that it didn't mean that","msgtype":"m.text"},"ts":1421410482000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"talking about ES6 generators http://youtu.be/ZrgEZykBHVo :0)","msgtype":"m.emote"},"ts":1421412874000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"annevk, caitp, Domenic_ seeking your comments on http://youtu.be/ZrgEZykBHVo thanks :o)","msgtype":"m.text"},"ts":1421413713000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"jgraham: I've always read HTTP API endpoint as URL, but might just be me","msgtype":"m.text"},"ts":1421413768000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I agree with annevk about endpoint, fwiw.","msgtype":"m.text"},"ts":1421414753000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic_: so the question for ARIA is really whether elements should have access to a private ARIA API to set an initial role (and aria-* attributes?)","msgtype":"m.text"},"ts":1421416095000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: enabling something like that probably makes sense, I don't think we want to allow overriding e.g. <hr> (unless you create an actual subclass, once we figure out how that should work)","msgtype":"m.text"},"ts":1421416165000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: can't +1 that email enough","msgtype":"m.text"},"ts":1421418776000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: wish your +1s would drive change; Unfortunately not holding my breath.","msgtype":"m.text"},"ts":1421418955000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Are dialogs supposed to have forced overflow containment?","msgtype":"m.text"},"ts":1421419239000,"senderName":"scott_gonzalez","senderId":"scott_gonzalez@irc"},
{"content":{"body":"http://jsbin.com/pofemovupo/1/","msgtype":"m.text"},"ts":1421419250000,"senderName":"scott_gonzalez","senderId":"scott_gonzalez@irc"},
{"content":{"body":"I didn't see anything in the spec about this and dev tools don't show any styles being applied by the user agent stylesheet that should cause this, as far as I can tell.","msgtype":"m.text"},"ts":1421419351000,"senderName":"scott_gonzalez","senderId":"scott_gonzalez@irc"},
{"content":{"body":"I'm testing in Chrome, since I believe that's the only browser that supports <dialog> right now.","msgtype":"m.text"},"ts":1421419364000,"senderName":"scott_gonzalez","senderId":"scott_gonzalez@irc"},
{"content":{"body":"tobie: yeah...","msgtype":"m.text"},"ts":1421419474000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":(","msgtype":"m.text"},"ts":1421419568000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"scott_gonzalez: did you study the rendering section?","msgtype":"m.text"},"ts":1421419575000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I didn't see anything about this relating to dialogs.","msgtype":"m.text"},"ts":1421419634000,"senderName":"scott_gonzalez","senderId":"scott_gonzalez@irc"},
{"content":{"body":"scott_gonzalez: there's default styling there for dialog elements","msgtype":"m.text"},"ts":1421419651000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"scott_gonzalez: dialog elements also create a top layer, which is explained in https://fullscreen.spec.whatwg.org/#top-layer","msgtype":"m.text"},"ts":1421419662000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, I see that, but I don't see anything that would contain the content.","msgtype":"m.text"},"ts":1421419663000,"senderName":"scott_gonzalez","senderId":"scott_gonzalez@irc"},
{"content":{"body":"Chrome may have bugs in that though, they have for Fullscreen and since they use the same mechanism...","msgtype":"m.text"},"ts":1421419701000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That's why I'm trying to find out if this is expected behavior.","msgtype":"m.text"},"ts":1421419725000,"senderName":"scott_gonzalez","senderId":"scott_gonzalez@irc"},
{"content":{"body":"This surprised us (the jQuery UI team) when tooltips were applied to a native dialog.","msgtype":"m.text"},"ts":1421419795000,"senderName":"scott_gonzalez","senderId":"scott_gonzalez@irc"},
{"content":{"body":"annevk: : largely yes. States/properties need to change over time. In Chrome at least role is set at inserted-into-document time.","msgtype":"m.text"},"ts":1421419803000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"scott_gonzalez: okay, so what do you mean by overflow containment? What I'm seeing looks okay","msgtype":"m.text"},"ts":1421419804000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"scott_gonzalez: note that a top layer has this for position: \"If its position property computes to fixed, its containing block is the viewport, and the initial containing block otherwise.\"","msgtype":"m.text"},"ts":1421419833000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: we'd also need to expand ARIA's vocabulary a decent bit.","msgtype":"m.text"},"ts":1421419852000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: Refresh that page. I added a native tooltip to the custom tooltip.","msgtype":"m.text"},"ts":1421419879000,"senderName":"scott_gonzalez","senderId":"scott_gonzalez@irc"},
{"content":{"body":"Domenic_: makes sense, I don't really understand why ARIA is not a straight mapping of the available APIs but is instead described on some RDF-like thingie","msgtype":"m.text"},"ts":1421419892000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Notice how the native tooltip isn't contrained by the bounding box of the dialog.","msgtype":"m.text"},"ts":1421419897000,"senderName":"scott_gonzalez","senderId":"scott_gonzalez@irc"},
{"content":{"body":"annevk: I was expecting the same from the custom tooltip since it's absolutely positioned.","msgtype":"m.text"},"ts":1421419912000,"senderName":"scott_gonzalez","senderId":"scott_gonzalez@irc"},
{"content":{"body":"annevk: I presume platform independence, although I don't know the history.","msgtype":"m.text"},"ts":1421419928000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"scott_gonzalez: isn't shrink-wrapping normal when you position something absolute that has no width?","msgtype":"m.text"},"ts":1421419960000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"scott_gonzalez: you'd need to add something like width:intrinsic, no?","msgtype":"m.text"},"ts":1421419979000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it would be a good approach to look at what the intersection of accessibility APIs looks like though across platforms. Programmatic APIs instead of markup, that is.","msgtype":"m.text"},"ts":1421420004000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: well that bit makes sense, but there's a lot of voodoo going on","msgtype":"m.text"},"ts":1421420013000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: I think Steve might have done that already, or someone at least","msgtype":"m.text"},"ts":1421420034000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: there's an ARIA to accessibility layer mapping document somewhere","msgtype":"m.text"},"ts":1421420048000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: The question is why is the dialog used to determine where the content wraps?","msgtype":"m.text"},"ts":1421420065000,"senderName":"scott_gonzalez","senderId":"scott_gonzalez@irc"},
{"content":{"body":"annevk: `width: intrinsic` on #tooltip doesn't help.","msgtype":"m.text"},"ts":1421420087000,"senderName":"scott_gonzalez","senderId":"scott_gonzalez@irc"},
{"content":{"body":"scott_gonzalez: see top layer","msgtype":"m.text"},"ts":1421420089000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"scott_gonzalez: I explained that above","msgtype":"m.text"},"ts":1421420126000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"scott_gonzalez: perhaps Chrome does not support that, but if I set a width of 400px on #tooltip it works","msgtype":"m.text"},"ts":1421420149000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Sure, but that's not how native tooltips work.","msgtype":"m.text"},"ts":1421420165000,"senderName":"scott_gonzalez","senderId":"scott_gonzalez@irc"},
{"content":{"body":"scott_gonzalez: apparently there's new keywords but they're not supported: dev.w3.org/csswg/css-sizing-3/#width-height-keywords","msgtype":"m.text"},"ts":1421420250000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"scott_gonzalez: sure, but native tooltips are not implemented through absolute positioning either...","msgtype":"m.text"},"ts":1421420266000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ok, let me state this another way. The top layer handling of dialogs has broken the behavior of jQuery UI tooltips.","msgtype":"m.text"},"ts":1421420302000,"senderName":"scott_gonzalez","senderId":"scott_gonzalez@irc"},
{"content":{"body":"annevk: It sounds like you're saying right now there's no way to fix that.","msgtype":"m.text"},"ts":1421420320000,"senderName":"scott_gonzalez","senderId":"scott_gonzalez@irc"},
{"content":{"body":"scott_gonzalez: I recommend posting to either www-style or whatwg or both and asking","msgtype":"m.text"},"ts":1421420581000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ok. Thanks.","msgtype":"m.text"},"ts":1421420593000,"senderName":"scott_gonzalez","senderId":"scott_gonzalez@irc"},
{"content":{"body":"scott_gonzalez: I'm not an expert on <dialog>, I just know how to read specs :-)","msgtype":"m.text"},"ts":1421420612000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wonders where hemanth went","msgtype":"m.emote"},"ts":1421420736000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: so I was thinking about the ARIA/overriding <hr> stuff a bit, and it reminded me one reason why callbacks are copied in on definition time","msgtype":"m.text"},"ts":1421423683000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"which is that e.g. if you overrode HTMLHRElement.prototype.attachedCallback, in theory that would give you an (almost-sync) callback every time a HR element is inserted into the DOM","msgtype":"m.text"},"ts":1421423716000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"or worse, just HTMLElement.prototype.attachedCallback","msgtype":"m.text"},"ts":1421423724000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"The \"copying\" idea is similar to saying \"at start-up time, the browser grabs the value of HTMLHRElement.prototype.attachedCallback, and saves it, and calls the saved value when it inserts <hr>s\"","msgtype":"m.text"},"ts":1421423753000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"similar to \"at start up time, the browser grabs the value of window.Number, and saves it, and calls the saved value when it converts values to numbers\"","msgtype":"m.text"},"ts":1421423771000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"The punch line being, I think a similar thing could work for ARIA callbacks (and focus, see recent conversations at https://docs.google.com/document/d/1k93Ez6yNSyWQDtGjdJJqTBPmljk9l2WS3JTe5OHHB50/edit )","msgtype":"m.text"},"ts":1421423810000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: how does that help custom elements though?","msgtype":"m.text"},"ts":1421423842000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: oh, we'd still expose some API to custom elements for having non-overrideable roles?","msgtype":"m.text"},"ts":1421423867000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So you could let custom elements define e.g. implicitAriaLabel() and strongAriaRole() or implicitAriaRole() just like they define attachedCallback()","msgtype":"m.text"},"ts":1421423887000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"And you'd put those same methods on HTMLHRElement","msgtype":"m.text"},"ts":1421423898000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"but you'd have no problem saying \"if you override HTMLHRElement.prototype.strongAriaRole(), we're going to ignore it.\"","msgtype":"m.text"},"ts":1421423913000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"same as if you change MyCustomEl.prototype.attachedCallback after registration time, we ignore it","msgtype":"m.text"},"ts":1421423937000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"They stick around on the prototype because they're still relatively useful (for subclasses to call, or in other scenarios) but the original value is saved away","msgtype":"m.text"},"ts":1421423962000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"It's similar to saying, \"HTMLHRElement.prototype.align is a getter that returns `this.getAttribute(\"align\")`, but it makes sure to use the saved value of HTMLElement.prototype.getAttribute instead of just calling it directly.\"","msgtype":"m.text"},"ts":1421424165000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I should write all this up","msgtype":"m.text"},"ts":1421424172000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"hemanth: re the promise talk, have you watched jafar husain's talks on it? he's pretty good at conveying the message of es6/7/etc control patterns","msgtype":"m.text"},"ts":1421424795000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Domenic_: yes I see now","msgtype":"m.text"},"ts":1421424845000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: could they not just be data properties in that case?","msgtype":"m.text"},"ts":1421424858000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: a role is just a string after all","msgtype":"m.text"},"ts":1421424864000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: also, did you see all the email? I think we should at least explore \"Jonas\" a bit more before we go with \"Dmitry\"","msgtype":"m.text"},"ts":1421425008000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Planning your dates, huh","msgtype":"m.text"},"ts":1421425049000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"We named the Upgrade alternatives after those who came up with them, see the wiki","msgtype":"m.text"},"ts":1421425114000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: role changes, e.g. <a> vs. <a href>","msgtype":"m.text"},"ts":1421425472000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"c","msgtype":"m.text"},"ts":1421425536000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah saw the email. Willing to explore Jonas, certainly.","msgtype":"m.text"},"ts":1421425539000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: Domenic: HTML Accessibility API Mappings 1.1 http://rawgit.com/w3c/aria/master/html-aam/html-aam.html may be helpful","msgtype":"m.text"},"ts":1421425542000,"senderName":"SteveF_","senderId":"SteveF_@irc"},
{"content":{"body":"SteveF_: yeah, I'm also curious about what the actual a11y *APIs* look like on various platforms, not just the strings involved...","msgtype":"m.text"},"ts":1421425577000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: 4.3.2 has that, no?","msgtype":"m.text"},"ts":1421425638000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: http://rawgit.com/w3c/aria/master/html-aam/html-aam.html#dfn-accessibility-api links to acc apis","msgtype":"m.text"},"ts":1421425650000,"senderName":"SteveF_","senderId":"SteveF_@irc"},
{"content":{"body":"Domenic_: oh you mean how the roles get conveyed?","msgtype":"m.text"},"ts":1421425660000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SteveF_: perfect, never found that section before","msgtype":"m.text"},"ts":1421425669000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: yeah I mean the actual OS function calls I am curious about","msgtype":"m.text"},"ts":1421425677000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"scott_gonzalez: the default styles for <details> are intentionally pretty minimal","msgtype":"m.text"},"ts":1421425681000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"scott_gonzalez: but if there's something dumb that we overlooked we can definitely add more","msgtype":"m.text"},"ts":1421425694000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"scott_gonzalez: mail whatwg@ or file a bug (whatwg.org/newbug) or something","msgtype":"m.text"},"ts":1421425704000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"For example http://msdn.microsoft.com/en-us/library/ms697291%28v=vs.85%29.aspx is interesting","msgtype":"m.text"},"ts":1421425704000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: also, for element-constructors, I was thinking of creating a pull request to add an SVG example","msgtype":"m.text"},"ts":1421426131000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: people asked about it on Twitter, makes sense to cover it","msgtype":"m.text"},"ts":1421426146000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: but yeah, main thing I wanted to ask is how we could best evaluate the different Upgrade strategies to get everyone on the same page so we can move on with Apple on board","msgtype":"m.text"},"ts":1421426206000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, would be good to do SVG as well, I agree. Should probably end up parallel to HTMLElement but I might be missing some stuff.","msgtype":"m.text"},"ts":1421428863000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: the biggest issue with \"Jonas\" I see is it doesn't cover upgrades. Which I think are important because async modules. You end up needing a second story for upgrades.","msgtype":"m.text"},"ts":1421428972000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: quoting from his post, \"While parsing, when you hit a custom element (with a constructor)\" the point of the upgrade case is when you don't have a constructor when parsing, but a few seconds later you do","msgtype":"m.text"},"ts":1421429016000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: the question is whether upgrades need to be coupled","msgtype":"m.text"},"ts":1421429078000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"say more?","msgtype":"m.text"},"ts":1421429090000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: we could ship almost-synchronous now and have the upgrade bit be polyfilled until something like \"HTML modules\" emerges","msgtype":"m.text"},"ts":1421429130000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: which might very well emerge based on experimenting with JS modules, the loader API, and all the other new goodness over there","msgtype":"m.text"},"ts":1421429160000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so you are saying that almost-synchronous is really almost-synchronous + dummy-replacement?","msgtype":"m.text"},"ts":1421429190000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: or e.g. you async load your JS module and a blob of HTML","msgtype":"m.text"},"ts":1421429200000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: then once the JS module is ready you parse the blob of HTML","msgtype":"m.text"},"ts":1421429212000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yes, if you don't want to write your HTML in .html files, upgrading is not needed, I agree.","msgtype":"m.text"},"ts":1421429233000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: I'm saying it's almost-synchronous + something in v2","msgtype":"m.text"},"ts":1421429236000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It feels like we should have all the information now to nail down what \"something\" is","msgtype":"m.text"},"ts":1421429256000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: I think wycats is correct that :unresolved is a poor mans fallback","msgtype":"m.text"},"ts":1421429280000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: and that typically you want to include a rather large set of custom elements (name it a module...)","msgtype":"m.text"},"ts":1421429319000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: and that while that module is loading you want fallback covering it all","msgtype":"m.text"},"ts":1421429362000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That all makes sense. I think we should nail that down though if we want to go that route, instead of saying \"we'll figure it out later\"","msgtype":"m.text"},"ts":1421429394000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I also think it could be layered on top of Dmitry just as well as it could be layered on top of Jonas though. The benefit of Jonas being that you write `constructor(...args) { super(...args); /* code here */ }` instead of `[Element.create]() { /* code here */ }` is not too compelling to me. (But apparently is mandatory for rniwa?)","msgtype":"m.text"},"ts":1421429477000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: it seems hard to nail down ahead of time, with loader not being done and modules not having landed","msgtype":"m.text"},"ts":1421429483000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We know roughly how loaders work and if there are specific features we need from them we can demand them","msgtype":"m.text"},"ts":1421429508000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Better to co-evolve than wait until it's nailed down and find out it doesn't solve our use case","msgtype":"m.text"},"ts":1421429530000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"that is fair","msgtype":"m.text"},"ts":1421429547000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Layering on top of Dmitry instead of on top of Jonas has the benefit that Dmitry gives a no-thinking-required solution for out of the box work. I agree that something along the lines of wycats's solution is going to be nicer for more complex apps though. Unsure what the split is, e.g. could be anywhere from 80/20 to 20/80.","msgtype":"m.text"},"ts":1421429603000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"That seems worth figuring out. I guess I'm going to ask rniwa on list to clarify that only Jonas works for Apple","msgtype":"m.text"},"ts":1421429672000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I do want to be cautious of saying that just because Chrome/Polymer works with something simple-ish (similar to, but worse than, Dmitry) that it is OK for the majority of apps. That isn't proven in my mind.","msgtype":"m.text"},"ts":1421429678000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"If you ask Facebook they'll just say no :-(","msgtype":"m.text"},"ts":1421429710000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Right, that's good feedback to keep in mind","msgtype":"m.text"},"ts":1421429726000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Their concerns IIRC are more around the global namespacing (which wycats' proposal also seems to contain a hint of solving)","msgtype":"m.text"},"ts":1421429740000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I emailed a bit with React and talked with some folks at Mozilla that are into it; they have very different ideas","msgtype":"m.text"},"ts":1421429747000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yes confirm :)","msgtype":"m.text"},"ts":1421429748000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Interesting","msgtype":"m.text"},"ts":1421429754000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"But then again their model is so different (immutable state etc.) that I'm not sure they're even in the room.","msgtype":"m.text"},"ts":1421429757000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Right, the only use they see for custom elements is for if you want to do things between frameworks","msgtype":"m.text"},"ts":1421429785000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If you're exclusively React it's not needed","msgtype":"m.text"},"ts":1421429794000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I am curious if people write things in .html files when using React.","msgtype":"m.text"},"ts":1421429814000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"My thinking is largely around how granularly \"unrendered\" loading UI should be","msgtype":"m.text"},"ts":1421429815000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Per-element seems OK for google +1 buttons and bad for apps","msgtype":"m.text"},"ts":1421429828000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Domenic_: they do not","msgtype":"m.text"},"ts":1421429846000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Domenic_: I believe you write the tree as JS plus constraints which then generates a DOM for view","msgtype":"m.text"},"ts":1421429852000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"They are strongly opposed to the concept of separate HTML","msgtype":"m.text"},"ts":1421429855000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"brb, somehow freenode is confused and I can't get rid of this underscore.","msgtype":"m.text"},"ts":1421429881000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Ember's view is actually interesting here: we treat HTML as a DSL for building DOM but are very careful to obey HTML's semantics","msgtype":"m.text"},"ts":1421429914000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"So we parse the HTML on the server and use createElement and friends","msgtype":"m.text"},"ts":1421429932000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"(that was easier to fix than I thought it would be. Goodbye underscore.)","msgtype":"m.text"},"ts":1421429948000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Which means that the way we want to deal with custom elements is actually not even in the parser","msgtype":"m.text"},"ts":1421429953000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"We want createElement to work (which it does of course)","msgtype":"m.text"},"ts":1421429967000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Our goal is to be largely indistinguishable from what the browser would do","msgtype":"m.text"},"ts":1421429984000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"We're a bit of an implementation in that respect","msgtype":"m.text"},"ts":1421429998000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Similar to react though in that people don't write in .html files","msgtype":"m.text"},"ts":1421430038000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Honestly I don't like writing in .html files myself","msgtype":"m.text"},"ts":1421430045000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But it seems important to support","msgtype":"m.text"},"ts":1421430055000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://github.com/tildeio/simple-html-tokenizer","msgtype":"m.text"},"ts":1421430070000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Domenic: XHTML 2.0!","msgtype":"m.text"},"ts":1421430111000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: it's a little different than react","msgtype":"m.text"},"ts":1421430117000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"wycats: definitely different but in terms of whether it needs upgrading or not, neither do","msgtype":"m.text"},"ts":1421430134000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"We have separate template files that are supposed to be \"as if\" HTML","msgtype":"m.text"},"ts":1421430137000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"yes 100%","msgtype":"m.text"},"ts":1421430142000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Domenic: we've been talking a lot about adding {{import}} to top-level templates in Ember","msgtype":"m.text"},"ts":1421430169000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"That's where I got the idea","msgtype":"m.text"},"ts":1421430175000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"There's also a lot of desire for scoped imported elements","msgtype":"m.text"},"ts":1421430199000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"(You mentioned it above)","msgtype":"m.text"},"ts":1421430207000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"So one question is: if the use cases for bare .HTML are things like Facebook like buttons, maybe it's OK to do pure DOM replacement there","msgtype":"m.text"},"ts":1421430256000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"And not worry too much about brain transplants","msgtype":"m.text"},"ts":1421430271000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"But if you're scoped inside of some container, you are saved from both DOM replacement and brain transplants","msgtype":"m.text"},"ts":1421430295000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"(iow apps shouldn't mind the extra scoping... they pretty much already need it anyway)","msgtype":"m.text"},"ts":1421430320000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I think the use cases for bare .html are much bigger than that","msgtype":"m.text"},"ts":1421430399000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"they're for less-ambitious apps that want to use non-native components, given that the components built in to HTML are very limited","msgtype":"m.text"},"ts":1421430415000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"<tabset>, <google-map>, etc. are all useful even on \"brochure\" sites","msgtype":"m.text"},"ts":1421430428000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But surely they can wrap in some element","msgtype":"m.text"},"ts":1421430495000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I see the situation as somewhat analogous to modules in es6","msgtype":"m.text"},"ts":1421430532000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Yes, the ywrap in <html>","msgtype":"m.text"},"ts":1421430536000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"There's a bit more verbosity but it makes everything far more predictable","msgtype":"m.text"},"ts":1421430545000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"But they want their site to load and then <google-map> to load later.","msgtype":"m.text"},"ts":1421430558000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: we could add an async global attr for custom elements?","msgtype":"m.text"},"ts":1421430594000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"async is wrong","msgtype":"m.text"},"ts":1421430602000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Since everything is non-blocking","msgtype":"m.text"},"ts":1421430613000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"wycats: the problem is all of this \"just works\" with Dmitry. Why make it more complicated for people building sites like that, if the only benefit is writing `constructor(...args) { super(...args); /* code here */ }` instead of `[Element.create]() { /* code here */ }`","msgtype":"m.text"},"ts":1421430667000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: what does instanceof do with the Dmitry design?","msgtype":"m.text"},"ts":1421430688000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: works great, no tricks needed. Since the constructor you pass in is the real constructor.","msgtype":"m.text"},"ts":1421430706000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: even for markup-created elements?","msgtype":"m.text"},"ts":1421430720000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yep, because __proto__-munging in that case","msgtype":"m.text"},"ts":1421430738000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: wait what? We keep __proto__ munging?","msgtype":"m.text"},"ts":1421430751000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: the problem with brain transplants is beyond ^^","msgtype":"m.text"},"ts":1421430756000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"same reason instanceof works in Chrome today, except today you have to do `instanceof ReturnedC` instad of `instanceof PassInC`","msgtype":"m.text"},"ts":1421430757000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I did not realize that :-(","msgtype":"m.text"},"ts":1421430772000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think it's a common case you want a loading spinner not a bunch of elements \"popping in\"","msgtype":"m.text"},"ts":1421430784000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"annevk: yes, you are essentially emulating the ES [[Construct]] algorithm which itself does proto-munging","msgtype":"m.text"},"ts":1421430795000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"eww","msgtype":"m.text"},"ts":1421430807000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's not so bad ;)","msgtype":"m.text"},"ts":1421430820000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Domenic: I guess I just think \"popping in\" UIs are amateur hour","msgtype":"m.text"},"ts":1421430855000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"And I don't think the unknown element pseudo does enough to mitigatr","msgtype":"m.text"},"ts":1421430873000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"You know what I mean?","msgtype":"m.text"},"ts":1421430880000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I mean, it's worked for Angular for years","msgtype":"m.text"},"ts":1421430884000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Nah","msgtype":"m.text"},"ts":1421430888000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"They have ng-cloak","msgtype":"m.text"},"ts":1421430892000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"if you don't use the HTML parser (that is, use it only as a bootstrapping device), you don't need upgrades -- this is true, btw.","msgtype":"m.text"},"ts":1421430901000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"Which is semi sort of analogous to what I'm talking about","msgtype":"m.text"},"ts":1421430903000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I see the desire for a better solution, but I think we still want it to work out of hte box","msgtype":"m.text"},"ts":1421430904000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah, ng-cloak is just a worse version of :unresolved","msgtype":"m.text"},"ts":1421430912000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it is one you have to manually insert","msgtype":"m.text"},"ts":1421430918000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Except it can be applied at a coarser grain","msgtype":"m.text"},"ts":1421430934000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"and \"UI popping in\" is orthogonal to the upgrades.","msgtype":"m.text"},"ts":1421430937000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"It's orthogonal to upgrades but not orthogonal to the loading story","msgtype":"m.text"},"ts":1421430963000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Which is key here","msgtype":"m.text"},"ts":1421430966000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"dglazkov: how so exactly orthogonal to the upgrades? What I think of by \"UI popping in\" is the upgrade from <google-map> = HTMLElement to full-fledge <google-map>","msgtype":"m.text"},"ts":1421430969000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I think it's only orthogonal in a narrow sense","msgtype":"m.text"},"ts":1421430997000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"the upgrades are really about consistency of how you deal with avoiding to block HTML parser and yielding","msgtype":"m.text"},"ts":1421431014000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"Hmm I think of upgrades as answering the question \"I wrote <google-map> in my .html file but it took 2 seconds on a slow mobile network to load google-map.js\"","msgtype":"m.text"},"ts":1421431060000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that's pretty related to \"popping in\"","msgtype":"m.text"},"ts":1421431072000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1421431073000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I agree","msgtype":"m.text"},"ts":1421431074000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Domenic: I think the issue is that for things like <google-map> you definite want async + \"pop in\"","msgtype":"m.text"},"ts":1421431092000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I guess maybe dglazkov","msgtype":"m.text"},"ts":1421431100000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and if you're careful, you'll use CSS to give it the right size so it doesn't affect layout","msgtype":"m.text"},"ts":1421431103000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"but in apps, where you have 20-30 or even more custom elements","msgtype":"m.text"},"ts":1421431112000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"you really don't want to have to fine-tune ::unresolved per element","msgtype":"m.text"},"ts":1421431120000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"'s point is that there are two upgrade scenarios: one where google-map.js is already loaded, and you want to worry about not blocking the HTML parser to run user code, and one where google-map.js will be loaded in the future.","msgtype":"m.text"},"ts":1421431129000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"you just want to show a spinner, and wait for the elements to load","msgtype":"m.text"},"ts":1421431129000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"yes, I think the former is legitimate but may be easy to mitigate","msgtype":"m.text"},"ts":1421431150000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"\"easy\", but yes","msgtype":"m.text"},"ts":1421431158000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"iow, it may be possible to avoid leaking the internals","msgtype":"m.text"},"ts":1421431159000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I meant to say \"easy\"","msgtype":"m.text"},"ts":1421431166000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"in quotes :P","msgtype":"m.text"},"ts":1421431168000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I see that as an important, but less critical aspect of this problem","msgtype":"m.text"},"ts":1421431191000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I understand why it's important to work out, but I think the \"correct answer\" will be driven by the other half of the problem","msgtype":"m.text"},"ts":1421431214000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"the reason I view these as orthogonal, because this is something you need to solve with our without custom elements or upgrades","msgtype":"m.text"},"ts":1421431218000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"+1","msgtype":"m.text"},"ts":1421431228000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"this is really a general problem of UI management","msgtype":"m.text"},"ts":1421431234000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it is unclear why it should be coupled to custom elements","msgtype":"m.text"},"ts":1421431241000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: so an analogy is","msgtype":"m.text"},"ts":1421431248000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"as opposed to e.g. custom elements giving you a hook, just like any other library","msgtype":"m.text"},"ts":1421431251000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"maybe :unresolved is not a good enough hook","msgtype":"m.text"},"ts":1421431259000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"before ES6 modules, globals were just totally imperative","msgtype":"m.text"},"ts":1421431262000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"and you just ran code","msgtype":"m.text"},"ts":1421431268000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"but you probably want a framework for displaying \"loading\" vs. \"ready\" content that goes waaaay beyond custom elements","msgtype":"m.text"},"ts":1421431275000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and had to externally manage the order that things were loaded in","msgtype":"m.text"},"ts":1421431277000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"you could make it work","msgtype":"m.text"},"ts":1421431281000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"but it was very clunky and not quite right","msgtype":"m.text"},"ts":1421431291000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"ES6 modules let you say \"this code DEPENDS on this other code\"","msgtype":"m.text"},"ts":1421431300000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"\"so please go get the other code before you bother trying to execute me\"","msgtype":"m.text"},"ts":1421431309000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"and it's a huge ergonomic improvement to the programming model","msgtype":"m.text"},"ts":1421431316000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"even though in theory it was possible to fudge before (using, for example, AMD)","msgtype":"m.text"},"ts":1421431328000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I'm saying roughly an equivalent problem exists here","msgtype":"m.text"},"ts":1421431339000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"and as in ES6 modules, it's a little more annoying if you're dealing with tiny amounts of code","msgtype":"m.text"},"ts":1421431355000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"but much less annoying if you're dealing with an \"app\"","msgtype":"m.text"},"ts":1421431361000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"This kind of ties back to Hixie's declarative dependency stuff IMO","msgtype":"m.text"},"ts":1421431439000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I agree 100%","msgtype":"m.text"},"ts":1421431446000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"You want a general mechanism of delaying showing some part of the UI until a variety of promises fulfill","msgtype":"m.text"},"ts":1421431452000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1421431461000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I think you want to keep it entirely inert, though","msgtype":"m.text"},"ts":1421431468000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"that sounds better, yes","msgtype":"m.text"},"ts":1421431477000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But in general IMO as long as the relevant custom elements stuff exposes the relevant promise then it can tie into this more general framework","msgtype":"m.text"},"ts":1421431488000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I don't necessarily agree with Hixie's precise proposal, but I agree that at a high-level he's on to something","msgtype":"m.text"},"ts":1421431490000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Domenic: not necessarily if you want them to be inert","msgtype":"m.text"},"ts":1421431499000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"So maybe the takeaway here is that you want some kind of promise-returning `document.whenElementRegistered(\"my-tag\")`","msgtype":"m.text"},"ts":1421431512000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1421431526000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Then maybe later high-level markup syntax like <blahblah inert-until-registered=\"my-tag my-other-tag\">","msgtype":"m.text"},"ts":1421431532000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1421431537000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I think that sounds like a good stab","msgtype":"m.text"},"ts":1421431549000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"(I like both attr-based deps and inner-tag based deps because trying to cram multiple imports into an attribute could be crazy)","msgtype":"m.text"},"ts":1421431576000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"(but that's a surface detail)","msgtype":"m.text"},"ts":1421431581000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"sure yeah","msgtype":"m.text"},"ts":1421431587000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I think Hixie is onto something about this not being just about custom elements","msgtype":"m.text"},"ts":1421431595000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"dglazkov was the one who drove that home for me ten minutes ago :)","msgtype":"m.text"},"ts":1421431609000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think linking it in to ES6 modules is the way to go (I think you've mentioned this in the past)","msgtype":"m.text"},"ts":1421431614000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"so you're importing a Module that maybe exports a default tag or multiple named tags","msgtype":"m.text"},"ts":1421431655000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"something like that","msgtype":"m.text"},"ts":1421431659000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"yeah that would be nice","msgtype":"m.text"},"ts":1421431692000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"builds on potentially scoped registrations","msgtype":"m.text"},"ts":1421431699000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"c","msgtype":"m.text"},"ts":1421431737000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"so I think our options for upgrade are:","msgtype":"m.text"},"ts":1421431816000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"1) decide to run constructors synchronously","msgtype":"m.text"},"ts":1421431821000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"2) run constructors asynchronously, but not observably so","msgtype":"m.text"},"ts":1421431831000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"3) brain transplant","msgtype":"m.text"},"ts":1421431844000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"4) DOM replacement","msgtype":"m.text"},"ts":1421431848000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"1) is not an option for upgrade","msgtype":"m.text"},"ts":1421431870000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it is something you could do if you combined with 4)","msgtype":"m.text"},"ts":1421431878000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"5) only update the prototype (this doesn't feel like a real option)","msgtype":"m.text"},"ts":1421431878000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"well...","msgtype":"m.text"},"ts":1421431884000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"1) is basically saying \"no upgrades\"","msgtype":"m.text"},"ts":1421431894000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'm saying you could decide you don't need upgrade at all if you have the element","msgtype":"m.text"},"ts":1421431897000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1421431898000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"bbl lunch","msgtype":"m.text"},"ts":1421431957000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"bbl company offsite :)","msgtype":"m.text"},"ts":1421431963000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"tobie: the whole silo setup also doesn't work the moment you start doing the thing where you let one app talk to the SW of another app","msgtype":"m.text"},"ts":1421433417000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: because in a world of silos, only the app itself will ever have a SW","msgtype":"m.text"},"ts":1421433434000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the whole silo setup just doesn't work","msgtype":"m.text"},"ts":1421433444000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: it's just fundamentally broken","msgtype":"m.text"},"ts":1421433447000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"right :-)","msgtype":"m.text"},"ts":1421433451000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1421433452000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"this is what we get letting old man like mounir__ be in charge of stuff","msgtype":"m.text"},"ts":1421433486000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Could be worse","msgtype":"m.text"},"ts":1421433520000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Could've been marcosc :)","msgtype":"m.text"},"ts":1421433526000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: who is that mounir__ guy?","msgtype":"m.text"},"ts":1421433659000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"mounir: wouldn't you want to know? :p","msgtype":"m.text"},"ts":1421433709000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: wycats: sounds great, hopefully we can flush this out and make it work","msgtype":"m.text"},"ts":1421435445000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'm excited","msgtype":"m.text"},"ts":1421435455000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Domenic: I continue to be excited by the element constructor project too, I guess I still need to wait a bit with specifying the thing :-)","msgtype":"m.text"},"ts":1421435480000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"we're pretty close with subclassing","msgtype":"m.text"},"ts":1421435495000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"annevk: :D it is pretty close I think. Also once ES6 classes ship in V8 I will prototype it in jsdom.","msgtype":"m.text"},"ts":1421435572000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"just to un-mumble something I said earlier: upgrades are a performance primitive when you have non-blocking script and parser that yields.","msgtype":"m.text"},"ts":1421436242000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"with upgrades, the non-blocking script could execute during a yield, register elements, and keep on going. The chunk of html that was parsed previously will upgrade, and the chunk that hasn't yet parsed will start queueing callbacks.","msgtype":"m.text"},"ts":1421436338000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"without upgrades, you as a developer are highly incentivized to reduce the amount of html after your non-blocking script, because you need to wait until the doc parsed completely until you can sensibly run the script.","msgtype":"m.text"},"ts":1421436407000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"dglazkov: have you seen my (very syntactically strawman) POV?","msgtype":"m.text"},"ts":1421437161000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"my POV is largely about making it possible to increase the granularity of upgrade","msgtype":"m.text"},"ts":1421437176000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"so you're not upgrading individual elements, but rather chunks of markup","msgtype":"m.text"},"ts":1421437190000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I am open to concrete proposals. It took a while to shake all the kinks out of mine, so I apologize for being weary. It's a human thing.","msgtype":"m.text"},"ts":1421437365000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"dglazkov: I really appreciate how positive you are actually","msgtype":"m.text"},"ts":1421439869000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ms2ger: Do I need to do anything more with https://critic.hoppipolla.co.uk/r/3723 at the moment, or is it just waiting for reviewers to have cycles?","msgtype":"m.text"},"ts":1421440722000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: yeah, sorry","msgtype":"m.text"},"ts":1421440756000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jsbell, yeah, just needs review","msgtype":"m.text"},"ts":1421440758000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"jsbell, please badger us :)","msgtype":"m.text"},"ts":1421440764000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"jsbell: you could address the issues I suppose, but mostly it needs more eyes","msgtype":"m.text"},"ts":1421440768000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, no open issues :)","msgtype":"m.text"},"ts":1421440782000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"ooh","msgtype":"m.text"},"ts":1421440787000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":) Just didn't want it to be blocked on me hitting a button or something","msgtype":"m.text"},"ts":1421440801000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Ms2ger: remind me Monday and I'll just do it, custom elements is making good progress :-)","msgtype":"m.text"},"ts":1421440808000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, will try :)","msgtype":"m.text"},"ts":1421440816000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"just reviewed a -7+7 fixup from last July :/","msgtype":"m.emote"},"ts":1421440932000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"}
]