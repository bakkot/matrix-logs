[
{"content":{"body":"dbaron: https://github.com/mozilla/standards-positions/blob/master/CONTRIBUTING.md#which-specifications seems a little exclusionary :)","msgtype":"m.text"},"ts":1520916334000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: created https://github.com/mozilla/standards-positions/pull/71","msgtype":"m.text"},"ts":1520916683000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1520916704000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Pretty sure it's an oversight since we list them elsewhere","msgtype":"m.text"},"ts":1520916732000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I hope at some point we'll also include Khronos, Unicode, CA/B, et al","msgtype":"m.text"},"ts":1520916752000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah fair point","msgtype":"m.text"},"ts":1520916764000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Although not sure how many specs the CA/B produces","msgtype":"m.text"},"ts":1520916783000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Well, they have a set of guidelines CAs need to adhere to that gets change proposals","msgtype":"m.text"},"ts":1520916880000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So they produce at least one \"Living Standard\" of sorts that I know of","msgtype":"m.text"},"ts":1520916899000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah yeah, that fits","msgtype":"m.text"},"ts":1520916900000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: if you're working on DOM bugs today https://github.com/whatwg/dom/issues/371 still really bugs me","msgtype":"m.text"},"ts":1520917151000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I'd like all the shadow stuff to land first","msgtype":"m.text"},"ts":1520917258000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: also, it's starting to get to me a bit that I'm always cleaning up other folks their trash","msgtype":"m.text"},"ts":1520917276000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":-/","msgtype":"m.text"},"ts":1520917340000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"For shadow DOM that's an issue with how the incubation proceeded I think","msgtype":"m.text"},"ts":1520917368000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Not sure what happened with the service worker thing, seems like it needed more review going in?","msgtype":"m.text"},"ts":1520917380000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah, it didn't have enough architectural scrutiny and it took a long time for the lifetime to become somewhat defined","msgtype":"m.text"},"ts":1520917466000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees is doing a lot of the cleanup there, which is great :)","msgtype":"m.text"},"ts":1520917501000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Coupled with WPT upstreaming","msgtype":"m.text"},"ts":1520917519000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah, that certainly helps","msgtype":"m.text"},"ts":1520917601000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Maybe I can tackle that a bit as it does not touch dispatch","msgtype":"m.text"},"ts":1520920875000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: merged","msgtype":"m.text"},"ts":1520922208000,"senderName":"dbaron","senderId":"dbaron@irc"},
{"content":{"body":"oops, I'm not used to using GitHub review tool for making comments...","msgtype":"m.text"},"ts":1520923353000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"TabAtkins: https://github.com/whatwg/dom/issues/185","msgtype":"m.text"},"ts":1520925947000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: JakeA: to what extent do we still want https://github.com/whatwg/dom/issues/438?","msgtype":"m.text"},"ts":1520929481000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: JakeA: maybe we should file a dedicated issue on serialize/transfer for AbortController and close that one?","msgtype":"m.text"},"ts":1520929518000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm I can't remember why I wanted that :/","msgtype":"m.text"},"ts":1520929625000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That seems like a good reason to close it ðŸ˜ƒ","msgtype":"m.text"},"ts":1520930445000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Domenic: It's interesting, but transferring promises/streams would be higher on my list","msgtype":"m.text"},"ts":1520931003000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Yeah it seems like transferring streams is coming up soon","msgtype":"m.text"},"ts":1520931035000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: what's the solution for deciding which objects should be transferred, and which should be cloned?","msgtype":"m.text"},"ts":1520931910000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"That's the open question","msgtype":"m.text"},"ts":1520931917000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Although at least for readable byte streams we can just easily decide they're all transferred","msgtype":"m.text"},"ts":1520931930000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1520931935000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"controller.enqueue(whatever, transferables) is the best I can think of","msgtype":"m.text"},"ts":1520931971000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"For tasklets surma / iank___ contemplated just always transferring all the transferrable things","msgtype":"m.text"},"ts":1520931999000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Sure. Might be weird that it's different to postMessage though. Or stream.pipeThrough(new TransferAll())","msgtype":"m.text"},"ts":1520932090000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Which could be explained using controller.enqueue(whatever, transferrables)","msgtype":"m.text"},"ts":1520932136000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Yeah c.e(w, t) seems like probably the right primitive? But maybe it should be easier?","msgtype":"m.text"},"ts":1520932176000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I was thinking new ReadableStream({ autoTransfer: true, ... }) maybe","msgtype":"m.text"},"ts":1520932192000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The pipeThrough idea works but feels a bit strange at the moment, hmm","msgtype":"m.text"},"ts":1520932238000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess it depends on who we want to be in control","msgtype":"m.text"},"ts":1520932243000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"const stream = new ReadableStream({ autoTransfer: true, â€¦ }).pipeThrough(new TransformStream()); // what happens if I transfer stream? Has the transform stream unmarked the objects as transferrable?","msgtype":"m.text"},"ts":1520932313000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1520932338000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Hmm yeah","msgtype":"m.text"},"ts":1520932442000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"There are several levels of transferrability here, I guess autoTransfer is not the interesting one","msgtype":"m.text"},"ts":1520932453000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hmm","msgtype":"m.text"},"ts":1520932507000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Maybe x.postMessage(stream, [ReadableStream.transferChunks])???","msgtype":"m.text"},"ts":1520932527000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Kinda magic","msgtype":"m.text"},"ts":1520932573000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Orrr even just x.postMessage(stream, []) vs. x.postMessage(stream, [stream])","msgtype":"m.text"},"ts":1520932586000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess the question is, what does the first one do.","msgtype":"m.text"},"ts":1520932603000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Does it tee stream or does it lock it forever and clone the chunks over","msgtype":"m.text"},"ts":1520932613000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"s/tee/clone I guess, which we still haven't really done","msgtype":"m.text"},"ts":1520932635000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I figured it'd tee, or throw","msgtype":"m.text"},"ts":1520932636000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yeah I guess cloning is the right thing","msgtype":"m.text"},"ts":1520932677000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"But I think the cloning/transferring of the stream is separate to the chunks","msgtype":"m.text"},"ts":1520932714000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I was kinda hoping it wasn't, then we could just use that distinction","msgtype":"m.text"},"ts":1520932747000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"At least a transform stream lets you do it on a chunk by chunk basis, but having to make sure it's the very last transform in the sequence might be a gotcha","msgtype":"m.text"},"ts":1520932751000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I'm no longer sure how that would work, except by some kind of magical marking of chunks as transferrable","msgtype":"m.text"},"ts":1520932803000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Because the transfer-or-not decision needs to be made inside the postMessage code","msgtype":"m.text"},"ts":1520932811000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah I guess the stream would have a weakmap of chunks to transferrables","msgtype":"m.text"},"ts":1520932854000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"but yeah, I see your point","msgtype":"m.text"},"ts":1520932862000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Auto-transferring seems nice...","msgtype":"m.text"},"ts":1520932888000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"We could also add an options bag to all the postMessage APIs...","msgtype":"m.text"},"ts":1520932894000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"obj[Symbol.transferrables] ðŸ˜ˆ","msgtype":"m.text"},"ts":1520932940000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Let the games begin https://twitter.com/domenic/status/973490376731328513","msgtype":"m.text"},"ts":1520933177000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: Around?","msgtype":"m.text"},"ts":1520933515000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: yeah","msgtype":"m.text"},"ts":1520933679000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://github.com/immersive-web/webxr/issues/25#issuecomment-372602299","msgtype":"m.text"},"ts":1520933704000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: If the answer is kill, I'm removing the test from a Servo PR and it should land in WPT soon afterwards.","msgtype":"m.text"},"ts":1520933721000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: It's just mentioned in WebVR's idlharness tests.","msgtype":"m.text"},"ts":1520933731000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: sorry, don't know about webxr","msgtype":"m.text"},"ts":1520933786000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Fair enough.","msgtype":"m.text"},"ts":1520933793000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: it does seem that if allowvr is implemented that needs upstreaming to HTML /  Feature Policy","msgtype":"m.text"},"ts":1520933808000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: 'allow=\"vr\"' is a thing,","msgtype":"m.text"},"ts":1520933825000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"so probably just something that we forgot to remove.","msgtype":"m.text"},"ts":1520933834000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: that's feature policy","msgtype":"m.text"},"ts":1520933834000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: allow= is here to stay","msgtype":"m.text"},"ts":1520933849000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah that I know.","msgtype":"m.text"},"ts":1520933858000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic: hmm, how do you count?","msgtype":"m.text"},"ts":1520933898000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: are Worker and MessageChannel separate?","msgtype":"m.text"},"ts":1520933906000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: IDL method declarations","msgtype":"m.text"},"ts":1520933923000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Can I kill an arrow function in a test?","msgtype":"m.text"},"ts":1520934027000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Servo still doesn't support them.","msgtype":"m.text"},"ts":1520934033000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I'd rather you not","msgtype":"m.text"},"ts":1520934043000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well I guess we won't run those tests then. What could go wrong?","msgtype":"m.text"},"ts":1520934059000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I land stuff with them all the time and they're actually more readable","msgtype":"m.text"},"ts":1520934063000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't see how \"more readable\" enters the picture here.","msgtype":"m.text"},"ts":1520934081000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Now I need to maintain a separate fork of tests.","msgtype":"m.text"},"ts":1520934096000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: in that I likely have to read that test again in the future","msgtype":"m.text"},"ts":1520934103000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: there's a root problem here and the arrow functions are not it","msgtype":"m.text"},"ts":1520934123000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ok.","msgtype":"m.text"},"ts":1520934170000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic: I wonder if that's really the upper bound, given AudioWorklet","msgtype":"m.text"},"ts":1520934211000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I checked, AudioWorklet uses MessagePort","msgtype":"m.text"},"ts":1520934223000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Servo should just give up and add Babel at this point","msgtype":"m.text"},"ts":1520934271000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: hurray","msgtype":"m.text"},"ts":1520934273000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"No, we should get our SM bump,","msgtype":"m.text"},"ts":1520934285000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"but SM's build system isâ€¦ Well it exists.","msgtype":"m.text"},"ts":1520934295000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"May have brainfarted anyway, I think the arrow function itself is borken.","msgtype":"m.text"},"ts":1520934307000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Is `r => r.text()` supposed to work?","msgtype":"m.text"},"ts":1520934336000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"  â”‚   â†’ invalid arrow-function arguments (parentheses around the arrow-function may help)","msgtype":"m.text"},"ts":1520934341000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"yeah it should...","msgtype":"m.text"},"ts":1520934368000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Need to be more ambitious, re-introduce IronMonkey but now with the meaning of being a JS impl in Rust","msgtype":"m.text"},"ts":1520934375000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So we are on a SM version that choke on some arrow functions or something, wonderful.","msgtype":"m.text"},"ts":1520934403000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"That seems really weird","msgtype":"m.text"},"ts":1520934427000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Oh no. The expression on which it chokes is in `async`,","msgtype":"m.text"},"ts":1520934510000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"which is probably what we are actually missing.","msgtype":"m.text"},"ts":1520934521000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"That makes more sense","msgtype":"m.text"},"ts":1520934794000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Is -manual a special test name suffix?","msgtype":"m.text"},"ts":1520935339000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: yeah, it means it cannot be automated","msgtype":"m.text"},"ts":1520935470000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: well, that it's not automated","msgtype":"m.text"},"ts":1520935476000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1520935481000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"w3c-test.org timing out for everyone or just for me?","msgtype":"m.text"},"ts":1520936373000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: wfm","msgtype":"m.text"},"ts":1520936404000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks","msgtype":"m.text"},"ts":1520936409000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"it worked for me too a short while ago","msgtype":"m.text"},"ts":1520936431000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"ooh. now it came back","msgtype":"m.text"},"ts":1520936633000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I just realized that if you use event handler attributes you leak an event listener until the element is GC'd","msgtype":"m.text"},"ts":1520938576000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yes that seems accurate","msgtype":"m.text"},"ts":1520942245000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Well it's the same as event listeners though?","msgtype":"m.text"},"ts":1520942272000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"In both cases you can remove manually, but if you don't, they leak","msgtype":"m.text"},"ts":1520942278000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: you cannot remove an event handler","msgtype":"m.text"},"ts":1520943386000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: el.onfoo = null?","msgtype":"m.text"},"ts":1520943395000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: does not remove the listener","msgtype":"m.text"},"ts":1520943411000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sure, but now the listener does nothing, so I can't imagine engines keep around much if any memory for it","msgtype":"m.text"},"ts":1520943423000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Sure, but still","msgtype":"m.text"},"ts":1520943438000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Not sure I'd call that a leak","msgtype":"m.text"},"ts":1520943444000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"what is supposed to happen when there is a shadow DOM and element(s)FromPoint is called on that area?","msgtype":"m.text"},"ts":1520943767000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"do we always need to check the shadowRoot exists and use that?","msgtype":"m.text"},"ts":1520943792000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"what happens if its a closed shadowRoot?","msgtype":"m.text"},"ts":1520943811000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"AutomatedTester: https://github.com/w3c/csswg-drafts/issues/556","msgtype":"m.text"},"ts":1520943866000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks!","msgtype":"m.text"},"ts":1520943966000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"annevk/hsivonen: Regarding the worries about CBOR in https://github.com/mozilla/standards-positions/issues/29#issuecomment-334376573, have you gone through WebAuthn to make sure its use of CBOR and CDDL is fine with you? I'm working on improving the CBORbis spec precision (https://github.com/cbor-wg/CBORbis/compare/master...jyasskin:editorial-improvements), but WebAuthn also depends on CDDL which is even less precise.","msgtype":"m.text"},"ts":1520982020000,"senderName":"jyasskin","senderId":"jyasskin@irc"}
]