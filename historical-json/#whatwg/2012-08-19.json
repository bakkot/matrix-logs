[
{"content":{"body":"an arc starts from the rightmost point, how can i change that to the topmost point ?","msgtype":"m.text"},"ts":1345357291000,"senderName":"ruby_on_tails","senderId":"ruby_on_tails@irc"},
{"content":{"body":"jgraham: Have a working copy of html5lib that's gone through 2to3 and 3to2, needing slight work after the latter. 5% quicker at parsing the spec, likely down to no implicit str/unicode conversions.","msgtype":"m.text"},"ts":1345388898000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(Also, am in Lkpg)","msgtype":"m.text"},"ts":1345388907000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders, \\o/","msgtype":"m.text"},"ts":1345390176000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"So, the main challenge with 3to2: how do I have a string literal which is always the \"str\" type (i.e., a byte string on Py2 and a unicode string on Py3).","msgtype":"m.text"},"ts":1345392208000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Preprocess your python in python","msgtype":"m.text"},"ts":1345392635000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"gsnedders: Why do you need that?","msgtype":"m.text"},"ts":1345393995000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"If you do then you would do something like:","msgtype":"m.text"},"ts":1345394025000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"def foo(x):","msgtype":"m.text"},"ts":1345394045000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"    if python2:","msgtype":"m.text"},"ts":1345394059000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"        return str(x)","msgtype":"m.text"},"ts":1345394071000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"    else:","msgtype":"m.text"},"ts":1345394075000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"        return unicode(x)","msgtype":"m.text"},"ts":1345394084000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Or whatever the right function names are","msgtype":"m.text"},"ts":1345394097000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: may as well do \"foo = str if python2 else unicode\" in that case, heh","msgtype":"m.text"},"ts":1345394819000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"\"While Opera has a history of lying to sites for compatibility reasons, most other browsers do not.\"","msgtype":"m.text"},"ts":1345396042000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Orly","msgtype":"m.text"},"ts":1345396043000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: Hahaha","msgtype":"m.text"},"ts":1345396945000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Where's that from?","msgtype":"m.text"},"ts":1345396953000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"http://lists.w3.org/Archives/Public/public-webapps/2012JulSep/0486.html","msgtype":"m.text"},"ts":1345396983000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Man, Tab should know better than that","msgtype":"m.text"},"ts":1345397018000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: Ah, but 2to3 will convert str(x) to unicode(x).","msgtype":"m.text"},"ts":1345406322000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: Or rather 3to2.","msgtype":"m.text"},"ts":1345406331000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: So you end up with return unicode(x) on both branches.","msgtype":"m.text"},"ts":1345406361000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hi","msgtype":"m.text"},"ts":1345407073000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"if you specify HSLA values to CSSOM, should it be converted and stored as RGBA?","msgtype":"m.text"},"ts":1345407122000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"e.g.:","msgtype":"m.text"},"ts":1345407143000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"element.style.color = 'hsla(100, 40%, 50%, 0.5)'","msgtype":"m.text"},"ts":1345407145000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"element.style.color","msgtype":"m.text"},"ts":1345407168000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"> \"rgba(110, 179, 76, 0.498039)\"","msgtype":"m.text"},"ts":1345407185000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"this is how it works on both Firefox and Chrome","msgtype":"m.text"},"ts":1345407195000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"this is not what I would have expected","msgtype":"m.text"},"ts":1345407209000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"Both always return <color> values as rgba. There's a fair bit of sense in this, as all the various CSS syntax forms are stored as a normalized colour value internally, and in Firefox/Chrome it isn't stored what the input form was.","msgtype":"m.text"},"ts":1345407599000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"uhm... but this rather confusing to anyone using this API","msgtype":"m.text"},"ts":1345407882000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"e.g. if you are implementing HSL color picker then the information about hue that user has picked is lost","msgtype":"m.text"},"ts":1345407969000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"jarek: It isn't lost, you can get from rgba to hsla.","msgtype":"m.text"},"ts":1345408025000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: it is lost if both saturation and value were 0","msgtype":"m.text"},"ts":1345408047000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"gsnedders: You haven't really explained why you need something that is always a str","msgtype":"m.text"},"ts":1345408093000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: types.ModuleType's first argument is a str in Py2 and a str in Py3.","msgtype":"m.text"},"ts":1345408174000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: if hasattr(types, \"StringTypes\"): getattr(types, \"StringTypes\")[0]; else: str","msgtype":"m.text"},"ts":1345409266000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Presumably 3to2 isn't clever enough to convert that","msgtype":"m.text"},"ts":1345409283000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: Yeah, I was guessing I'd have to do something like that. Which sucks.","msgtype":"m.text"},"ts":1345409464000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Only a little bit","msgtype":"m.text"},"ts":1345409490000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(The only other issue is an outright bug in 3to2)","msgtype":"m.text"},"ts":1345409536000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(It deletes a line in a try block. It then doesn't add \"pass\". Syntax error results.)","msgtype":"m.text"},"ts":1345409559000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"http://web.archive.org/web/20010621171122/http://www.mozillazine.org/designpatterns/","msgtype":"m.text"},"ts":1345409578000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Still suspect there are other issues around elsewhere  in the code.","msgtype":"m.text"},"ts":1345409578000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: if you just want to get the str function without it being converted, i'd hope __builtins__.str wouldn't be touched","msgtype":"m.text"},"ts":1345409611000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"That kind of depends hwo 3to2 works, realy","msgtype":"m.text"},"ts":1345409675000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"*really","msgtype":"m.text"},"ts":1345409678000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"zewt: On the other hand, that makes it dependant on default encoding in Py2.","msgtype":"m.text"},"ts":1345409691000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(Whereas I really just want ISO-8859-1)","msgtype":"m.text"},"ts":1345409711000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"what is a whatwg?","msgtype":"m.text"},"ts":1345409997000,"senderName":"jim","senderId":"jim@irc"}
]