[
{"content":{"body":"(asked the following over on public-html, but want to ask here also)","msgtype":"m.text"},"ts":1181099520000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think it would be useful to have a somewhere a high-level \"What problems we are trying to solve with HTML5\" description.","msgtype":"m.text"},"ts":1181099521000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Suggestions?","msgtype":"m.text"},"ts":1181099522000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think \"interoperability among browsers\" may be a big one (and interoperable error handling).","msgtype":"m.text"},"ts":1181099580000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"maybe also, \"better support for writing Web applications (instead of just Web documents)\"","msgtype":"m.text"},"ts":1181099640000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that part is interesting","msgtype":"m.text"},"ts":1181099700000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"... \"riqorously/thoroughly documenting conformant application behavior\"","msgtype":"m.text"},"ts":1181099701000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"because html5 introduces new features for web apps, people think that html5 is good for web apps, but xhtml2 is better for \"structured documents\"","msgtype":"m.text"},"ts":1181099702000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan - yeah, I can see that being a inference that some would draw","msgtype":"m.text"},"ts":1181099760000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"some also think that xhtml2 is better because you can embed svg and other xml namespaces in it, and not realising that you can do the same in xhtml5","msgtype":"m.text"},"ts":1181099820000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"we could even make it possible in HTML","msgtype":"m.text"},"ts":1181099880000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1181099940000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I think that engaging much in that discussion might obscure that the important distinction is that HTML5 has as probably its primary goal to precisely specify behavior of conformant UAs (HTML processing applications), less so conformant authoring applications","msgtype":"m.text"},"ts":1181100300000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"XHTML2 spec does not really have that as a goal (as far as I can see)","msgtype":"m.text"},"ts":1181100360000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I guess my take on the which-is-better-for-authoring thing is, it's mostly a matter of what your authoring requirements are, or a matter of taste ... anyway, not something worth battling about","msgtype":"m.text"},"ts":1181100361000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"or to put it another way, author in whatever language you want, as long as you transform your source into conformant HTML5 before delivering it to UAs","msgtype":"m.text"},"ts":1181100420000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"for many use cases, neither authoring directly in HTML5 nor in XHTML2 are the best choice","msgtype":"m.text"},"ts":1181100540000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but authoring instead on some custom vocabulary whose content models closely match your content, then transform that to what you deliver to UAs","msgtype":"m.text"},"ts":1181100541000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"HTML5 does indeed define conforming documents and therefore what conforming authoring tools must output","msgtype":"m.text"},"ts":1181100600000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I think authoring in HTML is better than authoring in a custom vocabulary if you are going to do anything dynamic","msgtype":"m.text"},"ts":1181100601000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"because then your script code can act directly on the model rather than a transformed view","msgtype":"m.text"},"ts":1181100602000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: are you promoting the end of MySQL ;)","msgtype":"m.text"},"ts":1181100780000,"senderName":"karlUshi","senderId":"karlUshi@irc"},
{"content":{"body":"othermaciej - I guess my point about that is there are a range of opinions about what's best for authoring, and it's open to debate and there's more value as far as communicating \"what problems is HTML5 trying to solve\" in focusing on the stuff that's not really debatable","msgtype":"m.text"},"ts":1181100840000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"agreed with MikeSmith ","msgtype":"m.text"},"ts":1181100900000,"senderName":"karlUshi","senderId":"karlUshi@irc"},
{"content":{"body":"well, HTML5 aims to make things better for UA interoperability, as a target format, and as a direct authoring format","msgtype":"m.text"},"ts":1181101020000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"http://edward.oconnor.cx/2007/BarCamp-San-Diego/","msgtype":"m.text"},"ts":1181122860000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"seems the <pre>\\n \"hack\" needs to be implemented for <textarea> as well jeremyb","msgtype":"m.text"},"ts":1181123940000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"euh jgraham","msgtype":"m.text"},"ts":1181123941000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the spec now deals with the entities but not yet with the incorrect bytes...","msgtype":"m.text"},"ts":1181124120000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://ln.hixie.ch/?start=1181118077&count=1","msgtype":"m.text"},"ts":1181126100000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I've been reading that","msgtype":"m.text"},"ts":1181126160000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"lots of amusing lines","msgtype":"m.text"},"ts":1181126161000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"barely has the time for rewriting the CSSOM","msgtype":"m.emote"},"ts":1181126400000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"there's only a few people on this planet who understand CSS well enough to write a spec for it","msgtype":"m.text"},"ts":1181126401000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"then there's only a few people who are good at writing specifications","msgtype":"m.text"},"ts":1181126460000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the union of both is Hixie I think","msgtype":"m.text"},"ts":1181126461000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wants <datagrid> to handle sortable tables without scripting","msgtype":"m.emote"},"ts":1181126520000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, there's also very few who have the time to write/edit a CSS spec","msgtype":"m.text"},"ts":1181126700000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"yeah, it be much like the fulltime job HTML5 is","msgtype":"m.text"},"ts":1181126820000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the combination of having the time and the ability rules out a whole lot of possible candidates","msgtype":"m.text"},"ts":1181126880000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"all of them so far :(","msgtype":"m.text"},"ts":1181126940000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess one could also add \"inclination\"","msgtype":"m.text"},"ts":1181126941000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"same goes for some of the SVG stuff btw...","msgtype":"m.text"},"ts":1181127000000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, I'd rather see a CSS Shapes draft before an SVG rewrite","msgtype":"m.text"},"ts":1181127060000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"in the SVG WG, having spec-writing ability and knowledge of relevant technology does not seem to be a requirement for editorship","msgtype":"m.text"},"ts":1181127061000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"it seems that most use of shapes on the web are decorative, not content","msgtype":"m.text"},"ts":1181127062000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"thus more appropriate to be done as a \"styling\"","msgtype":"m.text"},"ts":1181127063000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"and besides, markup is for *marking up* text","msgtype":"m.text"},"ts":1181127064000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"you could use XBL to hide the SVG images from actual content","msgtype":"m.text"},"ts":1181127120000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SVG does contain some but not all of the needed capabilities, but it makes them all pretty awkward to use in combination with HTML markup","msgtype":"m.text"},"ts":1181127240000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"btw, I'm finding that the tokenizer can easily be implemented as a recursive descent tokenizer without an explicit state variable","msgtype":"m.text"},"ts":1181129760000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"wrapper loops are needed for attributes and the data state to avoid arbitrarily deep recursion","msgtype":"m.text"},"ts":1181129820000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"buffering?","msgtype":"m.text"},"ts":1181129880000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"oh, you're doing SAX","msgtype":"m.text"},"ts":1181129881000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"mikeday: I intend to do SAX with and without buffering, DOM and XOM","msgtype":"m.text"},"ts":1181129882000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"so the recursion is just for eg. see a '<', call parseStartTag() ?","msgtype":"m.text"},"ts":1181129883000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"mikeday: this is the Tokenizer only","msgtype":"m.text"},"ts":1181129884000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"nods","msgtype":"m.emote"},"ts":1181129940000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"mikeday: yes","msgtype":"m.text"},"ts":1181129941000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"so if you don't use arbitrary recursion, technically you don't need to recurse at all, right?","msgtype":"m.text"},"ts":1181129942000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"if you introduce new states...","msgtype":"m.text"},"ts":1181129943000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and allow it to start in arbitrary states","msgtype":"m.text"},"ts":1181129944000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"you could just jump around inside a big single function","msgtype":"m.text"},"ts":1181129945000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"mikeday: well, to avoid stack overflow regardless of input, I have a loop around the attribute states so that the stack rewinds back to the loop between attributes","msgtype":"m.text"},"ts":1181130000000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"right, eg. while getAttribute() ...","msgtype":"m.text"},"ts":1181130060000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1181130061000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"but you don't actually need recursive calls, if you're not parsing a recursive grammar","msgtype":"m.text"},"ts":1181130062000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"it's just for convenience structuring your code, yes?","msgtype":"m.text"},"ts":1181130063000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"this is for code structuring, yes","msgtype":"m.text"},"ts":1181130064000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"also, I am assuming that a straight final method invocation in Java is going to be faster than state lookup plus method dispatch","msgtype":"m.text"},"ts":1181130120000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hmm, Java has no goto, right? :)","msgtype":"m.text"},"ts":1181130121000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"mikeday: no goto in .java level","msgtype":"m.text"},"ts":1181130180000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1181130181000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"sounds pretty good then :)","msgtype":"m.text"},"ts":1181130182000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"mikeday: my reasoning is that this is as good as it gets without goto and jump arithmetic based on input token","msgtype":"m.text"},"ts":1181130183000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"the way to code a state machine is a loop with a switch statement","msgtype":"m.text"},"ts":1181130184000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"not via dynamic method dispatch","msgtype":"m.text"},"ts":1181130240000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"s/the way/a way/ :)","msgtype":"m.text"},"ts":1181130241000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"the efficient way","msgtype":"m.text"},"ts":1181130242000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: you get as many method invocations either way, right?","msgtype":"m.text"},"ts":1181130300000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: well, I'm not sure why you contrasted \"static final method invocation\" with the other option","msgtype":"m.text"},"ts":1181130301000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"straight--not static","msgtype":"m.text"},"ts":1181130360000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"othermaciej: if you have one method per state","msgtype":"m.text"},"ts":1181130361000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"othermaciej: and state B follows A, why would I return to a dispatch loop in between?","msgtype":"m.text"},"ts":1181130420000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"depends on whether function calls are more expensive in your language than conditional branches","msgtype":"m.text"},"ts":1181130421000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: ah, you are assuming that I could do away with function calls","msgtype":"m.text"},"ts":1181130480000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"othermaciej: I am assuming one method per state either way for code structuring sanity","msgtype":"m.text"},"ts":1181130481000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"(since this is human-maintained code--not generated code)","msgtype":"m.text"},"ts":1181130482000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I'm hoping the HotSpot does some inlining","msgtype":"m.text"},"ts":1181130483000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"well, with the switch, the compiler and/or the Java runtime can definitely inline everything into the switch statement","msgtype":"m.text"},"ts":1181130540000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I guess a parsing DSL that compiled down to Java byte code could help","msgtype":"m.text"},"ts":1181130541000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"if each processing method is final and they don't call each other","msgtype":"m.text"},"ts":1181130542000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: good point","msgtype":"m.text"},"ts":1181130543000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"othermaciej: thanks","msgtype":"m.text"},"ts":1181130544000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"anyway I don't know which way would be faster in Java","msgtype":"m.text"},"ts":1181130600000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I don't have a lot of experience performance-tuning Java code","msgtype":"m.text"},"ts":1181130601000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"(though I do have performance-tuning experience in general)","msgtype":"m.text"},"ts":1181130602000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"yeah, this is guesswork without either benchmarking or knowing what HotSpot inlines","msgtype":"m.text"},"ts":1181130603000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"ok. I'll convert to a switch that is potentially inlineable","msgtype":"m.text"},"ts":1181130660000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"a bit of premature optimisation going on here perhaps :)","msgtype":"m.text"},"ts":1181130720000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"by the way, have you done meta charset detection yet?","msgtype":"m.text"},"ts":1181130721000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"mikeday: written--not run","msgtype":"m.text"},"ts":1181130722000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"depends on whether hsivonen finds it easier to code a finite state machine or a recursive descent parser","msgtype":"m.text"},"ts":1181130723000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"hmm, I better hurry up then, I've been dragging my feet over it","msgtype":"m.text"},"ts":1181130780000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"mikeday: in C?","msgtype":"m.text"},"ts":1181130781000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1181130782000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"mikeday: you're writing an HTML5 parser in C?","msgtype":"m.text"},"ts":1181130840000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"yes, that's why I come here, to make me feel guilty enough to work on it some more","msgtype":"m.text"},"ts":1181130841000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"hmm. come to think of it, I still think the way I have coded this is potentially a bit more efficient if HotSpot does deep inlines","msgtype":"m.text"},"ts":1181130842000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"perhaps I leave the optimization for later after all","msgtype":"m.text"},"ts":1181130900000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"a collegue did some testing on tokenization in C/C++ versus Python and JavaScript","msgtype":"m.text"},"ts":1181130960000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"C: ~1ms, Python: ~100ms, JavaScript: ~500ms","msgtype":"m.text"},"ts":1181130961000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"lucky no one is writing a parser in JavaScript I guess","msgtype":"m.text"},"ts":1181130962000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"...or ARE they","msgtype":"m.text"},"ts":1181130963000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"annevk: I would expect buffering to matter a lot in that case (and string object creation)","msgtype":"m.text"},"ts":1181131020000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I guess you could use a dictionary and avoid creating new string objects where possible","msgtype":"m.text"},"ts":1181131021000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"eg. precache tag names and attribute names","msgtype":"m.text"},"ts":1181131022000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"which JavaScript implementation?","msgtype":"m.text"},"ts":1181131140000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"mikeday: how do you look at a character in Python or JS without creating a string object?","msgtype":"m.text"},"ts":1181131141000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"JavaScript suffers from the boxed/unboxed distinction for strings there I guess","msgtype":"m.text"},"ts":1181131142000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"if you actually use string methods","msgtype":"m.text"},"ts":1181131143000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"HotSpot should be happy with inlining methods even when they're not final or are potentially recursive","msgtype":"m.text"},"ts":1181131200000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"hsivonen, buffer file to array of int instead?","msgtype":"m.text"},"ts":1181131201000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"Philip`: these are final and to a finite recursion depth","msgtype":"m.text"},"ts":1181131260000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"mikeday: ok","msgtype":"m.text"},"ts":1181131261000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"array of int is much less efficient than a string in JS","msgtype":"m.text"},"ts":1181131262000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej, string methods were used, Opera 9.2 was used for testing I think","msgtype":"m.text"},"ts":1181131263000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(e.g. http://java.sun.com/developer/technicalArticles/Networking/HotSpot/inlining.html (from 1999) talks about inlining non-final methods, and it just remembers enough to undo the optimisation if its assumptions are ever violated)","msgtype":"m.text"},"ts":1181131264000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Python is already a hundred times slower...","msgtype":"m.text"},"ts":1181131320000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"how about Ruby? :)","msgtype":"m.text"},"ts":1181131321000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"it's hard to beat C","msgtype":"m.text"},"ts":1181131322000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"We really need a C implementation if we want to use it for surveys and such","msgtype":"m.text"},"ts":1181131323000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"except sometimes with C++","msgtype":"m.text"},"ts":1181131324000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"surveys?","msgtype":"m.text"},"ts":1181131325000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"Well, surveys covering lots of pages...","msgtype":"m.text"},"ts":1181131326000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if I were doing it I would use C++","msgtype":"m.text"},"ts":1181131327000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"bleh.","msgtype":"m.text"},"ts":1181131328000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"mikeday, like the research Ian did","msgtype":"m.text"},"ts":1181131380000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Even with a thousand pages, the Python one is unpleasantly slow :-(","msgtype":"m.text"},"ts":1181131381000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"oh, right","msgtype":"m.text"},"ts":1181131382000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"and probably at least two open source HTML5 parsers will be written in C++ sooner or later","msgtype":"m.text"},"ts":1181131383000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"wonders how hard the browser parsers are to extract","msgtype":"m.emote"},"ts":1181131384000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"IIRC, HotSpot beats C for some problems","msgtype":"m.text"},"ts":1181131385000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"will be interesting to see if this is one of them :-)","msgtype":"m.text"},"ts":1181131386000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Java beats C for malloc()","msgtype":"m.text"},"ts":1181131440000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"so... don't use malloc :)","msgtype":"m.text"},"ts":1181131441000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":":-)","msgtype":"m.text"},"ts":1181131442000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"annevk: our current HTML parser does the DOM building, so probably not that easily separable","msgtype":"m.text"},"ts":1181131500000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"C always wins because you can implement a JVM in it :-)","msgtype":"m.text"},"ts":1181131501000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"othermaciej, that's what I thought, main reason why I think having a third would be good","msgtype":"m.text"},"ts":1181131560000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"having a standalone one would be nice, it it was packaged well","msgtype":"m.text"},"ts":1181131620000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"indeed.","msgtype":"m.text"},"ts":1181131680000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"yay, testhtml is parsing attribute names and getting \"http-equiv\"","msgtype":"m.text"},"ts":1181131740000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"if I were doing it for fun, I'd do C++ implementation, C API","msgtype":"m.text"},"ts":1181131800000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"but if I have hobby coding time it will probably be spent on WebKit hacking","msgtype":"m.text"},"ts":1181131801000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"hmm, not getting attribute values though. That's slightly useless.","msgtype":"m.text"},"ts":1181131860000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"(fwiw, recursive call to a finite depth with loops in the right places seems to be how others have written XML parsers in Java)","msgtype":"m.text"},"ts":1181131920000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"that's also how libxml2 is written I think","msgtype":"m.text"},"ts":1181131921000,"senderName":"mikeday","senderId":"mikeday@irc"},
{"content":{"body":"started testing <base> himself","msgtype":"m.emote"},"ts":1181142960000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tests here: http://tc.labs.opera.com/html/base/","msgtype":"m.text"},"ts":1181142961000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"seems that IE7 happily does dynamic changes","msgtype":"m.text"},"ts":1181144400000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"just added 005 and 006","msgtype":"m.emote"},"ts":1181144401000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I actually already figured that out while testing XMLHttpRequest but never feeded it back to the HTML5 spec I think","msgtype":"m.text"},"ts":1181144460000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So open questions: support xml:base? do dynamic changes affect baseURI or also inserted <img> etc? suport xml:base in text/html? reverse engineer IE7 href= handling?","msgtype":"m.text"},"ts":1181145120000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"dunno, just baseURI, dunno, if it's simple...","msgtype":"m.text"},"ts":1181145121000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ARGH!","msgtype":"m.text"},"ts":1181147760000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"people are _still_ arguing <p/> is a self-closing element, citing the validator (which is correctly parsing it as a NET)!","msgtype":"m.text"},"ts":1181147761000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"they're also saying HTML isn't SGML, despite me citing the spec.","msgtype":"m.text"},"ts":1181147820000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"correctly?","msgtype":"m.text"},"ts":1181147821000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"point them to HTML5 and tell them that that's what browsers will implement","msgtype":"m.text"},"ts":1181147822000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, under the spec it is parsing it as","msgtype":"m.text"},"ts":1181147823000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: the argument is in the context of what the HTML 4.01 spec says.","msgtype":"m.text"},"ts":1181147880000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: which most certainly is SGML.","msgtype":"m.text"},"ts":1181147881000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"HTML4 is irrelevant","msgtype":"m.text"},"ts":1181147882000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1181147883000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"One use case for minlength= is search systems that don't work with less than 4 characters","msgtype":"m.text"},"ts":1181148540000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"However, I think that's a usability problem with those search systems and not really a good use case...","msgtype":"m.text"},"ts":1181148541000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"minlength= and maxlength= seem largely unrelated, since the latter stops you entering out-of-range strings but the former presumably only stops you submitting out-of-range strings (because it'd be really horrible UI if it didn't let you delete and retype the contents of the box - though I suppose I've seen people do that anyway...)","msgtype":"m.text"},"ts":1181148900000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"good point","msgtype":"m.text"},"ts":1181148901000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"why were the digital signatures  left out of the new  Web Forms spec?? what patent problems are you referring to?","msgtype":"m.text"},"ts":1181150940000,"senderName":"duryodhan","senderId":"duryodhan@irc"},
{"content":{"body":"duryodhan, care to elaborate?","msgtype":"m.text"},"ts":1181151300000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The Web Forms doc ...","msgtype":"m.text"},"ts":1181151360000,"senderName":"duryodhan","senderId":"duryodhan@irc"},
{"content":{"body":"sez that Digital Signatures weren't addressed because of Patent concerns ","msgtype":"m.text"},"ts":1181151420000,"senderName":"duryodhan","senderId":"duryodhan@irc"},
{"content":{"body":"what are these concerns ?","msgtype":"m.text"},"ts":1181151421000,"senderName":"duryodhan","senderId":"duryodhan@irc"},
{"content":{"body":"cos GPG/PGP etc. are easily available ...","msgtype":"m.text"},"ts":1181151422000,"senderName":"duryodhan","senderId":"duryodhan@irc"},
{"content":{"body":"oh, I see","msgtype":"m.text"},"ts":1181151423000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"duryodhan, e-mail the list if you have a solution","msgtype":"m.text"},"ts":1181151540000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wish :D","msgtype":"m.text"},"ts":1181151720000,"senderName":"duryodhan","senderId":"duryodhan@irc"},
{"content":{"body":"I don't know the problem ...","msgtype":"m.text"},"ts":1181151721000,"senderName":"duryodhan","senderId":"duryodhan@irc"},
{"content":{"body":"the internet is very quiet today","msgtype":"m.text"},"ts":1181172840000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i wonder if i can resolve the <base> problems by simply waiting a few more months for IE7 to get more market share and for the pages that break to get fixed...","msgtype":"m.text"},"ts":1181174340000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"A tempting plan","msgtype":"m.text"},"ts":1181174341000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"but that only works if you don't talk about it, right?","msgtype":"m.text"},"ts":1181174342000,"senderName":"kingryan","senderId":"kingryan@irc"}
]