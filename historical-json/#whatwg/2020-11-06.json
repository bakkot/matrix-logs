[
{"content":{"body":"The way I see it is that USVString is really a binding layer concern (about how some input maps to a scalar value string), past that layer, it's a scalar value string. Eventually we'll make IDL reflect that better. It's currently wrong for ByteString <> byte sequence I think.","msgtype":"m.text"},"ts":1604653955000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"One important thing that I didn't solve yesterday. What happens when you put just the plain JS object as the body?","msgtype":"m.text"},"ts":1604662544000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"croraf: for that specific case, since a string is one of the accepted types, it'll get stringified","msgtype":"m.text"},"ts":1604662672000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Can you show me where is that conversion defined in the specs?","msgtype":"m.text"},"ts":1604662695000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"annevk,","msgtype":"m.text"},"ts":1604662698000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"croraf: it's in IDL","msgtype":"m.text"},"ts":1604662707000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm checking this https://fetch.spec.whatwg.org/#fetch-method . This is not a JS fetch method, but an abstraction, right?","msgtype":"m.text"},"ts":1604662857000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"The JS fetch method is mapped to this abstraction?","msgtype":"m.text"},"ts":1604662878000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"with some conversions happening during the mapping","msgtype":"m.text"},"ts":1604662898000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"The JavaScript method is derived from it, per the rules in IDL","msgtype":"m.text"},"ts":1604663024000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"OK, so the JS method's init object must conform to these rules as per IDL?","msgtype":"m.text"},"ts":1604663297000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"https://fetch.spec.whatwg.org/#requestinit","msgtype":"m.text"},"ts":1604663298000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"annevk,","msgtype":"m.text"},"ts":1604663300000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"That is the body property must conform to this https://fetch.spec.whatwg.org/#bodyinit","msgtype":"m.text"},"ts":1604663346000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"I'm not sure what you mean by conform","msgtype":"m.text"},"ts":1604663368000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"croraf: WebIDL's conversions will throw if there's no way to convert the JS value to the WebIDL type, but it will first try and cast the value in some way","msgtype":"m.text"},"ts":1604663419000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"When JS method is implemented in the JS engine it must conform to this interface.","msgtype":"m.text"},"ts":1604663421000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"andreubotella, ok, and where can i see the rule of casting of JS init value (the second argument of JS fetch method) into BodyInit","msgtype":"m.text"},"ts":1604663509000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"BodyInit is a union type: https://heycam.github.io/webidl/#es-union","msgtype":"m.text"},"ts":1604663546000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"all components of the union except for USVString are WebIDL interfaces, and converting to those will throw if the JS object doesn't implement them: https://heycam.github.io/webidl/#es-interface","msgtype":"m.text"},"ts":1604663634000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"I guess the plain object is bullet 9 there?","msgtype":"m.text"},"ts":1604663635000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"so all that's left are USVStrings: https://heycam.github.io/webidl/#es-USVString","msgtype":"m.text"},"ts":1604663646000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"right, so the types in BodyInit don't match any of the cases in bullet point 9","msgtype":"m.text"},"ts":1604663784000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"First one side question, if I have parent steps and a parent step has children steps, and the children step says, return something.","msgtype":"m.text"},"ts":1604663805000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Does the return happen only for children steps, or also the parent steps return?","msgtype":"m.text"},"ts":1604663832000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Examples here: https://heycam.github.io/webidl/#es-union","msgtype":"m.text"},"ts":1604663846000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Usually, it's returning from the algorithm as a whole, unless the parent step talks of the child steps as a function/callback","msgtype":"m.text"},"ts":1604663926000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"sometimes that gets confusing, like with step 5 in https://fetch.spec.whatwg.org/#main-fetch","msgtype":"m.text"},"ts":1604663960000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"andreubotella, So in https://heycam.github.io/webidl/#es-union when child returns the entire algorithm is terminated?","msgtype":"m.text"},"ts":1604664149000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1604664165000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"croraf: https://infra.spec.whatwg.org/#algorithm-control-flow (anything that doesn't conform to that is worth filing an issue on)","msgtype":"m.text"},"ts":1604664205000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, well, is the algorighm the whole algorithm or the subalgorithm for the step only","msgtype":"m.text"},"ts":1604664284000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"And yes https://fetch.spec.whatwg.org/#main-fetch is really confusing","msgtype":"m.text"},"ts":1604664304000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"So in main-fetch 5 only step 5 subalgorithm terminates when one of its children returns.","msgtype":"m.text"},"ts":1604664353000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1604664368000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Step 5 has \"set response to the result of running the steps...\"","msgtype":"m.text"},"ts":1604664429000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"you can think of \"running the steps\" as calling a callback","msgtype":"m.text"},"ts":1604664442000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"Why do you think this is the correct interpretation?","msgtype":"m.text"},"ts":1604664742000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"experience in reading steps, mostly","msgtype":"m.text"},"ts":1604664920000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"s/steps/specs/","msgtype":"m.text"},"ts":1604664928000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"yes, this is not optimal.","msgtype":"m.text"},"ts":1604664958000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"feel free to suggest alternatives: https://github.com/whatwg/infra/issues/311","msgtype":"m.text"},"ts":1604664982000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"Also the control flow annevk posted is for the WHATWG specs not for the WebIDL that I asked for.","msgtype":"m.text"},"ts":1604665029000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"croraf: IDL should follow it too","msgtype":"m.text"},"ts":1604665050000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1604665056000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"the \"algorithm\" parts of infra do little more than formalize what was already the standard across WHATWG and W3C specs","msgtype":"m.text"},"ts":1604665084000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"OK, so because the JS value of plain object doesnt satisfy any of the steps 3-8, the step 9 is entered.","msgtype":"m.text"},"ts":1604665228000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"there were definitely competing styles and some of that might still be there; Infra was created in part to reduce that","msgtype":"m.text"},"ts":1604665232000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Here all are interfaces except BufferSource and USVString.","msgtype":"m.text"},"ts":1604665244000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"BufferSource is itself a union of interfaces, so it's all interfaces except for USVString","msgtype":"m.text"},"ts":1604665318000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"I'm not so sure that BufferSOurce is a union of interfaces, but lets assume that for now","msgtype":"m.text"},"ts":1604665390000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"https://heycam.github.io/webidl/#common","msgtype":"m.text"},"ts":1604665404000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"So interface is none of the types defined in 9.1-9.6","msgtype":"m.text"},"ts":1604665438000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"These are all types distinct from interface?","msgtype":"m.text"},"ts":1604665452000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1604665463000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"So which of these types is the USVString?","msgtype":"m.text"},"ts":1604665505000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"none of the substeps in step 9 apply, so you exit the substeps and continue","msgtype":"m.text"},"ts":1604665542000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"eventually you end up in step 13, and here USVString *is* a string type","msgtype":"m.text"},"ts":1604665555000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1604665640000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"btw: DOMString (or Infra's \"string\") is &[u16] (UTF-16), ByteString is &[u8], USVString is &str","msgtype":"m.text"},"ts":1604665666000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"If you check https://heycam.github.io/webidl/#BufferSource you can see that it can be a wide variety of things","msgtype":"m.text"},"ts":1604665737000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"I cannot see that any of those is an interface","msgtype":"m.text"},"ts":1604665768000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Maybe that should be clarified, but they are interfaces/classes","msgtype":"m.text"},"ts":1604665840000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ok. The conversion of plain object to USVString is done per https://heycam.github.io/webidl/#es-USVString","msgtype":"m.text"},"ts":1604666142000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Which is basically a ToString(object)","msgtype":"m.text"},"ts":1604666188000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"and converted to UTF8 or?","msgtype":"m.text"},"ts":1604666359000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"decoded as UTF-16, with lone surrogates replaced with the replacement character","msgtype":"m.text"},"ts":1604666388000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"like rust's String::from_utf16_lossy","msgtype":"m.text"},"ts":1604666416000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"The comment below at x:26:37 was a reference to rust?","msgtype":"m.text"},"ts":1604666448000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"*above","msgtype":"m.text"},"ts":1604666453000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1604666464000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"Let's just clear this last thing out. ByteString are bytes containing UTF-8, DOMString are pairs of bytes containing UTF-16?","msgtype":"m.text"},"ts":1604666513000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1604666559000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"JS's strings and DOMString are &[u16], not necessarily valid UTF-16, but interpreted as such when there's some interpreting needed","msgtype":"m.text"},"ts":1604666641000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"but sometimes WebIDL needs strings that are ASCII only, to send to HTTP for example, and it will cast each number in the &[u16] to a u8","msgtype":"m.text"},"ts":1604666794000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"OK. To conclude, that's why i need to manually set Content-Type application/json on plain JS object body. Because otherwiser it will be interpreted as text/plain.","msgtype":"m.text"},"ts":1604666871000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"you don't wanna pass a plain JS object as the body, because String({}) === \"[object Object]\"","msgtype":"m.text"},"ts":1604666945000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"but yeah, you'd have to set the content-type manually","msgtype":"m.text"},"ts":1604666976000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"yes, thanks.","msgtype":"m.text"},"ts":1604667149000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Something to clear the monotony, HTML spec: the select shouldn't trigger onchange if the same option is clicked?","msgtype":"m.text"},"ts":1604667298000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"I'll check, but I guess not. I'm using React and a UI library on top of it, so some of these is not conforming :|","msgtype":"m.text"},"ts":1604667440000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Yes, indeed even in React the onChange is not triggered if the already selected option is reselected.","msgtype":"m.text"},"ts":1604668868000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"In short the issue was that the value of select was being set as a number, implicitly converted to string, and when reselect was made the string value was detected as newly selected, causing the change event.","msgtype":"m.text"},"ts":1604670241000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Is Node allowed to add additional symbols to its `EventTarget` for inspections/warnings? (like `EventTarget.symbolInspectDepth` and such)","msgtype":"m.text"},"ts":1604679915000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"We want to add debugging related symbols to `EventTarget` that effect functionality in a non-observable way and I want to make sure we are not violating the spec in doing so.","msgtype":"m.text"},"ts":1604679949000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"benjamingr__: no, you cannot add properties to interfaces that are not in the spec...","msgtype":"m.text"},"ts":1604680078000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ok, thanks","msgtype":"m.text"},"ts":1604680096000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"Wanted to make sure, will quote you on that when blocking the PR :P","msgtype":"m.text"},"ts":1604680120000,"senderName":"benjamingr__","senderId":"benjamingr__@irc"},
{"content":{"body":"In particular https://heycam.github.io/webidl/#create-an-interface-object does not have a step that says \"and then add any properties you want\"","msgtype":"m.text"},"ts":1604680235000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Anyone knows on the highlevel how the youtube video works. I see it has the video HTML element, but I even see that they download any video content through it?","msgtype":"m.text"},"ts":1604698849000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"I don't see any media request in the devtools network tab, but i see they download the content through xhr.","msgtype":"m.text"},"ts":1604698896000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Seems like they somehow prevent the download to happen. For example this is the video element: <video tabindex=\"-1\" class=\"video-stream html5-main-video\" controlslist=\"nodownload\" src=\"blob:https://www.youtube.com/b5b90a1b-c8c2-4673-9657-1d9c338db209\" style=\"width: 612px; height: 344px; left: 0px; top: 0px;\"></video>","msgtype":"m.text"},"ts":1604699103000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"the url in the src attribute has a blob scheme, not https","msgtype":"m.text"},"ts":1604699185000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"https://w3c.github.io/FileAPI/#url","msgtype":"m.text"},"ts":1604699186000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"andreubotella, thanks, I was suspecting into that blob, but going through the spec for the video element I arrived to here: https://url.spec.whatwg.org/#concept-url-parser","msgtype":"m.text"},"ts":1604700020000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Does the basic url parser just resolve the absolute+relative path?","msgtype":"m.text"},"ts":1604700216000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"the important bit for this in the url parser is step 4, which populates the blob URL entry which is then used from https://fetch.spec.whatwg.org/#main-fetch","msgtype":"m.text"},"ts":1604700365000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"Yes, that's what I thought, the step 1 does nothing important","msgtype":"m.text"},"ts":1604700429000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"So you want to say that the browser stores a \"blob dictionary\"? How can I inspect it or add stuff to it?","msgtype":"m.text"},"ts":1604700490000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"https://w3c.github.io/FileAPI/#creating-revoking","msgtype":"m.text"},"ts":1604700516000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"you can't inspect it other than seeing if a particular blob URL resolves","msgtype":"m.text"},"ts":1604700604000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"I suppose that's because browsers have leeway in deciding when to garbage collect the blobs, and you don't want developers to start depending on some browser's current behavior","msgtype":"m.text"},"ts":1604700637000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"OK, so how can I find into what this blob:https://www.youtube.com/494cb097-fd0f-496a-be3f-fcc04b5218e3 resolves","msgtype":"m.text"},"ts":1604700713000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"I tried: window.URL.revokeObjectURL('https://www.youtube.com/494cb097-fd0f-496a-be3f-fcc04b5218e3')","msgtype":"m.text"},"ts":1604700723000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"in the console. and the video element's src with this blob is NOT in any iframe, but in the main window frame.","msgtype":"m.text"},"ts":1604700786000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"got undefined.","msgtype":"m.text"},"ts":1604700821000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"URL.prototype.revokeObjectURL always returns undefined","msgtype":"m.text"},"ts":1604700864000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"since you have a URL, you can try and fetch it or open it in a new tab","msgtype":"m.text"},"ts":1604700880000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"did i destroy the mapping with that?","msgtype":"m.text"},"ts":1604700881000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1604700884000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"but isn't there an api to see into what this resolves?","msgtype":"m.text"},"ts":1604700914000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"that'd break encapsulation, wouldn't it?","msgtype":"m.text"},"ts":1604700949000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"I can add an object to the blobstore with window.URL.createObjectURL(...) and retrive it by parsing the URL?","msgtype":"m.text"},"ts":1604701184000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"by fetching the URL, rather","msgtype":"m.text"},"ts":1604701199000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"that's the whole point of URL.createObjectURL(...)","msgtype":"m.text"},"ts":1604701210000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"there are many older APIs that will only take a URL rather than a Uint8Array or a ReadableStream, and this is a compatibility layer","msgtype":"m.text"},"ts":1604701264000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"In the context of the \"media HTML elements\" the parsing is done prior to fetching.","msgtype":"m.text"},"ts":1604701312000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"if you're trying to fetch a URL, you ofc need to parse it first","msgtype":"m.text"},"ts":1604701353000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"as a separate algorithm","msgtype":"m.text"},"ts":1604701353000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"but the parsing doesn't make the underlying blob or MediaStream available to any other API","msgtype":"m.text"},"ts":1604701368000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"fetching does","msgtype":"m.text"},"ts":1604701370000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"or the data inside it, rather","msgtype":"m.text"},"ts":1604701379000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"So parsing can be done only internally within specific APIs, like fetch() or \"media elements\"","msgtype":"m.text"},"ts":1604701411000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"sigh","msgtype":"m.text"},"ts":1604701455000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"URL's \"blob URL entry\" is essentially a private field","msgtype":"m.text"},"ts":1604701473000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"it's not available to the URL JS API, and I think only the File APIs and fetch use it","msgtype":"m.text"},"ts":1604701506000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"for everything else, the way to get the blob's data is by fetching the URL","msgtype":"m.text"},"ts":1604701519000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"andreubotella, thanks. I now created a URL with a blob content. Fetched it with fetch('blob-reference') and read its content. Kind of cool.","msgtype":"m.text"},"ts":1604702012000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"But for some reason I cannot fetch the blob src from the video element. How come?","msgtype":"m.text"},"ts":1604702135000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"maybe because it doesn't have a video content type?","msgtype":"m.text"},"ts":1604702163000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"I don't know","msgtype":"m.text"},"ts":1604702165000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"youtube is probably using MediaSource with the URL.createObjectUrl(...) API, but I've never used it or dived into the spec","msgtype":"m.text"},"ts":1604702192000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"at least in chrome blob urls created from a MediaSource instead of a Blob can't be fetched...","msgtype":"m.text"},"ts":1604702193000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"It says net::ERR_FILE_NOT_FOUND","msgtype":"m.text"},"ts":1604702247000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"yeah, in chrome blob URLs refering MediaSource objects are treated separately, and only can be resolved by code that specifically looks for MediaSource objects... (and only in the same process as where the URL was created)","msgtype":"m.text"},"ts":1604702330000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Yes, indeed I try: window.URL.createObjectURL(new MediaSource()) and await fetch(\"blob:https://www.youtube.com/b4e0b59c-6711-49d8-8c23-9a924060df1a\") on it gives ERR_FILE_NOT_FOUND","msgtype":"m.text"},"ts":1604702445000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Two sidenotes. 1. blob is kind of unfortunate prefix and store name, cause it can contain a MediaSource also per w3c FileAPI. 2. MDN https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL says it can also contain a File object.","msgtype":"m.text"},"ts":1604702680000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"File is a subclass of Blob","msgtype":"m.text"},"ts":1604702705000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"Oh, I see. MDN should be slightly corrected though then.","msgtype":"m.text"},"ts":1604702783000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"And I suspect that originally only Blobs were supported and MediaSource was added later on","msgtype":"m.text"},"ts":1604702928000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"that kind of thing happens a lot","msgtype":"m.text"},"ts":1604702935000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"FF does also throw an error https://pasteboard.co/Jzaw4wR.png","msgtype":"m.text"},"ts":1604703020000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Is this then alligned with the specification?","msgtype":"m.text"},"ts":1604703063000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"I think so, yes. https://fetch.spec.whatwg.org/#scheme-fetch says \"[if] blob is not a Blob object, then return a network error. \"","msgtype":"m.text"},"ts":1604703092000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1604703287000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"but if I'm reading the media loading parts of the HTML spec correctly (and assuming that a URL's \"object\" is an older name for the blob URL entry), <video> should be able to handle MediaSource URLs","msgtype":"m.text"},"ts":1604703843000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"Yes, video is using them likely.","msgtype":"m.text"},"ts":1604703934000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"But I'm trying to see if I can get this MeidaSource directly","msgtype":"m.text"},"ts":1604703947000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"I tried (optimistically :D) new MediaSource('blob:...') but dont think I got anything :D","msgtype":"m.text"},"ts":1604703986000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"I got an empty MediaSource","msgtype":"m.text"},"ts":1604704001000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"I dont think I can get the underlying souce either through the video element","msgtype":"m.text"},"ts":1604704040000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"I think in the case of this video element, the video resource is resolved as following:","msgtype":"m.text"},"ts":1604704669000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"1. https://html.spec.whatwg.org/multipage/media.html#concept-media-load-algorithm 9.attribute is entered where urlRecord is a resolved MediaSource object","msgtype":"m.text"},"ts":1604704741000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"in bullet 2 of 9.attribute","msgtype":"m.text"},"ts":1604704763000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"In bullet 5 of 9.attribute a resource fetch algorithm is called with URL record whose object is a media provider object (a MediaSource), so the mode is set to local.","msgtype":"m.text"},"ts":1604704878000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"And current media resource is set to the underlying MediaSource object, and the local mode branch of https://html.spec.whatwg.org/multipage/media.html#concept-media-load-resource is processed.","msgtype":"m.text"},"ts":1604705298000,"senderName":"croraf","senderId":"croraf@irc"}
]