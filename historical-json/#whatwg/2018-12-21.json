[
{"content":{"body":"for Github PRs and Travis, has anybody ever run into a problem where Travis is green but Github doesn’t recognize it’s green?","msgtype":"m.text"},"ts":1545368653000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://github.com/w3c/webdriver/pull/1382","msgtype":"m.text"},"ts":1545368676000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"tries restarting the Travis build","msgtype":"m.emote"},"ts":1545368710000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"nm, just restarting the build fixed it","msgtype":"m.text"},"ts":1545368830000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Yeah, the API is not infallible","msgtype":"m.text"},"ts":1545402912000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"hsivonen: in https://github.com/whatwg/encoding/issues/115#issuecomment-447773485 I'm not sure what the non-committal middle ground is given that the document lists two alternatives","msgtype":"m.text"},"ts":1545403557000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: anyway, both of those seem reasonable to me","msgtype":"m.text"},"ts":1545403582000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: First, thanks for the review. WRT to providing a rel=\"stylesheet\" override for concept-link-obtain, my plan is to also do this for preload too, since there will be more preload-specific logic w/ image{srcset, sizes}.","msgtype":"m.text"},"ts":1545421584000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"With these complete overrides, I think there will be nothing left referring to the non-override steps, and some duplication in each. That’s why I was originally doing some delegating, but do you think it is fine to just have separate algorithms specifically?","msgtype":"m.text"},"ts":1545421597000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: I'm not sure I quite see your vision; could you explain more? All the other link types (besides preload, stylesheet, and modulepreload) would still use the default link-obtain algorithm, right?","msgtype":"m.text"},"ts":1545421813000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Oh geez, yeah, I guess I was just looking at cross-links, but I guess any link type that creates an \"external resource link\" sorta implicitly uses concept-link-obtain, though I think it is only linked to from preload, stylesheet, and one or two other places","msgtype":"m.text"},"ts":1545422020000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Ok so providing those obtain overrides seems good","msgtype":"m.text"},"ts":1545422098000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: Yeah I'm not sure on the exact best strategy, in particular for avoiding too much duplication. modulepreload and default link-obtain are different enough that a complete override makes sense, but the others may be very similar...","msgtype":"m.text"},"ts":1545424186000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Maybe the simplest thing is to just write out 4 separate algorithms, duplication be damned, and then consider refactoring to remove duplication afterward.","msgtype":"m.text"},"ts":1545424213000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Yeah that's what I was thinking. Now I'm just trying to figure out the best way to coordinate creating/adding CSS style sheets in a way such that scripts don't get unblocked before the style sheet fire/load event gets fired (hence some of the acrobatics in that PR)","msgtype":"m.text"},"ts":1545425590000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Yeah. I wonder if just a counter on the document would suffice.","msgtype":"m.text"},"ts":1545425654000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Right, seems to be similar to Chrome's impl.","msgtype":"m.text"},"ts":1545425771000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Domenic: So setting the ready/done flag, or equivalently decrementing a counter, will indeed well-specify the order between link load/error events and pending parsing-blocking script execution (https://github.com/whatwg/html/issues/4020). The benefit of \"adding\" the sheet in the queued task though well-specifies the order of the sheet becoming \"available to scripts\" and the load/error event","msgtype":"m.text"},"ts":1545430427000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"For example: https://script-blocking-styles.glitch.me is sometimes inconsistent in Chrome, but the opposite of Firefox's result","msgtype":"m.text"},"ts":1545430446000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Ah OK, that makes sense","msgtype":"m.text"},"ts":1545430455000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess \"adding\" is the right formalization of \"available to scripts\", indeed","msgtype":"m.text"},"ts":1545430466000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But it still seems possible to do the create and add atomically, right?","msgtype":"m.text"},"ts":1545430479000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"As long as you did both either before the queued task (and make Chrome change), or in the task (and make FF change) right?","msgtype":"m.text"},"ts":1545430536000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"What would before the queued task mean?","msgtype":"m.text"},"ts":1545430599000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Before the queued task executes. Oh shoot so the steps here (https://html.spec.whatwg.org/multipage/links.html#link-type-stylesheet:external-resource-link-9) run _after_ the queued task (the one that gets queued in concept-link-obtain) executes right?","msgtype":"m.text"},"ts":1545430930000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Ehhhhh I wouldn't say the spec is clear on that point -_-","msgtype":"m.text"},"ts":1545431013000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think the ideal flow though is as annevk outlined. In parallel, fetch, parse, then queue a task to do everything else (= fire events, create/add)","msgtype":"m.text"},"ts":1545431043000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The question is what order the everything-else goes in, I guess","msgtype":"m.text"},"ts":1545431051000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess everything else = fire events, create/add, decrement the counter","msgtype":"m.text"},"ts":1545431076000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: ^Indeed. Ok, what do you think of defining \"post-obtain\" steps to essentially be the current paragraph under concept-link-obtain (that queues a task), and having rel=\"stylesheet\" defer to the concept-link-obtain algorithm (for generic loading), but then run its own specific post-obtain steps, which fires events, creates/adds the sheet, and decrements the counter","msgtype":"m.text"},"ts":1545431809000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Alternatively I'm OK with an entirely separate loading algorithm too, however it just seems the biggest difference will be in the steps after the resource is obtained (hence the sketchy \"an optional styleSheet\", in my PR)","msgtype":"m.text"},"ts":1545431937000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"That makes sense as a general direction. Specifically, what structure were you thinking? One idea would be to have \"obtain the resource\" and \"post-obtain steps\" both be algorithms with default definitions, where the default \"obtain the resource\" calls the (polymorphic) \"post-obtain steps\". Then rel=\"stylesheet\" only overrides \"post-obtain steps\".","msgtype":"m.text"},"ts":1545432027000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(Whereas rel=\"modulepreload\" overrides \"obtain the resource\", so it reuses none of the shared infrastructure.)","msgtype":"m.text"},"ts":1545432064000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'm writing something up real quick...","msgtype":"m.text"},"ts":1545432460000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That's quite close to what I was thinking. I am also writing up something lol","msgtype":"m.text"},"ts":1545432712000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: https://gist.github.com/domenic/8758cd7b8feeb8034996b9f13090dc34","msgtype":"m.text"},"ts":1545433111000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(refresh, some Markdown errors)","msgtype":"m.text"},"ts":1545433202000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(refresh, added handling of content type)","msgtype":"m.text"},"ts":1545433301000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ok at first glance it seems pretty similar in concept to what I did: https://docs.google.com/document/d/15plRAvijIkk4ZIcXR2_VI8Ut7lQsSOjCZnlSQOcoJzk/edit?usp=sharing, btw I used a \"drawing\" because I thought I was going to have more arrows lol","msgtype":"m.text"},"ts":1545433323000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Everything in bold is a dfn. Will check out the gist in more detail now","msgtype":"m.text"},"ts":1545433353000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Ah yeah pretty similar. I guess the main difference is I went away from having everyone define their own \"obtain the resource\" if they don't have to.","msgtype":"m.text"},"ts":1545433422000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(even though that's what I advised you to do earlier ;) )","msgtype":"m.text"},"ts":1545433432000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Haha right. I'm fine with either, though I tend to lean towards more <dfn>s when possible.","msgtype":"m.text"},"ts":1545433637000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Cool, I think I can take what we came up with and run with it","msgtype":"m.text"},"ts":1545433658000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1545433662000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'm probably signing off for the night, and not working next week, but I'll still be around if there's any specific questions or thoughts you have","msgtype":"m.text"},"ts":1545433700000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Thanks for taking this on; it's a big mess but I see the light. Really appreciated.","msgtype":"m.text"},"ts":1545433717000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Sure, yeah we'll see when/if time permits and all. Thanks for the help and insight! Equally appreciated","msgtype":"m.text"},"ts":1545433756000,"senderName":"domfarolino","senderId":"domfarolino@irc"}
]