[
{"content":{"body":"SimonSapin: Hmm, so you're still single dispatch (on the first arg)? I got the impression that, say, From::from could be written to convert to many types, and the right one would get chosen based on what it gets stored into.  (I know you can write multiple versions of the function for different *source* types, by just defining the method in each source","msgtype":"m.text"},"ts":1438475065000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"type.)","msgtype":"m.text"},"ts":1438475065000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: well window and self and frames are getters which is a bit weird","msgtype":"m.text"},"ts":1438485437000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: that is a good enough reason to duplicate? Hmm... Was changing self considered?","msgtype":"m.text"},"ts":1438490481000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: I assume you'd be onboard with bumping SVG to SVG2 on http://platform.html5.org ?","msgtype":"m.text"},"ts":1438494157000,"senderName":"cvrebert","senderId":"cvrebert@irc"},
{"content":{"body":"botie, tell cvrebert no, the SVG reference is one thing that should not be updated.","msgtype":"m.text"},"ts":1438498301000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"will do","msgtype":"m.text"},"ts":1438498302000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"TabAtkins: hum, right. Trait implementations are multi-dispatch","msgtype":"m.text"},"ts":1438498372000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"oh lordy the SVG2 spec lists 10+ editors","msgtype":"m.text"},"ts":1438498587000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think we could probably right a script that uses a very simple set of heuristics to decide whether a particular spec is likely a bad spec","msgtype":"m.text"},"ts":1438498676000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: So yeah, it’s a form of overloading, just not the same as C++. (This might off-topic here, feel free to join #rust on Mozilla IRC… or one of these http://edunham.net/2015/07/31/how_many_rust_channels_are_there.html)","msgtype":"m.text"},"ts":1438499194000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"When parsing HTML from bytes, is there a way around keeping unbounded amount of input in memory in case the parser decides to \"change the encoding\"?","msgtype":"m.text"},"ts":1438514625000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: I thought the spec defined some limit on that","msgtype":"m.text"},"ts":1438520603000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"like, the first 512 bytes","msgtype":"m.text"},"ts":1438520612000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: that’s \" prescan a byte stream to determine its encoding\"","msgtype":"m.text"},"ts":1438520637000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1438520664000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"there is also \"change the encoding\" invoked by the tree builder","msgtype":"m.text"},"ts":1438520689000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"https://html.spec.whatwg.org/multipage/#parsing-main-inhead:change-the-encoding","msgtype":"m.text"},"ts":1438520712000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"What specifically is the concept called when elements like <p> don't require an end tag/is closed by the subsequent element?","msgtype":"m.text"},"ts":1438546427000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"implied end tag?","msgtype":"m.text"},"ts":1438547888000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"JoWie: Yes, thank you (-:","msgtype":"m.text"},"ts":1438549345000,"senderName":"ato","senderId":"ato@irc"}
]