[
{"content":{"body":"dbaron: XML 1.0 5th Ed seems an even better example than 1.1, though obvious enough I presume you've already mentioned it :)","msgtype":"m.text"},"ts":1389140751000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"1.1 is an example of versioning done wrongly, 1.0 e5 is an example of it done right(ish)","msgtype":"m.text"},"ts":1389140776000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"agrees with Hixie there","msgtype":"m.emote"},"ts":1389140788000,"senderName":"dbaron","senderId":"dbaron@irc"},
{"content":{"body":"(ish because e.g. it still has a version pseudo-attribute, and still uses the TR/ page model, and...)","msgtype":"m.text"},"ts":1389140807000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"But XML 1.0 is still de-facto 4e, with no evidence of that changing.","msgtype":"m.text"},"ts":1389141298000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Given nobody wants to rely on 5e being supported.","msgtype":"m.text"},"ts":1389141309000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"oh what's teh difference between 4e and 5e?","msgtype":"m.text"},"ts":1389141631000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk-cloud: The way the Encoding Standard uses the term \"fallback encoding\" and the way you call the algorithm is somewhat confusing.  It would be clearer if there was a hook for \"needs a fallback encoding\" which tests if the document has a BOM or not, and then the encoding algo calls its argument just \"encoding\".","msgtype":"m.text"},"ts":1389143396000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It seems to confuse people a lot if a spec goes through a lot of steps to determine an encoding, makes no mention of BOM, and then at the end BOM gets to override all the work the spec did anyway.","msgtype":"m.text"},"ts":1389143431000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oh, hm, here's how I'd like to write it:","msgtype":"m.text"},"ts":1389143522000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"If the input stream /has a detectable encoding/, let /encoding/ be the result of /detecting the encoding/.  Otherwise, let /encoding/ be ....  /Decode the input stream/ with /encoding/.\"","msgtype":"m.text"},"ts":1389143603000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That reads well, but has the exact same effect.","msgtype":"m.text"},"ts":1389143619000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: what's ICB mean?","msgtype":"m.text"},"ts":1389148756000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"initial containing block","msgtype":"m.text"},"ts":1389149455000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1389149591000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: do you know what current CSS spec defines the equivalent of http://www.w3.org/TR/CSS2/visuren.html ?","msgtype":"m.text"},"ts":1389149751000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"isn't that it?","msgtype":"m.text"},"ts":1389149894000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Is it? I was thinking their must be some CSS3 version. Or some Level N version, whatever numbering thing they using now","msgtype":"m.text"},"ts":1389149968000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"dunno, i'm not up to date on css stuff :-(","msgtype":"m.text"},"ts":1389149979000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"OK I'll keep looking","msgtype":"m.text"},"ts":1389149996000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: btw there's going to be a temporary outage of the http://dev.w3.org/csswg/ tree at some point soon, because that's being written to http://w3c-test.org/csswg/ and I'm going to be shutting down Apache on on port 80 there so we can run the w-p-t python server instead. I'm moving Apache to a different port and will update the rewrite after I do that.","msgtype":"m.text"},"ts":1389150193000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"OK I see from http://dev.w3.org/csswg/cssom-view/ that \"Viewport and initial containing block are defined by CSS 2.1.\"","msgtype":"m.text"},"ts":1389150516000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I believe http://dev.w3.org/csswg/css-box/ is the intended update, but it isn't near ready yet","msgtype":"m.text"},"ts":1389150698000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"astearns: OK thanks","msgtype":"m.text"},"ts":1389150719000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"files a bug against the CSS 2.1 Rec","msgtype":"m.emote"},"ts":1389151952000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"win 17","msgtype":"m.text"},"ts":1389151957000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"oofs","msgtype":"m.text"},"ts":1389151961000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hah https://twitter.com/JeniT/status/420638634610798592 \"Web components + JS undermine the essential important feature of the web, that browser is not the only client\" retweeted by \"SEO Market Place\"","msgtype":"m.text"},"ts":1389152399000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I love the web","msgtype":"m.text"},"ts":1389152405000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"oops not that one but \"\"The only people who build for a search engine rather than a browser are spammers.\"","msgtype":"m.text"},"ts":1389152445000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"wait what","msgtype":"m.text"},"ts":1389152735000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"aren't those two mutually exclusive","msgtype":"m.text"},"ts":1389152741000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(and both wrong...)","msgtype":"m.text"},"ts":1389152763000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1389152937000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hmm http://html5.org/tools/web-apps-tracker?from=8383&to=8384 validator support","msgtype":"m.text"},"ts":1389156964000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hsivonen: http://bugzilla.validator.nu/ is still requiring me to log back in on every page load; I have the IP-address checkbox thing unchecked and not getting any kind of error","msgtype":"m.text"},"ts":1389157543000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hsivonen: hmm it seems it has two Bugzilla_logincookie cookies set and two Bugzilla_login cookies set","msgtype":"m.text"},"ts":1389157713000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"with one of each being what seems to be a stale cookie from a month ago","msgtype":"m.text"},"ts":1389157739000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"tries removing the cookies and re-logging-in","msgtype":"m.emote"},"ts":1389157754000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hsivonen: removing the old cookies seems to have fixed it","msgtype":"m.text"},"ts":1389157964000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hixie: there's no spec prohibition against a UA storing two cookies with exactly the same name?","msgtype":"m.text"},"ts":1389158005000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"not my spec, but, i would imagine it's keyed by name?","msgtype":"m.text"},"ts":1389158212000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"surely if you set a cookie with name X to a value, and it already has one, it just updates the name","msgtype":"m.text"},"ts":1389158226000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1389158229000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"updates the value","msgtype":"m.text"},"ts":1389158229000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: that's what I would have thought too but Firefox and Chrome are both storing cookies with duplicate names for bugzilla.validator.nu cookies","msgtype":"m.text"},"ts":1389159067000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://gist.github.com/sideshowbarker/8284404/raw/93e7508cb1393fee66fb0ed098f8f97b626d6086/vnu-ff.png","msgtype":"m.text"},"ts":1389159070000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://gist.github.com/sideshowbarker/8284404/raw/d37f460a2b63057307a1dcbe3c006c7c2bef7b86/vnu.png","msgtype":"m.text"},"ts":1389159086000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"check the paths","msgtype":"m.text"},"ts":1389159089000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1389159095000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"i bet they'll be different","msgtype":"m.text"},"ts":1389159101000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1389159150000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"though not the path actually but the domain","msgtype":"m.text"},"ts":1389159168000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"weird","msgtype":"m.text"},"ts":1389159170000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"huh","msgtype":"m.text"},"ts":1389159178000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"domain is \".bugzilla.validator.nu\"","msgtype":"m.text"},"ts":1389159193000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that is, with a leading dot, for some reason","msgtype":"m.text"},"ts":1389159208000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"weird","msgtype":"m.text"},"ts":1389159241000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sounds like a bug in bugzilla","msgtype":"m.text"},"ts":1389159244000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah must  be","msgtype":"m.text"},"ts":1389159261000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: good that there was a solution to the login problem","msgtype":"m.text"},"ts":1389163332000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"(I really should put bugzilla behind https, since it has login...)","msgtype":"m.text"},"ts":1389163350000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: that'd be cool but not a big priority I guess","msgtype":"m.text"},"ts":1389163442000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I just found out this exists: http://www.youtube.com/watch?v=DNCpBwJOadw","msgtype":"m.text"},"ts":1389171954000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smola: the host lowercasing thing is interesting","msgtype":"m.text"},"ts":1389173515000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: it's not really clear to me how your sentence would replace the current wording","msgtype":"m.text"},"ts":1389176537000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: maybe file a bug?","msgtype":"m.text"},"ts":1389176541000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yep","msgtype":"m.text"},"ts":1389176778000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"smola: I outlined a strategy in the bug that I think is correct","msgtype":"m.text"},"ts":1389176816000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"in my implementation I just added the lowercasing to domainToASCII, but it's quite different since that's private API for me and I'm not concerned with JavaScript API","msgtype":"m.text"},"ts":1389176819000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"smola: yeah, I think it should become a private API in the specification too","msgtype":"m.text"},"ts":1389176850000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smola: and you only ever get there through the host parser","msgtype":"m.text"},"ts":1389176861000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1389176874000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"also, I'm not sure ToUnicode needs this","msgtype":"m.text"},"ts":1389176883000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"probably not, I think ToASCII always happens","msgtype":"m.text"},"ts":1389176913000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"because if ToASCII fails there's no host, and ToUnicode cannot fail","msgtype":"m.text"},"ts":1389176928000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that's definitely the case in my implementation","msgtype":"m.text"},"ts":1389176956000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"so yeah, maybe ToASCII is a better place","msgtype":"m.text"},"ts":1389176974000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I have yet to check if there're any strange behaviour with locale-dependent case mappings","msgtype":"m.text"},"ts":1389177189000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"these things are well-known to break on conversion to upper case on the Turkish dotted/dotless i, I'll check if the same can happen in to lower case, and what are we supposed to do on IDN using these characters","msgtype":"m.text"},"ts":1389177307000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"annevk: hm, an option is to perform the lowercasing *after* the ToASCII","msgtype":"m.text"},"ts":1389177759000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"My idea was to perform ASCII lowercase btw","msgtype":"m.text"},"ts":1389177793000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"which should be saf","msgtype":"m.text"},"ts":1389177799000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"e","msgtype":"m.text"},"ts":1389177799000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ToASCII seems to be lowercasing except when the original string is completely ASCII)","msgtype":"m.text"},"ts":1389177800000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"Yeah, another thing would be to completely inline the IDNA business","msgtype":"m.text"},"ts":1389177839000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But I don't really like that","msgtype":"m.text"},"ts":1389177846000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The other thing with space probably requires research as to what ASCII browsers reject there and what they accept","msgtype":"m.text"},"ts":1389177873000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The host parser could just reject if there's a space, we don't want to reject for _ however","msgtype":"m.text"},"ts":1389177892000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"right, _ is actually used; I've spent some time trying to look for a single real use case for a host with a space and I haven't found any so far","msgtype":"m.text"},"ts":1389177945000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"btw, how do you these these things on each browser?","msgtype":"m.text"},"ts":1389178043000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"do you enter the URL in the address bar? use any JS function?","msgtype":"m.text"},"ts":1389178081000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"some kind of automation would allow to use a service like Sauce Labs and test on every browser/version quickly","msgtype":"m.text"},"ts":1389178200000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"smola: about your parser I really like that you already have the mechanism in there for actually reporting the parse errors","msgtype":"m.text"},"ts":1389178302000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"smola: https://github.com/w3c/web-platform-tests/tree/master/url","msgtype":"m.text"},"ts":1389178360000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"smola: I hope eventually we can replace the URL checker in the validator.nu backend with your code","msgtype":"m.text"},"ts":1389178390000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: btw about the webkit-dev thread I meant the comments from Antti and a copule others who were critical, and TabAtkins responses","msgtype":"m.text"},"ts":1389178541000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: k","msgtype":"m.text"},"ts":1389178684000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i wonder what the critics think of new picture","msgtype":"m.text"},"ts":1389178715000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: thank you :)","msgtype":"m.text"},"ts":1389178816000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"smola: I wrote tests, I also have http://dump.testsuite.org/url/inspect.html","msgtype":"m.text"},"ts":1389178824000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smola: and I have access to IE, Safari, Chrome, and Firefox","msgtype":"m.text"},"ts":1389178842000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: I still have a lot of work to do on providing meaningful error messages, a lot of them are still just \"PARSE ERROR\"","msgtype":"m.text"},"ts":1389178889000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"smola: I end up mostly doing adhoc tests and adjusting as I go","msgtype":"m.text"},"ts":1389178902000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: it would be great to see it working on validator.nu, if you have any doubt/request just tell me here/GitHub/santi⊙mi ;)","msgtype":"m.text"},"ts":1389178945000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"annevk: alright","msgtype":"m.text"},"ts":1389178962000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"smola: as far as useful error messages for parse errors, looking through how hsivonen handled them for HTML parsing in http://hg.mozilla.org/projects/htmlparser/file/tip/src/nu/validator/htmlparser/impl might provide some inspiration","msgtype":"m.text"},"ts":1389179168000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"smola: http://hg.mozilla.org/projects/htmlparser/file/tip/src/nu/validator/htmlparser/impl/ErrorReportingTokenizer.java mainly","msgtype":"m.text"},"ts":1389179497000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: great, I'll check that","msgtype":"m.text"},"ts":1389179527000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"smola: once you're around to working on the error reporting more I'd be happy to contribute patches if/when you want them","msgtype":"m.text"},"ts":1389179988000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: are you going to use his parser so Validator.nu validates URLs?","msgtype":"m.text"},"ts":1389180218000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: thanks!","msgtype":"m.text"},"ts":1389180376000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"annevk: yeah that's the plan","msgtype":"m.text"},"ts":1389180413000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Great!","msgtype":"m.text"},"ts":1389180424000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: we're already validating URLs but we're using the Jena URI library","msgtype":"m.text"},"ts":1389180444000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"which follows the legacy RFCs but not of course the current URL standard","msgtype":"m.text"},"ts":1389180521000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the Jena URI code is pretty old (and unmaintained now )","msgtype":"m.text"},"ts":1389180572000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and to be clear the plan for replacing it depends on hsivonen OKing it","msgtype":"m.text"},"ts":1389180634000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it seems most Java stuff is stuck at RFC 2396","msgtype":"m.text"},"ts":1389181295000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"and lacks support for IDN","msgtype":"m.text"},"ts":1389181324000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1389181769000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: any conclusion yet about utf-8 vs doc encoding for urls?","msgtype":"m.text"},"ts":1389184875000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1389185018000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: it's not entirely clear to me how to make a good decision here","msgtype":"m.text"},"ts":1389188131000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: I remember last time my final argument was that having to keep the document's encoding around in order how to know how to resolve a URL was bad news","msgtype":"m.text"},"ts":1389188170000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: so I think I would still prefer to use utf-8 whenever possible so having to keep that around is limited to a couple of things in HTML","msgtype":"m.text"},"ts":1389188204000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: e.g. requiring it for EventSource seems painful, as EventSource would otherwise not need it, same for XMLHttpRequest","msgtype":"m.text"},"ts":1389188241000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: but don't you need to keep it around anyway?","msgtype":"m.text"},"ts":1389188302000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: not in e.g. Workers","msgtype":"m.text"},"ts":1389188337000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: right, but outside workers","msgtype":"m.text"},"ts":1389188395000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: so you want to complicate the API implementation because of document environments it might be used in?","msgtype":"m.text"},"ts":1389188429000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: it seems better if the API implementation doesn't need that at all","msgtype":"m.text"},"ts":1389188447000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"er, no, i'm just saying that you need to store the document's encoding so it's not a big win that EventSource avoids using it","msgtype":"m.text"},"ts":1389188538000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"it's not clear to me that it complicates the impl since browsers seem to have used the document's encoding by accident in some places","msgtype":"m.text"},"ts":1389188597000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"as for CSS, it also needs to store its encoding because @import can use it as fallback encoding","msgtype":"m.text"},"ts":1389188683000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Here it's 2014 and we're still speccing <frame>","msgtype":"m.text"},"ts":1389190293000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1389190304000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"Ms2ger: tests coming up?","msgtype":"m.text"},"ts":1389192884000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"for <frame>","msgtype":"m.text"},"ts":1389192897000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Not from me","msgtype":"m.text"},"ts":1389192901000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"aww","msgtype":"m.text"},"ts":1389192912000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"poor frame","msgtype":"m.text"},"ts":1389192917000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Maybe if you come and take my exam tomorrow? :)","msgtype":"m.text"},"ts":1389192936000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"i don't think you'd actually want me to","msgtype":"m.text"},"ts":1389193002000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I'm not sure I'd want myself to either :)","msgtype":"m.text"},"ts":1389193039000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Anyway","msgtype":"m.text"},"ts":1389193042000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"revises","msgtype":"m.emote"},"ts":1389193045000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"so, <embed> vs. <object> w.r.t. flash","msgtype":"m.text"},"ts":1389193106000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"what is the recommended way, forgetting IEs and so on?","msgtype":"m.text"},"ts":1389193122000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"\"don't use flash\"","msgtype":"m.text"},"ts":1389193167000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yeah, well, this option is a no-go apparently","msgtype":"m.text"},"ts":1389193325000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"judging from the percentage of my users that do not support a webgl-based solution","msgtype":"m.text"},"ts":1389193342000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"zcorpan: it complicates the impl of EventSource","msgtype":"m.text"},"ts":1389193927000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ondras: do you need fallback content?","msgtype":"m.text"},"ts":1389193963000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: unless you're suggesting the URL parser should hook into some global state to figure out if there's an override encoding in scope...","msgtype":"m.text"},"ts":1389193976000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"which seems like poor design","msgtype":"m.text"},"ts":1389194012000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah i agree that it complicates the impl of EventSource, at least in theory","msgtype":"m.text"},"ts":1389194048000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: but it seems marginal","msgtype":"m.text"},"ts":1389194064000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"it seems better if EventSource works the same across realms","msgtype":"m.text"},"ts":1389194088000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hah, did you see that? I'm arguing for consistency!","msgtype":"m.text"},"ts":1389194106000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: no","msgtype":"m.text"},"ts":1389194114000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"zcorpan: I actually want to build that DOM via JS (createElement etc)","msgtype":"m.text"},"ts":1389194126000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: do you need it to be secure in case the linked content isn't actually flash?","msgtype":"m.text"},"ts":1389194173000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: yeah so it's either consistent with EventSource in different places or it's consistent with <a href> in the same doc","msgtype":"m.text"},"ts":1389194249000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: no, I host/author that content myself","msgtype":"m.text"},"ts":1389194380000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: then embed is probably simplest and most compatible","msgtype":"m.text"},"ts":1389194396000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: if you have a URL you're going to use for EventSource, it seems better if it's consistent across EventSource","msgtype":"m.text"},"ts":1389194437000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: and some differences beweetn embed and object, so I can see why to pick one and not the other?","msgtype":"m.text"},"ts":1389194447000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"MikeSmith, so, did that monk actually work for MPAA?","msgtype":"m.text"},"ts":1389194453000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"zcorpan: the problem with <a> is that it's not even consistent with <a> in a nested browsing context","msgtype":"m.text"},"ts":1389194479000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ondras: embed doesn't support fallback content, object does. object has an attribute called typemustmatch that protects against attacks where the linked content is of an unexpected type. embed is terser/easier to set params. embed has better interop i think","msgtype":"m.text"},"ts":1389194619000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"okay, thanks a lot!","msgtype":"m.text"},"ts":1389194661000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"np","msgtype":"m.text"},"ts":1389194712000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: i don't follow why that is a problem with <a>","msgtype":"m.text"},"ts":1389194829000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: I have a URL, I hand it to Google Maps or some such, and now it's a different URL","msgtype":"m.text"},"ts":1389194879000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: if I'm not careful anyway","msgtype":"m.text"},"ts":1389194889000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok, yeah","msgtype":"m.text"},"ts":1389195007000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"time for coffee. see you :-)","msgtype":"m.text"},"ts":1389195108000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Is there any actually good list of problems with relying on reference implementations anywhere, or am I going to have to ad lib this?","msgtype":"m.text"},"ts":1389195562000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Write it, publish it","msgtype":"m.text"},"ts":1389195875000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Is a reference implementation actually more likely to have bugs than a spec?","msgtype":"m.text"},"ts":1389196255000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Well usually people don't bother to finish it","msgtype":"m.text"},"ts":1389196323000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Do people usually finish specs? :)","msgtype":"m.text"},"ts":1389196347000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"But I would imagine the need to run on a real machine makes bugs more likely","msgtype":"m.text"},"ts":1389196357000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I know I am bad at that, at least :)","msgtype":"m.text"},"ts":1389196359000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"https://gist.github.com/gsnedders/7e85c83e697e81c69432","msgtype":"m.text"},"ts":1389196534000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Comments, suggested other reasons why they suck, all welcome.","msgtype":"m.text"},"ts":1389196591000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"So from my experience reverse engineering features and writing down their details it's awesome to have an implementation","msgtype":"m.text"},"ts":1389196810000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So I disagree with point 3","msgtype":"m.text"},"ts":1389196823000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Is it better than having a spec with multiple independent impls, though?","msgtype":"m.text"},"ts":1389196859000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"And why does that have to be a reference impl?","msgtype":"m.text"},"ts":1389196878000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Huh? Given that you have to create an implementation you would rather have an existing implementation than an existing spec (but no implementation)?","msgtype":"m.text"},"ts":1389196887000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I can't even parse what jgraham just said.","msgtype":"m.text"},"ts":1389196924000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: I don't really care about what kind of implementation it is","msgtype":"m.text"},"ts":1389196941000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: html5lib was useful, some people labeled it reference, perhaps incorrectly","msgtype":"m.text"},"ts":1389196959000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: and the more the merrier, of course :-)","msgtype":"m.text"},"ts":1389196972000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: It's not normative in any sense.","msgtype":"m.text"},"ts":1389196974000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: a reference implementation is normative?","msgtype":"m.text"},"ts":1389196985000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: ew","msgtype":"m.text"},"ts":1389196988000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: are there even people arguing in favor of that?","msgtype":"m.text"},"ts":1389196997000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yes.","msgtype":"m.text"},"ts":1389197002000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"...","msgtype":"m.text"},"ts":1389197007000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"It was useful, but given we wanted to create it I would have preferred to have the spec than, say, hsivonen's implementation to work from","msgtype":"m.text"},"ts":1389197008000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: I'd consider a \"reference implementation\" normative by definition.","msgtype":"m.text"},"ts":1389197022000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I'm just saying I like to have a spec and an impl","msgtype":"m.text"},"ts":1389197053000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Not either alone","msgtype":"m.text"},"ts":1389197058000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm arguing the W3C's requirement of having two independent impls is better than having a single reference impl.","msgtype":"m.text"},"ts":1389197123000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Yay, someone making arguments for <rtc> on www-style","msgtype":"m.text"},"ts":1389197138000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Essentially.","msgtype":"m.text"},"ts":1389197138000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"The other person in that argument is insane","msgtype":"m.text"},"ts":1389197145000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"insane\" but still","msgtype":"m.text"},"ts":1389197161000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Eh, so am I, so that doesn't say much ;)","msgtype":"m.text"},"ts":1389197166000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: why not? ;)","msgtype":"m.text"},"ts":1389197182000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1389197182000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Ms2ger: where? I'm seeing an argument for <rbc> for not for <rtc>","msgtype":"m.text"},"ts":1389197455000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"no one is adding <rbc> :)","msgtype":"m.text"},"ts":1389197472000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"For double-sided ruby, I think not <rbc>, but <rtc> is necessary, as","msgtype":"m.text"},"ts":1389197519000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"follows.","msgtype":"m.text"},"ts":1389197520000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"<ruby>Base<rtc>text A</rtc><rtc>text B</rtc></ruby>","msgtype":"m.text"},"ts":1389197520000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"https://gist.github.com/gsnedders/7e85c83e697e81c69432 — anything else I ought add before publishing it?","msgtype":"m.text"},"ts":1389198242000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: \"different implementations likely have to interoperate\" is true with a reference implementation as well. What about \"each implementation has to match the spec\"","msgtype":"m.text"},"ts":1389199734000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"Ms2ger: dunno who that monk worked for. All we did was talk about smoke. I showed him how to make a pipe out of a coke can, which he thought was pretty cool","msgtype":"m.text"},"ts":1389200054000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"gsnedders: I would say your second point is equivalent to a ambiguous wording on a spec ;)","msgtype":"m.text"},"ts":1389200058000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"(i.e. specs can contain bugs too)","msgtype":"m.text"},"ts":1389200075000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"astearns: There is definitely the point that a reference implementation can easily become the only implementation, so they don't necessarily have to interoperate.","msgtype":"m.text"},"ts":1389200094000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"smola: Yeah, I was trying to pick something where if it occured in a spec it would just have totally undefined behaviour. Which null pointer dereferences are, really.","msgtype":"m.text"},"ts":1389200131000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: fair enough","msgtype":"m.text"},"ts":1389200149000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"gsnedders: even if there's only one implementation, you get better review of that one implementation by expecting it to conform to an external spec","msgtype":"m.text"},"ts":1389200208000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"astearns: Yeah, I'm not questioning that","msgtype":"m.text"},"ts":1389200224000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"astearns: Just trying to justify the point I was trying to make :)","msgtype":"m.text"},"ts":1389200235000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"astearns: Better put now?","msgtype":"m.text"},"ts":1389200514000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: yep","msgtype":"m.text"},"ts":1389200562000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"On the other hand, I still feel like the conclusion has the obvious come back of, \"but a reference impleemntation defines formally all behaviours, and hence the spec cannot have ambiguity\".","msgtype":"m.text"},"ts":1389200607000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"\"defines formally all bugs that I wrote because I am a fallible human\"","msgtype":"m.text"},"ts":1389200855000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: *rewrites as the generic \"author\" and steals that*","msgtype":"m.text"},"ts":1389200954000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"TabAtkins: Comments on the conclusion now written based on that welcome :)","msgtype":"m.text"},"ts":1389201201000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"MikeSmith: there you go: https://github.com/smola/galimatias/commit/6266c09c2ffe2961b4947554f6c38b33dad015ae","msgtype":"m.text"},"ts":1389202894000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"everything has an actual meaningful error now","msgtype":"m.text"},"ts":1389202913000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"looks","msgtype":"m.emote"},"ts":1389203138000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"wow man","msgtype":"m.text"},"ts":1389203173000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"you work fast :-)","msgtype":"m.text"},"ts":1389203184000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"very nice","msgtype":"m.text"},"ts":1389203188000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"smola: I will try to get this integrated in local validator workspace soon, as a replacement for the Jena URI checker we're using now","msgtype":"m.text"},"ts":1389203290000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"*in my local validator workspace","msgtype":"m.text"},"ts":1389203305000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: thanks! please, let me know if I can help","msgtype":"m.text"},"ts":1389203435000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"btw, you'll need that latest SNAPSHOT: https://oss.sonatype.org/content/repositories/snapshots/io/mola/galimatias/galimatias/0.0.2-SNAPSHOT/","msgtype":"m.text"},"ts":1389203480000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"smola: OK will do","msgtype":"m.text"},"ts":1389204017000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"gsnedders: I like the conclusion.","msgtype":"m.text"},"ts":1389204155000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ponders how best to make a list of all events mentioned in the HTML spec","msgtype":"m.emote"},"ts":1389208525000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"In a similar vein, does anyone have a good technique for registering a simple listener (just a logger) for all possible events?","msgtype":"m.text"},"ts":1389208669000,"senderName":"jory","senderId":"jory@irc"},
{"content":{"body":"(i.e. just to get a better sense, while debugging, of the interactions between a series of events)","msgtype":"m.text"},"ts":1389208692000,"senderName":"jory","senderId":"jory@irc"},
{"content":{"body":"No way to do that from a web page","msgtype":"m.text"},"ts":1389208725000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Fx has an API for chrome scripts iirc","msgtype":"m.text"},"ts":1389208773000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Does anyone know if Mobile Safari fires any particular event when it is changing the zoom level, or if there is a way to force a zoom to happen?","msgtype":"m.text"},"ts":1389209553000,"senderName":"jory","senderId":"jory@irc"},
{"content":{"body":"Hixie: Mark them all up in a Bikeshed/Shepherd-compatible way, and we can auto-gen one for you.","msgtype":"m.text"},"ts":1389211398000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: it's the marking them up part that's the part i'm hoping to automagicate","msgtype":"m.text"},"ts":1389212541000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: once i have it in a computer-readable form, the rest is easy :-)","msgtype":"m.text"},"ts":1389212550000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Right, but if you do it *my* way, then it's easy for *me* as well.","msgtype":"m.text"},"ts":1389212562000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Because I can just say <a event>activate</a> or whatever and it works.","msgtype":"m.text"},"ts":1389212578000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i'm not sure we're trying to solve the same problem here","msgtype":"m.text"},"ts":1389212593000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the cross-referencing is already all done","msgtype":"m.text"},"ts":1389212604000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I'm trying to solve a problem vaguely related to yours that helps me more.","msgtype":"m.text"},"ts":1389212605000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hehe","msgtype":"m.text"},"ts":1389212609000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what's the problem you're trying to solve?","msgtype":"m.text"},"ts":1389212617000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"briefly ponders whether there might be some value in having a single document that documents all the events of the web platform, but puts the bong down just in time","msgtype":"m.emote"},"ts":1389212640000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"MOAR LINK TARGETS IN A BIKESHEDDABLE FORM","msgtype":"m.text"},"ts":1389212658000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oh so you could cross-reference from CSS to HTML?","msgtype":"m.text"},"ts":1389212676000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(Which means, mainly, that Shepherd can parse them and know what the definition type is.)","msgtype":"m.text"},"ts":1389212681000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Bikeshed is for more than CSS!","msgtype":"m.text"},"ts":1389212687000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But yes.","msgtype":"m.text"},"ts":1389212688000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"what's the format you need me to expose for that to be easy for you?","msgtype":"m.text"},"ts":1389212700000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"maybe i can do that at the same time","msgtype":"m.text"},"ts":1389212719000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(is there documentation somewhere for bikeshed and shepherd?)","msgtype":"m.text"},"ts":1389212761000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(source code would do)","msgtype":"m.text"},"ts":1389212764000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"is considering transitioning away from anolis, but mainly because anolis can't handle 5MB+ docs fast","msgtype":"m.emote"},"ts":1389212796000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yeah, docs are all at https://github.com/tabatkins/bikeshed","msgtype":"m.text"},"ts":1389212803000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I don't know if Bikeshed can handle 5MB fast either.  probably not.","msgtype":"m.text"},"ts":1389212814000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I really like your Github avatar.","msgtype":"m.text"},"ts":1389212827000,"senderName":"jory","senderId":"jory@irc"},
{"content":{"body":"But I'd be willing to try.","msgtype":"m.text"},"ts":1389212828000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jory: Thanks!  It's from Kate Beaton.","msgtype":"m.text"},"ts":1389212837000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(ideally i'd like a platform that's identical to anolis except not based on python or other slow ass interpreted languages...)","msgtype":"m.text"},"ts":1389212838000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Welp, I've got you on the first, but not the second.","msgtype":"m.text"},"ts":1389212852000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah, wasn't suggesting bikeshed as  solution","msgtype":"m.text"},"ts":1389212875000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"So, to make things Shepherd-friendly, there are a few ways, depending on how explicit/unambiguous you wanna be.","msgtype":"m.text"},"ts":1389212902000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"really i just need to put my fingers where my mouth is and implement an HTML parser and DOM in some compiled language","msgtype":"m.text"},"ts":1389212910000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"1. Add a data-dfn-type attribute to the <dfn> with one of the definition types: <https://github.com/tabatkins/bikeshed/blob/master/bikeshed/config.py> (the values in the dfnClassToType object).","msgtype":"m.text"},"ts":1389212929000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"2. Make the id start with the dfn class and a dash, from the same link (the keys in the dfnClassToType object).","msgtype":"m.text"},"ts":1389212956000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"3. Give them a class equal to the right dfn class.","msgtype":"m.text"},"ts":1389212962000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Or, if it's a CSS term, just write in the right way, and Shepherd'll infer things (docs explain the right way).","msgtype":"m.text"},"ts":1389212995000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so like <dfn data-dfn-type=\"event\" id=\"event-load\" class=\"event\"><code>load</code></dfn> ?","msgtype":"m.text"},"ts":1389213112000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"id=eventdef-load class=eventdef, but otherwise yes.","msgtype":"m.text"},"ts":1389213135000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But you only have to do one. ^_^","msgtype":"m.text"},"ts":1389213139000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oh those are various options, ok","msgtype":"m.text"},"ts":1389213177000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sorry, thought it was a list of steps","msgtype":"m.text"},"ts":1389213182000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"my bad","msgtype":"m.text"},"ts":1389213183000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Oh jeez, that would be terrible.","msgtype":"m.text"},"ts":1389213188000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah :-)","msgtype":"m.text"},"ts":1389213192000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Nah, it's documentation of all the various ways existing specs we want to parse have done it. ^_^","msgtype":"m.text"},"ts":1389213205000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so i expect HTML will use <dfn data-x=\"event-load\"><code>load</code></dfn> or <dfn data-x=\"event-media-load\"><code>load</code></dfn>, where the \"media-\" part is for grouping related events (e.g. all the media element events), which might duplicate the names of some of the non-grouped events","msgtype":"m.text"},"ts":1389213264000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if you want to add support for that","msgtype":"m.text"},"ts":1389213278000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"When you decide on something, tell me and I'll ping plinss.  He's the one running Shepherd.","msgtype":"m.text"},"ts":1389213303000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So the \"media\" term is arbitrary?","msgtype":"m.text"},"ts":1389213327000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"assume i'm going with the above. it's what everything does now.","msgtype":"m.text"},"ts":1389213330000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1389213334000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(everything in HTML i mean)","msgtype":"m.text"},"ts":1389213337000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"looks like there's media, MediaController, input, appcache, socket, and worker","msgtype":"m.text"},"ts":1389213415000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"currently","msgtype":"m.text"},"ts":1389213416000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"not planning on adding any soon, but they are arbitrarily added as needed.","msgtype":"m.text"},"ts":1389213453000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"basically it's just to prevent events in the worker section cross-referencing to events in the media section, etc.","msgtype":"m.text"},"ts":1389213465000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"That's fine, just making sure they weren't a term that needs to be synced up against something else.","msgtype":"m.text"},"ts":1389213471000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Shepherd's data model supports definitions being \"for\" other definitions, to avoid collisions.","msgtype":"m.text"},"ts":1389213494000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"generally i try to use the same term as in data-x=\"attr-foo-name\" and data-x=\"dom-foo-name\", which is the element name for elements, and the interface name (usually) for IDL stuff","msgtype":"m.text"},"ts":1389213514000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and concept-foo-name for non-concrete things like algorithms","msgtype":"m.text"},"ts":1389213546000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"though when i can i just use longer names so i don't have to give a special cross-ref term at all","msgtype":"m.text"},"ts":1389213563000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yeah, the shepherd way is <dfn data-dfn-type=attr data-dfn-for=foo>name</dfn>  (or in Bikeshed's shorthand, <dfn attr for=foo>name</dfn>)","msgtype":"m.text"},"ts":1389213564000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So the relationship is machine-inferrable.","msgtype":"m.text"},"ts":1389213577000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1389213584000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"The Anolis way of giving everything a globally unique xref name is bad. :/","msgtype":"m.text"},"ts":1389213616000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"*shrug*","msgtype":"m.text"},"ts":1389213655000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it works ok","msgtype":"m.text"},"ts":1389213658000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yeah, while you're the only one working on it, or are willing to pull up the document you want to reference regularly to remind yourself of the naming pattern that spec author used.","msgtype":"m.text"},"ts":1389213687000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"it's acutally helped in a couple of places, by preventing me from naming something in a confusing ambiguous fashion","msgtype":"m.text"},"ts":1389213687000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah it's terrible for cross-doc stuff","msgtype":"m.text"},"ts":1389213713000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"notice the lack of any cross-doc stuff in HTML :-(","msgtype":"m.text"},"ts":1389213715000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yup, and xdoc was the primary reason I started Bikeshed.","msgtype":"m.text"},"ts":1389213740000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"though i think the way i would want to do cross-doc references actually would be to just list the term as i use it and the term as the other spec uses it, in a single \"dependencies\" section","msgtype":"m.text"},"ts":1389213755000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the section actually exists in HTML now, just doesn't have the cross-refs","msgtype":"m.text"},"ts":1389213764000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but if i added them, it would allow for the preprocessor to automatically map from my terms to the other specs' terms","msgtype":"m.text"},"ts":1389213783000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"without my having to keep looking up what the conventions were","msgtype":"m.text"},"ts":1389213790000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"nor having to convert anyone else","msgtype":"m.text"},"ts":1389213798000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"xref works fine in anolis","msgtype":"m.text"},"ts":1389213811000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Also doable in Bikeshed manually, but you haven't lived until you've written ''foo/auto'' and been auto-linked to the definition of the \"auto\" keyword for the \"foo\" property.","msgtype":"m.text"},"ts":1389213813000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"and it would have the advantage of still being usable in print form","msgtype":"m.text"},"ts":1389213813000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Or even better, been informed that you typo'd something, because \"foo\" has no \"auto\" value.","msgtype":"m.text"},"ts":1389213825000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"my HTML publishing pipeline catches broken xrefs","msgtype":"m.text"},"ts":1389213839000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(i don't always notice, but...)","msgtype":"m.text"},"ts":1389213845000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(that's why there's a lot of data-x=\"\" (with no value) -- it's telling my system that this isn't supposed to cross-ref)","msgtype":"m.text"},"ts":1389213874000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Oh yeah, Anolis tries to cross-ref all inlines or something, right?","msgtype":"m.text"},"ts":1389213900000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"not all of them, only the ones that make sense","msgtype":"m.text"},"ts":1389213925000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"anyway. i think i need to pull out all occurences of the string (event-[^\"]+), and somehow check if they're in <dfn> or not, and if they are... not sure what","msgtype":"m.text"},"ts":1389213936000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"maybe just mark those that are, to start with","msgtype":"m.text"},"ts":1389213952000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"little bit of perl should do nicely","msgtype":"m.text"},"ts":1389213952000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"You crazy.","msgtype":"m.text"},"ts":1389213997000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk-cloud: why do you want event timestamps defined in the web perf WG instead of in the dom events spec?","msgtype":"m.text"},"ts":1389217475000,"senderName":"jamesr__","senderId":"jamesr__@irc"},
{"content":{"body":"seems kind of crazy","msgtype":"m.text"},"ts":1389217477000,"senderName":"jamesr__","senderId":"jamesr__@irc"},
{"content":{"body":"jamesr__: I think it was some dependency thing","msgtype":"m.text"},"ts":1389217636000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"there's a typedef DOMHighResTimestamp, but that just means number in webidl","msgtype":"m.text"},"ts":1389217651000,"senderName":"jamesr__","senderId":"jamesr__@irc"},
{"content":{"body":"and the type is in a standalone spec that dom events could easily cite","msgtype":"m.text"},"ts":1389217665000,"senderName":"jamesr__","senderId":"jamesr__@irc"},
{"content":{"body":"doesn't it depend on navigate or fetch or some such?","msgtype":"m.text"},"ts":1389217666000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the IDL is \"typedef double DOMHighResTimeStamp;\"","msgtype":"m.text"},"ts":1389217728000,"senderName":"jamesr__","senderId":"jamesr__@irc"},
{"content":{"body":"the window.performance.now() interface depends on navigation, but you wouldn't need to reference that normatively in dom events","msgtype":"m.text"},"ts":1389217763000,"senderName":"jamesr__","senderId":"jamesr__@irc"},
{"content":{"body":"dom events would need to expose an attribute of that type and then describe the timebase in a way that could be implemented to match up with window.performance.now() / webaudio / whatever else is using this clock","msgtype":"m.text"},"ts":1389217809000,"senderName":"jamesr__","senderId":"jamesr__@irc"},
{"content":{"body":"webaudio's language is probably too loose but it has the same idea","msgtype":"m.text"},"ts":1389217872000,"senderName":"jamesr__","senderId":"jamesr__@irc"},
{"content":{"body":"(i don't really see much value in typedeffing different things to double in WebIDL - the type itself doesn't have any interesting meaning. the value itself does, but the type doesn't help understand the value)","msgtype":"m.text"},"ts":1389218690000,"senderName":"jamesr__","senderId":"jamesr__@irc"},
{"content":{"body":"shakes fist at WebIDL's number-types clusterfuck","msgtype":"m.emote"},"ts":1389219347000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"jamesr__: file a bug?","msgtype":"m.text"},"ts":1389220480000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jamesr__: can take a look tomorrow","msgtype":"m.text"},"ts":1389220486000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: last thread was http://lists.w3.org/Archives/Public/www-dom/2012OctDec/0028.html","msgtype":"m.text"},"ts":1389220745000,"senderName":"jamesr__","senderId":"jamesr__@irc"},
{"content":{"body":"annevk: https://github.com/w3c/web-platform-tests/blob/master/url/urltestdata.txt issues with this should be reported to GitHub Issues or...?","msgtype":"m.text"},"ts":1389220781000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"smola: not sure, ask zcorpan / jgraham","msgtype":"m.text"},"ts":1389220798000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: just in time","msgtype":"m.text"},"ts":1389220812000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"23:39 < smola> annevk:","msgtype":"m.text"},"ts":1389220823000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"https://github.com/w3c/web-platform-tests/blob/master/url/urltestdata.txt issues with this should be reported to GitHub Issues or...?","msgtype":"m.text"},"ts":1389220825000,"senderName":"smola","senderId":"smola@irc"},
{"content":{"body":"what spec is going to define 'scroll' and 'resize' events?","msgtype":"m.text"},"ts":1389223546000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"behold: http://www.whatwg.org/specs/web-apps/current-work/#events-0","msgtype":"m.text"},"ts":1389225304000,"senderName":"Hixie","senderId":"Hixie@irc"}
]