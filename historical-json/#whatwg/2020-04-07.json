[
{"content":{"body":"JakeA: I realized that one thing to remember when beating Apple over the Storage Access API is that the HTTP Clear-Site-Data header is still not properly defined either","msgtype":"m.text"},"ts":1586250375000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: defining Clear-Site-Data properly might actually give us some of the primitives we need to layer a Storage Access API on top that doesn't just do cookies","msgtype":"m.text"},"ts":1586250406000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Fair, but I'm not criticising Apple for not implementing Clear-Site-Data","msgtype":"m.text"},"ts":1586250685000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"The narrative that bugs me is: Chrome is bad for not implementing our API / Ok then how does it work? / Dunno.","msgtype":"m.text"},"ts":1586250725000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"So afaict it only affects cookies and it probably relies on something that's not specified in HTML, namely a document's cookie URL concept","msgtype":"m.text"},"ts":1586250876000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Cookies in general could really use some love","msgtype":"m.text"},"ts":1586250889000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But also, that narrative is something Firefox often gets as well and we end up fixing a lot of the mess Chromies left behind...","msgtype":"m.text"},"ts":1586250950000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Not really sure anyone is without blame here, but as long as we have similarish goals we should be able to figure something out","msgtype":"m.text"},"ts":1586251021000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"There are loads of specs Chrome folks could be doing a better job on, absolutely","msgtype":"m.text"},"ts":1586251469000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I'm definitely not saying Chrome is blameless here","msgtype":"m.text"},"ts":1586251505000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: windows agent","msgtype":"m.text"},"ts":1586269290000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1586269415000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wow bugs in getElementById, that's pretty good","msgtype":"m.text"},"ts":1586270956000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"DocumentFragment though, that's slightly more recent","msgtype":"m.text"},"ts":1586274642000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Fair, added in Oct 2013","msgtype":"m.text"},"ts":1586274742000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Domenic: something came up during the blink side of implementing top-level await around document.write. i want to check my understanding of what ignore-destructive-writes counter is for, and then possibly propose something","msgtype":"m.text"},"ts":1586284950000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"AIUI, that counter is intended so that only inline sync script tags has the legacy behavior of document.write() blowing away everything if there's no explicit document.open()","msgtype":"m.text"},"ts":1586284996000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"now, with TLA, dan's current PR says so long as a promise resulting from a TLA is not settled, that counter is incremented","msgtype":"m.text"},"ts":1586285182000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it turns out this is not great to implement and has a runtime cost to distinguish those promises","msgtype":"m.text"},"ts":1586285213000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the current thinking is can we increment that counter to >0 the first time *any* module script tag is executed","msgtype":"m.text"},"ts":1586285278000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"this is backwards breaking, but only for pages that mixes classic and module scripts, and uses destructive document.write, which i reckon is vanishingly small","msgtype":"m.text"},"ts":1586285316000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: sounds reasonable, not sure why we made it work there to begin with","msgtype":"m.text"},"ts":1586289487000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Bit surprising as I thought module scripts were delayed anyway","msgtype":"m.text"},"ts":1586289607000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"shu: that sounds great, less document.write() in the wild is always a win.","msgtype":"m.text"},"ts":1586290058000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"cool, though i'm still kinda confused about why, today, tasks queued from external classic scripts and modules are allowed to do destructive document.write()s","msgtype":"m.text"},"ts":1586290206000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"tasks queued from external classic scripts doing destructive writes sounds like something the old web would rely on","msgtype":"m.text"},"ts":1586290250000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"`setInterval(() => document.write(i++), 1000)` \"look, babies Netscape 3 counter\"","msgtype":"m.text"},"ts":1586290278000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"right, that's believable","msgtype":"m.text"},"ts":1586290305000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Modules we were probably just trying to make modules more symmetrical with classic scripts","msgtype":"m.text"},"ts":1586290319000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I.e. treat them the same as external classic scripts","msgtype":"m.text"},"ts":1586290333000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and the separation of throw-on-dynamic-markup-insertion and ignore-destructive-writes is specifically that `document.open(); document.write(...); document.close();` is less bad?","msgtype":"m.text"},"ts":1586290346000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Not really. I think that was an instance that was more \"disallow everything we dislike\", so we were more aggressive: throwing instead of ignoring, for example","msgtype":"m.text"},"ts":1586290420000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"We still weren't aggressive enough to just leave the counter forever higher than 0 if you use a custom element, but maybe we should have been","msgtype":"m.text"},"ts":1586290436000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"specifically i'm wondering the motivation for not making external scripts increment throw-on-dynamic-markup-insertion as well. too much reasonable code relying on that?","msgtype":"m.text"},"ts":1586290552000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I think external classic scripts are probably untouchable","msgtype":"m.text"},"ts":1586290679000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But outside that invariant I think we have a good amount of freedom","msgtype":"m.text"},"ts":1586290687000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(Also, I think custom elements are probably widely deployed enough that we could not have them permanently disable document.write and friends.)","msgtype":"m.text"},"ts":1586290716000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i see. well, the proposal from the v8 engineer was to leave ignore-destructive-writes permanently >0 after the first module script tag is executed","msgtype":"m.text"},"ts":1586290732000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"that *does* affect external classic scripts, if a page mixes them","msgtype":"m.text"},"ts":1586290737000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"So for example we could switch all module scripts to permanently incrementing the throw counter, if we liked.","msgtype":"m.text"},"ts":1586290738000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"you think that's fine?","msgtype":"m.text"},"ts":1586290750000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Oh, well, I think that's probably fine, if V8/Chrome is willing to risk it.","msgtype":"m.text"},"ts":1586290761000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"And my judgment aligns with yours that it's probably rare.","msgtype":"m.text"},"ts":1586290771000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"okay, yeah, i think we're willing to risk","msgtype":"m.text"},"ts":1586290788000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Awesome. So yeah I guess my main contribution is that I'd also be happy if you wanted to use the throw-on-dynamic-markup-insertion counter too. More risk, but more reward.","msgtype":"m.text"},"ts":1586290878000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"trying to track down a use counter for document.write... i was hoping we'd have one","msgtype":"m.text"},"ts":1586290925000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"We have document.open() at https://chromestatus.com/metrics/feature/timeline/popularity/2494","msgtype":"m.text"},"ts":1586291012000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I would expect write() to be >= open() but I am not sure","msgtype":"m.text"},"ts":1586291032000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"quite a lot, though it's the intersection with pages that have module scripts that matter","msgtype":"m.text"},"ts":1586291129000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"doubt we have that level of info","msgtype":"m.text"},"ts":1586291144000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Right","msgtype":"m.text"},"ts":1586291194000,"senderName":"Domenic","senderId":"Domenic@irc"}
]