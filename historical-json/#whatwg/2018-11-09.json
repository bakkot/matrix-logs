[
{"content":{"body":"jgraham: did annevk land changes to the tests on that day to change the expectation of how unmappables are escaped in URLs?","msgtype":"m.text"},"ts":1541752198000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"jgraham: it should be fixed on Nighly. This is a case where defaulting to results from release builds is not useful.","msgtype":"m.text"},"ts":1541752283000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: Yeah, foolip happened to be looking at a graph of release builds. I agree it's misleading here","msgtype":"m.text"},"ts":1541755740000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Domenic: I had an idea!","msgtype":"m.text"},"ts":1541758939000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic: For jsdom,","msgtype":"m.text"},"ts":1541758995000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"the Node instance exposed to content could be a proxy around a mostly useless object,","msgtype":"m.text"},"ts":1541759051000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"where the proxy handler is the actual Node impl object, with a 'get' method that just returns the handler itself if passed const impl = Symbol(\"impl\").","msgtype":"m.text"},"ts":1541759082000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"See what I mean?","msgtype":"m.text"},"ts":1541759091000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic: https://jsfiddle.net/2x0rq31j/","msgtype":"m.text"},"ts":1541760067000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"https://jsfiddle.net/2x0rq31j/1/ Ah, you can break it with an additional proxy. :(","msgtype":"m.text"},"ts":1541760945000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"hsivonen: can you look at https://github.com/whatwg/html/issues/3257?","msgtype":"m.text"},"ts":1541768607000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: it seems like the straightforward thing is to avoid proxies and just switch from symbols to weakmaps, no?","msgtype":"m.text"},"ts":1541772400000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I was trying to find a different way that is easier for JITs.","msgtype":"m.text"},"ts":1541772448000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"But yeah the WeakMap solution is correct out of the box. Just slow.","msgtype":"m.text"},"ts":1541772467000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Heh, I've never heard of people saying proxies were easy for JITs...","msgtype":"m.text"},"ts":1541772469000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"True.","msgtype":"m.text"},"ts":1541772476000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"That was an assumption on my part and SM people told me it was wrong. :D","msgtype":"m.text"},"ts":1541772490000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Well, we're getting proper private state soon in the language. Although it won't support \"friend class\" use cases which pretty important for DOM.","msgtype":"m.text"},"ts":1541772502000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh?","msgtype":"m.text"},"ts":1541772515000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Link please? :)","msgtype":"m.text"},"ts":1541772529000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"https://github.com/tc39/proposal-class-fields","msgtype":"m.text"},"ts":1541772538000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: For my pet project I plan to just use the SM-specific slot API.","msgtype":"m.text"},"ts":1541772561000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Yeah, makes sense","msgtype":"m.text"},"ts":1541772575000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh, I remember, there is a hacky way to do friend access","msgtype":"m.text"},"ts":1541772595000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Note that I have yet to write a single line of code anyway. :)","msgtype":"m.text"},"ts":1541772690000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic: Oh btw I wanted to suggest a change for webidl2js, for overloads specifically.","msgtype":"m.text"},"ts":1541772714000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Something like `class X { #y; static getY(x) { return x.#y; } static setY(x, val) { x.#y = val; } }; const { getY, setY } = X; delete X.getY; delete X.setY; /* now give getY and setY to any friend classes */`","msgtype":"m.text"},"ts":1541772717000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I could swear we had an open issue on overloads","msgtype":"m.text"},"ts":1541772740000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I really want to switch them to call impl.foo_1(), impl.foo_2()...","msgtype":"m.text"},"ts":1541772754000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Wouldnâ€™t it be better if it dispatched calls to `nameofthemethod{typenameofthedisambiguatingargument}`?","msgtype":"m.text"},"ts":1541772757000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Yeah same but with a better name.","msgtype":"m.text"},"ts":1541772767000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Yeah it would be way better","msgtype":"m.text"},"ts":1541772776000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That project needs a little bit more love than it currently has","msgtype":"m.text"},"ts":1541772783000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"In Servo we tack n _ for the nth overload and it makes me pretty sad. :D","msgtype":"m.text"},"ts":1541772792000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"TimothyGu did some great work, then got busy with other things","msgtype":"m.text"},"ts":1541772798000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://github.com/jsdom/webidl2js/issues has some pretty good first bugs if you want to dive in ;)","msgtype":"m.text"},"ts":1541772837000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: FYI https://whatpr.org/fetch/831.html#concept-header-list-get-decode-split has some markup messups I guess","msgtype":"m.text"},"ts":1541773987000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Also \"value might be the empty string\" should be temporaryValue, I suppose","msgtype":"m.text"},"ts":1541774021000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess I should really review these things...","msgtype":"m.text"},"ts":1541774031000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Also \"collecting a sequence of code points\" is supposed to take the position variable as an argument","msgtype":"m.text"},"ts":1541774083000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh nevermind, it's there at the end of the sentence","msgtype":"m.text"},"ts":1541774098000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: heh yeah, I was hoping you'd implement this in jsdom, sorry for putting up a somewhat bad PR; I didn't have time to run all the checks and wanted to at least commit this before leaving","msgtype":"m.text"},"ts":1541774256000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Unfortunately we have no fetch implementation, so it's not easy to slot in :)","msgtype":"m.text"},"ts":1541774275000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1541774417000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://stackoverflow.com/questions/53227009/set-a-default-for-feature-policy-http-header","msgtype":"m.text"},"ts":1541774536000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Splitting while caring about quotes though","msgtype":"m.text"},"ts":1541774999000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I feel like there is a missing lib between the webidl parser and webidl2js.","msgtype":"m.text"},"ts":1541775011000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Did not expect the amount of prose I got","msgtype":"m.text"},"ts":1541775015000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: how so?","msgtype":"m.text"},"ts":1541779167000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: One that validates the WebIDL, merges the implemented partial interfaces with the main one, merges overloads together, etc.","msgtype":"m.text"},"ts":1541779295000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"It makes sense that could be separate. Currently it's handled as part of the compilation flow.","msgtype":"m.text"},"ts":1541779459000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk, Domenic: I've just uploaded a summary of the wide gamut changes (https://github.com/whatwg/html/issues/4167)","msgtype":"m.text"},"ts":1541794476000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"Could you help me get some feedback from other browsers? It would unblock the intent to ship on Chrome.","msgtype":"m.text"},"ts":1541794503000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"fserb: one thing I would suggest for that purpose is removing Chrome-specific IDL from your post","msgtype":"m.text"},"ts":1541797058000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: geeez, good point.","msgtype":"m.text"},"ts":1541798735000,"senderName":"fserb","senderId":"fserb@irc"},
{"content":{"body":"done.","msgtype":"m.text"},"ts":1541798775000,"senderName":"fserb","senderId":"fserb@irc"}
]