[
{"content":{"body":"Does anyone know if anything specifies what should happen when the user closes their browser?","msgtype":"m.text"},"ts":1470377666000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"e.g. should unload handlers run","msgtype":"m.text"},"ts":1470377674000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"beacons, <a ping>s etc","msgtype":"m.text"},"ts":1470377683000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: we only vaguely define that for browsing contexts","msgtype":"m.text"},"ts":1470379313000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: lifecycle of documents/windows is terrible though","msgtype":"m.text"},"ts":1470379334000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ask hsivonen about it :)","msgtype":"m.text"},"ts":1470379348000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"will do","msgtype":"m.text"},"ts":1470379348000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"Oops","msgtype":"m.text"},"ts":1470379352000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Domenic: about upload streams, https://www.w3.org/Bugs/Public/show_bug.cgi?id=20322 is relevant","msgtype":"m.text"},"ts":1470379758000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: it seems browsers are widely inconsistent (and XMLHttpRequest is too) about progress event listeners for uploads","msgtype":"m.text"},"ts":1470379779000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: that doesn't really diminish the chunked encoding aspect, but given H2 has different framing perhaps that isn't as much of an issue (although we should still make sure of course)","msgtype":"m.text"},"ts":1470379835000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm hmm","msgtype":"m.text"},"ts":1470379844000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Not really sure what to make of it...","msgtype":"m.text"},"ts":1470379853000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"This HEIST attack makes me feel like I don't understand the constaints anymore :(","msgtype":"m.text"},"ts":1470379884000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The constraints are basically anything that isn't possible using <form>, <a>, <img>, <object>, with some exceptions that we've added over the years","msgtype":"m.text"},"ts":1470379958000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Anyway, happy to help with more specific questions, not sure I can do the whole thing here from first principles","msgtype":"m.text"},"ts":1470380020000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, just unsure how we missed those constraints with fetch (and/or resource timing?)","msgtype":"m.text"},"ts":1470380114000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Well, there's not a whole lot of people that understand the same-origin policy, and it's also rather complicated","msgtype":"m.text"},"ts":1470380205000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"With fetch() the problem was that we added a feature, \"no-cors\", and only thought about protecting the response","msgtype":"m.text"},"ts":1470380235000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But we didn't protect against when we'd reveal there is a response","msgtype":"m.text"},"ts":1470380248000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So that's rather subtle, but it's arguably a problem","msgtype":"m.text"},"ts":1470380258000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"howdy - could I please be invited to the whatwg github org?","msgtype":"m.text"},"ts":1470380266000,"senderName":"constant","senderId":"constant@irc"},
{"content":{"body":"However, if we fix that problem service workers will stream those kind of responses a little slower to the page, potentially delaying the rendering of images and such","msgtype":"m.text"},"ts":1470380299000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"constant: have you contributed in the past or is there a particular reason?","msgtype":"m.text"},"ts":1470380328000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I've contributed in the past","msgtype":"m.text"},"ts":1470380337000,"senderName":"constant","senderId":"constant@irc"},
{"content":{"body":"and will likely contribute more in the future","msgtype":"m.text"},"ts":1470380353000,"senderName":"variable","senderId":"variable@irc"},
{"content":{"body":"sporadically though :)","msgtype":"m.text"},"ts":1470380359000,"senderName":"variable","senderId":"variable@irc"},
{"content":{"body":"variable: are you https://github.com/constant?","msgtype":"m.text"},"ts":1470380367000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"no, I'm 'grimreaper'","msgtype":"m.text"},"ts":1470380374000,"senderName":"variable","senderId":"variable@irc"},
{"content":{"body":"ah okay","msgtype":"m.text"},"ts":1470380386000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"variable: done btw","msgtype":"m.text"},"ts":1470380476000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tyvm","msgtype":"m.text"},"ts":1470380489000,"senderName":"variable","senderId":"variable@irc"},
{"content":{"body":"fancy :)","msgtype":"m.text"},"ts":1470380515000,"senderName":"variable","senderId":"variable@irc"},
{"content":{"body":"I wonder if that person knew membership was not a requirement to post","msgtype":"m.text"},"ts":1470381456000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"They were posting on some threads I think","msgtype":"m.text"},"ts":1470381482000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Probably they just wanted the cool GitHub profile badge?","msgtype":"m.text"},"ts":1470381491000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"We do have the coolest badge","msgtype":"m.text"},"ts":1470381540000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: https://github.com/whatwg/fetch/issues/355 describes this new attack briefly in the third comment","msgtype":"m.text"},"ts":1470384251000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Building Fetch, I'm getting an xref error for \"handle foreign fetch\".","msgtype":"m.text"},"ts":1470385914000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Is there anything I need to do to update xrefs other than just pulling down the repository?","msgtype":"m.text"},"ts":1470385931000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: sorry, committed the latest","msgtype":"m.text"},"ts":1470386453000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: git pull on whatwg/xref should do it","msgtype":"m.text"},"ts":1470386461000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Easy, thanks!","msgtype":"m.text"},"ts":1470386491000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: the @ goes before the name, fwiw","msgtype":"m.text"},"ts":1470387257000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hrm?","msgtype":"m.text"},"ts":1470387586000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: you wrote annevk@ on GitHub","msgtype":"m.text"},"ts":1470387618000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: and tabatkins@","msgtype":"m.text"},"ts":1470387627000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah! I just fixed that. ;)","msgtype":"m.text"},"ts":1470387634000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: thoughts on https://www.w3.org/Bugs/Public/show_bug.cgi?id=20322 by any chance?","msgtype":"m.text"},"ts":1470387671000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I didn't pay much attention to the column width, no. I'll clean that up. I just wanted to see if you would be sad about the patch in general before spending too much time on it.","msgtype":"m.text"},"ts":1470387679000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: we should probably sort out what we do there and what we want to do there and then apply it to streams","msgtype":"m.text"},"ts":1470387693000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: nah that patch looks fine, will make it easier to transition to bikeshed at some point","msgtype":"m.text"},"ts":1470387712000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ok. Then I'll clean it up and send you more when I have downtime. It's a nice brainless thing to do while waiting for things to compile and tests to run.","msgtype":"m.text"},"ts":1470387748000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Looking at the bug now.","msgtype":"m.text"},"ts":1470387759000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"annevk: I wouldn't be terribly surprised if Chrome's behavior had shifted in the last few years. :)","msgtype":"m.text"},"ts":1470388777000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Let me see what we're doing today.","msgtype":"m.text"},"ts":1470388785000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"http://w3c-test.org/cors/late-upload-events.htm <-- Firefox and Chrome both agree that the first test passes, and the second fails.","msgtype":"m.text"},"ts":1470389306000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"same in Edge.","msgtype":"m.text"},"ts":1470389634000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Yeah, I'm not sure that test is really testing anything though","msgtype":"m.text"},"ts":1470390111000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"See https://bugzilla.mozilla.org/show_bug.cgi?id=1254382#c18","msgtype":"m.text"},"ts":1470390139000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: FWIW, I don't know the context in https://github.com/w3c/webcomponents/issues/537 Like, why is document.write disabled at all there?","msgtype":"m.text"},"ts":1470394585000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I assume letting document.write to be called would make parsing algorithm more complicated or something, but not sure.","msgtype":"m.text"},"ts":1470394632000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"JakeA: why do you bring up images in https://github.com/whatwg/fetch/issues/355#issuecomment-237813169?","msgtype":"m.text"},"ts":1470396484000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: and what is a \"supported image header\"?","msgtype":"m.text"},"ts":1470396501000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I thought that was one of the avenues for response end?","msgtype":"m.text"},"ts":1470396549000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: also, what do you mean by \"Hm, ok, so it does require two requests.\"? The attack currently doesn't, although they perform multiple to get more accuracy","msgtype":"m.text"},"ts":1470396573000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: so is <object> or <iframe>","msgtype":"m.text"},"ts":1470396594000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: most image formats can be detected in the first few bytes, so if it isn't a valid image, we can bail early","msgtype":"m.text"},"ts":1470396607000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Are object/iframe accurate enough?","msgtype":"m.text"},"ts":1470396631000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I'm not sure why they wouldn't be","msgtype":"m.text"},"ts":1470396642000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'm struggling to see the attack where you can get header time & body in one fetch()","msgtype":"m.text"},"ts":1470396675000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: through response timing","msgtype":"m.text"},"ts":1470396709000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I've said it every other comment or so, it's also in the paper","msgtype":"m.text"},"ts":1470396731000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: in didn't realise you'd get response end unless the body was consumed","msgtype":"m.text"},"ts":1470396943000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I don't follow the \"unless\"","msgtype":"m.text"},"ts":1470396962000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: if I do fetch(url), but then don't consume the body of the response, it doesn't seem like response ended","msgtype":"m.text"},"ts":1470397036000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Since it was never given to anything that wanted to read it","msgtype":"m.text"},"ts":1470397048000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(unless you used it in a service worker and responsed with it, then an img may read it)","msgtype":"m.text"},"ts":1470397088000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: resource timing is just concerned with network traffic","msgtype":"m.text"},"ts":1470397090000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Giving that data for no-cors seems broken","msgtype":"m.text"},"ts":1470397121000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Maybe, but such data can already be gotten through other means","msgtype":"m.text"},"ts":1470397146000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"E.g., <object>","msgtype":"m.text"},"ts":1470397152000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Right, but in that case it needs to be two requests right?","msgtype":"m.text"},"ts":1470397183000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"What is new is responseStart for no-cors","msgtype":"m.text"},"ts":1470397189000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Just one request to get responseEnd, just like today","msgtype":"m.text"},"ts":1470397214000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Padding onload times for object/iframe/cache add seems doable","msgtype":"m.text"},"ts":1470397217000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I think the paper said that was unlikely to work, but that's again not solving the root cause","msgtype":"m.text"},"ts":1470397243000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The root cause is no-cors fetch() being a new capability","msgtype":"m.text"},"ts":1470397275000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And we're sure this problem doesn't already exist with cors requests rejecting?","msgtype":"m.text"},"ts":1470397301000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"If we fix symptoms it's likely we'll find ourselves having this discussion again some time from now","msgtype":"m.text"},"ts":1470397306000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Those requests include an Origin header","msgtype":"m.text"},"ts":1470397327000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But we should investigate and discuss with the authors of the paper","msgtype":"m.text"},"ts":1470397348000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Feels like your proposed fix will have a big impact on service worker performance","msgtype":"m.text"},"ts":1470397406000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"No more streaming for no-cors","msgtype":"m.text"},"ts":1470397428000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Yeah, sucks, but this leak is pretty bad","msgtype":"m.text"},"ts":1470397498000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: another option is for no-cors to always resolve instantly. Then you lose detecting a fetch failure","msgtype":"m.text"},"ts":1470397671000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"But keep performance","msgtype":"m.text"},"ts":1470397689000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I'm not sure what that means","msgtype":"m.text"},"ts":1470397842000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'm typing while walk, sorry, will type up thoughts properly tomorrow morning","msgtype":"m.text"},"ts":1470398871000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(thought was fetch() would instantly resolve with an opaque response if no-cors and cross-origin. That opaque response may be an error)","msgtype":"m.text"},"ts":1470398944000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"That doesn't really help, we can already figure out if the resource exists","msgtype":"m.text"},"ts":1470399102000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We're not defending against that","msgtype":"m.text"},"ts":1470399111000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I realise that, but it also defends against knowing when headers arrive, but doesn't prevent response streaming from a service worker","msgtype":"m.text"},"ts":1470400453000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: don't we expose url on the response?","msgtype":"m.text"},"ts":1470400741000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: and we might expose status","msgtype":"m.text"},"ts":1470400764000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: wouldn't work with too early, only late","msgtype":"m.text"},"ts":1470400778000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah :(","msgtype":"m.text"},"ts":1470400805000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Would have to make breaking changes to make it work","msgtype":"m.text"},"ts":1470400844000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: we don't expose url and status on opaque responses, though","msgtype":"m.text"},"ts":1470403999000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: resolving immediately here would require your theorized \"isResponseOk()\" thing to be async... for detecting something that would cause respondWith() to fail","msgtype":"m.text"},"ts":1470404064000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Yep. And I guess that would have to buffer the whole body if the response is ok","msgtype":"m.text"},"ts":1470404842000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Static routes wouldn't have this problem :D","msgtype":"m.text"},"ts":1470404987000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: JakeA: I think part of the problem with resolving opaque responses immediately is you may not know its opaque until after some network traffic... think a same-origin request.url that is redirected cross-origin... for a no-cors request that gives you opaque","msgtype":"m.text"},"ts":1470405543000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"if its ok to resolve as soon as we determine it will be opaque, then it could probably work","msgtype":"m.text"},"ts":1470405559000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I believe all the consumers of opaque responses are async","msgtype":"m.text"},"ts":1470405575000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"so opaque responses could contain an internal \"response is really available\" promise... any async API accepting an opaque response would just do their normal async logic waiting on that internal promise","msgtype":"m.text"},"ts":1470405619000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"although I guess this issue makes it harder to resolve immediately: https://github.com/whatwg/fetch/issues/357","msgtype":"m.text"},"ts":1470405658000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I thought we did expose url, hmm","msgtype":"m.text"},"ts":1470406549000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thats only on opaqueredirect... opaque exposes nothing","msgtype":"m.text"},"ts":1470406571000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Anyone can point me to an HTML diff tool that wouldn't choke on custom elements? (I have some <emu-val> in my HTML.)","msgtype":"m.text"},"ts":1470408417000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Context: I'm trying to clean-up the output of XSLT transform with a custom script and wan't to make I don't modify the HTML by doing so.","msgtype":"m.text"},"ts":1470408501000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"wanderview: not even whether it's redirected?","msgtype":"m.text"},"ts":1470409423000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: I thought we did expose that","msgtype":"m.text"},"ts":1470409443000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: redirected is based off the URL list... its hidden: https://fetch.spec.whatwg.org/#concept-filtered-response-opaque","msgtype":"m.text"},"ts":1470409488000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yeah, I noticed, but I wonder if that's correct","msgtype":"m.text"},"ts":1470409500000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"seems consistent to me","msgtype":"m.text"},"ts":1470409513000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"and its what we are shipping","msgtype":"m.text"},"ts":1470409517000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: https://github.com/whatwg/fetch/commit/e54f6bd1e75f46cd4b8202f5ee3bfa68e9ded906 mentions it fixes https://github.com/whatwg/fetch/issues/79 so it was meant to expose redirects for opaque responses","msgtype":"m.text"},"ts":1470409567000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: so that seems like a bug in the spec","msgtype":"m.text"},"ts":1470409578000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: I'll reopen the issue","msgtype":"m.text"},"ts":1470409593000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: we internally still do the check for redirected opaque responses... its just not exposed to script","msgtype":"m.text"},"ts":1470409629000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: I don't follow where it says it was supposed to be exposed to script in those links","msgtype":"m.text"},"ts":1470409642000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: the issue reads \"Add a bit to Opaque Responses to distinguish redirects\"","msgtype":"m.text"},"ts":1470409659000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: we look at the URL list of the unfiltered internal object to implement that bit... but its *not* exposed to script AFAICT... and I don't see why we would want to","msgtype":"m.text"},"ts":1470409687000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: because that issue wants it to be exposed?","msgtype":"m.text"},"ts":1470409714000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: and because we determined in that issue that there's no foul in exposing it?","msgtype":"m.text"},"ts":1470409769000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Anyway, I reopened the issue","msgtype":"m.text"},"ts":1470409779000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I don't think we need to expose this to script... the currently implemented spec blocks the exploit linked to in that issue","msgtype":"m.text"},"ts":1470409929000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: and I haven't been able to find anything about why it would need to be exposed to script anyway... we just need to track it internally and check in respondWith()","msgtype":"m.text"},"ts":1470409956000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: please don't change this without a good reason","msgtype":"m.text"},"ts":1470409966000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: slightlyoff gives several reasons there","msgtype":"m.text"},"ts":1470409990000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: you can already determine it","msgtype":"m.text"},"ts":1470409993000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: if you want to argue for removing the API since you only need the internal bit, that's fine","msgtype":"m.text"},"ts":1470410034000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: and I suggested as much since nobody noticed the original request went unaddressed","msgtype":"m.text"},"ts":1470410047000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: but the issue asked about redirected being exposed for opaque responses","msgtype":"m.text"},"ts":1470410058000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: what you're talking about is a bit that existed long before that","msgtype":"m.text"},"ts":1470410065000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: its nice to have the getter for same-origin and cors... I see no reason to provide an exception to our previous model for opaque","msgtype":"m.text"},"ts":1470410099000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I'm not sure what model you're referring to","msgtype":"m.text"},"ts":1470410124000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: and I don't really care what the original request was in the issue... only that the exploit is no longer feasible","msgtype":"m.text"},"ts":1470410130000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: the model of \"don't expose anything on opaque... make it identical to a network error\"","msgtype":"m.text"},"ts":1470410149000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"we've been consistent in that throughtout","msgtype":"m.text"},"ts":1470410157000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: a network error doesn't surface as a response, so that isn't really true anyway","msgtype":"m.text"},"ts":1470410173000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'm talking about this spec non-normative note: In other words, an opaque filtered response and an opaque-redirect filtered response are nearly indistinguishable from a network error. When introducing new APIs, do not use the internal response for internal specification algorithms as you will leak information.","msgtype":"m.text"},"ts":1470410229000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: which is in the spec... I think you know what I mean","msgtype":"m.text"},"ts":1470410240000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Sure, but I still don't see why we'd have redirected then, you can just compare the response url to the request url for same-origin/cors; the only interesting case is opaque","msgtype":"m.text"},"ts":1470410382000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And I think we've been okay with making some exceptions to the network error comparison when it's clearly observable","msgtype":"m.text"},"ts":1470410420000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: because you may not have the request in the code examining the response?","msgtype":"m.text"},"ts":1470410423000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"E.g. that's why opaque redirects expose the url field","msgtype":"m.text"},"ts":1470410427000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: if you want to remove the .redirected I guess I don't mind... I'm just opposed to exposing the actual .redirected value on opaque responses","msgtype":"m.text"},"ts":1470410813000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: on the grounds that opaque responses should never have properties that return something meaningful?","msgtype":"m.text"},"ts":1470410896000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: it's a little hard to understand the motivation","msgtype":"m.text"},"ts":1470410915000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: to be consistent with the principal that we expose no information on opaque responses that we've had since day one...  because we're being defensive and don't fully understand the implications of allowing no-cors fetch","msgtype":"m.text"},"ts":1470410958000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: I mean... we're in a condition now where we are trying to remove information (timing) of opaque... I think its not wise to then add more information to opaque","msgtype":"m.text"},"ts":1470410979000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Yeah, we should certainly first figure out that in depth before turning this around","msgtype":"m.text"},"ts":1470411048000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hopefully Chrome implements redirected in the same way","msgtype":"m.text"},"ts":1470411066000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"anyway, thats my motivation","msgtype":"m.text"},"ts":1470411258000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: am I right in thinking most of the recent security issues around the same-origin policy have been using side-channels?","msgtype":"m.text"},"ts":1470412816000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: like, say, the timing sidechannel of the most recent attack (or is that not the most recent anymore, idk)?","msgtype":"m.text"},"ts":1470412846000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: in a way","msgtype":"m.text"},"ts":1470413132000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: I guess the question is when a sidechannel becomes data","msgtype":"m.text"},"ts":1470413171000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"would simply call anything outwith the request/response contents a sidechannel","msgtype":"m.emote"},"ts":1470413232000,"senderName":"gsnedders","senderId":"gsnedders@irc"}
]