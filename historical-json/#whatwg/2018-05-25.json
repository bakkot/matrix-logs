[
{"content":{"body":"TabAtkins: so, without doing an install (but just relying on the relative import), using `import highlighter` and then calling `highlighter.highlight(...)`, I’m getting “AttributeError: module 'highlighter' has no attribute 'highlight'”","msgtype":"m.text"},"ts":1527219870000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ah nm that, I guess it was because my shell was invoking Python3 instead of Python2.7","msgtype":"m.text"},"ts":1527219995000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hmm but now I get “ImportError: cannot import name text_type”, so I guess that’s a dependency I don’t have installed yet","msgtype":"m.text"},"ts":1527220046000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"do any browsers implement worker type: 'module'","msgtype":"m.text"},"ts":1527220196000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"TabAtkins: oh hmm but that’s part of pygments, which I do have installed","msgtype":"m.text"},"ts":1527220210000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"my /usr/local/lib/python2.7/site-packages/pygments/util.py has no text_type","msgtype":"m.text"},"ts":1527220437000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I guess I need to get a newer version of pygments","msgtype":"m.text"},"ts":1527220454000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: testing this:","msgtype":"m.text"},"ts":1527221144000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"html, css = highlighter.highlight(sys.stdin.read(), lang=\"html\", output=\"json\")","msgtype":"m.text"},"ts":1527221146000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"print(html)","msgtype":"m.text"},"ts":1527221147000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"...with this input:","msgtype":"m.text"},"ts":1527221157000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"[\"pre\",{\"class\": \"idl extract\"},\"[Exposed=Window]\\ninterface \",[\"dfn\",\"Example\"],\" {\\n  // this is an IDL definition\\n};\"]","msgtype":"m.text"},"ts":1527221172000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"...I get only:","msgtype":"m.text"},"ts":1527221192000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"<None></None>","msgtype":"m.text"},"ts":1527221194000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"same thing if I test with the `[\"p\", {\"class\":\"foo\"}, \"text\", [\"span\", {}, \"nested text\"]]` example from your README.md","msgtype":"m.text"},"ts":1527221233000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"*correction: above I meant with output=\"html\"","msgtype":"m.text"},"ts":1527221268000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"with output=\"json\" it just gives me back the exact same JSON as the input","msgtype":"m.text"},"ts":1527221293000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"jyasskin: not entirely true, an event handler adds an event listener and retains a pointer to the function that event listener will invoke; setting the event handler again replaces that function","msgtype":"m.text"},"ts":1527228427000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so the event listener is constant, but the innards are not","msgtype":"m.text"},"ts":1527228449000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: that ends up not being valid webidl - the {} second argument isn't optional.","msgtype":"m.text"},"ts":1527230408000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Is https://w3c.github.io/webappsec-referrer-policy/ down for anyone?","msgtype":"m.text"},"ts":1527230423000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"And you're calling it with lang=\"html\", too, which won't help - it's all naked text, which won't receive a highlight.","msgtype":"m.text"},"ts":1527230496000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(the <None></None> thing seems like a bug tho)","msgtype":"m.text"},"ts":1527230537000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"domfarolino: works here","msgtype":"m.text"},"ts":1527230939000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sad face","msgtype":"m.text"},"ts":1527230963000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"annevk: By \"we\" you mean \"callers\" no? (https://github.com/whatwg/console/issues/57#issuecomment-391958300)","msgtype":"m.text"},"ts":1527231306000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: callers and the algorithm","msgtype":"m.text"},"ts":1527231339000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: I probably meant \"us spec writers\"","msgtype":"m.text"},"ts":1527231373000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I should really try to avoid using \"we\"...","msgtype":"m.text"},"ts":1527231385000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Right, I figured spec writers (callers) would provide something as generic as what we use in https://console.spec.whatwg.org/#time, and if the provided warning is left out, the algorithm uses something like you said, is generic and for the occasion","msgtype":"m.text"},"ts":1527231446000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: I guess it makes sense to allow something to be specified","msgtype":"m.text"},"ts":1527231647000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: just need to make it clear in the algorithm that a) such a thing is advisory b) might get localized and c) is optional","msgtype":"m.text"},"ts":1527231679000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Makes sense, thanks","msgtype":"m.text"},"ts":1527231710000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"annevk: Does parser-inserted basically just mean not-dynamically-inserted (like, by a script)?","msgtype":"m.text"},"ts":1527232597000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: for <script>, yes","msgtype":"m.text"},"ts":1527232658000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: we don't keep such state around for other elements though","msgtype":"m.text"},"ts":1527232667000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"does this concept exist for other things/elementss?","msgtype":"m.text"},"ts":1527232676000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Ok","msgtype":"m.text"},"ts":1527232680000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"annevk: Skimming through https://github.com/whatwg/url/pull/72 again, I recall Ryan being in favor of just pointing to the PSL's algorithm for determining a domain's \"public suffix\" and/or \"registrable domain\".","msgtype":"m.text"},"ts":1527234067000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"annevk: How would you feel about defining the terms in URL, but pointing to PSL for the implementation?","msgtype":"m.text"},"ts":1527234097000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"annevk: There's more complexity in the PSL than there was when I initially put that patch together (they've added exception rules, for instance), and I'm not sure it's worth the effort to replicate everything in URL.","msgtype":"m.text"},"ts":1527234150000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: I think pointing to PSL is fine and I agree we don't want to duplicate their algorithm, although I do have some issues with it","msgtype":"m.text"},"ts":1527234238000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ok. I'll sketch something out today and send you a PR.","msgtype":"m.text"},"ts":1527234259000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: the main thing I'm worried about is how domain names get normalized and what the exact string ends up being","msgtype":"m.text"},"ts":1527234272000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: but hand-waving that and pointing to the open issue against PSL as well as what we expect with some examples seems good enough","msgtype":"m.text"},"ts":1527234291000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ok. That makes sense to me, thanks.","msgtype":"m.text"},"ts":1527234418000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"TabAtkins: I get that same <None></None> output regardles of what input I give it","msgtype":"m.text"},"ts":1527237043000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: e.g., even if I give it the `[\"p\", {\"class\":\"foo\"}, \"text\", [\"span\", {}, \"nested text\"]]` example from the README.md","msgtype":"m.text"},"ts":1527237078000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"$ echo '[ \"pre\", \"&lt;p>This &lt;em>is &lt;strong>correct&lt;/strong>.&lt;/em>&lt;/p>\" ]' | python2.7 highlight.py","msgtype":"m.text"},"ts":1527237183000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"<None></None>","msgtype":"m.text"},"ts":1527237186000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"$ cat highlight.py","msgtype":"m.text"},"ts":1527237216000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"#!/usr/bin/python2.7","msgtype":"m.text"},"ts":1527237216000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"import highlighter","msgtype":"m.text"},"ts":1527237216000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"import sys","msgtype":"m.text"},"ts":1527237216000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"html, css = highlighter.highlight(sys.stdin.read(), lang=\"html\", output=\"html\")","msgtype":"m.text"},"ts":1527237216000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"print(html)","msgtype":"m.text"},"ts":1527237219000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"mkwst: are you aware of any Origin-header-outside-of-CORS tests?","msgtype":"m.text"},"ts":1527246674000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wants to test https://github.com/whatwg/fetch/issues/593","msgtype":"m.emote"},"ts":1527246688000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I don't know. Let me look in Blink.","msgtype":"m.text"},"ts":1527247514000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"(That said, I know Blink still has some brokenness around redirects, so I'm not sure our tests will be helpful if we're passing them. :/)","msgtype":"m.text"},"ts":1527247554000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Okay, I'm looking at writing my own now, but I haven't really dealt with stash before so we'll see how it goes...","msgtype":"m.text"},"ts":1527247769000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: when you have time I'd appreciate if you could take a look at https://github.com/whatwg/html/pull/3714","msgtype":"m.text"},"ts":1527252473000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"mkwst: it looks like Blink does the correct thing with redirects","msgtype":"m.text"},"ts":1527253533000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: it also looks like it's all alone (and I didn't test exhaustively)","msgtype":"m.text"},"ts":1527253545000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: I think both are important to be clear on, as it matters how implementations will align, right?","msgtype":"m.text"},"ts":1527255021000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: seems wanderview already gave a helpful example with regards to about:blank","msgtype":"m.text"},"ts":1527255035000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, it made our conversation from the other day on IRC click","msgtype":"m.text"},"ts":1527256624000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"added handling for about:blank as well","msgtype":"m.text"},"ts":1527256637000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"annevk: have you had a chance to peruse https://github.com/whatwg/meta/pull/89 ?","msgtype":"m.text"},"ts":1527263979000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: so who besides MDN will use this?","msgtype":"m.text"},"ts":1527264669000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: anyway, I guess it's fine; will you add it to repositories?","msgtype":"m.text"},"ts":1527264706000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: sorry for the delay","msgtype":"m.text"},"ts":1527264754000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Absolutely no idea, but I figured if anyone did it might make sense to generalize? Though I see value in being specific too...","msgtype":"m.text"},"ts":1527264759000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"No worries. I’ll add to repositories (if I have access to do that?)","msgtype":"m.text"},"ts":1527264776000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: gave you access to HTML as a start","msgtype":"m.text"},"ts":1527265016000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: maybe next week I should work on my label script again","msgtype":"m.text"},"ts":1527265036000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Thank you. Oh that’d be nice!","msgtype":"m.text"},"ts":1527265555000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"What kind of access to I have that is >= label access but < write access personally I didn’t know that middle-ground existed?","msgtype":"m.text"},"ts":1527265585000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: you have write access, but you cannot commit to master","msgtype":"m.text"},"ts":1527265866000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: it's not quite ideal, as ideally we'd also protect longstanding PRs from mistakes, but can't have it all I guess","msgtype":"m.text"},"ts":1527265904000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ohh, ok makes sense. Agreed","msgtype":"m.text"},"ts":1527265969000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"starts putting all labels into labels.json","msgtype":"m.emote"},"ts":1527267631000,"senderName":"annevk","senderId":"annevk@irc"}
]