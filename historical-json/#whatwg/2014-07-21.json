[
{"content":{"body":"I feel like I'm missing something about DNSSEC, what exactly is signed by the root anchors? The results returned by the root servers?","msgtype":"m.text"},"ts":1405936257000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"the lookup includes an RRSIG record, okay","msgtype":"m.text"},"ts":1405936764000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"GPHemsley: In what sense is PDF scripted but not PostScript (in MIME Sniffing)? Does PDF allow access to things outside of the input and PostScript not?","msgtype":"m.text"},"ts":1405945665000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Acrobat certainly allows javascript and seems to have external communication APIs","msgtype":"m.text"},"ts":1405946103000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Right, I know PDF allows JS but wasn't sure if it allowed external communication. PS is itself Turing-complete so the only question is whether it allows external communication.","msgtype":"m.text"},"ts":1405946273000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1405946287000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"So I guess it must theoretically be possible c.f. the HTTP server in pure postscript, but I don't know if that depends on specific extensions","msgtype":"m.text"},"ts":1405946322000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Domenic: thinking about how to explain transactions in stores. I keep coming back to things like store.transaction(function{ /* all store operations in here will be transactional */ }).then(...)","msgtype":"m.text"},"ts":1405946568000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"then throw up in my mouth","msgtype":"m.text"},"ts":1405946573000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"anything in the DOM that does it better?","msgtype":"m.text"},"ts":1405946590000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"keep calm and swallow it back.","msgtype":"m.text"},"ts":1405946612000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"gsnedders: Postscript seems to have file IO, but not network IO except to the extent that you can make a correspondence between the two","msgtype":"m.text"},"ts":1405946625000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: so has network IO on any POSIX system :P","msgtype":"m.text"},"ts":1405946667000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: For example","msgtype":"m.text"},"ts":1405946775000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"GPHemsley: then PS should surely be considered a scriptable type in MIME Sniffing","msgtype":"m.text"},"ts":1405946781000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"JakeA: not that I can think of ... might be worth surveying the LevelDB APIs people have put on npm.","msgtype":"m.text"},"ts":1405948041000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: I am starting to feel like `store.transaction({ add: [...], remove: [...] })` would make sense?","msgtype":"m.text"},"ts":1405948069000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Or I guess put: ..., delete: ... might be more accurate","msgtype":"m.text"},"ts":1405948089000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: That misses interleaving put & delete. Also, since put takes 2 args it looks uuuuuugly","msgtype":"m.text"},"ts":1405948125000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"store.transaction({ put: [[request, response], [request2, response2]] })","msgtype":"m.text"},"ts":1405948151000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: ugly seems OK for a low-level primitive","msgtype":"m.text"},"ts":1405948171000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I will ask the levelDB folks in #stackvm","msgtype":"m.text"},"ts":1405948329000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://gist.github.com/jakearchibald/0700c1c622c994c2d335 is ugly but it allows interleaving delete & put","msgtype":"m.text"},"ts":1405948392000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: my main problem with such a thing is that it is a bit too magical. E.g. it looks like it's function scoped but if you do non-store things inside that function, or do anything async, then it's no longer part of the transaction.","msgtype":"m.text"},"ts":1405948444000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Very leaky abstraction","msgtype":"m.text"},"ts":1405948448000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"fair","msgtype":"m.text"},"ts":1405948461000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"especially when it came to transactions across multiple stores","msgtype":"m.text"},"ts":1405948501000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(which wouldn't work, but may appear if it did)","msgtype":"m.text"},"ts":1405948519000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: stackvm people suggest https://github.com/rvagg/node-levelup#batch_chained","msgtype":"m.text"},"ts":1405948584000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Very interesting","msgtype":"m.text"},"ts":1405948586000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Feels less like composing nice APIs out of low-level ugly ones, but is a pretty nice end result","msgtype":"m.text"},"ts":1405948654000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That works for me","msgtype":"m.text"},"ts":1405948927000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: cheers!","msgtype":"m.text"},"ts":1405948931000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1405949357000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: Substack likes https://github.com/rvagg/node-levelup#dbbatcharray-options-callback-array-form more because it allows you to compose a transaction as an object","msgtype":"m.text"},"ts":1405950303000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: uglier, but simpler. Less sugar is fine for this method","msgtype":"m.text"},"ts":1405950878000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"chainable batch object lets you fail faster and more precisely, though (e.g. if you del(key, value))","msgtype":"m.text"},"ts":1405951621000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: unrelated: re-reading up on Promises today, bumped into wikipedia's definition of Promises where it claims the object given to the client is a future (not a promise). Any idea whether that's true, and if so, why the terminology was changed in JS from something correct to something not?","msgtype":"m.text"},"ts":1405951871000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"What's \"correct\"? :)","msgtype":"m.text"},"ts":1405951978000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"does it really matter what you call it","msgtype":"m.text"},"ts":1405952205000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"caitp-: yeah, it's kind of useful if the same name describes the same pattern in different languages.","msgtype":"m.text"},"ts":1405952250000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"JakeA: I think there are at least two promise lineages. Brb.","msgtype":"m.text"},"ts":1405952291000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"caitp: imagine if we had decided to call promises threads instead. :)","msgtype":"m.text"},"ts":1405952385000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: that might explain it.","msgtype":"m.text"},"ts":1405952417000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"then we could be pretentious and explain the differences between javascript threads and OS threads to people","msgtype":"m.text"},"ts":1405952430000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"and be the life of the dinner party","msgtype":"m.text"},"ts":1405952435000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Please don't invite me to your dinner parties.","msgtype":"m.text"},"ts":1405952455000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":":d","msgtype":"m.text"},"ts":1405952459000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Ms2ger: poor choice of words, admittedly, but does it obscure the gist of the question?","msgtype":"m.text"},"ts":1405952546000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I'm not sure the audience of javascript has for the most part had much exposure to other languages implementing the same pattern but named Futures --- although dart might change that","msgtype":"m.text"},"ts":1405952572000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"that doesn't seem to be a very future proof argument.","msgtype":"m.text"},"ts":1405952649000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Anyway, I'm disputing the naming choice. Just curious of its history and the rationale behind it.","msgtype":"m.text"},"ts":1405952689000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"* I'm NOT disputing","msgtype":"m.text"},"ts":1405952705000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"go away, Freud.","msgtype":"m.emote"},"ts":1405952731000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"well, they're already pretty widely used (jQuery.Deferred, etc etc etc) by web developers, and usually called Promises in web-land, so that might have something to do with it","msgtype":"m.text"},"ts":1405952792000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"roses by any other names","msgtype":"m.text"},"ts":1405953069000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"JakeA, Domenic: in case that got lost in the unrelated conversation one of the benefits of chainable batch object is it lets you fail faster and more precisely (e.g. if you del(key, value) you can error immediately).","msgtype":"m.text"},"ts":1405953176000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"\"roses\" you say? I assume that you are thinking that they are marketed as providing great beauty, but in reality there's a lot of specialised knowledge needed to make them grow right, and even then you have to be careful of thorns? Sounds reasonable.","msgtype":"m.text"},"ts":1405953239000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Hmm, I'm not too worried about that, this is a very low level part of the API","msgtype":"m.text"},"ts":1405953256000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: tobie: IIRC it's E -> Python, C#, F#, JavaScript; vs. Java -> Dart, Scala, others","msgtype":"m.text"},"ts":1405955018000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: sounds fun. Scramble them some more to find out which languages favor assert(expected, actual) and which ones prefer assert(actual, expected)","msgtype":"m.text"},"ts":1405955305000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":":/","msgtype":"m.text"},"ts":1405955316000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"anyone know anything about deletableBindings in the JS spec, 15.1.7 Runtime Semantics: ScriptEvaluation? jorendorff maybe?","msgtype":"m.text"},"ts":1405963371000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah, let me look","msgtype":"m.text"},"ts":1405963386000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Hixie: what step?","msgtype":"m.text"},"ts":1405963447000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"oh, the parameter","msgtype":"m.text"},"ts":1405963459000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"yeah, the parameter","msgtype":"m.text"},"ts":1405963515000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: It's legacy cruft, required for non-strict direct eval.","msgtype":"m.text"},"ts":1405963522000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Hixie: Inside a JS function, if you do |eval(\"var x;\")| then, bizarrely, the local variable x can be deleted using |delete x|","msgtype":"m.text"},"ts":1405963529000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"so i always pass false when evaluating a <script>?","msgtype":"m.text"},"ts":1405963541000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1405963544000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"k, thanks","msgtype":"m.text"},"ts":1405963547000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I know you were working on event loop integration a while ago. Where did that end up?","msgtype":"m.text"},"ts":1405963640000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"got sidetracked by my work on my new pipeline, but i'm working on it again as we speak","msgtype":"m.text"},"ts":1405963658000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"first step is working out how HTML and ES should integrate in general for legacy <script> evaluation","msgtype":"m.text"},"ts":1405963688000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic: tobie: how about store.add(request) which resolves to a response, or store.add([request]) which resolves to an array of responses (one, in this case)","msgtype":"m.text"},"ts":1405963795000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Hixie: nice. My big concern is that we normatively specify promises use microtasks","msgtype":"m.text"},"ts":1405963924000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: I hate overloading, but that is my only objection.","msgtype":"m.text"},"ts":1405963945000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: what does var r = new Request(); r[Symbol.iterator] = ...; store.add(r) do","msgtype":"m.text"},"ts":1405963971000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah. unfortunately while doing this i discovered we had much bigger problems. Like, ES 9.5 and 9.5.1 aren't invoked at all for HTML yet.","msgtype":"m.text"},"ts":1405964050000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic: reject, unless it provides requests or url strings","msgtype":"m.text"},"ts":1405964058000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yes, the iterator would be an iterator of requests. BUT IT IS ALSO ITSELF A REQUEST!?!","msgtype":"m.text"},"ts":1405964082000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hixie: ES6? I imagine because they only recently came into existence :P","msgtype":"m.text"},"ts":1405964092000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hixie: the issue is that Firefox currently uses macrotasks and there's no spec we can point them to to say that they're doing it wrong","msgtype":"m.text"},"ts":1405964117000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah, but there's no way to write the microtask spec until we have a foundation to write it on :-)","msgtype":"m.text"},"ts":1405964170000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, this would be a good time to remove references to not-JS-languages-in-<script> in the spec ;)","msgtype":"m.text"},"ts":1405964193000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: i'll get right on that as soon as people stop trying to put non-JS-languages-in-<script>...","msgtype":"m.text"},"ts":1405964292000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic: yep, it'll either treat it as one or the other.","msgtype":"m.text"},"ts":1405964312000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: and thus, why I hate overloading ;)","msgtype":"m.text"},"ts":1405964329000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah, but what if I overwrite querySelectorAll to return a random number?","msgtype":"m.text"},"ts":1405964767000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: crazy stuff will happen. Answer is, don't do that.","msgtype":"m.text"},"ts":1405964794000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"the ES spec really is written from the point of view of ES being the core of the world","msgtype":"m.text"},"ts":1405964982000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"JakeA: don't overload your methods? Yes, I agree ;)","msgtype":"m.text"},"ts":1405964985000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"as opposed to a library that the browser invokes","msgtype":"m.text"},"ts":1405964991000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I don't *think* that was Allen's intention... he might be open to changing things","msgtype":"m.text"},"ts":1405965054000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"e.g. NextTask is one task","msgtype":"m.text"},"ts":1405965068000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"er, one algorithm","msgtype":"m.text"},"ts":1405965082000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"called from within other ES algorithms","msgtype":"m.text"},"ts":1405965087000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"instead of \"InvokeTask\" being the top of the ES \"stack\"","msgtype":"m.text"},"ts":1405965109000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"jorendorff, Domenic: this is what i have so far: http://www.hixie.ch/specs/js/loader","msgtype":"m.text"},"ts":1405967708000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"NextTask makes no sense","msgtype":"m.text"},"ts":1405967754000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"in ES? or in my strawman above?","msgtype":"m.text"},"ts":1405967843000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i tried sending feedback about turning it inside out in the ES spec, but allen seemed unimpressed","msgtype":"m.text"},"ts":1405967867000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah :-/","msgtype":"m.text"},"ts":1405967874000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hixie: in ES. I don't know why Allen wrote it that way.","msgtype":"m.text"},"ts":1405967918000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"JakeA: \"permacache\" haha","msgtype":"m.text"},"ts":1405967921000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"jorendorff: ah. yeah. i agree. kinda just working with what i've got at this point.","msgtype":"m.text"},"ts":1405967938000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic: my favourite was \"history\", but that was down to the shitty 140 char explanation","msgtype":"m.text"},"ts":1405968883000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: permacache, just like fetchAndStore, seems nicely descriptive to me ;)","msgtype":"m.text"},"ts":1405968923000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"tobie: What caitp  said - the naming is actually remarkably inconsistent across various languages and implementations, as is the exposed API.","msgtype":"m.text"},"ts":1405968926000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Promise/Deferred/Future all describe roughly the same thing, depending on what language/library you're using.","msgtype":"m.text"},"ts":1405968962000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: or PromiseCapability X_x","msgtype":"m.text"},"ts":1405969040000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wikipedia notes that the terms are used somewhat interchangeably.","msgtype":"m.text"},"ts":1405969043000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"For whatever reason, the person who wrote that article settled on \"Future\" for JS's Promise, and \"Promise\" for JS's resolve/reject functions.","msgtype":"m.text"},"ts":1405969794000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Nothing can be as bad as Wikipedia's JavaScript article","msgtype":"m.text"},"ts":1405969950000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: that looks a heckuva lot better than it did when I last looked at it","msgtype":"m.text"},"ts":1405970590000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: you're right! However this part is still horrid. https://en.wikipedia.org/wiki/JavaScript#Version_history","msgtype":"m.text"},"ts":1405970679000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: totally","msgtype":"m.text"},"ts":1405970693000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic: I'm not saying it ain't bad, I'm saying it could be worse","msgtype":"m.text"},"ts":1405970707000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1405970710000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Before that was 1/3 of the article IIRC","msgtype":"m.text"},"ts":1405970716000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"First we need to fix MDN to move all the Mozilla \"JS 1.8\" etc. stuff into a silo, away from the limelight","msgtype":"m.text"},"ts":1405970785000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Then we can fix wikipedia","msgtype":"m.text"},"ts":1405970789000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"And by \"we\" I mean \"probably not me\"","msgtype":"m.text"},"ts":1405970802000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"are you guys allowed to edit that stuff","msgtype":"m.text"},"ts":1405970989000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"MDN certainly","msgtype":"m.text"},"ts":1405971007000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I was referring to WP:COI","msgtype":"m.text"},"ts":1405971016000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"wrt the wikipedia article","msgtype":"m.text"},"ts":1405971030000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I don't even know what that means","msgtype":"m.text"},"ts":1405971031000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"SamB: sure, provided you act in a neutral manner","msgtype":"m.text"},"ts":1405971044000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"what, you guys aren't employed by JavaScript?","msgtype":"m.text"},"ts":1405971082000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: WP:COI doesn't prohibit editing any article you have an interest in; it merely prevents you from acting in a self-interested manner","msgtype":"m.text"},"ts":1405971116000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"clearly I have not actually read WP:COI in a while","msgtype":"m.text"},"ts":1405971627000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: you've never been outright forbidden from it","msgtype":"m.text"},"ts":1405972843000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"SamB: I mean essentially it's just WP:NPOV","msgtype":"m.text"},"ts":1405972855000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"zcorpan: oh man, sorry, i totally forgot to do those PRs. Thanks for doing them.","msgtype":"m.text"},"ts":1405974590000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: you around?","msgtype":"m.text"},"ts":1405976362000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"pong","msgtype":"m.text"},"ts":1405976369000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hey","msgtype":"m.text"},"ts":1405976372000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"do you know if there's any chance of a display-box: newline? see https://www.w3.org/Bugs/Public/show_bug.cgi?id=25503 for context","msgtype":"m.text"},"ts":1405976388000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"We discussed it on the call but didn't get consensus, so I'mma work on it soonish.","msgtype":"m.text"},"ts":1405976409000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And I actually still have that bug open in my tabs here.","msgtype":"m.text"},"ts":1405976419000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"what's the \"nay\" camp's opinion?","msgtype":"m.text"},"ts":1405976426000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Specialty display types shouldn't be necessary, as we can just pattern-match on particular styles.","msgtype":"m.text"},"ts":1405976666000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"interesting idea","msgtype":"m.text"},"ts":1405976747000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"how many of the vendors were on that side?","msgtype":"m.text"},"ts":1405976751000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"fantasai, mainly.","msgtype":"m.text"},"ts":1405976761000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'd need to review the minutes, though, because I'm biased heavily in the other camp.","msgtype":"m.text"},"ts":1405976779000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"unfortunately there don't appear to be any minutes for that specific meeting","msgtype":"m.text"},"ts":1405976814000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(25th of june, if i'm reading the mailing list entrails right)","msgtype":"m.text"},"ts":1405976833000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i checked both lists","msgtype":"m.text"},"ts":1405976841000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"http://lists.w3.org/Archives/Public/www-style/2014Jun/0398.html","msgtype":"m.text"},"ts":1405976855000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You blind, bro?","msgtype":"m.text"},"ts":1405976864000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"wow, how did i miss that","msgtype":"m.text"},"ts":1405976868000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh, heh, it was the one after the last one i opened, before i'd found the agenda","msgtype":"m.text"},"ts":1405976898000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"d'oh","msgtype":"m.text"},"ts":1405976901000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"looks like no implementors were on board with pattern matching particularly","msgtype":"m.text"},"ts":1405977043000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yeah, that's what I remembered, but didn't want to claim it until I'd read.","msgtype":"m.text"},"ts":1405977060000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"btw the biggest problem with pattern matching / special case logic for <br> isn't the performance aspect, that can probably be done pretty efficiently","msgtype":"m.text"},"ts":1405977065000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the biggest problem is that because it's special-cased, you'll get special bugs.","msgtype":"m.text"},"ts":1405977075000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yup, indeed.","msgtype":"m.text"},"ts":1405977081000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I don't like pattern-matching for that reason.","msgtype":"m.text"},"ts":1405977088000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"like, some new property is added, and it matches either way, and you end up with the wrong code path just for that specific combination of properties","msgtype":"m.text"},"ts":1405977100000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"anyway","msgtype":"m.text"},"ts":1405977103000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1405977105000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you any objection to my just speccing it in HTML?","msgtype":"m.text"},"ts":1405977118000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I'm going to put it in Display, so whatevs.","msgtype":"m.text"},"ts":1405977132000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oh ok, cool","msgtype":"m.text"},"ts":1405977137000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Want me to just put it in now, and have you ref it as unstable?","msgtype":"m.text"},"ts":1405977140000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"no rush.","msgtype":"m.text"},"ts":1405977154000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'll roll this one to the bottom of my pile and will get back to you in a few weeks.","msgtype":"m.text"},"ts":1405977168000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: What element autolink in your preprocessor?","msgtype":"m.text"},"ts":1405979284000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Looks like <code> does?","msgtype":"m.text"},"ts":1405979294000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"code, span, var, and i.","msgtype":"m.text"},"ts":1405979332000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"kk. Confused why all the <var>s in the spec *lost* their data-x attrs, then.","msgtype":"m.text"},"ts":1405979356000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"var and i are special in that unles they have a data-x, they won't cross-ref","msgtype":"m.text"},"ts":1405979379000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i really should probably change from <span> to <a>","msgtype":"m.text"},"ts":1405979397000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: since it seems to be just us working today... any news on https://www.w3.org/Bugs/Public/show_bug.cgi?id=24991 ?","msgtype":"m.text"},"ts":1405979577000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"In what way? Was I supposed to do something?","msgtype":"m.text"},"ts":1405979623000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"apparently you talked about it in a telecon http://lists.w3.org/Archives/Public/www-style/2014May/0024.html","msgtype":"m.text"},"ts":1405979655000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i guess http://lists.w3.org/Archives/Public/www-style/2014May/0056.html says it's in","msgtype":"m.text"},"ts":1405979682000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so i should just use it?","msgtype":"m.text"},"ts":1405979688000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"bert: So let's say I want to use JS\" wow","msgtype":"m.text"},"ts":1405979726000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Wow that he might want to use JS, or wow that that was a line from a telecon in 2014?","msgtype":"m.text"},"ts":1405979783000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"more the former","msgtype":"m.text"},"ts":1405979791000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Ah, whoops, I never made that change.","msgtype":"m.text"},"ts":1405980144000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"desperately needs to just crank through all the minutes and find thinks he hasn't done yet.","msgtype":"m.emote"},"ts":1405980162000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1405980168000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's what i use bug reports for","msgtype":"m.text"},"ts":1405980171000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(or e-mails to whatwg)","msgtype":"m.text"},"ts":1405980177000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Define it in HTML, lemme know the anchor, I'll add it to Selectors and link to HTML for the lang-specific definition.","msgtype":"m.text"},"ts":1405980183000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"roger","msgtype":"m.text"},"ts":1405980187000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"anchor will be selector-modal","msgtype":"m.text"},"ts":1405980200000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"arv_, do you know if Object.observe (& related api) was ever in the harmony draft at all, and what happened to it if it was?","msgtype":"m.text"},"ts":1405980204000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"and why not if it wasn't :p","msgtype":"m.text"},"ts":1405980211000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"#jslang is a bit quiet today, so I inquire here","msgtype":"m.text"},"ts":1405980224000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: It was decided that it would go in ES7","msgtype":"m.text"},"ts":1405980233000,"senderName":"arv_","senderId":"arv_@irc"},
{"content":{"body":"caitp: and it uses the new process (waterfall, ship when ready model)","msgtype":"m.text"},"ts":1405980251000,"senderName":"arv_","senderId":"arv_@irc"},
{"content":{"body":"hmm I see","msgtype":"m.text"},"ts":1405980275000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"so was the actual design finalized? or is that still likely/possible to change?","msgtype":"m.text"},"ts":1405980592000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Well, it's shipping now, so pretty final.","msgtype":"m.text"},"ts":1405980633000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"shipping in a single browser","msgtype":"m.text"},"ts":1405980645000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"behind flags","msgtype":"m.text"},"ts":1405980652000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"anyways, I haven't really reviewed it yet, but Rob Eisenberg put together some tests http://jsperf.com/observing-objects using different strategies, and from his results it looks actually worse to depend on O.o by quite a bit compared to dirty checking. (but obviously prone to all the usual issues with jsperf, and possibly very bad tests)","msgtype":"m.text"},"ts":1405980924000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"so I just wanted to see if anything in the specification had changed, but couldn't find any of it :>","msgtype":"m.text"},"ts":1405980973000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: is that not QoI?","msgtype":"m.text"},"ts":1405981059000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"well it might be a QoI issue, or it might be a fundamental problem with the algorithms, or it might be just bad tests","msgtype":"m.text"},"ts":1405981136000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"or a mix of 2 or all 3","msgtype":"m.text"},"ts":1405981140000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I suspect it's the fact that normal property accesses are ridiculously well optimized, and Object.observe is a slow-case compared with that","msgtype":"m.text"},"ts":1405981175000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I suspect observing it will always be slower than checking for changed properties","msgtype":"m.text"},"ts":1405981202000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1405981213000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"but 1:100 might not be a very good ratio","msgtype":"m.text"},"ts":1405981226000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Because fundementally in your baseline code you'll always generate simple property accesses and slowcase if there's an observer","msgtype":"m.text"},"ts":1405981227000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"right, but what it comes down to is it might not even be worth using if it's cheaper without","msgtype":"m.text"},"ts":1405981354000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"idk, I very much suspect the V8 impl is just unoptimized","msgtype":"m.text"},"ts":1405981418000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"could be, should get mi�ko over there :p","msgtype":"m.text"},"ts":1405981463000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"No, I think it's shipping publicly in the upcoming Chrome.  (I think?)","msgtype":"m.text"},"ts":1405981883000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oh, no apparently it's enabled by default in m36","msgtype":"m.text"},"ts":1405981944000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"sort of related… anyone have the w3c irc network url with the ssl port?","msgtype":"m.text"},"ts":1405982231000,"senderName":"bretolius","senderId":"bretolius@irc"},
{"content":{"body":"bretolius: irc.w3.org:6667","msgtype":"m.text"},"ts":1405982363000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins ty :)","msgtype":"m.text"},"ts":1405982393000,"senderName":"bretolius","senderId":"bretolius@irc"},
{"content":{"body":"that doesn't look like an ssl port","msgtype":"m.text"},"ts":1405982420000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Eh, it's the only port I kno.","msgtype":"m.text"},"ts":1405982493000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"know","msgtype":"m.text"},"ts":1405982495000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"can someone check the \"Manipulation of the execution context stack\" thread on es-discuss to see if i'm missing something?","msgtype":"m.text"},"ts":1405983032000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i just don't understand what allen is saying","msgtype":"m.text"},"ts":1405983039000,"senderName":"Hixie","senderId":"Hixie@irc"}
]