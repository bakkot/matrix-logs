[
{"content":{"body":"Not safe, as the origin page might be compromised.","msgtype":"m.text"},"ts":1499127844000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But if we pretend that it's not, then yeah, data is safe - browser negotiates an https connection to the destination and transports over that.","msgtype":"m.text"},"ts":1499127865000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"GPHemsley: ^^^","msgtype":"m.text"},"ts":1499127881000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah... I ain't putting my SSN into that form","msgtype":"m.text"},"ts":1499127924000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"GPHemsley: Browsers are starting to explictly mark HTTP pages as non-secure when they contain password forms: https://arstechnica.com/information-technology/2017/01/firefox-chrome-start-calling-http-connections-insecure/. You can imagine that we'll get more aggressive on that front over time.","msgtype":"m.text"},"ts":1499158341000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"tobie, et al: Is there any WebIDLish mechanism for specifying attribute setters of various types that don't do implicit conversion?","msgtype":"m.text"},"ts":1499158524000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Like, say I have `attribute DOMString innerHTML`. Can I have a setter for that attribute that accepts some other specific type that isn't a `DOMString`, without an implicit call to the stringifier?","msgtype":"m.text"},"ts":1499158579000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: a union type wouldn't work in that context?","msgtype":"m.text"},"ts":1499160983000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: Hrm. I guess a union type could work. The getter would just always return `DOMString`?","msgtype":"m.text"},"ts":1499161035000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: yeah. :-/","msgtype":"m.text"},"ts":1499161203000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I mean, that's what I want. :) I'm just trying to find the right way of expressing the kind of thing I'm trying to play around with.","msgtype":"m.text"},"ts":1499161239000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"It didn't occur to me that something like `attribute (SpecialType or DOMString) whatever` would actually work.","msgtype":"m.text"},"ts":1499161302000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: we have this discussion quarterly. Types are both a coercion system and a documentation for the return value of the getters… which tbh is quite confusing.","msgtype":"m.text"},"ts":1499161359000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Well, it is Q3. :)","msgtype":"m.text"},"ts":1499161377000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Good. Love it when we have it so early.","msgtype":"m.text"},"ts":1499161407000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":":D","msgtype":"m.text"},"ts":1499161413000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Right. Getting it out of the way... ;)","msgtype":"m.text"},"ts":1499161420000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Yeah, thanks!","msgtype":"m.text"},"ts":1499161435000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"So the fact that it always returns a DOMString will need to be specified in prose.","msgtype":"m.text"},"ts":1499161505000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Makes sense. :)","msgtype":"m.text"},"ts":1499161591000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"jgraham: Dunno if this is you, but something is still wrong with the testrunner in Chrome","msgtype":"m.text"},"ts":1499168714000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"Safari and Edge are fixed","msgtype":"m.text"},"ts":1499168734000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"annevk, Domenic: It appears that Edge treats a base URL with a single-letter protocol as a Windows drive letter, and then converts it to file:","msgtype":"m.text"},"ts":1499169030000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"GPHemsley: https://github.com/whatwg/url/issues/271","msgtype":"m.text"},"ts":1499169069000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah, very nice","msgtype":"m.text"},"ts":1499169199000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"GPHemsley: https://github.com/w3c/web-platform-tests/pull/6456 seems to have reasonable looking results for Chrome","msgtype":"m.text"},"ts":1499170501000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: Well, I dunno what happened here then: https://travis-ci.org/w3c/web-platform-tests/jobs/249949077","msgtype":"m.text"},"ts":1499171022000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"is it possible there's an upper limit on test output from Chrome?","msgtype":"m.text"},"ts":1499171065000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"GPHemsley: Looks like a chromedriver bug","msgtype":"m.text"},"ts":1499171123000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(and yeah, travis has a log size limit)","msgtype":"m.text"},"ts":1499171134000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But \"PID 6909 | [1.563][SEVERE]: Bad inspector message: {…\" seems like something rbyers should look at","msgtype":"m.text"},"ts":1499171175000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"sounds good, thanks","msgtype":"m.text"},"ts":1499171206000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"(I think that Chrome might just have a size limit on those messages, so tests with many many subtests are a problem)","msgtype":"m.text"},"ts":1499171249000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"this is the first I've seen of it, so may have just reached that with this PR","msgtype":"m.text"},"ts":1499172138000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"annevk: Surprised that opaque responses are known as \"CORS-cross-origin\" given that they're usually the result of a no-cors request https://html.spec.whatwg.org/multipage/urls-and-fetching.html#cors-cross-origin","msgtype":"m.text"},"ts":1499174475000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: Ian minted those terms a long time ago and I haven't bothered to refactor (or lift those terms into Fetch) yet","msgtype":"m.text"},"ts":1499174848000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fair enough","msgtype":"m.text"},"ts":1499174865000,"senderName":"JakeA","senderId":"JakeA@irc"}
]