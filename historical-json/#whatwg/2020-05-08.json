[
{"content":{"body":"Yeah, maybe ‚Äúlocal‚Äù is our best pick. I also thought of ‚Äúpressure-based‚Äù, but‚Ä¶","msgtype":"m.text"},"ts":1588910522000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I‚Äôm not sure I want this term to show up in APIs though. Prolly rather not.","msgtype":"m.text"},"ts":1588910585000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: you might want to follow https://github.com/unicode-org/icu4x/issues/73 as well as I think that's something you care about","msgtype":"m.text"},"ts":1588919568000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wonders if we can make document.evaluate static by default","msgtype":"m.emote"},"ts":1588928695000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"or am I misunderstanding the iterator/snapshot difference?","msgtype":"m.text"},"ts":1588928944000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: changes to pr-preview deployed. LMK if they work for you or if you're having issues.","msgtype":"m.text"},"ts":1588937791000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: oh cool, let me try push another commit to a PR","msgtype":"m.text"},"ts":1588941331000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: seems to work great: https://whatpr.org/storage/86.html","msgtype":"m.text"},"ts":1588941395000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1588941399000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: do you have thoughts on the element scroll container case here? https://github.com/whatwg/html/issues/5408#issuecomment-623981827","msgtype":"m.text"},"ts":1588942043000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: Great! I have fixed my notification settings, so I think I will be prompted more quickly in the future. :)","msgtype":"m.text"},"ts":1588945708000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"seems zcorpan is gone now :(","msgtype":"m.text"},"ts":1588948743000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Hi all; I wonder if there are any IDL specs that narrow down attribute types for subclasses.","msgtype":"m.text"},"ts":1588954454000,"senderName":"treora","senderId":"treora@irc"},
{"content":{"body":"For example, in <https://dom.spec.whatwg.org/#interface-node>, the Node interface contains: ‚Äúreadonly attribute Document? ownerDocument;‚Äù","msgtype":"m.text"},"ts":1588954454000,"senderName":"treora","senderId":"treora@irc"},
{"content":{"body":"This attribute‚Äôs behaviour is then defined as: ‚ÄúThe ownerDocument attribute‚Äôs getter must return null, if this is a document, and this‚Äôs node document otherwise.‚Äù","msgtype":"m.text"},"ts":1588954454000,"senderName":"treora","senderId":"treora@irc"},
{"content":{"body":"I‚Äôd think one could then create an IDL for the Document interface that says ‚Äúreadonly attribute null ownerDocument;‚Äù","msgtype":"m.text"},"ts":1588954454000,"senderName":"treora","senderId":"treora@irc"},
{"content":{"body":"But the spec does not contain this, and accordingly neither do (e.g.) Typescript‚Äôs dom type declarations, and as a result people‚Äôs code contains needless type errors.","msgtype":"m.text"},"ts":1588954454000,"senderName":"treora","senderId":"treora@irc"},
{"content":{"body":"Any opinions here on whether/where/how this could (or might already) be addressed somehow?","msgtype":"m.text"},"ts":1588954456000,"senderName":"treora","senderId":"treora@irc"},
{"content":{"body":"treora: specs do not do that because doing so would change JS observable behavior and require extra C++ implementation, by causing the overridden property to no longer inherit from the prototype.","msgtype":"m.text"},"ts":1588954684000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"treora: TypeScript and IDL are not isomorphic, so it is unfortunate that people try to derive TypeScript types from IDL.","msgtype":"m.text"},"ts":1588954707000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I.e. TypeScript is for catching type errors, so lots of little subtypes maybe is useful. IDL is for generating C++ code, so lots of little subtypes would be actively bad.","msgtype":"m.text"},"ts":1588954733000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Thanks for explaining. I assumed such narrowing down would indeed be kept outside of the interface definitions, but could perhaps be listed somewhere as ‚Äòcorrolaries‚Äô, a sort of appendix with some machine-readable implications of the spec.","msgtype":"m.text"},"ts":1588955100000,"senderName":"treora","senderId":"treora@irc"},
{"content":{"body":"*corollaries :)","msgtype":"m.text"},"ts":1588955137000,"senderName":"treora","senderId":"treora@irc"},
{"content":{"body":"Of course it could be done in projects like Typescript, but it seems more easily maintained and more reusable when kept ‚Äòcloser to the spec‚Äô.","msgtype":"m.text"},"ts":1588955302000,"senderName":"treora","senderId":"treora@irc"},
{"content":{"body":"As you say it is unfortunate that IDL is used to derive types at all, perhaps this would need a more thorough approach..","msgtype":"m.text"},"ts":1588955395000,"senderName":"treora","senderId":"treora@irc"},
{"content":{"body":"I don't think that's something that would make sense in the spec, since it's not useful for implementing.","msgtype":"m.text"},"ts":1588955496000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It would make sense for it to exist in TypeScript if TypeScript is going to use it.","msgtype":"m.text"},"ts":1588955505000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ok, clear.","msgtype":"m.text"},"ts":1588955569000,"senderName":"treora","senderId":"treora@irc"},
{"content":{"body":"I wonder if that case could fall out of formalized slots","msgtype":"m.text"},"ts":1588956482000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Maybe, but prolly not worth the complexity","msgtype":"m.text"},"ts":1588956649000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"There are better examples than the above by the way, e.g.  I suppose a ChildNode could be guaranteed to always have a parentNode.","msgtype":"m.text"},"ts":1588958236000,"senderName":"treora","senderId":"treora@irc"},
{"content":{"body":"I found a place for typescript where I guess these things might go: https://github.com/microsoft/TSJS-lib-generator/blob/master/inputfiles/overridingTypes.json","msgtype":"m.text"},"ts":1588958328000,"senderName":"treora","senderId":"treora@irc"},
{"content":{"body":"Domenic: this test https://github.com/web-platform-tests/wpt/blob/master/html/semantics/interactive-elements/the-dialog-element/abspos-dialog-layout.html#L200-L210, I guess I understand what it means. The containing block is the `absoluteContainer`, and the test expects the dialog element used this containing block to calculate it's position. Please feel free to correct if I am wrong. My question is, I don't see this is how","msgtype":"m.text"},"ts":1588960127000,"senderName":"saber1","senderId":"saber1@irc"},
{"content":{"body":"the spec is defined? I'd still expect the dialog element to use the viewport","msgtype":"m.text"},"ts":1588960127000,"senderName":"saber1","senderId":"saber1@irc"},
{"content":{"body":"saber1: I'm sorry, I'm really not a dialog expert... it's best to post these questions on some public forum and gather input from those that are.","msgtype":"m.text"},"ts":1588960980000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"gotcha, thanks!","msgtype":"m.text"},"ts":1588961011000,"senderName":"saber1","senderId":"saber1@irc"},
{"content":{"body":"Domenic: do you know who to contact at Chrome?","msgtype":"m.text"},"ts":1588961108000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: perhaps you could introduce them to saber1 to move things along a bit more quickly? We're trying to ship it in Fx as I understand","msgtype":"m.text"},"ts":1588961137000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: @mfreed7 is my go-to DOM team contact","msgtype":"m.text"},"ts":1588961140000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it*","msgtype":"m.text"},"ts":1588961140000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1588961195000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm happy to do an intro email if that'd be appreciated; just let me know what email address to use.","msgtype":"m.text"},"ts":1588961204000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: heh, I might even supply a PR to Bikeshed üôÇ","msgtype":"m.text"},"ts":1588962396000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yessssssss","msgtype":"m.text"},"ts":1588962406000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: just need to figure out a bit more what exactly we need; but perhaps the easiest fix would be a similar thing to MDN annotations, a switch to allow us to use our own styles and scripts","msgtype":"m.text"},"ts":1588962451000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Should we maybe require filing bugs on Node.js when the URL Standard changes? Since they have a spec-complaint implementation and are actually going to pay attention to the kinds of minor changes that have happened recently.","msgtype":"m.text"},"ts":1588964396000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I will file one for the recent changes","msgtype":"m.text"},"ts":1588964422000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: thanks, I like that","msgtype":"m.text"},"ts":1588967279000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: the host parser restrictions contributor is from Node‚Äôs team, but I should prolly have double checked","msgtype":"m.text"},"ts":1588967352000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah yeah true","msgtype":"m.text"},"ts":1588967680000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I‚Äôve been idly wondering if we should have more process around URL as it gets more stable, but not entirely clear we‚Äôre there yet","msgtype":"m.text"},"ts":1588967987000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, I did notice that the last PR got merged with several boxes left unchecked","msgtype":"m.text"},"ts":1588968008000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Maybe starting with Safari and Node.js bugs, since they've demonstrated care, would be good.","msgtype":"m.text"},"ts":1588968020000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Would be nice to have two browsers fully comply","msgtype":"m.text"},"ts":1588968029000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh a non-editorial PR?","msgtype":"m.text"},"ts":1588968048000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah https://github.com/whatwg/url/pull/497","msgtype":"m.text"},"ts":1588968416000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Maybe one thing to do is confirm each browser has a URL tracking bug remaining","msgtype":"m.text"},"ts":1588968589000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I figures for that one I could decide for Fx and we have bugs on file, but a bit sloppy indeed","msgtype":"m.text"},"ts":1588968681000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Figured*","msgtype":"m.text"},"ts":1588968794000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"creating a PR to whatwg/html, how do I add <!-- ACKS, I don't see it anywhere","msgtype":"m.text"},"ts":1588971056000,"senderName":"saber1","senderId":"saber1@irc"},
{"content":{"body":"saber1: in the `source` file it's around line 120803","msgtype":"m.text"},"ts":1588973503000,"senderName":"Domenic","senderId":"Domenic@irc"}
]