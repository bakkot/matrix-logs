[
{"content":{"body":"jgraham: so I take it no?","msgtype":"m.text"},"ts":1438214424000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"I’m looking for a method that would return a promise that resolves as soon as one of the promises in the iterable resolves, or that rejects once all of the promises in the iterable rejects, with the value or reason from that promise.","msgtype":"m.text"},"ts":1438214465000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Oh good, I’m not the first person to notice this http://www.effectiveui.com/blog/2014/11/11/promise-any-a-missing-use-case/","msgtype":"m.text"},"ts":1438214536000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"does http://dev.w3.org/csswg/ -> https://drafts.csswg.org/ on a bunch of links in https://github.com/servo/servo/wiki/Relevant-spec-links","msgtype":"m.emote"},"ts":1438217411000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"wanderview: https://platform.html5.org/ attempts to provide links to the right versions of specs","msgtype":"m.text"},"ts":1438217422000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"wanderview: following, e.g., the \"Prefer WHATWG specifications over W3C ones\" rule and the \"Always use the Editor's Draft\" rule, etc.","msgtype":"m.text"},"ts":1438217482000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Domenic: 👆","msgtype":"m.text"},"ts":1438217492000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"in any cases where it doesn't, that's a bug and should get an issue report or PR at https://github.com/whatwg/platform.html5.org","msgtype":"m.text"},"ts":1438217559000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Where can I learn the most about the “system” font?","msgtype":"m.text"},"ts":1438220703000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"JonathanNeal: There is no such function (we only had real use-cases for .all() and .race()), but you can make one yourself by flipping the input promises, calling .all() on them, then flipping the result promise.","msgtype":"m.text"},"ts":1438222107000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Flipping a promise is just throwing the success value and returning the error value.","msgtype":"m.text"},"ts":1438222126000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"p.then(x=>throw x, x=>x)","msgtype":"m.text"},"ts":1438222153000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: that’s a fun hack, but wouldn’t actual errors end up throwing an ultimate resolve?","msgtype":"m.text"},"ts":1438222517000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1438222539000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If something in a promise throws, is the Promise rejected?","msgtype":"m.text"},"ts":1438222591000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Yes.","msgtype":"m.text"},"ts":1438222606000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So, if something actually errored in the Promise, it wouldn’t know the difference between that error and my flipping of the Promise?","msgtype":"m.text"},"ts":1438222632000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"I'm confused.  I think your mental model is a little bit broken, and so you're asking a weird question?","msgtype":"m.text"},"ts":1438222683000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That’s very possible.","msgtype":"m.text"},"ts":1438222692000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Why are you making a distinction between \"throws an error\" and \"rejects (in some normal way)\"?","msgtype":"m.text"},"ts":1438222726000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Rejection is the promise equivalent of error-throwing, anyway.","msgtype":"m.text"},"ts":1438222737000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I thought you were saying I should use Promise.all, but reject when I mean to resolve and resolve when I mean to reject.","msgtype":"m.text"},"ts":1438222759000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"I said flip all the input promises, then use Promise.all, then flip the result promise, and return that.","msgtype":"m.text"},"ts":1438222782000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The initial flips means the Promise.all() will either accept (if all of the input promises rejected) or reject (if a single input promise accepted).","msgtype":"m.text"},"ts":1438222822000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Then you flip it again so the promise you end up returning actually accepts or rejects in the expected manner.","msgtype":"m.text"},"ts":1438222841000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Right, so the initial Promise works as intended, but it’s result gets flipped before being passed to Promise.all?","msgtype":"m.text"},"ts":1438222843000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"And then the result of Promise all gets flipped and that’s my Promise.any?","msgtype":"m.text"},"ts":1438222873000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Yeah.  \"Promise.any = function(...inputs) { return promiseFlip(Promise.all(...inputs.map(promiseFlip))); };\"","msgtype":"m.text"},"ts":1438222917000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Where \"function promiseFlip(p) { return p.then(function(x){throw x;}, function(x){return x;}); };\"","msgtype":"m.text"},"ts":1438222956000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"My error in thinking was neglecting to consider the inner promiseFlip.","msgtype":"m.text"},"ts":1438223054000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"That’s a very clever way to do it, but one would still end up abstracting it to something like Promise.any. Would you say your method is better than these forEach’ing over the iterables? Like https://github.com/andyjansson/promise-any/blob/master/index.js","msgtype":"m.text"},"ts":1438223100000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"I suddenly want to do much more functional code: Promise.any = compose(promiseFlip, Promise.all, map(promiseFlip));","msgtype":"m.text"},"ts":1438223148000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"forEach'ing is just a straightforward translation of a Promise.all() impl into .any().","msgtype":"m.text"},"ts":1438223171000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Which is easier depends on how well you handle more functional stuff, I guess?","msgtype":"m.text"},"ts":1438223201000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"In general I vastly prefer working with promises directly if at all possible, and avoiding promise constructors entirely.","msgtype":"m.text"},"ts":1438223219000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(I think Domenic prefers that pattern as well.)","msgtype":"m.text"},"ts":1438223278000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I follow, but I did not learn enough about functional programming to really grasp it.","msgtype":"m.text"},"ts":1438223390000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"http://drboolean.gitbooks.io/mostly-adequate-guide/","msgtype":"m.text"},"ts":1438223426000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Is compose a real thing? Or an abstraction? Or like f => g => (...xs) => f(g.apply(this, xs)) ?","msgtype":"m.text"},"ts":1438223460000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Well, like, it's a function you can write yourself.","msgtype":"m.text"},"ts":1438223500000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"function compose(...funcs) { return function(...args) { var ret = funcs[0](...args); for(var i = 1; i < funcs.length; i++) { ret = funcs[i](ret); } return ret; };};","msgtype":"m.text"},"ts":1438223577000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(You don't mess around with `this` when writing functional style code, `this` is for OO.)","msgtype":"m.text"},"ts":1438223602000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Sorry, have to run funcs in reverse, duh.","msgtype":"m.text"},"ts":1438223737000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And it would not be classy to var ret = funcs.splice(0)[0](...args); ?","msgtype":"m.text"},"ts":1438223811000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"So that one could for (func of funcs) ret = func(ret);","msgtype":"m.text"},"ts":1438223817000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"I mean, whatevs, you're writing a for loop, do whatever you want.","msgtype":"m.text"},"ts":1438223847000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I never remember how splice() works, so I just did it manually.","msgtype":"m.text"},"ts":1438223857000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And I can’t do like compose(ret, …funcs) {} ?","msgtype":"m.text"},"ts":1438223983000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Are you calling (in which case, why the {}) or defining (in which case, where the \"function\")?","msgtype":"m.text"},"ts":1438224027000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You know, at some point you shouldn’t forgive me knowing neither functional programming or proper ES6. Thank you for being so patient.","msgtype":"m.text"},"ts":1438224030000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"I’m just learning by dissecting your compose method based on what you shared about Promise.any.","msgtype":"m.text"},"ts":1438224093000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Yeah, but when you says `compose(ret, ...funcs) {}`, were you trying to reference *calling* the compose() function, or *defining* it?","msgtype":"m.text"},"ts":1438224125000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"defining it","msgtype":"m.text"},"ts":1438224150000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Ok.","msgtype":"m.text"},"ts":1438224153000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yeah, you can put arguments before the rest param.  But that won't help here, because you have to reverse the list of funcs first (you run the last one with args, then pass its result to the next to last, etc). ^_^","msgtype":"m.text"},"ts":1438224185000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"In my dfn, pretend the first line of compose() was \"funcs.reverse();\", followed by the return statement as I specified it.","msgtype":"m.text"},"ts":1438224208000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I’m doing more than pretend. I’m writing it in Sublime. Studying it. Then responding :)","msgtype":"m.text"},"ts":1438224236000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"And double checking that .reverse does in fact modify the instance rather than just returning the reordered array.","msgtype":"m.text"},"ts":1438224347000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Yes, it does both.","msgtype":"m.text"},"ts":1438224355000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Because I forgot.","msgtype":"m.text"},"ts":1438224355000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"(Which is annoying.)","msgtype":"m.text"},"ts":1438224362000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Most of the time.)","msgtype":"m.text"},"ts":1438224365000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"My Promise.any() up there won't actually work, btw, because Promise.all() expects to receive multiple args, not an array.  Gotta use some helper function to make that work.","msgtype":"m.text"},"ts":1438224411000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Like function argsToArray(func) { return function(arrayOfArgs) { return func(...arrayOfArgs); };};","msgtype":"m.text"},"ts":1438224464000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And function arrayToArgs(func) { return function(...args) { return func(args); };};","msgtype":"m.text"},"ts":1438224522000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So then Promise.any = arrayToArgs(compose(promiseFlip, argsToArray(Promise.all), map(promiseFlip)));","msgtype":"m.text"},"ts":1438224567000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oh, and function map(func) { return function(obj) { return obj.map(func); };};","msgtype":"m.text"},"ts":1438224602000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I follow, though the number of methods required to write that one beautiful line seemed a bit much.","msgtype":"m.text"},"ts":1438224624000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"I highly recommend reading the DrBoolean's guide I linked above, it's a super newb-friendly intro to FP in JS.","msgtype":"m.text"},"ts":1438224627000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Well, most of those are helpers that would be prewritten, and the array<->arg converters wouldn't be necessary if the functions accepted arrays all the time.  FP doesn't like variadic functions very much.","msgtype":"m.text"},"ts":1438224669000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I have read two “page”. I don’t know if I’m a newb or not, but it’s definitely me-friendly.","msgtype":"m.text"},"ts":1438224670000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"pages","msgtype":"m.text"},"ts":1438224675000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"(Back in Lisp, where you can name functions nice ASCII things, they were named <> and ><, to represent whether they \"spread\" the function (changing it from accepting a single array to accepting multiple args) or \"squished\" it (vice versa).","msgtype":"m.text"},"ts":1438224777000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So (>< Promise.any) was easier to read. ^_^","msgtype":"m.text"},"ts":1438224796000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"sorry to chime in with a different topic, but i have some thoughts on cancelable promises, is it appropriate to discuss here?","msgtype":"m.text"},"ts":1438224943000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"hgl: Yeah. Ping Domenic for it.","msgtype":"m.text"},"ts":1438224956000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"great, here are my thoughts on cancelable promises https://gist.github.com/hgl/fa6432904ddcf29ecafe","msgtype":"m.text"},"ts":1438224986000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"i'm going to cc annevk too","msgtype":"m.text"},"ts":1438225011000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"Haha reading chapter 3 and it’s telling me about the impurity of splice. Thank you again, Tab.","msgtype":"m.text"},"ts":1438225495000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"hehehe","msgtype":"m.text"},"ts":1438225937000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Chapter 5, midway, is a good place or me to stop and digest. :)","msgtype":"m.text"},"ts":1438227612000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"This might seem really stupid to people, but I put together a collection of @font-face rules that might form the “system” font https://gist.github.com/jonathantneal/32fdf75b26fd12c7c7db","msgtype":"m.text"},"ts":1438232696000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Formalized it a little https://github.com/jonathantneal/system-font-face","msgtype":"m.text"},"ts":1438234565000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"JonathanNeal: in my version of similar, I also have Roboto, Liberation Sans and Arimo","msgtype":"m.text"},"ts":1438241596000,"senderName":"terinjokes","senderId":"terinjokes@irc"},
{"content":{"body":"I don't have San Francisco, and it seems I've also included the office font of \"Calibri\" for some reason","msgtype":"m.text"},"ts":1438241663000,"senderName":"terinjokes","senderId":"terinjokes@irc"},
{"content":{"body":"I found a bug in npmjs.com, where can I find the code so that I can send a fix? `newww` repo?","msgtype":"m.text"},"ts":1438242782000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"never mind...","msgtype":"m.text"},"ts":1438242814000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"It's more related to doc, in https://github.com/npm/docs/tree/master/content I find everything except the md related to  https://docs.npmjs.com/files/package.json","msgtype":"m.text"},"ts":1438243070000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"https://github.com/npm/docs/issues/131 hmm","msgtype":"m.text"},"ts":1438243326000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"hgl: really want either JakeA or Domenic","msgtype":"m.text"},"ts":1438245108000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hgl: I'm staying out of it","msgtype":"m.text"},"ts":1438245113000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: apparently webkit/blink has some rather specialized unbind hook for certain things, https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/dom/Document.cpp&q=nodeWillBeRemoved&sq=package:chromium&dr=CSs&l=3728","msgtype":"m.text"},"ts":1438247210000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"called in https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/dom/ContainerNode.cpp&sq=package:chromium&dr=CSs&l=664&rcl=1438193817","msgtype":"m.text"},"ts":1438247327000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"oh well","msgtype":"m.text"},"ts":1438247474000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"hgl: the plan is for .cancel to signal disinterest for that promise. If all child promises signal disinterest, the initiator is notified and may take action, eg cancel the request or stream","msgtype":"m.text"},"ts":1438247821000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Any promise may cancel itself, but only a special subclass may be signalled for disinterest (CancelablePromise). If an API returns a cancelable, and you don't want that, you can Promise.resolve it","msgtype":"m.text"},"ts":1438247907000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA, but that makes promises a two-way communication mechanism. it greatly complicates promise objects. I think promise consumers should simply be observers. observing and signaling shouldn't be multiplexed, it will make promises very hard to reason about.","msgtype":"m.text"},"ts":1438248461000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"hgl: var p = fetch(url).then(r => r.json()), then later p.cancel() seems pretty simple to reason about. How would you do that?","msgtype":"m.text"},"ts":1438248611000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"should the r => r.json function also be notified that p has canceled?","msgtype":"m.text"},"ts":1438248704000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"or only the initiator get the canceling signal?","msgtype":"m.text"},"ts":1438248735000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"JakeA, also, if all consumers are disinterested in the result of fetching, it doesn't necessarily mean the fetching should be canceled, what if a new consumer is attached later that want to get the result? does a canceled promise mean a rejected promise? can a new consumer get the resolved value from a canceled promise?","msgtype":"m.text"},"ts":1438249078000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"hgl: the pending promise gets the \"all disinterested\" signal","msgtype":"m.text"},"ts":1438249156000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"the cancel method seems to be doing two things at once: abort the action, signal disinterest. i think this is bad, these two intentions should be expressed by two different apis.","msgtype":"m.text"},"ts":1438249166000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"A cancelled promise neither rejects or resolves, but it will \"finally\"","msgtype":"m.text"},"ts":1438249186000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"hgl: the cancel method signals disinterested, but the pending promise may react to total disinterest.","msgtype":"m.text"},"ts":1438249243000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"How would you do it?","msgtype":"m.text"},"ts":1438249248000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(given the example above)","msgtype":"m.text"},"ts":1438249259000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA, i gave the code examples in that gist, if you want to abort, expose the abort method with a controller or on the request or something, if you want to show disinterest, \"deregister\" the callback added by then()","msgtype":"m.text"},"ts":1438249380000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"hgl: that doesn't cover the example above where I want to cancel the request and/or the response. Can you show how *that* would work?","msgtype":"m.text"},"ts":1438249460000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"i don't understand. by \"cancel the request\", you mean abort the request? that's done by the separate abort method. by \"cancel the response\", you deregister then(), so the promise is never resolved. what it doesn't cover?","msgtype":"m.text"},"ts":1438249660000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"hgl: can you gist it? Something that will abort the request, if it's pending, or abort the stream read to JSON, if that's pending.","msgtype":"m.text"},"ts":1438249856000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: I guess https://github.com/whatwg/fetch/issues/37 requires some followup-changes in the XHR test suite. Can you report an issue on syncing tests with your spec changes, and I'll try to get to it? :)","msgtype":"m.text"},"ts":1438249922000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"hallvors: https://github.com/w3c/web-platform-tests/issues/2042","msgtype":"m.text"},"ts":1438250064000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks :)","msgtype":"m.text"},"ts":1438250088000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"JakeA, sure, i can try. but my point is that promise should not be used to transfer signals back up. you can always rely on a separate api to cancel the action, i think both initiating the request and read stream are actionss performed by an initiator that can be aborted. i will send you the gist soon.","msgtype":"m.text"},"ts":1438250115000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"hgl: yeah, if we're going to speak in terms of what's easy to \"reason about\", I'd like to see code","msgtype":"m.text"},"ts":1438250191000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA, i think this is one way: https://gist.github.com/hgl/6778051c1386dde04ecc","msgtype":"m.text"},"ts":1438250661000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"How are static interface members defined in IDL? such as Node.ELEMENT_NODE","msgtype":"m.text"},"ts":1438250669000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"JoWie, `const`","msgtype":"m.text"},"ts":1438250760000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"interface Node","msgtype":"m.text"},"ts":1438250784000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":" : EventTarget {","msgtype":"m.text"},"ts":1438250784000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"  const unsigned short ELEMENT_NODE = 1;","msgtype":"m.text"},"ts":1438250784000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"ah thanks","msgtype":"m.text"},"ts":1438250852000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"hgl: so request.abort would abort either the request or body stream?","msgtype":"m.text"},"ts":1438250969000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA, request.abort should only abort the request, once the request is aborted, fetch().then(callback), callback shouldn't not be called, since the promise is now rejected.","msgtype":"m.text"},"ts":1438251119000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"hgl: so how do I cancel req.json()","msgtype":"m.text"},"ts":1438251163000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"you mean res.json()?","msgtype":"m.text"},"ts":1438251188000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"JoWie: they are deprecated","msgtype":"m.text"},"ts":1438251189000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JoWie: so please don't invent new ones","msgtype":"m.text"},"ts":1438251197000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JoWie: really needs to be legacyconst","msgtype":"m.text"},"ts":1438251207000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yes i just saw that","msgtype":"m.text"},"ts":1438251231000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"JoWie: when in doubt, use enum","msgtype":"m.text"},"ts":1438251273000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i assume anything \"static\" is a no go?","msgtype":"m.text"},"ts":1438251284000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"No, static methods/attributes are fine","msgtype":"m.text"},"ts":1438251303000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"JoWie: no, there's static properties and methods","msgtype":"m.text"},"ts":1438251304000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA, i'm sorry i never used res.json(), what does it do? get json from request? what does that mean?","msgtype":"m.text"},"ts":1438251306000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"*req.json()","msgtype":"m.text"},"ts":1438251316000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"ah, that is great","msgtype":"m.text"},"ts":1438251319000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"JoWie: e.g., https://notifications.spec.whatwg.org/#notification","msgtype":"m.text"},"ts":1438251335000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what is the process for suggesting a new feature (DOM) ? just open an issue on github?","msgtype":"m.text"},"ts":1438251555000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"JakeA, can we use some general example? i don't use fetch extensively, don't understand all its details. but with the ability to abort the action with a separating api and the ability to deregister the callbacks added to a promise. what usages do you think are still not covered but needed?","msgtype":"m.text"},"ts":1438251597000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"s/usage/use cases/","msgtype":"m.text"},"ts":1438251645000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"JoWie: yeah, though be sure to read the WHATWG FAQ entry on new features too, if you haven't","msgtype":"m.text"},"ts":1438251967000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hgl: res.json reads the body stream, parses as json, and resolves with a JS object representing the JSON response","msgtype":"m.text"},"ts":1438252145000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA, oh, i see, req.json reads POST data. then req.abortData() to abort stream and req.abort() to abort request, I don't think the abort apis matter here.","msgtype":"m.text"},"ts":1438252173000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"I did mean res.json","msgtype":"m.text"},"ts":1438252191000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"as long as they are separate from the promise, and only exposed by the initiator.","msgtype":"m.text"},"ts":1438252203000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"So fetch(url).then(r => r.json()) returns a promise that resolves with the JS object","msgtype":"m.text"},"ts":1438252218000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"hgl: so I'd have to call two methods to cancel that?","msgtype":"m.text"},"ts":1438252250000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA, i probably missed something. you want to do two different things, abort the request, and abort the reading of post data, what's wrong with two methods for two different things?","msgtype":"m.text"},"ts":1438252317000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"hgl: no it's reading the response data, not the request data","msgtype":"m.text"},"ts":1438252341000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"req.json() is reading request data, res.json() is reading response data","msgtype":"m.text"},"ts":1438252376000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"So fetch(url).then(r => r.json()) is \"make a request to url, then read the response body as JSON\"","msgtype":"m.text"},"ts":1438252419000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yes, so what do you want to abort?","msgtype":"m.text"},"ts":1438252434000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"request data is post data right?","msgtype":"m.text"},"ts":1438252501000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"having meal, brb.","msgtype":"m.text"},"ts":1438252522000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"hgl: the request data is irrelevant here. I want to abort the request or reading the response, whatever's still happening.","msgtype":"m.text"},"ts":1438252557000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA, request.abort()/ response.abort()","msgtype":"m.text"},"ts":1438252606000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"annevk: i will","msgtype":"m.text"},"ts":1438252682000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"hgl: ah, so I'd have to call both?","msgtype":"m.text"},"ts":1438252684000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA, if you want to abort both, maybe, but i think abort the request makes fetch return a rejected promised, so you won't have access to response i think.","msgtype":"m.text"},"ts":1438252836000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"brb","msgtype":"m.text"},"ts":1438252901000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"https://twitter.com/codinghorror/status/626638134617485312 reminds me more of Theme Hospital than anything else","msgtype":"m.text"},"ts":1438253021000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA, i might be wrong about returning a rejected promise. the request can be aborted later than the fetch is returned. but what about exposing a method like request.deepAbort() that when called, aborts the corresponding response too if it's still pending. However, my point is that work should not be done to investigate how promise.cancel() should work, but to design apis to abort the initiator's action directly.","msgtype":"m.text"},"ts":1438254500000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"however, i think promise.cancel is actually a pretty good name to deregister callbacks. promise.cancel(res, rej) returns nothing, and won't call res and rej when promise is either resolved or rejected. maybe a corresponding .uncatch() too?","msgtype":"m.text"},"ts":1438255013000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"i mean promise.then(res, rej); promise.cancel(res, rej); works like promise.then(res, rej) never happened. although you can create child promises with promise.then(res, rej).then(); promise.cancel(res, rej), but they will never be resolved / rejected.","msgtype":"m.text"},"ts":1438255254000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"hgl: gotta run, but thanks for the feedback. Will ping you when we have something further to show. Another possibility is go make promise cancelability opt-in via fetch options","msgtype":"m.text"},"ts":1438255255000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA, great, nice talking to you. :)","msgtype":"m.text"},"ts":1438255286000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"terinjokes:","msgtype":"m.text"},"ts":1438256688000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"would you share your version?","msgtype":"m.text"},"ts":1438256693000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"https://twitter.com/reybango/status/626540556630540288 o_O","msgtype":"m.text"},"ts":1438259692000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Apple and Microsoft folks having some kind of pissing context on Twitter","msgtype":"m.text"},"ts":1438259744000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah, over prefixes, joy","msgtype":"m.text"},"ts":1438259757000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, what could possibly go wrong, discussing a inflammatory topic on the worst communication medium yet invented","msgtype":"m.text"},"ts":1438259908000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"oh fancy annevk","msgtype":"m.text"},"ts":1438261993000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"yay for promises :)","msgtype":"m.text"},"ts":1438261996000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"let me make that change in Blink","msgtype":"m.text"},"ts":1438262006000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"beverloo: it's basically identical to https://storage.spec.whatwg.org/#dom-storagemanager-requestpersistent except for deprecatedCallback (and therefore the task queueing)","msgtype":"m.text"},"ts":1438262052000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: it seems res.json() aborting might also interact with res.body.cancel() once streams land?  not sure you can do res.body.cancel() if the stream is already locked by .json()","msgtype":"m.text"},"ts":1438264950000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: ^^^","msgtype":"m.text"},"ts":1438264969000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: Do you know which part of IDNA is supposed to add the xn-- prefix? Neither Punycode or UTS46#ToASCII seem to do it","msgtype":"m.text"},"ts":1438266962000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"looks","msgtype":"m.emote"},"ts":1438267004000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: o_O","msgtype":"m.text"},"ts":1438267130000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"looks to me like possibly a bug in ToASCII","msgtype":"m.text"},"ts":1438267131000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: use the form at the bottom of http://www.unicode.org/reporting.html and record the URL you get back","msgtype":"m.text"},"ts":1438267163000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: you might want to file an issue against URL too just so we track it until it's fixed there","msgtype":"m.text"},"ts":1438267191000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JoWie: Re: how are static interface members defined in IDL, it's by doing the API right and not using statics for constants (use enums instead)","msgtype":"m.text"},"ts":1438267195000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: http://www.unicode.org/reports/tr46/#Processing decodes punycode when it finds a xn-- prefix","msgtype":"m.text"},"ts":1438267218000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"TabAtkins:","msgtype":"m.text"},"ts":1438267218000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"TabAtkins: yea it was not intended for an enum","msgtype":"m.text"},"ts":1438267227000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"the reason why i was asking i mean","msgtype":"m.text"},"ts":1438267234000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"annevk: will do","msgtype":"m.text"},"ts":1438267242000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"annevk, \"It is much nicer and has no side effects, such as playing sounds or vibrating the device again.\" depends on the renotify flag","msgtype":"m.text"},"ts":1438267351000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"beverloo: hmm good point, file a bug?","msgtype":"m.text"},"ts":1438267424000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'll send a PR","msgtype":"m.text"},"ts":1438267431000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"beverloo: I guess renotify is not actually defined then","msgtype":"m.text"},"ts":1438267432000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think renotify is fairly clear on what it does","msgtype":"m.text"},"ts":1438267452000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"\"When set indicates that the end user should be alerted after the replace steps have run.\"","msgtype":"m.text"},"ts":1438267468000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"it's just that sentence that should clarify that said behavior may be changed","msgtype":"m.text"},"ts":1438267478000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"well ideally replace steps say something about it too","msgtype":"m.text"},"ts":1438267500000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"e.g. invoke some algorithm that the display steps use too","msgtype":"m.text"},"ts":1438267519000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and that algorithm takes care of sounds, vibration, etc.","msgtype":"m.text"},"ts":1438267528000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and for the replace steps the algorithm is conditional","msgtype":"m.text"},"ts":1438267544000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm, yes. I guess the UA doesn't have to fetch the \"sound\" resource for replacements if renotify=false","msgtype":"m.text"},"ts":1438267590000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"(assuming it knows something's about to be replaced)","msgtype":"m.text"},"ts":1438267622000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"hmm yeah","msgtype":"m.text"},"ts":1438267698000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I’m on http://www.unicode.org/cgi-bin/processErratum.pl , it doesn’t give anoher URL","msgtype":"m.text"},"ts":1438267764000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"It just says \"Your message has been posted to the Unicode office staff.\"","msgtype":"m.text"},"ts":1438267783000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1438267805000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I thought last time I got some URL where my feedback was located","msgtype":"m.text"},"ts":1438267822000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but perhaps that's after they email you back and say your feedback has been recorded","msgtype":"m.text"},"ts":1438267835000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it's been a while","msgtype":"m.text"},"ts":1438267840000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I used \"Type of Message: Error Report (Standard, Data files, etc)\"","msgtype":"m.text"},"ts":1438267863000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"seems correct","msgtype":"m.text"},"ts":1438267926000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: https://github.com/whatwg/url/issues/53","msgtype":"m.text"},"ts":1438268020000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"would have been nice if that was issue 46","msgtype":"m.text"},"ts":1438268077000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"eh :)","msgtype":"m.text"},"ts":1438268088000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"annevk, #50. I have some time to work on a PR.","msgtype":"m.text"},"ts":1438268112000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"beverloo: ta","msgtype":"m.text"},"ts":1438268127000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: would element.setAttribute(\"ontouchmove\", \"event.preventDefault()\") also throw? setting attributes never throws...","msgtype":"m.text"},"ts":1438268974000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: that's a good point, I guess we'd have to make adding the listener a no-op though","msgtype":"m.text"},"ts":1438269819000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: would make for a somewhat funky attribute...","msgtype":"m.text"},"ts":1438269830000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"this mayCancel thing is harder than it first seemed :)","msgtype":"m.text"},"ts":1438269872000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"gotta go home!","msgtype":"m.text"},"ts":1438269886000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: mayCancel -> passive","msgtype":"m.text"},"ts":1438269980000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: but yeah, it's far from trivial","msgtype":"m.text"},"ts":1438270009000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: for new event APIs btw, https://github.com/zenparsing/es-observable/blob/master/dom-event-dispatch.md seems promising","msgtype":"m.text"},"ts":1438270057000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: any feedback to w3c Bug 28920?","msgtype":"m.text"},"ts":1438270672000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"also wonders how to get any fixes to HTML spec atm","msgtype":"m.emote"},"ts":1438270690000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"does anyone recall if wpt has any good consistent testing for structure clone use in various cases","msgtype":"m.text"},"ts":1438272185000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I assume no","msgtype":"m.text"},"ts":1438272190000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: There are a few things https://github.com/w3c/web-platform-tests/tree/e5e8fb9ebc4d5b2220abff5679fa0781c01f2c05/workers/semantics/structured-clone","msgtype":"m.text"},"ts":1438272594000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"https://github.com/w3c/web-platform-tests/blob/e5e8fb9ebc4d5b2220abff5679fa0781c01f2c05/old-tests/submission/Microsoft/structuredclone/structuredclone_0.html","msgtype":"m.text"},"ts":1438272642000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"both seem to be only about worker + SC","msgtype":"m.text"},"ts":1438272859000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but there is also window<->window messaging","msgtype":"m.text"},"ts":1438272870000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and push/replaceState etc","msgtype":"m.text"},"ts":1438272880000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"wanderview: can you file that question on GitHub so I don't forget it? TC39 week this week.","msgtype":"m.text"},"ts":1438273807000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: https://github.com/yutakahirano/fetch-with-streams/issues/51","msgtype":"m.text"},"ts":1438276374000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: thanks for taking up that whatwg/streams video issue, it seems really interesting from skimming during the meeting and i'm sad i haven't been able to really get into it","msgtype":"m.text"},"ts":1438283627000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"is there any implementation of the legacy colour parsing rules in Python?","msgtype":"m.text"},"ts":1438284282000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic: I don't think I understand what that guy wants... going to wait until you can read it","msgtype":"m.text"},"ts":1438284901000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk or others: Do we have a convention for algorithms that take a lot of parameters? I have a couple candidate formats at https://rawgit.com/jyasskin/web-bluetooth-1/removed-attributes/index.html#dom-bluetoothgattservice-getcharacteristic.","msgtype":"m.text"},"ts":1438285228000,"senderName":"jyasskin_w","senderId":"jyasskin_w@irc"},
{"content":{"body":"I'm leaning toward the function call/blockquote style.","msgtype":"m.text"},"ts":1438285313000,"senderName":"jyasskin_w","senderId":"jyasskin_w@irc"},
{"content":{"body":"jyasskin_w: I suspect we haven't really established a winning convention yet","msgtype":"m.text"},"ts":1438285364000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin_w: well I know, not suspect","msgtype":"m.text"},"ts":1438285373000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Do you have a preference? :)","msgtype":"m.text"},"ts":1438285383000,"senderName":"jyasskin_w","senderId":"jyasskin_w@irc"},
{"content":{"body":"jyasskin_w: what I suspect is that some future iteration of the style in https://streams.spec.whatwg.org/ will be dictated by IDL","msgtype":"m.text"},"ts":1438285420000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin_w: which I guess argues for your second example, minus the named parameters","msgtype":"m.text"},"ts":1438285453000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: meh... no IDL types there, so not as applicable to jyasskin_w's question","msgtype":"m.text"},"ts":1438285469000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(respec has kind of terrible FOUC btw)","msgtype":"m.text"},"ts":1438285480000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Re FOUC: yeah, I'm probably going to switch to Bikeshed next week.","msgtype":"m.text"},"ts":1438285517000,"senderName":"jyasskin_w","senderId":"jyasskin_w@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1438285524000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: nevertheless, still seems like the most likely style that we can adopt for IDL","msgtype":"m.text"},"ts":1438285554000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: but I guess time will tell","msgtype":"m.text"},"ts":1438285563000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Streams doesn't have many functions with >2 parameters either, so maybe I can argue that we should allow named parameters. :)","msgtype":"m.text"},"ts":1438285563000,"senderName":"jyasskin_w","senderId":"jyasskin_w@irc"},
{"content":{"body":"It is the names that push for the multi-line format. I can remove them if folks prefer it.","msgtype":"m.text"},"ts":1438285631000,"senderName":"jyasskin_w","senderId":"jyasskin_w@irc"},
{"content":{"body":"jyasskin_w: extreme example would be Fetch I guess, which requires passing in an object","msgtype":"m.text"},"ts":1438285732000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin_w: and then the object consists of dozens of members","msgtype":"m.text"},"ts":1438285751000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah. This is weird again because some of the arguments in this BT algorithm are not JS objects. I guess I'll go with the Streams style + named parameters for now, and I can change it if IDL converges to something else.","msgtype":"m.text"},"ts":1438286056000,"senderName":"jyasskin_w","senderId":"jyasskin_w@irc"},
{"content":{"body":"Thanks","msgtype":"m.text"},"ts":1438286156000,"senderName":"jyasskin_w","senderId":"jyasskin_w@irc"},
{"content":{"body":"Hi all~","msgtype":"m.text"},"ts":1438286991000,"senderName":"Lorin","senderId":"Lorin@irc"},
{"content":{"body":"Since background-position-x / y isn't heavily supported are there talks re: allowing inherit/initial in background-position when mixed with specific measurements?","msgtype":"m.text"},"ts":1438287022000,"senderName":"Lorin","senderId":"Lorin@irc"},
{"content":{"body":"eg. background-position:-32px inherit;","msgtype":"m.text"},"ts":1438287031000,"senderName":"Lorin","senderId":"Lorin@irc"},
{"content":{"body":"not quite WhatWG material, but does anyone know who I should talk to to try to advance this? https://datatracker.ietf.org/doc/draft-combs-http-indeterminate-range/","msgtype":"m.text"},"ts":1438295556000,"senderName":"rcombs","senderId":"rcombs@irc"},
{"content":{"body":"rcombs: find out if it's been discussed on any IETF WG mailing list for a start (there's a search list function now!)","msgtype":"m.text"},"ts":1438296147000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"rcombs: try and at least skim what's gone on","msgtype":"m.text"},"ts":1438296191000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: I've had some conversation about it on the HTTP WG list, but it's kinda just sat there since April","msgtype":"m.text"},"ts":1438296205000,"senderName":"rcombs","senderId":"rcombs@irc"}
]