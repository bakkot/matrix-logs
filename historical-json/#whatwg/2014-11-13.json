[
{"content":{"body":"MikeSmith, yeah I'm working on that","msgtype":"m.text"},"ts":1415837430000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: nice","msgtype":"m.text"},"ts":1415837854000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Focus-on-click isn’t quite cross-platform/browser consistent :-(  https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#Clicking_and_focus https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#Clicking_and_focus","msgtype":"m.text"},"ts":1415841480000,"senderName":"cvrebert","senderId":"cvrebert@irc"},
{"content":{"body":"  ","msgtype":"m.text"},"ts":1415841536000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"oofs","msgtype":"m.text"},"ts":1415841541000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Ah, hello! Would you happen to know if there’s a reason why the CSS validator isn’t on GitHub?","msgtype":"m.text"},"ts":1415841741000,"senderName":"cvrebert","senderId":"cvrebert@irc"},
{"content":{"body":"hey cvrebert","msgtype":"m.text"},"ts":1415842014000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"dunno why not","msgtype":"m.text"},"ts":1415842018000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"looks","msgtype":"m.emote"},"ts":1415842022000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"cvrebert: btw the CSS validator code is ancient crufty stuff. I really needs to be rewritten","msgtype":"m.text"},"ts":1415842056000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"cvrebert: https://github.com/w3c/css-validator","msgtype":"m.text"},"ts":1415842082000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Ah, so http://jigsaw.w3.org/css-validator/about.html#code is just way outdated then","msgtype":"m.text"},"ts":1415842152000,"senderName":"cvrebert","senderId":"cvrebert@irc"},
{"content":{"body":"ah yeah","msgtype":"m.text"},"ts":1415842166000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"lemm see if I can redirect that","msgtype":"m.text"},"ts":1415842261000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"If http://www.w3.org/Bugs/Public/buglist.cgi?product=CSSValidator wasn’t an apparent blackhole, I would gladly file a bug about it..","msgtype":"m.text"},"ts":1415842360000,"senderName":"cvrebert","senderId":"cvrebert@irc"},
{"content":{"body":"cvrebert: yeah there's nobody been working the CSS validator code for quite a while now. It needs a new owner","msgtype":"m.text"},"ts":1415842471000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"cvrebert: OK fwiw I just set up a redirect to github from that old \"browse the code online\" link","msgtype":"m.text"},"ts":1415843217000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Progress!","msgtype":"m.text"},"ts":1415843234000,"senderName":"cvrebert","senderId":"cvrebert@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1415843257000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"It has taken me a while to realize that Chrome doesn’t use the fulfilled keyword to describe fulfilled promises, e.g. devtools showing me Promise {[[PromiseStatus]]: \"resolved\", [[PromiseValue]]: \"p1-resolve-value\"}","msgtype":"m.text"},"ts":1415849524000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"And I suppose it doesn’t matter, since it is internal. It was just throwing me off, as everywhere else there is no “resolved” state.","msgtype":"m.text"},"ts":1415849574000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"it just means it's fulfilled with a resolved value","msgtype":"m.text"},"ts":1415849613000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"slightly more specific than \"fulfilled\"","msgtype":"m.text"},"ts":1415849627000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"as opposed to fulfilled with a rejected value","msgtype":"m.text"},"ts":1415849644000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: hmm, but I thought that was called “settled” http://www.html5rocks.com/en/tutorials/es6/promises/","msgtype":"m.text"},"ts":1415850075000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"hmm, yeah my lingo is probably out of date by now","msgtype":"m.text"},"ts":1415850272000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"> A promise is resolved if it is settled or if it has been \"locked in\" to match the state of another promise. Attempting to resolve or reject a resolved promise has no effect. A promise is unresolved if it is not resolved. An unresolved promise is always in the pending state. A resolved promise may be pending, fulfilled or rejected.","msgtype":"m.text"},"ts":1415850312000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"so in that sense, its pretty vague :p","msgtype":"m.text"},"ts":1415850373000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"“A promise is unresolved if it is not resolved” beautiful.","msgtype":"m.text"},"ts":1415850493000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"MikeSmith: are you keen on Promise lingo?","msgtype":"m.text"},"ts":1415850783000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"> The first argument fulfills the promise, the second argument rejects it — but the first argument is called resolve and the second argument is called reject. nonsense!","msgtype":"m.text"},"ts":1415850997000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"JonathanNeal: keen on it? meaning, do I like it?","msgtype":"m.text"},"ts":1415852884000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Can you explain the difference between fulfill, resolve, and reject as it relates to the status of promises and the methods we use to trigger them?","msgtype":"m.text"},"ts":1415852923000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"*as it relates to the states of a Promise, and as it relates to the arguments commonly described as triggering these states?","msgtype":"m.text"},"ts":1415853075000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"There’s another mark against the Chrome devtool report. It calls the state the PromiseStatus.","msgtype":"m.text"},"ts":1415853144000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"based on my reading of the spec I was just wrong before, although I could have sworn `fulfilled` had been used to mean any non-pending state before","msgtype":"m.text"},"ts":1415853191000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"maybe i","msgtype":"m.text"},"ts":1415853194000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"am just crazy","msgtype":"m.text"},"ts":1415853196000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"or human and misremembering :)","msgtype":"m.text"},"ts":1415853214000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i guess domenic is probably sleeping by now but maybe he'd have something to say about it","msgtype":"m.text"},"ts":1415853298000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"JonathanNeal: yeah Domenic would be the one to ask, if you want an insightful answer","msgtype":"m.text"},"ts":1415853374000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I’m probably extra confused because the documentation is mixed up (or seems that way). MDN docs call something an “executor” when other docs call it a “resolver”, and Chrome calls something a “PromiseStatus” when other docs call it a “state”. Add that to “wait, does fulfill means it passed succesfully or just finished? or is that what","msgtype":"m.text"},"ts":1415853479000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"resolved means?”","msgtype":"m.text"},"ts":1415853480000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"status and state don't seem too bad to me :p arent they basically synonyms?","msgtype":"m.text"},"ts":1415853560000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Thanks caitp, MikeSmith. Sorry if I sounded like a crazy person walking the streets pulling their hair","msgtype":"m.text"},"ts":1415853560000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"heh, no worries","msgtype":"m.text"},"ts":1415853642000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"caitp: it doesn’t seem to bad until Chrome’s PromiseStatus returns something that is never referred to as a state, “resolved”. The only states are “pending”, “fulfilled”, and “rejected”.","msgtype":"m.text"},"ts":1415853643000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"if you sounded like a crazy person I'd be relieved i'm not the only one :p kidding kidding","msgtype":"m.text"},"ts":1415853656000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"So I’m just pretending that “resolved” means “not pending, either fulfilled or rejected”, and we should be writing promises like so, new Promise(function (fulfill, reject) { /* magic */ });","msgtype":"m.text"},"ts":1415853748000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"i think you can pretty much write a promise however you want, the bindings don't matter much. but \"resolve\" and \"reject\" would be the common ones","msgtype":"m.text"},"ts":1415853822000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"most people aren't going to actually read the spec so it's only really going to matter what it means to them and their own vocabulary","msgtype":"m.text"},"ts":1415853898000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: yea, as long as they’re consistent, e.g. `.then(onResolved, onRejected)` or working alone.","msgtype":"m.text"},"ts":1415854148000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"you could call them \\u1d19esolve if you wanted","msgtype":"m.text"},"ts":1415854366000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"people would be mad if you did, but you could do it","msgtype":"m.text"},"ts":1415854412000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"http://unicodesnowmanforyou.com/","msgtype":"m.text"},"ts":1415854506000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"that is my new favourite codepoint","msgtype":"m.text"},"ts":1415854599000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: ☃","msgtype":"m.text"},"ts":1415868274000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hixie: it's editorial","msgtype":"m.text"},"ts":1415869750000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i decided to check g+. latest news is annevk \"Fullscreen for the web. Thoughts?﻿\" from Oct 15, 2011","msgtype":"m.text"},"ts":1415869865000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: I'm still waiting :p","msgtype":"m.text"},"ts":1415869899000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"or it seems it's not the latest, just at the top","msgtype":"m.text"},"ts":1415869947000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: so on \"no-cors\" vs \"nocors\", what's the precedent for nospacesorcamelcase?","msgtype":"m.text"},"ts":1415878007000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: arraybuffer","msgtype":"m.text"},"ts":1415879707000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: but I guess lowercase and sometimes a hyphen is fine","msgtype":"m.text"},"ts":1415879717000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So when does js get an enum type? :p","msgtype":"m.text"},"ts":1415879856000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk, if you're okay with my replies in https://critic.hoppipolla.co.uk/r/3127 , please resolve the issues :)","msgtype":"m.text"},"ts":1415880224000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"\"Sign in\" ugh","msgtype":"m.text"},"ts":1415881588000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: could we do it in a IDL-compatible way?","msgtype":"m.text"},"ts":1415881601000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1415881632000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: introduce actual enums that are compatible with IDL enums","msgtype":"m.text"},"ts":1415882059000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't know, but I would imagine so","msgtype":"m.text"},"ts":1415882224000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"zcorpan, r? https://critic.hoppipolla.co.uk/r/3126","msgtype":"m.text"},"ts":1415883338000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: done","msgtype":"m.text"},"ts":1415883401000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Takk","msgtype":"m.text"},"ts":1415883426000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: bit confused about https://github.com/slightlyoff/ServiceWorker/issues/560#issuecomment-62886149 - are you fine with the current model where security is based on the response?","msgtype":"m.text"},"ts":1415884374000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I think it is a fundamentally better model","msgtype":"m.text"},"ts":1415884391000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: completely agree","msgtype":"m.text"},"ts":1415884422000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: a synthetic response is never opaque so basically can always be read from","msgtype":"m.text"},"ts":1415884450000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: so is basically always same-origin","msgtype":"m.text"},"ts":1415884456000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yep. The current model works fine. If we move to a redirect model it gets really confusing & full of exception cases","msgtype":"m.text"},"ts":1415884484000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: ta. If moz see no benefit in this then that's all the more reason push back","msgtype":"m.text"},"ts":1415884575000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: tbh I kinda wish CSP was response based too","msgtype":"m.text"},"ts":1415884595000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I think Mike West and I discussed this and found we needed to adjust CSP to check on both ends","msgtype":"m.text"},"ts":1415884868000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: hasn't happened yet though","msgtype":"m.text"},"ts":1415884879000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, I remember that, or have had a similar conversation myself","msgtype":"m.text"},"ts":1415884898000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: there's also still some desire for strong coupling between request context and response","msgtype":"m.text"},"ts":1415884906000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: so you can do fetch(... {context:\"image\"}) and the response object is tainted in such a way it can only be used in one place","msgtype":"m.text"},"ts":1415884937000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: similar to what event.default() allows for, but with caching capabilities","msgtype":"m.text"},"ts":1415884965000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: good for prioritisation too","msgtype":"m.text"},"ts":1415885217000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: for the no CORS case however it does seem like changes are required for <img>, <script>, etc.","msgtype":"m.text"},"ts":1415885289000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: which is probably why Chrome is hesitant and Firefox might be too","msgtype":"m.text"},"ts":1415885302000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: how so?","msgtype":"m.text"},"ts":1415885332000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I guess this might be true for the CORS case as well, depending on how getRequestHeader() checks are implemented","msgtype":"m.text"},"ts":1415885341000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: <img src/test> is no CORS, if it's same origin it's not opaque and you can paint and export from <canvas>","msgtype":"m.text"},"ts":1415885374000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: if the SW returns a cross-origin images however, you should no longer be able to export from <canvas>","msgtype":"m.text"},"ts":1415885388000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: right, so it's based on the taint flag of the response","msgtype":"m.text"},"ts":1415885405000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: traditionally the browser would have noticed that as a redirect, but due to SW it won't and so might think it's same origin and still pain and export from <canvas> and have a security hole","msgtype":"m.text"},"ts":1415885429000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"paint*","msgtype":"m.text"},"ts":1415885438000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I suspect that's the case they're worried about","msgtype":"m.text"},"ts":1415885454000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA, annevk: Any opinions on https://critic.hoppipolla.co.uk/showfile?path=apisample16.html&review=2005&sha1=9d1f8984e3b37285f5d117a785b347a28d446006 ?","msgtype":"m.text"},"ts":1415885516000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Example test for service workers","msgtype":"m.text"},"ts":1415885524000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yeah, same goes for CSS DOM access","msgtype":"m.text"},"ts":1415885531000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Does it seem like a sane API?","msgtype":"m.text"},"ts":1415885533000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"There's a somewhat similar case with XHR and mode CORS; if the request URL was / but the response was actually CORS, would the browser let it read headers it is not allowed to?","msgtype":"m.text"},"ts":1415885564000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Per Fetch with its internal response model and such it wouldn't... but...","msgtype":"m.text"},"ts":1415885584000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: I like how you recreated callback-hell with promises","msgtype":"m.text"},"ts":1415885725000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: can you have asserts within a promise test?","msgtype":"m.text"},"ts":1415885786000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: *I* didn't do anything","msgtype":"m.text"},"ts":1415885855000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: I don't see anything obviously wrong, but you really want JakeA's opinion here","msgtype":"m.text"},"ts":1415885865000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i.e. I didn't create this API, I'm just reviewing it","msgtype":"m.text"},"ts":1415885881000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Which is difficult…","msgtype":"m.text"},"ts":1415885886000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"JakeA: Yeah, so see https://critic.hoppipolla.co.uk/showfile?path=apisample13.html&review=2005&sha1=9d1f8984e3b37285f5d117a785b347a28d446006 for examples of the promise_test function","msgtype":"m.text"},"ts":1415885947000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: what am I reviewing here? Am I reviewing correct use of ServiceWorker or use of promise_test?","msgtype":"m.text"},"ts":1415885981000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: Although of course the original design of testharness.js is my fault and might not be what you would design today","msgtype":"m.text"},"ts":1415885992000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"JakeA: Both of those sound useful. Also if this seems like it's going to be a sane foundation for writing promise/service-worker based tests in the future","msgtype":"m.text"},"ts":1415886054000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"JakeA: The top level review is https://critic.hoppipolla.co.uk/r/2005 if you want more context","msgtype":"m.text"},"ts":1415886076000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Gotcha, cheers!","msgtype":"m.text"},"ts":1415886083000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"jgraham: why when under commits I click [full] do I have to confirm again I want to see everything?","msgtype":"m.text"},"ts":1415886214000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ask jl :p But I think the idea is that [Full] means \"fully squashed\", but you still might not want to see every file","msgtype":"m.text"},"ts":1415886261000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: is it not jw now?","msgtype":"m.text"},"ts":1415886297000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nope","msgtype":"m.text"},"ts":1415886321000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Some things change, some stay the same","msgtype":"m.text"},"ts":1415886429000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: SW code looks solid. Had to double check updatefound always fires after register resolves, which is does. How does fetch_tests_from_worker work?","msgtype":"m.text"},"ts":1415886714000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"i haven't looked at the SW thing, but how does it relate to https://critic.hoppipolla.co.uk/r/1996 ?","msgtype":"m.text"},"ts":1415887038000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"JakeA: I haven't reviewed all the implementation details, but the basic idea is that test objects in the worker send their results to the main window over message ports. fetch_tests_from_worker sets up that machinary.","msgtype":"m.text"},"ts":1415887142000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"makes sense","msgtype":"m.text"},"ts":1415887211000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"zcorpan: Interesting question. I think the answer is that it replaces it, although there are some ideas there which could perhaps be ported to this new scheme","msgtype":"m.text"},"ts":1415887213000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: that setup might not work if the SW is just servicing a worker","msgtype":"m.text"},"ts":1415887252000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(everyone always forgets about that case :( )","msgtype":"m.text"},"ts":1415887272000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(I suspect it'll be buggy as hell)","msgtype":"m.text"},"ts":1415887285000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Interesting. So is the setup window -> worker -> service worker? Or is there no window at all?","msgtype":"m.text"},"ts":1415887306000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: there's likely a window","msgtype":"m.text"},"ts":1415887326000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"likely\"?","msgtype":"m.text"},"ts":1415887331000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: there's some not well defined exception for SharedWorker where when you navigate it may or may not be associated with something","msgtype":"m.text"},"ts":1415887372000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: but the more important point is that a SW can service a worker without servicing that worker's window","msgtype":"m.text"},"ts":1415887435000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"OK, it seems like a solvable problem, as long as there is actually a Window somewhere","msgtype":"m.text"},"ts":1415887435000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Because the worker can pass the result messages up to the Window","msgtype":"m.text"},"ts":1415887465000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"in the shared worker navigate case you could prolly test that with a nested browsing context that navigates and the top-level negotiating all the details...","msgtype":"m.text"},"ts":1415887475000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"although that way you'd never test the top-level...","msgtype":"m.text"},"ts":1415887484000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: Thanks for your help","msgtype":"m.text"},"ts":1415887606000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"no worries","msgtype":"m.text"},"ts":1415887616000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: sorry for issue 550 :-\\","msgtype":"m.text"},"ts":1415892446000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: ALL YOUR FAULT :D","msgtype":"m.text"},"ts":1415892460000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Labouring over a reply, don't know what to think anymore","msgtype":"m.text"},"ts":1415892485000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: at this point I don't know if a change is possible given ship dates, etc","msgtype":"m.text"},"ts":1415892506000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"or desirable","msgtype":"m.text"},"ts":1415892521000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: do you still think they're useful for responses?","msgtype":"m.text"},"ts":1415892524000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: are what still useful?","msgtype":"m.text"},"ts":1415892535000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: consuming by default","msgtype":"m.text"},"ts":1415892548000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: If we shipped with .clone, we could make it a no-op the next version, eventually deprecate it. I'm not too worried there","msgtype":"m.text"},"ts":1415892621000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I guess it's useless for requests because they're buffered by default anyway because of redirects within fetch","msgtype":"m.text"},"ts":1415892637000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: so to be clear... I was thinking leave .clone() in place, but say fetch() and cache.put() automatically call it for you","msgtype":"m.text"},"ts":1415892652000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"so content can still clone() in order to call the stream helpers multiple times","msgtype":"m.text"},"ts":1415892684000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"(although if you were streaming a video, you'd want to avoid buffering the body even for fetch, but as annevk said that would be optional)","msgtype":"m.text"},"ts":1415892692000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: also, fetch() and cache.put() would still reject if the body was already consumed by something else when the auto-clone() was attempted","msgtype":"m.text"},"ts":1415892728000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: So if I'm storing a 1gb movie into the cache, but also sending to the browser, is auto-clone a problem?","msgtype":"m.text"},"ts":1415892761000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: maybe we leave it with clone() for now and then deprecate as you say later if developers complain","msgtype":"m.text"},"ts":1415892764000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: well, content would have to call clone() anyway, right?","msgtype":"m.text"},"ts":1415892788000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"same effect","msgtype":"m.text"},"ts":1415892792000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"In the current model I'd clone the version going to the browser but use the main one for the cache, so there'd only be buffering if the browser/cache consumed slower than the other","msgtype":"m.text"},"ts":1415892819000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"If I cloned both, there's now an additional response object that *could* have its body read from the start","msgtype":"m.text"},"ts":1415892842000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1415892854000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"everything is terrible","msgtype":"m.text"},"ts":1415892860000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: yea, I see your point","msgtype":"m.text"},"ts":1415892878000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"A super-smart implementation could go \"oh, I'm saving this to cache, so I guess I can get it from there if I need to read-from-start\"","msgtype":"m.text"},"ts":1415892882000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I think that is made more difficult by the \"only goes in cache when its fully consumed\" semantics","msgtype":"m.text"},"ts":1415892919000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"or fully loaded","msgtype":"m.text"},"ts":1415892928000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Or alternately \"this is big so I'm going to buffer on disk rather than memory\". But I guess a disk buffer of 1gb + a cache of 1gb is still a problem","msgtype":"m.text"},"ts":1415892930000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: I'm interested in changing that","msgtype":"m.text"},"ts":1415892952000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Or at least having it as a .match option","msgtype":"m.text"},"ts":1415892960000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I think you have convinced me that we should leave explicit clone as is for v1... and we can introduce auto-clone in the future","msgtype":"m.text"},"ts":1415892974000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"if the API is too clunky","msgtype":"m.text"},"ts":1415892995000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Glad I convinced you. I haven't convinced me :D","msgtype":"m.text"},"ts":1415893000000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"But yeah, it's bad options all around","msgtype":"m.text"},"ts":1415893011000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"We shouldn't feel bad about it, even when we reached out to devs for opinion they were split down the middle","msgtype":"m.text"},"ts":1415893031000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: well, its unclear which is best... but if I understand correctly blink wants to ship soon, so favoring no changes seems better... and we have a path to switch in this direction","msgtype":"m.text"},"ts":1415893051000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"As you say, it's easier to go from manual clone to auto clone than the other way around","msgtype":"m.text"},"ts":1415893058000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1415893067000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: if we go with auto-clone now, we can't switch to explicit clone later","msgtype":"m.text"},"ts":1415893069000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"yea","msgtype":"m.text"},"ts":1415893074000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I'll write this up on the ticket","msgtype":"m.text"},"ts":1415893101000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: thank you!","msgtype":"m.text"},"ts":1415893107000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"sorry for my confusion/waffling","msgtype":"m.text"},"ts":1415893113000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I didn't get much sleep last night","msgtype":"m.text"},"ts":1415893117000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Me neither so we're probably both talking nonsense","msgtype":"m.text"},"ts":1415893133000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"perfect... ship it!","msgtype":"m.text"},"ts":1415893144000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"goes to get more coffee...","msgtype":"m.emote"},"ts":1415893171000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: I like the auto-clone from wanderview","msgtype":"m.text"},"ts":1415893293000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: and then have an option for these cases to not do it, just as we plan for redirects/failure","msgtype":"m.text"},"ts":1415893309000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: having said that, cache.match() prolly doesn't need it since you never need to look at the body there","msgtype":"m.text"},"ts":1415893348000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: so it would only be for cache.put() and we could require .clone() for that, seems somewhat reasonable?","msgtype":"m.text"},"ts":1415893376000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: .match doesn't consume body","msgtype":"m.text"},"ts":1415893511000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"read up on the issue debate","msgtype":"m.emote"},"ts":1415893533000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: See the chat between wanderview & I from 15:27 ^^","msgtype":"m.text"},"ts":1415893555000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Although I'm currently writing a summary","msgtype":"m.text"},"ts":1415893581000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: JakeA talked my off the auto-clone ledge","msgtype":"m.text"},"ts":1415893671000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: I think the pesky thing with all of this is that we already have auto-clone","msgtype":"m.text"},"ts":1415893678000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"^my^me","msgtype":"m.text"},"ts":1415893679000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: we do?","msgtype":"m.text"},"ts":1415893686000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: the 10GiB resource case requires a new feature already","msgtype":"m.text"},"ts":1415893692000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: yes, Fetch does it","msgtype":"m.text"},"ts":1415893696000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: so if you hit a redirect or authentication dialog, you can resubmit the body","msgtype":"m.text"},"ts":1415893712000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: but thats not on content observable objects, right?","msgtype":"m.text"},"ts":1415893718000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"from contents perspective it made one call","msgtype":"m.text"},"ts":1415893730000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yes","msgtype":"m.text"},"ts":1415893736000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: but content might not like the memory bloat if it deals with something large","msgtype":"m.text"},"ts":1415893747000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"to me that seems a consequence of implementing redirects... developers can choose not to host huge things behind redirects","msgtype":"m.text"},"ts":1415893785000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: the problem is that you need to clone before you even know there is a redirect","msgtype":"m.text"},"ts":1415893807000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"true","msgtype":"m.text"},"ts":1415893814000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: you always need to clone, for every fetch","msgtype":"m.text"},"ts":1415893816000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: and potentially multiple times if there's a redirect chain (pathological case)","msgtype":"m.text"},"ts":1415893837000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I go back to me \"everything is terrible\" statement","msgtype":"m.text"},"ts":1415893875000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"^me^my","msgtype":"m.text"},"ts":1415893881000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"can't type today.","msgtype":"m.emote"},"ts":1415893886000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Is that part of a new Lego movie?","msgtype":"m.text"},"ts":1415893893000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"This is why shipping early for something so big is a mistake, I don't think we've had sufficient iteration :-(","msgtype":"m.text"},"ts":1415893935000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is away for a bit","msgtype":"m.emote"},"ts":1415893957000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: given that we can introduce auto-clone for cache later, but not the other way around... I'm inclined to stick with explicit clone() for now","msgtype":"m.text"},"ts":1415893976000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: wanderview: summary at https://github.com/slightlyoff/ServiceWorker/issues/550#issuecomment-62913664","msgtype":"m.text"},"ts":1415894195000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I get the \"not enough iteration\" thing, but also we could sit on this for years and improve it in small ways and not actually benefit the web because it isn't in browsers.","msgtype":"m.text"},"ts":1415894244000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I guess the question is have we had enough iteration to be out of the danger zone","msgtype":"m.text"},"ts":1415894266000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"thanks!","msgtype":"m.text"},"ts":1415894282000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: back to that original issue's question, though... I still think maybe we should not reject/mark used if there is no body... what do you think?","msgtype":"m.text"},"ts":1415894313000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"since there may be cases where content knows a request has no body, etc... var reusableRequest = new Request('./my/url')","msgtype":"m.text"},"ts":1415894383000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: no strong opinion (as I'd always clone for safety).","msgtype":"m.text"},"ts":1415895677000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1415895698000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: tempted to say consume for the consistency","msgtype":"m.text"},"ts":1415895862000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"But can be easily swayed","msgtype":"m.text"},"ts":1415895870000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: the thing that made me think of this was the blink cache tests... they create an array of Request/Response pairs and then populate a cache for each test case... seemed silly to require a clone for all these requests with no body","msgtype":"m.text"},"ts":1415895908000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: like this:  https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/LayoutTests/http/tests/serviceworker/resources/cache-match-worker.js","msgtype":"m.text"},"ts":1415895966000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Hmm true. Will ask a few people what they think, but yeah, no strong opinion","msgtype":"m.text"},"ts":1415896190000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1415896557000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"lunches","msgtype":"m.emote"},"ts":1415896559000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"\"Tab Many Cooks™\" heh","msgtype":"m.text"},"ts":1415897035000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wonder what meme I missed that makes people routinely change their names on Twitter","msgtype":"m.text"},"ts":1415897064000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk - it's particularly funny if you retweet a lot - because twitter doesn't show your @-name if you retweeted something, just retweeted by \"long form name\"","msgtype":"m.text"},"ts":1415897235000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"pretty sure that's why people do it","msgtype":"m.text"},"ts":1415897244000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"tantek: Nah, I just do it because it's funny.","msgtype":"m.text"},"ts":1415901714000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I've almost tweeted \"not cool enough to change my Twitter name daily\" but worried people will think it's a dig","msgtype":"m.text"},"ts":1415901723000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"which to be fair, it is","msgtype":"m.text"},"ts":1415901728000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: The Halloween twittername meme finally got big this year. I've been doing it the last 3 years.","msgtype":"m.text"},"ts":1415901730000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Jenn Schiffer changes her display name every week or so.","msgtype":"m.text"},"ts":1415901747000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"There's a Twitter bot (@js_usernames) that tweets her name changes, in case you miss it. ^_^","msgtype":"m.text"},"ts":1415901764000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"caitp: You have the terminology wrong.  \"resolved\" vs \"unresolved\" are fates - a promise is \"resolved\" if it's fulfilled, rejected, or slaved to another promise; it means that whatever's going to happen to it is already decided, and can't be changed by more calls to the resolver functions.  \"fulfilled\", \"rejected\", and \"pending\" are mutually-exclusive states","msgtype":"m.text"},"ts":1415901965000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"that a promise can be in.","msgtype":"m.text"},"ts":1415901966000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"didn't we cover this last night? :p","msgtype":"m.text"},"ts":1415902018000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I'ts possible - I was skimming scrollback and saw you talking with JonathanNeal about it. If you were corrected, sorry, I missed it.","msgtype":"m.text"},"ts":1415902066000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I didn’t correct anybody. I was and am still a little lost. I hope I didn’t sound like I was correcting anyone.","msgtype":"m.text"},"ts":1415902120000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"but your bit of explanation did help, TabAtkins","msgtype":"m.text"},"ts":1415902180000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Cool.","msgtype":"m.text"},"ts":1415902197000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"resolved\" and \"unresolved\" just mean \"can I still call resolve()/reject() or not\".","msgtype":"m.text"},"ts":1415902230000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(I mean, you can always call them. It's just a no-op if the promise is already resolved.)","msgtype":"m.text"},"ts":1415902247000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i corrected myself","msgtype":"m.text"},"ts":1415902313000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: All right, sorry for the noise then. ^_^","msgtype":"m.text"},"ts":1415902326000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"is there any way in IDL to specify if an attribute is supposed to be enumerable or not? are IDL properties supposed to be \"own\" properties, or do they live on the interface prototype?","msgtype":"m.text"},"ts":1415905259000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"*confused*","msgtype":"m.text"},"ts":1415905261000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: attributes are getters/setters in the prototype","msgtype":"m.text"},"ts":1415905487000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(by default)","msgtype":"m.text"},"ts":1415905514000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"caitp: http://heycam.github.io/webidl/#es-attributes","msgtype":"m.text"},"ts":1415905624000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"seems like blink is doing something wrong here then","msgtype":"m.text"},"ts":1415905693000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i don't think that's really surprising though","msgtype":"m.text"},"ts":1415905698000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i recall this was a known bug","msgtype":"m.text"},"ts":1415905702000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"yes, blink is doing all wrong with attributes","msgtype":"m.text"},"ts":1415905711000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"blink doing wrong thing -> bug gets filed on us because safari (and firefox) do it differently and correctly ;)","msgtype":"m.text"},"ts":1415905731000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"hmm, I thought webkit had the same behavior as blink still","msgtype":"m.text"},"ts":1415905760000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"can't make everyone happy I guess","msgtype":"m.text"},"ts":1415905761000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Blink has been trying for a while to get things fixed, but micro-benchmarks that regress when we do keep stopping us.  We keep trying, though!","msgtype":"m.text"},"ts":1415905782000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"but these properties should be enumerable though right?","msgtype":"m.text"},"ts":1415905872000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"or is that not the case","msgtype":"m.text"},"ts":1415905876000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I don't think they're enumerable normally?","msgtype":"m.text"},"ts":1415905898000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hm","msgtype":"m.text"},"ts":1415905906000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"*WONTFIX-es bug :3*","msgtype":"m.text"},"ts":1415906106000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"that is so satisfying","msgtype":"m.text"},"ts":1415906109000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"\" The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]: true, [[Configurable]]: configurable }, where\" ...","msgtype":"m.text"},"ts":1415906140000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"crazy thought.  so far as i know, there's no way to transition position, but it's something i find myself wanting to do all the time (e.g. let the browser calculate the position of an item in a list, but let me tell that item to move to a fixed position when the user interacts with it)","msgtype":"m.text"},"ts":1415914064000,"senderName":"afa","senderId":"afa@irc"},
{"content":{"body":"it's something that you could carefully fake with JavaScript (though I'm always skeptical of the performance implications of scripting animation in JS)","msgtype":"m.text"},"ts":1415914094000,"senderName":"afa","senderId":"afa@irc"},
{"content":{"body":"afa: This was the idea of \"layout transitions\" that I've been noodling on for a year or two.","msgtype":"m.text"},"ts":1415914118000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"but given that the charter of the standards bodies seems to be \"pave the cowpaths\", how crazy would it be to come up with a spec for transitioning on position","msgtype":"m.text"},"ts":1415914135000,"senderName":"afa","senderId":"afa@irc"},
{"content":{"body":"TabAtkins: good.  i can't imagine this is a novel idea","msgtype":"m.text"},"ts":1415914147000,"senderName":"afa","senderId":"afa@irc"},
{"content":{"body":"Turns out to be too hard to do in purely-declarative syntax to be worth it, but we've come up with some tools that make the JS side way easier to work with.","msgtype":"m.text"},"ts":1415914155000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i'm often surprised at how many things that you intuitively want to do take a shitton of work to implement in browser","msgtype":"m.text"},"ts":1415914166000,"senderName":"afa","senderId":"afa@irc"},
{"content":{"body":"TabAtkins: anythign i should be looking at?","msgtype":"m.text"},"ts":1415914189000,"senderName":"afa","senderId":"afa@irc"},
{"content":{"body":"Yup, there's often a huge cliff you have to fall off before you reach something you can actually tweak.  The EWM is about reducing that.","msgtype":"m.text"},"ts":1415914198000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"EWM?","msgtype":"m.text"},"ts":1415914207000,"senderName":"afa","senderId":"afa@irc"},
{"content":{"body":"afa: Nah, dont' have anything written up publicly.  Just ideas thrown around with my fellow implementors.","msgtype":"m.text"},"ts":1415914217000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Extensible Web Manifesto.","msgtype":"m.text"},"ts":1415914223000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1415914275000,"senderName":"afa","senderId":"afa@irc"},
{"content":{"body":"TabAtkins: nothing you've written up publicly, but any \"tools that make the JS side easier to work with\"?","msgtype":"m.text"},"ts":1415914296000,"senderName":"afa","senderId":"afa@irc"},
{"content":{"body":"I'm referring to APIs we'd build into the browser for it, such as giving the ability to stop an element from painting, and take \"snapshots\" of an element for doing animations with.","msgtype":"m.text"},"ts":1415914328000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"whenever i have to calculate the fixed position of an asset my rolling up all its relative positions inside scroll panes, that feels super brittle","msgtype":"m.text"},"ts":1415914343000,"senderName":"afa","senderId":"afa@irc"},
{"content":{"body":"i'd love to be able to say \"you know where you are, now just transition over to here (in fixed/viewport space)\"","msgtype":"m.text"},"ts":1415914396000,"senderName":"afa","senderId":"afa@irc"},
{"content":{"body":"getBoundingClientRect should give you that","msgtype":"m.text"},"ts":1415914471000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"roc: That doesn't give you useful coordinates to use to tell it to transition to.","msgtype":"m.text"},"ts":1415914513000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But your geometry extensions would.","msgtype":"m.text"},"ts":1415914520000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Since you can translate a screen-space point into an element-space point.","msgtype":"m.text"},"ts":1415914533000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(I can't find those, btw - did they ever make it into a spec?)","msgtype":"m.text"},"ts":1415914547000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1415914548000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"yes and no. The IDL is in CSSOM-views: http://dev.w3.org/csswg/cssom-view/#the-geometryutils-interface","msgtype":"m.text"},"ts":1415914598000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"unfortunately Simon hasn't gotten around to writing the actual text","msgtype":"m.text"},"ts":1415914615000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"in the meantime we have shipped it :-/","msgtype":"m.text"},"ts":1415914633000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"Yay!","msgtype":"m.text"},"ts":1415914650000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I don't feel too bad about it since we actually agreed on the list how they should work","msgtype":"m.text"},"ts":1415914662000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"but we do need the text","msgtype":"m.text"},"ts":1415914674000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"emails Simon","msgtype":"m.emote"},"ts":1415914783000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"https://hacks.mozilla.org/2014/03/introducing-the-getboxquads-api/","msgtype":"m.text"},"ts":1415915099000,"senderName":"afa","senderId":"afa@irc"},
{"content":{"body":"thanks roc and TabAtkins","msgtype":"m.text"},"ts":1415915108000,"senderName":"afa","senderId":"afa@irc"}
]