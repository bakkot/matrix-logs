[
{"content":{"body":"\"typical imprecise-DOM-spec-type\" lol Domenic, if anything is actually undefined you'll file a bug right?","msgtype":"m.text"},"ts":1424674675000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah... I don't think implementers won't get it, but it's just hard for me to trace when the word \"this\" is never actually said and it's all so implicit...","msgtype":"m.text"},"ts":1424674804000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: it's not implicit, but if you still think that DOM would handle JS minutia you haven't really been paying attention... that's IDL","msgtype":"m.text"},"ts":1424674847000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think \"the associated list of event listeners\" is pretty implicit.","msgtype":"m.text"},"ts":1424674880000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"associated to what?","msgtype":"m.text"},"ts":1424674889000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If used as mixin that might be unclear I guess","msgtype":"m.text"},"ts":1424675001000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"File a bug? Is it used as mixin anywhere?","msgtype":"m.text"},"ts":1424675020000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Or when it's on the prototype chain, especially when window vs. window proxy is involved.","msgtype":"m.text"},"ts":1424675022000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"nah as i said i'm sure implementers are fine with it","msgtype":"m.text"},"ts":1424675031000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"just not the level i'm used to","msgtype":"m.text"},"ts":1424675040000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I don't see how WindowProxy matters here. No events are ever dispatched at it.","msgtype":"m.text"},"ts":1424675061000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"consider `window.addEventListener(\"foo\", ...)","msgtype":"m.text"},"ts":1424675098000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That invokes the method with `this` set to the WindowProxy, not to the Window","msgtype":"m.text"},"ts":1424675112000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Does WindowProxy have an associated set of event listeners?","msgtype":"m.text"},"ts":1424675119000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I don't think so, it's not an EventTarget object either","msgtype":"m.text"},"ts":1424675147000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Why isn't it? Is there any test you could run on it that would allow you to say that it is not?","msgtype":"m.text"},"ts":1424675198000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"There's an open bug on IDL to define \"this\" and pass it on more clearly","msgtype":"m.text"},"ts":1424675199000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And if it doesn't have an associated set of event listeners, then how does addEventListener get \"the\" associated set of event listeners to operate on?","msgtype":"m.text"},"ts":1424675238000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That might be a problem with the definition of Window/WindowProxy, sure","msgtype":"m.text"},"ts":1424675277000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"At this point DOM doesn't really have anything on those objects","msgtype":"m.text"},"ts":1424675299000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well my point was more that if you said \"the [[Events]] internal slot of `this`\" then it would be much clearer what the answers to those questions are","msgtype":"m.text"},"ts":1424675329000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: that is the defined behavior through \"context object\", for which I already mentioned that we asked IDL to make it explicit, at which point I'll probably start using it explicitly rather than omit it for brevity when it's clear from context","msgtype":"m.text"},"ts":1424675449000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I don't necessarily disagree with using slots instead, there's an open IDL bug on that too","msgtype":"m.text"},"ts":1424675478000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: but that things are not defined in language you prefer doesn't make it imprecise, that would mean implementers could reach different conclusions from the same text at which point they'd file bugs etc.","msgtype":"m.text"},"ts":1424675519000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think implementers could legitimately reach different conclusions about what \"the associated set of event listeners\" means in the context of window vs. window proxy","msgtype":"m.text"},"ts":1424675622000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"And about the question of whether WindowProxy is an EventTarget object","msgtype":"m.text"},"ts":1424675635000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Anyway I didn't mean to pick a fight right before I had to sleep. More just was putting that there as a disclaimer that I might not be reading things right.","msgtype":"m.text"},"ts":1424675670000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But why then claim that the DOM specification is unclear when it is in fact the specification for WindowProxy that is sorely lacking as we all already know?","msgtype":"m.text"},"ts":1424675672000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"or at least, not reading things as they are intended","msgtype":"m.text"},"ts":1424675679000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think the DOM spec could be made clearer independent of window vs. window proxy. Proxies are pretty well-defined behavior.","msgtype":"m.text"},"ts":1424675701000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"the associated set\" is not well-defined.","msgtype":"m.text"},"ts":1424675714000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It's the context object's associated set","msgtype":"m.text"},"ts":1424675725000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So if the context object is WindowProxy as you say, that would be it","msgtype":"m.text"},"ts":1424675739000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I mean the definition of context object isn't exactly that clear either","msgtype":"m.text"},"ts":1424675768000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"on which something is being called\"","msgtype":"m.text"},"ts":1424675772000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That is fair, and as I said I'm waiting for an IDL fix","msgtype":"m.text"},"ts":1424675787000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Because only IDL can set that parameter correctly based on the JS -> IDL -> spec -> IDL -> JS bridge","msgtype":"m.text"},"ts":1424675817000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Anyway, I need to head to sleep, sorry for the offhanded comment :-S","msgtype":"m.text"},"ts":1424675828000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"why is cssom access restricted to same-origin again?","msgtype":"m.text"},"ts":1424676417000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: euh, web security model?","msgtype":"m.text"},"ts":1424676479000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: you can get the computed style so the declarations leak anyway, and you can't get the original text since it's parsed and reserialized, so you can't read things that are not css","msgtype":"m.text"},"ts":1424676559000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: declarations of styles not applied don't leak, declarations of styles not applied depending on cookies don't leak, etc.","msgtype":"m.text"},"ts":1424676629000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: so having a secret in a selector","msgtype":"m.text"},"ts":1424676705000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: are we requiring text/css as MIME type these days? If servers can be tricked into using that MIME type for resources there might be other risks too","msgtype":"m.text"},"ts":1424676847000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yes, except in quirks mode but that's only for same-origin stylesheets","msgtype":"m.text"},"ts":1424676914000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: we should not reduce the amount of protection the same-origin policy gives, the amount that CSS, images, and script leak today is sufficient","msgtype":"m.text"},"ts":1424676929000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(well, too much really)","msgtype":"m.text"},"ts":1424676975000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: sure, i agree","msgtype":"m.text"},"ts":1424677014000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i remember https://bugzilla.mozilla.org/show_bug.cgi?id=524223 but it didn't use cssom","msgtype":"m.text"},"ts":1424677532000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: that CSS loads across origins is a bug, restricting CSSOM is to some extent defense-in-depth and to some extent actually defends out-of-scope declaration blocks","msgtype":"m.text"},"ts":1424678533000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks. https://lists.w3.org/Archives/Public/public-houdini/2015Feb/0053.html","msgtype":"m.text"},"ts":1424679200000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: don't we support CORS now for CSS loads?","msgtype":"m.text"},"ts":1424680424000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the spec does, don't remember what is implemented","msgtype":"m.text"},"ts":1424680493000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: the other thing this is protecting of course is what CSSOM might become going forward; it would seem bad to forever constrain yourself by the current invariants","msgtype":"m.text"},"ts":1424680500000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1424680609000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: also, getComputedStyle requires brute-forcing to find all selectors as there's no other way to read them","msgtype":"m.text"},"ts":1424680631000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: coupled with varying media somehow, etc.","msgtype":"m.text"},"ts":1424680665000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: raw CSSOM exposes all trivially","msgtype":"m.text"},"ts":1424680684000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah but it's still pretty trivial to do","msgtype":"m.text"},"ts":1424680713000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"varying media is more annoying","msgtype":"m.text"},"ts":1424680736000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I'm not a 100% sure but I think I've seen some user extensions make use of CORS and CSS at Wikimedia.","msgtype":"m.text"},"ts":1424681661000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"To be able to inspect the loaded rules from a no-cookies domain","msgtype":"m.text"},"ts":1424681676000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"zcorpan: it would take quite some time","msgtype":"m.text"},"ts":1424681877000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: i'm writing a testsuite for the rendering section that basically does exactly this. i'm even checking :before and :after on each element. it's not taking that much time","msgtype":"m.text"},"ts":1424682106000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: euhm, you also need to generate all possible trees","msgtype":"m.text"},"ts":1424682221000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah that will take infinite time, but you probably can get far by enumerating the most commonly used elements, classes and ids","msgtype":"m.text"},"ts":1424682446000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"good morning, are there any benefits of using the HTML5 semantics?","msgtype":"m.text"},"ts":1424682895000,"senderName":"oenftw","senderId":"oenftw@irc"},
{"content":{"body":"zcorpan: maybe, but you'll get more with CSSOM which seems bad","msgtype":"m.text"},"ts":1424692762000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yes","msgtype":"m.text"},"ts":1424692775000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hi, is it ok to use h1 inside <article> tags?","msgtype":"m.text"},"ts":1424704497000,"senderName":"aleray__","senderId":"aleray__@irc"},
{"content":{"body":"aleray__: yes","msgtype":"m.text"},"ts":1424704509000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk,thanks","msgtype":"m.text"},"ts":1424704517000,"senderName":"aleray__","senderId":"aleray__@irc"},
{"content":{"body":"I had contradictory readings about that.","msgtype":"m.text"},"ts":1424704531000,"senderName":"aleray__","senderId":"aleray__@irc"},
{"content":{"body":"I think the model suggested by the specification does not have full support, which is why people might caution against it as a practical matter","msgtype":"m.text"},"ts":1424704565000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"This text suggests the following for instance: http://html5doctor.com/the-article-element/","msgtype":"m.text"},"ts":1424704609000,"senderName":"aleray__","senderId":"aleray__@irc"},
{"content":{"body":"in the \"An <article> with comments as nested <article>s\" section","msgtype":"m.text"},"ts":1424704627000,"senderName":"aleray__","senderId":"aleray__@irc"},
{"content":{"body":"aleray__: they don't recommend against it though, do they?","msgtype":"m.text"},"ts":1424704708000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aleray__: they just have a header for the article rather than just a heading","msgtype":"m.text"},"ts":1424704736000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aleray__: and actually, under \"Using <article> for a widget\" it seems to cover the case of using <h1> directly","msgtype":"m.text"},"ts":1424704769000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, ok. Not sure to understand the subtlety. I will go through it again. In my case I have a div in which I list news. Each news is wrapped in an <article> and now has an h1 in it.","msgtype":"m.text"},"ts":1424704881000,"senderName":"aleray__","senderId":"aleray__@irc"},
{"content":{"body":"aleray__: sounds fine","msgtype":"m.text"},"ts":1424704907000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, nice. My outline is wrong but I might have unclosed tags somewhere. Let's fix the structure first","msgtype":"m.text"},"ts":1424705034000,"senderName":"aleray__","senderId":"aleray__@irc"},
{"content":{"body":"btw, just fyi I have just published https://github.com/aleray/html5lib_typogrify","msgtype":"m.text"},"ts":1424705083000,"senderName":"aleray__","senderId":"aleray__@irc"},
{"content":{"body":"it is really minimal now, but if I have time I will expand it","msgtype":"m.text"},"ts":1424705110000,"senderName":"aleray__","senderId":"aleray__@irc"},
{"content":{"body":"JakeA: what does GPU-rendered DOM element mean?","msgtype":"m.text"},"ts":1424708552000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Nothing","msgtype":"m.text"},"ts":1424708558000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: do the rasterisation on the GPU, like we do with canvas right now","msgtype":"m.text"},"ts":1424708616000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I think the main slowness people have with DOM, across both React and the Google components crowd, is that if you have a large mutating tree, layout gets slow. Both then take the approach of putting all the data outside the DOM and then stamping out something smaller based on what is seen by the user through a template of sorts...","msgtype":"m.text"},"ts":1424708622000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: so that instead of a 10000 item list, you only have a list with 50 items that are seen by the user, backed by a 10000 item JavaScript array","msgtype":"m.text"},"ts":1424708680000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: unless we can solve that scenario, the DOM seems rather doomed as information container","msgtype":"m.text"},"ts":1424708722000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: wouldn't some layout feature make that ok in the DOM? Some kind of list-view display? I guess you could do that yourself with hooks into layout","msgtype":"m.text"},"ts":1424708779000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: so this GPU-rendering of DOM elements is GPU-rendering of CSS \"boxes\"?","msgtype":"m.text"},"ts":1424708801000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"xul:listbox","msgtype":"m.text"},"ts":1424708801000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"JakeA: well, what Polymer has is <core-list>, which has this JavaScript-backed thing","msgtype":"m.text"},"ts":1424708848000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah","msgtype":"m.text"},"ts":1424708850000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: ok that makes more sense","msgtype":"m.text"},"ts":1424708859000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: a layout primitive goes some ways, though does not necessarily help with invalidation of trees due to mutation and selectors that then have to match again","msgtype":"m.text"},"ts":1424708941000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: for that isolated styles could help","msgtype":"m.text"},"ts":1424708957000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: wycats has some ideas around that, but nothing concrete","msgtype":"m.text"},"ts":1424708986000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But it's a rather large gap to bridge and I can totally understand why we have these experiments going on to get it some other way","msgtype":"m.text"},"ts":1424709022000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: anyway, this has annoyed me too, thanks for pushing people to dig a little deeper","msgtype":"m.text"},"ts":1424709137000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: which ideas?","msgtype":"m.text"},"ts":1424709593000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"JakeA: the biggest issue with list-view is the lack of scroll hooks","msgtype":"m.text"},"ts":1424709624000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"https://github.com/emberjs/list-view is used a lot in production Ember apps","msgtype":"m.text"},"ts":1424709636000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Ms2ger: I think you want xul:tree","msgtype":"m.text"},"ts":1424709639000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"wycats: Chrome has been proposing a sync scroll handler (onbeforescroll) but I think it's getting push-back from other vendors","msgtype":"m.text"},"ts":1424709674000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wycats: around isolation for CSS","msgtype":"m.text"},"ts":1424709676000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: yeah","msgtype":"m.text"},"ts":1424709683000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"JakeA: I think we should provide it and accept that it forces us to think hard about keeping frames small","msgtype":"m.text"},"ts":1424709711000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"annevk: yeah, I guess we need style resolution hooks and/or isolation","msgtype":"m.text"},"ts":1424709712000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: Shadow DOM helps a lot here","msgtype":"m.text"},"ts":1424709722000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"especially for list views","msgtype":"m.text"},"ts":1424709724000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"unrelatedly, I just posted: https://twitter.com/wycats/status/569893045321101312","msgtype":"m.text"},"ts":1424709744000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"wycats: agreed. Maybe sync handlers are bad but all the touch-event-based scroll reimlementations are way worse","msgtype":"m.text"},"ts":1424709751000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: there's interest from Mozilla in solving the problem, though roc seems to prefer adding a UI-centric worker","msgtype":"m.text"},"ts":1424709761000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: 100%","msgtype":"m.text"},"ts":1424709784000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"JakeA: see dev.platform thread I pointed to on Twitter","msgtype":"m.text"},"ts":1424709786000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I need to speak to roc","msgtype":"m.text"},"ts":1424709788000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I don't agree with him on that thread","msgtype":"m.text"},"ts":1424709792000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"(as a person who has implemented this stuff)","msgtype":"m.text"},"ts":1424709811000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I don't mind creating a new UI daemon","msgtype":"m.text"},"ts":1424709811000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"but it's not tackling the problem head-on","msgtype":"m.text"},"ts":1424709812000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"wycats: I think there are some oddities that make that not true. Maybe position:fixed inside that element? I can't remember. TabAtkins would know.","msgtype":"m.text"},"ts":1424709831000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wycats: give it three-four hours and he might be online I guess, assuming he's at home","msgtype":"m.text"},"ts":1424709831000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1424709840000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"the way to tackle the problem is to look at the 17ms timeslice, figure out where it's going, and figure out how to shrink it","msgtype":"m.text"},"ts":1424709850000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"and then figure out how to give developers APIs that don't blow the budget","msgtype":"m.text"},"ts":1424709861000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"people who are writing things like list-view are very very very good devs","msgtype":"m.text"},"ts":1424709872000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"they can color inside the lines if they had the tools","msgtype":"m.text"},"ts":1424709881000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"annevk: You got time to look at https://critic.hoppipolla.co.uk/r/3216 ?","msgtype":"m.text"},"ts":1424709967000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"JakeA: btw, the DOM spec calls it the \"node tree\" if you want a different term","msgtype":"m.text"},"ts":1424709983000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: https://dom.spec.whatwg.org/#node-tree","msgtype":"m.text"},"ts":1424709999000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: the JavaScript community sometimes uses \"DOM\" as a term for everything not JavaScript, which has been confusing me at times","msgtype":"m.text"},"ts":1424710045000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: node tree is a good name for it","msgtype":"m.text"},"ts":1424710085000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"nice","msgtype":"m.text"},"ts":1424710087000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"https://twitter.com/getify/status/569902233262796800 lol who exactly has been swapping terms :p","msgtype":"m.text"},"ts":1424710286000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"DOM layout\"?","msgtype":"m.text"},"ts":1424710377000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"As opposed to what?","msgtype":"m.text"},"ts":1424710382000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"JakeA: if you haven't seen it, I recommend looking at https://speakerdeck.com/vjeux/react-css-in-js","msgtype":"m.text"},"ts":1424710447000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: it's a really great introduction to everything that is wrong with CSS","msgtype":"m.text"},"ts":1424710460000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: i would argue that understand the meaning of DOM is much more important than knowing the word-for-word translation of the acronym, which may be what you're all eluding to in the proposed \"rename/remap\".","msgtype":"m.text"},"ts":1424710514000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"boogyman: what is the meaning?","msgtype":"m.text"},"ts":1424710552000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"In Kyle's tweets it appears he's pushing back against DOM meaning \"Node Tree\" or \"Document Model Model\" or whatever \"DOM layout\" means.","msgtype":"m.text"},"ts":1424710639000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"boogyman: yeah, as I said above that's fairly prevalent in certain circles, Kyle's claim it goes for all web developers I doubt, but it's common","msgtype":"m.text"},"ts":1424710711000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I've for-sure seen people say \"DOM is slow\" when they meant \"some aspect of CSS/layout is slow\"","msgtype":"m.text"},"ts":1424710717000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"e.g. someone complaining that adding flexbox to 50 elements caused slowness that they could avoid by computing absolute positions for those elements","msgtype":"m.text"},"ts":1424710796000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Understand the point, but \"computing abs.pos.\" tells me they are only targeting small set of the world, which in itself is not ideal.","msgtype":"m.text"},"ts":1424711038000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"annevk: I think there are better solutions than vjeux's","msgtype":"m.text"},"ts":1424711091000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Ember is investigating ;)","msgtype":"m.text"},"ts":1424711096000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"but his articulation of the problem is good","msgtype":"m.text"},"ts":1424711102000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Right, it might be that the new thing they did was a terrible mess. But they piggybacked on the \"DOM is slow\" meme to air a complaint about a facet of the platform that is entirely unrelated to the DOM.","msgtype":"m.text"},"ts":1424711124000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: confirm","msgtype":"m.text"},"ts":1424711154000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"also, most of the platform is tractabl","msgtype":"m.text"},"ts":1424711160000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"So even if we solve the problem, people will go \"oh, there's still a DOM so it's still going to be too slow\"","msgtype":"m.text"},"ts":1424711164000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"even within the context of the existing programming model","msgtype":"m.text"},"ts":1424711170000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I am pretty tired of the revolutionaries","msgtype":"m.text"},"ts":1424711180000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"\"let's replace CSS with a constraint solver\"","msgtype":"m.text"},"ts":1424711185000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"\"let's replace CSS with inline styles\"","msgtype":"m.text"},"ts":1424711191000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"etc.","msgtype":"m.text"},"ts":1424711192000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I would be happy with identifying portable style boundaries and specifying them","msgtype":"m.text"},"ts":1424711375000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"and also identifying easy heuristics you can use to prune selectors you don't have to match for a given operation","msgtype":"m.text"},"ts":1424711400000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"CSPs are really easy to solve, though!","msgtype":"m.text"},"ts":1424711616000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"BUT WHAT CSP AM I REFERRING TO?! #OverloadedInitalismsAreFun","msgtype":"m.text"},"ts":1424711636000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"The common salesman problem?","msgtype":"m.text"},"ts":1424712022000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"In @counter-style, <symbol> = <string> | <image> | <ident>","msgtype":"m.text"},"ts":1424712273000,"senderName":"jsx","senderId":"jsx@irc"},
{"content":{"body":"What would be an example for <ident>","msgtype":"m.text"},"ts":1424712283000,"senderName":"jsx","senderId":"jsx@irc"},
{"content":{"body":"blah","msgtype":"m.text"},"ts":1424712290000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"wycats: yeah, not sure about the solution space, but mostly the \"this is a problem and why\" is really good and interesting","msgtype":"m.text"},"ts":1424713766000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wycats: heh, there's a bit of XHTML 2.0 in everyone :p","msgtype":"m.text"},"ts":1424713851000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: no, Communicating Sequential Processes, duh!","msgtype":"m.text"},"ts":1424713890000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1424718633000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"wycats: you need position as well, i believe","msgtype":"m.text"},"ts":1424719272000,"senderName":"jamesr___","senderId":"jamesr___@irc"},
{"content":{"body":"wycats: or positioned descendants of the overflow:hidden things will influence the position of siblings","msgtype":"m.text"},"ts":1424719392000,"senderName":"jamesr___","senderId":"jamesr___@irc"},
{"content":{"body":"ah, i see this was already covered on twitter","msgtype":"m.text"},"ts":1424719448000,"senderName":"jamesr___","senderId":"jamesr___@irc"},
{"content":{"body":"jgraham: should we make the tree walker tests part of the parser tests? I mean they're guaranteed to fail if the identical parser test fails…","msgtype":"m.text"},"ts":1424719480000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: so it seems kinda like they should be part of the same test","msgtype":"m.text"},"ts":1424719493000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"is position: relative sufficient?","msgtype":"m.text"},"ts":1424719844000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"wycats: speak to me","msgtype":"m.text"},"ts":1424721289000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"roc: I am currently pair programming on Ember","msgtype":"m.text"},"ts":1424722631000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"but I will ping you when I have uno momento","msgtype":"m.text"},"ts":1424722636000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"jsx: Hm, it's linking over to the wrong spec for <ident>, but that just means keywords.","msgtype":"m.text"},"ts":1424722919000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: that css-in-js deck is nowhere near \"everything that's wrong with CSS\" :-)","msgtype":"m.text"},"ts":1424723448000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"in fact, I quite like their approach of driving everything with JS and inline styles. I was just thinking recently that that seems like a good way to negate one of the performance issues of Web vs native --- selector matching and cascading","msgtype":"m.text"},"ts":1424723518000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"Yeah, I think there's some really interesting ideas we can dig out of there for applying styles more locally.","msgtype":"m.text"},"ts":1424723777000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Rather than the big mishmash of global styles that CSS is today. ^_^","msgtype":"m.text"},"ts":1424723809000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"roc: haha, fair","msgtype":"m.text"},"ts":1424723847000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"roc: yeah, the tight coupling is really interesting, also how useless specificity is","msgtype":"m.text"},"ts":1424723896000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the deck kinda oversells \"CSS in JS\" though","msgtype":"m.text"},"ts":1424723911000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"Might be because React has that approach to all the things that are not JS","msgtype":"m.text"},"ts":1424723943000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"they're not bypassing all of CSS, not by any means --- just part of the style system","msgtype":"m.text"},"ts":1424723952000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"I'm almost certain that a mature version of that would reinvent some form of specificity, though.  You could probably get away with just a single explicitly-supplied number, though.","msgtype":"m.text"},"ts":1424723953000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Without it, you have to rely on temporal ordering of application, which is trickier to manage as you get more complex.","msgtype":"m.text"},"ts":1424723986000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: yeah, I guess you want some of it, coupled with isolation it wouldn't be an issue","msgtype":"m.text"},"ts":1424724024000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"roc: I think they are bypassing hte \"cascading\" and \"sheets\" parts of CSS :P","msgtype":"m.text"},"ts":1424724029000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah, well, it turns out that despite the naming, most of CSS is actually not about that :-)","msgtype":"m.text"},"ts":1424724063000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"I want to spend some time later this year thinking about this some more, and seeing what I can come up with.  More experiments in this area by the JS people will help.","msgtype":"m.text"},"ts":1424724077000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I don't think stylesheets are really helpful to people building these apps","msgtype":"m.text"},"ts":1424724104000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"TabAtkins: I expect that not solving this will halt work on shadow DOM and such as well","msgtype":"m.text"},"ts":1424724116000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Agreed; they're actually an anti-feature when you're trying to get composability.","msgtype":"m.text"},"ts":1424724121000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: yup.","msgtype":"m.text"},"ts":1424724125000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: maybe less so for custom elements","msgtype":"m.text"},"ts":1424724125000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"when you're constructing lots of DOM nodes with JS, it makes sense to set style values explicitly from JS as well.","msgtype":"m.text"},"ts":1424724150000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"TabAtkins: but I'd like to see us sort out what the way forward is for React / Ember style applications before committing to shadow DOM","msgtype":"m.text"},"ts":1424724158000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Maybe Bert Bos was right after all that you don't want HTML/CSS/JS for applications","msgtype":"m.text"},"ts":1424724180000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"No, he was still wrong, because what you want is just JS. ^_^","msgtype":"m.text"},"ts":1424724201000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I may have remembered http://www.w3.org/People/Bos/webapps.html and http://www.w3.org/People/Bos/webapps-proposal.html for more than they are","msgtype":"m.text"},"ts":1424724277000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: heh","msgtype":"m.text"},"ts":1424724282000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I like having a proper mental image of Tab to associate with his messages","msgtype":"m.text"},"ts":1424724402000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"roc: Same!","msgtype":"m.text"},"ts":1424724410000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"still don't have Domenic :-(","msgtype":"m.text"},"ts":1424724412000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"His Twitter image is accurate.","msgtype":"m.text"},"ts":1424724422000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"by \"image\", I don't mean an image :-)","msgtype":"m.text"},"ts":1424724437000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"roc: do you have some data on how long the selector matching takes vs other parts of CSS?","msgtype":"m.text"},"ts":1424724737000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't, but it's definitely enough that people (in Gecko and Blink at least) spend a ton of work optimizing it","msgtype":"m.text"},"ts":1424724864000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"e.g. we did some work a while back to ensure that modifying inline style rules doesn't require rerunning selector matching. That helped some cases a lot.","msgtype":"m.text"},"ts":1424724967000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"roc: is this the motivation for scoped styles as well?  seems they have not worked out","msgtype":"m.text"},"ts":1424724987000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"explicit inline styling being the extreme case of \"scoped\" styles","msgtype":"m.text"},"ts":1424725015000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: no. Scoped styles are a modularity mechanism.","msgtype":"m.text"},"ts":1424725092000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1424725106000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"and actually quite a helpful one, I think. It's just that Blink chose not to implement them","msgtype":"m.text"},"ts":1424725136000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"same for CSS variables","msgtype":"m.text"},"ts":1424725149000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"just seemed it would reduce the node tree that could be selector matched","msgtype":"m.text"},"ts":1424725154000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"yes, that it does, though I don't think we've fully optimized around that","msgtype":"m.text"},"ts":1424725179000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"does it? external selectors could still match","msgtype":"m.text"},"ts":1424725208000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"there's no isolation","msgtype":"m.text"},"ts":1424725217000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I meant for styles modified in the \"scoped\" style tag","msgtype":"m.text"},"ts":1424725236000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"only understands about 5% of this stuff...","msgtype":"m.emote"},"ts":1424725261000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: changes to the DOM outside the scope can't change the results of selectors in the scoped styles","msgtype":"m.text"},"ts":1424725487000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"wanderview: hmm fair, I think the bottleneck is DOM mutations, but I don't actually know","msgtype":"m.text"},"ts":1424725498000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"roc: also fair","msgtype":"m.text"},"ts":1424725501000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"roc: I think Chrome killed variables because their code wasn't up to par, not because they don't want the feature","msgtype":"m.text"},"ts":1424725549000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that sounds harsh ... but yes","msgtype":"m.text"},"ts":1424725586000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"roc: <style scope> seemed more adversarial and had to do with shadow DOM, something we're not quite sure about","msgtype":"m.text"},"ts":1424725587000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"roc: heh, maybe I misremembered but I thought that's what they said on blink-dev","msgtype":"m.text"},"ts":1424725616000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that seems accurate from what i remember","msgtype":"m.text"},"ts":1424725640000,"senderName":"jamesr___","senderId":"jamesr___@irc"},
{"content":{"body":"roc: I like your distinction about applying styles manually to elements... that's essentially what a programmatic native UI API would do... vs CSS declarative usage","msgtype":"m.text"},"ts":1424725847000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"exactly","msgtype":"m.text"},"ts":1424725862000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"and applying styles manually seems like a tooling issue","msgtype":"m.text"},"ts":1424725895000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"or framework issue","msgtype":"m.text"},"ts":1424725901000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"having said that, some UI toolkits have adopted CSS as a declarative widget styling mechanism, so it's still helpful for some apps. And it's definitely helpful for more document-like pages.","msgtype":"m.text"},"ts":1424726021000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"another major source of overhead is the content/presentation distinction, which forces browsers to create a parallel tree of CSS boxes, using a sometimes expensive algorithm","msgtype":"m.text"},"ts":1424726090000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"that seems harder to get around...","msgtype":"m.text"},"ts":1424726111000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"the premise of Shadow DOM is that you can have use CSS as it was designed, but break it up into smaller, per-component chunks","msgtype":"m.text"},"ts":1424726130000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"even when we create anonymous boxes, in Gecko we create anonymous elements to back them up, because it's far too much trouble to support naked CSS boxes","msgtype":"m.text"},"ts":1424726169000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"at least in my observation, this leads to much simpler selectors","msgtype":"m.text"},"ts":1424726171000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"applying all CSS inline should be a valid choice for frameworks","msgtype":"m.text"},"ts":1424726198000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"but we as a platform can do better","msgtype":"m.text"},"ts":1424726211000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"in terms of primitive ergonomics","msgtype":"m.text"},"ts":1424726224000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"re: style scoped: https://groups.google.com/a/chromium.org/d/topic/blink-dev/JB8nFQXhAuQ/discussion","msgtype":"m.text"},"ts":1424726306000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"\"but we as a platform can do better\" big confirm","msgtype":"m.text"},"ts":1424726428000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"having Shadow DOM is style boundary also a pretty useful thing (without shadow-piercing combinators)","msgtype":"m.text"},"ts":1424726761000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"you could actually start computing style in parallel, for example","msgtype":"m.text"},"ts":1424726774000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"and of course, the shadow root being a natural style invalidation root is a good thing","msgtype":"m.text"},"ts":1424726886000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"roc: We're nearly done with our parser rewrite, and then Variables is getting put right back in.","msgtype":"m.text"},"ts":1424727197000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"dglazkov: +1","msgtype":"m.text"},"ts":1424727454000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"TabAtkins: +1","msgtype":"m.text"},"ts":1424727457000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"TabAtkins: I think you really want the ability to give a component a stylesheet that gets its variables from custom properties","msgtype":"m.text"},"ts":1424727481000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"component.stylesheets.push(stylesheet)","msgtype":"m.text"},"ts":1424727496000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Yeah, variables inherit.","msgtype":"m.text"},"ts":1424727501000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hm","msgtype":"m.text"},"ts":1424727507000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"say more","msgtype":"m.text"},"ts":1424727509000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"so the component itself would have some variables declared in the top-level sheet","msgtype":"m.text"},"ts":1424727521000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Custom properties inherit by default. So you can set them from outside the component, and use them inside the component.","msgtype":"m.text"},"ts":1424727524000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"sorry some custom properties","msgtype":"m.text"},"ts":1424727530000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"iiiiinteresting","msgtype":"m.text"},"ts":1424727532000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"so stylesheets.push, if implemented, would \"just work\"","msgtype":"m.text"},"ts":1424727549000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1424727571000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"nice","msgtype":"m.text"},"ts":1424727574000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"please do implement","msgtype":"m.text"},"ts":1424727580000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"wycats: I want that too. I started a discussion a while back, but sadly I got distracted: https://lists.w3.org/Archives/Public/www-style/2012Oct/0491.html","msgtype":"m.text"},"ts":1424729157000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"And when I say \"I\", I mean \"Tab\".","msgtype":"m.text"},"ts":1424729603000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":":P","msgtype":"m.text"},"ts":1424729611000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"Apropos nothing in particular, I was talking to someone that works on gaia today and it seems like they didn't think web components was going to provide the level of encapsulation they wanted for building FirefoxOS apps (aka web apps)","msgtype":"m.text"},"ts":1424729714000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: would love to know more details there","msgtype":"m.text"},"ts":1424729856000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"it's a very generic statement :)","msgtype":"m.text"},"ts":1424729920000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"dglazkov: Yeah, I don't want to give some false statement about what they wanted","msgtype":"m.text"},"ts":1424730022000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"So I guess I should try to get them to give feedback directly","msgtype":"m.text"},"ts":1424730035000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: anyone I could talk to?","msgtype":"m.text"},"ts":1424730038000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"I don't bite","msgtype":"m.text"},"ts":1424730047000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"anymore","msgtype":"m.text"},"ts":1424730051000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1424730096000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"It wasn't exactly clear to me what they did want, but they were talking about a solution that had multiple documents which is apparently good if you want to destroy one piece and reclaim all the memory, and allows building a clear message-based API","msgtype":"m.text"},"ts":1424730210000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I'm not really sure if/how this solved problems relating to styling","msgtype":"m.text"},"ts":1424730242000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(to be fair their solution didn't sound very sane to me, so as you can tell I am not a great proxy here)","msgtype":"m.text"},"ts":1424730328000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":":-\\","msgtype":"m.text"},"ts":1424730460000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"maybe we could meet with them and try to have a brainstorm or something? Sounds like they're in a crazypants land","msgtype":"m.text"},"ts":1424730488000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"well, separate docs especially from different domains give you rather good encapsulation ;)","msgtype":"m.text"},"ts":1424730547000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"dglazkov: I'll see if there's someone who can provide actual useful feedback","msgtype":"m.text"},"ts":1424730864000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"dglazkov: You're not at your desk, so... do we still have a flag for resetting inheritance on the shadow tree?  Or do you need to use a dummy element with 'all'?","msgtype":"m.text"},"ts":1424731362000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I was very disappointed in `all: unset`. It was too much. I think I want `all-but-display: unset`. I dunno, maybe it's workable in combination with a list of default-block elements.","msgtype":"m.text"},"ts":1424731988000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I was very disappointed in `all: unset`. It was too much. I think I want `all-but-display: unset`. I dunno, maybe it's workable in combination with a list of default-block elements.","msgtype":"m.text"},"ts":1424732085000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins:","msgtype":"m.text"},"ts":1424732944000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"TabAtkins: no flag. Must use 'all'.","msgtype":"m.text"},"ts":1424733026000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"jgraham: thanks!","msgtype":"m.text"},"ts":1424733171000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"jgraham: thoughts on html5lib question above?","msgtype":"m.text"},"ts":1424733357000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: I don't think it's worth changing.","msgtype":"m.text"},"ts":1424733429000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: (the stuff I'm doing as part of the expected failures and skipped tests etc. is rewriting all this anyway)","msgtype":"m.text"},"ts":1424733516000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: how do I check where and why certain wpt test was added","msgtype":"m.text"},"ts":1424733558000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"gsnedders: I don't really care either way. I would err on the side of changing less, but if you think it's a big win that's fine","msgtype":"m.text"},"ts":1424733616000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"smaug____: Look in the git history?","msgtype":"m.text"},"ts":1424733630000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"like where? :)","msgtype":"m.text"},"ts":1424733684000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"wonders what window-named-properties-001.html is about and why it would be valid","msgtype":"m.emote"},"ts":1424733696000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: git clone https://github.com/w3c/web-platform-tests.git","msgtype":"m.text"},"ts":1424733884000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Author: Yuta Kitamura <yutak⊙gc>","msgtype":"m.text"},"ts":1424733929000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Date:   Fri Jun 21 13:49:27 2013 +0900","msgtype":"m.text"},"ts":1424733930000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"So it's getting on for two web-component years old. Which are like 14 internet years, or 98 real years","msgtype":"m.text"},"ts":1424733986000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1424734149000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I'm running Firefox on Arch Linux, using the provided package. Firefox is reporting the Flash plugin as being out of date (11.2.202.440), yet looking at the so it's claiming to load it's 11.2.202.442. Any idea what's going on here? https://www.adobe.com/software/flash/about/ claims I have 11.2.202.442 too. (#firefox came up with the useful suggestion of removing Flash…)","msgtype":"m.text"},"ts":1424734254000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Step 1) Convince BBC to stop using Flash for iPlayer. Step 2) There are no remaining use cases for Flash so remove it with fire. Step 3) There is no step 3)","msgtype":"m.text"},"ts":1424734502000,"senderName":"jgraham","senderId":"jgraham@irc"}
]