[
{"content":{"body":"var f = document.implementation.createHTMLDocument().createDocumentFragment() in Gecko is the closest thing","msgtype":"m.text"},"ts":1327363200000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"What do you mean by \"inert\"?","msgtype":"m.text"},"ts":1327363500000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(there's lots of possibly definitions)","msgtype":"m.text"},"ts":1327363501000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"possible","msgtype":"m.text"},"ts":1327363502000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well, I know the effects of \"inert\" in template pretty well, but haven't yet described precisely.","msgtype":"m.text"},"ts":1327363560000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"the general idea is that a developer can treat these elements as clay without fear of side effects.","msgtype":"m.text"},"ts":1327363620000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"images don't load, videos don't run, frames don't load, scripts don't run","msgtype":"m.text"},"ts":1327363621000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"also importantly --- attributes are tolerant of invalid values","msgtype":"m.text"},"ts":1327363622000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"so you could do crazy stuff like <img src=\"{{userpic}}\"> and not hit the server with some url that includes \"{{userpic}}\"","msgtype":"m.text"},"ts":1327363680000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"an even crazier example involves similar machinations with tabindex and input types, but I am not yet sure that would even be possible.","msgtype":"m.text"},"ts":1327363740000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"dglazkov: \"attributes are tolerant of invalid values\" and \"no network traffic results\" are very different","msgtype":"m.text"},"ts":1327364280000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"dglazkov: i'm not really sure what you mean by \"attributes are tolerant of invalid values\" -- how are non-inert attributes not so tolerant?","msgtype":"m.text"},"ts":1327364281000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: perhaps we need to come to common understanding of \"tolerant\"?","msgtype":"m.text"},"ts":1327364400000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"dglazkov: definitely, if you're going to use the word :-)","msgtype":"m.text"},"ts":1327364401000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"<div tabindex=\"{{value1}}\"> or <input type=\"$(TYPE)\"> would be examples where there are limits to tolerance","msgtype":"m.text"},"ts":1327364460000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"you can attempt to set div.tabindex property to any value, but only integers will be accepted, right?","msgtype":"m.text"},"ts":1327364520000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"setting some attributes causes some internal plumbing to jump into action.","msgtype":"m.text"},"ts":1327364580000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"whether this plumbing attempts to make a network request or parse the value as integer","msgtype":"m.text"},"ts":1327364581000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"that's not really important from the effect side.","msgtype":"m.text"},"ts":1327364640000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"the key is that in inert DOM chunks, doing these thing should be both tolerated and not acted upon","msgtype":"m.text"},"ts":1327364700000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"attribute bag is a nice example. If you setAttribute(\"tabindex\", \"foo\"), you will still receive \"foo\" from getAttribute(\"tabindex\")","msgtype":"m.text"},"ts":1327364820000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"ideally, an inert chunk of DOM would do the same thing for properties.","msgtype":"m.text"},"ts":1327364821000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"but again, that's an effect.","msgtype":"m.text"},"ts":1327364822000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"another effect is that setAttribute(\"tabindex\", \"foo\") doesn't trigger internal plumbing of attempting to parse the value as integer and setting the property to -1","msgtype":"m.text"},"ts":1327364880000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"hth","msgtype":"m.text"},"ts":1327364940000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"dglazkov: If you setAttribute(\"tabindex\", \"foo\"), you will still receive \"foo\" from getAttribute(\"tabindex\"), today, always","msgtype":"m.text"},"ts":1327364941000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"right!","msgtype":"m.text"},"ts":1327364942000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"dglazkov: if you're saying you want the type of DOM properties to depend on whether they are in a template or not, that's basically a non-starter, i think","msgtype":"m.text"},"ts":1327364943000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: that's not what I am saying.","msgtype":"m.text"},"ts":1327365000000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"good :-)","msgtype":"m.text"},"ts":1327365001000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"not sure what you're saying though in that case :-)","msgtype":"m.text"},"ts":1327365060000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well, I've been pretty nicely describing desired effects, I thought.","msgtype":"m.text"},"ts":1327365061000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"anyhow, gotta run. bye Whatwg!","msgtype":"m.text"},"ts":1327365120000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"i guess i don't understand why tabindex=\"\" today doesn't do what you want","msgtype":"m.text"},"ts":1327365121000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"fyi, W3C is still be affected by some routing issues somewhere","msgtype":"m.text"},"ts":1327365240000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"somewhere being an outside place that W3C systems team can't fix themselves","msgtype":"m.text"},"ts":1327365300000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so they are still waiting for it to be fixed there, as far as I know","msgtype":"m.text"},"ts":1327365301000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Philip`: yt?","msgtype":"m.text"},"ts":1327367280000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Vaguely","msgtype":"m.text"},"ts":1327367340000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: drawImage() when drawing from outside the source bitmap says \"When the filtering algorithm requires a pixel value from outside the original image data, it must instead use the value from the nearest edge pixel.\"; it's suggested that we somehow limit this to 0.5px outside the source rect since otherwise you'd just get a banding effect","msgtype":"m.text"},"ts":1327367520000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Philip`: opinions?","msgtype":"m.text"},"ts":1327367521000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Doing anything other than what standard graphics APIs already generally support (i.e. either clamp-to-edge or clamp-to-transparency or mirror or repeat, probably) sounds like it would make implementers pretty unhappy","msgtype":"m.text"},"ts":1327368420000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Using a source rectangle outside the original image data is basically an error condition anyway (and I think it used to throw exceptions; the behaviour was changed just to be more tolerant of floating-point errors)","msgtype":"m.text"},"ts":1327368540000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"If it's meant to be changed into a useful feature, users probably ought to be able to select the filtering mode themselves, because no single choice will be what everyone wants","msgtype":"m.text"},"ts":1327368600000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"what happens today?","msgtype":"m.text"},"ts":1327368960000,"senderName":"jamesr_","senderId":"jamesr_@irc"},
{"content":{"body":"doesn't know what implementations do","msgtype":"m.emote"},"ts":1327369140000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: yeah","msgtype":"m.text"},"ts":1327370760000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Philip`: i'm not sure what implementations or APIs do, but webkit asked for us to change the spec","msgtype":"m.text"},"ts":1327371000000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Philip`: to say something about transparent black","msgtype":"m.text"},"ts":1327371060000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Philip`: their question is whether we want a hard edge or not or non-aligned image draws","msgtype":"m.text"},"ts":1327371061000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"doesn't remember the reasons for originally preferring clamp-to-edge over transparent","msgtype":"m.emote"},"ts":1327372140000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"any objection to me just changing it to transparent?","msgtype":"m.text"},"ts":1327372141000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well, you have to pick a transparent color","msgtype":"m.text"},"ts":1327372142000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"'transparent' == rgba(0,0,0,0)","msgtype":"m.text"},"ts":1327372143000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Depends if there was a good reason for originally preferring clamp-to-edge over transparent","msgtype":"m.text"},"ts":1327372144000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(other than it just being compatible with more of the implementations at that time)","msgtype":"m.text"},"ts":1327372145000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"i've no idea","msgtype":"m.text"},"ts":1327372146000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i can try to look tomorrow","msgtype":"m.text"},"ts":1327372147000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: that's bad, since it'll artifact if the result is scaled","msgtype":"m.text"},"ts":1327372148000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Upscaling an image will always do something that someone considers bad, I think","msgtype":"m.text"},"ts":1327372200000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(whether it ever can be in this context I'm not sure, but I've dealt with problems arising from that too many times)","msgtype":"m.text"},"ts":1327372201000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(since different people want different behaviour)","msgtype":"m.text"},"ts":1327372202000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: edge clamping is far far better than using black transparency","msgtype":"m.text"},"ts":1327372203000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"for general-purpose behavior, anyway","msgtype":"m.text"},"ts":1327372260000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"That's what the spec currently requires, but apparently it causes problems when implementing with OS X APIs or something like that","msgtype":"m.text"},"ts":1327372320000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(https://www.w3.org/Bugs/Public/show_bug.cgi?id=10799 - hmm, maybe the main original reason for clamp-to-edge was to match IE9 and Opera)","msgtype":"m.text"},"ts":1327372380000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"will continue his general policy of not really caring about API design and letting other people argue over that, and only caring himself that every implementation can pass the same tests, since that's an easier problem","msgtype":"m.emote"},"ts":1327372560000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"zewt: edge clamping results in streaking, so it's a non-starter","msgtype":"m.text"},"ts":1327372620000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"doesn't sound like a \"non-starter\" to me","msgtype":"m.text"},"ts":1327372621000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"if you don't want it, stop sampling outside the image","msgtype":"m.text"},"ts":1327372622000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"it's a non-starter because webkit won't implement it","msgtype":"m.text"},"ts":1327372740000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and everyone else is? ...","msgtype":"m.text"},"ts":1327372741000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"as far as i'm aware, nobody does it","msgtype":"m.text"},"ts":1327372742000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Firefox doesn't on OS X, I think","msgtype":"m.text"},"ts":1327372743000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"but I think everyone else basically does (maybe with exceptions if the source rectangle is actually outside)","msgtype":"m.text"},"ts":1327372800000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"i don't know the general rendering pipeline; if there's no way that black might be blended with edge colors, then it's probably okay, but if it might get blended in then it's definitely bad","msgtype":"m.text"},"ts":1327372801000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"at least when I last checked","msgtype":"m.text"},"ts":1327372802000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"the only case i'm talking about is the case where the source rectangle is outside the source image","msgtype":"m.text"},"ts":1327372860000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hence the suggestion about the 0.5px border","msgtype":"m.text"},"ts":1327372861000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"clamp to edge within .5px, then #00000000? that seems ... a bit too novel, at least on first impression","msgtype":"m.text"},"ts":1327372920000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Is the idea that they're able to implement clamp-to-edge filtering up to the edge of the source rectangle, and then a sharp transition to transparent outside the rectangle?","msgtype":"m.text"},"ts":1327372921000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"i guess?","msgtype":"m.text"},"ts":1327372980000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"we could also have different filtering if it's outside the source rect or not","msgtype":"m.text"},"ts":1327372981000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(as opposed to having the filter not clamp and act as if the image data outside the original image bounds was transparent)","msgtype":"m.text"},"ts":1327373040000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"e.g. define the source rect as being transparent black, but with the clamp-to-edge filtering","msgtype":"m.text"},"ts":1327373100000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(which matters around the edges when upscaling the image, since the filter will be sampling outside the original image bounds even if it's within the source rectangle)","msgtype":"m.text"},"ts":1327373101000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"actually maybe this is the way to go","msgtype":"m.text"},"ts":1327373160000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"define it so that pixels inside the source rect but outside the source image are transparent black","msgtype":"m.text"},"ts":1327373161000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"with clamp-to-edge behaviour for the filtering","msgtype":"m.text"},"ts":1327373220000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"not quite sure what you mean--clamp-to-edge is a definition of pixels outside the source image, not filtering","msgtype":"m.text"},"ts":1327373340000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"With the current spec, if you have a 1x1 green image and draw the 3x3 source rectangle (-1,-1)..(2,2) to a 30x30 pixel destination, you'll get 30x30 pixels of green","msgtype":"m.text"},"ts":1327373341000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"right i'm suggesting you get a 10x10 green centered in the 30x30","msgtype":"m.text"},"ts":1327373400000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"If it was changed to clamp-to-transparent (or whatever the term is), you'd get a heavily blurred roughly 10x10 green square (since it'll filter between green and transparent around the edges)","msgtype":"m.text"},"ts":1327373401000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1327373402000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"If it was clamp-to-edge-but-clip-to-transformed-source-rectangle, you'd get a sharp 10x10 green square","msgtype":"m.text"},"ts":1327373403000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: i think the right analog for \"clamp-to-transparent\" is opengl's CLAMP_TO_BORDER with a #00000000 border","msgtype":"m.text"},"ts":1327373404000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Philip`: oh well that's yet another option, yes","msgtype":"m.text"},"ts":1327373460000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Philip`: we could do that, indeed","msgtype":"m.text"},"ts":1327373461000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Isn't clamp-to-edge-but-clip-to-transformed-source-rectangle the option you were suggesting?","msgtype":"m.text"},"ts":1327373462000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"zewt: Yeah","msgtype":"m.text"},"ts":1327373463000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(Annoyingly not supported by GL ES 2.0, it seems :-( )","msgtype":"m.text"},"ts":1327373520000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: no, but in any case yours seems better","msgtype":"m.text"},"ts":1327373521000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"doesn't understand the difference, then","msgtype":"m.emote"},"ts":1327373580000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I guess the important question is whether clamp-to-edge-but-clip-to-transformed-source-rectangle is implementable by the people who can't implement clamp-to-edge","msgtype":"m.text"},"ts":1327373581000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"consider a 2x2 green, drawing from -1,-1 to 1,1","msgtype":"m.text"},"ts":1327373582000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Philip`: for canvas you could fake it by enlarging the texture and filling in the edges yourself, I think (since the drawing vocabulary is much more limited)","msgtype":"m.text"},"ts":1327373583000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1327373640000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"consider a 2x2 green, drawing from -1,-1 to 2,2","msgtype":"m.text"},"ts":1327373641000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what i was suggesting would have blurry top left and sharp bottom right","msgtype":"m.text"},"ts":1327373642000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hmm, by \"transformed-source-rectangle\" I actually mean \"transformed-original-image-data-bounds\"","msgtype":"m.text"},"ts":1327373643000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"zewt: Yeah, adding a 1-pixel transparent border and then clamp-to-edge would work (though it's a pain when under power-of-two size constraints)","msgtype":"m.text"},"ts":1327373700000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Hixie: Oh, okay, I think I see","msgtype":"m.text"},"ts":1327373760000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"That sounds weird :-p","msgtype":"m.text"},"ts":1327373761000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"vaguely remembers clamp-to-edge-but-clip-to-transformed-source-rectangle being discussed in some bug ages ago, but doesn't even know what bug tracker it was on","msgtype":"m.emote"},"ts":1327373940000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"gives up remembering and falls asleep","msgtype":"m.emote"},"ts":1327373941000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: guessing that if you don't have NPOT support in hardware, you're already either going to have to deal with it yourself or not accelerate at all","msgtype":"m.text"},"ts":1327373942000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: Yeah, it was annoying me primarily in the context of a game where all the source data is POT; browsers will have to deal with NPOT images anyway","msgtype":"m.text"},"ts":1327374120000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"guessing at worst you'd hit slow paths more often","msgtype":"m.text"},"ts":1327374180000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"but i'd imagine that wouldn't really be a slow path--since NPOT images are the norm with canvas, not the exception","msgtype":"m.text"},"ts":1327374240000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"hmmm","msgtype":"m.text"},"ts":1327377120000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'm not sure clipping actually really works","msgtype":"m.text"},"ts":1327377121000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"since the output has to be defined for all pixels...","msgtype":"m.text"},"ts":1327377122000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hmm, I want to do a CSS transform rotation with the transform origin being a point on the baseline of the text in the element","msgtype":"m.text"},"ts":1327382700000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"is that possible somehow?","msgtype":"m.text"},"ts":1327382701000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"If I add a css file dynamically to the document, is there any way to know if its completed loading?","msgtype":"m.text"},"ts":1327386060000,"senderName":"yolin","senderId":"yolin@irc"},
{"content":{"body":"onload on the <link> iirc","msgtype":"m.text"},"ts":1327386180000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, onload doesnt fire on <link> :(","msgtype":"m.text"},"ts":1327387800000,"senderName":"yolin","senderId":"yolin@irc"},
{"content":{"body":"file a bug with the browser, spec says it should :-)","msgtype":"m.text"},"ts":1327387860000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"okay, chrome does not fire, firefox and opera does","msgtype":"m.text"},"ts":1327387980000,"senderName":"yolin","senderId":"yolin@irc"},
{"content":{"body":"hah. Google suggests \"DOOM 3 Validation\" when searching for \"DOM 3 Validation\"","msgtype":"m.text"},"ts":1327389900000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"http://googlecode.blogspot.com/2012/01/lets-make-tcp-faster.html is interesting","msgtype":"m.text"},"ts":1327392000000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"apparently the Proportional Rate Reduction stuff is already supported in the Linux kernel","msgtype":"m.text"},"ts":1327392001000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"\"reduces the TCP latency of connections experiencing losses by 3-10% depending on the response size\"","msgtype":"m.text"},"ts":1327392060000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so it would be nice to have defer and async support in Opera","msgtype":"m.text"},"ts":1327392180000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it seems like we have prevailing agreement for putting warnings on the ancient DOM specs, and links to latest versions","msgtype":"m.text"},"ts":1327395180000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"not that it's needed anyway","msgtype":"m.text"},"ts":1327395240000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"not from the WebApps WG anyway","msgtype":"m.text"},"ts":1327395300000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"because those are not within the realm of the WebApps WG anyway","msgtype":"m.text"},"ts":1327395301000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"they are orphans","msgtype":"m.text"},"ts":1327395302000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think it comes down to what PLH reckons should be done","msgtype":"m.text"},"ts":1327395303000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I am obviously also +1 on poiting out that old stuff is old, but I have learnt to fear email threads like that","msgtype":"m.text"},"ts":1327397580000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"MikeSmith, I think we established last time that WebApps owns them now","msgtype":"m.text"},"ts":1327397640000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"There is *always* someone who says \"but you can't say that maybe (some old spec) is old because we have an unspecified law that requires us to implement it\"","msgtype":"m.text"},"ts":1327397641000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"we who?","msgtype":"m.text"},"ts":1327397642000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"WebApps :)","msgtype":"m.text"},"ts":1327397643000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1327397644000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"plh-less discussions about changes to those docs are a tree falling in a forest","msgtype":"m.text"},"ts":1327397820000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"jgraham: I find it super-hard to believe that laws or regulations require consumer electronics to have any particular level of any part DOM","msgtype":"m.text"},"ts":1327397880000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"MikeSmith: Quite devestating if you happen to live in the tree?","msgtype":"m.text"},"ts":1327397940000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"that's because that assertion is BS","msgtype":"m.text"},"ts":1327397941000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"time savings suggestion is we just make the plea to plh","msgtype":"m.text"},"ts":1327397942000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"who likely would find it a good idea","msgtype":"m.text"},"ts":1327398000000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hsivonen: What is true is that some non-Web specs reference specific versions of web specs.","msgtype":"m.text"},"ts":1327398001000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"for the very good reasons that have already been multiply explained in that thread","msgtype":"m.text"},"ts":1327398002000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"This is not a positive thing and anything we can do to discourage people from doing that is good","msgtype":"m.text"},"ts":1327398060000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"obviously putting warnings on those docs has no effects on whatever ancient references wherever","msgtype":"m.text"},"ts":1327398061000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Well, unless they decide to do the other thing that sometimes happens where they fork the spec","msgtype":"m.text"},"ts":1327398062000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(insert ironic comment about W3C only permitting harmful forks here)","msgtype":"m.text"},"ts":1327398120000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"hmm, no anne","msgtype":"m.text"},"ts":1327402620000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Ms2ger: am I right that Function? is used currently with onfoo handlers","msgtype":"m.text"},"ts":1327402621000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Yes, with the annotation","msgtype":"m.text"},"ts":1327402680000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"As in https://hg.mozilla.org/users/jst_mozilla.com/dom-bindings/rev/18484b18c12f#l1.12","msgtype":"m.text"},"ts":1327402681000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: do you remember any cases when Function? is used without TreatNonCallableAsNull ?","msgtype":"m.text"},"ts":1327402800000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Don't think so","msgtype":"m.text"},"ts":1327402801000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"ok, good","msgtype":"m.text"},"ts":1327402802000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"And if so, they're wrong","msgtype":"m.text"},"ts":1327402803000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"been 9 years since the first XForms Basic aka Web Forms 2 draft","msgtype":"m.text"},"ts":1327416120000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"http://www.hixie.ch/specs/html/forms/xforms-basic-1","msgtype":"m.text"},"ts":1327416121000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Those were the days","msgtype":"m.text"},"ts":1327416180000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1327416181000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"off by 1","msgtype":"m.text"},"ts":1327416182000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"8 years","msgtype":"m.text"},"ts":1327416183000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"YEah, that sounds right","msgtype":"m.text"},"ts":1327416184000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"WHATWG started in 2004 at least","msgtype":"m.text"},"ts":1327416185000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"We should have a party in 2014","msgtype":"m.text"},"ts":1327416186000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Maybe Mozilla is willing to contribute one of Microsoft's release cakes","msgtype":"m.text"},"ts":1327416300000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"You would have thought there would be some money floating around from all the economic activity that HTML 5 generated to fund that","msgtype":"m.text"},"ts":1327416301000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(a party not a stale donut)","msgtype":"m.text"},"ts":1327416302000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Mind you if people working on the spec were able to capture a significant fraction of the value it created, Hixie would be the one with multimillion dollar tax returns","msgtype":"m.text"},"ts":1327416420000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"He's waiting for a law to require HTML5 compliance, to spec that every user must pay him :)","msgtype":"m.text"},"ts":1327416480000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"\"The open action registry is <http://hsivonen.iki.fi/webm-share/>\"","msgtype":"m.text"},"ts":1327416481000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"ArtB++","msgtype":"m.text"},"ts":1327416482000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"See, living standards are dangerous.","msgtype":"m.text"},"ts":1327416483000,"senderName":"wilhelm","senderId":"wilhelm@irc"},
{"content":{"body":"Ms2ger: Open action registry?","msgtype":"m.text"},"ts":1327418640000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"http://lists.w3.org/Archives/Public/public-webevents/2012JanMar/0009.html","msgtype":"m.text"},"ts":1327418641000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: :-)","msgtype":"m.text"},"ts":1327418700000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"TabAtkins, maybe Values and Units should define an <angle-or-zero> type?  Or redefine <angle> to be <angle-unit-required> or zero, so specs that want to allow 0 can use <angle> and specs that don't have to use <angle-unit-required>?","msgtype":"m.text"},"ts":1327419480000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"(or some better name)","msgtype":"m.text"},"ts":1327419481000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"It seems like it makes the most sense for Values and Units to expose an easy way to do \"angle or zero\", since most specs that use <angle> will want that.","msgtype":"m.text"},"ts":1327419540000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"For that matter, why not define a new <length-unit-required> and redefine <length> in terms of that?  That requires a parser change, but it should be compatible with content, yes?","msgtype":"m.text"},"ts":1327419600000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Oh, on the subject of CSS, what's the easiest way to define a radial gradient from (some colour) to transparent where the value of (some colour) is set in a script?","msgtype":"m.text"},"ts":1327419660000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Also, random remark: after I'm done with transforms/transitions/animations, I want to do CSSOM.  Lack of CSSOM interop has been a thorn in my side when writing JS for close to a year now.  Like: serialization.","msgtype":"m.text"},"ts":1327419720000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"TabAtkins, I've noticed a few editorial bugs (typos etc.) in Values and Units.  It seems there's nowhere to file bugs, so I have to send mail to www-style?","msgtype":"m.text"},"ts":1327420140000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Ugh, why does the CSSWG use conference calls for technical discussion?","msgtype":"m.text"},"ts":1327420800000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"wants to go back to DOM-land","msgtype":"m.emote"},"ts":1327420860000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"AryehGregor, enjoy working with Glenn :)","msgtype":"m.text"},"ts":1327421880000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Which Glenn?","msgtype":"m.text"},"ts":1327421881000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"And is he in CSS-land or DOM-land?","msgtype":"m.text"},"ts":1327421882000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Weird Glenn","msgtype":"m.text"},"ts":1327421883000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"(skynav)","msgtype":"m.text"},"ts":1327421884000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I've seen him in HTML-land a bit.","msgtype":"m.text"},"ts":1327421885000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"jamesr_, in my EC2 Windows Server VM, about:gpu claims hardware acceleration for everything, but CSS 3D stuff still seems not to work correctly.","msgtype":"m.text"},"ts":1327422060000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"It looks like I could get a VM with a GPU if I wanted to pay $2.60/hour instead of $0.00/hour (free usage tier yay), but I don't know if Chrome would actually notice it, since I doubt it's configured for use with the actual display.","msgtype":"m.text"},"ts":1327422180000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"I imagine the problem would be more whether it can output via Remote Desktop, which is different to normal display output","msgtype":"m.text"},"ts":1327422480000,"senderName":"Philip`_","senderId":"Philip`_@irc"},
{"content":{"body":"(It's not like VNC where it effectively sends screenshots over the network)","msgtype":"m.text"},"ts":1327422481000,"senderName":"Philip`_","senderId":"Philip`_@irc"},
{"content":{"body":"What does it do, then?","msgtype":"m.text"},"ts":1327422600000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"AryehGregor: It's apparently implemented as a display device driver, and it understands higher-level drawing commands instead of simply bitmaps","msgtype":"m.text"},"ts":1327423380000,"senderName":"Philip`_","senderId":"Philip`_@irc"},
{"content":{"body":"Philip`_, so kind of like X forwarding?","msgtype":"m.text"},"ts":1327423440000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"(e.g. http://ericomguy.blogspot.com/2008/02/using-windows-server-2008-terminal.html - \"RDP 6 is able to transmit the raw instructions from the Desktop Window Manager\")","msgtype":"m.text"},"ts":1327423500000,"senderName":"Philip`_","senderId":"Philip`_@irc"},
{"content":{"body":"AryehGregor: Seems vaguely similar, except less terrible than X forwarding","msgtype":"m.text"},"ts":1327423501000,"senderName":"Philip`_","senderId":"Philip`_@irc"},
{"content":{"body":"Yeah, I was going to say.","msgtype":"m.text"},"ts":1327423502000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"(It sounds (based on my very limited knowledge) like it's based on copying screenshots plus lots of optimisations for cases when it recognises higher-level API calls, rather than being based on blindly proxying low-level API calls as in X)","msgtype":"m.text"},"ts":1327423680000,"senderName":"Philip`_","senderId":"Philip`_@irc"},
{"content":{"body":"Hey folks, got a bit of a crazy one here.","msgtype":"m.text"},"ts":1327426920000,"senderName":"remysharp","senderId":"remysharp@irc"},
{"content":{"body":"This url - http://jsbin.com/uticev/2 if the popup is blocked (testing chrome here), should it be able to run the JavaScript in said popup?","msgtype":"m.text"},"ts":1327426921000,"senderName":"remysharp","senderId":"remysharp@irc"},
{"content":{"body":"If you test that url in chrome (I'm on 16) and you see any body text - then it came from the popup *that was blocked*. That's not right is it?","msgtype":"m.text"},"ts":1327426980000,"senderName":"remysharp","senderId":"remysharp@irc"},
{"content":{"body":"wow, that is a bit of a crazy one :D","msgtype":"m.text"},"ts":1327427160000,"senderName":"micheil","senderId":"micheil@irc"},
{"content":{"body":"If you want to hide some JavaScript in Chrome, you can do it via the popup, because it's not showing anything on the network tab either /begin evil laugh","msgtype":"m.text"},"ts":1327427220000,"senderName":"remysharp","senderId":"remysharp@irc"},
{"content":{"body":"Ugh, someone is mailing the members-only CSS list.","msgtype":"m.text"},"ts":1327427820000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"didn't even notice","msgtype":"m.emote"},"ts":1327427821000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Is there some agreed-upon convention to use www-style if possible?","msgtype":"m.text"},"ts":1327427822000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"For technical issues, yes","msgtype":"m.text"},"ts":1327427823000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Tell them to resend in that case","msgtype":"m.text"},"ts":1327427824000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Administrivia is on the MO list, though","msgtype":"m.text"},"ts":1327427880000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"AryehGregor: I'd rather ben as consistent as possible and always require a unit on 0 values that aren't <length>s, then just define Transforms to accept either an <angle> or 0.","msgtype":"m.text"},"ts":1327428600000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, so you think transform: rotate(0) should be a parse error?","msgtype":"m.text"},"ts":1327428601000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"That doesn't match any implementations AFAICT.","msgtype":"m.text"},"ts":1327428602000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"...I just said that Transforms should be defined toa ccept either.","msgtype":"m.text"},"ts":1327428603000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"read \"then\" as \"than\"","msgtype":"m.emote"},"ts":1327428660000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Ah, kk.","msgtype":"m.text"},"ts":1327428661000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Why not move that into Values and Units and require properties that don't want 0 == 0deg to opt out?","msgtype":"m.text"},"ts":1327428662000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"I mean, every existing <angle> property really wants to accept unitless zero also, right?","msgtype":"m.text"},"ts":1327428663000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"So why require the common case to add an extra proviso, instead of the uncommon case?","msgtype":"m.text"},"ts":1327428664000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Because then we're extending the \"0 can be unitless\" exception to more units, and making it harder to remember when it can and can't be unitless.","msgtype":"m.text"},"ts":1327428720000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If I coudl go back in time I'd remove the unitless-0 from <length>, too.","msgtype":"m.text"},"ts":1327428721000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So you'd want every spec that includes <length> to be updated to say \"<length> or zero\"?","msgtype":"m.text"},"ts":1327428722000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"No, I'm travelling back in time.  Every spec that uses <length> just wouldn't accept unitless 0 in the first place.","msgtype":"m.text"},"ts":1327428780000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Or \"<length> or <number>, and a <number> that's not zero is a parse error\", or whatever's required?","msgtype":"m.text"},"ts":1327428781000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"You'd just type \"margin: 0px;\"","msgtype":"m.text"},"ts":1327428782000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That seems needlessly inconvenient for authors.","msgtype":"m.text"},"ts":1327428783000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"It's also too late for that, and it makes sense for <angle> to behave consistently with <length>.","msgtype":"m.text"},"ts":1327428784000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"I fail to see how 2 characters is inconvenient.","msgtype":"m.text"},"ts":1327428785000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I agree that it's too late for that, thus my reference to time travel.  No other unit should act like this, though, because it's future-hostile.","msgtype":"m.text"},"ts":1327428840000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(As I argued in a previous discussion of this subject with you.)","msgtype":"m.text"},"ts":1327428841000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I agree that it's future-hostile to *require* that *all* specs accept unitless zero for <angle>.","msgtype":"m.text"},"ts":1327428842000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"But is it future-hostile to make unitless zero for <angle> work except if a particular spec specifically prohibits it?","msgtype":"m.text"},"ts":1327428900000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Is allowing things like rotate(0) future-hostile?  How so?","msgtype":"m.text"},"ts":1327428901000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"It's hostile to authors to have inconsistent rules about where, precisely, you can type a unitless 0.  This is why I dislike unitless 0 in <length>, but at least that's only a single place and *all* lengths accept it.","msgtype":"m.text"},"ts":1327428902000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So it's bad because it's future-hostile or author-hostile?","msgtype":"m.text"},"ts":1327428960000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"I explained why it's future-hostile previously.  It prevents us from producing grammars that have both an <angle> and a <length> when either can appear.  Grammars like this have already appeared at least once (in the *-gradient functions), though it's since changed.","msgtype":"m.text"},"ts":1327428961000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Extending unitless 0 to more types is future-hostile.  Making authors remember when they can omit the unit on <angle> and when they can't is author-hostile.","msgtype":"m.text"},"ts":1327429020000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That's not a problem if \"0\" parses to <zero> and \"0deg\" parses to <angle-with-unit> and <angle> is defined to be either <angle-with-unit> or <zero>.","msgtype":"m.text"},"ts":1327429021000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":" (Which is why Transforms is currently author-hostile.)","msgtype":"m.text"},"ts":1327429022000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Transforms allows authors to always omit the unit on <angle>.","msgtype":"m.text"},"ts":1327429023000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"I think you're assuming that authors read the grammar, Aryeh.","msgtype":"m.text"},"ts":1327429024000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It's more author-hostile to say you can omit the unit on <length> but not <angle> -- that's much more confusing.","msgtype":"m.text"},"ts":1327429025000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"No, I'm not.","msgtype":"m.text"},"ts":1327429026000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"This is not a valid assumption.","msgtype":"m.text"},"ts":1327429027000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That would be silly.","msgtype":"m.text"},"ts":1327429028000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"I'm assuming authors are used to using \"0\" for lengths and will assume it works for angles too.","msgtype":"m.text"},"ts":1327429080000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Okay, then you must be misunderstanding me, because your explanation doesn't address the problem I was pointing out.","msgtype":"m.text"},"ts":1327429081000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Although an angle of zero is useless for anything in Transforms right now.)","msgtype":"m.text"},"ts":1327429082000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"My reply to \"It prevents us from producing grammars that have both an <angle> and a <length> when either can appear.\" is no it doesn't: you can define new <angle-with-unit> and <length-with-unit> that don't accept \"0\" and use those in such cases.","msgtype":"m.text"},"ts":1327429083000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"If authors have to remember that in property X they can omit the unit on <angle> but in property Y they have to include the unit (because of grammar ambiguity), that's hostile.","msgtype":"m.text"},"ts":1327429140000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The large majority of the time, that's not an issue, so you can use <angle> or <length> and allow unitless zero.","msgtype":"m.text"},"ts":1327429141000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Ah, that line.","msgtype":"m.text"},"ts":1327429142000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That's also wrong.","msgtype":"m.text"},"ts":1327429143000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I would say if such a situation arises, the syntax of property X should probably be rethought anyway, because it's excessively magical.  This is assuming that authors would legitimately want to use \"0\" for both an angle and a length.","msgtype":"m.text"},"ts":1327429144000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"I offer as proof the older gradient syntaxes, where \"0px\" and \"0deg\" had different results.","msgtype":"m.text"},"ts":1327429145000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"AryehGregor: Did you mean to say Property Y? Otherwise I'm confused.","msgtype":"m.text"},"ts":1327429200000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So that could be defined to accept <length> or <angle-with-unit>, but not <angle>.  Or whatever.","msgtype":"m.text"},"ts":1327429201000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Maybe.","msgtype":"m.text"},"ts":1327429202000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":":/","msgtype":"m.text"},"ts":1327429203000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Could you give a more specific example of the old gradient syntax where it would be ambiguous?","msgtype":"m.text"},"ts":1327429204000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Yes, one sec.","msgtype":"m.text"},"ts":1327429205000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Argh, the first WD with gradients already removed the problem.  I'd have to go CVS diving.  Instead, may I simply explain the issue?","msgtype":"m.text"},"ts":1327429260000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hg++","msgtype":"m.text"},"ts":1327429320000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"My question is really: is the ambiguity theoretical, or something authors would actually hit in practice?  Would authors actually *want* to specify both 0deg and 0px in the ambiguous position?","msgtype":"m.text"},"ts":1327429321000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Yes.","msgtype":"m.text"},"ts":1327429322000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So, here's the example.","msgtype":"m.text"},"ts":1327429323000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Okay.","msgtype":"m.text"},"ts":1327429324000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"The first argument of radial-gradient had the grammar \"<position> || <angle>\".","msgtype":"m.text"},"ts":1327429380000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"<position> specified the center-point of the gradient, <angle> specified the direction that lengths in the color-stops were drawn along (this is significant for ellipses).","msgtype":"m.text"},"ts":1327429381000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So, \"radial-gradient(0, red, blue)\" is ambiguous.","msgtype":"m.text"},"ts":1327429440000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Because the default for <position> was \"center\".)","msgtype":"m.text"},"ts":1327429441000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Because \"0\" really means \"top left\" here?","msgtype":"m.text"},"ts":1327429500000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Then I'd prohibit unitless zero altogether in this case, since it's not obvious what it does.","msgtype":"m.text"},"ts":1327429501000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"I don't expect authors to realize that unitless zero works for <length> but not <angle>.  I think that's what's author-hostile.","msgtype":"m.text"},"ts":1327429502000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Especially since <angle> is so rare and <length> is so common.","msgtype":"m.text"},"ts":1327429560000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Authors will extrapolate from what they know to what they don't.","msgtype":"m.text"},"ts":1327429561000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"I.e., that units can be omitted for 0.","msgtype":"m.text"},"ts":1327429562000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Okay, so you prohibit unitless 0 for angle there.  What about \"radial-gradient(left top 0, red, blue)\"?","msgtype":"m.text"},"ts":1327429563000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Also, it would be poor form in this case to specify \"0\" to mean \"top left\" or \"top center\" or whatever it means -- it's confusing unless you know what the default is.","msgtype":"m.text"},"ts":1327429564000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"You should just say \"top center\" or something, much clearer.","msgtype":"m.text"},"ts":1327429620000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"What does \"left top 0\" even mean?","msgtype":"m.text"},"ts":1327429621000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"As a <position>, I mean.","msgtype":"m.text"},"ts":1327429622000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Actually, that's still ambiguous.  \"0 left top\" isn't.  It means \"measure the gradient-line along 0deg, and center the gradient at left top\".","msgtype":"m.text"},"ts":1327429623000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oh, wait, \"<position> || <angle>\".  I read that as \"<position> | <angle>\".","msgtype":"m.text"},"ts":1327429680000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"is still getting used to CSS","msgtype":"m.emote"},"ts":1327429681000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"feels DOM stuff is saner, but maybe he's just used to it","msgtype":"m.emote"},"ts":1327429740000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"tries again","msgtype":"m.emote"},"ts":1327429741000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Well, DOM stuff is specified nowadays","msgtype":"m.text"},"ts":1327429742000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: The stuff we're talking about is specified precisely.","msgtype":"m.text"},"ts":1327429743000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'd make it \"<position-with-unit> || <angle-with-unit>\", so units are just required for everything.  Where <position-with-unit> doesn't allow a unitless zero in any coordinate.","msgtype":"m.text"},"ts":1327429744000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Anything else is confusing.","msgtype":"m.text"},"ts":1327429800000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"TabAtkins, can we clone you and fantasai already?","msgtype":"m.text"},"ts":1327429801000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Alternatively, I'd rewrite the syntax entirely.","msgtype":"m.text"},"ts":1327429802000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"AryehGregor: Oh, so now writing \"0 50%\" isn't allowed?  That's a perfectly valid background-position.","msgtype":"m.text"},"ts":1327429803000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Which is in fact what happened.","msgtype":"m.text"},"ts":1327429804000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Ms2ger: You come up with the process, I'll provide the genetic material.","msgtype":"m.text"},"ts":1327429805000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, right, but now you're mixing in <angle>s, so you just made it confusing, which it's not for background-position.","msgtype":"m.text"},"ts":1327429806000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"I think this kind of syntactic construct should just be avoided to start with.","msgtype":"m.text"},"ts":1327429860000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"AryehGregor: My point is that your *restriction* is confusing as well, since it's disallowing forms that are valid in other locations.","msgtype":"m.text"},"ts":1327429861000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I think the whole syntax is confusing no matter what.","msgtype":"m.text"},"ts":1327429862000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"AryehGregor: It's a \"now you have two problems\" situation.","msgtype":"m.text"},"ts":1327429863000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You can avoid the whole mess by simply *not allowing unitless 0 in <angle>s*.","msgtype":"m.text"},"ts":1327429864000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I think any syntax where you can have both <length> and <angle> and 0px is different from 0deg is inherently confusing and should be avoided anyway.","msgtype":"m.text"},"ts":1327429865000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"AryehGregor: Ah, you misunderstood the example.","msgtype":"m.text"},"ts":1327429920000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"No, because then authors are going to have no idea what \"0\" means in that context.","msgtype":"m.text"},"ts":1327429921000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"So you haven't avoided the problem.","msgtype":"m.text"},"ts":1327429922000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"It's still author-hostile.","msgtype":"m.text"},"ts":1327429923000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Authors are not going to realize units are always optional in <length> but not in <angle>.","msgtype":"m.text"},"ts":1327429924000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"0px and 0deg are actually identical there.  *However*, the *default*s are not 0, so it matters which one you parse as, since you fill in the missing one with a default value.","msgtype":"m.text"},"ts":1327429925000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Okay, let me put it this way: if I'm completely confused when you personally try to explain it to me, then I think that's pretty darned good proof that the average author would find it confusing when they copy-paste from w3schools.","msgtype":"m.text"},"ts":1327429980000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Yes, the fact that unitless stuff is restricted to <length> confuses authors.  That's why allowing unitless 0 in <length> was a mistake in the first place.  Your suggestion won't reduce the confusion, it will just shift it around.","msgtype":"m.text"},"ts":1327429981000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And, I argue, increase it.","msgtype":"m.text"},"ts":1327429982000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"AryehGregor: You're confused because I was giving invalid examples.  ^_^","msgtype":"m.text"},"ts":1327429983000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Um, thanks?  :)","msgtype":"m.text"},"ts":1327430040000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"I would not read \"0 left top\" as being the same as \"0deg left top\".","msgtype":"m.text"},"ts":1327430041000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":". . . Which I guess is your point, okay.","msgtype":"m.text"},"ts":1327430042000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Yay!","msgtype":"m.text"},"ts":1327430043000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But I wouldn't read \"0 20deg\" as \"0px 20deg\" either.","msgtype":"m.text"},"ts":1327430100000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Hmm.  Maybe.","msgtype":"m.text"},"ts":1327430101000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Sure, that's still bad.  But that's a badness we're forced to live with.","msgtype":"m.text"},"ts":1327430102000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But I wouldn't count on it.","msgtype":"m.text"},"ts":1327430103000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Or else we make CSS grammar more inconsistent.","msgtype":"m.text"},"ts":1327430104000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"No, because you could either a) ban unitless zero entirely from that function, or b) redesign the function so it's less confusing.","msgtype":"m.text"},"ts":1327430105000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Allowing unitless zero for <length> but not <angle> is already inconsistent.","msgtype":"m.text"},"ts":1327430106000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Especially since in practice it *is* allowed for <angle>, in every single place in CSS that actually accepts <angle> in practice, or almost.","msgtype":"m.text"},"ts":1327430160000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"The fact that the grammar doesn't say that does not make it less true.","msgtype":"m.text"},"ts":1327430161000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"And we can't go back and change that either.","msgtype":"m.text"},"ts":1327430162000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"AryehGregor: indeed.","msgtype":"m.text"},"ts":1327430220000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"I know.","msgtype":"m.text"},"ts":1327430221000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'm willing to accept slightly inconsistent badness in legacy APIs if I get consistency in the future, rather than accept consistent badness for all time.","msgtype":"m.text"},"ts":1327430280000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Within limits, of course.","msgtype":"m.text"},"ts":1327430281000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"At some point \"legacy APIs\" becomes \"the majority of the platform\", and it's not worth being inconsistent with it.","msgtype":"m.text"},"ts":1327430282000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So you think all future <angle> should not allow unitless zero even if it would be unambiguous in practice?","msgtype":"m.text"},"ts":1327430340000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Yes.","msgtype":"m.text"},"ts":1327430341000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(in that case)","msgtype":"m.text"},"ts":1327430342000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Even though all existing <angle> does allow unitless zero?","msgtype":"m.text"},"ts":1327430343000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Just like <length>?","msgtype":"m.text"},"ts":1327430344000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Not quite true - aural CSS didn't allow unitless <angle>.  ^_^","msgtype":"m.text"},"ts":1327430345000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And current Speech module doesn't either.","msgtype":"m.text"},"ts":1327430346000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Basically nobody supported aural CSS, and any authors that used it got it wrong.","msgtype":"m.text"},"ts":1327430400000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Speech is what?","msgtype":"m.text"},"ts":1327430401000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Nobody used it in the first place.","msgtype":"m.text"},"ts":1327430402000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Speech is a reworking of the original concepts behind Aural.","msgtype":"m.text"},"ts":1327430403000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"When I write conical gradients into Images 4, they'll require an <angle> too.","msgtype":"m.text"},"ts":1327430520000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Will implementers actually prohibit the unitless zero?  Because they didn't for transforms.","msgtype":"m.text"},"ts":1327430521000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"I suspect the implementers didn't even realize that <angle> doesn't allow unitless zero.","msgtype":"m.text"},"ts":1327430522000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Yes, that was the problem.","msgtype":"m.text"},"ts":1327430523000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Most implementors are *not* authors.","msgtype":"m.text"},"ts":1327430580000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Maybe if *implementers* assume unitless zero works for <angle>, a typical author stands no chance of getting it right in your scheme?","msgtype":"m.text"},"ts":1327430581000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"They know way more than authors.","msgtype":"m.text"},"ts":1327430582000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Some of them actually read specs.","msgtype":"m.text"},"ts":1327430583000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"I wouldn't take that as a given.  ^_^","msgtype":"m.text"},"ts":1327430584000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"An author has to get it wrong once and then they learn it for life.","msgtype":"m.text"},"ts":1327430585000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Your proposal (allow it wherever it would be unambiguous) means they have to relearn it for every property that accepts <angle>.","msgtype":"m.text"},"ts":1327430640000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And, presumably, <time>/etc too.","msgtype":"m.text"},"ts":1327430641000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Okay, whatever.","msgtype":"m.text"},"ts":1327430700000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"It's up to implementers.","msgtype":"m.text"},"ts":1327430701000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"AryehGregor: To address your other issues: Shane (from Google) and Greg (from... somewhere not a browser?) are working on fixing CSSOM.  You're welcome to join when you have the time.","msgtype":"m.text"},"ts":1327431780000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Report V&U bugs on the mailing list, yes.","msgtype":"m.text"},"ts":1327431840000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Or, personally to me.","msgtype":"m.text"},"ts":1327431841000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That works too.","msgtype":"m.text"},"ts":1327431842000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, they're actively editing it?  Last I saw, the editor was listed as annevk, who disclaims all responsibility.","msgtype":"m.text"},"ts":1327431843000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Yes.  They ahven't published a new draft yet, but they're actively working on it.","msgtype":"m.text"},"ts":1327431900000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"They don't publish their work as they work on it?","msgtype":"m.text"},"ts":1327431960000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"They haven't done so yet?  I dunno what they're doing yet.","msgtype":"m.text"},"ts":1327431961000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I think Greg is doing a rework at the moment, and then they'll settle into incremental edits.","msgtype":"m.text"},"ts":1327431962000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, itym Glenn, from Samsung","msgtype":"m.text"},"ts":1327432020000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: Yes, thank you.","msgtype":"m.text"},"ts":1327432080000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Has anyone thought about bringing the webkit-filters to canvas?","msgtype":"m.text"},"ts":1327432140000,"senderName":"rjett1","senderId":"rjett1@irc"},
{"content":{"body":"rjett1: I'm sure it's been thought of.  ^_^  But Hixie is mostly holding off on canvas updates until he does a big update.","msgtype":"m.text"},"ts":1327432260000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"where would discussion about that api occur?","msgtype":"m.text"},"ts":1327432261000,"senderName":"rjett1","senderId":"rjett1@irc"},
{"content":{"body":"whatwg⊙wo is appropriate.","msgtype":"m.text"},"ts":1327432320000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"cool, thanks.","msgtype":"m.text"},"ts":1327432380000,"senderName":"rjett1","senderId":"rjett1@irc"},
{"content":{"body":"Oh, wow, Firebug inserts stuff into the DOM.  That's really confusing.","msgtype":"m.text"},"ts":1327433280000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Philip`_: so i don't think clipping is gonna work","msgtype":"m.text"},"ts":1327433700000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Philip`_: since i don't really understand how to spec it :-)","msgtype":"m.text"},"ts":1327433701000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ugh.  I really can't spec or test transforms without access to a WebKit implementation that actually supports CSS 3D transforms correctly.","msgtype":"m.text"},"ts":1327433820000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"You can't spec transforms without an implementation of transforms?","msgtype":"m.text"},"ts":1327433821000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I can understand testing, if you want tests that don't just all fail.","msgtype":"m.text"},"ts":1327433822000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But my primary computer runs nouveau, my laptop runs the Intel mesa driver, my wife's laptop has an old video card with no up-to-date driver available, my VM has no graphics card at all, and WebKit refuses to do 3D CSS properly for any of them . . .","msgtype":"m.text"},"ts":1327433880000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"TabAtkins, I don't write specs without tests.  They're doomed to be incorrect.","msgtype":"m.text"},"ts":1327433881000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"At least, for already-implemented features.","msgtype":"m.text"},"ts":1327433882000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Well, even for not-already-implemented.","msgtype":"m.text"},"ts":1327433883000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"I can't in good conscience suggest a definition for perspective-origin when I only know what Gecko does.","msgtype":"m.text"},"ts":1327433940000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"(Which I think is wrong anyway.)","msgtype":"m.text"},"ts":1327433941000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Well, if you can test non-already-implemented features, you can test badly-implemented features.","msgtype":"m.text"},"ts":1327433942000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"WebKit seems to just ignore the perspective property on my machines.","msgtype":"m.text"},"ts":1327433943000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"I take it it doesn't on other people's.","msgtype":"m.text"},"ts":1327433944000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"And I can't easily get IE10 either, since it's Win8 only.","msgtype":"m.text"},"ts":1327434000000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Gimme a test and I can see if it fails on my machine.","msgtype":"m.text"},"ts":1327434060000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I have to iterate stuff a lot.","msgtype":"m.text"},"ts":1327434061000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Not gonna work well by proxy.","msgtype":"m.text"},"ts":1327434062000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"kk","msgtype":"m.text"},"ts":1327434063000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"MikeSmith already kindly confirmed that perspective does actually work on his Mac.","msgtype":"m.text"},"ts":1327434064000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"E.g., this example doesn't work on any of my machines: http://www.webkit.org/blog-files/3d-transforms/perspective-by-example.html","msgtype":"m.text"},"ts":1327434065000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"I know what you mean - I had to iterate a lot to figure out a sane behavior for list bullet positioning.","msgtype":"m.text"},"ts":1327434066000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"In Chrome or Safari, where applicable.","msgtype":"m.text"},"ts":1327434067000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Oh yeah, anything that requires hardware breaks the tab on my linux box.","msgtype":"m.text"},"ts":1327434120000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"This doesn't require GPU support in Gecko.","msgtype":"m.text"},"ts":1327434121000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"And 3D stuff works partially in Chrome for me.","msgtype":"m.text"},"ts":1327434180000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"But perspective is wrong.","msgtype":"m.text"},"ts":1327434181000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"-webkit-transform: perspective() does something, unlike -webkit-perspective, but it's wrong.","msgtype":"m.text"},"ts":1327434182000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"No effect for me on Aurora/Linux.","msgtype":"m.text"},"ts":1327434183000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oh, duh, this is -webkit I think.","msgtype":"m.text"},"ts":1327434184000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That example is WebKit-only, so yeah.  :)","msgtype":"m.text"},"ts":1327434185000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"AryehGregor: Do browsers support the software Mesa driver? (Run with env var LIBGL_ALWAYS_SOFTWARE=1, I think)","msgtype":"m.text"},"ts":1327434240000,"senderName":"Philip`_","senderId":"Philip`_@irc"},
{"content":{"body":"TabAtkins, Gecko example: data:text/html,<!DOCTYPE html><div style=\"width:200px;-moz-perspective:200px;font-size:2em;margin-left:100px;text-align:center\"><div style=\"-moz-transform:rotateX(45deg);-moz-transform-origin:top\">The quick brown fox jumps over the lazy dog","msgtype":"m.text"},"ts":1327434300000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Star Wars-style.","msgtype":"m.text"},"ts":1327434420000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Yup, it works.  (Or at least has an effect.)","msgtype":"m.text"},"ts":1327434421000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: drawImage already has to effectively clip the output to the source rectangle (post transformation), so I think it would probably just have to effectively clip to the intersection of the source rectangle and original image size","msgtype":"m.text"},"ts":1327434480000,"senderName":"Philip`_","senderId":"Philip`_@irc"},
{"content":{"body":"Philip`_: isn't drawimage affected by the composition operator?","msgtype":"m.text"},"ts":1327434540000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I guess when I say \"clip\" I mean some (as far as I remember) currently-handwaved-over clipping that occurs when drawImage draws onto the infinite transparent bitmap that subsequently gets composited","msgtype":"m.text"},"ts":1327434600000,"senderName":"Philip`_","senderId":"Philip`_@irc"},
{"content":{"body":"(as opposed to what clip() does)","msgtype":"m.text"},"ts":1327434720000,"senderName":"Philip`_","senderId":"Philip`_@irc"},
{"content":{"body":"Philip`_: i don't understand what clipping you mean then","msgtype":"m.text"},"ts":1327435800000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins, getComputedStyle() returns resolved value, not used value.  Where \"resolved value\" is something that CSSOM makes up that's almost computed value but not quite.","msgtype":"m.text"},"ts":1327436340000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"AryehGregor: I know.  \"resolved value\" happens to be the used value for 'width'.","msgtype":"m.text"},"ts":1327437600000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Okay.","msgtype":"m.text"},"ts":1327437601000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"My statement was specific.","msgtype":"m.text"},"ts":1327437602000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"AryehGregor: Have you gotten clearance on joining the CSSWG yet?","msgtype":"m.text"},"ts":1327437960000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, um, I've been a member for a few weeks, I think?","msgtype":"m.text"},"ts":1327437961000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"http://www.w3.org/Style/CSS/members.en.php3","msgtype":"m.text"},"ts":1327438020000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Argh, duh, yes.","msgtype":"m.text"},"ts":1327438021000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"What I meant to ask was about taking on editorship of Transforms.","msgtype":"m.text"},"ts":1327438022000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oh.","msgtype":"m.text"},"ts":1327438023000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"From Mozilla?  Yeah, seems so.","msgtype":"m.text"},"ts":1327438024000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Feel free to say I volunteer.","msgtype":"m.text"},"ts":1327438025000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"kk, mind poking the agenda thread around it?","msgtype":"m.text"},"ts":1327438026000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Am I supposed to attend?","msgtype":"m.text"},"ts":1327438080000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"I guess that's not strictly necessary.","msgtype":"m.text"},"ts":1327438081000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Also, I think the FX TF (or something?) concluded that someone from Adobe is supposed to take over editing of those specs.","msgtype":"m.text"},"ts":1327438140000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"In some conference call *they* had.","msgtype":"m.text"},"ts":1327438141000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"http://lists.w3.org/Archives/Public/public-fx/2012JanMar/0046.html","msgtype":"m.text"},"ts":1327438200000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"\"RESOLUTION: Dirk becomes an editor of the SVG+CSS Transforms specification\"","msgtype":"m.text"},"ts":1327438201000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"\"RESOLUTION: Vincent also is an editor of the SVG+CSS Transforms specification\"","msgtype":"m.text"},"ts":1327438202000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"That shouldn't stop you.","msgtype":"m.text"},"ts":1327438203000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"heh, in this e-mail someone talks about \"every time a new html element is discovered\", like we're explorers who keep finding new elements rather than designers inventing them","msgtype":"m.text"},"ts":1327438260000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i like it","msgtype":"m.text"},"ts":1327438261000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hixieum","msgtype":"m.text"},"ts":1327438262000,"senderName":"divya","senderId":"divya@irc"},
{"content":{"body":"I don't know about you, but that's how we discovered <shadow>.","msgtype":"m.text"},"ts":1327438263000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"now i want to read about our adventures discovering new elements","msgtype":"m.text"},"ts":1327438264000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: heh","msgtype":"m.text"},"ts":1327438265000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"It was right behind us the whole time!","msgtype":"m.text"},"ts":1327438266000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1327438267000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"shouldn't face the sun the whole time! :-P","msgtype":"m.text"},"ts":1327438320000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"How else will I stare into it?","msgtype":"m.text"},"ts":1327438321000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"mirror","msgtype":"m.text"},"ts":1327438322000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"mirrors make the sun safe, don't you know","msgtype":"m.text"},"ts":1327438323000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"If you had a large enough parabolic mirror, could you burn the sun by focusing it back at itself?","msgtype":"m.text"},"ts":1327438380000,"senderName":"Philip`_","senderId":"Philip`_@irc"},
{"content":{"body":"If you had a large enough parabolic mirror, it would push you away","msgtype":"m.text"},"ts":1327438381000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Balance it at the point where the solar wind exactly matches the sun's gravity","msgtype":"m.text"},"ts":1327438440000,"senderName":"Philip`_","senderId":"Philip`_@irc"},
{"content":{"body":"TabAtkins, I posted something or other.","msgtype":"m.text"},"ts":1327438441000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Hmm . . . [].forEach(Function.prototype.apply.bind(foo, null)), or [].forEach(function(arr) { foo(arr[0], arr[1], arr[2]) })?  Which is clearer?  :)","msgtype":"m.text"},"ts":1327438500000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"(replace \"[]\" by some actual array)","msgtype":"m.text"},"ts":1327438501000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Philip`_: i actually was thinking more about photon momentum transfer, but yeah, the solar wind would be even more of an effect","msgtype":"m.text"},"ts":1327438502000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"The latter","msgtype":"m.text"},"ts":1327438503000,"senderName":"Philip`_","senderId":"Philip`_@irc"},
{"content":{"body":"The former, but omit the null.","msgtype":"m.text"},"ts":1327438504000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, then it breaks, because the array element gets passed as the first argument of apply, which wants a \"this\" argument for the function call.","msgtype":"m.text"},"ts":1327438560000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"can never even remember which of .apply and .call wants an array","msgtype":"m.emote"},"ts":1327438561000,"senderName":"Philip`_","senderId":"Philip`_@irc"},
{"content":{"body":"AryehGregor: Oh wait, you're mapping apply.  The second, then.","msgtype":"m.text"},"ts":1327438620000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Mapping apply is always confusing.","msgtype":"m.text"},"ts":1327438621000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"prefers [].forEach(foo.aritize(3).unpack()).","msgtype":"m.emote"},"ts":1327438680000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"prefers code that uses well-known primitives like closures and function calls, rather than code that requires him to learn more APIs","msgtype":"m.emote"},"ts":1327438740000,"senderName":"Philip`_","senderId":"Philip`_@irc"},
{"content":{"body":"Philip`_: Luckily, Lisp has APPLY and FUNCALL, which have the same semantics as JS's apply and call.","msgtype":"m.text"},"ts":1327438741000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So that's how I remember.","msgtype":"m.text"},"ts":1327438742000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Unfortunately nobody else knows Lisp","msgtype":"m.text"},"ts":1327438800000,"senderName":"Philip`_","senderId":"Philip`_@irc"},
{"content":{"body":"Well, except for Eich.","msgtype":"m.text"},"ts":1327438801000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Does \"aritize\" exist?","msgtype":"m.text"},"ts":1327438802000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"AryehGregor: No, it's part of functional.js","msgtype":"m.text"},"ts":1327438860000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Which is now part of my bible.","msgtype":"m.text"},"ts":1327438861000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"unpack() isn't part of functional.js, but rather part of my own extensions based on my lisp library.  ^_^  It makes a function take a list when it expects separate argumetns.","msgtype":"m.text"},"ts":1327438920000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Now I want to know if the point where the sun's gravity balances the solar wind + photom momenum transfer is stable. I suppose it is since presumably both fall off as 1/r^2","msgtype":"m.text"},"ts":1327438921000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"TabAtkins: That sounds like apply...","msgtype":"m.text"},"ts":1327438980000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: It's basically a curried apply, yes.","msgtype":"m.text"},"ts":1327438981000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Using apply/call in anything but the most literal, straightforward way confuses me every time, though.  Creating idioms around their use is helpful.","msgtype":"m.text"},"ts":1327439040000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jgraham: You could be a boring theoretical physicist and do the maths, or a fun experimental physicist and send a giant mirror out there to test it","msgtype":"m.text"},"ts":1327439041000,"senderName":"Philip`_","senderId":"Philip`_@irc"},
{"content":{"body":"thinks that Philip`_ has a point and that adding too much of this stuff makes the code impossible for anyone else to follow","msgtype":"m.emote"},"ts":1327439042000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Function.prototype.unpack = function() { var fn = this; return function(arg) { return fn.apply(this,arg); }; }","msgtype":"m.text"},"ts":1327439100000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Philip`_: Well if I did the maths I would probably neglegt some important effect so I think testing is the only way forward :)","msgtype":"m.text"},"ts":1327439101000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Some things are easy.  For example, I recently had trouble reducing Math.max over a list.  (Ignore the fact that I could just do Math.max.apply().)","msgtype":"m.text"},"ts":1327439160000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Does anyone have the latest IE10 handy?","msgtype":"m.text"},"ts":1327439161000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Instead, reducing Math.max.aritize(2) fixed it, and is easier to read, imo, than duplicating a two-arg Math.max as a function.","msgtype":"m.text"},"ts":1327439162000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Ignore the fact that there is an easy solution?","msgtype":"m.text"},"ts":1327439220000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: I'd forgotten that Math.max() is n-ary.  ^_^","msgtype":"m.text"},"ts":1327439221000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I don't deny these things are elegant and lots of fun to program","msgtype":"m.text"},"ts":1327439222000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But I'm not sure they make things easy on the person that ends up maintaining the code","msgtype":"m.text"},"ts":1327439280000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"That's always the issue, sure.","msgtype":"m.text"},"ts":1327439281000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"AryehGregor: Why not, in your first option, do [].forEach(foo.apply.bind(foo))?","msgtype":"m.text"},"ts":1327439340000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Or rather, .bind(null)","msgtype":"m.text"},"ts":1327439400000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"foo.apply.bind(foo) is the same as foo.apply, for any foo.","msgtype":"m.text"},"ts":1327439460000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"foo.apply.bind(null) is a function that calls foo.apply with null as the thisArg instead of foo, which throws.","msgtype":"m.text"},"ts":1327439461000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"foo.apply.bind(foo, null) has the desired effect.","msgtype":"m.text"},"ts":1327439462000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Which is the same as Function.prototype.apply.bind(foo, null).","msgtype":"m.text"},"ts":1327439463000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Since foo.apply === Function.prototype.apply and the only difference is the value of \"this\" when you call it, which bind() takes care of anyway.","msgtype":"m.text"},"ts":1327439520000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Argh, yeah, you're right.","msgtype":"m.text"},"ts":1327439521000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Or something like that.","msgtype":"m.text"},"ts":1327439522000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"I *hate* the 'this' variable.","msgtype":"m.text"},"ts":1327439523000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"In all honesty, I tried a bunch of different things until it worked.","msgtype":"m.text"},"ts":1327439524000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Having an invisible first argument to every function is so confusing when you start doing metaprogramming.","msgtype":"m.text"},"ts":1327439525000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So no one has the latest IE10 handy?  Or at least some IE10 that supports 3D transforms.","msgtype":"m.text"},"ts":1327439580000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"(i.e., one of the ones that only runs on Windows 8)","msgtype":"m.text"},"ts":1327439581000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"AryehGregor: to clarify from the fx call, dirk & vincent got *added* as editors. the other editors are still editors.","msgtype":"m.text"},"ts":1327440720000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"AryehGregor: (in the above it sounds like you think the existing editors got replaced by them, which is not the case)","msgtype":"m.text"},"ts":1327440780000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"http://www.whatwg.org/specs/web-apps/current-work/multipage/ looks broken","msgtype":"m.text"},"ts":1327443180000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"i need to add some code to make sure this doesn't happen again","msgtype":"m.text"},"ts":1327443660000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sigh","msgtype":"m.text"},"ts":1327443661000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"looks like anne's thing is sometimes not generating a full zip","msgtype":"m.text"},"ts":1327443720000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or something","msgtype":"m.text"},"ts":1327443721000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"is the interface for HTMLCollection defined anywhere?","msgtype":"m.text"},"ts":1327443780000,"senderName":"pablof","senderId":"pablof@irc"},
{"content":{"body":"can't seem to find it in the spec","msgtype":"m.text"},"ts":1327443840000,"senderName":"pablof","senderId":"pablof@irc"},
{"content":{"body":"ah DOMCore, read fail, sorry","msgtype":"m.text"},"ts":1327444020000,"senderName":"pablof","senderId":"pablof@irc"}
]