[
{"content":{"body":"MikeSmith: FYI we'll get the MDN stuff landed before TPAC, that's a good deadline for me.","msgtype":"m.text"},"ts":1539562554000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: super, thanks","msgtype":"m.text"},"ts":1539563433000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think I’m done fiddling with it as far as tweaks I wanted to make to get it review-worthy","msgtype":"m.text"},"ts":1539563503000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1539563673000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: FYI https://stackoverflow.com/questions/52771970/use-fetch-streams-api-to-consume-chunked-data-asynchronously-without-using-recur","msgtype":"m.text"},"ts":1539568792000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I rewrote the js-csp ping-pong example using transformstream: https://jsfiddle.net/slikts/0noqL9we/9/","msgtype":"m.text"},"ts":1539601589000,"senderName":"`slikts","senderId":"`slikts@irc"},
{"content":{"body":"I'm not really clear on why it produces an error","msgtype":"m.text"},"ts":1539601599000,"senderName":"`slikts","senderId":"`slikts@irc"},
{"content":{"body":"I mean, why it throws undefined","msgtype":"m.text"},"ts":1539601641000,"senderName":"`slikts","senderId":"`slikts@irc"},
{"content":{"body":"shouldn't there be an errror message","msgtype":"m.text"},"ts":1539601650000,"senderName":"`slikts","senderId":"`slikts@irc"},
{"content":{"body":"the error can be from either reader.read or writer.write, and there's no way to tell","msgtype":"m.text"},"ts":1539601686000,"senderName":"`slikts","senderId":"`slikts@irc"},
{"content":{"body":"also, this is mentioned nowhere, but transformstream is an implementation of CSP in a straightforward sense","msgtype":"m.text"},"ts":1539601759000,"senderName":"`slikts","senderId":"`slikts@irc"},
{"content":{"body":"and csp is the general abstraction for concurrency in golang and core.async","msgtype":"m.text"},"ts":1539601812000,"senderName":"`slikts","senderId":"`slikts@irc"},
{"content":{"body":"what spec are the XML expectations of https://wpt.fyi/results/encoding/utf-32.html?label=experimental based on?","msgtype":"m.text"},"ts":1539602570000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"(It seems to me that Firefox is right and the test is wrong for XML)","msgtype":"m.text"},"ts":1539602745000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"but since the XML tests pass in other browsers, I guess we need to define that is correct for the sake of interop","msgtype":"m.text"},"ts":1539602794000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"but I have a hard time explaining the expectation except by actually sniffing for the UTF-32 BOM (which we don't want to do!) and mapping it to windows-1252","msgtype":"m.text"},"ts":1539602842000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"same thing at https://wpt.fyi/results/encoding/unsupported-encodings.any.html?label=experimental","msgtype":"m.text"},"ts":1539602875000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: I've been discussing this with Joshua","msgtype":"m.text"},"ts":1539603853000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"Push sources push data at you, whether or not you are listening for it. They may also provide a mechanism for pausing and resuming the flow of data.\"","msgtype":"m.text"},"ts":1539603865000,"senderName":"`slikts","senderId":"`slikts@irc"},
{"content":{"body":"hsivonen: https://github.com/web-platform-tests/wpt/pull/13082","msgtype":"m.text"},"ts":1539603867000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"they're not really push sources if you can pause them","msgtype":"m.text"},"ts":1539603871000,"senderName":"`slikts","senderId":"`slikts@irc"},
{"content":{"body":"it's just an obtuse api for pulling then","msgtype":"m.text"},"ts":1539603888000,"senderName":"`slikts","senderId":"`slikts@irc"},
{"content":{"body":"push stream can just be sampled from","msgtype":"m.text"},"ts":1539603892000,"senderName":"`slikts","senderId":"`slikts@irc"},
{"content":{"body":"*a true push stream","msgtype":"m.text"},"ts":1539603902000,"senderName":"`slikts","senderId":"`slikts@irc"},
{"content":{"body":"if it can be paused/resumed, it can mechanically be transformed to pull","msgtype":"m.text"},"ts":1539603914000,"senderName":"`slikts","senderId":"`slikts@irc"},
{"content":{"body":"that's from streams spec","msgtype":"m.text"},"ts":1539603937000,"senderName":"`slikts","senderId":"`slikts@irc"},
{"content":{"body":"a true push stream is, for example, user events","msgtype":"m.text"},"ts":1539604019000,"senderName":"`slikts","senderId":"`slikts@irc"},
{"content":{"body":"can't pause users","msgtype":"m.text"},"ts":1539604021000,"senderName":"`slikts","senderId":"`slikts@irc"},
{"content":{"body":"or something based on time, since you can't pause time","msgtype":"m.text"},"ts":1539604041000,"senderName":"`slikts","senderId":"`slikts@irc"},
{"content":{"body":"annevk: thanks","msgtype":"m.text"},"ts":1539604207000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"should I make an issue about that sentence?","msgtype":"m.text"},"ts":1539604224000,"senderName":"`slikts","senderId":"`slikts@irc"},
{"content":{"body":"do node streams duplicate whatwg streams?","msgtype":"m.text"},"ts":1539611723000,"senderName":"`slikts","senderId":"`slikts@irc"},
{"content":{"body":"found the answer: https://github.com/nodejs/node/pull/22352","msgtype":"m.text"},"ts":1539616867000,"senderName":"`slikts","senderId":"`slikts@irc"},
{"content":{"body":"seems like NIH on node's side","msgtype":"m.text"},"ts":1539616919000,"senderName":"`slikts","senderId":"`slikts@irc"},
{"content":{"body":"Node way predated these","msgtype":"m.text"},"ts":1539616954000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But also had flaws","msgtype":"m.text"},"ts":1539617017000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Node may adopt WHATWG streams in the future","msgtype":"m.text"},"ts":1539617034000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that'd be reasonable for interop","msgtype":"m.text"},"ts":1539617075000,"senderName":"`slikts","senderId":"`slikts@irc"},
{"content":{"body":"a polyfill based on node streams instead of from scratch should also be simple","msgtype":"m.text"},"ts":1539617125000,"senderName":"`slikts","senderId":"`slikts@irc"},
{"content":{"body":"at a glance anyway","msgtype":"m.text"},"ts":1539617139000,"senderName":"`slikts","senderId":"`slikts@irc"},
{"content":{"body":"This new navigate event is kinda meh, I much rather have some kind of navigate honeypot, whereby you can opt in to handle navigations initiated in other browsing contexts","msgtype":"m.text"},"ts":1539628457000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Basically copy some app-functionality to the web, while also continuing to allow for normal navigations","msgtype":"m.text"},"ts":1539628521000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Is there a way for JavaScript in the browser to tell if an element is a void tag in HTML?","msgtype":"m.text"},"ts":1539640845000,"senderName":"innovati","senderId":"innovati@irc"},
{"content":{"body":"I just tried to find the list by doing tag.outerHTML.toLowerCase().endsWith(`</${tag.tagName.toLowerCase()}>`) === false","msgtype":"m.text"},"ts":1539643728000,"senderName":"innovati","senderId":"innovati@irc"},
{"content":{"body":"innovati: why not just check the element name?","msgtype":"m.text"},"ts":1539645395000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it’s not a long list","msgtype":"m.text"},"ts":1539645414000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"area, base, br, col, embed, hr, img, input, link, meta, param, source, track, wbr","msgtype":"m.text"},"ts":1539645438000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://html.spec.whatwg.org/multipage/syntax.html#void-elements","msgtype":"m.text"},"ts":1539645443000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I know, but since I wrote a plugin to do that, the list had changed, so I was wondering if there was a way for the browser to determine this for itself","msgtype":"m.text"},"ts":1539645539000,"senderName":"innovati","senderId":"innovati@irc"},
{"content":{"body":"I'm also wondering if the browser knows what HTML tags it supports (as I suspect the list of tags it knows about might be greater than HTML)","msgtype":"m.text"},"ts":1539645567000,"senderName":"innovati","senderId":"innovati@irc"},
{"content":{"body":"not sure what you mean by “knows”","msgtype":"m.text"},"ts":1539645716000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"things it could create with document.createElement()","msgtype":"m.text"},"ts":1539645759000,"senderName":"innovati","senderId":"innovati@irc"},
{"content":{"body":"the browser already knows about HTML elements","msgtype":"m.text"},"ts":1539645783000,"senderName":"innovati","senderId":"innovati@irc"},
{"content":{"body":"document.createElement(\"foo\")","msgtype":"m.text"},"ts":1539645845000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"there's a lot of combinations to try if you were to do it that way, is there any way you can find out from the browser what it knows about?","msgtype":"m.text"},"ts":1539645882000,"senderName":"innovati","senderId":"innovati@irc"},
{"content":{"body":"sorry I still don’t understand what you mean by “knows about”","msgtype":"m.text"},"ts":1539645972000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"e.g., do you mean the element has an interface other than HTMLUnknownElement?","msgtype":"m.text"},"ts":1539645988000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"or what?","msgtype":"m.text"},"ts":1539645991000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"sure?","msgtype":"m.text"},"ts":1539646000000,"senderName":"innovati","senderId":"innovati@irc"},
{"content":{"body":"then I guess your code can check what interface the element has","msgtype":"m.text"},"ts":1539646034000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"is there a way to see all of the interfaces a browser has?","msgtype":"m.text"},"ts":1539646059000,"senderName":"innovati","senderId":"innovati@irc"},
{"content":{"body":"programmatically?","msgtype":"m.text"},"ts":1539646059000,"senderName":"innovati","senderId":"innovati@irc"},
{"content":{"body":"I guess there would be, but not sure there’s anything exposed to do it conveniently","msgtype":"m.text"},"ts":1539646159000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"}
]