[
{"content":{"body":"have you measured the actual impact (memory? cpu time?) that you're worried about in a production implementation, to find out if you're solving a problem that actually exists?","msgtype":"m.text"},"ts":1370908800000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"because instantiating an object with some unused properties sounds like a long-past problem to me","msgtype":"m.text"},"ts":1370908832000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"but it can lead to some really wrong rendering - e.g. a metadata cue that was interpreted with WebVTT rendering rules could be displayed as formatted text that is absolute gibberish","msgtype":"m.text"},"ts":1370908849000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"I'm approaching this from a mental overload / semantic meaning point of view","msgtype":"m.text"},"ts":1370908888000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"(the last two things you said don't seem related to me)","msgtype":"m.text"},"ts":1370908902000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"if I am to author JSON cues and wanted them rendered, I'd want them rendered as plain text","msgtype":"m.text"},"ts":1370908942000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"err, json cues would be metadata, therefore not rendered?","msgtype":"m.text"},"ts":1370908999000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"read up - Hixie says all cues need to be regarded as potentially rendered","msgtype":"m.text"},"ts":1370909023000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"(sorry, coming in late to this and may have missed some bits)","msgtype":"m.text"},"ts":1370909026000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"guessing \"you might render a metadata cue onscreen\" isn't what he meant, but I'll punt until he gets back and can speak for himself","msgtype":"m.text"},"ts":1370909050000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"the not-rendering of some cues is the whole point of this discussion","msgtype":"m.text"},"ts":1370909050000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"Hixie's point is that a kind=metadata track can be converted into a kind=subtitles track at any time and would then need to be rendered","msgtype":"m.text"},"ts":1370909091000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"therefore, all tracks have an associated rendering rule","msgtype":"m.text"},"ts":1370909102000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"don't have anything to add beyond restating that I don't think the expectation is that metadata cues should make any sense when rendered onscreen (though certainly the result should be well-defined)","msgtype":"m.text"},"ts":1370909173000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I guess what I want is that tracks should never be able to change their @kind - and therefore there are tracks that are never rendered and never meant to be rendered","msgtype":"m.text"},"ts":1370909190000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"brb","msgtype":"m.text"},"ts":1370909247000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"unless a script for some reason forces a track from one kind to another I don't know why that would happen","msgtype":"m.text"},"ts":1370909256000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"from what I understand (and it's been a while), the point of metadata tracks is to have non-caption-like data available to scripts, which is never rendered automatically","msgtype":"m.text"},"ts":1370909311000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"afk","msgtype":"m.text"},"ts":1370909359000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"heycam: Yo, any ETA on the MapLike feature?","msgtype":"m.text"},"ts":1370909626000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Got specs we wanna use it in, like, yesterday.  ^_^","msgtype":"m.text"},"ts":1370909639000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(And I keep recommending more do so - just wrote feedback on WebMIDI that they should use a MapLike.)","msgtype":"m.text"},"ts":1370909655000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, you can just start using it before I add it, that's what Hixie usually does ;)","msgtype":"m.text"},"ts":1370909662000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"TabAtkins, but next week, probably","msgtype":"m.text"},"ts":1370909669000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Yeah, but I dunno what syntax you'll want for it!  Sketch it for me, and I'll go ahead.","msgtype":"m.text"},"ts":1370909680000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, ok I guess it probably needs a bit of thought; it's not just like [ArrayLike].","msgtype":"m.text"},"ts":1370909730000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"will need to get to it next week, so hold tight. :)","msgtype":"m.emote"},"ts":1370909852000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Actually, it's probably pretty similar.  Declaring an interface to be [MapLike] just means you need to define the list of key/value tuples (which automatically defines an @@iterator method), and if it's writeable, a set and delete method.  You *should* define a get() method.","msgtype":"m.text"},"ts":1370909857000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But anyway, I'm okay with waiting a week.  ^_^","msgtype":"m.text"},"ts":1370909880000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1370909884000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"It would be cool if we got assigning behavior for free; that is, if an attribute is defined to be a MapLike type, and is writeable, then assigning a Map-like to it (anything with Map on the prototype) does a .clear() on the existing map, then adds all the new key/values to it.","msgtype":"m.text"},"ts":1370909978000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(back, but laggy)","msgtype":"m.text"},"ts":1370910842000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"nessy: a track wouldn't change from metadata to subtitles unless you specifically told it to","msgtype":"m.text"},"ts":1370910854000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"nessy: just like you could convert a \"DontRenderCue\" to a \"WebVTTCue\"","msgtype":"m.text"},"ts":1370910873000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if we added a DontRenderCue","msgtype":"m.text"},"ts":1370910879000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so that doesn't seem like a compelling argument","msgtype":"m.text"},"ts":1370910889000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(though i'm confused about why your reason for wanting this has changed over time... you went from \"it's heavy\" to \"it might be rendered\", e.g.)","msgtype":"m.text"},"ts":1370910909000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what's the use case for adding JSON data to some kind of trakc?","msgtype":"m.text"},"ts":1370910913000,"senderName":"reyre_","senderId":"reyre_@irc"},
{"content":{"body":"reyre_: well you might want time-aligned data, and WebVTT provides a convenient way to do that","msgtype":"m.text"},"ts":1370910935000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"reyre_: e.g. for timing when to load up advertising","msgtype":"m.text"},"ts":1370910946000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: why use JSON in that case tho? WEBVTT will provide. i'm confused on how this JSON would be meant to be added. as the cue text? as metadata? or something else .. ?","msgtype":"m.text"},"ts":1370911019000,"senderName":"reyre_","senderId":"reyre_@irc"},
{"content":{"body":"or jsut the ability to add JSON in general?","msgtype":"m.text"},"ts":1370911024000,"senderName":"reyre_","senderId":"reyre_@irc"},
{"content":{"body":"reyre_: As a metadata track.  You'll get notified with the track value when the cue gets activated, so you can act on it.","msgtype":"m.text"},"ts":1370911051000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"reyre_: you don't have to use json","msgtype":"m.text"},"ts":1370911060000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"reyre_: you can use whatever you want","msgtype":"m.text"},"ts":1370911064000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"reyre_: it's just text","msgtype":"m.text"},"ts":1370911066000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"could use xml, your own format, whatever","msgtype":"m.text"},"ts":1370911073000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so nessy wants to add JSON to webvt text, without rendering, so that you can do whatever you want with it via JS when the cue is detected as active?","msgtype":"m.text"},"ts":1370911188000,"senderName":"reyre_","senderId":"reyre_@irc"},
{"content":{"body":"you can already do all this","msgtype":"m.text"},"ts":1370911204000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yea","msgtype":"m.text"},"ts":1370911207000,"senderName":"reyre_","senderId":"reyre_@irc"},
{"content":{"body":"what nessy wants is to invent a new format separate from WebVTT that does the same thing (and doesn't have a serialisation)","msgtype":"m.text"},"ts":1370911222000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"alright, i understand now, heh, thank you","msgtype":"m.text"},"ts":1370911263000,"senderName":"reyre_","senderId":"reyre_@irc"},
{"content":{"body":"glad you do, i still don't :-)","msgtype":"m.text"},"ts":1370911285000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well i understand the crux of the conversation ;) now, not why we need another track spec","msgtype":"m.text"},"ts":1370911366000,"senderName":"reyre_","senderId":"reyre_@irc"},
{"content":{"body":"heycam: I've gone ahead and used some pretend syntax for [MapClass] in http://dev.w3.org/csswg/css-variables/#the-CSSVariablesMap-interface","msgtype":"m.text"},"ts":1370912258000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, great!","msgtype":"m.text"},"ts":1370912282000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"notes it down","msgtype":"m.emote"},"ts":1370912298000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: The [MapClass()] attribute takes two arguments, which define the key and value types of the map tuples.  The spec author has to define set() and delete() methods if the interface is writeable.  The spec author *may* define get() and has() methods (I have to, in this case, because I have to do some argument mangling); otherwise, the argument is looked","msgtype":"m.text"},"ts":1370912382000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"up in the map tuples and returned directly.  You get size() for free from the definition of the map tuples, and the rest of the Map methods are free from https://gist.github.com/jorendorff/5662673","msgtype":"m.text"},"ts":1370912383000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oh yeah, the spec author has to define the map tuples, similar to defining the list of named properties on a getter/setter interface.","msgtype":"m.text"},"ts":1370912411000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The attribute, like [ArrayClass], puts Map as the interface's prototype.","msgtype":"m.text"},"ts":1370912435000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, so actual Map.prototype?","msgtype":"m.text"},"ts":1370912445000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1370912456000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, I thought we had come to the conclusion that just having same named similar behaviour methods on the object is preferable","msgtype":"m.text"},"ts":1370912468000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"So that \"obj instanceof Map\" works.","msgtype":"m.text"},"ts":1370912470000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"heycam: Still need a reliable ducktype.","msgtype":"m.text"},"ts":1370912478000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The Map.prototype objects don't actually work on the object.","msgtype":"m.text"},"ts":1370912491000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so how do you solve the problem that Map.prototype.blah can get around the restrictions that your specific map type wants to enforce?","msgtype":"m.text"},"ts":1370912493000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"It's just used for typing.","msgtype":"m.text"},"ts":1370912495000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1370912499000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1370912500000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"They can't, because [[MapData]] doesn't exist on the object. ^_^","msgtype":"m.text"},"ts":1370912505000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"and all its methods are shadowed?","msgtype":"m.text"},"ts":1370912507000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1370912508000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1370912512000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"[SetClass(valType)] works similarly.","msgtype":"m.text"},"ts":1370912536000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1370912603000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"I am not sure that inheriting from Map.prototype is worth it","msgtype":"m.text"},"ts":1370912616000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"It works with [ArrayClass], why not here?","msgtype":"m.text"},"ts":1370912643000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"reyre_, Hixie: I don't want to invent a new format separate from WebVTT","msgtype":"m.text"},"ts":1370912725000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"TabAtkins, most of the Array.prototype methods are generic, and don't require the object to be an actual array instance","msgtype":"m.text"},"ts":1370912741000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"(I'm also not sure why [ArrayClass] prevents the interface from being extended.  That doesn't seem like a necessary restriction for [MapClass].)","msgtype":"m.text"},"ts":1370912744000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"heycam: Yeah, it's a failure of Map/Set that that's not true of them.  Frustrating that tc39 doesn't see that.","msgtype":"m.text"},"ts":1370912766000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"reyre_, Hixie: I want to have an object that conveys that it is not being rendered","msgtype":"m.text"},"ts":1370912767000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"I mean, if they just defined the additional methods on top of the core 5 (@@iterator, get, set, has, delete), it would work easily.","msgtype":"m.text"},"ts":1370912804000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, because how do you set MyArrayClassInterface.prototype to both Array.prototype and the interface prototype object of the interface you would inherit from?","msgtype":"m.text"},"ts":1370912805000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"reyre_, Hixie: as I said - WebVTT, TTML and all other caption formats are already serialisations for non-rendered timed text cues","msgtype":"m.text"},"ts":1370912816000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"heycam: Oh, is *that* what you're saying?  It sounds like it's saying you can't have \"MyArraylikeSubclass extends MyArraylikeClass {...}\".","msgtype":"m.text"},"ts":1370912848000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Which sounded silly.","msgtype":"m.text"},"ts":1370912854000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, yeah, the other way around","msgtype":"m.text"},"ts":1370912901000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"TabAtkins, please file a bug if it's unclear :)","msgtype":"m.text"},"ts":1370912906000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Ah, I was misreading.  I actually followed the link now.","msgtype":"m.text"},"ts":1370912909000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"reyre_, Hixie: a cue that is not making use of any of the rendering functionality that is associated with a serialised timed text format should not have to be classified as being a representations of one such format","msgtype":"m.text"},"ts":1370912915000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"It's quite clear if you click on \"inherited interfaces\".","msgtype":"m.text"},"ts":1370912918000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"reyre_, Hixie: in particular if that cue is authored in JS only","msgtype":"m.text"},"ts":1370912950000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1370913021000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"so yeah I'll think and respond to your use of [MapClass] some time next week. thanks for the prodding. :)","msgtype":"m.text"},"ts":1370913044000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Cool.  I'm poking the thread right now with everything I've said here.","msgtype":"m.text"},"ts":1370913061000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"nessy: if you have a WebVTT file, you're getting WebVTTCue objects out of it","msgtype":"m.text"},"ts":1370913066000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: if you're authoring in JS, you don't have a WebVTT file","msgtype":"m.text"},"ts":1370913082000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"nessy: i really don't understand what you're arguing","msgtype":"m.text"},"ts":1370913128000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"nessy: if \"WebVTT, TTML and all other caption formats are already serialisations for non-rendered timed text cues\", then how can those cues not use WebVTTCue or TTMLCue or whatever?","msgtype":"m.text"},"ts":1370913190000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I create a new track using addTextTrack(\"metadata\")","msgtype":"m.text"},"ts":1370913192000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"Hixie: then I want to add cues to that - why would they need to be WebVTTCue objects?","msgtype":"m.text"},"ts":1370913209000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"nessy: they can be whatever format you want (that the browser supports)","msgtype":"m.text"},"ts":1370913222000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"nessy: why would they _not_ be WebVTTCue objects?","msgtype":"m.text"},"ts":1370913233000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: because I don't care about the WebVTT functionality","msgtype":"m.text"},"ts":1370913247000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"Hixie: or the TTML or whatever","msgtype":"m.text"},"ts":1370913258000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"nessy: do you think that we should have a subset of Element that doesn't have the namespaceURI attribute, for people who don't care about namespaces?","msgtype":"m.text"},"ts":1370913375000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: no, obviously not - but why then are we distinguishing between WebVTTCue and TextTrackCue if everything is the same anyway?","msgtype":"m.text"},"ts":1370913426000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"nessy: WebVTTCue is like HTMLBodyElement, TextTrackCue is like HTMLElement","msgtype":"m.text"},"ts":1370913451000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or actually, WebVTTCue is like HTMLElement, and TextTrackCue is like Element","msgtype":"m.text"},"ts":1370913472000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"actually even that's not quite right","msgtype":"m.text"},"ts":1370913483000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's more like WebVTTCue is like Element, and TextTrackCue is like Node","msgtype":"m.text"},"ts":1370913491000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"nessy: it's specifically because everything is _not_ the same","msgtype":"m.text"},"ts":1370913527000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"nessy: some cues have text, some cues are images","msgtype":"m.text"},"ts":1370913533000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: can cues with images end up being TextTrackCue objects?","msgtype":"m.text"},"ts":1370913558000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"nessy: e.g. if a browser supports DVD's format, and exposes the bitmap image cues","msgtype":"m.text"},"ts":1370913656000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i should say, some text tracks have cues that have text, other text tracks have cues that are images","msgtype":"m.text"},"ts":1370913685000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"within a single text track, all cues are the same type","msgtype":"m.text"},"ts":1370913693000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: a browser would require to create a new DVDImageCue object with a specific rendering algorithm to support bitmap image cues, right?","msgtype":"m.text"},"ts":1370913712000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"Hixie: if we can only have cues that have a rendering algorithm associated, TextTrackCue is never used, because it doesn't have a rendering algorithm, right?","msgtype":"m.text"},"ts":1370913765000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"nessy: TextTrackCue is an abstract interface that is inherited from by all the concrete cue types","msgtype":"m.text"},"ts":1370913803000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"just like Node","msgtype":"m.text"},"ts":1370913806000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you never construct an actual Node","msgtype":"m.text"},"ts":1370913810000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the browser internally constructs nodes and handles them - but TextTrackCue - when would it construct and handle such an object?","msgtype":"m.text"},"ts":1370913897000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"the browser never constructs and handles an instance of Node","msgtype":"m.text"},"ts":1370913927000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"just like a browser never constructs or handles an instance of TextTrackCue","msgtype":"m.text"},"ts":1370913947000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"browsers always deal with objects that implement interfaces that inherit from Node or TextTrackCue","msgtype":"m.text"},"ts":1370913972000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: ok, let me see if I follow","msgtype":"m.text"},"ts":1370914147000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"Hixie: when in JS and I construct a track with addTrack(\"metadata\") assuming I am in a browser, which supports WebVTTCue, TTMLCue and DVDBitmapCue , then it doesn't matter if I use WebVTTCue or TTMLCue to create e.g. JSON cues ?","msgtype":"m.text"},"ts":1370914575000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"Hixie: even if that means that when I try to debug the JSON and thus turn the track from kind=\"metadata\" to kind=\"subtitles\" will be rendered funnily either the WebVTT way or the TTML way?","msgtype":"m.text"},"ts":1370914633000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"well, it matters depending on what you want from it. for example, if you want to compatible with another browser that only does WebVTTCue, then you should probably use that.","msgtype":"m.text"},"ts":1370914663000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(s/JSON/custom XML/ if you prefer)","msgtype":"m.text"},"ts":1370914665000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"but beyond that, it doesn't matter, indeed","msgtype":"m.text"},"ts":1370914670000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(dinner bbiab)","msgtype":"m.text"},"ts":1370914684000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: a bit of a follow-on: what's the difference between the two rendering algorithms in WebVTT http://dev.w3.org/html5/webvtt/#rendering ?","msgtype":"m.text"},"ts":1370918086000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"Hixie: is the first one about how we render cues when they are not overlayed on a video? or is that for how to render webvtt chapters?","msgtype":"m.text"},"ts":1370918161000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"Hixie: I'm just not clear if they are two different rendering algorithms to be used with <track> or what problem the first one is supposed to solve...","msgtype":"m.text"},"ts":1370918196000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"nessy: first one is for when e.g. you are rendering a chapter title in the UI","msgtype":"m.text"},"ts":1370920319000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"nessy: the other one is for when you are rendering cues over video","msgtype":"m.text"},"ts":1370920334000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: what were your intentions for how to render chapter title in the UI - was that basically a hierarchical list in a drop-down box? Did we want to prescribe this?","msgtype":"m.text"},"ts":1370920460000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"i don't expect it'd be anything clever","msgtype":"m.text"},"ts":1370920482000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"just has to be defined","msgtype":"m.text"},"ts":1370920484000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so that UAs do the same thing","msgtype":"m.text"},"ts":1370920494000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: so that rendering algorithm comes into effect when kind=chapters while the other one when kind={captions,subtitles} - correct?","msgtype":"m.text"},"ts":1370922288000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"not necessarily, but usually, sure","msgtype":"m.text"},"ts":1370922422000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: would a TTMLCue that renders chapters need to provide its pwn rendering rules, too?","msgtype":"m.text"},"ts":1370922501000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"s/pwn/own/","msgtype":"m.text"},"ts":1370922513000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1370922713000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: isn't that a bit of a waste -  every text-based track format re-defining it, and could potentially lead to different chapter UIs based on which format you use?","msgtype":"m.text"},"ts":1370923008000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1370923482000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"we need to define how it works...","msgtype":"m.text"},"ts":1370923487000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"how else could you do it?","msgtype":"m.text"},"ts":1370923490000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's like saying \"isn't it a waste that html and svg both have to define their DOM APIs\" or something...","msgtype":"m.text"},"ts":1370923511000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well, if there was a ChapterCue and it had the rendering algorithm in HTML, and tracks with kind=chapters would cause only ChapterCues to be created from a TTML or WebVTT file, then neither would need to define it","msgtype":"m.text"},"ts":1370923716000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"o_O","msgtype":"m.text"},"ts":1370923749000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"then it would be well defined how chapters in HTML are rendered, but other platforms could render them in other ways","msgtype":"m.text"},"ts":1370923791000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"i don't understand what you are proposing at all","msgtype":"m.text"},"ts":1370923808000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"how do you know what cue is a chapter cue?","msgtype":"m.text"},"ts":1370923815000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"how do you convert from TTML to this chapter cue format?","msgtype":"m.text"},"ts":1370923828000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's plain text, there is no conversion","msgtype":"m.text"},"ts":1370923888000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"???","msgtype":"m.text"},"ts":1370923903000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TTML is XML, not plain text...","msgtype":"m.text"},"ts":1370923911000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"right, I mean: after the cues are extracted","msgtype":"m.text"},"ts":1370923923000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"a chapter in WebVTT is a cue with some plain text that is the chapter title, right?","msgtype":"m.text"},"ts":1370923970000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"that plain text needs no conversion - it's just a parsed out cue","msgtype":"m.text"},"ts":1370923996000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"that's what this algorithm would be about defining","msgtype":"m.text"},"ts":1370923996000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what I'm grappling with is: for chapters, metadata, plain descriptions and even plain subtitles, all we need is cues with plain text","msgtype":"m.text"},"ts":1370924280000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"and this is universal, no matter how they get into the browser","msgtype":"m.text"},"ts":1370924300000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"trying to make them look like they are WebVTTCue or TTMLCue or something else that they are not, is very confusing","msgtype":"m.text"},"ts":1370924333000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"to a JS dev","msgtype":"m.text"},"ts":1370924340000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"TabAtkins: how should i invoke \"parse a rule\"? the input is a stream of tokens or component values but i have a string","msgtype":"m.text"},"ts":1370940336000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan_: the tokenizer does that … but we should have Syntax define that its used when the input is a string, so you don’t have to.","msgtype":"m.text"},"ts":1370940926000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1370940948000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"i'll just invoke it with a string for now","msgtype":"m.text"},"ts":1370940957000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"should be fine","msgtype":"m.text"},"ts":1370940966000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"i don't know if i should change http://dev.w3.org/csswg/cssom/#parse-a-css-value to say something in terms of css-syntax or not","msgtype":"m.text"},"ts":1370950143000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"TabAtkins: SimonSapin: ^","msgtype":"m.text"},"ts":1370950151000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"So fun when a bunch of tests fail when adding an extra event loop spin where the spec requires one","msgtype":"m.text"},"ts":1370950563000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: What did you break^Wfix this time?","msgtype":"m.text"},"ts":1370950679000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: <script defer> still","msgtype":"m.text"},"ts":1370950932000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"but even without any deferred scripts, adding an event loop spin between the readystatechange to interactive and DOMContentLoaded seems to break a bunch of tests for no obvious reason","msgtype":"m.text"},"ts":1370950973000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"zcorpan: do you have a bit more information to provide on https://www.w3.org/Bugs/Public/show_bug.cgi?id=21912 ? It's a tad terse","msgtype":"m.text"},"ts":1370952006000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"darobin: commented","msgtype":"m.text"},"ts":1370952149000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1370952155000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"oh, that, yes","msgtype":"m.text"},"ts":1370952185000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"TabAtkins: should i put Serializing <an+b> in cssom?","msgtype":"m.text"},"ts":1370952566000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: how do i abort a fetch?","msgtype":"m.text"},"ts":1370959914000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"annevk: ICYMI: \"parse a MIME type\" is now defined in mimesniff, so you can update Fetch's definition of a \"simple header\"","msgtype":"m.text"},"ts":1370965733000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"annevk: Oh, I should have read further. I guess we'll have to discuss.","msgtype":"m.text"},"ts":1370965778000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1370965848000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"What is the opposite of \"parse\"? \"construct\"? \"assemble\"?","msgtype":"m.text"},"ts":1370966054000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"serialise","msgtype":"m.text"},"ts":1370966059000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"en-US, please :P","msgtype":"m.text"},"ts":1370966072000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"adapt as desired :-)","msgtype":"m.text"},"ts":1370966079000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so what's the difference between \"parse\" and \"deserialize\"?","msgtype":"m.text"},"ts":1370966117000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"nothing","msgtype":"m.text"},"ts":1370966126000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1370966129000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"well","msgtype":"m.text"},"ts":1370966143000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I was gonna suggest that \"parse\" is a jump-in point for a (de)serialize loop","msgtype":"m.text"},"ts":1370966152000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"\"deserialize\" tends to imply that the data is expected to have been generated by the same, or closely related, code","msgtype":"m.text"},"ts":1370966162000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"whereas \"parse\" tends to imply, if anything, that the data was generated by a human, or some unrelated, less trusted code","msgtype":"m.text"},"ts":1370966186000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ah, so I was pretty close, then","msgtype":"m.text"},"ts":1370966211000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"effectively, (de)serialize would follow an ABNF, while \"parse\" likely wouldn't","msgtype":"m.text"},"ts":1370966234000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"no, it's more about where the data came from","msgtype":"m.text"},"ts":1370966247000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"e.g. you parse HTML or JSON, but you deserialise a save file in a game","msgtype":"m.text"},"ts":1370966274000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1370966289000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"but really they mean the same thing, that distinction is a bit rarefied imho","msgtype":"m.text"},"ts":1370966290000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"effectively, (de)serialize would follow an ABNF, while \"parse\" likely wouldn't","msgtype":"m.text"},"ts":1370966301000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"no, it's more about where the data came from","msgtype":"m.text"},"ts":1370966301000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"e.g. you parse HTML or JSON, but you deserialise a save file in a game","msgtype":"m.text"},"ts":1370966302000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1370966302000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"but really they mean the same thing, that distinction is a bit rarefied imho","msgtype":"m.text"},"ts":1370966302000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"presumably deserialize is a subset of parse","msgtype":"m.text"},"ts":1370966304000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"in terms of accepted input","msgtype":"m.text"},"ts":1370966310000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"i would recommend always using \"parse\" :-)","msgtype":"m.text"},"ts":1370966342000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"naturally :)","msgtype":"m.text"},"ts":1370966358000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"JSON.parse(JSON.serialize(some_object)) <- deserialize; JSON.parse('[{some:\"human\"}, \"input\"]' <- parse","msgtype":"m.text"},"ts":1370966366000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"In hixie's vernacular","msgtype":"m.text"},"ts":1370966374000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1370966379000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"yeah, something like that","msgtype":"m.text"},"ts":1370966383000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":")","msgtype":"m.text"},"ts":1370966385000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1370966390000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"oh no, now we have two!","msgtype":"m.text"},"ts":1370966396000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"In my opinion, deserialize is a silly word :)","msgtype":"m.text"},"ts":1370966402000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yeah, mine too","msgtype":"m.text"},"ts":1370966407000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Almost as bad as uneval","msgtype":"m.text"},"ts":1370966417000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"for my purposes, \"parse\" is my (the WHATWG's) job, \"deserialize\" is the IETF's job","msgtype":"m.text"},"ts":1370966430000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"(I kind of expect uneval(4) === 2+2)","msgtype":"m.text"},"ts":1370966444000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"uneval(sendEmail()) => e-mail is no longer sent? :-)","msgtype":"m.text"},"ts":1370966464000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"walks away from the edge of the rabbit hole","msgtype":"m.emote"},"ts":1370966480000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"pushes GPHemsley back in","msgtype":"m.emote"},"ts":1370966819000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"GPHemsley: I recommend avoiding the honey","msgtype":"m.text"},"ts":1370966910000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"\"Reopening the casing issue\"","msgtype":"m.text"},"ts":1370968881000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"which one is that?","msgtype":"m.text"},"ts":1370968892000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yeah, like I didn't get enough email","msgtype":"m.text"},"ts":1370968893000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"css-variables","msgtype":"m.text"},"ts":1370968899000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"oh dear","msgtype":"m.text"},"ts":1370968911000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"wonders whether it's worth fighting to get more trees the parser can create to have obvious serializations","msgtype":"m.emote"},"ts":1370970508000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"\"Steven Pemberton, Chair of the Forms Working Group, gives a talk...\"","msgtype":"m.text"},"ts":1370970847000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Want to guess a date?","msgtype":"m.text"},"ts":1370970851000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"<3 \"Are you sure you want to reload this page?\"","msgtype":"m.text"},"ts":1370974193000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"which is better? \"the U+XXXX FOOBAR character\" or \"the character U+XXX FOOBAR\"?","msgtype":"m.text"},"ts":1370974515000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"which is better? \"the U+XXXX FOOBAR character\" or \"the character U+XXX FOOBAR\"?","msgtype":"m.text"},"ts":1370974516000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"does context matter?","msgtype":"m.text"},"ts":1370974535000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"i prefer the U+0073 LATIN SMALL LETTER S character","msgtype":"m.text"},"ts":1370974755000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and to make it easy to be consistent, that's the format that http://software.hixie.ch/utilities/cgi/unicode-decoder/character-identifier?characters=s outputs","msgtype":"m.text"},"ts":1370974766000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(that script is broken for non-ascii characters)","msgtype":"m.text"},"ts":1370974785000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hee hee","msgtype":"m.text"},"ts":1370974803000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"(and for punctuation, i prefer this, also used by that script: U+002E FULL STOP character (.) )","msgtype":"m.text"},"ts":1370974832000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ah, very nice","msgtype":"m.text"},"ts":1370975053000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"Feedback welcome: http://mimesniff.spec.whatwg.org/#serialize-a-mime-type","msgtype":"m.text"},"ts":1370975604000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"Hixie, GPHemsley: zcorpan made a similar tool that is useful when writing specs: http://simon.html5.org/tools/js/unicodeize/","msgtype":"m.text"},"ts":1370975814000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"matjas: nice","msgtype":"m.text"},"ts":1370979929000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk (if you’re reading the logs): for https://github.com/annevk/url, e.g. if you ever need to turn http://url.spec.whatwg.org/#url-code-points into a JavaScript-compatible regular expression, you may want to use http://mths.be/regenerate","msgtype":"m.text"},"ts":1370979955000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"matjas, zcorpan: Do you know what format that's using? (Could it be changed to the one Hixie and I discussed earlier?)","msgtype":"m.text"},"ts":1370980030000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"or add some toggles or something","msgtype":"m.text"},"ts":1370980046000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"GPHemsley: example output is used here http://javascript.spec.whatwg.org/#escapeattributevalue","msgtype":"m.text"},"ts":1370980061000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"it's just a string in quotes followed by the same characters as unicode codepoints without names, in parenthesese","msgtype":"m.text"},"ts":1370980074000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"GPHemsley: IIRC zcorpan uses the same format in his specs too","msgtype":"m.text"},"ts":1370980080000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"ah, hmm","msgtype":"m.text"},"ts":1370980092000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"so it's more for strings than characters","msgtype":"m.text"},"ts":1370980097000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i use a similar format sometimes","msgtype":"m.text"},"ts":1370980101000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah, I suppose","msgtype":"m.text"},"ts":1370980112000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"though i tend to give the character names as well","msgtype":"m.text"},"ts":1370980116000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"e.g.: the string \"</\" (U+003C LESS-THAN SIGN, U+002F SOLIDUS)","msgtype":"m.text"},"ts":1370980125000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"actually, 'Let escaped be value with each U+0022 QUOTATION MARK character replaced with the string “&quot;” (U+0026 U+0071 U+0075 U+006F U+0074 U+003B).' is a good example of both used together","msgtype":"m.text"},"ts":1370980143000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"although I see that uses fancy quotes","msgtype":"m.text"},"ts":1370980159000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"heycam|away: yt?","msgtype":"m.text"},"ts":1370980349000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: e.g. https://gist.github.com/mathiasbynens/5760113","msgtype":"m.text"},"ts":1370980798000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"GPHemsley: any reason not to use fancy quotes?","msgtype":"m.text"},"ts":1370980829000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"matjas: Just that most of us don't.","msgtype":"m.text"},"ts":1370980846000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"man, that bug didn't stay closed more than 10 minutes","msgtype":"m.text"},"ts":1370988758000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what bug?","msgtype":"m.text"},"ts":1370989464000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"the \"incumbent script\" one","msgtype":"m.text"},"ts":1370989973000,"senderName":"Hixie","senderId":"Hixie@irc"}
]