[
{"content":{"body":"why does everyone know zooko, anyway","msgtype":"m.text"},"ts":1405641976000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"does tend to agree that trying to apply monads in a system without anything at all resembling HM-typing results in a great deal of incomprehension ...","msgtype":"m.emote"},"ts":1405658620000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"now, nested promises, those I can understand readily","msgtype":"m.text"},"ts":1405661005000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"smaug____: Good point. I guess no one. AFAIK, there hasn't been much attention on that from developers. We should go though all usage of 'in a Document'.","msgtype":"m.text"},"ts":1405661648000,"senderName":"hayato","senderId":"hayato@irc"},
{"content":{"body":"smaug____: does get-current-doc mean owerDocument property?","msgtype":"m.text"},"ts":1405661783000,"senderName":"hayato","senderId":"hayato@irc"},
{"content":{"body":"krit: HTMLElement isn't renamed to Element yet?","msgtype":"m.text"},"ts":1405661810000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"JakeA: sorry for the confusion between the FetchStore and FetchStores APIs.","msgtype":"m.text"},"ts":1405676523000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"tobie_: No worries, sorry for the terse reply. It was 2am & I'd been woken by a thunderstorm","msgtype":"m.text"},"ts":1405676551000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"np: I'm getting a hang of what bothers me with the current API.","msgtype":"m.text"},"ts":1405676575000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"And have a suggestion to make.","msgtype":"m.text"},"ts":1405676586000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"mathiasbynens, the js tests in wpt live there because test262 never used to accept contributions","msgtype":"m.text"},"ts":1405676600000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"JakeA: You too, huh","msgtype":"m.text"},"ts":1405676607000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Ms2ger: I think that's finally getting fixed now.","msgtype":"m.text"},"ts":1405676642000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"jgraham: yeah, it was kind amazing to watch though","msgtype":"m.text"},"ts":1405676661000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"kinda*","msgtype":"m.text"},"ts":1405676667000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: here's the APIs of FS and FSs side by side, for comparison: https://gist.github.com/tobie/ecc0768343f15870ae37","msgtype":"m.text"},"ts":1405676679000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"FSs only operates on stores except for match.","msgtype":"m.text"},"ts":1405676701000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"I still think we should merge test262 into wpt, but I'm not going to spend time arguing with tc39","msgtype":"m.text"},"ts":1405676708000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: I agree with both of these comments.","msgtype":"m.text"},"ts":1405676726000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"tobie_: Yeah, it's a convenience method, but really handy in practice","msgtype":"m.text"},"ts":1405676738000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: Have you considered moving it to the service worker instead?","msgtype":"m.text"},"ts":1405676754000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"If only I was at Google, then I had someone to litigate for me at standard bodies :)","msgtype":"m.text"},"ts":1405676758000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"tobie_: It's useful for anything that uses FetchStores","msgtype":"m.text"},"ts":1405676779000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: that's a good point.","msgtype":"m.text"},"ts":1405676820000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"JakeA: are there plans to extend FetchStores beyond service workers, though?","msgtype":"m.text"},"ts":1405676858000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"tobie_: Eg, if you're wanting to update some page content from the cache then go to the network for fresh content (or race the two), being able to do fetchStores.match('/api.json').then(r => r.body.response).then(updatePage) is useful","msgtype":"m.text"},"ts":1405676866000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Ms2ger: What about Attorney Anne? ;)","msgtype":"m.text"},"ts":1405676871000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"tobie_: I want it on the window object from the start","msgtype":"m.text"},"ts":1405676881000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Is Attorney Anne back from vacation yet?","msgtype":"m.text"},"ts":1405676900000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"No. It is still July","msgtype":"m.text"},"ts":1405676912000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"SamB, HTMLElement != Element","msgtype":"m.text"},"ts":1405676925000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"tobie_: TabAtkins: Having a debate et un on the reject vs resolve(undefined) thing https://github.com/slightlyoff/ServiceWorker/issues/374","msgtype":"m.text"},"ts":1405676989000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: mmm. Shouldn't you just do fetch('/api.json').then(r => r.body.response).then(updatePage) in that case and let the SW handle the caching?","msgtype":"m.text"},"ts":1405676994000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"Should be fetchStores.match('/api.json').then(r => r.body.asJSON()).then(updatePage) - sorry am le tired","msgtype":"m.text"},"ts":1405677026000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"tobie_: Nah, you want the page to make two requests. One to the network via the serviceworker & one just from the cache","msgtype":"m.text"},"ts":1405677067000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"tobie_: You could do both via the serviceworker, using headers or a querystring to make sure the sw gets the content from the correct place","msgtype":"m.text"},"ts":1405677091000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"tobie_: But it's simpler for the page just to access the cache","msgtype":"m.text"},"ts":1405677103000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"tobie_: the in-page code would look like https://gist.github.com/jakearchibald/766e0bffb87c87baeba3","msgtype":"m.text"},"ts":1405677171000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: The use case is display cached content immediately if available, update when fresh content comes in, right?","msgtype":"m.text"},"ts":1405677436000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"tobie_: yep, which is the super A+ offline-first way to do things (Twitter native app does the same)","msgtype":"m.text"},"ts":1405677506000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: thankfully, Twitter knows better and just indicates fresh content is available.","msgtype":"m.text"},"ts":1405677563000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"JakeA: the auto-replace with fresh content found elsewhere is terrible UX.","msgtype":"m.text"},"ts":1405677608000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"tobie_: Well, it adds the new content but updates the scroll position so you're looking at the old content still, which is great","msgtype":"m.text"},"ts":1405677613000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"tobie_: yeah, there's a few places you can get away with it, but generally it's bad. The G+ app used to do it.","msgtype":"m.text"},"ts":1405677649000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Actually, I think Facebook does that","msgtype":"m.text"},"ts":1405677670000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"still","msgtype":"m.text"},"ts":1405677674000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: no comments.","msgtype":"m.text"},"ts":1405677683000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":":D","msgtype":"m.text"},"ts":1405677688000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":":D","msgtype":"m.text"},"ts":1405677688000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: OK, I think you're making a convincing argument that FetchStores belongs in window.","msgtype":"m.text"},"ts":1405677746000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"(in window too).","msgtype":"m.text"},"ts":1405677776000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"tobie_: It's unique to the origin too, like localStorage etc. If it stays in the sw people think it's unique to the sw","msgtype":"m.text"},"ts":1405677854000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"that doesn't bother me that much.","msgtype":"m.text"},"ts":1405677933000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"JakeA: OK, so my proposal to move .match() on the SW itself doesn't work. :/","msgtype":"m.text"},"ts":1405678107000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"tobie_: What's the problem with .match on the FetchStores? It's just \"give me a match from any store\". Would matchAny help?","msgtype":"m.text"},"ts":1405678191000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: so the benefits of using just .match is that it Just Works whether you're using FSs or FS.","msgtype":"m.text"},"ts":1405678496000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"(also its short, which people tend to prefer).","msgtype":"m.text"},"ts":1405678519000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"The downsides, however, is it blurs the lines between FSs and FS.","msgtype":"m.text"},"ts":1405678570000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"So as a consumer of those APIs I'm left wondering why FSs doesn't have matchAll.","msgtype":"m.text"},"ts":1405678636000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"JakeA: Similar issue as to having FSs.get without having a FSs.set BTW.","msgtype":"m.text"},"ts":1405678681000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"tobie_: It could have a matchAll","msgtype":"m.text"},"ts":1405678758000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"tobie_: If you allow .set you can have the same store existing in fetchStores under multiple names, which is messy","msgtype":"m.text"},"ts":1405678792000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"you could have that throw, no?","msgtype":"m.text"},"ts":1405678817000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"tobie_: Yep, or just make it not-possible as in the current design","msgtype":"m.text"},"ts":1405678956000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"So yeah, I think renaming FSs.match to FSs.matchRequest / FSs.matchAny / something that clearly marks it as a convenience method that operates directly on the requests rather than on the stores would make the whole API a lot clearer if a tad more verbose.","msgtype":"m.text"},"ts":1405678959000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"tobie_: the create/get pattern is used in databases","msgtype":"m.text"},"ts":1405678993000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"it's more commonly create/find","msgtype":"m.text"},"ts":1405679018000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"no?","msgtype":"m.text"},"ts":1405679021000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"tobie_: in IDB it's create/get, in mysql it's create/use","msgtype":"m.text"},"ts":1405679092000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"oh boy, if we use IDB as an example we're doomed.","msgtype":"m.text"},"ts":1405679117000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"I know, but just because idb is bad doesn't mean every pattern they exhibit is wrong","msgtype":"m.text"},"ts":1405679160000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I know. :)","msgtype":"m.text"},"ts":1405679190000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"I'm used to seing get/set get/post/put/delete create/find create/select but create/get, not so much, tbh","msgtype":"m.text"},"ts":1405679213000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"Everything's bad, so just throw consistency out of the window","msgtype":"m.text"},"ts":1405679231000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: honest question, what's better, consistency with a crap API or inconsistency with a Possibly better one?","msgtype":"m.text"},"ts":1405679266000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"Anne suggested var store = new FetchStore(\"name\"); fetchStores.add(store);","msgtype":"m.text"},"ts":1405679267000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"fetchStores.get(\"name\")","msgtype":"m.text"},"ts":1405679283000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Where fetchStores.add would throw if it already contains a store with a given name","msgtype":"m.text"},"ts":1405679309000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"That would make Domenic happier I think.","msgtype":"m.text"},"ts":1405679336000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Sounds like it from his comments on the issue.","msgtype":"m.text"},"ts":1405679369000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"I prefer fetchStores.create('name').then(store => store.add(urls))","msgtype":"m.text"},"ts":1405679475000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"vs var store('name'); Promise.all([store.add(urls), fetchStores.add(store)]);","msgtype":"m.text"},"ts":1405679476000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"ffs","msgtype":"m.text"},"ts":1405679495000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"var store = new FetchStore('name'); Promise.all([store.add(urls), fetchStores.add(store)]);","msgtype":"m.text"},"ts":1405679510000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Yup. I can see that causing lots of issues down the line.","msgtype":"m.text"},"ts":1405679853000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"A whole bunch of examples I saw actually forget to wait for the store to be saved to disk before moving on to the next thing.","msgtype":"m.text"},"ts":1405679896000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"JakeA: I guess this doesn work because fetchStores.add takes multiple stores, right? fetchStores.add(new FetchStore(\"foo\")).then(store => store.add(urls))","msgtype":"m.text"},"ts":1405680293000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"tobie_: If .add resolves with the added store, that works","msgtype":"m.text"},"ts":1405680404000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Well, unless .add accepts multiple arguments, in which case... :(  fetchStores.add(new FetchStore(\"foo\")).then(stores => stores[0].add(urls))","msgtype":"m.text"},"ts":1405680456000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"tobie_: Yeah, I don't like the \"multiple args resolve to array\" pattern. I'd rather be like Promise.all and take an array & resolve to an array","msgtype":"m.text"},"ts":1405680501000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"tobie_: Which is why I changed store.add to take an array","msgtype":"m.text"},"ts":1405680516000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Man, I wish JS had a way to abstract collections and single items somehow","msgtype":"m.text"},"ts":1405680531000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"JakeA: both patterns are terrible, tbh.","msgtype":"m.text"},"ts":1405680622000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"like arr.push.apply(arr, [1, 2, 3]);","msgtype":"m.text"},"ts":1405680665000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"Or when it works the other way round: arr.push([1]);","msgtype":"m.text"},"ts":1405680727000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"What happens if you do fetchStores.add(store) it throws? or internally converts to  fetchStores.add([store])","msgtype":"m.text"},"ts":1405680843000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"tobie_: Here's the problem, it'll be fetchStores.add(store), but fetchStore.add([url, request, anotherRequest])","msgtype":"m.text"},"ts":1405684329000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"tobie_: Another good reason to stay with .create IMO","msgtype":"m.text"},"ts":1405684353000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"oh, boy.","msgtype":"m.text"},"ts":1405684364000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":".create as sugar for construct + add is I think my preference","msgtype":"m.text"},"ts":1405689226000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: tobie_: ^","msgtype":"m.text"},"ts":1405689257000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: that could work","msgtype":"m.text"},"ts":1405689314000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(Still reading scrollback)","msgtype":"m.text"},"ts":1405689337000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA brought up the fetchStores.add(item) but store.add(iterable) issue","msgtype":"m.text"},"ts":1405689364000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"Ah yeah, seems annoying","msgtype":"m.text"},"ts":1405689454000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Also on reject vs. undefined, my only strong opinion was on a method names get. One named match I haven't thought too hard bit for now could go either way","msgtype":"m.text"},"ts":1405689502000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"augh iPad typing ftl","msgtype":"m.text"},"ts":1405689522000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I would expect from Set that add takes a single argument","msgtype":"m.text"},"ts":1405689545000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but that might be false consistency","msgtype":"m.text"},"ts":1405689563000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah, I spent the train journey in mocking up code using reject vs undefined. I'm favouring reject.","msgtype":"m.text"},"ts":1405689587000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"in which case a name like put might be better? I dunno this is clearly a tough call.","msgtype":"m.text"},"ts":1405689596000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"when I get in to work I promise to reply to all issues after actually thinking about them hard","msgtype":"m.text"},"ts":1405689617000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah, or push?","msgtype":"m.text"},"ts":1405689618000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"push would take varargs, not iterable","msgtype":"m.text"},"ts":1405689642000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: store.add([url, request, otherRequest]) is an atomic operation, depending on fetching all those resources. It feels like that should reject on failure too.","msgtype":"m.text"},"ts":1405689659000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"right that was for fetchStores.","msgtype":"m.text"},"ts":1405689675000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"Domenic: But if you want to resolve with an array, that gets ugly","msgtype":"m.text"},"ts":1405689684000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: that definitely seems reasonable","msgtype":"m.text"},"ts":1405689693000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"modulo naming","msgtype":"m.text"},"ts":1405689701000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"resolving with an array is fine in ES6","msgtype":"m.text"},"ts":1405689716000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":".then(([a, b, c]) => …)","msgtype":"m.text"},"ts":1405689739000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Think I still prefer \"cache\" based names for all this :(","msgtype":"m.text"},"ts":1405689741000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"FFs I hope iOS 8 custom keyboards let you add a bunch of programmer punctuation to the main screen","msgtype":"m.text"},"ts":1405689772000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"add does so much stuff, no wonder it's hard to name.","msgtype":"m.text"},"ts":1405689785000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"store.add that is.","msgtype":"m.text"},"ts":1405689802000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"I much prefer that style of atomicity to something complicated like IDB's transactions though","msgtype":"m.text"},"ts":1405689823000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"tobie_: Although cache.add([\"/whatever.json\", \"/style.css\"]) feels intuitive to me, but maybe I'm in too deep","msgtype":"m.text"},"ts":1405689848000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"well, it's really fetchAndStore","msgtype":"m.text"},"ts":1405689874000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"true","msgtype":"m.text"},"ts":1405689923000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"store.fetch? store.prefetch?","msgtype":"m.text"},"ts":1405689930000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"note I would love to see if people would get more upset over fetchAndStore than brand-color","msgtype":"m.text"},"ts":1405689983000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"\"add '/style.css' to this cache\" makes sense to me","msgtype":"m.text"},"ts":1405690002000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"It took me quite a while to figure out what exactly store.add was doing by just looking at the code.","msgtype":"m.text"},"ts":1405690059000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"Feels a bit like appcache magic to me.","msgtype":"m.text"},"ts":1405690070000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"if you see what I mean.","msgtype":"m.text"},"ts":1405690088000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"Is it sugar for two composable reactions (fetch and add)?","msgtype":"m.text"},"ts":1405690139000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If so the complexity seems ok","msgtype":"m.text"},"ts":1405690149000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"S/reactions/operations","msgtype":"m.text"},"ts":1405690160000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah, throw in a Promise.all and it is.","msgtype":"m.text"},"ts":1405690186000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"The bit we don't have a lower-level for is the atomic put","msgtype":"m.text"},"ts":1405690207000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"store.put(request, response) - allowing you to add custom responses & requests","msgtype":"m.text"},"ts":1405690262000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Could guarantee that calls to .put within the same task are atomic, but that's getting close to idb-land","msgtype":"m.text"},"ts":1405690307000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Noooooo bad bad","msgtype":"m.text"},"ts":1405690315000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1405690331000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"addRequest, with add as sugar that takes more than one URL, request, whatever?","msgtype":"m.text"},"ts":1405690379000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Got to run. Will catch up on the conversation later.","msgtype":"m.text"},"ts":1405690434000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"Domenic: it's not just sugar if nothing else handles the atomic commit","msgtype":"m.text"},"ts":1405690471000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"addRequests then?","msgtype":"m.text"},"ts":1405690487000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think we need a version of .put that takes many request & response combos. But ugh.","msgtype":"m.text"},"ts":1405690788000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Then we could explain .add on top of that using fetch & Promise.all","msgtype":"m.text"},"ts":1405690815000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Actually no","msgtype":"m.text"},"ts":1405690841000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"because we don't have a way to do a series of deletes + puts atomically, but .add does","msgtype":"m.text"},"ts":1405690864000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Will let it bounce round my read over the weekend","msgtype":"m.text"},"ts":1405690913000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"maybe something more truly low-level, e.g. .atomic({ add: [...], delete: [...] })","msgtype":"m.text"},"ts":1405694227000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"+1 on making the name somehow more descriptive of the \"all or nothing\" semantics. I didn't get that out of .add() at all.","msgtype":"m.text"},"ts":1405694382000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"gsnedders, https://i.imgur.com/6k0l9zo.jpg","msgtype":"m.text"},"ts":1405709809000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: hah","msgtype":"m.text"},"ts":1405710098000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Internet Explorer keeps Scotland safe?","msgtype":"m.text"},"ts":1405710154000,"senderName":"wilhelm","senderId":"wilhelm@irc"},
{"content":{"body":"how big should i be making the multipage spec slices?","msgtype":"m.text"},"ts":1405714801000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"is a megabyte ok?","msgtype":"m.text"},"ts":1405714804000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: well, about how big do they run now?","msgtype":"m.text"},"ts":1405714975000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"the old splitter ranged them from 15k to 650k.","msgtype":"m.text"},"ts":1405715100000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but imho had too many","msgtype":"m.text"},"ts":1405715175000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the new splitter splits them into sections from 30k to 900k, plus one outlier at 3MB.","msgtype":"m.text"},"ts":1405715218000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"how large is it if you just do one per top-level section?","msgtype":"m.text"},"ts":1405715228000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Does this mean all multipage links are going to break? :(","msgtype":"m.text"},"ts":1405715366000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"they all have magic that redirects based on the fragment anyway","msgtype":"m.text"},"ts":1405715389000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"because it's never been stable","msgtype":"m.text"},"ts":1405715398000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"oh did not know. that's good then.","msgtype":"m.text"},"ts":1405715417000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"this is why you can do something really naive like http://whatwg.org/C#parsing without caring what section it lies in","msgtype":"m.text"},"ts":1405715425000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"It would be cool to use replaceState to show a semi-canonical multipage permalink URL in the URL bar at all times","msgtype":"m.text"},"ts":1405715482000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"like /C#fragment seems pretty good to me","msgtype":"m.text"},"ts":1405715491000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Change it as you scroll","msgtype":"m.text"},"ts":1405715494000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"gsnedders: the new splitter is doing one per top-level section right now","msgtype":"m.text"},"ts":1405715634000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic: file a bug, put \"tools\" in teh status whiteboard :-)","msgtype":"m.text"},"ts":1405715661000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: seems more reasonable to me","msgtype":"m.text"},"ts":1405715671000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: yeah, except for the 3MB one","msgtype":"m.text"},"ts":1405715690000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"which is all the elements","msgtype":"m.text"},"ts":1405715693000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i guess i'll split that one up further","msgtype":"m.text"},"ts":1405715716000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic: the multipage stuff is going to be a lot more stable because i'm hard-coding where the splits occur, and the filenames to use, in the source file itself","msgtype":"m.text"},"ts":1405715740000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: well, that does help.","msgtype":"m.text"},"ts":1405715771000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"when one does var w = someotherwindow.WebSocket(); what is the entry settings object?","msgtype":"m.text"},"ts":1405716482000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"The entry settings object is the most-recently added script settings object in the stack of script settings objects that is labeled as a candidate entry settings object.","msgtype":"m.text"},"ts":1405716829000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i.e. doesn't matter which Window the constructor is invoked on","msgtype":"m.text"},"ts":1405716845000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: right, so it is from the context of w","msgtype":"m.text"},"ts":1405716952000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"not necessarily","msgtype":"m.text"},"ts":1405717056000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if w is in a function in yetanotherwindow","msgtype":"m.text"},"ts":1405717067000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but the script execution started in window0","msgtype":"m.text"},"ts":1405717081000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it would be window0, if i'm not mistaken","msgtype":"m.text"},"ts":1405717098000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"otherwise it would be the incumbent settings object","msgtype":"m.text"},"ts":1405717117000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"not the entry settings object","msgtype":"m.text"},"ts":1405717121000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic, JakeA: think we should really have a straightforward way to prime the FS in case of cache miss, e.g.: https://gist.github.com/tobie/83674a1b83e1d4d3da21","msgtype":"m.text"},"ts":1405718756000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"Basically `add` that fetches caches and returns the response object but for a unique resource (so you don't have to deal with getting an array back).","msgtype":"m.text"},"ts":1405718867000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"Opened https://github.com/slightlyoff/ServiceWorker/issues/376 with the above.","msgtype":"m.text"},"ts":1405719486000,"senderName":"tobie_","senderId":"tobie_@irc"},
{"content":{"body":"i'm about to replace the multipage copy of the spec with my version","msgtype":"m.text"},"ts":1405726764000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so let me know if anything breaks","msgtype":"m.text"},"ts":1405726768000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(i haven't yet done the cross-page dfn refs)","msgtype":"m.text"},"ts":1405726880000,"senderName":"Hixie","senderId":"Hixie@irc"}
]