[
{"content":{"body":"tobie: ok, will look today","msgtype":"m.text"},"ts":1478568447000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"TabAtkins: thanks for the feedbak about the validator bug Bert raised","msgtype":"m.text"},"ts":1478572684000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Is there a way for a server to block all cross-origin fetch requests with credentials?","msgtype":"m.text"},"ts":1478572840000,"senderName":"not-an-aardvark","senderId":"not-an-aardvark@irc"},
{"content":{"body":"I'm aware that code on the other site can't see the response due to the same-origin policy, but I'm concerned that it's able to figure out other data about the request, such as whether the request is redirected.","msgtype":"m.text"},"ts":1478572906000,"senderName":"not-an-aardvark","senderId":"not-an-aardvark@irc"},
{"content":{"body":"not-an-aardvark: why can'","msgtype":"m.text"},"ts":1478573342000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"oofs","msgtype":"m.text"},"ts":1478573348000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"not-an-aardvark: why can‚Äôt server just look at the origin of the request and the headers and then just respond with 403 or whatever","msgtype":"m.text"},"ts":1478573423000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"anyway it seems like there‚Äôs nothing that browsers do that would prevent it, and nothing in any specs for the platform that would prevent it","msgtype":"m.text"},"ts":1478573502000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Do you mean looking at the Referer header?","msgtype":"m.text"},"ts":1478573591000,"senderName":"not-an-aardvark","senderId":"not-an-aardvark@irc"},
{"content":{"body":"The issue with Referer checking is that the site still needs to be able to handle the case where a user clicks a link from another site without returning a 403.","msgtype":"m.text"},"ts":1478573750000,"senderName":"not-an-aardvark","senderId":"not-an-aardvark@irc"},
{"content":{"body":"My concern is that giving a site the ability to determine whether a credentialed cross-origin request resulted in a redirect seems like a violation of the same-origin policy.","msgtype":"m.text"},"ts":1478573850000,"senderName":"not-an-aardvark","senderId":"not-an-aardvark@irc"},
{"content":{"body":"That would imply that a site can't safely have a redirect available only to specific user sessions, because another site would be able to detect whether the user's request results in a redirect.","msgtype":"m.text"},"ts":1478574021000,"senderName":"not-an-aardvark","senderId":"not-an-aardvark@irc"},
{"content":{"body":"maybe I am being daft but the same-origin policy doesn‚Äôt apply on the server side. It is strictly a client-side restriction in browsers. A fact of life for browsers. It is not a general policy meant to restrict what you can do in your server code.","msgtype":"m.text"},"ts":1478574125000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"My original question was concerning whether it would be possible for a server to distinguish between (a) cross-origin fetch requests with credentials, and (b) any other requests. This would allow the server to always reject the former, which would allow safe user-specific redirects in other scenarios.","msgtype":"m.text"},"ts":1478574288000,"senderName":"not-an-aardvark","senderId":"not-an-aardvark@irc"},
{"content":{"body":"This would be as a workaround for the same-origin policy issue that I mentioned above.","msgtype":"m.text"},"ts":1478574334000,"senderName":"not-an-aardvark","senderId":"not-an-aardvark@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1478574339000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"well if you can wait around for a few more hours you can probably get a better answer from annevk","msgtype":"m.text"},"ts":1478574434000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"otherwise this time of day this channel is not very active in general","msgtype":"m.text"},"ts":1478574451000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"üëç, thanks for the response anyway","msgtype":"m.text"},"ts":1478574479000,"senderName":"not-an-aardvark","senderId":"not-an-aardvark@irc"},
{"content":{"body":"not-an-aardvark: not possible","msgtype":"m.text"},"ts":1478585138000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not-an-aardvark: you want samesite cookies or whatever the name is these days","msgtype":"m.text"},"ts":1478585177000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not-an-aardvark: but only Chrome supports them","msgtype":"m.text"},"ts":1478585192000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That's unfortunate. Thanks for the answer though.","msgtype":"m.text"},"ts":1478585221000,"senderName":"not-an-aardvark","senderId":"not-an-aardvark@irc"},
{"content":{"body":"What was the reasoning for that decision when fetch was created? It seems inconsistent with how the same-origin policy works in other contexts.","msgtype":"m.text"},"ts":1478585249000,"senderName":"not-an-aardvark","senderId":"not-an-aardvark@irc"},
{"content":{"body":"not-an-aardvark: what do you mean? It's no different from <img src=http://crossorigin/>","msgtype":"m.text"},"ts":1478588130000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"With <img src=\"http://crossorigin/\"/>, a script doesn't know anything about the response. With fetch('foo', {credentials: 'include', mode: 'no-cors', redirect: 'error'}), a script can determine whether the user's credentials cause a redirect.","msgtype":"m.text"},"ts":1478588354000,"senderName":"not-an-aardvark","senderId":"not-an-aardvark@irc"},
{"content":{"body":"Granted, I suppose a script can detect a 404 response with img from the onerror handler. But that information leak is restricted only to endpoints that sometimes have valid images, since a 404 error and a response containing something other than an image are indistinguishable to the client (assuming X-Content-Type-Options is enabled)","msgtype":"m.text"},"ts":1478588571000,"senderName":"not-an-aardvark","senderId":"not-an-aardvark@irc"},
{"content":{"body":"not-an-aardvark: you can determine a 404 reliably with <object>, iirc","msgtype":"m.text"},"ts":1478588805000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not-an-aardvark: good question about redirects though","msgtype":"m.text"},"ts":1478589101000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not-an-aardvark: I thought those could be observed, but I cannot remember how","msgtype":"m.text"},"ts":1478589110000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not-an-aardvark: that is, I thought you could observe a redirect was made","msgtype":"m.text"},"ts":1478589124000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Fair enough, but 404 information leaks from <object> and <iframe> can be prevented by the server with X-Frame-Options. It doesn't seem like there is any way to avoid information leaks from redirects in this case.","msgtype":"m.text"},"ts":1478589311000,"senderName":"not-an-aardvark","senderId":"not-an-aardvark@irc"},
{"content":{"body":"not-an-aardvark: https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site is the tool basically","msgtype":"m.text"},"ts":1478589343000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not-an-aardvark: redirects were indeed exposed as part of service workers, to be able to handle navigation","msgtype":"m.text"},"ts":1478589382000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not-an-aardvark: but timing attacks would already make it possible to observe them","msgtype":"m.text"},"ts":1478589396000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not-an-aardvark: this is basically yet another variant of HEIST, which https://github.com/w3c/resource-timing/issues/64 has a pretty good discussion about what we can do standards-wise","msgtype":"m.text"},"ts":1478589449000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Fair enough, and thanks for the links.","msgtype":"m.text"},"ts":1478589470000,"senderName":"not-an-aardvark","senderId":"not-an-aardvark@irc"},
{"content":{"body":"not-an-aardvark: I'm sorry it all sucks","msgtype":"m.text"},"ts":1478589477000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":\\","msgtype":"m.text"},"ts":1478589491000,"senderName":"not-an-aardvark","senderId":"not-an-aardvark@irc"},
{"content":{"body":"Same-site cookies look like they will basically solve the problem, but I would be worried about them being insecure in old browsers before they are widely adopted (since they would just get treated as regular cookies in old browsers)","msgtype":"m.text"},"ts":1478589573000,"senderName":"not-an-aardvark","senderId":"not-an-aardvark@irc"},
{"content":{"body":"Anyway, thanks again for your help!","msgtype":"m.text"},"ts":1478589668000,"senderName":"not-an-aardvark","senderId":"not-an-aardvark@irc"},
{"content":{"body":"heycam: \\o/","msgtype":"m.text"},"ts":1478593508000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: haven't done anything yet though! :) and it's already 4:30pm...","msgtype":"m.text"},"ts":1478593525000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: yeah‚Äîdon't worry.","msgtype":"m.text"},"ts":1478593570000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"heycam: I'm just getting really good a fixing broken merges. :D","msgtype":"m.text"},"ts":1478593601000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"hah","msgtype":"m.text"},"ts":1478593611000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"yeah, they're a pain :)","msgtype":"m.text"},"ts":1478593617000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"though must be better with bikeshed...","msgtype":"m.text"},"ts":1478593627000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"oh, this is the target .html file","msgtype":"m.text"},"ts":1478593650000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1478593695000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"heycam: so it's OK when the branch you're trying to rebase is ahead by a single commit","msgtype":"m.text"},"ts":1478593731000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"heycam: it starts to be a lot more painful when there are multiple commits.","msgtype":"m.text"},"ts":1478593751000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: at least if there were no conflicts in the bikeshed file you can just blow away the index.html and rebuild it","msgtype":"m.text"},"ts":1478593766000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"you basically have to re-run bikeshed between each commit.","msgtype":"m.text"},"ts":1478593767000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1478593770000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"but yes, I'll look at this soon.  and thanks Domenic for the detailed instructions, that should help :)","msgtype":"m.text"},"ts":1478593787000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"yes. but given there are never any conflicts in the .bs file, it makes a lot more sense to split these two operations","msgtype":"m.text"},"ts":1478593827000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Cool","msgtype":"m.text"},"ts":1478593850000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: you had this webidl issue you wanted to talk to me about last week","msgtype":"m.text"},"ts":1478594554000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I don't remember","msgtype":"m.text"},"ts":1478594585000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'll check the logs","msgtype":"m.text"},"ts":1478594606000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: it was about making progress on https://www.w3.org/Bugs/Public/show_bug.cgi?id=27301","msgtype":"m.text"},"ts":1478594685000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1478594710000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: comment 5 is a good summary","msgtype":"m.text"},"ts":1478594733000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: so I guess there's not much left to discuss","msgtype":"m.text"},"ts":1478594853000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: oh--did comment 5 happen in the meantime? Thanks. I'll look into this.","msgtype":"m.text"},"ts":1478594971000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: yeah, Domenic happened","msgtype":"m.text"},"ts":1478594994000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1478595005000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I've been tinkering with the idea of adding \"note to editors\" in the WebIDL spec. Are there precedents that shows this is a bad idea?","msgtype":"m.text"},"ts":1478595722000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: there's some precedent, e.g., https://url.spec.whatwg.org/#url-apis-elsewhere","msgtype":"m.text"},"ts":1478595996000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: or https://dom.spec.whatwg.org/#defining-event-interfaces","msgtype":"m.text"},"ts":1478596043000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I was even thinking of: <div class=\"note-for-editors\">","msgtype":"m.text"},"ts":1478596109000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: and also <div class=\"legacy\"> with a [ ] hide legacy stuff checkbox at the top of the spec","msgtype":"m.text"},"ts":1478596141000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: both sound reasonable in principle","msgtype":"m.text"},"ts":1478596165000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: wrt to calling abstract operations with [=abstract op name=](arguments...), do we have a naming convention for the abstract ops?","msgtype":"m.text"},"ts":1478596187000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: UpperCamelCase","msgtype":"m.text"},"ts":1478596215000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok, so we should rename algos that way as we clean them up","msgtype":"m.text"},"ts":1478596259000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1478596265000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1478596292000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heycam: would be awesome if you could also add a link to the spec and its name at the top of the repo. I added a todo item to https://github.com/heycam/webidl/pull/221 to remind you.","msgtype":"m.text"},"ts":1478596910000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"ok, will do","msgtype":"m.text"},"ts":1478596946000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"ty","msgtype":"m.text"},"ts":1478597823000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"If I have: `interface A : B {};` are `attribute (A or B) foo;` and `attribute B foo;` the same or not at all?","msgtype":"m.text"},"ts":1478598054000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I think I asked this question 10x already, so where is this explained in the spec would also help","msgtype":"m.text"},"ts":1478598087000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: in theory (A or B) is not legal, since those types are not distinguishable","msgtype":"m.text"},"ts":1478598366000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: but, but, but...","msgtype":"m.text"},"ts":1478598404000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: since the (a) footnote in the distinguishability table says that it must not be possible for an object to implement both interfaces, and likely it is","msgtype":"m.text"},"ts":1478598407000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: my brain refuses to compute that part of the spec.","msgtype":"m.text"},"ts":1478598491000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"heycam: I thought it was for operations only, not unions on attributes","msgtype":"m.text"},"ts":1478598510000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: each type in the union must be distinguishable from the others","msgtype":"m.text"},"ts":1478598531000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: oh","msgtype":"m.text"},"ts":1478598540000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"per the sentence in https://heycam.github.io/webidl/#idl-union that starts \"each pair\"","msgtype":"m.text"},"ts":1478598548000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: oh right, it says that.","msgtype":"m.text"},"ts":1478598591000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"heycam: so is there no way to say that an attribute can return a class or a subclass of that class?","msgtype":"m.text"},"ts":1478598634000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: no, but just \"A\" by itself means that, doesn't it?","msgtype":"m.text"},"ts":1478598652000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: that *was* my question","msgtype":"m.text"},"ts":1478598667000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"heycam: and the follow-up question is where is that mentioned in the spec?","msgtype":"m.text"},"ts":1478598702000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"heycam: or is it implicit","msgtype":"m.text"},"ts":1478598707000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: that A means \"things that implement A or anything that derives from A\"?","msgtype":"m.text"},"ts":1478598735000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"it might not be spelled out exactly. https://heycam.github.io/webidl/#idl-interface says that an interface type represents all objects that implement that interface, and there's kind of a definition of what \"inherit\" means for interfaces, but maybe nothing that states \"if an object implements B and B inherits from A, then the object must also implement A\"","msgtype":"m.text"},"ts":1478598915000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"oh, no there is such a sentence","msgtype":"m.text"},"ts":1478598948000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: tbh that's another part of the spec I that makes my head hurt","msgtype":"m.text"},"ts":1478598951000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"\"An object that implements an interface that inherits from another also implements that inherited interface.\"","msgtype":"m.text"},"ts":1478598954000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"in https://heycam.github.io/webidl/#idl-interfaces","msgtype":"m.text"},"ts":1478598958000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Could someone walk me through the test \"Namespace generally shouldn't matter\" in domparsing/createContextualFragment.html?","msgtype":"m.text"},"ts":1478599392000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I don't understand why <body> should be parsed the same in a div and in a fake-namespace:div.","msgtype":"m.text"},"ts":1478599409000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"AFAICT <body> in a fake-namespace:div should be parsed as foreign content, no?","msgtype":"m.text"},"ts":1478599449000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"heycam: right: attribute A foo; just means foo must implement A, not that it mustn't also implement something else","msgtype":"m.text"},"ts":1478599567000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"heycam: thanks","msgtype":"m.text"},"ts":1478599578000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: yup :)","msgtype":"m.text"},"ts":1478599598000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"still might be worth saying explicitly in the #idl-interface section","msgtype":"m.text"},"ts":1478599612000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: yes","msgtype":"m.text"},"ts":1478599622000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"It looks to me like the spec of createContextualFragment is wrong because I don't see how it can behave as tested in \"Namespace generally shouldn't matter\".","msgtype":"m.text"},"ts":1478599659000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"denies everything","msgtype":"m.emote"},"ts":1478601292000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: would like your thoughts on https://github.com/w3c/ambient-light/issues/17","msgtype":"m.text"},"ts":1478604672000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"when you find the time","msgtype":"m.text"},"ts":1478604680000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: and https://github.com/w3c/sensors/issues/150","msgtype":"m.text"},"ts":1478604819000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: what is SensorReading? No enum I hope?","msgtype":"m.text"},"ts":1478605019000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: an interface","msgtype":"m.text"},"ts":1478605037000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: for 17 I think you don't have to redefine it","msgtype":"m.text"},"ts":1478605081000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: contains a hr-timestamp and the value(s) of the sensor at that time","msgtype":"m.text"},"ts":1478605083000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: cool","msgtype":"m.text"},"ts":1478605097000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: only use would be stating a more specific return value, right?","msgtype":"m.text"},"ts":1478605117000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yes","msgtype":"m.text"},"ts":1478605131000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: you only do it if you change the type","msgtype":"m.text"},"ts":1478605180000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: which is an anti-pattern, but legacy","msgtype":"m.text"},"ts":1478605200000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: well, it's a subclass","msgtype":"m.text"},"ts":1478605226000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: not sure about 150","msgtype":"m.text"},"ts":1478605243000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it's very similar to that VR thing in https://github.com/w3c/webvr/issues/107","msgtype":"m.text"},"ts":1478605260000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: well, in practise it's actually the same thing as VRPose (which webvr declares as an interface)","msgtype":"m.text"},"ts":1478605441000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: Intimate with the subtle details of createContextualFragment?","msgtype":"m.text"},"ts":1478609298000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: sorry","msgtype":"m.text"},"ts":1478609353000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Don't be.","msgtype":"m.text"},"ts":1478609359000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: Know who could help?","msgtype":"m.text"},"ts":1478609367000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: not really","msgtype":"m.text"},"ts":1478609403000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ok. :)","msgtype":"m.text"},"ts":1478609428000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Apart from you not many folks have studied the parser bits lately","msgtype":"m.text"},"ts":1478609571000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: 'Unmark all scripts in <var>fragment node</var> as \"already started\" and as \"parser-inserted\".' Does that sound English?","msgtype":"m.text"},"ts":1478609780000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: it's a little vague, although I think I get the intent","msgtype":"m.text"},"ts":1478609843000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ok.","msgtype":"m.text"},"ts":1478609853000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"https://github.com/w3c/DOM-Parsing/pull/23","msgtype":"m.text"},"ts":1478609860000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: Do I have something to do for that ipr failing test? Should I care?","msgtype":"m.text"},"ts":1478609914000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Or is that W3C bureaucracy that doesn't concern me?","msgtype":"m.text"},"ts":1478609922000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: don't care","msgtype":"m.text"},"ts":1478609948000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Perfect. I like it when I don't have to care.","msgtype":"m.text"},"ts":1478609962000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: it seems HTML is inconsistent with mark / using \"already started\" as flag","msgtype":"m.text"},"ts":1478609971000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: oh well","msgtype":"m.text"},"ts":1478609976000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Wtf is IPR?","msgtype":"m.text"},"ts":1478627098000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Oh, Intellectual Property Rights, got it.","msgtype":"m.text"},"ts":1478627141000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Wait, I've lost the plot, are data URLs same origin or not?","msgtype":"m.text"},"ts":1478640074000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Depends on context, I think?","msgtype":"m.text"},"ts":1478640317000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I thought the answer was \"no\" in Chrome and latterly in the spec","msgtype":"m.text"},"ts":1478640513000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"THere is a lovely test run with this change in gecko: https://treeherder.mozilla.org/#/jobs?repo=try&revision=28735d0f2e5516c5a6d1f7805a065a6edbd8f28b","msgtype":"m.text"},"ts":1478640572000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"many web-platform-tests rely on data: behaving as in moz.","msgtype":"m.text"},"ts":1478641195000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Oh, hey, I said that before: https://github.com/w3c/web-platform-tests/issues/1999","msgtype":"m.text"},"ts":1478641244000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Oh look a PR to fix some things","msgtype":"m.text"},"ts":1478641394000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Apparently data is mostly same-origin but not for navigations and workers or something like that https://github.com/whatwg/fetch/commit/6f223de29733e64dbe1dfc6028c6e0a4a5d89398","msgtype":"m.text"},"ts":1478642375000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so presumably code in a data uri can't read secure cookies or anything?","msgtype":"m.text"},"ts":1478642809000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"from window.opener or whatever","msgtype":"m.text"},"ts":1478642845000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Right so I guess they are different-origin but fetch treats them as same-origin","msgtype":"m.text"},"ts":1478642858000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but only for the purposes of fetching","msgtype":"m.text"},"ts":1478642866000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"jsbell: I see that Chrome still supports UTF-32? :(","msgtype":"m.text"},"ts":1478642882000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh I see there are recent comments https://bugs.chromium.org/p/chromium/issues/detail?id=417850","msgtype":"m.text"},"ts":1478642918000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Yeah. We'll get rid of it soon.","msgtype":"m.text"},"ts":1478644253000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1478644260000,"senderName":"Domenic","senderId":"Domenic@irc"}
]