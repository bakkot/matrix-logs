[
{"content":{"body":"jsbell: So, we really need a new, active editor for the File API spec","msgtype":"m.text"},"ts":1456965008000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"we've got open bugs and of course other specs depending on it","msgtype":"m.text"},"ts":1456965055000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hoping you might be able to help surface a new editor for it","msgtype":"m.text"},"ts":1456965101000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"maybe in consultation with slightlyoff","msgtype":"m.text"},"ts":1456965161000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"however y'all make the magic","msgtype":"m.text"},"ts":1456965203000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I'll see what we can wrangle.","msgtype":"m.text"},"ts":1456966082000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"can someone review my PR request for template element test? https://github.com/w3c/web-platform-tests/pull/2651","msgtype":"m.text"},"ts":1456966576000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"MikeSmith: out of curiosity, is the current spec hand-authored as it appears (i.e. not respec/bs, etc) ?","msgtype":"m.text"},"ts":1456966767000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"kinda looks like respec output...","msgtype":"m.text"},"ts":1456966801000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: I pushed a bikeshedded version a while ago.","msgtype":"m.text"},"ts":1456968629000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jsbell: There's a PR open that hasn't  been merged yet for it. :/","msgtype":"m.text"},"ts":1456968703000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Just two days of custom elements spec work and I am immensely sick of Respec's flash-of-losing-my-scroll-position","msgtype":"m.text"},"ts":1456971238000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yt?","msgtype":"m.text"},"ts":1456976155000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: yt?","msgtype":"m.text"},"ts":1456976159000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: yep","msgtype":"m.text"},"ts":1456976165000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: hi","msgtype":"m.text"},"ts":1456976167000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: we have one \"minor\" problem with regards to finding the right registry","msgtype":"m.text"},"ts":1456976181000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: when you create a document via DOMImplementation","msgtype":"m.text"},"ts":1456976196000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"hmmmm","msgtype":"m.text"},"ts":1456976214000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: and author calls defineElement on it","msgtype":"m.text"},"ts":1456976217000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: and HTMLElement's constructor is called in super()","msgtype":"m.text"},"ts":1456976226000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: the global object isn't associated with THAT document","msgtype":"m.text"},"ts":1456976239000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1456976240000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that is broken","msgtype":"m.text"},"ts":1456976243000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1456976273000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so i think each registration needs to store its document too?","msgtype":"m.text"},"ts":1456976281000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wait no that doesn't work","msgtype":"m.text"},"ts":1456976287000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"hmm maybe not best to think about this at the end of a long day","msgtype":"m.text"},"ts":1456976296000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"File the issue and we'll figure it out tomorrow?","msgtype":"m.text"},"ts":1456976302000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"This is tricky...","msgtype":"m.text"},"ts":1456976313000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I am not sure it is solvable","msgtype":"m.text"},"ts":1456976341000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"for the new CustomElement() case there's just no way to know","msgtype":"m.text"},"ts":1456976366000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: indeed.","msgtype":"m.text"},"ts":1456976586000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"this seems like a more general problem with non-1:1 document:windows","msgtype":"m.text"},"ts":1456976734000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"hello! is there a transform implemented in any major browser that would let me stream lines from a web request?","msgtype":"m.text"},"ts":1456976743000,"senderName":"pwf","senderId":"pwf@irc"},
{"content":{"body":"which I guess includes 1-window-2-documents for initial about:blank navigation","msgtype":"m.text"},"ts":1456976749000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: we don't even know what to do with document.createElement either","msgtype":"m.text"},"ts":1456976753000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"and 1-document-several-windows for document.open()","msgtype":"m.text"},"ts":1456976762000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: since you can create yourself with another document before calling super()","msgtype":"m.text"},"ts":1456976771000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"the streams spec looks like exactly what i want, but i don't know who's implemented the bits i want (or if there are any examples of it...)","msgtype":"m.text"},"ts":1456976778000,"senderName":"pwf","senderId":"pwf@irc"},
{"content":{"body":"pwf: Chrome has implemented streaming bodies. https://googlechrome.github.io/samples/fetch-api/fetch-response-stream.html https://jakearchibald.com/2016/streams-ftw/","msgtype":"m.text"},"ts":1456976835000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"rniwa: sure, but that's one of those \"don't do that\" scenarios I guess","msgtype":"m.text"},"ts":1456976850000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that's the article that led me here haha","msgtype":"m.text"},"ts":1456976850000,"senderName":"pwf","senderId":"pwf@irc"},
{"content":{"body":"Domenic: well, the problem is that people WILL do it","msgtype":"m.text"},"ts":1456976866000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: and we have to define the behavior","msgtype":"m.text"},"ts":1456976872000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"right, certainly","msgtype":"m.text"},"ts":1456976877000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it just might do something weird","msgtype":"m.text"},"ts":1456976881000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh wait, the 2015 one did! i haven't seen the 2016 one, thank you!","msgtype":"m.text"},"ts":1456976881000,"senderName":"pwf","senderId":"pwf@irc"},
{"content":{"body":"and i'm ok with that","msgtype":"m.text"},"ts":1456976884000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"new CustomElement() not working seems bad though","msgtype":"m.text"},"ts":1456976915000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: so I think we need to create in the global object's document and adopt it","msgtype":"m.text"},"ts":1456976916000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"i see","msgtype":"m.text"},"ts":1456976928000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: it's okay to do this because all prototype objects, etc... are the same","msgtype":"m.text"},"ts":1456976935000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: there is no issue of identify (e.g. misleading instanceof behavior)","msgtype":"m.text"},"ts":1456976960000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"i dunno i am starting to feel we should go back to not allowing implementation.createHTMLDocument()?","msgtype":"m.text"},"ts":1456976979000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: well, we need to solve this problem regardless if we ever wanted to allow custom registry","msgtype":"m.text"},"ts":1456977000000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"is there a list of the decoders/pipes already built into chrome Domenic? like one that grabs lines for me maybe?","msgtype":"m.text"},"ts":1456977006000,"senderName":"pwf","senderId":"pwf@irc"},
{"content":{"body":"pwf: nothing is built-in; you write your own","msgtype":"m.text"},"ts":1456977017000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i guess we could make it work but it seems bad that you do doc.defineElement(\"x-foo\", CE) and then new CE() always fails","msgtype":"m.text"},"ts":1456977030000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: no, CE() will work in that case","msgtype":"m.text"},"ts":1456977143000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"new CE()*","msgtype":"m.text"},"ts":1456977149000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"here doc = document.implementation.createHTMLDocument(). How will it work?","msgtype":"m.text"},"ts":1456977160000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: we just need not to throw TypeError in steps 3 and 4 of HTMLElement constructor","msgtype":"m.text"},"ts":1456977180000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: basically allow any constructor to call HTMLElement's constructor","msgtype":"m.text"},"ts":1456977191000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"hmmmm","msgtype":"m.text"},"ts":1456977202000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: as long as its [[Prototype]] eventually leads to HTMLElement","msgtype":"m.text"},"ts":1456977204000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"its=new.target","msgtype":"m.text"},"ts":1456977215000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: this would mean that you can do new (class extends HTMLElement{})","msgtype":"m.text"},"ts":1456977241000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: without ever calling defineElement though...","msgtype":"m.text"},"ts":1456977247000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"yeah what would that even give you","msgtype":"m.text"},"ts":1456977255000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"what is its tagname etc.","msgtype":"m.text"},"ts":1456977259000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh wait...","msgtype":"m.text"},"ts":1456977260000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"yeah, :(","msgtype":"m.text"},"ts":1456977263000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"we don't know the tag name","msgtype":"m.text"},"ts":1456977268000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"if we had a real HTMLElement constructor this would be solvable","msgtype":"m.text"},"ts":1456977284000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: actually, this was the reason my HTMLElement constructor took the tagname as an argument","msgtype":"m.text"},"ts":1456977313000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"https://github.com/domenic/element-constructors/blob/master/element-constructors.js#L113","msgtype":"m.text"},"ts":1456977314000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: but even if you did, it still woudln't work because you can't verify whether that tagname is associated with the particular interface or not","msgtype":"m.text"},"ts":1456977337000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"delegates to https://github.com/domenic/element-constructors/blob/master/element-constructors.js#L31","msgtype":"m.text"},"ts":1456977344000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: in particular, it's possible for super() call to be made with a \"wrong\" new.target","msgtype":"m.text"},"ts":1456977357000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"it needs a document argument too","msgtype":"m.text"},"ts":1456977359000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: and there will be no way of knowing that","msgtype":"m.text"},"ts":1456977364000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: I think the easiest thing to do will be accepting an optional document argument in HTMLElement's constructor","msgtype":"m.text"},"ts":1456977404000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: and make Construct call pass in the document","msgtype":"m.text"},"ts":1456977423000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: so that in common case, author can omit it","msgtype":"m.text"},"ts":1456977431000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: do you actually expect authors to write super({ document: some particular document }) though?","msgtype":"m.text"},"ts":1456977455000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: but if they wanted to, they can pass along document to support window-less document to create their own registry","msgtype":"m.text"},"ts":1456977455000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: ugh... it's not do another dictionary","msgtype":"m.text"},"ts":1456977468000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"hmm hmm","msgtype":"m.text"},"ts":1456977471000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: lets*","msgtype":"m.text"},"ts":1456977472000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: no, I'd expect authors to write","msgtype":"m.text"},"ts":1456977480000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"no please let's there's so many params, they need names","msgtype":"m.text"},"ts":1456977485000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"constructors(...args) { super(...args); ... }","msgtype":"m.text"},"ts":1456977488000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"i see","msgtype":"m.text"},"ts":1456977498000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I really don't want to use Dictionary here","msgtype":"m.text"},"ts":1456977512000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"why?","msgtype":"m.text"},"ts":1456977517000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: if anything, we should create an opaque object authors can't mess with it","msgtype":"m.text"},"ts":1456977529000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"this is classic dictionary stuff. a bunch of optional options.","msgtype":"m.text"},"ts":1456977529000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: performance","msgtype":"m.text"},"ts":1456977531000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"make a fast path for undefined?","msgtype":"m.text"},"ts":1456977544000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: no, I'd make them required if anything","msgtype":"m.text"},"ts":1456977548000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"that might be better","msgtype":"m.text"},"ts":1456977559000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I'd be strongly opposed to making this dictionary","msgtype":"m.text"},"ts":1456977560000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: well i'd be strongly opposed to it not being a dictionary","msgtype":"m.text"},"ts":1456977575000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: okay, so no argument to super()","msgtype":"m.text"},"ts":1456977585000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: let","msgtype":"m.text"},"ts":1456977588000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"let's not support multiple registries per window","msgtype":"m.text"},"ts":1456977597000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"SGTM :D","msgtype":"m.text"},"ts":1456977646000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: a funny thing is, the spec currently says that already LOL","msgtype":"m.text"},"ts":1456977830000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: https://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries","msgtype":"m.text"},"ts":1456977842000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: haha right, i guess so.","msgtype":"m.text"},"ts":1456977880000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"what's the buffer size on reader.read(),then(some_function)? i plan on abusing it like i would a websocket only without messing with websockets","msgtype":"m.text"},"ts":1456978112000,"senderName":"pwf","senderId":"pwf@irc"},
{"content":{"body":"in my testing it seems like i can just ignore the fact that a 'message'/'chunk'/whatever will end halfway through","msgtype":"m.text"},"ts":1456978134000,"senderName":"pwf","senderId":"pwf@irc"},
{"content":{"body":"Domenic: document.open replaces the global object!?","msgtype":"m.text"},"ts":1456978293000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: or did you mean window.open?","msgtype":"m.text"},"ts":1456978327000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: nope, document.open","msgtype":"m.text"},"ts":1456978550000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"rniwa: it kind of tears down the document, then creates a new window, and sets that window's document to the document being document.open()ed","msgtype":"m.text"},"ts":1456978591000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://html.spec.whatwg.org/#dom-document-open","msgtype":"m.text"},"ts":1456978604000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ok it turns out ignoring buffer size on read did indeed bite me...","msgtype":"m.text"},"ts":1456978625000,"senderName":"pwf","senderId":"pwf@irc"},
{"content":{"body":"pwf: the buffer size is \"however many bytes network conditions dictate\". You shouldn't rely on it.","msgtype":"m.text"},"ts":1456978645000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"{\"image\": \"images/test_50.png\", \"iteration\": \"50\"}","msgtype":"m.text"},"ts":1456978692000,"senderName":"pwf","senderId":"pwf@irc"},
{"content":{"body":"poop.html:15 Uncaught (in promise) SyntaxError: Unexpected token o","msgtype":"m.text"},"ts":1456978692000,"senderName":"pwf","senderId":"pwf@irc"},
{"content":{"body":"errr... ignore my filename","msgtype":"m.text"},"ts":1456978698000,"senderName":"pwf","senderId":"pwf@irc"},
{"content":{"body":"why did console.log get a full json object but i couldn't decode it?","msgtype":"m.text"},"ts":1456978747000,"senderName":"pwf","senderId":"pwf@irc"},
{"content":{"body":"ohh... i'm using result instead of the return value of decoder.decode","msgtype":"m.text"},"ts":1456978970000,"senderName":"pwf","senderId":"pwf@irc"},
{"content":{"body":"Domenic: it seems that the corollary of that discussion is that we also need to disallow defineElement on template.content","msgtype":"m.text"},"ts":1456985575000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: because we're going to face the same issue","msgtype":"m.text"},"ts":1456985583000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: yeah, that's a different document too so falls out naturally","msgtype":"m.text"},"ts":1456985992000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rniwa: this was bz's concern with new Text and such, there we simply pick a document from a global","msgtype":"m.text"},"ts":1456986056000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, now I remember that discussion","msgtype":"m.text"},"ts":1456986074000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: it's funny how we keep re-discovering the same problem :(","msgtype":"m.text"},"ts":1456986085000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"one of these days, i'm gonna improve my long term memory...","msgtype":"m.text"},"ts":1456986102000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: I'm surprised actually that it took until now for this to become really clear","msgtype":"m.text"},"ts":1456986146000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rniwa: should have been clear to custom elements folks long ago I'd think and documented","msgtype":"m.text"},"ts":1456986184000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think the problem is that people who worked on v0 aren't actively participating in this discussion","msgtype":"m.text"},"ts":1456986270000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Seems likely, but v0 never worked this through either I think","msgtype":"m.text"},"ts":1456987962000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh yes, someone else is removing CanvasProxy \\o/","msgtype":"m.text"},"ts":1456992302000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gah someone please fix svg favicons, i can't find the html standard among my open tabs anymore :-(","msgtype":"m.text"},"ts":1456995843000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"wonders if he can convince someone else to review some new URL tests","msgtype":"m.emote"},"ts":1456996915000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: use Firefox?","msgtype":"m.text"},"ts":1456996925000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, or I could use Opera 12 :-)","msgtype":"m.text"},"ts":1456996981000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: I see you value your security","msgtype":"m.text"},"ts":1456997036000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yep, i use passwords that are hard to remember!","msgtype":"m.text"},"ts":1456997193000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"(true story)","msgtype":"m.text"},"ts":1456997219000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"what do you guys think about the react trend? i feel like it's trying to hide people from DOM. with react, every change to DOM should go through the vdom. i don't think every kind of ui can be expressed by vdom, and it's pretty awkward too when it comes to animations. why browsers can't offer a declarative api and figure our the minimal dom change? i think that's the core value of react.","msgtype":"m.text"},"ts":1457003651000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"hgl: it's not that simply, unfortunately","msgtype":"m.text"},"ts":1457003751000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: care to explain some details? tree comparison is too expensive for browsers to do?","msgtype":"m.text"},"ts":1457003790000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"hgl: the diffing is not really the important thing","msgtype":"m.text"},"ts":1457003821000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hgl: the important thing is that react uses DOM as a render step","msgtype":"m.text"},"ts":1457003838000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hgl: so they only change the DOM when they want to render","msgtype":"m.text"},"ts":1457003859000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hgl: providing more control over when rendering happens, or maybe having some kind of batching thing for DOM mutations, might help, but it's tricky to unravel all that","msgtype":"m.text"},"ts":1457003910000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, i don't quite understand what you mean by using DOM as a render step? if node provide an api like, node.render(template), where template is the template element containing the final node structure and browser will figure out the minimal steps to render the children of node, and people only call it when they want to \"render\", isn't it the same thing as react?","msgtype":"m.text"},"ts":1457004087000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"I don't see how that would solve any of the problems","msgtype":"m.text"},"ts":1457004247000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Unless you don't care about the DOM as the source of truth","msgtype":"m.text"},"ts":1457004264000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"maybe i didn't look at react/dom from a right angle, but for me, the advantage of react is i don't have to do the imperative steps to bring DOM to a structure i want. with react, i just tell it the structure i want, and it'll figure all the imperative steps for me. i thoughts this tedious process was that react tried to solve?","msgtype":"m.text"},"ts":1457004402000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"(being a non-native speaker, i miss the ability to edit my messages in slack :)","msgtype":"m.text"},"ts":1457004467000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"put it another way, i see react as a mapping engine that maps data to dom structure. i specify the mapping, and give it the data, i get correct dom structure out.","msgtype":"m.text"},"ts":1457004758000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"The problem with not treating the DOM as the source of truth but some parallel object model is that any references to DOM objects get destroyed, updates to DOM objects might get lost, state in DOM objects might get lost, etc.","msgtype":"m.text"},"ts":1457004769000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"There's this mantra around react that updating DOM is expensive, but what's expensive is layout, not the DOM, that's just a data structure","msgtype":"m.text"},"ts":1457004839000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, that's exactly why i want browsers to have such api, so they can use real DOM as the \"parallel object model\", i hate this parallel object model (vdom) from react...","msgtype":"m.text"},"ts":1457004904000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"How would that API work?","msgtype":"m.text"},"ts":1457004967000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"What is 'template'?","msgtype":"m.text"},"ts":1457004977000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"because i can no longer touch dom myself... all changes i want to make, i need to go though this parallel object","msgtype":"m.text"},"ts":1457004989000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"How do you enforce you didn't touch DOM yourself?","msgtype":"m.text"},"ts":1457005003000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"umm, something like <template><div></div></template>?","msgtype":"m.text"},"ts":1457005019000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"That's still DOM?","msgtype":"m.text"},"ts":1457005032000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"yes, like your put this string in html, ask browsers to turn it into dom, then pass the template element to node.render(template)","msgtype":"m.text"},"ts":1457005069000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"the point of making browsers to have this API, is that i hope i can mix and match declarative & imperative ways to manipulate DOM","msgtype":"m.text"},"ts":1457005105000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"I don't get the advantage over just using the DOM in that template.","msgtype":"m.text"},"ts":1457005129000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":" annevk: Mmmh, I'm confused, is \"replace all with node within a parent\" actually bound to any DOM method?","msgtype":"m.text"},"ts":1457005278000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: innerHTML","msgtype":"m.text"},"ts":1457005296000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ah.","msgtype":"m.text"},"ts":1457005303000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: textContent","msgtype":"m.text"},"ts":1457005305000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Was looking for innerHTML.","msgtype":"m.text"},"ts":1457005319000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: Couldn't find a case in the DOM spec where the DocumentFragment case was used.","msgtype":"m.text"},"ts":1457005329000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: innerHTML is the DocumentFragment case","msgtype":"m.text"},"ts":1457005330000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1457005333000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1457005334000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox, oh, do you mean i should just do node.textContent = ''; node.appendChild(template.childNode[0])?","msgtype":"m.text"},"ts":1457005347000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"annevk: Was wondering if hgl would be satistfied by a node.replaceAllChildren(template.cloneNode(true)).","msgtype":"m.text"},"ts":1457005365000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Well, not template, but the document fragment inside.","msgtype":"m.text"},"ts":1457005377000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"hgl: Anyway, I don't see what your proposal avoids.","msgtype":"m.text"},"ts":1457005401000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"It's still the DOM, you can still access it in many ways, etc.","msgtype":"m.text"},"ts":1457005418000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"i see what you mean...","msgtype":"m.text"},"ts":1457005482000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"maybe i should put it this way","msgtype":"m.text"},"ts":1457005489000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"i'd like template element to let me insert data declaratively... <template><div>{obj.prop}</div></template>","msgtype":"m.text"},"ts":1457005534000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"Sounds like you want slots and things like that.","msgtype":"m.text"},"ts":1457005562000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"currently if you want a template to contain data, the imperative steps to fill it can be huge","msgtype":"m.text"},"ts":1457005581000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"wow, slots? it already supports something like that?","msgtype":"m.text"},"ts":1457005599000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"hgl: https://webkit.org/blog/4096/introducing-shadow-dom-api/","msgtype":"m.text"},"ts":1457005605000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"does a spec exist?","msgtype":"m.text"},"ts":1457005606000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"No idea what the status of this is, I'm a newcomer around here.","msgtype":"m.text"},"ts":1457005634000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"It's at the point where we've done the first 80% and are now figuring out the remaining 80%","msgtype":"m.text"},"ts":1457005686000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"first 80% and remaining 80%..... what happened...","msgtype":"m.text"},"ts":1457005714000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"nox, annevk, slots look like what i wanted, very cool, thank for letting me know...","msgtype":"m.text"},"ts":1457006005000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"JakeA: https://twitter.com/jaffathecake/status/705355715414781953 is pretty compelling","msgtype":"m.text"},"ts":1457006360000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"agreed, as more elements are added to that demo, Servo hits a JS bottleneck way before paint","msgtype":"m.text"},"ts":1457006400000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Yeah, the main problem with servo is the sheer amount of junk you need to make a web browser these days","msgtype":"m.text"},"ts":1457006479000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"With Chrome's GPU renderer (which isn't the one I used in the recording), its GPU stuff is the bottle neck. Lack of batching I think.","msgtype":"m.text"},"ts":1457006481000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"It's about time layout get its \"order of magnitude\" improvement now JavaScript has had several of those","msgtype":"m.text"},"ts":1457006481000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well this is paint rather than layout","msgtype":"m.text"},"ts":1457006507000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Ah true, I just group all of those together usually","msgtype":"m.text"},"ts":1457006529000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Right, WR doesn't make layout fast, it makes paint fast. Parellel layout should help with layout","msgtype":"m.text"},"ts":1457006537000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Which ofc Servo already has","msgtype":"m.text"},"ts":1457006544000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"It just doesn't have things like correct implementations of Location","msgtype":"m.text"},"ts":1457006565000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Or form controls that don't suck","msgtype":"m.text"},"ts":1457006576000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"*parallel","msgtype":"m.text"},"ts":1457006587000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"it breaks loads of rendering too, but it's early days","msgtype":"m.text"},"ts":1457006617000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: Lol @ 80%.","msgtype":"m.text"},"ts":1457006648000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"hgl: 80% + 80% is 100% when you take into account that channel's topic.","msgtype":"m.text"},"ts":1457006663000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"My demo is pretty kind to Servo as it uses CSS that it doesn't mess up","msgtype":"m.text"},"ts":1457006682000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"nox, sorry, still don't quite understand, \"that channel's topic\"?","msgtype":"m.text"},"ts":1457006754000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"hgl: \"#whatwg https://whatwg.org/ — logs: http://krijnhoetmer.nl/irc-logs/ & http://logbot.glob.com.au/ — stats:  http://gavinsharp.com/irc/whatwg.html — Please leave your sense of logic at the door, thanks!\"","msgtype":"m.text"},"ts":1457006768000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"My impression has been that it's relatively better at CSS-derived stuff than at DOM-derived stuff, although there have been shifts in the contributors since I formed that opinion such that it may no longer be the case","msgtype":"m.text"},"ts":1457006788000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"nox, ok, lol","msgtype":"m.text"},"ts":1457006804000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"jgraham: We have improved many performance bottlenecks in DOM, but there are still many.","msgtype":"m.text"},"ts":1457006829000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: Not just performance but missing features","msgtype":"m.text"},"ts":1457006843000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: That too. :D","msgtype":"m.text"},"ts":1457006851000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"But yeah, I guess it's also true that it doesn't yet have world-beating DOM performance","msgtype":"m.text"},"ts":1457006862000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: contentWindow, document.write, NodeIterator, CSSOM…","msgtype":"m.text"},"ts":1457006866000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"MutationObserver.","msgtype":"m.text"},"ts":1457006876000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Well, quite","msgtype":"m.text"},"ts":1457006880000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Basically every complex part is left as an exercice to the reader. :P","msgtype":"m.text"},"ts":1457006888000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"a quick question, why no browsers have implemented the nice node.closest() node.query() apis?","msgtype":"m.text"},"ts":1457006894000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"hgl: Because it requires a specific part of CSS selectors 4,","msgtype":"m.text"},"ts":1457006914000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"hgl: namely scoped selectors.","msgtype":"m.text"},"ts":1457006919000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox, i see, thx","msgtype":"m.text"},"ts":1457007028000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"hgl: I started a branch for css4 stuff in rust-selectors, but days are 24 hours long.","msgtype":"m.text"},"ts":1457007058000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox, what about append & prepend ? those don't need selectors 4 i think?","msgtype":"m.text"},"ts":1457007085000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"nox, you contribute to rust? thank for you hard work....","msgtype":"m.text"},"ts":1457007126000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"hgl: Servo supports them, that's all I know. :P","msgtype":"m.text"},"ts":1457007130000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"hgl: Servo contributor, starting at Mozilla in two weeks. :)","msgtype":"m.text"},"ts":1457007147000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"awesome!","msgtype":"m.text"},"ts":1457007168000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"I mostly do DOM stuff and Ms2ger is trying to coerce me into spec editing.","msgtype":"m.text"},"ts":1457007171000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"wonder if firefox is ever going to replace gecko with servo. :)","msgtype":"m.text"},"ts":1457007205000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"hgl: https://wiki.mozilla.org/Oxidation","msgtype":"m.text"},"ts":1457007216000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"good naming :)","msgtype":"m.text"},"ts":1457007309000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"agreed :)","msgtype":"m.text"},"ts":1457007331000,"senderName":"hgl","senderId":"hgl@irc"},
{"content":{"body":"As long as no one calls that nox, I will be happy.","msgtype":"m.text"},"ts":1457007335000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"already gets highlighted enough whenever someone mentions some headless Debian package.","msgtype":"m.emote"},"ts":1457007354000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: https://github.com/w3c/webcomponents/issues/369#issuecomment-191572976 \"That means either sharing the registry with the parent (per the current spec) or just saying that they have no registry\" does the latter mean that custom elements wouldn't work in iframes?","msgtype":"m.text"},"ts":1457010608000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: it depends on where you create them","msgtype":"m.text"},"ts":1457010711000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It depends on what they extends actually","msgtype":"m.text"},"ts":1457010953000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"class extends iframe.contentWindow.HTMLElement vs. class extends window.HTMLElement","msgtype":"m.text"},"ts":1457011038000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Maybe the constructor folk would have put the constructors on document instances","msgtype":"m.text"},"ts":1457011105000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"new document.HTMLAudioElement()","msgtype":"m.text"},"ts":1457011121000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Could win.defineElement set a symbol on the class setting the default document?","msgtype":"m.text"},"ts":1457011820000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"new MyCustomEl() would throw if that symbol wasn't set","msgtype":"m.text"},"ts":1457011880000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"What's wrong with keeping them on the global?","msgtype":"m.text"},"ts":1457011946000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Shouldn't they rather behave like proper ES classes?","msgtype":"m.text"},"ts":1457011954000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: document.createElement know which document to create the elements for","msgtype":"m.text"},"ts":1457011981000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"nox: new Whatever() doesn't","msgtype":"m.text"},"ts":1457011986000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"So use document.createElement and don't mess with putting interface objects in the middle of nowhere, no?","msgtype":"m.text"},"ts":1457012007000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"JakeA: I could also just read the thread and shut up.","msgtype":"m.text"},"ts":1457012136000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"JakeA: sure, that is one design, is maintaining a global cross-realm mapping table of class instances to documents","msgtype":"m.text"},"ts":1457013108000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess we should mention it","msgtype":"m.text"},"ts":1457013119000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Cross-realm seems like a bad mismatch with JavaScript","msgtype":"m.text"},"ts":1457014967000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, are there plans to pull CSP monkeypatches into HTML?","msgtype":"m.text"},"ts":1457015564000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"https://github.com/whatwg/html/issues/271","msgtype":"m.text"},"ts":1457016458000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: mkwst usually takes care of that","msgtype":"m.text"},"ts":1457017153000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah. But he's a bit unreliable.","msgtype":"m.text"},"ts":1457017207000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"I think there are still a few things missing from HTML and Fetch, but I haven't written them yet.","msgtype":"m.text"},"ts":1457017244000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst, fyi, I filed https://github.com/tc39/ecma262/issues/450","msgtype":"m.text"},"ts":1457017560000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: thank you.","msgtype":"m.text"},"ts":1457017653000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Domenic, thanks","msgtype":"m.text"},"ts":1457018066000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Seriously, what a jerk","msgtype":"m.text"},"ts":1457018098000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"@jspedant","msgtype":"m.text"},"ts":1457018235000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Appropriate handle","msgtype":"m.text"},"ts":1457018238000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"At risk of being pedantic, it's not, since he was wrong","msgtype":"m.text"},"ts":1457018292000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(Also, no way in hell I'm going to subscribe to es-discuss)","msgtype":"m.text"},"ts":1457018420000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"literal loling going on here, jgraham","msgtype":"m.text"},"ts":1457018422000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"mkwst: what does CSP do to eval and Function? They always throw a TypeError?","msgtype":"m.text"},"ts":1457019373000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If anyone has a test CSP page that'd be helpful.","msgtype":"m.text"},"ts":1457019384000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"lol in Firefox it throws an Error","msgtype":"m.text"},"ts":1457019473000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess this is entirely underspecified","msgtype":"m.text"},"ts":1457019479000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so I will just let hosts do what they want","msgtype":"m.text"},"ts":1457019486000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"154 MSG_DEF(JSMSG_CSP_BLOCKED_EVAL,        0, JSEXN_ERR, \"call to eval() blocked by CSP\")","msgtype":"m.text"},"ts":1457019717000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"155 MSG_DEF(JSMSG_CSP_BLOCKED_FUNCTION,    0, JSEXN_ERR, \"call to Function() blocked by CSP\")","msgtype":"m.text"},"ts":1457019718000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I imagine we'd be willing to change that to a TypeError","msgtype":"m.text"},"ts":1457019734000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I will let the CSP spec define it","msgtype":"m.text"},"ts":1457019744000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Instead of having the hook return true/false and having ES define it's a TypeError","msgtype":"m.text"},"ts":1457019757000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wfm either way","msgtype":"m.text"},"ts":1457019788000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"The latter is closer to what SpiderMonkey does, but eh","msgtype":"m.text"},"ts":1457019808000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Domenic: https://www.w3.org/TR/CSP2/#directive-script-src","msgtype":"m.text"},"ts":1457019832000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: I was looking at CSP4.","msgtype":"m.text"},"ts":1457019855000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"CSP2 waved its hands around the question, and I haven't written the relevant bits of CSP3 yet.","msgtype":"m.text"},"ts":1457019856000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"If you have a copy of CSP4, send it over, please.","msgtype":"m.text"},"ts":1457019870000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"I'd like to skip a few years of mistakes. :)","msgtype":"m.text"},"ts":1457019875000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"lol 3 i guess","msgtype":"m.text"},"ts":1457019891000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"mkwst: what should we do if you do someOtherFrame.eval() from within a CSPed frame","msgtype":"m.text"},"ts":1457019902000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"1. Why do people do these things.","msgtype":"m.text"},"ts":1457019917000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"to get around CSP I guess :P","msgtype":"m.text"},"ts":1457019931000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"2. We can either take the caller's CSP into account, or the callee's CSP into account.","msgtype":"m.text"},"ts":1457019938000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"or both!?!","msgtype":"m.text"},"ts":1457019949000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I don't have strong opinions, but I think I'd lean towards the former.","msgtype":"m.text"},"ts":1457019957000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Or both, I guess. But that sounds like work.","msgtype":"m.text"},"ts":1457019969000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"caller sounds simpler","msgtype":"m.text"},"ts":1457019969000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I will pass both to be explicit","msgtype":"m.text"},"ts":1457019973000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That way if CSP explicitly ignores one that's clear","msgtype":"m.text"},"ts":1457019980000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Sounds reasonable.","msgtype":"m.text"},"ts":1457019987000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Domenic, fwiw, SM looks at the global of the callee, so I guess that would get around csp","msgtype":"m.text"},"ts":1457020635000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Won't it be good to have this all specified nicely ;)","msgtype":"m.text"},"ts":1457020654000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hoping for a future without COMEFROM :)","msgtype":"m.text"},"ts":1457020713000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"And thanks for picking it up so quickly","msgtype":"m.text"},"ts":1457020728000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"honestly i wouldn't have done so if this guy hadn't been a jerk about it :P","msgtype":"m.text"},"ts":1457020827000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":":D","msgtype":"m.text"},"ts":1457020888000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"He wasn't very friendly either about my blacklist/whitelist PR :/","msgtype":"m.text"},"ts":1457020907000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Some people","msgtype":"m.text"},"ts":1457020920000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"he's not very friendly in meetings either, by total coincidence","msgtype":"m.text"},"ts":1457021084000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: The thread scares me.","msgtype":"m.text"},"ts":1457023028000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: which? HTMLAll?","msgtype":"m.text"},"ts":1457023043000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Would be nice for someone to write some summary of it.","msgtype":"m.text"},"ts":1457023045000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic: Document.all","msgtype":"m.text"},"ts":1457023048000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I saw \"0x0\" and it was scary.","msgtype":"m.text"},"ts":1457023073000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1457023107000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"great times","msgtype":"m.text"},"ts":1457023108000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i have tried to keep the jsbin and PR updated","msgtype":"m.text"},"ts":1457023116000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I guess we could keep unsigned long or DOMString,","msgtype":"m.text"},"ts":1457023185000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic: but then we still have to check the string.","msgtype":"m.text"},"ts":1457023190000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"But it could make the TypeScript people happier, I don't know.","msgtype":"m.text"},"ts":1457023200000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: that is what we do","msgtype":"m.text"},"ts":1457023202000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"in the PR","msgtype":"m.text"},"ts":1457023207000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"nox: https://github.com/whatwg/html/pull/780/files#diff-36cd38f49b9afa08222c0dc9ebfe35ebR7095","msgtype":"m.text"},"ts":1457023220000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ok so I'm like, very late at the party?","msgtype":"m.text"},"ts":1457023221000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I saw that but I thought it was still being discussed.","msgtype":"m.text"},"ts":1457023232000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"haha ok :P","msgtype":"m.text"},"ts":1457023242000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Not sure I'd call document.all a party","msgtype":"m.text"},"ts":1457023275000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: is your \"Given the binding of WebIDL union types to ECMAScript values:\" saying that conversions to strings are performed before conversions to numeric types?","msgtype":"m.text"},"ts":1457023327000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Yes.","msgtype":"m.text"},"ts":1457023341000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"It's like a party where the host was already drunk and all the guests have spent the whole night trying to avoid stepping in the vomit","msgtype":"m.text"},"ts":1457023343000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Domenic: Is that bad?","msgtype":"m.text"},"ts":1457023350000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: ok so it's still a good idea to get rid of unsigned long since it's pointless","msgtype":"m.text"},"ts":1457023356000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Mmh.","msgtype":"m.text"},"ts":1457023363000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"What if I have an arbitrary object,","msgtype":"m.text"},"ts":1457023368000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"that stringifies as \"0\",","msgtype":"m.text"},"ts":1457023373000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"is that DOMString or unsigned long for the insane current implementations of Document.all?","msgtype":"m.text"},"ts":1457023387000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic: I'm afraid the TypeScript people are going to complain about document.all(0) not being correctly typed.","msgtype":"m.text"},"ts":1457023443000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: they can write their own spec","msgtype":"m.text"},"ts":1457023453000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ah ah.","msgtype":"m.text"},"ts":1457023457000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic: Also, no idea why you would use ugly historical APIs from fancy TypeScript","msgtype":"m.text"},"ts":1457023481000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"it seems like Edge has some kind of pipeline where alongside updating IDL files you must also update .d.ts files that they ship with Visual Studio or something","msgtype":"m.text"},"ts":1457023511000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Sorry, you misunderstood me.","msgtype":"m.text"},"ts":1457023589000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic: My quote was only about string values.","msgtype":"m.text"},"ts":1457023599000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Let me put the step just before in a new comment.","msgtype":"m.text"},"ts":1457023609000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: oh I see","msgtype":"m.text"},"ts":1457023708000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so the step is still kind of pointless since it's normatively the same to just treat everything as a string, but at least it's not dead code","msgtype":"m.text"},"ts":1457023737000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"well it's maybe not the same","msgtype":"m.text"},"ts":1457023750000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"{ toString() { return \"42\"; } valueOf() { return 43; } }","msgtype":"m.text"},"ts":1457023764000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Ugh. :(","msgtype":"m.text"},"ts":1457023775000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic: Are you sure it's not 42 with the current code?","msgtype":"m.text"},"ts":1457023944000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: oh you're right","msgtype":"m.text"},"ts":1457023988000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: And it would be the same with just DOMString AFAICT.","msgtype":"m.text"},"ts":1457024008000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic: I have no idea what browsers do though anyway.","msgtype":"m.text"},"ts":1457024040000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic: document.all(({ 'toString': function () { return \"1\"; }, 'valueOf': function () { return 0; } })) returns <head> in Safari.","msgtype":"m.text"},"ts":1457024259000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"good!","msgtype":"m.text"},"ts":1457024297000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Anyway, Real Life is calling, see you later maybe.","msgtype":"m.text"},"ts":1457024419000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"i remember real life...","msgtype":"m.text"},"ts":1457024445000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"before my life was consumed by document.all","msgtype":"m.text"},"ts":1457024452000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Likewise","msgtype":"m.text"},"ts":1457024463000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Domenic: do we want https://www.w3.org/Bugs/Public/show_bug.cgi?id=28566 still?","msgtype":"m.text"},"ts":1457025784000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yes, I think authors would really appreciate it","msgtype":"m.text"},"ts":1457025839000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"at least, as long as implementers think it's OK","msgtype":"m.text"},"ts":1457025858000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"clone = global.structuredClone(value, transfer = [])","msgtype":"m.text"},"ts":1457025883000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"or do we also want to expose the transferList? Hmm","msgtype":"m.text"},"ts":1457025893000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1457025894000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"We could move it to GitHub and ask authors for use cases + browser vendors for \"will you implement this\"","msgtype":"m.text"},"ts":1457025907000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Will do once I figure out what the return value should be","msgtype":"m.text"},"ts":1457025928000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Okay, we don't need [[TransferList]] since that is only for ports and those are only useful if you actually go elsewhere with this","msgtype":"m.text"},"ts":1457026074000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Does anyone else get \"You signed in with another tab or window. Reload to refresh your session.\" a lot on GitHub?","msgtype":"m.text"},"ts":1457027600000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Why can't they just make it work","msgtype":"m.text"},"ts":1457027613000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: i don't think i've seen that one :/","msgtype":"m.text"},"ts":1457027899000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"Domenic: Please double check that 2^32 value, we never know. :P","msgtype":"m.text"},"ts":1457027904000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"i know karl gets strange github errors i've never seen (from japan)","msgtype":"m.text"},"ts":1457027929000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"annevk: Domenic: once the custom element constructor thing is solved, does that enable new HTMLDivElement() etc?","msgtype":"m.text"},"ts":1457029023000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: we could have HTMLDivElement() if we wanted to","msgtype":"m.text"},"ts":1457029090000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: it might be slightly better if we first decide if there are any required arguments I suppose, but I don't think there should be","msgtype":"m.text"},"ts":1457029135000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I thought there were different elements that share the same constructor, but can't remember what they were","msgtype":"m.text"},"ts":1457029176000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"If there are some, maybe tag name is an optional arg","msgtype":"m.text"},"ts":1457029198000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: ah yes, I think we should stop that, if we can","msgtype":"m.text"},"ts":1457029201000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: just give each element a class","msgtype":"m.text"},"ts":1457029210000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, that's a better solution","msgtype":"m.text"},"ts":1457029220000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I'm a little worried about compat, but hopefully it's fine","msgtype":"m.text"},"ts":1457029235000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"This hasn't really come up lately since nobody has been asking about it","msgtype":"m.text"},"ts":1457029250000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I've also wondered what happened to your promise state proposal, of adding that to most things","msgtype":"m.text"},"ts":1457029275000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ohhh the .ready stuff? Yeah, that would be nice too. If I run into some more time I should do a PR","msgtype":"m.text"},"ts":1457029387000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yeah, would love that","msgtype":"m.text"},"ts":1457029711000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"has anyone in the \"remove appCache\" camp thought about what happens to code calling methods or props on window.applicationCache?","msgtype":"m.text"},"ts":1457030864000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"(https://bugzilla.mozilla.org/show_bug.cgi?id=1252860#c1)","msgtype":"m.text"},"ts":1457030880000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"miketaylr: not really","msgtype":"m.text"},"ts":1457031703000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: only one way to find out...","msgtype":"m.text"},"ts":1457031753000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"miketaylr: could make them all no-op","msgtype":"m.text"},"ts":1457031791000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"miketaylr: if problematic","msgtype":"m.text"},"ts":1457031803000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"window.applicationCache.toString() == [object DoucheBag]","msgtype":"m.text"},"ts":1457031827000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"annevk: yeah, i'll keep investigating to see how big a problem it will be","msgtype":"m.text"},"ts":1457031839000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1457031868000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"does anybody know if PromiseResolver removed from https://dom.spec.whatwg.org/?  https://developer.mozilla.org/en-US/docs/Web/API/PromiseResolver links to https://dom.spec.whatwg.org/#promiseresolver but that <a name> no longer exists (nor is \"PromiseResolver\" in that document)","msgtype":"m.text"},"ts":1457034880000,"senderName":"danbeam","senderId":"danbeam@irc"},
{"content":{"body":"if PromiseResolver was removed from*","msgtype":"m.text"},"ts":1457034891000,"senderName":"danbeam","senderId":"danbeam@irc"},
{"content":{"body":"annevk: ^","msgtype":"m.text"},"ts":1457034913000,"senderName":"danbeam","senderId":"danbeam@irc"},
{"content":{"body":"danbeam: promises are defined in ECMAScript these days","msgtype":"m.text"},"ts":1457034967000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok, will poke around there","msgtype":"m.text"},"ts":1457034989000,"senderName":"danbeam","senderId":"danbeam@irc"},
{"content":{"body":"annevk: thx","msgtype":"m.text"},"ts":1457034992000,"senderName":"danbeam","senderId":"danbeam@irc"},
{"content":{"body":"danbeam: that page can prolly be removed","msgtype":"m.text"},"ts":1457035016000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, was wondering who to bother about that","msgtype":"m.text"},"ts":1457035024000,"senderName":"danbeam","senderId":"danbeam@irc"},
{"content":{"body":"annevk: i suppose i can do it myself and see if I have access / who screams","msgtype":"m.text"},"ts":1457035037000,"senderName":"danbeam","senderId":"danbeam@irc"},
{"content":{"body":"danbeam: yeah, teoli is my goto MDN contact","msgtype":"m.text"},"ts":1457035071000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"danbeam: but with wikis you can just go ahead and answer questions later 😀","msgtype":"m.text"},"ts":1457035109000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: in trying to edit i've struck out 3 times with github oauth / persona, requires authentication at least","msgtype":"m.text"},"ts":1457035153000,"senderName":"danbeam","senderId":"danbeam@irc"},
{"content":{"body":"teoli is a previous editor","msgtype":"m.text"},"ts":1457035169000,"senderName":"danbeam","senderId":"danbeam@irc"},
{"content":{"body":"danbeam: aww bummer, cannot help with that, ask on #mdn on Moziila IRC","msgtype":"m.text"},"ts":1457035378000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: can't believe I didn't think of it before, but we should do s/IDL-defined object/Platform object/","msgtype":"m.text"},"ts":1457038705000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: maybe tomorrow","msgtype":"m.text"},"ts":1457038724000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: document.all(4294967296)   // looks up the element at index 0  - does this match any browser?","msgtype":"m.text"},"ts":1457039095000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i might actually start to use document.all(0) instead of document.documentElement, i always manage to make a typo in the latter :-)","msgtype":"m.text"},"ts":1457039380000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Domenic: hi","msgtype":"m.text"},"ts":1457040015000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: hi","msgtype":"m.text"},"ts":1457040023000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: so it turns out that sharing registry with window-less documents won't work","msgtype":"m.text"},"ts":1457040085000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: Because even in that case, HTMLElement constructor can't figure out to which document it belongs","msgtype":"m.text"},"ts":1457040102000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: so you end up creating a document in window.document","msgtype":"m.text"},"ts":1457040166000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: it just looks up the HTMLElement constructor's window's active document","msgtype":"m.text"},"ts":1457040167000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: and adopting it","msgtype":"m.text"},"ts":1457040171000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"which if the registry is shared, will have all the same entries as the createElement() ones","msgtype":"m.text"},"ts":1457040192000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"*createDocument()","msgtype":"m.text"},"ts":1457040196000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: but then ownerDocument will be wrong initially and it would be observable in the custom element's constructor","msgtype":"m.text"},"ts":1457040286000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Ah I see","msgtype":"m.text"},"ts":1457040320000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ownerDocument as the problem, not just the registry","msgtype":"m.text"},"ts":1457040327000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: since I really don't want to punish the common case by forcing authors to specify document","msgtype":"m.text"},"ts":1457040378000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Just disallow it in documents without associated windows?","msgtype":"m.text"},"ts":1457040384000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: and you guys don't want to make document optional","msgtype":"m.text"},"ts":1457040389000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: we just need to disallow in window-less documents","msgtype":"m.text"},"ts":1457040396000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"sounds good to me","msgtype":"m.text"},"ts":1457040408000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"thanks for discovering all the edge cases first","msgtype":"m.text"},"ts":1457040439000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: nope, I had to talk with my colleagues about this anyway","msgtype":"m.text"},"ts":1457040522000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: a WebKit patch is forthcoming ;) https://bugs.webkit.org/show_bug.cgi?id=154944","msgtype":"m.text"},"ts":1457041933000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"hi, I submitted a PR to some tests on DOMMatrix, but the build failed in a way that looks like it needs to just be retried","msgtype":"m.text"},"ts":1457043423000,"senderName":"peterjoel","senderId":"peterjoel@irc"},
{"content":{"body":"https://github.com/w3c/csswg-test/pull/1060","msgtype":"m.text"},"ts":1457043424000,"senderName":"peterjoel","senderId":"peterjoel@irc"},
{"content":{"body":"https://travis-ci.org/w3c/csswg-test/builds/113513577#L318","msgtype":"m.text"},"ts":1457043450000,"senderName":"peterjoel","senderId":"peterjoel@irc"},
{"content":{"body":"“No output has been received in the last 10 minutes, this potentially indicates a stalled build or something wrong with the build itself.”","msgtype":"m.text"},"ts":1457043466000,"senderName":"peterjoel","senderId":"peterjoel@irc"},
{"content":{"body":"Also, I need to create new tests for DOMMatrix and DOMMatrixReadOnly. Shall I just make PRs?","msgtype":"m.text"},"ts":1457043732000,"senderName":"peterjoel","senderId":"peterjoel@irc"}
]