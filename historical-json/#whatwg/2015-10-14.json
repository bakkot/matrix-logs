[
{"content":{"body":"Nobody wants to review https://github.com/whatwg/html/pull/244 ? ;_;","msgtype":"m.text"},"ts":1444838441000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: i'm always :+1: for removing dead code","msgtype":"m.text"},"ts":1444839443000,"senderName":"terinjokes","senderId":"terinjokes@irc"},
{"content":{"body":"Domenic: I thought you wanted to add more things to it","msgtype":"m.text"},"ts":1444840632000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: was \"but there are still things to do\" not meant as an indication you were going to update the PR?","msgtype":"m.text"},"ts":1444840656000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: oh, no, some time soon I might do the rest, but those two stand alone for now.","msgtype":"m.text"},"ts":1444840662000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: some command concepts remaining seemed a bit confusing, but I think overall it was fine","msgtype":"m.text"},"ts":1444840692000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: so... LGTM","msgtype":"m.text"},"ts":1444840745000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1444840755000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: will you rebase & merge?","msgtype":"m.text"},"ts":1444840782000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah","msgtype":"m.text"},"ts":1444840789000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I wonder if we should consider some kind of... background color, maybe? ... for authoring requirements","msgtype":"m.text"},"ts":1444841063000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"There used to be some kind of switch","msgtype":"m.text"},"ts":1444841080000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"To highlight the \"impl\" bits mostly, since sometimes those are intertwined","msgtype":"m.text"},"ts":1444841115000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The w-nodev markers can allow you to remove the impl bits","msgtype":"m.text"},"ts":1444841142000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But the confusion we're seeing most recently is authors saying \"but my browser allows this just fine\"","msgtype":"m.text"},"ts":1444841154000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i.e. authors not realizing that authoring conformance criteria are meant to constrain them, not to constrain browsers.","msgtype":"m.text"},"ts":1444841168000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It probably needs to be called out in text in some way too","msgtype":"m.text"},"ts":1444841222000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"To make it accessible","msgtype":"m.text"},"ts":1444841227000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I have vague visions of margin annotations","msgtype":"m.text"},"ts":1444841269000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Let me see if I can make a mockup","msgtype":"m.text"},"ts":1444841273000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Something like this maybe https://usercontent.irccloud-cdn.com/file/cO7Wucwf/authoring.png","msgtype":"m.text"},"ts":1444842092000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Would be a lot of work to go find all the authoring requirements though","msgtype":"m.text"},"ts":1444842153000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"is this new Streams spec supposed to obsolete existing transformation APIs such as MediaRecorder?","msgtype":"m.text"},"ts":1444856397000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"Domenic: ^^^","msgtype":"m.text"},"ts":1444856428000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"roc: it is a primitive like Promise. Ideally specs upgrade to use it, like they have been doing for callbacks vs. promises","msgtype":"m.text"},"ts":1444856432000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"roc: for example I threw together https://domenic.github.io/streaming-mediastreams/","msgtype":"m.text"},"ts":1444856450000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"is MediaStreamRecorder supposed to be something totally different to MediaRecorder, or did you mean to write MediaRecorder?","msgtype":"m.text"},"ts":1444856515000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"roc: it is meant to be an alternative design that is based on streams instead of having ad-hoc stream-esque interfaces","msgtype":"m.text"},"ts":1444856557000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so the intent *is* to replace MediaRecorder?","msgtype":"m.text"},"ts":1444856622000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"roc: yes, I guess. Although it would depend on the relevant people working up the energy to implement something new, which in this particular case seems low.","msgtype":"m.text"},"ts":1444856666000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"roc: just like with promises, I'm sure we'll see lots of older APIs stick with the old ad-hoc mismash of patterns (XHR's events, IDB's callbacks, etc.), while new APIs are developed that use promises (Fetch, IDB+Promises draft, ...)","msgtype":"m.text"},"ts":1444856707000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"s/use promises/use the new primitive/","msgtype":"m.text"},"ts":1444856720000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it certainly makes sense for me for MediaRecorder to be able to produce a readable stream","msgtype":"m.text"},"ts":1444856724000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"IMO that would be like saying it make sense for the XMLHttpRequest object to produce a promise. I guess it works, but it'd be better not to have to go through the old interface on your way to the new primitive.","msgtype":"m.text"},"ts":1444856799000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"MediaRecorder has useful state like RecordingState","msgtype":"m.text"},"ts":1444856860000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"and a MIME type","msgtype":"m.text"},"ts":1444856873000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"Yes, those are present in MediaStreamRecorder as well.","msgtype":"m.text"},"ts":1444856896000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://domenic.github.io/streaming-mediastreams/#mediastreamrecorder","msgtype":"m.text"},"ts":1444856912000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the state isn't, actually, but that's not so important","msgtype":"m.text"},"ts":1444856914000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"well, it's in the ReadableStream class (somewhat implicitly)","msgtype":"m.text"},"ts":1444856934000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(We used to expose the state as a sync getter but people preferred not having to shuffle that information back to the main thread in the general case.)","msgtype":"m.text"},"ts":1444857005000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"you don't have pause and resume methods and states on ReadableStreams do you?","msgtype":"m.text"},"ts":1444857016000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"roc: they implicitly pause when nobody is reading from them. It's a pull model instead of a push one.","msgtype":"m.text"},"ts":1444857032000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1444857057000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"suppose I connect a MediaStreamRecorder to an IndexedDB writeable stream","msgtype":"m.text"},"ts":1444857069000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"I'd like to be able to pause() and resume() recording in response to user input","msgtype":"m.text"},"ts":1444857084000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"how do I write that code in your model?","msgtype":"m.text"},"ts":1444857092000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"that aside","msgtype":"m.text"},"ts":1444857146000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"You would not use the convenience method pipeTo(idbWS), but would instead write a few lines to do reads from the MSR and writes to the IDB WS","msgtype":"m.text"},"ts":1444857151000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Then you could stop doing reads/writes at will","msgtype":"m.text"},"ts":1444857163000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"pipeTo is a convenience for wanting to pipe things unconditionally","msgtype":"m.text"},"ts":1444857176000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The code would be very similar to the second example","msgtype":"m.text"},"ts":1444857226000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I would write it up but I get the sense from your \"that aside\" that we are moving on now :)","msgtype":"m.text"},"ts":1444857261000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"refraining from reading is not a good signal to pause the MediaRecorder","msgtype":"m.text"},"ts":1444857264000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"obviously there'll have to be some buffering inside the MediaRecorder or we'll lose data","msgtype":"m.text"},"ts":1444857298000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"so pausing-by-not-reading will basically force that buffer to fill and then we'll drop data","msgtype":"m.text"},"ts":1444857320000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"so we'll necessarily incur latency corresponding to the size of the buffer","msgtype":"m.text"},"ts":1444857332000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"Oh, sorry, I misunderstood what you meant by \"pausing\"","msgtype":"m.text"},"ts":1444857334000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I thought you meant \"pausing reading\" not \"pausing recording\"","msgtype":"m.text"},"ts":1444857348000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"no I mean this: http://www.w3.org/TR/mediastream-recording/#widl-MediaRecorder-pause-void","msgtype":"m.text"},"ts":1444857365000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"Right","msgtype":"m.text"},"ts":1444857377000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I had an answer for this, several months ago, ... trying to dredge it up","msgtype":"m.text"},"ts":1444857410000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ok, so moving on :-)","msgtype":"m.text"},"ts":1444857428000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"seems to me that MediaStreamRecorder aggregates a readable stream by inheritance","msgtype":"m.text"},"ts":1444857455000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"I think it might have been that you can simply cancel the stream and create a new one when you want to resume, with the realization that if that is a naive approach, then it's easy to add pause/resume methods to pause/resume the flow of data into the readable stream","msgtype":"m.text"},"ts":1444857463000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that's not ideal, yes","msgtype":"m.text"},"ts":1444857489000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"or we would have designed MediaRecorder that way","msgtype":"m.text"},"ts":1444857500000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"Fair enough","msgtype":"m.text"},"ts":1444857504000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Re inheritance: yes, the intent is that many consumers of MediaStreamRecorder would treat it as a generic stream-of-blobs. Those who care specifically about the stuff exposed in https://domenic.github.io/streaming-mediastreams/#mediastreamrecorder could use those properties if they wanted.","msgtype":"m.text"},"ts":1444857537000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the main problem being that the recorded data has headers (and trailers) and it's not always valid to just concatenate blobs to produce a new valid media file","msgtype":"m.text"},"ts":1444857552000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"Ah yeah, makes sense","msgtype":"m.text"},"ts":1444857566000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"if MediaRecorder exposed a readable stream as a property, that would be aggregating by membership","msgtype":"m.text"},"ts":1444857615000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"I don't think this is a huge difference","msgtype":"m.text"},"ts":1444857634000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"I agree","msgtype":"m.text"},"ts":1444857664000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But MediaRecorder has a bunch of stuff that is just an ad-hoc readable stream interface","msgtype":"m.text"},"ts":1444857675000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"aggregation by membership is often preferred, especially when you might need multiple inheritance, like EventTarget if you want to something to fire custom events at","msgtype":"m.text"},"ts":1444857692000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"If the argument is to preserve compat for backward-compat purposes then that makes sense","msgtype":"m.text"},"ts":1444857706000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I agree, and maybe that can be deprecated or removed later","msgtype":"m.text"},"ts":1444857714000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"Yeah, that seems like a reasonable way to evolve","msgtype":"m.text"},"ts":1444857728000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"removing those parts is simpler and less risky than replacing the entire interface","msgtype":"m.text"},"ts":1444857733000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"I wasn't really clear what the interop status on MediaRecorder was","msgtype":"m.text"},"ts":1444857746000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Firefox ships it","msgtype":"m.text"},"ts":1444857756000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"AFAIK Chrome is close to having an implementation","msgtype":"m.text"},"ts":1444857765000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"Cool, yeah.","msgtype":"m.text"},"ts":1444857808000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If there were interest I'd be happy to recast this as an extension to existing MediaRecorder. Right now it was mostly just a POC.","msgtype":"m.text"},"ts":1444857834000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I have another question about structured elements in streams. The spec draft talks about passing video frames and stuff like that","msgtype":"m.text"},"ts":1444857848000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"Heh.","msgtype":"m.text"},"ts":1444857857000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'm a bit dubious aobut that","msgtype":"m.text"},"ts":1444857859000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"but","msgtype":"m.text"},"ts":1444857861000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"Yes, that is a bit handwavey","msgtype":"m.text"},"ts":1444857864000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I don't have time to talk about it right now!","msgtype":"m.text"},"ts":1444857868000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"so, I'll catch you later :-)","msgtype":"m.text"},"ts":1444857876000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"Cool :)","msgtype":"m.text"},"ts":1444857880000,"senderName":"Domenic","senderId":"Domenic@irc"}
]