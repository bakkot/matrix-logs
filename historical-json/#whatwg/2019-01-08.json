[
{"content":{"body":"huh","msgtype":"m.text"},"ts":1546911053000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"never seen a \"Translations (non-normative):\" section at head of a spec before https://streams.spec.whatwg.org/","msgtype":"m.text"},"ts":1546911069000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"neat","msgtype":"m.text"},"ts":1546911075000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"JakeA: so in a way I see the appeal of using many objects, but on the other hand it's not really something we have precedence for","msgtype":"m.text"},"ts":1546935845000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: is this how they do it in Node.js et al?","msgtype":"m.text"},"ts":1546935853000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"precedent*","msgtype":"m.text"},"ts":1546935872000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: in node the conditions & handlers are JS, with maybe a function that returns a function. Eg decodeBody() would return a function that looks at the request and parses form data. Routers aside, React's props/state model has made plain objects pretty popular, and TypeScript makes them not-too-hard to create typings for. Not sure it's possible in WebIDL as it stands.","msgtype":"m.text"},"ts":1546936075000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: I built https://github.com/jakearchibald/sw-routes/blob/master/README.md as an experiment a few months back. It's closer to how Express works","msgtype":"m.text"},"ts":1546936151000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: what you sketched seems doable in IDL?","msgtype":"m.text"},"ts":1546936250000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: library looks quite nice","msgtype":"m.text"},"ts":1546936351000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: really wonder how builtin modules will shake things up going forward","msgtype":"m.text"},"ts":1546936363000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"notices Domenic made a similar comment some 10h ago","msgtype":"m.emote"},"ts":1546936989000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'll sketch something out. The thing I hit is: What do those functions return? If it's a special kind of object, why not have a constructor? If it's a plain object, why have the function?","msgtype":"m.text"},"ts":1546937149000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"But I'll sketch an alternative and see how it goes","msgtype":"m.text"},"ts":1546937165000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I think it's important to realize that you need the functions for the polyfill, for something declarative you only need to pass instructions in some manner and ensure those instructions are not more powerful than the low-level API","msgtype":"m.text"},"ts":1546937354000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Or alternatively, this would be a little higher-level still in that you need something that parses this and returns the necessary functions","msgtype":"m.text"},"ts":1546937472000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"s/parses/processes/ ... same same","msgtype":"m.text"},"ts":1546937503000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: FWIW I agree with the logic \"What do those functions return? If it's a special kind of object, why not have a constructor? If it's a plain object, why have the function?\" I just think the plain object route is worth exploring a bit more.","msgtype":"m.text"},"ts":1546959900000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Yeah, thanks for prompting me to explore it more. I'm much happier with the plain object for the conditions. I'm not convinced about the sources, but it might not be a big deal if an enum can be used in the cases where options aren't needed","msgtype":"m.text"},"ts":1546962470000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Yeah I agree the sources are less obvious","msgtype":"m.text"},"ts":1546962485000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: How do you feel about the mix of enums and classes. Eg: `router.add(conditions, ['network', new RouterSourceCache('/offline.html')])`. The idea is you'd use `'network'` as a shorthand for `new RouterSourceNetwork()`, but if you needed to provide options, you'd need to use the constructor.","msgtype":"m.text"},"ts":1546962602000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I guess I still don't see why `new RouterSourceCache('/offline.html')` is better than `{ type: 'cache', url: '/offline.html' }`","msgtype":"m.text"},"ts":1546962685000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Assuming that the `RouterSourceCache` is just a dumb holder for precisely that `{ type, url }` data","msgtype":"m.text"},"ts":1546962701000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The problem is defining \"url is a valid key of this object if the object also has key 'type' and its value is 'cache'\"","msgtype":"m.text"},"ts":1546962770000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: you could also put all the members in a dictionary and then throw for certain combinations","msgtype":"m.text"},"ts":1546962838000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Web IDL's constraints should not drive API design though. API design should drive us to expand Web IDL (if it happens more than once) or use prose (the first time)","msgtype":"m.text"},"ts":1546962840000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah that's what MutationObservers do IIRC","msgtype":"m.text"},"ts":1546962867000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"uhuh","msgtype":"m.text"},"ts":1546962873000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Fair. I'm been thinking for a while that I should provide TypeScript definitions along with specs. This would be a case where I'd want to do that, as I'd like the TypeScript typings to be stricter than the WebIDL","msgtype":"m.text"},"ts":1546962930000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"The TypeScript community would probably like that","msgtype":"m.text"},"ts":1546962961000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Domenic: If I'm going down the all-object path, it really feels like we'd need a method to test if a condition/source is supported. Any objections?","msgtype":"m.text"},"ts":1546963101000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"`router.supportsCondition('date', { to: Date.now() });`","msgtype":"m.text"},"ts":1546963122000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Seems reasonable I suppose; haven't thought too hard.","msgtype":"m.text"},"ts":1546963144000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: the dictionary path you mean? I'd say only add it once you add something that needs it","msgtype":"m.text"},"ts":1546963173000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: because for v1 presumably all UAs will implement the v1 version","msgtype":"m.text"},"ts":1546963189000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Fair enough. As long as we could add it later, else we kinda lock ourselves into the V1 set.","msgtype":"m.text"},"ts":1546963253000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Hopefully we'll always be able to add stuff ðŸ˜ƒ","msgtype":"m.text"},"ts":1546963297000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And if we can't then I suppose it doesn't matter anyway","msgtype":"m.text"},"ts":1546963311000,"senderName":"annevk","senderId":"annevk@irc"}
]