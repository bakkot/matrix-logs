[
{"content":{"body":"in https://tc39.es/ecma262/#sec-abstract-equality-comparison I’m confused by step 8","msgtype":"m.text"},"ts":1613353414000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"step 7 basically says, for comparing x == y, If Type(x) is BigInt and Type(y) is String, then compare x == StringToBigInt(y)","msgtype":"m.text"},"ts":1613353542000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"step 8 however says, If Type(x) is String and Type(y) is BigInt, return the result of the comparison y == x","msgtype":"m.text"},"ts":1613353587000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"d’oh, nevermind, I realize now the algorithm just recurses","msgtype":"m.text"},"ts":1613354189000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Krinkle: why not migrate to max-age?","msgtype":"m.text"},"ts":1613367585000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: no reason not to Wikipedia and/or me personally, I'm wondering more widely whether standards and implementations agree that it should be based on device time and whether it would have or could still make sense as an improvement/stabler approach to base it on the Date header. It seems like an obvious thing to consider, so I wonder if it was ever considered or whether there are compat concerns, but I can't think of any off hand.","msgtype":"m.text"},"ts":1613367792000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"same for cache-control actually","msgtype":"m.text"},"ts":1613367819000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"although max-age is much much more widely adopted there","msgtype":"m.text"},"ts":1613367841000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"it'll likely take years to catch all the cases for cookies","msgtype":"m.text"},"ts":1613367892000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: I think the wider agreement is that mag-age is the better pattern","msgtype":"m.text"},"ts":1613373261000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"max-age*","msgtype":"m.text"},"ts":1613373269000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Can x in https://heycam.github.io/webidl/#resolve not be a promise?","msgtype":"m.text"},"ts":1613374928000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks for the all the screen wake lock comments so far, they've been really informative","msgtype":"m.text"},"ts":1613399190000,"senderName":"rakuco","senderId":"rakuco@irc"},
{"content":{"body":"rakuco: no problem, and to be clear other specs have made a mess of this as well, e.g., some parts of HTML","msgtype":"m.text"},"ts":1613405509000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rakuco: slowly fixing that now","msgtype":"m.text"},"ts":1613405517000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"let me know if I can lend a hand. I think I'll at least start filing some issues in other specs I'm familiar with once I finally manage to understand and fix everything in the screen wake lock spec","msgtype":"m.text"},"ts":1613405849000,"senderName":"rakuco","senderId":"rakuco@irc"},
{"content":{"body":"rakuco: if you have time working on https://github.com/heycam/webidl/issues/135#issuecomment-772716243 would be great; I have the feeling that once we have an ambient realm floating around many things will be easier","msgtype":"m.text"},"ts":1613411388000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: re \"Can x in https://heycam.github.io/webidl/#resolve not be a promise?\" I guess it cannot, but in practice we use promises a good amount there... we should probably update IDL. IMO more evidence that Promise<T> should just become Promise","msgtype":"m.text"},"ts":1613411703000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I wouldn't go that far, we need it for various APIs, including those in service workers","msgtype":"m.text"},"ts":1613412030000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It also seems strange if you could return a byte sequence or a list from a method, but you cannot fulfill a promise with one","msgtype":"m.text"},"ts":1613412057000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Wow JakeA https://www.youtube.com/watch?v=nZb0U3rFQXw is amazing :D","msgtype":"m.text"},"ts":1613413289000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Cheers! I kinda just needed to visualise it for myself more than anything, but I think I was struggling to explain to others what I was _trying_ to do, so hopefully that helps","msgtype":"m.text"},"ts":1613413348000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Yesterday I was looking at the DOM spec. Somewhere in there it mentioned getting the root of a variable which I believe is an EventTarget. It says \"if parent’s root is a shadow root whose mode is \"closed\", then set slot-in-closed-tree to true.\" This confuses me, because you can only get the root of a node? Is an EventTarget a node?","msgtype":"m.text"},"ts":1613430204000,"senderName":"EveryOS","senderId":"EveryOS@irc"},
{"content":{"body":"It looks like Node *extends* EventTarget. So when it refers to parent's root, would you check if it is a Node and then get the root if it is a node? And then ignore this line otherwise.","msgtype":"m.text"},"ts":1613431767000,"senderName":"EveryOS","senderId":"EveryOS@irc"}
]