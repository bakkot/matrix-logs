[
{"content":{"body":"Hm my generated single page index.html is 10mb","msgtype":"m.text"},"ts":1547598363000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Domenic: Do you think we can just get rid of this: https://github.com/whatwg/html/pull/4031#discussion_r245355186 I honestly don't quite get what it means, is it just saying the element must still exist in the DOM even if its resource doesn't get applied?","msgtype":"m.text"},"ts":1547598453000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"It almost sounds more like it is saying something like a style sheet will still be available via DOM apis even if it is not applied maybe?","msgtype":"m.text"},"ts":1547598486000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Yeah that might be it","msgtype":"m.text"},"ts":1547598509000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"I think getting rid of it would be goos","msgtype":"m.text"},"ts":1547598575000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think it's saying either \"even if the stylesheet is disabled, document.styleSheets should still contain it\" or \"even if the resource is never fetched, the link element must still be accessible via the DOM\".","msgtype":"m.text"},"ts":1547598641000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Neither are very useful","msgtype":"m.text"},"ts":1547598652000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1547598669000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: maybe we should move the \"Queue a task on the networking task source\" out of the \"process this type of linked resource\" steps? I.e. make the default fetch-and-process step 12.5 be \"Queue a task on the networking task source to process the linked resource given el, success, and response.\"","msgtype":"m.text"},"ts":1547602821000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I like that idea. As long as it wouldn't be a problem performing the content-type metadata check in the task and not earlier (seems fine)","msgtype":"m.text"},"ts":1547603226000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Yeah the response can't change in such a way","msgtype":"m.text"},"ts":1547603267000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"👍","msgtype":"m.text"},"ts":1547603374000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"annevk: is there a reason why we are suddenly trying to remove [NoInterfaceObject] from everywhere? I feel like it was just something on the backlog","msgtype":"m.text"},"ts":1547619785000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: Ms2ger filed a PR which made me go through the backlog a bit","msgtype":"m.text"},"ts":1547624285000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah I see","msgtype":"m.text"},"ts":1547624294000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"annevk, do you still feel the same way about https://github.com/heycam/webidl/issues/236 ?","msgtype":"m.text"},"ts":1547646214000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: yeah, pretty much, DOMString -> JavaScript string and USVString -> scalar value string, too","msgtype":"m.text"},"ts":1547646409000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(and also have that conversion on the way out)","msgtype":"m.text"},"ts":1547646427000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So I can return a byte sequence, and ByteString ensures JavaScript gets a DOMString","msgtype":"m.text"},"ts":1547646448000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(This again makes me wonder why Domenic thinks that return values are useless. It seems they're quite necessary at times.)","msgtype":"m.text"},"ts":1547646495000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i know there's been fieldset/legend work underway recently.  is this up to date with that work? https://html.spec.whatwg.org/multipage/rendering.html#the-fieldset-and-legend-elements","msgtype":"m.text"},"ts":1547671082000,"senderName":"a-ja","senderId":"a-ja@irc"},
{"content":{"body":"been pondering whether legend should align right in rtl","msgtype":"m.text"},"ts":1547671181000,"senderName":"a-ja","senderId":"a-ja@irc"},
{"content":{"body":"TabAtkins: no good linking syntax for slots, right? [=StorageArea/\\[[DatabaseName]]=] doesn't work","msgtype":"m.text"},"ts":1547678548000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"a-ja: that is up to date as far as I know","msgtype":"m.text"},"ts":1547678561000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"{{StorageArea/[[DatabaseName]]}}","msgtype":"m.text"},"ts":1547678579000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"slots are just a private part of the interface, they live in the idl attr namespace","msgtype":"m.text"},"ts":1547678599000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ah for some reason I thoguht that gave me the biblio error but on trying it again it does not.","msgtype":"m.text"},"ts":1547678620000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"tks Domenic","msgtype":"m.text"},"ts":1547678639000,"senderName":"a-ja","senderId":"a-ja@irc"},
{"content":{"body":"You still need to escape the [ when you define the slot, but not when you link it","msgtype":"m.text"},"ts":1547678648000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(and as soon as IDL grows a slot syntax (/ implicit backing slots), you won't generally need to do that anyway","msgtype":"m.text"},"ts":1547678678000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(calling something storage area when the local storage/session storage specs already extensively talk about storage areas seems like it might be confusing btw, although I guess at least in that case it isn't ever formally defined as a term, and certainly isn't a IDL interface (although in blink the implementation of the Storage IDL interface is called StorageArea...))","msgtype":"m.text"},"ts":1547678885000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Domenic: one thought I had for testing task sources was to perform two operations that would definitely queue tasks on the same source and assert their order is correct. That would at least catch impls that queue the tasks on different sources AND prioritized the sources in a way that doesn’t jive well with the test. Would not catch impls that queue them on different sources but happen to prioritize them in a way that","msgtype":"m.text"},"ts":1547682298000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"the test accepts. But in general it’s pretty pedantic yeah","msgtype":"m.text"},"ts":1547682298000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Anyone have an opinion on the right fix for https://github.com/WICG/kv-storage/issues/45 ? I am feeling indecisive.","msgtype":"m.text"},"ts":1547682302000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"domfarolino: yeah I guess that's a pretty simple stochastic test. I'd be worried about impls that don't explicitly prioritize the task sources against each other, or not in any principled way, so that you'd end up passing half the time and failing half the time depending on which task source it decided to pick. Still might be worthwhile though.","msgtype":"m.text"},"ts":1547682386000,"senderName":"Domenic","senderId":"Domenic@irc"}
]