[
{"content":{"body":"are you using Safari on Mac?","msgtype":"m.text"},"ts":1353283246000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"doesn't download for me","msgtype":"m.text"},"ts":1353283249000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"except Safari","msgtype":"m.text"},"ts":1353283258000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"ah okay, by \"No\" you indicated agreement with my observations?","msgtype":"m.text"},"ts":1353283281000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah; I was disagreeing with your interop statement","msgtype":"m.text"},"ts":1353283299000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"what statement?","msgtype":"m.text"},"ts":1353283318000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"how do I check the type/headers in Safari?","msgtype":"m.text"},"ts":1353283321000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"[18:40:21]  <annevk> GPHemsley: fwiw, displaying as \"text/plain\" versus offering a download dialog does seem like a potential interoperability issue and something we should tackle, though it's not really clear to me that's the case here","msgtype":"m.text"},"ts":1353283327000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"well yeah, it's not the case here, but why would you disagree with that in general?","msgtype":"m.text"},"ts":1353283349000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"agreeing/disagreeing","msgtype":"m.text"},"ts":1353283352000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"blame the English language","msgtype":"m.text"},"ts":1353283356000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"bedtime, it seems :)","msgtype":"m.text"},"ts":1353283369000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1353283372000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"I think we do need to come up with a metric for deciding what needs to go in the mimesniff spec and what can be elsewhere","msgtype":"m.text"},"ts":1353283455000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"hmm... cache manifest is going to be a little complex to handle in the current styling, given the allowance of an optional BOM","msgtype":"m.text"},"ts":1353285641000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"oh, same with WebVTT","msgtype":"m.text"},"ts":1353285680000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1353285681000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"<annevk> Yuhong: I want IE to drop support for EOT in the end","msgtype":"m.text"},"ts":1353286305000,"senderName":"Yuhong","senderId":"Yuhong@irc"},
{"content":{"body":"Actually, they do sometimes do things like this, but notice they disabled it by default only in the Internet zone and allow it to be reenabled:","msgtype":"m.text"},"ts":1353286349000,"senderName":"Yuhong","senderId":"Yuhong@irc"},
{"content":{"body":"http://blogs.msdn.com/b/ie/archive/2012/06/04/legacy-dx-filters-removed-from-ie10-release-preview.aspx","msgtype":"m.text"},"ts":1353286353000,"senderName":"Yuhong","senderId":"Yuhong@irc"},
{"content":{"body":"ls","msgtype":"m.text"},"ts":1353307413000,"senderName":"sangwhan","senderId":"sangwhan@irc"},
{"content":{"body":"oops","msgtype":"m.emote"},"ts":1353307420000,"senderName":"sangwhan","senderId":"sangwhan@irc"},
{"content":{"body":"aha","msgtype":"m.text"},"ts":1353308150000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"http://www.alvestrand.no/pipermail/idna-update/2012-November/007482.html","msgtype":"m.text"},"ts":1353311697000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: wow","msgtype":"m.text"},"ts":1353312535000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: indeed","msgtype":"m.text"},"ts":1353314135000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"GPHemsley: you don't take BOM into account for HTML?","msgtype":"m.text"},"ts":1353314969000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heycam: <p><div></div></p> is actually <p></p><div></div><p></p>","msgtype":"m.text"},"ts":1353317973000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: http://krijnhoetmer.nl/irc-logs/whatwg/20121118#l-136 doesn't seem right.","msgtype":"m.text"},"ts":1353318245000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"<input required value> is valid, afaict","msgtype":"m.text"},"ts":1353318278000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: didn't realize he was talking about the validator","msgtype":"m.text"},"ts":1353319043000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1353319056000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"happy b-day btw","msgtype":"m.text"},"ts":1353319068000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1353319072000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"should it be possible to create a DataTransfer object from script?","msgtype":"m.text"},"ts":1353320134000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"the DragEvent constructor seems a bit pointless without being able to use custom DataTransfer","msgtype":"m.text"},"ts":1353320225000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"https://www.w3.org/Bugs/Public/show_bug.cgi?id=20004","msgtype":"m.text"},"ts":1353320353000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: can't you still test your drag & drop code with custom events even if there's no DataTransfer object? arguably you can't test all of it then, but still a bit","msgtype":"m.text"},"ts":1353320818000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"you can't test the dataTransfer aspects","msgtype":"m.text"},"ts":1353320851000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"which seems like the useful ones","msgtype":"m.text"},"ts":1353320861000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: that whole idna-update thread is full of wow","msgtype":"m.text"},"ts":1353320903000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah. but this email seemed like a level above the rest","msgtype":"m.text"},"ts":1353320983000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"http://iutf.org/wiki/Main_Page can't help but read \"intelligent design\"","msgtype":"m.text"},"ts":1353321182000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://wiki.whatwg.org/wiki/URL#IDNA has my IDNA notes","msgtype":"m.text"},"ts":1353321207000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nice","msgtype":"m.text"},"ts":1353321508000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"the not so nice thing is that e.g. thus far I've heard no interest from WebKit in doing anything, IE apparently has not moved either even though Windows 8 reportedly supports IDNA2008, and Gecko seems to be planning on moving forward still? https://bugzilla.mozilla.org/show_bug.cgi?id=479520","msgtype":"m.text"},"ts":1353321640000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, and Opera did something, but thus far it's not very clear whether Gecko plans on matching that","msgtype":"m.text"},"ts":1353321669000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://github.com/jclark/microxml-er/blob/master/recovery.md seems to match what I had defined more or less, minus DOCTYPEs","msgtype":"m.text"},"ts":1353322444000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and the multiple roots case","msgtype":"m.text"},"ts":1353323910000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"and </>","msgtype":"m.text"},"ts":1353323935000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"oh it supports multiple roots? how would the result still match element then?","msgtype":"m.text"},"ts":1353324008000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"If at this point we do not have a single element, wrap everything in an element named #doc.\"","msgtype":"m.text"},"ts":1353324073000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ooh","msgtype":"m.text"},"ts":1353324100000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"how is that streaming?","msgtype":"m.text"},"ts":1353324110000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"means it can't be streaming :-(","msgtype":"m.text"},"ts":1353324111000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"that's kinda contrary to an earlier stated goal","msgtype":"m.text"},"ts":1353324127000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"weird","msgtype":"m.text"},"ts":1353324131000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"where are the goals stated?","msgtype":"m.text"},"ts":1353324156000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1353324200000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"The tokenization phase is also designed to be allow for a streaming implementation, whereas the tree-building phase is not.\"","msgtype":"m.text"},"ts":1353324201000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"misremembered","msgtype":"m.text"},"ts":1353324206000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"seems silly","msgtype":"m.text"},"ts":1353324218000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You just start streaming with a QuantumStartTag which is ina superposition of the present and not present states. Reaching the end of the input is like collapsing the wavefunction so you end up in a concrete state.","msgtype":"m.text"},"ts":1353324286000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1353324323000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(Man I feel bad for such a hideous use of pseudo-physics. Although like all great pseudo-physics it doesn't actually work)","msgtype":"m.text"},"ts":1353324335000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(next up: how to use the endless cycling of Working Group debates to generate infinite energy)","msgtype":"m.text"},"ts":1353324363000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"in the new bond movie they have a lot of pseudo-computery-stuff","msgtype":"m.text"},"ts":1353324371000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aside from that it was pretty decent","msgtype":"m.text"},"ts":1353324402000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, had the same feeling. Had to look away quite a bit.","msgtype":"m.text"},"ts":1353325082000,"senderName":"odinho","senderId":"odinho@irc"},
{"content":{"body":"Don't understand why they do that.","msgtype":"m.text"},"ts":1353325094000,"senderName":"odinho","senderId":"odinho@irc"},
{"content":{"body":"Even Helene (my gf) felt bad because of it.","msgtype":"m.text"},"ts":1353325143000,"senderName":"odinho","senderId":"odinho@irc"},
{"content":{"body":"i totally overlooked the pseudo-computer stuff. i guess i'm used to it","msgtype":"m.text"},"ts":1353326740000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I think I might have done that too but it was pointed out to me and then I couldn't stop noticing it","msgtype":"m.text"},"ts":1353326859000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"AryehGregor_: basically, I'm unsure of all changes to ranges :-)","msgtype":"m.text"},"ts":1353328134000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"AryehGregor_: not sure what it is exactly, I feel like I don't quite grasp them or something","msgtype":"m.text"},"ts":1353328154000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"AryehGregor_: anyway, will fix that bug shortly","msgtype":"m.text"},"ts":1353328212000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, thanks.","msgtype":"m.text"},"ts":1353328411000,"senderName":"AryehGregor_","senderId":"AryehGregor_@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1353333390000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Chrome supports http://[2::%5d/","msgtype":"m.text"},"ts":1353333394000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and stuff like http://[3%3a:1:0:0:0:0]/","msgtype":"m.text"},"ts":1353333498000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Safari does not reject http://[3%3a:1:0:0:0:0%]/","msgtype":"m.text"},"ts":1353333557000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Safari does reject %5d instead of ]","msgtype":"m.text"},"ts":1353333572000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"man","msgtype":"m.text"},"ts":1353333575000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is there nothing that just works?","msgtype":"m.text"},"ts":1353333580000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"you must be new here","msgtype":"m.text"},"ts":1353333589000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I guess I'll go with RFC 3986 which puts [, :, and ] in reserved and has them as part of the syntax of IP literals and therefore using them in percent-encoded fashion should result in a syntax error","msgtype":"m.text"},"ts":1353333820000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Opera just gives me illegal URL for http://[3a::1:0:0:0:0]/test btw","msgtype":"m.text"},"ts":1353333883000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not sure what is up with that","msgtype":"m.text"},"ts":1353333887000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"The rank of an hgroup element is the rank of the highest-ranked h1–h6 element descendant of the hgroup element, if there are any such elements, or otherwise the same as for an h1 element (the highest rank).\" is not very friendly to streaming processing to generate an outline.","msgtype":"m.text"},"ts":1353334139000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: just defer creating the outline item for the hgroup until the element is closed","msgtype":"m.text"},"ts":1353334242000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"or heading, i guess","msgtype":"m.text"},"ts":1353334263000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hmm yeah true","msgtype":"m.text"},"ts":1353334297000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: BOM seems to be handled in a haphazard way. For sniffing, it is used as the signature for text/plain. AFAICT, if an HTML file has a BOM, it will be sniffed as text/plain by the unknown type sniffer. But if a HTML file as a BOM, it will be properly handled to determine if it is a feed.... >_>","msgtype":"m.text"},"ts":1353339400000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"GPHemsley: I guess if that's what implementations do it's okay","msgtype":"m.text"},"ts":1353339723000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"IDK, I'll have to check","msgtype":"m.text"},"ts":1353339745000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"per the outline algorithm, what text should be used as the heading for <hgroup>foo<h2>bar</h2><h3>baz</h3></hgroup> in an outline?","msgtype":"m.text"},"ts":1353341328000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"just \"foo\"? or \"foo bar\"? or just \"bar\"?","msgtype":"m.text"},"ts":1353341355000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Just bar I think, although it is unclear","msgtype":"m.text"},"ts":1353341611000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: yeah","msgtype":"m.text"},"ts":1353342022000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the three existing outliner implementations I tried all emit just \"bar\" for that case","msgtype":"m.text"},"ts":1353342089000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"which makes sense intuitively I guess","msgtype":"m.text"},"ts":1353342122000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but I can't see where the spec makes it clear that's what it should be","msgtype":"m.text"},"ts":1353342141000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"or also why the should be any different handling for <h1>foo<h2>bar</h2><h3>baz</h3></h1>","msgtype":"m.text"},"ts":1353342216000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it seems to me the outline algorithm requires both of the cases to be handled exactly the same","msgtype":"m.text"},"ts":1353342240000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"because hgroup and h1 are both \"heading content\"","msgtype":"m.text"},"ts":1353342294000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Well you can't get that out of the parser (h2 as a child of h1)","msgtype":"m.text"},"ts":1353342343000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"but the existing outliner implementations don't handle them the same -- they handle the  <h1>foo<h2>bar</h2><h3>baz</h3></h1> case by making nested sections for the h2 and h3 elements","msgtype":"m.text"},"ts":1353342346000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1353342351000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah OK","msgtype":"m.text"},"ts":1353342354000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so that part makes sense at least","msgtype":"m.text"},"ts":1353342374000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"good morning, Whatwg!","msgtype":"m.text"},"ts":1353343159000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"Good night","msgtype":"m.text"},"ts":1353343202000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: What was that pseudo-server you recommended for testing, again?","msgtype":"m.text"},"ts":1353343348000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"GPHemsley: someone might have recommended https://bitbucket.org/annevk/simpleserver I suppose? not sure I did though","msgtype":"m.text"},"ts":1353343406000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think I mentioned it","msgtype":"m.text"},"ts":1353343412000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1353343425000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"well, thanks nonetheless :)","msgtype":"m.text"},"ts":1353343434000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"you gonna test HTTP stuff?","msgtype":"m.text"},"ts":1353343450000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1353343458000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"I figured I'd write a script that builds all the test files automatically","msgtype":"m.text"},"ts":1353343478000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"so I can finally make some progress","msgtype":"m.text"},"ts":1353343486000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"hmm... what was the one that Mozilla uses?","msgtype":"m.text"},"ts":1353343532000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"where you put headers in a separate file?","msgtype":"m.text"},"ts":1353343539000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"(or is that custom?)","msgtype":"m.text"},"ts":1353343544000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"That's custom","msgtype":"m.text"},"ts":1353343574000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"oh, hmm...","msgtype":"m.text"},"ts":1353343663000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"annevk: This would have to be modified to do what I want","msgtype":"m.text"},"ts":1353343678000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"Maybe it'd be easier to just generate .htaccess files alongside the tests","msgtype":"m.text"},"ts":1353343693000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"it's OK (or even good) if I include the tests and the generator script in the mimesniff repo, right?","msgtype":"m.text"},"ts":1353343775000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"Sure","msgtype":"m.text"},"ts":1353343851000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"GPHemsley: Was I *supposed* to inform you of pending mimetype requests?","msgtype":"m.text"},"ts":1353345231000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: No, we were just discussing it in here. :)","msgtype":"m.text"},"ts":1353345271000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"the 'font' type specifically","msgtype":"m.text"},"ts":1353345279000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"annevk: Yeah, an independent object for setting a query would be useful.  It's a separable piece.","msgtype":"m.text"},"ts":1353345418000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: While Maps don't set to a list, there's nothing that says your own implementation of the methods can't do that internally.  The point is just to provide same-named methods with similar functionality, such that they can be used interchangeably.","msgtype":"m.text"},"ts":1353345458000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: sure, I think that's already done more or less","msgtype":"m.text"},"ts":1353345485000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: but apart from some missing stuff","msgtype":"m.text"},"ts":1353345498000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: delete(key, val) might run into identity problems.  Best think about what concept of identity you want - the tc39 guys have strong opinions about what they've gotten wrong in the past with, for example, Array#contains.","msgtype":"m.text"},"ts":1353345503000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: but that seems different than what's suggested on the list","msgtype":"m.text"},"ts":1353345508000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: identify problem?","msgtype":"m.text"},"ts":1353345520000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ty*","msgtype":"m.text"},"ts":1353345530000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: For example, whether NaN is equal to NaN, +0 to -0, etc.","msgtype":"m.text"},"ts":1353345649000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"key/val are converted to DOMString first","msgtype":"m.text"},"ts":1353345668000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh, then you're fine.  No worries.","msgtype":"m.text"},"ts":1353345676000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Forgot about the type coercion.","msgtype":"m.text"},"ts":1353345686000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"it's still not really clear to me if what you're saying and what David/Boris are discussing is the same","msgtype":"m.text"},"ts":1353345717000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and I have a hard time following terms like \"subclassing\"","msgtype":"m.text"},"ts":1353345763000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"does that involve me talking to heycam or does it mean to just make it look kinda the same?","msgtype":"m.text"},"ts":1353345776000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It just means that (a) it should ducktype as a Map, and (b) (new URLQuery) instanceof Map should be true.","msgtype":"m.text"},"ts":1353345817000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The latter just does prototype comparisons.","msgtype":"m.text"},"ts":1353345829000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(take proto of both sides, then walk the proto chain of lhs until you find a match or hit the root)","msgtype":"m.text"},"ts":1353345853000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hmm, so I guess that means talking to heycam","msgtype":"m.text"},"ts":1353345878000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heycam|away, ^^","msgtype":"m.text"},"ts":1353345891000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm, maybe.  If Map was already defined in WebIDL, it would be no problem, obviously - you'd just extend it.","msgtype":"m.text"},"ts":1353345897000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"no, you can't extend it and change argument types","msgtype":"m.text"},"ts":1353346177000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You can't override methods that come from the extended interface?","msgtype":"m.text"},"ts":1353347141000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1353347216000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well that's just silly.","msgtype":"m.text"},"ts":1353347228000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"In that case, yeah, bug heycam for hooks.","msgtype":"m.text"},"ts":1353347238000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It would be great to have the ability to declare something as a Map or Set in the platform.","msgtype":"m.text"},"ts":1353347254000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The same way we're gradually rationalizing things to be Arrays.","msgtype":"m.text"},"ts":1353347264000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"not sure how much things are actually Arrays in the platform","msgtype":"m.text"},"ts":1353347307000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Not as much as they should be.","msgtype":"m.text"},"ts":1353347315000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"they have the same basic problem with not being tied to some underlying concept","msgtype":"m.text"},"ts":1353347324000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hm?","msgtype":"m.text"},"ts":1353347334000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so e.g. you get an array of path segments, then start modifying it or \"copying\" it around and then modifying, do you expect the URL to be modified?","msgtype":"m.text"},"ts":1353347379000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh, that.","msgtype":"m.text"},"ts":1353347395000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Who cares","msgtype":"m.text"},"ts":1353347422000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I'm still not sure why that's supposed to be a problem.  You return an Array subclass, not a plain array.  The subclass manages (in IDL prose) the necessary mutations.","msgtype":"m.text"},"ts":1353347425000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Just toss a coin","msgtype":"m.text"},"ts":1353347427000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"\"gradually rationalizing\" and \"oh that\" make me not convinced this is really a solved problem","msgtype":"m.text"},"ts":1353347434000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Bah, that was a dismissive \"oh that\".","msgtype":"m.text"},"ts":1353347446000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"there's no such thing as subclass","msgtype":"m.text"},"ts":1353347468000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"...","msgtype":"m.text"},"ts":1353347473000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"have you talked to heycam?","msgtype":"m.text"},"ts":1353347474000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Dude.  Bro.  A subclass is simply something for which \"object instanceof superclass\" is true.","msgtype":"m.text"},"ts":1353347494000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Sis?","msgtype":"m.text"},"ts":1353347532000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"No, Anne's my bro.","msgtype":"m.text"},"ts":1353347540000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"apparently it also magically handles mutations in prose? is there any example of such an array in the platform today?","msgtype":"m.text"},"ts":1353347560000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Uh, whatever object you just talked about?","msgtype":"m.text"},"ts":1353347578000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"that was a hypothetical for something I might introduce one day if there's hooks","msgtype":"m.text"},"ts":1353347599000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So, I'm unsure what the problem is here.  What do you think is weird about this?  I've done precisely this kind of thing in JS code before (subclassing an array), and it's fine.","msgtype":"m.text"},"ts":1353347713000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hmm, having magic internal state does sound like it has the possibility to invalidate supposed invariants of the base clas API if you're not very careful","msgtype":"m.text"},"ts":1353347730000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Or rather magic internal algorithms","msgtype":"m.text"},"ts":1353347739000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: You can always invalidate supposed invariants.  Just... don't do it?","msgtype":"m.text"},"ts":1353347753000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That's supposedly easier said than done. If you believe all these \"A square is not a rectangle\" type articles","msgtype":"m.text"},"ts":1353347787000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Say what?","msgtype":"m.text"},"ts":1353347807000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"That's cool if you're really into type safety.  This is JS, man.","msgtype":"m.text"},"ts":1353347810000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ms2ger: Strictly, a mutable square is *not* a subclass of mutable rectangle, due to the violation of implicit contracts.   Immutables are, though.","msgtype":"m.text"},"ts":1353347835000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(The main contract being that you can independently mutate the width and height without affecting the other.)","msgtype":"m.text"},"ts":1353347862000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ms2ger: Part of the internet is fascinated with the idea that *in OO software* a square is not a subclass of rectangle because squares impose extra invariants on the relationship between width and height","msgtype":"m.text"},"ts":1353347906000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Here in reality land, if it acts mostly the same, you're good.  Just be aware of where things are different. ^^_","msgtype":"m.text"},"ts":1353347941000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You're welcome: http://heeeeeeeey.com/","msgtype":"m.text"},"ts":1353348228000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"mikesmith: as per the required acc API implementation in the spec it would be <h2>foo bar baz</h2> for AT users","msgtype":"m.text"},"ts":1353348809000,"senderName":"Stevef","senderId":"Stevef@irc"},
{"content":{"body":"Stevef: OK","msgtype":"m.text"},"ts":1353348999000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: just wondering how to do it in spec language","msgtype":"m.text"},"ts":1353349212000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: although an example in JS might also help","msgtype":"m.text"},"ts":1353349254000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: awb just responded in that vein.","msgtype":"m.text"},"ts":1353349492000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: yeah, noticed, but not the spec part, which is more important","msgtype":"m.text"},"ts":1353350004000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, if you want WebIDL, there's not a good solution yet, and you need heycam.","msgtype":"m.text"},"ts":1353350098000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If you're willing to define it in JS (I wouldn't recommend it), you can just use AWB's code.","msgtype":"m.text"},"ts":1353350117000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so reading http://html5.org/tools/web-apps-tracker?from=7509&to=7510 it seems we're open to XSS there","msgtype":"m.text"},"ts":1353350141000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"only XSS From Hixie though","msgtype":"m.text"},"ts":1353350146000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(oops, that reminds me i forgot to escape those <s)","msgtype":"m.text"},"ts":1353350169000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"why are we open to XSS?","msgtype":"m.text"},"ts":1353350174000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"on another note","msgtype":"m.text"},"ts":1353350292000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: are URLUtils' members going to be unforgeable on HTMLAnchorElement?","msgtype":"m.text"},"ts":1353350308000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: or are they only to be unforgeable on Location?","msgtype":"m.text"},"ts":1353350317000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: oh if you forgot to escape them maybe we aren't :)","msgtype":"m.text"},"ts":1353350337000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: only on Location I think, I'm not sure how to deal with that, I tried to raise that issue when it came up, not sure if heycam|away took it into account","msgtype":"m.text"},"ts":1353350369000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://html5.org/tools/web-apps-tracker?from=7510&to=7511","msgtype":"m.text"},"ts":1353350381000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: k","msgtype":"m.text"},"ts":1353350390000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"heycam|away: ping","msgtype":"m.text"},"ts":1353350394000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"The </pre>?","msgtype":"m.text"},"ts":1353350407000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hixie: worst case scenario is that you define the IDL attributes as unforgeable and just say they behave the same as on URLUtils other than IDL differences","msgtype":"m.text"},"ts":1353350407000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1353350420000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's what i'm currently doing wit the UAE attributes or whatever they're called","msgtype":"m.text"},"ts":1353350441000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I was hoping we could get away with one interface somehow so whenever we upgrade it we don't have to change Location too","msgtype":"m.text"},"ts":1353350533000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1353350542000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh, maybe if we really need it this way and heycam|away doesn't give another shortcut I could create LocationURLUtils as an exact duplicate which is implemented only by Location","msgtype":"m.text"},"ts":1353350582000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"or just do a partial thingy for Location","msgtype":"m.text"},"ts":1353350603000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so whoever ends up maintaining URL (if it's not me) will take that into account","msgtype":"m.text"},"ts":1353350626000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"UnforgeableURLUtils","msgtype":"m.text"},"ts":1353350726000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or partial, yeah","msgtype":"m.text"},"ts":1353350749000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Maybe we should do the unforgeable interface after all","msgtype":"m.text"},"ts":1353350786000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: I guess I was in favor of that, not sure if I stressed that","msgtype":"m.text"},"ts":1353350970000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"polyglot.gif http://lists.w3.org/Archives/Public/public-markdown/2012Nov/0019.html","msgtype":"m.text"},"ts":1353351044000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"i'm not at the office -- anyone got IE handy?","msgtype":"m.text"},"ts":1353351419000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"http://software.hixie.ch/utilities/js/live-dom-viewer/saved/1916 - hit the Navigate button then the Compare button and tell me what gets logged","msgtype":"m.text"},"ts":1353351434000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I've got a VM with some version","msgtype":"m.text"},"ts":1353351436000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hixie, false","msgtype":"m.text"},"ts":1353351504000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"cool, thanks","msgtype":"m.text"},"ts":1353351509000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(which version?)","msgtype":"m.text"},"ts":1353351532000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"IE10","msgtype":"m.text"},"ts":1353351540000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1353351551000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"can you try removing the doctype?","msgtype":"m.text"},"ts":1353351557000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Still false","msgtype":"m.text"},"ts":1353351582000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1353351586000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"wtf","msgtype":"m.text"},"ts":1353351588000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"bholley: sorry, didn't notice you were here either :-)","msgtype":"m.text"},"ts":1353351904000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: hm, interesting. Did you try mwobensmith's tests?","msgtype":"m.text"},"ts":1353351920000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: those were the ones I tested, in a VM. Let me try again","msgtype":"m.text"},"ts":1353351942000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"i didn't test them in IE, no","msgtype":"m.text"},"ts":1353351959000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"boots vmware","msgtype":"m.emote"},"ts":1353351967000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"they were scary long :-)","msgtype":"m.text"},"ts":1353351969000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: ok, so first of all, looks like I've  got IE9","msgtype":"m.text"},"ts":1353352002000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"does it log true on my test?","msgtype":"m.text"},"ts":1353352018000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that'd be interesting ifso","msgtype":"m.text"},"ts":1353352022000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: checking","msgtype":"m.text"},"ts":1353352023000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"in particular because changing the doctype didn't change the result","msgtype":"m.text"},"ts":1353352041000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"though maybe it's the iframe's doctype that matters","msgtype":"m.text"},"ts":1353352047000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and we didn't try changing that","msgtype":"m.text"},"ts":1353352054000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: it does log true","msgtype":"m.text"},"ts":1353352070000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"ho ho ho","msgtype":"m.text"},"ts":1353352076000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1353352077000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"huh","msgtype":"m.text"},"ts":1353352089000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i bet they tried to implement the spec and just assumed it was right and didn't push back because for some reason they think it's ok to have different behaviours in different modes","msgtype":"m.text"},"ts":1353352133000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"good times","msgtype":"m.text"},"ts":1353352136000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what's gecko's behaviour been, historically?","msgtype":"m.text"},"ts":1353352162000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: on this issue? One Location object per Window","msgtype":"m.text"},"ts":1353352178000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"and the motivation to change is what? security bugs?","msgtype":"m.text"},"ts":1353352189000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: yes","msgtype":"m.text"},"ts":1353352196000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: 16.0.1, 16.0.2","msgtype":"m.text"},"ts":1353352206000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"basically the difficulty of \"inspect the js stack\"?","msgtype":"m.text"},"ts":1353352233000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the way the spec has it, it should be the same kind of security check as for Document's members","msgtype":"m.text"},"ts":1353352256000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: well, there are two issues with the spec","msgtype":"m.text"},"ts":1353352275000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"more than two, but go ahead :-)","msgtype":"m.text"},"ts":1353352283000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: the part that appears to be pure fiction is that Location describes the Document","msgtype":"m.text"},"ts":1353352292000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"yeah that needs to change regardless","msgtype":"m.text"},"ts":1353352300000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"dunno what i was testing there","msgtype":"m.text"},"ts":1353352305000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"should be the active document of the document's browsing context","msgtype":"m.text"},"ts":1353352318000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: so once it gets changed so that Location describes the active Document in the browsing context","msgtype":"m.text"},"ts":1353352325000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: then we have this weirdness where the security characteristics of Location don't match everything else in its scope","msgtype":"m.text"},"ts":1353352345000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: which is wacky for Gecko's compartment model","msgtype":"m.text"},"ts":1353352351000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: I think we're pretty safe now TBH, because in 16.0.2 I just hardcoded the checks in C++. But that's not where security checks in Gecko are supposed to live","msgtype":"m.text"},"ts":1353352368000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"same security model as Window, no?","msgtype":"m.text"},"ts":1353352381000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: No, it's different","msgtype":"m.text"},"ts":1353352398000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"what's the difference?","msgtype":"m.text"},"ts":1353352403000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: WindowProxy","msgtype":"m.text"},"ts":1353352407000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: that's the identity object in question, and we transplant it between compartments","msgtype":"m.text"},"ts":1353352424000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1353352431000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: effectively, what I've been pushing to do for Location","msgtype":"m.text"},"ts":1353352433000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"that sounds incredibly scary","msgtype":"m.text"},"ts":1353352441000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: you could say having a LocationProxy","msgtype":"m.text"},"ts":1353352444000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: why?","msgtype":"m.text"},"ts":1353352446000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: the WindowProxy is just a tiny wrapper around the Window anywaty","msgtype":"m.text"},"ts":1353352481000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"mostly because i don't understand the implications or how to spec it","msgtype":"m.text"},"ts":1353352486000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: well, it's already specced right for Window","msgtype":"m.text"},"ts":1353352495000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: and WindowProxy","msgtype":"m.text"},"ts":1353352499000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"the way the spec has it, the security on WindowProxy is actually specced on Window","msgtype":"m.text"},"ts":1353352500000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: right","msgtype":"m.text"},"ts":1353352508000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"the Proxy aspect could be removed without affecting the security","msgtype":"m.text"},"ts":1353352512000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: and the same would hold for Location","msgtype":"m.text"},"ts":1353352512000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: oh, hm. Well, not in Gecko","msgtype":"m.text"},"ts":1353352542000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: well, hm","msgtype":"m.text"},"ts":1353352560000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: my basic beef with our current implementation is that Location wants to be two different things","msgtype":"m.text"},"ts":1353352573000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"http://www.whatwg.org/specs/web-apps/current-work/#security-2 is how Window security is specced","msgtype":"m.text"},"ts":1353352575000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"for Location, seems to me the simplest fix is just to make it work the same as that -- but there's no Proxy needed to do that","msgtype":"m.text"},"ts":1353352595000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: it wants to be resolved like Document, but operate on the WIndowProxy","msgtype":"m.text"},"ts":1353352599000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"you just need to compare the script's security context to the active document's","msgtype":"m.text"},"ts":1353352615000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"why is it hard for an object to operate on the active document in gecko?","msgtype":"m.text"},"ts":1353352638000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"History works like that, more or less, no?","msgtype":"m.text"},"ts":1353352649000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"as specced, the History objects from all of the Documents in a browsing context basically act the same as each other","msgtype":"m.text"},"ts":1353352713000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: sure. But they don't do security checks, right?","msgtype":"m.text"},"ts":1353352732000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"they don't do \"can you access this member\" checks, but they do check whether the URL you're pushing is the same origin as the URL of the active document","msgtype":"m.text"},"ts":1353352758000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"otherwise you could load a bank site and change its URL to something else","msgtype":"m.text"},"ts":1353352767000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: the issue for us is that \"can you access this member\" checks are best implemented at compartment boundaries","msgtype":"m.text"},"ts":1353352786000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: and this generally works, because for everything but Location, you can infer an object's security characteristics from its scope","msgtype":"m.text"},"ts":1353352806000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"what's a compartment, in gecko?","msgtype":"m.text"},"ts":1353352834000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i don't think the spec has that concept","msgtype":"m.text"},"ts":1353352848000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: it doesn't","msgtype":"m.text"},"ts":1353352855000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: we have a separate JS heap for each scope","msgtype":"m.text"},"ts":1353352860000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: and we enforce security invariants at the border between heaps","msgtype":"m.text"},"ts":1353352886000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"how does that work with document.domain?","msgtype":"m.text"},"ts":1353352903000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: cross-compartment access is done with special wrapper objects, which we can enumerate","msgtype":"m.text"},"ts":1353352924000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: when someone sets document.domain, we recompute all those wrappers","msgtype":"m.text"},"ts":1353352932000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"yikes","msgtype":"m.text"},"ts":1353352939000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: the wrappers contain static security policy","msgtype":"m.text"},"ts":1353352942000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: no, it's awesome!","msgtype":"m.text"},"ts":1353352948000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: we can compute our security policy statically, when computing the wrapper","msgtype":"m.text"},"ts":1353352981000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: all accesses after that are super fast, because there's no dynamic check needed","msgtype":"m.text"},"ts":1353352989000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: if the security relationship ever changes, like with document.domain, we just recompute","msgtype":"m.text"},"ts":1353353006000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: it's orthogonal enough to what everyone else does that it doesn't belong in the spec. But it's really awesome for us","msgtype":"m.text"},"ts":1353353027000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: this also ties into document.domain revocation","msgtype":"m.text"},"ts":1353353049000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: it's what our system does naturally, but is very difficult for WebKit to do","msgtype":"m.text"},"ts":1353353065000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"document.domain revocation?","msgtype":"m.text"},"ts":1353353090000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I sent a spec proposal a while back. Basically, if some page grabs stuff from a same-origin page and then sets document.domain to something else, whether those references are revoked or not","msgtype":"m.text"},"ts":1353353134000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"they should not be","msgtype":"m.text"},"ts":1353353146000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"right?","msgtype":"m.text"},"ts":1353353148000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I proposed they should","msgtype":"m.text"},"ts":1353353156000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1353353161000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ew","msgtype":"m.text"},"ts":1353353162000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"nooo","msgtype":"m.text"},"ts":1353353164000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if you have an object, why make it stop working?","msgtype":"m.text"},"ts":1353353178000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's just confusing","msgtype":"m.text"},"ts":1353353183000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: because it's not same-origin anymore!","msgtype":"m.text"},"ts":1353353192000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"it's bad enough that we had to do that for document.storage","msgtype":"m.text"},"ts":1353353194000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: and it's now exposed to all kinds of malicious stuff","msgtype":"m.text"},"ts":1353353209000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: that it never agreed to","msgtype":"m.text"},"ts":1353353217000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: from a security perspective, I think it would be what people would expect","msgtype":"m.text"},"ts":1353353265000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"well i agree document.domain is a sandtrap, but this doesn't make things particularly safer. I mean, the other side now has access to your origin insofar as sending requests to your server goes, the game is more or less lost if you didn't want that.","msgtype":"m.text"},"ts":1353353274000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: well, consider this","msgtype":"m.text"},"ts":1353353303000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"i mean, you can just import the script you're worried about.","msgtype":"m.text"},"ts":1353353336000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or create an iframe that emulates the page you want access to.","msgtype":"m.text"},"ts":1353353346000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"CCs hixie on a bug","msgtype":"m.emote"},"ts":1353353353000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: bug 655649 comment 0","msgtype":"m.text"},"ts":1353353385000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: this was from abarth actually","msgtype":"m.text"},"ts":1353353401000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: the thing is, revocation is currently specced","msgtype":"m.text"},"ts":1353353442000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"only for storage","msgtype":"m.text"},"ts":1353353449000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: but _only_ if you happen to touch the Window object","msgtype":"m.text"},"ts":1353353450000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: because per spec that's the only thing that does security checks","msgtype":"m.text"},"ts":1353353464000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"that's not revocation per se, that's just, right, where the checks are","msgtype":"m.text"},"ts":1353353472000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: but those checks use the effective script orogin","msgtype":"m.text"},"ts":1353353473000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"*origin","msgtype":"m.text"},"ts":1353353474000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: well, if you have a reference to a Window, then it is revocation, because it stops working","msgtype":"m.text"},"ts":1353353494000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: but if you have a reference to a DOM node, it doesn't stop working","msgtype":"m.text"},"ts":1353353504000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: and you can waltz your way around the DOM, so long as you avoid touching any of the objects that will reexamine the script origin","msgtype":"m.text"},"ts":1353353525000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: it's totally unintuitive","msgtype":"m.text"},"ts":1353353533000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"i agree it's pretty silly, but hey, it's the web. document.domain is a bad feature, and people shouldn't use it. but it's far too late to start changing how it works, IMHO.","msgtype":"m.text"},"ts":1353353560000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: well, Opera and Gecko ship full revocation","msgtype":"m.text"},"ts":1353353581000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: against the spec","msgtype":"m.text"},"ts":1353353595000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":":-(","msgtype":"m.text"},"ts":1353353608000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and note that Gecko didn't ship full-revocation until semi-recently","msgtype":"m.text"},"ts":1353353644000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"so the position in the spec here is not particularly important for the web","msgtype":"m.text"},"ts":1353353657000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"anyway as far as Location goes, it'd be nice to have a solution that is both implementable in Gecko's model and implementable in the spec's model without introducing more crazy stuff like the WindowProxy object","msgtype":"m.text"},"ts":1353353690000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: yeah. I agree that we should spec align on security stuff. But fixing this requires would require me adding a bunch of goop to our security code to specifically waive security checks in this particular situation, which never seems like an attractive thing to spend my time on","msgtype":"m.text"},"ts":1353353705000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"yeah this whole part of the platform isn't particularly fun to work on :-)","msgtype":"m.text"},"ts":1353353734000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"either in code or in the spec, let me assure you","msgtype":"m.text"},"ts":1353353738000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: :-)I","msgtype":"m.text"},"ts":1353353765000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"how do you handle giving scripts access to Document objects but not any properties of Document objects?","msgtype":"m.text"},"ts":1353353815000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"for cross-origin Documents","msgtype":"m.text"},"ts":1353353824000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: they just get an opaque wrapper","msgtype":"m.text"},"ts":1353353832000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: that allows no property access","msgtype":"m.text"},"ts":1353353840000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: actually, _all_ cross-origin references use the same wrapper","msgtype":"m.text"},"ts":1353353862000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: er, same policy","msgtype":"m.text"},"ts":1353353870000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: which just does this: http://mxr.mozilla.org/mozilla-central/source/js/xpconnect/wrappers/AccessCheck.cpp#155","msgtype":"m.text"},"ts":1353353891000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: (when trying to access properties on it)","msgtype":"m.text"},"ts":1353353915000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: to be honest, depending on how much work it is for WebKit to reuse its WindowProxy logic, it might be easier for us to align with WebKit than the reverse","msgtype":"m.text"},"ts":1353354044000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"so basically your problem is you don't have a good way to get \"the entry script's effective script origin\" for the purpose of comparing to other origins?","msgtype":"m.text"},"ts":1353354051000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: no, we can do that. And I actually did that, for 16.0.2","msgtype":"m.text"},"ts":1353354078000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: it just runs contrary to the way everything else works","msgtype":"m.text"},"ts":1353354096000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"can it be localised enough that you can just but big \"here by dragons, don't copy this code into newer APIs\" warnings around it or something?","msgtype":"m.text"},"ts":1353354158000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if it's not much work for you to do that, i'm definitely leaning towards that kind of approach rather than a proxy","msgtype":"m.text"},"ts":1353354174000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"mostly because i don't have a good handle on how to reason about the security of a proxy","msgtype":"m.text"},"ts":1353354190000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and thath scares me","msgtype":"m.text"},"ts":1353354193000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: we can do that, sure. But I'd like to convince you that the proxy isn't actually scary","msgtype":"m.text"},"ts":1353354220000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"nobody's managed that yet for WindowProxy, but i'm definitely open for you trying :-)","msgtype":"m.text"},"ts":1353354238000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: well, do you find WindowProxy scary?","msgtype":"m.text"},"ts":1353354251000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"i consider WindowProxy to be one of the most horrific things in the web platform :-)","msgtype":"m.text"},"ts":1353354267000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it gives me headaches whenever i try to understand what a test should do","msgtype":"m.text"},"ts":1353354283000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i got the security for it working mostly by making the security not involve the proxy","msgtype":"m.text"},"ts":1353354303000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: exactly","msgtype":"m.text"},"ts":1353354308000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: the same would apply for Location","msgtype":"m.text"},"ts":1353354312000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: all I'm proposing is that we say that window.location returns a LocationProxy rather than a Location","msgtype":"m.text"},"ts":1353354326000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: that has the same behavior as WindowProxy","msgtype":"m.text"},"ts":1353354343000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: the security isn't affected from a spec level. It just lets us implement it the way we want","msgtype":"m.text"},"ts":1353354361000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: basically, saying that LocationProxy === WindowProxy.location, whatever that may be at the moment","msgtype":"m.text"},"ts":1353354398000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"so why is this not a problem for History?","msgtype":"m.text"},"ts":1353354404000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"because the security checks are in the members, not the accessing of the members?","msgtype":"m.text"},"ts":1353354434000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Yes. Again, we can (and did!) just stick C++ security checks in the getters/setters","msgtype":"m.text"},"ts":1353354463000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: but then, for example, those properties can be enumerated, which they aren't in the current world","msgtype":"m.text"},"ts":1353354492000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"(i understand that you can do both but one is nicer, i'm just trying to work out why you're not going to later say we should have HistoryProxies)","msgtype":"m.text"},"ts":1353354501000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: also, history is simple because it's not cross-origin accessible","msgtype":"m.text"},"ts":1353354539000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: I think speccing this stuff isn't that hard. IMO the biggest issue is that it's hard from WebKit to implement, and abarth says he isn't likely to do it","msgtype":"m.text"},"ts":1353354662000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"which is understandable","msgtype":"m.text"},"ts":1353354666000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: given the testing we did, jst decided that we should just align with Presto/Trident for the time being","msgtype":"m.text"},"ts":1353354691000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: since it makes things nicer for us, and we're not really close to spec consensus at this point","msgtype":"m.text"},"ts":1353354720000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"that's definitely a concern, though not one which i give much more weight than your opinion regarding the complexity it adds to your code","msgtype":"m.text"},"ts":1353354721000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that=abarth's comments about webkit","msgtype":"m.text"},"ts":1353354727000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: but the IE10 thing is interesting","msgtype":"m.text"},"ts":1353354732000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"yeah the IE10 thing definitely puts more spice into the discussion","msgtype":"m.text"},"ts":1353354743000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: if Gecko were the only engine that did things our way, I'd align with the spec","msgtype":"m.text"},"ts":1353354746000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: I don't think the same is true for WebKit","msgtype":"m.text"},"ts":1353354755000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Ms2ger or Ms3ger: can we make Anolis match on both word plus trailing \"s\" and word minus trailing \"s\"?","msgtype":"m.text"},"ts":1353354771000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bholley: it's just a cost benefit issue.  the engineering you're asking for is highly non-trivial","msgtype":"m.text"},"ts":1353354788000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"Ms2ger or Ms3ger: because that would save a lot of typing (and fixing)","msgtype":"m.text"},"ts":1353354790000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bholley: i don't give much weight to arguments along the lines of \"even if we're the only ones left, we'll never change!\", because i feel that's more like hostage taking than negotiation.","msgtype":"m.text"},"ts":1353354801000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"bholley: but i don't think that's what webkit peeps are saying","msgtype":"m.text"},"ts":1353354817000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh hey, a wild abarth appears!","msgtype":"m.text"},"ts":1353354823000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"abarth: I understand, and am not blaming you","msgtype":"m.text"},"ts":1353354851000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"abarth: we'd do it because the engineering on our side would likely be simpler","msgtype":"m.text"},"ts":1353354869000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"bholley: if you wrote a patch that implement the behavior, i'd be happy to review it.  I'm just being honest and telling you that the folks with the expertise to make such a change aren't likely to see enough benefit to outweigh the other things they could spend their time on","msgtype":"m.text"},"ts":1353354877000,"senderName":"abarth","senderId":"abarth@irc"},
{"content":{"body":"bholley: ignoring implementation complexity for now, since it seems that argument can be drawn in all directions (especially given IE10), it does seem like from an author's perspective the proxy thing would be net worse than having different Location objects for each Document","msgtype":"m.text"},"ts":1353354899000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: how come?","msgtype":"m.text"},"ts":1353354916000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"bholley: well, say you have a Document, and you grab it's Location and decide you're going to shim in support for anne's new methods","msgtype":"m.text"},"ts":1353354949000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"bholley: and then later you navigate that iframe to a different page on the same origin","msgtype":"m.text"},"ts":1353354965000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"bholley: suddenly your shims are gone","msgtype":"m.text"},"ts":1353354969000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"bholley: but it's the \"same object\"","msgtype":"m.text"},"ts":1353354981000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"bholley: then the user hits back, and your shims are suddenly back","msgtype":"m.text"},"ts":1353354989000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"bholley: i think it'd be really confusing","msgtype":"m.text"},"ts":1353354994000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: no, they're not back","msgtype":"m.text"},"ts":1353354999000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"they'd be back if it worked like Window","msgtype":"m.text"},"ts":1353355006000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but if tehy're not back that's even more confusing :-)","msgtype":"m.text"},"ts":1353355017000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: my proposal was to  clear expandos on each navigation, which seemed the most sane","msgtype":"m.text"},"ts":1353355018000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"i meant changes to the Location interface object, not the instance","msgtype":"m.text"},"ts":1353355036000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: oh, the interface object would stay, yeah","msgtype":"m.text"},"ts":1353355047000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"permanently clearing the properties set on the object seems bad too, though","msgtype":"m.text"},"ts":1353355077000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: welll...","msgtype":"m.text"},"ts":1353355093000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: currently, if you go back/forward, whether your properties persist on Window or not depends on whether the page persisted","msgtype":"m.text"},"ts":1353355114000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: though I guess in this case we're only discussing the persisted case","msgtype":"m.text"},"ts":1353355144000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"bholley: having the Window object's prototype chain change when you navigate is weird enough, having a Location object change when you navigate seems even worse","msgtype":"m.text"},"ts":1353355230000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"bholley: if it wasn't for implementation ease, do you agree that we wouldn't design the API this way?","msgtype":"m.text"},"ts":1353355259000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: well, I think the current spec language is the sanest way to design the API","msgtype":"m.text"},"ts":1353355334000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: once we're stuck with the constraint that the object operates on the active browsing context…iunno","msgtype":"m.text"},"ts":1353355352000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: but I am not the expert on that part","msgtype":"m.text"},"ts":1353355374000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"i think officially i'm supposed to be, but hell if i know","msgtype":"m.text"},"ts":1353355389000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: (API design for web authors)","msgtype":"m.text"},"ts":1353355392000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"i think i'm leaning towards the webkit model, but i hope you don't feel i'm ignoring your feedback here. it just seems that the arguments are slightly in that direction.","msgtype":"m.text"},"ts":1353355456000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'll respond to the thread in more detail this afternoon.","msgtype":"m.text"},"ts":1353355519000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I don't feel that way. I'm probably not the best person to be thinking about this from a spec level though. Can we send mail and let bz weight in?","msgtype":"m.text"},"ts":1353355528000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Hixie: ok great","msgtype":"m.text"},"ts":1353355537000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"definitely always want more input from bz :-)","msgtype":"m.text"},"ts":1353355556000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ok i gotta go. bbl. thanks for walking me through this.","msgtype":"m.text"},"ts":1353355567000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: no problem - thanks for your help/interest here :-)","msgtype":"m.text"},"ts":1353355583000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"oh browsers, y u silly","msgtype":"m.text"},"ts":1353355773000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"input http://%80","msgtype":"m.text"},"ts":1353355780000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Chrome: fatal error, nonetheless modifies input to http://%EF%BF%BD/","msgtype":"m.text"},"ts":1353355803000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Safari: no problem, but outputs host as � (presumably trying to decode byte using utf-8)","msgtype":"m.text"},"ts":1353355849000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Firefox: no problem, outputs host as %80","msgtype":"m.text"},"ts":1353355867000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Opera: fatal error, with its usual weird opera:illegal-url-* bullshit","msgtype":"m.text"},"ts":1353355898000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I suspect Internet Explorer does something else, but who knows","msgtype":"m.text"},"ts":1353355920000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but if input is http://%80†","msgtype":"m.text"},"ts":1353356507000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Opera: no problem, xn--%80-mp0a","msgtype":"m.text"},"ts":1353356521000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Safari: no problem, but same problem, outputs xn--�-mp0a","msgtype":"m.text"},"ts":1353356552000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Chrome: fatal error, same problem, http://%EF%BF%BD%E2%84%A2/\t","msgtype":"m.text"},"ts":1353356581000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oops, http://%EF%BF%BD%E2%80%A0/","msgtype":"m.text"},"ts":1353356594000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Firefox: no problem, outputs xn--%80-mp0a","msgtype":"m.text"},"ts":1353356620000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"IE10: This page can't be displayed (for http://%80 )","msgtype":"m.text"},"ts":1353356642000,"senderName":"a-ja","senderId":"a-ja@irc"},
{"content":{"body":"a-ja: ah yeah, you need to use some kind of inspector thingie in the DOM for results","msgtype":"m.text"},"ts":1353356760000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"IE10: Windows cannot find 'http://%80†'. Check the spelling and try again.....in an Address Bar popup","msgtype":"m.text"},"ts":1353356820000,"senderName":"a-ja","senderId":"a-ja@irc"},
{"content":{"body":"a-ja: use http://dump.testsuite.org/url/inspect.html","msgtype":"m.text"},"ts":1353357002000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"a-ja: the URLs themselves don't resolve in this case, the question is more what happens with them in the DOM and what kind of DNS lookup might happen in the end","msgtype":"m.text"},"ts":1353357182000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tool wont take addy with †","msgtype":"m.text"},"ts":1353357219000,"senderName":"a-ja","senderId":"a-ja@irc"},
{"content":{"body":"not sure what you mean?","msgtype":"m.text"},"ts":1353357277000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"using that tool with http://%80† url typed in gives me nada","msgtype":"m.text"},"ts":1353357407000,"senderName":"a-ja","senderId":"a-ja@irc"},
{"content":{"body":"ah okay, thanks","msgtype":"m.text"},"ts":1353357428000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm, Opera's display of IDNA versus non-display of IDNA leaks into the DOM","msgtype":"m.text"},"ts":1353358913000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"%C3%A0 becomes é and %C3%A0% becomes xn--%-rfa","msgtype":"m.text"},"ts":1353358939000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh, but %41% is an invalid URL","msgtype":"m.text"},"ts":1353358982000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wtf Opera","msgtype":"m.text"},"ts":1353358987000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"looks like denying U+FFFD might be http://tools.ietf.org/html/rfc3454#appendix-C.6","msgtype":"m.text"},"ts":1353362589000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"which is via various references part of IDNA2003","msgtype":"m.text"},"ts":1353362606000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"must be missing some context because he doesn't know what annevk and TabAtkins were talking about earlier re arrays, maps, and things","msgtype":"m.emote"},"ts":1353363514000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Hixie, pong","msgtype":"m.text"},"ts":1353363545000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: for ES6 Map, have a way to subclass that including overriding argument types","msgtype":"m.text"},"ts":1353363568000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heycam: for ES Array, have a way to subclass that in similar manner, so you can e.g. do url.segments[2] = \"partOfPath\" (which will get some pre-processing on setting and affects the url object)","msgtype":"m.text"},"ts":1353363633000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, we do?","msgtype":"m.text"},"ts":1353363651000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"oh sorry, I accidentally a word","msgtype":"m.text"},"ts":1353363660000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"the whole thing with subclassing arrays, I was kind of waiting for the ES spec to make that possible before trying something like that","msgtype":"m.text"},"ts":1353363695000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: http://lists.w3.org/Archives/Public/public-whatwg-archive/2012Nov/0235.html","msgtype":"m.text"},"ts":1353363733000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heycam: I see, TabAtkins tells me it's already possible...","msgtype":"m.text"},"ts":1353363746000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I am out of date then!","msgtype":"m.text"},"ts":1353363751000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"well or TabAtkins is in the future","msgtype":"m.text"},"ts":1353363766000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ha","msgtype":"m.text"},"ts":1353363772000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"wonders what it would mean to call the proto's get/set on a subclassed map","msgtype":"m.emote"},"ts":1353363784000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"I'm a little sceptic there's a lot of value to be gained here, but who knows","msgtype":"m.text"},"ts":1353363866000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what API is this wanted for btw?","msgtype":"m.text"},"ts":1353363887000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Map is wanted for URLQuery: http://url.spec.whatwg.org/#urlquery","msgtype":"m.text"},"ts":1353363906000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Array might be wanted for non-existing URLSegments or some such","msgtype":"m.text"},"ts":1353363934000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heycam: oh, and if you're short on things to do, there's a question on \"throw\" in https://www.w3.org/Bugs/Public/show_bug.cgi?id=19110 and one on optional arguments versus dictionaries in https://www.w3.org/Bugs/Public/show_bug.cgi?id=19646","msgtype":"m.text"},"ts":1353364044000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, would URLQuery.set do some validation on the value you pass in? so it doesn't contain a \"&\" character or something?","msgtype":"m.text"},"ts":1353364056000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"shorrt on things to do, right :)","msgtype":"m.text"},"ts":1353364069000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: it would probably transform certain characters","msgtype":"m.text"},"ts":1353364096000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heycam: percent encode them or some such","msgtype":"m.text"},"ts":1353364117000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so I am wondering whether subclassing is the right relationship for the URLQuery, if we want to prevent certain characters from getting into the map without being transformed","msgtype":"m.text"},"ts":1353364128000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"we probably want to use the same interface as Map, but not be a subclass of Map -- more like we want to wrap an internal map that you can't get to","msgtype":"m.text"},"ts":1353364151000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"sorry to do this to you, but would you mind mailing or filing a bug about the Map thing?","msgtype":"m.text"},"ts":1353364225000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"will work on a few webidl bugs later this week -- I'll put the above bugs 19110 and 19646 on my list to do","msgtype":"m.emote"},"ts":1353364275000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: yeah can do (I'm not really sure subclassing Map is the right solution either, maybe I'll post to the whatwg list about it again with some of the requirements and see if that makes it still a good approach)","msgtype":"m.text"},"ts":1353364289000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heycam: ta","msgtype":"m.text"},"ts":1353364308000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah if you can tease those things out first before I plunge into doing Map stuff in the spec, that would be good","msgtype":"m.text"},"ts":1353364320000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: The reason to subclass Map is to, well, have a Map.  So people with code that expects to take a Map can do the obvious test (foo instanceof Map) and have it work correctly.","msgtype":"m.text"},"ts":1353365056000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"heycam: AWB has JS code on the thread in WHATWG about how you would do it in ES5 or in ES6-with-classes.","msgtype":"m.text"},"ts":1353365086000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"heycam: It's pretty trivial.","msgtype":"m.text"},"ts":1353365094000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"does it matter that calling Map.__proto__.set on the subclassed map will subvert the argument checking?","msgtype":"m.text"},"ts":1353365129000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1353365133000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Map.prototype.set","msgtype":"m.text"},"ts":1353365136000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"I recommend *actually* setting a hidden internal Map, so it's safe from outside manipulation.","msgtype":"m.text"},"ts":1353365165000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, ok. but we would still have the outer one being a real Map, even though it doesn't use its Map-ness?","msgtype":"m.text"},"ts":1353365199000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Yes.  The Map-ness is used for type checks, mostly.","msgtype":"m.text"},"ts":1353365224000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Or only, I guess.","msgtype":"m.text"},"ts":1353365232000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so I could imagine code that expects, if it is \"instanceof Map\", that calling Map.protoype.get on it will do something useful","msgtype":"m.text"},"ts":1353365259000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"But still, when I need to distinguish code-paths by type, I use instanceof checks.  Having DOM types pass the most appropriate basic ES type is useful.","msgtype":"m.text"},"ts":1353365264000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"...why would anyone do that, rather than just calling get on the object itself?","msgtype":"m.text"},"ts":1353365291000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"well I don't know, but it seems like something that should work if an object \"is a Map\"","msgtype":"m.text"},"ts":1353365313000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"I guess it comes down to what you think \"instanceof Map\" implies","msgtype":"m.text"},"ts":1353365327000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"That sort of thing only makes sense in general if you are *actually* a Map, not a subclass of.","msgtype":"m.text"},"ts":1353365347000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You must assume that subclasses have overridden the methods with something useful.","msgtype":"m.text"},"ts":1353365362000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"instanceof implies that Map's prototype is *somewhere* in your object's prototype chain.","msgtype":"m.text"},"ts":1353365382000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"sure, but that doesn't mean that calling .get() on the object will do you want either","msgtype":"m.text"},"ts":1353365412000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"it *probably* will...","msgtype":"m.text"},"ts":1353365416000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"If it doesn't act more-or-less like a Map, then you've obviously broken the type contract and deserve pain.","msgtype":"m.text"},"ts":1353365448000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"URLQuery does indeed act like a Map.  It just coerces its key and value to strings first.","msgtype":"m.text"},"ts":1353365463000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I guess I was thinking that calling Map.prototype.get on it is something that is part of the contract","msgtype":"m.text"},"ts":1353365479000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"That seems like a silly thing to expect.  ^_^  It basically assumes that the object never overrides any of the superclass's methods.","msgtype":"m.text"},"ts":1353365519000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It's true if you subscribe to the very strictest idea of when it is appropriate to \"subclass\" (when the subclass is *literally indistinguishable* from the superclass, using operations that the superclass provides), but not in most of the real world.","msgtype":"m.text"},"ts":1353365571000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"right, that is how I was thinking about it","msgtype":"m.text"},"ts":1353365610000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Normal people don't think about it that way. ^_^","msgtype":"m.text"},"ts":1353365624000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ha","msgtype":"m.text"},"ts":1353365628000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"to me, it feels like you want to state that URLQuery implements a Map interface, and that the JS Map object is actually a concrete class","msgtype":"m.text"},"ts":1353365666000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"but that's not really how JS works","msgtype":"m.text"},"ts":1353365682000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"That's an acceptable definition of \"subclass\" in JS terms.","msgtype":"m.text"},"ts":1353365690000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If you pretend that objects can only have a single interface. ^_^","msgtype":"m.text"},"ts":1353365712000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(A proper interface system would be very welcome, but doesn't exist as of yet.)","msgtype":"m.text"},"ts":1353365726000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"the end result of this is that you need to be careful about defining what happens when you do call the super methods on your subclassed object","msgtype":"m.text"},"ts":1353365751000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"but if that's the way things are, ok","msgtype":"m.text"},"ts":1353365755000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"TabAtkins, it does seem a bit funny to subclass Map only to not use its Mapness, but to have a hidden Map instance that it forwards calls to though","msgtype":"m.text"},"ts":1353365880000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"If JS had a better way to type-check (or rather, interface-check), I'd advocate that, instead of overloading subclassing to achieve it. :/","msgtype":"m.text"},"ts":1353365910000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"is partial to branding with Symbols.","msgtype":"m.emote"},"ts":1353365921000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah it's kind of a hack to inherit from Map just to make your own object look like a Map","msgtype":"m.text"},"ts":1353365977000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"We should probably ping es-discuss explicitly about this, actually.","msgtype":"m.text"},"ts":1353366062000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So we're not just making decisions based on what I think is best.","msgtype":"m.text"},"ts":1353366071000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1353366079000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"goes to do it.","msgtype":"m.emote"},"ts":1353366080000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1353366087000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"duck typing tends to make more sense than actual inheritance, unless the interface is actually meant as a base class","msgtype":"m.text"},"ts":1353366513000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i guess that depends on whether you care about having messing around with the prototype of Map work here too","msgtype":"m.text"},"ts":1353366569000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"heycam: so Location has a bunch of members that need to be [Unforgeable], but Anne is planning on providing me an interface that I am to import using \"Location implements ...\" that also need to be unforgeable.","msgtype":"m.text"},"ts":1353366588000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"heycam: do you wish to support this natively in webidl or should we just put the annotation on each attribute?","msgtype":"m.text"},"ts":1353366604000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"zewt: Yeah, that's what I'm typing up in this question to es-discuss.","msgtype":"m.text"},"ts":1353366626000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie, so all the members on this imported interface are unforgeable? or just some?","msgtype":"m.text"},"ts":1353366637000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Hixie, and are they meant to be unforgeable on one object but not another?","msgtype":"m.text"},"ts":1353366652000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"yeah, they'll be forgeable on HTMLAnchorElement","msgtype":"m.text"},"ts":1353366763000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: ^","msgtype":"m.text"},"ts":1353366765000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: are they all unforgeable?","msgtype":"m.text"},"ts":1353366774000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, so maybe you need a way on the implements statement to indicate which (or that all) of them are unforgeable","msgtype":"m.text"},"ts":1353366804000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"[Unforgeable] Location implements Blah;   or   [Unforgeable=foo1,foo2] Location implements Blah;","msgtype":"m.text"},"ts":1353366824000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"could do that, yeah","msgtype":"m.text"},"ts":1353366835000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I thought there was some requirement for them to all be unforgeable?","msgtype":"m.text"},"ts":1353366875000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: but I don't know the specifics","msgtype":"m.text"},"ts":1353366882000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok let's assume it's all of them","msgtype":"m.text"},"ts":1353366915000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and all on Location, too","msgtype":"m.text"},"ts":1353366918000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"as well as valueOf","msgtype":"m.text"},"ts":1353366921000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: URLQuery has get/getAll(), might want add(), and set() does something special with the value","msgtype":"m.text"},"ts":1353366959000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if that's the case then we could just stick [Unforgeable] on interface Location and make that mean all its members are, even if they're from an \"implements\"","msgtype":"m.text"},"ts":1353366968000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: Sent the email.","msgtype":"m.text"},"ts":1353366969000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"heycam: i think it'd be better to just have it on the Location interface and have it mean that everything is unforgeable, including any \"implements\"-imported members","msgtype":"m.text"},"ts":1353366970000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins, great!","msgtype":"m.text"},"ts":1353366972000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: right","msgtype":"m.text"},"ts":1353366975000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1353366977000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: ok","msgtype":"m.text"},"ts":1353367000000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"heycam: i'll assume that then. thanks. :-)","msgtype":"m.text"},"ts":1353367008000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, there are still other attribute-specific [Unforgeable] things yes?","msgtype":"m.text"},"ts":1353367011000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"TabAtkins: get/getAll() probably need to do something special with the argument too","msgtype":"m.text"},"ts":1353367013000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so we can't get rid of that?","msgtype":"m.text"},"ts":1353367016000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: yeah, e.g. in particular Document.location :-)","msgtype":"m.text"},"ts":1353367024000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ha yes ok :)","msgtype":"m.text"},"ts":1353367031000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"TabAtkins: to deal with percent-encoding and such","msgtype":"m.text"},"ts":1353367033000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah, whatever we do for set() should have similar implications for the other methods.","msgtype":"m.text"},"ts":1353367061000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I just wonder what the benefit is of it being a subclass at that point","msgtype":"m.text"},"ts":1353367086000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The fact that it massages its inputs doesn't change the fact that it acts just like a Map, and most generic Map-manipulating functions would be able to use it without trouble.","msgtype":"m.text"},"ts":1353367122000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And if that's the case, you want it to be reasonably robust against type-checking.","msgtype":"m.text"},"ts":1353367138000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"doesn't the get/getAll thing make it not like a map?","msgtype":"m.text"},"ts":1353367152000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Nope, if you interact solely through the Map methods, it's just like a normal Map.","msgtype":"m.text"},"ts":1353367173000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"and that the underlying string is an ordered list of key/value pairs which can have duplicate keys?","msgtype":"m.text"},"ts":1353367179000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the duplicate keys are significant","msgtype":"m.text"},"ts":1353367202000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie, do we have anything currently that requires toString and/or valueOf to be unforgeable on Location?","msgtype":"m.text"},"ts":1353367210000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"annevk: Yeah, that's fine.  Generic Map-manipulating functions will probably not see the duplicate entries, but that's okay.","msgtype":"m.text"},"ts":1353367269000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"then they can't handle typical <form> scenarios...","msgtype":"m.text"},"ts":1353367293000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: That's fine.  No duplicate keys is also common, after all.  It's fine to have some cases fail when passed to generic code.","msgtype":"m.text"},"ts":1353367343000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1353367363000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, heycam, still want that email?","msgtype":"m.text"},"ts":1353367370000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess you do","msgtype":"m.text"},"ts":1353367374000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"will write it later","msgtype":"m.emote"},"ts":1353367380000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah. thanks.","msgtype":"m.text"},"ts":1353367385000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Hopefully ES will sprout a core MultiMap soonish (after impls get Map implemented), so URLQuery can change to being that instead.","msgtype":"m.text"},"ts":1353367388000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(with MultiMap being a subclass of Map)","msgtype":"m.text"},"ts":1353367399000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie, https://www.w3.org/Bugs/Public/show_bug.cgi?id=20008 for the [Unforgeable] thing","msgtype":"m.text"},"ts":1353367551000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: fwiw, you already reached that conclusion before: http://lists.w3.org/Archives/Public/public-script-coord/2012JulSep/0153.html","msgtype":"m.text"},"ts":1353368150000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"man what a short memory I have","msgtype":"m.text"},"ts":1353368168000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"but a consistent one at least? :)","msgtype":"m.text"},"ts":1353368175000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"I think that's why I never replied to that thread to say we need it for URLUtils","msgtype":"m.text"},"ts":1353368178000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heycam: hopefully this time it ends up in the spec :p","msgtype":"m.text"},"ts":1353368222000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah. unfortunately I don't have a page like Hixie's showing which mails to the list I've dealt with yet. (although I would reply on the thread when I have...)","msgtype":"m.text"},"ts":1353368263000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: you mean does the spec say that yes? if so, not to my knowledge.","msgtype":"m.text"},"ts":1353368564000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"s/yes/yet/","msgtype":"m.text"},"ts":1353368572000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, ok. seems in that mail annevk linked to I already said that should be implied by [Unforgeable] on the interface.","msgtype":"m.text"},"ts":1353368592000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"annevk: that time, heycam thought he'd be able to remove the one on members as well","msgtype":"m.text"},"ts":1353368602000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: this time, we're talking about just adding a new feature, leaving the old one","msgtype":"m.text"},"ts":1353368616000,"senderName":"Hixie","senderId":"Hixie@irc"}
]