[
{"content":{"body":"I'm pretty sure I've seen such","msgtype":"m.text"},"ts":1424390409000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"https://bugs.webkit.org/show_bug.cgi?id=49739","msgtype":"m.text"},"ts":1424390424000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"We were trying to fix it pre-fork.  I assume people on that side are also at least somewhat interested in fixing it.","msgtype":"m.text"},"ts":1424390517000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Problem is that we micro-optimized ourself into a corner, so it's hard to fix without perf regressions on popular benchmarks.","msgtype":"m.text"},"ts":1424390538000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"especially now if blink has the fix too","msgtype":"m.text"},"ts":1424390540000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I could be wrong, but I think bz got gecko's attribute handling performance to be between webkit and blink while those two were using the wrong attribute setup, and gecko had the one spec'ed","msgtype":"m.text"},"ts":1424390613000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(IIRC webkit is the fastest, at least in some microbenchmarks )","msgtype":"m.text"},"ts":1424390657000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"TabAtkins: I hope the lesson has been learned about avoiding that \"micro-optimized ourself into a corner\" trap, so that another 5-year saga like this one doesn't end up happening again","msgtype":"m.text"},"ts":1424391870000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"smaug____: thanks","msgtype":"m.text"},"ts":1424391887000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I am fuzzy on the details but I kind of remember recent WebKit releases doing halfway steps on this","msgtype":"m.text"},"ts":1424392901000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"e.g. now they return getter/setters on introspection, but those getter/setters are very broken","msgtype":"m.text"},"ts":1424392914000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so if we interpret that optimistically then they are probably trying to move toward a fix","msgtype":"m.text"},"ts":1424392927000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah there are some details along those lines in comments of the https://bugs.webkit.org/show_bug.cgi?id=49739 bug that smaug cited","msgtype":"m.text"},"ts":1424393476000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and at https://bugs.webkit.org/show_bug.cgi?id=141585","msgtype":"m.text"},"ts":1424393479000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://bugs.webkit.org/show_bug.cgi?id=140575","msgtype":"m.text"},"ts":1424393497000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"[18:40]  <MikeSmith> I guess it at least affects the case where somebody's monkey-patching the prototype? << i brought up the webidl question because of a library being broken in webkit, assuming that little conversation followed from that","msgtype":"m.text"},"ts":1424393708000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"caitp-: ah ok","msgtype":"m.text"},"ts":1424393725000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hixie: ping","msgtype":"m.text"},"ts":1424413640000,"senderName":"strugee","senderId":"strugee@irc"},
{"content":{"body":"we were going to talk about developers.whatwg.org?","msgtype":"m.text"},"ts":1424413671000,"senderName":"strugee","senderId":"strugee@irc"},
{"content":{"body":"espadrine: that's a bug","msgtype":"m.text"},"ts":1424415129000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: status of converting DOM?","msgtype":"m.text"},"ts":1424415279000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I think the strategy of forever pending and maybe adding rejecting later is okay, though bz brings up a valid point","msgtype":"m.text"},"ts":1424419365000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: \"[I]s this sufficient to actually build a browser on top of fetch? How is the browser expected to implement things like the stop button or the request-killing on navigation, if not by effectively calling terminate() on all the fetches involved?\"","msgtype":"m.text"},"ts":1424419392000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: your last tweet fails at grammar","msgtype":"m.text"},"ts":1424426402000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"...","msgtype":"m.text"},"ts":1424428604000,"senderName":"Seplonger","senderId":"Seplonger@irc"},
{"content":{"body":"I should maybe write a post about CORS since the amount of people not grokking the same-origin policy is disturbing","msgtype":"m.text"},"ts":1424430186000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: are you around this evening for a call about SW clients & postmessage? Monday otherwise?","msgtype":"m.text"},"ts":1424430619000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":" /quit","msgtype":"m.text"},"ts":1424431672000,"senderName":"strugee","senderId":"strugee@irc"},
{"content":{"body":"JakeA: yeah, can do, though I don't really have any new thoughts","msgtype":"m.text"},"ts":1424434969000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin, TabAtkins sold his house in Texas, IIRC","msgtype":"m.text"},"ts":1424436869000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"oh, I see","msgtype":"m.text"},"ts":1424436882000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"annevk: yeah. it's annoying when a tweet becomes nonsensical due to proof reading failure after editing for 140 characters","msgtype":"m.text"},"ts":1424438156000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"annevk: also annoying to notice it after it has a reply","msgtype":"m.text"},"ts":1424438172000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":": Superfluous Patterns of Javascript -> http://h3manth.com/new/blog/2015/superfluous-patterns-of-javascript/","msgtype":"m.emote"},"ts":1424440017000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"Ms2ger: ??? What's the relevance of my house?","msgtype":"m.text"},"ts":1424445296000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Never mind, I see.","msgtype":"m.text"},"ts":1424445330000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"http://dev.w3.org/csswg/css-font-loading/ Is there a friendly guide out there to using this? I have a knack for hanging the entire browser when I pass a second parameter into new FontFace","msgtype":"m.text"},"ts":1424445930000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"A third parameter, rather. e.g. new FontFace(family, source, descriptor); where name is “Balto”, source is ‘local(“Balto”)’ and descriptor is { weight: ‘bold’ }. Totally hangs the page. Is it the browser, or am I not following the spec?","msgtype":"m.text"},"ts":1424446092000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"JakeA: just checking in to make sure you locked yourself in a room and wrote your talk","msgtype":"m.text"},"ts":1424450475000,"senderName":"terinjokes","senderId":"terinjokes@irc"},
{"content":{"body":"terinjokes: I'm still massively behind, so I'll be working the weekend :/","msgtype":"m.text"},"ts":1424451146000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: bummer, but no worries","msgtype":"m.text"},"ts":1424451355000,"senderName":"terinjokes","senderId":"terinjokes@irc"},
{"content":{"body":"annevk: OK, that makes me want to add rejectWith out of the gate","msgtype":"m.text"},"ts":1424451397000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I did some mental flailing around fetchPromise https://github.com/slightlyoff/ServiceWorker/issues/625#issuecomment-75217729 - am I anywhere near?","msgtype":"m.text"},"ts":1424451769000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: hah","msgtype":"m.text"},"ts":1424452310000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what ever happened to the network infor api?","msgtype":"m.text"},"ts":1424453528000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"fell off the face of the earth?","msgtype":"m.text"},"ts":1424453539000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"overdesigned to the point of bloat death?","msgtype":"m.text"},"ts":1424453570000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"looks pretty small as these things go, actually","msgtype":"m.text"},"ts":1424453632000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"The use cases were not compelling I believe","msgtype":"m.text"},"ts":1424453768000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Been a while","msgtype":"m.text"},"ts":1424453771000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"strugee: here onw","msgtype":"m.text"},"ts":1424453856000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"now","msgtype":"m.text"},"ts":1424453857000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk it looks like it's implemented perfectly happy on mobile devices, are you saying service worker was probably a better approach?","msgtype":"m.text"},"ts":1424454026000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"annevk - the simple common use-case is, don't burn my mobile data with background network updates and crap.","msgtype":"m.text"},"ts":1424454056000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"ergo, the simple v0 API should be a boolean - navigator.NetworkInfo.IsMetered()","msgtype":"m.text"},"ts":1424454074000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"annevk: btw did you see the web intents post-mortem post?","msgtype":"m.text"},"ts":1424454118000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but noooooooo, people had to go and add all kinds of lower level plumbing details that frankly no real world web app builder actually cares about.","msgtype":"m.text"},"ts":1424454119000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"note that latest Android OS has this exact boolean feature for app devs, INCLUDING, a UI for users to toggle whether any particular wifi SSID is metered or not.","msgtype":"m.text"},"ts":1424454192000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"that really is all you need to cover the common use-case noted above. and that's all that a v0 network info api should include, ship, get interop on.","msgtype":"m.text"},"ts":1424454229000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"shove all the rest of the net info details to the next version","msgtype":"m.text"},"ts":1424454243000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"that does seem pretty reasonable","msgtype":"m.text"},"ts":1424454251000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"Hixie: from Paul? I did","msgtype":"m.text"},"ts":1424454252000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: cool","msgtype":"m.text"},"ts":1424454257000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"catip - it's too reasonable to actually succeed in a discussion beyond 2-3 people.","msgtype":"m.text"},"ts":1424454266000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Hixie: having said that, I still haven't really cracked a flow that works well","msgtype":"m.text"},"ts":1424454271000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"then everyone starts yanking out their pet armchair dev requirements / wishlists etc.","msgtype":"m.text"},"ts":1424454283000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Hixie: one of the big problems is also convincing service providers that they want decentralization","msgtype":"m.text"},"ts":1424454288000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: heh yeah","msgtype":"m.text"},"ts":1424454295000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: e.g. I Facebook and Twitter and such seem quite content with all the promotion across millions of properties","msgtype":"m.text"},"ts":1424454317000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, you probably don't need to care exactly how your connection works, but you probably want to have some idea of whether it's a weak or strong connection","msgtype":"m.text"},"ts":1424454323000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"s/I//","msgtype":"m.text"},"ts":1424454325000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i can see people wanting that :>","msgtype":"m.text"},"ts":1424454371000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"catip - \"can see people wanting\" is a horrible way to design anything","msgtype":"m.text"},"ts":1424454446000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Hixie: perhaps the way out is continuing to provide easy ways for sites to collaborate and share data client-side and hope patterns emerge","msgtype":"m.text"},"ts":1424454447000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, i dunno. just thought it was an interesting and candid post-mortem.","msgtype":"m.text"},"ts":1424454466000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: with good lessons.","msgtype":"m.text"},"ts":1424454473000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: e.g. cross-origin workers, the service worker to service worker messaging","msgtype":"m.text"},"ts":1424454484000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: yeah, that was real cool of him","msgtype":"m.text"},"ts":1424454505000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: on my to-do list for today :)","msgtype":"m.text"},"ts":1424454953000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: no rush, I'm sure it's full of fundamental misunderstandings","msgtype":"m.text"},"ts":1424455285000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Anyone know anything about the Chromium CI setup?","msgtype":"m.text"},"ts":1424455470000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Specifically which servers / ports are avaliable / default","msgtype":"m.text"},"ts":1424455490000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"tantek: Some apps on my phone act differently on wifi vs cell, even when both are unmetered.","msgtype":"m.text"},"ts":1424456932000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins - interesting. which apps, and do you know how they tell? (i.e. do they measure the bandwidth, do they query a proprietary API?)","msgtype":"m.text"},"ts":1424456964000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"TabAtkins: DOM ping?","msgtype":"m.text"},"ts":1424456973000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and what different behavior(s)?","msgtype":"m.text"},"ts":1424456974000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"JonathanNeal: If you're getting browser hangs for any reason, it's a bug.  In your partiucular case, it's *definitely* a bug.","msgtype":"m.text"},"ts":1424456974000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"tantek: G+ gives me the option to only photo-sync while on wifi.","msgtype":"m.text"},"ts":1424457000000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: Gonna try to finish today. :/ If you have any edits you need to make, though, feel free; I'll take the merge pain myself.","msgtype":"m.text"},"ts":1424457021000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: nah, I'll be patient","msgtype":"m.text"},"ts":1424457055000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: I hope that means non-metered wifi, otherwise it's still a problem","msgtype":"m.text"},"ts":1424457059000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"TabAtkins: though with continued nagging :p","msgtype":"m.text"},"ts":1424457067000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I mean, I guess it matters what you mean by \"metered\". I don't pay per Mb or anything, but I do have a 2.5Gb/month limit.","msgtype":"m.text"},"ts":1424457077000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: That works too. ^_^","msgtype":"m.text"},"ts":1424457083000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"tantek: And yes, wifi is non-metered.","msgtype":"m.text"},"ts":1424457089000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"well, it depends","msgtype":"m.text"},"ts":1424457212000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"sometimes paid wifi gives you N megabytes, sometimes N minutes","msgtype":"m.text"},"ts":1424457238000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"you wouldn't want to waste bandwidth on stuff you don't need","msgtype":"m.text"},"ts":1424457262000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"JakeA: Domenic: thanks for laying the groundwork on all the subclassing questions","msgtype":"m.text"},"ts":1424457450000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: cool. Do you have that preference panel where you can toggle a switch next to each SSID as to whether it is metered or not?","msgtype":"m.text"},"ts":1424457485000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"annevk: I'm all about the questions. Answers… not so much","msgtype":"m.text"},"ts":1424457485000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I think it's in the latest Android OS update","msgtype":"m.text"},"ts":1424457489000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"(pretty new)","msgtype":"m.text"},"ts":1424457494000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"annevk: So I was thinking about terminate() again, and I think GTOR is right - a cancelable thing is a Task, not a Promise. Luckily, a Task is a Promise subclass (I think it's literally a Liskov subclass, but even if not, it ducktypes as such).","msgtype":"m.text"},"ts":1424457508000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"caipt - correct on both accounts","msgtype":"m.text"},"ts":1424457512000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"JakeA: FWIW, with regards to AbortablePromise, the idea was to have FetchPromise and terminate() as method, and then introduce the more generic variant as a class inbetween later","msgtype":"m.text"},"ts":1424457514000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"caitp","msgtype":"m.text"},"ts":1424457518000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"wfm","msgtype":"m.text"},"ts":1424457527000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"All this really means is that chaining off of a Task returns Promises; you need a separate explicitly cloning method to return a Task with the same special abilities as the original one.","msgtype":"m.text"},"ts":1424457546000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So yeah, FetchPromise.then() returns a Promise, nice and easy.","msgtype":"m.text"},"ts":1424457569000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: interesting idea","msgtype":"m.text"},"ts":1424457584000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: I'm not sure that's how promise subclasses work though","msgtype":"m.text"},"ts":1424457595000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It isn't","msgtype":"m.text"},"ts":1424457602000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"at the moment","msgtype":"m.text"},"ts":1424457606000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"TabAtkins: don't they do new this.constructor for .then()?","msgtype":"m.text"},"ts":1424457609000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tantek: No, I have no such toggle.","msgtype":"m.text"},"ts":1424457609000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"They get their constructor from @@species, so I guess FetchPromise could set its @@species to Promise","msgtype":"m.text"},"ts":1424457650000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"For predictability, though, you should have a way to convert Tasks into Promises; a Task is a Promise you can fuck with, and that's not an ability you want to give out normally.","msgtype":"m.text"},"ts":1424457662000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hmmm… ok then maybe I was looking at something beta. Um ok I won't say on who's device then. TabAtkins perhaps ask a co-worker to see their list of SSIDs preference screen on their Android ;)","msgtype":"m.text"},"ts":1424457666000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"But I like the idea of fetch(url).then(r => r.json()) being abortable","msgtype":"m.text"},"ts":1424457678000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Not all Promise subclasses are Tasks; most can reconstruct an instance of the same class no problem.","msgtype":"m.text"},"ts":1424457679000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"JakeA: I guess you'd have to do fetch(url).specialThen(...) instead","msgtype":"m.text"},"ts":1424457708000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: if we adopt this Task idea","msgtype":"m.text"},"ts":1424457717000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If we wanna be decent about the theoretics of this, yeah.","msgtype":"m.text"},"ts":1424457725000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Rather than munging everything up and having trouble later when we want to do something more principled.","msgtype":"m.text"},"ts":1424457742000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(It's the difference between piping and broadcasting in Stream.)","msgtype":"m.text"},"ts":1424457752000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"otoh, tasks could also have a cloning .then(), and a .promise() for discarding responsibility...","msgtype":"m.text"},"ts":1424457772000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, that's another way. Depends on how you want the \"default\" behavior to work.","msgtype":"m.text"},"ts":1424457792000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Either way is defensible.","msgtype":"m.text"},"ts":1424457796000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So are we losing the ability for `var p = fetch(url1).then(_ => fetch(url2));` then later `p.abort()` to abort whichever request(s) are in flight?","msgtype":"m.text"},"ts":1424457917000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(not I'm particularly against that, just trying to understand)","msgtype":"m.text"},"ts":1424457930000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: You wouldn't be losing it regardless; question is just how you want the default semantics to work.","msgtype":"m.text"},"ts":1424457941000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oh wait, though; I didn't know that the p1=>p2 aborting was a thing to preserve.","msgtype":"m.text"},"ts":1424457965000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Though monadically that seems okay.","msgtype":"m.text"},"ts":1424457977000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: This is just my mental flailing. Posted a finger-in-the-air set of expectations at https://github.com/slightlyoff/ServiceWorker/issues/625#issuecomment-75217729","msgtype":"m.text"},"ts":1424458031000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: for case 3 the expectation is that the promise is instead forever pending","msgtype":"m.text"},"ts":1424458083000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Let's assume that .then still returns a Task, and .promise() returns a Promise of it (losing the special abilities to fuck with the result).  Then when .then() is combining a second FetchTask into the first, it can combine permissions, so that aborting one aborts all.","msgtype":"m.text"},"ts":1424458086000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"JakeA: not rejected due to canceling","msgtype":"m.text"},"ts":1424458094000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: so cancelling doesn't reject?","msgtype":"m.text"},"ts":1424458145000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yeah, the desired default seems to be to not reject","msgtype":"m.text"},"ts":1424458166000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: if you want to reject, use p.terminate({rejectWith: \"heya\"})","msgtype":"m.text"},"ts":1424458186000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Case 3 seems slightly non-intuitive, and difficult to do.  It requires tasks to control down-stream tasks too; we're now talking more of a stream than a promise.","msgtype":"m.text"},"ts":1424458196000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: so an \"await p\" would just hang forever. That isn't what I'd expect but I haven't really thought it through","msgtype":"m.text"},"ts":1424458232000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: https://annevankesteren.nl/2015/02/cancelable-promises has a summary and pointers","msgtype":"m.text"},"ts":1424458268000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: is you want to cast a promise subclass to a normal promise, Promise.resolve(subclassPromise) is the current way","msgtype":"m.text"},"ts":1424458273000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: Well, until the method got aborted.","msgtype":"m.text"},"ts":1424458277000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"JakeA: All right.","msgtype":"m.text"},"ts":1424458284000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: yeah, ok, I think that makes sense. I've actually got some hacky code in SVGOMG because of promises that reject following aborting https://github.com/jakearchibald/svgomg/blob/9d23d77e389d62beb7acd16413a13328e568bdfd/src/js/page/main-controller.js#L217","msgtype":"m.text"},"ts":1424458610000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: hah, that's exactly Domenic's prediction","msgtype":"m.text"},"ts":1424458900000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: people writing if(e instanceof CancelableError) return","msgtype":"m.text"},"ts":1424458915000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"@@species returns this so it automatically will return FetchPromise","msgtype":"m.text"},"ts":1424458991000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: However, I do want to stop a spinner on cancellation, which pending forever won't support","msgtype":"m.text"},"ts":1424459010000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"To convert tasks to promises do Promise.resolve(task)","msgtype":"m.text"},"ts":1424459027000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Problem with @@species is you lose the link to the original fetch, since @@species is got from this.constructor rather than this","msgtype":"m.text"},"ts":1424459098000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: in that case use rejectWith I guess","msgtype":"m.text"},"ts":1424459105000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You gotta define a special .then() to get the right behavior, I think.","msgtype":"m.text"},"ts":1424459153000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: yeah, so I'd be back to my if-instanceOf. Hmm","msgtype":"m.text"},"ts":1424459167000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"So you can set the right internal slots, etc.","msgtype":"m.text"},"ts":1424459172000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I came to that conclusion in https://github.com/slightlyoff/ServiceWorker/issues/625#issuecomment-75217729 - but feels cleaner if @@species was got from `this`","msgtype":"m.text"},"ts":1424459229000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(and Promise would define it on the prototype chain)","msgtype":"m.text"},"ts":1424459251000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"But you lose the ability to cancel the fetch, or to combine fetches into a single cancelable thing.","msgtype":"m.text"},"ts":1424459275000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ugh, if you want fetches to stack like that, we really do need to be more strict about it being a Task, and .then() being the Promise-returning method.","msgtype":"m.text"},"ts":1424459330000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Do you? Couldn't this.@@species carry over the state from this","msgtype":"m.text"},"ts":1424459343000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Because it's not cool if you chain two separate fetches off of a parent fetch, abort one of the children, and that causes the parent to abort.","msgtype":"m.text"},"ts":1424459357000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I guess it couldn't if it was called as a constructor","msgtype":"m.text"},"ts":1424459357000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"hm, that's a good point","msgtype":"m.text"},"ts":1424459379000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Going to add that to the github issue","msgtype":"m.text"},"ts":1424459399000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"You need to explicitly clone the parent fetch, so it can refcount itself and only abort itself if all the chained fetches abort.","msgtype":"m.text"},"ts":1424459401000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Again, this is stream-as-pipe vs stream-as-broadcast. If you want piping-like functionality, gotta be proper about it.","msgtype":"m.text"},"ts":1424459428000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If you try to mix it with the broadcast functionality, you're gonna have confused-deputy/ambient-authority bugs all over the place.","msgtype":"m.text"},"ts":1424459494000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"https://github.com/slightlyoff/ServiceWorker/issues/625#issuecomment-75300556","msgtype":"m.text"},"ts":1424459548000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"if (instanceof) seems fine if you're going to do something besides just return and try to ignore it","msgtype":"m.text"},"ts":1424460322000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: lol \"I'd link you, but I think I accidentally killed the spec;\"","msgtype":"m.text"},"ts":1424460684000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: I'm suddenly confused.  DOM appears to have a dom-core.bs file now?","msgtype":"m.text"},"ts":1424464228000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The version I cloned originally only had Overview.src.html and dom-core.html","msgtype":"m.text"},"ts":1424464244000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: I ask because I've been converting Overview.src.html into Overview.bs.","msgtype":"m.text"},"ts":1424464639000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ah, looks like dom-core.bs is just a very light transliteration; not a ton of work went into it.  Good.","msgtype":"m.text"},"ts":1424464699000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Is there a native JS method to enumerate the device fonts? Simulation: http://sandbox.thewikies.com/document.fonts.enumerate/","msgtype":"m.text"},"ts":1424472997000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"JonathanNeal, that's a huge fingerprinting vector","msgtype":"m.text"},"ts":1424474108000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"It's also already completely possible with high fidelity, so...","msgtype":"m.text"},"ts":1424474325000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It does indeed give you a bunch of identity bits, but you can't avoid it, since local font selection affects layout.","msgtype":"m.text"},"ts":1424474369000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"JonathanNeal: I do plan to do *something* about querying local fonts in Font Loading. Just not sure what yet.","msgtype":"m.text"},"ts":1424474395000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"man, does anyone know if there's a switch somewhere to unbreak user scripts in chrome","msgtype":"m.text"},"ts":1424476025000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"They getting CSP'd?","msgtype":"m.text"},"ts":1424476479000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: what did you and Ms2ger mean by huge fingerprinting vector?","msgtype":"m.text"},"ts":1424476663000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"That it expose a huge source of identity bits.  The precise set of fonts you have on your system is pretty unique.","msgtype":"m.text"},"ts":1424476695000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Right!","msgtype":"m.text"},"ts":1424476783000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"}
]