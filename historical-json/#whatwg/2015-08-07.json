[
{"content":{"body":"hsivonen: I was wondering if you could provide tips on requesting Maemo Source Code from Nokia (or Microsoft, as it may be)? https://hsivonen.fi/maemo-src/ You have source code for osso-rss-feed-reader version 1.2.31-1, while I am wondering about version 1.8.22-2 . Of course, I would prefer getting the latest source codes of _everything_ , if possible.","msgtype":"m.text"},"ts":1438909972000,"senderName":"Oksana","senderId":"Oksana@irc"},
{"content":{"body":"Multimaps :-) At some point we'll redo FormData, URLSearchParams, and Headers in terms of them","msgtype":"m.text"},"ts":1438923449000,"senderName":"annevk_","senderId":"annevk_@irc"},
{"content":{"body":"Ugh that underscore","msgtype":"m.text"},"ts":1438923460000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oksana: I put the text of my request letter at https://hsivonen.fi/maemo-src/request.html . Feel free to adapt that text to the facts of your case. The GPL offer notice was in some sort of system-wide about box.","msgtype":"m.text"},"ts":1438944121000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Hi, Iv been redirected here, anyone knows what's the usage for the \"xmlhttprequest\" context? cf https://fetch.spec.whatwg.org/#concept-request-context","msgtype":"m.text"},"ts":1438950995000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"n0a___: yeah, it's not xmlhttprequest, it's fetch. It means a serviceworker can detect the rough type of the request, which is useful when determining what kind of fallback content to show. It's also useful for CSP when deciding whether to block content or not. Also useful for network stack when deciding priority","msgtype":"m.text"},"ts":1438951372000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: sorry but I understand for most of the other values","msgtype":"m.text"},"ts":1438951515000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"but not for this one or others connect-src ones","msgtype":"m.text"},"ts":1438951526000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"in these cases does it refer to the context of the destination?","msgtype":"m.text"},"ts":1438951554000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"or do you have a simple use case?","msgtype":"m.text"},"ts":1438951578000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"n0a___: that big list is likely to be boiled down to something simpler. See https://github.com/whatwg/fetch/issues/93#issuecomment-126686379","msgtype":"m.text"},"ts":1438951600000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"hum","msgtype":"m.text"},"ts":1438951649000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"so ur saying these connect-src context values will be dropped?","msgtype":"m.text"},"ts":1438951686000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"in short what is the use case for any connect-src scenario using fetch?","msgtype":"m.text"},"ts":1438951740000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"ur fetching from xhr?","msgtype":"m.text"},"ts":1438951750000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"that doesn't make sense to me","msgtype":"m.text"},"ts":1438951759000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"you are fetching the url string to feed to xhr?","msgtype":"m.text"},"ts":1438951782000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"fetch('/hello') would have a context of \"connect\" in that proposal","msgtype":"m.text"},"ts":1438951784000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"as would xhr requests","msgtype":"m.text"},"ts":1438951795000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: so \"processor\" in your comment corresponds to the context property?","msgtype":"m.text"},"ts":1438951923000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"annevk: Israel from Microsoft, what was his surname? (trying to find his email address)","msgtype":"m.text"},"ts":1438951934000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: see pm","msgtype":"m.text"},"ts":1438951957000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"n0a___: yeah, the context property is likely to be replaced by something like the things in that github comment","msgtype":"m.text"},"ts":1438951977000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"that's a good thing because it seems easier to grasp","msgtype":"m.text"},"ts":1438952012000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"is the current context property already supported by current browsers?","msgtype":"m.text"},"ts":1438952039000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"well I could check","msgtype":"m.text"},"ts":1438952045000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"JakeA: context is already supported by browsers so my question remains what does it mean to have an xhr context?","msgtype":"m.text"},"ts":1438952148000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"n0a___: which browsers support context?","msgtype":"m.text"},"ts":1438952172000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"chrome","msgtype":"m.text"},"ts":1438952177000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"new Request({})","msgtype":"m.text"},"ts":1438952189000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"I dunno if it supports the values though","msgtype":"m.text"},"ts":1438952224000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"would require more tests","msgtype":"m.text"},"ts":1438952230000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"n0a___: Chrome would drop 'context' and move to the new thing (which may still be called 'content')","msgtype":"m.text"},"ts":1438952309000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I don't think the current implementation is useful enough to create a breaking change","msgtype":"m.text"},"ts":1438952332000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I still need to understand what are those src-connect value today","msgtype":"m.text"},"ts":1438952337000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"of course if they are not supported that's another sotory","msgtype":"m.text"},"ts":1438952382000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"n0a___: I don't think I understand your question. Are you asking what the context value would be in XHR? Do you mean in the current spec or the thing we're proposing on github?","msgtype":"m.text"},"ts":1438952384000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"*story","msgtype":"m.text"},"ts":1438952386000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"I don't think they're supported","msgtype":"m.text"},"ts":1438952393000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I am not proposing anything on GitHub, I want to understand why you would use the value \"xmlhttprequest\" for the property context of a request object","msgtype":"m.text"},"ts":1438952451000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"what's the use case that supports it","msgtype":"m.text"},"ts":1438952498000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"n0a___: well, the proposal on GitHub is to use \"connect\" as defined as CSP","msgtype":"m.text"},"ts":1438952505000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"The use cases are at https://github.com/whatwg/fetch/issues/93#issuecomment-126653941","msgtype":"m.text"},"ts":1438952522000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"n0a___: it gives the service worker the ability to impose policies based on who requested the resource","msgtype":"m.text"},"ts":1438952527000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"n0a___: but as several folks pointed out, we're going to change how this works","msgtype":"m.text"},"ts":1438952537000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: sorry to be so dense but what are the resorces in that case?","msgtype":"m.text"},"ts":1438952554000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"n0a___: anything a page requests","msgtype":"m.text"},"ts":1438952572000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"resources why do you need to set specifically to xhr?","msgtype":"m.text"},"ts":1438952575000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"n0a___: do you know what a service worker is?","msgtype":"m.text"},"ts":1438952589000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1438952597000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"n0a___: we're not specifically setting xhr, the proposal is to use \"connect\" as defined by CSP","msgtype":"m.text"},"ts":1438952603000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"n0a___: and in particular how it can intercept fetches?","msgtype":"m.text"},"ts":1438952604000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"n0a___: \"xmlhttprequest\" is used when the service worker intercepts a fetch coming from XMLHttpRequest","msgtype":"m.text"},"ts":1438952628000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"by using what's already defined by CSP, we're not really inventing much new","msgtype":"m.text"},"ts":1438952628000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"OHHH so it's not fetch()","msgtype":"m.text"},"ts":1438952643000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"but xhr using fetch internally?","msgtype":"m.text"},"ts":1438952653000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"n0a___: everything that does requests uses Fetch internally, but not necessarily the fetch() API","msgtype":"m.text"},"ts":1438952677000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I don't think \"connect\" is a value we should use","msgtype":"m.text"},"ts":1438952690000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok but I wasn't interested in internal stuff… now I get it","msgtype":"m.text"},"ts":1438952706000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"JakeA: the type stuff made much more sense to me anyway","msgtype":"m.text"},"ts":1438952708000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess I should try to resolve this next week","msgtype":"m.text"},"ts":1438952728000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I agree that \"connect\" is a bad name. I was just reusing CSP for consistency","msgtype":"m.text"},"ts":1438952775000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"you should really differentiate fetch [intern] and fetch global","msgtype":"m.text"},"ts":1438952798000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"it's quite confusing","msgtype":"m.text"},"ts":1438952805000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"n0a___: well, fetch() and fetch","msgtype":"m.text"},"ts":1438952817000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"n0a___: but... open to suggestions I suppose","msgtype":"m.text"},"ts":1438952825000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"just a remark, you do whatever you want with it","msgtype":"m.text"},"ts":1438952842000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"n0a___: I agree with your remark, but I don't really have any better ideas","msgtype":"m.text"},"ts":1438952880000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I go with \"fetch event\" \"fetch spec\" and \"fetch api\" verbally","msgtype":"m.text"},"ts":1438952919000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"maybe be very verbose whenever it could be confusing if it's taken out of context","msgtype":"m.text"},"ts":1438952968000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"I see ppl quoting the spec and being confused","msgtype":"m.text"},"ts":1438952980000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"or just add examples, always work :)","msgtype":"m.text"},"ts":1438953032000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"n0a___: well if you're already in the spec you can read https://fetch.spec.whatwg.org/#preface which should make things pretty clear","msgtype":"m.text"},"ts":1438953169000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"like I said, ppl do quote the spec so it's out of context","msgtype":"m.text"},"ts":1438953200000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"https://code.google.com/p/chromium/issues/detail?id=455116","msgtype":"m.text"},"ts":1438953205000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"I’m pushing svg4everybody v2 today. Any last minute pass over the README.md is very welcome: https://github.com/jonathantneal/svg4everybody/tree/feature/2.0.0","msgtype":"m.text"},"ts":1438953420000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"gosh this is messy now they want to remove it https://code.google.com/p/chromium/issues/detail?id=515786","msgtype":"m.text"},"ts":1438953462000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"reminds me of IE5 and document fragments","msgtype":"m.text"},"ts":1438953542000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"implemented removed reimplemented","msgtype":"m.text"},"ts":1438953571000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"n0a___: not too messy, we knew shipping aggressively may mean making breaking changes. I haven't seen a lot of use of it, although we're going to gather evidence","msgtype":"m.text"},"ts":1438953656000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"well I am starting","msgtype":"m.text"},"ts":1438953682000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"but something that puzzled me is the lack of type for the Response object","msgtype":"m.text"},"ts":1438953716000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"as if you have to know the type","msgtype":"m.text"},"ts":1438953737000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"and even more confusing is that we have https://developer.mozilla.org/en-US/docs/Web/API/Response/type","msgtype":"m.text"},"ts":1438953814000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"n0a___: what type do you want?","msgtype":"m.text"},"ts":1438953848000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"as in, what information are you wanting?","msgtype":"m.text"},"ts":1438953855000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"If it's content type, look at the headers","msgtype":"m.text"},"ts":1438953873000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"blob, json, text etc","msgtype":"m.text"},"ts":1438953876000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"why? the content header could lie","msgtype":"m.text"},"ts":1438953895000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"n0a___: there's no such type as blob","msgtype":"m.text"},"ts":1438953986000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"that's what you read the content into, but all types can be read into blob","msgtype":"m.text"},"ts":1438953997000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"sounds like you're wanting something to read the data and determine the type?","msgtype":"m.text"},"ts":1438954020000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype","msgtype":"m.text"},"ts":1438954046000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"But take \"Hello <b>everyone</b>\" - is that plain text or HTML?","msgtype":"m.text"},"ts":1438954046000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"n0a___: that's something you set for how you want the response to be processed","msgtype":"m.text"},"ts":1438954068000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I don't really care about the values","msgtype":"m.text"},"ts":1438954070000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"just a string with the type","msgtype":"m.text"},"ts":1438954077000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"It's a string you set, not a string you read","msgtype":"m.text"},"ts":1438954090000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1438954096000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"so ur saying there's no way to forge the header?","msgtype":"m.text"},"ts":1438954105000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"Is that what you want?","msgtype":"m.text"},"ts":1438954106000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Let's start again","msgtype":"m.text"},"ts":1438954118000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"you must be right","msgtype":"m.text"},"ts":1438954128000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"Are you looking for a way to say \"I want to read this response as JSON\"?","msgtype":"m.text"},"ts":1438954135000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"the responsetype is set before the send","msgtype":"m.text"},"ts":1438954144000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"sorry about that","msgtype":"m.text"},"ts":1438954147000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"Yep","msgtype":"m.text"},"ts":1438954152000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"no I wanted to know the type of the received data without having to know it or use the header","msgtype":"m.text"},"ts":1438954193000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"With fetch you don't set a response type, you get a response and read the body how you want, eg fetch(url).then(r => r.json())","msgtype":"m.text"},"ts":1438954203000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"still you need to know what ur receiving","msgtype":"m.text"},"ts":1438954224000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"Isn't really possible I'm afraid. Some types can be detected, but not all","msgtype":"m.text"},"ts":1438954227000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Back to the example: \"Hello <b>everyone</b>\" - is that plain text or HTML?","msgtype":"m.text"},"ts":1438954241000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Or XML","msgtype":"m.text"},"ts":1438954247000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"a data-agnostic receiving function would be complicate","msgtype":"m.text"},"ts":1438954247000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"well it's a string :)","msgtype":"m.text"},"ts":1438954260000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"Impossible I reckon","msgtype":"m.text"},"ts":1438954261000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"n0a___: You're still relying on headers to decide that","msgtype":"m.text"},"ts":1438954301000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I dunno if you are working on the spec yourself but there's something else I had a hard time with, it's the non object values of https://fetch.spec.whatwg.org/#headers-class","msgtype":"m.text"},"ts":1438954454000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"I dunno if I am the target of the spec","msgtype":"m.text"},"ts":1438954463000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"but it seemed pretty obscure","msgtype":"m.text"},"ts":1438954481000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"probably requires webidl knoledge to graps","msgtype":"m.text"},"ts":1438954498000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"graps*","msgtype":"m.text"},"ts":1438954502000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"grasp third try","msgtype":"m.text"},"ts":1438954520000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"n0a___: I write the spec, but yeah, you need to know IDL","msgtype":"m.text"},"ts":1438954647000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: it's implemented https://codereview.chromium.org/1060033002/diff/60001/Source/modules/fetch/Request.cpp#newcode296","msgtype":"m.text"},"ts":1438955910000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"so I have to support it sadly for you :)","msgtype":"m.text"},"ts":1438955925000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"n0a___: I'm not sure what you're saying. Why do you need to support it?","msgtype":"m.text"},"ts":1438956360000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I don't understand sorry, if it's implemented that's what you have to use","msgtype":"m.text"},"ts":1438956402000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"You don't have to use everything that's implemented","msgtype":"m.text"},"ts":1438956431000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"until something else replace it","msgtype":"m.text"},"ts":1438956444000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"And we're likely to remove that feature","msgtype":"m.text"},"ts":1438956451000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"What are you trying to do?","msgtype":"m.text"},"ts":1438956455000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"just reading the spec","msgtype":"m.text"},"ts":1438956511000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"thx for your support","msgtype":"m.text"},"ts":1438956516000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"goes for a lie down","msgtype":"m.emote"},"ts":1438956550000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: (or JakeA if you're up) if I event.respondWith(Response.redirect(url) where event.request.redirect==follow, should I get another fetch event?  reading the spec is seems I should, but I don't trust anything about my interpretation now","msgtype":"m.text"},"ts":1438960012000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I agree with your reading, you'll get another fetch","msgtype":"m.text"},"ts":1438960149000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: and even if the redirect is same origin, its done as a CORS request?  (seems CORS flag is always set... seems weird for same origin)","msgtype":"m.text"},"ts":1438960242000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: \"CORS flag set if set.\", so it only sets CORS is the original was","msgtype":"m.text"},"ts":1438960400000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: arg... I actually parsed that odd language yesterday","msgtype":"m.text"},"ts":1438960425000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Took me a couple of reads, but then, I have a \\o/ deskbeer \\o/","msgtype":"m.text"},"ts":1438960456000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"ha","msgtype":"m.text"},"ts":1438960549000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1438960551000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"If you have suggestions for rewording that, I'm all ears (or eyes, really)","msgtype":"m.text"},"ts":1438962815000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But yeah, if you get a redirect from the service worker, fetch will follow it and go into the service worker again","msgtype":"m.text"},"ts":1438962852000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: just a quick question I don't wanna add a dupe issue on github, is there a ticket which covers the fact that the default for request modee should be 'same-orgin' (and not \"no-cors\") which would imply an opaque filtered response (which is not desired obviously)?","msgtype":"m.text"},"ts":1438965810000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"I don't think https://github.com/whatwg/fetch/issues/101 covers my demand","msgtype":"m.text"},"ts":1438965840000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"n0a___: neither of those is the default iirc","msgtype":"m.text"},"ts":1438965892000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"A request has an associated mode, which is one of \"same-origin\", \"no-cors\", \"cors\", and \"cors-with-forced-preflight\". Unless stated otherwise, it is \"no-cors\".\"","msgtype":"m.text"},"ts":1438965916000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"unless there's another source for the spec that I am not aware of","msgtype":"m.text"},"ts":1438965935000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"n0a___: ah, that has to be the default since most stuff requires \"no-cors\"","msgtype":"m.text"},"ts":1438965952000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"n0a___: but for fetch() the default is \"cors\"","msgtype":"m.text"},"ts":1438965962000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so the default listed there are not for fetch","msgtype":"m.text"},"ts":1438965982000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"I should look elsewhere then","msgtype":"m.text"},"ts":1438965990000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"The defaults there are for all features","msgtype":"m.text"},"ts":1438966020000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The API is defined in https://fetch.spec.whatwg.org/#fetch-api","msgtype":"m.text"},"ts":1438966034000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Otherwise Set request's response tainting to \"cors\".","msgtype":"m.text"},"ts":1438966073000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"k thx you should put somewhere the default state of a request for fetch","msgtype":"m.text"},"ts":1438966099000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"(all of them instead of having to check each one)","msgtype":"m.text"},"ts":1438966183000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"Yeah, that would make sense, one day","msgtype":"m.text"},"ts":1438966407000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think instead of \"CORS flag set if set\", I would understand \"with the current CORS flag value\" better.","msgtype":"m.text"},"ts":1438966867000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: but set/unset is not a value","msgtype":"m.text"},"ts":1438966896000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: how is it not a boolean value?","msgtype":"m.text"},"ts":1438966934000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"senses a lesson in spec terminology coming on.","msgtype":"m.emote"},"ts":1438966944000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: gotta go, but yeah, it's basically the way it's phrased","msgtype":"m.text"},"ts":1438966994000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"can't ctrl-f numbers since ur using lists :)","msgtype":"m.text"},"ts":1438967349000,"senderName":"n0a___","senderId":"n0a___@irc"},
{"content":{"body":"Good morning WHATWG crew o/","msgtype":"m.text"},"ts":1438968367000,"senderName":"ccardona-work","senderId":"ccardona-work@irc"},
{"content":{"body":"Am I reading this correctly, that when you dispatch an event, all the event handlers run synchronously at that point in your algorithm?","msgtype":"m.text"},"ts":1438973830000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: ^^^","msgtype":"m.text"},"ts":1438973836000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It *looks* like that's the case from the DOM spec, but I was under the impression that firing an event just queued up the event handlers onto the task queue, so they don't run until the next time you hit the event loop.","msgtype":"m.text"},"ts":1438973891000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I thought it was sync","msgtype":"m.text"},"ts":1438979714000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"In fact, IDB relies on it being sync","msgtype":"m.text"},"ts":1438979738000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: Agree that it's sync, but where in IDB?","msgtype":"m.text"},"ts":1438980040000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"(since in IDB that triggers events happens async)","msgtype":"m.text"},"ts":1438980066000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"TabAtkins: event dispatching is always sync","msgtype":"m.text"},"ts":1438980070000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(... in IDB everything that triggers events...)","msgtype":"m.text"},"ts":1438980085000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Okay, cool, that means I'm wrong and have to swap the ordering of some stuff in Font Loading. ^_^","msgtype":"m.text"},"ts":1438980090000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"if you need asyncness, you queue a task to dispatch event...","msgtype":"m.text"},"ts":1438980097000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"jsbell: step 4 of http://w3c.github.io/IndexedDB/#fire-a-success-event - if events were async the transaction would be closed onsuccess","msgtype":"m.text"},"ts":1438980187000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: ah, yes.","msgtype":"m.text"},"ts":1438980244000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"That's my least favourite line of IDB. If only it was queue a microtask.","msgtype":"m.text"},"ts":1438980354000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Then you could build an OK promise API on top","msgtype":"m.text"},"ts":1438980372000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA; It does seem likely it's web-compatible to change it","msgtype":"m.text"},"ts":1438980600000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: that'd be great","msgtype":"m.text"},"ts":1438980667000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: although some devs don't want anything that'd make transaction commits slower. To them I say: https://gist.github.com/inexorabletash/d55a6669a040e92e47c6","msgtype":"m.text"},"ts":1438980674000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"JakeA: file a spec bug so we don't forget to discuss?","msgtype":"m.text"},"ts":1438980693000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: I'll pick it up before Monday (I've got a tab open for the Chrome & Firefox bugs so that'll remind me when I'm next at the laptop)","msgtype":"m.text"},"ts":1438980795000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1438980803000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"sicking: who's the best Moz contact for IDB at the moment? (specifically I want to discuss shipping getAll)","msgtype":"m.text"},"ts":1438980842000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: i think it might be Jan Varga (jvarga@moz). Though you should include Andrew Overholt (overholt@moz) as well","msgtype":"m.text"},"ts":1438980915000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"thx","msgtype":"m.text"},"ts":1438980921000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: i think we would be for it though","msgtype":"m.text"},"ts":1438980935000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"cool; running away to an appt now, TTYL","msgtype":"m.text"},"ts":1438980954000,"senderName":"jsbell","senderId":"jsbell@irc"}
]