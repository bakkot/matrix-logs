[
{"content":{"body":"apparently \"SIGN UP FOR OUR NEWSLETTER\" overlay popups 10 seconds after you start reading a site is making a resurgence","msgtype":"m.text"},"ts":1381799248000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"MikeSmith: ping?","msgtype":"m.text"},"ts":1381807783000,"senderName":"kochi1","senderId":"kochi1@irc"},
{"content":{"body":"kochi1: away from my PC but will be back in 40 minutes or so","msgtype":"m.text"},"ts":1381808919000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: ok, talk to you then.","msgtype":"m.text"},"ts":1381809339000,"senderName":"kochi1","senderId":"kochi1@irc"},
{"content":{"body":"annevk-cloud: or anyone else at Mozilla: I need implementer feedback on an aspect of the ES6 promises spec, along the lines of \"is it OK to require your engine to do this kind of optimization?\". Who to ask?","msgtype":"m.text"},"ts":1381812092000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"MikeSmithZ: ping?","msgtype":"m.text"},"ts":1381812704000,"senderName":"kochi1","senderId":"kochi1@irc"},
{"content":{"body":"MikeSmith: ^","msgtype":"m.text"},"ts":1381812712000,"senderName":"kochi1","senderId":"kochi1@irc"},
{"content":{"body":"hey kochi1","msgtype":"m.text"},"ts":1381812751000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"back now","msgtype":"m.text"},"ts":1381812752000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hi","msgtype":"m.text"},"ts":1381812756000,"senderName":"kochi1","senderId":"kochi1@irc"},
{"content":{"body":"I finalized TPAC plan","msgtype":"m.text"},"ts":1381812763000,"senderName":"kochi1","senderId":"kochi1@irc"},
{"content":{"body":"Will attend Mon and Tue.","msgtype":"m.text"},"ts":1381812772000,"senderName":"kochi1","senderId":"kochi1@irc"},
{"content":{"body":"great","msgtype":"m.text"},"ts":1381812777000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I still need to get my visa","msgtype":"m.text"},"ts":1381812804000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"As far as I heard from people who attended last year, Mon and Tue will be good enough,","msgtype":"m.text"},"ts":1381812823000,"senderName":"kochi1","senderId":"kochi1@irc"},
{"content":{"body":"What do you think?","msgtype":"m.text"},"ts":1381812832000,"senderName":"kochi1","senderId":"kochi1@irc"},
{"content":{"body":"yeah that should be fine","msgtype":"m.text"},"ts":1381812862000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"As a Japanese, I don't need visa as the trip is short (less than 15 days)","msgtype":"m.text"},"ts":1381812875000,"senderName":"kochi1","senderId":"kochi1@irc"},
{"content":{"body":"okay, and I secured the Wenzhou hotel for that period.","msgtype":"m.text"},"ts":1381812909000,"senderName":"kochi1","senderId":"kochi1@irc"},
{"content":{"body":"that's where I'm staying too","msgtype":"m.text"},"ts":1381812948000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"kochi1: do you know who else from your team is going?","msgtype":"m.text"},"ts":1381812964000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Kinuko will, definitely","msgtype":"m.text"},"ts":1381812975000,"senderName":"kochi1","senderId":"kochi1@irc"},
{"content":{"body":"and Gary Kacmarcik will.","msgtype":"m.text"},"ts":1381813012000,"senderName":"kochi1","senderId":"kochi1@irc"},
{"content":{"body":"ok cool","msgtype":"m.text"},"ts":1381813059000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Probably others in Mountain View who I don't know will...","msgtype":"m.text"},"ts":1381813090000,"senderName":"kochi1","senderId":"kochi1@irc"},
{"content":{"body":"Kinuko is going to talk about the Quota API mostly? or file-systems stuff too? or something else?","msgtype":"m.text"},"ts":1381813094000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I need to ask her :)  to be honest, I don't know...","msgtype":"m.text"},"ts":1381813140000,"senderName":"kochi1","senderId":"kochi1@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1381813146000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"She replied to ArtB's mail about Quota API, so at least Quota API, I guess.","msgtype":"m.text"},"ts":1381813233000,"senderName":"kochi1","senderId":"kochi1@irc"},
{"content":{"body":"OK. about you, I know we want to have you there to talk about the IME API, but you're also involved with some of the DOM events work or something?","msgtype":"m.text"},"ts":1381813251000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Definitely for IME API, but optional for DOM L3 events.","msgtype":"m.text"},"ts":1381813295000,"senderName":"kochi1","senderId":"kochi1@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1381813308000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I'm attending DOM L3 calls for events like composition events and before input, as it relates to IME API, so I will be there for the DOM events session.","msgtype":"m.text"},"ts":1381813365000,"senderName":"kochi1","senderId":"kochi1@irc"},
{"content":{"body":"is there a place where we can see the list of use cases for web components?","msgtype":"m.text"},"ts":1381813391000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"I can't find any wiki, etc... that lists all the use cases being discussed","msgtype":"m.text"},"ts":1381813404000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"but I don't have much to pro-actively present there.","msgtype":"m.text"},"ts":1381813410000,"senderName":"kochi1","senderId":"kochi1@irc"},
{"content":{"body":"maybe http://www.w3.org/2008/webapps/wiki/Component_Model_Use_Cases ?","msgtype":"m.text"},"ts":1381813440000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: yeah, that","msgtype":"m.text"},"ts":1381813560000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think also whatever the use cases are, they're the same as whatever the use cases are for AngularJS or Backbone or Ember","msgtype":"m.text"},"ts":1381813625000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"what I still have yet to see any description of is, How will web components make user experience any better","msgtype":"m.text"},"ts":1381813871000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"rniwa: anyway I thought you guys were removing all traces of the web components stuff","msgtype":"m.text"},"ts":1381813916000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"not really the point of a lot of the web, other than as a side-effect of making authoring easier","msgtype":"m.text"},"ts":1381813936000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"a lot of the features that've been added to the platform over the last several years do make user experience better and and it's not hard at all to explain how they make user experience better","msgtype":"m.text"},"ts":1381814461000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"lack of being able to explain how something can make user experience better is the hallmark of stuff like XHTML modularization","msgtype":"m.text"},"ts":1381814569000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and making authoring easier is no more of a guarantee of better user experience than making programming easier is","msgtype":"m.text"},"ts":1381814624000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"lots of stuff is completely irrelevant to users, except as a side effect (of course, the side-effect of better websites is the ultimate point, but not being directly user-facing is pretty irrelevant)","msgtype":"m.text"},"ts":1381814635000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I didn't say user-facing","msgtype":"m.text"},"ts":1381814692000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"(that isn't an argument for web components, which I don't know much about, just against the idea that \"how does this make UX better\" is such a critical factor)","msgtype":"m.text"},"ts":1381814735000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"you said UX, that means user-facing to me :)","msgtype":"m.text"},"ts":1381814758000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"OK, how about the question \"hows does this not make UX worse\"?","msgtype":"m.text"},"ts":1381814772000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"what I mean is, everything we add can potentially make performance worse","msgtype":"m.text"},"ts":1381814842000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and it can add implementation complexity that makes it a vector for bugs that users are going to run into","msgtype":"m.text"},"ts":1381814902000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1381814923000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"\"how is this worth the implementation cost\" is definitely a fair question for any feature","msgtype":"m.text"},"ts":1381814941000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"for the sake of comparison, consider the implementor argument against <picture><source>","msgtype":"m.text"},"ts":1381814959000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"which is a valid argument","msgtype":"m.text"},"ts":1381814963000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"in terms of the implementation expense, and potential for bugs","msgtype":"m.text"},"ts":1381814991000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but Web Components is a couple order of magnitude more complex than that","msgtype":"m.text"},"ts":1381815016000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yet there's not a lot of debate about, Hey, this is going to add a lot of implementation complexity and bug risks, but it's worth it all because it's getting us the really giant win of ... what?","msgtype":"m.text"},"ts":1381815083000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"anyway","msgtype":"m.text"},"ts":1381815154000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"there are other cases where I see a ton of work going  into something but don't seem to understanding by what path it all eventually lead to anything being better for users","msgtype":"m.text"},"ts":1381815260000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"like, the whole idea of browser-engine-based OSes","msgtype":"m.text"},"ts":1381815286000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"well, no disagreement there; those are toys","msgtype":"m.text"},"ts":1381815317000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(which I have no objection to people playing around with, but it's annoying when we have to fend off the occasional \"you should add this to the web so we can have it in our not-web thing\" from people who don't understand the ground rules)","msgtype":"m.text"},"ts":1381815354000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1381815550000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"do we need tests to have unique <title>s?","msgtype":"m.text"},"ts":1381827657000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i guess the answer should be \"no\"","msgtype":"m.text"},"ts":1381827700000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: I'd say I'd we wanted to require then to be unique, we'd want to provide some mechanism for test writers to check if their test files have unique ones","msgtype":"m.text"},"ts":1381828976000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"*if we wanted","msgtype":"m.text"},"ts":1381829014000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah but why would we want to?","msgtype":"m.text"},"ts":1381829065000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i can understand that we want unique titles of test() within a file, so that it's clear what result belongs to which test and so that it doesn't get confusing if one test happens to finish before another, etc","msgtype":"m.text"},"ts":1381829192000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"but for different files there's no ambiguity and it's not useful to spend time beating test writers over their <title>s if the test runner can figure it out anyway","msgtype":"m.text"},"ts":1381829254000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"For different files there is no requirement of global uniqueness","msgtype":"m.text"},"ts":1381829271000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"ok, good :-)","msgtype":"m.text"},"ts":1381829296000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"(test_url, title) needs to be unique for th.js tests and (test_url, ref_url) for reftests","msgtype":"m.text"},"ts":1381829297000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Did anyone suggest otherwise?","msgtype":"m.text"},"ts":1381829320000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"no i was just looking at a review with dup <title>s and wondered whether to raise an issue","msgtype":"m.text"},"ts":1381829356000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1381829363000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Just wondering if someone was wrong on the internet :)","msgtype":"m.text"},"ts":1381829391000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"i've already spent my 386 time of the day on other stuff","msgtype":"m.text"},"ts":1381829444000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"smaug____: \"But the spec should be more clear.\" I'm not sure what you want me to do","msgtype":"m.text"},"ts":1381830192000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"re: https://bugzilla.mozilla.org/show_bug.cgi?id=926208","msgtype":"m.text"},"ts":1381830199000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: let me find the right place in the spec...","msgtype":"m.text"},"ts":1381830392000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"So that part of the specification will likely change... Once I integrate XMLHttpRequest with Fetch which I've been saying I'll get to since forever...","msgtype":"m.text"},"ts":1381830440000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"When the time has passed, if the synchronous flag is unset, a timeout event will then be dispatched\"","msgtype":"m.text"},"ts":1381830453000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"that is non-normative","msgtype":"m.text"},"ts":1381830457000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but still hints that the event will be there","msgtype":"m.text"},"ts":1381830465000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"MikeSmith: FWIW one of the points of FirefoxOS is that it forces us to work out what extra web APIs are needed so that web-based apps an have all the same features as android or iOS specific apps. And having cross-platform apps (possibly just \"installed\" by navigating to a url) is a win for users in much the same way that having websites rather than native apps has been","msgtype":"m.text"},"ts":1381830471000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"even if the request has succeeded","msgtype":"m.text"},"ts":1381830475000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"hmm, when was TimeoutError added","msgtype":"m.text"},"ts":1381830532000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"ah, it is for workers only. that is ok","msgtype":"m.text"},"ts":1381830570000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"annevk: so I guess that non-normative text should indicate that timeout event or exception will be there only if the fetch hasn't ended or something","msgtype":"m.text"},"ts":1381830674000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"So the specification is clear, it's just non-normative descriptions biting us...","msgtype":"m.text"},"ts":1381830942000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm getting ever closer to just doing away with them","msgtype":"m.text"},"ts":1381830955000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, I think the bug reporter just read the non-normative part and expected timeout to work the way non-normative text defines it to work","msgtype":"m.text"},"ts":1381831068000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"ah, is blink improving their webidl support too","msgtype":"m.text"},"ts":1381831135000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Yeah they've been doing that for a while","msgtype":"m.text"},"ts":1381831185000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's one of the things pilgrim was working on when Blink was still called WebKit","msgtype":"m.text"},"ts":1381831216000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Not sure if he is still","msgtype":"m.text"},"ts":1381831220000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess they've seen the awesomeness of Gecko's webidl stuff :)","msgtype":"m.text"},"ts":1381831326000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"That must've been it","msgtype":"m.text"},"ts":1381831434000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: added a sentence to that unclear XHR sentence","msgtype":"m.text"},"ts":1381831445000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: I note you didn't close the bug as INVALID though","msgtype":"m.text"},"ts":1381831474000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: well, there isn't a testcase","msgtype":"m.text"},"ts":1381831493000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"fair","msgtype":"m.text"},"ts":1381831502000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so I was hoping to see that before closing","msgtype":"m.text"},"ts":1381831502000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I guess I should close it and ask reopening if needed","msgtype":"m.text"},"ts":1381831534000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Man, multiple globals are a bitch","msgtype":"m.text"},"ts":1381832114000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Just as well they were invented in the past, really","msgtype":"m.text"},"ts":1381832539000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Otherwise we wouldn't be allowed nice things for theoretical reasons","msgtype":"m.text"},"ts":1381832552000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Hixie_: I decided to reply to Jeff: http://lists.w3.org/Archives/Public/public-i18n-core/2013OctDec/0013.html","msgtype":"m.text"},"ts":1381839238000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie_: I added you in the cc, if you want to add something","msgtype":"m.text"},"ts":1381839248000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: try Jason Orendorff maybe?","msgtype":"m.text"},"ts":1381839386000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: Andrea Marchesini implemented promises atm, but not in SM","msgtype":"m.text"},"ts":1381839426000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mvujovic: pong","msgtype":"m.text"},"ts":1381839461000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok cool. and is http://wiki.whatwg.org/wiki/Who_to_ask_about_stuff correct that travis leithead is the appropriate MS contact?","msgtype":"m.text"},"ts":1381841039000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: yeah, he'll know who to ask internally anyway","msgtype":"m.text"},"ts":1381841060000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: instead of http://url.spec.whatwg.org/#dom-url \"SyntaxError\", a JS TypeError would be appropriate, right?","msgtype":"m.text"},"ts":1381841526000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"people sure like to bikeshed about naming","msgtype":"m.text"},"ts":1381842432000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I don't think that bikeshed is the right name for it","msgtype":"m.text"},"ts":1381842553000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"darobin++","msgtype":"m.text"},"ts":1381842568000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"To quote someone, \"Does Opera support the `bikeshed` CSS property?\"","msgtype":"m.text"},"ts":1381842595000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"From when there was a bikeshed CSS property defined.","msgtype":"m.text"},"ts":1381842606000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Opera had it first","msgtype":"m.text"},"ts":1381842611000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"that's right","msgtype":"m.text"},"ts":1381842622000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"matjas: https://github.com/mathiasbynens/cssesc maybe the default for isIdentifier should be true, given http://lists.w3.org/Archives/Public/public-whatwg-archive/2013Oct/0075.html ?","msgtype":"m.text"},"ts":1381842832000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"matjas: also, i think ascii-only usually isn't necessary","msgtype":"m.text"},"ts":1381843503000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: cssesc mirrors https://github.com/mathiasbynens/jsesc in that it has options to enable more aggressive escaping. making this change would change that","msgtype":"m.text"},"ts":1381843983000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"matjas: ah","msgtype":"m.text"},"ts":1381844003000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"that said, thanks for the info — I’ll happily create a `CSS.escape` polyfill","msgtype":"m.text"},"ts":1381844010000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1381844032000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: my favorite is the \"i don't want to bikeshed, but how about [list of names]\"","msgtype":"m.text"},"ts":1381845855000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: heh","msgtype":"m.text"},"ts":1381845870000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"In the future I plan to say \"I love nothing more than a good bikeshed! I brought 17 different suggestions for paint^Wnames!\". That should convince everyone else to agree on one sensible one very quickly","msgtype":"m.text"},"ts":1381846195000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"That's how we ended up with querySelector()","msgtype":"m.text"},"ts":1381846213000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Don't do that again","msgtype":"m.text"},"ts":1381846215000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: What spec should we reference for Promises? We have JSON-LD going to PR soon, we need to non-normatively reference something.","msgtype":"m.text"},"ts":1381846471000,"senderName":"m4nu","senderId":"m4nu@irc"},
{"content":{"body":"there's always the Voting Off the Island process, it takes time but at least it makes bikeshedding names fun","msgtype":"m.text"},"ts":1381846482000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"m4nu: https://github.com/domenic/promises-unwrapping/blob/master/README.md","msgtype":"m.text"},"ts":1381846486000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok thanks","msgtype":"m.text"},"ts":1381846496000,"senderName":"m4nu","senderId":"m4nu@irc"},
{"content":{"body":"we need a way of running that as a service","msgtype":"m.text"},"ts":1381846499000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"annevk: it's not in es6 yet?","msgtype":"m.text"},"ts":1381846556000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: no, subclassing woes","msgtype":"m.text"},"ts":1381846576000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Is there any copyright concern over that document? Can we make a static copy of it at W3C? Sandro is saying that ECMA had an issue w/ the public domain assertion on the document (Dom's employer has a copyright assertion on it?)","msgtype":"m.text"},"ts":1381846885000,"senderName":"m4nu","senderId":"m4nu@irc"},
{"content":{"body":"annevk: we're trying to figure out if we can archive the document at W3C to refer to it non-normatively.","msgtype":"m.text"},"ts":1381846907000,"senderName":"m4nu","senderId":"m4nu@irc"},
{"content":{"body":"m4nu: why can't you just refer to the repo?","msgtype":"m.text"},"ts":1381847093000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"m4nu: ECMA's concern is not about copyright, but about non-Member contributions","msgtype":"m.text"},"ts":1381847119000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"m4nu: euhm, Ecma's*","msgtype":"m.text"},"ts":1381847147000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"m4nu: it's CC0","msgtype":"m.text"},"ts":1381847296000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"m4nu: I got employer approval for that on Sunday, legal document signed and all.","msgtype":"m.text"},"ts":1381847313000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: SyntaxError seems OK to me, it's used for e.g. bad JSON, but I think Allen doesn't like using SyntaxError for non-JS-syntax errors, so in that case TypeError is probably best.","msgtype":"m.text"},"ts":1381847391000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: right","msgtype":"m.text"},"ts":1381847401000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: it wasn't using SyntaxError, it was using DOMException whose name is SyntaxError","msgtype":"m.text"},"ts":1381847427000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what about URIError?","msgtype":"m.text"},"ts":1381847665000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1381847778000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that whole API is kinda flawed","msgtype":"m.text"},"ts":1381847792000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I rather not build on top of it","msgtype":"m.text"},"ts":1381847799000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: <http://www.w3.org/mid/52570E9C.2040606⊙nc>","msgtype":"m.text"},"ts":1381847990000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: he seems confused","msgtype":"m.text"},"ts":1381848039000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i'll let you deal with it :-)","msgtype":"m.text"},"ts":1381848069000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: doesn't seem like something I want to step into","msgtype":"m.text"},"ts":1381848108000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh look","msgtype":"m.text"},"ts":1381848152000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://lists.w3.org/Archives/Public/public-webrtc/2013Oct/0019.html W3C bullshit strikes again","msgtype":"m.text"},"ts":1381848158000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't even...","msgtype":"m.text"},"ts":1381848167000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: I'm having this problem: https://twitter.com/gsnedders/status/390101791389413376","msgtype":"m.text"},"ts":1381848190000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: what should `CSS.escape()` do when called without any parameters?","msgtype":"m.text"},"ts":1381848192000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"I addressed one issue that needed fixing today, the rest was all email explaining stuff :/","msgtype":"m.text"},"ts":1381848235000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"matjas: what do you think it should do, from a webdev perspective?","msgtype":"m.text"},"ts":1381848290000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: return the empty string","msgtype":"m.text"},"ts":1381848311000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"currently it throws TypeError per webidl i think. also if you pass `undefined`","msgtype":"m.text"},"ts":1381848349000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"but i can make it empty string instead","msgtype":"m.text"},"ts":1381848369000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"matjas: any rationale for empty string?","msgtype":"m.text"},"ts":1381848399000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"just seemed more useful than throwing","msgtype":"m.text"},"ts":1381848568000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"but either way it should probably match passing `undefined`, so maybe letting it throw is better","msgtype":"m.text"},"ts":1381848600000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"you can make omitting the same as passing \"\"","msgtype":"m.text"},"ts":1381848668000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"which means undefined is the same as passing \"\"","msgtype":"m.text"},"ts":1381848674000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"in that case the return value would have to be the empty string","msgtype":"m.text"},"ts":1381848693000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"escape(optional DOMString foo = \"\") seems reasonable","msgtype":"m.text"},"ts":1381848731000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"agree, that matches doing a ToString on the argument. `String(undefined) === \"\"`.","msgtype":"m.text"},"ts":1381848825000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Note that `String(null) === \"null\"`","msgtype":"m.text"},"ts":1381848832000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: no...","msgtype":"m.text"},"ts":1381848904000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: String(undefined) === \"undefined\"","msgtype":"m.text"},"ts":1381848910000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"^","msgtype":"m.text"},"ts":1381848927000,"senderName":"Ms2ger`","senderId":"Ms2ger`@irc"},
{"content":{"body":"Oh drr","msgtype":"m.text"},"ts":1381848929000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Well then I think CSS.escape(undefined) === \"undefined\" is best, but CSS.escape(undefined) === \"\" is OK, you would do `CSS.escape = (s = \"\") => { do escaping... }","msgtype":"m.text"},"ts":1381848970000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"But CSS.escape(null) definitely should be \"null\"","msgtype":"m.text"},"ts":1381848985000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: so you’re saying ES ToString() should be applied to the argument values?","msgtype":"m.text"},"ts":1381849020000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"reads up","msgtype":"m.emote"},"ts":1381849031000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"uhm, yeah, you literally did just that, ignore me","msgtype":"m.text"},"ts":1381849042000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"well that's already the case for DOMString","msgtype":"m.text"},"ts":1381849067000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: I think treating undefined as omitted is better; otherwise you get different results for CSS.escape()","msgtype":"m.text"},"ts":1381849087000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"CSS.escape(undefined) === CSS.escape() === \"undefined\" is my proposal","msgtype":"m.text"},"ts":1381849109000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"ew","msgtype":"m.text"},"ts":1381849128000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that doesn’t seem very useful","msgtype":"m.text"},"ts":1381849131000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"(although it does align with ES ToString)","msgtype":"m.text"},"ts":1381849141000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"it's most idiomatic I think","msgtype":"m.text"},"ts":1381849146000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"It's what happens to most ES spec functions when you pass them undefined/omit the value and they expect a string","msgtype":"m.text"},"ts":1381849167000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"that is true, but given how CSS.escape is supposed to be used empty seems more useful","msgtype":"m.text"},"ts":1381849224000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"\"undefinedX\".startsWith() === true","msgtype":"m.text"},"ts":1381849224000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"CSS.escape(element.somePropertyThatIsUndefinedByAccident)","msgtype":"m.text"},"ts":1381849256000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"Wouldn't you want to see the \"undefined\" so that the accident becomes apparent?","msgtype":"m.text"},"ts":1381849283000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"You would want it to throw :p","msgtype":"m.text"},"ts":1381849297000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"hmm, maybe","msgtype":"m.text"},"ts":1381849300000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"\"undefinedX\".replace(undefined, \"foo\") === \"fooX\"","msgtype":"m.text"},"ts":1381849313000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"TabAtkins: what's the webidl support in bikeshed like?","msgtype":"m.text"},"ts":1381849322000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"\"xundefined\".indexOf() === 1","msgtype":"m.text"},"ts":1381849338000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: I don't think it's controversial that it's what the builtins typically do","msgtype":"m.text"},"ts":1381849390000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I think the only controversy is whether those mistakes therefore have to be propogated to all APIs","msgtype":"m.text"},"ts":1381849414000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"please file a bug when you've figured out what should happen (if it's different from what the spec has now) :-)","msgtype":"m.text"},"ts":1381849423000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I’ll just write the tests based on the current behavior (i.e. throwing as per WebIDL) and we’ll go from there","msgtype":"m.text"},"ts":1381849453000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"Don't throw :(","msgtype":"m.text"},"ts":1381849469000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Is there a reason not to throw except the (in this case rather weak, I think) consistency argument?","msgtype":"m.text"},"ts":1381849547000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"throwing is unexpected... very unlike the rest of the platform or any user-space libraries. nobody does argument validation, they just use the values they're given.","msgtype":"m.text"},"ts":1381849643000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"i argued for \"\" not because of consistency with ES built-ins that use ToString but rather because it seemed more useful","msgtype":"m.text"},"ts":1381849665000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"handles the edge case of `undefined` / no params more gracefully","msgtype":"m.text"},"ts":1381849717000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"Since passing invalid values is by definition an edge case and typically a mistake that kind of consistency seems rather misguided. Instead you should focus on how to make the best API possible given the constraints and the infrastructure","msgtype":"m.text"},"ts":1381849750000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"but as Domenic_ said, “Wouldn't you want to see the \"undefined\" so that the accident becomes apparent?” → the way to really make that apparent is to throw an error","msgtype":"m.text"},"ts":1381849753000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"jgraham: I think the definition of best API as defined by ES programmers is to not throw and to coerce instead. This is standard practice and I am unsure why it is getting pushback.","msgtype":"m.text"},"ts":1381849794000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Saying \"well typical js authors are too lazy / don't have a convenient way to validate arguments so no one else should either\" seems like a race to the bottom","msgtype":"m.text"},"ts":1381849819000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Domenic_: You haven't made the argument for that being the \"best\" API","msgtype":"m.text"},"ts":1381849847000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"It is closest to the stdlib (which is rather tiny), but that has unfortunate compat constraints","msgtype":"m.text"},"ts":1381849872000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I guess I don't really see the need to, this is just common JS API design knowledge. See e.g. Effective JavaScript.","msgtype":"m.text"},"ts":1381849874000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"It might be what js authors do, but that reflects the lack of effective tools for doing other things","msgtype":"m.text"},"ts":1381849902000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"right, if we were using another language, we would do something differently. but JS is our tool so we do things the JS way.","msgtype":"m.text"},"ts":1381849922000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Even if, per your own criteria, it is not actually best for authors?","msgtype":"m.text"},"ts":1381849943000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Badly?","msgtype":"m.text"},"ts":1381849944000,"senderName":"Ms2ger`","senderId":"Ms2ger`@irc"},
{"content":{"body":"maybe talk to the dart folks to make sure they establish your preferred throwing idiom as the darty way","msgtype":"m.text"},"ts":1381849946000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I have exactly no interest in dart","msgtype":"m.text"},"ts":1381849961000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"you clearly have an interest in doing JS \"better\" (according to you...)","msgtype":"m.text"},"ts":1381849978000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I have an interest in making the APIs as good as possible for authors","msgtype":"m.text"},"ts":1381849998000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Consistency is only one facet of goodness","msgtype":"m.text"},"ts":1381850009000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"If this were a common case I would agree that consistency on its own would obviously be a winning argument","msgtype":"m.text"},"ts":1381850036000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But it is, by definition an edge case","msgtype":"m.text"},"ts":1381850046000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Also, I think it is more consistent with other DOM functions","msgtype":"m.text"},"ts":1381850102000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"zcorpan: Bikeshed parses the webidl (it throws errors for invalid stuff, but should gracefully handle unknown stuff that doesn't otherwise invalidate the basic structure of the grammar.","msgtype":"m.text"},"ts":1381850857000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"zcorpan: Then it spits out marked-up text with either <a> or <dfn> around all the relevant things, based on whether it can find a definition for each term somewhere else or not.","msgtype":"m.text"},"ts":1381850886000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"zcorpan: And that's it.  It does this for everything with <pre class=idl>.","msgtype":"m.text"},"ts":1381850902000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic_: it has nothing to do with what I'm doing; web pages use it, and I use web pages","msgtype":"m.text"},"ts":1381852303000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(re: window-modal alerts)","msgtype":"m.text"},"ts":1381852315000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"jamesr__: that guy on blink-dev...","msgtype":"m.text"},"ts":1381853121000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"marcosc_: I don't see why it matters if some other files you are not committing are marked as modified?","msgtype":"m.text"},"ts":1381853379000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"What's the actual problem?","msgtype":"m.text"},"ts":1381853387000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: the problem is that when I clone the repo, git rewrites all the files that have a LFCR","msgtype":"m.text"},"ts":1381853421000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"You mean a CRLF?","msgtype":"m.text"},"ts":1381853472000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Domenic_, jgraham, zcorpan, annevk: `CSS.escape(number)` might be a good reason to coerce the arguments to strings after all","msgtype":"m.text"},"ts":1381853473000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"jgraham: yeah, sorry","msgtype":"m.text"},"ts":1381853499000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"matjas: coercing to string is not really contested I think","msgtype":"m.text"},"ts":1381853501000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"having too many conversations at the same time","msgtype":"m.emote"},"ts":1381853509000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"marcosc_: Pretty sure you should be able to disable that, but what, concretely, is the problem? You can't build?","msgtype":"m.text"},"ts":1381853543000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: I can't commit","msgtype":"m.text"},"ts":1381853560000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"annevk: but coercing to string implies that `CSS.escape(undefined) === CSS.escape(\"undefined\")` which is what the entire discussion was about","msgtype":"m.text"},"ts":1381853564000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"annevk: matjas: agreed, coercion to string is not contested. The question is whether to add `= \"\"` so that CSS.escape() or CSS.escape(undefined) give \"\" instead of \"undefined\". I think it's unnecessary but it's a pretty minor part.","msgtype":"m.text"},"ts":1381853568000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"matjas: no, the discussion was about whether an omitted argument should be special-cased","msgtype":"m.text"},"ts":1381853589000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"s/omitted argument/omitted or undefined argument/","msgtype":"m.text"},"ts":1381853601000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"alright","msgtype":"m.text"},"ts":1381853603000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"jgraham: see https://github.com/mozilla/servo/pull/1015#issuecomment-26127647","msgtype":"m.text"},"ts":1381853606000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"thanks for clarifying","msgtype":"m.text"},"ts":1381853610000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"that's what I get","msgtype":"m.text"},"ts":1381853611000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"jgraham: all the files look like they've changed","msgtype":"m.text"},"ts":1381853627000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"jgraham: even though I didn't change them :(","msgtype":"m.text"},"ts":1381853649000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"marcosc_: That is messy, but I don't know why it's a problem","msgtype":"m.text"},"ts":1381853650000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Does it stop you building?","msgtype":"m.text"},"ts":1381853659000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: I think throwing for undefined but not e.g. [] is rather weird fwiw","msgtype":"m.text"},"ts":1381853666000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: no, builds fine","msgtype":"m.text"},"ts":1381853668000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"annevk: jason's tweet is interesting, it's fun to think of es6 as built from lots of cc0 specs.","msgtype":"m.text"},"ts":1381853669000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"You can just not commit the things that you don't want to","msgtype":"m.text"},"ts":1381853679000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Domenic_: yeah, he should totally license it like that, although once integrated it might get lost","msgtype":"m.text"},"ts":1381853696000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"until we get Ecma to fix things","msgtype":"m.text"},"ts":1381853713000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: true, but it makes management very annoying ... as I need to distinguish between stuff I changed and stuff that Git changed","msgtype":"m.text"},"ts":1381853733000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"But did you try git config --global core.autocrlf=false","msgtype":"m.text"},"ts":1381853737000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: will try that","msgtype":"m.text"},"ts":1381853751000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"That's the \"old\" mechanism aiui, but if it's set to true then it could cause problems","msgtype":"m.text"},"ts":1381853779000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: it's currently set to nothing","msgtype":"m.text"},"ts":1381853793000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"when I try to set it, I get \"error: invalid key: core.autocrlf=false\"","msgtype":"m.text"},"ts":1381853801000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"s/=/ /","msgtype":"m.text"},"ts":1381853823000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1381853858000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"might have done the trick","msgtype":"m.text"},"ts":1381853891000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"jgraham: at least it's not complaining anymore","msgtype":"m.text"},"ts":1381853917000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"Sounds like an improvement","msgtype":"m.text"},"ts":1381853928000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: argh..","msgtype":"m.text"},"ts":1381853934000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"jgraham: now I get - \"fatal: bad config value for 'core.autocrlf' in /Users/marcosc/.gitconfig\"","msgtype":"m.text"},"ts":1381853997000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1381853999000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"Huh?","msgtype":"m.text"},"ts":1381854010000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Which version of git is this? And what's in that file?","msgtype":"m.text"},"ts":1381854035000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"The next best solution is throwing your computer out of the window, I think","msgtype":"m.text"},"ts":1381854050000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1381854058000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"ok, fixed","msgtype":"m.text"},"ts":1381854069000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"fatal: bad object HEAD","msgtype":"m.text"},"ts":1381854130000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"fatal: 'git status --porcelain' failed in submodule src/support/skia/skia","msgtype":"m.text"},"ts":1381854135000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"yay:)","msgtype":"m.text"},"ts":1381854145000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"Ms2ger is probably right","msgtype":"m.text"},"ts":1381854153000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"will try a hard reset ... cause that's how we fix things","msgtype":"m.text"},"ts":1381854164000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"trashing and cloning again...","msgtype":"m.text"},"ts":1381854271000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"still blames the Windows users ","msgtype":"m.emote"},"ts":1381854295000,"senderName":"marcosc_","senderId":"marcosc_@irc"},
{"content":{"body":"wait... I should be blaming Ms2ger","msgtype":"m.text"},"ts":1381854449000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"Blame git","msgtype":"m.text"},"ts":1381854486000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger, shut up Mr Mercurial :)","msgtype":"m.text"},"ts":1381854849000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"marcosc, it never messes with your line endings...","msgtype":"m.text"},"ts":1381854875000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"jgraham: I think what you suggested may have worked... don't seem to be having the problems anymore","msgtype":"m.text"},"ts":1381854882000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"marcosc: Good, good","msgtype":"m.text"},"ts":1381854938000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Ms2ger: It can, but doesn't by default","msgtype":"m.text"},"ts":1381854947000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I tend to think the git default behaviour is broken here, but then I'm not a windows user","msgtype":"m.text"},"ts":1381854969000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: still borked :( \"fatal: Not a git repository: src/support/skia/skia/../../../../.git/modules/src/support/skia/skia\"","msgtype":"m.text"},"ts":1381855128000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"That sounds like a different problem","msgtype":"m.text"},"ts":1381855159000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1381855163000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"Reclone","msgtype":"m.text"},"ts":1381855170000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"That's what I always do","msgtype":"m.text"},"ts":1381855176000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: I literally just recloned it","msgtype":"m.text"},"ts":1381855183000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"Heh","msgtype":"m.text"},"ts":1381855192000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Build?","msgtype":"m.text"},"ts":1381855194000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"marcosc: Did you try to submodule update?","msgtype":"m.text"},"ts":1381855202000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: no, will try that","msgtype":"m.text"},"ts":1381855214000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"I have never done that with servo, only used the build script","msgtype":"m.text"},"ts":1381855217000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Oh, well I was going to say it might not be a good idea)","msgtype":"m.text"},"ts":1381855231000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: yeah, that might cause more stuff to fall out of sync","msgtype":"m.text"},"ts":1381855376000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"going to try to re-fork","msgtype":"m.text"},"ts":1381855396000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"Domenic_: hah, in https://www.youtube.com/watch?v=hneN6aW-d9w it's still \"WHAT-WUG\"","msgtype":"m.text"},"ts":1381855400000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah... been meaning to talk to Domenic_ about that","msgtype":"m.text"},"ts":1381855416000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1381855417000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"WHAT-WII-GEE","msgtype":"m.text"},"ts":1381855437000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hey I'm just glad I managed to say \"opera\" instead of \"oprah\" like I do inside my head all the time... baby steps.","msgtype":"m.text"},"ts":1381855468000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"hahaha","msgtype":"m.text"},"ts":1381855475000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But ironically when Swedes (and therefore quite possibly also Norwegians) say it, it sounds more like Oprah.","msgtype":"m.text"},"ts":1381855562000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Domenic_: it's very good though; nice summary of all the lessons learned along the way","msgtype":"m.text"},"ts":1381855578000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: vindicated at last!! kind of.","msgtype":"m.text"},"ts":1381855636000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: thanks! :D","msgtype":"m.text"},"ts":1381855638000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"odinho: (is that actually true?)","msgtype":"m.text"},"ts":1381855675000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Domenic_: Oh man, the way you pronounced that grated on my ears so hard. ^_^","msgtype":"m.text"},"ts":1381856526000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: about srcN have you considered simply having a discrete number of attribute names? e.g., just src1-src9?","msgtype":"m.text"},"ts":1381857610000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Other than making validators slightly easier to write, I don't see what benefit that has.","msgtype":"m.text"},"ts":1381857633000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"the benefit of optimizing for the sane case instead of the pathological ones","msgtype":"m.text"},"ts":1381857695000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"in practice how many image alternatives do people actually normally want to use these kinds of mechanisms to specify?","msgtype":"m.text"},"ts":1381857749000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"5? 6?","msgtype":"m.text"},"ts":1381857753000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I don't see how this particularly optimizes for a sane case.  The difference between 9 and N attributes is pretty irrelevant implementation-wise.","msgtype":"m.text"},"ts":1381857777000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"it's not markup-wise","msgtype":"m.text"},"ts":1381857790000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"or authoring-wise","msgtype":"m.text"},"ts":1381857794000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"or documentation-wise","msgtype":"m.text"},"ts":1381857807000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"To be fair documentation wise it's easier to have an unbouded set and a pattern","msgtype":"m.text"},"ts":1381857841000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Yes it is, for all of those.","msgtype":"m.text"},"ts":1381857884000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I don't see how saying \"src10 is illegal\" makes anything easier markup-wise or authoring-wise.","msgtype":"m.text"},"ts":1381857919000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"srcN, so ugly :/","msgtype":"m.text"},"ts":1381857974000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I was kinda hoping <h1-6> was the last of that","msgtype":"m.text"},"ts":1381857984000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Come up with something better. :/","msgtype":"m.text"},"ts":1381857997000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It's identical to having multiple elements for sources, but with better implementation shape apparently.","msgtype":"m.text"},"ts":1381858029000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"http://www.whatwg.org/specs/web-apps/current-work/multipage/embedded-content-1.html#the-img-element states: \"The src attribute must be present [...]\". however, the steps below are written in a way which implies that src is optional. also, if width and height are set, browsers will happily render the element.","msgtype":"m.text"},"ts":1381858070000,"senderName":"aho","senderId":"aho@irc"},
{"content":{"body":"aho: the steps are written in a way that acknowledges that pages might be invalid.","msgtype":"m.text"},"ts":1381858096000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"TabAtkins: I think my current stance on this while thing is that we should try to figure out how to outsource this whole problem to custom elements","msgtype":"m.text"},"ts":1381858109000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"whole thing*","msgtype":"m.text"},"ts":1381858116000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah, right","msgtype":"m.text"},"ts":1381858118000,"senderName":"aho","senderId":"aho@irc"},
{"content":{"body":"aho: see http://www.whatwg.org/specs/web-apps/current-work/multipage/introduction.html#how-to-read-this-specification","msgtype":"m.text"},"ts":1381858122000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"annevk: I see no way in which that is remotely possible.","msgtype":"m.text"},"ts":1381858132000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"second paragraph in particular","msgtype":"m.text"},"ts":1381858135000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Like, it's not a path toward a solution in any way.","msgtype":"m.text"},"ts":1381858143000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: Because interaction with the preload scanner is a base requirement.","msgtype":"m.text"},"ts":1381858170000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And virtually by definition, that means it has to be a native language feature.","msgtype":"m.text"},"ts":1381858185000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: the preload scanner will need to be standardized and exposed, of course","msgtype":"m.text"},"ts":1381858191000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i currently use \"data:,\" as no-op image src for generated documentation, but that looks and feels kinda awkward","msgtype":"m.text"},"ts":1381858206000,"senderName":"aho","senderId":"aho@irc"},
{"content":{"body":"Ugh, that doesn't sound fun.","msgtype":"m.text"},"ts":1381858208000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: it will have to interact with service workers' fetch feature too","msgtype":"m.text"},"ts":1381858214000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: (architecture) standards are no fun","msgtype":"m.text"},"ts":1381858247000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(unless you're into that kind of thing)","msgtype":"m.text"},"ts":1381858259000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aho: it's what i do :-)","msgtype":"m.text"},"ts":1381858278000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"aho: that, or not have the image at all...","msgtype":"m.text"},"ts":1381858283000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"architecture standards can quickly turn into architecture astronautics","msgtype":"m.text"},"ts":1381858287000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: example?","msgtype":"m.text"},"ts":1381858298000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie_, it's documentation for CSS \"bricks\" which sometimes do include an image (like, say, a thumbnail for some product)","msgtype":"m.text"},"ts":1381858345000,"senderName":"aho","senderId":"aho@irc"},
{"content":{"body":"Well you seem to be proposing a feature with stated no use case just because that's what the architecture you envision requires","msgtype":"m.text"},"ts":1381858356000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"so, i kinda need some no-op image there","msgtype":"m.text"},"ts":1381858364000,"senderName":"aho","senderId":"aho@irc"},
{"content":{"body":"*no stated","msgtype":"m.text"},"ts":1381858368000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: you lost me","msgtype":"m.text"},"ts":1381858380000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You are proposing spending engineering effort exposing the preload scanner, but it isn't at all clear if that has a real use case","msgtype":"m.text"},"ts":1381858415000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Other than \"maybe implement responsive images on top of other primitives that don't exist yet\"","msgtype":"m.text"},"ts":1381858456000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Which might all turn out to be fine and sensible and a good idea","msgtype":"m.text"},"ts":1381858485000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: oh the preload scanner needs to be exposed for offline","msgtype":"m.text"},"ts":1381858488000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: that's part of exposing most of network so apps can decide whether to do network rather than the browser","msgtype":"m.text"},"ts":1381858515000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But right now it feels like the atmosphere's getting thin","msgtype":"m.text"},"ts":1381858524000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Why does that require the preload scanner?","msgtype":"m.text"},"ts":1381858535000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: well the preload scanner will have to be exposed","msgtype":"m.text"},"ts":1381858548000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: because network roundtrips through JavaScript","msgtype":"m.text"},"ts":1381858563000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, that part's true - if you're trying to intercept network loads with a service worker, and the preload scanner fires off network loads, then obviously there's an observable interaction there.","msgtype":"m.text"},"ts":1381858604000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Sure. But that doesn't mean that you can customise the behaviour","msgtype":"m.text"},"ts":1381858645000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Yeah it does - at minimum, it means you can block a preload.","msgtype":"m.text"},"ts":1381858703000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But given that you can actually intercept every other network request and provide custom data, it would be very weird if you couldn't do that for preload requests.","msgtype":"m.text"},"ts":1381858731000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Well in particular it doesn't mean that you can make the scanner scan for different elements","msgtype":"m.text"},"ts":1381858754000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Or attributes","msgtype":"m.text"},"ts":1381858765000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"So you can change the effects of the scanner","msgtype":"m.text"},"ts":1381858784000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But not the scanner itself","msgtype":"m.text"},"ts":1381858791000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: that's a good point","msgtype":"m.text"},"ts":1381859156000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: I guess if we want custom elements to be successful we might need that at some point, although there's some pretty daunting dependency problems there :/","msgtype":"m.text"},"ts":1381859204000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah, yeah, indeed.","msgtype":"m.text"},"ts":1381859331000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(That was to jgraham.)","msgtype":"m.text"},"ts":1381859344000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: Yeah, dealing with the dependency problems is almost impossible, without something like a declarative DSL that specifies which element/attrs are looked at and provides a grammar for extracting the urls.","msgtype":"m.text"},"ts":1381859403000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Which sounds terrible.","msgtype":"m.text"},"ts":1381859412000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Well, you also need to have the semantics of the custom element known at runtime. That's the harder part...","msgtype":"m.text"},"ts":1381859489000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well, the encompassing part I suppose.","msgtype":"m.text"},"ts":1381859503000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"There's a lot of ways in which custom elements will still be second-class citizens.","msgtype":"m.text"},"ts":1381859534000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Which is rather sad...","msgtype":"m.text"},"ts":1381859539000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hrm","msgtype":"m.text"},"ts":1381860042000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Didn't I see a change to fix http://w3c-test.org/web-platform-tests/master/XMLHttpRequest/formdata.htm?","msgtype":"m.text"},"ts":1381860053000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"smaug____: you around? The way timeout is defined now means that you might be able to access responseText for a bit and then once the timeout happens responseText is cleared because the error flag is set.","msgtype":"m.text"},"ts":1381860469000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: which is similar to what we do for end-user abort","msgtype":"m.text"},"ts":1381860485000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: and abort(), so maybe that's all fine","msgtype":"m.text"},"ts":1381860498000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: I'm trying to figure out what the async interface is that Fetch should expose","msgtype":"m.text"},"ts":1381860542000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1381860553000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"In the simple case you either have a network error, or a response which is subdivided into getting the headers, getting data, getting data EOF","msgtype":"m.text"},"ts":1381860608000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"In this more complicated case where we also have end-user abort and timeout the response you're already receiving is replaced somehow...","msgtype":"m.text"},"ts":1381860641000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Maybe as far as Fetch is concerned is that you simply killed the network and you get an erroneous \"getting data EOF\". And then at the API level it does the thing where it doesn't care about the response and such anymore.","msgtype":"m.text"},"ts":1381860693000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, timeout and abort are kind of error cases, so clearing responseText sounds reasonable","msgtype":"m.text"},"ts":1381860714000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Sure, for XMLHttpRequest, but is it sensible for <img>?","msgtype":"m.text"},"ts":1381860753000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Or should <img> keep showing the part of the image it was already displaying? I'm thinking the latter is what I typically see happen (and what I'd like as a user if my connection suddenly dropped)","msgtype":"m.text"},"ts":1381860793000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1381860805000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Oh sorry, connection dropping is different. Aah. What I see happen if I hit the cancel button.","msgtype":"m.text"},"ts":1381860819000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: that's a great talk. (just watched it)","msgtype":"m.text"},"ts":1381860881000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"annevk: well, that is about the consumer of the data read from the request, isn't it. in case of XHR one could have copied the data to elsewhere and use it even after timeout or abort","msgtype":"m.text"},"ts":1381861004000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"isn't img similar","msgtype":"m.text"},"ts":1381861008000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"the data is copied to some img library","msgtype":"m.text"},"ts":1381861025000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: I think the one thing we don't detect however is the connection dropping halfway through","msgtype":"m.text"},"ts":1381861082000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: \"network error\" can only happen before you receive a byte of the entity body","msgtype":"m.text"},"ts":1381861110000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: so \"network error\" and \"response\" are orthogonal, but I suppose \"response\" could have an additional \"error\" hook for end-user abort and timeout and such which would be up to the consumer to do something useful with","msgtype":"m.text"},"ts":1381861169000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"good morning, Whatwg!","msgtype":"m.text"},"ts":1381861201000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"That's still wrong. Hah. If you haven't gotten a response yet and you do have an end-user abort. It's not an upgrade of a response in that case.","msgtype":"m.text"},"ts":1381861326000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: wrote down description in https://www.w3.org/Bugs/Public/show_bug.cgi?id=22387#c3","msgtype":"m.text"},"ts":1381861675000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Also filed https://github.com/slightlyoff/ServiceWorker/issues/101 to ensure models stay in sync.","msgtype":"m.text"},"ts":1381861916000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hello","msgtype":"m.text"},"ts":1381862095000,"senderName":"madcorp","senderId":"madcorp@irc"},
{"content":{"body":"I've a question about one meta extension. :)","msgtype":"m.text"},"ts":1381862204000,"senderName":"madcorp","senderId":"madcorp@irc"},
{"content":{"body":"Who can help me?","msgtype":"m.text"},"ts":1381862212000,"senderName":"madcorp","senderId":"madcorp@irc"},
{"content":{"body":"Don't ask if you can ask, just ask.","msgtype":"m.text"},"ts":1381863171000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: is the current status of color-correction indeed ED? Cause that´s all I can find. It´s mentioned in both the css-color-correction module and the css-color module level 4.","msgtype":"m.text"},"ts":1381863374000,"senderName":"ronaldmansveld","senderId":"ronaldmansveld@irc"},
{"content":{"body":"(Just so we can assign it the correct priority for documenting it on webplatform)","msgtype":"m.text"},"ts":1381863390000,"senderName":"ronaldmansveld","senderId":"ronaldmansveld@irc"},
{"content":{"body":"Yes.","msgtype":"m.text"},"ts":1381863397000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"OK, thanks!","msgtype":"m.text"},"ts":1381863411000,"senderName":"ronaldmansveld","senderId":"ronaldmansveld@irc"},
{"content":{"body":"Hixie_: thank you, that means a lot!","msgtype":"m.text"},"ts":1381863523000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"TabAtkins: does it correctly mark up partial interfaces?","msgtype":"m.text"},"ts":1381864493000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Maybe!  I dunno.","msgtype":"m.text"},"ts":1381864508000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"By that I mean: it probably just does the simple thing that I just described, which'll link to the primary definition if it exists in Shepherd's db, and otherwise <dfn> it.","msgtype":"m.text"},"ts":1381864546000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"< jgraham> But ironically when Swedes (and therefore quite possibly also Norwegians) say it, it sounds more like Oprah.","msgtype":"m.text"},"ts":1381865496000,"senderName":"odinho","senderId":"odinho@irc"},
{"content":{"body":"Yeah. We normally drop the extra \"e\". But if you're very correct you say opEra. But most often it's jjust \"opra\".","msgtype":"m.text"},"ts":1381865617000,"senderName":"odinho","senderId":"odinho@irc"},
{"content":{"body":"And our \"o\" is very different.","msgtype":"m.text"},"ts":1381865688000,"senderName":"odinho","senderId":"odinho@irc"},
{"content":{"body":"was there a conclusion about CSS.supports(undefined) ?","msgtype":"m.text"},"ts":1381871838000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Don't think so, no.","msgtype":"m.text"},"ts":1381872383000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i have a feeling this has been discussed before and resulted in webidl defaulting to throwing...","msgtype":"m.text"},"ts":1381872812000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I think the semi-conclusion was that it should either be \"undefined\" or \"\", depending on whether you give it a default value of \"\" or not.","msgtype":"m.text"},"ts":1381873004000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"i don't see rebuttals of pro-throwing: consistency with other DOM functions and ease of debugging","msgtype":"m.text"},"ts":1381874552000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"note that empty string can result in an exception anyway if you do document.querySelector('#' + CSS.escape())","msgtype":"m.text"},"ts":1381874666000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"since '#' isn't a valid selector, you get a TypeError","msgtype":"m.text"},"ts":1381874689000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"so if you don't like exceptions, empty string is out...","msgtype":"m.text"},"ts":1381874709000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"JS escape() and encodeURIComponent() result in \"undefined\", maybe it's reasonable for CSS.escape() to be consistent with those","msgtype":"m.text"},"ts":1381874973000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"in case zcorpan reads logs, I'd much rather have an exception above than have it search for the id (or class, or who knows what) \"undefined\"","msgtype":"m.text"},"ts":1381877324000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"+1 zewt","msgtype":"m.text"},"ts":1381878693000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"annevk-cloud: good call about staying in sync. I'm mostly trying to avoid extra events beyond completion/failure at the moment. We can plumb them into the response object later. The overall operation's constituent parts can be dealt with independently of the promise that describes the overall completion","msgtype":"m.text"},"ts":1381880825000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"annevk-cloud: so I'm doing my bit by not defining any of that API ATM ;-)","msgtype":"m.text"},"ts":1381880847000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"},
{"content":{"body":"annevk-cloud: happy to work with you to flesh it out","msgtype":"m.text"},"ts":1381880875000,"senderName":"slightlyoff","senderId":"slightlyoff@irc"}
]