[
{"content":{"body":"botie, inform zcorpan when you have some time, I wanted to ask you about <picture> test cases","msgtype":"m.text"},"ts":1559302144000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"will do","msgtype":"m.text"},"ts":1559302144000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"If I want to return an interface like { foo, bar } where foo & bar are readonly arrays of strings, what type should I use? FrozenArray? Array? https://heycam.github.io/webidl/#idl-sequence says I shouldn't use a sequence.","msgtype":"m.text"},"ts":1559312057000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"To make the example real: the object is a user contact, and the properties are `email` and `tel`, but a user can have many emails and tel numbers","msgtype":"m.text"},"ts":1559312164000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"pretty sure FrozenArray is the answer","msgtype":"m.text"},"ts":1559312192000,"senderName":"jenny-m","senderId":"jenny-m@irc"},
{"content":{"body":"jenny-m: https://html.spec.whatwg.org/multipage/comms.html#messageevent uses `FrozenArray` for `ports`, so that confirms it I think. Ta!","msgtype":"m.text"},"ts":1559312391000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: If you're *returning* a value like that, you can use `sequence<>` (and probably should).","msgtype":"m.text"},"ts":1559324595000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You just can't use sequence for an attribute.","msgtype":"m.text"},"ts":1559324605000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: it'd be returning an object that has arrays as properties","msgtype":"m.text"},"ts":1559324648000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"An object as in an interface, or a record?","msgtype":"m.text"},"ts":1559324665000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hmm, I'd need to look up the difference","msgtype":"m.text"},"ts":1559324690000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Did you type it out as `interface Foo {...}`?","msgtype":"m.text"},"ts":1559324708000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(or a dictionary)","msgtype":"m.text"},"ts":1559324723000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I recommended interface, but that can change","msgtype":"m.text"},"ts":1559324768000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I don't think I'd use dictionary/record unless the keys were potentially different each time. Wdyt?","msgtype":"m.text"},"ts":1559324820000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Eg, `JSON.parse` would return a dictionary/record in idl land","msgtype":"m.text"},"ts":1559324864000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"But if I was always returning a thing that had keys \"email\" and \"tel\", that feels like an interface","msgtype":"m.text"},"ts":1559324903000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Usually interface is the right thing yeah, but sometimes, if you're just returning some raw information, a plain-ol-JS-object (aka a dictionary or record) is appropriate. Are there methods on the thing?","msgtype":"m.text"},"ts":1559325371000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Dictionaries always have the same keys too, that's not a differentiator from interfaces.()","msgtype":"m.text"},"ts":1559325384000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":")","msgtype":"m.text"},"ts":1559325387000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"and records have the same type for all their values, so probably wouldn't be what JSON.parse returns either. It probably would just return a plain `object` in IDL land...","msgtype":"m.text"},"ts":1559325814000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"No methods on it. Hmm, can't decide.","msgtype":"m.text"},"ts":1559325857000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I think I would just return a dictionary in that case? Presumably it's not live-updating attributes, but returning a snapshot of state when the object was created?","msgtype":"m.text"},"ts":1559325930000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Yeah, it's just a snapshot","msgtype":"m.text"},"ts":1559326007000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Yeah, I'll go with a dictionary then","msgtype":"m.text"},"ts":1559326422000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Yeah, dict is appropriate if it's just a snapshot of some state with no methods on it. (And no plans to add methods in the future.)","msgtype":"m.text"},"ts":1559326662000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"When I create a instance of an IDL type, when is the equivalent platform object created? Is the platform object 1:1 with the IDL type instance?","msgtype":"m.text"},"ts":1559326669000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(Later upgrading a dictionary to an interface is possible, but technically has behavior differences that might be exercised. They're very minor tho.)","msgtype":"m.text"},"ts":1559326691000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yes, 1:1.","msgtype":"m.text"},"ts":1559326696000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Good, phew","msgtype":"m.text"},"ts":1559326705000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Your internal algorithms should be operating on IDL or Infra values, and just assume that they *are* the platform objects.","msgtype":"m.text"},"ts":1559326736000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I don't think we should assume infra values are platform objects","msgtype":"m.text"},"ts":1559326768000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"They might live entirely \"in parallel\"","msgtype":"m.text"},"ts":1559326781000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Where platform objects cannot exist, right?","msgtype":"m.text"},"ts":1559326794000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Oh wait, by \"platform\" do you mean the JS objects that authors use?","msgtype":"m.text"},"ts":1559326829000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Or the internal objects that the browser uses?","msgtype":"m.text"},"ts":1559326835000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ah, I meant JS I objects","msgtype":"m.text"},"ts":1559326851000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Wrong term?","msgtype":"m.text"},"ts":1559326861000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"dunno","msgtype":"m.text"},"ts":1559326865000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Anyway, the JS objects are magically created from IDL at the moment you pass the IDL value to author code, via a return value. (And vice versa via a method argument)","msgtype":"m.text"},"ts":1559326897000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(where \"return value\" and \"argument\" also cover the attribute getter/setters)","msgtype":"m.text"},"ts":1559326914000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And yeah, Infra objects never become JS, they have to be laundered into IDL first.","msgtype":"m.text"},"ts":1559326940000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So if I return the same IDL instance twice, I'm not guaranteed the same JS object twice?","msgtype":"m.text"},"ts":1559326941000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"The algo should be clear on whether it's the same or not.","msgtype":"m.text"},"ts":1559326959000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"How?","msgtype":"m.text"},"ts":1559326966000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Specify caching or not.","msgtype":"m.text"},"ts":1559326973000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"What would I cache?","msgtype":"m.text"},"ts":1559326984000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"IDL doesn't really have object identity, so it's not obvious from principles.","msgtype":"m.text"},"ts":1559326988000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Heh, gimme a concrete example and I can help more.","msgtype":"m.text"},"ts":1559327007000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Eg a `.loaded` getter that returns the same promise unless the \"src\" changes","msgtype":"m.text"},"ts":1559327074000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Okay, so then you create an IDL object, and cache it.","msgtype":"m.text"},"ts":1559327096000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But I thought there was no guarantee that returning the same IDL object would map to the same JS object?","msgtype":"m.text"},"ts":1559327127000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Plz don't read too much into my \"magically created\", I just meant you don't need to do anything special to make the JS object happen.","msgtype":"m.text"},"ts":1559327133000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"JS<->IDL is understood to be 1:1","msgtype":"m.text"},"ts":1559327145000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You, the spec author, just never ever touch the JS object unless you ahve a *very* good reason and a smart person holding your hand (not me).","msgtype":"m.text"},"ts":1559327173000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Just to confirm, if I pass the same IDL instance back twice, the two JS objects at the other end will be `===`, right?","msgtype":"m.text"},"ts":1559327208000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1559327213000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But you do have to be explicit that it's the same IDL instance which was cached between calls. ^_^","msgtype":"m.text"},"ts":1559327232000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Gotcha! Phew, I thought for a moment there my whole understanding of specs was coming crashing down","msgtype":"m.text"},"ts":1559327269000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"hehehe","msgtype":"m.text"},"ts":1559327312000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"One last one… can I create instances of IDL types \"in parallel\"?","msgtype":"m.text"},"ts":1559327339000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(Assuming that the JS object creation happens later, when I return it on the main thread)","msgtype":"m.text"},"ts":1559327370000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Yes, you can *create* them. You just can't cause an author-observable update to anything while \"in parallel\".","msgtype":"m.text"},"ts":1559327371000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(pretty sure, but Domenic should confirm)","msgtype":"m.text"},"ts":1559327393000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(just in case there's actually some state dependency I'm not aware of)","msgtype":"m.text"},"ts":1559327403000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Gotcha. My (wrong) assumption that JS objects are created at the same time led me to only create IDL instances on the main thread","msgtype":"m.text"},"ts":1559327454000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"But it wouldn't be observable, so fine","msgtype":"m.text"},"ts":1559327488000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I think was confused me was seeing instances of interfaces created in a given realm.","msgtype":"m.text"},"ts":1559328016000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"That made it feel like JS object creation happened then, and it must therefore be on the JS thread.","msgtype":"m.text"},"ts":1559328050000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I think what confused me*","msgtype":"m.text"},"ts":1559328069000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: hmm I remember it to be the exact opposite","msgtype":"m.text"},"ts":1559328132000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"IDL object is defined to be identical to the JS object","msgtype":"m.text"},"ts":1559328145000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"numbers, etc. are probably fine","msgtype":"m.text"},"ts":1559328193000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"Not sure I understand. I'm talking more about instantiation than definition","msgtype":"m.text"},"ts":1559328269000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"as in \"create a … object\"?","msgtype":"m.text"},"ts":1559328294000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"Yeah \"Let |whatever| be a new {{Whatever}}\"","msgtype":"m.text"},"ts":1559328358000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I'm not 100% sure but from what I remember this shouldn't be allowed","msgtype":"m.text"},"ts":1559328434000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"If I wanted to create an instance of {{Whatever}}, how should I do that?","msgtype":"m.text"},"ts":1559328492000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"In order for, say, the `window.navigator` getter to return an instance of `Navigator`, and instance of the IDL interface `Navigator` must be created somewhere.","msgtype":"m.text"},"ts":1559328621000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"an instance*","msgtype":"m.text"},"ts":1559328634000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: hmm for that generally you could do something like \"Each {{Window}} object has an associated <dfn>navigator</dfn>, which is a {{Navigator}} object.\"","msgtype":"m.text"},"ts":1559328670000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"and then at the same time as when the Window object is instantiated the Navigator object would be too","msgtype":"m.text"},"ts":1559328729000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"reads up on the log","msgtype":"m.emote"},"ts":1559328750000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: but that's just handwaving around creating an instance of Navigator, right?","msgtype":"m.text"},"ts":1559328753000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: well, not really. This construct is supposed to parallel something like `class Window { Navigator navigator; }` in C++","msgtype":"m.text"},"ts":1559328824000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"i.e., the Navigator is created at the same time as the Window, because a window _has_ a navigator","msgtype":"m.text"},"ts":1559328849000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"an implementation might actually hold off on creating the Navigator object until it is first accessed, but that's considered an implementation detail","msgtype":"m.text"},"ts":1559328960000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: so step 29 and 31 of https://fetch.spec.whatwg.org/#dom-request is incorrect?","msgtype":"m.text"},"ts":1559329017000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Or step 8 of https://url.spec.whatwg.org/#dom-url-url to go for a smaller example","msgtype":"m.text"},"ts":1559329080000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: they are fine, but also different from the navigator example","msgtype":"m.text"},"ts":1559329106000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"for example the \"has an associated ... object\" pattern is used for https://url.spec.whatwg.org/#concept-url-query-object","msgtype":"m.text"},"ts":1559329132000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: but 100% like my \"let |whatever| be a new {{Whatever}}\" example, right?","msgtype":"m.text"},"ts":1559329148000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yeah but I thought you were asking about \"in parallel\"?","msgtype":"m.text"},"ts":1559329168000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"the constructors don't run in parallel","msgtype":"m.text"},"ts":1559329180000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: but not all interfaces have constructors","msgtype":"m.text"},"ts":1559329215000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(probably unrelated to this discussion, but) they generally should have constructors","msgtype":"m.text"},"ts":1559329263000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"okay I feel like we are talking about something different","msgtype":"m.text"},"ts":1559329290000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"\"new {{…}}\" don't run the constructor, at least in most cases","msgtype":"m.text"},"ts":1559329305000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"I guess I'm still in the dark on whether instances of IDL types can be created while \"in parallel\" 😀","msgtype":"m.text"},"ts":1559329407000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I don't think you can create a new instance of an IDL type in parallel, no","msgtype":"m.text"},"ts":1559329453000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"but also agree that running of constructors is more or less unrelated","msgtype":"m.text"},"ts":1559329471000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Gotcha. Good to know I haven't been doing that unnecessarily 😀","msgtype":"m.text"},"ts":1559329483000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I feel like this is sufficiently confusing to warrant some guidance in HTML","msgtype":"m.text"},"ts":1559329585000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"probably webidl rather than html, but yes","msgtype":"m.text"},"ts":1559329610000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Either. HTML defines \"in parallel\"","msgtype":"m.text"},"ts":1559329631000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Mek: \"in parallel\" is defined in HTML though, and IDL doesn't really know about parallelism","msgtype":"m.text"},"ts":1559329633000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"one issue is how idl objects are associated with realms, for which for now idl says \" The mechanisms for associating objects with Realms are, for now, underspecified\"","msgtype":"m.text"},"ts":1559329638000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Mek: that's really only an issue for non-platform objects","msgtype":"m.text"},"ts":1559329668000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"Yeah, that's what got me thinking that the JS object is created when the IDL object is created","msgtype":"m.text"},"ts":1559329673000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"for platform objects there's always a [[Realm]] slot","msgtype":"m.text"},"ts":1559329696000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"I was pretty sure you could create IDL objects in parallel. I'd be somewhat surprised if that wasn't the case.","msgtype":"m.text"},"ts":1559329706000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"files issue","msgtype":"m.emote"},"ts":1559329727000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: but if you're creating an instance, how does it know what realm to put it in?","msgtype":"m.text"},"ts":1559329738000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"https://heycam.github.io/webidl/#es-platform-objects seems to be the section that we're talking about, right?","msgtype":"m.text"},"ts":1559329744000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"that defines the algorithms you should call when creating a new object for some IDL interface","msgtype":"m.text"},"ts":1559329756000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"JakeA: that is https://github.com/heycam/webidl/issues/135","msgtype":"m.text"},"ts":1559329776000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"ah yes, the third bullet point there is pretty explicit that creating them in parallel is okay, as long as you're explicit about the realm","msgtype":"m.text"},"ts":1559329817000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"TimothyGu: but if you've gone parallel, then queued a task, does that association hold?","msgtype":"m.text"},"ts":1559329852000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: what association?","msgtype":"m.text"},"ts":1559329885000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"Ah yes the third bullet point answers my question too","msgtype":"m.text"},"ts":1559329897000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(but later discussion in that thread seems to also ask if we really should allow creating objects from in parallel)","msgtype":"m.text"},"ts":1559329903000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"TimothyGu: there's no longer a \"this\" if you've queued a task","msgtype":"m.text"},"ts":1559329939000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Unless you kinda handwave it as being \"the context object from which the parent steps were called\"","msgtype":"m.text"},"ts":1559329981000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I think that handwaving is fine","msgtype":"m.text"},"ts":1559329991000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"bc specs already assume all \"local variables\" are captured anyway","msgtype":"m.text"},"ts":1559330007000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"Fair","msgtype":"m.text"},"ts":1559330051000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"well, for queueing a task it probably makes more sense to somehow derive the realm from where the task is queued on, rather than who queued the task (i.e. postmessage posting a task to a different global)","msgtype":"m.text"},"ts":1559330063000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Also true","msgtype":"m.text"},"ts":1559330090000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"so https://github.com/heycam/webidl/issues/135#issuecomment-286789309 seems pretty reasonable to me... But I guess if one thing is clear from that thread it is that currently there are no well defiend semantics...","msgtype":"m.text"},"ts":1559330092000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Good to know my questions aren't stupid, at least","msgtype":"m.text"},"ts":1559330183000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Ah there's more. https://html.spec.whatwg.org/multipage/infrastructure.html#parallelism has an example with rejecting promises with a new TypeError object in parallel, but in https://github.com/whatwg/notifications/issues/113#issuecomment-349292187 annevk explicitly says resolving a promise in parallel isn't allowed","msgtype":"m.text"},"ts":1559330526000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"Right, that's because it's observable - it enqueues promise callbacks, and their ordering wrt other timing-based callbacks is author-observable (and thus can't be done while in parallel).","msgtype":"m.text"},"ts":1559330762000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So yeah that's an error.","msgtype":"m.text"},"ts":1559330768000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Filed https://github.com/whatwg/html/issues/4669 to hopefully sort out this mess","msgtype":"m.text"},"ts":1559331577000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"Thanks TimothyGu","msgtype":"m.text"},"ts":1559331880000,"senderName":"annevk","senderId":"annevk@irc"}
]