[
{"content":{"body":"Just a reminder to annevk and others: Please use spaces in wiki page titles. CamelCase is unnecessary and makes things harder to search for.","msgtype":"m.text"},"ts":1422837055000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"http://xkcd.com/1481/ :-)","msgtype":"m.text"},"ts":1422864079000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Whoa, Googlebot only just added support for TLSv12","msgtype":"m.text"},"ts":1422864726000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Would have been nice if Adam Langley had pointed that out while telling everyone only TLSv12 is cryptographically secure","msgtype":"m.text"},"ts":1422864774000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hello","msgtype":"m.text"},"ts":1422865520000,"senderName":"dbz","senderId":"dbz@irc"},
{"content":{"body":"I'm having trouble with my canvas element. I want it to be full screen, and when I set height/width to 100%, then the things the canvas draws also get bigger","msgtype":"m.text"},"ts":1422865593000,"senderName":"dbz","senderId":"dbz@irc"},
{"content":{"body":"To be specific, I'm trying to turn this game I made into a phonegap app: http://dbz.github.io/BubbleChain/","msgtype":"m.text"},"ts":1422865639000,"senderName":"dbz","senderId":"dbz@irc"},
{"content":{"body":"And when I make the canvas height/width 100%, then the balls get huge and don't act like the walls are the walls","msgtype":"m.text"},"ts":1422865661000,"senderName":"dbz","senderId":"dbz@irc"},
{"content":{"body":"so, <my-element> and <div is=my-element> are mutually exclusive, right? My custom element is unable to support both invocations?","msgtype":"m.text"},"ts":1422881159000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"ondras_: not sure what you mean","msgtype":"m.text"},"ts":1422881236000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"okay","msgtype":"m.text"},"ts":1422881256000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"so, if I do registerElement(, {extends:...})","msgtype":"m.text"},"ts":1422881280000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"I need to use @is","msgtype":"m.text"},"ts":1422881286000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"and the <my-element> version does not work","msgtype":"m.text"},"ts":1422881293000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"if I omit \"extends\", it goes the other way around","msgtype":"m.text"},"ts":1422881309000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"at least in chrome canary.","msgtype":"m.text"},"ts":1422881314000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"sounds about right","msgtype":"m.text"},"ts":1422881339000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"My custom element is unable to support both invocations?\"","msgtype":"m.text"},"ts":1422881356000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"does this question make sense now?","msgtype":"m.text"},"ts":1422881360000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"I don't think we should do is=\"\", we should make MyElement extends HTMLDivElement work","msgtype":"m.text"},"ts":1422881362000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ondras_: yeah I guess, I don't really see it as invocations","msgtype":"m.text"},"ts":1422881375000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"okay, blame my poor english skills then","msgtype":"m.text"},"ts":1422881389000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"my point is","msgtype":"m.text"},"ts":1422881391000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"what shall I do?","msgtype":"m.text"},"ts":1422881394000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"as an author of a custom element","msgtype":"m.text"},"ts":1422881401000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"shall I use \"extends\" or not?","msgtype":"m.text"},"ts":1422881407000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"ondras_: not sure, neither Apple nor Mozilla is interested in supporting the current prototype-based custom elements","msgtype":"m.text"},"ts":1422881459000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1422881487000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"dammit :)","msgtype":"m.text"},"ts":1422881491000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"looks like the hype wave already took off; this will probably be a hard landing for many","msgtype":"m.text"},"ts":1422881511000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"ondras_: I wrote some blog posts and there's also https://wiki.whatwg.org/wiki/Custom_Elements","msgtype":"m.text"},"ts":1422881571000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ondras_: and over a hundred emails on public-webapps","msgtype":"m.text"},"ts":1422881589000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: right. the amount on public-webapps is staggering. I follow that group but I am reluctant to read that much mail .)","msgtype":"m.text"},"ts":1422881696000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"annevk: anyway, thanks for the info about status quo","msgtype":"m.text"},"ts":1422881745000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"is there any js api to access and modify styling for ::before and ::after pseudo-elements?","msgtype":"m.text"},"ts":1422890831000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"ondras_: not really, but you can add a rule to a stylesheet to style them","msgtype":"m.text"},"ts":1422890913000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ondras_: what are you trying to do?","msgtype":"m.text"},"ts":1422890944000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: change the \"color\" css property of a ::before element :/","msgtype":"m.text"},"ts":1422891095000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"but the color is js-generated, unfortunately","msgtype":"m.text"},"ts":1422891101000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"so I am out of options, apparently","msgtype":"m.text"},"ts":1422891106000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"scoped stylesheets are no longer supported, iirc?","msgtype":"m.text"},"ts":1422891134000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"i mean you can add a rule to a stylesheet with JS","msgtype":"m.text"},"ts":1422891157000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"or modify an existing rule","msgtype":"m.text"},"ts":1422891166000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1422891187000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"well say I have ten <div>s and I want to modify the ::before of one particular div","msgtype":"m.text"},"ts":1422891217000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"those are not divs, those are my custom elements","msgtype":"m.text"},"ts":1422891230000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"I have no control about their count, IDs and so on","msgtype":"m.text"},"ts":1422891238000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"ondras_: there's a proposal to expose them I think, but not in current browsers","msgtype":"m.text"},"ts":1422891295000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ondras_: but then custom elements are not cross browser either :-)","msgtype":"m.text"},"ts":1422891306000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, obviously. but the polymer's platform.js works quite okay","msgtype":"m.text"},"ts":1422891327000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"Domenic: so if custom-button { @extends button } can be done automatically, what is left?","msgtype":"m.text"},"ts":1422891889000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: basically replacing the localName checks with something that looks like instanceof but is really ignoreRealmInstanceOf","msgtype":"m.text"},"ts":1422891939000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: right?","msgtype":"m.text"},"ts":1422891951000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: focus, a11y, a few other things","msgtype":"m.text"},"ts":1422891962000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: the only fallback you miss at that point is non-script fallback","msgtype":"m.text"},"ts":1422891968000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: why would that be gone?","msgtype":"m.text"},"ts":1422891972000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: getting a button's CSS doesn't give you its focus behavior...","msgtype":"m.text"},"ts":1422891982000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yes, but if it's a proper subclass you should get that","msgtype":"m.text"},"ts":1422891996000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, maybe, but you'd have to modify the focus spec for that","msgtype":"m.text"},"ts":1422892014000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: and if you update the localName checks elsewhere with ignoreRealmInstanceOf","msgtype":"m.text"},"ts":1422892015000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"better to add an extensible focus mechanism so that you don't have to subclass a focusable element to get focus behavior","msgtype":"m.text"},"ts":1422892041000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: is there anything in the focus spec that would require something else from modifying a localName check?","msgtype":"m.text"},"ts":1422892048000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: that seems separate","msgtype":"m.text"},"ts":1422892063000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it would be better if focus spec was like https://docs.google.com/document/d/1k93Ez6yNSyWQDtGjdJJqTBPmljk9l2WS3JTe5OHHB50/edit# so that it checked el.isTabStop()","msgtype":"m.text"},"ts":1422892069000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"then isTabStop() behavior is inherited if you inherit from the HTMLButtonElement prototype","msgtype":"m.text"},"ts":1422892084000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But also could be configured separately","msgtype":"m.text"},"ts":1422892088000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I don't disagree with any of this","msgtype":"m.text"},"ts":1422892099000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heh ok","msgtype":"m.text"},"ts":1422892105000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"However, I'm not sure why that has to be done first","msgtype":"m.text"},"ts":1422892109000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i guess the idea is that if you actually make all these things extensible then you don't need any local name *or* ignoreRealmInstanceOf checks","msgtype":"m.text"},"ts":1422892130000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You use inherited protocols for all of them, instead of switch statements","msgtype":"m.text"},"ts":1422892145000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Polymorphism etc. etc.","msgtype":"m.text"},"ts":1422892153000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Getting from <input is=x-x> to <x-x> was two things I thought. Style and localName checks.","msgtype":"m.text"},"ts":1422892156000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Okay, so that would be an alternative way to get there","msgtype":"m.text"},"ts":1422892185000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But that seems more invasive on the short term","msgtype":"m.text"},"ts":1422892192000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1422892196000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"trying to think if there was anything more. which i guess was your original question.","msgtype":"m.text"},"ts":1422892205000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":":-)","msgtype":"m.text"},"ts":1422892213000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i think for a sufficiently expansive definition of \"localname checks\" (which might be broader than the amount of times implementations check localNames) that is correct","msgtype":"m.text"},"ts":1422892271000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"E.g. I don't think implementations have a switch(localName) to assign accessibility behavior","msgtype":"m.text"},"ts":1422892294000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and specs say \"<button> behaves like this\"","msgtype":"m.text"},"ts":1422892327000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"you'd have to modify it to say \"HTMLButtonElement and any inheritors behave like this\"","msgtype":"m.text"},"ts":1422892340000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the switch(localName)s, in specs at least, appear in only a few cross-cutting places, like IIRC focus","msgtype":"m.text"},"ts":1422892370000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"One other problem with this is <input> btw. Ideally you'd subclass one of the types, not <input> in general. But I guess there's not really a way around that.","msgtype":"m.text"},"ts":1422892575000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Even better would be <input type=my-custom> maybe?","msgtype":"m.text"},"ts":1422892584000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Has the same graceful degradation","msgtype":"m.text"},"ts":1422892611000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, for specifications we want a phrase for \"button-and-subclasses elements\"","msgtype":"m.text"},"ts":1422892648000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmmmm I like this <input type=\"my-custom\"> idea...","msgtype":"m.text"},"ts":1422892755000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Seems hard to make work","msgtype":"m.text"},"ts":1422892761000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But it's true that type=\"\" is kind of the is=\"\" of 1999","msgtype":"m.text"},"ts":1422892771000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"On the other hand we only have one HTMLInputElement constructor/prototype.","msgtype":"m.text"},"ts":1422892805000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah, HTML's design and JavaScript's object model are not a great match","msgtype":"m.text"},"ts":1422894167000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"> But it's true that type=\"\" is kind of the is=\"\" of 1999 <- history repeats ?","msgtype":"m.text"},"ts":1422894472000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"Domenic: e.g. even if you offered some kind of solution specific to <input>, you still couldn't subclass <input type=password>","msgtype":"m.text"},"ts":1422894520000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: it'll always be a little bit weird","msgtype":"m.text"},"ts":1422894531000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://briankardell.wordpress.com/2015/01/14/friendly-fire-the-fog-of-dom/ is great","msgtype":"m.text"},"ts":1422912213000,"senderName":"dglazkov","senderId":"dglazkov@irc"}
]