[
{"content":{"body":"Anyone happen to know how many concurrent http/1.1 connections the latest versions of firefox/chrome can make? I heard at least one point it was ~6?","msgtype":"m.text"},"ts":1491796559000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: per origin, sounds about right","msgtype":"m.text"},"ts":1491799651000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1491799937000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"JakeA: Domenic: mkwst: did you already consider alternative timing scenarios?","msgtype":"m.text"},"ts":1491809822000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"alternative to what?","msgtype":"m.text"},"ts":1491809834000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: to synchronous","msgtype":"m.text"},"ts":1491809840000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"How would you expect that to look?","msgtype":"m.text"},"ts":1491809965000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: see last comment in the issue","msgtype":"m.text"},"ts":1491809977000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: well and second-to-last (why is that called second and not first?)","msgtype":"m.text"},"ts":1491809992000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"*sigh* I only picked this up because webauthn needed something simple and it looked like folks had already converged on a design, not because I have deep opinions on cancellation (except, of course, about the spelling). I don't think I'm the right guy to define the behavior.","msgtype":"m.text"},"ts":1491810107000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"The needs I know about are super-simple, so either synchronous or asynchronous mechanisms could easily fit them.","msgtype":"m.text"},"ts":1491810135000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: good to know, just thought I'd check","msgtype":"m.text"},"ts":1491810155000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I appreciate it! I hope JakeA has more interesting opinions for you!","msgtype":"m.text"},"ts":1491810174000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: either way, I think we're pretty close to success","msgtype":"m.text"},"ts":1491810483000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I hope so! To be clear, I'm willing to do the work to specify what folks want. I just don't have strong opinions about what that might be, nor have I done the background work to gather context on alternative approaches.","msgtype":"m.text"},"ts":1491810555000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"I somewhat hope Domenic already thought through the timing implications given his long history with promises and will tell us why \"asynchronous\" isn't important","msgtype":"m.text"},"ts":1491810625000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: success https://travis-ci.org/whatwg/encoding/builds/220466241","msgtype":"m.text"},"ts":1491813105000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"as far as testing the new checker message-dropping feature","msgtype":"m.text"},"ts":1491813141000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and just as far as the “Text run is not in Unicode Normalization Form C.”","msgtype":"m.text"},"ts":1491813179000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: great, that looks more like what I was expecting","msgtype":"m.text"},"ts":1491813214000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah and I’ll deal with the “document appears to be written in Kinyarwanda” upstream","msgtype":"m.text"},"ts":1491813239000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I'm happy with excluding that too","msgtype":"m.text"},"ts":1491813255000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: same for private use, which was also intentional","msgtype":"m.text"},"ts":1491813265000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Once those two warnings are gone it should succeed I expect","msgtype":"m.text"},"ts":1491813292000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1491813298000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and yeah the private-use one I will add to the filter","msgtype":"m.text"},"ts":1491813304000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"This is really great MikeSmith, much faster turnaround than I could have hoped for","msgtype":"m.text"},"ts":1491813351000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah I’m glad I managed to get it to work","msgtype":"m.text"},"ts":1491813403000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and the Kinyarwanda error, that is a general problem with the language profile for that language and that I realize now must be affecting other checker users. So upstream in the checker source I should either fix that language profile or drop it","msgtype":"m.text"},"ts":1491813473000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: btw if you remember anything other issues or PRs you’ve been waiting on me for, lemme know","msgtype":"m.text"},"ts":1491813688000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"over the weekend, tried to respond to all that I could find (where I had mentions or was assigned)","msgtype":"m.text"},"ts":1491813811000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I think you managed to hit most, I'll let you know if I spot another","msgtype":"m.text"},"ts":1491813849000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"cheers","msgtype":"m.text"},"ts":1491813901000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: actually, I was just looking at one: https://github.com/w3c/web-platform-tests/issues/2669","msgtype":"m.text"},"ts":1491813969000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"looks","msgtype":"m.emote"},"ts":1491813976000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"thanks not sure I got an e-mail notification for that","msgtype":"m.text"},"ts":1491814042000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"seems like e-mail for some of my GitHub notifications is not reaching me lately","msgtype":"m.text"},"ts":1491814071000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://github.com/whatwg/html/issues/1013 - why not use the javascript: scheme here? :-)","msgtype":"m.text"},"ts":1491826388000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hehe","msgtype":"m.text"},"ts":1491827097000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: how can i specify caniuse=\"\" for a css property? <dfn caniuse> in <pre class=propdef> is ignored","msgtype":"m.text"},"ts":1491828849000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: OK finally all green at https://github.com/whatwg/encoding/pull/101","msgtype":"m.text"},"ts":1491828906000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"> Ran for 12 min 41 sec","msgtype":"m.text"},"ts":1491828919000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but given 103 files to check (twice) with the HTML checker I guess that’s not so bad","msgtype":"m.text"},"ts":1491828967000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: great!","msgtype":"m.text"},"ts":1491830096000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: maybe one thing we could do is to only run the HTML checker for the main index file and not any of the generated files","msgtype":"m.text"},"ts":1491830630000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: as the generated files are only rarely modified","msgtype":"m.text"},"ts":1491830638000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: of course, that nullifies the need to exclude warnings :/","msgtype":"m.text"},"ts":1491830652000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: you could just try running it on files that have changed in a PR","msgtype":"m.text"},"ts":1491830669000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: happy to go with whatever you prefer, but I was assuming part of the bigger goal here is to move to having resources.whatwg.org/build/deploy.sh be the common script that each spec/repo uses, and that causes everything under $WEB_ROOT to be checked","msgtype":"m.text"},"ts":1491832687000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I guess we could always add a hook to allow any spec/repo .travis.yml to override that recursive $WEB_ROOT html checking and instead just check a given list of files","msgtype":"m.text"},"ts":1491832783000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"is there any way to somehow compare performance.now() with performance.timing.responseStart?","msgtype":"m.text"},"ts":1491832860000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"MikeSmith: yeah, I guess it's ok, just a bit wasteful","msgtype":"m.text"},"ts":1491833168000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"given performance.timing.responseStart returns ms since the unix epoch","msgtype":"m.text"},"ts":1491833269000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(can we really not change the behaviour of performance.timing? I'd have expected most people were just comparing values in a single page-load?)","msgtype":"m.text"},"ts":1491833292000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: https://stackoverflow.com/questions/43325912/how-to-post-with-application-x-www-form-urlencoded-header-and-urlsearchparams-us","msgtype":"m.text"},"ts":1491834901000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: added a comment to OP, seems like a bug in the library","msgtype":"m.text"},"ts":1491835053000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks yeah","msgtype":"m.text"},"ts":1491835552000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"though I think the bug might be in the underlying “github-fetch” code","msgtype":"m.text"},"ts":1491835588000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that isomorphic-fetch library seems to be just a thin wrapper around “github-fetch”","msgtype":"m.text"},"ts":1491835640000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Ah, okay","msgtype":"m.text"},"ts":1491835723000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: an interesting thing you might want to test with insertRule is using it on cross-origin stylesheets","msgtype":"m.text"},"ts":1491835862000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: apparently not all browsers throw","msgtype":"m.text"},"ts":1491835870000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: opaque cross-origin, not CORS","msgtype":"m.text"},"ts":1491835889000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah. filed https://github.com/w3c/web-platform-tests/issues/5526","msgtype":"m.text"},"ts":1491836144000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"When I run https://w3c-test.org/service-workers/service-worker/client-navigate.https.html Firefox finds five tests and Chrome three","msgtype":"m.text"},"ts":1491837252000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: maybe remove StructuredCloneWithTransfer and add messageerror? Otherwise everyone that uses it needs to update twice","msgtype":"m.text"},"ts":1491838494000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yea, that test is incorrect and timesout in chrome... I'm fixing it","msgtype":"m.text"},"ts":1491838554000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"although in firefox I see 7 tests?","msgtype":"m.text"},"ts":1491838585000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: hmm maybe","msgtype":"m.text"},"ts":1491838642000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: if we don't do that it seems best to tightly couple it with together with SAB","msgtype":"m.text"},"ts":1491838681000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: so you have SAB + messageerror + removal of StructuredCloneWithTransfer","msgtype":"m.text"},"ts":1491838700000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: separate from that we can have 1) rework of worker internals to make agent clusters possible","msgtype":"m.text"},"ts":1491838718000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: 2) definition of agent clusters upon reworked internals","msgtype":"m.text"},"ts":1491838727000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: asynchronous for cancel signals isn't important. It's forced if you are only using ECMAScript and your only way of doing notification is promises. But if you have an event primitive then you're better of sync. It avoids a lot of headaches, e.g. trying to create composition operators (like \"follow\" or \"race\"), which is basically impossible with async.","msgtype":"m.text"},"ts":1491838735000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: it's not weird that the cancel signal says cancel and the fetch says TypeError: \"invalid URL\"?","msgtype":"m.text"},"ts":1491838840000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm why would that happen?","msgtype":"m.text"},"ts":1491839020000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: fetch(\"https://test:test/\"); controller.abort()","msgtype":"m.text"},"ts":1491839098000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: example is outlined in more detail in the whatwg/dom PR","msgtype":"m.text"},"ts":1491839121000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Why isn't fetch validating the URL sync?","msgtype":"m.text"},"ts":1491839125000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: it is?","msgtype":"m.text"},"ts":1491839155000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah right","msgtype":"m.text"},"ts":1491839166000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah seems fine then","msgtype":"m.text"},"ts":1491839185000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It's just like any other case of passing the signal to someone who ignores it","msgtype":"m.text"},"ts":1491839194000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"even if you did async it'd still be the same errors, just in the other order","msgtype":"m.text"},"ts":1491839314000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"With async we could .then() the promise returned by fetch() and dispatch cancel from there if the exception was cancel","msgtype":"m.text"},"ts":1491839371000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Sure, but you can do that with sync too","msgtype":"m.text"},"ts":1491839384000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It's pretty unnatural in both cases, IMO","msgtype":"m.text"},"ts":1491839397000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"What is unnatural?","msgtype":"m.text"},"ts":1491839412000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"To wait instead of just calling controller.cancel() immediately","msgtype":"m.text"},"ts":1491839433000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That's not what I'm saying?","msgtype":"m.text"},"ts":1491839455000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm saying that you'd delay updating the signal","msgtype":"m.text"},"ts":1491839470000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Then I don't understand; are we still using the example code `fetch(\"https://test:test/\", { signal: controller.signal }); controller.abort()` ?","msgtype":"m.text"},"ts":1491839494000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah, but also with an event listener on the signal","msgtype":"m.text"},"ts":1491839523000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Can you type the example then?","msgtype":"m.text"},"ts":1491839555000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: https://github.com/whatwg/dom/pull/434#issuecomment-292869591","msgtype":"m.text"},"ts":1491839578000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm confused, I thought you were saying that you would .then() the promise before doing controller.abort()","msgtype":"m.text"},"ts":1491839632000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: no, I was talking about specification-internals to delay notifying the signal about what happened until we're sure","msgtype":"m.text"},"ts":1491839664000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"How does the signal/controller know about fetch() promises?","msgtype":"m.text"},"ts":1491839677000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: fetch() would have that as part of its signal logic","msgtype":"m.text"},"ts":1491839700000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So then it doesn't matter, because by the time fetch() notifies the signal, controller.abort() has already been called","msgtype":"m.text"},"ts":1491839715000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yes, but if the fetch() didn't end up being aborted because of it, signal wouldn't have had its event fire","msgtype":"m.text"},"ts":1491839757000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"why not? controller.abort() was called...","msgtype":"m.text"},"ts":1491839779000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Because nothing got aborted","msgtype":"m.text"},"ts":1491839821000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"how is that possibly true if controller.abort() is called?","msgtype":"m.text"},"ts":1491839863000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"maybe you can write up the alternate spec for controller.abort() you are envisioining","msgtype":"m.text"},"ts":1491839888000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"because the spec for it right now is very clear that it would cause the signal to move to the aborted state","msgtype":"m.text"},"ts":1491839907000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and even if you introduce a microtask delay before doing so, that wouldn't change anything","msgtype":"m.text"},"ts":1491839915000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: basically, you'd put fetch() in charge of changing the state, and fetch() only changes the state if aborting itself ended with an AbortError","msgtype":"m.text"},"ts":1491839988000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So you'd remove signal.abort() entirely?","msgtype":"m.text"},"ts":1491839996000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"*controller.abort()","msgtype":"m.text"},"ts":1491840002000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: no, that'd still exist to initiate the whole setup","msgtype":"m.text"},"ts":1491840018000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"controller aborts, fetch aborts, waits for rejection, if it gets a rejection and its an AbortError, changes state of the signal","msgtype":"m.text"},"ts":1491840066000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"This sounds very unlike the existing PR, so I'd need to see it written up. I can't imagine how that would work without very tight coupling between fetch and these controller/signal objects.","msgtype":"m.text"},"ts":1491840114000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I dunno though, I was just trying to figure out if there was a way to make less code paths run","msgtype":"m.text"},"ts":1491840120000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It may help to re-conceptualize canceled/oncancel as cancelRequested/oncancelrequested","msgtype":"m.text"},"ts":1491840149000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it's just setting a boolean/firing an event to let you know a boolean was set","msgtype":"m.text"},"ts":1491840171000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah, maybe that's good enough","msgtype":"m.text"},"ts":1491840187000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"then consumers like fetch() can look at that boolean/react to the event and say \"ok, i see i was requested to cancel, let me do that\"","msgtype":"m.text"},"ts":1491840189000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: see, I didn't realize the event was mostly for JavaScript-implemented consumers of signals","msgtype":"m.text"},"ts":1491840260000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah ok :)","msgtype":"m.text"},"ts":1491840271000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I thought the event was for end users of the fetch() API as well","msgtype":"m.text"},"ts":1491840282000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Nah, they just use the fetch() return value.","msgtype":"m.text"},"ts":1491840298000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I'm not sure about the comments from rbuckton then","msgtype":"m.text"},"ts":1491840313000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I'll post an update on the issue","msgtype":"m.text"},"ts":1491840327000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm, is it possible to detect background-image loads now using the performance APIs?","msgtype":"m.text"},"ts":1491842607000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: yeah, if the stylesheet is CORS-same-origin","msgtype":"m.text"},"ts":1491842745000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'd totally missed that until now. That's pretty significant.","msgtype":"m.text"},"ts":1491842884000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: FWIW, I'd like to lobby against including \"abortion\" anywhere in the abort/cancel spec, even in example code. It's too charged, at least in the U.S.","msgtype":"m.text"},"ts":1491842919000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"i wish i could figure out why fetch isn't sending if-none-match headers. it does when i make a call from the console, but not from my webpack-bundled app","msgtype":"m.text"},"ts":1491843896000,"senderName":"dmarr","senderId":"dmarr@irc"},
{"content":{"body":"jyasskin: I thought it might be, hence suggesting \"stop\" / \" halt\"","msgtype":"m.text"},"ts":1491843926000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: but those don't work well with the existing \"AbortError\"","msgtype":"m.text"},"ts":1491843945000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yep. Even treating \"abort\" as a noun would be fine with me.","msgtype":"m.text"},"ts":1491843965000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: having said that, you'd think all the child mutation algorithms would be a little worse","msgtype":"m.text"},"ts":1491844002000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I personally lean toward using CancelError, CancelToken, CancelController, and then using cancel[l]ation in the non-normative bits of the spec, but I'm not that picky.","msgtype":"m.text"},"ts":1491844018000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"\"mutation\" isn't a political issue, unless you're way too deep in the X-men. ;)","msgtype":"m.text"},"ts":1491844040000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: if we're going to use \"AbortError\" we might as well align all the terms","msgtype":"m.text"},"ts":1491844191000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, in that case, it should be \"an abort\", etc.","msgtype":"m.text"},"ts":1491844242000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"what does it mean when my browser gives me a 200 but its from disk cache","msgtype":"m.text"},"ts":1491844938000,"senderName":"dmarr","senderId":"dmarr@irc"},
{"content":{"body":"dmarr: I don't understand the question","msgtype":"m.text"},"ts":1491845155000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: like a GET /foo is 200 but being served from disk cache. Shouldn't that be a 304?","msgtype":"m.text"},"ts":1491845187000,"senderName":"dmarr","senderId":"dmarr@irc"},
{"content":{"body":"or I guess what are the cases where something will 200 but be a cached response","msgtype":"m.text"},"ts":1491845204000,"senderName":"dmarr","senderId":"dmarr@irc"},
{"content":{"body":"dmarr: unless it was not a 200/304 to begin with, you'll almost always get a 200 through fetch()/XHR","msgtype":"m.text"},"ts":1491845270000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I get a 304 as expected when using the if-none-match header with a value of the current etag from the server","msgtype":"m.text"},"ts":1491845534000,"senderName":"dmarr","senderId":"dmarr@irc"},
{"content":{"body":"but on other requests not using if-none-match i get 200 from disk - I guess thats normal","msgtype":"m.text"},"ts":1491845573000,"senderName":"dmarr","senderId":"dmarr@irc"},
{"content":{"body":"dmarr: yeah, there's a few ways to get the 304 back, but by default it's always \"flattened\" into a 200","msgtype":"m.text"},"ts":1491845582000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm, so dedicated/shared workers have pointers to 1) one or more documents 2) zero or more child workers 3) a parent (not covered by HTML) 4) a browsing context (for the purpose of checking if script is enabled; does that really live there?)","msgtype":"m.text"},"ts":1491846203000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Seems so messy","msgtype":"m.text"},"ts":1491846208000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: implementation-wise I am thinking of making Workers reference Client objects","msgtype":"m.text"},"ts":1491846315000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"should be easy for the SharedWorker case","msgtype":"m.text"},"ts":1491846324000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"less sure about dedicated workers","msgtype":"m.text"},"ts":1491846335000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"so SharedWorker would have an array of attached Client objects instead of an array of attached documents","msgtype":"m.text"},"ts":1491846365000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"might need a bit of work-around logic to make it handle the replaced about:blank document case since the Client is the environment instead of the document","msgtype":"m.text"},"ts":1491846437000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: hmm, the replaced about:blank document case makes me wonder if it's not global objects already","msgtype":"m.text"},"ts":1491846551000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: we could probably make it so... its got relatively low usage and a bit of a corner case","msgtype":"m.text"},"ts":1491846583000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Guess I should write tests, but not today","msgtype":"m.text"},"ts":1491846597000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'm trying to grok your comment on https://github.com/whatwg/dom/pull/434#issuecomment-292696490 about cancel tokens not meeting the fetch use case. what do you mean by \"we need objects that we can extend\"?","msgtype":"m.text"},"ts":1491847119000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"annevk: so the case where no if-none-match is sent in the request and a cached 200 comes back, is there another response header that causes that to happen? My server is sending etag, cache-control, date","msgtype":"m.text"},"ts":1491847226000,"senderName":"dmarr","senderId":"dmarr@irc"},
{"content":{"body":"annevk: I believe bz has commented a few times that the scripting-enabled checks in the spec don't match impls :-/","msgtype":"m.text"},"ts":1491850398000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"dmarr: custom if-none-match?","msgtype":"m.text"},"ts":1491852085000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aklein: what is the shape of a theoretical cancel token? Can it do events?","msgtype":"m.text"},"ts":1491852150000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aklein: the signal we have is also going to be able to carry priority data and other such things","msgtype":"m.text"},"ts":1491852219000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: did he say what impls do? I guess we need to make it official as long as noscript is around? Could also just remove the concept…","msgtype":"m.text"},"ts":1491852285000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Dumb question: If we have the ES AbortSignal.register(callback) function, what's the benefit of using events instead?","msgtype":"m.text"},"ts":1491852310000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"annevk: context?","msgtype":"m.text"},"ts":1491852355000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"hmmm... context is https://github.com/validator/validator/issues/284","msgtype":"m.text"},"ts":1491852355000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"jyasskin: you can have a different event for priorities?","msgtype":"m.text"},"ts":1491852370000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aklein: https://github.com/whatwg/fetch/issues/447#issuecomment-281731850 has the FetchController design. It'd want to be a subclass of the AbortController, or have AbortController mixed into it.","msgtype":"m.text"},"ts":1491852390000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"annevk: Ah, instead of having multiple signals, you'd have one signal with multiple events.","msgtype":"m.text"},"ts":1491852457000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Domenic: your statement about scripting-enabled","msgtype":"m.text"},"ts":1491852459000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ah right. Let me dig it up. I think most UAs still have a toggle, someone showed me where Chrome's was recently.","msgtype":"m.text"},"ts":1491852494000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"jyasskin: yes, a FetchSignal tracks a bunch of bits and can then be reused across fetches","msgtype":"m.text"},"ts":1491852500000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah and FetchSignal needs EventTarget anyway for other events.","msgtype":"m.text"},"ts":1491852532000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hmm found https://github.com/whatwg/html/issues/1580 so far, not the issue I was thinking of though...","msgtype":"m.text"},"ts":1491852718000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk/Domenic: If the ES system gave AbortSignal an onabort(callback) function instead of a register(callback) function (https://github.com/rbuckton/prex/blob/master/docs/cancellation.md#tokenregistercallback), would that be sufficient to let FetchSignal extend it as you want?","msgtype":"m.text"},"ts":1491852882000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"No","msgtype":"m.text"},"ts":1491852898000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Because the inheritance hierarchy wouldn't work","msgtype":"m.text"},"ts":1491852906000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"We need to inherit from EventTarget, not from ESAbortSignal","msgtype":"m.text"},"ts":1491852923000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh, because EventTarget is a base class instead of a mixin. :(","msgtype":"m.text"},"ts":1491852937000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"And it's a strictly worse experience for our users to have two ways of registering events, anyway","msgtype":"m.text"},"ts":1491852939000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Better to just use addEventListener for both abort and the other things","msgtype":"m.text"},"ts":1491852951000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"There's no benefit to putting this in ES without syntax (e.g. my old third state proposal)","msgtype":"m.text"},"ts":1491852978000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Sharing code with Node would be a benefit, although not to pure web users, and I see that moving away from addEventListener would be painful. aklein, is that convincing to the ES folks?","msgtype":"m.text"},"ts":1491853173000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"node can share code, just like with fetch, they just need to copy the API over","msgtype":"m.text"},"ts":1491853210000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://github.com/matthew-andrews/isomorphic-fetch/ etc.","msgtype":"m.text"},"ts":1491853237000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: They'd copy the AbortSignal implementation including the EventTarget implementation, right?","msgtype":"m.text"},"ts":1491853318000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Yeah, or they'd make their own using EventEmitter, their choice","msgtype":"m.text"},"ts":1491853338000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Thanks.","msgtype":"m.text"},"ts":1491853453000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Now that observables are gone we could revisit a better EventTarget and maybe get Node on board","msgtype":"m.text"},"ts":1491853454000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"With full compat on our side of course","msgtype":"m.text"},"ts":1491853495000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it's actually on my quarterly goal to write a spec for event-delegation and and event \"namespaces\" (https://github.com/whatwg/dom/issues/215 and https://github.com/whatwg/dom/issues/208) as first steps in exploring their feasibility and getting that rolling","msgtype":"m.text"},"ts":1491853589000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Cool cool","msgtype":"m.text"},"ts":1491853634000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ugh, observables got dropped?","msgtype":"m.text"},"ts":1491853679000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Events suck. :(","msgtype":"m.text"},"ts":1491853688000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: where do you see observables being gone?","msgtype":"m.text"},"ts":1491854378000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"TabAtkins: thoughts on https://github.com/whatwg/html/pull/2517 ?","msgtype":"m.text"},"ts":1491856095000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: You want the attr-value type file:///usr/local/google/home/tabatkins/bikeshed/docs/index.html#dfn-types","msgtype":"m.text"},"ts":1491856242000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Whoops, one sec for better links","msgtype":"m.text"},"ts":1491856249000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"https://tabatkins.github.io/bikeshed/#dfn-types","msgtype":"m.text"},"ts":1491856266000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: ah makes sense, so the for is... for=\"link/rel\"?","msgtype":"m.text"},"ts":1491856400000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yup","msgtype":"m.text"},"ts":1491856409000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Then <{link/rel/serviceworker}>","msgtype":"m.text"},"ts":1491856436000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I think <{rel/serviceworker}> might work too? I forget how strict I am with that shorthand.","msgtype":"m.text"},"ts":1491856462000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Awesome, thanks","msgtype":"m.text"},"ts":1491856610000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"jyasskin: I'm unclear as to why events are now considered a requirement of this API, while they weren't when the plan of record was to wait for whatever TC39 came up with. but I do think I understand annevk's comment about \"extending\" now","msgtype":"m.text"},"ts":1491858207000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"annevk: JakeA: that cross-origin referer footgun in new Request() hit mobile twitter :-( https://bugzilla.mozilla.org/show_bug.cgi?id=1352101#c10","msgtype":"m.text"},"ts":1491859886000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"our fix is in FF54... has chrome started implementing the spec change yet?","msgtype":"m.text"},"ts":1491859916000,"senderName":"wanderview","senderId":"wanderview@irc"}
]