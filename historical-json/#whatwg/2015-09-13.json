[
{"content":{"body":"TabAtkins: is there a post somewhere with your latest theory on CSS nesting?","msgtype":"m.text"},"ts":1442107383000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Most sources point to http://tabatkins.github.io/specs/css-nesting/ and I wasn’t sure if that was tracking with your latest idea.","msgtype":"m.text"},"ts":1442107471000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"It's not, no.  I haven't updated the spec yet.","msgtype":"m.text"},"ts":1442108177000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: ah, very good to know. Is your current thinking to use @ rules?","msgtype":"m.text"},"ts":1442108234000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Kinda.","msgtype":"m.text"},"ts":1442108278000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It's to allow naked embedding of style rules inside of other styles if the selector starts with &.  Otherwise, you can use the @nest <sel> {...} rule.","msgtype":"m.text"},"ts":1442108342000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Where `&:hover` would be right, but `body &` would be wrong?","msgtype":"m.text"},"ts":1442108402000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Most nested selectors start with &, so that'd give you the no-overhead nesting of Sass most of the time.","msgtype":"m.text"},"ts":1442108413000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1442108415000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Were other hypothetically-valid characters considered besides ampersand?","msgtype":"m.text"},"ts":1442108452000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Multiple languages converged on &, so it's not even a question, really.","msgtype":"m.text"},"ts":1442108477000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Okay. Developer brains, or at least mine, love to stick to something consistent. If @nest <sel> {} became a thing, I could quickly imagine best practices recommending @nest &:hover over &:hover.","msgtype":"m.text"},"ts":1442108546000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Maybe that’s not useful to even say, but I’m musing on it. I definitely like the selector being alongside the at rule more than nested within it.","msgtype":"m.text"},"ts":1442108583000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Would it be valid to use @nest in a way that could be done without it?","msgtype":"m.text"},"ts":1442108681000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Yeah, you can do whatever you want inside of @nest. The selector has to contain an &, that's all. It can be at the front if you want.","msgtype":"m.text"},"ts":1442108750000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"e.g. .foo { @nest &.bar {} @nest &.qux {} }","msgtype":"m.text"},"ts":1442108764000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1442108769000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ah, so it has to contain an &, that was going to be my next question","msgtype":"m.text"},"ts":1442108772000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"I was going to see if .foo { @nest { color: red; } } was the same as .foo { color: red }","msgtype":"m.text"},"ts":1442108794000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Yeah, if we allow omitting that's just implying an \"& \" at the beginning, and I don't want to encourage that accidentally.","msgtype":"m.text"},"ts":1442108798000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"There's no selector at all there!","msgtype":"m.text"},"ts":1442108813000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Gotta have *something*.","msgtype":"m.text"},"ts":1442108818000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But .foo { @nest & { color:red; } } is indeed the same as .foo { color: red; }","msgtype":"m.text"},"ts":1442108848000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And .foo { @nest .bar {} } is also invalid because it must contain the &?","msgtype":"m.text"},"ts":1442108875000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1442108887000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Encouraging descendant selectors by default isn't a friendly behavior, so I'd make you write it out on purpose.","msgtype":"m.text"},"ts":1442108911000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Why do you prefer that over the implied & ?","msgtype":"m.text"},"ts":1442108912000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Gotta do @nest & .bar {...} if you want that.","msgtype":"m.text"},"ts":1442108920000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Or, to what you just said, why do you think descendant selectors is an unfriendly default?","msgtype":"m.text"},"ts":1442108950000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"And multiple selectors will work like Sass as well? .a, .b { @nest &.c, .d & {} } === .a.c, .d .a, .b.c, .d .b {}","msgtype":"m.text"},"ts":1442109100000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Because descendant selector is slow, and defaulting people into that (so it takes *more* characters to do the faster &>.bar thing) is bad.","msgtype":"m.text"},"ts":1442109138000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yeah (re multiple selectors)","msgtype":"m.text"},"ts":1442109148000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Semantics are that you can replace the & with a :matches() containing the outer selector.","msgtype":"m.text"},"ts":1442109215000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Excellent. Thanks for sharing your brain on that. I think @nest <sel> is pretty readable to those of us who deal with change badly. :D","msgtype":"m.text"},"ts":1442109219000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Ah, you are referring to .a, .b === :matches(.a, .b)?","msgtype":"m.text"},"ts":1442109275000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":":matches and @custom-selector are definitely my favorite experimental goodies.","msgtype":"m.text"},"ts":1442109336000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"With things like (40em < width <= 60em) being a close second.","msgtype":"m.text"},"ts":1442109364000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1442109380000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The doubledash gets a bit tiresome, but only on vars. If anyone is like me, you are going to catch yourself making this typo: --var(thing) WHOOPS","msgtype":"m.text"},"ts":1442109416000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":":--heading {}, no problem. @media (--mobile), no problem.","msgtype":"m.text"},"ts":1442109479000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"--var, every day","msgtype":"m.text"},"ts":1442109488000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Interesting.","msgtype":"m.text"},"ts":1442109597000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I hope so, I didn’t want to waste your brain space with that, but I thought it was interesting too.","msgtype":"m.text"},"ts":1442109626000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"I'm p sure I'll have a use-case for --foo keywords naked in properties in the future, which is why I didn't want to use them for variables.","msgtype":"m.text"},"ts":1442109644000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Will keywords be like variables without inline fallbacks?","msgtype":"m.text"},"ts":1442109687000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"*custom keywords","msgtype":"m.text"},"ts":1442109696000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"@custom-media --mobile (width < 30em); @custom-selector: :--heading h1, h2, h3, h4, h5, h6; @custom-keyword: --blue #b3d4fc;","msgtype":"m.text"},"ts":1442109834000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"That could be a beautiful thing, if that’s what you are referring to.","msgtype":"m.text"},"ts":1442109856000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Dunno!","msgtype":"m.text"},"ts":1442109919000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Haha. Tell me more about the future now!","msgtype":"m.text"},"ts":1442109937000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Well, I really appreciate you sharing your thoughts on this.","msgtype":"m.text"},"ts":1442109950000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"np","msgtype":"m.text"},"ts":1442109963000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Is there anything like Sass mixin currently proposed?","msgtype":"m.text"},"ts":1442110114000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"For simple mixins, I just proposed http://tabatkins.github.io/specs/css-apply-rule and the WG accepted it.","msgtype":"m.text"},"ts":1442110158000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Per the minutes, it was a provisional acceptance pending me resolving some circularity issues, but I resolved those issues in off-record conversation.)","msgtype":"m.text"},"ts":1442110183000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"JonathanNeal: Oooooh, and you just gave me a good idea.","msgtype":"m.text"},"ts":1442110547000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So, vars are generally the \"theming\" solution for custom elements.  You declare a few variables that your component uses, and people can set those to style them.  This avoids the need to have shadow-piercing selectors in CSS.","msgtype":"m.text"},"ts":1442110592000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But sometimes you want to offer the ability to *fully* style a particular element within the shadow. That's not practical to do with vars, as you'd need 400+ vars, one per property. That's crazy.","msgtype":"m.text"},"ts":1442110621000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So CSS mixins (the @apply rule) were a solution here - you could just pass in the styles you want as a mixin-var instead.","msgtype":"m.text"},"ts":1442110655000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But that doesn't let you respond to different *states* of the element, like if you want to apply :hover styles and the like.","msgtype":"m.text"},"ts":1442110670000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The component author could predefine a few mixin-vars for this purpose, but it requires them to think of all the combinations of pseudo-classes you might want ahead of time.","msgtype":"m.text"},"ts":1442110705000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"We can fix this by mixing together mixins and nesting! You can do \".component { --theme: { color: blue; @nest &:hover { color: red; } }; }\" and it'd work!","msgtype":"m.text"},"ts":1442110775000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yay, I'm happy I found a solution there.","msgtype":"m.text"},"ts":1442110782000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I’m absorbing what is happening there.","msgtype":"m.text"},"ts":1442111886000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Oh, you’re using custom propert sets and @nest like Sass","msgtype":"m.text"},"ts":1442111990000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Similar to Sass mixins with nested rules, yes.  Just defined on the tree, like CSS vars are, rather than global like Sass.","msgtype":"m.text"},"ts":1442112097000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I think I need to write my own rosette stone for @mixin to @apply to better fathom it.","msgtype":"m.text"},"ts":1442112145000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"*rosetta","msgtype":"m.text"},"ts":1442112157000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"It's the same as the conversion from Sass vars to CSS vars.","msgtype":"m.text"},"ts":1442112169000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I’m not sure how you pass in variables during an apply","msgtype":"m.text"},"ts":1442112191000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"You don't (yet).","msgtype":"m.text"},"ts":1442112231000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I got plans for that in the future, but it's not in the v1 proposal.","msgtype":"m.text"},"ts":1442112239000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"*Simple* mixins is the word of the day here.","msgtype":"m.text"},"ts":1442112251000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oh, I thought that’s the primary use case for mixins in Sass versus extend.","msgtype":"m.text"},"ts":1442112259000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"It is! Without arguments, mixins is equivalent to placeholder extends in power.  But we have neither in CSS so far. ^_^","msgtype":"m.text"},"ts":1442112328000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"@mixin icon $type { background-image: url($type); } .thing { @include icon hamburger.svg; }","msgtype":"m.text"},"ts":1442112345000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"(Equivalent in power, but the usage scenarios are slightly different, as they do the extension from different sides.)","msgtype":"m.text"},"ts":1442112353000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Is --type passed in this scenario? https://gist.github.com/jonathantneal/f0cf9b1901ef32c6595d","msgtype":"m.text"},"ts":1442112694000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"I added some questions inside that gist next to the @apply usages.","msgtype":"m.text"},"ts":1442112982000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Mostly, I’m trying to see how variable scope works.","msgtype":"m.text"},"ts":1442112998000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"No. --icon is just a custom property that happens to have a specially-formatted value.  var() functions in a custom property are processed at the time the custom property is applied to an element.","msgtype":"m.text"},"ts":1442113137000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Later, there will be a way to define a var() that isn't substituted normally, just by @apply passing in some values.","msgtype":"m.text"},"ts":1442113270000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"For now, the first menu would get background-image: none because it got it from :root, the second menu would get background-image: url(hamburger.svg); because that was the matching var at the time it was applied, and the third menu is non-sense css?","msgtype":"m.text"},"ts":1442113353000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"What menus? There's only one.","msgtype":"m.text"},"ts":1442113388000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"OH, you added to the gist, let me check","msgtype":"m.text"},"ts":1442113405000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You’re right. I just updated it to call them menu-1, menu-2, menu-3 to clear up the confusion.","msgtype":"m.text"},"ts":1442113423000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"1 and 2 are both none; again, --icon is just a custom property with normal custom property semantics.  When you set --icon on the root element, it substitutes any var() functions based on the other custom properties set on the root.","msgtype":"m.text"},"ts":1442113481000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And yeah, 3 is just invalid.","msgtype":"m.text"},"ts":1442113486000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Well, apply seems like a nicer version of @extend so far.","msgtype":"m.text"},"ts":1442113531000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"The two do similar but different things, just like extend and mixin in Sass.","msgtype":"m.text"},"ts":1442113549000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It it accepted vars somehow, it would be like a super breed of extend and mixin","msgtype":"m.text"},"ts":1442113568000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"It's nothing like extend. ^_^","msgtype":"m.text"},"ts":1442113583000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You’re right again. I meant placeholder extend.","msgtype":"m.text"},"ts":1442113611000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Is that right?","msgtype":"m.text"},"ts":1442113614000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Only insofar as simple mixins and placeholder extends are similar in functionality.  They're not similar in semantics.","msgtype":"m.text"},"ts":1442113643000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(mixins requires the \"target\" element to opt into the styling.  extend puts the \"targetting\" responsibility on person writing the extend.)","msgtype":"m.text"},"ts":1442113693000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Would variables be passed in like the .menu-3 example in v2?","msgtype":"m.text"},"ts":1442113962000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"You'd need a different var() syntax in the custom property set, to indicate that it's a \"late-bound var\", but yeah, something like that.","msgtype":"m.text"},"ts":1442114043000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I have an example that I accidentally left in the spec with var(--theme-color late).","msgtype":"m.text"},"ts":1442114072000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Probably woudl use parens, not curlies.","msgtype":"m.text"},"ts":1442114090000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ha, I failed to notice that there wasn’t a comma.","msgtype":"m.text"},"ts":1442114092000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"I thought late was a css color I didn’t know about.","msgtype":"m.text"},"ts":1442114107000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"I probably wanna make that more obvious, yeah.","msgtype":"m.text"},"ts":1442114173000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Maybe put it first","msgtype":"m.text"},"ts":1442114176000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"var(late --theme-color) or something","msgtype":"m.text"},"ts":1442114182000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That probably works better with var(parent --foo) too.","msgtype":"m.text"},"ts":1442114197000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"parent being superior to late?","msgtype":"m.text"},"ts":1442114236000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"e.g. border: 1px solid var(parent --theme-color, none);","msgtype":"m.text"},"ts":1442114241000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"JonathanNeal: Not superior. It just takes the variable value from the parent instead. Mainly useful for defining variables recursively, like --indent: calc(var(parent --indent) + 20px);","msgtype":"m.text"},"ts":1442117152000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"MikeSmith: thank you for working on https://github.com/whatwg/html-build/pull/28","msgtype":"m.text"},"ts":1442127229000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: working on the big patch that is Fetch that will be a huge help","msgtype":"m.text"},"ts":1442127239000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: finding typos is rather hard atm","msgtype":"m.text"},"ts":1442127251000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1442127259000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I will try to land that later today","msgtype":"m.text"},"ts":1442127270000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I need to refine it so it works teh same both for local wattsi and remote wattsi","msgtype":"m.text"},"ts":1442127306000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Man, Fetch integration is so much work","msgtype":"m.text"},"ts":1442131440000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Not even close","msgtype":"m.text"},"ts":1442131449000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wonder how this is ever going to be reviewed...","msgtype":"m.text"},"ts":1442131470000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: If I notice some tree building rules where tokens should be reprocessed in state A,","msgtype":"m.text"},"ts":1442132812000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"and state A states that the same tokens should be reprocessed in state B,","msgtype":"m.text"},"ts":1442132826000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"should that be patched to remove the superfluous indirection?","msgtype":"m.text"},"ts":1442132862000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: maybe, if someone is willing to do the work and find a suitable reviewer (not sure if there's anyone besides hsivonen who could do that)","msgtype":"m.text"},"ts":1442133005000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: I guess Hixie could review too, if he's willing","msgtype":"m.text"},"ts":1442133019000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I see.","msgtype":"m.text"},"ts":1442133025000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Mmh in fact it was the opposite.","msgtype":"m.text"},"ts":1442133105000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: there's a lot to do, so refactoring is not really at the top of my list, although I guess you could say Fetch is refactoring...","msgtype":"m.text"},"ts":1442133114000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"in template\" insertion mode says to reprocess \"in head\" for \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"template\", \"title\",","msgtype":"m.text"},"ts":1442133129000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"and to reprocess \"in body\" for any other start tag,","msgtype":"m.text"},"ts":1442133153000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"and \"in body\" insertion mode says to reprocess \"in head\" too for the same start tags as in \"in template\".","msgtype":"m.text"},"ts":1442133179000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Yeah, I think that's basically \"in body\" calling \"in head\"(token)","msgtype":"m.text"},"ts":1442133612000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"When I implemented that it wasn't very clear to me either though","msgtype":"m.text"},"ts":1442133640000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yes yes, the clause is just repeated, it's a minor detail.","msgtype":"m.text"},"ts":1442134026000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: I wonder if patches that \"parameterises\" the states would be acceptable.","msgtype":"m.text"},"ts":1442134036000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: For example, I'm pretty sure that the original insertion mode is only related to the \"in text\" insertion mode.","msgtype":"m.text"},"ts":1442134064000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: dunno, would have to see it","msgtype":"m.text"},"ts":1442134239000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so if a Safari user doesn't have their \"Block pop-up windows\" user preference set to off (the shipping default is off), Web pages that use document.open to create new windows just silently fail to that, and the only error that's logged to the console is \"TypeError: undefined is not an object (evaluating 'foo.document')\"","msgtype":"m.text"},"ts":1442138311000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that seems very unhelpful to developers who want to legitimate let users opt-in to some UX/UI that uses multiple windows, and are trying to troubleshoot problems reported by users; e.g., \"ur page it doesn't work at all for my safari. nothing isn't show up\"","msgtype":"m.text"},"ts":1442138487000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"no \"popup was blocked\" indicator shows up in this case in the browser chrome","msgtype":"m.text"},"ts":1442138574000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"actually I guess it's window.open","msgtype":"m.text"},"ts":1442138719000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"gsnedders: When you mention it, I think I looked briefly at those tests at some point and was wondering about the same thing. I suppose there was a plan to add some JS scaffolding and the work was never finished, or just not committed to SVN?","msgtype":"m.text"},"ts":1442140520000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"MikeSmith: in some (all?) browsers, document.open() will actually invoke window.open() if there is a string argument. Compat pressure because of content confusing window.open() and document.open(). You're not alone ;)","msgtype":"m.text"},"ts":1442140668000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"hallvors: ah yeah I vaguely recall this now","msgtype":"m.text"},"ts":1442144980000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hallvors: it must have been user agents that made the first error there, otherwise content couldn't confuse them","msgtype":"m.text"},"ts":1442148041000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok, probably some browser vendor developer thinking \"what if somebody got confused by the two open() methods..\" although the odds that people sometimes ship untested JS into production is rather high","msgtype":"m.text"},"ts":1442148279000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"mkwst: So I'm somewhat reluctant to add gzipping by default because it's an extra layer of complexity that doesn't correspond to the things that are being tested. But I agree we should have some way to enable it for specific files","msgtype":"m.text"},"ts":1442157309000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"hallvors: no idea. I never looked at them till recently. They were converted to reftests at some point, at least.","msgtype":"m.text"},"ts":1442171960000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham mkwst: +1 for *not* gzipping by default. In the XHR test suite we have a file dedicated to returning gzipped content - https://github.com/w3c/web-platform-tests/blob/e5e8fb9ebc4d5b2220abff5679fa0781c01f2c05/XMLHttpRequest/resources/gzip.py","msgtype":"m.text"},"ts":1442179386000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"I suppose it's trivial to enhance it to accept a ?file argument or something like that","msgtype":"m.text"},"ts":1442179406000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"is anyone using test infra such that gzip will effect loading time?","msgtype":"m.text"},"ts":1442182817000,"senderName":"gsnedders","senderId":"gsnedders@irc"}
]