[
{"content":{"body":"hi, does any one know how we should handle a \"retry\" field without value, in EventSource?","msgtype":"m.text"},"ts":1453096091000,"senderName":"yhirano_","senderId":"yhirano_@irc"},
{"content":{"body":"WebKit and Blink restores their default retry value, but it is not written in the spec.","msgtype":"m.text"},"ts":1453096114000,"senderName":"yhirano_","senderId":"yhirano_@irc"},
{"content":{"body":"Is it simply wrong, or is there any historical context?","msgtype":"m.text"},"ts":1453096162000,"senderName":"yhirano_","senderId":"yhirano_@irc"},
{"content":{"body":"Hmm, I wonder why the HTML standard claims it was updated today, while in fact it was last updated on Friday","msgtype":"m.text"},"ts":1453107075000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: So is DOMTokenList.replace something Servo should implement?","msgtype":"m.text"},"ts":1453110047000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: I tried to specify [Alias=â€¦] btw, couldn't write a sentence that made sense.","msgtype":"m.text"},"ts":1453110076000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I don't see why Servo shouldn't implement stuff","msgtype":"m.text"},"ts":1453110113000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"guys, not escaping ampersands in html attribute values, is this a recent stuff?","msgtype":"m.text"},"ts":1453110175000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"annevk: \"00:05 <Domenic> nox: well, it doesn't have to be; nobody implements it 00:05 <Domenic> and i don't think there was any implementer interest\"","msgtype":"m.text"},"ts":1453110182000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"or has this been around from the very beginning ?","msgtype":"m.text"},"ts":1453110187000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"annevk: That was prompted by the following question: 21:48 <nox> Given that now classList.add() and and classList.remove(\"unexisting-class\") both set the 'class' attribute to the empty string if it was missing,  21:49 <nox> shouldn't classList.replace(\"unexisting-class\", \"foo\") create it too?","msgtype":"m.text"},"ts":1453110244000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"ondras: Always been around.","msgtype":"m.text"},"ts":1453110256000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"ondras: SGML and XML both allow that.","msgtype":"m.text"},"ts":1453110269000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"ondras: Same for '<'.","msgtype":"m.text"},"ts":1453110279000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1453110279000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"so perhaps the validator was previously marking \"?a=b&c=d\" as an error?","msgtype":"m.text"},"ts":1453110300000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"(incorrectly)","msgtype":"m.text"},"ts":1453110307000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"nox: because my firefox, if I am not mistaken, highlights these & in a red color in the \"view source\" mode","msgtype":"m.text"},"ts":1453110399000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"That's not as easy a question as it sounds :)","msgtype":"m.text"},"ts":1453110480000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: Which one?","msgtype":"m.text"},"ts":1453110491000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"In general, &amp; is safer","msgtype":"m.text"},"ts":1453110491000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Yeah, that the spec allows it doesn't mean all UAs can cope with it.","msgtype":"m.text"},"ts":1453110505000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"UAs cope, that's not an issue","msgtype":"m.text"},"ts":1453110520000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"nox: I guess we could change replace()'s behavior slightly, don't care much about that","msgtype":"m.text"},"ts":1453110520000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm suddenly not sure anymore whether & is in the set of allowed characters.","msgtype":"m.text"},"ts":1453110533000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I know < is, but I think I'm wrong about &.","msgtype":"m.text"},"ts":1453110542000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"well if it is allowed for the time being (including sgml and xml), one would expect it works the same way in all parsers...","msgtype":"m.text"},"ts":1453110542000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"nox: replace() was requested by Ember.js, so tokens wouldn't get reordered in templates","msgtype":"m.text"},"ts":1453110565000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: I am pretty sure \"&\" is allowed when it does not resemble an entity reference","msgtype":"m.text"},"ts":1453110570000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: Yeah I said crap.","msgtype":"m.text"},"ts":1453110572000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"ondras, just don't do it :)","msgtype":"m.text"},"ts":1453110575000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"ondras: It isn't.","msgtype":"m.text"},"ts":1453110578000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: i.e. the [a-z]+ after it does not end with \";\"","msgtype":"m.text"},"ts":1453110580000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"Cf. \"additional allowed character\" in https://html.spec.whatwg.org/multipage/syntax.html#attribute-value-(double-quoted)-state","msgtype":"m.text"},"ts":1453110593000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"and https://html.spec.whatwg.org/multipage/syntax.html#attribute-value-(single-quoted)-state.","msgtype":"m.text"},"ts":1453110600000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"well","msgtype":"m.text"},"ts":1453110653000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"https://html.spec.whatwg.org/multipage/syntax.html#character-reference-in-attribute-value-state","msgtype":"m.text"},"ts":1453110655000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"Attempt to consume a character reference.","msgtype":"m.text"},"ts":1453110659000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"If nothing is returned, append a U+0026 AMPERSAND character (&) to the current attribute's value.","msgtype":"m.text"},"ts":1453110659000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"sounds like there is a well-defined scenario for the unescaped amp","msgtype":"m.text"},"ts":1453110688000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: Read how one should consume a character reference.","msgtype":"m.text"},"ts":1453110706000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"ondras: \"If the last character matched is not a U+003B SEMICOLON character (;), there is a parse error.\"","msgtype":"m.text"},"ts":1453110740000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: Ok.","msgtype":"m.text"},"ts":1453110762000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: But do implementors plan to support it?","msgtype":"m.text"},"ts":1453110772000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I hope so","msgtype":"m.text"},"ts":1453110787000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ember should have asked for a toggle method with two arguments IMO.","msgtype":"m.text"},"ts":1453110793000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"hmmh","msgtype":"m.text"},"ts":1453110795000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"If the character reference is being consumed as part of an attribute, and the last character matched is not a U+003B SEMICOLON character (;), and the next character is either a U+003D EQUALS SIGN character (=) or an alphanumeric ASCII character, then, for historical reasons, all the characters that were matched after the U+0026 AMPERSAND character (&) must be unconsumed, and nothing is returned.","msgtype":"m.text"},"ts":1453110796000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"nox: toggle already has two arguments","msgtype":"m.text"},"ts":1453110808000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ok, I need more sleep. :)","msgtype":"m.text"},"ts":1453110856000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: Two DOMString arguments, I meant.","msgtype":"m.text"},"ts":1453110868000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: honestly, I am not sure I understand the sentence I posted last","msgtype":"m.text"},"ts":1453110872000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"nox: but the current validator allows ?a=b&c=d","msgtype":"m.text"},"ts":1453110885000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: Doesn't matter, the sentence I pasted still apply.","msgtype":"m.text"},"ts":1453110940000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: overloading toggle seems worse than just having a distinct method that is clear","msgtype":"m.text"},"ts":1453111045000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Oh it wouldn't do the same thing as replace.","msgtype":"m.text"},"ts":1453111059000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I'm pretty sure Ember toggles two classes, and that require two different replace calls, doesn't it?","msgtype":"m.text"},"ts":1453111077000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: hmm no, they have something like _templateValue_ and need to replace that, without it changing location","msgtype":"m.text"},"ts":1453111119000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ok.","msgtype":"m.text"},"ts":1453111129000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I understand that the spec it more important that the validator's behavior. But, still: 1) what is the *real* meaning of that paragraph I posted? 2) does this mean the validator does not follow the spec?","msgtype":"m.text"},"ts":1453111143000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: yes the validator was previously marking \"?a=b&c=d\" as an error","msgtype":"m.text"},"ts":1453111162000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"until very recently the validator had always reported an error for that caseãƒ¼because originally the HTML spec in fact did define it as an error","msgtype":"m.text"},"ts":1453111228000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: according to what nox wrote, it is still an error","msgtype":"m.text"},"ts":1453111245000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"MikeSmith: \"If the last character matched is not a U+003B SEMICOLON character (;), there is a parse error.\"","msgtype":"m.text"},"ts":1453111258000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"but I find it hard to understand this part of the spec","msgtype":"m.text"},"ts":1453111261000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"nox: I think that requirement doesn't apply to all cases","msgtype":"m.text"},"ts":1453111314000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I am pretty sure the current spec does make the \"?a=b&c=d\" case a non-error","msgtype":"m.text"},"ts":1453111347000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I'm pretty sure that's not the case.","msgtype":"m.text"},"ts":1453111360000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I interpret ondras' citation as \"?a=b&c\" not being an error,","msgtype":"m.text"},"ts":1453111374000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"but \"?a=b&c=d\" being one.","msgtype":"m.text"},"ts":1453111380000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"zcorpan: â¬†","msgtype":"m.text"},"ts":1453111391000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"likes the arrow glyph.","msgtype":"m.emote"},"ts":1453111405000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"nox: I'll look back at the (several) bug reports from users that I got about this after the spec changed","msgtype":"m.text"},"ts":1453111440000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"which it did","msgtype":"m.text"},"ts":1453111445000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it may be that it's now changed back, I dunno","msgtype":"m.text"},"ts":1453111457000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"(both posted variants are considered valid by the validator, for the record)","msgtype":"m.text"},"ts":1453111462000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"It seems the spec contradicts itself.","msgtype":"m.text"},"ts":1453111521000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"yeah at this poine I'm very unlikely regardless to revert the validator change I recently made with regard to this","msgtype":"m.text"},"ts":1453111522000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"\"â€¦ and the next character is either a U+003D EQUALS SIGN character (=) â€¦\"","msgtype":"m.text"},"ts":1453111531000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"\"â€¦ However, if this next character is in fact a U+003D EQUALS SIGN character (=), â€¦\"","msgtype":"m.text"},"ts":1453111548000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Ah no, it just says after the fact that in this case, it's a parse error.","msgtype":"m.text"},"ts":1453111571000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"\"If the last character matched is not a U+003B SEMICOLON character (;), there is a parse error.\" only applies if an entity was actually matched","msgtype":"m.text"},"ts":1453111585000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ok yaeh that's what I had thought","msgtype":"m.text"},"ts":1453111612000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: Ok, but it is still a parse error even if no entity is matched.","msgtype":"m.text"},"ts":1453111621000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"zcorpan: interesting, but I do not see how to infer this fact from the spec","msgtype":"m.text"},"ts":1453111650000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"nox: what is? (and is it in-attribute-value or not?)","msgtype":"m.text"},"ts":1453111660000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"for anybody curious, the change I landed that affects the validator behavior around this was actually a change to the htmlparser the validator relies on, and I landed the change about a month ago https://github.com/validator/htmlparser/commit/4e5446644c3a0d0faad76f2650ba6ca453196a48 (and pushed it to the W3C validator then)","msgtype":"m.text"},"ts":1453111755000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: \"If the character reference is being consumed as part of an attribute, and the last character matched is not a U+003B SEMICOLON character (;), and the next character is either a U+003D EQUALS SIGN character (=) or an alphanumeric ASCII character, then, for historical reasons, all the characters that were matched after the U+0026 AMPERSAND character","msgtype":"m.text"},"ts":1453111758000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"(&) must be unconsumed, and nothing is returned. However, if this next character is in fact a U+003D EQUALS SIGN character (=), then this is a parse error, because some legacy user agents will misinterpret the markup in those cases.\"","msgtype":"m.text"},"ts":1453111758000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"zcorpan: Last sentence.","msgtype":"m.text"},"ts":1453111764000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"also I think the change hasn't been pushed to validator.nu so it's likely that validator.nu still reports an error for this, but I've not checked","msgtype":"m.text"},"ts":1453111831000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"nox: i think that is only intended to apply if something was consumed, e.g. <p title=\"&amp=\">","msgtype":"m.text"},"ts":1453111900000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"nox: granted it's not super-clear","msgtype":"m.text"},"ts":1453111954000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah it seems clear that it's not super-clear ðŸ˜€","msgtype":"m.text"},"ts":1453111998000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"That's the paragraph about it not being consumed.","msgtype":"m.text"},"ts":1453112049000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: yeah sorry i was confused myself","msgtype":"m.text"},"ts":1453112076000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"nox: i mean the paragraph above, i read \"no characters are consumed, and nothing is returned\" as \"return and abort here\"","msgtype":"m.text"},"ts":1453112122000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"imagining how the parser vomits (un-consumes) data after reaching an EQUALS SIGN","msgtype":"m.emote"},"ts":1453112123000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"and in &c= no match can be made.","msgtype":"m.text"},"ts":1453112148000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"and so &c= is not a parse error but &amp= is (in attribute value)","msgtype":"m.text"},"ts":1453112215000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Where does it distinguish c from amp?","msgtype":"m.text"},"ts":1453112275000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"\"If no match can be made, then no characters are consumed, and nothing is returned.\"","msgtype":"m.text"},"ts":1453112387000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hmm, in data state, U+0000 is emitted as a character token; elsewhere it's replaced with U+FFFD or ignored","msgtype":"m.text"},"ts":1453114234000,"senderName":"deltab","senderId":"deltab@irc"},
{"content":{"body":"deltab: Yes.","msgtype":"m.text"},"ts":1453114383000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"is that intentional?","msgtype":"m.text"},"ts":1453114417000,"senderName":"deltab","senderId":"deltab@irc"},
{"content":{"body":"Yes.","msgtype":"m.text"},"ts":1453114432000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"deltab: Cf. that note in the spec: \"The handling of U+0000 NULL characters varies based on where the characters are found. In general, they are ignored except where doing so could plausibly introduce an attack vector. This handling is, by necessity, spread across both the tokenization stage and the tree construction stage.\"","msgtype":"m.text"},"ts":1453114459000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"the character token part, I mean","msgtype":"m.text"},"ts":1453114469000,"senderName":"deltab","senderId":"deltab@irc"},
{"content":{"body":"why's it not replaced or ignored?","msgtype":"m.text"},"ts":1453114491000,"senderName":"deltab","senderId":"deltab@irc"},
{"content":{"body":"\"legacy\"","msgtype":"m.text"},"ts":1453114505000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I guess the note under \"12.2.5.4.8 The \"text\" insertion mode\" doesn't apply to that","msgtype":"m.text"},"ts":1453114619000,"senderName":"deltab","senderId":"deltab@irc"},
{"content":{"body":"zcorpan: about \"&c= is not a parse error but &amp= is\", I believe what I implemented in the htmlparser/validator matches thatãƒ¼and overall is now in conformance with the current spec. At least that's what I intend. So if you try it and find any cases where the validator should per-spec be emitting an error but isn't, please let me know.","msgtype":"m.text"},"ts":1453114732000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: ok i can have a look","msgtype":"m.text"},"ts":1453114798000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1453114807000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: as you specified data-x should be kept right?  https://github.com/whatwg/html/pull/499/files","msgtype":"m.text"},"ts":1453115267000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"MikeSmith: seems to work as it should... but now i wonder why we're anal about the semicolon for numbered charrefs but so lax for named refs","msgtype":"m.text"},"ts":1453115721000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"e.g. &#x40","msgtype":"m.text"},"ts":1453115775000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: yeah true","msgtype":"m.text"},"ts":1453116825000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and thanks for checking","msgtype":"m.text"},"ts":1453116877000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ritsyy: you should probably remove it for consistency","msgtype":"m.text"},"ts":1453117395000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ritsyy: not needed for flags","msgtype":"m.text"},"ts":1453117407000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: okay","msgtype":"m.text"},"ts":1453117964000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"MikeSmith: note that if an attribute value contains a space, you can break there too","msgtype":"m.text"},"ts":1453120692000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: didn't notice the attribute values had spaces in them initially, sorry","msgtype":"m.text"},"ts":1453120702000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: no worries","msgtype":"m.text"},"ts":1453120775000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so should I leave it as it is, or re-break it on the spaces?","msgtype":"m.text"},"ts":1453120797000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I thought we had problems with refs with embedded line breaks","msgtype":"m.text"},"ts":1453120828000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: probably break on the spaces if that gets us longer lines","msgtype":"m.text"},"ts":1453120845000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: hmm, I don't think so, but now I'm not sure anymore","msgtype":"m.text"},"ts":1453120857000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1453120862000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"well I'll try and see if anything breaks","msgtype":"m.text"},"ts":1453120875000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: any objection to breaking before the \">\" in start tags?","msgtype":"m.text"},"ts":1453121204000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"e.g.:","msgtype":"m.text"},"ts":1453121209000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"    The <span>Content Security Policy</span> given in the <code data-x=\"attr-meta-content\"","msgtype":"m.text"},"ts":1453121211000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"    >content</code> attribute will be <span data-x=\"enforce the policy\">enforced</span> upon the","msgtype":"m.text"},"ts":1453121214000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"    >current document. <ref spec=\"CSP\"></p>","msgtype":"m.text"},"ts":1453121217000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: we haven't done it thus far","msgtype":"m.text"},"ts":1453121224000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"please, can anyone provide rationale for the uri stripping in CSP reports?","msgtype":"m.text"},"ts":1453121256000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"annevk:  yeah I know. I'm wondering if there's any reason not to start now. Other than greater consistency","msgtype":"m.text"},"ts":1453121266000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ondras: leaking of redirects, iirc","msgtype":"m.text"},"ts":1453121276000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yaeh","msgtype":"m.text"},"ts":1453121288000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: can you elaborate please? I do not follow what is the problem.","msgtype":"m.text"},"ts":1453121292000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"MikeSmith: it looks a little ugly, I'll defer to Domenic","msgtype":"m.text"},"ts":1453121293000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ondras: https://fetch.spec.whatwg.org/#atomic-http-redirect-handling","msgtype":"m.text"},"ts":1453121315000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: i didn't understand removing the images at the same time https://github.com/whatwg/html/pull/526#issuecomment-172517560","msgtype":"m.text"},"ts":1453121316000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"ondras: I think that's actually mentioned somewhere, the rationale","msgtype":"m.text"},"ts":1453121318000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I would be happy to read about it somewhere. My google-fu is apparently low.","msgtype":"m.text"},"ts":1453121336000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ritsyy: the HTML repository hosts images used by examples, if we remove an example that uses those images, we should remove the images too (if it's the only example that uses them, which I think is the case here)","msgtype":"m.text"},"ts":1453121369000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ondras: the CSP spec and/or commit logs for it","msgtype":"m.text"},"ts":1453121383000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the CSP spec only explains that stripping takes place","msgtype":"m.text"},"ts":1453121412000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"no rationale afaik","msgtype":"m.text"},"ts":1453121417000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"annevk: yeah i should remove them from the images too, ok ok","msgtype":"m.text"},"ts":1453121432000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"annevk: I am thoroughly puzzled by this. The CSP report is not supposed to make any (potentially redirecting) requests; I just want to see what was requested. Would you please somehow outline how an attack vector would look like here?","msgtype":"m.text"},"ts":1453121712000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"annevk: ah, I got it!","msgtype":"m.text"},"ts":1453121741000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"an attacker with a rogue CSP logger","msgtype":"m.text"},"ts":1453121762000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"bingo","msgtype":"m.text"},"ts":1453121983000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":-)","msgtype":"m.text"},"ts":1453122149000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"annevk: in one of the example of the data element, table sorting model is used in which is to replaced with a script then, can we point through javascript library like sortable.js , i was not sure","msgtype":"m.text"},"ts":1453122295000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"ritsyy: yeah, referencing a library in the example seems okay","msgtype":"m.text"},"ts":1453122509000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ritsyy: but don't include the library inline of course","msgtype":"m.text"},"ts":1453122525000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, okay i will take care of that thanks!","msgtype":"m.text"},"ts":1453122559000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"annevk: could you see this once https://paste.kde.org/pfyjmvkdd","msgtype":"m.text"},"ts":1453128685000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"ritsyy: yeah, I guess that's fine, although it's not ideal to include the script synchronously","msgtype":"m.text"},"ts":1453128942000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ritsyy: the language could also use some improvement, e.g., it's JavaScript","msgtype":"m.text"},"ts":1453128969000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ritsyy: and you probably want to say \"the data element\" rather than just data","msgtype":"m.text"},"ts":1453128982000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: oh then if it's not that much suitable should i change it?","msgtype":"m.text"},"ts":1453129175000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"annevk: i would do these changes","msgtype":"m.text"},"ts":1453129286000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"will*","msgtype":"m.text"},"ts":1453129298000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"annevk: ok, not going to write to the bug, but \"doing bad thing is fine because they are already doing it\"?","msgtype":"m.text"},"ts":1453138403000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: it isn't clear to me that what they're doing is bad, presumably they need those computations before next render","msgtype":"m.text"},"ts":1453138443000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I do expect that we'll add enqueueMicrotask API, but I hope people first think a bit what it means","msgtype":"m.text"},"ts":1453138448000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I hope people try to improve the platform by making it easier to write web pages which are responsive from user point of view","msgtype":"m.text"},"ts":1453138484000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: and for all intents and purposes we already have that API, it's just not as efficient as it could be","msgtype":"m.text"},"ts":1453138484000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"we're missing an API which tries to do stuff before rAF, but do it async","msgtype":"m.text"},"ts":1453138517000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"setTimeout(, 0) is too unreliable","msgtype":"m.text"},"ts":1453138528000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"setTimeout queues tasks, so layout will have happened","msgtype":"m.text"},"ts":1453138548000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"starts to feel inventing microtasks may have been a bad thing :/","msgtype":"m.emote"},"ts":1453138552000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Having said that, I'm not really sure what you mean with \"async\"","msgtype":"m.text"},"ts":1453138585000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that event loop spins","msgtype":"m.text"},"ts":1453138604000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"But that means layout happens","msgtype":"m.text"},"ts":1453138616000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"microtask is totally synchronous from browser point of view","msgtype":"m.text"},"ts":1453138618000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"layout happens at rAF","msgtype":"m.text"},"ts":1453138629000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"not at random times","msgtype":"m.text"},"ts":1453138633000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(layout may of course happen also sync when .offsetLeft or such is accessed )","msgtype":"m.text"},"ts":1453138661000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Okay, so you want an API that queues tasks that need to happen just before rAF?","msgtype":"m.text"},"ts":1453138709000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that is rAF","msgtype":"m.text"},"ts":1453138722000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I'm thinking, whether we need setTimeout(, 0) like API, which guarantees that the callback is called at latest at rAF","msgtype":"m.text"},"ts":1453138748000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but sooner if possible","msgtype":"m.text"},"ts":1453138758000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"something like setImmediate + rAF","msgtype":"m.text"},"ts":1453138813000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"that way UA could still process other stuff between the callbacks","msgtype":"m.text"},"ts":1453138887000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: the alternative here is for frameworks to keep an array of functions they want to execute after all their work is done","msgtype":"m.text"},"ts":1453138903000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"smaug____: the alternative is not to use some new scheduling API","msgtype":"m.text"},"ts":1453138911000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"smaug____: that is what frameworks do today, they just use MutationObserver with an empty text node to detect \"their work is done\"","msgtype":"m.text"},"ts":1453138928000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I guess I'm saying that frameworks are doing it wrong atm","msgtype":"m.text"},"ts":1453138928000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: well, good luck with that. A lot of thought has gone into these frameworks over a lot of years.","msgtype":"m.text"},"ts":1453138943000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I was horrified about that 100s of microtasks comments","msgtype":"m.text"},"ts":1453138949000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"sure. though microtasks aren't that old thing","msgtype":"m.text"},"ts":1453138974000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"yes, you really should not be. are you horrified by 100s of lines of normal code?","msgtype":"m.text"},"ts":1453138974000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and some of those frameworks still fallback to setTimeout","msgtype":"m.text"},"ts":1453138991000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"for IE8 yeah","msgtype":"m.text"},"ts":1453139000000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and websites built in those frameworks are a shitty UX on IE8","msgtype":"m.text"},"ts":1453139012000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1453139021000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I am horrified doing any major js execution synchronously in the main thread. In workers it is fine. The more we add microtask callback usage, the more we end up doing sync stuff","msgtype":"m.text"},"ts":1453139066000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(and I need to say again: \"I do expect that we'll add enqueueMicrotask API\")","msgtype":"m.text"},"ts":1453139113000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"This is really just about preventing people from having to require a library that twiddles an empty text node","msgtype":"m.text"},"ts":1453139136000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I don't think microtask usage is going to be any less just because people have to require a library. Making the concept harder to use doesn't prevent people from using it, in a world with abstractions and function calls.","msgtype":"m.text"},"ts":1453139165000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"or just Gecko\" is a bit inflammatory, the concern of blocking the processing user input should really concern everyone","msgtype":"m.text"},"ts":1453139176000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and to me the question is not about that, but to try to convince people to use programming models which aren't synchronous","msgtype":"m.text"},"ts":1453139176000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"we're trying to do that with sync XHR","msgtype":"m.text"},"ts":1453139303000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"sure, that is way worse case","msgtype":"m.text"},"ts":1453139336000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"btw, I'm pretty sure I've seen long Promise chains showing up in Firefox startup profiles. Like, we end up painting browser UI later than we should because we end up processing microtask/promise queue.","msgtype":"m.text"},"ts":1453139756000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Domenic: do you happen to know what frameworks did before MutationObserver?","msgtype":"m.text"},"ts":1453140209000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: oh yes. They used various tricks to get tasks that are faster than setTImeout(,0). MessageChannel, postMessage-to-yourself were popular.","msgtype":"m.text"},"ts":1453140292000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ok, those are async","msgtype":"m.text"},"ts":1453140311000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"yep. but they would only post one task then inside that task loop over all accumulated framework-microtasks","msgtype":"m.text"},"ts":1453140331000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It does seem like they want \"do this before render, in order\" more than \"do this at end-of-task\"","msgtype":"m.text"},"ts":1453140634000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: talking to Misko what they really want is \"do this before any new tasks get posted\"","msgtype":"m.text"},"ts":1453140671000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"although maybe not, since \"do this before render, in order\" can be polyfilled using rAF and nobody is doing that...","msgtype":"m.text"},"ts":1453140674000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1453140694000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it's used for e.g. synchronizing data models. all future tasks should get a consistent view of the world with the data synced, after the current task + microtasks have settled down.","msgtype":"m.text"},"ts":1453140717000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that is a larger problem though, and much harder to solve. along the way we encountered the fact that one building block of it was hidden behind MutationObserver, so proposed unlocking it.","msgtype":"m.text"},"ts":1453140760000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: well, polyfilling using rAF would put too much pressure to rAF which would make rendering to be postponed","msgtype":"m.text"},"ts":1453140789000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Domenic: you might know. Has anyone written some blog post when to use or more importantly when to not use Promises","msgtype":"m.text"},"ts":1453148503000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(I'm just reviewing some tests and feels like overuse of Promises without no reason)","msgtype":"m.text"},"ts":1453148530000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(could link to some documentation when to not use Promises)","msgtype":"m.text"},"ts":1453148548000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: https://www.w3.org/2001/tag/doc/promises-guide#when-to-use + https://www.w3.org/2001/tag/doc/promises-guide#when-not-to-use is the general guidance","msgtype":"m.text"},"ts":1453148550000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1453148573000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"annevk: It looks like the term \"scheme data\" no longer exists in the URL standard (despite HTML referring to it). What's the correct thing to refer to now - the \"scheme\" definition?","msgtype":"m.text"},"ts":1453158373000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: In the Promises guide, a note about not rejecting for a missing key in an AsyncMap could probably use a note to the effect that, while some languages *do* consider a missing key to be an exception-worthy event (Python), JS does not.","msgtype":"m.text"},"ts":1453158535000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: And I'm still bothered by the suggested \"in parallel\" language. ^_^  Every single time, it reads to me that you should execute the substeps in parallel with each other (and implicitly, in series with the wider algorithm), instead of the intended meaning of running the substeps in series, but the subalgo as a whole is done in parallel with the wider","msgtype":"m.text"},"ts":1453158714000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"algo.","msgtype":"m.text"},"ts":1453158714000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(I know it links, and it's a term of art that can just be learned. It just rubs me the wrong way initially every time I see it.)","msgtype":"m.text"},"ts":1453158793000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: Looking more into it, it seems like \"scheme data\" was probably a term for the stuff after the scheme in non-hierarchical URLs, and now something like blob: just has a host and a single path entry.","msgtype":"m.text"},"ts":1453159009000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]