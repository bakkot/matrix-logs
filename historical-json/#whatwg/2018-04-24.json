[
{"content":{"body":"JakeA: reading Mark's CSP+SW post... it bothers me that you can't express \"allow SW to connect to <host> only when servicing a request for <destination>\"... it seems like we should be able to do that","msgtype":"m.text"},"ts":1524578700000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: Any idea why CSP is based on requests? I know it's based on responses now too, but is the request part just an optimisation?","msgtype":"m.text"},"ts":1524580514000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I'm no expert in CSP... but it seems you need some way to say what the request is for in order to pick the right CSP policy directive","msgtype":"m.text"},"ts":1524580582000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: so Request.destination is the fetch API thing for that...","msgtype":"m.text"},"ts":1524580628000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: but if the intent is \"I only want to execute scripts from a particular origin\", then it's the response that matters, not the requests","msgtype":"m.text"},"ts":1524580628000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"in gecko we have nsIContentPolicyType would serves the same thing (and we map to destination): https://searchfox.org/mozilla-central/source/dom/base/nsIContentPolicy.idl#69","msgtype":"m.text"},"ts":1524580643000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: but, to your original point, I guess we could look at preserving some of the properties like destination when doing `new Request(request)`","msgtype":"m.text"},"ts":1524580688000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I think that'd make it work","msgtype":"m.text"},"ts":1524580693000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: sure, and we should still have the check on the respondWith() for the response... but it seems the site should also be able to prevent XSS from calling out to evil.com, etc","msgtype":"m.text"},"ts":1524580704000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yeah, I guess it stops data leaking out, as long as no part of CSP allows requests to evil.com","msgtype":"m.text"},"ts":1524580769000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I guess it depends on if folks are ok with someone doing stuff like storing a destination=img request in Cache API and pulling it out later to make an \"image\" request via fetch again later","msgtype":"m.text"},"ts":1524580772000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"But if you, say, allow images from anywhere, the game's up","msgtype":"m.text"},"ts":1524580779000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yea... evil.com could just make an <img> element, stick whatever in the .src, then get an image destination request in the service worker","msgtype":"m.text"},"ts":1524580836000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I dunno","msgtype":"m.text"},"ts":1524580843000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: I guess I'll write a fetch spec issue to discuss it further","msgtype":"m.text"},"ts":1524580977000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1524580983000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"np! I guess we need a CSP expert to figure it out","msgtype":"m.text"},"ts":1524580994000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"but from the fetch spec point of view I don't think it'd be that hard","msgtype":"m.text"},"ts":1524581003000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"unless it opens up security issues","msgtype":"m.text"},"ts":1524581008000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I think it should probably be done in step 14 of https://fetch.spec.whatwg.org/#dom-request","msgtype":"m.text"},"ts":1524581067000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"it would also keep the destination consistent with mode==\"navigate\" or not","msgtype":"m.text"},"ts":1524581078000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: you might appreciate https://github.com/w3c/web-platform-tests/commit/a8a88982335f854cf824f2f52a9088629b4db011","msgtype":"m.text"},"ts":1524581244000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is gonna do that for more tests","msgtype":"m.emote"},"ts":1524581256000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If you just have some JS to run in a service worker you can use // META global=!default,serviceworker","msgtype":"m.text"},"ts":1524581283000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"coupled with .any.js","msgtype":"m.text"},"ts":1524581289000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it's so great","msgtype":"m.text"},"ts":1524581294000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Nice! So in this example the test will run in a worker, window, but not a shared worker or service worker?","msgtype":"m.text"},"ts":1524584332000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: worker is all workers","msgtype":"m.text"},"ts":1524584723000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: it follows the IDL syntax a bit","msgtype":"m.text"},"ts":1524584755000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I thought window + workers was the default for .any?","msgtype":"m.text"},"ts":1524584808000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: default is window + dedicated worker","msgtype":"m.text"},"ts":1524584837000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ohhhh!","msgtype":"m.text"},"ts":1524584846000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: https://annevankesteren.nl/2018/04/wpt-any-js","msgtype":"m.text"},"ts":1524584861000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TIL. I might have to fix some of my tests","msgtype":"m.text"},"ts":1524584864000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Nice!","msgtype":"m.text"},"ts":1524584913000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: https://github.com/w3c/web-platform-tests/pull/10442 could use another look","msgtype":"m.text"},"ts":1524585335000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"LGTM","msgtype":"m.text"},"ts":1524585994000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"hey shouldn't the examples in https://html.spec.whatwg.org/#usage-summary-2 contain headings?","msgtype":"m.text"},"ts":1524588502000,"senderName":"bkardell","senderId":"bkardell@irc"},
{"content":{"body":"The ones which illustrate sectioning content do...","msgtype":"m.text"},"ts":1524589758000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Well, the article example has no heading, but that's OK given its content.","msgtype":"m.text"},"ts":1524589785000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Does the W3C WebDriver spec specify data types for the return values from a `GetWindowRect` command? https://www.w3.org/TR/webdriver/#get-window-rect links to https://www.w3.org/TR/webdriver/#dfn-window-rect which leads to https://drafts.csswg.org/cssom-view/#dom-window-screenx which doesn't specify a valid range. In practice I get back `u64`s but","msgtype":"m.text"},"ts":1524595570000,"senderName":"Phrohdoh","senderId":"Phrohdoh@irc"},
{"content":{"body":"do not want to error with a 'non-w3' error type if a non-u64 isn't technically violating the spec.","msgtype":"m.text"},"ts":1524595570000,"senderName":"Phrohdoh","senderId":"Phrohdoh@irc"},
{"content":{"body":"If there is a better place to ask this question please direct me there! :)","msgtype":"m.text"},"ts":1524595580000,"senderName":"Phrohdoh","senderId":"Phrohdoh@irc"},
{"content":{"body":"u64 being Rust notation for an unsigned 64bit integer.","msgtype":"m.text"},"ts":1524595649000,"senderName":"Phrohdoh","senderId":"Phrohdoh@irc"},
{"content":{"body":"I could assume that these values are 32bit signed integers since that is what `SetWindowRect` uses but I'd rather have authoritative documentation.","msgtype":"m.text"},"ts":1524595763000,"senderName":"Phrohdoh","senderId":"Phrohdoh@irc"},
{"content":{"body":"Phrohdoh: They would be JSON numbers. WebDriver appears to define JSON deserialization in terms of ECMA-262, so that would mean a 64-bit double-precision floating point number.","msgtype":"m.text"},"ts":1524598183000,"senderName":"JKingWeb","senderId":"JKingWeb@irc"},
{"content":{"body":"JKingWeb: Okay that makes sense. I may have to propose changes to a library I am consuming then. Thank you.","msgtype":"m.text"},"ts":1524601126000,"senderName":"Phrohdoh","senderId":"Phrohdoh@irc"},
{"content":{"body":"I may be wrong (it wouldn't be the first time!), but an integer type would be unsuitable because the values are CSS pixels, and CSS pixels are not necessary integral.","msgtype":"m.text"},"ts":1524601291000,"senderName":"JKingWeb","senderId":"JKingWeb@irc"},
{"content":{"body":"Phrohdoh: I'd expect it to match the type of screenX in CSSOM View, which is a double","msgtype":"m.text"},"ts":1524603722000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(And ultimately, as JKingWeb says, given everything goes over the wire as JSON, it'll become a double then)","msgtype":"m.text"},"ts":1524603767000,"senderName":"gsnedders","senderId":"gsnedders@irc"}
]