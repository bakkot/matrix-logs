[
{"content":{"body":"annevk: re: https://github.com/whatwg/html/issues/3400#issuecomment-615130411, \"valueAsColor() doesn't help with submission\" -- is that a dealbreaker somehow?","msgtype":"m.text"},"ts":1587116455000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"valueAsDate() doesn't affect submission either, it's just a way to read the serialized value in a different format","msgtype":"m.text"},"ts":1587116491000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: we need something for submission if we're going beyond RGB","msgtype":"m.text"},"ts":1587116598000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: sure, but do developers want to specify the exact serialization format? I was assuming it would be sufficient if the .value would be \"any valid CSS color as produced by the CSS color serialization spec\", and maybe that's wrong","msgtype":"m.text"},"ts":1587116661000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: it does seem to fine to offer utility methods, but if you're looking at an MVP I'd not target those","msgtype":"m.text"},"ts":1587116667000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mathiasbynens: I suspect servers will break if <input type=color> suddenly started emitting non-RGB strings","msgtype":"m.text"},"ts":1587116703000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah i think shoehorning this into type=color is a bad idea in general","msgtype":"m.text"},"ts":1587116737000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: if it's <input type=color widegamut> that's fine though","msgtype":"m.text"},"ts":1587116738000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"a new input type seems better","msgtype":"m.text"},"ts":1587116754000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: there's a bunch of precedent with the existing types for attributes to modify them somehow, e.g. <input type=file multiple directory>","msgtype":"m.text"},"ts":1587116787000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I agree we don't want to break <input type=color> :)","msgtype":"m.text"},"ts":1587116790000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"or webkitdirectory","msgtype":"m.text"},"ts":1587116791000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess we're mostly aligned then","msgtype":"m.text"},"ts":1587116808000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"A new element!!","msgtype":"m.text"},"ts":1587131476000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Specifying MIME type parsing was a good move. It's nice to see things like https://github.com/mensbeam/mime crop up.","msgtype":"m.text"},"ts":1587132712000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That's not the PHP I used to write ðŸ™‚","msgtype":"m.text"},"ts":1587133320000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: for portals (spec work is re-starting) we want to have the spec primitives to specify \"no storage\" for a given browsing context, and then after activation \"storage as normal\" (i.e. keyed to origin like a TLBC, no double-keying). Will the storage infra work you're workign on provide the primitives for that?","msgtype":"m.text"},"ts":1587136752000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'm going to assume \"TLBC\" is \"Three Letter BaCkronym\"","msgtype":"m.text"},"ts":1587138238000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"top-level browsing context, ofc","msgtype":"m.text"},"ts":1587138301000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: it would allow you to explain the observable effects, but it's prolly still some work","msgtype":"m.text"},"ts":1587139479000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: this mostly provides infrastructure for replacing the underlying storage bucket and also make it clearer which APIs end up in the same bucket","msgtype":"m.text"},"ts":1587139539000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: hmm so this mostly helps with buckets, not necessarily with double-keying? Or are they connected?","msgtype":"m.text"},"ts":1587139562000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: they are and it helps with double-keying","msgtype":"m.text"},"ts":1587139632000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: but double-keying is different from blocking","msgtype":"m.text"},"ts":1587139645000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Right, that makes sense","msgtype":"m.text"},"ts":1587139768000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Although I wonder why our plan is blocking instead of changing the key to something useless","msgtype":"m.text"},"ts":1587139789000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess what I mean is keying to an isolated origin","msgtype":"m.text"},"ts":1587139869000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But then it's pretty weird if only storage treats the origin as opaque","msgtype":"m.text"},"ts":1587139877000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"storage is mostly blocked on opaque origins anyway?","msgtype":"m.text"},"ts":1587139893000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"I think so","msgtype":"m.text"},"ts":1587139908000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Is it blocked? I thought it just wrote to something that only you could access.","msgtype":"m.text"},"ts":1587139909000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and swapping out storage is much weirder than unblocking imho. What happens to open transactions, etc for example.","msgtype":"m.text"},"ts":1587139910000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Currently it is blocked for almost every storage API","msgtype":"m.text"},"ts":1587139924000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"I see. https://w3c.github.io/IndexedDB/#dom-idbfactory-open","msgtype":"m.text"},"ts":1587139935000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Transactions get terminated","msgtype":"m.text"},"ts":1587139942000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Also a problem if you swap with an empty bucket","msgtype":"m.text"},"ts":1587139951000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://html.spec.whatwg.org/multipage/webstorage.html#storage-object-initialisation-steps","msgtype":"m.text"},"ts":1587139954000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"aka Clear-Site-Data","msgtype":"m.text"},"ts":1587139957000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wonder if we can define \"storage is blocked\" just by piggybacking off of this infrastructure","msgtype":"m.text"},"ts":1587139985000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I thought clear-site-data also froze/reloaded pages? But perhaps that was an optional flag.","msgtype":"m.text"},"ts":1587139993000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Mek: that's an optional flag that Chrome didn't implement and caused a bunch of trouble for Firefox","msgtype":"m.text"},"ts":1587140012000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess we need to define \"storage key\" separately from \"origin\" anyway to help with double-keying... /me goes to re-read annevk's proposal","msgtype":"m.text"},"ts":1587140014000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: obtain the key is currently XXX, but yes","msgtype":"m.text"},"ts":1587140028000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: Storage asks for an environment and my idea is to get the key from there; currently it assumes you don't invoke it from an opaque origin environment but I should probably flip that around and only returning failure or some such","msgtype":"m.text"},"ts":1587140084000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"This makes sense","msgtype":"m.text"},"ts":1587140086000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'll comment on the bug","msgtype":"m.text"},"ts":1587140094000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: thanks","msgtype":"m.text"},"ts":1587140458000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I need to think a bit more about sessionStorage / history which are of course weirdly special, but it's probably worth starting with this next week even if I leave those as XXX","msgtype":"m.text"},"ts":1587140522000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Mek: if nobody does sessionStorage for opaque origins I'd be okay with stopping that","msgtype":"m.text"},"ts":1587142931000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Mek: although if pushState() still works...","msgtype":"m.text"},"ts":1587142938000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I have no idea what other browsers do for session storage unfortunately","msgtype":"m.text"},"ts":1587142949000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Mek: but yeah, at this point I think the best course is that sessionStorage gets its own storage bucket that is session-lifetime-bound somehow","msgtype":"m.text"},"ts":1587142998000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"seems reasonable, yes... session-lifetime-bound, but also copied-on-creating-auxiliary browsing contexts","msgtype":"m.text"},"ts":1587143054000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Mek: and history.pushState() may or may not be able to use that too, not sure I'll figure all that out for v0 though, but I suspect I might try to poke at things a bit","msgtype":"m.text"},"ts":1587143056000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Mek: yeah that also needs some work, if the session belongs to the browsing context group the spec might not have to copy","msgtype":"m.text"},"ts":1587143161000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh wait, it probably does need to copy because afterward they are independent?","msgtype":"m.text"},"ts":1587143212000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"exactly","msgtype":"m.text"},"ts":1587143220000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"oh well, it's all doable","msgtype":"m.text"},"ts":1587143222000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but that does suggest it should have a bucket separate from pushState()","msgtype":"m.text"},"ts":1587143260000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"don't want to copy over that data too","msgtype":"m.text"},"ts":1587143270000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"weekend \\o/","msgtype":"m.text"},"ts":1587143302000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"definitely excited about better figuring out how session storage should/is behaving","msgtype":"m.text"},"ts":1587143324000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"(third party iframes, and should their storage be copied as well? Unclear in current spec, no idea what other browsers do, chrome does. I.e. a.com embeds b.com. Open a new window of a.com embedding b.com, and the new embedded b.com also gets a copy of the old embedded b.com)","msgtype":"m.text"},"ts":1587143376000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"mkwst: you might know if https://w3c.github.io/reporting/#send-reports is supposed to happen for workers too?","msgtype":"m.text"},"ts":1587148996000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"the text hints that it should not","msgtype":"m.text"},"ts":1587149007000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but the API is exposed to the workers too","msgtype":"m.text"},"ts":1587149026000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: it should, baku filed an issue I think","msgtype":"m.text"},"ts":1587151527000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Mek: I guess that makes sense, but would indeed be good to define it exactly","msgtype":"m.text"},"ts":1587151573000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok, thanks. I just asked baku to file an issue, but I guess he did that already :)","msgtype":"m.text"},"ts":1587151615000,"senderName":"smaug____","senderId":"smaug____@irc"}
]