2023-09-13
[06:52:14.0037] <zacque>
Hi, what's the difference between Completion Record `normal` and `return` type?

[06:53:37.0088] <zacque>
https://tc39.es/ecma262/#table-completion-record-fields

[06:56:41.0097] <jmdyck>
If you evaluate a statement (within a function body, say), and it causes a return from that function, then that's signaled via a `return` completion. If evaluation is to proceed normally to the next statement, then that's signaled by a `normal` completion.

[07:00:39.0083] <zacque>
Makes sense, but what about the next paragraph: "Callable objects that are defined in this specification only return a normal completion or a throw completion. Returning any other kind of Completion Record is considered an editorial error."

[07:00:55.0657] <zacque>
I'll expect it to include `return` completion?

[07:02:45.0717] <jmdyck>
No, if, within function A, you call function B, that call cannot cause a return from function A. (But it can cause A to throw.)

[07:05:24.0742] <jmdyck>
The wording you quoted is not the best: callable objects (i.e., functions) don't return completions at all.

[07:08:33.0899] <jmdyck>
Rather, the completions are 'internal' to the process of calling a function. I.e., certain algorithms in the spec are returning completions. 

[07:12:24.0409] <jmdyck>
It would be more accurate to say something like "a function's [[Call]] internal method can only return a normal completion or a throw completion..."

[07:13:55.0208] <zacque>
Hmm, I see... But still, it's a bit weird to me. Can you please point me to the semantics of function invocation in the spec? I can't seem to find it in https://tc39.es/ecma262/#sec-function-objects, https://tc39.es/ecma262/#sec-ecmascript-language-functions-and-classes, or https://tc39.es/ecma262/#sec-ecmascript-language-expressions

[07:14:23.0438] <zacque>
What if I want to describe the semantics of invoking function A?

