2022-09-21
[01:43:01.0399] <—Çars>
Let me ask a question about the syntax-directed operation `StringNumericValue`. There doesn't seem to be a production definition of following case.

```
StrDecimalLiteral ::: + StrUnsignedDecimalLiteral
```

Is this not necessary? Or am I misunderstanding something?

https://tc39.es/ecma262/#sec-runtime-semantics-stringnumericvalue

[04:22:48.0948] <jmdyck>
That case is handled by the chain rule, see https://tc39.es/ecma262/#sec-algorithm-conventions-syntax-directed-operations

[06:28:56.0253] <—Çars>
Ah, I get it. Thanks! So, by the chain production rule, it implicitly includes the following:

```
StrDecimalLiteral ::: + StrUnsignedDecimalLiteral
  Return 1. StringNumericValue of StrUnsignedDecimalLiteral
```

Am I correct?

[06:29:44.0467] <—Çars>
 * Ah, I get it. Thanks! So, by the chain production rule, it implicitly includes the following:

```
StrDecimalLiteral ::: + StrUnsignedDecimalLiteral
  Return 1. StringNumericValue of StrUnsignedDecimalLiteral
```

Am I correct?

[06:39:44.0454] <jschoi>
It would be ‚ÄúReturn Evaluation of StrUnsignedDecimalLiteral‚Äù.

[07:03:48.0398] <—Çars>
What? How? Isn't the same syntax-directed operation reapplied to the sole right-hand side nonterminal? Where did the `Evaluation` come from?

[07:07:24.0916] <—Çars>
 * Ah, I get it. Thanks! So, by the chain production rule, it implicitly includes the following:

```
StrDecimalLiteral ::: + StrUnsignedDecimalLiteral
  1. Return StringNumericValue of StrUnsignedDecimalLiteral
```

Am I correct?

[12:47:21.0647] <jschoi>
My apologies; I misunderstood the question; I hadn‚Äôt realized you were talking about a specific syntax-directed operation. Yes, your interpretation is correct.


2022-09-22
[19:49:19.0742] <—Çars>
Oh, I‚Äôm relieved to hear that. I was just beginning to wonder if I had completely misunderstood something. You don't need to apologise! Thanks for the clarification. :)

[21:10:02.0751] <ssamkough>
hi yall! does tc39 have any general newsletters or rss feeds that one can subscribe to to get notified on the latest proposals?

[21:10:16.0054] <ssamkough>
sorry if this is not where i should be posting, completely new to this

[21:11:01.0837] <jmdyck>
I think this is an appropriate place to post that question.

[21:11:41.0471] <jmdyck>
I believe the answer is no, but I'm not positive.

[21:14:48.0903] <jmdyck>
But if you 'watch' https://github.com/tc39/proposals, I think you'll get a notification whenever that repo changes, which might suffice?

[21:17:31.0925] <jmdyck>
(actually, you'll get notifications for more than just that, but you can filter out what you're not interested in)

[21:17:48.0901] <ssamkough>
Yeah I did that. Just feels like we should have a better way‚Ä¶

Like, I‚Äôd love for there to be some sort of newletter that gets sent every week (or even month) on updates to the things TC39 is working on

[21:18:04.0895] <ssamkough>
It can even be an RSS feed! But I bet people have thought of that and maybe there were issues with it?

[21:20:28.0839] <jmdyck>
So not just "here's a new proposal", but also "this proposal (active but not 'new' per se) changed in such-and-such a way" ?

[21:21:16.0900] <jmdyck>
(Because I can imagine automating the first, but not the second.)

[21:22:34.0997] <ssamkough>
yeah i think starting with the first (the automation part), then going with some more detailed things

[21:23:05.0566] <jmdyck>
Well, on second thought, you could automate the second, saying things like "In the X-proposal repo, these PRs were merged, these issues were closed, these were opened", that sort of thing.

[21:23:18.0247] <jmdyck>
 * Well, on second thought, you could automate the second, saying things like "In the X-proposal repo, these PRs were merged, these issues were closed, these were opened", that sort of thing.

[21:31:48.0443] <jmdyck>
There might even already exist utilities to generate such reports, given a set of repos.

[21:33:54.0133] <ssamkough>
yeah ive been looking and cant find any üò≠

[21:34:03.0403] <jmdyck>
https://github.com/dontcallmedom/github-notify-ml ?

[21:34:33.0871] <ssamkough>
ive found this and dug a bit into the website's code: proposals.es


2022-09-24
[04:59:47.0058] <lemmy>
Hi there. I have two small questions: 

First one is regarding a need I had recently to get both quotient and remainder of an integer division at the same time.

Didn't found anything doing it in JS, and felt a bit dumb needing to perform two distinct operations to do so.

Ok, it feels like micro optimization, and they are good chances that many JS engines optimize it transparently, but I just wanted to make sure I didn't missed anything about such a basic problematic üòõ

[05:05:38.0807] <lemmy>
My second question is regarding a (maybe bad) code pattern I'm using often, which looks like : 

let options = {}
...
options = { ... options, extraParam }
...
options = { anotherExtraParam, ...options }
...



[05:07:45.0964] <lemmy>
This pattern is making me feel like I'm adding fields to an object as if one would do :

count += 5

Except that there is no affectation operator to do it.

[05:08:46.0569] <lemmy>
Is there a better way to write it, that would avoid writing twice the 'options' variable in the first code example ?

[05:12:48.0588] <lemmy>
And would creating two new affectation operator such as :

options ...= extraParam

options =... anotherExtraParam

Would make any sense.

I mean I'm not even talking about all the syntaxique problematic it could arise, but simply if it would be of any use, wouldn't promote bad development habits, and wouldn't simply write another way something that could already be written in a simpler way ü§î

[05:29:17.0380] <lemmy>
Looking forward for any thoughts about it üòä

