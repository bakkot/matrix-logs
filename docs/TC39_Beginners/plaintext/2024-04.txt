2024-04-11
[12:07:12.0894] <Yehuda Katz>
Which room is the plenary convo?

[12:07:24.0790] <ryzokuken>
Yehuda Katz #tc39-delegates:matrix.org 

[12:08:00.0455] <Yehuda Katz>
I'm a delegate. How can I get permissions?

[12:10:30.0217] <ljharb>
> <@wycats:matrix.org> I'm a delegate. How can I get permissions?

have caridy file a new delegate issue on the admin and business repo, and i'll get you set back up

[12:17:50.0437] <Chris de Almeida>
ljharb: he was already moved

[12:18:03.0609] <ljharb>
oh ok then np

[12:18:10.0108] <Chris de Almeida>
I op'ed on delegates already


2024-04-15
[22:28:39.0311] <Danielle Church>
The more I work on my Parser Augmentation proposal the more it seems like a _really_ good idea. It doesn't require browser buyin, and it has a really slow and gentle adoption strategy, which just feels nice ðŸ™‚ https://es.discourse.group/t/proposal-parser-augmentation-mechanism/2008

[22:32:14.0139] <Danielle Church>
but the best part of all is, it's just describing stuff people are already doing

[22:42:08.0630] <Danielle Church>
this is basically just a spec of "this is what it means to be a transpiler", but it has legs


2024-04-17
[17:37:28.0531] <Danielle Church>
> <@dmchurch:matrix.org> The more I work on my Parser Augmentation proposal the more it seems like a _really_ good idea. It doesn't require browser buyin, and it has a really slow and gentle adoption strategy, which just feels nice ðŸ™‚ https://es.discourse.group/t/proposal-parser-augmentation-mechanism/2008

First draft of the proposal is up! ðŸ˜„ I'll appreciate any feedback of course, but don't feel obligated, it's kind of a dense read! https://github.com/dmchurch/babel-rfcs/blob/parser-augmentation/rfcs/0000-parser-augmentation-rfp.md


2024-04-21
[15:45:11.0357] <Danielle Church>
I wonder if Parser Augmentation would make more sense to people if I described it more as "asm.js for the parser" than as "transpilers for the runtime" ðŸ¤”

[15:46:30.0539] <Danielle Church>
because it's the same kind of concept - ES code that _can_ be executed at runtime without penalty, but is _intended_ to be statically internalized

[15:47:58.0120] <Danielle Church>
 * because it's the same kind of concept - ES code that _can_ be executed at runtime without (significant) penalty, but is _intended_ to be statically internalized

