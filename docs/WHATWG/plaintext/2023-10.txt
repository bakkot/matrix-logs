2023-10-01
[06:46:57.0034] <Alexander Kalenik>
hi, any chance anybody could point me at the place in navigation specification where document's url need to be updated when same-document navigation happens (for example https://html.spec.whatwg.org/multipage/browsing-the-web.html#navigate-fragid)?

[08:22:46.0187] <Alexander Kalenik>
it's actually seems like a spec bug because by the time popstate/hashchange event is fired on step 13 (update document for history step application) document's url should be updated but non of previous steps does that.

[08:48:16.0103] <Domenic>
https://html.spec.whatwg.org/multipage/browsing-the-web.html#url-and-history-update-steps step 8 does it for popstate/hashchange/navigation API intercept

[08:48:33.0621] <Domenic>
Did we somehow mess it up for fragment navigation?

[08:52:47.0019] <Domenic>
Please file an issue


2023-10-02
[00:00:50.0505] <annevk>
TabAtkins: not sure if this is a problem, but when I updated WHATWG's bikeshed boilerplate for a change in new issue URLs, it was picked up automatically without me having to generate the manifest

[00:01:23.0037] <annevk>
TabAtkins: I have now updated the manifest as well, but that makes it seem redundant

[01:50:55.0658] <Noam Rosenthal>
Domenic: added https://github.com/whatwg/html/issues/9824 to track the event loop spec vs. impl differences. hoping to tackle it gradually

[01:53:18.0743] <Noam Rosenthal>
smaug: I think I said something misleading about `fetchLater` when we spoke about it a few days ago. It *is* reliable in the "renderer process is killed" scenario, as the whole logic is spec'ed to work in the network process (inside fetch, in spec terms). It's actually a main feature of `fetchLater` as opposed to sending beacons in `pagehide`.

[01:54:43.0388] <smaug>
ok, so whatever is representing a "network process" in each browser

[01:55:38.0886] <smaug>
OS can still kill those processes on mobile, no?

[01:59:26.0473] <Noam Rosenthal>
smaug: yes, but that's equivalent to killing the whole browser in a way.

[02:01:09.0518] <Noam Rosenthal>
our recommendation (it's also in the spec) is that if there are indication that the browser itself is about to lose execution rights or be killed (e.g. backgrounded on iOS) then flush those ASAP

[02:01:41.0780] <smaug>
depends on the browser.  But yes. And the point is still that we are replacing one unreliable API with another one. The new one is likely less unreliable.

[02:03:34.0746] <Noam Rosenthal>
smaug: It's as reliable as calling `fetch`, which can also not happen if the network process gets killed

[02:03:35.0334] <smaug>
and browsers could have implemented also the old API in a more reliable way, but have chosen not to

[02:04:05.0761] <Noam Rosenthal>
they couldn't. because if the renderer process is killed, you wouldn't get JS execution and `pagehide`

[02:06:09.0623] <smaug>
I didn't say the old one would be as reliable. I said they could have implemented it in a more reliable way.

[02:06:50.0378] <Noam Rosenthal>
you'd need something like "you're about to lose execution rights or be killed, please fire this event"

[02:07:04.0896] <Noam Rosenthal>
That's not a feasible premise

[02:07:52.0093] <Noam Rosenthal>
I would say that `fetchLater(url)` is a practical alternative to something like firing `pagehide` as a kill signal... note that renderer processes that get killed might have already crashed or have a hanging main thread

[02:08:44.0558] <smaug>
I haven't said fetchLater is somehow bad API 🙂 

[02:08:50.0643] <Noam Rosenthal>
if your renderer process crashed/hang, `fetchLater` would still work while I don't see how we could make `addEventListener('pagehide', () => fetch(...)` work

[02:09:01.0952] <smaug>
But we need to always think what extra complexity we want to add to the platform

[02:10:14.0574] <smaug>
per the proposal, implementation could handle fetchLater asap a page is being unloaded or moved to bfcache, right?

[02:10:41.0319] <Noam Rosenthal>
yes

[02:10:57.0478] <Noam Rosenthal>
we try to leave a lot of room for simpler implementations

[02:22:39.0023] <smaug>
What about the page becoming a background page, I mean user switches tab (or whatever similar concepts mobile has)? Ah, looks like activationTimeout is just a hint

[02:23:08.0206] <smaug>
So UA could trigger fetchLater fetches immediately also in that case

[02:23:14.0437] <Noam Rosenthal>
smaug: yes, it's "please fetch this, no later than `activationTimeout` if posslbe"

[02:24:13.0175] <smaug>
I wonder if that property should have "hint" in its name, or perhaps deadline or some such, just to give the impression that it isn't by no means accurate 

[02:24:36.0787] <Noam Rosenthal>
I'm fine with calling it deadline

[02:30:13.0969] <Noam Rosenthal>
(by "fine with" I mean I agree that it tells a more accurate story)

[02:32:56.0411] <smaug>
Noam Rosenthal: so there is no way to track which fetches have been processed?

[02:35:45.0097] <Noam Rosenthal>
smaug: sure, the return value of `fetchLater` has an `activated` boolean

[02:36:08.0309] <smaug>
how does that tell it?

[02:36:21.0127] <smaug>
oh, I see

[02:37:09.0557] <Noam Rosenthal>
yea when the fetch is activated the network process also posts a task on the document to flip the flag

[02:37:18.0327] <Noam Rosenthal>
... if the document is still around

[04:02:53.0331] <annevk>
Jeffrey Yasskin: thanks, that indeed seems to work well!

[04:32:54.0772] <canadahonk>
Was `MessageEvent.userActivation` ever added to the HTML spec, afaict only the navigator interface was? (ref https://github.com/whatwg/html/pull/8254)

[04:34:58.0128] <annevk>
canadahonk: I don't think it was, nor was that proposal ever finalized afaik

[04:36:29.0108] <canadahonk>
What would be needed to get it in the spec? (Chrome has been shipping since 2018)

[04:43:27.0609] <annevk>
canadahonk: a specification with a design that has agreement?

[04:44:03.0818] <annevk>
canadahonk: I haven't looked at this recently, but I believe this feature has a repository with a number of outstanding issues

[04:44:19.0912] <canadahonk>
Yeah https://github.com/dtapuska/useractivation

[04:46:29.0843] <canadahonk>
fwiw I'll probably leave it as it doesn't look like it even has a positive consesus

[04:47:11.0575] <annevk>
canadahonk: yeah I think that proposal was superseded by https://github.com/WICG/capability-delegation but then they never completed that new one

[05:56:31.0325] <annevk>
smaug: when you say something isn't a "UI event", what do you mean by that? Not sure why `scroll` and `resize` are not it. Because they don't use `UIEvent` or some such?

[05:57:09.0882] <smaug>
Those aren't any sort of input events, triggered by the user

[05:57:31.0742] <smaug>
They are just plain normal Events, dispatched when either scrolling or resizing has happened

[05:58:54.0198] <annevk>
smaug: is that because there's some more fundamental event that ultimately caused the scrolling to happen, such as keyboard or mouse input? Would that make click not a UI event either?

[05:59:23.0321] <smaug>
Click isn't user input, no.

[05:59:57.0420] <smaug>
click is normally the "default action" after user has done mousedown and mouseup

[06:00:07.0755] <smaug>
click is synchronous

[06:01:42.0468] <annevk>
Right, I think we still want to define it in relation to those other events precisely because of that, but they might be simpler as they're more of a side effect

[06:02:58.0964] <smaug>
defining when mousedown and up fire would naturally define when click fires (assuming we think about pointer triggered click).  Similarly to keyboard triggered click.

[06:03:43.0442] <smaug>
But the scheduling part is mostly about *down/*move/*up

[06:04:16.0984] <smaug>
Browsers have some scheduling for those, but it is still unclear what is the best in which situations

[06:09:12.0477] <smaug>
we could start by making rendering step its own task, given that all the browsers do that

[06:27:50.0358] <annevk>
Thanks, makes sense to me

[06:38:12.0559] <Noam Rosenthal>
I checked webkit code and it's not exactly a task there, in the `EventLoop` sense from what I could tell

[07:11:02.0528] <smaug>
ah. I based my comment on what was discussed during tpac

[07:18:45.0924] <Noam Rosenthal>
I could be wrong, my webkit foo is a bit out of date

[07:18:58.0051] <Noam Rosenthal>
but I would suggest to double check

[07:59:01.0522] <annevk>
I wouldn't focus too much on the exact code, only on observable differences. We need script to run in the context of a task as otherwise a number of things seem to break down, so we should move "update the rendering" to that model. That it also makes the event loop more readable is a nice bonus.

[08:50:51.0878] <TabAtkins>
> <@annevk:matrix.org> TabAtkins: not sure if this is a problem, but when I updated WHATWG's bikeshed boilerplate for a change in new issue URLs, it was picked up automatically without me having to generate the manifest

Huh, it's definitely not redundant - I've forgotten to update the manifest before and *not* had changes picked up. (Plus that's just how it's specified - it checks against the manifest to see what it needs to download.) 

[08:52:40.0352] <TabAtkins>
Oh tho, hm, it's been a while since I updated the built-in data; it predates the slight change to manifest format. I wonder if it's just noticing that the local manifest is borked and downloading everything (and the fact that the has was wrong on the remote manifest didn't matter, so long as the file is in there).

[08:52:45.0736] <TabAtkins>
 * Oh tho, hm, it's been a while since I updated the built-in data; it predates the slight change to manifest format. I wonder if it's just noticing that the local manifest is borked and downloading everything (and the fact that the hash was wrong on the remote manifest didn't matter, so long as the file is in there).

[09:03:50.0994] <Noam Rosenthal>
annevk: curious what breaks by not having a current task apart from microtasks?


2023-10-03
[23:01:53.0297] <annevk>
Noam Rosenthal: "prepare to run script"

[23:09:58.0409] <Noam Rosenthal>
oh yea I see. thanks!

[04:15:14.0698] <Noam Rosenthal>
annevk: following up on your `fetchLater` comments, I don't know how to go about the thing about potentially trustworthy URLs

[04:16:01.0249] <Noam Rosenthal>
annevk: I can't handle it in the network layer, as the error has to be thrown synchronously. What I want to do here is allow HTTPS+localhost-ish URLs for `fetchLater` but nothing else... is that not possible to do synchronously? I didn't get why this was related to mixed content

[05:35:45.0144] <annevk>
Noam Rosenthal: okay, disregard that comment in that case; that's not quite the same as a Mixed Content check

[05:36:17.0034] <annevk>
I wish we had a better term than "potentially trustworthy"

[05:38:18.0015] <Noam Rosenthal>
"secure or local"

[05:46:51.0620] <Noam Rosenthal>
annevk: great. so I think everything else is fixed. Regarding the parameter name: `activationTimeout` seems like the wrong term, and it's pretty flexible to. be an `activationDeadline`. How about `activationDelay`?

[05:52:23.0654] <annevk>
Noam Rosenthal: I can take a look tomorrow, it's a holiday here. A comment explaining why it's wrong and what the alternatives could be would help.

[05:55:20.0529] <Noam Rosenthal>
annevk: will do, enjoy the holiday, thanks for checking in.

[07:17:51.0506] <canadahonk>
Hey all, how are siblings defined in the processing model for user activation? The spec (https://html.spec.whatwg.org/multipage/interaction.html#user-activation-processing-model) says:
> 3. Extend windows with the active window of each of document's ancestor navigables.
> 4. Extend windows with the active window of each of document's descendant navigables, filtered to include only those navigables whose active document's origin is same origin with document's origin.

[07:18:47.0879] <canadahonk>
eg a frame tree like
```
- top
  - iframe 1
  - iframe 2 (sibling to iframe 1)
```

[07:20:27.0816] <canadahonk>
interacting with iframe 1, should it set the ancestor (top), and in impl that itself sets all of it's descendants (iframe 2 etc)?

[07:58:57.0726] <canadahonk>
(also it doesn't include document's own/current window?)


2023-10-04
[20:55:35.0050] <Domenic>
I don't understand the question, sorry... The spec text you quote does not involve the word "sibling", and I can't understand your followup question after you gave the frame tree.

[20:56:14.0692] <Domenic>
I am curious what exact term in the existing specification you don't understand?

[20:57:30.0944] <Domenic>
Like if you implement the spec's algorithms as-written (in a small standalone code, e.g. a JS snippet) where do you get stuck?

[02:17:11.0465] <canadahonk>
> <@domenicdenicola:matrix.org> I don't understand the question, sorry... The spec text you quote does not involve the word "sibling", and I can't understand your followup question after you gave the frame tree.

I meant that it doesn't specify what to do with siblings or itself at all as far as I can tell? And WPTs expect it to set in siblings as well I think

[02:17:21.0030] <canadahonk>
* In reply to @domenicdenicola:matrix.org
I don't understand the question, sorry... The spec text you quote does not involve the word "sibling", and I can't understand your followup question after you gave the frame tree.

I meant that it doesn't specify what to do with siblings at all as far as I can tell? And WPTs expect it to set in siblings as well I think

[02:17:42.0577] <canadahonk>
it does specify itself as windows starts with it's at the beginning*

[02:17:50.0842] <canadahonk>
* it does specify itself as windows starts with it's own the beginning*

[02:21:16.0928] <annevk>
canadahonk: per the spec those tests would be wrong

[02:23:08.0678] <annevk>
canadahonk: if the tests are correct, it might make more sense to track clicks on the agent directly in some kind of origin -> activation timestamp map

[02:32:01.0161] <canadahonk>
> <@canada_goose:mozilla.org> eg a frame tree like
> ```
> - top
>   - iframe 1
>   - iframe 2 (sibling to iframe 1)
> ```

would you expect the 2nd iframe to get set if you clicked the 1st from your interpretation of the spec?

[02:32:25.0745] <canadahonk>
* In reply to Domenic
I don't understand the question, sorry... The spec text you quote does not involve the word "sibling", and I can't understand your followup question after you gave the frame tree.

I meant that it doesn't specify what to do with siblings at all as far as I can tell? And WPTs expect it to set in siblings as well I think


[02:32:44.0445] <canadahonk>
* In reply to Domenic
I don't understand the question, sorry... The spec text you quote does not involve the word "sibling", and I can't understand your followup question after you gave the frame tree.


I meant that it doesn't specify what to do with siblings at all as far as I can tell? And WPTs expect it to set in siblings as well I think


[02:36:15.0300] <annevk>
canadahonk: no

[02:39:04.0053] <annevk>
canadahonk: I vaguely recall bringing this up at one point and people said this was intentional; would require some checking; but if it's not what's implemented and tested that's all kinda moot

[02:39:16.0372] <canadahonk>
that's what a WPT expects so :/ (guessing chrome does this too then as it's from them)

[02:41:23.0325] <annevk>
canadahonk: file an issue? And maybe find the original commit/PR as a bonus?

[02:42:34.0960] <canadahonk>
yeah I meant more is it a spec bug or a wpt bug

[02:43:19.0620] <canadahonk>
* yeah I was asking if it is a spec bug or a wpt bug

[02:47:00.0379] <annevk>
canadahonk: if implementations follow WPT, it doesn't really matter and should be raised at the spec level

[03:37:51.0428] <canadahonk>
filed https://github.com/whatwg/html/issues/9831 for reference

[04:13:01.0309] <annevk>
Hmm, for both `<input type=url>` and `<input type=email>` we don't attempt to canonicalize the input at all, it seems, across browsers

[04:13:27.0456] <annevk>
That strikes me as the wrong thing to do

[05:23:09.0048] <annevk>
I wonder if emilio or jarhar have thoughts on that. As an example, if you enter `https://example.org/?q=🏳️‍🌈` as a URL, that is what gets submitted, not `https://example.org/?q=%F0%9F%8F%B3%EF%B8%8F%E2%80%8D%F0%9F%8C%88` (which is what parsing and serializing would return)

[05:23:45.0708] <annevk>
It's not entirely broken, but it's very much reliant on the fact that the server uses the same email/URL parser

[05:39:33.0204] <annevk>
It does seem like we have a number of ways we could use to make the display value and actual value diverge, like the modes of the `value` IDL attribute

[07:39:27.0933] <annevk>
emilio: jarhar: made it a bit more concrete in https://github.com/whatwg/html/issues/4562#issuecomment-1747014388

[10:12:42.0287] <jarhar>
i dont have really strong opinions on this. i can try to implement and ship what you think is best but if it breaks lots of websites then ill have to reconsider

[10:55:56.0606] <annevk>
jarhar: that's a very kind offer, let's see what the i18n experts have to say (particularly hoping for a reply from Addison) and take it from there

[10:59:22.0891] <annevk>
jarhar: for IP addresses I guess I should look at that more carefully, I saw some comment that even IPv4 email addresses required some kind of [ ] escaping which I don't think browsers handle, but maybe that was just wrong

[11:09:14.0897] <bkardell>
annevk: "Also, it's written by Frédéric Wang as well."

Can you explain what you mean by this?

[11:14:57.0957] <bkardell>
ah probably you mean way further down the preview shows, the authors

[12:47:46.0854] <1ln9>
heya 'yall. :)


2023-10-05
[23:42:54.0816] <annevk>
bkardell: I think you only have to scroll to the right?

[01:02:41.0167] <annevk>
Noam Rosenthal: are you joining WHATNOT?

[01:05:49.0470] <keithamus>
I'm trying to join WHATNOT but its saying someone needs to let me in

[01:07:24.0331] <keithamus>
annevk: are you in?

[01:09:32.0152] <keithamus>
Panos Astithas: ^

[01:23:25.0430] <zcorpan>
keithamus: I invited you, try again?

[01:23:49.0643] <Noam Rosenthal>
> <@annevk:matrix.org> Noam Rosenthal: are you joining WHATNOT?

Not today, public holiday here…

[01:24:20.0293] <keithamus>
Perhaps because I'm using a different email address? I'm using username @ gmail

[01:24:44.0147] <keithamus>
I can switch to my github one though

[01:25:04.0060] <zcorpan>
keithamus: I invited gmail address now instead

[01:25:16.0747] <keithamus>
Thanks!

[02:05:06.0468] <annevk>
keithamus: in https://github.com/whatwg/html/pull/9834 you still need to flip the order of the first two columns

[02:05:28.0600] <keithamus>
doing so right now 😅

[03:16:57.0648] <keithamus>
> <@annevk:matrix.org> keithamus: in https://github.com/whatwg/html/pull/9834 you still need to flip the order of the first two columns

I think this is good now? Thanks for your patience 🙇

[05:45:01.0892] <sideshowbarker>
annevk: About https://bugs.webkit.org/show_bug.cgi?id=262635 if think the change in https://github.com/WebKit/WebKit/pull/18689 should actually be made — so that we can interop on this — then I can add some WPT tests to the PR (and export them after the PR is reviewed). And I guess I could could also write a spec patch for https://fetch.spec.whatwg.org/#dom-body-formdata to explicitly state that the `Content-Disposition` and `Content-Type` headers names must be parsed case-insensitively

[05:45:10.0945] <sideshowbarker>
 * annevk: About https://bugs.webkit.org/show\_bug.cgi?id=262635 if you think the change in https://github.com/WebKit/WebKit/pull/18689 should actually be made — so that we can interop on this — then I can add some WPT tests to the PR (and export them after the PR is reviewed). And I guess I could could also write a spec patch for https://fetch.spec.whatwg.org/#dom-body-formdata to explicitly state that the `Content-Disposition` and `Content-Type` headers names must be parsed case-insensitively

[06:03:05.0313] <sideshowbarker>
* annevk: About https://bugs.webkit.org/show_bug.cgi?id=262635 if you think the change in https://github.com/WebKit/WebKit/pull/18689 should actually be made — so that we can have interop on this — then I can add some WPT tests to the PR (and export them after the PR is reviewed). And I guess I could could also write a spec patch for https://fetch.spec.whatwg.org/#dom-body-formdata to explicitly state that the Content-Disposition and Content-Type headers names must be parsed case-insensitively

[06:21:13.0807] <annevk>
sideshowbarker: I guess that makes sense for a multipart/form-data payload

[06:21:20.0515] <annevk>
sideshowbarker: there's https://github.com/web-platform-tests/wpt/issues/40946

[06:22:04.0259] <annevk>
sideshowbarker: https://andreubotella.github.io/multipart-form-data/#multipart-form-data-parser has a WIP parser

[06:22:21.0039] <Andreu Botella>
very much WIP

[06:22:38.0650] <annevk>
It does seem to handle case-insensitivity of headers correctly, so there's that

[06:27:04.0810] <annevk>
sideshowbarker: also did a non-reviewer review of your WebKit PR

[07:00:16.0328] <sideshowbarker>
> <@abotella:igalia.com> very much WIP

Ah yeah I remember now you'd written that up

[07:31:45.0021] <annevk>
jarhar: so Chromium might be alone in having something close to what the spec suggests for type=email, accepting IDN and converting to Punycode, I agree with you that preserving that seems good

[07:32:35.0107] <annevk>
jarhar: in terms of supporting IP addresses things are somewhat bad, I guess mainly due to the impl being in terms of a regexp

[07:33:10.0416] <annevk>
jarhar: like yes, some IPv4 stuff works, but IPv6 does not at all; and invalid IPv4 works too and is considered valid

[07:39:29.0286] <annevk>
jarhar: although there's a weird aspect in that the normalization doesn't happen when the value is set through script

[08:16:11.0568] <Jeremy Roman>
Data URLs are weird. In `data:text/html,Hello?world`, the pathname is `text/html,Hello` and the search is `?world`, but the response body is `Hello?world`

[08:17:01.0232] <Jeremy Roman>
(There may well be no way to avoid the hilarity that is how this interacts with URL patterns.)

[08:17:24.0725] <annevk>
Jeremy Roman: Chromium used to make `#blah` part of the body too

[08:18:23.0876] <annevk>
And that should still happen for `javascript:` URLs I think

[08:23:44.0926] <Jeffrey Yasskin>
Many non-hierarchical URL schemes are going to have weird semantics. If their semantics were non-weird, they'd be hierarchical. Definitely don't look at the semantics of https://w3c-ccg.github.io/did-resolution/#dereferencing-algorithm if you want to avoid weirdness. 😈

[09:21:32.0482] <jarhar>
> <@annevk:matrix.org> jarhar: in terms of supporting IP addresses things are somewhat bad, I guess mainly due to the impl being in terms of a regexp

do you think we should support ip addresses? if not, i hope nobody is relying on this

[09:26:46.0304] <annevk>
jarhar: judging on the latest in the thread, I don't think the way we do IP addresses in `<input type=email>` actually work in practice?

[09:27:30.0710] <annevk>
jarhar: as in, we don't reject `s@123.123.123.123` currently, but if you actually wanted that you'd have to write `s@[123.123.123.123]` which we do reject


2023-10-06
[18:58:24.0718] <jarhar>
annevk Domenic i am thinking about multi-select for selectlist (i dont plan on formally proposing this for a very long time), and im wondering if it should have a multiple attribute or a have a distinct tag name. i kind of like having a separate tag name more because then we dont have to handle changes between the single and multiple, but what do yall think? were <select multiple> and <input type> bad ideas?

[18:58:50.0015] <jarhar>
* annevk Domenic i am thinking about multi-select for selectlist (i dont plan on formally proposing this for a very long time), and im wondering if it should have a multiple attribute or a have a distinct tag name. i kind of like having a separate tag name more because then we dont have to handle changes between the single and multiple states, but what do yall think? were and bad ideas?

[18:59:09.0844] <jarhar>
* annevk Domenic i am thinking about multi-select for selectlist (i dont plan on formally proposing this for a very long time), and im wondering if it should have a multiple attribute or a have a distinct tag name. i kind of like having a separate tag name more because then we dont have to handle changes between the single and multiple states, but what do yall think? were "select multiple" and "input type" bad ideas?

[19:02:00.0251] <jarhar>
this has been briefly discussed in openui but with no recent updates: https://github.com/openui/open-ui/issues/447

[20:03:05.0896] <sideshowbarker>
jarhar:

> were "select multiple" and "input type" bad ideas?

Yes, IMHO. At least from the perspective of developer ergonomics. Especially in the case of ”input type”, smuggling 20 different logical elements with different presentations/UI/behavior into one element has created very significant costs that would have been unnecessary otherwise. It's made it more difficult to document, and more difficult to do conformance checking for, more difficult to explain to  developers when they run into problems (for example, developers coming to Stack Overflow with questions, and other people trying to help answer them).

[20:04:23.0349] <sideshowbarker>
* jarhar:  were "select multiple" and "input type" bad ideas?

Yes, IMHO. At least from the perspective of developer ergonomics. Especially in the case of ”input type”, smuggling 20 different logical elements with different presentations/UI/behavior into one element has created very significant costs that would have been unnecessary otherwise. It's made it more difficult to document, and more difficult to do conformance checking for, more difficult to explain to  developers when they run into problems (for example, developers coming to Stack Overflow with questions, and other people trying to help answer them).

[20:04:43.0803] <sideshowbarker>
* jarhar:  


> were "select multiple" and "input type" bad ideas?

Yes, IMHO. At least from the perspective of developer ergonomics. Especially in the case of ”input type”, smuggling 20 different logical elements with different presentations/UI/behavior into one element has created very significant costs that would have been unnecessary otherwise. It's made it more difficult to document, and more difficult to do conformance checking for, more difficult to explain to  developers when they run into problems (for example, developers coming to Stack Overflow with questions, and other people trying to help answer them).

