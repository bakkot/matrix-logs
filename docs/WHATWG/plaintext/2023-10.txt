2023-10-01
[06:46:57.0034] <Alexander Kalenik>
hi, any chance anybody could point me at the place in navigation specification where document's url need to be updated when same-document navigation happens (for example https://html.spec.whatwg.org/multipage/browsing-the-web.html#navigate-fragid)?

[08:22:46.0187] <Alexander Kalenik>
it's actually seems like a spec bug because by the time popstate/hashchange event is fired on step 13 (update document for history step application) document's url should be updated but non of previous steps does that.

[08:48:16.0103] <Domenic>
https://html.spec.whatwg.org/multipage/browsing-the-web.html#url-and-history-update-steps step 8 does it for popstate/hashchange/navigation API intercept

[08:48:33.0621] <Domenic>
Did we somehow mess it up for fragment navigation?

[08:52:47.0019] <Domenic>
Please file an issue


2023-10-02
[00:00:50.0505] <annevk>
TabAtkins: not sure if this is a problem, but when I updated WHATWG's bikeshed boilerplate for a change in new issue URLs, it was picked up automatically without me having to generate the manifest

[00:01:23.0037] <annevk>
TabAtkins: I have now updated the manifest as well, but that makes it seem redundant

[01:50:55.0658] <Noam Rosenthal>
Domenic: added https://github.com/whatwg/html/issues/9824 to track the event loop spec vs. impl differences. hoping to tackle it gradually

[01:53:18.0743] <Noam Rosenthal>
smaug: I think I said something misleading about `fetchLater` when we spoke about it a few days ago. It *is* reliable in the "renderer process is killed" scenario, as the whole logic is spec'ed to work in the network process (inside fetch, in spec terms). It's actually a main feature of `fetchLater` as opposed to sending beacons in `pagehide`.

[01:54:43.0388] <smaug>
ok, so whatever is representing a "network process" in each browser

[01:55:38.0886] <smaug>
OS can still kill those processes on mobile, no?

[01:59:26.0473] <Noam Rosenthal>
smaug: yes, but that's equivalent to killing the whole browser in a way.

[02:01:09.0518] <Noam Rosenthal>
our recommendation (it's also in the spec) is that if there are indication that the browser itself is about to lose execution rights or be killed (e.g. backgrounded on iOS) then flush those ASAP

[02:01:41.0780] <smaug>
depends on the browser.  But yes. And the point is still that we are replacing one unreliable API with another one. The new one is likely less unreliable.

[02:03:34.0746] <Noam Rosenthal>
smaug: It's as reliable as calling `fetch`, which can also not happen if the network process gets killed

[02:03:35.0334] <smaug>
and browsers could have implemented also the old API in a more reliable way, but have chosen not to

[02:04:05.0761] <Noam Rosenthal>
they couldn't. because if the renderer process is killed, you wouldn't get JS execution and `pagehide`

[02:06:09.0623] <smaug>
I didn't say the old one would be as reliable. I said they could have implemented it in a more reliable way.

[02:06:50.0378] <Noam Rosenthal>
you'd need something like "you're about to lose execution rights or be killed, please fire this event"

[02:07:04.0896] <Noam Rosenthal>
That's not a feasible premise

[02:07:52.0093] <Noam Rosenthal>
I would say that `fetchLater(url)` is a practical alternative to something like firing `pagehide` as a kill signal... note that renderer processes that get killed might have already crashed or have a hanging main thread

[02:08:44.0558] <smaug>
I haven't said fetchLater is somehow bad API 🙂 

[02:08:50.0643] <Noam Rosenthal>
if your renderer process crashed/hang, `fetchLater` would still work while I don't see how we could make `addEventListener('pagehide', () => fetch(...)` work

[02:09:01.0952] <smaug>
But we need to always think what extra complexity we want to add to the platform

[02:10:14.0574] <smaug>
per the proposal, implementation could handle fetchLater asap a page is being unloaded or moved to bfcache, right?

[02:10:41.0319] <Noam Rosenthal>
yes

[02:10:57.0478] <Noam Rosenthal>
we try to leave a lot of room for simpler implementations

[02:22:39.0023] <smaug>
What about the page becoming a background page, I mean user switches tab (or whatever similar concepts mobile has)? Ah, looks like activationTimeout is just a hint

[02:23:08.0206] <smaug>
So UA could trigger fetchLater fetches immediately also in that case

[02:23:14.0437] <Noam Rosenthal>
smaug: yes, it's "please fetch this, no later than `activationTimeout` if posslbe"

[02:24:13.0175] <smaug>
I wonder if that property should have "hint" in its name, or perhaps deadline or some such, just to give the impression that it isn't by no means accurate 

[02:24:36.0787] <Noam Rosenthal>
I'm fine with calling it deadline

[02:30:13.0969] <Noam Rosenthal>
(by "fine with" I mean I agree that it tells a more accurate story)

[02:32:56.0411] <smaug>
Noam Rosenthal: so there is no way to track which fetches have been processed?

[02:35:45.0097] <Noam Rosenthal>
smaug: sure, the return value of `fetchLater` has an `activated` boolean

[02:36:08.0309] <smaug>
how does that tell it?

[02:36:21.0127] <smaug>
oh, I see

[02:37:09.0557] <Noam Rosenthal>
yea when the fetch is activated the network process also posts a task on the document to flip the flag

[02:37:18.0327] <Noam Rosenthal>
... if the document is still around

[04:02:53.0331] <annevk>
Jeffrey Yasskin: thanks, that indeed seems to work well!

[04:32:54.0772] <canadahonk>
Was `MessageEvent.userActivation` ever added to the HTML spec, afaict only the navigator interface was? (ref https://github.com/whatwg/html/pull/8254)

[04:34:58.0128] <annevk>
canadahonk: I don't think it was, nor was that proposal ever finalized afaik

[04:36:29.0108] <canadahonk>
What would be needed to get it in the spec? (Chrome has been shipping since 2018)

[04:43:27.0609] <annevk>
canadahonk: a specification with a design that has agreement?

[04:44:03.0818] <annevk>
canadahonk: I haven't looked at this recently, but I believe this feature has a repository with a number of outstanding issues

[04:44:19.0912] <canadahonk>
Yeah https://github.com/dtapuska/useractivation

[04:46:29.0843] <canadahonk>
fwiw I'll probably leave it as it doesn't look like it even has a positive consesus

[04:47:11.0575] <annevk>
canadahonk: yeah I think that proposal was superseded by https://github.com/WICG/capability-delegation but then they never completed that new one

[05:56:31.0325] <annevk>
smaug: when you say something isn't a "UI event", what do you mean by that? Not sure why `scroll` and `resize` are not it. Because they don't use `UIEvent` or some such?

[05:57:09.0882] <smaug>
Those aren't any sort of input events, triggered by the user

[05:57:31.0742] <smaug>
They are just plain normal Events, dispatched when either scrolling or resizing has happened

[05:58:54.0198] <annevk>
smaug: is that because there's some more fundamental event that ultimately caused the scrolling to happen, such as keyboard or mouse input? Would that make click not a UI event either?

[05:59:23.0321] <smaug>
Click isn't user input, no.

[05:59:57.0420] <smaug>
click is normally the "default action" after user has done mousedown and mouseup

[06:00:07.0755] <smaug>
click is synchronous

[06:01:42.0468] <annevk>
Right, I think we still want to define it in relation to those other events precisely because of that, but they might be simpler as they're more of a side effect

[06:02:58.0964] <smaug>
defining when mousedown and up fire would naturally define when click fires (assuming we think about pointer triggered click).  Similarly to keyboard triggered click.

[06:03:43.0442] <smaug>
But the scheduling part is mostly about *down/*move/*up

[06:04:16.0984] <smaug>
Browsers have some scheduling for those, but it is still unclear what is the best in which situations

[06:09:12.0477] <smaug>
we could start by making rendering step its own task, given that all the browsers do that

[06:27:50.0358] <annevk>
Thanks, makes sense to me

[06:38:12.0559] <Noam Rosenthal>
I checked webkit code and it's not exactly a task there, in the `EventLoop` sense from what I could tell

[07:11:02.0528] <smaug>
ah. I based my comment on what was discussed during tpac

[07:18:45.0924] <Noam Rosenthal>
I could be wrong, my webkit foo is a bit out of date

[07:18:58.0051] <Noam Rosenthal>
but I would suggest to double check

[07:59:01.0522] <annevk>
I wouldn't focus too much on the exact code, only on observable differences. We need script to run in the context of a task as otherwise a number of things seem to break down, so we should move "update the rendering" to that model. That it also makes the event loop more readable is a nice bonus.

[08:50:51.0878] <TabAtkins>
> <@annevk:matrix.org> TabAtkins: not sure if this is a problem, but when I updated WHATWG's bikeshed boilerplate for a change in new issue URLs, it was picked up automatically without me having to generate the manifest

Huh, it's definitely not redundant - I've forgotten to update the manifest before and *not* had changes picked up. (Plus that's just how it's specified - it checks against the manifest to see what it needs to download.) 

[08:52:40.0352] <TabAtkins>
Oh tho, hm, it's been a while since I updated the built-in data; it predates the slight change to manifest format. I wonder if it's just noticing that the local manifest is borked and downloading everything (and the fact that the has was wrong on the remote manifest didn't matter, so long as the file is in there).

[08:52:45.0736] <TabAtkins>
 * Oh tho, hm, it's been a while since I updated the built-in data; it predates the slight change to manifest format. I wonder if it's just noticing that the local manifest is borked and downloading everything (and the fact that the hash was wrong on the remote manifest didn't matter, so long as the file is in there).

[09:03:50.0994] <Noam Rosenthal>
annevk: curious what breaks by not having a current task apart from microtasks?


2023-10-03
[23:01:53.0297] <annevk>
Noam Rosenthal: "prepare to run script"

[23:09:58.0409] <Noam Rosenthal>
oh yea I see. thanks!

[04:15:14.0698] <Noam Rosenthal>
annevk: following up on your `fetchLater` comments, I don't know how to go about the thing about potentially trustworthy URLs

[04:16:01.0249] <Noam Rosenthal>
annevk: I can't handle it in the network layer, as the error has to be thrown synchronously. What I want to do here is allow HTTPS+localhost-ish URLs for `fetchLater` but nothing else... is that not possible to do synchronously? I didn't get why this was related to mixed content

[05:35:45.0144] <annevk>
Noam Rosenthal: okay, disregard that comment in that case; that's not quite the same as a Mixed Content check

[05:36:17.0034] <annevk>
I wish we had a better term than "potentially trustworthy"

[05:38:18.0015] <Noam Rosenthal>
"secure or local"

[05:46:51.0620] <Noam Rosenthal>
annevk: great. so I think everything else is fixed. Regarding the parameter name: `activationTimeout` seems like the wrong term, and it's pretty flexible to. be an `activationDeadline`. How about `activationDelay`?

[05:52:23.0654] <annevk>
Noam Rosenthal: I can take a look tomorrow, it's a holiday here. A comment explaining why it's wrong and what the alternatives could be would help.

[05:55:20.0529] <Noam Rosenthal>
annevk: will do, enjoy the holiday, thanks for checking in.

[07:17:51.0506] <canadahonk>
Hey all, how are siblings defined in the processing model for user activation? The spec (https://html.spec.whatwg.org/multipage/interaction.html#user-activation-processing-model) says:
> 3. Extend windows with the active window of each of document's ancestor navigables.
> 4. Extend windows with the active window of each of document's descendant navigables, filtered to include only those navigables whose active document's origin is same origin with document's origin.

[07:18:47.0879] <canadahonk>
eg a frame tree like
```
- top
  - iframe 1
  - iframe 2 (sibling to iframe 1)
```

[07:20:27.0816] <canadahonk>
interacting with iframe 1, should it set the ancestor (top), and in impl that itself sets all of it's descendants (iframe 2 etc)?

[07:58:57.0726] <canadahonk>
(also it doesn't include document's own/current window?)


2023-10-04
[20:55:35.0050] <Domenic>
I don't understand the question, sorry... The spec text you quote does not involve the word "sibling", and I can't understand your followup question after you gave the frame tree.

[20:56:14.0692] <Domenic>
I am curious what exact term in the existing specification you don't understand?

[20:57:30.0944] <Domenic>
Like if you implement the spec's algorithms as-written (in a small standalone code, e.g. a JS snippet) where do you get stuck?

[02:17:11.0465] <canadahonk>
> <@domenicdenicola:matrix.org> I don't understand the question, sorry... The spec text you quote does not involve the word "sibling", and I can't understand your followup question after you gave the frame tree.

I meant that it doesn't specify what to do with siblings or itself at all as far as I can tell? And WPTs expect it to set in siblings as well I think

[02:17:21.0030] <canadahonk>
* In reply to @domenicdenicola:matrix.org
I don't understand the question, sorry... The spec text you quote does not involve the word "sibling", and I can't understand your followup question after you gave the frame tree.

I meant that it doesn't specify what to do with siblings at all as far as I can tell? And WPTs expect it to set in siblings as well I think

[02:17:42.0577] <canadahonk>
it does specify itself as windows starts with it's at the beginning*

[02:17:50.0842] <canadahonk>
* it does specify itself as windows starts with it's own the beginning*

[02:21:16.0928] <annevk>
canadahonk: per the spec those tests would be wrong

[02:23:08.0678] <annevk>
canadahonk: if the tests are correct, it might make more sense to track clicks on the agent directly in some kind of origin -> activation timestamp map

[02:32:01.0161] <canadahonk>
> <@canada_goose:mozilla.org> eg a frame tree like
> ```
> - top
>   - iframe 1
>   - iframe 2 (sibling to iframe 1)
> ```

would you expect the 2nd iframe to get set if you clicked the 1st from your interpretation of the spec?

[02:32:25.0745] <canadahonk>
* In reply to Domenic
I don't understand the question, sorry... The spec text you quote does not involve the word "sibling", and I can't understand your followup question after you gave the frame tree.

I meant that it doesn't specify what to do with siblings at all as far as I can tell? And WPTs expect it to set in siblings as well I think


[02:32:44.0445] <canadahonk>
* In reply to Domenic
I don't understand the question, sorry... The spec text you quote does not involve the word "sibling", and I can't understand your followup question after you gave the frame tree.


I meant that it doesn't specify what to do with siblings at all as far as I can tell? And WPTs expect it to set in siblings as well I think


[02:36:15.0300] <annevk>
canadahonk: no

[02:39:04.0053] <annevk>
canadahonk: I vaguely recall bringing this up at one point and people said this was intentional; would require some checking; but if it's not what's implemented and tested that's all kinda moot

[02:39:16.0372] <canadahonk>
that's what a WPT expects so :/ (guessing chrome does this too then as it's from them)

[02:41:23.0325] <annevk>
canadahonk: file an issue? And maybe find the original commit/PR as a bonus?

[02:42:34.0960] <canadahonk>
yeah I meant more is it a spec bug or a wpt bug

[02:43:19.0620] <canadahonk>
* yeah I was asking if it is a spec bug or a wpt bug

[02:47:00.0379] <annevk>
canadahonk: if implementations follow WPT, it doesn't really matter and should be raised at the spec level

[03:37:51.0428] <canadahonk>
filed https://github.com/whatwg/html/issues/9831 for reference

[04:13:01.0309] <annevk>
Hmm, for both `<input type=url>` and `<input type=email>` we don't attempt to canonicalize the input at all, it seems, across browsers

[04:13:27.0456] <annevk>
That strikes me as the wrong thing to do

[05:23:09.0048] <annevk>
I wonder if emilio or jarhar have thoughts on that. As an example, if you enter `https://example.org/?q=🏳️‍🌈` as a URL, that is what gets submitted, not `https://example.org/?q=%F0%9F%8F%B3%EF%B8%8F%E2%80%8D%F0%9F%8C%88` (which is what parsing and serializing would return)

[05:23:45.0708] <annevk>
It's not entirely broken, but it's very much reliant on the fact that the server uses the same email/URL parser

[05:39:33.0204] <annevk>
It does seem like we have a number of ways we could use to make the display value and actual value diverge, like the modes of the `value` IDL attribute

[07:39:27.0933] <annevk>
emilio: jarhar: made it a bit more concrete in https://github.com/whatwg/html/issues/4562#issuecomment-1747014388

[10:12:42.0287] <jarhar>
i dont have really strong opinions on this. i can try to implement and ship what you think is best but if it breaks lots of websites then ill have to reconsider

[10:55:56.0606] <annevk>
jarhar: that's a very kind offer, let's see what the i18n experts have to say (particularly hoping for a reply from Addison) and take it from there

[10:59:22.0891] <annevk>
jarhar: for IP addresses I guess I should look at that more carefully, I saw some comment that even IPv4 email addresses required some kind of [ ] escaping which I don't think browsers handle, but maybe that was just wrong

[11:09:14.0897] <bkardell>
annevk: "Also, it's written by Frédéric Wang as well."

Can you explain what you mean by this?

[11:14:57.0957] <bkardell>
ah probably you mean way further down the preview shows, the authors

[12:47:46.0854] <1ln9>
heya 'yall. :)


2023-10-05
[23:42:54.0816] <annevk>
bkardell: I think you only have to scroll to the right?

[01:02:41.0167] <annevk>
Noam Rosenthal: are you joining WHATNOT?

[01:05:49.0470] <keithamus>
I'm trying to join WHATNOT but its saying someone needs to let me in

[01:07:24.0331] <keithamus>
annevk: are you in?

[01:09:32.0152] <keithamus>
Panos Astithas: ^

[01:23:25.0430] <zcorpan>
keithamus: I invited you, try again?

[01:23:49.0643] <Noam Rosenthal>
> <@annevk:matrix.org> Noam Rosenthal: are you joining WHATNOT?

Not today, public holiday here…

[01:24:20.0293] <keithamus>
Perhaps because I'm using a different email address? I'm using username @ gmail

[01:24:44.0147] <keithamus>
I can switch to my github one though

[01:25:04.0060] <zcorpan>
keithamus: I invited gmail address now instead

[01:25:16.0747] <keithamus>
Thanks!

[02:05:06.0468] <annevk>
keithamus: in https://github.com/whatwg/html/pull/9834 you still need to flip the order of the first two columns

[02:05:28.0600] <keithamus>
doing so right now 😅

[03:16:57.0648] <keithamus>
> <@annevk:matrix.org> keithamus: in https://github.com/whatwg/html/pull/9834 you still need to flip the order of the first two columns

I think this is good now? Thanks for your patience 🙇

[05:45:01.0892] <sideshowbarker>
annevk: About https://bugs.webkit.org/show_bug.cgi?id=262635 if think the change in https://github.com/WebKit/WebKit/pull/18689 should actually be made — so that we can interop on this — then I can add some WPT tests to the PR (and export them after the PR is reviewed). And I guess I could could also write a spec patch for https://fetch.spec.whatwg.org/#dom-body-formdata to explicitly state that the `Content-Disposition` and `Content-Type` headers names must be parsed case-insensitively

[05:45:10.0945] <sideshowbarker>
 * annevk: About https://bugs.webkit.org/show\_bug.cgi?id=262635 if you think the change in https://github.com/WebKit/WebKit/pull/18689 should actually be made — so that we can interop on this — then I can add some WPT tests to the PR (and export them after the PR is reviewed). And I guess I could could also write a spec patch for https://fetch.spec.whatwg.org/#dom-body-formdata to explicitly state that the `Content-Disposition` and `Content-Type` headers names must be parsed case-insensitively

[06:03:05.0313] <sideshowbarker>
* annevk: About https://bugs.webkit.org/show_bug.cgi?id=262635 if you think the change in https://github.com/WebKit/WebKit/pull/18689 should actually be made — so that we can have interop on this — then I can add some WPT tests to the PR (and export them after the PR is reviewed). And I guess I could could also write a spec patch for https://fetch.spec.whatwg.org/#dom-body-formdata to explicitly state that the Content-Disposition and Content-Type headers names must be parsed case-insensitively

[06:21:13.0807] <annevk>
sideshowbarker: I guess that makes sense for a multipart/form-data payload

[06:21:20.0515] <annevk>
sideshowbarker: there's https://github.com/web-platform-tests/wpt/issues/40946

[06:22:04.0259] <annevk>
sideshowbarker: https://andreubotella.github.io/multipart-form-data/#multipart-form-data-parser has a WIP parser

[06:22:21.0039] <Andreu Botella>
very much WIP

[06:22:38.0650] <annevk>
It does seem to handle case-insensitivity of headers correctly, so there's that

[06:27:04.0810] <annevk>
sideshowbarker: also did a non-reviewer review of your WebKit PR

[07:00:16.0328] <sideshowbarker>
> <@abotella:igalia.com> very much WIP

Ah yeah I remember now you'd written that up

[07:31:45.0021] <annevk>
jarhar: so Chromium might be alone in having something close to what the spec suggests for type=email, accepting IDN and converting to Punycode, I agree with you that preserving that seems good

[07:32:35.0107] <annevk>
jarhar: in terms of supporting IP addresses things are somewhat bad, I guess mainly due to the impl being in terms of a regexp

[07:33:10.0416] <annevk>
jarhar: like yes, some IPv4 stuff works, but IPv6 does not at all; and invalid IPv4 works too and is considered valid

[07:39:29.0286] <annevk>
jarhar: although there's a weird aspect in that the normalization doesn't happen when the value is set through script

[08:16:11.0568] <Jeremy Roman>
Data URLs are weird. In `data:text/html,Hello?world`, the pathname is `text/html,Hello` and the search is `?world`, but the response body is `Hello?world`

[08:17:01.0232] <Jeremy Roman>
(There may well be no way to avoid the hilarity that is how this interacts with URL patterns.)

[08:17:24.0725] <annevk>
Jeremy Roman: Chromium used to make `#blah` part of the body too

[08:18:23.0876] <annevk>
And that should still happen for `javascript:` URLs I think

[08:23:44.0926] <Jeffrey Yasskin>
Many non-hierarchical URL schemes are going to have weird semantics. If their semantics were non-weird, they'd be hierarchical. Definitely don't look at the semantics of https://w3c-ccg.github.io/did-resolution/#dereferencing-algorithm if you want to avoid weirdness. 😈

[09:21:32.0482] <jarhar>
> <@annevk:matrix.org> jarhar: in terms of supporting IP addresses things are somewhat bad, I guess mainly due to the impl being in terms of a regexp

do you think we should support ip addresses? if not, i hope nobody is relying on this

[09:26:46.0304] <annevk>
jarhar: judging on the latest in the thread, I don't think the way we do IP addresses in `<input type=email>` actually work in practice?

[09:27:30.0710] <annevk>
jarhar: as in, we don't reject `s@123.123.123.123` currently, but if you actually wanted that you'd have to write `s@[123.123.123.123]` which we do reject


2023-10-06
[18:58:24.0718] <jarhar>
annevk Domenic i am thinking about multi-select for selectlist (i dont plan on formally proposing this for a very long time), and im wondering if it should have a multiple attribute or a have a distinct tag name. i kind of like having a separate tag name more because then we dont have to handle changes between the single and multiple, but what do yall think? were <select multiple> and <input type> bad ideas?

[18:58:50.0015] <jarhar>
* annevk Domenic i am thinking about multi-select for selectlist (i dont plan on formally proposing this for a very long time), and im wondering if it should have a multiple attribute or a have a distinct tag name. i kind of like having a separate tag name more because then we dont have to handle changes between the single and multiple states, but what do yall think? were and bad ideas?

[18:59:09.0844] <jarhar>
* annevk Domenic i am thinking about multi-select for selectlist (i dont plan on formally proposing this for a very long time), and im wondering if it should have a multiple attribute or a have a distinct tag name. i kind of like having a separate tag name more because then we dont have to handle changes between the single and multiple states, but what do yall think? were "select multiple" and "input type" bad ideas?

[19:02:00.0251] <jarhar>
this has been briefly discussed in openui but with no recent updates: https://github.com/openui/open-ui/issues/447

[20:03:05.0896] <sideshowbarker>
jarhar:

> were "select multiple" and "input type" bad ideas?

Yes, IMHO. At least from the perspective of developer ergonomics. Especially in the case of ”input type”, smuggling 20 different logical elements with different presentations/UI/behavior into one element has created very significant costs that would have been unnecessary otherwise. It's made it more difficult to document, and more difficult to do conformance checking for, more difficult to explain to  developers when they run into problems (for example, developers coming to Stack Overflow with questions, and other people trying to help answer them).

[20:04:23.0349] <sideshowbarker>
* jarhar:  were "select multiple" and "input type" bad ideas?

Yes, IMHO. At least from the perspective of developer ergonomics. Especially in the case of ”input type”, smuggling 20 different logical elements with different presentations/UI/behavior into one element has created very significant costs that would have been unnecessary otherwise. It's made it more difficult to document, and more difficult to do conformance checking for, more difficult to explain to  developers when they run into problems (for example, developers coming to Stack Overflow with questions, and other people trying to help answer them).

[20:04:43.0803] <sideshowbarker>
* jarhar:  


> were "select multiple" and "input type" bad ideas?

Yes, IMHO. At least from the perspective of developer ergonomics. Especially in the case of ”input type”, smuggling 20 different logical elements with different presentations/UI/behavior into one element has created very significant costs that would have been unnecessary otherwise. It's made it more difficult to document, and more difficult to do conformance checking for, more difficult to explain to  developers when they run into problems (for example, developers coming to Stack Overflow with questions, and other people trying to help answer them).

[20:05:08.0786] <sideshowbarker>
* jarhar:

were "select multiple" and "input type" bad ideas?

Yes, IMHO. At least from the perspective of developer ergonomics. Especially in the case of ”input type”, smuggling 20 different logical elements with different presentations/UI/behavior into one element has created very significant costs that would have been unnecessary otherwise. It's made it more difficult to document, and more difficult to do conformance checking for, more difficult to explain to  developers when they run into problems (for example, developers coming to Stack Overflow with questions, and other people trying to help answer them).

[20:06:56.0805] <sideshowbarker>
jarhar:  

> were "select multiple" and "input type" bad ideas?

Yes, IMHO. At least from the perspective of developer ergonomics. Especially in the case of ”input type”, smuggling 20 different logical elements with different presentations/UI/behavior into one element has created very significant costs that would have been unnecessary otherwise. It's made it more difficult to document, and more difficult to do conformance checking for, more difficult to explain to  developers when they run into problems (for example, developers coming to Stack Overflow with questions, and other people trying to help answer them).

[20:07:31.0845] <sideshowbarker>
* jarhar:

were "select multiple" and "input type" bad ideas?

Yes, IMHO. At least from the perspective of developer ergonomics. Especially in the case of ”input type”, smuggling 20 different logical elements with different presentations/UI/behavior into one element has created very significant costs that would have been unnecessary otherwise. It's made it more difficult to document, and more difficult to do conformance checking for, more difficult to explain to  developers when they run into problems (for example, developers coming to Stack Overflow with questions, and other people trying to help answer them).

[21:55:32.0812] <sideshowbarker>
 * jarhar:

> were "select multiple" and "input type" bad ideas?

Yes, IMHO. At least from the perspective of developer ergonomics. Especially in the case of ”input type”, smuggling 20 different logical elements with different presentations/UI/behavior into one element has created very significant costs that would have been unnecessary otherwise. It's made it more difficult to document, and more difficult to do conformance checking for, more difficult to explain to  developers when they run into problems (for example, developers coming to Stack Overflow with questions, and other people trying to help answer them).

[21:55:48.0475] <sideshowbarker>
 * jarhar:

>
> were "select multiple" and "input type" bad ideas?

Yes, IMHO. At least from the perspective of developer ergonomics. Especially in the case of ”input type”, smuggling 20 different logical elements with different presentations/UI/behavior into one element has created very significant costs that would have been unnecessary otherwise. It's made it more difficult to document, and more difficult to do conformance checking for, more difficult to explain to  developers when they run into problems (for example, developers coming to Stack Overflow with questions, and other people trying to help answer them).

[22:00:35.0828] <annevk>
Heh, we're still evaluating `<selectlist>`. 😅

[22:23:17.0880] <annevk>
I think what I'd look at is how much branching you would need to do and how much shared code there ends up being between the two features. And how difficult it would be to add new features if they were separate elements.

And while it's probably correct that we'd do `<input>` differently today, the way it was designed has a number of benefits we still benefit from today. It has made it much easier to introduce new input controls, such as `type=email`. Or soon `<input type=checkbox switch>`.

[01:15:18.0318] <Domenic>
I would prefer separate elements.

[01:44:41.0017] <annevk>
I had forgotten why making progress on `<input type=email>` was difficult, but now it's very clear again unfortunately

[04:07:47.0010] <annevk>
Luca Casonato: very nice to see my URL Interop issue was a dupe. At least there's two people that care. 😅

[04:14:11.0327] <Ms2ger>
Sure it wasn't a dupe for an issue you also filed?

[04:43:10.0973] <annevk>
Ms2ger: 🐢🐢

[07:32:00.0194] <keithamus>
Is it right that a bubbling+composed event with a relatedTarget stops bubbling when it hits the shadowroot? Shouldn't it retarget the relatedTarget to the host?

[07:33:17.0685] <keithamus>
```
y = $0.attachShadow({mode:'open'})
y.append(document.createElement('button'))
x = y.querySelector('button')
x.addEventListener('focusin', console.log)
y.addEventListener('focusin', console.log)
$0.addEventListener('focusin', console.log)
x.dispatchEvent(new FocusEvent('focusin', { relatedTarget: x, bubbles: true, composed: true }))
```

I only get 2 `console.logs` when I expected 3

[07:45:17.0781] <keithamus>
If I `s/FocusEvent/Event` I get 3. 

[07:55:52.0581] <annevk>
zcorpan: did you want to give feedback on https://github.com/whatwg/html/pull/9689? I think Jonathan Kew agrees with it so probably have enough in terms of implementer interest, but always nice to get more review

[07:56:54.0667] <annevk>
keithamus: if that's what DOM's dispatch algorithm says, yes (it's been a long time since I looked at this, but I think it's written down)

[08:04:58.0121] <annevk>
Noam Rosenthal: activateAfter makes me think it's no different from activationTimeout

[08:05:33.0110] <annevk>
Noam Rosenthal: as in, setTimeout runs after x seconds

[08:07:20.0659] <annevk>
Noam Rosenthal: before you talked about a deadline, which made me think that if you passed x, running at x-1 would be okay, but x+1 would not be; doesn't that mean "before"? Whereas for "after" x+1 would be fine.

[08:34:35.0643] <Noam Rosenthal>
annevk: both are fine, but for different reasons. The timeout duration is like a preference. The UA would activate before the timeout in case of termination or some such, and after the activation timeout for throttling/batching

[08:35:08.0864] <Noam Rosenthal>
The word "timeout" is maybe confusing because it's the opposite of the abort signal's timeout

[08:35:50.0949] <Noam Rosenthal>
Yea `activateAfter` means the same thing but it's clear it's a timeout *until* activation rather than "A timeout after which activation expires" or something like that

[08:41:46.0384] <annevk>
I see, thanks. Domenic you haven't weighed in yet, maybe tell us what you think after the weekend?

[11:01:03.0410] <TabAtkins>
Same; multi-select is related to single-select, but wants a fairly distinct UI. (Even the existing godawful UI is quite distinct between the two states.)

[11:01:11.0116] <TabAtkins>
So yeah, multiple elements.

[14:35:53.0931] <sideshowbarker>
jarhar: FYI https://github.com/WebKit/WebKit/pull/18785

[14:43:02.0038] <sideshowbarker>
jarhar: I wonder if we could consider updating the spec to require that in the _“ancestor details revealing algorithm”_, before setting the `open` attribute, we suppress mutation events — in the same way as is done in the _“ensure details exclusivity by closing the given element if needed”_ algorithm https://html.spec.whatwg.org/multipage/interactive-elements.html#ensure-details-exclusivity-by-closing-the-given-element-if-needed

[14:44:32.0941] <jarhar>
oh wow, i didn't know that david actually specced the don't fire mutation events flag

[14:44:41.0733] <jarhar>
sounds great to me! disable mutation events everywhere!

[15:05:43.0862] <sideshowbarker>
In WebKit, there’s actually an assert at https://github.com/sideshowbarker/WebKit/blob/main/Source/WebCore/dom/Node.cpp#L2461 which will get hit unless we introduce some flag for skipping it (which means, skipping the dispatch of the `DOMSubtreeModified` mutation event)

[15:06:13.0555] <sideshowbarker>
 * In WebKit, there’s actually an assert at https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/Node.cpp#L2461 which will get hit unless we introduce some flag for skipping it (which means, skipping the dispatch of the `DOMSubtreeModified` mutation event)


2023-10-08
[10:07:56.0431] <Debadree Chatterjee>
 * hello to all the members here! hope you are doing well! i had a question in regards to the implementation of https://github.com/whatwg/streams/commit/007d729f1476f7f1ea34731ba9bd2becb702117e for nodejs I am encountering a case of what seems like a race conditions between promises this can better explained with an example consider this following code: const { TransformStream } = require('stream/web');
const assert = require('node:assert/strict');

(async () => {
  let controller;
  const ts = new TransformStream({
    start(c) {
      controller = c;
    }
  });
  const cancelReason = { name: 'cancelReason' };
  const cancelPromise = ts.readable.cancel(cancelReason);
  controller.terminate();
  return Promise.all([
    cancelPromise,
    assert.rejects(ts.writable.getWriter().closed)
  ]);
})();

[10:22:58.0539] <Debadree Chatterjee>
Hello everyone! hope you are doing well! I had one question in regards to the implementation of https://github.com/whatwg/streams/commit/007d729f1476f7f1ea34731ba9bd2becb702117e, i have been trying to implement this in nodejs and i am bumping into what seems like a race condition between promises its better explained with code consider the code here https://gist.github.com/debadree25/c54931a99e493baaf9314a903cd52e12 now when we create a transform stream we have one promise created on the writable side the "startPromise" as noted in https://streams.spec.whatwg.org/#set-up-writable-stream-default-controller and when we called the cancel method on the readable we get a cancellation promise as noted in https://streams.spec.whatwg.org/#transform-stream-default-source-cancel now in the code after this we call on controller.terminate which causes the writable side to go into the "erroring" stage, now comes the interesting part the "startPromise" gets resolved and causes the writable part to go into "errored" mode after which the close promise resolves rejecting the cancellation promise we received I think this is expected behaviour? since promises are executed in a queue manner? strangely this issue doesnt seem to affect the reference implementation here https://github.com/whatwg/streams and the promises get executed in the order: -created start promise
-cancel promise created
-cancel promise resolving
-start promise resolving. I dont think this could be a problem with the spec maybe there is something i am missing? if anyone has any insight it would be great!! Thank you for reading! :-)


2023-10-09
[21:31:11.0070] <sideshowbarker>
 * jarhar: The _“A CSS Animation running on an element within a \<details> element is canceled after the \<details> element is closed”_ test at https://wpt.fyi/results/css/css-animations/animation-canceled-by-parent-details-element-being-closed.html times out in Chrome, while passing in Firefox and current Safari.

But the patch in https://github.com/WebKit/WebKit/pull/18785 for implementing auto-expanding `<details>` makes it now time out in Safari too.

The reason it times out (both in Blink and patched WebKit) is that the `cancel` event never fires.

I’m going to make time to investigate it more, but it’s not immediately clear to me why the changes made for auto-expanding `<details>` would cause that test to fail.

[22:04:59.0219] <sideshowbarker>
 * jarhar: The _“A CSS Animation running on an element within a \<details> element is canceled after the \<details> element is closed”_ test at https://wpt.fyi/results/css/css-animations/animation-canceled-by-parent-details-element-being-closed.html times out in Chrome, while passing in Firefox and current Safari.

But the patch in https://github.com/WebKit/WebKit/pull/18785 for implementing auto-expanding `<details>` makes it now time out in Safari too.

The reason it times out (both in Blink and patched WebKit) is that the `cancel` event never fires.

I’m going to make time to investigate it more, but it’s not immediately clear to me why the changes made for auto-expanding `<details>` would cause that `cancel` event to stop firing.

[02:52:49.0044] <axo10tl>
Hi! Can I request some historical information here? 😅
I was wondering what kind of arguments were raised for the current CSS custom property syntax, more specifically; was the SASS-like dollar syntax considered, and why didn't custom properties adopt something similar to that?

[02:54:17.0601] <axo10tl>
Tried searching the whatwg github issues, but couldn't find any discussion related to this. Apparently some discussions are held in IRC/Matrix, so there would not be public logs if that's the case?

[03:05:18.0520] <Noam Rosenthal>
> <@axo10tl:matrix.org> Hi! Can I request some historical information here? 😅
> I was wondering what kind of arguments were raised for the current CSS custom property syntax, more specifically; was the SASS-like dollar syntax considered, and why didn't custom properties adopt something similar to that?

 CSS is specified in W3C, not in WHATWG

[03:06:14.0556] <axo10tl>
oof, thanks (and sorry).. :D

[03:21:07.0573] <annevk>
Panos Astithas: I don't have the Oct 19 WHATNOT meeting in my calendar. I was going to add RitamDas30. Could it be that I'm not on the invite list or did I mess up somehow?

[06:09:05.0867] <sideshowbarker>
jarhar: The _“A CSS Animation running on an element within a \<details> element is canceled after the \<details> element is closed”_ test at https://wpt.fyi/results/css/css-animations/animation-canceled-by-parent-details-element-being-closed.html times out in Chrome, and in Safari built from https://github.com/WebKit/WebKit/pull/18785 — apparently because, with the switch to using `content-visibility: hidden` to close the `details` element (rather than removing the element from the DOM), the `cancel` event never fires.

Per-spec _is_ the `cancel` event actually supposed to fire at an element when `content-visibility: hidden` is set on an ancestor?

If it’s not supposed to fire, then I guess that test needs to be changed.

But if it _is_ actually supposed to fire, then I guess that’d mean both Blink and WebKit have a bug in their content-visibility implementations that needs to be fixed?

[07:11:43.0570] <freddy>
shower thought: Wouldn't it be nice to have a "sameoriginmessage" (name to be bikeshedded) counterpart of the "message" Event type which code could consider implicitly trusted (or not)?

[07:20:05.0015] <annevk>
freddy: possibly, or some kind of event listener filter option

[07:27:44.0373] <freddy>
The options bag for addEventListener doesn't seem like a great pattern to support specific options only for certain event types. But sure, I don't have strong feelings. This started off as a shower thought ;)

[08:33:48.0989] <zcorpan>
> <@annevk:matrix.org> zcorpan: did you want to give feedback on https://github.com/whatwg/html/pull/9689? I think Jonathan Kew agrees with it so probably have enough in terms of implementer interest, but always nice to get more review

reviewed, thx for the ping

[08:54:30.0057] <annevk>
zcorpan: hah, so I just found a flaw, only submit buttons participate in form submission

[08:54:47.0929] <annevk>
So maybe `dirname` needs to be more limited than `dir=auto` is after all

[08:55:33.0776] <zcorpan>
annevk: good catch. but it's "only" dead code, then, for `dirname`

[08:55:54.0044] <annevk>
Ah I guess the form submission algorithm is still fine as the buttons are filtered early on, indeed

[08:56:14.0847] <annevk>
So it's just a matter of whether `dirname` applies and is conforming, which it should not be

[08:56:23.0259] <annevk>
I'll change that

[08:57:11.0811] <zcorpan>
right

[08:58:20.0060] <annevk>
I was trying to implement this and the BaseButtonInputType class in WebKit was just like no, we don't handle form data here

[09:39:09.0527] <jarhar>
i think that animations are supposed to "pause", so it probably makes sense that cancel doesnt fire

[09:39:12.0879] <jarhar>
https://drafts.csswg.org/css-contain-2/#:~:text=While%20an%20element%20is%20skipped%2C%20CSS%20transitions%20and%20animations%20on%20the%20element%20do%20not%20update

[09:39:52.0969] <jarhar>
i didnt implement any of the interactions between content-visibility and animations though, so i'm not the most knowledgable

[09:50:27.0944] <Panos Astithas>
I see your personal email is on the invite. Perhaps I shall add your work email, too?

[09:53:04.0439] <Panos Astithas>
I just removed and re-added you, hopefully that generated a useful notification.

[10:23:32.0581] <annevk>
It didn't. Not sure what's going on. It's not in Trash. I can find it using the Google Calendar web interface search, but then it can't open it. It's also not a declined invitation.

[10:36:28.0139] <Panos Astithas>
That's weird. Shall I add your work email to see if it helps you debug this further?

[11:05:51.0235] <annevk>
Could you add annevk@annevk.nl perhaps?

[11:06:33.0803] <annevk>
I don't think my Apple address will help, but I could be mistaken...

[11:27:46.0306] <Panos Astithas>
That address was already there, but I removed it, saved the event, and then added it again. Maybe you'll get a notification this time

[12:53:59.0312] <TabAtkins>
Hiya, editor of CSS Variables here. Yes, $foo was an early proposed syntax. It started as `var-foo: blue; color: var(foo);`, then we discussed using $ and using the same name consistently in <https://lists.w3.org/Archives/Public/www-style/2012May/0744.html>, and then we explored a bunch of options that wouldn't require parsing changes (for a bit it was an underscore, then eventually the --, see <https://lists.w3.org/Archives/Public/www-style/2014Mar/0261.html>)

[13:00:06.0059] <bkardell>
The - was basically keeping it consistent with what we'd already done with vendor prefixes, and we just did that for all the custom things  https://lists.w3.org/Archives/Public/www-style/2014Mar/0269.html


2023-10-10
[23:59:43.0721] <annevk>
Yeah, that seems to have worked. Thanks!

[00:01:11.0847] <annevk>
Note that OP had already left the channel.

[01:07:00.0577] <annevk>
Domenic: https://github.com/whatwg/html/pull/9538#discussion_r1328593134 still seems concerning with the unsafe parser methods

[01:07:28.0443] <annevk>
Domenic: is there test coverage for that state? In particular because implementations also are not aligned on HTMLDocument vs XMLDocument vs Document and such

[01:07:39.0394] <Domenic>
annevk: I agree with Joey here that everything is initialized and all spec code that can be shared, is shared.

[01:07:50.0867] <annevk>
Domenic: so you're saying type should be "xml"?

[01:07:51.0439] <Domenic>
There is test coverage for that state.

[01:07:59.0757] <Domenic>
No, type gets set to xml elsewhere

[01:08:23.0509] <annevk>
Domenic: note that type and content type are distinct

[01:08:32.0006] <Domenic>
https://whatpr.org/html/9538/dynamic-markup-insertion.html#parse-html-from-a-string

[01:08:45.0325] <Domenic>
 * No, type gets set to html elsewhere

[01:10:20.0589] <annevk>
Domenic: I see, so URL will be about:blank meaning relative URLs will break?

[01:10:28.0911] <Domenic>
Yes, this is intentional.

[01:10:34.0659] <Domenic>
We discussed it upthread in the PR

[01:10:46.0122] <Domenic>
If people want URL inheritance we can add a { url } option in the future.

[01:13:17.0164] <annevk>
https://github.com/whatwg/html/pull/9538#discussion_r1293136059 is hard to find and the commit message doesn't describe it, but okay.

[01:15:22.0324] <annevk>
Anyway, I guess that's fine. Though `new Document()` does inherit the origin. Hmm.

[01:15:38.0974] <annevk>
 * Anyway, I guess that's fine. Though `new Document()` does inherit the origin. Hmm. Maybe it shouldn't have?

[02:24:25.0462] <Domenic>
Yeah the inheritance seems all very magic to me, I say, if you want it, we should make that the non-default.

[02:26:24.0233] <Domenic>
I recorded that we need tests for document.origin in Joey's CL, I missed that one, thanks.

[02:51:12.0622] <annevk>
Domenic: not sure what I want, but I can imagine web developers wanting it for URL at least, having `<img>` not work has been an issue of sorts before I vaguely recall

[02:51:40.0785] <annevk>
(work in the sense of `.href` not returning something useful)

[02:52:29.0366] <annevk>
zcorpan: https://github.com/whatwg/html/pull/9689 should be good now, but happy to wait a bit to see if more people want to chime in

[04:54:30.0815] <sideshowbarker>
annevk: about https://bugs.webkit.org/show_bug.cgi?id=192000, would a patch that conforms WebKit to the `Content-Type` parsing requirements in the Fetch spec actually be accepted? Or instead not — because it would break on too many existing sites?

[05:58:17.0538] <Domenic>
> <@annevk:matrix.org> Domenic: not sure what I want, but I can imagine web developers wanting it for URL at least, having `<img>` not work has been an issue of sorts before I vaguely recall

The simplest workaround is for them to inject a <base> element. But yeah, we could add something if we hear a request.

[05:58:58.0777] <Domenic>
* In reply to @annevk:matrix.org
Domenic: not sure what I want, but I can imagine web developers wanting it for URL at least, having <img> not work has been an issue of sorts before I vaguely recall

The simplest workaround is for them to inject a `<base>` element. But yeah, we could add something to configure the URL and/or base URL out of band, if we hear a request.

[06:03:05.0907] <annevk>
sideshowbarker: not sure all of it can be fixed in WebKit, but I think it's an area we'd be willing to clean up, might need some kind of preference so it's easy to revert for select sites?

[06:05:27.0069] <annevk>
Domenic: I guess Google should know since iirc Google mainly pushed for this method?

[06:07:44.0731] <Domenic>
Yeah we haven't heard any, that's why I promoted the simpler option.

[07:02:11.0320] <annevk>
I wonder if it's too late to change `new Document()`, but I also don't really want to work on it myself


2023-10-11
[02:08:11.0082] <annevk>
Domenic: is https://github.com/whatwg/html/pull/8467 in your queue?

[02:10:27.0638] <Domenic>
> <@annevk:matrix.org> Domenic: is https://github.com/whatwg/html/pull/8467 in your queue?

No.

[02:10:47.0699] <annevk>
Domenic: let me rephrase that, do you want to look at it before it lands?

[02:10:53.0184] <annevk>
Since you reviewed it before.

[02:12:13.0755] <Domenic>
Nah, seems fine. Although I'm not sure it actually has Chrome support at the moment.

[02:15:47.0802] <annevk>
Chrome engineers drove the change with the CSS WG. If you want to double check on that I can hold off on landing this. Let me know.

[02:18:17.0306] <Domenic>
Yeah we should hold off. They're failing to get signoff on blink-dev last I saw.

[04:58:31.0132] <annevk>
keithamus: I'm gonna wait with another round of review for EventTarget until it's a bit more established what the API shape should be. One thing that did seem to be missing is the parent setter/getter definition.

[04:59:34.0373] <keithamus>
annevk: within `EventTarget`? or `EventTargetInternals`?

[05:08:04.0304] <keithamus>
I've updated which hopefully clarifies the steps for get/set on `EventTargetInternals` `parent`.

[06:16:07.0532] <annevk>
Jake Archibald: I cannot reply to https://twitter.com/jaffathecake/status/1711872418434654419 but isn't the problem Chromium here, perhaps? I wonder what happens in the non-Chromium URLPattern implementation. Custom URL schemes are supported pretty well in URL and the idea is that they are too in URLPattern, provided you have a compliant URL parser.

[06:18:38.0139] <Jake Archibald>
annevk: ohhh, my understanding was that if you use a non http(s) scheme then the rest of the URL won't be parsed by HTTP rules 

[06:22:19.0767] <annevk>
Jake Archibald: see https://jsdom.github.io/whatwg-url/ as an easy way to test specific inputs; generally when people complain about this they are talking about a long-standing Chromium and Gecko bug

[06:22:39.0659] <annevk>
I was hoping that Interop 2023 would fix it, but it seems like it will be at least another year

[06:39:15.0621] <annevk>
Domenic: is https://github.com/whatwg/fetch/issues/1715 in your queue?

[06:41:53.0277] <Domenic>
> <@annevk:matrix.org> Domenic: is https://github.com/whatwg/fetch/issues/1715 in your queue?

Nope, that one is way too large to touch

[06:49:54.0364] <annevk>
Domenic: in particular I asked feedback on the name, not the whole API

[06:50:16.0070] <annevk>
Domenic: are you no longer reading GitHub pings?

[10:51:45.0509] <jub0bs>
 * The guy (who has a huge audience on Twitter and YouTube) wants to talk about

> how CORS was a mistake.

https://twitter.com/t3dotgg/status/1712027342556864952

[10:51:51.0309] <jub0bs>
 * The guy (who has a huge audience on Twitter and YouTube) wants to talk about
> how CORS was a mistake.

https://twitter.com/t3dotgg/status/1712027342556864952

[11:08:48.0106] <jub0bs>
 * The guy (who has a huge audience on Twitter and YouTube) purports to explain

> how CORS was a mistake.

https://twitter.com/t3dotgg/status/1712027342556864952

[13:00:46.0763] <jub0bs>
 * Nothing but pointless drivel so far...

[13:59:28.0489] <Dominic Farolino>
If a request from a document goes through a service worker, what's the `client` set to of the request that finally makes it to the "HTTP-network-or-cache fetch" algorithm (assuming the service worker did a `respondWith(fetch(e.request))`? Is it the original document's ESO, or the service worker's? After reading https://w3c.github.io/ServiceWorker/#on-fetch-request-algorithm I'm almost positive the answer is "the original document global".

