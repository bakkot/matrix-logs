2021-10-01
[00:30:45.0890] <annevk>
That's a pretty cool tool! Nice work asuth!

[00:33:14.0833] <annevk>
If anyone is curious about how to invoke fetch from another specification, I have good news for you. You get to both learn and critique my explanation of how to go about that at the same time: https://github.com/whatwg/fetch/pull/1314

[00:58:47.0089] <hsivonen>
Do I understand correctly that `fetch()` can't return a `Document` like XHR can?

[01:25:23.0447] <annevk>
hsivonen: yes.

[02:20:01.0362] <annevk>
I know why and I also know I talked about quite a few times, but it's still surprising to me that `<a onclick="Promise.resolve().then(() => event.preventDefault())" href=...>` actually works.

[03:35:17.0562] <annevk>
Noam Rosenthal: hey, you addressed some comments in https://github.com/whatwg/fetch/pull/1311 but not all. Did you miss the other comments or are you still in progress?

[03:59:20.0769] <Noam Rosenthal>
Must have missed something, will double check !

[04:08:27.0605] <Noam Rosenthal>
> <@annevk:mozilla.org> Noam Rosenthal: hey, you addressed some comments in https://github.com/whatwg/fetch/pull/1311 but not all. Did you miss the other comments or are you still in progress?

Yes I just looked again and indeed I missed your last comments. Will get back to this next week. Thanks!

[04:21:35.0061] <oh.hey.you.hacked.my.router>
whats UPPPP!!!!

[04:21:40.0951] <oh.hey.you.hacked.my.router>
muahahgahahah!

[04:24:03.0579] <oh.hey.you.hacked.my.router>
itook pictures and saved files

[04:24:07.0823] <oh.hey.you.hacked.my.router>
and sent to google

[04:24:19.0131] <oh.hey.you.hacked.my.router>
and many more

[08:19:55.0907] <Sam Sneddon [:gsnedders]>
does anyone have any views on where to file a bug about integration of HTML, MSE, and EME? specifically it appears that WebKit (at least the Apple port) treats media decoding as a blocking operation when waiting for a key, but other browsers do not, and it's exceptionally unclear spec-wise

[08:22:48.0554] <Ms2ger ðŸ’‰ðŸ’‰>
https://github.com/webcompat/browser-compat-bugs ?

[08:26:26.0742] <annevk>
Sam Sneddon [:gsnedders]: I'd start with EME; I think HTML might have an issue about better integration already

[08:27:32.0645] <annevk>
Sam Sneddon [:gsnedders]: it's also fine to cross-file though ðŸ™‚

[09:55:40.0766] <Dominic Farolino>
What's the best way to go from origin => URL in spec world? Best I can figure is going from origin => "Parse a URL given the serialization of `origin`"

[16:39:54.0419] <sideshowbarker>
https://github.com/SerenityOS/serenity/tree/master/Userland/Libraries/LibWeb

[16:54:52.0570] <Sgeo>
Is this an appropriate place to ask a DOMMatrix question? (I stumbled into a W3C IRC a few weeks ago but I think that's not supposed to be so public?)

[16:56:48.0319] <sideshowbarker>
Sgeo: Yes, this is good place to ask

[16:56:56.0058] <Sgeo>
Is there a specific reason that the indices are backwards from typical math convention? AFAIK, m_12 is typically row 1 column 2, but with DOMMatrix m12 is row 2 column 1

[16:57:30.0451] <Sgeo>
Although now that I look, MDN disagrees with the spec (and with typical math convention) aaict

[16:57:36.0286] <Sgeo>
 * Although now that I look, MDN disagrees with the spec (and with typical math convention) afaict

[16:57:44.0506] <Sgeo>
 * Although now that I look, MDN disagrees with the spec (and agrees with typical math convention) afaict

[16:59:21.0790] <sideshowbarker>
> <@sgeo:matrix.org> Although now that I look, MDN disagrees with the spec (and agrees with typical math convention) afaict

if so please consider editing https://github.com/mdn/content/edit/main/files/en-us/web/api/dommatrix/index.md to fix it â€” or alternatively, raising a new issue at https://github.com/mdn/content/issues/new/choose


2021-10-02
[17:00:04.0196] <sideshowbarker>
> <@sgeo:matrix.org> Is there a specific reason that the indices are backwards from typical math convention? AFAIK, m_12 is typically row 1 column 2, but with DOMMatrix m12 is row 2 column 1

TabAtkins might have some insight into that 

[17:00:49.0119] <TabAtkins>
I presume that's just how graphics programmers usually write their matrixes.

[17:00:58.0957] <TabAtkins>
(I have no idea.)

[17:04:48.0997] <sideshowbarker>
Sgeo: or actually if you want to open an issue, https://github.com/mdn/content/issues/new?body=MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FAPI%2FDOMMatrix%0A%0A%23%23%23%23+What+information+was+incorrect%2C+unhelpful%2C+or+incomplete%3F%0A%0A%0A%23%23%23%23+Specific+section+or+headline%3F%0A%0A%0A%23%23%23%23+What+did+you+expect+to+see%3F%0A%0A%0A%23%23%23%23+Did+you+test+this%3F+If+so%2C+how%3F%0A%0A%0A%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EMDN+Content+page+report+details%3C%2Fsummary%3E%0A%0A*+Folder%3A+%60en-us%2Fweb%2Fapi%2Fdommatrix%60%0A*+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FAPI%2FDOMMatrix%0A*+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fapi%2Fdommatrix%2Findex.md%0A*+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F2279e5ae6c229c707a014a22aa1ec4635a0f981f%0A*+Document+last+modified%3A+2021-09-14T18%3A08%3A09.000Z%0A%0A%3C%2Fdetails%3E&title=Issue+with+%22DOMMatrix+%28WebKitCSSMatrix%29%22%3A+%28short+summary+here+please%29&labels=needs-triage%2CContent%3AWebAPI

[17:04:57.0364] <sideshowbarker>
dang

[17:06:42.0837] <sideshowbarker>
 * Sgeo: or actually if you want to open an issue, use the [Report a problem with this content on GitHub](https://github.com/mdn/content/issues/new?body=MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FAPI%2FDOMMatrix%0A%0A%23%23%23%23+What+information+was+incorrect%2C+unhelpful%2C+or+incomplete%3F%0A%0A%0A%23%23%23%23+Specific+section+or+headline%3F%0A%0A%0A%23%23%23%23+What+did+you+expect+to+see%3F%0A%0A%0A%23%23%23%23+Did+you+test+this%3F+If+so%2C+how%3F%0A%0A%0A%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EMDN+Content+page+report+details%3C%2Fsummary%3E%0A%0A*+Folder%3A+%60en-us%2Fweb%2Fapi%2Fdommatrix%60%0A*+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FAPI%2FDOMMatrix%0A*+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fapi%2Fdommatrix%2Findex.md%0A*+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F2279e5ae6c229c707a014a22aa1ec4635a0f981f%0A*+Document+last+modified%3A+2021-09-14T18%3A08%3A09.000Z%0A%0A%3C%2Fdetails%3E&title=Issue+with+%22DOMMatrix+%28WebKitCSSMatrix%29%22%3A+%28short+summary+here+please%29&labels=needs-triage%2CContent%3AWebAPI) link at the bottom of https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix#on-github

[17:07:03.0064] <Sgeo>
Now I'm confusing myself

[17:08:05.0031] <Sgeo>
MDN matches the spec, n/m.

[23:34:53.0715] <devsnek>
how come srcset doesn't take the size of the image element into account?

[23:35:13.0350] <devsnek>
by which i mean it seems to assume the image will be displayed at 100% viewport width

[07:53:34.0269] <TabAtkins>
devsnek that's what the sizes attribute is for. We can't wait for CSS, as we want to start loading immediately.

[07:54:23.0882] <devsnek>
i don't get sizes tbh

[07:54:32.0670] <devsnek>
if i know the size of what i'm displaying i can just load that size instead of supplying a srcset

[07:54:42.0366] <devsnek>
also the css is definitely already loaded

[07:56:19.0806] <TabAtkins>
No, you can't. The size might be %, so you won't know it until you know the viewport.

[07:56:57.0174] <devsnek>
i do know the size of the viewport, js is being used

[07:57:03.0460] <TabAtkins>
And we can't reasonably "sometimes" use the CSS depending on the when in the page you add it

[07:57:29.0533] <devsnek>
ok taking a step back

[07:57:40.0333] <TabAtkins>
Well then you can use JS to figure out what size it needs to be?

[07:57:52.0539] <devsnek>
maybe some sort of option to tell it to use the calculated img style if available

[07:58:05.0779] <devsnek>
opting into weirdness cuz you know the css will be available

[07:58:19.0753] <devsnek>
well the idea i initially had was

[07:58:44.0987] <devsnek>
a react element for cdn assets that automatically knows how to select the correct image type and size using <source> and srcset

[07:59:07.0880] <devsnek>
where you don't have to style it with a size and then duplicate that size info in the js

[08:01:09.0203] <TabAtkins>
Well that's not the problem we were solving ðŸ˜€

[08:01:48.0242] <devsnek>
so it would seem

[08:02:20.0348] <devsnek>
idk, selecting the right image based on the size of the element seems like a boon

[12:55:55.0558] <GPHemsley>
annevk: Addressed your comments. https://github.com/web-platform-tests/wpt/pull/30403

[12:56:28.0175] <GPHemsley>
jgraham: Your advice requested ^


2021-10-04
[04:40:04.0518] <Jake Archibald>
annevk: much appreciated!

[05:02:27.0930] <Noam Rosenthal>
> <@noamr:matrix.org> Yes I just looked again and indeed I missed your last comments. Will get back to this next week. Thanks!

annevk: this should be addressed now, when you have the time. thanks!

[06:09:29.0039] <hsivonen>
WPT stash docs say that it's read once. Is there any enforcement of against reading twice if the first read fails?

[06:09:52.0830] <hsivonen>
That is, can try to read and write if the read fails?

[06:10:18.0954] <hsivonen>
Should I expect an exception or `None` if there's nothing written and I try to read?

[06:10:47.0543] <hsivonen>
(I'm trying to make a .py file track if it has already been requested)

[06:15:46.0379] <jgraham>
https://searchfox.org/mozilla-central/source/testing/web-platform/tests/tools/wptserve/wptserve/stash.py#190-205 It will return `None` if there's no data. You can also take the lock (using e.g. `with stash.lock:`) if you're doing a get-or-insert operation and are worried about multiple concurrent requests.

[06:36:55.0935] <Ù…Ø­Ø³Ù† Ø¹Ø¨Ø§Ø¯Ù†Ú˜Ø§Ø¯>
Ø³Ù„Ø§Ù…

[06:37:34.0539] <Ù…Ø­Ø³Ù† Ø¹Ø¨Ø§Ø¯Ù†Ú˜Ø§Ø¯>
devsnek: TabAtkins 

[07:10:07.0809] <annevk>
Noam Rosenthal: prolly tomorrow

[07:12:13.0786] <annevk>
Jake Archibald: I was thinking more about browsing context reuse (and potentially annotating with origin) and in a case of A1 navigating to B navigating to A2, if A1 popups C, C should only see B and A2 if nobody is isolated. Otherwise it should only see A1.

[07:13:04.0162] <annevk>
Jake Archibald: Supplying this mainly as an additional data point as to why it seems better to not go down that route.

[07:13:45.0434] <hsivonen>
> <@jgraham_:matrix.org> https://searchfox.org/mozilla-central/source/testing/web-platform/tests/tools/wptserve/wptserve/stash.py#190-205 It will return `None` if there's no data. You can also take the lock (using e.g. `with stash.lock:`) if you're doing a get-or-insert operation and are worried about multiple concurrent requests.

Thanks. I guess I'm relying only on a timer for the making the requests sequential.

[07:14:37.0123] <Jake Archibald>
annevk: yeah, I was initially going to try and make it so A2 could also see C, if A1 and A2 had the same isolation, but it doesn't work for a bunch of reasons.

[07:14:45.0980] <Jake Archibald>
 * annevk: yeah, I was initially going to try and make it so A2 could also see C, if A1 and A2 had the same isolation, but it doesn't work for a bunch of reasons.


2021-10-05
[18:37:34.0483] <sideshowbarker>
looking at https://github.com/mdn/browser-compat-data/pull/12376

[18:38:04.0905] <sideshowbarker>
can somebody remind me what is the WebIDL keyword that replaced the `Transferable` API?

[19:08:05.0351] <sideshowbarker>
nevermind, I found https://html.spec.whatwg.org/multipage/structured-data.html#transferable and https://html.spec.whatwg.org/multipage/structured-data.html#detached

[19:08:38.0835] <sideshowbarker>
â€¦I had just expected to find the definitions of those in the WebIDL spec itself, rather than in the HTML spec

[21:32:24.0985] <Dominic Farolino>
How can a worklet have multiple realms? https://html.spec.whatwg.org/multipage/webappapis.html#worklet-agent

[00:41:54.0152] <annevk>
Dominic Farolino: iirc each script that you add through addModule or equivalent runs in its own realm

[00:42:37.0097] <annevk>
Dominic Farolino: it's a bit different from `<iframe>` in that the realms cannot access each other directly (though they can prolly observe each other)

[01:23:35.0677] <foolip>
https://webidl.spec.whatwg.org/ is up!

[01:24:14.0972] <foolip>
annevk: did you deliberate not replace WebIDL with Web IDL in https://webidl.spec.whatwg.org/#legacy-constructs?

[01:24:38.0351] <Ms2ger ðŸ’‰ðŸ’‰>
Webi DL

[01:27:36.0944] <annevk>
foolip: I might have forgotten to grep for WebIDL, I can review a follow-up PR ðŸ™‚

[02:47:10.0114] <annevk>
Dominic Farolino: can you have a look at https://github.com/whatwg/spec-factory/pull/32 btw?

[03:12:25.0823] <annevk>
Two for one special today: https://testutils.spec.whatwg.org/ by jgraham

[05:00:01.0209] <sideshowbarker>
foolip: annevk About spec frontmatter, to trim down some of the vertical space, I think we should consider:
* using hyperlinked icons rather than hypertext links
* putting the icons on the same line as the title or subtitle
* for GitHub, using only one icon, hyperlinked to the repo URL

[05:01:13.0769] <sideshowbarker>
the rationale for the single GitHub icon is that since GitHub repos all have exactly the same structure, users already know how to get from the base repo URL to the issues list, commit history, etc.

[05:02:28.0379] <sideshowbarker>
so or https://webidl.spec.whatwg.org/ weâ€™d have, at the end of title or subtitle, one GitHub icon and one Twitter icon

[05:03:44.0870] <sideshowbarker>
but tests are a different thing â€” I think ideally what we should have at the top if each spec is a copy of the corresponding row of test results from wpt.fyi

[05:04:38.0917] <annevk>
Heh, my biases are different! I like the individual links we have toward GitHub. ðŸ™‚

[05:05:56.0000] <annevk>
I wouldn't mind entertaining some alternatives to what we have now though, but I'm not entirely convinced a couple of logos is clear enough for everyone.

[05:07:23.0235] <sideshowbarker>
well for W3C specs, we are moving to putting all the frontmatter in a `details` element

[05:08:25.0454] <sideshowbarker>
â€¦and Marcos and I are working on showing some other more-useful spec-specific data at the top

[05:08:39.0298] <sideshowbarker>
â€¦including the test results

[05:09:28.0986] <sideshowbarker>
so for example at the top of the WebIDL spec, weâ€™d have a table showing that  â¬†


[05:09:52.0336] <sideshowbarker>
â€¦except it would also show colors â€” shades of green and red

[05:10:17.0015] <annevk>
That seems reasonable, but isn't number of open GitHub issues also indicative of quality?

[05:11:04.0081] <annevk>
(Not sure I like `details`. Pretty much the only thing I need when looking at a spec is a way to find filing an issue, but that's my bias I suppose.)

[05:11:22.0217] <sideshowbarker>
> <@annevk:mozilla.org> That seems reasonable, but isn't number of open GitHub issues also indicative of quality?

sure â€” but then that argues for showing the actual number of open issues at the top of the spec, not just having a link

[05:11:48.0537] <sideshowbarker>
(to show what I mean about the colors)

[05:12:23.0525] <sideshowbarker>
> <@annevk:mozilla.org> (Not sure I like `details`. Pretty much the only thing I need when looking at a spec is a way to find filing an issue, but that's my bias I suppose.)

sure but you need to consider that maybe youâ€™re not a very typical reader of specs

[05:14:14.0033] <sideshowbarker>
I assert that we should be optimizing for the readers who benefit the most from us having the spec frontmatter give them some clear indicators to help them get oriented with the spec 

[05:14:31.0175] <annevk>
Yeah, has W3C done surveys with spec readers? It'd be pretty interesting to know what people are looking for primarily

[05:14:44.0816] <sideshowbarker>
â€¦and I think the readers we should be trying to most to help are typical-developer readers 

[05:14:47.0113] <Ms2ger ðŸ’‰ðŸ’‰>
Weighted by number of hours per week looking at specs

[05:15:53.0458] <sideshowbarker>
> <@annevk:mozilla.org> Yeah, has W3C done surveys with spec readers? It'd be pretty interesting to know what people are looking for primarily

no surveys have been done of this kind, as far as I know â€” I think foolip might be the a good person to put together such a survey in the right way

[05:17:06.0584] <sideshowbarker>
other thing I we should add to all our specs is a Can I Use table like the ones that Respec specs now have

[05:17:13.0267] <sideshowbarker>
example https://w3c.github.io/geolocation-api/

[05:19:39.0260] <sideshowbarker>
â€¦of course those tables are lot more interesting in the case of specs that arenâ€™t implemented in all engines â€” so you get some red and orange and yellow in there too

[05:20:18.0938] <sideshowbarker>
â€¦and itâ€™s dynamic â€” you can hover to get more browser-version info

[05:21:03.0293] <sideshowbarker>
anyway, I plan to get that Can I Use table generation added to Bikeshed as a feature

[05:21:42.0601] <sideshowbarker>
and Marcos and I will be working on getting the wpt.fyi table generation added to both Respec and Bikeshed

[05:22:37.0585] <sideshowbarker>
â€¦and soon all W3C specs by default will have all the other frontmatter collapsed by default

[05:22:42.0999] <sideshowbarker>
example https://w3c.github.io/webappsec-mixed-content/

[05:23:52.0706] <sideshowbarker>
collapsing all that other frontmatter into `details` gives room for the Can I Use and wpt.fyi tables to actually show up above the fold â€” in the initial viewport, without readers needing to have to know to scroll down to see those

[05:24:59.0344] <sideshowbarker>
anyway, thatâ€™s just an idea dump that I mention here after taking a first look at the WebIDL and Test Utils specs

[05:55:16.0169] <foolip>
> <@sideshowbarker:mozilla.org> no surveys have been done of this kind, as far as I know â€” I think foolip might be the a good person to put together such a survey in the right way

I have almost exclusively been dealing with web developer surveys, but if it's web developers reading specs that is the audience, then maybe I could be useful. Anyone who things so feel free to email me :)

[06:03:13.0301] <annevk>
foolip: if we could get them + browser developers (e.g., email webkit-dev, dev-platform, and blink-dev to please also fill it out), we'd have a pretty good start I think

[07:38:18.0090] <TabAtkins>
Okay I was excited about WebIDL moving to whatwg, but I'm much less excited about the CSS regressions. No more persistent ToC really sucks for a spec that you often bounce around semi-randomly in.

[07:42:26.0473] <Luca Casonato>
> <@tabatkins:matrix.org> Okay I was excited about WebIDL moving to whatwg, but I'm much less excited about the CSS regressions. No more persistent ToC really sucks for a spec that you often bounce around semi-randomly in.

Yeah, I agree. The spec is a lot less usable for me because of this. I often jump around between headings in "Interface definition language" and "ECMAScript binding", and that now involves a lot of scrolling.

[07:42:42.0441] <Luca Casonato>
Also dark mode being gone is unfortunate.

[07:44:31.0867] <Luca Casonato>
Also felt the "old" design was more readable because the center container was less wide. Now I have to resize the browser window to make it somewhat readable (like I already do with `fetch` and HTML specs)

[07:46:39.0364] <annevk>
This was mentioned before in https://github.com/whatwg/meta/issues/117 though it didn't really get traction. I'd be open to changing this, but not really sure I have the bandwidth to drive it at the moment.

[07:47:24.0225] <annevk>
I guess the trick would be to sufficiently scope it and try not to address all the styling issues ðŸ™‚

[07:48:16.0680] <Luca Casonato>
Yup

[07:48:52.0690] <Luca Casonato>
I'd personally vote for side-ToC being more important, as the max-width can easially be "resolved" by just making the entire viewport less wide. 

[07:49:03.0664] <TabAtkins>
I filed an issue with the three styling issues that seem most unfortunate to me from the change

[08:26:30.0956] <TabAtkins>
gonna just file a PR that's the Bikesheed stylesheet but with the colors changed to green


2021-10-06
[02:23:05.0305] <annevk>
Twitter integration started working as well after participate.whatwg.org got deployed: https://twitter.com/webidl/status/1445673751962476557

[12:29:50.0370] <wanderview>
weird bikeshed issue in the fetch spec:

[12:30:07.0175] <wanderview>
if you click on the "tainted origin flag" definition here: https://fetch.spec.whatwg.org/#concept-request-tainted-origin

[12:30:18.0139] <wanderview>
it gives you a list of places where its referenced

[12:30:41.0853] <wanderview>
except it doesn't show the reference here: https://fetch.spec.whatwg.org/#serializing-a-request-origin

[12:30:58.0448] <wanderview>
is that because "serializing a request origin" is not in an algorithm div?

[14:34:42.0458] <Domenic>
It shows for me, (2) under "2.2.5. Requests"


2021-10-07
[23:43:52.0759] <annevk>
hsivonen: I'm curious if you have thoughts about https://github.com/annevk/orb/issues/7#issuecomment-933275068. The context here is that we get a response from the network, attempt to parse it as JavaScript in some utility process, and then only if that succeeds, we let it enter the content process. For maximum compatibility we'd have to forward the encoding along with the request, but that also means attackers might be able to get more things to parse as JavaScript (in theory). Given that most of the syntax is ASCII, is that a problem? Is UTF-16 a problem?

(Anyone else who has thoughts is of course also welcome to share them.)

[00:46:03.0478] <Noam Rosenthal>
Hi annevk. I'm contemplating about the HTML/fetch integration with resource timing. Most of the resources there load the entire resource at once, e.g. creating a source text for a script from a response body. Should they be using `process response end-of-body`, or is that reserved for fully synchronous things such as sync XHR and they should use `process response`?

[00:49:26.0464] <annevk>
Noam Rosenthal: I think it would be fine for them to use that, yes

[00:50:37.0916] <annevk>
Noam Rosenthal: all the callbacks are "async" and don't block the main thread; the only thing is that would imply stuff isn't processed incrementally, but implementations are allowed to do that under the covers, as long as it's not observable directly (observing via better perf is fine)

[00:51:08.0299] <annevk>
https://infra.spec.whatwg.org/#algorithm-conformance talks a bit about that after the example.

[00:55:40.0546] <Noam Rosenthal>
gotcha, thanks annevk 

[09:30:09.0389] <timothygu>
Do we know who triple-underscore is and how they have so much time translating specs?

[09:33:17.0587] <annevk>
timothygu: I think they have some kind of system in place for translation that makes it more straightforward, but no, I don't know

[09:33:29.0080] <annevk>
timothygu: they're also very good at spotting mistakes with recent changes

[13:08:26.0281] <timothygu>
annevk: I'm trying to understand the reason why we don't allow URLs to change scheme from special to non-special through the `protocol` setter. https://github.com/whatwg/url/commit/5533c8d91e17fc81fc8a16a16af9155bf940aca8 says it's to support relative non-special URLs, but I'm not sure how it factors into special to non-special

[13:09:09.0570] <timothygu>
And similarly, what's bad about allowing `new URL(schm://host.com/hello).protocol = 'http'`?

[15:05:58.0626] <jschoi>
> <@annevk:mozilla.org> timothygu: I think they have some kind of system in place for translation that makes it more straightforward, but no, I don't know

Wow, theyâ€™ve even translated The Complete Lojban Language to Japanese. Now thatâ€™s impressive. 
What a mysterious characterâ€¦

[15:07:05.0769] <jschoi>
* > <@annevk:mozilla.org> timothygu: I think they have some kind of system in place for translation that makes it more straightforward, but no, I don't know

Wow, theyâ€™ve even translated The Complete Lojban Language to Japanese. Now thatâ€™s impressive. 
What a mysterious characterâ€¦


2021-10-08
[21:43:53.0671] <annevk>
timothygu: say you have schem://host.com and then set it to http, would you add a path? or you have blob:blah and set to http, what then? I forgot why the reverse is disallowed, might have made things easier for Location or perhaps just for consistency 

[21:46:41.0994] <timothygu>
Is there anything bad about saying "yes" to adding a path? Though it's reasonable to require a host for the non-special URL (else it's a no-op)

[21:53:44.0168] <timothygu>
annevk: ^^

[21:57:09.0569] <annevk>
timothygu: note that the host would also have to be reparsed or some such, they're just not compatible

[21:58:00.0798] <timothygu>
annevk: oh rightâ€¦

[06:38:47.0548] <hsivonen>
The HTML spec has explicit support for a character encoding menu, but only WebKit-based browsers still have it. I think we should just hand-wave it instead of working it into the algorithm. (If we work it into the algorigthm, I think we should write down the security characteristics of Gecko's implemenatation instead of writing down WebKit's approach.) Opinions?

[06:40:20.0802] <hsivonen>
In Gecko, as far as the algorithm is concerned, there is now a "force detector" flag.

[09:27:40.0157] <annevk>
smaug: Edgar Chen: timothygu: interesting IDL issue here: https://github.com/web-platform-tests/wpt/issues/31125. It seems that EventHandler should not accept non-callable objects (at least not without them getting wrapped), but in implementations it appears that it does. Am I missing something here? It's hard to believe this was overlooked for so long.

[09:42:35.0511] <Andreu Botella (he/they)>
I was just looking into that yesterday

[09:55:38.0217] <annevk>
Thanks. I'm still lost at how to read that IDL conversion thingie, but it does seem the other pieces add up at least

[09:57:09.0621] <Andreu Botella (he/they)>
The wording is tricky, but it seems to say that, in any case other than `[LegacyTreatNonObjectAsNull]`, converting non-callable objects will throw

[10:06:37.0806] <annevk>
Yeah, it's coming back to me now. So nice that every five years to a decade you get to learn silly things anew.

[10:23:39.0773] <annevk>
Thanks a lot for the help!


2021-10-09
[08:21:41.0927] <Dominic Farolino>
Why are streams exposed to worklets?

[13:17:32.0810] <Domenic>
> <@domfarolino:matrix.org> Why are streams exposed to worklets?

They are pure computation data structures, similar to e.g. Map or Array.

[16:57:09.0252] <sideshowbarker>
https://stackoverflow.com/questions/69494129/how-to-leverage-back-forward-cache-on-popstate-event-fetch


2021-10-10
[10:53:05.0403] <Domenic>
That question doesn't really make sense... I don't know what "leverage" means.

[10:53:34.0527] <Domenic>
bfcache is for cross-document navigations, popstate is for same-document navigations, so maybe the answer is "no"?


2021-10-12
[18:40:40.0646] <msmith12>
Hi all

[18:40:57.0017] <msmith12>
Just sumbitted patch, hopefully its the start of something great

[23:02:13.0258] <Noam Rosenthal>
Good morning annevk, some longish morning thought. I was thinking a lot about the fetch/timing integration. Maybe it was not right to associate the timing info with a response? A response is something that can be shared between fetches (service workers, cache), and would have different timing in each fetch context as some of the timing is measured before the response is created. Perhaps reporting the timing should be a method of the fetch instance rather than the response, and all the "attaching" is not necessary? Contemplating https://github.com/whatwg/fetch/issues/1208 and https://github.com/whatwg/fetch/issues/1215

[23:03:56.0713] <sideshowbarker>
Noam Rosenthal: by the way, thanks much for doing that PR for proper Fetch integration into CSS

[23:11:36.0151] <Noam Rosenthal>
> <@sideshowbarker:mozilla.org> Noam Rosenthal: by the way, thanks much for doing that PR for proper Fetch integration into CSS

Pleasure, it felt necessary 

[23:12:13.0770] <sideshowbarker>
yeah it was kind of long overdue

[23:13:14.0844] <sideshowbarker>
and for any given spec, itâ€™s not trivial to figure how to call into the Fetch algorithms in the right way

[23:14:41.0137] <sideshowbarker>
*for any given request scenario

[23:47:35.0439] <Noam Rosenthal>
trying to figure it out for multiple specs... For the CSS one it's a bit of a one-size-fits all because there are no load/error events, but still there are issues with referrers and CORS etc.

[00:09:15.0512] <annevk>
Noam Rosenthal: I guess conceptually you'd want fetch to return a response and timing info, but since the handshake is fetch(request) -> response it's hard to change that

[00:09:29.0302] <annevk>
Noam Rosenthal: though maybe it's changeable more easily now that we have callbacks

[00:10:17.0777] <annevk>
Noam Rosenthal: the other thing we probably still want to do at some point is FetchObserver (there's an issue if you search for this), which would also be a somewhat natural point to expose this on

[00:12:57.0990] <Noam Rosenthal>
annevk: Fetch doesn't really return anything, but rather takes in callbacks that accept responses. I think that it could return some controller object that represents the fetch instance, which could have things like "report resource timing"

[00:13:46.0908] <annevk>
Noam Rosenthal: sure, I meant at a high-level, but yeah, at a concrete level I suspect we'd want to return the controller directly

[00:14:02.0115] <annevk>
Noam Rosenthal: that would also give us a way to do abort more cleanly

[00:14:11.0866] <annevk>
Noam Rosenthal: that's probably what I'd want to start with

[00:14:26.0443] <Noam Rosenthal>
it would be easy to hook that return value into the fetch caller for the purposes of resource timing

[00:15:15.0980] <annevk>
We'd still want to use the timings of the callbacks to expose the information, though

[00:15:18.0176] <Noam Rosenthal>
I guess the idea of FetchObserver is conceptually that? I'll check the issue

[00:15:58.0484] <Noam Rosenthal>
yes, the callbacks will be there in the same way, but there will be no "attaching timing info to a response"

[00:16:00.0595] <annevk>
Noam Rosenthal: yeah, FetchObserver is/was for progress events and HTTP/2 push, but the latter died and there was never enough interest in the former (and it can be polyfilled using streams)

[00:16:22.0636] <annevk>
Yeah, we'd attach it to the controller

[00:16:45.0097] <Noam Rosenthal>
I think the controller will have access to the fetch params

[00:17:18.0163] <Noam Rosenthal>
like a public facade for stuff you can do with things from the fetch params

[00:17:45.0856] <annevk>
Yeah, I think we'd want a facade of sorts (or asserts) to ensure specs don't do weird things

[00:18:04.0951] <Noam Rosenthal>
Great, let me jot down something

[00:51:41.0788] <Noam Rosenthal>
this would also make it possible to update resource timing entries after they're created, e.g. if in the future we would want to spec that a `video` resource timing entry is created when the response is ready but updated with its `responseEnd` when it's done

[01:19:18.0752] <annevk>
Noam Rosenthal: I think in principle that should be possible either way, but this might make it easier

[01:19:41.0982] <Noam Rosenthal>
yea exactly

[01:20:10.0931] <annevk>
Noam Rosenthal: now that you mention it though, how do we account for media elements currently? They always make range requests so they get responses quite quickly. The spec for them doesn't quite reflect this (or at least not in sufficient detail)

[01:20:40.0141] <annevk>
I guess the current setup might end up with an entry per range request potentially?

[01:22:46.0887] <Noam Rosenthal>
annevk: currently in the spec, that integration is not done yet. I need to research how it's done in implementations. I wanted to have a good infrastructure with the simpler requests first

[01:40:10.0740] <Noam Rosenthal>
annevk: https://github.com/whatwg/fetch/pull/1329

[01:56:14.0801] <Noam Rosenthal>
annevk: btw, I think also `cacheState` and `timing allow passed flag` should be associated with a fetch and not with a response, for the same reasons. It's not clear how they're forwarded from service workers or restored from cache

[01:58:37.0455] <annevk>
By restored from cache you mean restored from the Cache API? That might make sense. There's a general issue with that API not getting as much attention as it deserves.

