2021-10-01
[00:30:45.0890] <annevk>
That's a pretty cool tool! Nice work asuth!

[00:33:14.0833] <annevk>
If anyone is curious about how to invoke fetch from another specification, I have good news for you. You get to both learn and critique my explanation of how to go about that at the same time: https://github.com/whatwg/fetch/pull/1314

[00:58:47.0089] <hsivonen>
Do I understand correctly that `fetch()` can't return a `Document` like XHR can?

[01:25:23.0447] <annevk>
hsivonen: yes.

[02:20:01.0362] <annevk>
I know why and I also know I talked about quite a few times, but it's still surprising to me that `<a onclick="Promise.resolve().then(() => event.preventDefault())" href=...>` actually works.

[03:35:17.0562] <annevk>
Noam Rosenthal: hey, you addressed some comments in https://github.com/whatwg/fetch/pull/1311 but not all. Did you miss the other comments or are you still in progress?

[03:59:20.0769] <Noam Rosenthal>
Must have missed something, will double check !

[04:08:27.0605] <Noam Rosenthal>
> <@annevk:mozilla.org> Noam Rosenthal: hey, you addressed some comments in https://github.com/whatwg/fetch/pull/1311 but not all. Did you miss the other comments or are you still in progress?

Yes I just looked again and indeed I missed your last comments. Will get back to this next week. Thanks!

[04:21:35.0061] <oh.hey.you.hacked.my.router>
whats UPPPP!!!!

[04:21:40.0951] <oh.hey.you.hacked.my.router>
muahahgahahah!

[04:24:03.0579] <oh.hey.you.hacked.my.router>
itook pictures and saved files

[04:24:07.0823] <oh.hey.you.hacked.my.router>
and sent to google

[04:24:19.0131] <oh.hey.you.hacked.my.router>
and many more

[08:19:55.0907] <Sam Sneddon [:gsnedders]>
does anyone have any views on where to file a bug about integration of HTML, MSE, and EME? specifically it appears that WebKit (at least the Apple port) treats media decoding as a blocking operation when waiting for a key, but other browsers do not, and it's exceptionally unclear spec-wise

[08:22:48.0554] <Ms2ger 💉💉>
https://github.com/webcompat/browser-compat-bugs ?

[08:26:26.0742] <annevk>
Sam Sneddon [:gsnedders]: I'd start with EME; I think HTML might have an issue about better integration already

[08:27:32.0645] <annevk>
Sam Sneddon [:gsnedders]: it's also fine to cross-file though 🙂

[09:55:40.0766] <Dominic Farolino>
What's the best way to go from origin => URL in spec world? Best I can figure is going from origin => "Parse a URL given the serialization of `origin`"

[16:39:54.0419] <sideshowbarker>
https://github.com/SerenityOS/serenity/tree/master/Userland/Libraries/LibWeb

[16:54:52.0570] <Sgeo>
Is this an appropriate place to ask a DOMMatrix question? (I stumbled into a W3C IRC a few weeks ago but I think that's not supposed to be so public?)

[16:56:48.0319] <sideshowbarker>
Sgeo: Yes, this is good place to ask

[16:56:56.0058] <Sgeo>
Is there a specific reason that the indices are backwards from typical math convention? AFAIK, m_12 is typically row 1 column 2, but with DOMMatrix m12 is row 2 column 1

[16:57:30.0451] <Sgeo>
Although now that I look, MDN disagrees with the spec (and with typical math convention) aaict

[16:57:36.0286] <Sgeo>
 * Although now that I look, MDN disagrees with the spec (and with typical math convention) afaict

[16:57:44.0506] <Sgeo>
 * Although now that I look, MDN disagrees with the spec (and agrees with typical math convention) afaict

[16:59:21.0790] <sideshowbarker>
> <@sgeo:matrix.org> Although now that I look, MDN disagrees with the spec (and agrees with typical math convention) afaict

if so please consider editing https://github.com/mdn/content/edit/main/files/en-us/web/api/dommatrix/index.md to fix it — or alternatively, raising a new issue at https://github.com/mdn/content/issues/new/choose


2021-10-02
[17:00:04.0196] <sideshowbarker>
> <@sgeo:matrix.org> Is there a specific reason that the indices are backwards from typical math convention? AFAIK, m_12 is typically row 1 column 2, but with DOMMatrix m12 is row 2 column 1

TabAtkins might have some insight into that 

[17:00:49.0119] <TabAtkins>
I presume that's just how graphics programmers usually write their matrixes.

[17:00:58.0957] <TabAtkins>
(I have no idea.)

[17:04:48.0997] <sideshowbarker>
Sgeo: or actually if you want to open an issue, https://github.com/mdn/content/issues/new?body=MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FAPI%2FDOMMatrix%0A%0A%23%23%23%23+What+information+was+incorrect%2C+unhelpful%2C+or+incomplete%3F%0A%0A%0A%23%23%23%23+Specific+section+or+headline%3F%0A%0A%0A%23%23%23%23+What+did+you+expect+to+see%3F%0A%0A%0A%23%23%23%23+Did+you+test+this%3F+If+so%2C+how%3F%0A%0A%0A%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EMDN+Content+page+report+details%3C%2Fsummary%3E%0A%0A*+Folder%3A+%60en-us%2Fweb%2Fapi%2Fdommatrix%60%0A*+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FAPI%2FDOMMatrix%0A*+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fapi%2Fdommatrix%2Findex.md%0A*+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F2279e5ae6c229c707a014a22aa1ec4635a0f981f%0A*+Document+last+modified%3A+2021-09-14T18%3A08%3A09.000Z%0A%0A%3C%2Fdetails%3E&title=Issue+with+%22DOMMatrix+%28WebKitCSSMatrix%29%22%3A+%28short+summary+here+please%29&labels=needs-triage%2CContent%3AWebAPI

[17:04:57.0364] <sideshowbarker>
dang

[17:06:42.0837] <sideshowbarker>
 * Sgeo: or actually if you want to open an issue, use the [Report a problem with this content on GitHub](https://github.com/mdn/content/issues/new?body=MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FAPI%2FDOMMatrix%0A%0A%23%23%23%23+What+information+was+incorrect%2C+unhelpful%2C+or+incomplete%3F%0A%0A%0A%23%23%23%23+Specific+section+or+headline%3F%0A%0A%0A%23%23%23%23+What+did+you+expect+to+see%3F%0A%0A%0A%23%23%23%23+Did+you+test+this%3F+If+so%2C+how%3F%0A%0A%0A%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EMDN+Content+page+report+details%3C%2Fsummary%3E%0A%0A*+Folder%3A+%60en-us%2Fweb%2Fapi%2Fdommatrix%60%0A*+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FAPI%2FDOMMatrix%0A*+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Fweb%2Fapi%2Fdommatrix%2Findex.md%0A*+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F2279e5ae6c229c707a014a22aa1ec4635a0f981f%0A*+Document+last+modified%3A+2021-09-14T18%3A08%3A09.000Z%0A%0A%3C%2Fdetails%3E&title=Issue+with+%22DOMMatrix+%28WebKitCSSMatrix%29%22%3A+%28short+summary+here+please%29&labels=needs-triage%2CContent%3AWebAPI) link at the bottom of https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix#on-github

[17:07:03.0064] <Sgeo>
Now I'm confusing myself

[17:08:05.0031] <Sgeo>
MDN matches the spec, n/m.

[23:34:53.0715] <devsnek>
how come srcset doesn't take the size of the image element into account?

[23:35:13.0350] <devsnek>
by which i mean it seems to assume the image will be displayed at 100% viewport width

[07:53:34.0269] <TabAtkins>
devsnek that's what the sizes attribute is for. We can't wait for CSS, as we want to start loading immediately.

[07:54:23.0882] <devsnek>
i don't get sizes tbh

[07:54:32.0670] <devsnek>
if i know the size of what i'm displaying i can just load that size instead of supplying a srcset

[07:54:42.0366] <devsnek>
also the css is definitely already loaded

[07:56:19.0806] <TabAtkins>
No, you can't. The size might be %, so you won't know it until you know the viewport.

[07:56:57.0174] <devsnek>
i do know the size of the viewport, js is being used

[07:57:03.0460] <TabAtkins>
And we can't reasonably "sometimes" use the CSS depending on the when in the page you add it

[07:57:29.0533] <devsnek>
ok taking a step back

[07:57:40.0333] <TabAtkins>
Well then you can use JS to figure out what size it needs to be?

[07:57:52.0539] <devsnek>
maybe some sort of option to tell it to use the calculated img style if available

[07:58:05.0779] <devsnek>
opting into weirdness cuz you know the css will be available

[07:58:19.0753] <devsnek>
well the idea i initially had was

[07:58:44.0987] <devsnek>
a react element for cdn assets that automatically knows how to select the correct image type and size using <source> and srcset

[07:59:07.0880] <devsnek>
where you don't have to style it with a size and then duplicate that size info in the js

[08:01:09.0203] <TabAtkins>
Well that's not the problem we were solving 😀

[08:01:48.0242] <devsnek>
so it would seem

[08:02:20.0348] <devsnek>
idk, selecting the right image based on the size of the element seems like a boon

[12:55:55.0558] <GPHemsley>
annevk: Addressed your comments. https://github.com/web-platform-tests/wpt/pull/30403

[12:56:28.0175] <GPHemsley>
jgraham: Your advice requested ^


2021-10-04
[04:40:04.0518] <Jake Archibald>
annevk: much appreciated!

[05:02:27.0930] <Noam Rosenthal>
> <@noamr:matrix.org> Yes I just looked again and indeed I missed your last comments. Will get back to this next week. Thanks!

annevk: this should be addressed now, when you have the time. thanks!

[06:09:29.0039] <hsivonen>
WPT stash docs say that it's read once. Is there any enforcement of against reading twice if the first read fails?

[06:09:52.0830] <hsivonen>
That is, can try to read and write if the read fails?

[06:10:18.0954] <hsivonen>
Should I expect an exception or `None` if there's nothing written and I try to read?

[06:10:47.0543] <hsivonen>
(I'm trying to make a .py file track if it has already been requested)

[06:15:46.0379] <jgraham>
https://searchfox.org/mozilla-central/source/testing/web-platform/tests/tools/wptserve/wptserve/stash.py#190-205 It will return `None` if there's no data. You can also take the lock (using e.g. `with stash.lock:`) if you're doing a get-or-insert operation and are worried about multiple concurrent requests.

[06:36:55.0935] <محسن عبادنژاد>
سلام

[06:37:34.0539] <محسن عبادنژاد>
devsnek: TabAtkins 

[07:10:07.0809] <annevk>
Noam Rosenthal: prolly tomorrow

[07:12:13.0786] <annevk>
Jake Archibald: I was thinking more about browsing context reuse (and potentially annotating with origin) and in a case of A1 navigating to B navigating to A2, if A1 popups C, C should only see B and A2 if nobody is isolated. Otherwise it should only see A1.

[07:13:04.0162] <annevk>
Jake Archibald: Supplying this mainly as an additional data point as to why it seems better to not go down that route.

[07:13:45.0434] <hsivonen>
> <@jgraham_:matrix.org> https://searchfox.org/mozilla-central/source/testing/web-platform/tests/tools/wptserve/wptserve/stash.py#190-205 It will return `None` if there's no data. You can also take the lock (using e.g. `with stash.lock:`) if you're doing a get-or-insert operation and are worried about multiple concurrent requests.

Thanks. I guess I'm relying only on a timer for the making the requests sequential.

[07:14:37.0123] <Jake Archibald>
annevk: yeah, I was initially going to try and make it so A2 could also see C, if A1 and A2 had the same isolation, but it doesn't work for a bunch of reasons.

[07:14:45.0980] <Jake Archibald>
 * annevk: yeah, I was initially going to try and make it so A2 could also see C, if A1 and A2 had the same isolation, but it doesn't work for a bunch of reasons.


2021-10-05
[18:37:34.0483] <sideshowbarker>
looking at https://github.com/mdn/browser-compat-data/pull/12376

[18:38:04.0905] <sideshowbarker>
can somebody remind me what is the WebIDL keyword that replaced the `Transferable` API?

[19:08:05.0351] <sideshowbarker>
nevermind, I found https://html.spec.whatwg.org/multipage/structured-data.html#transferable and https://html.spec.whatwg.org/multipage/structured-data.html#detached

[19:08:38.0835] <sideshowbarker>
…I had just expected to find the definitions of those in the WebIDL spec itself, rather than in the HTML spec

[21:32:24.0985] <Dominic Farolino>
How can a worklet have multiple realms? https://html.spec.whatwg.org/multipage/webappapis.html#worklet-agent

[00:41:54.0152] <annevk>
Dominic Farolino: iirc each script that you add through addModule or equivalent runs in its own realm

[00:42:37.0097] <annevk>
Dominic Farolino: it's a bit different from `<iframe>` in that the realms cannot access each other directly (though they can prolly observe each other)

[01:23:35.0677] <foolip>
https://webidl.spec.whatwg.org/ is up!

[01:24:14.0972] <foolip>
annevk: did you deliberate not replace WebIDL with Web IDL in https://webidl.spec.whatwg.org/#legacy-constructs?

[01:24:38.0351] <Ms2ger 💉💉>
Webi DL

[01:27:36.0944] <annevk>
foolip: I might have forgotten to grep for WebIDL, I can review a follow-up PR 🙂

[02:47:10.0114] <annevk>
Dominic Farolino: can you have a look at https://github.com/whatwg/spec-factory/pull/32 btw?

[03:12:25.0823] <annevk>
Two for one special today: https://testutils.spec.whatwg.org/ by jgraham

[05:00:01.0209] <sideshowbarker>
foolip: annevk About spec frontmatter, to trim down some of the vertical space, I think we should consider:
* using hyperlinked icons rather than hypertext links
* putting the icons on the same line as the title or subtitle
* for GitHub, using only one icon, hyperlinked to the repo URL

[05:01:13.0769] <sideshowbarker>
the rationale for the single GitHub icon is that since GitHub repos all have exactly the same structure, users already know how to get from the base repo URL to the issues list, commit history, etc.

[05:02:28.0379] <sideshowbarker>
so or https://webidl.spec.whatwg.org/ we’d have, at the end of title or subtitle, one GitHub icon and one Twitter icon

[05:03:44.0870] <sideshowbarker>
but tests are a different thing — I think ideally what we should have at the top if each spec is a copy of the corresponding row of test results from wpt.fyi

[05:04:38.0917] <annevk>
Heh, my biases are different! I like the individual links we have toward GitHub. 🙂

[05:05:56.0000] <annevk>
I wouldn't mind entertaining some alternatives to what we have now though, but I'm not entirely convinced a couple of logos is clear enough for everyone.

[05:07:23.0235] <sideshowbarker>
well for W3C specs, we are moving to putting all the frontmatter in a `details` element

[05:08:25.0454] <sideshowbarker>
…and Marcos and I are working on showing some other more-useful spec-specific data at the top

[05:08:39.0298] <sideshowbarker>
…including the test results

[05:09:28.0986] <sideshowbarker>
so for example at the top of the WebIDL spec, we’d have a table showing that  ⬆


[05:09:52.0336] <sideshowbarker>
…except it would also show colors — shades of green and red

[05:10:17.0015] <annevk>
That seems reasonable, but isn't number of open GitHub issues also indicative of quality?

[05:11:04.0081] <annevk>
(Not sure I like `details`. Pretty much the only thing I need when looking at a spec is a way to find filing an issue, but that's my bias I suppose.)

[05:11:22.0217] <sideshowbarker>
> <@annevk:mozilla.org> That seems reasonable, but isn't number of open GitHub issues also indicative of quality?

sure — but then that argues for showing the actual number of open issues at the top of the spec, not just having a link

[05:11:48.0537] <sideshowbarker>
(to show what I mean about the colors)

[05:12:23.0525] <sideshowbarker>
> <@annevk:mozilla.org> (Not sure I like `details`. Pretty much the only thing I need when looking at a spec is a way to find filing an issue, but that's my bias I suppose.)

sure but you need to consider that maybe you’re not a very typical reader of specs

[05:14:14.0033] <sideshowbarker>
I assert that we should be optimizing for the readers who benefit the most from us having the spec frontmatter give them some clear indicators to help them get oriented with the spec 

[05:14:31.0175] <annevk>
Yeah, has W3C done surveys with spec readers? It'd be pretty interesting to know what people are looking for primarily

[05:14:44.0816] <sideshowbarker>
…and I think the readers we should be trying to most to help are typical-developer readers 

[05:14:47.0113] <Ms2ger 💉💉>
Weighted by number of hours per week looking at specs

[05:15:53.0458] <sideshowbarker>
> <@annevk:mozilla.org> Yeah, has W3C done surveys with spec readers? It'd be pretty interesting to know what people are looking for primarily

no surveys have been done of this kind, as far as I know — I think foolip might be the a good person to put together such a survey in the right way

[05:17:06.0584] <sideshowbarker>
other thing I we should add to all our specs is a Can I Use table like the ones that Respec specs now have

[05:17:13.0267] <sideshowbarker>
example https://w3c.github.io/geolocation-api/

[05:19:39.0260] <sideshowbarker>
…of course those tables are lot more interesting in the case of specs that aren’t implemented in all engines — so you get some red and orange and yellow in there too

[05:20:18.0938] <sideshowbarker>
…and it’s dynamic — you can hover to get more browser-version info

[05:21:03.0293] <sideshowbarker>
anyway, I plan to get that Can I Use table generation added to Bikeshed as a feature

[05:21:42.0601] <sideshowbarker>
and Marcos and I will be working on getting the wpt.fyi table generation added to both Respec and Bikeshed

[05:22:37.0585] <sideshowbarker>
…and soon all W3C specs by default will have all the other frontmatter collapsed by default

[05:22:42.0999] <sideshowbarker>
example https://w3c.github.io/webappsec-mixed-content/

[05:23:52.0706] <sideshowbarker>
collapsing all that other frontmatter into `details` gives room for the Can I Use and wpt.fyi tables to actually show up above the fold — in the initial viewport, without readers needing to have to know to scroll down to see those

[05:24:59.0344] <sideshowbarker>
anyway, that’s just an idea dump that I mention here after taking a first look at the WebIDL and Test Utils specs

[05:55:16.0169] <foolip>
> <@sideshowbarker:mozilla.org> no surveys have been done of this kind, as far as I know — I think foolip might be the a good person to put together such a survey in the right way

I have almost exclusively been dealing with web developer surveys, but if it's web developers reading specs that is the audience, then maybe I could be useful. Anyone who things so feel free to email me :)

[06:03:13.0301] <annevk>
foolip: if we could get them + browser developers (e.g., email webkit-dev, dev-platform, and blink-dev to please also fill it out), we'd have a pretty good start I think

[07:38:18.0090] <TabAtkins>
Okay I was excited about WebIDL moving to whatwg, but I'm much less excited about the CSS regressions. No more persistent ToC really sucks for a spec that you often bounce around semi-randomly in.

[07:42:26.0473] <Luca Casonato>
> <@tabatkins:matrix.org> Okay I was excited about WebIDL moving to whatwg, but I'm much less excited about the CSS regressions. No more persistent ToC really sucks for a spec that you often bounce around semi-randomly in.

Yeah, I agree. The spec is a lot less usable for me because of this. I often jump around between headings in "Interface definition language" and "ECMAScript binding", and that now involves a lot of scrolling.

[07:42:42.0441] <Luca Casonato>
Also dark mode being gone is unfortunate.

[07:44:31.0867] <Luca Casonato>
Also felt the "old" design was more readable because the center container was less wide. Now I have to resize the browser window to make it somewhat readable (like I already do with `fetch` and HTML specs)

[07:46:39.0364] <annevk>
This was mentioned before in https://github.com/whatwg/meta/issues/117 though it didn't really get traction. I'd be open to changing this, but not really sure I have the bandwidth to drive it at the moment.

[07:47:24.0225] <annevk>
I guess the trick would be to sufficiently scope it and try not to address all the styling issues 🙂

[07:48:16.0680] <Luca Casonato>
Yup

[07:48:52.0690] <Luca Casonato>
I'd personally vote for side-ToC being more important, as the max-width can easially be "resolved" by just making the entire viewport less wide. 

[07:49:03.0664] <TabAtkins>
I filed an issue with the three styling issues that seem most unfortunate to me from the change

[08:26:30.0956] <TabAtkins>
gonna just file a PR that's the Bikesheed stylesheet but with the colors changed to green


2021-10-06
[02:23:05.0305] <annevk>
Twitter integration started working as well after participate.whatwg.org got deployed: https://twitter.com/webidl/status/1445673751962476557

[12:29:50.0370] <wanderview>
weird bikeshed issue in the fetch spec:

[12:30:07.0175] <wanderview>
if you click on the "tainted origin flag" definition here: https://fetch.spec.whatwg.org/#concept-request-tainted-origin

[12:30:18.0139] <wanderview>
it gives you a list of places where its referenced

[12:30:41.0853] <wanderview>
except it doesn't show the reference here: https://fetch.spec.whatwg.org/#serializing-a-request-origin

[12:30:58.0448] <wanderview>
is that because "serializing a request origin" is not in an algorithm div?

[14:34:42.0458] <Domenic>
It shows for me, (2) under "2.2.5. Requests"


2021-10-07
[23:43:52.0759] <annevk>
hsivonen: I'm curious if you have thoughts about https://github.com/annevk/orb/issues/7#issuecomment-933275068. The context here is that we get a response from the network, attempt to parse it as JavaScript in some utility process, and then only if that succeeds, we let it enter the content process. For maximum compatibility we'd have to forward the encoding along with the request, but that also means attackers might be able to get more things to parse as JavaScript (in theory). Given that most of the syntax is ASCII, is that a problem? Is UTF-16 a problem?

(Anyone else who has thoughts is of course also welcome to share them.)

[00:46:03.0478] <Noam Rosenthal>
Hi annevk. I'm contemplating about the HTML/fetch integration with resource timing. Most of the resources there load the entire resource at once, e.g. creating a source text for a script from a response body. Should they be using `process response end-of-body`, or is that reserved for fully synchronous things such as sync XHR and they should use `process response`?

[00:49:26.0464] <annevk>
Noam Rosenthal: I think it would be fine for them to use that, yes

[00:50:37.0916] <annevk>
Noam Rosenthal: all the callbacks are "async" and don't block the main thread; the only thing is that would imply stuff isn't processed incrementally, but implementations are allowed to do that under the covers, as long as it's not observable directly (observing via better perf is fine)

[00:51:08.0299] <annevk>
https://infra.spec.whatwg.org/#algorithm-conformance talks a bit about that after the example.

[00:55:40.0546] <Noam Rosenthal>
gotcha, thanks annevk 

[09:30:09.0389] <timothygu>
Do we know who triple-underscore is and how they have so much time translating specs?

[09:33:17.0587] <annevk>
timothygu: I think they have some kind of system in place for translation that makes it more straightforward, but no, I don't know

[09:33:29.0080] <annevk>
timothygu: they're also very good at spotting mistakes with recent changes

[13:08:26.0281] <timothygu>
annevk: I'm trying to understand the reason why we don't allow URLs to change scheme from special to non-special through the `protocol` setter. https://github.com/whatwg/url/commit/5533c8d91e17fc81fc8a16a16af9155bf940aca8 says it's to support relative non-special URLs, but I'm not sure how it factors into special to non-special

[13:09:09.0570] <timothygu>
And similarly, what's bad about allowing `new URL(schm://host.com/hello).protocol = 'http'`?

[15:05:58.0626] <jschoi>
> <@annevk:mozilla.org> timothygu: I think they have some kind of system in place for translation that makes it more straightforward, but no, I don't know

Wow, they’ve even translated The Complete Lojban Language to Japanese. Now that’s impressive. 
What a mysterious character…

[15:07:05.0769] <jschoi>
* > <@annevk:mozilla.org> timothygu: I think they have some kind of system in place for translation that makes it more straightforward, but no, I don't know

Wow, they’ve even translated The Complete Lojban Language to Japanese. Now that’s impressive. 
What a mysterious character…


2021-10-08
[21:43:53.0671] <annevk>
timothygu: say you have schem://host.com and then set it to http, would you add a path? or you have blob:blah and set to http, what then? I forgot why the reverse is disallowed, might have made things easier for Location or perhaps just for consistency 

[21:46:41.0994] <timothygu>
Is there anything bad about saying "yes" to adding a path? Though it's reasonable to require a host for the non-special URL (else it's a no-op)

[21:53:44.0168] <timothygu>
annevk: ^^

[21:57:09.0569] <annevk>
timothygu: note that the host would also have to be reparsed or some such, they're just not compatible

[21:58:00.0798] <timothygu>
annevk: oh right…

[06:38:47.0548] <hsivonen>
The HTML spec has explicit support for a character encoding menu, but only WebKit-based browsers still have it. I think we should just hand-wave it instead of working it into the algorithm. (If we work it into the algorigthm, I think we should write down the security characteristics of Gecko's implemenatation instead of writing down WebKit's approach.) Opinions?

[06:40:20.0802] <hsivonen>
In Gecko, as far as the algorithm is concerned, there is now a "force detector" flag.

[09:27:40.0157] <annevk>
smaug: Edgar Chen: timothygu: interesting IDL issue here: https://github.com/web-platform-tests/wpt/issues/31125. It seems that EventHandler should not accept non-callable objects (at least not without them getting wrapped), but in implementations it appears that it does. Am I missing something here? It's hard to believe this was overlooked for so long.

[09:42:35.0511] <Andreu Botella (he/they)>
I was just looking into that yesterday

[09:55:38.0217] <annevk>
Thanks. I'm still lost at how to read that IDL conversion thingie, but it does seem the other pieces add up at least

[09:57:09.0621] <Andreu Botella (he/they)>
The wording is tricky, but it seems to say that, in any case other than `[LegacyTreatNonObjectAsNull]`, converting non-callable objects will throw

[10:06:37.0806] <annevk>
Yeah, it's coming back to me now. So nice that every five years to a decade you get to learn silly things anew.

[10:23:39.0773] <annevk>
Thanks a lot for the help!


2021-10-09
[08:21:41.0927] <Dominic Farolino>
Why are streams exposed to worklets?

[13:17:32.0810] <Domenic>
> <@domfarolino:matrix.org> Why are streams exposed to worklets?

They are pure computation data structures, similar to e.g. Map or Array.

[16:57:09.0252] <sideshowbarker>
https://stackoverflow.com/questions/69494129/how-to-leverage-back-forward-cache-on-popstate-event-fetch


2021-10-10
[10:53:05.0403] <Domenic>
That question doesn't really make sense... I don't know what "leverage" means.

[10:53:34.0527] <Domenic>
bfcache is for cross-document navigations, popstate is for same-document navigations, so maybe the answer is "no"?


2021-10-12
[18:40:40.0646] <msmith12>
Hi all

[18:40:57.0017] <msmith12>
Just sumbitted patch, hopefully its the start of something great

[23:02:13.0258] <Noam Rosenthal>
Good morning annevk, some longish morning thought. I was thinking a lot about the fetch/timing integration. Maybe it was not right to associate the timing info with a response? A response is something that can be shared between fetches (service workers, cache), and would have different timing in each fetch context as some of the timing is measured before the response is created. Perhaps reporting the timing should be a method of the fetch instance rather than the response, and all the "attaching" is not necessary? Contemplating https://github.com/whatwg/fetch/issues/1208 and https://github.com/whatwg/fetch/issues/1215

[23:03:56.0713] <sideshowbarker>
Noam Rosenthal: by the way, thanks much for doing that PR for proper Fetch integration into CSS

[23:11:36.0151] <Noam Rosenthal>
> <@sideshowbarker:mozilla.org> Noam Rosenthal: by the way, thanks much for doing that PR for proper Fetch integration into CSS

Pleasure, it felt necessary 

[23:12:13.0770] <sideshowbarker>
yeah it was kind of long overdue

[23:13:14.0844] <sideshowbarker>
and for any given spec, it’s not trivial to figure how to call into the Fetch algorithms in the right way

[23:14:41.0137] <sideshowbarker>
*for any given request scenario

[23:47:35.0439] <Noam Rosenthal>
trying to figure it out for multiple specs... For the CSS one it's a bit of a one-size-fits all because there are no load/error events, but still there are issues with referrers and CORS etc.

[00:09:15.0512] <annevk>
Noam Rosenthal: I guess conceptually you'd want fetch to return a response and timing info, but since the handshake is fetch(request) -> response it's hard to change that

[00:09:29.0302] <annevk>
Noam Rosenthal: though maybe it's changeable more easily now that we have callbacks

[00:10:17.0777] <annevk>
Noam Rosenthal: the other thing we probably still want to do at some point is FetchObserver (there's an issue if you search for this), which would also be a somewhat natural point to expose this on

[00:12:57.0990] <Noam Rosenthal>
annevk: Fetch doesn't really return anything, but rather takes in callbacks that accept responses. I think that it could return some controller object that represents the fetch instance, which could have things like "report resource timing"

[00:13:46.0908] <annevk>
Noam Rosenthal: sure, I meant at a high-level, but yeah, at a concrete level I suspect we'd want to return the controller directly

[00:14:02.0115] <annevk>
Noam Rosenthal: that would also give us a way to do abort more cleanly

[00:14:11.0866] <annevk>
Noam Rosenthal: that's probably what I'd want to start with

[00:14:26.0443] <Noam Rosenthal>
it would be easy to hook that return value into the fetch caller for the purposes of resource timing

[00:15:15.0980] <annevk>
We'd still want to use the timings of the callbacks to expose the information, though

[00:15:18.0176] <Noam Rosenthal>
I guess the idea of FetchObserver is conceptually that? I'll check the issue

[00:15:58.0484] <Noam Rosenthal>
yes, the callbacks will be there in the same way, but there will be no "attaching timing info to a response"

[00:16:00.0595] <annevk>
Noam Rosenthal: yeah, FetchObserver is/was for progress events and HTTP/2 push, but the latter died and there was never enough interest in the former (and it can be polyfilled using streams)

[00:16:22.0636] <annevk>
Yeah, we'd attach it to the controller

[00:16:45.0097] <Noam Rosenthal>
I think the controller will have access to the fetch params

[00:17:18.0163] <Noam Rosenthal>
like a public facade for stuff you can do with things from the fetch params

[00:17:45.0856] <annevk>
Yeah, I think we'd want a facade of sorts (or asserts) to ensure specs don't do weird things

[00:18:04.0951] <Noam Rosenthal>
Great, let me jot down something

[00:51:41.0788] <Noam Rosenthal>
this would also make it possible to update resource timing entries after they're created, e.g. if in the future we would want to spec that a `video` resource timing entry is created when the response is ready but updated with its `responseEnd` when it's done

[01:19:18.0752] <annevk>
Noam Rosenthal: I think in principle that should be possible either way, but this might make it easier

[01:19:41.0982] <Noam Rosenthal>
yea exactly

[01:20:10.0931] <annevk>
Noam Rosenthal: now that you mention it though, how do we account for media elements currently? They always make range requests so they get responses quite quickly. The spec for them doesn't quite reflect this (or at least not in sufficient detail)

[01:20:40.0141] <annevk>
I guess the current setup might end up with an entry per range request potentially?

[01:22:46.0887] <Noam Rosenthal>
annevk: currently in the spec, that integration is not done yet. I need to research how it's done in implementations. I wanted to have a good infrastructure with the simpler requests first

[01:40:10.0740] <Noam Rosenthal>
annevk: https://github.com/whatwg/fetch/pull/1329

[01:56:14.0801] <Noam Rosenthal>
annevk: btw, I think also `cacheState` and `timing allow passed flag` should be associated with a fetch and not with a response, for the same reasons. It's not clear how they're forwarded from service workers or restored from cache

[01:58:37.0455] <annevk>
By restored from cache you mean restored from the Cache API? That might make sense. There's a general issue with that API not getting as much attention as it deserves.

[02:13:21.0207] <Noam Rosenthal>
annevk: I meant also from HTTP cache. It's not spec`ed how those responses are stored, and as far as the spec is concerned the response stored in the cache is a reference to the same one that's restored.

[02:16:19.0011] <annevk>
Noam Rosenthal: well, but we always set this field when we pull something from the cache

[02:17:03.0318] <Noam Rosenthal>
annevk: right, but we set it *on the response*, which could mean setting it on the original response also. I think there is a related Chrome bug about exactly this

[02:17:49.0190] <Noam Rosenthal>
e.g. if you store a response to cache and retrieve it before it's done, both responses would get the same cacheState

[02:17:50.0378] <annevk>
I think I'm missing how it's observable

[02:18:05.0670] <annevk>
Aah

[02:19:21.0373] <annevk>
Presumably we should take a copy when storing it in the cache (or take a copy when forwarding).

[02:19:43.0074] <annevk>
In theory that also seems problematic for reading the body for instance (which can only happen once).

[02:21:20.0305] <Noam Rosenthal>
yes, and I added a non-normative note as such

[02:21:52.0650] <Noam Rosenthal>
Ah actually it was something else, got mixed up

[02:22:28.0163] <Noam Rosenthal>
It's presumably a copy, but it's not formally a copy, and there is no definition of what a "response copy" is

[02:24:51.0558] <Noam Rosenthal>
which, I believe, fudges some things in existing implementations when response objects are shared between fetches

[02:28:49.0584] <annevk>
Hmm, how did https://twitter.com/htmlstandard/status/1447820555760005122 get tweeted?

[02:31:33.0444] <annevk>
Ah, I forgot to remove a leading space when squashing. Good times.

[02:54:44.0897] <Noam Rosenthal>
annevk: updated the PR, now timing/TAO/cacheState are all part of fetch params and accessible through a controller. Regarding `body` I'll open a separate issue, I'm less familiar with it.

[03:10:48.0847] <annevk>
Noam Rosenthal: note that if you're moving cacheState we'll need to update SW too

[03:11:34.0479] <annevk>
Noam Rosenthal: doing this in smaller steps would make it a little easier to ensure nothing is missed

[03:24:15.0002] <Noam Rosenthal>
> <@annevk:mozilla.org> Noam Rosenthal: doing this in smaller steps would make it a little easier to ensure nothing is missed

Ok, I can start with a version that still assigns cacheState to a response

[04:56:35.0723] <Noam Rosenthal>
Actually, this might be more complex... not sure if on some cases RT users rely on  resource-timing being per response rather than per-fetch, need to clarify with the working group

[05:05:37.0863] <annevk>
Noam Rosenthal: you mean when requests are coalesced? There's also a question to what extent we want to expose that

[05:07:08.0088] <annevk>
TabAtkins: have you considered linting / auto formatting for Bikeshed at some point? That would help a lot with spec PRs potentially.

[05:08:21.0556] <Noam Rosenthal>
annevk: : I mean, for example, when a service worker forwards a network response. Should the connection info be available only inside the context of the service worker, or should it be part of the resource entry of the document? Same for resources that were fetched early in the document and then accessed from cache.

[05:09:26.0511] <Noam Rosenthal>
I personally believe the cleanest solution that doesn't lose any info would be that a Resource Timing Entry is mapped 1:1 to a fetch, but I have to see with the WG whether there are other expectations or existing implementations that counter this

[05:09:33.0119] <annevk>
Noam Rosenthal: I thought we had some forwarding of service worker data already?

[05:11:08.0301] <Noam Rosenthal>
annevk: the service worker timing info itself is extra information available to navigations. What we forward from the service worker for non-navigation resources is a response. Since that forwarding happens before fetch-finale, that response's timing info gets overwritten by the document's fetch

[05:16:30.0541] <annevk>
I see, there is some complexity there as some service worker responses might not yet carry timing info, so any change would have to be considered carefully

[05:38:22.0243] <Noam Rosenthal>
annevk: are "flags" in the fetch spec considered atomic? I didn't see information about this in `infra`

[05:46:05.0178] <annevk>
Noam Rosenthal: no, jyasskin has brought this up here and there and Jake Archibald too. Saying it's atomic when using it is probably sufficient for now.

[05:46:59.0210] <Noam Rosenthal>
Ok, so something like "atomically test and set" this or that.

[05:53:57.0684] <Noam Rosenthal>
annevk: the integrity case, btw, does not present a race condition. Fetch finale is only called after the integrity is verified

[05:54:49.0243] <Noam Rosenthal>
I believe there is actually no race condition. The "process response" steps are only called from within fetch finale. The flag setting doesn't need to be atomic

[05:57:16.0137] <annevk>
Noam Rosenthal: what ends up calling finalize in the integrity case?

[05:58:08.0759] <Noam Rosenthal>
annevk: the integrity algorithm itself once its done

[05:58:21.0100] <Noam Rosenthal>
you mean fetch finale

[05:58:57.0309] <annevk>
No, I meant finalize

[05:59:56.0080] <Noam Rosenthal>
annevk: right now, processing the body for the sake of integrity will call `finalize response` when it's done. but that would happen before the fetch finale, not in a race

[06:01:19.0397] <Noam Rosenthal>
the whole integrity sequence is done before fetch finale, so if the callback is attached in fetch finale, there is no race

[06:01:42.0226] <annevk>
Noam Rosenthal: if the callback is attached in fetch finale, how could it be invoked before?

[06:02:10.0117] <Noam Rosenthal>
annevk: it should not be invoked before. The callback is only valid for the actual response handling, not for verifying integrity

[06:02:41.0770] <annevk>
Noam Rosenthal: agreed, but finalize does need to run

[06:03:04.0246] <Noam Rosenthal>
annevk: it would run as the response body is read again inside `process response` or one of those

[06:03:32.0260] <annevk>
Noam Rosenthal: I don't think so, why?

[06:04:16.0640] <Noam Rosenthal>
ah I see what I've missed. the body is set by integrity and not read again

[06:04:58.0942] <Noam Rosenthal>
it's still not a race, fetch finale should finalize if body has already been read

[06:05:10.0175] <annevk>
That body read wouldn't trigger finalize either though, because finalize is only called by fetch finale and the network stack

[06:06:16.0113] <annevk>
And process response done only cares about the network stack being done, so finalize can be invoked by fetch finale if the network stack is already done. (Which I think is what I wrote down in my rather lengthy comment.)

[06:06:49.0413] <Noam Rosenthal>
ok, took me a while to process. got it now hopefully

[06:08:38.0649] <Noam Rosenthal>
process response done is something like "the latter between `fetch finale` and `network stack is done`, which are racy"

[06:08:39.0233] <annevk>
Yeah, I want additional review for it as well as I noted. This stuff is not fun 🙂

[06:09:10.0626] <Noam Rosenthal>
I'm actually having fun

[06:39:21.0620] <Noam Rosenthal>
annevk: ok my new version maybe handles it better. I have two flags, "network read complete" and "ready for clients", and only when both are set we dispatch "process response done"

[06:39:59.0151] <Noam Rosenthal>
they're not atomic as it's not really a thread issue. Body is read either before fetch finale (in integrity checking) or after (as a result of process response)

[07:41:37.0981] <annevk>
Noam Rosenthal: well, there are two "threads"

[07:53:29.0364] <Noam Rosenthal>
annevk: but the second "thread" only starts after we set the "ready for clients" flag, so it's not in a race

[07:56:21.0356] <annevk>
Noam Rosenthal: there's the fetch thread and there's the "receiving body bytes from the network" thread (and there's the main thread, which would be a third); I'm pretty sure the first two can race

[07:56:38.0836] <annevk>
 * Noam Rosenthal: there's the fetch thread and there's the "receiving body bytes from the network" thread (and there's the main thread, which would be a third); I'm pretty sure the first two can race

[08:17:21.0968] <Noam Rosenthal>
annevk: Ah I see, the network bytes keep running even if there is no "process response done". ok

[08:17:31.0232] <Noam Rosenthal>
more fun

[08:30:52.0985] <annevk>
Jake Archibald: sideshowbarker: https://github.com/whatwg/fetch/pull/1330 might be of interest

[14:03:48.0194] <msmith12>
annevk: i will resubmit patch thanks


2021-10-13
[19:24:31.0945] <sideshowbarker>
> <@annevk:mozilla.org> Jake Archibald: sideshowbarker: https://github.com/whatwg/fetch/pull/1330 might be of interest

Thanks for the heads-up about that. I think it’s a great addition that’ll be quite helpful — but I took the opportunity to suggest we consider dropping the existing statement that encourages sending 403 errors for the “opting out of CORS” case.

[19:25:37.0950] <sideshowbarker>
and  don’t think anybody mentioned https://jakearchibald.com/2021/cors/ here yet, but everybody who cares anything about CORS should really read that

[23:47:13.0813] <Noam Rosenthal>
annevk: I think I found a good solution for the race-condition thingy (https://github.com/whatwg/fetch/pull/1311/files). Using existing queues for synchronization instead of introducing atomic lingo. Hope this works :)

[01:31:45.0633] <sideshowbarker>
Jake Archibald: By the way, about CORS pain points for developers, from what I’ve observed in the thousands of Stack Overflow CORS questions I’ve read, by far the single biggest pain point is that developers see a CORS error get logged in the devtools console and assume the cause is some problem with the CORS config on the server side — when in fact, the real problem is that the response is 400 or 500 error or other 4xx/5xx error

[01:32:29.0299] <sideshowbarker>
but, browsers don’t log those 4xx/5xx errors to the devtools console, so all that the developers see is the CORS error

[01:33:43.0405] <sideshowbarker>
so they reasonably assume the cause is some CORS-config issue, and then each of those developers spends literally hours trying to figure out what they got wrong in their CORS config

[01:34:27.0150] <hsivonen>
I've now tweaked https://github.com/whatwg/html/pull/7205 after reading it again after sleeping overnight between writing and reading. It could use spec-ese review. In particular, review of how the tree builder parts connect by reference to metaParser instead of minting a new concept for the thing that metaParser is.

[01:35:05.0217] <hsivonen>
I integrated the byte pattern analysis bits in this changeset, because it seemed silly not to.

[01:35:50.0776] <hsivonen>
The byte pattern analysis bits are intentionally vague enough to permit what Chrome does.

[01:36:03.0978] <sideshowbarker>
Jake Archibald:  and multiply that by probably at least some hundreds of developers (but maybe even more like thousands) every day who go through that dance, and the result is a massive amount of time we are causing developers to waste by leading them to chase after problems in the wrong place

[01:56:29.0539] <Jake Archibald>
sideshowbarker: is it a preflight response in those cases, or also the main request?

[02:01:57.0182] <annevk>
sideshowbarker: geez Mike, that's a lot of comment

[02:02:44.0479] <annevk>
/me has some more tea

[02:12:59.0968] <sideshowbarker>
> <@jakea:matrix.org> sideshowbarker: is it a preflight response in those cases, or also the main request?

Both for the preflight and for the actual request

[02:13:06.0982] <sideshowbarker>
> <@annevk:mozilla.org> sideshowbarker: geez Mike, that's a lot of comment

sorry…

[02:13:39.0387] <annevk>
If the server gives a 4xx or a 5xx to a preflight, that does indicate there's a server issue though.

[02:13:57.0659] <Jake Archibald>
Depends if you count 404 as a server issue

[02:14:17.0548] <annevk>
And if it gives it to a non-preflight, but doesn't include the necessary CORS headers, that could be a server issue, depending on whether they want to partake.

[02:14:32.0836] <annevk>
Jake Archibald: I was assuming the request was made correctly.

[02:15:15.0053] <Jake Archibald>
I think the cases sideshowbarker is referring to involves an incorrect request, but the CORS error makes it look like an incorrect response.

[02:16:12.0996] <Jake Archibald>
Kinda funny that if you want the page to get access to a 404, the prelight needs to return a not-404

[02:16:19.0904] <Jake Archibald>
I don't have a better idea though

[02:17:16.0256] <Jake Archibald>
(other than ignoring the status code)

[02:17:23.0856] <sideshowbarker>
by thy way, for *“Access to 'foo' from origin 'bar' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: It does not have HTTP ok status”*, I don’t understand why that message doesn’t have “The HTTP status was 4xx” — that is, just make that message show the actual status code, rather than *“does not have HTTP ok status”*. Knowing the actual status code there would be way more helpful to developers. It would cut out the additional step they otherwise to do, to go to the Network tab and check the response.

[02:17:42.0743] <sideshowbarker>
> <@jakea:matrix.org> I think the cases sideshowbarker is referring to involves an incorrect request, but the CORS error makes it look like an incorrect response.

Exactly that, yes

[02:17:50.0997] <sideshowbarker>
very commonly, a 400 Bad Request

[02:18:16.0730] <sideshowbarker>
well, but that said, also quite commonly, a 500 or 502

[02:19:10.0407] <sideshowbarker>
anway, I don’t understand why browsers can’t include the exact status code in every CORS errors message — or if they can, why they aren’t doing that

[02:20:14.0178] <sideshowbarker>
it would especially be more helpful for the error messages for the actual response (not just the preflight)

[02:21:01.0795] <annevk>
Well, we don't want to expose it directly to web content as that would violate SOP.

[02:21:18.0315] <sideshowbarker>
yeah I don’t mean exposing it to web content

[02:21:24.0772] <annevk>
We could expose it to DevTools probably and I think some might do that, but perhaps not to the extent that's desired.

[02:21:40.0641] <sideshowbarker>
I mean just logging it to the devtools console

[02:21:57.0862] <annevk>
Did you file bugs? I think we're pretty open to changing these messages.

[02:22:12.0565] <sideshowbarker>
well it’s not a spec issue, right?

[02:22:19.0802] <sideshowbarker>
it’s a browser issue

[02:22:36.0570] <annevk>
Right, https://bugzilla.mozilla.org/enter_bug.cgi?product=Core 🙂

[02:22:43.0333] <sideshowbarker>
OK

[02:22:48.0734] <sideshowbarker>
yeah I will file bugs

[02:23:20.0395] <annevk>
Cool! DOM: Networking is the component for us btw

[02:23:31.0372] <sideshowbarker>
hai

[02:26:09.0826] <Jake Archibald>
I added a note about the 404 gotcha to the article https://github.com/jakearchibald/jakearchibald.com/commit/555bf50d039a510cba41b12dbd6b5606d5f09730

[02:27:59.0443] <Jake Archibald>
sideshowbarker: can you file an issue for Chrome too? Or give me the issue you file for Mozilla and I'll copy it over

[02:28:38.0149] <sideshowbarker>
> <@jakea:matrix.org> sideshowbarker: can you file an issue for Chrome too? Or give me the issue you file for Mozilla and I'll copy it over

Yup, I’ll file one for Chrome and for Safari too

[02:28:44.0506] <Jake Archibald>
Cheers

[02:28:59.0377] <Ms2ger 💉💉>
Looks like drafts.csswg.org is failing to serve tests again

[02:29:28.0524] <Jake Archibald>
Ms2ger 💉💉: the specs are gone too

[02:29:39.0959] <Ms2ger 💉💉>
Also I can't type

[02:29:43.0410] <Ms2ger 💉💉>
s/tests/specs/

[02:29:47.0216] <Jake Archibald>
sideshowbarker: in case you need a demo of the preflight issue https://jakearchibald.com/2021/cors/playground/?prefillForm=1&requestMethod=GET&requestUseCORS=1&requestSendCredentials=&preflightStatus=404&preflightAllowOrigin=&preflightAllowCredentials=&preflightAllowMethods=&preflightAllowHeaders=&responseAllowOrigin=*&responseAllowCredentials=&responseExposeHeaders=&requestHeaderName=foo&requestHeaderValue=bar

[02:37:05.0762] <sideshowbarker>
> <@ms2ger:igalia.com> Looks like drafts.csswg.org is failing to serve tests again

If you raise an issue in the GitHub issue tracker, that usually makes it get fixed very quickly 

[02:37:50.0033] <Ms2ger 💉💉>
Where? csswg-drafts?

[02:44:46.0363] <sideshowbarker>
yeah https://github.com/w3c/csswg-drafts is where I have always raised it (_N_ number of times…)

[02:52:56.0166] <annevk>
api.csswg.org (WHATWG uses it for Bikeshed) was also unreliable the other day

[07:00:10.0070] <jgraham>
If I'm at https://example.com#foo and I do `location.href = location.href`, what prevents that creating a new history entry?

[07:00:25.0946] <jgraham>
 * If I'm at https://example.com#foo and I do `location.href = location.href`, what prevents that creating a new history entry?

[09:55:00.0935] <annevk>
jgraham: nothing in theory, but we did notice the other day that Chromium (and maybe WebKit) has an early return for setting hash to the same value; didn't really test if that applied to other setters though

[09:58:00.0654] <annevk>
https://bugzilla.mozilla.org/show_bug.cgi?id=1733797


2021-10-14
[22:51:11.0961] <Andreu Botella (he/they)>
is there any reason this WPT test doesn't test that `SharedArrayBuffer`s have the same backing block when posted to workers and iframes and back?

[22:51:13.0272] <Andreu Botella (he/they)>
https://github.com/web-platform-tests/wpt/blob/master/html/infrastructure/safe-passing-of-structured-data/shared-array-buffers/identity-not-preserved.https.html

[23:37:19.0199] <annevk>
Andreu Botella (he/they): I suspect separation of concerns, but when Domenic is back he might be able to recall

[23:39:50.0345] <Andreu Botella (he/they)>
`assertSABsHaveSameBackingBlock` already tests that the objects aren't identical, so I don't think that's the case

[23:40:45.0624] <Andreu Botella (he/they)>
 * `assertSABsHaveSameBackingBlock` in the same window case already tests that the objects aren't identical, so I don't think that's the case

[23:41:02.0817] <Andreu Botella (he/they)>
 * `assertSABsHaveSameBackingBlock` in the same window subtest already tests that the objects aren't identical, so I don't think that's the case

[00:11:33.0104] <annevk>
Fair, perhaps there was/is no utility for an equivalent assert across agents? Seems like that would have to involve at least some additional message passing.

[00:12:09.0268] <annevk>
Or maybe you just want to assert it on the sab you get back?

[00:12:35.0367] <annevk>
Seems okay to add

[00:14:23.0873] <Andreu Botella (he/they)>
I mean, there are other WPT tests that properly test that SABs in fact share their backing block, not to mention test262 tests

[00:14:41.0540] <Andreu Botella (he/they)>
But it seems odd to test that for same-window postMessaging but not for workers and iframes

[03:27:08.0690] <ntim>
Ms2ger 💉💉or foolip hey, can you please force merge https://github.com/web-platform-tests/wpt/pull/31230 ? It's currently affected by https://github.com/web-platform-tests/wpt/issues/31231

[03:27:27.0101] <ntim>
/me needs to import the test into WebKit

[03:27:44.0496] <Ms2ger 💉💉>
I guess I can!

[03:27:57.0708] <ntim>
thanks!

[04:41:11.0993] <ntim>
Ms2ger 💉💉: can you also please merge https://github.com/web-platform-tests/wpt/pull/31234 ? Thanks :)

[04:41:34.0514] <ntim>
or jgraham ^

[05:02:38.0754] <ntim>
i normally can push, but https://github.com/web-platform-tests/wpt/issues/31231 is preventing me too, only a core team person can bypass that

[05:02:50.0679] <ntim>
 * i normally can push, but https://github.com/web-platform-tests/wpt/issues/31231 is preventing me too, only a core team person can bypass that

[05:04:29.0252] <ntim>
hmm looks like https://github.com/web-platform-tests/wpt/pull/31236 is not affected

[05:06:54.0494] <ntim>
but it also does not run that task

[05:45:51.0167] <Sam Sneddon [:gsnedders]>
ntim: https://matrix.to/#/#wpt:matrix.org is probably the best place for this FTR

[05:49:24.0939] <Ms2ger 💉💉>
31231 is fixed

[06:17:58.0669] <Noam Rosenthal>
Hi Domenic , I hope I can get some of your quality time for HTML spec reviews when you get a chance... https://github.com/whatwg/html/pull/7153 and https://github.com/whatwg/html/pull/7166. thanks!

[07:02:42.0183] <Jake Archibald>
annevk: do Firefox and Safari key the HTTP cache on credentials include/omit?

[08:12:03.0484] <annevk>
Jake Archibald: Firefox does, not sure about Safari; see https://github.com/whatwg/fetch/issues/1253 and linked issue

[09:10:04.0486] <Jake Archibald>
Ta

[09:11:48.0056] <Jake Archibald>
annevk: seems like Safari does from my testing, but it might be other isolation stuff achieving roughly the same thing. I updated https://jakearchibald.com/2021/cors/#is-it-safe-to-expose-resources-via-cors to make it clear a `Vary` header is needed in this case (I previously thought it was only needed for with-credentials CORS)

[09:33:17.0571] <annevk>
Jake Archibald: are you testing cross-site or cross-origin same-site? With the former I'd expect cookie blocking to kick in

[09:39:38.0229] <Jake Archibald>
annevk: it was cross-site, but I had the site in an iframe so it'd pick up a double-keyed cookie. tbh I don't really know how Safari works with this stuff since it isn't spec'd :(

[09:39:50.0602] <annevk>
btw, lunch for whoever makes up a term for cross-origin same-site that's usable

[09:40:04.0023] <annevk>
Jake Archibald: Safari doesn't double-key them, they block 'm

[09:40:16.0325] <Jake Archibald>
hah oh well

[09:43:03.0007] <annevk>
The basic Safari model is that they double-key cross-site storage always, and cross-site cookies are blocked. And you can get cookies back with requestStorageAccess().

[09:44:08.0494] <annevk>
The basic Firefox model is that we double-key cross-site storage and cookies, and requestStorageAccess() gives you the unpartitioned bits of both. But we're considering going closer to Safari, at least for storage. (And potentially to what wanderview is proposing, with the keying being more akin to SameSite cookies, but that's a bit further away I think.)

[12:31:18.0178] <Andreu Botella (he/they)>
blog.whatwg.org is down for me

[15:17:44.0218] <Domenic>
> <@andreubotella:mozilla.org> blog.whatwg.org is down for me

https://github.com/whatwg/misc-server/issues/163

[15:20:10.0422] <Domenic>
10% uptime today, wtf

[15:21:44.0960] <Domenic>
Will kick the redeploy button, but ugh


2021-10-15
[18:33:05.0172] <Nick Johnstone>
Hiya. Possibly a silly question, but I'm implementing bindings for a WebAssembly powered mruby framework, and I was wondering where I can download .idl files for WHATWG specs. I've had a hunt around but struggled to find any downloads. Is the intention to parse the spec itself to create the .idl files?

[18:35:47.0954] <Nick Johnstone>
Ohh I had just been looking through the WebIDL docs, hadn't realized that the IDL is just at the bottom of the file in each spec. Should be fairly easy to grab.

[18:36:54.0588] <Andreu Botella (he/they)>
https://github.com/w3c/webref/tree/main/ed/idl has continuously-updated IDL files for every spec, not just WHATWG ones

[18:37:11.0130] <Nick Johnstone>
Oh perfect, thank you.

[18:37:15.0903] <Nick Johnstone>
That makes life very easy

[23:55:59.0358] <sideshowbarker>
annevk: so about the status-code-in-CORS-messages thing, I actually ended up writing a patch — so I’ll raise the bug and then also attach that patch

[23:58:38.0873] <annevk>
sideshowbarker: okay, I worry a bit about conflicts as my PR is still outstanding and also touches that, but we'll see I guess

[23:59:01.0169] <sideshowbarker>
oh

[23:59:05.0932] <sideshowbarker>
which PR?

[00:06:04.0720] <sideshowbarker>
hsivonen: you know about https://github.com/albfernandez/juniversalchardet already?

[00:08:10.0297] <hsivonen>
> <@sideshowbarker:mozilla.org> hsivonen: you know about https://github.com/albfernandez/juniversalchardet already?

I may have seen it in passing at some point. However, I read this bit: "jchardet is based on the "chardet" module that has long existed. juniversalchardet is based on the "universalchardet" module that is new and generally provides better accuracy on detection results." only now, and it surprises me.

[00:09:03.0865] <annevk>
sideshowbarker: https://github.com/whatwg/fetch/pull/1330?

[00:09:21.0070] <annevk>
Still hoping for more review on that one btw

[00:09:49.0472] <hsivonen>
Specifically, I thought jchardet was a port of "universalchardet". If not, what was "chardet" and how old is jchardet?

[00:11:38.0472] <sideshowbarker>
hsivonen: yeah I kind of only vaguely recall any details. But anyway yesterday Yves Lafon pointed ou juniversalchardet to me

[00:12:15.0052] <sideshowbarker>
annevk: ah that one yeah — agree it would be great to get more review

[00:12:32.0181] <hsivonen>
I wish I could find the time to try out chardetng on JVM via https://github.com/cretz/asmble

[00:12:36.0335] <sideshowbarker>
annevk: but about the patch, I meant a Gecko patch, to the networking code

[00:13:44.0366] <sideshowbarker>
hsivonen: oh wow, had not seen that one yet. I had heard about other WASM to JVM tools, but not that one

[00:14:17.0244] <hsivonen>
> <@sideshowbarker:mozilla.org> hsivonen: oh wow, had not seen that one yet. I had heard about other WASM to JVM tools, but not that one

Oh, there are others? Which ones have you seen?

[00:14:41.0121] <annevk>
sideshowbarker: aaah, I was already so confused

[00:14:45.0229] <annevk>
my bad

[00:14:54.0544] <annevk>
that's great

[00:15:12.0953] <sideshowbarker>
hsivonen: TeaVM for one

[00:15:27.0326] <sideshowbarker>
/me looks for others

[00:15:39.0766] <hsivonen>
TeaVM is the other way round, right?

[00:16:00.0871] <sideshowbarker>
hsivonen: oh I guess so

[00:16:22.0004] <sideshowbarker>
ah yeah of course

[00:16:33.0579] <sideshowbarker>
same for the others I was thinking of

[00:16:41.0357] <hsivonen>
I see

[00:18:14.0542] <annevk>
I didn't know Jeff Jaffe played Werewolf; kinda sad I missed that now, although Werewolf was often a bit late for me iirc

[00:18:29.0718] <annevk>
(watching the TPAC intro video, for context)

[00:18:46.0704] <sideshowbarker>
Yeah Jeff often joined it at past TPACs

[00:20:07.0573] <sideshowbarker>
btw, Gecko string-manipulation code is a lot of “fun”

[00:22:09.0216] <sideshowbarker>
the way I wrote up the patch, I am certain it’s not anywhere close to being the “right” way — but having spent nearly half a day looking through existing code and doing trial-and-error to try to figure out what the right way actually is, I’m now looking forward to somebody enlightening me about how it code the way it should be

[00:23:04.0244] <sideshowbarker>
even the hacky way I ended up doing it, it I would have never arrived at without some suggestions from Arai

[00:30:56.0965] <annevk>
sideshowbarker: arai++; there's a necko-reviewers group, FWIW

[00:31:29.0669] <sideshowbarker>
oh, didn’t know — a mailing list?

[00:33:18.0937] <annevk>
sideshowbarker: I'm not sure how it works, but basically once you have your patch on Phabricator you put that in the reviewers field

[00:45:31.0460] <hsivonen>
The group reviews just show up on the review list (on Phab) of every reviewer in the group.

[01:12:33.0759] <annevk>
Does anyone know if there's a way to get your selected TPAC events into your own calendar?

[01:27:17.0893] <annevk>
It seems that if you go to an individual session there's another calendar thing that allows for that...

[06:10:54.0938] <sideshowbarker>
Jake Archibald: for the CORS playground, it would be useful to be able to set a status code for the main response as well (not just for the preflight response)

[06:12:15.0498] <Jake Archibald>
sideshowbarker: I didn't add it because it has no impact on if something passes a CORS test or not. Or am I missing something? (not against adding it)

[06:13:48.0607] <sideshowbarker>
Jake Archibald: for demo’ing/emulating the case where a server responds with a 4xx or 5xx error without the Access-Control-Allow-Origin header

[06:13:59.0652] <Jake Archibald>
ohh yeah

[06:14:05.0762] <Jake Archibald>
ok, I'll add that

[06:14:16.0160] <sideshowbarker>
great

[06:14:43.0238] <sideshowbarker>
yeah, for me right now, I’m trying to test my gecko patch that adds the HTTP status code to some of the CORS messages that get logged to the devtools console

[06:18:07.0309] <sideshowbarker>
annevk:  Jake Archibald: just now raised https://bugzilla.mozilla.org/show_bug.cgi?id=1736026 and will attach the patch there shortly

[06:29:30.0061] <Jake Archibald>
sideshowbarker: There you go! https://jakearchibald.com/2021/cors/playground/?prefillForm=1&requestMethod=GET&requestUseCORS=1&requestSendCredentials=&preflightStatus=204&preflightAllowOrigin=&preflightAllowCredentials=&preflightAllowMethods=&preflightAllowHeaders=&responseStatus=404&responseAllowOrigin=&responseAllowCredentials=&responseExposeHeaders=

[06:30:21.0628] <sideshowbarker>
Jake Archibald: beautiful! thanks much

[06:31:37.0580] <Jake Archibald>
sideshowbarker: are you going to raise the same issue on crbug, or shall I?

[06:32:06.0640] <sideshowbarker>
Jake Archibald: I will — I’ll also try to write up a Blink patch for it

[06:32:21.0113] <Jake Archibald>
sideshowbarker: ohhh nice! Much appreciated

[06:32:21.0351] <sideshowbarker>
gonna raise a WebKit bug too (with patch)

[06:32:27.0033] <sideshowbarker>
cheers

[06:39:45.0946] <sideshowbarker>
OK, gecko patch submitted — https://phabricator.services.mozilla.com/D128596

[11:57:06.0267] <Andreu Botella (he/they)>
So I just noticed that equality/identity for the purposes of infra sets and maps can't be defined trivially, and might need to be type-specific

[11:57:54.0997] <Andreu Botella (he/they)>
Because the module map uses (URL record, string) tuples, but the URL record equality must ignore the blob URL entry to remain compatible with the web

[11:58:00.0462] <Andreu Botella (he/they)>
https://github.com/web-platform-tests/wpt/blob/master/html/semantics/scripting-1/the-script-element/module/dynamic-import/blob-url.any.js#L54

[12:02:34.0318] <Andreu Botella (he/they)>
 * Because the module map uses (URL record, string) tuples as keys, but the URL record equality must ignore the blob URL entry to remain compatible with the web

[13:09:22.0661] <Domenic>
> <@andreubotella:mozilla.org> Because the module map uses (URL record, string) tuples as keys, but the URL record equality must ignore the blob URL entry to remain compatible with the web

Very interesting. Probably a quick fix would be to use URL serialization. But I wonder how many other places on the web platform compare URLs in this way; maybe blob URL entries should be held in a sidetable


2021-10-17
[07:29:13.0899] <hsivonen>
sideshowbarker: https://github.com/hsivonen/chardetng_j

[07:29:43.0935] <hsivonen>
(Not expecting to polish it further for at least two weeks.)

[09:11:53.0147] <devsnek>
why can the formdata api only set name and filename? would be cool to be able to set other disposition fields or even other subpart headers

[09:12:22.0558] <devsnek>
content-description would be especially nice

[09:14:22.0056] <Andreu Botella (he/they)>
You can set the `Content-Type` header with a `Blob` value

[09:15:18.0262] <devsnek>
yeah but that's for content-type

[09:15:22.0385] <devsnek>
what if i want to give an image alt text

[09:16:25.0716] <Andreu Botella (he/they)>
No browser supports any other headers, and who knows if some servers might break if they find unexpected headers

[09:16:33.0656] <Andreu Botella (he/they)>
 * No browser supports any other headers, and who knows if some servers might break if they find unexpected headers

[09:16:41.0553] <devsnek>
content-description is an ietf standard


2021-10-18
[19:07:06.0377] <sideshowbarker>
> <@hsivonen:mozilla.org> sideshowbarker: https://github.com/hsivonen/chardetng_j

makes me want to write more HTML checker source in Rust 😄

[21:38:02.0207] <hsivonen>
> <@sideshowbarker:mozilla.org> makes me want to write more HTML checker source in Rust 😄

Sadly, the ergonomics of the language boundary are poor if arguments and return values of types other than int, long, float, and double. Sequences of bytes work the next best, and even those are rather bad, because the Java `ByteBuffer` API is stateful. I suppose it gets better with Java > 8 that can efficiently copy one `ByteBuffer` into another without changing the internal state of either.

[21:40:19.0163] <hsivonen>
https://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html#put-java.nio.ByteBuffer- vs. https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ByteBuffer.html#put(int,java.nio.ByteBuffer,int,int)

[21:40:34.0936] <hsivonen>
Where > 8 means 16

[21:40:45.0373] <sideshowbarker>
OK

[21:41:06.0522] <sideshowbarker>
well, maybe time anyway to not try to preserve Java 8 compatibility

[21:41:52.0524] <sideshowbarker>
I think maybe the htmlparser code already has some Java > 8 code in it?

[21:42:10.0586] <sideshowbarker>
at least I think our CI is no longer testing Java 8

[21:42:36.0694] <sideshowbarker>
…and I don’t think I would have changed that unless it was no-longer Java8-compatible

[21:42:51.0345] <hsivonen>
I'd expect it not to have Java > 8. In fact, the source still looks quite Java 5ish.

[21:43:16.0972] <sideshowbarker>
well yeah, overall it’s relatively classic 

[21:43:47.0510] <sideshowbarker>
I wonder now why I turned off Java 8 testing in CI…

[21:44:35.0144] <hsivonen>
I'm still very disappointed at Java breaking it's compatibility story after 8. For example, in order to run asmble, I had to roll the JDK back to 8, because I got an exception with a newer one.

[21:44:58.0469] <hsivonen>
Fortunately, asmble generates code that doesn't depend on asmble itself at runtime.

[21:46:44.0429] <sideshowbarker>
I’m just glad it doesn’t break more

[21:47:16.0472] <sideshowbarker>
HTML checker build has for years emitted a lot of deprecation warnings

[21:47:40.0695] <sideshowbarker>
some day I guess with some new Java version those are gonna turn into failures

[21:48:27.0928] <sideshowbarker>
I think the main deprecation warnings are related to code that’s using old reflection stuff

[21:49:11.0487] <sideshowbarker>
Jake Archibald:  https://bugs.chromium.org/p/chromium/issues/detail?id=1260776 — and proof-of-concept patch at https://chromium-review.googlesource.com/c/chromium/src/+/3226189 (much or most of which came from Dominic Farolino  helping me out)

[21:49:13.0041] <hsivonen>
I admit that I still don't intuitively understand modules. Or maven.

[21:50:47.0446] <sideshowbarker>
I hate maven — I have never used it for anything, but because of others requesting packages of the HTML checker, have burned up a huge amount of time creating the maven package 

[21:51:11.0091] <sideshowbarker>
and releasing anything to Maven is still just a massive PITA — even though I have it all automated

[21:51:56.0846] <sideshowbarker>
It’s possible now to release Maven packages directly through GitHub, and I actually have that set up

[21:52:17.0875] <sideshowbarker>
the release process for that is much easier

[21:53:09.0922] <sideshowbarker>
for the Central Repo, the whole UI of there Web thing really looks like some circa 1990s Oracle application or something

[21:53:21.0725] <sideshowbarker>
horrible

[21:55:03.0429] <sideshowbarker>
Sonatype thing

[21:55:27.0168] <sideshowbarker>
GitHub thing is at https://github.com/validator/validator/packages/892686

[21:56:15.0763] <sideshowbarker>
also now releasing Docker images of the HTML checker through GitHub: https://github.com/validator/validator/pkgs/container/validator

[21:56:38.0677] <sideshowbarker>
…and NPMs too: https://github.com/validator/validator/packages/892707

[22:35:16.0292] <Jake Archibald>
> <@sideshowbarker:mozilla.org> Jake Archibald:  https://bugs.chromium.org/p/chromium/issues/detail?id=1260776 — and proof-of-concept patch at https://chromium-review.googlesource.com/c/chromium/src/+/3226189 (much or most of which came from Dominic Farolino  helping me out)

This is great, cheers!

[00:43:07.0585] <annevk>
Anyone want to review https://github.com/whatwg/dom/pull/1028? Should be quite straightforward. Fixes a 12yo bug with code point values.

[02:03:17.0749] <Noam Rosenthal>
Can anyone help me understand what I am doing wrong in the following? I am missing something that should be obvious... https://github.com/whatwg/fetch/pull/1311#discussion_r729970913

[02:09:54.0607] <Noam Rosenthal>
(A infra-usage nit I got stuck with)

[02:19:37.0662] <annevk>
Noam Rosenthal: I wonder if your choice of font shows different characters from mine, but a problem is that `≫` != `»`; at various stages there were other problems as well

[02:24:25.0856] <Noam Rosenthal>
> <@annevk:mozilla.org> Noam Rosenthal: I wonder if your choice of font shows different characters from mine, but a problem is that `≫` != `»`; at various stages there were other problems as well

Ahhh OK I had unicode blindness. Gotcha

[02:25:15.0248] <Noam Rosenthal>
Yes I originally misunderstood that operator.

[07:01:55.0849] <sideshowbarker>
foolip: what’s the link for the State of CSS video conference?

[07:53:30.0167] <annevk>
timothygu and Domenic: let me know if https://github.com/whatwg/url/pull/655 looks good; quite nice that applying it to whatwg-url worked directly

[13:55:54.0012] <foolip>
> <@sideshowbarker:mozilla.org> foolip: what’s the link for the State of CSS video conference?

Good question! I guess Dom did the recording and can access it?


2021-10-19
[18:38:53.0860] <sideshowbarker>
foolip: I had meant the Zoom link — but I subsequently realized I could only get that after I registered. When I pinged you, I hadn’t registered yet. But then I registered and was able to get the Zoom link

[01:51:14.0505] <foolip>
sideshowbarker: oh :)

[02:25:55.0566] <Luca Casonato>
Can someone confirm that CSP is meant to apply to dedicated workers (with the CSP being determined by the `Content-Security-Policy` header on the worker entrypoint?).

[02:26:04.0909] <Luca Casonato>
 * Can someone confirm that CSP is meant to apply to dedicated workers (with the CSP being determined by the `Content-Security-Policy` header on the worker entrypoint?).

[02:27:36.0810] <Luca Casonato>
MDN says this, but testing in the wild seems to suggest otherwise in some scenarios.

[02:31:49.0634] <annevk>
Luca Casonato: Chrome has had a bug for a long time where that was not the case, but I think it's being fixed per blink-dev

[02:38:01.0854] <Luca Casonato>
Ah, that explains it. Thanks

[02:39:50.0522] <Luca Casonato>
For anyone interested, this is the bug to track https://bugs.chromium.org/p/chromium/issues/detail?id=1253267

[06:40:22.0514] <Dominic Farolino>
Is request's `user-activation` bit actually used anywhere? It doesn't seem to be referenced anywhere in HTML or Fetch, besides being set in https://html.spec.whatwg.org/#navigating-across-documents:concept-request-user-activation. But I don't think it is ever read?

[06:42:50.0223] <Dominic Farolino>
Kinda looks like we just use the `hasTransientActivation` boolean everywhere instead of the request bit

[07:27:29.0548] <annevk>
Dominic Farolino: it's read by the Sec-Fetch headers

[07:27:55.0957] <annevk>
Perhaps that should be clarified in a note or some such as it's indeed somewhat opaque

[07:50:46.0432] <Dominic Farolino>
annevk: Are you saying request's user-activation bit is ready by Sec-Fetch headers, or `hasTransientActivation` is? The former only has a single reference in HTML I think

[07:50:49.0755] <Dominic Farolino>
and that is a setter

[07:51:15.0610] <annevk>
Anyone else who wants to review server advice for CORS developers? https://github.com/whatwg/fetch/pull/1330

[07:51:40.0695] <annevk>
Dominic Farolino: request's user-activation is used by Sec-Fetch-User iirc

[07:54:34.0295] <Dominic Farolino>
Oof, forgot those were in a separate spec...

[07:55:08.0218] <annevk>
Yeah I'm not sure that makes a whole lot of sense, but we can fold them in once it starts causing problems

[08:38:54.0500] <Domenic>
I wish webappssec was more amenable to folding things in...

[08:58:55.0967] <annevk>
Maintaining things would work for me

[11:03:00.0754] <freddy>
🤐


2021-10-20
[01:20:50.0642] <freddy>
https://wiki.whatwg.org/ throws server errors

[01:24:46.0508] <sideshowbarker>
I wish we’d move all that wiki content to https://github.com/whatwg/whatwg.org/wiki

[02:00:42.0360] <annevk>
sideshowbarker: making it a bunch of static pages has been proposed before; just needs someone willing to do it

[02:00:50.0145] <annevk>
And I guess some coordination with GPHemsley 

[03:06:53.0298] <ntim>
annevk: I think I addressed all the comments on https://github.com/whatwg/html/pull/7134

[07:11:08.0098] <Domenic>
> <@fbraun:mozilla.org> https://wiki.whatwg.org/ throws server errors

https://github.com/whatwg/misc-server/issues/163 :(

[07:20:58.0803] <annevk>
ntim: I unresolved some of the comments; I still think it would be good if we could more explicitly share logic with pointer-events:none by having a <dfn> in css3-ui (I'll defer to Domenic as to whether that's blocking or a follow-up issue); and do you know if rniwa has seen this?

[07:21:23.0929] <annevk>
ntim: seems good otherwise though

[07:29:38.0971] <ntim>
annevk: huh, I thought I made the change to add the pointer-events link, but I didn't

[07:31:28.0015] <ntim>
annevk: rniwa is on medical leave :( but the concerns he expressed previously (slowing down performance) aren't relevant to the current implementation.

[07:32:33.0785] <ntim>
annevk: anyway, I pushed the change to share logic with pointer-events: none, I think this should remove the need for an example now

[07:41:07.0418] <ntim>
Domenic: Hey, has there been any progress on the Chrome side regarding this issue? https://github.com/whatwg/html/pull/4184

[07:42:33.0249] <Domenic>
ntim: There has been some discussion. One thing that would help move it forward is if we had commitment from Firefox and Safari to change all their browser dialogs (e.g. edit/add bookmark, about, etc.) to use focus-the-dialog instead of focus-the-first-focusable-control.

[07:44:44.0527] <ntim>
Domenic: do you have any example of Safari dialog that does this?

[07:46:00.0675] <Domenic>
In some testing so far it looks like on Macs nothing is focusable in most dialogs... that's interesting.

[07:48:13.0340] <Domenic>
ntim: Bookmarks > Add bookmark is one example that focuses the first focusable control

[07:49:14.0460] <Domenic>
File > Export as PDF is the same

[07:49:37.0747] <annevk>
ntim: rniwa's concern wasn't about perf I thought, but the model

[07:49:44.0178] <ntim>
Domenic: the point here is not all <dialog>s will be used for this usecase, so forcing it for all dialogs is counterintuitive

[07:49:48.0374] <Domenic>
File > Print is the same

[07:49:58.0786] <annevk>
ntim: in particular what type of tree ought to be used, but I guess it's kinda moot if it's going to be pointer-events based

[07:50:19.0464] <Domenic>
ntim: That is where I disagree. If you are using <dialog> for something that is not a dialog, you are violating the spec, and should use e.g. the proposed <popup>, or a <div>.

[07:50:50.0893] <ntim>
A ToS <dialog> is a valid usecase for <dialog> no?

[07:50:54.0846] <ntim>
 * A ToS <dialog> is a valid usecase for <dialog> no?

[07:50:59.0026] <Domenic>
If Safari believes that all dialogs should focus the dialog itself, then it'd help if they applied that consistently. But it looks right now like they believe instead dialogs should focus the first focusable control, based on the rest of their product

[07:51:18.0107] <Domenic>
ntim: Yes, and then you'd make the TOS text scrollable and focusable. (I can find Mac examples of this if you'd like.)

[07:51:29.0189] <annevk>
Domenic: ntim: the status of that particular issue was that mfreed was going to look into it, iirc

[07:52:18.0165] <annevk>
And he'd ping that issue with an update on behalf of Chrome

[07:52:38.0354] <Domenic>
Yep, I'm just relaying what has come out in our internal discussions in Chrome

[07:59:00.0649] <annevk>
I see, I'm not sure what that means for us. I think the one thing that might be acceptable is if there was some kind of override available whereby the dialog would be focused. emilio might recall better. But we might also ship with a spec violation... I think we did look at some of our internal dialogs and weren't too impressed with those 🙂

[07:59:59.0909] <Domenic>
Yeah, I'd encourage you to talk to e.g. your UI team, and ask them what they think of changing Edit/Add Bookmark to focus the dialog instead of the bookmark name field.

[08:04:33.0767] <Domenic>
(Or your installer team, to ask if the TOS page in your installer dialog should focus the dialog instead of the TOS text box... although I don't know if Safari has an installer.)

[08:04:55.0193] <ntim>
Domenic: I'm not sure if all web developers know how to make paragraphs focusable, the more likely thing that will happen in this case is that focus will go on a random link in the ToS text, on some random control after

[08:05:13.0326] <ntim>
or if that's the first thing that they'll think intuitively of

[08:07:40.0730] <Domenic>
Yeah, it does require a small amount of effort to get good behavior in the TOS-dialog type case. My opinion is that is an OK ask, compared to requiring every other non-TOS-type dialog to opt in to (IMO correct) behavior.

[08:08:14.0011] <Domenic>
After all, there is usually only one TOS dialog per app, which the user sees once. They see edit/confirm/etc. type dialogs many times per app

[08:08:47.0642] <Domenic>
Mason was thinking of trying to gather some data on the prevalence of various types of dialogs, to weigh the potential harm of either default in the cases where developers don't put in enough effort to do the right thing, but I imagine that's a lot of manual work.

[08:10:02.0624] <ntim>
The argument from most screen reader users is that <dialog> traps the focus on itself, like a web document itself does, so matching the behavior of a web document is best since you can't really predict what will be put in.

[08:10:23.0903] <ntim>
(well modal dialogs trap the focus)

[08:10:28.0475] <Domenic>
I mean, you can predict? It'll be the first focusable control, like all the other dialogs your browser provides.

[08:11:13.0285] <Domenic>
Again, if we believe that we should stop focusing the first focusable control for all browser-provided dialogs, then definitely we should align web content with that. That would make it easy. But it's saying that when you use the browser, you experience two types of dialogs: Apple/Mozilla/Google dialogs, and web-dialogs, that is not so great.

[08:12:14.0289] <Domenic>
(Browser modal dialogs also trap focus in themselves, so focus-trapping of <dialog> doesn't really change the equation.)

[08:13:13.0741] <ntim>
Also, would you consider a "Enable notifications for this website?" non-modal dialog a valid use case for <dialog>?

[08:13:39.0275] <ntim>
Enable notifications for this website?
[OK] [Not now]

[08:13:58.0263] <ntim>
This isn't transient, so I suspect <popup> would be inappropriate here

[08:14:35.0263] <ntim>
In this case I don't think it'd be particularly pleasant UX to make it focus [OK] by default

[08:16:30.0769] <Domenic>
That's an interesting one, yeah. I think it's a <popup> in Chrome and a <div> in Firefox, roughly speaking, but who knows if that's intentional. It seems like a legit thing to be a <dialog>, but you'd want to put autofocus="" on the "Not now" button if you were being a good citizen.

[08:17:09.0405] <ntim>
I don't think you can expect websites which display these kinds of dialogs to be good citizens 😅

[08:17:35.0492] <ntim>
there are legit websites displaying these in a non transient way

[08:17:44.0243] <Domenic>
(E.g. in Chrome it has popup's "light dismiss" behavior, but in Firefox it's persistent and nothing is focusable.)

[08:18:08.0273] <Domenic>
For sure. But our goal is not to protect against bad citizens; they will just do autofocus="" on the OK button.

[08:18:39.0872] <Domenic>
This is starting to verge on a trickier issue of the OK/Cancel ordering across Mac/Windows+Linux, and how maybe the web should help with that :)

[08:18:54.0515] <ntim>
I suspect things like this will use non-modal <dialog>s

[08:19:10.0757] <ntim>
and not <popup>

[08:19:16.0492] <ntim>
(you can't dismiss this in Element)

[08:19:17.0217] <Domenic>
Yeah. Non-modal dialogs don't even focus trap so it's a very different scenario.

[08:19:24.0117] <Domenic>
I think that has light-dismiss behavior so is a <popup>? Not sure.

[08:20:47.0225] <ntim>
the only way to dismiss this is to click "Later" or "Verify", clicking outside doesn't work

[08:20:57.0555] <Domenic>
Ah OK, dialog then for sure

[08:21:28.0560] <Domenic>
I admit I haven't looked much at non-modal dialogs. Maybe we do want a different behavior for them.

[08:21:37.0785] <Domenic>
Since they are part of the overall focus order of the page instead of having a focus trap

[08:22:37.0613] <ntim>
I suspect lots of websites will use non-modal dialogs for this type of thing, e.g. enabling notifications (requiring users to take action inside the <dialog>), etc.

[08:22:48.0262] <ntim>
or subscribe to our newsletter, etc.

[08:23:52.0816] <ntim>
I think it'd be evil UX to force the first focusable control (e.g. [Yes]), but maybe some websites won't mind, because they want the user to take action

[08:24:01.0240] <ntim>
 * I think it'd be evil UX to force the first focusable control (e.g. [Yes]), but maybe some websites won't mind, because they want the user to take action

[08:25:06.0569] <Domenic>
I mean "evil" is a bit strong of a word for "the user has to press tab one less time" / "the website focused the control it wanted to focus". We can't protect against truly "evil" websites unless we remove autofocus=""/element.focus().

[08:25:22.0469] <Domenic>
I am more compelled by the idea that non-modal dialogs are different because they are part of the overall tab order

[08:25:53.0542] <Domenic>
Which is a setup, I believe, very different from native, where non-modal dialogs still do focus trapping

[08:26:21.0230] <ntim>
Yep, I believe showModal() is what has been focused on so far

[08:27:38.0809] <Domenic>
Personally I would be comfortable with show() focusing the dialog and showModal() focusing the first focusable control. (With autofocus="" providing an override in both cases.)

[08:33:34.0775] <ntim>
There may be cases where the first focusable control isn't necessarily something important too, e.g. a search box

[08:34:54.0496] <ntim>
anyway, I think a11y experts are probably more well-versed on this topic than I am

[08:35:07.0456] <ntim>
/me is just implementing <dialog> in WebKit

[08:36:11.0462] <ntim>
Taking in account what screen reader users will experience is important

[08:40:57.0837] <Domenic>
Yeah. That is part of my concern as well; if screen reader users experience one thing for edit browser bookmark and another for edit Matrix channel name, that seems problematic. I think that is also something Mason was going to ask about.

[08:42:43.0746] <ntim>
I think what we can both agree on, is that this behavior is problematic for non-modal dialogs

[09:35:42.0987] <emilio>
FWIW those use HTML `<dialog>`, so the behavior will change if/when we change it

[09:35:49.0870] <emilio>
> <@domenicdenicola:matrix.org> Yeah, I'd encourage you to talk to e.g. your UI team, and ask them what they think of changing Edit/Add Bookmark to focus the dialog instead of the bookmark name field.

 * FWIW those use HTML `<dialog>`, so the behavior will change if/when we change it

[09:36:57.0703] <Domenic>
Great to hear! I'm still curious what the UI folks think about the change you're making for them :)

[09:51:31.0592] <Domenic>
Oh, interesting historical background: non-modal dialogs used to behave like they do on native, where they focus-trap but you can manually escape their "control group". But it was never implemented; instead we just got focus trapping for free in the modal case via inerting everything, and never implemented anything for the non-modal case. So we removed control groups from the spec. https://github.com/whatwg/html/pull/3647 . This helps explain why non-modal dialogs are in a bit of a weird space today.

[15:15:59.0070] <mfreed>
annevk: just a quick update from me. As Domenic mentioned, we've been internally discussing this issue to try to come to a consensus. That process is still playing out, so I apologize for the delay posting publicly. But there is definitely motion behind the scenes, and I haven't forgotten about the issue. Thanks!


2021-10-21
[06:24:47.0862] <annevk>
Does anyone still have a particular fondness for pairs? I'm pretty close to writing the relevant PRs to turn them into tuples. It doesn't seem like it would be all that much work.

[07:54:03.0235] <Domenic>
annevk: how strongly do you prefer "site[0]" to "site's host" in https://github.com/whatwg/html/pull/7251/files ? I find the latter a decent bit more readable, and I think it's pretty clear those are the components of a host-and-port...

[07:55:00.0481] <annevk>
Domenic: it's kind of an implicit tuple at the moment where we don't have defined names

[07:55:22.0067] <annevk>
Domenic: if we had defined names it would work, but if we don't I think this is better

[07:55:56.0719] <annevk>
(I think implicit tuples are fine, as you don't always want to define all the names and things are mostly clear from the name of the tuple itself.)

[07:57:47.0585] <Domenic>
Alright, I guess I'll merge as-is. Feels like a bit of a shame though.

[08:08:35.0264] <annevk>
Depending on your level of shame you can add some boilerplate. 🙂 Maybe at some point there are other things poking at the internals...


2021-10-22
[02:05:00.0499] <ntim>
emilio: seems somewhat relevant to inert: https://drafts.csswg.org/css-contain-2/#content-visibility

[02:09:37.0148] <annevk>
Turns out turning pairs into tuples was more work than expected, but primarily due to yak shaving. On the flipside, header thingies get to have proper types now.

[03:04:15.0481] <emilio>
ntim: how is it related?

[03:04:26.0486] <emilio>
zcorpan: sure, happy to help out there

[03:05:01.0753] <zcorpan>
emilio: sweet, thanks

[03:07:09.0680] <annevk>
zcorpan: happy to learn you've progressed from reminiscing about SGML's SHORTTAG NO to XML 1.1 😛

[03:08:07.0387] <zcorpan>
annevk: hey at least I'm not digging backwards in time!

[03:21:38.0827] <ntim>
emilio: 

[03:21:39.0955] <ntim>
When an element skips its contents, the user agent must change the used value of the contain property so as to turn on layout containment, style containment, paint containment, and size containment. Further, its contents (the flat tree descendants of the element, including both text and elements, or the replaced content of a replaced element) are not painted (as if they had visibility: hidden) and do not respond to hit-testing (as if they had pointer-events: none). 

[03:22:00.0937] <ntim>
without the visibility: hidden bit, it's very similar to inert

[03:22:03.0617] <ntim>
or maybe not

[03:23:45.0665] <emilio>
ntim: well, similar perhaps, but not related in any other way right?

[03:24:21.0707] <ntim>
emilio: inert mentions find in page, i would suspect content-visibility affects this as well

[03:27:31.0226] <ntim>
emilio: > The skipped contents must not be accessible to user-agent features, such as find-in-page, tab-order navigation, etc., nor be selectable or focusable.

[03:27:53.0279] <ntim>
this is for content-visibility: hidden

[03:27:58.0363] <ntim>
very similar to inert

[03:28:12.0119] <ntim>
if you remove visibility: hidden, it's basically inert

[03:43:28.0753] <emilio>
ntim: content-visibility has other intended semantics. The children of content-visibility: hidden do not render at all iirc

[03:43:47.0526] <emilio>
ntim: Plus it adds containment, and so on

[04:05:01.0566] <sideshowbarker>
annevk: My Firefox patch landed (thanks to emilio for reviewing and fixing it) and so now the latest Firefox Nightly has HTTP status codes in the relevant devtools console CORS errors.

