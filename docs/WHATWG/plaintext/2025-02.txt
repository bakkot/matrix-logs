2025-02-01
[19:38:33.0987] <Clifton>
Ok

[13:40:40.0907] <jmdyck>
Domenic or annevk: Sometimes, the HTML spec uses <i> where I would have expected <var> (E.g. 'same-origin fallback flag') Is this described somewhere?

[14:13:50.0521] <jmdyck>
There's some overlap with 'a reference from one algorithm to a parameter of another algorithm', but differences either way.


2025-02-02
[17:27:45.0834] <Domenic>
We do use <i> for references from one algorithm to a parameter of another algorithm. A modern example of that is all the references to optional named parameters of https://html.spec.whatwg.org/#navigate .

[17:28:12.0341] <Domenic>
Same-origin fallback flag looks like an old version of that before we had our modern conventions (which include a <dfn><var> at the declaration site and an <a><i> at the call site)

[17:30:20.0555] <Domenic>
Separately, HTML has lots of random <i> usage from a former editor that I don't really understand, e.g. missing value default/invalid value default, mutable, etc.

[22:51:33.0603] <zbaviles>
`` // 1. Find the button element (assuming it has the ID "myButton") ``
`` const myButton = document.getElementById("myButton"); ``

`` // 2. Add an event listener for the "mouseover" event ``
`` myButton.addEventListener("mouseover", function() { ``
``   // 3. Change the background color using CSSOM ``
``   myButton.style.backgroundColor = "yellow";  ``
`` }); ``
``  ``

[23:07:19.0123] <zbaviles>
`` // 1. Find the button element (assuming it has the ID "myButton") ``
`` const myButton = document.getElementById("myButton"); ``

`` // 2. Get the user agent string ``
`` const userAgent = navigator.userAgent; ``

`` // 3. Check if the user agent string indicates a desktop browser ``
`` if (/Windows|Macintosh|Linux|X11/.test(userAgent)) { ``
``     myButton.addEventListener("mouseover", function() { ``
``         // 4. Change the background color using CSSOM if the user is on a desktop browser ``
``         myButton.style.backgroundColor = "yellow";  ``
``     }); ``
`` } ``

[15:27:05.0332] <Luke Warlow>
Is there a particular reason why you can't call .showPopover() an open modal dialog, but on an open non-modal dialog it works? Seems like it should probably throw in both cases?


2025-02-03
[07:43:19.0299] <Luke Warlow>
Are the children changed steps and post-connection steps defined for SVG's `<script>` element anywhere? https://github.com/whatwg/html/pull/10188 - only seems to cover HTML's `<script>`


2025-02-04
[16:45:44.0535] <Domenic>
I doubt it. There is some general understanding that most of what applies for HTML's script applies to SVG's script, but the SVG script specification is not really maintained.

[18:52:04.0971] <sideshowbarker>
Yeah about SVG, these days even if you took time to write up an SVG PR, there’s nobody who’s even going to review it. Unless you can also somehow supply your own reviewer — e.g., recruit another someone else whose familiar with an SVG implementation in an engine (from having written it or wrote patches for it), and get them to review your PR

[18:52:20.0463] <sideshowbarker>
* Yeah about SVG, these days even if you took time to write up an SVG PR, there’s nobody who’s even going to review it. Unless you can also somehow supply your own reviewer — e.g., recruit another someone else who’s familiar with an SVG implementation in an engine (from having written it or wrote patches for it), and get them to review your PR

[18:52:45.0458] <sideshowbarker>
* Yeah about SVG, these days even if you took time to write up an SVG PR, there’s nobody who’s even going to review it. Unless you can also somehow supply your own reviewer — e.g., recruit someone else who’s familiar with an SVG implementation in an engine (from having written it or wrote patches for it), and get them to review your PR

[09:58:04.0377] <ntim>
foolip (or anyone else who maintains the fullscreen spec): Hi! Can you review https://github.com/whatwg/fullscreen/pull/243 ?

[11:56:36.0259] <oxiidaw>
im super exited about https://drafts.csswg.org/css-borders-4/#corner-shape-rendering

[11:56:49.0087] <oxiidaw>
is there a way I can track this down and get updates?

[12:04:38.0373] <Noam Rosenthal>
Hi @oxiidaw:matrix.org, Glad you're excited about it!
Follow the `css-borders-4` label in CSSWG (https://github.com/w3c/csswg-drafts/labels/css-borders-4), or the following for chromium: https://chromestatus.com/feature/5357329815699456 /  https://issues.chromium.org/issues/393145930


[12:05:06.0149] <Noam Rosenthal>
* Hi @oxiidaw:matrix.org, Glad you're excited about it!
Follow the `css-borders-4` label in CSSWG (https://github.com/w3c/csswg-drafts/labels/css-borders-4) for the spec, or the following for chromium: https://chromestatus.com/feature/5357329815699456 /  https://issues.chromium.org/issues/393145930). Not sure about Gecko/WebKit issue numbers yet

[12:05:40.0075] <Noam Rosenthal>
(Note that it's a feature that's developed in the CSS working group and not here in WHATWG)

[15:11:57.0098] <gingeh>
Hi all, I'm currently implementing popovers closing each other in Ladybird and I'm a bit confused about the `while` loops in the "close entire popover list" and "hide popover stack until" algorithms. They boil down to repeatedly hiding the last popover in popoverList, but this seems like it would be an infinite loop unless the spec expects the popoverList to be dynamically updated?

[15:12:09.0967] <gingeh>
* Hi all, I'm currently implementing popovers closing each other in Ladybird and I'm a bit confused about the while loops in the "close entire popover list" and "hide popover stack until" algorithms. They boil down to repeatedly hiding the last popover in popoverList, but this seems like it would be an infinite loop unless the spec expects the popoverList to be dynamically updated?

[15:12:27.0260] <gingeh>
* Hi all, I'm currently implementing popovers closing each other in Ladybird and I'm a bit confused about the while loops in the "close entire popover list" and "hide popover stack until" algorithms. They boil down to repeatedly hiding the last popover in popoverList, but this seems like it would be an infinite loop unless the spec expects the popoverList to be dynamically filtered?

[15:15:14.0637] <Eric Portis (he/him)>
I'm guessing the x.com/htmlstandard account stopped working when Twitter changed API access? Even if it weren't for [gestures vaguely at everything] I don't think a link to a source for "updates" which hasn't seen an update for a year and a half belongs in the header: https://github.com/whatwg/html/pull/10993

[15:23:28.0378] <Meghan Denny>
is there a mastodon or bsky account to replace it with?


2025-02-05
[17:13:23.0658] <Domenic>
Twitter discussion in https://github.com/whatwg/participate.whatwg.org/issues/351 and https://github.com/whatwg/meta/issues/318 .

[21:45:18.0558] <gingeh>
I've now encountered failures which are resolved by dynamically updating the given popoverList. If this is really required then the spec steps should be changed to reflect that.

[06:40:57.0100] <Eric Portis (he/him)>
Tyler Morgan: Let me know if you want any assistance with https://github.com/whatwg/meta/issues/318#issuecomment-2629775359


2025-02-06
[15:03:47.0591] <Domenic>
I hope you have filed a bug on the issue tracker instead of just chatting about this issue?

[15:10:45.0714] <sideshowbarker>
Domenic: https://github.com/whatwg/html/issues/10996 but don’t know if it’s yet been updated with the additional info from that last comment

[15:11:58.0345] <gingeh>
That's for a separate problem, I haven't opened an issue for this one yet because I was hoping for some confirmation that I wasn't just misinterpreting the instructions

[15:11:58.0480] <Domenic>
Great, will try to get people to comment during the WHATNOT meeting that's ongoing right now

[15:12:05.0871] <Domenic>
Oh, OK

[15:13:01.0442] <gingeh>
I'll open an issue for that now

[15:25:48.0271] <gingeh>
Here's all the open bugs affecting my implementation in Ladybird:
https://github.com/whatwg/html/issues/11007
https://github.com/whatwg/html/issues/10996
https://github.com/whatwg/html/issues/10988
https://github.com/whatwg/html/pull/9457


2025-02-07
[16:01:30.0103] <Domenic>
Thanks. We got some attention to those in the meeting and it looks like they're at the top of mfreed's plate for tomorrow.

[16:04:45.0287] <gingeh>
Thank you so much!

[17:21:01.0791] <smaug>
Domenic: btw, related to SharedWorkers, I thought Chrome on  Android doesn't even support them. But perhaps this unload thingie would be a reason to support?

[17:33:50.0525] <Domenic>
Yep, it would be, indeed.

[21:02:48.0413] <gingeh>
* Here's all the open bugs affecting my implementation in Ladybird:
https://github.com/whatwg/html/issues/11007
https://github.com/whatwg/html/issues/10996
https://github.com/whatwg/html/issues/10988
https://github.com/whatwg/html/pull/9457
edit to add: https://github.com/whatwg/html/issues/11008

[06:03:12.0413] <smaug>
oh my, I guess it is too late to fix https://html.spec.whatwg.org/#inner-navigate-event-firing-algorithm step 32. That is nuts 

[06:03:48.0340] <smaug>
and I can possibly blame my self for not catching that in some review

[06:06:19.0065] <smaug>
* and I can possibly blame myself for not catching that in some review

[07:13:06.0863] <smaug>
Or it might not be too late. Only one implementation

[07:13:10.0391] <smaug>
...shipping

[10:49:45.0822] <FrameMuse>
Hello, just joined, I wanted to ask something about dom rendering

[11:06:23.0816] <Valery>
This is purely an idea, but looking at Game Development I was looking for something like Object Instancing to be a part of DOM as well. I can't give exact examples where this optimization is decisive, but I certainly remember having issues with performance because of many **the same** elements (with **the same** huge trees) were presented in the document.

So I want to ask what do you think about having a kind of mirroring a node, so it can be displayed multiple times while processing it only once. Or maybe this is overoptimization, not relevant? Sorry if I don't know something, thanks in advance.

[13:35:23.0752] <smaug>
I'd expect the implementation of such to slow down DOM/layout operations in the common cases. Gecko used to support (until ~2009) multiple presentations at the same time  (normal + printing/print preview), and when that was removed, lots of the algorithms could be simplified quite a bit.

[14:12:45.0705] <emilio>
Depends at which layer you implement this tho... If it's just painting it might not be too bad (think of `background-image: element()` or so, IIRC we still support the prefixed version). But yeah, the set of use cases for exactly the same rendering might not be all that big...

[14:22:44.0194] <smaug>
Ah, right for painting only that might be doable. https://developer.mozilla.org/en-US/docs/Web/CSS/element 

[14:28:25.0855] <smaug>
* Ah, right, for painting only that might be doable. https://developer.mozilla.org/en-US/docs/Web/CSS/element 


2025-02-08
[17:29:23.0782] <sideshowbarker>
There’s a workable alternative to doing that “prepare a script” step there?

[19:26:05.0151] <gingeh>
Maybe a weird question but does anyone here know of an algorithm in a whatwg spec which takes a collection (preferably a list) by reference? I'm just hoping for an example because I'm not sure how it's usually described in spec-speak

[20:44:07.0422] <Domenic>
It's always assumed to be by reference. In general algorithms are JS-ish semantics, with the biggest exception being that strings are often treated as mutable.

[20:45:20.0209] <Domenic>
https://github.com/whatwg/infra/issues/91 for discussion of mutable vs. immutable strings

[23:03:29.0802] <Valery>
I wonder if something like `background-image: element()` is possible to be a document node type, where I can select a node to be mirrored, so that I can add it to the document, visually, it would behave in the same way, but it doesn't need to be processed once again. All the computations can be reused up to the GPU level. I feel like it should not be so complex since this would a standalone node, no?

[23:03:44.0916] <Valery>
* I wonder if something like `background-image: element()` is possible to be a document node type, where I can select a node to be mirrored, so that I can add it to the document, visually, it would behave in the same way, but it doesn't need to be processed once again. All the computations can be reused up to the GPU level. I feel like it should not be so complex since this would be a standalone node, no?

[01:45:43.0460] <Gregory Terzian>
I have a question about this test: "Aborting a WritableStream before it starts should cause the writer\'s unsettled ready promise to reject" in [`/streams/writable-streams/aborting.any.js`](https://github.com/web-platform-tests/wpt/blob/cecda71212f41f96b03bd93ca800bfc2b9aaa974/streams/writable-streams/aborting.any.js#L30)

The test:
1. acquires a writer on a newly created stream, 
2. then writes on it, 
3. then assigns writer.ready to a variable
4. and aborts the writer. 

After 3, it seems to expect the promise to equal the readyPromise on the writer, and to finally reject with the error passed to abort. 



[01:53:02.0818] <Gregory Terzian>
But, it appears to me that the readyPromise would have already been resolved in [`set-up-writable-stream-default-writer`](https://streams.spec.whatwg.org/#set-up-writable-stream-default-writer), at step 5.2("Otherwise, set writer.[[readyPromise]] to a promise resolved with undefined."). 

Then the promise assigned to the variable at 3 is in fact already resolved, and then the abort call at 4 will end-up calling into [`ensure-ready-promise-rejected`](https://streams.spec.whatwg.org/#writable-stream-default-writer-ensure-ready-promise-rejected), which replaces writer.readyPromise with a new rejected promise(because the promise is not pending anymore). 

On way this would be false would be if the write(or the setup) would reach "If backpressure is true, set writer.[[readyPromise]] to a new promise." of [`update-backpressure`](https://streams.spec.whatwg.org/#writable-stream-update-backpressure), but this would require backpressure to be true, and the test does not seem to provide any such backpressure other than the default one where the desired size is 1, and then that single write should not trigger backpressure. 

The test passes in all implementation, so I'm wondering what I'm missing, or if perhaps the spec was updated to fail the test, and this wasn't reflected in any implementation. 

[02:01:22.0433] <Gregory Terzian>
Ok sorry I think I just figured it out, the write adds an item to the queue, so that makes backpressure true because it hits zero. 

[02:02:06.0760] <Gregory Terzian>
so the write replaces the promise that was settled in the writer setup, and then the abort rejects it(because it is pending). 


2025-02-09
[03:09:33.0029] <Mohammad>
Hello everyone! Is there anything related to this gist (https://gist.github.com/mhf-ir/b469784bb12d71fb4d305a7f17f02a4b) that already exists or has been discussed?

[03:23:00.0232] <Mohammad>
i'm not sure, here is the right place, but please who can propose something like this would be nice.
there are lots of stupid naming convention and lib and stuff are going on this https://github.com/jkwakman/Open-Cookie-Database/blob/master/open-cookie-database.csv and it's would be nice if it's be part of web standard


2025-02-10
[04:32:18.0844] <annevk>
Mattias Buelens Domenic: could you spend a minute reading https://github.com/whatwg/html/issues/10855#issuecomment-2647710959 and subsequent comments and see if you agree with the general idea? It sounds reasonable, but I want to make sure we tackle it in a similar way we did with streams.

[04:36:13.0712] <Domenic>
Tomorrow's a holiday but will try to get to it in ~36 hours

[04:37:56.0083] <annevk>
Thanks, enjoy the holiday!

[07:20:51.0416] <zcorpan>
ntim: ping https://github.com/whatwg/html/pull/10959 :)

[07:49:28.0691] <annevk>
zcorpan: if it's a quirk, wouldn't it be better to not apply it to menu/dir?

[07:50:59.0227] <zcorpan>
annevk: it's the undoing of the quirk that should apply also to menu and dir

[07:55:00.0057] <zcorpan>
i.e. if we want `<menu><li>` to have not-quirky rendering, `menu` needs to be included in the undoing style rule

[07:58:04.0553] <annevk>
I see, yeah I guess that makes sense


2025-02-13
[19:18:44.0574] <sideshowbarker>
From https://lkml.org/lkml/2025/2/8/494:
> The other thing which is super rare is people and companies who care about tech debt cleanup, code maintainability, and code quality.  Instead of complaining about maintainers for who are unreasonably caring about these things, when they are desparately under-resourced to do as good of a job as they industry demands, how about meeting us half-way and *helping* us with these sort of long-term code health issues?  Maybe if you engage us as part of the community, we'll be a lot more open to adding changes that might increase the code maintenance burden?


[19:19:25.0433] <sideshowbarker>
…could replace the word “code” there with ”spec” 

[20:36:54.0014] <Meghan Denny>
great read, thanks for sharing 

[08:50:20.0777] <smaug>
dizhang168: just ping me if I don't get to review those PRs relatively soon.

[08:52:00.0471] <smaug>
I know the pr has been open for some time already. sefeng should take a look too

[11:07:09.0782] <akaster>
Is there a way to see interop numbers for other products from the wpt.fyi/interop-2025 dashboard? Namely servo/ladybird 

[11:34:51.0753] <Luke Warlow>
It doesn't help for that dashboard I don't think but you can view all the tests in each interop area on the main page.

label:interop-2025-anchor-positioning or label:interop-2025-backdrop-filter...

You can just filter by all the interop labels. Include servo and ladybird in your list and then track the test results that way?

[11:42:13.0094] <akaster>
Ah yep that seems to work. Also going to the link for each category from the dashboard and adding products 


2025-02-14
[11:03:29.0810] <TabAtkins>
Hm, I'm digging into the exact multipage-splitting abilities HTML has, and I notice that the nav (on line 65 of the source) is set to w-nosplit, but definitely shows up in the multipage. Is that a fault in wattsi, or is the multipage nav getting generated by something else?

[11:42:13.0713] <devgianlu>
Hello, while implementing support for the `autocomplete` attribute on form associated elementes I stumbled upon a possible issue: the WPT tests assume that the field value will be transformed to be lowercase, but I could not see where it is explictly stated. All I can see is that the comparisons should be case insensitive. It seems to work fine if at step 15 I also perform lowercasing.

Spec: https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill-processing-model
WPT test: https://github.com/web-platform-tests/wpt/blob/master/html/semantics/forms/the-form-element/form-autocomplete.html
Implementation PR: https://github.com/LadybirdBrowser/ladybird/pull/3517 

[13:08:11.0697] <jmdyck>
TabAtkins: Similarly, the ToC and Full ToC are marked w-nosplit, but appear in the multipage edition.

[13:08:42.0534] <TabAtkins>
I'm wondering if w-nosplit just doesn't actually do anything in Wattsi currently

[13:13:28.0841] <jmdyck>
The "This specification is like no other etc" is marked w-nosplit, and *isn't* in the multipage, which at first appears to be a case of w-nosplit working, except it's also marked w-dev, which excludes multipage anyway.

[13:15:01.0815] <jmdyck>
The code doesn't seem to have any useful occurrences of "nosplit".

[13:16:30.0933] <jmdyck>
hm, maybe it does.


2025-02-15
[23:21:09.0742] <annevk>
TabAtkins: w-nosplit means that it's preserved for every page (it's not segmented).

[23:31:28.0865] <TabAtkins>
That's not what the docs say or what happens. The color-blocks nav still only shows up in the first page

[04:10:56.0410] <jmdyck>
https://github.com/whatwg/wattsi/blob/main/Syntax.md#specification-variants says that `w-nosplit` means "Omitted from multipage"


2025-02-16
[14:35:11.0031] <hacknorris>
mmm. is it possible to split image with just html? like i want to take just a part of tileset without using whole canvas and other things…
sort of `<img src="tiles.png" position="64,64">` i want…


2025-02-17
[00:27:34.0231] <annevk>
TabAtkins: oh right you are. I guess I forgot how all of that works.

[00:32:11.0033] <Noam Rosenthal>
I think you can use `object-size` and `object-position` in CSS to achieve something like that

[01:12:12.0358] <hacknorris>
yep but with only html it isn't possible…

[01:18:07.0753] <Noam Rosenthal>
That is correct

[01:18:23.0834] <hacknorris>
then why it idn't possible?

[01:18:27.0325] <hacknorris>
* then why it isn't possible?

[01:23:38.0636] <Noam Rosenthal>
Lots of things are possible with a combination of HTML/CSS/JS and not with one of them. It's not a goal of the web platform to make each of these languages work individually.
However, WICG is a place where people make proposals to enhance the web platform, and none of this is set in stone. https://github.com/WICG/proposals

[02:43:13.0945] <annevk>
TabAtkins: I'm getting a lot of errors for https://github.com/whatwg/url/pull/857 that seem wrong

[02:46:24.0227] <annevk>
TabAtkins: part of the problem seems to be scanning for Markdown inside <code>, but that's not all of it

[02:49:30.0798] <annevk>
TabAtkins: if you could take a look I'd appreciate it. We can probably not publish this Review Draft at all if it comes down to it, but we should still resolve this as it'll block further edits of the standard.

[02:49:46.0252] <annevk>
* TabAtkins: if you could take a look I'd appreciate it. We can probably not publish this Review Draft at all if it comes down to it and we need quite a bit of time to resolve, but we should still resolve this as it'll block further edits of the standard.

[02:50:10.0270] <annevk>
Domenic: FYI ^^

[07:01:31.0961] <TabAtkins>
Huh, will look in an hour.


2025-02-18
[00:37:21.0913] <annevk>
TabAtkins: did you end up finding anything?

[01:32:19.0343] <keithamus>
annevk: I believe I've addressed your latest feedback in https://github.com/whatwg/html/pull/9841. I was wondering if you think you'll have time this week to review the PR? Would be awesome to see it progress

[02:27:47.0432] <annevk>
keithamus: I did another pass. Looks like zcorpan also spotted some test-related things.

[02:30:17.0022] <keithamus>
annevk: Right. As I understand it zcorpan has confirmed it's not possible for us to test the expanded state. We don't alter the role or accname so we have no need to test that. 

[02:34:38.0530] <annevk>
keithamus: ah right. But the state of https://github.com/web-platform-tests/wpt/pull/42664 is unclear. Left a comment there.

[02:44:02.0907] <keithamus>
annevk: okay I've pushed some changes to the spec around your commentary, I think I added button attributes to the right index. Please let me know if I missed another spot 🙏

[02:51:54.0368] <keithamus>
annevk: I also followed up here: https://github.com/web-platform-tests/wpt/pull/42664#issuecomment-2665277023. I failed to properly reply to your comments before but AIUI everything is good to go with the WPT tentative PR.

[04:20:33.0867] <zcorpan>
Not sure what to make of this error https://github.com/whatwg/quirks/actions/runs/13389769434/job/37396534098 (cc TabAtkins )

[04:31:43.0286] <Ms2ger>
I think it's Florian Rivoal 's change: https://github.com/speced/bikeshed-boilerplate/commit/123d968f7615d7d38675028666f97d587e7d6ea5

[04:32:07.0059] <Ms2ger>
I suspect it should be `type="ab"`, not `type=ab`

[04:55:43.0900] <annevk>
keithamus: Luke Warlow: did you look into an Auto state for <button type>? I think it would make things much clearer.

[04:57:46.0387] <Luke Warlow>
As in for the spec or as a new value the button type would reflect to?

[04:58:19.0469] <Luke Warlow>
* As in for the spec or as a new value the button type would reflect to? (Either way it's not something I've personally considered much but Keith has been doing most of the spec side of this feature)

[04:59:50.0095] <annevk>
For the specification. Because then we don't have to check that the type attribute is present or not. And we don't have the weird case of a Submit Button not being a submit button.

[05:00:18.0853] <annevk>
And as far as I can tell there's very few callers of this state to begin with.

[05:00:54.0065] <annevk>
I've suggested it a few times before, but I think I'm going to ask that as the final change as I really think it would make the button element much clearer.

[05:09:11.0926] <annevk>
Oh also, zcorpan do you have time to a pass on that command PR once that change is in? I've done a lot of passes and I'm starting to worry I'm missing things.

[05:09:24.0141] <annevk>
* Oh also, zcorpan do you have time to do a pass on that command PR once that change is in? I've done a lot of passes and I'm starting to worry I'm missing things.

[05:09:35.0795] <annevk>
Or maybe Domenic or foolip?

[05:14:29.0592] <keithamus>
annevk: How do you anticipate the auto state helping clarify things? I think it would change the criteria for when it's a submit button but it seems like algorithms would just change to using the auto state, likely resulting in more checks and logic, no?

[05:22:41.0428] <annevk>
keithamus: where we now check for Submit Button and not command/commandfor; we can check for Auto and not command/commandfor; where we check for the type attribute and it being in the Submit Button state, we can just check for the Submit Button state; the type getter can start using the canonical keyword (but needs handling for the Auto case); I don't think anything else is impacted. To me this seems like a solid improvement.

[05:24:01.0015] <annevk>
And it's more aligned with how we treat similar case. If the default is actually "it depends", we don't pretend it's one of the other states and use some kind of side channel (such as attribute presence) to cope.

[05:24:09.0713] <annevk>
* And it's more aligned with how we treat similar cases elsewhere. If the default is actually "it depends", we don't pretend it's one of the other states and use some kind of side channel (such as attribute presence) to cope.

[05:29:22.0189] <keithamus>
annevk: I've pushed up a new commit with the auto state; let me know if this aligns with what you're thinking

[05:29:51.0410] <keithamus>
it changes the submit button prose, and the type getter per your above comments

[06:01:15.0880] <annevk>
keithamus: thanks, I'll take a look. I think those are the only places as everything else already used the lowercase submit button per earlier refactor

[06:04:18.0808] <annevk>
Yeah looks good. It seems like foolip started reviewing while that was still in process unfortunately, but hopefully that's easily sorted.

[06:16:52.0473] <keithamus>
Thanks for you work reviewing annevk, much appreciated. Likewise foolip! I believe I've tackled your recent comments sufficiently so ready for another round whenever you have time 🙏

[07:03:06.0612] <TabAtkins>
> <@annevk:matrix.org> TabAtkins: did you end up finding anything?

Ah whoops, yes, it's what you expected. I handled that case better, but it'll still need an escape in the source. It's one of the spots where, before, the regex didn't totally match so it just silently failed and left the text alone, but now the parser is robust and catches these "errors". 

[07:03:18.0716] <TabAtkins>
Just got distracted playing civ 7 and didn't push the update

[07:03:36.0152] <TabAtkins>
(yesterday was a us holiday)

[07:27:37.0050] <annevk>
TabAtkins: so everything that is an IP address will need escaping?

[07:28:48.0290] <annevk>
TabAtkins: can you check in some regression test that ensures it will always remove the escape correctly? Perhaps that's already covered. I'm rather worried about these Markdown parsing rules changing and messing with my document.

[07:38:23.0534] <TabAtkins>
No, just the very few things (I think maybe just one) that start with [:

[08:06:35.0273] <Greg Kuruc>
Hi, I have a question about the spec. I think what I'm trying to do might not be possible.

We're trying to monitor usage of window.postMessage calls for security auditing. We do similar things elsewhere where we override the prototype to add our logging and then call the original function. We can't do that with window because the window already exists so we override the window object itself. However, we're having issues doing this for postMessage because what happens is the message source on the event listener always comes from the same source because you're always overriding the same function no matter what frame you're coming from. So when we override it, the source is always going to be whichever overrode the function first.

Okay, so I'm trying to work around this problem but I don't know if there is a way because what I need is the incumbent window but there's no way for me to know what that is, I only have the current window in JS. Is it possible I'm missing something or does this not seem possible. I wonder why it's not just `window.postMessage(targetWindow, ...)` to remove the ambiguity around this incumbent window which reading some of the discussion seems to be desired.


[08:27:36.0315] <TabAtkins>
annevk: Okay, new version pushed. With it, it now cleanly reports an error (a `[:...:]` autolink that's unclosed) in three spots; those'll need escaping. It also spotted a missing `</code>`, which I confirmed is a correct detection.

[08:28:24.0048] <TabAtkins>
I do have several tests for shorthands and markdown already, but I can go ahead and make them a little more exhaustive.

[08:29:43.0519] <TabAtkins>
Alternately, instead of escaping you can turn off that autolink category: `Markup Shorthands: http no`

[08:58:49.0033] <annevk>
Thanks for the suggestions, I'll investigate what solution to go with. Prolly tomorrow.

[08:59:12.0867] <annevk>
smaug: when you have a moment, https://github.com/whatwg/dom/pull/1268#issuecomment-2656686537 could use your input. (I also put up a fix for the attribute's node document problem.)

[09:12:48.0192] <smaug>
annevk: yes. I'll try to look at that and see if it matches what was very recently implemented in Gecko (behind a pref still)

[09:56:27.0732] <annevk>
smaug: note that Daniel is proposing a change so I kinda doubt it fully matches that.

[09:56:48.0272] <annevk>
TabAtkins: so now CI is giving me Python exception traces: https://github.com/whatwg/dom/pull/1360

[09:57:47.0819] <TabAtkins>
that was just fixed in the bikeshed-boilerplate repo a few minutes ago

[09:59:00.0985] <TabAtkins>
yeah, landed in bikeshed-data 35 minutes ago, so just kick the PR again

[09:59:03.0931] <annevk>
Okay. I'll re-run.

[10:00:02.0219] <annevk>
Great, it indeed seems to work now.

[10:00:24.0404] <annevk>
* Great, it indeed seems to work now. (Haven't tried URL yet, I guess I'll re-run that now too.)

[10:00:28.0519] <TabAtkins>
that one is on me, i don't have a CI check in place for bikeshed-boilerplate that ensures the doctypes file parses, so a commit last night broke it

[10:00:36.0219] <TabAtkins>
(not from me, at least)

[10:01:43.0213] <TabAtkins>
yeah you should have 4 errors in URL - three autolink false-positives, and one missing end tag

[10:07:00.0547] <annevk>
Thanks, yeah, that was easy to resolve now: https://github.com/whatwg/url/pull/858

[10:07:04.0696] <annevk>
\o/

[10:37:12.0966] <keithamus>
annevk: you mentioned in the Web Components f2f that the specs for Scoped CE registries were perhaps out-of-date? What's the current source of truth for the latest work? Is it the tests inside of WebKit? Do you know if there's a timeline for getting them exported back into WPT?

[12:46:24.0139] <Noam Rosenthal>
Greg Kuruc: I don't know how to answer your specific question, but https://github.com/WICG/Realms-Initialization-Control comes to mind as an emerging proposal for this sort of issue

[13:48:32.0576] <Greg Kuruc>
Thanks so much! I'll take a look!


2025-02-19
[23:19:33.0363] <annevk>
keithamus: I still need to update the PRs, yes. The tests haven't been upstreamed, but that's an oversight as I understand it.

[23:24:27.0141] <annevk>
* keithamus: I still need to update the PRs, yes. The tests haven't been upstreamed, but that's an oversight as I understand it. (rniwa is on it: https://github.com/web-platform-tests/wpt/pull/50789.)

[23:37:43.0496] <annevk>
* keithamus: I still need to update the PRs, yes. The tests haven't been upstreamed, but that's an oversight as I understand it. (rniwa is on it: https://github.com/web-platform-tests/wpt/pull/50790.)

[01:35:41.0199] <hacknorris>
weird question but is it possible to make cursor sprites in css or i'm left only with cursor:none and JS and tracking cursor position?

[01:38:23.0342] <keithamus>
If you have an svg sprite-sheet you might be able to use something like `cursor: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='32' height='32'><use href="sprites.svg#icon"></use></svg>")`

[01:38:57.0249] <hacknorris>
it's png sized 128px*128px and each tile is 32x32…

[01:39:13.0396] <hacknorris>
perfect for background-image hack but possibly not cursor…

[01:40:22.0901] <Noam Rosenthal>
Yea, I think you can do that with `object-position`

[01:40:39.0621] <Noam Rosenthal>
Ah cursor sprites, not sure

[01:41:33.0148] <keithamus>
if you sliced the images you could put them all in an svg as image embeds. You'd still end up with one resource, even if it's a bit hacky. But having said that I don't know if `<use>` in an svg cursor image will work.

[01:41:35.0270] <hacknorris>
yup. cursor image…

[01:43:08.0839] <hacknorris>
the one which changes to hand icon when over link

[01:45:21.0364] <hacknorris>
i don't want to slice…

[01:45:37.0941] <hacknorris>
i'll quicker do cursor:none + JS…

[03:42:27.0305] <sideshowbarker>
zcorpan: Noam Rosenthal If/when you have time to do an HTTP Archive query: I’m looking for data on `role=radiogroup` usage — and specifically, on how many have it on `div` or `fieldset` elements.

[03:42:42.0550] <sideshowbarker>
Context is https://github.com/w3c/aria/pull/2297#issuecomment-2660986380

[03:43:47.0959] <Noam Rosenthal>
Happy to help. Can you supply a REGEX that would approximate this?

[03:44:04.0471] <Noam Rosenthal>
(REGEX is the best we can do in HTTP archive, otherwise you'd want something like a use counter)

[03:44:14.0804] <sideshowbarker>
yep, gimme a few minutes

[03:47:29.0004] <keithamus>
annevk: given foolip has approved I wondered if you had time to do one last pass on https://github.com/whatwg/html/pull/9841 ? While I have the time I'd love to be able to address any last review comments.

[03:51:51.0857] <sideshowbarker>
Noam Rosenthal: `<(div|fieldset)[^>]+role=["']?radiogroup` should work, I think

[03:56:12.0569] <sideshowbarker>
well actually, I guess it would be also be good to have the data for two as separate queries; so:

`<div[^>]+role=["']?radiogroup`
`<fieldset[^>]+role=["']?radiogroup`

[03:58:43.0678] <Noam Rosenthal>
The total is 0.01%, running the separate ones

[03:59:29.0130] <sideshowbarker>
Thanks!

[04:04:10.0505] <Noam Rosenthal>

1	136	                 div+fieldset
2	3500	        fieldset
3	58782	        div
4	672552031	neither

[04:11:42.0787] <sideshowbarker>
ah, excellent — double thanks

[04:12:43.0383] <sideshowbarker>
672552031 is the total number of documents in the entire archive?

[04:44:06.0605] <Noam Rosenthal>
total desktop responses in November 2024

[05:24:18.0161] <zcorpan>
keithamus: annevk : was the naming of `commandForElement` vs `commandFor` discussed? Most existing IDL attributes in HTML that return an element (or null) don't have `Element` suffix

[05:27:53.0632] <keithamus>
zcorpan: it was modelled after `popoverTargetElement`.

[05:30:20.0307] <zcorpan>
keithamus: ok

[05:31:58.0423] <keithamus>
that's not necessarily an objection to your comment, but I don't think the question has been raised before. Naming was discussed quite extensively (it used to be `invokeTargetElement`) but no one raised questions around the `Element` suffix IIRC.

[06:06:03.0684] <annevk>
zcorpan: all IDL attributes that are Element(s)-reflecting should have such a suffix

[06:06:46.0140] <zcorpan>
annevk: ok, I've missed that

[06:20:50.0770] <zcorpan>
`CommandEvent source` doesn't have an `Element` suffix

[06:23:55.0341] <Luke Warlow>
I think the aria reflection stuff all has Element / Elements suffixes too

[06:24:59.0318] <Luke Warlow>
Neither does target etc, I think was the logic there (if there was any)

[06:25:22.0699] <Luke Warlow>
* Neither does target etc, I think was the logic there (if there was any). It was named source based on the option bag added to showPopover/togglePopover.

[06:26:21.0779] <Luke Warlow>
* Neither does target etc, I think was the logic there (if there was any). It was named source based on the option bag added to showPopover/togglePopover.

It's also readonly as opposed to the others which do two way reflection.

[06:57:37.0760] <zcorpan>
ah, foolip merged. I'll continue reviewing and comment here for now

[06:58:30.0728] <zcorpan>
keithamus: show modal dialog can throw an exception, e.g. if element is not connected. Is that ok? Example: https://software.hixie.ch/utilities/js/live-dom-viewer/saved/13512

[07:02:30.0669] <keithamus>
Ah we should probably check if the element is connected just before showing as modal I guess 

[07:06:43.0178] <annevk>
zcorpan: `CommandEvent` doesn't use reflect, so it's not applicable?

[07:09:32.0278] <zcorpan>
annevk: true. But then https://html.spec.whatwg.org/#dom-navigateevent-sourceelement was recently added

[07:15:44.0112] <zcorpan>
keithamus: the other possibility is that the document is not fully active, but I think the button will have the same node document, and the activation behavior steps check for that (step 2). So I think connected is the only missing case

[07:17:00.0117] <zcorpan>
I can file a bug

[07:25:33.0798] <zcorpan>
https://github.com/whatwg/html/issues/11043

[07:26:09.0763] <Luke Warlow>
We could alternatively do the same as popover? Have a way to turn exceptions into early returns?

[07:26:24.0494] <Luke Warlow>
* We could alternatively do the same as popover? Have a way to turn exceptions into early returns? Though that's a bit messy so just adding the check might be nicer

[07:37:28.0351] <annevk>
zcorpan: I think `sourceElement` there is reasonable because there's multiple types of sources, but we only expose it for elements.

[07:41:30.0247] <zcorpan>
I like the Auto state btw 👌

[07:45:01.0494] <keithamus>
Yeah I appreciate all the reviews from everyone, I think this has shaped up nicely. 

[07:46:58.0230] <zcorpan>
IIUC, you can now do `<form><button command=... commandfor=...>` (without `type`), and it will be a command button instead of a submit button

[07:47:34.0089] <Luke Warlow>
It'll currently be a no-op

[07:47:48.0758] <Luke Warlow>
But in future it can be a command button instead of submit

[07:48:20.0481] <Luke Warlow>
(Unless I can't remember the details which at this point wouldn't be surprising 😅)

[07:48:53.0458] <Luke Warlow>
The reasoning is that in older browsers it will submit the form still so this encourages you to add an explicit type

[07:52:13.0049] <zcorpan>
>      If element has a form owner and element 's type attribute is in the Submit Button state, then return. 
https://whatpr.org/html/9841/734afba...cb6a2d3/form-elements.html#the-button-element:activation-behaviour


[07:52:36.0229] <Luke Warlow>
Good catch!

[07:55:24.0578] <zcorpan>
OK, done reviewing. Nice work 👏

[07:55:42.0563] <Luke Warlow>
Thanks for everyones reviews btw!

[08:01:12.0529] <Luke Warlow>
https://github.com/whatwg/html/issues/11044 

[10:29:56.0949] <Luke Warlow>
https://github.com/whatwg/html/pull/11047 - is something like this considered normative or editorial?

[10:58:40.0113] <Luke Warlow>
https://github.com/whatwg/html/pull/11049 - fixed here

[10:59:06.0172] <Luke Warlow>
* https://github.com/whatwg/html/issues/11044  - fixed at https://github.com/whatwg/html/pull/11048

[13:01:40.0029] <zcorpan>
normative

[13:41:06.0211] <hacknorris>
and i still don't know if it's possible to make cursor from tileset…


2025-02-20
[17:12:26.0834] <zcorpan>
RFC: I wrote an emoji proposal for "semla" (as requested by my wife): https://docs.google.com/document/d/1aw0Md2v7twwmj1DMjh5ryBEjt32sJx4tGb3w4rV7NCo/edit?usp=sharing

Submissions are accepted from 2025-04-02 apparently https://unicode.org/emoji/proposals.html

[03:25:58.0107] <annevk>
Hmm well I guess command/commandfor landed too quickly after all. :-( That's way too many regressions for something that's supposed to be a standard.

[03:35:45.0580] <annevk>
zcorpan: can you also get bitterballen added?

[04:08:42.0805] <zcorpan>
annevk: do you have evidence of demand? :)

[04:10:19.0233] <Luke Warlow>
> <@annevk:matrix.org> Hmm well I guess command/commandfor landed too quickly after all. :-( That's way too many regressions for something that's supposed to be a standard.

Yeah apologies. That auto state change seemed to break things a bit and not get caught

[04:11:08.0809] <Luke Warlow>
* Yeah apologies. That auto state change seemed to break things a bit and not get caught. + Some last minute feedback about desired behaviours also meant a slightly bigger normative change in that last PR I've put up

[10:01:10.0658] <annevk>
I wonder if folks here can help me with some IDL. Say I have a method `importNode` that takes a `Node` _node_ and a boolean or a dictionary _options_. The dictionary has two members: `subtree` and `customElements`.

I want the semantics to be like this:

- `importNode(node, false)` == `importNode(node, { subtree: false })`
- `importNode(node, true)` == `importNode(node, { subtree: true })`
- `importNode(node)` == `importNode(node, { subtree: false })`
- `importNode(node, undefined)` == `importNode(node, { subtree: false })`
- `importNode(node, { customElements })` == `importNode(node, { subtree: true, customElements })`
- `importNode(node, { })` == `importNode(node, { subtree: true })`
- `importNode(node, aRandomObject)` == `importNode(node, { subtree: true })` (I think this is the same case as `{ }`)

At least that would generally match how it behaves today when an object is passed instead of a boolean.

The path of least resistance is probably to not handle empty dictionary differently from undefined, but curious if people have thoughts. (Opinions are fine too.) cc smaug Domenic keithamus

[10:03:11.0345] <keithamus>
So `subtree` would default to `true` unless explicitly set to `false`?

[10:10:07.0488] <keithamus>
So it would be defined something a bit like...

```
dictionary ImportNodeOptions {
  boolean subtree = true;
  CustomElementRegistry customElements = null;
};

importNode(Node node, optional (ImportNodeOptions or boolean) options = false)
```

I think?

[10:11:32.0598] <keithamus>
It seems reasonable to me at least. I think boolean properties defaulting to false is a little weird - especially as I think the only other similar API is addEventListener? Where if you pass a dictionary `captures = false`?

[10:12:12.0387] <keithamus>
* It seems reasonable to me at least. I think boolean properties defaulting to false is a little weird - especially as I think the only other similar API is addEventListener? Where if you pass a dictionary `capture = false`.

[10:15:38.0717] <annevk>
The dictionary member name can prolly be inverted to account for that. I'm mainly wondering whether this is something we want to do and if this actually works in IDL (I haven't tried your option, I'm not sure if that runs counter to requirements around dictionaries defaulting to { }).

[10:16:52.0398] <annevk>
This case is a bit different from capture in that people want subtree to be true by default. (Or have a selfOnly that defaults to false instead of true, however you want to put it.) Nobody wanted that for capture.

[10:20:56.0456] <keithamus>
From a developer perspective I think the dictionary member defaulting to true is perhaps less confusing than inverting the argument (e.g. `selfOnly = false`). I understand that `capture` was intentionally `false` I am just trying to think of how existing intuitions might map.

[10:27:22.0336] <keithamus>
I guess `scrollIntoView()` is another API which uses boolean/dict but the boolean maps to a supplied dictionary of very different arguments (if true it's `{block: "start", inline: "nearest"}` while `false` is `{block: "end", inline: "nearest"}`). I am not sure if that's more or less confusing 😅

[10:34:30.0148] <bkardell>
> <@keithamus:matrix.org> I guess `scrollIntoView()` is another API which uses boolean/dict but the boolean maps to a supplied dictionary of very different arguments (if true it's `{block: "start", inline: "nearest"}` while `false` is `{block: "end", inline: "nearest"}`). I am not sure if that's more or less confusing 😅

It is definintely one of those... more or less :)

[10:34:35.0627] <bkardell>
> <@keithamus:matrix.org> I guess `scrollIntoView()` is another API which uses boolean/dict but the boolean maps to a supplied dictionary of very different arguments (if true it's `{block: "start", inline: "nearest"}` while `false` is `{block: "end", inline: "nearest"}`). I am not sure if that's more or less confusing 😅

 * It is definitely one of those... more or less :)

[11:49:32.0444] <Noam Rosenthal>
Most of these boolean args are confusing TBH 

[11:49:55.0738] <Noam Rosenthal>
But `importNode` is pretty old so it's understandable

[11:50:54.0705] <Noam Rosenthal>
I think `importNode(node, { })` is handled as `{subtree: true}` because `{}` is cast as truthy to boolean?

[11:54:29.0458] <Noam Rosenthal>
this IDL seems legit


2025-02-21
[16:14:01.0628] <Kaiido>
Is `{ subtree: false, customElements: true }` a valid input or is `customElements` relying on `subtree` being true?

[16:15:30.0815] <Kaiido>
* Is `{ subtree: false, customElements }` a valid input or is `customElements` relying on `subtree` being true?

[18:50:01.0057] <sideshowbarker>
I’m looking at https://github.com/mdn/content/pull/38254/files and wondering why MDN might have ever had `NodeFilter.SHOW_ATTRIBUTE` and `NodeFilter.SHOW_CDATA_SECTION` flagged as deprecated to begin with

[18:50:45.0525] <sideshowbarker>
Maybe just somebody was confused, or maybe just a plain mistake, I dunno

[18:52:53.0027] <sideshowbarker>
I’m going ahead and merging that patch, but… just curious about the history. git blame seems to shows it’s been that way since the old wiki days — before the sources were moved into a git repo (~5 years ago)

[23:36:29.0206] <annevk>
Kaiido: good question, that would be a valid input.

[01:53:12.0815] <annevk>
TabAtkins: minor thing, some kind of indication that the line numbers for

`FATAL ERROR: IDL SYNTAX ERROR LINE: 55 - expected ";"`

are made would have saved me a bit of time.

[01:53:35.0731] <annevk>
* TabAtkins: minor thing, some kind of indication that the line numbers for

`FATAL ERROR: IDL SYNTAX ERROR LINE: 55 - expected ";"`

are made based on the concatenated IDL and not the actual Bikeshed input would have saved me a bit of time.

[01:53:48.0446] <annevk>
* TabAtkins: minor thing, some kind of indication that the line numbers for

`FATAL ERROR: IDL SYNTAX ERROR LINE: 55 - expected ";"`

are based on the concatenated IDL and not the actual Bikeshed input would have saved me a bit of time.

[01:54:59.0543] <annevk>
sideshowbarker: we tried to remove Attr and CDATASection nodes from the DOM and failed.

[01:56:45.0264] <annevk>
keithamus: https://github.com/whatwg/html/pull/10869 and https://github.com/whatwg/dom/pull/1341 should be good now. I will update the PR template a bit. And I'll align WebKit and tests with the selfOnly member. I think that's the only thing we don't do yet.

[01:57:00.0895] <keithamus>
Thanks for updating these!

[01:57:41.0552] <annevk>
I also updated the HTML issue's OP so it has the latest IDL sketch. But I recommend working from the actual PRs.

[01:57:54.0097] <keithamus>
perfect, thank you

[03:31:44.0193] <Ms2ger>
> <@sideshowbarker:matrix.org> I’m looking at https://github.com/mdn/content/pull/38254/files and wondering why MDN might have ever had `NodeFilter.SHOW_ATTRIBUTE` and `NodeFilter.SHOW_CDATA_SECTION` flagged as deprecated to begin with

Maybe because we wanted to remove cdata and attr nodes

[03:31:55.0163] <Ms2ger>
👴

[03:32:59.0852] <annevk>
TabAtkins: did Bikeshed change how it does references to terms? They all to be path-absolute URLs now? At least on https://whatpr.org/dom/1341/b64559c...71537d2.html I can no longer click on them...

[05:20:33.0768] <annevk>
keithamus: tests have landed. selfOnly test rename is up for review here: https://github.com/web-platform-tests/wpt/pull/50860

[07:07:02.0852] <TabAtkins>
> <@annevk:matrix.org> TabAtkins: minor thing, some kind of indication that the line numbers for
> 
> `FATAL ERROR: IDL SYNTAX ERROR LINE: 55 - expected ";"`
> 
> are based on the concatenated IDL and not the actual Bikeshed input would have saved me a bit of time.

I just fixed those line numbers earlier this week, try updating Bikeshed.

[07:08:18.0438] <TabAtkins>
> <@annevk:matrix.org> TabAtkins: did Bikeshed change how it does references to terms? They all to be path-absolute URLs now? At least on https://whatpr.org/dom/1341/b64559c...71537d2.html I can no longer click on them...

Uhhhh no, that's unexpected. I'll have to debug that. I shouldn't have made any changes around that.

[08:42:51.0826] <annevk>
TabAtkins: I only ever use CI Bikeshed. I got these results this morning.

[09:03:41.0618] <annevk>
TabAtkins: I suspect "Boilerplate: script-dom-helper" whatever that is. Perhaps it's time to audit all these scripts that execute on specifications again.

[09:04:01.0746] <annevk>
Except that I lack time. 🫠

[09:10:25.0852] <TabAtkins>
I'll check things out in a sec

[09:47:41.0820] <TabAtkins>
Which spec is this, btw?

[09:48:32.0289] <TabAtkins>
ah nm, I see the problem. didn't realize the error messages varied there.

[09:49:01.0820] <TabAtkins>
(I'm hacking around the lack of a line number offset by parsing the error message to look for line numbers.)

[10:19:02.0177] <TabAtkins>
So at a quick glance, this seems to be caused by the `<base>` element right at the top of the document. Is *that* a recent change? The links themselves are normal `href="#foo"` things.

[10:26:36.0018] <TabAtkins>
(I can't immediately find where/how whatpr documents are generated.)


2025-02-22
[23:13:10.0814] <annevk>
TabAtkins: thanks! It's https://github.com/w3c/htmldiff-ui/issues/22

[01:43:31.0829] <hacknorris>
decided to give up on previous thingy. someone knows if it's possible to set more "hot points" in meter element than just high and low? like i want to have 3 zones - good, mid and bad (red, yellow, green)

[06:21:06.0383] <Luke Warlow>
> <@gamerposter:pol.social> decided to give up on previous thingy. someone knows if it's possible to set more "hot points" in meter element than just high and low? like i want to have 3 zones - good, mid and bad (red, yellow, green)

If you have the optimal attribute set you can have that

[07:24:13.0772] <bkardell>
Good, gooder, goodest


2025-02-24
[00:24:54.0836] <justbreath1120>
YO 

[00:25:19.0172] <justbreath1120>
Whats up guys im super dooper new to coding 

[00:46:15.0420] <justbreath1120>
I have a very important and meaningful request 

[00:47:46.0754] <justbreath1120>
please if anyone has time to help me with my assignments please message me . This is my last chance to bring up my GPA and i also web development i just need a little help 

[03:49:23.0558] <canova>
Hey annevk ! While I was looking into the EventTiming API, I came across [an issue](https://github.com/w3c/event-timing/issues/142). There is a spec change proposal there, do you mind taking a look to see if you agree with the proposal? Wanted to get a green light from all of the interop parties before making a change

[04:30:37.0577] <annevk>
canova: per https://github.com/WebKit/standards-positions/issues/420 it seems we're not satisfied with this API to begin with so unsure how we'd judge minor changes

[04:44:23.0348] <canova>
annevk: I agree that I was confused about the "first-input" at first too. Some parts of the issue mentioned seem to be resolved, and later yoavweiss's answer seems to cover some other issues. It would be great to get a response there maybe. There is also [a larger issue filed](https://github.com/w3c/event-timing/issues/139) for evolving this into first interaction.

But I think this is still an improvement compared to the current situation. Previously we were getting `mousedown` for the first input even though `pointerdown` was triggered before. Which looks like a bug in spec to me

[06:18:56.0255] <sefeng>
er...isn't it part of the interop2025? 

[12:50:09.0913] <smaug>
Hmm, trying to recall the history of CommandEvent in Gecko, which is separate to XULCommandEvent. And the HTML spec CommandEvent is like a mix of those two.

[12:54:50.0209] <smaug>
Luckily the existing CommandEvent in Gecko can be just tweaked a bit to be like the HTML concept CommandEvent.

[12:55:45.0548] <smaug>
In Gecko the existing event is used only in the parent process to handle events like back/forward etc coming from special keys or extra buttons of mouse.


2025-02-25
[01:02:52.0843] <Luke Warlow>
To anyone who knows about DSD:

 Should `data:text/html,<div id="foo"></div><script>foo.setHTMLUnsafe('<template shadowrootmode="open"><h1>Foo</h1></template>')</script>` create a shadow root for the div, or simply insert a document fragment? It feels like this should work for DSD to me, but currently in Chromium, Gecko and WebKit it inserts a document fragment. Ladybird however creates a shadow root.

So now I'm wondering who's correct?

[01:08:22.0897] <sideshowbarker>
I wonder if the difference may be due to Ladybird strictly implemented what’s actually spec’ed


[01:08:50.0457] <sideshowbarker>
Or maybe in different words that’s the same thing you’re asking

[01:09:45.0255] <Luke Warlow>
Yeah essentially I'm trying to work out if I should raise a bug with ladybird or with the other 3

[01:10:28.0413] <Luke Warlow>
* Yeah essentially I'm trying to work out if I should raise a bug with ladybird or with the other 3. It feels to me and to the person who found the current behaviour like Ladybird is correct with what is expected

[01:10:53.0375] <Luke Warlow>
* Yeah essentially I'm trying to work out if I should raise a bug with ladybird or with the other 3. It feels to me and to the person who found the current behaviour like Ladybird is correct with what is expected. From a quick glance at the spec ladybird seems right too but I'm only familiar with the surface level of the API.

[01:11:18.0552] <Noam Rosenthal>
yes it is

[03:05:26.0258] <annevk>
Luke Warlow: doesn't that create a Document with an html root node and parses template into that? Why would that create a shadow tree for the div?

[03:07:47.0775] <Luke Warlow>
parseHTMLUnsafe creates a new document. I don't think setHTMLUnsafe does?

[03:08:36.0781] <annevk>
Luke Warlow: that's step 1 of fragment parsing, afaict

[03:09:42.0247] <Luke Warlow>
Ah wait yeah just spotted that.  Must have skipped over that. I assumed the context element was used more exhaustively than it is. But it looks like it maybe just sets the initial parser state?

[03:11:07.0017] <Luke Warlow>
Ah but wait then it does append a copy of the context element into the stack. I assume when it later does the replacement that the DSD gets swapped out for a doc fragment because the parent elements don't match?

[03:13:02.0464] <annevk>
I don't think the context element gets onto the stack. "the adjusted current node is not the topmost element in the stack of open elements," is why we just insert the template element.

[03:15:15.0599] <Luke Warlow>
Step 11 here sounds like it does something, but you're right it doesn't seem to actually end up in the stack? https://html.spec.whatwg.org/multipage/parsing.html#html-fragment-parsing-algorithm

[03:15:43.0892] <Luke Warlow>
Either way thanks! I'll raise an issue with Ladybird and just keep in mind that it needs the container element for context in the source string to parse

[03:15:51.0549] <annevk>
Yeah, modernizing the HTML parser would be nice. Lots of implicit nonsense.

[03:17:14.0100] <Luke Warlow>
* Either way thanks! I'll raise an issue with Ladybird (and WPT) and just keep in mind that it needs the container element for context in the source string to parse

[03:18:12.0562] <annevk>
Luke Warlow: attachHTMLShadow() or some such could be interesting, maybe. Would be quite a bit of work though.

[08:59:18.0705] <annevk>
keithamus: can you review https://github.com/whatwg/html/pull/11053 please?

[10:03:03.0453] <keithamus>
> <@annevk:matrix.org> keithamus: can you review https://github.com/whatwg/html/pull/11053 please?

LGTM!


2025-02-26
[18:00:00.0022] <Domenic>
annevk: I wonder if https://github.com/whatwg/dom/pull/1307 and https://github.com/whatwg/html/pull/10657 fell off your radar

[23:12:45.0678] <annevk>
Domenic: I think the former only got updated to address feedback from smaug literally yesterday?

[23:13:06.0524] <annevk>
/me looks again

[23:13:24.0172] <Domenic>
Oh you're right, the trillions of hidden items and other GitHub references confused me

[23:14:21.0811] <annevk>
Yeah, hidden items on GitHub is such an issue. I would honestly prefer a plain text view that doesn't do that if the concern is bandwidth.

[23:18:51.0469] <sideshowbarker>
I recommend making some time to try out https://github.com/dlvhdr/gh-dash when you have a chance. With that you can browse through and view all comments for a PR/issue without needing to un-hide stuff

[23:19:29.0258] <sideshowbarker>
…among a lot of other really-useful things you can do with it (e.g., review and merge PRs from within it)

[23:20:18.0139] <sideshowbarker>
Maybe eventually ween yourself off needing to use the GitHub web UI very much at all

[23:21:08.0254] <sideshowbarker>
I contributed a couple feature patches to that tool so far — and may contribute some more, as I switch to using it for more things

[00:52:43.0070] <annevk>
zcorpan smaug any final thoughts on https://github.com/whatwg/html/pull/11053? If not I'm gonna merge it.

[01:33:56.0291] <Luke Warlow>
> <@domenicdenicola:matrix.org> Oh you're right, the trillions of hidden items and other GitHub references confused me

At the very least I really wish they were all using hidden=until-found or details elements so I could find in page them.


2025-02-27
[20:24:26.0411] <Domenic>
Psychpsyo: your archeology at https://github.com/whatwg/html/issues/10296#issuecomment-2681769263 is pretty cool. Kudos for doing that. I hope it leads to resolving this decade-old issue in a good way for all involved :)

[00:02:38.0321] <annevk>
Domenic: not sure I'll be ready to reply to your new `getImageData()` question later today. I've asked internally, though I would also want padenot to reply.

[00:06:40.0478] <Domenic>
No problem, thanks for prioritizing it.

[00:56:51.0592] <annevk>
And yet another polyfill appears to have poisoned the standards well. This for scoped custom element registries. People never learn. 🫠

[05:30:03.0782] <annevk>
* And yet another polyfill appears to have poisoned the standards well. This time for scoped custom element registries. People never learn. 🫠

[06:19:43.0117] <Psychpsyo>
Thank you!
I'm still hoping that we can restrict the elements this applies to and maybe re-frame the spec in terms of margin collapsing once again, since that, to me, makes infinitely more sense than the current, convoluted CSS-to-English translation of Firefox's web-incompatible imitation of that behavior.

[06:20:07.0926] <Psychpsyo>
* Thank you!
I'm still hoping that we can restrict the elements this applies to and maybe re-phrase the spec in terms of margin collapsing once again, since that, to me, makes infinitely more sense than the current, convoluted CSS-to-English translation of Firefox's web-incompatible imitation of that behavior.

[06:59:38.0096] <Psychpsyo>
* Thank you!
I'm still hoping that we can restrict the cases this applies in and maybe re-phrase the spec in terms of margin collapsing once again, since that, to me, makes infinitely more sense than the current, convoluted CSS-to-English translation of Firefox's web-incompatible imitation of that behavior.

[07:01:04.0777] <Psychpsyo>
* Thank you!
I'm still hoping that we can restrict the cases this applies in and maybe re-phrase the spec in terms of margin collapsing once again, since that, to me, makes infinitely more sense than the current, convoluted CSS-to-English translation of Firefox's web-incompatible imitation of the behavior.

[07:05:13.0566] <Andreu Botella>
For the record, Chrome's implementation doesn't happen at the CSS level at all, but when actually laying out the quirky margins

