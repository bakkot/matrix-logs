2021-11-01
[17:10:24.0486] <sideshowbarker>
As far as what‚Äôs documented in MDN:
```
$ rg --no-line-number --no-filename 'spec_url": ".+whatwg.org' ~/workspace/mdn/browser-compat-data/http/headers/ | awk NF | cut -d ":" -f2- | sort
 "https://fetch.spec.whatwg.org/#cross-origin-resource-policy-header",
 "https://fetch.spec.whatwg.org/#http-access-control-allow-credentials",
 "https://fetch.spec.whatwg.org/#http-access-control-allow-headers",
 "https://fetch.spec.whatwg.org/#http-access-control-allow-methods",
 "https://fetch.spec.whatwg.org/#http-access-control-allow-origin",
 "https://fetch.spec.whatwg.org/#http-access-control-expose-headers",
 "https://fetch.spec.whatwg.org/#http-access-control-max-age",
 "https://fetch.spec.whatwg.org/#http-access-control-request-headers",
 "https://fetch.spec.whatwg.org/#http-access-control-request-method",
 "https://fetch.spec.whatwg.org/#x-content-type-options-header",
 "https://fullscreen.spec.whatwg.org/#permissions-policy-integration",
 "https://html.spec.whatwg.org/multipage/infrastructure.html#autoplay-feature",
 "https://html.spec.whatwg.org/multipage/infrastructure.html#document-domain-feature",
 "https://html.spec.whatwg.org/multipage/origin.html#coep",
 "https://html.spec.whatwg.org/multipage/origin.html#the-headers",
```
‚Ä¶ so from that, yeah, only Fetch and HTML (the Fullscreen one isn‚Äôt introducing any header)

[17:11:31.0385] <sideshowbarker>
> <@annevk:mozilla.org> Apart from Fetch and HTML, do we have other WHATWG standards that introduce their own HTTP headers?

 * As far as what‚Äôs documented in MDN:
```
$ rg --no-line-number --no-filename 'spec_url": ".+whatwg.org' ~/workspace/mdn/browser-compat-data/http/headers/ | awk NF | cut -d ":" -f2- | sort
 "https://fetch.spec.whatwg.org/#cross-origin-resource-policy-header",
 "https://fetch.spec.whatwg.org/#http-access-control-allow-credentials",
 "https://fetch.spec.whatwg.org/#http-access-control-allow-headers",
 "https://fetch.spec.whatwg.org/#http-access-control-allow-methods",
 "https://fetch.spec.whatwg.org/#http-access-control-allow-origin",
 "https://fetch.spec.whatwg.org/#http-access-control-expose-headers",
 "https://fetch.spec.whatwg.org/#http-access-control-max-age",
 "https://fetch.spec.whatwg.org/#http-access-control-request-headers",
 "https://fetch.spec.whatwg.org/#http-access-control-request-method",
 "https://fetch.spec.whatwg.org/#x-content-type-options-header",
 "https://fullscreen.spec.whatwg.org/#permissions-policy-integration",
 "https://html.spec.whatwg.org/multipage/infrastructure.html#autoplay-feature",
 "https://html.spec.whatwg.org/multipage/infrastructure.html#document-domain-feature",
 "https://html.spec.whatwg.org/multipage/origin.html#coep",
 "https://html.spec.whatwg.org/multipage/origin.html#the-headers",
```
‚Ä¶ so from that, yeah, only Fetch and HTML (the Fullscreen one isn‚Äôt introducing any header)


2021-11-02
[19:37:48.0724] <sideshowbarker>
annevk: FYI my _‚ÄúShow HTTP status code in CORS messages‚Äù_ patch landed in the WebKit sources https://trac.webkit.org/changeset/285145/webkit

[19:41:37.0031] <sideshowbarker>
so that‚Äôll soon be in a Safari TP release ‚Äî and then I guess in Safari 15.x in March or April  

[23:35:13.0693] <DerekNonGeneric>
congrats! was somewhat expecting to see these error messages localized but no browser vendor does error messages correctly, so not surprised if that's the case. might need to make an account over now that you mention it

[23:36:07.0825] <sideshowbarker>
they are localized in some browsers at least

[23:39:31.0917] <DerekNonGeneric>
there are ways to localize error messages, but that doesn't seem to have happened in that changelog -- maybe they go back over it later? doubt it, but have seen great localization for error messages maybe twice

[23:42:11.0041] <DerekNonGeneric>
the two software projects were Git and TypeScript believe it or not

[03:37:24.0922] <smaug>
why are some tentative openUI tests being mixed with html tests?

[03:55:23.0854] <annevk>
smaug: the intention might be to upstream the feature to HTML?

[03:56:10.0886] <smaug>
I couldn't find any spec-like text for selectmenu

[03:56:24.0037] <smaug>
perhaps I looked at from wrong places

[03:56:52.0368] <annevk>
smaug: are they marked as tentative at least?

[03:56:58.0934] <smaug>
sure

[03:58:36.0929] <smaug>
seeing "the-selectmenu-element" here https://github.com/web-platform-tests/wpt/tree/ca3635d2be104d885837442cc5e7ada030d66b22/html/semantics/forms is a bit surprising. 

[05:03:39.0423] <Ms2ger üíâüíâ>
They're all marked `.tentative`

[05:03:51.0850] <Ms2ger üíâüíâ>
Maybe they didn't know you could do that to a complete directory too

[06:00:59.0368] <Noam Rosenthal>
annevk, Jake Archibald: I was thinking re. the controller thingy (https://github.com/whatwg/fetch/pull/1329),  

maybe instead of returning a struct that fetch exported functions for, to return a struct with algorithm fields, that are set before returning the controller, kind of like how the different algorithms are kept in fetch params).

This way both fetch-params and the state are truly private, and the only thing returned/exported is terminate/abort/finalize or whatever method is operable after the fetch has started. WDYT?

[06:03:26.0453] <Jake Archibald>
Noam Rosenthal: I think algorithm fields are for cases where the algorithm is _set_ by some other spec, but annevk will know more

[06:05:09.0581] <annevk>
Yeah, generally concepts are "plain" structs and algorithms get everything they need passed as parameters

[06:05:22.0694] <Noam Rosenthal>
... Trying to prevent a situation where by putting the state information inside controller we make it "public", while what we want to publicize is only some methods to manipulate the fetch.

[06:05:38.0665] <Noam Rosenthal>
 * ... Trying to prevent a situation where by putting the state information inside controller we make it "public", while what we want to publicize is only some methods to manipulate the fetch.

[06:05:48.0608] <Jake Archibald>
Can't the controller just have the public data?

[06:05:52.0898] <annevk>
I think exposing the state of the fetch is reasonable

[06:06:00.0950] <Jake Archibald>
fetch params can have the private data

[06:06:10.0176] <annevk>
Assuming that we're talking about "ongoing" vs terminated

[06:06:21.0541] <Noam Rosenthal>
so it exposes state, and later cacheState and timing info

[06:06:31.0985] <Noam Rosenthal>
... which are needed when finalizing

[06:06:57.0453] <annevk>
Yeah, but we'd only set those on the controller when they are meant to become public (so we might duplicate them there, essentially)

[06:07:26.0817] <Noam Rosenthal>
I guess cacheState can only be set before fetch finale, right?

[06:07:32.0069] <Noam Rosenthal>
which would make this sort of work

[06:07:41.0646] <annevk>
As in, we'd write to those fields on "fetch params", and then at some point copy the whole lot over to the controller

[06:08:23.0107] <Noam Rosenthal>
yea, fetch finale would probably be where this happens, as that's where it's currently copied to the response

[06:09:00.0969] <annevk>
So we'll end up with some duplication, but it also clarifies things in a way

[06:09:06.0024] <Noam Rosenthal>
OK this makes more sense to me. Thanks!

[06:09:13.0553] <annevk>
\o/

[06:09:26.0451] <Noam Rosenthal>
(Done with bikesheeding about this corner, going back to work)

[06:09:40.0837] <Noam Rosenthal>
 * (Done with bikesheeding about this corner, going back to work)

[06:11:11.0321] <annevk>
I wish I had more painted bikesheds to show for it, but I guess that's why it's called that way

[06:36:41.0706] <Noam Rosenthal>
Jake Archibald, annevk : followed your suggestion (https://github.com/whatwg/fetch/pull/1329), hope it's on the right track :)

[06:57:26.0401] <annevk>
Noam Rosenthal: I haven't had a chance yet, but one thing we need to figure out is the interaction of this with service workers

[06:57:42.0778] <annevk>
Noam Rosenthal: I just realized that while writing https://github.com/whatwg/fetch/pull/1343#issuecomment-957631425

[06:58:15.0988] <annevk>
Noam Rosenthal: service workers observe the termination for some things so they might need access to the controller or the state or some such

[06:58:36.0457] <annevk>
Jake Archibald: did you consider that already perhaps?

[07:12:43.0332] <Jake Archibald>
annevk: service worker is hand-waving this in a couple of places, so yeah, it's be great to switch this to an "abort when" based on some state

[07:31:27.0838] <Noam Rosenthal>
> <@annevk:mozilla.org> Noam Rosenthal: I haven't had a chance yet, but one thing we need to figure out is the interaction of this with service workers

I will get more acquainted with this

[08:20:58.0888] <annevk>
Noam Rosenthal: cool! I think we need to expose the controller, essentially; I guess we only need to read state from it

[08:21:36.0271] <annevk>
Noam Rosenthal: I'm not sure if that means we should stuff the controller on the request or just add an argument to "handle fetch", I guess the latter would be better

[08:21:55.0573] <annevk>
Anyway, this is a bit off the cuff

[08:48:29.0364] <Luca Casonato>
Domenic: In the streams spec, in `ReadableStreamPipeTo`, the spec says:
> If source.[[controller]] implements ReadableByteStreamController, let reader be either ! AcquireReadableStreamBYOBReader(source) or ! AcquireReadableStreamDefaultReader(source), at the user agent‚Äôs discretion.

(since the beginning of time: https://github.com/whatwg/streams/pull/512). What does this mean? In what cases should the user agent use which reader type? I can't find any docs in surrounding code snippets.

[08:48:35.0315] <Luca Casonato>
 * Domenic: In the streams spec, in `ReadableStreamPipeTo`, the spec says:
> If source.[[controller]] implements ReadableByteStreamController, let reader be either ! AcquireReadableStreamBYOBReader(source) or ! AcquireReadableStreamDefaultReader(source), at the user agent‚Äôs discretion.

(since the beginning of time: https://github.com/whatwg/streams/pull/512). What does this mean? In what cases should the user agent use which reader type? I can't find any docs in surrounding code snippets.

[09:08:35.0954] <Domenic>
Luca Casonato: this is basically saying that the choice of reader is unobservable, so if you want to use a byte reader because you think you can do smart byte thingies with it while piping, go ahead

[09:08:52.0942] <Luca Casonato>
ah, ok

[09:09:24.0542] <Luca Casonato>
thx

[09:16:00.0230] <annevk>
sefeng: hey welcome! https://github.com/whatwg/html/pull/7285 could use your review I think. And potentially that of emilio.

[09:16:44.0467] <sefeng>
roger, will do

[09:50:35.0702] <annevk>
Domenic: if `x in y` is false, will `y[x]` always be undefined?

[09:50:56.0351] <annevk>
/me wonders whether to merge https://github.com/web-platform-tests/wpt/pull/31461

[09:52:26.0766] <Luca Casonato>
> <@annevk:mozilla.org> Domenic: if `x in y` is false, will `y[x]` always be undefined?

No (because Proxy)

[09:53:11.0042] <annevk>
Luca Casonato: fair, but that doesn't seem applicable here

[09:53:21.0779] <Luca Casonato>
Oh ok, then idk

[09:57:07.0663] <Ms2ger üíâüíâ>
Seems fine

[09:58:58.0892] <Benjamin Gruenbaum>
> <@noamr:matrix.org> Jake Archibald, annevk : followed your suggestion (https://github.com/whatwg/fetch/pull/1329), hope it's on the right track :)

really nice! 

[10:51:56.0392] <Noam Rosenthal>
> <@annevk:mozilla.org> Noam Rosenthal: I'm not sure if that means we should stuff the controller on the request or just add an argument to "handle fetch", I guess the latter would be better

Definitely the latter. Seems natural to me that SW would get a "fetch controller" as a parameter and would be able to query if it is terminated

[10:54:33.0164] <Noam Rosenthal>
I would try to avoid associating more things with requests/responses, as those are transient serializable beings and when we associate "procedural" beings like fetch controller (or "an ongoing fetch") we make them confusing... (does this controller gets serialized or stored with the request? how?)

that's what happened with associating timing info to a response, where it got ambiguous in terms of caching and SW

[10:55:15.0396] <Noam Rosenthal>
adding a parameter to SW's fetch "handle fetch" is a clean solution to this problem

[11:14:45.0117] <Noam Rosenthal>
annevk, Jake Archibald I think one thing that makes SW's "handle fetch" a bit different is that it asynchronously returns a response, rather than receive a `processResponse` callback algorithm or so.

If we'd change it to be the latter, the SW fetch could return its own controller and the main fetch could terminate it, rather than invert it to where SW has to check whether its caller ("the fetch instance") was terminated. 

[11:19:32.0817] <annevk>
I wonder what happens today if the abort happens after the service worker returned a response. Does the service worker still get notified? Perhaps that's just a state check on the service worker side though...

[11:20:06.0881] <annevk>
Making that interaction with the service worker non-blocking sounds reasonable, though I'm not entirely sure I see what it would buy us quite yet.

[11:22:23.0515] <annevk>
I guess having a controller for the fetch event would give an opportunity to not forward signals when it's too late anyway, but realistically you'd have to implement that check on the receiver side as well.

[11:23:28.0129] <annevk>
I should have time to give all this another look at tomorrow

[14:53:57.0863] <Domenic>
annevk: looks like removing "pair" broke Web IDL: https://github.com/whatwg/webidl/runs/4082229137?check_suite_focus=true

[15:16:26.0659] <Domenic>
Kagami is on it


2021-11-03
[23:17:08.0422] <annevk>
Thanks krosylight!

[01:10:43.0300] <Ms2ger üíâüíâ>
/me denies everything

[02:38:21.0859] <annevk>
Jake Archibald: so one thing that strikes me is that there's no forwarding of cancelation to a fetch initiated by the service worker

[02:39:13.0135] <Jake Archibald>
annevk: in which direction? As in, which side is listening for the cancelation, and which side is cancelling?

[02:39:18.0664] <annevk>
Jake Archibald: so if a document fetches A and the service worker fetches B and returns that, when exactly will it listen to aborting of A?

[02:40:31.0063] <Jake Archibald>
annevk: if the stream is cancelled, that part works right? For stuff that happens before that, I thought `fetchEvent.request.signal` could be used as an indicator

[02:40:39.0155] <annevk>
I guess only if it reuses the Request object in some manner, although I'm not sure how well that is defined

[02:41:20.0635] <annevk>
I think it there might be some race issues, but canceling the stream probably works, yeah

[02:43:00.0692] <annevk>
Noam Rosenthal: I think one thing that might influence the design of the interaction with service workers is what we want to do with timing

[02:43:15.0579] <annevk>
Noam Rosenthal: I'm not entirely sure what information needs to be exchanged

[02:43:42.0879] <annevk>
Noam Rosenthal: if that information would ideally be on a "service worker fetch event controller", I guess that's what we should add

[02:44:15.0284] <annevk>
Noam Rosenthal: as per your suggestion, and fetch would forward an abort to that controller

[02:45:35.0322] <annevk>
(It's a little weird that in JavaScript the cancelation is managed by AbortSignal on the Request, but that doesn't encompass all types of aborting that might happen, so maybe this is okay.)

[02:54:43.0751] <Noam Rosenthal>
annevk: regarding timing, going forward there shouldn't be interaction. It's part of why I want to make things more explicit there

[02:55:31.0035] <Noam Rosenthal>
*only* a fetch would keep its timing info and report it. later of course we can add more things to the controller.

[02:56:05.0175] <Noam Rosenthal>
(the service worker timing is only relevant to navigation timing, and in that case the timing is not part of a fetch but is queried directly from the service worker)

[02:56:53.0769] <annevk>
Noam Rosenthal: oh, I thought we also needed to expose Cache API timing and things like that

[02:57:24.0295] <Noam Rosenthal>
for the fetch, we need to expose "finalize and report timing info"

[02:57:41.0914] <Noam Rosenthal>
cache state can be read from the response

[02:57:50.0498] <Noam Rosenthal>
there's nothing new we need to expose from service worker

[02:58:25.0469] <annevk>
Noam Rosenthal: so that means that if there is service worker the timing information ends up being mostly opaque, right?

[02:58:36.0158] <Noam Rosenthal>
it's reported inside the service worker

[02:58:47.0799] <Noam Rosenthal>
so you can do `performance.getEntries` from within service worker code etc

[02:58:59.0441] <Noam Rosenthal>
but it's opaque to the caller fetch

[02:59:42.0087] <Noam Rosenthal>
it felt like exposing that information twice mainly creates ambiguities

[03:00:27.0043] <Noam Rosenthal>
... that's why I didn't want that information on `response` which is a strange object that gets passed around and stored

[03:00:43.0195] <annevk>
thanks, sgtm

[03:01:10.0671] <annevk>
I added a very brief summary of our options for service workers to your PR

[03:06:25.0627] <Noam Rosenthal>
what's "UB territory"? :)

[03:13:21.0062] <annevk>
UB being undefined behavior

[03:13:44.0023] <Noam Rosenthal>
AH, TIL

[07:04:52.0330] <annevk>
Luca Casonato: fwiw, the cookie thing is blocked on getting someone from Chrome or Safari to chime in; hopefully it's clear from the prose and tests that it's not a whole lot of additional work

[07:05:45.0776] <annevk>
Luca Casonato: I have a couple more nits on the PR, but might as well wait until we have the higher-level checkboxes done

[07:06:14.0269] <annevk>
(And I'm also willing to push a fixup for that myself in due course)

[10:39:59.0224] <hober>
> <@annevk:mozilla.org> Luca Casonato: fwiw, the cookie thing is blocked on getting someone from Chrome or Safari to chime in; hopefully it's clear from the prose and tests that it's not a whole lot of additional work

link?

[10:41:11.0285] <annevk>
hober: heya, https://github.com/whatwg/fetch/pull/1346

[16:41:40.0795] <Jeffrey Yasskin>
I just opened https://webidl.spec.whatwg.org/ for the first time, and I definitely miss the table-of-contents-on-the-side from the old stylesheet.


2021-11-04
[18:41:30.0680] <DerekNonGeneric>
there was a dark mode too

[21:10:42.0203] <Widdershin>
Hi folks, had some good successes using the WebIDL bindings to implement bindings between mruby and browser APIs. The `@webref/idl` package made this especially easy, thanks for providing that.

While generating bindings works well, it feels like there are some fairly severe issues with this approach for a dynamic language. My current generated bindings are 800kb, which is non-trivial for a webapp, especially on top of the mruby interpreter and emscripten runtime. This isn't too bad with caching but will still be a show-stopper for many users.

I was wondering if there's ever been any interest in providing a JavaScript API that can be used to load Web IDL bindings directly from the browser at runtime. This would allow dynamic languages to lazily bind to Web APIs as necessary, saving on the need to send and process all bindings upfront.

[21:12:21.0668] <Widdershin>
As it stands, I think I'll have to opt to create bindings for JavaScript objects at runtime based on reflection (or just depressing `method_missing` hacks), which is a shame since I do really like having classes generated with all the proper metadata.

[21:13:27.0569] <Widdershin>
 * Hi folks, had some good successes using the WebIDL bindings to implement bindings between mruby and browser APIs. The `@webref/idl` package made this especially easy, thanks for providing that.

While generating bindings works well, it feels like there are some fairly severe issues with this approach for a dynamic language. My current generated bindings are 800kb, which is non-trivial for a webapp, especially on top of the mruby interpreter and emscripten runtime. This isn't too bad with caching but will still be a show-stopper for many users.

I was wondering if there's ever been any interest in providing a JavaScript API that can be used to load Web IDL bindings directly from the browser at runtime. This would allow dynamic languages to lazily bind to Web APIs as necessary, saving on the need to send and process all bindings upfront.

[21:18:03.0592] <Widdershin>
 * Hi folks, had some good successes using the Web IDL standard to implement bindings between mruby and browser APIs. The `@webref/idl` package made this especially easy, thanks for providing that.

While generating bindings works well, it feels like there are some fairly severe issues with this approach for a dynamic language. My current generated bindings are 800kb, which is non-trivial for a webapp, especially on top of the mruby interpreter and emscripten runtime. This isn't too bad with caching but will still be a show-stopper for many users.

I was wondering if there's ever been any interest in providing a JavaScript API that can be used to load Web IDL bindings directly from the browser at runtime. This would allow dynamic languages to lazily bind to Web APIs as necessary, saving on the need to send and process all bindings upfront.

[00:32:01.0202] <annevk>
Jeffrey Yasskin: TabAtkins mentioned he might do something about it, I don't have the bandwidth at the moment

[08:37:44.0134] <TabAtkins>
yes, it's on my plate, tho i'm rather busy this month

[08:38:17.0522] <TabAtkins>
but generally i want to adapt the current w3c layout to whatwg, plus darkmode

[14:07:24.0121] <smaug>
annevk: I was mumbling to krosylight how rarely I write spec prs and how I always need to go through all the documentation scattered in random places before writing the pr (well, first I need to always find the documentation). It would be really nice to have some step-by-step documentation for all the normal tooling around spec writing.

[14:07:45.0699] <smaug>
I wonder if you or Domenic had time to write something down. 

[14:14:05.0466] <krosylight>
There are https://respec.org/docs/ and https://tabatkins.github.io/bikeshed/ but maybe it's not easy enough to find them


2021-11-05
[23:17:35.0325] <annevk>
Cool! As long as there's some WHATWG green and orangered in there I'm happy üòä

[23:19:20.0930] <annevk>
smaug: generally for WHATWG specs it should all be linked from the README

[23:20:40.0181] <annevk>
smaug: if there's things missing there or https://github.com/whatwg/meta/blob/main/CONTRIBUTING.md (which should be linked from all our READMEs) that would be good to know; probably best to file an issue against whatwg/meta

[23:20:55.0505] <annevk>
 * smaug: if there's things missing there or https://github.com/whatwg/meta/blob/main/CONTRIBUTING.md (which should be linked from all our READMEs) that would be good to know; probably best to file an issue against whatwg/meta

[03:33:55.0080] <smaug>
annevk: I've been hoping to have some simple step-by-step instructions. If I start from the spec, I get to https://github.com/whatwg/html, which links to https://github.com/whatwg/html/blob/main/CONTRIBUTING.md which links to https://github.com/whatwg/meta/blob/main/CONTRIBUTING.md . then one goes back to previous page which says something about wattsi (but doesn't tell whether that should be installed, but kind of hints about it), and then there is a link to https://github.com/whatwg/html-build. oh, and I forgot a link to https://github.com/whatwg/meta/blob/main/COMMITTING.md  was also mentioned somewhere

[03:34:13.0269] <smaug>
So the information is in various places and not in any clear order

[03:38:53.0948] <annevk>
smaug: that's fair; though it's also tricky to find the right balance there since the most basic thing is "create a branch", "edit a file", "commit", "create a PR"

[03:40:05.0726] <smaug>
Since I live mostly in mozilla-central, I've got used to so simple build  + "pr creation" setup with ./mach and moz-phab üòâ

[03:40:22.0850] <annevk>
And generally build tools beyond make are optional, there's a service for all of them (or you can just create PRs and see if things work)

[03:41:12.0943] <annevk>
smaug: right yeah, git/GitHub knowledge is assumed at the moment... I'm using GitHub Desktop myself for some of the actions and it's quite nice if you don't mind a GUI

[03:43:45.0791] <smaug>
I wasn't thinking to include all the github instructions, although some common practices might not be a bad idea, if there are things which happen to fit into spec writing process particularly well

[03:48:22.0405] <annevk>
Perhaps a "Your first PR" list of steps that's linked prominently from each README? (With HTML perhaps having its own list of steps for reasons.)

[03:53:35.0980] <smaug>
Something like that would be great, at least for me, since all my spec prs are basically the first ones, given how rarely I do them.

[04:03:43.0650] <annevk>
smaug: I filed https://github.com/whatwg/meta/issues/232 as a start

[04:04:05.0431] <smaug>
thanks!

[07:22:46.0498] <Domenic>
> <@annevk:mozilla.org> Cool! As long as there's some WHATWG green and orangered in there I'm happy üòä

Honestly I've never been so sure about the orangered :)

[07:33:03.0818] <Andreu Botella (he/they)>
So apparently Chromium's UTF-16 decoder skips the replacement character for truncated sequences on fetches (that is, for page loads and XHR, but not for `TextDecoder`) "for compatibility reasons"

[07:33:06.0013] <Andreu Botella (he/they)>
https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/platform/wtf/text/text_codec_utf16.cc;l=73

[07:33:20.0722] <Andreu Botella (he/they)>
annevk: hsivonen Is this a thing that was ever discussed?

[07:39:24.0422] <Domenic>
Seems bad. I suspect we might be able to fix it like we did the recent JSON/UTF-8 bug.

[08:16:48.0056] <annevk>
Andreu Botella (he/they): I'm pretty sure it's considered a bug (EOF behavior has been discussed a lot, including that browsers do it badly), might even be filed

[08:17:21.0161] <annevk>
Andreu Botella (he/they): unfortunately doing the easy "blame" thing on that file seems hard, suspect that comment was added a long time ago

[08:22:59.0223] <Andreu Botella (he/they)>
yeah, and the blame for this test suggests that whatever compatibility constraints (IE I assume) no longer apply, since lone surrogates at EOF used to decode as is and were later changed

[08:22:59.0871] <Andreu Botella (he/they)>
https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/web_tests/fast/encoding/char-decoding-truncated.html

[08:35:01.0886] <hsivonen>
> <@andreubotella:mozilla.org> annevk: hsivonen Is this a thing that was ever discussed?

I vaguely remember discussing something along those lines with zcorpan . I don't recall any reported breakage from Gecko fixing that.

[08:35:12.0995] <hsivonen>
Fixing in the sense of generating the U+FFFD.


2021-11-06
[14:18:03.0718] <Cory>
i think this is the right place. i had a question about the html spec for focus when the currently focused element is removed from DOM. when that happens, the spec explicitly says focus should go to body. why? wouldn't focus going to the nearest focusable parent be more desirable?


2021-11-08
[00:16:35.0175] <Noam Rosenthal>
annevk, Jake Archibald, how would you like to proceed with https://github.com/whatwg/fetch/pull/1329? annevk you've raised some questions about how this would apply to worker, I think all answers are valid but want to proceed somehow 

[01:29:01.0058] <annevk>
Noam Rosenthal: I'm under the weather this week, but I think we need to tackle the service worker part as well; there's not many hits for "terminate" in SW, but there's a few and we cannot just break the system

[01:29:35.0381] <annevk>
Noam Rosenthal: putting a Living Standard in an inconsistent state is not something I'm happy with if it can be avoided

[01:29:46.0739] <Noam Rosenthal>
annevk: hope you get well soon :)

[01:31:19.0834] <Noam Rosenthal>
annevk: Currently SW references the somewhat handwavy "when the Fetch is terminated" which is an exported link that is still going to be there, I don't think we're leaving it more inconsistent than before. But I don't mind posting a PR to SW that makes it explicit with a controller, if that's the direction

[01:34:19.0944] <annevk>
Noam Rosenthal: yeah, that sounds good to me still. I wish others would chime in a bit more or at least say something to the effect of "sounds reasonable, can't think of anything better".

[01:35:03.0600] <Noam Rosenthal>
annevk: cool, I'll propose the PR, and hopefully it would be enough of a strawman to get some "sounds reasonable" or "let's do this differently"

[04:19:42.0922] <Noam Rosenthal>
annevk: I thought as an alternative to returning a controller, to emit an "onFetchStarted(controller)" from both fetch and SW. This way the processes as they are today don't need to change and everything can still work. It might make my patch quite simpler. WDYT?

[04:20:26.0552] <Noam Rosenthal>
... otherwise I need to turn HTTP fetch into something that "awaits" fetch or make a lot of changes in fetch to make internal algorithms asynchronous

[04:21:50.0565] <zcorpan>
> <@hsivonen:mozilla.org> I vaguely remember discussing something along those lines with zcorpan . I don't recall any reported breakage from Gecko fixing that.

I don't remember what the compat problem was here

[06:36:46.0908] <Noam Rosenthal>
> <@noamr:matrix.org> annevk: I thought as an alternative to returning a controller, to emit an "onFetchStarted(controller)" from both fetch and SW. This way the processes as they are today don't need to change and everything can still work. It might make my patch quite simpler. WDYT?

https://github.com/w3c/ServiceWorker/pull/1612 and a new revision of https://github.com/whatwg/fetch/pull/1329 address this. (cc Jake Archibald )

[12:31:47.0842] <Dominic Farolino>
https://fetch.spec.whatwg.org/#concept-scheme-fetch mentions "URLs such as "about:config" are handled during navigation and result [...]" Where exactly are these URLs handled in navigation?

[12:44:32.0503] <Andreu Botella (he/they)>
> <@domfarolino:matrix.org> https://fetch.spec.whatwg.org/#concept-scheme-fetch mentions "URLs such as "about:config" are handled during navigation and result [...]" Where exactly are these URLs handled in navigation?

https://github.com/whatwg/html/issues/2414


2021-11-09
[00:26:45.0366] <annevk>
Dominic Farolino: maybe it should say "ought to be handled" üôÇ

[03:18:18.0973] <smaug>
does wpt have some way to close alert() and similar popups? 

[03:18:23.0572] <smaug>
jgraham: ^

[03:35:40.0882] <jgraham>
smaug: Not in the middle of the test at present, but we attempt to close them at the end of the test in gecko. We could easily expose https://w3c.github.io/webdriver/#dismiss-alert for the "I know the test is supposed to have created an alert at this point" case.

[03:36:13.0094] <smaug>
ok. I was thinking to write some test for beforeunload, but perhaps I'll use mochitest for now

[03:39:36.0172] <jgraham>
smaug: If those WebDriver primitives are enough for your use case it's literally only boilerplate code to expose them. I could make a patch against wpt in gecko right away for you to experiment with.

[03:41:17.0160] <smaug>
https://w3c.github.io/webdriver/#user-prompts talks about alert/confirm/prompt, and about implicitly closing beforeunload prompt

[03:41:28.0875] <smaug>
I think I'd prefer to explicitly close beforeunload

[03:42:49.0737] <jgraham>
Ah, OK. It might be true that WebDriver by default interferes with beforeUnload, although I think it's only implicitly dismissed if you try to navigate when the prompt is present

[03:42:58.0491] <jgraham>
 * Ah, OK. It might be true that WebDriver by default interferes with beforeUnload, although I think it's only implicitly dismissed if you try to navigate when the prompt is present

[05:44:15.0222] <jgraham>
smaug: Hmm, so I tried it and the interaction with alert and the event loop, coupled with the limitations of WebDriver makes the implementation of accept_alert in wpt harder than I'd imagined. I might fiel this under "good candidate for a post-WebDriver-BiDi world"

[05:46:10.0916] <smaug>
ok

[05:46:22.0466] <jgraham>
Or, maybe I can make it work with the uuid-in-the-URL approach to identifying windows that's part of the channels works that's been stuck in review for a long time :/

[05:46:38.0269] <jgraham>
 * smaug: Hmm, so I tried it and the interaction with alert and the event loop, coupled with the limitations of WebDriver makes the implementation of accept_alert in wpt harder than I'd imagined. I might file this under "good candidate for a post-WebDriver-BiDi world"

[05:46:54.0719] <jgraham>
But still, not going to do that today :)

[06:13:46.0608] <Nic Jansma>
Hi all!  Nic Jansma from Akamai here.  Had a quick question about our akamai-whatwg Github org (https://github.com/akamai-whatwg)

Are "paid" organizations still required to be in the participants list (https://github.com/whatwg/participant-data/blob/main/entities.json#L366), or can we be in the Free plan?

[06:18:42.0710] <annevk>
Nic Jansma: it doesn't matter to the WHATWG what kind of GitHub organization your organization uses, as long as it has the ability for individuals belonging to your organization to publicize their membership

[06:19:17.0624] <annevk>
Hope that's not too ambiguous üôÇ

[06:20:19.0396] <annevk>
Nic Jansma: we do need a GitHub organization listed there, though

[06:23:05.0600] <Nic Jansma>
Yep!  I'm planning on opening a PR for entities.json since the Contact info isn't up to date for Akamai right now.

Ok, I think that answers my question about the Organization requirements. Thanks!

Thanks annevk 

[06:23:46.0942] <annevk>
Nic Jansma: sounds good, thanks for keeping it up-to-date!

[07:03:19.0597] <Domenic>
> <@jgraham_:matrix.org> smaug: If those WebDriver primitives are enough for your use case it's literally only boilerplate code to expose them. I could make a patch against wpt in gecko right away for you to experiment with.

Well, also a RFC and stuff, right? I recall adding such things to WPT to be quite a process.

[07:11:25.0736] <jgraham>
Right, hence "against wpt in gecko"

[07:12:17.0513] <jgraham>
Obviously there would still have to be an RFC to actually land it, but in this case I think it would have been relatively uncontroversial since it's just exposing WebDriver functionality directly.

[07:15:31.0720] <jgraham>
The RFC process tends to be more of a burden when there's more substantive API design, or third party dependencies being added, or anything else that might affect the ability to run the tests in different environments.

[07:24:19.0321] <jgraham>
Speaking of RFCs, ping on https://github.com/web-platform-tests/rfcs/pull/98

[08:44:13.0832] <Dominic Farolino>
OK so the note in the fetch spec is wrong then, and these URLs are not explicitly handled anywhere in HTML's navigation

[08:44:43.0486] <Dominic Farolino>
(whoops that was in response to andreu -- my client hadn't updated and I saw no messages in between :) )

[11:34:58.0374] <Josh C>
Hi, is this a good place to ask about the unification of dropped directories/files and directory/file picker? my research has found the "entries" api and the "file system handle" api and i just want to know what i should be looking forward to.

in short, what's gonna happen with these two specs?
https://wicg.github.io/entries-api/
https://wicg.github.io/file-system-access/

[12:17:57.0428] <wanderview>
I asked someone who is not in this chat and they responded: "entries-api is implemented by all browsers today, while non-chromium browsers haven't shown any interest in implementing those parts of the file system access API..."

[12:18:06.0083] <wanderview>
so it sounds like both specs will probably be around for a while

[12:24:32.0448] <Josh C>
thanks for the response, kind of a bummer i guess, but it does seem like the file system access stuff is a superset

[12:24:34.0789] <Josh C>
¬Ø\_(„ÉÑ)_/¬Ø

[14:10:47.0521] <sideshowbarker>
Josh C: to further complicate things: https://github.com/whatwg/sg/issues/176

[14:11:12.0580] <sideshowbarker>
> In a TPAC 2021 breakout session we discussed standardizing OPFS + AccessHandle: docs.google.com/document/d/1RBK5pshKiKWa0drPEPrYwsAmZUELO_23hGM2iJTFiJA/edit. It's essentially a new storage API like IndexedDB, but with a file system API. The infrastructure it provides will be so it can also be used to support native file system access, but that will not be part of this standard and as such cannot be mandated from implementations.


2021-11-10
[23:49:53.0958] <annevk>
Whatever Entries API exposes might well be reasonable to expose through file system handles instead, I haven't seen a proposal for that though.

[04:53:19.0650] <Ralf Barkow>
The rest.livecode.world rosters are working again via https:// ‚Äì Thank you.


2021-11-11
[20:03:15.0501] <Cam Morales Silva>
Henllo. I'm expanding my knowlede in order to get my money back after being scamed :') help? I found this inspecting element on the website trying to get to the domain but I'm not so versed in this

[20:03:55.0785] <Cam Morales Silva>
I know for experience that I can get away with something like this

[21:52:34.0224] <DerekNonGeneric>
TabAtkins (or anyone who may know): are the old Web IDL spec stylesheets still accessible somewhere?

[21:57:59.0234] <TabAtkins>
DerekNonGeneric: yeah it's just the Bikeshed default stylesheet

[22:03:07.0289] <DerekNonGeneric>
TabAtkins: oh, yeah, they are indeed similar, but alas still no dark mode; was looking for the rest of this gist that i happened to save a while ago https://gist.github.com/DerekNonGeneric/e3072db4ea16cc64e138512a4a95bf56

[22:15:16.0159] <TabAtkins>
Oh the dark-mode colors are inserted separately from the stylesheet itself. Look at any Bikeshed-generated spec, like the CSS specs, you'll find them.

[01:45:43.0732] <ntim>
Domenic: annevk : Hey, there was some agreement to remove <object usemap> from the spec, and I see the HTMLObjectElement doesn't have it anymore in the spec. However, it is still there in Gecko & Blink & WPT.   

[01:45:52.0232] <ntim>
Is that intentional?

[02:42:54.0572] <annevk>
ntim: hmm, there was https://github.com/web-platform-tests/wpt/pull/27830

[02:43:02.0887] <annevk>
ntim: Gecko has an open bug still

[04:04:35.0975] <AutomatedTester>
Morning all, I have a silly question about `DocumentOrShadowRoot` mixin in https://dom.spec.whatwg.org/#mixin-documentorshadowroot. If I have a shadow root, should I be able to use `getElementByTagName` since it's part of the mixin?

[04:27:43.0770] <annevk>
AutomatedTester: I don't see it on the mixin?

[04:28:00.0723] <annevk>
AutomatedTester: in particular, note how the mixin doesn't define any members (HTML defines some)

[04:29:09.0801] <AutomatedTester>
ok, I thought (probably wrongly) that when I saw `DocumentOrShadowroot` that I could use the APIs interchangeable

[04:31:22.0431] <AutomatedTester>
so, `getElementsByTagName` is not available then on a shadow root?

[04:32:03.0659] <annevk>
AutomatedTester: that is only defined on Document and Element, so no

[04:32:43.0858] <annevk>
AutomatedTester: I think you might have inverted the logic of mixins (or something to that effect)

[04:33:03.0635] <AutomatedTester>
probably :D

[04:41:03.0868] <AutomatedTester>
annevk: so to look inside the Shadow Root one would need to do something like `document.get...().shadowRoot.host.get...()` or something along those lines?

[04:43:40.0449] <annevk>
AutomatedTester: it has querySelector() and getElementById()

[04:43:52.0118] <annevk>
AutomatedTester: through DocumentFragment

[04:44:30.0288] <AutomatedTester>
ahhh ok

[04:44:50.0573] <AutomatedTester>
why is the API limited ?

[04:46:53.0076] <annevk>
I'm not sure I understand what you mean

[04:50:02.0964] <AutomatedTester>
Why are querySelector and getElementById but not the getElementsBy* APIs. 

[04:51:32.0501] <AutomatedTester>
My reason for asking is people are using selenium for working with web components but in Chrome 96, they can‚Äôt search for element‚Äôs anymore by tag name

[04:51:47.0651] <AutomatedTester>
So want to understand the why so I can fix this properly 

[05:00:29.0170] <annevk>
They were never included as they're kind of legacy APIs

[05:02:58.0110] <AutomatedTester>
Ok, thanks 

[06:13:09.0694] <jschoi>
Have there been any web-API functions in the past that were later extended to accept more input types, instead of throwing errors? And if there have been any such functions, were there any web-compatibility and polyfilling problems? (I‚Äôm interested because of https://github.com/tc39/proposal-bigint-math/issues/17.)

[06:14:05.0782] <jschoi>
* Have there been any web-API functions in the past that were later extended to accept more input types, instead of throwing errors? And if there have been any such functions, were there any web-compatibility and polyfilling problems? (I‚Äôm interested because of https://github.com/tc39/proposal-bigint-math/issues/17.)

[06:21:46.0589] <annevk>
jschoi: I think we've done that plenty of times, though coming up with examples is a little harder

[06:22:16.0702] <annevk>
jschoi: e.g., the types you can pass to XMLHttpRequest's send() increased over time

[06:22:44.0108] <annevk>
jschoi: the fallback there was stringification though, not throwing

[06:23:23.0706] <jschoi>
That‚Äôs similar, yeah. I‚Äôd love any more specific examples later if you or anyone else thinks of any; feel free to direct-message me or comment on that issue.

[06:23:52.0326] <jschoi>
Any Web Platform API function `fn` that originally threw a TypeError when given a certain value `x` but later was changed to not throw‚Ä¶

[06:24:17.0896] <annevk>
jschoi: addEventListener's third argument was overloaded with a dictionary, that was a bit contentious, but still the right call imo

[06:24:44.0781] <annevk>
jschoi: there too though I guess it didn't throw, since {} coerces to true

[06:26:45.0018] <jschoi>
Background: TC39 is considering doing something similar to some `Math` functions with BigInt inputs. `Math.abs(-1n)` currently throws a TypeError but this would extend it to return `+1n`. `Math.max(0, 1n)` would return `1n` because `0 < 1n` is valid. I have suspected that similar things have been done with web APIs plenty of times before, though of course I‚Äôd like to be able to give specific examples.

[06:26:49.0138] <jschoi>
 * Background: TC39 is considering doing something similar to some `Math` functions with BigInt inputs. `Math.abs(-1n)` currently throws a TypeError but this would extend it to return `+1n`. `Math.max(0, 1n)` would return `1n` because `0 < 1n` is valid. I have suspected that similar things have been done with web APIs plenty of times before, though of course I‚Äôd like to be able to give specific examples.

[06:28:30.0413] <annevk>
jschoi: all the path overloads in https://html.spec.whatwg.org/#canvasdrawpath are additions, but also changes the number of arguments

[06:29:19.0701] <jgraham>
I wonder if that's the sort of thing you can add a use counter for, to see if any sites are currently relying on bigints throwing there. Maybe js engines are too low-level to support use counters though.

[06:31:50.0788] <jschoi>
Telemetry data would be useful, but I struggle to think of a way in which throwing behavior would actually break something‚Ä¶Why would anyone already be supplying mixed Number/BigInt inputs to Math functions? And web APIs have done function-domain broadening before already, e.g., with those CanvasDrawPath extensions and XMLHttpRequest examples from annevk, without compatibility problems. But yeah.

[06:32:14.0415] <jschoi>
 * Telemetry data would be useful, but I struggle to think of a way in which throwing behavior would actually break something‚Ä¶Why would anyone already be supplying mixed Number/BigInt inputs to Math functions? And web APIs have done function-domain broadening before already, e.g., with those CanvasDrawPath extensions and XMLHttpRequest examples from annevk, without compatibility problems. But yeah.

[06:34:06.0882] <jgraham>
So I agree that in general this doesn't feel like it would be a very risky change. But experience suggests that it being hard to rationalise why someone might use a feature in a specific way doesn't mean that no one is depending on that behaviour in practice.

[06:35:41.0299] <jgraham>
Or to quote the /topic; "please leave your sense of logic at the door" :)

[06:36:43.0669] <annevk>
I don't think we ever really did that kind of study when the current behavior is an exception though

[06:36:59.0083] <annevk>
Removing exceptions has always been considered acceptable

[06:37:31.0849] <jschoi>
Yeah. Any more examples of removing exceptions would be super welcome. 

[06:37:47.0117] <annevk>
That's also why we like to start out with throwing if we can

[06:53:21.0058] <jgraham>
Yeah, it's definitely less likely that people depend on throwing. But it's at least conceivable to write code that expects anything that worked with Math.abs() must be a Number and would try to do some other operation that doesn't make sense with a bigint. I also vaugely wonder if typecheckers dinstinguish the two and if this could change type inference in a way that would require code changes for users of those tools.

[06:53:47.0584] <jgraham>
(but again, I have the general sense this is probably not a very worrying change)

[07:00:56.0782] <jschoi>
Yeah, depending on throwing and type checking are understandable concerns. 
I guess the big thing is that these concerns aren‚Äôt unique to Math; they have happened plenty of times elsewhere in web platform APIs, and like Anne said removing throwing always been assumed to be compatible there. But telemetry could be useful. These are Google employees who have been raising these concerns on that issue, so if they wish they could do telemetry to confirm that nobody actually depends on the exception before rolling it out. That‚Äôs what they would do for any similar change to a web API anyway, right?

[07:01:46.0147] <jschoi>
 * Yeah, depending on throwing and type checking are understandable concerns. 
I guess the big thing is that these concerns aren‚Äôt unique to Math; they have happened plenty of times elsewhere in web platform APIs, and like Anne said removing throwing always been assumed to be compatible there. But telemetry could be useful. These are Google employees who have been raising these concerns on that issue, so if they wish they could do telemetry to confirm that nobody actually depends on the exception before rolling it out. That‚Äôs what they would do for any similar change to a web API anyway, right?

[07:08:50.0955] <DerekNonGeneric>
top-level await used to be a syntax error

[07:10:37.0987] <DerekNonGeneric>
import assertions were also a syntax error

[07:11:00.0671] <DerekNonGeneric>
replacing errors w/ functionality seems to happen quite often

[07:24:32.0031] <jgraham>
I'd say that replacing "was a syntax error" with "not a syntax error" is safer than the equivalent with runtime errors. Although I'm fairly sure there are compat bugs relating to things that only succeed when a resource fails to load correctly, it's pretty rare for obvious reasons.

[07:38:46.0211] <DerekNonGeneric>
jschoi: these are the relevant runtime errors you should likely be concerned about https://www.npmjs.com/package/@openinf/util-errors#Classes

[07:38:53.0517] <jschoi>
 * Yeah, depending on throwing and type checking are understandable concerns. 
I guess the big thing is that these concerns aren‚Äôt unique to Math; they have happened plenty of times elsewhere in web platform APIs, and like Anne said removing throwing always been assumed to be compatible there. But telemetry could be useful. These are Google employees who have been raising these concerns on that issue, so if they wish they could do telemetry to confirm that nobody actually depends on the exception before rolling it out. That‚Äôs what they would do for any similar change to a web API anyway, right?
(Telemetry data from Mozilla would also be welcome.)

[07:43:27.0985] <jschoi>
DerekNonGeneric: Node throw TypeErrors with the ERR_INVALID_ARG_TYPE code if given `Math.abs(0n)`, right?

[07:43:43.0613] <jschoi>
 * DerekNonGeneric: Node throw TypeErrors with the ERR_INVALID_ARG_TYPE code if given `Math.abs(0n)`, right?

[07:43:55.0428] <jschoi>
No, wait, only Node APIs do that‚Ä¶

[07:44:48.0212] <jschoi>
Anyways, I‚Äôm not sure how Node‚Äôs error codes would be relevant to extending Math functions (or web API functions, for that matter).

[07:45:17.0784] <jschoi>
> I also vaugely wonder if typecheckers dinstinguish the two and if this could change type inference in a way that would require code changes for users of those tools.

TypeScript and Flow both support union types, so such a change should not make users change their code.


[07:45:25.0052] <jschoi>
 * > I also vaugely wonder if typecheckers dinstinguish the two and if this could change type inference in a way that would require code changes for users of those tools.

TypeScript and Flow both support union types, so such a change should not make users change their code.


[07:45:32.0014] <DerekNonGeneric>
`Math` is  considered a "JavaScript core object", so the errors thrown are all the standard errors, which is fairly limited...

[07:54:09.0156] <DerekNonGeneric>
> <@jschoi:matrix.org> DerekNonGeneric: Node throw TypeErrors with the ERR_INVALID_ARG_TYPE code if given `Math.abs(0n)`, right?

yeah, just a `TypeError`

[07:55:57.0089] <jschoi>
Yeah. So I think Node‚Äôs error codes are probably not relevant to this issue, in contrast to things like XMLHttpRequest‚Äôs send addEventListener, addEventListener‚Äôs third argument, and CanvasDrawPath‚Äôs path overloads.

[07:59:18.0857] <DerekNonGeneric>
perhaps not, but thought you'd be interested in seeing what Node's errors would be looking like (those are what the core developers use for Node APIs in case you were wondering) -- these errors pretty much map out all the possible value/type problems found in JS APIs (more sophisticated than Web APIs even)

[10:08:44.0375] <ntim>
annevk: Domenic : I'm referring to the IDL: https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/html/html_object_element.idl;l=34?q=object_element.idl&ss=chromium

[10:09:33.0217] <ntim>
useMap shouldn't be there

[10:09:45.0249] <Domenic>
It should: https://html.spec.whatwg.org/#dom-object-usemap

[10:10:15.0296] <Domenic>
It's like all the other legacy content attributes like codeBase and codeType; still reflected in IDL attributes.

[10:11:06.0957] <ntim>
Domenic: ah thanks, urgh, I was looking at: https://html.spec.whatwg.org/#htmlobjectelement

[10:11:14.0043] <ntim>
which is why I was confused

[10:11:50.0298] <Domenic>
Yeah, the "// also has obsolete members" separation is perhaps not worth the potential confusion it causes...

[10:15:32.0759] <annevk>
I continue to favor a refactor whereby we have clear web developer and implementer sections for each element and fold all that stuff back in

[10:18:22.0813] <TabAtkins>
jschoi: CSS has done this sort of "previous invalid, now valid" addition a multitude of times. It's *occasionally* been problematic, but almost always fine.

[10:19:22.0860] <TabAtkins>
(The issues have largely been from when a property that previously only worked on a subset of elements started working on a new set as well; pages often accidentally over-apply properties, and if a property doesn't apply, that's not an error, so they just leave it in. Then the page's behavior changes when it starts being valid.)

[10:19:47.0167] <TabAtkins>
But when it's a *noticeable* error, as in the property fails to parse, but later it does, it's *usually* fine; exceptions have been rare.

[10:22:59.0931] <TabAtkins>
So this should be directly relevant to your case - if a method currently throws an error, but will stop doing so, it's *likely* to be fine. You can generally expect little to no upgrade pain, and when there *is* such a problem, it'll be a surprise anyway, so there's not much sense in fearing it.

[10:31:12.0865] <TabAtkins>
Relevant example of the opposite case is things like the aEL() "third argument becomes an option bag" case that annevk mentioned - it has the potential to *change* behavior that was previously valid (passing an arbitrary object, which'll get bool'd and treated as setting the "capture" option to true) into different behavior (passing an arbitrary object now invokes the option-bag behavior, which'll generally treat the "capture" option as false).

[10:33:11.0679] <jschoi>
Right, so the aEL change was even riskier in that passing an object bag did not originally throw an error. 

[10:33:50.0233] <TabAtkins>
Yup.

[10:34:19.0384] <annevk>
The alternative on record was four arguments. Still happy we dodged that.

[10:35:02.0432] <TabAtkins>
Oh yeah, not saying it was a bad idea, just that it was risky, and the sort of thing that one *should* anticipate problems with.

[10:47:31.0137] <jschoi>
> <@tabatkins:matrix.org> So this should be directly relevant to your case - if a method currently throws an error, but will stop doing so, it's *likely* to be fine. You can generally expect little to no upgrade pain, and when there *is* such a problem, it'll be a surprise anyway, so there's not much sense in fearing it.

What do you mean by ‚Äúwhen there is such a problem, it‚Äôll be a surprise anyway, so there‚Äôs not much sense in fearing it‚Äù?

[12:32:41.0207] <TabAtkins>
It's a low probability event, and likely not one you can anticipate ahead of time 


2021-11-12
[06:34:11.0226] <smaug>
sideshowbarker: Did https://github.com/whatwg/html/issues/2683 get some wpts?

[06:34:43.0840] <sideshowbarker>
smaug: yes, gimme a minute, I‚Äôll fetch them

[06:36:01.0725] <smaug>
aha, https://github.com/web-platform-tests/wpt/pull/29405

[06:36:09.0813] <smaug>
maybe

[06:37:45.0855] <sideshowbarker>
yeah ‚Äî the actual tests can be run here:

* http://wpt.live/html/webappapis/user-prompts/print-during-beforeunload.html
* http://wpt.live/html/webappapis/user-prompts/print-during-unload.html
* http://wpt.live/html/webappapis/user-prompts/print-in-detached-frame.html

[06:38:08.0067] <smaug>
sideshowbarker: so does the print-during-unload.html pass with the patch?

[06:38:18.0109] <smaug>
(gecko patch)

[06:38:18.0354] <sideshowbarker>
yes

[06:38:26.0828] <smaug>
ok, then an .ini file needs to be removed

[06:38:42.0192] <smaug>
commented in phabricator 

[06:38:42.0328] <sideshowbarker>
OK, I can update the patch

[06:38:50.0668] <smaug>
thanks

[06:39:23.0482] <sideshowbarker>
did you already comment there about which exact .ini file?

[06:40:54.0584] <sideshowbarker>
ah you did, thanks

[06:43:19.0914] <smaug>
the setup is quite simple, the .ini files are under /meta when the tests are under /tests

[06:43:38.0729] <sideshowbarker>
OK

[06:45:17.0547] <sideshowbarker>
all right, updated the patch

[06:45:28.0582] <sideshowbarker>
there were actually three .ini files to remove

[06:45:40.0504] <smaug>
ah, other tests pass too, even better

[06:46:25.0756] <sideshowbarker>
yeah

[06:46:49.0536] <smaug>
sideshowbarker: do you have rights to land the patch? or should I?

[06:47:50.0830] <sideshowbarker>
I can‚Äôt land it myself ‚Äî I only have Level 1 commit access ‚Äî so it‚Äôd be great if you could land it

[06:48:45.0948] <smaug>
done. Hopefully there aren't any bizarre mochitests for this üôÇ But if there are, we can tweak those later.

[06:48:55.0104] <sideshowbarker>
yup

[06:48:58.0947] <smaug>
 * done. Hopefully there aren't any bizarre mochitests for this üôÇ But if there are, we can tweak those later.

[06:49:25.0326] <sideshowbarker>
thanks much


2021-11-14
[00:30:05.0577] <Benjamin Gruenbaum>
annevk: Domenic I am going to talk about AbortController in a conference tomorrow and Node.js using it. I am going to mention my involvement and use my interactions as an example of the WHATWG process being open/inclusive. I can either name the involved people (you two, Jake and maybe a few others) or the org itself.

My intuition is to name the org and send people the links rather than the people in the discussions - if you have a preference other way or a "media guidelines" thing let me know.

[00:30:51.0022] <Benjamin Gruenbaum>
My two slides about it are that I wasn't a part but was still interested and I was able to participate in discussions and meetings which was very inclusive compared to other projects and efforts I was involved with.


2021-11-15
[03:18:43.0166] <annevk>
This might be of interest: https://twitter.com/seldo/status/1459957460932857857

[04:06:56.0645] <Noam Rosenthal>
 annevk: hope you're feeling better! we have a few pending things when you get a chance (controller & preloads)

[06:51:22.0967] <Benjamin Gruenbaum>
Hey, this might be interesting from AbortSignal/CancelToken discussion PoV https://github.com/tc39/proposal-iterator-helpers/issues/162

[06:52:16.0163] <Benjamin Gruenbaum>
If someone like Domenic  or annevk  could weigh in it would be appreciated but I don't want to tag you there directly without permission 

[07:19:03.0436] <Domenic>
Doesn't seem like a super-productive discussion :-/

[07:37:54.0003] <Benjamin Gruenbaum>
I agree and that's unfortunate - but I think part of is is that they're not aware of how AbortSignal can be made to work with the language 

[07:38:23.0017] <annevk>
Noam Rosenthal: heya, I hope to have time tomorrow

[07:39:20.0133] <Noam Rosenthal>
> <@annevk:mozilla.org> Noam Rosenthal: heya, I hope to have time tomorrow

Thanks, whenever is convenient

[07:44:57.0621] <annevk>
Benjamin Gruenbaum: added a comment, although I'm not sure if it being host-defined would work for enough TC39 participants

[07:45:30.0488] <Benjamin Gruenbaum>
÷øThanks

[14:20:28.0949] <Domenic>
Lots of nice fixes for spec-compliance nerds in new Safari TP: https://webkit.org/blog/12040/release-notes-for-safari-technology-preview-135/ e.g. document.open(), javascript: URL stuff, noopener/noreferrer/opener/target="" stuff. It warms the heart.

[15:54:17.0157] <Vladyslav Matiusha>
Hello everyone, I ran into a micro-markup problem, I'm trying to set up a review, but it doesn't work (the 'itemReviewed' field is missing), can anyone help, I've been suffering for several days, here's my page https://dymok.pl/pl/premix-smoke-paradise-6040/63-smoke-paradise-kaktus-truskawka.html


2021-11-16
[17:08:07.0722] <ntim>
Chromium folks, Any objection to unprefix text-align: -webkit-match-parent ? https://bugs.chromium.org/p/chromium/issues/detail?id=1243333&q=match-parent&can=2 

I'm looking into doing it for WebKit, but before I proceed, I'm just wondering if we need to keep the prefixed value for compat at all (and it would also be nice if Chromium unprefixed at the same time too). Note that Gecko is already shipping only the unprefixed version

[20:03:11.0563] <Domenic>
ntim: probably best to leave a comment on the bug; we unfortunately have mostly spec folks hanging out here


2021-11-17
[16:59:17.0409] <Oliver>
dont swear

[16:59:43.0300] <Oliver>
lol

[12:26:46.0777] <jugglinmike>
https://blog.whatwg.org/ appears to be down

[12:54:48.0011] <Domenic>
I'll kick it again... sigh. Should investigate trying a move off of DigitalOcean to see if that's the problem, I guess, or if we're bad WordPress admins.

[14:21:49.0178] <jugglinmike>
Thanks Domenic 


2021-11-18
[01:21:03.0385] <sideshowbarker>
smaug: https://phabricator.services.mozilla.com/D131050 is maybe now ready to be merged (can‚Äôt merge it myself because I lack the perms)

[07:54:34.0355] <smaug>
sideshowbarker: ok, will do

[07:55:23.0602] <smaug>
sideshowbarker: hmm, error

[08:40:10.0159] <sideshowbarker>
smaug: error?

[08:40:40.0238] <smaug>
sideshowbarker: those inis make android as passing and others with error

[08:40:48.0197] <smaug>
but it is Android which is failing, no?

[08:40:56.0008] <smaug>
(because the method isn't there)

[08:43:32.0158] <jgraham>
Yeah those ini files don't make much sense; a subtest can't get the status `OK` or `ERROR`, only a test file.

[08:45:45.0945] <jgraham>
I'd expect
```
[print-during-beforeunload.html]
  expected:
    if os == "android": ERROR
```

and similar for the other files.


[08:46:05.0790] <sideshowbarker>
Ok, then I need to change those to cause the test to just not be run on Android, right?

[08:46:46.0653] <jgraham>
Yeah you could do that as well if we're never going to implement `print()` on Android.

[08:47:24.0650] <jgraham>
Which would be something like
```
[print-during-beforeunload.html]
  disabled:
    if os == "android": <bug link>
```

[08:47:52.0651] <smaug>
or just keep the FAIL for android 

[08:48:07.0939] <smaug>
(and pass elsewhere)

[08:51:15.0332] <jgraham>
Oh yeah, I guess my first suggestion is wrong if the test catches the exception, in which case it will be `FAIL`

[08:51:25.0716] <jgraham>
For the subtest, not for the top-lvel test

[14:00:46.0113] <nmnbd>
Hello folks üëã and sorry in advance if this is not the right channel to ask something like that :P 

I have a question on the following example: `<a href="/new-page" onClick="()=>triggerThisFunctionBeforeTheNavigation()">Go to the new page after triggering a function!</a>`

I would expect that the onClick function would run before the navigation happens to the `/new-page`.
Is there a chance that the navigation would happen without executing the function?
Can you point me to the documentation that proves that in the https://html.spec.whatwg.org/ ? (I'm searching for hours and I can't find anything relevant)

[14:07:17.0442] <Domenic>
nmnbd: it is not at all trivial to figure out how this is specced, so happy to help :). The good news is that it is specced.

Hyperlinks causing navigation is done via https://html.spec.whatwg.org/#the-a-element:activation-behaviour . Now, what is activation behavior, and how is it positioned relative to click handlers?

It is defined in https://dom.spec.whatwg.org/#eventtarget-activation-behavior . And the key reference is https://dom.spec.whatwg.org/#ref-for-eventtarget-activation-behavior%E2%91%A5 .

I.e., when dispatching click events, we run activation behavior in step 11 of the dispatch algorithm. Whereas, we run event handlers (deep inside) step 5.

So indeed event handlers are guaranteed to come before navigation.

[14:47:24.0324] <nmnbd>
I see.. does the function have to be quick enough and run between step 5 and 11, otherwise will be interrupted by the navigation? 


2021-11-19
[17:57:15.0213] <Domenic>
The function has to be synchronous

[21:25:16.0428] <karlcow>
XML fragment serialization algorithm links to https://w3c.github.io/DOM-Parsing/#dfn-xml-fragment-serialization-algorithm

> Parsing concepts: a fragment parsing context; the HTML fragment parsing algorithm; the HTML fragment serialization algorithm; HTML parser; parsing XHTML documents; the XML fragment parsing algorithm; the XML fragment serialization algorithm; XML parser; 

[XML fragment serialization algorithm] links to https://www.w3.org/TR/html5/single-page.html#xml-fragment-serialization-algorithm

It probably should be https://html.spec.whatwg.org/#serialising-xhtml-fragments

[21:25:57.0278] <karlcow>
https://www.w3.org/TR/html5/single-page.html#xml-fragment-serialization-algorithm doesn't exist

[07:15:37.0877] <Domenic>
Yep, lots of tech debt in the DOM-Parsing spec

[07:15:52.0947] <Domenic>
annevk: are you OK merging https://github.com/whatwg/streams/pull/1182 or did you want to wait for mgaudet?

[07:52:25.0648] <annevk>
 Domenic: how about I leave a message with him and you merge later today if you hear nothing

[07:52:34.0609] <Domenic>
Sounds good

[07:54:58.0222] <Ms2ger üíâüíâ>
Domenic: hi, we're working on wasm modules on the web :)

[07:55:13.0639] <Domenic>
Oh, great to know!

[07:57:01.0094] <annevk>
Domenic: it's fine to merge it now


2021-11-21
[08:19:36.0234] <Benjamin Gruenbaum>
I am super confused about cancellation which is nothing new in the last few years :) I'll wait until it's not a Sunday though. Opened an issue about "tagging" cancellation.

[08:20:34.0751] <Benjamin Gruenbaum>
I feel strongly there should be a good cancellation story for developers authoring code and `reason` is really cool but also a concern. I want to focus on other stuff (learning how to contribute to WebIDL and working on symbols as event names) but I am happy to try and set up a meeting/discussion about cancellation.


2021-11-22
[00:52:01.0291] <annevk>
I like Domenic's explanation in the issue. That AbortSignal can be thought of as an "ExceptionSignal". The way we did aborting it was a never a third completion state after all.

[03:52:33.0973] <Noam Rosenthal>
annevk / Domenic : ping re. my 3 pending timing-related PRs when you get a chance :)

https://github.com/whatwg/fetch/pull/1311
https://github.com/whatwg/html/pull/7260
https://github.com/whatwg/html/pull/7339

[04:15:30.0540] <Andreu Botella (he/they)>
So I was giving it a try at rewriting Deno's implementation of timers, and I noticed some non-timer WPT tests failing

[04:16:11.0304] <Andreu Botella (he/they)>
Turns out, according to the spec, calling `clearInterval` inside an interval's callback should _not_ clear it ‚Äì but every browser does

[04:16:58.0217] <Andreu Botella (he/they)>
The handle's entry in the map of active timers is set no matter what in the timer initialization steps for the next iteration of the interval

[04:17:52.0767] <Andreu Botella (he/they)>
 * The handle's entry in the map of active timers is set no matter what in the timer initialization steps for the next iteration of the interval

[04:38:56.0837] <annevk>
Can you elaborate? Doesn't the spec synchronously mutate the map of active timers?

[04:40:00.0885] <Andreu Botella (he/they)>
After the callback, if `repeat` is true, the timer initialization steps are run again, whether the handle is in the map of active timers or not

[04:40:28.0109] <Andreu Botella (he/they)>
And the timer initialization steps, in step 14, will add the handle to the map of active timers

[04:44:32.0233] <annevk>
Ah I see. It should probably do the same check as it does in step 1 of the task, after executing the callback.

[04:44:40.0984] <Andreu Botella (he/they)>
Indeed

[04:57:44.0132] <annevk>
Noam Rosenthal: 1311 still seems to have unaddressed comments from Yutaka

[04:59:04.0282] <annevk>
Noam Rosenthal: also, is the discussion with Yoav Weiss and npm1 resolved? Did anything change as a result?

[05:00:45.0120] <annevk>
Going to leave the others to Domenic.

[05:00:58.0573] <Noam Rosenthal>
I've addressed them by changing the scope of the PR for what's already implemented  modulu a few open bugs. Anything missing from the discussion Yoav?

[05:04:52.0043] <annevk>
I see, excluding non-HTTP(S) and abort network errors. I guess that works.

[05:05:23.0266] <annevk>
Yutaka's comments still seem applicable though.

[06:18:42.0472] <Yoav Weiss>
There's an open question of who would implement this in Chromium, but that doesn't imply Chromium is not interested in implementing

[09:22:04.0938] <Noam Rosenthal>
Yoav Weiss: can you make this clearer in the PR discussion? It seems chaotic to read right now from the Chromium perspective


2021-11-23
[18:17:41.0584] <sefeng>
Domenic: should https://github.com/web-platform-tests/wpt/blob/628af0fd55db95d785a63484882998343e3a069e/html/semantics/interactive-elements/the-dialog-element/dialog-focus-shadow.html#L40-L47 focus an element inside the shadow dom?

[18:18:57.0980] <sefeng>
because the shadow dom is before the `focus-me`?

[18:19:40.0808] <Domenic>
sefeng: Yes I think you are right

[18:20:02.0853] <Domenic>
focus-me should be moved to the very first button

[18:21:03.0230] <sefeng>
Domenic: we don't need to move this one, because the one before this template does that already, I think?

[18:22:12.0154] <Domenic>
Not sure what you mean? I think the test would still be valuable since it shows that autofocus="" is ignored

[18:22:27.0095] <sefeng>
yeah, sorry, I misunderstood 

[18:22:50.0384] <sefeng>
I'll fix it and ping you for review 

[18:23:18.0977] <Domenic>
Great, thank you for spotting!

[18:37:56.0846] <sefeng>
Domenic: so before all these generic focus delegates algorithm, when there's a nested shadow dom host with no delegates focus, we don't delegate the focus to this shadow dom. 

[18:38:35.0472] <sefeng>
but now it seems that we can delegate the focus to this shadow dom 

[18:48:55.0919] <sefeng>
I am looking at these two tests https://github.com/web-platform-tests/wpt/blob/628af0fd55db95d785a63484882998343e3a069e/shadow-dom/focus/focus-method-delegatesFocus.html#L271-L284 and wondering which step makes the behaviour different 

[01:28:58.0325] <rdeltour>
Hi. I have a couple questions on how to integrate the URL standard in a specification (ping annevk I guess üòä)

[01:32:55.0107] <rdeltour>
In EPUB, we're now refer to the URL standard. 
EPUB is basically a collection of web resources in an container (called "Abstract OCF Container"); practically, it's a ZIP.
In this container, files refer to each other using relative URL strings (with optional fragments)

[01:34:08.0903] <rdeltour>
What we'd like to do, is normatively disallow relative URL strings that "leak" outside the container. For instance "../../../../secret"

[01:36:21.0161] <rdeltour>
So we're trying to define what is a valid relative URL string in the contexts of EPUB.

[01:40:51.0819] <rdeltour>
My question is: is it OK to say something along the lines of "in an EPUB container, a **relative-URL string** MUST be a **container-relative URL string**", and then define what we mean by **container-relative URL string**.

In other words, we're trying to override the definition of "relative-URL string" of the URL standard by:
- disallowing path-absolute URL strings
- disallowing scheme-relative URL strings
- further constraining path-relative-scheme-less-URL strings to ensure dot-dot path segments are balanced by other segments

[01:42:08.0741] <rdeltour>
In some way it has a smell of monkey patching, but I can't see how to do otherwise. That's why I'm asking for advice to y'all üòä

[01:43:02.0311] <rdeltour>
 * In EPUB, we now refer to the URL standard. 
EPUB is basically a collection of web resources in an container (called "Abstract OCF Container"); practically, it's a ZIP.
In this container, files refer to each other using relative URL strings (with optional fragments)

[01:43:39.0581] <rdeltour>
 * So we're trying to define what is a valid relative URL string in the context of EPUB.

[01:44:05.0519] <rdeltour>
see also https://github.com/w3c/epub-specs/issues/1912

[01:50:24.0535] <annevk>
rdeltour: have you checked what implementations do? If there is some kind of base URL in play I'd expect it to work similarly to `https://example.com/../`

[01:51:18.0030] <annevk>
I suppose you could still have a desire to say that's invalid, but it isn't invalid for similar URLs in other contexts (if I remember correctly)

[01:52:35.0144] <rdeltour>
so, implementations vary (EPUB is old and this was largely unspecified so far). We added a UA conformance criteria to specify how the implementation-specific base URL must be. But here we're trying to define authoring requirements (what string is conforming or not, before parsing)

[01:54:09.0260] <rdeltour>
a conforming UA will parse '../../secret'  to the same URL record as 'secret', but we'd still like to disallow the former, for better interop with legacy or non-conforming UAs.

[01:56:16.0297] <annevk>
It seems somewhat reasonable to write such a requirement the way you proposed above. The one quibble is that URL validity is also part of the URL parser and you wouldn't really be able to change that. (It's written in two different ways for different audiences.)

[01:57:18.0506] <annevk>
It also seems that long term the requirement would be moot, so maybe it's easier to just explain the situation in a note and strongly encourage folks not to create such URL strings.

[02:03:36.0646] <rdeltour>
OK good. Yeah, we're only talking of subsetting valid URL strings, so the URL parser would still return an expected result. That it doesn't produce a validation error on some of EPUB-non-conforming strings is acceptable.

As for explaining all that in a note: that's what we do in the current WD; but that requirement was normative before, and EPUB is a slow world so I believe we a normative definition makes more sense.

[02:07:30.0166] <rdeltour>
I have another question if I may.
Essentially for testing if a URL string is conforming I'm proposing the following (simplified) algo:
1. if not a path-relative-scheme-less-URL string, return false
2. if the result of parsing _url_ with "http://example.org/A/" does not start with "http://example.org/A/", return false
3. 2. if the result of parsing _url_ with "http://example.org/B/" does not start with "http://example.org/B/", return false
4. return true

[02:08:44.0661] <rdeltour>
the use of test URLs is somewhat inelegant, but is simpler than redefining a custom parsing algo for counting that dot-dot path segments are balanced by other segments.

[02:09:33.0924] <rdeltour>
any advice or comment ?

[02:12:06.0544] <rdeltour>
 * I have another question if I may.
Essentially for testing if a URL string is conforming I'm proposing the following (simplified) algo:
1. if not a path-relative-scheme-less-URL string, return false
2. if the result of parsing _url_ with "http://example.org/A/" does not start with "http://example.org/A/", return false
3.  if the result of parsing _url_ with "http://example.org/B/" does not start with "http://example.org/B/", return false
4. return true

[02:15:41.0488] <rdeltour>
 * OK good. Yeah, we're only talking of subsetting valid URL strings, so the URL parser would still return an expected result. That it doesn't produce a validation error on some of EPUB-non-conforming strings is acceptable.

As for explaining all that in a note: that's what we do in the current WD; but that requirement was normative before, and EPUB is a slow world so I believe a normative definition makes more sense.

[02:18:40.0419] <annevk>
That seems okay, perhaps with a comment explaining the setup. You'll need to do more serializing if you want to compare strings, but you did say it was simplified.

[02:19:31.0066] <rdeltour>
OK thanks!
(and yes the non-simplified version does serialization)

[02:20:25.0367] <rdeltour>
Well, thank you annevk for the help. Much appreciated!

[06:59:47.0041] <zcorpan>
Domenic: apologies for becoming a grumpy old man yesterday, I'll blame lack of sleep and the fact that this has been grinding for a long time lol

[08:20:27.0725] <Domenic>
> <@sefeng:mozilla.org> I am looking at these two tests https://github.com/web-platform-tests/wpt/blob/628af0fd55db95d785a63484882998343e3a069e/shadow-dom/focus/focus-method-delegatesFocus.html#L271-L284 and wondering which step makes the behaviour different

Yes, these seem suspicious. It seems to me in both cases we should be focusing innerShadowChild?

[08:20:58.0233] <sefeng>
yeah I see the same thing 

[08:22:03.0698] <sefeng>
ping emilio ^ 

[08:27:54.0761] <emilio>
sefeng: Domenic: Hmm, so per spec I believe you're right (https://html.spec.whatwg.org/#focus-delegate is the relevant section, and it is determining the target area without looking at nested shadow tree's delegateFocus). However I believe we should probably behave like the test? It feels weird that `delegatesFocus` allows to cross arbitrary shadow boundaries

[08:28:34.0477] <emilio>
In Gecko what makes it behave differently is [this check](https://searchfox.org/mozilla-central/rev/f574930f8d5f65fc856783ff27674ada781f4570/dom/base/ShadowRoot.cpp#778)

[08:28:55.0963] <Domenic>
I am not sure... can we find an analogy with <input type=date> to help guide the intuition?

[08:29:12.0462] <emilio>
well we can't because conceptually `<input type=date>` delegates focus

[08:29:14.0547] <Domenic>
Or just any semi-realistic example, would help me figure out which direction feels more right.

[08:29:45.0667] <emilio>
But imagine we have a component that doesn't delegate focus. calling `myComponent.focus()` won't focus any descendant in the component

[08:30:08.0610] <Domenic>
Right, that's why it's helpful as an intuition pump... something like <div><#shadowroot delegatesfocus=true><input type=date"></input></div>.focus(), should focus the inner date textbox, right?

[08:30:35.0398] <Domenic>
Hmm yeah I think my example is wrong and yours is the relevant one...

[08:30:37.0110] <emilio>
Yeah, but that's not the difference in those two tests

[08:30:40.0370] <emilio>
right

[08:31:39.0655] <emilio>
The test-case would be `<div id=outer><#shadowroot delegatesfocus=true><div id=inner><#shadowroot><input></#shadowroot></div></#shadowroot></div>`

[08:31:52.0249] <emilio>
It feels weird that `inner.focus()` wouldn't focus the `<input>`, but `outer.focus()` would

[08:32:07.0129] <Domenic>
Yeah, that is weird.

[08:32:10.0574] <Domenic>
OK so we don't want flat tree... we don't want shadow-including descendants... do we want something like shadow-including direct children?

[08:32:39.0930] <emilio>
We want shadow-including descendants as long as the path to the ancestor delegates focus

[08:32:55.0677] <emilio>
As in, shadow-including descendants, but without recursing into shadow trees without `delegatesFocus`

[08:33:07.0143] <Domenic>
So inelegantly bespoke :P

[08:33:31.0966] <Domenic>
The spec text will basically need to do a custom tree-walk I guess?

[08:34:15.0191] <emilio>
Perhaps? You can also do a filter instead looking at containing shadow trees

[08:35:17.0925] <Domenic>
Hmm yeah I'll play around

[08:39:53.0326] <Noam Rosenthal>
Domenic: re https://github.com/whatwg/html/pull/7260/files#r755314056, I actually thought as an alternative to do a completely custom fetch, but take out "prepare request from link element" to a separate function... this way we won't have ephemeral state associated with the element. WDYT?

[08:41:14.0102] <Domenic>
Noam Rosenthal: yeah I thought of that too. I kinda like the ephemeral state bit slightly more, since it makes it more clear this is a special case. But I could go either way.

[08:42:55.0653] <Noam Rosenthal>
Domenic: OK, yea, I was going backwards and forwards with this but I think it's better to have it in a closure (completely custom fetch, with reusing of prepare-request) as it eliminates weird edge cases of what happens if the element changes and re-fetches before the response returns. 

[08:43:33.0822] <Domenic>
Fair point!

[09:11:39.0906] <Noam Rosenthal>
Domenic: revised in that spirit (+ fixed/responded to other comments). 

[11:33:50.0217] <Domenic>
emilio: sefeng: so if we stick with our plan of <dialog> using the same focus-delegation logic as delegatesFocus, that means most of the tests in https://github.com/web-platform-tests/wpt/blob/master/html/semantics/interactive-elements/the-dialog-element/dialog-focus-shadow.html change result, since we won't traverse into non-delegatesFocus shadow trees. That seem OK?

[11:43:28.0179] <emilio>
Unclear if they should use exactly the same steps... But probably?

[11:57:28.0107] <sefeng>
seems okay to me 


2021-11-24
[07:24:25.0127] <annevk>
Domenic: FYI: https://github.com/whatwg/storage/pull/130 also failed participation check (I usually fix these by just telling participate to update the PR)

[07:25:46.0490] <annevk>
Domenic: we should maybe have a better endpoint for that. E.g., I can browse to https://participate.whatwg.org/agreement-status?user=annevk&repo=storage and submit the URL of that PR there and it all works out, but it's a lil weird to have to fill in a (random) user and repo.

[07:26:54.0221] <Domenic>
The logs look fine... the webhook payload was delivered and the server sent back a 204

[07:27:02.0575] <Domenic>
I guess we could add more logging, and maybe send that back instead of a 204

[07:28:06.0984] <Domenic>
Like maybe some random thing happened which caused one of the early bailouts in this function to be hit before we got to createCommitStatus(): https://github.com/whatwg/participate.whatwg.org/blob/main/lib/pr-webhook.js#L6-L40

[07:36:04.0235] <ntim>
Domenic: wdyt of a spec change to prevent focusing steps on disconnected <dialog>? This is already what we ship in STP fwiw: https://wpt.fyi/results/html/semantics/interactive-elements/the-dialog-element/dialog-focusing-steps-disconnected.html?label=master&label=experimental&product=chrome&product=firefox&product=safari&aligned&q=the-dialog-element

[07:37:25.0153] <ntim>
https://html.spec.whatwg.org/multipage/interactive-elements.html#dialog-focusing-steps

[07:37:41.0397] <Domenic>
ntim: I think the spec already does that. Or rather, it runs the focusing steps, but because it finds nothing focusable, the focusing steps are a no-op.

[07:37:46.0273] <ntim>
"If subject is inert, return." -> "If subject is disconnected or inert, return.

[07:38:17.0089] <Domenic>
The spec even has a note: "If control is not focusable, this will do nothing. For modal dialogs, this means that any earlier modifications to the focused area of the document will apply."

[07:38:33.0906] <Domenic>
(But, disconnected modal dialogs already threw in step 3 of showModal())

[07:38:45.0217] <Domenic>
 * (But, disconnected modal dialogs already threw in step 3 of showModal())

[07:39:13.0542] <ntim>
wondering why the test fails in Chrome & FF

[07:39:26.0829] <Domenic>
Yeah fair question

[07:40:15.0443] <Domenic>
Looks like Chrome resets focus to body

[07:41:54.0998] <ntim>
yeah, it could have worked this way as well in STP, it was an intentional choice from me to just skip focusing steps

[07:42:28.0170] <ntim>
Domenic: I think "Run the focusing steps for control." means focusing the body when control is disconnected for current implementations

[07:42:46.0046] <Domenic>
Oh, that's weird

[07:42:49.0102] <ntim>
(FF included)

[07:44:19.0516] <Domenic>
ntim: not per my testing, in FF and Chrome: https://jsbin.com/fokusafumi/edit?html,console,output

[07:45:24.0768] <ntim>
that's weird

[07:46:06.0116] <ntim>
if I remove https://webkit-search.igalia.com/webkit/source/Source/WebCore/html/HTMLDialogElement.cpp#126-127 from webkit, it also does the same as ff and chrome

[07:52:16.0512] <ntim>
Domenic: oh, the old version of the spec had this: https://webkit-search.igalia.com/webkit/source/Source/WebCore/html/HTMLDialogElement.cpp#154-155

[07:52:30.0333] <ntim>
which basically sets focus to body

[07:53:06.0926] <Domenic>
Ah, fascinating

[07:54:15.0188] <Domenic>
Our earliest commit snapshot (i.e. the first version of the spec after the move to GitHub, in 2015) doesn't seem to have such a step: https://html.spec.whatwg.org/commit-snapshots/c9e804f04d03a0658bfa689cb0f368a4d2e37936/#dialog-focusing-steps

[07:58:23.0517] <ntim>
https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/html/html_dialog_element.cc;l=73-77;drc=de68be3f18ba99cc01d75903e167ca09bade253c?q=html_dialog_element&ss=chromium

[07:58:26.0994] <ntim>
chromium does this too

[07:58:46.0774] <ntim>
let me remember the context

[08:00:55.0709] <ntim>
similar stuff in FF: https://searchfox.org/mozilla-central/source/dom/html/HTMLDialogElement.cpp#186-197

[08:03:01.0362] <ntim>
Domenic: from what I recall, that made sense to me because otherwise focus would stay on an inert element in the showModal case

[08:03:11.0103] <ntim>
but yeah right it's not part of the spec

[08:03:57.0574] <Domenic>
Hmm interesting to think about the showModal case

[08:04:33.0644] <Domenic>
I'm happy to just fix Chromium to pass the test you pointed out since it seems more correct anyway... but yeah I wonder what the consequences would be of deleting that line.

[08:05:27.0556] <ntim>
I think the risk is to keep focus on an element behind the dialog

[08:05:42.0424] <ntim>
in the event that the control is not focusable

[08:06:04.0722] <ntim>
and in the showModal case that might be bogus

[08:10:27.0266] <Domenic>
So the spec solves that in another way, which is the focus fixup rule

[08:10:42.0242] <Domenic>
When the modal dialog makes everything inert, we hit https://html.spec.whatwg.org/#focus-fixup-rule

[08:10:49.0579] <Domenic>
See https://html.spec.whatwg.org/#dom-dialog-showmodal step 6

[08:11:09.0766] <Domenic>
But focus fixup rule is very "action at a distance" so I can easily believe implementations need more special code for that

[08:11:32.0615] <Domenic>
I think I remember adding that paragraph explaining the focus fixup rule connection so hopefully we added tests at the same time...

[11:45:40.0863] <ntim>
Domenic: so I guess the right logic should be `else if (is_modal) { setFocusedElement(nullptr) }`

[11:46:32.0744] <ntim>
I guess those specific LoC were specifically to implement the fixup rule

[11:59:52.0591] <Domenic>
Yes, sounds right to me

