2021-11-01
[17:10:24.0486] <sideshowbarker>
As far as what‚Äôs documented in MDN:
```
$ rg --no-line-number --no-filename 'spec_url": ".+whatwg.org' ~/workspace/mdn/browser-compat-data/http/headers/ | awk NF | cut -d ":" -f2- | sort
 "https://fetch.spec.whatwg.org/#cross-origin-resource-policy-header",
 "https://fetch.spec.whatwg.org/#http-access-control-allow-credentials",
 "https://fetch.spec.whatwg.org/#http-access-control-allow-headers",
 "https://fetch.spec.whatwg.org/#http-access-control-allow-methods",
 "https://fetch.spec.whatwg.org/#http-access-control-allow-origin",
 "https://fetch.spec.whatwg.org/#http-access-control-expose-headers",
 "https://fetch.spec.whatwg.org/#http-access-control-max-age",
 "https://fetch.spec.whatwg.org/#http-access-control-request-headers",
 "https://fetch.spec.whatwg.org/#http-access-control-request-method",
 "https://fetch.spec.whatwg.org/#x-content-type-options-header",
 "https://fullscreen.spec.whatwg.org/#permissions-policy-integration",
 "https://html.spec.whatwg.org/multipage/infrastructure.html#autoplay-feature",
 "https://html.spec.whatwg.org/multipage/infrastructure.html#document-domain-feature",
 "https://html.spec.whatwg.org/multipage/origin.html#coep",
 "https://html.spec.whatwg.org/multipage/origin.html#the-headers",
```
‚Ä¶ so from that, yeah, only Fetch and HTML (the Fullscreen one isn‚Äôt introducing any header)

[17:11:31.0385] <sideshowbarker>
> <@annevk:mozilla.org> Apart from Fetch and HTML, do we have other WHATWG standards that introduce their own HTTP headers?

 * As far as what‚Äôs documented in MDN:
```
$ rg --no-line-number --no-filename 'spec_url": ".+whatwg.org' ~/workspace/mdn/browser-compat-data/http/headers/ | awk NF | cut -d ":" -f2- | sort
 "https://fetch.spec.whatwg.org/#cross-origin-resource-policy-header",
 "https://fetch.spec.whatwg.org/#http-access-control-allow-credentials",
 "https://fetch.spec.whatwg.org/#http-access-control-allow-headers",
 "https://fetch.spec.whatwg.org/#http-access-control-allow-methods",
 "https://fetch.spec.whatwg.org/#http-access-control-allow-origin",
 "https://fetch.spec.whatwg.org/#http-access-control-expose-headers",
 "https://fetch.spec.whatwg.org/#http-access-control-max-age",
 "https://fetch.spec.whatwg.org/#http-access-control-request-headers",
 "https://fetch.spec.whatwg.org/#http-access-control-request-method",
 "https://fetch.spec.whatwg.org/#x-content-type-options-header",
 "https://fullscreen.spec.whatwg.org/#permissions-policy-integration",
 "https://html.spec.whatwg.org/multipage/infrastructure.html#autoplay-feature",
 "https://html.spec.whatwg.org/multipage/infrastructure.html#document-domain-feature",
 "https://html.spec.whatwg.org/multipage/origin.html#coep",
 "https://html.spec.whatwg.org/multipage/origin.html#the-headers",
```
‚Ä¶ so from that, yeah, only Fetch and HTML (the Fullscreen one isn‚Äôt introducing any header)


2021-11-02
[19:37:48.0724] <sideshowbarker>
annevk: FYI my _‚ÄúShow HTTP status code in CORS messages‚Äù_ patch landed in the WebKit sources https://trac.webkit.org/changeset/285145/webkit

[19:41:37.0031] <sideshowbarker>
so that‚Äôll soon be in a Safari TP release ‚Äî and then I guess in Safari 15.x in March or April  

[23:35:13.0693] <DerekNonGeneric>
congrats! was somewhat expecting to see these error messages localized but no browser vendor does error messages correctly, so not surprised if that's the case. might need to make an account over now that you mention it

[23:36:07.0825] <sideshowbarker>
they are localized in some browsers at least

[23:39:31.0917] <DerekNonGeneric>
there are ways to localize error messages, but that doesn't seem to have happened in that changelog -- maybe they go back over it later? doubt it, but have seen great localization for error messages maybe twice

[23:42:11.0041] <DerekNonGeneric>
the two software projects were Git and TypeScript believe it or not

[03:37:24.0922] <smaug>
why are some tentative openUI tests being mixed with html tests?

[03:55:23.0854] <annevk>
smaug: the intention might be to upstream the feature to HTML?

[03:56:10.0886] <smaug>
I couldn't find any spec-like text for selectmenu

[03:56:24.0037] <smaug>
perhaps I looked at from wrong places

[03:56:52.0368] <annevk>
smaug: are they marked as tentative at least?

[03:56:58.0934] <smaug>
sure

[03:58:36.0929] <smaug>
seeing "the-selectmenu-element" here https://github.com/web-platform-tests/wpt/tree/ca3635d2be104d885837442cc5e7ada030d66b22/html/semantics/forms is a bit surprising. 

[05:03:39.0423] <Ms2ger üíâüíâ>
They're all marked `.tentative`

[05:03:51.0850] <Ms2ger üíâüíâ>
Maybe they didn't know you could do that to a complete directory too

[06:00:59.0368] <Noam Rosenthal>
annevk, Jake Archibald: I was thinking re. the controller thingy (https://github.com/whatwg/fetch/pull/1329),  

maybe instead of returning a struct that fetch exported functions for, to return a struct with algorithm fields, that are set before returning the controller, kind of like how the different algorithms are kept in fetch params).

This way both fetch-params and the state are truly private, and the only thing returned/exported is terminate/abort/finalize or whatever method is operable after the fetch has started. WDYT?

[06:03:26.0453] <Jake Archibald>
Noam Rosenthal: I think algorithm fields are for cases where the algorithm is _set_ by some other spec, but annevk will know more

[06:05:09.0581] <annevk>
Yeah, generally concepts are "plain" structs and algorithms get everything they need passed as parameters

[06:05:22.0694] <Noam Rosenthal>
... Trying to prevent a situation where by putting the state information inside controller we make it "public", while what we want to publicize is only some methods to manipulate the fetch.

[06:05:38.0665] <Noam Rosenthal>
 * ... Trying to prevent a situation where by putting the state information inside controller we make it "public", while what we want to publicize is only some methods to manipulate the fetch.

[06:05:48.0608] <Jake Archibald>
Can't the controller just have the public data?

[06:05:52.0898] <annevk>
I think exposing the state of the fetch is reasonable

[06:06:00.0950] <Jake Archibald>
fetch params can have the private data

[06:06:10.0176] <annevk>
Assuming that we're talking about "ongoing" vs terminated

[06:06:21.0541] <Noam Rosenthal>
so it exposes state, and later cacheState and timing info

[06:06:31.0985] <Noam Rosenthal>
... which are needed when finalizing

[06:06:57.0453] <annevk>
Yeah, but we'd only set those on the controller when they are meant to become public (so we might duplicate them there, essentially)

[06:07:26.0817] <Noam Rosenthal>
I guess cacheState can only be set before fetch finale, right?

[06:07:32.0069] <Noam Rosenthal>
which would make this sort of work

[06:07:41.0646] <annevk>
As in, we'd write to those fields on "fetch params", and then at some point copy the whole lot over to the controller

[06:08:23.0107] <Noam Rosenthal>
yea, fetch finale would probably be where this happens, as that's where it's currently copied to the response

[06:09:00.0969] <annevk>
So we'll end up with some duplication, but it also clarifies things in a way

[06:09:06.0024] <Noam Rosenthal>
OK this makes more sense to me. Thanks!

[06:09:13.0553] <annevk>
\o/

[06:09:26.0451] <Noam Rosenthal>
(Done with bikesheeding about this corner, going back to work)

[06:09:40.0837] <Noam Rosenthal>
 * (Done with bikesheeding about this corner, going back to work)

[06:11:11.0321] <annevk>
I wish I had more painted bikesheds to show for it, but I guess that's why it's called that way

[06:36:41.0706] <Noam Rosenthal>
Jake Archibald, annevk : followed your suggestion (https://github.com/whatwg/fetch/pull/1329), hope it's on the right track :)

[06:57:26.0401] <annevk>
Noam Rosenthal: I haven't had a chance yet, but one thing we need to figure out is the interaction of this with service workers

[06:57:42.0778] <annevk>
Noam Rosenthal: I just realized that while writing https://github.com/whatwg/fetch/pull/1343#issuecomment-957631425

[06:58:15.0988] <annevk>
Noam Rosenthal: service workers observe the termination for some things so they might need access to the controller or the state or some such

[06:58:36.0457] <annevk>
Jake Archibald: did you consider that already perhaps?

[07:12:43.0332] <Jake Archibald>
annevk: service worker is hand-waving this in a couple of places, so yeah, it's be great to switch this to an "abort when" based on some state

[07:31:27.0838] <Noam Rosenthal>
> <@annevk:mozilla.org> Noam Rosenthal: I haven't had a chance yet, but one thing we need to figure out is the interaction of this with service workers

I will get more acquainted with this

[08:20:58.0888] <annevk>
Noam Rosenthal: cool! I think we need to expose the controller, essentially; I guess we only need to read state from it

[08:21:36.0271] <annevk>
Noam Rosenthal: I'm not sure if that means we should stuff the controller on the request or just add an argument to "handle fetch", I guess the latter would be better

[08:21:55.0573] <annevk>
Anyway, this is a bit off the cuff

[08:48:29.0364] <Luca Casonato>
Domenic: In the streams spec, in `ReadableStreamPipeTo`, the spec says:
> If source.[[controller]] implements ReadableByteStreamController, let reader be either ! AcquireReadableStreamBYOBReader(source) or ! AcquireReadableStreamDefaultReader(source), at the user agent‚Äôs discretion.

(since the beginning of time: https://github.com/whatwg/streams/pull/512). What does this mean? In what cases should the user agent use which reader type? I can't find any docs in surrounding code snippets.

[08:48:35.0315] <Luca Casonato>
 * Domenic: In the streams spec, in `ReadableStreamPipeTo`, the spec says:
> If source.[[controller]] implements ReadableByteStreamController, let reader be either ! AcquireReadableStreamBYOBReader(source) or ! AcquireReadableStreamDefaultReader(source), at the user agent‚Äôs discretion.

(since the beginning of time: https://github.com/whatwg/streams/pull/512). What does this mean? In what cases should the user agent use which reader type? I can't find any docs in surrounding code snippets.

[09:08:35.0954] <Domenic>
Luca Casonato: this is basically saying that the choice of reader is unobservable, so if you want to use a byte reader because you think you can do smart byte thingies with it while piping, go ahead

[09:08:52.0942] <Luca Casonato>
ah, ok

[09:09:24.0542] <Luca Casonato>
thx

[09:16:00.0230] <annevk>
sefeng: hey welcome! https://github.com/whatwg/html/pull/7285 could use your review I think. And potentially that of emilio.

[09:16:44.0467] <sefeng>
roger, will do

[09:50:35.0702] <annevk>
Domenic: if `x in y` is false, will `y[x]` always be undefined?

[09:50:56.0351] <annevk>
/me wonders whether to merge https://github.com/web-platform-tests/wpt/pull/31461

[09:52:26.0766] <Luca Casonato>
> <@annevk:mozilla.org> Domenic: if `x in y` is false, will `y[x]` always be undefined?

No (because Proxy)

[09:53:11.0042] <annevk>
Luca Casonato: fair, but that doesn't seem applicable here

[09:53:21.0779] <Luca Casonato>
Oh ok, then idk

[09:57:07.0663] <Ms2ger üíâüíâ>
Seems fine

[09:58:58.0892] <Benjamin Gruenbaum>
> <@noamr:matrix.org> Jake Archibald, annevk : followed your suggestion (https://github.com/whatwg/fetch/pull/1329), hope it's on the right track :)

really nice! 

[10:51:56.0392] <Noam Rosenthal>
> <@annevk:mozilla.org> Noam Rosenthal: I'm not sure if that means we should stuff the controller on the request or just add an argument to "handle fetch", I guess the latter would be better

Definitely the latter. Seems natural to me that SW would get a "fetch controller" as a parameter and would be able to query if it is terminated

[10:54:33.0164] <Noam Rosenthal>
I would try to avoid associating more things with requests/responses, as those are transient serializable beings and when we associate "procedural" beings like fetch controller (or "an ongoing fetch") we make them confusing... (does this controller gets serialized or stored with the request? how?)

that's what happened with associating timing info to a response, where it got ambiguous in terms of caching and SW

[10:55:15.0396] <Noam Rosenthal>
adding a parameter to SW's fetch "handle fetch" is a clean solution to this problem

[11:14:45.0117] <Noam Rosenthal>
annevk, Jake Archibald I think one thing that makes SW's "handle fetch" a bit different is that it asynchronously returns a response, rather than receive a `processResponse` callback algorithm or so.

If we'd change it to be the latter, the SW fetch could return its own controller and the main fetch could terminate it, rather than invert it to where SW has to check whether its caller ("the fetch instance") was terminated. 

[11:19:32.0817] <annevk>
I wonder what happens today if the abort happens after the service worker returned a response. Does the service worker still get notified? Perhaps that's just a state check on the service worker side though...

[11:20:06.0881] <annevk>
Making that interaction with the service worker non-blocking sounds reasonable, though I'm not entirely sure I see what it would buy us quite yet.

[11:22:23.0515] <annevk>
I guess having a controller for the fetch event would give an opportunity to not forward signals when it's too late anyway, but realistically you'd have to implement that check on the receiver side as well.

[11:23:28.0129] <annevk>
I should have time to give all this another look at tomorrow

[14:53:57.0863] <Domenic>
annevk: looks like removing "pair" broke Web IDL: https://github.com/whatwg/webidl/runs/4082229137?check_suite_focus=true

[15:16:26.0659] <Domenic>
Kagami is on it


2021-11-03
[23:17:08.0422] <annevk>
Thanks krosylight!

[01:10:43.0300] <Ms2ger üíâüíâ>
/me denies everything

[02:38:21.0859] <annevk>
Jake Archibald: so one thing that strikes me is that there's no forwarding of cancelation to a fetch initiated by the service worker

[02:39:13.0135] <Jake Archibald>
annevk: in which direction? As in, which side is listening for the cancelation, and which side is cancelling?

[02:39:18.0664] <annevk>
Jake Archibald: so if a document fetches A and the service worker fetches B and returns that, when exactly will it listen to aborting of A?

[02:40:31.0063] <Jake Archibald>
annevk: if the stream is cancelled, that part works right? For stuff that happens before that, I thought `fetchEvent.request.signal` could be used as an indicator

[02:40:39.0155] <annevk>
I guess only if it reuses the Request object in some manner, although I'm not sure how well that is defined

[02:41:20.0635] <annevk>
I think it there might be some race issues, but canceling the stream probably works, yeah

[02:43:00.0692] <annevk>
Noam Rosenthal: I think one thing that might influence the design of the interaction with service workers is what we want to do with timing

[02:43:15.0579] <annevk>
Noam Rosenthal: I'm not entirely sure what information needs to be exchanged

[02:43:42.0879] <annevk>
Noam Rosenthal: if that information would ideally be on a "service worker fetch event controller", I guess that's what we should add

[02:44:15.0284] <annevk>
Noam Rosenthal: as per your suggestion, and fetch would forward an abort to that controller

[02:45:35.0322] <annevk>
(It's a little weird that in JavaScript the cancelation is managed by AbortSignal on the Request, but that doesn't encompass all types of aborting that might happen, so maybe this is okay.)

[02:54:43.0751] <Noam Rosenthal>
annevk: regarding timing, going forward there shouldn't be interaction. It's part of why I want to make things more explicit there

[02:55:31.0035] <Noam Rosenthal>
*only* a fetch would keep its timing info and report it. later of course we can add more things to the controller.

[02:56:05.0175] <Noam Rosenthal>
(the service worker timing is only relevant to navigation timing, and in that case the timing is not part of a fetch but is queried directly from the service worker)

[02:56:53.0769] <annevk>
Noam Rosenthal: oh, I thought we also needed to expose Cache API timing and things like that

[02:57:24.0295] <Noam Rosenthal>
for the fetch, we need to expose "finalize and report timing info"

[02:57:41.0914] <Noam Rosenthal>
cache state can be read from the response

[02:57:50.0498] <Noam Rosenthal>
there's nothing new we need to expose from service worker

[02:58:25.0469] <annevk>
Noam Rosenthal: so that means that if there is service worker the timing information ends up being mostly opaque, right?

[02:58:36.0158] <Noam Rosenthal>
it's reported inside the service worker

[02:58:47.0799] <Noam Rosenthal>
so you can do `performance.getEntries` from within service worker code etc

[02:58:59.0441] <Noam Rosenthal>
but it's opaque to the caller fetch

[02:59:42.0087] <Noam Rosenthal>
it felt like exposing that information twice mainly creates ambiguities

[03:00:27.0043] <Noam Rosenthal>
... that's why I didn't want that information on `response` which is a strange object that gets passed around and stored

[03:00:43.0195] <annevk>
thanks, sgtm

[03:01:10.0671] <annevk>
I added a very brief summary of our options for service workers to your PR

[03:06:25.0627] <Noam Rosenthal>
what's "UB territory"? :)

[03:13:21.0062] <annevk>
UB being undefined behavior

[03:13:44.0023] <Noam Rosenthal>
AH, TIL

[07:04:52.0330] <annevk>
Luca Casonato: fwiw, the cookie thing is blocked on getting someone from Chrome or Safari to chime in; hopefully it's clear from the prose and tests that it's not a whole lot of additional work

[07:05:45.0776] <annevk>
Luca Casonato: I have a couple more nits on the PR, but might as well wait until we have the higher-level checkboxes done

[07:06:14.0269] <annevk>
(And I'm also willing to push a fixup for that myself in due course)

[10:39:59.0224] <hober>
> <@annevk:mozilla.org> Luca Casonato: fwiw, the cookie thing is blocked on getting someone from Chrome or Safari to chime in; hopefully it's clear from the prose and tests that it's not a whole lot of additional work

link?

[10:41:11.0285] <annevk>
hober: heya, https://github.com/whatwg/fetch/pull/1346

[16:41:40.0795] <Jeffrey Yasskin>
I just opened https://webidl.spec.whatwg.org/ for the first time, and I definitely miss the table-of-contents-on-the-side from the old stylesheet.


2021-11-04
[18:41:30.0680] <DerekNonGeneric>
there was a dark mode too

[21:10:42.0203] <Widdershin>
Hi folks, had some good successes using the WebIDL bindings to implement bindings between mruby and browser APIs. The `@webref/idl` package made this especially easy, thanks for providing that.

While generating bindings works well, it feels like there are some fairly severe issues with this approach for a dynamic language. My current generated bindings are 800kb, which is non-trivial for a webapp, especially on top of the mruby interpreter and emscripten runtime. This isn't too bad with caching but will still be a show-stopper for many users.

I was wondering if there's ever been any interest in providing a JavaScript API that can be used to load Web IDL bindings directly from the browser at runtime. This would allow dynamic languages to lazily bind to Web APIs as necessary, saving on the need to send and process all bindings upfront.

[21:12:21.0668] <Widdershin>
As it stands, I think I'll have to opt to create bindings for JavaScript objects at runtime based on reflection (or just depressing `method_missing` hacks), which is a shame since I do really like having classes generated with all the proper metadata.

[21:13:27.0569] <Widdershin>
 * Hi folks, had some good successes using the WebIDL bindings to implement bindings between mruby and browser APIs. The `@webref/idl` package made this especially easy, thanks for providing that.

While generating bindings works well, it feels like there are some fairly severe issues with this approach for a dynamic language. My current generated bindings are 800kb, which is non-trivial for a webapp, especially on top of the mruby interpreter and emscripten runtime. This isn't too bad with caching but will still be a show-stopper for many users.

I was wondering if there's ever been any interest in providing a JavaScript API that can be used to load Web IDL bindings directly from the browser at runtime. This would allow dynamic languages to lazily bind to Web APIs as necessary, saving on the need to send and process all bindings upfront.

[21:18:03.0592] <Widdershin>
 * Hi folks, had some good successes using the Web IDL standard to implement bindings between mruby and browser APIs. The `@webref/idl` package made this especially easy, thanks for providing that.

While generating bindings works well, it feels like there are some fairly severe issues with this approach for a dynamic language. My current generated bindings are 800kb, which is non-trivial for a webapp, especially on top of the mruby interpreter and emscripten runtime. This isn't too bad with caching but will still be a show-stopper for many users.

I was wondering if there's ever been any interest in providing a JavaScript API that can be used to load Web IDL bindings directly from the browser at runtime. This would allow dynamic languages to lazily bind to Web APIs as necessary, saving on the need to send and process all bindings upfront.

[00:32:01.0202] <annevk>
Jeffrey Yasskin: TabAtkins mentioned he might do something about it, I don't have the bandwidth at the moment

[08:37:44.0134] <TabAtkins>
yes, it's on my plate, tho i'm rather busy this month

[08:38:17.0522] <TabAtkins>
but generally i want to adapt the current w3c layout to whatwg, plus darkmode

[14:07:24.0121] <smaug>
annevk: I was mumbling to krosylight how rarely I write spec prs and how I always need to go through all the documentation scattered in random places before writing the pr (well, first I need to always find the documentation). It would be really nice to have some step-by-step documentation for all the normal tooling around spec writing.

[14:07:45.0699] <smaug>
I wonder if you or Domenic had time to write something down. 

[14:14:05.0466] <krosylight>
There are https://respec.org/docs/ and https://tabatkins.github.io/bikeshed/ but maybe it's not easy enough to find them


2021-11-05
[23:17:35.0325] <annevk>
Cool! As long as there's some WHATWG green and orangered in there I'm happy üòä

[23:19:20.0930] <annevk>
smaug: generally for WHATWG specs it should all be linked from the README

[23:20:40.0181] <annevk>
smaug: if there's things missing there or https://github.com/whatwg/meta/blob/main/CONTRIBUTING.md (which should be linked from all our READMEs) that would be good to know; probably best to file an issue against whatwg/meta

[23:20:55.0505] <annevk>
 * smaug: if there's things missing there or https://github.com/whatwg/meta/blob/main/CONTRIBUTING.md (which should be linked from all our READMEs) that would be good to know; probably best to file an issue against whatwg/meta

[03:33:55.0080] <smaug>
annevk: I've been hoping to have some simple step-by-step instructions. If I start from the spec, I get to https://github.com/whatwg/html, which links to https://github.com/whatwg/html/blob/main/CONTRIBUTING.md which links to https://github.com/whatwg/meta/blob/main/CONTRIBUTING.md . then one goes back to previous page which says something about wattsi (but doesn't tell whether that should be installed, but kind of hints about it), and then there is a link to https://github.com/whatwg/html-build. oh, and I forgot a link to https://github.com/whatwg/meta/blob/main/COMMITTING.md  was also mentioned somewhere

[03:34:13.0269] <smaug>
So the information is in various places and not in any clear order

[03:38:53.0948] <annevk>
smaug: that's fair; though it's also tricky to find the right balance there since the most basic thing is "create a branch", "edit a file", "commit", "create a PR"

[03:40:05.0726] <smaug>
Since I live mostly in mozilla-central, I've got used to so simple build  + "pr creation" setup with ./mach and moz-phab üòâ

[03:40:22.0850] <annevk>
And generally build tools beyond make are optional, there's a service for all of them (or you can just create PRs and see if things work)

[03:41:12.0943] <annevk>
smaug: right yeah, git/GitHub knowledge is assumed at the moment... I'm using GitHub Desktop myself for some of the actions and it's quite nice if you don't mind a GUI

[03:43:45.0791] <smaug>
I wasn't thinking to include all the github instructions, although some common practices might not be a bad idea, if there are things which happen to fit into spec writing process particularly well

[03:48:22.0405] <annevk>
Perhaps a "Your first PR" list of steps that's linked prominently from each README? (With HTML perhaps having its own list of steps for reasons.)

[03:53:35.0980] <smaug>
Something like that would be great, at least for me, since all my spec prs are basically the first ones, given how rarely I do them.

[04:03:43.0650] <annevk>
smaug: I filed https://github.com/whatwg/meta/issues/232 as a start

[04:04:05.0431] <smaug>
thanks!

[07:22:46.0498] <Domenic>
> <@annevk:mozilla.org> Cool! As long as there's some WHATWG green and orangered in there I'm happy üòä

Honestly I've never been so sure about the orangered :)

[07:33:03.0818] <Andreu Botella (he/they)>
So apparently Chromium's UTF-16 decoder skips the replacement character for truncated sequences on fetches (that is, for page loads and XHR, but not for `TextDecoder`) "for compatibility reasons"

[07:33:06.0013] <Andreu Botella (he/they)>
https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/platform/wtf/text/text_codec_utf16.cc;l=73

[07:33:20.0722] <Andreu Botella (he/they)>
annevk: hsivonen Is this a thing that was ever discussed?

[07:39:24.0422] <Domenic>
Seems bad. I suspect we might be able to fix it like we did the recent JSON/UTF-8 bug.

[08:16:48.0056] <annevk>
Andreu Botella (he/they): I'm pretty sure it's considered a bug (EOF behavior has been discussed a lot, including that browsers do it badly), might even be filed

[08:17:21.0161] <annevk>
Andreu Botella (he/they): unfortunately doing the easy "blame" thing on that file seems hard, suspect that comment was added a long time ago

[08:22:59.0223] <Andreu Botella (he/they)>
yeah, and the blame for this test suggests that whatever compatibility constraints (IE I assume) no longer apply, since lone surrogates at EOF used to decode as is and were later changed

[08:22:59.0871] <Andreu Botella (he/they)>
https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/web_tests/fast/encoding/char-decoding-truncated.html

[08:35:01.0886] <hsivonen>
> <@andreubotella:mozilla.org> annevk: hsivonen Is this a thing that was ever discussed?

I vaguely remember discussing something along those lines with zcorpan . I don't recall any reported breakage from Gecko fixing that.

[08:35:12.0995] <hsivonen>
Fixing in the sense of generating the U+FFFD.


2021-11-06
[14:18:03.0718] <Cory>
i think this is the right place. i had a question about the html spec for focus when the currently focused element is removed from DOM. when that happens, the spec explicitly says focus should go to body. why? wouldn't focus going to the nearest focusable parent be more desirable?


2021-11-08
[00:16:35.0175] <Noam Rosenthal>
annevk, Jake Archibald, how would you like to proceed with https://github.com/whatwg/fetch/pull/1329? annevk you've raised some questions about how this would apply to worker, I think all answers are valid but want to proceed somehow 

[01:29:01.0058] <annevk>
Noam Rosenthal: I'm under the weather this week, but I think we need to tackle the service worker part as well; there's not many hits for "terminate" in SW, but there's a few and we cannot just break the system

[01:29:35.0381] <annevk>
Noam Rosenthal: putting a Living Standard in an inconsistent state is not something I'm happy with if it can be avoided

[01:29:46.0739] <Noam Rosenthal>
annevk: hope you get well soon :)

[01:31:19.0834] <Noam Rosenthal>
annevk: Currently SW references the somewhat handwavy "when the Fetch is terminated" which is an exported link that is still going to be there, I don't think we're leaving it more inconsistent than before. But I don't mind posting a PR to SW that makes it explicit with a controller, if that's the direction

[01:34:19.0944] <annevk>
Noam Rosenthal: yeah, that sounds good to me still. I wish others would chime in a bit more or at least say something to the effect of "sounds reasonable, can't think of anything better".

[01:35:03.0600] <Noam Rosenthal>
annevk: cool, I'll propose the PR, and hopefully it would be enough of a strawman to get some "sounds reasonable" or "let's do this differently"

[04:19:42.0922] <Noam Rosenthal>
annevk: I thought as an alternative to returning a controller, to emit an "onFetchStarted(controller)" from both fetch and SW. This way the processes as they are today don't need to change and everything can still work. It might make my patch quite simpler. WDYT?

[04:20:26.0552] <Noam Rosenthal>
... otherwise I need to turn HTTP fetch into something that "awaits" fetch or make a lot of changes in fetch to make internal algorithms asynchronous

[04:21:50.0565] <zcorpan>
> <@hsivonen:mozilla.org> I vaguely remember discussing something along those lines with zcorpan . I don't recall any reported breakage from Gecko fixing that.

I don't remember what the compat problem was here

[06:36:46.0908] <Noam Rosenthal>
> <@noamr:matrix.org> annevk: I thought as an alternative to returning a controller, to emit an "onFetchStarted(controller)" from both fetch and SW. This way the processes as they are today don't need to change and everything can still work. It might make my patch quite simpler. WDYT?

https://github.com/w3c/ServiceWorker/pull/1612 and a new revision of https://github.com/whatwg/fetch/pull/1329 address this. (cc Jake Archibald )

[12:31:47.0842] <Dominic Farolino>
https://fetch.spec.whatwg.org/#concept-scheme-fetch mentions "URLs such as "about:config" are handled during navigation and result [...]" Where exactly are these URLs handled in navigation?

[12:44:32.0503] <Andreu Botella (he/they)>
> <@domfarolino:matrix.org> https://fetch.spec.whatwg.org/#concept-scheme-fetch mentions "URLs such as "about:config" are handled during navigation and result [...]" Where exactly are these URLs handled in navigation?

https://github.com/whatwg/html/issues/2414


2021-11-09
[00:26:45.0366] <annevk>
Dominic Farolino: maybe it should say "ought to be handled" üôÇ

[03:18:18.0973] <smaug>
does wpt have some way to close alert() and similar popups? 

[03:18:23.0572] <smaug>
jgraham: ^

[03:35:40.0882] <jgraham>
smaug: Not in the middle of the test at present, but we attempt to close them at the end of the test in gecko. We could easily expose https://w3c.github.io/webdriver/#dismiss-alert for the "I know the test is supposed to have created an alert at this point" case.

[03:36:13.0094] <smaug>
ok. I was thinking to write some test for beforeunload, but perhaps I'll use mochitest for now

[03:39:36.0172] <jgraham>
smaug: If those WebDriver primitives are enough for your use case it's literally only boilerplate code to expose them. I could make a patch against wpt in gecko right away for you to experiment with.

[03:41:17.0160] <smaug>
https://w3c.github.io/webdriver/#user-prompts talks about alert/confirm/prompt, and about implicitly closing beforeunload prompt

[03:41:28.0875] <smaug>
I think I'd prefer to explicitly close beforeunload

[03:42:49.0737] <jgraham>
Ah, OK. It might be true that WebDriver by default interferes with beforeUnload, although I think it's only implicitly dismissed if you try to navigate when the prompt is present

[03:42:58.0491] <jgraham>
 * Ah, OK. It might be true that WebDriver by default interferes with beforeUnload, although I think it's only implicitly dismissed if you try to navigate when the prompt is present

[05:44:15.0222] <jgraham>
smaug: Hmm, so I tried it and the interaction with alert and the event loop, coupled with the limitations of WebDriver makes the implementation of accept_alert in wpt harder than I'd imagined. I might fiel this under "good candidate for a post-WebDriver-BiDi world"

[05:46:10.0916] <smaug>
ok

[05:46:22.0466] <jgraham>
Or, maybe I can make it work with the uuid-in-the-URL approach to identifying windows that's part of the channels works that's been stuck in review for a long time :/

[05:46:38.0269] <jgraham>
 * smaug: Hmm, so I tried it and the interaction with alert and the event loop, coupled with the limitations of WebDriver makes the implementation of accept_alert in wpt harder than I'd imagined. I might file this under "good candidate for a post-WebDriver-BiDi world"

[05:46:54.0719] <jgraham>
But still, not going to do that today :)

[06:13:46.0608] <Nic Jansma>
Hi all!  Nic Jansma from Akamai here.  Had a quick question about our akamai-whatwg Github org (https://github.com/akamai-whatwg)

Are "paid" organizations still required to be in the participants list (https://github.com/whatwg/participant-data/blob/main/entities.json#L366), or can we be in the Free plan?

[06:18:42.0710] <annevk>
Nic Jansma: it doesn't matter to the WHATWG what kind of GitHub organization your organization uses, as long as it has the ability for individuals belonging to your organization to publicize their membership

[06:19:17.0624] <annevk>
Hope that's not too ambiguous üôÇ

[06:20:19.0396] <annevk>
Nic Jansma: we do need a GitHub organization listed there, though

[06:23:05.0600] <Nic Jansma>
Yep!  I'm planning on opening a PR for entities.json since the Contact info isn't up to date for Akamai right now.

Ok, I think that answers my question about the Organization requirements. Thanks!

Thanks annevk 

[06:23:46.0942] <annevk>
Nic Jansma: sounds good, thanks for keeping it up-to-date!

[07:03:19.0597] <Domenic>
> <@jgraham_:matrix.org> smaug: If those WebDriver primitives are enough for your use case it's literally only boilerplate code to expose them. I could make a patch against wpt in gecko right away for you to experiment with.

Well, also a RFC and stuff, right? I recall adding such things to WPT to be quite a process.

[07:11:25.0736] <jgraham>
Right, hence "against wpt in gecko"

[07:12:17.0513] <jgraham>
Obviously there would still have to be an RFC to actually land it, but in this case I think it would have been relatively uncontroversial since it's just exposing WebDriver functionality directly.

