2025-10-01
[02:43:35.0685] <keithamus>
https://github.com/whatwg/html/issues/11733 one of the repo admins should probably block this user.

[04:11:21.0624] <zcorpan>
keithamus: Looks like they're blocked. Thanks

[05:23:18.0032] <annevk>
(I deleted the issue as well, in case anyone wonders what's going on.)

[11:19:13.0168] <cwilso>
Looking at the results of the meeting time poll, it seems there's general consensus that 1) we should keep *an* APAC-friendly time, but should decrease the frequency.  I'm thinking we should probably change to cycle three AMER+EMEA with one APAC-friendly time.  I'm kind of ambivalent if we use the APAC-AMER or APAC-EMEA, but seems like it would be slightly better to go with the former.  (Seems like there is slightly more attendance for the APAC-AMER than the APAC-EMEA on average.). WDYAT?

[15:35:47.0324] <smaug>
APAC-EMEA has usually folks from 3 browser engines, APAC-AMER often only from 2, I think.


2025-10-02
[21:47:00.0803] <sideshowbarker>
@cwilso Both the APAC-friendly times are equally inconvenient for me. The APAC-AMER one is exactly the time of day when I’m busy getting my kids on their way to school and preschool. And the APAC-EMEA one is pretty much the time of day when I’m busy cooking dinner for my kids. So for me personally the AMER+EMEA one (even though it’s at midnight my time) is actually more convenient than either of the APAC-friendly ones. 

[21:47:31.0664] <sideshowbarker>
* cwilso:  Both the APAC-friendly times are equally inconvenient for me. The APAC-AMER one is exactly the time of day when I’m busy getting my kids on their way to school and preschool. And the APAC-EMEA one is pretty much the time of day when I’m busy cooking dinner for my kids. So for me personally the AMER+EMEA one (even though it’s at midnight my time) is actually more convenient than either of the APAC-friendly ones. 

[00:34:47.0244] <Noam Rosenthal>
I find the APAC+EMEA one to be the most convenient...
but I wonder if there are APAC people who semi-regularly attend either, now that Domenic has retired? And in general which of these is better for them?

[02:12:14.0685] <Noam Rosenthal>
Luke Warlow: regarding multiple methods - I found that web developers often look to do something specific rather then look at a "family of methods". The same way people prefer the multiple `Array` methods that do specifc things rather than using `reduce`. `element.insertHTML(html, "before")`    doesn't add much readability as opposed to `element.beforeHTML(html)`

[02:13:46.0518] <Luke Warlow>
Yeah tbf I guess my main unsureness is about adding so many new ones, with no real prospect of removing the old ones.

One other question is how does this work with iframes? Am I able to stream into an iframe element somehow?

[02:14:22.0976] <Noam Rosenthal>
You mean the inline content of an `<iframe>` ?

[02:14:51.0264] <Noam Rosenthal>
Can you `iframe.insertAdjacentHTML()` today? It would work similarly

[02:15:05.0946] <smaug>
I wish we hadn't added the explicit microtask checkpoint before script execution (when there isn't JS on stack). Now with streaming that wouldn't work quite the same way if a stream adds multiple scripts and first one triggers promise callbacks. Those might get handled after the other scripts. Unless each script execution is its own microtask

[03:08:49.0807] <foolip>
keithamus: if you want to reproduce https://github.com/whatwg/html-build/issues/297#issuecomment-3275025761, there's a bikeshed-experiment branch in both html and html-build to check out. Then run `./build.sh --bikeshed --no-update` to see if it works at all.

[03:09:17.0150] <foolip>
keithamus: to then get it into a profiler, I've edited the script to print the bikeshed command and exit instead of running bikeshed

[03:09:55.0960] <foolip>
keithamus: it honestly wasn't easy for me to get everything working, so happy to VC and walk you through the setup that worked for me to make changes to bikeshed and try them in a profiler.

[03:10:19.0666] <Ms2ger>
What's HMTL?

[03:10:44.0308] <keithamus>
Hyper Markdown Templating Language

[03:38:11.0637] <Noam Rosenthal>
Luke Warlow: https://github.com/whatwg/html/issues/10122 has some good pros/cons about arguments vs. multiple methods from Lea Verou. I think Domenic swayed me towards the multiple-method camp but I'm not zealous about it. Will solicit more feedback from web developers about this. In any case, I added this as an alternative to the OP.

[03:44:47.0694] <annevk>
At this point I think multiple methods is more DOM-like than some kind of awkward positional argument. And although my preference would typically be to reuse the existing methods, we have made a decision of sorts here to break new ground so we can solve a set of issues. (For instance, built-in support for declarative shadow roots.)

[03:47:54.0772] <Noam Rosenthal>
annevk: re your `beforeHTML` comment- doesn't it make it sound like we're putting something "before some HTML"?

[03:48:23.0739] <Luke Warlow>
Was there a reason that innerHTML didn't just support DSD? Afaik it's a Boolean flag set based on the method used. Was it compat?

[03:50:30.0577] <Noam Rosenthal>
https://github.com/whatwg/dom/issues/912

[03:52:54.0941] <Noam Rosenthal>
(XSS protection from injecting shadow DOM by surprise without an opt in, to cut an extremely long story short)

[03:57:59.0095] <annevk>
Noam Rosenthal: I suppose, but I think it's still preferable as it's consistent with appendHTML and setHTML and such.

[04:13:06.0654] <freddy>
`beforeHTML` and `appendHTML` would sanitize such that we would need an ´...Unsafe` friend for all of these, that's still correct right?

[04:13:12.0240] <freddy>
* `beforeHTML` and `appendHTML` would sanitize such that we would need an `...Unsafe` friend for all of these, that's still correct right?

[04:15:31.0503] <Noam Rosenthal>
We would need an unsafe friend for all of them.
- sanitizer is not a thing yet
- you don't always want to sanitize. you might trust the source and want to run scripts etc. "Unsafe" doesn't mean "bad", it means "only run this from a trusted source"

[04:15:56.0129] <freddy>
Nvm. I should just read on GitHub.

[04:16:36.0173] <freddy>
Yeah, I agree. Unsafe doesn't mean bad. It's the sharp knife.

[04:20:33.0705] <Noam Rosenthal>
I have a feeling webdevs would push back on consistency winning in this one... also `setHTML` is corresponding to `replaceChildren` so we're not 100% consistent to begin with. Either way, bikeshedding is a sign that we've made some progress :)

[04:22:40.0522] <freddy>
looking forward to the first time I see a website using `setHTML()` irl

[04:35:25.0243] <Noam Rosenthal>
Our devrel agrees with Anne though, so it might be just me. Updated the OP with names following the discussion

[04:47:03.0218] <keithamus>
https://github.com/speced/bikeshed/pull/3181 had a go at trying to integrate Rust. 

[04:47:14.0666] <keithamus>
Fair warning: I have no idea what I am doing

[04:54:03.0979] <keithamus>
Now that i look at this more closely I can confirm I have no idea what I'm doing because I forgot to import pred_wrapper so this whole thing is a no-op 😂

[12:40:58.0529] <Maxim Vaarwel>
Does anyone have any idea why the `keydown` event in the [uievents specification](https://w3c.github.io/uievents/) has [the default action field set to "activation behavior"](https://w3c.github.io/uievents/#event-type-keydown)? I tried calling new KeyboardEvent("keydown") on the checkbox element via dispatchEvent. But it has no effect, even with `code="Space"`. Unlike new KeyboardEvent("keydown"), new PointerEvent("pointerclick") calls the activation behavior (it changes state of the checkbox element). What's going on?

[12:41:54.0367] <Maxim Vaarwel>
* Does anyone have any idea why the `keydown` event in the [uievents specification](https://w3c.github.io/uievents/) has [the default action field set to "activation behavior"](https://w3c.github.io/uievents/#event-type-keydown)? I tried calling `new KeyboardEvent("keydown")` on the checkbox element via `dispatchEvent`. But it has no effect, even with `code="Space"`. Unlike `new KeyboardEvent("keydown")`, `new PointerEvent("pointerclick")` calls the activation behavior (it changes state of the checkbox element). What's going on?

[12:43:03.0652] <Maxim Vaarwel>
* Does anyone have any idea why the `keydown` event in the [uievents specification](https://w3c.github.io/uievents/) has [the default action field set to "activation behavior"](https://w3c.github.io/uievents/#event-type-keydown)? I tried calling `new KeyboardEvent("keydown")` on the checkbox element via `dispatchEvent`. But it has no effect, even with `code="Space"`. Unlike `new KeyboardEvent("keydown")`, `new PointerEvent("click")` calls the activation behavior (it changes state of the checkbox element). What's going on?

[13:29:17.0906] <smaug>
click is special, when even untrusted events trigger default action 

[13:42:08.0001] <Maxim Vaarwel>
Of course I understand that; the specification clearly states it. As for `keydown`, that seems like a mistake.


2025-10-03
[18:38:29.0704] <sideshowbarker>
In technical writing about audio stuff, is _“ducking”_ a term that’s commonly used? https://github.com/mdn/content/pull/41377/files
> _This example activates a commentary track on a video by **ducking** the audio level of the main audio track to 50%, then enabling the commentary track._

[18:39:29.0004] <jmdyck>
https://en.wikipedia.org/wiki/Ducking

[18:39:54.0863] <sideshowbarker>
aha — thanks!

[02:03:13.0321] <zcorpan>
https://w3c.social/@w3c/115299385112878605 ...

If I were to decide, I'd revert this in an instant.

[04:24:32.0375] <zcorpan>
annevk: do you want to re-rubberstamp https://github.com/whatwg/html/pull/11640 ? (I'd like to rebase and merge, not squash)

[04:25:47.0089] <zcorpan>
The script should work for bikeshed specs with markdown, too. LMK if there are still bugs


2025-10-04
[02:53:12.0485] <annevk>
Worth a read for everyone actively involved in standards: https://alice.boxhall.au/articles/a-threat-model-for-accessibility-on-the-web/

[02:54:17.0791] <annevk>
zcorpan: I think the new target should be getting r+ from jmdyck 


2025-10-05
[02:13:16.0871] <Tyler Hearp>
Hi

[02:13:20.0586] <Tyler Hearp>
where the fuck am i

[02:13:45.0237] <Tyler Hearp>
is this the gubment

[02:21:06.0339] <Tyler Hearp>
Has anyone seen my mom? 


2025-10-07
[02:25:45.0317] <evilpie>
Can someone help me understand how https://infra.spec.whatwg.org/#list-sort-in-ascending-order works. Does it return the sorted list or not?

[02:26:28.0587] <evilpie>
It creates a new list `sorted`, but it doesn't seem like it's being returned?

[02:30:37.0642] <Noam Rosenthal>
It constructs a new list... usually constructors don't "return" the created object. A lot of infra algos are like that (e.g. https://infra.spec.whatwg.org/#list-clone)

[02:33:50.0478] <evilpie>
So it's kinda like in place sort? https://html.spec.whatwg.org/#collect-tags-from-speculative-load-candidates uses in that fashion.

[02:34:17.0671] <Noam Rosenthal>
no, to be clear the result of the algo a new list. But the algo does not use "return"

[02:34:19.0575] <evilpie>
* So it's kinda like in place sort? https://html.spec.whatwg.org/#collect-tags-from-speculative-load-candidates uses it in that fashion.

[02:35:14.0304] <Noam Rosenthal>
it's like `new List(old_list.ascending_sorted_items)`

[02:35:27.0692] <Noam Rosenthal>
There is no "return" here, but the result is equivalent to returning something

[02:39:45.0959] <evilpie>
So would a correct use look like "Set tags to sort in acending order tags" or does "Sort in acending order tags" also implicitly mean that?

[02:40:07.0421] <Noam Rosenthal>
If it points to that algorithm, it specifically creates a new list

[02:40:08.0809] <evilpie>
(It's pretty obvious what the result should be of course, just nitpicking here)

[02:41:52.0511] <Noam Rosenthal>
yea it's a bit awkward... I read https://html.spec.whatwg.org/#collect-tags-from-speculative-load-candidates as 

`tags = tags.toSorted(predicate)`

[02:43:13.0781] <Noam Rosenthal>
e.g. in other uses like https://fetch.spec.whatwg.org/#convert-header-names-to-a-sorted-lowercase-set it's more explicit

[02:46:20.0839] <Noam Rosenthal>
The use in https://html.spec.whatwg.org/multipage/nav-history-apis.html#windowproxy-getownproperty also makes it look like a sort-in-place. But in both those usages (this and speculative-load) there should not be an observable difference between sorting in place and creating a new list

[02:54:37.0201] <evilpie>
Yeah. But it confused me, because I couldn't understand which way it actually works.

[03:04:38.0882] <zcorpan>
Sam Sneddon [:gsnedders]: ping https://github.com/web-platform-tests/rfcs/pull/226

[04:59:26.0065] <annevk>
evilpie: I think you should file an issue. It should return the newly created list I think. I don't think it's a constructor (IDL has specific logic for "constructor steps", but those don't apply to everyday algorithms, just "constructor steps").

[06:41:14.0778] <cwilso>
Hey gang - I'm not seeing any topics added to this Thursday's meeting yet; if it does happen, I will need someone else to chair as I'll be on a plane at that time.  Any takers?

[06:55:11.0319] <Noam Rosenthal>
There are topics with Agenda+ that we didn't get to last time

[06:56:12.0382] <cwilso>
ah, right you are.  I hadn't added the new block to the agenda doc yet

[06:56:43.0745] <Noam Rosenthal>
Also, I can chair again

[06:57:06.0447] <cwilso>
thanks!

[06:57:55.0563] <Noam Rosenthal>
cwilso: do you mind doing the rest of the preliminary work, and I'll chair the actual meeting?

[07:07:20.0002] <cwilso>
Not at all, I'll update the agenda doc

[07:08:00.0424] <cwilso>
Oh, I see you have already.  :P

[07:13:36.0064] <Noam Rosenthal>
(I just did the carryovers, not sure what else is needed like deal with the WHATWG github issue for the meeting etc)

[13:26:41.0104] <hacknorris>
where to put html ideas?

[13:26:45.0234] <hacknorris>
just asking 🙂


2025-10-08
[00:32:50.0976] <annevk>
hacknorris: see https://whatwg.org/faq

[01:47:40.0419] <annevk>
zcorpan: your PR merge conflicts again

[01:48:47.0963] <zcorpan>
annevk: yeah, I'll rebase after review

[01:49:21.0157] <zcorpan>
The first two commits don't conflict

[06:48:20.0777] <julienw>
hello folks, I hope you're all good.
I'm a Web developer, and I'm working with custom elements these days.
I've been using them with forms, and have been successful using formAssociated and ElementInternals to make the inputs in a shadowroot properly expose their values to the wrapping form.
But I couldn't find an easy way to make a custom element behave as a submit button for the form.
The goal is to get all the default form behaviors, especially related to the implicit submission when pressing "enter" when the focus is in an input, but also possibly other behaviors that I don't know (I'm thinking of accessibility-related things, or the new dialog and popover-related features).

I tried setting the `form` property on the button itself, but it's read only.
I tried setting setFormValue on the element's internals, but that didn't work.

Is there something I've missed in the spec? Or should I file an issue to explain this more (with an example maybe)?

[07:20:26.0276] <Kaiido>
I suppose that'd be https://github.com/WICG/webcomponents/issues/814

[09:11:31.0266] <julienw>
ah thanks for the link!
I'll contribute another idea there then.
(I didn't hear about the acronym FACE before, that's cute)


2025-10-09
[08:47:40.0601] <annevk>
Yoav Weiss nicolo-ribaudo generally with JS module imports the URL is an observable, right? It's a thing you de-duplicate with. That seems a bit annoying with the `data:` URL approach for CSS module scripts. Although maybe the de-duplication is not strictly observable? Hmm.

[09:06:52.0402] <Yoav Weiss>
tbh, I haven't followed the CSS module work, so no opinions atm..

[10:03:19.0951] <annevk>
Noam Rosenthal: I'm hoping you'll post the minutes

[10:20:14.0564] <Noam Rosenthal>
[Yes, wil](https://github.com/whatwg/html/issues/11747#issuecomment-3386836764)

[10:20:30.0797] <Noam Rosenthal>
* https://github.com/whatwg/html/issues/11747#issuecomment-3386836764

[10:54:43.0826] <nicolo-ribaudo>
> <@annevk:matrix.org> Yoav Weiss nicolo-ribaudo generally with JS module imports the URL is an observable, right? It's a thing you de-duplicate with. That seems a bit annoying with the `data:` URL approach for CSS module scripts. Although maybe the de-duplication is not strictly observable? Hmm.

Not sure exactly I understand where this is coming from, but deduplication is observable by checking the identity of the style sheet object

[10:55:15.0184] <nicolo-ribaudo>
But data URLs behave in the same way for JS modules, not just css

[12:14:10.0532] <zaggy1024>
Hi, I'm working on (re)implementing HTMLMediaElement for the Ladybird browser, and I've noticed a few issues I'd like to sanity check before writing issues/PRs for the spec. I hope I'm in the right place!

The main thing I wanted to bring up is that the `ended` attribute and the condition under which the internal play steps seek back to the earliest position don't seem to agree with existing implementations. Specifically, when the `looped` attribute is unset, playback reaches the end, then the `looped` attribute is subsequently set, the spec seems to dictate that the `ended` attribute is then `false`, and the play steps do not seek to the earliest position. Chrome and Firefox both keep the `ended` attribute set to `true`, and seek to the start. 

I wonder if the `ended` attribute should be a variable set to `true` when reaching the end of playback, and then set to `false` when beginning a seek, and then the play steps should rely on the value of that attribute to dictate whether to seek to the earliest position.

Alternatively perhaps, the `has ended playback` definition could specify that the `looped` attribute must only be unset when the playback first reaches the end of the resource, which I want to say would have the same effect.

Let me know if there's another spec interpretation for any of this, not sure if I'm missing anything.


2025-10-10
[17:43:25.0083] <jmdyck>
The second-most-recent commit in HTML main, added a reference to undefined _insertedOption_ in https://html.spec.whatwg.org/#concept-option-disabled. I guess it's supposed to be just _option_?

[17:43:39.0964] <jmdyck>
* The second-most-recent commit in HTML main added a reference to undefined _insertedOption_ in https://html.spec.whatwg.org/#concept-option-disabled. I guess it's supposed to be just _option_?

[17:45:24.0448] <jmdyck>
^ @jarhar ?

[23:38:02.0984] <annevk>
nicolo-ribaudo: thank you, that makes a lot of sense! There's a proposal for declarative CSS modules and the proposal is currently to represent `style type=module` element as `data:` URLs in the module map. But that requiring that representation (due to it being observable) seems highly inefficient for implementations.

[23:42:06.0477] <annevk>
jarhar see jmdyck's comment above ^^ 

[23:46:37.0422] <annevk>
zaggy1024: I would file an issue. The processing model for media elements leaves a lot to be desired in general.

[23:58:42.0186] <nicolo-ribaudo>
> <@annevk:matrix.org> nicolo-ribaudo: thank you, that makes a lot of sense! There's a proposal for declarative CSS modules and the proposal is currently to represent `style type=module` element as `data:` URLs in the module map. But that requiring that representation (due to it being observable) seems highly inefficient for implementations.

Maybe it could use a UUID like for blob URLs

[00:00:28.0172] <annevk>
Yeah, it would have to be something like that. Or we allow for the module map to contain element references or some such. Either way it will be more involved to define, but should be doable.

[03:53:53.0809] <annevk>
I wonder if people will use HTML patching to workaround limitations imposed by insertion modes. E.g., it would allow giving a `tr` element a custom element child. It'd be very cumbersome to write, possibly more cumbersome than writing the equivalent script, but it would be possible.

[04:01:12.0475] <Noam Rosenthal>
We could probably disable that option if it's important. When we open the template we know where the content is going to, and there is a finite number of insertion modes

[04:04:15.0139] <annevk>
I think making the `template` element even more complex parsing-wise would be something we will regret. (Although maybe we have to do it at some point for SVG.)

[04:06:47.0311] <Noam Rosenthal>
Maybe... though it's only for `template` with `contentfor`. At least in the blink prototype so far this is pretty well contained within "patching"

[04:07:28.0437] <Noam Rosenthal>
Specifically, we could make it so that https://html.spec.whatwg.org/multipage/parsing.html#clear-the-stack-back-to-a-table-context fails the parser if it reaches a `<template contentfor>`. We could apply this kind of behavior in all of those special cases

[04:08:47.0400] <Noam Rosenthal>
* Specifically, we could make it so that https://html.spec.whatwg.org/multipage/parsing.html#clear-the-stack-back-to-a-table-context fails the patch if it reaches a `<template contentfor>` when popping. We could apply this kind of behavior in all of those special cases and in general stop patching in certain scenarios

[04:10:40.0053] <Noam Rosenthal>
One of the main advantages for using `<template>` is that the default behavior in browsers that don't support patching is a noop and that it's already set up to be a container for any other content (pretty much). Also it's in the spirit of the element, something that holds HTML content that's supposed to be used elsewhere.

[04:13:54.0948] <annevk>
It does raise a question as to what the API ends up doing for these cases.

[04:15:55.0811] <Noam Rosenthal>
I think that if you see this:

<table>
<tr contentname="some-tr">
</table>

<template contentfor="some-tr">
  <td>new-content</td>
  <tr><td>Another row</td></tr>
</template>

you should end up with:

<tr contentname="some-tr"><td>new-content</td></tr>
<template contentfor="some-tr">  
  <tr><td>Another row</td></tr>
</template>



[04:16:41.0286] <Noam Rosenthal>
(the moment something fishy comes up parser-wise, patching terminates and the rest proceeds as a normal template)

[04:17:17.0857] <Noam Rosenthal>
* I think that if you see this:

\<table>
\<tr contentname="some-tr">
\</table>

\<template contentfor="some-tr">
  \<td>new-content\</td>
  \<tr>\<td>Another row\</td>\</tr>
\</template>

you should end up with:

\<table><tr contentname="some-tr">\<td>new-content\</td>\</tr></table>
\<template contentfor="some-tr">  
  \<tr>\<td>Another row\</td>\</tr>
\</template>



[04:17:30.0394] <Noam Rosenthal>
* I think that if you see this:

<table>
  <tr contentname="some-tr">
</table>

\<template contentfor="some-tr">
\<td>new-content\</td>
\<tr>\<td>Another row\</td>\</tr>
\</template>

you should end up with:

\<table>\<tr contentname="some-tr">\<td>new-content\</td>\</tr>\</table>
\<template contentfor="some-tr">\<br />
\<tr>\<td>Another row\</td>\</tr>
\</template>

[04:18:16.0203] <Noam Rosenthal>
* I think that if you see this:

<table>
  <tr contentname="some-tr">
</table>

<template contentfor="some-tr">
<td>new-content</td>
<tr><td>Another row</td></tr>
</template>

you should end up with:

<table><tr contentname="some-tr"><td>new-content</td></tr></table>
<template contentfor="some-tr">
<tr><td>Another row</td>\/tr>
</template>

[04:18:28.0350] <Noam Rosenthal>
(sorry element is botching my markup)

[04:18:49.0079] <annevk>
That would be very different from how `template` works today. Today the `tr` start tag would be ignored.

[04:19:20.0486] <Noam Rosenthal>
That's also an option, perhaps better

[04:21:20.0511] <Luke Warlow (ooo till 20th)>
Sorry slightly tangential but should the attribute be contentid instead of contentname, other for attributes work with IDs so it might feel wrong that is for a name?

[04:21:26.0613] <Noam Rosenthal>
but yea, `<template contentfor>` parses differently than template because it uses the target as a context node of sorts. 

[04:22:39.0151] <Noam Rosenthal>
It's more similar to form elements etc where it's not necessarily unique. But we can bikeshed it

[04:22:41.0761] <Luke Warlow (ooo till 20th)>
> <@annevk:matrix.org> I think making the `template` element even more complex parsing-wise would be something we will regret. (Although maybe we have to do it at some point for SVG.)

Mathml would also need solving, the cross namespace stuff might get particularly awkward?

[04:26:22.0015] <Noam Rosenthal>
annevk: a solution we thought about at some point is to force having a tag name identical to the target element at the beginning of the template to set the context. This way there is even less of an exotic parsing mode. But it's also a bit less ergonomic

[04:27:44.0958] <Noam Rosenthal>
... this would also fix the "patching into script" issue

[04:29:17.0183] <Noam Rosenthal>
e.g.:

<script contentname=myscript></script>

<template contentfor=myscript>
  <script>
     console.log("This is the new content of myscript");
  </script>
</template>



[04:56:13.0716] <Noam Rosenthal>
Or even have it so that the template only has "contentmethod" and everything else is in the direct children:

<table><tr contentname="my-tr"></table>
<template contentmethod="replace-children">
  <tr contentname=my-tr>
     <td>
     <!-- the following would not go into "my-tr" as it would be parsed as being a direct child of the patch without contentname -->
     <tr>
  </script>
</template>

[04:56:37.0783] <Noam Rosenthal>
* Or even have it so that the template only has "contentmethod" and everything else is in the direct children:

<table><tr contentname="my-tr"></table>
<template contentmethod="replace-children">
  <tr contentname=my-tr>
     <td>
     <!-- the following would not go into "my-tr" as it would be parsed as being a direct child of the patch without contentname -->
     <tr>
</template>

[05:03:34.0021] <Noam Rosenthal>
(Come to think of it, this is perhaps a better design... much less exotic changes to `template`, only the "contentmethod" attribute that diverts the insertion point)

[05:44:33.0400] <annevk>
Noam Rosenthal: yeah, that might be a better shape. Need to think about it a bit.

[05:45:01.0596] <Noam Rosenthal>
will do the same, thanks!

[05:47:05.0181] <annevk>
Noam Rosenthal: what do you mean with `contentname` not being unique btw? What happens if there's a duplicate?

[05:49:21.0122] <Noam Rosenthal>
It's not necessarily unique in the document. Since patching is scoped to the parent of the template, the first element in tree order within that scope would be selected

[05:50:09.0057] <annevk>
Gotcha. Though is it tightly scoped or only for the initial search?

[05:50:43.0947] <Noam Rosenthal>
It is searched once when the patch is discovered 

[05:51:06.0994] <Noam Rosenthal>
(which also makes it different from all the existing IDREFs)

[05:51:46.0875] <annevk>
`<html><head contentname=blah><body><template><head contentname=blah>` would fail then?

[05:56:28.0835] <Noam Rosenthal>
patches inside the body are special-cased to be document-scoped

[05:56:42.0448] <Noam Rosenthal>
* patches that are direct children of the body are special-cased to be document-scoped

[06:07:41.0863] <Noam Rosenthal>
We can also avoid both `contentname` and `contentid` and call it `contentoutlet`. 

[06:52:04.0513] <annevk>
`contentwendys` (sir this is the HTML standard)

[07:24:15.0779] <jarhar>
thanks! https://github.com/whatwg/html/pull/11772

[07:54:19.0425] <Luke Warlow (ooo till 20th)>
Is this something we can have tooling to check for? Feels doable now we have the algorithm scopes.


2025-10-13
[03:52:42.0488] <zcorpan>
Noam Rosenthal: why does https://html.spec.whatwg.org/#prepare-an-image-for-presentation return early in several steps, without getting to one of step 14 or 15? Also step 16 is only run if no other step returns.

[03:53:47.0149] <Noam Rosenthal>
will take a look. Haven't touched that since 2020.

[03:57:21.0140] <Noam Rosenthal>
Regarding step 16 - it's perhaps ambiguous from reading but this step is optional... it's not like the image is not going to be presented without it. Step 16 is like saying "adjust the image presentation, now that the preferred density-correction dimensions are set"

[03:59:24.0033] <Noam Rosenthal>
Steps 8, 9, 10: it was a mitigation to having the density set accidentally due to e.g. EXIF information being copied around.
Requiring the dimensions to have positive numbers and only use inches narrows the spectrum for accidental density setting.
We can reason about making it more lax, it was a bit of a judgement call at the time

[04:01:06.0950] <zcorpan>
Noam Rosenthal: so then PixelXDimension and PixelYDimension are also ignored for the early return cases

[04:01:20.0621] <Noam Rosenthal>
yea they are

[04:01:34.0369] <Noam Rosenthal>
it's like "this is accidental EXIF information"

[04:03:17.0354] <zcorpan>
I see, thanks. It's still not clear to me that step 16 is not important, as it was the text in place of this algorithm before. It can be read as "don't render cross-origin images" or "don't render images with bogus EXIF"

[04:04:27.0589] <zcorpan>
I'll file an issue

[04:05:39.0502] <Noam Rosenthal>
Agreed, it can&should be made clearer. If you file an issue I'm happy to file a PR

[04:08:23.0812] <zcorpan>
Noam Rosenthal: https://github.com/whatwg/html/issues/11777

[05:26:41.0187] <jjaschke>
Noam Rosenthal: Reviewing [#11762](https://github.com/whatwg/html/pull/11762) right now, thanks for working on this! I like the idea of passing the upcoming tracker into the event firing mechanism, but now I wonder if we need to keep the upcoming trackers in the global state at all, or if we can get away with just passing them around. That way we're less prone to accidentally breaking global state. 
The only reason I see currently (I may be wrong though) why we need the `upcoming non-traverse API method tracker` would be to signal that navigation has aborted ([this step in `navigate()`](https://html.spec.whatwg.org/#dom-navigation-navigate:~:text=If%20this%27s%20upcoming%20non%2Dtraverse%20API%20method%20tracker%20is%20apiMethodTracker%2C%20then)), but I bet we can transport this information in another fashion (which may even be easier to understand). 
WDYT?

[05:32:51.0111] <Noam Rosenthal>
Yea it would be great not to have those tidbits of global state... let me scan it a few times :)

[05:33:58.0758] <jjaschke>
Oh, also just noticed, the promote upcoming to ongoing algorithm that you inlined is also used in [reload()](https://html.spec.whatwg.org/#navigation-api-initiating-navigations:reload-2:~:text=Let%20apiMethodTracker%20be%20the%20result%20of%20maybe%20setting%20the%20upcoming%20non%2Dtraverse%20API%20method%20tracker%20for%20this%20given%20info%20and%20serializedState%2E,-Reload).

[05:39:29.0910] <Noam Rosenthal>
THat's not that algo, it's "maybe setting", not "promote". There was only one use of "promote"

[05:40:06.0788] <Noam Rosenthal>
I think `navigate` can have a return value of whether the navigation was aborted prior to the promotion step

[05:45:05.0580] <jjaschke>
Ugh, of course. 
But, shouldn't we do the same we do for navigate (extract the upcoming tracker, then run the abort loop, then pass it back in) for reload? 

[05:47:15.0524] <Noam Rosenthal>
No need. Because we do that at the beginning of https://html.spec.whatwg.org/#fire-a-push/replace/reload-navigate-event before we abort the previous one. It's only needed in the regular `navigate()` because it's also aborted earlier

[05:47:50.0309] <Noam Rosenthal>
Oh sorry we don't. sec

[05:50:58.0185] <Noam Rosenthal>
* Oh sorry we don't. will update

[05:53:16.0753] <jjaschke>
Noam Rosenthal : I see two ways we could follow. One would be to remove `upcoming non-traverse API method tracker` altogether and just pass it around (if that works, I'd prefer that). Or we keep it, but then I think it should be enough to move it out of the global state [here](https://whatpr.org/html/11762/305f5a1...3f2f0bc/nav-history-apis.html#:~:text=If%20upcomingMethodTracker%20is%20null%2C%20then%20set%20upcomingMethodTracker%20to%20the%20upcoming%20non%2Dtraverse%20API%20method%20tracker%20%2E), then I don't think we need the change in the navigate algorithm (and pass the upcoming non-traverse tracker into the event firing algorithm)

[05:55:28.0887] <Noam Rosenthal>
That's not enough because `navigateerror` can also be called from https://html.spec.whatwg.org/#beginning-navigation:set-the-ongoing-navigation

[05:56:52.0686] <jjaschke>
Thanks. Then I'd hope we can go for variant one and remove it from the global state whatsoever.

[06:02:31.0192] <Noam Rosenthal>
https://github.com/whatwg/html/pull/11779

[06:44:06.0352] <Noam Rosenthal>
OK I think I got it (in the new PR). I moved that state to be a boolean "has been promoted" on the method tracker. then we don't have to mess so much with `navigate`

[06:46:37.0990] <Noam Rosenthal>
this "upcoming method tracker" bit is only for `navigate()` and `reload()` calls to ensure that those calls return value is in sync with `navigation.transition` etc. so I think this new design is cleaner... it's either created early in those calls and passed as an argument, or later on for use of `navigation.transition` and the rest.

[06:57:48.0160] <jjaschke>
(threading this for less noise)
Noam Rosenthal : Why do we still need the upcoming non-traverse API method tracker as an object on the navigation object?

[06:58:38.0321] <Noam Rosenthal>
sorry, PR is not finished I realized

[07:45:09.0925] <Noam Rosenthal>
OK I think it's ready

[07:45:28.0338] <jjaschke>
looking

[07:49:00.0287] <Noam Rosenthal>
I think there is a missing thing there (and probably in existing implementation) - throwing an error when `reload()` fails. e.g. if your reload in an iframe aborts an existing navigation and the `navigateerror` event made the parent remove the iframe. this would currently return a defunct method tracker

[07:58:18.0069] <Noam Rosenthal>
in general I think this PR doesn't handle well the case that the document becomes inactive in the `navigateerror` even during a reload/navigate, because of the early "upcoming" check. 

[08:03:43.0976] <Noam Rosenthal>
(taking a look, I think it was OK before *because* we were making those checks a bit late)

[08:04:28.0992] <jjaschke>
Shouldn't we just hit the document-is-active check in [commit](https://whatpr.org/html/11762/305f5a1...83c1c84/nav-history-apis.html#inner-navigate-event-firing-algorithm:~:text=If%20event%20%27s%20relevant%20global%20object%20%27s%20associated%20Document%20is%20not%20fully%20active%20%2C%20then%20return%2E), which would then fail, and then we bail?

[08:06:03.0702] <Noam Rosenthal>
yea, but `navigate()` and `reload()` think everything is OK, and return a {committed, finished} promise dictionary that's never resolved

[08:11:49.0362] <Noam Rosenthal>
(nobody rejects those promises because they're only "upcoming")

[08:25:30.0057] <jjaschke>
Where would they have been rejected before? Wouldn't the old implementation also go into the commit step and return early?

[08:27:37.0584] <Noam Rosenthal>
yea but they were created after the abort phase (which is the original issue)

[08:28:16.0859] <Noam Rosenthal>
so the "upcoming" and the "ongoing" trackers would be the same, and the "early error" result (rejected promises) would be returned

[08:29:39.0778] <jjaschke>
What if we did another document-is-active check at after the abort loop? 

[08:29:55.0703] <Noam Rosenthal>
Uploaded a new revision

[08:30:21.0875] <Noam Rosenthal>
there is another active check at "fire the inner navigate event", but it asserts if "upcoming method tracker" was passed in

[08:31:11.0123] <Noam Rosenthal>
I removed this assert. Instead, when we are about to return from reload/navigate, we check that the tracker was indeed promoted. Otherwise we return the rejected thingy

[08:35:44.0165] <jjaschke>
But wouldn't we set the promoted flag even if the document is not active anymore?

[08:35:57.0066] <Noam Rosenthal>
nope

[08:36:45.0082] <Noam Rosenthal>
https://html.spec.whatwg.org/multipage/nav-history-apis.html#navigate-event-firing%3Ahas-entries-and-events-disabled

[08:37:14.0920] <Noam Rosenthal>
inactive documents will get "has entries and events disabled". So "inner navigate" would assert (or return early if I remove the assert)

[08:37:24.0448] <jjaschke>
Ohh, forgot about has entries and events disabled

[08:38:23.0891] <jjaschke>
We really need a spec DSL so that we can run step by step and see state changes and such

[08:39:57.0274] <Noam Rosenthal>
hehe yea, my brain gets into labyrinth mode when I have to do this stuff. 

[08:40:25.0834] <jjaschke>
Should firing the event still continue true in that case? 

[08:42:01.0386] <Noam Rosenthal>
no

[08:42:02.0152] <jjaschke>
* Should firing the event still return true in that case? 

[08:42:34.0740] <Noam Rosenthal>
it should return rejected promises

[08:43:10.0547] <jjaschke>
I mean [this](https://whatpr.org/html/11762/305f5a1...3b1e3e2/nav-history-apis.html#:~:text=empty%20%2E-,Return%20true)

[08:44:01.0110] <jjaschke>
Which would mean we don't early return [here](https://whatpr.org/html/11762/305f5a1...3b1e3e2/browsing-the-web.html#navigate:~:text=continue,-be)

[08:45:04.0166] <jjaschke>
(I don't know off the top of my head what happens after that)

[08:46:22.0427] <Noam Rosenthal>
yea it should be true. otherwise about:blank and opaque origins couldn't navigate at all

[08:47:50.0004] <Noam Rosenthal>
but perhaps it should return false specifically when aborting made the document inactive, or there should be a check for that at the call site

[08:48:40.0295] <Noam Rosenthal>
I guess we can return `false` if `apiMethodTracker` is not null

[08:49:47.0285] <jjaschke>
I think that makes sense

[08:50:44.0975] <jjaschke>
Let me try to implement these changes real quick to see if it breaks anything :)

[09:29:41.0998] <mfreed>
Hi all, just a friendly reminder to post any discussion topics for this Thursday's joint CSSWG/WHATWG/OpenUI task force meeting to the meeting agenda issue: https://github.com/whatwg/html/issues/11740

[10:08:25.0622] <jjaschke>
Noam Rosenthal: Looking quite good, I only get a few fails, and I'm not sure if that's just a bug in my changes. [This test](https://searchfox.org/firefox-main/source/testing/web-platform/tests/navigation-api/navigation-methods/return-value/navigate-initial-about-blank.html#17) fails because the promise gets rejected instead of just never settling. 

I think that is because we don't fire the [push/replace event](https://whatpr.org/html/11762/305f5a1...4c4aef6/browsing-the-web.html#navigate:~:text=navigable%20%27s%20active%20document%20%27s%20is%20initial%20about%3Ablank%20is%20false%3B%20and). Does that make sense?

[10:09:59.0583] <jjaschke>
(EOD for me)

[10:41:30.0858] <Noam Rosenthal>
the assert is wrong. This is actually a bug that this PR fixes

[10:41:58.0589] <Noam Rosenthal>
"has entries and events disabled" is false for the initial about:blank, so `navigate` and `reload` should return rejected promises

[10:42:30.0922] <Noam Rosenthal>
I think I'm going to make one change which is to move the "return false" thing to right after the abort loop

[11:48:55.0540] <Noam Rosenthal>
sorry it's a lie. The test is right; When entries/events are disabled the promises should be muted (never-settled)

[12:21:22.0188] <Noam Rosenthal>
Revised.
- setting the method to tracker to null before firing event if entries are disabled (but still returning it from reload/navigate, as it now returns unsettled promises)
- returning false from firing the event *right after* aborting; it's a bit cleaner

[12:21:31.0486] <Noam Rosenthal>
This should fix the broken test


2025-10-14
[00:02:46.0257] <Noam Rosenthal>
... actually, I think we can get rid of "ongoing API method tracker" as well since it's all now in parameters

[00:40:00.0319] <Noam Rosenthal>
(but will look at that as a followup)

[04:21:43.0028] <jjaschke>
Noam Rosenthal: I think (unless I missed something) that we broke traversal navigations: The traverse navigate event (which would set the promoted flag) runs [async](https://html.spec.whatwg.org/#updating-the-traversable:fire-a-traverse-navigate-event), therefore _after_ we [created the result](https://whatpr.org/html/11762/305f5a1...d89ce86/nav-history-apis.html#:~:text=Return%20a%20navigation%20API%20method%20tracker%2Dderived%20result%20for%20apiMethodTracker%20%2E,-An), which checks aborts if the promoted flag is not set.

[07:26:38.0629] <Noam Rosenthal>
oh ok those checks should only occur for reload/navigate

[08:32:29.0656] <jjaschke>
Noam Rosenthal: I think with that change it should be fine from my end.

[10:24:44.0027] <annevk>
mfreed jarhar: there's like a half-dozen select-related issues I'd love your input on. Not sure they need meeting time, but I could nominate them if that would help.

[10:24:56.0652] <annevk>
* mfreed jarhar: there's like a half-dozen select-related issues I'd love your input on. Not sure they need meeting time, but I could nominate them if that would help. You should have GitHub notifications for all of them.

[10:32:57.0772] <jmdyck>
It's doable, but I don't know Rust.

[10:40:01.0113] <jarhar>
thanks, ill try getting to those today


2025-10-15
[21:39:14.0535] <annevk>
Kinda wanna just preemptively ban anyone with a hyphen in their GitHub handle, geez

[23:35:53.0313] <nicolo-ribaudo>
Nooo

[00:07:19.0100] <sideshowbarker>
annevk: About FedCM, has WebKit expressed anywhere at all any position on whether or not the project is interested in implementing?

[00:08:20.0168] <annevk>
sideshowbarker: I don't think so, https://github.com/WebKit/standards-positions/issues/309 is still open

[00:09:18.0829] <annevk>
Well, maybe I should say I don't know. As "any position" is quite broad and who knows all that has been said. :-)

[00:13:45.0759] <sideshowbarker>
OK yeah thanks. I’ve just been trying to get a sense of how likely it is we’ll see any other implementations of it any time soon. (Context is https://github.com/w3c/charter-drafts/issues/690 and whether it’s actually useful and appropriate to specifically include the FedCM WG in a Coordination section in a W3C charter. [Though I think the right solution to the problem would be to just completely stop including a Coordination in any charters to begin with…]

[03:53:54.0843] <Ms2ger>
As long as you don't ban numbers in names :)

[04:13:58.0197] <Noam Rosenthal>
Done I think. Inverted "promoted" to "pending". It's only "pending" for navigate/reload, before promotion, and when entries/events are enabled


2025-10-16
[00:00:37.0559] <Noam Rosenthal>
jjaschke: could you take a last look at the PR please before we merge? I think we're almost there!

[00:02:06.0728] <jjaschke>
Noam Rosenthal: On it :)

[00:12:25.0227] <jjaschke>
Noam Rosenthal: r+

[08:18:08.0567] <cwilso>
my apologies, all, for not being on top of the WHATNOT meeting planning issues.  We do have a meeting in 8 hours or so.  issue here: https://github.com/whatwg/html/issues/11801


2025-10-17
[22:34:45.0790] <Ondřej Žára>
I am having some difficulties applying CSS `mask-size` with SVG `<mask>` elements: https://codepen.io/ondrejzara/pen/pvgdZLB (size not being applied, both Firefox and Chrome). Any ideas what I am doing wrong? Or perhaps some better CSS-related channels where I can ask for help?

[23:13:53.0586] <Kaiido>
I suppose stackoverflow would be a proper venue for that kind of question.
https://drafts.fxtf.org/css-masking/#masking states that `mask-position` and `mask-size` do apply for the case where `mask-image` doesn't point at a `<mask>`,  though that doesn't seem very obvious...
But to make a `<mask>` fit its masked element, you'd generally set its `width` and `height` in percentages, and its `maskContentUnits` to `objectBoundingBox` (also beware `x` and `y` have a default `-10%` value).

[23:38:23.0745] <Ondřej Žára>
Kaiido: thanks for the reply! I am not sure I 100% follow your suggestion. Does this mean that the `<path>` inside of a mask must only use percentage units?

[23:40:14.0972] <Ondřej Žára>
Yeah, apparently -- that is literally what `objectBoundingBox` requires. But that would not work when I have a lot of existing `<path>` elements that were designed for a particular `viewBox` setup (such as 24x24 icons).

[23:40:36.0159] <Ondřej Žára>
Does this mean that my already-defined 24x24 path cannot be used as a scalable `<mask>`?

[00:04:27.0088] <Kaiido>
You could use a `<use>` to reference a `<symbol viewBox>` that would contain your existing content: https://jsfiddle.net/n30e7xro/ but at this rate, it's probably just easier to not use a `<mask>` at all and reference a full svg image.

[00:32:12.0701] <Ondřej Žára>
I see, thanks. My initial goal was to store many masks in one file (to reduce the amount of http requests). But working with individual svg mask files seems to be a lot more flexible.

[00:32:28.0440] <Ondřej Žára>
Apparently, adding css-styleable icons exclusively via css is tricky :)

[01:10:19.0293] <Kaiido>
For this use case there is a hack that I first saw from Lea Verrou I think, which is to use the `:target` selector to show/hide different elements based on the current hash set for the SVG url: https://jsfiddle.net/dn14ghyf/

[01:46:31.0234] <Ondřej Žára>
I see, nice! Is this `:target`-based styling inside `<svg>` universally supported?

[12:50:59.0106] <smaug>
Is referencetarget shipping already in some browser?

[12:59:07.0017] <Alan Stearns>
I’m only aware of https://groups.google.com/a/chromium.org/g/blink-dev/c/C3pELgMqzCY/m/DzCzBHPcAQAJ

[13:26:38.0377] <Luke Warlow (ooo till 20th)>
> <@smaug:mozilla.org> Is referencetarget shipping already in some browser?

It's flagged in webkit and chromium and not implemented in Firefox yet

[13:26:55.0551] <smaug>
right. I'm reviewing the implementation on Gecko side

[13:27:11.0894] <smaug>
and obviously the existing tests are lacking lots of cases

[13:27:33.0349] <smaug>
so I wonder how much it has gotten fuzz testing and such

[13:27:46.0385] <smaug>
in other implementations 


2025-10-20
[07:03:01.0520] <bkardell>
I think that there was an origin trial, but little or no participation in it so it didn't ship. 

[07:03:08.0564] <bkardell>
* I think that there was an origin trial, but little or no participation in it so it didn't ship (yet)


2025-10-21
[10:28:33.0158] <jjaschke>
Noam Rosenthal: I think we broke the spec with PR [#11762](https://github.com/whatwg/html/pull/11762). We're now not setting the ongoing API method tracker anymore (I think you had ideas to remove it anyway). I'm filing an issue about it, so that we either reinstate it, or remove it.

[10:36:10.0426] <jjaschke>
Filed https://github.com/whatwg/html/issues/11816

[11:51:04.0367] <Noam Rosenthal>
Oh got it. We should still be setting it in the same place we were before

[11:51:19.0186] <Noam Rosenthal>
There's a few gotchas that won't allow us to remove it yet

[11:58:44.0691] <Noam Rosenthal>
https://github.com/whatwg/html/pull/11817

[13:09:58.0349] <smaug>
jjaschke: Noam Rosenthal What is https://html.spec.whatwg.org/#fire-a-push/replace/reload-navigate-event:~:text=and-,apiMethodTracker,-%2E about?  Should it be apiMethodTrackerForNavigateOrReload ?

[13:37:48.0921] <Noam Rosenthal>
Yes

[13:38:03.0170] <Noam Rosenthal>
I think the link is correct but the text in it doesn't match


2025-10-22
[02:38:08.0772] <Noam Rosenthal>
Fixed this as part of https://github.com/whatwg/html/pull/11817 

[15:50:27.0148] <cwilso>
Hey gang - in last week's WHATNOT meeting (https://github.com/whatwg/html/issues/11801#top) I suggested cutting the AMER+APAC (4pm Pacific) meeting out of our rotation, and doing 3 AMER+EMEA and one EMEA+APAC in the rotation.  If anyone doesn't think this is a good idea, now would be a good time to discuss.  I'll raise it again at tomorrow's WHATNOT to confirm.


2025-10-23
[12:13:33.0256] <smaug>
annevk: was there some discussion happening elsewhere related to https://github.com/whatwg/html/issues/10673 ? I'm a bit confused about the comments about data: and blob:

[14:25:16.0125] <elizabt>
CyberSecurityExpertsHQ
We provide ethical, authorized solutions to protect your data and restore digital access — with confidentiality and professional expertise you can trust.

💼 Services:
🛡️ Security Audits | 📁 Account Recovery | 💻 Data Protection | 🔍 Digital Forensics

☑ Recovery of lost funds
☑ Facebook Hack
☑ WhatsApp Hack 
☑ Instagram Hack
☑ spying on cheating partners
☑ Windows Hacking
☑Recover lost wallet 
☑Credit score trick 
☑ Recover any Password 
☑ Gmail Hack
☑ SnapChat Hacking 
☑Cellphone Monitoring 
☑ Tik Tok Hack
☑Twitter Hack
☑ Lost Phone Tracking
☑ Lost IaptopTracking
☑ Lost Car Tracking
☑ Cloning WhatsApp
☑ Cryptocurrency Wallet
☑ Hacking
☑ Iphone unlock 
☑ Got banned 
☑ Telegram hacking 
☑ Websites hacking 
☑ Hack University 
☑ IOS and Android hack 
☑ Wifi Hacking 
☑ CCTV hacking
☑ Hack Bot Game 
☑ Free fire hack 
☑ Changing of school grades 
🤳☑Cards 💳hacking
No 🆓 services 🚫
Send a DM 

https://wa.me/message/YBKF3QQUJGK3A1






2025-10-24
[23:14:16.0639] <annevk>
smaug: I think in this channel Nicolò confirmed what I stated in my initial comment about `data:` URLs. I don't think there was any other discussion about it. (Other than me asking a question during the meeting preceding that comment.)


2025-10-27
[09:23:09.0256] <mfreed>
Hi all, just a friendly reminder to post any discussion topics for this Thursday's joint CSSWG/WHATWG/OpenUI task force meeting to the meeting agenda issue: https://github.com/whatwg/html/issues/11824


2025-10-28
[23:21:20.0917] <harry383>
🛡️ Learn Cybersecurity – Top Beginner Courses to protect your self from scammers 
💻 Google Cybersecurity | 🖥️ IBM / hacking Cybersecurity Analyst | 🎓 CompTIA Security+ | 📘 Intro to Cyber Security | 🌐 Cybersecurity for Everyone 
🔗 Start Learning
https://t.me/CyberSecurityExpertsHQ2

[02:04:25.0782] <nicolo-ribaudo>
Maybe there should be a bot that automatically bans whoever posts a telegram link 

[02:39:36.0252] <Luke Warlow>
Do we need to have a rule about when the html spec can rely on a w3c spec? They're wildly unstable compared to what the html spec is supposed to be.

I'd say it should need to be in a CR or ready to ship/already shipping in a browser?

[02:40:59.0069] <annevk>
Luke Warlow: I think we have mainly found the CSS WG to be fairly unreliable. What else?

[02:41:24.0769] <Luke Warlow>
Well I was being general because technically the same applies to them all. But yes really it's them.

[02:43:14.0132] <Luke Warlow>
* Well I was being general because technically the same applies to them all (none are living standards). But yes really it's them.

[02:47:38.0991] <annevk>
Yeah, I don't know. https://github.com/w3c/csswg-drafts/issues/1967 is still a mess as far as I can tell, for instance, eight years old now. TabAtkins thoughts on this?

[03:12:57.0620] <Noam Rosenthal>
Luke Warlow: at least for the parts I was involved in (CSS/WebPerf) we tried to keep the integration hooks themselves relatively stable. It's mostly "hooks" to call into the W3C specs to make things in these specs work (e.g. spin the view-transition algos) rather than having HTML "rely" on them though. 

[03:21:29.0027] <annevk>
I'm not sure, the Rendering section is fairly big and that was most recently impacted by these shenanigans. (Same for the pseudo-class example I gave, of which some would need some integration if they are agreed upon as sketched.)

[03:37:45.0241] <Luke Warlow>
> <@annevk:matrix.org> I'm not sure, the Rendering section is fairly big and that was most recently impacted by these shenanigans. (Same for the pseudo-class example I gave, of which some would need some integration if they are agreed upon as sketched.)

interactivity property integration was somewhat the same too, but didn't end up getting merged

[03:52:34.0393] <Noam Rosenthal>
Any other examples? Being specific helps

[03:55:59.0242] <annevk>
Noam Rosenthal: https://github.com/whatwg/html/pull/11656 is what I was referring to above. `display: contents` has also been a big problem.

[04:21:00.0629] <annevk>
* Noam Rosenthal: https://github.com/whatwg/html/pull/11656 is what I was referring to above. `display: contents` has also been a big problem (though of a different category arguably).

[07:51:18.0561] <evilpie>
Am I looking wrong, or ar there really no WPT for X-Content-Type-Options: nosniff with iframes?

[07:53:30.0489] <annevk>
evilpie: MIME sniffing is badly tested generally :/

[07:54:27.0131] <annevk>
https://github.com/web-platform-tests/wpt/pull/30403 is an unfinished PR in that area

[08:01:30.0083] <evilpie>
Thanks Anne. That is sadly what I had expected.

[08:03:05.0842] <annevk>
It often is, but if you fix a couple the next engineer will be less distraught.

[08:07:25.0771] <evilpie>
Well, I will probably add some, because it really doesn't make sense to write new tests outside of WPT.

[08:11:09.0865] <evilpie>
Is X-Content-Type-Options even specified anywhere for documents? https://fetch.spec.whatwg.org/#should-response-to-request-be-blocked-due-to-nosniff? only considers script/styles.

[08:14:36.0238] <evilpie>
Ah, I guess that is part of the MIME sniffing standard.


2025-10-29
[03:26:21.0452] <zcorpan>
evilpie: https://fetch.spec.whatwg.org/#http-x-content-type-options

[03:31:01.0938] <zcorpan>
evilpie: what do browsers do with nosniff for document loads?

[03:35:03.0670] <evilpie>
https://mimesniff.spec.whatwg.org/#mime-type-sniffing-algorithm

[03:35:31.0547] <evilpie>
> <@zcorpan:mozilla.org> evilpie: what do browsers do with nosniff for document loads?

Not sniff HTML when the mimetype is missing or */* etc

[03:36:03.0051] <evilpie>
* Not sniff HTML when the mimetype is missing or 
`*/*` etc

[03:38:12.0732] <zcorpan>
evilpie: https://mimesniff.spec.whatwg.org/#no-sniff-flag:~:text=A%20no%2Dsniff%20flag%2C%20which%20defaults%20to%20set%20if%20the%20user%20agent%20does%20not%20wish%20to%20perform%20sniffing%20on%20the%20resource%20and%20unset%20otherwise%2E seems to suggest it's a pref or so, not based on X-Content-Type-Options?

[03:47:10.0585] <evilpie>
I am not sure how mime sniff is integrated with e.g. HTML, but that is the only thing that makes sense. And how it works in browsers.

[03:50:23.0115] <zcorpan>
https://github.com/whatwg/mimesniff/issues/98

[06:27:09.0122] <annevk>
smaug: can you take another look at https://github.com/whatwg/dom/pull/1268? Doesn't have to happen before TPAC I suppose, but it would be nice to get these Trusted Types integration points landed. cc Luke Warlow 

[06:27:54.0224] <smaug>
sure, tomorrow (when there is a TT meeting anyhow)

[06:29:15.0544] <annevk>
Is that a Mozilla-specific meeting? If not I might be interested in joining.

[06:29:43.0595] <Luke Warlow>
Fwiw I've just landed a WebKit PR so we now pass all of the subtests for this PR, likewise so does Firefox, Chromium (experimentally) and even Servo.

[06:30:03.0677] <Luke Warlow>
* Fwiw I've just landed a WebKit PR so we now pass all of the subtests for this PR, likewise so does Firefox, Chromium (experimentally) and even Servo.

https://wpt.fyi/results/trusted-types/set-attributes-mutations-in-callback.tentative.html?label=master&label=experimental&product=chrome&product=firefox&product=safari&product=servo&aligned

[06:41:52.0145] <evilpie>
> <@zcorpan:mozilla.org> https://github.com/whatwg/mimesniff/issues/98

MDN is also wrong (only mentions script/style), I will file an issue.

[06:42:21.0115] <smaug>
annevk: it is Moz, Google, Igalia. It has been about the implementation 

[06:51:15.0349] <smaug>
annevk: btw, I think https://github.com/whatwg/html/issues/11821#issuecomment-3434680157 will need feedback especially from Apple.  

[06:52:08.0024] <smaug>
(not that I see even a webkit s-p for that. Andreu Botella )

[06:55:01.0076] <Andreu Botella>
I was going to open one, hadn't gotten around to it though

[06:55:03.0718] <Andreu Botella>
will do today

[06:56:51.0654] <annevk>
smaug: the story for how this should work for events keeps changing and it also seems some server-side implementations have already shipped? I kinda lost the plot, but I've the feeling nobody is particularly enthusiastic about the complexity it adds to engines...

[06:57:51.0499] <smaug>
I haven't heard anything from webkit side. (this is not Shadowrealm 🙂 )

[06:58:41.0117] <smaug>
AsyncContext is complicated, and the integration with web APIs seems to be a bit inconsistent 

[06:58:50.0490] <annevk>
It's been discussed a couple times at TPAC (though as a side chat) and at Web Engines Hackfest.

[06:59:55.0429] <annevk>
The main concern I see is that for web APIs each API designer has to be aware of it and make it work well (at least for one design iteration of AsyncContext), which seems unlikely to happen. People already can't hold their promises and events straight...

[07:00:47.0166] <nicolo-ribaudo>
(small rant, not directed to anybody in particular) What's difficult about that proposal is that web developers are excited about some more "core" parts of the proposal, and a lot do not care about what we end up doing for a lot of web APIs. It's quite unfortunate that large part of the complexity comes from things that we need to figure out an answer to, but which answer exactly we pick doesn't matter for most people.

[07:01:23.0138] <nicolo-ribaudo>
async/await and setTimeout&friends would probably make 90% of devs that ask for the proposal satisfied 😅

[07:01:50.0867] <nicolo-ribaudo>
Which is btw the answer to events has changed over time

[07:01:57.0726] <annevk>
If we can find a solution that solves it just for those and makes extensions possible going forward, I'd expect you'd get support.

[07:01:58.0571] <nicolo-ribaudo>
* Which is btw why the answer to events has changed over time

[07:03:32.0986] <Andreu Botella>
Well, I don't see a realistic way to make extensions possible going forward, because those might change existing behavior

[07:04:22.0913] <nicolo-ribaudo>
Yeah extensions cannot look like "oh this API now will start automatically propagating context"

[07:08:26.0307] <annevk>
We did discuss having something like `event.otherContext()`. I could also imagine something like `new API({propagateContext: true})`.

[07:12:16.0468] <smaug>
(I am still, as always, worried about memory leaks on web pages)

[08:07:42.0665] <Brian Cardarella>
Hi I'm implementing WHATWG specs in Zig, I'm separating each spec out into its own library. However, I'm seeing cyclic dependencies between specs. For example, Encoding defined types that depend on API defined in the Streams spec (i.e. TextEncoderStream). This creates a cycle of depencies where the Streams spec depends on the DOM spec and the DOM spec depends on Encoding and apparently Encoding depends on Streams.

Are the specs intended to be cycle free?

[08:17:05.0905] <Luke Warlow>
No, the specs are all very interdependent, especially for concepts (aka types). Some things you can probably create API surfaces to integrate but others such as types you might need a shared library definition for them all?

[08:19:28.0623] <Brian Cardarella>
That's something I'm considerig, I'm also thinking of just breaking out the speciifc APIs that introduce cycles into their own lib. So for the Encoding <-> Streams issue having an EcodingStreams library. That should solve the issue.

[08:20:04.0051] <Brian Cardarella>
* That's something I'm considerig, I'm also thinking of just breaking out the speciifc APIs that introduce cycles into their own lib. So for the Encoding \<-> Streams issue having an EncodingStreams library. That should solve the issue.

[08:42:49.0490] <annevk>
I think if there's a clearly better way to organize the types we'd certainly welcome such an improvement, but sometimes it's hard to avoid. Most browser engines are kinda monolithic and you'll find that reflected in specifications. But again, I do think we should try to improve that whenever it's possible.

[08:49:58.0187] <Brian Cardarella>
annevk: yeah I understand, these have been around for 20+ years. I've been making heavy use of AI to help separate the concerns into isolated libraries and for the most part it does seem to be working.

On another note, it would be fantastic if there was a way to get markdown specs instead of the html rendered ones for the purposes of LLM token consumption. I've gone through the effort of doing that for myself here: https://github.com/zig-whatwg/specs/tree/main/whatwg but it would be nice if there was a markdown ACCEPT header or .md extension on the whatwg site

[08:52:42.0116] <jmdyck>
You could get the .bs file from github?

[08:54:08.0956] <Brian Cardarella>
jmdyck: aren't those still just in a markup? For certain specs like DOM or HTML that are very large the additional tokens exhausts the context window pretty quickly

[08:55:33.0265] <Brian Cardarella>
but ultimately I think I'll have to load these into a RAG so maybe it's not really a concern

[08:56:13.0493] <annevk>
I think if someone did the work of integrating that with the publishing pipeline that we'd be willing to take on the ongoing maintenance burden (we publish PDF for the HTML standard for instance). See https://github.com/whatwg/whatwg.org/tree/main/resources.whatwg.org/build

[08:58:01.0468] <Brian Cardarella>
I'm happy to contribute my repo but I suspect it isn't that simple as this was multipass: first convert the html to markdown with pandoc then optimize the markdown for token reduction with Claude. I suspect that workflow wouldn't be sufficient for a specification

[08:58:59.0349] <jmdyck>
Yeah, HTML and (I think) DOM specs have no markdown, but e.g. https://github.com/whatwg/streams/blob/main/index.bs has lots

[08:59:51.0766] <Brian Cardarella>
I'm going to spend some time investigating if the RAG solution is better. RAGs are designed for the purpose of managing large data sets so if it leads to a better outocome with token usage I'll report back

[08:59:57.0824] <annevk>
Yeah, I'm not sure we want a dependency on Claude as part of publishing changes. Converting HTML to Markdown seems okay though.


2025-10-30
[01:15:27.0506] <nicolo-ribaudo>
Question about https://github.com/whatwg/html/issues/10673: would those modules also be importable through JS `import ... with { type: "css" }`? Or is the reason we are talking about the import map something else?

[01:54:10.0694] <smaug>
Andreu Botella: remind me, was there some good solution for the sync cross-origin asyncContext case?

[01:54:41.0937] <annevk>
nicolo-ribaudo: I think the idea is that they would be when you use the specifier, yes

[01:55:44.0651] <Andreu Botella>
> <@smaug:mozilla.org> Andreu Botella: remind me, was there some good solution for the sync cross-origin asyncContext case?

The solution so far would be to switch to an empty context before firing the cross-origin event, but I still need to investigate this in more detail

[01:56:52.0130] <smaug>
hmm, how do we know something is cross-origin event?

[01:58:35.0676] <smaug>
I guess one could have something on stack and when trying to access it do some check. Maybe that works.

[01:59:07.0981] <smaug>
and the new realm would effectively need to push something to stack and once done, pop

[03:30:55.0143] <annevk>
Is this about same-site-cross-origin or cross-origin due to process limitations on certain platforms?

[03:32:56.0098] <Andreu Botella>
So far when considering the interaction with origins, we've only been considering the "same origin" spec check and ignoring sites, so both

[03:33:34.0401] <Andreu Botella>
But I guess the interaction with sites is far from settled

[03:45:25.0048] <Luke Warlow>
annevk: and smaug 

Given the below html what do we think the end result should be:

```html

[03:45:37.0429] <Luke Warlow>
* annevk: and smaug

Given the below html what do we think the end result should be:

```html
<head>
    <meta http-equiv="content-security-policy" content="require-trusted-types-for 'script'">
</head>
<div id="div1" onclick="alert(1)"></div>
<span id="div2"></span>
<script>
    let count = 0;
trustedTypes.createPolicy('default', {
    createScript: (a, b, c) => {
        count++;
        if (count > 1) {
            return a;
        }
        const attr = div1.attributes.getNamedItem('onclick');
        div1.removeAttributeNode(attr);
        div2.attributes.setNamedItem(attr);
        return a;
    }
});

div1.attributes[1].value = 'alert(2)';
</script>

[03:46:34.0522] <Luke Warlow>
Chrome stable results in

```html
<div id="div1" onclick="alert(1)"></div>
<span id="div2"></span>
```

[03:47:30.0863] <smaug>
annevk: it is not limitation on certain platforms. It is because of .domain.  So, same-site. But perhaps it could apply to some platforms in different-site case too.

[03:48:44.0321] <Luke Warlow>
* Chrome stable results in

```html
<div id="div1" onclick="alert(2)"></div>
<span id="div2" onclick="alert(1)"></span>
```

Firefox Nightly in:

```html
<div id="div1"></div>
<span id="div2" onclick="alert(2)"></span>
```

WebKit Trunk and Spec in:

```html
<div id="div1"></div>
<span id="div2" onclick="alert(1)"></span>
```

[03:50:11.0325] <smaug>
annevk: Background being cases like https://github.com/WICG/scheduling-apis/issues/114#issuecomment-2674911489 where focus() can do interesting things. Scheduler API had a somewhat major bug where cross-origin pages could affect scheduling of tasks in the other origin.

[03:50:47.0182] <Luke Warlow>
Oli has a preference for Firefox Nightly's behaviour. I'm open to either, so I think if Anne agrees I'll update the spec, and then go and update the tests to account for that.



[03:51:35.0868] <smaug>
Luke Warlow: and of those I think Firefox behavior is least weird 

[03:52:06.0086] <Luke Warlow>
The alternative is an option 4 where we throw in that case, which I know Anne did raise as preferable to the current spec behaviour.

[03:52:30.0038] <smaug>
I could possibly live with that.

[03:52:55.0258] <smaug>
though it isn't super clear to me why we would throw 

[03:53:22.0747] <Luke Warlow>
Apologies that there's still some of these edge cases to resolve, I really did think we had the tests covering this but it seems we're not quite fully covering them.

[03:53:35.0834] <smaug>
someone is trying to set attribute node's value, and TT isn't throwing, so why wouldn't it succeed 

[03:54:03.0259] <annevk>
But why would setting succeed before you hear back from TT?

[03:54:25.0315] <Luke Warlow>
It doesn't, it happens after TT runs

[03:55:24.0659] <annevk>
Oh, FF moves the attribute and then the setter succeeds.

[03:55:45.0966] <Luke Warlow>
Whereas Webkit trunk and spec, moves the attribute but the setter early returns.

[03:56:03.0642] <smaug>
and value setting becomes oddly no-op 

[03:56:47.0549] <annevk>
I see, and we did an early return because the parent changed and thus it might no longer be accurate.

[03:56:47.0694] <Luke Warlow>
The thinking there was they've done something strange and I wasn't entirely convinced it couldn't be used to do something bad. But I think it would have to be a very weirdly written default policy relying on some form of global state for you to ever possibly run into that

[03:57:46.0308] <Luke Warlow>
Ultimately if the attribute isn't bad on the new element it's fine. If it is bad it'll be covered by TT on the move, so it's probably fine?

[03:58:31.0905] <annevk>
Like say you move onload from a `div` (used by a library) to `img`. Now I guess either retaining the existing value or updating to the new value could be bad.

[03:59:41.0094] <smaug>
Basically we need to trust TT callbacks to not do unsafe things to themselves, and we need to protect DOM from TT callbacks which try to attack implementations in some way (like trying to get DOM into weird state).

[04:01:01.0435] <Luke Warlow>
The default policy would get the oppurtunity to remove the existing value fwiw, but they don't actually get information on the element's type, they just get 'Element onload'

[04:01:23.0847] <annevk>
What does the mutation record look like in FF?

[04:01:28.0468] <Luke Warlow>
* The default policy would get the oppurtunity to remove the existing value fwiw, because the default policy would run on move, but they don't actually get information on the element's type, they just get 'Element onload'.

[04:02:19.0997] <annevk>
Basically I think I'm okay with aligning on FF and smaug's stated principles, as long as it all adds up.

[04:04:00.0938] <smaug>
In FF there should be attr removal, adding it somewhere else and then modifying the value. TT callback happens before any DOM mutations, and in the example it does those two first ones, and that last mutation should be setting the new value.

[04:13:18.0456] <Luke Warlow>
Yeah firefox gets

[div1] onclick removed: alert(1)
[div2] onclick added 
[div2] onclick modified: alert(1) -> alert(2)

[04:17:13.0345] <Luke Warlow>
Given the mutation records add up does this seem okay? If so I'll go ahead and update the spec PR and work on the test

[09:45:19.0574] <annevk>
Luke Warlow: if you're still around, mind if I push an editorial commit to your DOM TT PR?

[09:48:15.0190] <Luke Warlow>
No that's fine, go for it!

[10:02:43.0798] <annevk>
smaug: unless you want more time I plan to merge tomorrow (https://github.com/whatwg/dom/pull/1268 that is).

[10:03:10.0832] <smaug>
Looking right now

[10:03:15.0494] <annevk>
Also assuming Luke is okay with my changes, but I suspect so.

[10:04:55.0565] <Luke Warlow>
LGTM

[10:06:04.0209] <smaug>
(uh, hard to review on mobile)

[10:06:30.0716] <annevk>
Haha, I don't even review on my laptop most of the time. Let alone mobile.

[10:07:16.0583] <smaug>
Seems fine though

[10:11:08.0195] <smaug>
Wait

[10:12:50.0281] <smaug>
Ah, nm, appending attribute creates mutationrecord too, no need to change

[11:58:33.0285] <smaug>
(but I'm not going to say yet anything about another issue I think we have...related to how attributes are actually implemented, not how they are defined. Need to test a bit)

[13:32:38.0714] <smaug>
ah, no, it should be fine.


2025-10-31
[02:49:44.0638] <smaug>
oh, import is becoming fetch? https://github.com/tc39/proposal-import-bytes 

[02:50:39.0369] <annevk>
smaug: kinda, dunno if you saw, but Mozilla is proposing "text" as well

[02:51:02.0735] <smaug>
didn't see

[02:51:39.0799] <smaug>
I just saw "bytes" in my review queue and pondered "what is this, never heard" 🙂 

[02:51:57.0641] <annevk>
https://github.com/whatwg/html/issues/9444#issuecomment-3462527442

[03:47:06.0267] <annevk>
jarhar: why does none of the selectedcontent impl logic check for the button element being there?

[04:32:35.0647] <Luke Warlow>
> <@annevk:matrix.org> jarhar: why does none of the selectedcontent impl logic check for the button element being there?

I *think* because you can put it in your picker as well? Not just within the button.

[05:46:38.0534] <annevk>
Luke Warlow: not per its content model.

[08:28:36.0875] <jarhar>
sure we can make it check for the button if you want

[08:29:15.0816] <jarhar>
i also plan to make the selectedcontent element work outside of the select element in the future though for other cases where you can build your own popover with a select in it

