2025-10-01
[02:43:35.0685] <keithamus>
https://github.com/whatwg/html/issues/11733 one of the repo admins should probably block this user.

[04:11:21.0624] <zcorpan>
keithamus: Looks like they're blocked. Thanks

[05:23:18.0032] <annevk>
(I deleted the issue as well, in case anyone wonders what's going on.)

[11:19:13.0168] <cwilso>
Looking at the results of the meeting time poll, it seems there's general consensus that 1) we should keep *an* APAC-friendly time, but should decrease the frequency.  I'm thinking we should probably change to cycle three AMER+EMEA with one APAC-friendly time.  I'm kind of ambivalent if we use the APAC-AMER or APAC-EMEA, but seems like it would be slightly better to go with the former.  (Seems like there is slightly more attendance for the APAC-AMER than the APAC-EMEA on average.). WDYAT?

[15:35:47.0324] <smaug>
APAC-EMEA has usually folks from 3 browser engines, APAC-AMER often only from 2, I think.


2025-10-02
[21:47:00.0803] <sideshowbarker>
@cwilso Both the APAC-friendly times are equally inconvenient for me. The APAC-AMER one is exactly the time of day when I’m busy getting my kids on their way to school and preschool. And the APAC-EMEA one is pretty much the time of day when I’m busy cooking dinner for my kids. So for me personally the AMER+EMEA one (even though it’s at midnight my time) is actually more convenient than either of the APAC-friendly ones. 

[21:47:31.0664] <sideshowbarker>
* cwilso:  Both the APAC-friendly times are equally inconvenient for me. The APAC-AMER one is exactly the time of day when I’m busy getting my kids on their way to school and preschool. And the APAC-EMEA one is pretty much the time of day when I’m busy cooking dinner for my kids. So for me personally the AMER+EMEA one (even though it’s at midnight my time) is actually more convenient than either of the APAC-friendly ones. 

[00:34:47.0244] <Noam Rosenthal>
I find the APAC+EMEA one to be the most convenient...
but I wonder if there are APAC people who semi-regularly attend either, now that Domenic has retired? And in general which of these is better for them?

[02:12:14.0685] <Noam Rosenthal>
Luke Warlow: regarding multiple methods - I found that web developers often look to do something specific rather then look at a "family of methods". The same way people prefer the multiple `Array` methods that do specifc things rather than using `reduce`. `element.insertHTML(html, "before")`    doesn't add much readability as opposed to `element.beforeHTML(html)`

[02:13:46.0518] <Luke Warlow>
Yeah tbf I guess my main unsureness is about adding so many new ones, with no real prospect of removing the old ones.

One other question is how does this work with iframes? Am I able to stream into an iframe element somehow?

[02:14:22.0976] <Noam Rosenthal>
You mean the inline content of an `<iframe>` ?

[02:14:51.0264] <Noam Rosenthal>
Can you `iframe.insertAdjacentHTML()` today? It would work similarly

[02:15:05.0946] <smaug>
I wish we hadn't added the explicit microtask checkpoint before script execution (when there isn't JS on stack). Now with streaming that wouldn't work quite the same way if a stream adds multiple scripts and first one triggers promise callbacks. Those might get handled after the other scripts. Unless each script execution is its own microtask

[03:08:49.0807] <foolip>
keithamus: if you want to reproduce https://github.com/whatwg/html-build/issues/297#issuecomment-3275025761, there's a bikeshed-experiment branch in both html and html-build to check out. Then run `./build.sh --bikeshed --no-update` to see if it works at all.

[03:09:17.0150] <foolip>
keithamus: to then get it into a profiler, I've edited the script to print the bikeshed command and exit instead of running bikeshed

[03:09:55.0960] <foolip>
keithamus: it honestly wasn't easy for me to get everything working, so happy to VC and walk you through the setup that worked for me to make changes to bikeshed and try them in a profiler.

[03:10:19.0666] <Ms2ger>
What's HMTL?

[03:10:44.0308] <keithamus>
Hyper Markdown Templating Language

[03:38:11.0637] <Noam Rosenthal>
Luke Warlow: https://github.com/whatwg/html/issues/10122 has some good pros/cons about arguments vs. multiple methods from Lea Verou. I think Domenic swayed me towards the multiple-method camp but I'm not zealous about it. Will solicit more feedback from web developers about this. In any case, I added this as an alternative to the OP.

[03:44:47.0694] <annevk>
At this point I think multiple methods is more DOM-like than some kind of awkward positional argument. And although my preference would typically be to reuse the existing methods, we have made a decision of sorts here to break new ground so we can solve a set of issues. (For instance, built-in support for declarative shadow roots.)

[03:47:54.0772] <Noam Rosenthal>
annevk: re your `beforeHTML` comment- doesn't it make it sound like we're putting something "before some HTML"?

[03:48:23.0739] <Luke Warlow>
Was there a reason that innerHTML didn't just support DSD? Afaik it's a Boolean flag set based on the method used. Was it compat?

[03:50:30.0577] <Noam Rosenthal>
https://github.com/whatwg/dom/issues/912

[03:52:54.0941] <Noam Rosenthal>
(XSS protection from injecting shadow DOM by surprise without an opt in, to cut an extremely long story short)

[03:57:59.0095] <annevk>
Noam Rosenthal: I suppose, but I think it's still preferable as it's consistent with appendHTML and setHTML and such.

[04:13:06.0654] <freddy>
`beforeHTML` and `appendHTML` would sanitize such that we would need an ´...Unsafe` friend for all of these, that's still correct right?

[04:13:12.0240] <freddy>
* `beforeHTML` and `appendHTML` would sanitize such that we would need an `...Unsafe` friend for all of these, that's still correct right?

[04:15:31.0503] <Noam Rosenthal>
We would need an unsafe friend for all of them.
- sanitizer is not a thing yet
- you don't always want to sanitize. you might trust the source and want to run scripts etc. "Unsafe" doesn't mean "bad", it means "only run this from a trusted source"

[04:15:56.0129] <freddy>
Nvm. I should just read on GitHub.

[04:16:36.0173] <freddy>
Yeah, I agree. Unsafe doesn't mean bad. It's the sharp knife.

[04:20:33.0705] <Noam Rosenthal>
I have a feeling webdevs would push back on consistency winning in this one... also `setHTML` is corresponding to `replaceChildren` so we're not 100% consistent to begin with. Either way, bikeshedding is a sign that we've made some progress :)

[04:22:40.0522] <freddy>
looking forward to the first time I see a website using `setHTML()` irl

[04:35:25.0243] <Noam Rosenthal>
Our devrel agrees with Anne though, so it might be just me. Updated the OP with names following the discussion

[04:47:03.0218] <keithamus>
https://github.com/speced/bikeshed/pull/3181 had a go at trying to integrate Rust. 

[04:47:14.0666] <keithamus>
Fair warning: I have no idea what I am doing

[04:54:03.0979] <keithamus>
Now that i look at this more closely I can confirm I have no idea what I'm doing because I forgot to import pred_wrapper so this whole thing is a no-op 😂

[12:40:58.0529] <Maxim Vaarwel>
Does anyone have any idea why the `keydown` event in the [uievents specification](https://w3c.github.io/uievents/) has [the default action field set to "activation behavior"](https://w3c.github.io/uievents/#event-type-keydown)? I tried calling new KeyboardEvent("keydown") on the checkbox element via dispatchEvent. But it has no effect, even with `code="Space"`. Unlike new KeyboardEvent("keydown"), new PointerEvent("pointerclick") calls the activation behavior (it changes state of the checkbox element). What's going on?

[12:41:54.0367] <Maxim Vaarwel>
* Does anyone have any idea why the `keydown` event in the [uievents specification](https://w3c.github.io/uievents/) has [the default action field set to "activation behavior"](https://w3c.github.io/uievents/#event-type-keydown)? I tried calling `new KeyboardEvent("keydown")` on the checkbox element via `dispatchEvent`. But it has no effect, even with `code="Space"`. Unlike `new KeyboardEvent("keydown")`, `new PointerEvent("pointerclick")` calls the activation behavior (it changes state of the checkbox element). What's going on?

[12:43:03.0652] <Maxim Vaarwel>
* Does anyone have any idea why the `keydown` event in the [uievents specification](https://w3c.github.io/uievents/) has [the default action field set to "activation behavior"](https://w3c.github.io/uievents/#event-type-keydown)? I tried calling `new KeyboardEvent("keydown")` on the checkbox element via `dispatchEvent`. But it has no effect, even with `code="Space"`. Unlike `new KeyboardEvent("keydown")`, `new PointerEvent("click")` calls the activation behavior (it changes state of the checkbox element). What's going on?

[13:29:17.0906] <smaug>
click is special, when even untrusted events trigger default action 

[13:42:08.0001] <Maxim Vaarwel>
Of course I understand that; the specification clearly states it. As for `keydown`, that seems like a mistake.


2025-10-03
[18:38:29.0704] <sideshowbarker>
In technical writing about audio stuff, is _“ducking”_ a term that’s commonly used? https://github.com/mdn/content/pull/41377/files
> _This example activates a commentary track on a video by **ducking** the audio level of the main audio track to 50%, then enabling the commentary track._

[18:39:29.0004] <jmdyck>
https://en.wikipedia.org/wiki/Ducking

[18:39:54.0863] <sideshowbarker>
aha — thanks!

[02:03:13.0321] <zcorpan>
https://w3c.social/@w3c/115299385112878605 ...

If I were to decide, I'd revert this in an instant.

[04:24:32.0375] <zcorpan>
annevk: do you want to re-rubberstamp https://github.com/whatwg/html/pull/11640 ? (I'd like to rebase and merge, not squash)

[04:25:47.0089] <zcorpan>
The script should work for bikeshed specs with markdown, too. LMK if there are still bugs


2025-10-04
[02:53:12.0485] <annevk>
Worth a read for everyone actively involved in standards: https://alice.boxhall.au/articles/a-threat-model-for-accessibility-on-the-web/

[02:54:17.0791] <annevk>
zcorpan: I think the new target should be getting r+ from jmdyck 


2025-10-05
[02:13:16.0871] <Tyler Hearp>
Hi

[02:13:20.0586] <Tyler Hearp>
where the fuck am i

[02:13:45.0237] <Tyler Hearp>
is this the gubment

[02:21:06.0339] <Tyler Hearp>
Has anyone seen my mom? 


2025-10-07
[02:25:45.0317] <evilpie>
Can someone help me understand how https://infra.spec.whatwg.org/#list-sort-in-ascending-order works. Does it return the sorted list or not?

[02:26:28.0587] <evilpie>
It creates a new list `sorted`, but it doesn't seem like it's being returned?

[02:30:37.0642] <Noam Rosenthal>
It constructs a new list... usually constructors don't "return" the created object. A lot of infra algos are like that (e.g. https://infra.spec.whatwg.org/#list-clone)

[02:33:50.0478] <evilpie>
So it's kinda like in place sort? https://html.spec.whatwg.org/#collect-tags-from-speculative-load-candidates uses in that fashion.

[02:34:17.0671] <Noam Rosenthal>
no, to be clear the result of the algo a new list. But the algo does not use "return"

[02:34:19.0575] <evilpie>
* So it's kinda like in place sort? https://html.spec.whatwg.org/#collect-tags-from-speculative-load-candidates uses it in that fashion.

[02:35:14.0304] <Noam Rosenthal>
it's like `new List(old_list.ascending_sorted_items)`

[02:35:27.0692] <Noam Rosenthal>
There is no "return" here, but the result is equivalent to returning something

[02:39:45.0959] <evilpie>
So would a correct use look like "Set tags to sort in acending order tags" or does "Sort in acending order tags" also implicitly mean that?

[02:40:07.0421] <Noam Rosenthal>
If it points to that algorithm, it specifically creates a new list

[02:40:08.0809] <evilpie>
(It's pretty obvious what the result should be of course, just nitpicking here)

[02:41:52.0511] <Noam Rosenthal>
yea it's a bit awkward... I read https://html.spec.whatwg.org/#collect-tags-from-speculative-load-candidates as 

`tags = tags.toSorted(predicate)`

[02:43:13.0781] <Noam Rosenthal>
e.g. in other uses like https://fetch.spec.whatwg.org/#convert-header-names-to-a-sorted-lowercase-set it's more explicit

[02:46:20.0839] <Noam Rosenthal>
The use in https://html.spec.whatwg.org/multipage/nav-history-apis.html#windowproxy-getownproperty also makes it look like a sort-in-place. But in both those usages (this and speculative-load) there should not be an observable difference between sorting in place and creating a new list

[02:54:37.0201] <evilpie>
Yeah. But it confused me, because I couldn't understand which way it actually works.

