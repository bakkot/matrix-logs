2022-05-01
[13:08:38.0690] <Domenic>
I may have gotten emails working from wiki.whatwg.org, if anyone wants to test the "forgot my password" link. (I cannot test it for another 24 hours...)

[13:38:38.0014] <Ian Hickson>
why on earth is getGamePads on Navigator

[15:17:12.0732] <Domenic>
There is some superstition about putting things on the global so people started using navigator as a dumping ground

[15:17:22.0927] <Domenic>
I try to discourage it when possible but hard to catch everything

[15:57:26.0462] <Ian Hickson>
so weird

[16:14:10.0294] <krave>
Hi, I am reading HTML living standard. I do not quite understand the syntax used here. https://html.spec.whatwg.org/multipage/images.html#source-size-list

[16:14:58.0392] <krave>
Where can I find explainations about these syntax?

[16:15:29.0167] <emilio>
krave: that's CSS syntax: https://drafts.csswg.org/css-syntax/

[16:18:40.0760] <krave>
For example, the brackets, sharp, comma, and question mark in `[ <source-size># , ]? <source-size-value>`

[16:20:39.0622] <krave>
> <@emilio:mozilla.org> krave: that's CSS syntax: https://drafts.csswg.org/css-syntax/

Thank you emilio . That looks like a very big document though. 

[16:21:03.0958] <krave>
Any hint about this specific sentance? `[ <source-size># , ]? <source-size-value>`

[16:42:54.0045] <emilio>
krave: I guess https://drafts.csswg.org/css-values-4/#value-defs is the document that actually defines those combinators

[16:43:00.0215] <emilio>
What about that specific bit?

[16:43:23.0729] <emilio>
`#` is a multiplier as per https://drafts.csswg.org/css-values-4/#component-multipliers

[16:43:51.0815] <emilio>
so that means, "optionally, `<source-size>`s separated by commas, then one mandatory `<source-size-value>`"

[16:43:53.0798] <emilio>
 * so that means, "optionally, `<source-size>`s separated by commas, then one mandatory `<source-size-value>`"


2022-05-02
[08:38:07.0226] <zcorpan>
> <@tabatkins:matrix.org> zcorpan: Yeah, looks like the server wedged itself yesterday morning. Kicking it now.

Seems like it's still failing - LINK ERROR: No 'dfn' refs found for 'expose legacy touch event apis'.

[10:08:47.0699] <c_a-g_o>
WTF is a popsicle?

[10:14:44.0164] <annevk>
zcorpan: could it be because it's not a generated document? ReSpec tends to have issues

[10:16:00.0652] <annevk>
zcorpan: hardlinking from DOM might be the way to go, same as we do for DOMHighResTimeStamp and friends

[10:16:31.0890] <zcorpan>
annevk: ah yeah maybe that's the issue. ok

[10:16:48.0906] <annevk>
I wish folks would stop using ReSpec, but then we still have Wattsi so...

[10:17:22.0413] <c_a-g_o>
wattsi ReSpec

[10:17:59.0836] <zcorpan>
Maybe bikeshed could use Webref instead of scraping?

[10:18:32.0558] <annevk>
There's an issue for that somewhere

[11:10:52.0188] <TabAtkins>
Yes, last time I worked on it I got 99% of the way thru but WebIDL was suddenly causing weird biblio entries that I *coudl not* figure out, so I stalled. Working on tangential code-quality stuff in the area instead right now, but it's in my OKRs for the quarter.

[11:12:03.0730] <TabAtkins>
emilio, krave: Yes, the CSS Values & Units spec is the defining doc for CSS's value grammar. (The Syntax spec just adds some additional bits for defining *whole rules*, which aren't covered by the V&U stuff since it's not needed.)

[11:13:51.0418] <TabAtkins>
zcorpan: Tho moving to WebRef is the correct idea, I'll note that Bikeshed subtly encouraging ReSpec users to *actually publish a formatted document instead of inflicting the rest of us with the flash-of-plain-text spec* is a Good Thing imo

[11:45:52.0723] <zcorpan>
TabAtkins: agreed

[12:29:31.0140] <zcorpan>
TabAtkins: filing issues on such specs might be more effective though, in this case the editors of the spec aren't the ones to feel the pain

[15:07:10.0303] <TabAtkins>
annevk or Domenic: the maplike/setlike @@iterator and forEach have text detailing where the methods live, depending on whether the interface is [Global] or not. <https://webidl.spec.whatwg.org/#es-iterator> The rest of the methods don't; they're defined to just live on the interface prototype object. <https://webidl.spec.whatwg.org/#es-maplike> It looks like this *might* get handled generically instead by the "interface prototype object" text <https://webidl.spec.whatwg.org/#dfn-interface-prototype-object> but the details of the algo confuse me so I'm not sure. Do y'all know if the distinctions in spec text are intentional, or just editorial slippage that should be aligned?

[15:08:44.0467] <짜요>
hello! 
I had a question while developing.
I'm using title attribute related html5, but the number of characters seen by each browser is different. Chrome and edge are the same and safari shows more, I wonder Do you know how much the title attribute can show by browser?

[15:10:58.0898] <Domenic>
> <@tabatkins:matrix.org> annevk or Domenic: the maplike/setlike @@iterator and forEach have text detailing where the methods live, depending on whether the interface is [Global] or not. <https://webidl.spec.whatwg.org/#es-iterator> The rest of the methods don't; they're defined to just live on the interface prototype object. <https://webidl.spec.whatwg.org/#es-maplike> It looks like this *might* get handled generically instead by the "interface prototype object" text <https://webidl.spec.whatwg.org/#dfn-interface-prototype-object> but the details of the algo confuse me so I'm not sure. Do y'all know if the distinctions in spec text are intentional, or just editorial slippage that should be aligned?

I think this is semi-intentional in that it reflects the incomplete transition to imperativizing everything. If you are imperativizing the installation of those properties then it shouldn't be necessary. But right now I think they are not added imperatively anywhere, it is just "they must exist" and that text is the only normative text saying that they must exist and when they must exist.

[15:11:33.0696] <Domenic>
Some previous PRs linked from https://github.com/whatwg/webidl/issues/467

[15:11:36.0101] <TabAtkins>
Okay, I'm not touching the imperativeness yet, so I'll just leave it as-is.


2022-05-03
[00:08:04.0184] <annevk>
짜요: all I know is that there's no standardized limit

[02:39:44.0189] <Yoav Weiss>
annevk: Can we move https://github.com/w3c/preload/issues/115 to HTML, now that the HTML integration is complete? I'm trying to archive the old rep

[02:39:45.0876] <Yoav Weiss>
o

[02:40:37.0411] <Yoav Weiss>
Actually, same question for the various "enhancement" issues 

[02:47:18.0412] <annevk>
Yoav Weiss: that seems reasonable, we should maybe have a label for them then

[02:59:52.0129] <Yoav Weiss>
SG!

[07:53:12.0263] <Domenic>
Yeah I've been using "topic: link" for preload etc. but maybe something dedicated is helpful. "topic: resource hints"?

[08:46:39.0438] <annevk>
Is "topic: resource hints (preload)" too wordy? Would also be nice to add "topic: timing" to HTML

[09:17:16.0464] <Domenic>
Well resource hints also includes preconnect

[09:24:50.0543] <annevk>
Yeah I realize and maybe prefetch? It's just that preload comes up a lot and it would be nice to be able to search for one of them. Could make it (inc. preload) if wordy isn't a problem

[09:25:11.0762] <annevk>
 * Yeah I realize and maybe prefetch? It's just that preload comes up a lot and it would be nice to be able to search for one of them. Could make it (inc. preload) if wordy isn't a problem

[10:55:20.0262] <zcorpan>
annevk: how about `topic: resource hints/preload`

[11:41:49.0314] <Noam Rosenthal>
Domenic: hi, I want to try to find a good direction for the link header/element refactor

[11:43:30.0134] <Noam Rosenthal>
The way I was going was that all links are converted to the same "options" struct, either from a header or from an element, and then there is no need for each rel to do special header processing

[11:45:13.0096] <Noam Rosenthal>
... but I can also go with having different "process header" and "process element" algorithms that end up funneling to functions like "preload" or "preconnect"

[12:26:54.0007] <Domenic>
Noam Rosenthal: so my main concern is the clarity of reading a given element's section. I am hoping: (a) it can be clear at a glance whether it supports elements/headers/early hints; (b) we move away from a defaults-and-overrides structure; (c) there is minimal duplication/maximal shared infrastructure.

[12:30:52.0914] <Noam Rosenthal>
Domenic: ok, for (c) - I think it would be good if the common "Process link headers" extracted something like the options struct from the headers, before sending it to the different `rel` sections

[12:31:21.0673] <Domenic>
+1

[12:31:34.0873] <Domenic>
Options structs are good

[12:31:44.0739] <Domenic>
Just commented on the thread too

[12:32:48.0207] <Domenic>
(b) is mostly about fixing a preexisting problem but I think if we're doing (a) and (c) at the same time it's worth tackling (b)

[12:33:51.0803] <Noam Rosenthal>
ok, but without (b) and with options struct, how would you spell out the "process early hints" -> "handle headers for this type of link" transition?

[12:34:29.0110] <Noam Rosenthal>
at some points we went through a list of headers, and for each item we did something if it's defined for its `rel`

[12:34:37.0567] <Noam Rosenthal>
 * at some points we went through a list of headers, and for each item we did something if it's defined for its `rel`

[12:35:34.0545] <Noam Rosenthal>
I guess by having "to handle headers for this type of link, do nothing" for each unsupported `rel` type?

[12:37:14.0311] <Domenic>
Yes exactly

[12:37:38.0355] <Domenic>
I think that's nice and super-obvious

[12:38:00.0310] <Domenic>
But we could also do something like "supported processing types"

[12:38:24.0650] <Noam Rosenthal>
sure I can go with that. Sometimes my natural tendency is more minimalistic (defaults) but it's not always the most obvious for readers

[12:39:01.0151] <Noam Rosenthal>
I think the "do nothing" duplication would be better than a list of supported types. It allows us to add new types without maintaining it in separate places

[12:39:14.0025] <Domenic>
Noam Rosenthal: probably-unrelated question, do I correctly recall you had some PR which removed "process response end of body" from navigation params?

[12:39:40.0874] <Domenic>
 * Noam Rosenthal: probably-unrelated question, do I correctly recall you had some PR which removed "process response end of body" from navigation params?

[12:42:15.0324] <Noam Rosenthal>
Domenic: it was a PR that had many iterations (https://github.com/whatwg/html/pull/7531) and I believe you're referring to one of the iterations of the PR where we removed it and brought it back

[12:42:34.0565] <Domenic>
Hmm OK

[12:43:05.0884] <Domenic>
(I'm trying to make sure https://github.com/whatwg/html/pull/6315 stays up to date)

[12:43:39.0621] <Noam Rosenthal>
That navigation param was the cleanest way we found to report the iframe resource timing to the parent. There's no pending open PR that removes it (at least not one that I'm working on)

[12:44:06.0973] <Domenic>
Yeah I couldn't find one, so just wanted to double-check. No problem with keeping it.

[12:46:06.0728] <Noam Rosenthal>
Domenic: re the editorial I think I have enough to go on for tomorrow. If you think more comments add them to the issue and I'll see them in the morning?

[12:49:08.0021] <Domenic>
Sounds good, will leave any if I do! I think we have a good path.

