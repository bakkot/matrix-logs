2022-05-01
[13:08:38.0690] <Domenic>
I may have gotten emails working from wiki.whatwg.org, if anyone wants to test the "forgot my password" link. (I cannot test it for another 24 hours...)

[13:38:38.0014] <Ian Hickson>
why on earth is getGamePads on Navigator

[15:17:12.0732] <Domenic>
There is some superstition about putting things on the global so people started using navigator as a dumping ground

[15:17:22.0927] <Domenic>
I try to discourage it when possible but hard to catch everything

[15:57:26.0462] <Ian Hickson>
so weird

[16:14:10.0294] <krave>
Hi, I am reading HTML living standard. I do not quite understand the syntax used here. https://html.spec.whatwg.org/multipage/images.html#source-size-list

[16:14:58.0392] <krave>
Where can I find explainations about these syntax?

[16:15:29.0167] <emilio>
krave: that's CSS syntax: https://drafts.csswg.org/css-syntax/

[16:18:40.0760] <krave>
For example, the brackets, sharp, comma, and question mark in `[ <source-size># , ]? <source-size-value>`

[16:20:39.0622] <krave>
> <@emilio:mozilla.org> krave: that's CSS syntax: https://drafts.csswg.org/css-syntax/

Thank you emilio . That looks like a very big document though. 

[16:21:03.0958] <krave>
Any hint about this specific sentance? `[ <source-size># , ]? <source-size-value>`

[16:42:54.0045] <emilio>
krave: I guess https://drafts.csswg.org/css-values-4/#value-defs is the document that actually defines those combinators

[16:43:00.0215] <emilio>
What about that specific bit?

[16:43:23.0729] <emilio>
`#` is a multiplier as per https://drafts.csswg.org/css-values-4/#component-multipliers

[16:43:51.0815] <emilio>
so that means, "optionally, `<source-size>`s separated by commas, then one mandatory `<source-size-value>`"

[16:43:53.0798] <emilio>
 * so that means, "optionally, `<source-size>`s separated by commas, then one mandatory `<source-size-value>`"


2022-05-02
[08:38:07.0226] <zcorpan>
> <@tabatkins:matrix.org> zcorpan: Yeah, looks like the server wedged itself yesterday morning. Kicking it now.

Seems like it's still failing - LINK ERROR: No 'dfn' refs found for 'expose legacy touch event apis'.

[10:08:47.0699] <c_a-g_o>
WTF is a popsicle?

[10:14:44.0164] <annevk>
zcorpan: could it be because it's not a generated document? ReSpec tends to have issues

[10:16:00.0652] <annevk>
zcorpan: hardlinking from DOM might be the way to go, same as we do for DOMHighResTimeStamp and friends

[10:16:31.0890] <zcorpan>
annevk: ah yeah maybe that's the issue. ok

[10:16:48.0906] <annevk>
I wish folks would stop using ReSpec, but then we still have Wattsi so...

[10:17:22.0413] <c_a-g_o>
wattsi ReSpec

[10:17:59.0836] <zcorpan>
Maybe bikeshed could use Webref instead of scraping?

[10:18:32.0558] <annevk>
There's an issue for that somewhere

[11:10:52.0188] <TabAtkins>
Yes, last time I worked on it I got 99% of the way thru but WebIDL was suddenly causing weird biblio entries that I *coudl not* figure out, so I stalled. Working on tangential code-quality stuff in the area instead right now, but it's in my OKRs for the quarter.

[11:12:03.0730] <TabAtkins>
emilio, krave: Yes, the CSS Values & Units spec is the defining doc for CSS's value grammar. (The Syntax spec just adds some additional bits for defining *whole rules*, which aren't covered by the V&U stuff since it's not needed.)

[11:13:51.0418] <TabAtkins>
zcorpan: Tho moving to WebRef is the correct idea, I'll note that Bikeshed subtly encouraging ReSpec users to *actually publish a formatted document instead of inflicting the rest of us with the flash-of-plain-text spec* is a Good Thing imo

[11:45:52.0723] <zcorpan>
TabAtkins: agreed

[12:29:31.0140] <zcorpan>
TabAtkins: filing issues on such specs might be more effective though, in this case the editors of the spec aren't the ones to feel the pain

[15:07:10.0303] <TabAtkins>
annevk or Domenic: the maplike/setlike @@iterator and forEach have text detailing where the methods live, depending on whether the interface is [Global] or not. <https://webidl.spec.whatwg.org/#es-iterator> The rest of the methods don't; they're defined to just live on the interface prototype object. <https://webidl.spec.whatwg.org/#es-maplike> It looks like this *might* get handled generically instead by the "interface prototype object" text <https://webidl.spec.whatwg.org/#dfn-interface-prototype-object> but the details of the algo confuse me so I'm not sure. Do y'all know if the distinctions in spec text are intentional, or just editorial slippage that should be aligned?

[15:08:44.0467] <짜요>
hello! 
I had a question while developing.
I'm using title attribute related html5, but the number of characters seen by each browser is different. Chrome and edge are the same and safari shows more, I wonder Do you know how much the title attribute can show by browser?

[15:10:58.0898] <Domenic>
> <@tabatkins:matrix.org> annevk or Domenic: the maplike/setlike @@iterator and forEach have text detailing where the methods live, depending on whether the interface is [Global] or not. <https://webidl.spec.whatwg.org/#es-iterator> The rest of the methods don't; they're defined to just live on the interface prototype object. <https://webidl.spec.whatwg.org/#es-maplike> It looks like this *might* get handled generically instead by the "interface prototype object" text <https://webidl.spec.whatwg.org/#dfn-interface-prototype-object> but the details of the algo confuse me so I'm not sure. Do y'all know if the distinctions in spec text are intentional, or just editorial slippage that should be aligned?

I think this is semi-intentional in that it reflects the incomplete transition to imperativizing everything. If you are imperativizing the installation of those properties then it shouldn't be necessary. But right now I think they are not added imperatively anywhere, it is just "they must exist" and that text is the only normative text saying that they must exist and when they must exist.

[15:11:33.0696] <Domenic>
Some previous PRs linked from https://github.com/whatwg/webidl/issues/467

[15:11:36.0101] <TabAtkins>
Okay, I'm not touching the imperativeness yet, so I'll just leave it as-is.


2022-05-03
[00:08:04.0184] <annevk>
짜요: all I know is that there's no standardized limit

[02:39:44.0189] <Yoav Weiss>
annevk: Can we move https://github.com/w3c/preload/issues/115 to HTML, now that the HTML integration is complete? I'm trying to archive the old rep

[02:39:45.0876] <Yoav Weiss>
o

[02:40:37.0411] <Yoav Weiss>
Actually, same question for the various "enhancement" issues 

[02:47:18.0412] <annevk>
Yoav Weiss: that seems reasonable, we should maybe have a label for them then

[02:59:52.0129] <Yoav Weiss>
SG!

[07:53:12.0263] <Domenic>
Yeah I've been using "topic: link" for preload etc. but maybe something dedicated is helpful. "topic: resource hints"?

[08:46:39.0438] <annevk>
Is "topic: resource hints (preload)" too wordy? Would also be nice to add "topic: timing" to HTML

[09:17:16.0464] <Domenic>
Well resource hints also includes preconnect

[09:24:50.0543] <annevk>
Yeah I realize and maybe prefetch? It's just that preload comes up a lot and it would be nice to be able to search for one of them. Could make it (inc. preload) if wordy isn't a problem

[09:25:11.0762] <annevk>
 * Yeah I realize and maybe prefetch? It's just that preload comes up a lot and it would be nice to be able to search for one of them. Could make it (inc. preload) if wordy isn't a problem

[10:55:20.0262] <zcorpan>
annevk: how about `topic: resource hints/preload`

[11:41:49.0314] <Noam Rosenthal>
Domenic: hi, I want to try to find a good direction for the link header/element refactor

[11:43:30.0134] <Noam Rosenthal>
The way I was going was that all links are converted to the same "options" struct, either from a header or from an element, and then there is no need for each rel to do special header processing

[11:45:13.0096] <Noam Rosenthal>
... but I can also go with having different "process header" and "process element" algorithms that end up funneling to functions like "preload" or "preconnect"

[12:26:54.0007] <Domenic>
Noam Rosenthal: so my main concern is the clarity of reading a given element's section. I am hoping: (a) it can be clear at a glance whether it supports elements/headers/early hints; (b) we move away from a defaults-and-overrides structure; (c) there is minimal duplication/maximal shared infrastructure.

[12:30:52.0914] <Noam Rosenthal>
Domenic: ok, for (c) - I think it would be good if the common "Process link headers" extracted something like the options struct from the headers, before sending it to the different `rel` sections

[12:31:21.0673] <Domenic>
+1

[12:31:34.0873] <Domenic>
Options structs are good

[12:31:44.0739] <Domenic>
Just commented on the thread too

[12:32:48.0207] <Domenic>
(b) is mostly about fixing a preexisting problem but I think if we're doing (a) and (c) at the same time it's worth tackling (b)

[12:33:51.0803] <Noam Rosenthal>
ok, but without (b) and with options struct, how would you spell out the "process early hints" -> "handle headers for this type of link" transition?

[12:34:29.0110] <Noam Rosenthal>
at some points we went through a list of headers, and for each item we did something if it's defined for its `rel`

[12:34:37.0567] <Noam Rosenthal>
 * at some points we went through a list of headers, and for each item we did something if it's defined for its `rel`

[12:35:34.0545] <Noam Rosenthal>
I guess by having "to handle headers for this type of link, do nothing" for each unsupported `rel` type?

[12:37:14.0311] <Domenic>
Yes exactly

[12:37:38.0355] <Domenic>
I think that's nice and super-obvious

[12:38:00.0310] <Domenic>
But we could also do something like "supported processing types"

[12:38:24.0650] <Noam Rosenthal>
sure I can go with that. Sometimes my natural tendency is more minimalistic (defaults) but it's not always the most obvious for readers

[12:39:01.0151] <Noam Rosenthal>
I think the "do nothing" duplication would be better than a list of supported types. It allows us to add new types without maintaining it in separate places

[12:39:14.0025] <Domenic>
Noam Rosenthal: probably-unrelated question, do I correctly recall you had some PR which removed "process response end of body" from navigation params?

[12:39:40.0874] <Domenic>
 * Noam Rosenthal: probably-unrelated question, do I correctly recall you had some PR which removed "process response end of body" from navigation params?

[12:42:15.0324] <Noam Rosenthal>
Domenic: it was a PR that had many iterations (https://github.com/whatwg/html/pull/7531) and I believe you're referring to one of the iterations of the PR where we removed it and brought it back

[12:42:34.0565] <Domenic>
Hmm OK

[12:43:05.0884] <Domenic>
(I'm trying to make sure https://github.com/whatwg/html/pull/6315 stays up to date)

[12:43:39.0621] <Noam Rosenthal>
That navigation param was the cleanest way we found to report the iframe resource timing to the parent. There's no pending open PR that removes it (at least not one that I'm working on)

[12:44:06.0973] <Domenic>
Yeah I couldn't find one, so just wanted to double-check. No problem with keeping it.

[12:46:06.0728] <Noam Rosenthal>
Domenic: re the editorial I think I have enough to go on for tomorrow. If you think more comments add them to the issue and I'll see them in the morning?

[12:49:08.0021] <Domenic>
Sounds good, will leave any if I do! I think we have a good path.


2022-05-04
[23:39:44.0206] <Yoav Weiss>
annevk: Added a label to all remaining issues in https://github.com/w3c/preload/issues but it seems like I can't transfer this issue to a repo in another org

[23:40:13.0762] <Yoav Weiss>
Not sure if this is a permissions thing, and if e.g. I give you permissions on the preload repo, you'd be able to get them transferred

[23:40:43.0068] <annevk>
Yoav Weiss: oh sorry, I'm pretty sure you cannot transfer issues across organizations

[23:40:59.0245] <Yoav Weiss>
hmm.

[23:41:24.0430] <Yoav Weiss>
In that case, it may be easiest for me to open new ones, pointing at these (by then archived) ones

[23:41:56.0191] <annevk>
Yeah, the alternative would be transferring the repository, but that doesn't seem great

[23:42:18.0125] <Yoav Weiss>
yeah, agree

[23:44:15.0153] <annevk>
zcorpan: hgroup styles removed is a nice cleanup

[23:51:52.0569] <Yoav Weiss>
annevk: Can you add a "preload" label on https://github.com/whatwg/html/issues/7887 https://github.com/whatwg/html/issues/7888 and https://github.com/whatwg/html/issues/7889?

[00:08:59.0781] <annevk>
I've added the label I suggested yesterday to a bunch of issues, including those (not entirely sure it's the best name as "resource hints" is not a term we use in HTML; so if anyone has something better let me know)

[03:50:43.0446] <Noam Rosenthal>
I think "resource hints" is the best name, as it describes the adjacent spec (https://w3c.github.io/resource-hints/) which some of those still link to. The term Is used in HTML when linking to that spec

[05:02:08.0494] <annevk>
Ah okay, I wasn't sure, though it seems that over time that specification might get fully integrated

[05:13:51.0102] <Noam Rosenthal>
> <@annevk:mozilla.org> Ah okay, I wasn't sure, though it seems that over time that specification might get fully integrated

I hope we will integrate the whole thing, in which case it's good that the label would be consistent with the then-historic title 

[06:25:44.0149] <sideshowbarker>
PSA for anybody interested in committer/issue/PR metrics for repos you manage or contribute to…
A few things I want to have stats/numbers for but which aren’t provided by any existing tools:

- At what rate is the project gaining new contributors?
- At what rate is the list of open issues increasing or decreasing?
- At what rate is the list of open PRs increasing or decreasing?
- How many commits are getting merged each month?
- How many contributors are actually active each month?

…so, I wrote a tool that generates data and graphs to answer those questions.
https://github.com/git-pulse/tools

[06:25:59.0956] <sideshowbarker>
 * PSA for anybody interested in committer/issue/PR metrics for repos you manage or contribute to…
A few of the things I’ve wanted to have some stats/numbers for but which aren’t provided by any existing tools:

- At what rate is the project gaining new contributors?
- At what rate is the list of open issues increasing or decreasing?
- At what rate is the list of open PRs increasing or decreasing?
- How many commits are getting merged each month?
- How many contributors are actually active each month?
…so, I wrote a tool that generates data and graphs to answer those questions.
https://github.com/git-pulse/tools

[06:26:22.0813] <sideshowbarker>
 * PSA for anybody interested in committer/issue/PR metrics for repos you manage or contribute to…
A few things I want to have stats/numbers for but which aren’t provided by any existing tools:

- At what rate is the project gaining new contributors?
- At what rate is the list of open issues increasing or decreasing?
- At what rate is the list of open PRs increasing or decreasing?
- How many commits are getting merged each month?
- How many contributors are actually active each month?
…so, I wrote a tool that generates data and graphs to answer those questions.
https://github.com/git-pulse/tools

[06:26:30.0399] <sideshowbarker>
 * PSA for anybody interested in committer/issue/PR metrics for repos you manage or contribute to…
A few things I want to have stats/numbers for but which aren’t provided by any existing tools:

- At what rate is the project gaining new contributors?
- At what rate is the list of open issues increasing or decreasing?
- At what rate is the list of open PRs increasing or decreasing?
- How many commits are getting merged each month?
- How many contributors are actually active each month?

…so, I wrote a tool that generates data and graphs to answer those questions.
https://github.com/git-pulse/tools

[06:31:16.0766] <Arthur Hemery>
annevk: Regarding https://github.com/whatwg/html/issues/6364, we've got feedback from Google, Facebook and Zoom who all seem to agree that the COOP: Popups proposal would work for them. Do you have any other group you'd like to verify that solution works for? Given the complexity of the topic and the length of the discussion, I don't really know how to get smaller entities feedback.

[07:23:20.0112] <annevk>
Arthur Hemery: I guess auth0 might be good to ask? Perhaps a way to get some attention from the login community would be a short email to https://lists.w3.org/Archives/Public/public-fed-id/?

[07:34:10.0894] <Arthur Hemery>
Thanks for the pointers, doing that now :)

[13:42:01.0874] <peterv>
Domenic: DefaultValue is also used for dictionary members, which can't be undefined 🙄

[13:45:16.0226] <Domenic>
peterv: sure, not everything that's disallowed must be grammatically disallowed.

[13:45:40.0008] <peterv>
yeah, I know, just that we'll need some more prose

[13:45:58.0045] <peterv>
I thought this would be trivial grammar change


2022-05-05
[03:39:05.0707] <hsivonen>
I'm looking at WPT's update_html5lib_tests.py and I don't see a way to point it to a local (and modified) instance of https://github.com/html5lib/html5lib-tests . What am I missing?

[04:20:23.0859] <Ms2ger 💉💉>
I'm not sure you are missing something

[04:30:03.0792] <hsivonen>
Yeah, confirmed elsewhere that what I wanted to do isn't a supported action.

[07:21:12.0327] <zcorpan>
hsivonen: it needs a rewrite I think, see https://github.com/web-platform-tests/wpt/issues/27868

[07:25:47.0982] <Domenic>
<search> element is blocked on that issue :(

[07:29:23.0861] <Domenic>
annevk: ping on https://github.com/whatwg/html/pull/7876 , hoping to get that in so I can work on import maps spec

[10:29:00.0361] <annevk>
Okay, I was hoping to get to it, but given the size it'll have to be tomorrow; hopefully done by the time you get up


2022-05-06
[01:17:41.0815] <smaug>
Hmm, cssom-view spec broke? https://drafts.csswg.org/cssom-view/

[01:18:02.0019] <smaug>
That gives only the directory listing 

[01:18:56.0650] <smaug>
TabAtkins: ^

[01:19:41.0688] <Andreu Botella>
drafts.csswg.org breaks sometimes

[01:19:46.0360] <Andreu Botella>
I have a mirror at https://andreubotella.com/csswg-auto-build/cssom-view

[10:51:00.0277] <raphaellouis>
Hi all!

[10:51:45.0675] <raphaellouis>
I have an interesting idea to make the web safer, I would like everyone's opinion!

[10:53:15.0505] <raphaellouis>
Here ```<input type="password" encrypted="rsa" required>```

[10:53:51.0712] <raphaellouis>
What if we had a new attribute in the input field for passwords?

[10:54:15.0625] <raphaellouis>
An attribute to encrypt passwords?

[10:54:35.0939] <Andreu Botella>
Wouldn't you then have to have the RSA key in plain text in the page's code?

[11:04:35.0442] <raphaellouis>
My idea is... that... so everything stays in localStorage - data stored here continues to exist even after being closed and reopened.  This would not be saved in plaintext! ... Localstorage allows for example to manage some things in session... So good question.

[11:04:55.0819] <raphaellouis>
 * My idea is... that... so everything stays in localStorage - data stored here continues to exist even after being closed and reopened.  This would not be saved in plaintext! ... Localstorage allows for example to manage some things in session... So good question.

[11:05:46.0809] <raphaellouis>
 * My idea is... that... so everything stays in localStorage - data stored here continues to exist even after being closed and reopened.  This would not be saved in plaintext! ... Localstorage allows for example to manage some things in session... So good question.... I hope I helped answer this question or clarified something about it.

[11:06:14.0645] <raphaellouis>
 * My idea is... that... so everything stays in localStorage - data stored here continues to exist even after being closed and reopened.  This would not be saved in plaintext! ... Localstorage allows for example to manage some things in session... So good question.... I hope I helped answer this question or clarified something about it... 

[11:09:50.0961] <raphaellouis>
 * My idea is... that... so everything stays in localStorage - data stored here continues to exist even after being closed and reopened.  This would not be saved in plaintext! ... Localstorage allows for example to manage some things in session... So good question.... I hope I helped answer this question or clarified something about it...  Another option that I think of to solve this problem... if localstorage is something insecure, we can generate a qrcode... that way the user can have access to their encrypted passwords on each site without necessarily having saved something in the browser or without having necessarily use a program that generates things like rsa

[11:10:38.0663] <raphaellouis>
 * My idea is... that... so everything stays in localStorage - data stored here continues to exist even after being closed and reopened.  This would not be saved in plaintext! ... Localstorage allows for example to manage some things in session... So good question.... I hope I helped answer this question or clarified something about it...  Another option that I think of to solve this problem... if localstorage is something insecure, we can generate a qrcode... that way the user can have access to their encrypted passwords on each site without necessarily having saved something in the browser or without having necessarily use a program that generates things like rsa - reference: https://github.com/w3c/csswg-drafts/issues/6544

[11:11:09.0723] <raphaellouis>
 * My idea is... that... so everything stays in localStorage - data stored here continues to exist even after being closed and reopened.  This would not be saved in plaintext! ... Localstorage allows for example to manage some things in session... So good question.... I hope I helped answer this question or clarified something about it...  Another option that I think of to solve this problem... if localstorage is something insecure, we can generate a qrcode... that way the user can have access to their encrypted passwords on each site without necessarily having saved something in the browser or without having necessarily use a program that generates things like rsa - reference: https://github.com/w3c/csswg-drafts/issues/6544 ... There is a discussion of creating an html element for qrcode

[11:11:20.0212] <raphaellouis>
 * 1. My idea is... that... so everything stays in localStorage - data stored here continues to exist even after being closed and reopened.  This would not be saved in plaintext! ... Localstorage allows for example to manage some things in session... So good question.... I hope I helped answer this question or clarified something about it...  Another option that I think of to solve this problem... if localstorage is something insecure, we can generate a qrcode... that way the user can have access to their encrypted passwords on each site without necessarily having saved something in the browser or without having necessarily use a program that generates things like rsa - reference: https://github.com/w3c/csswg-drafts/issues/6544 ... There is a discussion of creating an html element for qrcode

[11:12:08.0473] <raphaellouis>
 * Hi!
1. My idea is... that... so everything stays in localStorage - data stored here continues to exist even after being closed and reopened.  This would not be saved in plaintext! ... Localstorage allows for example to manage some things in session... 
2. So good question.... I hope I helped answer this question or clarified something about it...  
3. Another option that I think of to solve this problem... if localstorage is something insecure, we can generate a qrcode... that way the user can have access to their encrypted passwords on each site without necessarily having saved something in the browser or without having necessarily use a program that generates things like rsa - reference: https://github.com/w3c/csswg-drafts/issues/6544 ... There is a discussion of creating an html element for qrcode


[11:12:30.0631] <raphaellouis>
 * @Hi!
1. My idea is... that... so everything stays in localStorage - data stored here continues to exist even after being closed and reopened.  This would not be saved in plaintext! ... Localstorage allows for example to manage some things in session...
2. So good question.... I hope I helped answer this question or clarified something about it...
3. Another option that I think of to solve this problem... if localstorage is something insecure, we can generate a qrcode... that way the user can have access to their encrypted passwords on each site without necessarily having saved something in the browser or without having necessarily use a program that generates things like rsa - reference: https://github.com/w3c/csswg-drafts/issues/6544 ... There is a discussion of creating an html element for qrcode

[11:12:40.0056] <raphaellouis>
1. My idea is... that... so everything stays in localStorage - data stored here continues to exist even after being closed and reopened. This would not be saved in plaintext! ... Localstorage allows for example to manage some things in session...
2. So good question.... I hope I helped answer this question or clarified something about it...
3. Another option that I think of to solve this problem... if localstorage is something insecure, we can generate a qrcode... that way the user can have access to their encrypted passwords on each site without necessarily having saved something in the browser or without having necessarily use a program that generates things like rsa - reference: https://github.com/w3c/csswg-drafts/issues/6544 ... There is a discussion of creating an html element for qrcode

[11:13:12.0029] <raphaellouis>
> <@abotella:igalia.com> Wouldn't you then have to have the RSA key in plain text in the page's code?

 * 1. My idea is... that... so everything stays in localStorage - data stored here continues to exist even after being closed and reopened. This would not be saved in plaintext! ... Localstorage allows for example to manage some things in session...
2. So good question.... I hope I helped answer this question or clarified something about it...
3. Another option that I think of to solve this problem... if localstorage is something insecure, we can generate a qrcode... that way the user can have access to their encrypted passwords on each site without necessarily having saved something in the browser or without having necessarily use a program that generates things like rsa - reference: https://github.com/w3c/csswg-drafts/issues/6544 ... There is a discussion of creating an html element for qrcode

[11:15:44.0194] <raphaellouis>
```html
<object type="bfo/barcode">
 <input type="password" encrypted="rsa" keypublic="public" keyprivate="private"/>
</object>
```

[11:15:52.0565] <raphaellouis>
 * ```html
<object type="bfo/barcode">
 <param name="value" value="high" encrypted="rsa" keypublic="public" keyprivate="private">
</object>
```

[11:16:14.0804] <raphaellouis>
 * ```html
<object type="bfo/barcode">
 <input type="password" encrypted="rsa" keypublic="public" keyprivate="private">
</object>
```

[11:16:22.0284] <raphaellouis>
 * ```html
<object type="bfo/barcode">
 <input type="password" encrypted="rsa" keypublic="public" keyprivate="private"/>
</object>
```

[11:21:00.0515] <raphaellouis>
4. I deleted the message... because I didn't know it had a reply option. So, sorry 

[11:21:37.0976] <raphaellouis>
 * 4. I deleted the message... because I didn't know it had a reply option. Sorry then

[11:21:47.0167] <raphaellouis>
 * 4. I deleted the message... because I didn't know it had a reply option. So, sorry 

[11:22:48.0595] <raphaellouis>
5. I read about it, here is my bibliographic references: https://www.tomsguide.com/news/dont-let-web-browsers-save-passwords, https://www.techrepublic.com/article/why-you-should-never-allow-your-web-browser-to-save-your-passwords/ , https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API , https://www.techadvisor.com/feature/security/safe-store-passwords-in-browser-3813506/ , https://discourse.wicg.io/t/proposal-webcrypto-argon2-curve-448-25519-secp256k1-chacha20-poly1305/5132 

[11:39:58.0681] <raphaellouis>
**I want you to criticize my argument with positive and negative points**
***Argument:***
1. Many systems and internet sites are still old stuff, some of them don't use encryption... and even if they did, the user usually creates easy passwords... 
2. My objective in proposing the encrypted attribute would be to tell browsers that they manage the passwords of the users... 
3. I argue about this... because for you to be on the internet you usually have to have a browser... in part the passwords should be managed by the website providers, by the browsers and by the users... but the reality is different ...
4. Usually users put easy passwords and generally some sites do not have encryption or security policy ... 
5. I think that this change in information security ... could be changed ... if browsers or the internet itself had a new attribute to html to make this possible
6. Every change is something to think about... I just had this idea and I want to hear all sides
7. This new attribute wouldn't be for plaintext... it should somehow be managed by localstorage if possible or maybe create a qrcode with that information

[11:43:28.0980] <raphaellouis>
Note: Please don't think of this sentence as arrogance, my wish is to know if the argument is valid or not

