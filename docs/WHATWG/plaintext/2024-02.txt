2024-02-01
[21:49:09.0444] <Domenic>
I would strongly support that; it seems like a good fit...

[03:24:00.0962] <hsivonen>
annevk, Domenic : Do you happen to know the history of why step 1 "Map under section 4 "Processing" in UTS 46 leaves disallowed characters in place and they are only checked in step 4 "Convert/Validate"? https://www.unicode.org/reports/tr46/#Processing

[03:24:20.0235] <hsivonen>
 * annevk, Domenic : Do you happen to know the history of why step 1 "Map" under section 4 "Processing" in UTS 46 leaves disallowed characters in place and they are only checked in step 4 "Convert/Validate"? https://www.unicode.org/reports/tr46/#Processing

[03:42:50.0585] <Adam Rice>
PR Preview is now saying `Error: 405 Method Not Allowed: Must use POST to process URL` at https://github.com/whatwg/websockets/pull/48

[03:42:55.0710] <Adam Rice>
I retried a few times.

[09:49:48.0191] <zcorpan>
keithamus: The wpt Interop  team has an issue with a new GitHub account seemingly beeing detected as a spam account (because we made a script to comment on a 100+ issues).  Is it easy to unblock the account?

[09:50:33.0969] <zcorpan>
`wpt-interop`

[09:57:46.0178] <keithamus>
Sure. Is that the name of the bot? Iâ€™ll get it handled 

[10:05:01.0476] <zcorpan>
keithamus: Thanks! We've started posted manually, so maybe we get some duplicates, but we can remove dup comments. Should it work to run the script for all issues now?

[10:07:08.0190] <keithamus>
Okay zcorpan that user has been restored and marked as `hammy` which hopefully means it wonâ€™t get flagged for that kind of activity again ðŸ˜‰

[10:07:39.0141] <zcorpan>
keithamus: TY!

[11:04:04.0039] <keithamus>
Yeah it shouldnâ€™t get flagged for being overly active now 

[14:55:36.0466] <Tristan Ross>
Working on implementing a webidl parser in Zig. Looks like this is a good place to ask questions.

[15:45:32.0883] <TabAtkins>
> <@rosscomputerguy:matrix.org> Working on implementing a webidl parser in Zig. Looks like this is a good place to ask questions.

Yes, this is a reasonable spot for questions about the spec.


2024-02-02
[22:43:36.0613] <annevk>
mfreed: I think it would be nice if you or we together drafted a small blog post around the shadow tree changes

[00:07:48.0300] <sideshowbarker>
Regarding trailing (not leading) characters in floating-point number values: Does the parsing algorithm at https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values require implementations to ignore all trailing characters that are not ASCII digits?

[00:35:21.0240] <annevk>
sideshowbarker: yeah, it ends up ignoring essentially everything at a certain point. Whereas before that it is quite strict.

[00:36:00.0858] <sideshowbarker>
OK, thanks

[00:37:18.0064] <sideshowbarker>
That complicates dealing with U+000Bâ€¦ Implementation-wise, it would be easier to just reject it everywhere

[00:46:33.0257] <annevk>
sideshowbarker: I left a comment on your implementation. You need to go deeper. :-)

[00:47:41.0550] <annevk>
The source of the problem is WebKit's (copied by Chromium) string to double operations. They do a bit too much.

[00:51:52.0182] <sideshowbarker>
> <@annevk:matrix.org> The source of the problem is WebKit's (copied by Chromium) string to double operations. They do a bit too much.

Yeah, Iâ€™m discovering that nowâ€¦

[00:52:02.0089] <annevk>
sideshowbarker: It might be a bit much though so not handling U+000B for now would be reasonable too.

[00:52:25.0817] <annevk>
 * sideshowbarker: It might be a bit much though so not handling U+000B correctly for now would be reasonable too.

[00:52:29.0143] <sideshowbarker>
OK

[00:53:36.0470] <annevk>
Ideally string to double would just do the minimal thing. It would progress some character pointer and return failure or a number. And then after that the caller gets to decide whether to ignore trailing characters or not.

[00:54:04.0471] <annevk>
And the caller also gets to decide where the character pointer starts (i.e., whether to skip whitespace and what type of whitespace beforehand).

[00:57:20.0664] <sideshowbarker>
And had already thought about changing `parseDouble()` to disallow U+000B as leading whitespace, but figured the problem with hard-coding it that way would be that it could regress other existing code that does expect `parseDouble()` allow U+000B.

So yeah â€”Â ideally would need to be made configurable, as you said in your comment.


[01:02:04.0717] <annevk>
sideshowbarker: It looks like the other callers are in JSC. You could ask in the WebKit JSC channel maybe.

[01:02:20.0086] <sideshowbarker>
OK

[01:03:34.0771] <sideshowbarker>
For now I guess I may also go ahead and hard-code the `parseDouble()` code to disallow U+000B, and see what that breaks

[01:03:56.0255] <sideshowbarker>
(just locally, I mean)

[01:04:30.0266] <annevk>
Yeah seems reasonable to try. JavaScript should be concerned about more whitespace than just ASCII anyway, but maybe that's handled separately?

[01:04:57.0620] <sideshowbarker>
maybe soâ€¦ weâ€™ll see, anyway

[01:05:20.0657] <annevk>
CSS seems to have mostly its own conversion, which seems suboptimal.

[04:53:58.0200] <hsivonen>
annevk: Am I counting correctly that there are 16 ASCII characters that the URL Standard allows in a domain but STD3 does not? The list is surprising. Also, some characters on that list don't go to DNS resolution in Firefox but to the search engine if typed into the URL bar. How did you derive the forbidden domain code point list?

[04:57:25.0379] <annevk>
hsivonen: it's an attempt to be as reasonable as possible to non-DNS systems which Ryan Sleevi deemed important (and probably are in certain deployments, though unclear to what extent they have non-DNS names as that is hard to find out)

[04:57:48.0504] <annevk>
I don't know the exact numbers offhand though, definitely not at this point

[04:59:43.0790] <hsivonen>
annevk: I see. I'm wondering if it's a good idea for an IDNA library to have the UTS 46 flag of `UseSTD3ASCIIRules` where `false` means anything goes, or if an IDNA library should have an ASCIIRules parameter that take STD3 or WHATWG.

[05:00:10.0273] <annevk>
hsivonen: https://github.com/whatwg/url/issues/397

[05:02:11.0393] <annevk>
That's a good question and I'm not sure. I don't really know what email does for instance. It would be very nice if the library could just be "domain to ASCII" and "domain to Unicode" without any kind of configuration. But we might still be too much in a state of flux.

[05:02:51.0390] <hsivonen>
Today, I'm been wondering if I should ask UTS 46 to document the use cases for its tunables.

[05:03:30.0413] <hsivonen>
I'm rather unhappy about how the spec definition of the UTS 46 STD3 stuff is so much more complicated than what ICU4C does. I've spent way too much time designing data structures from the spec.

[05:04:51.0436] <hsivonen>
I'm also a bit unhappy about it taking me so long to realize that the next step in the URL Standard after the UTS 46 integration point provides a somewhat similar filter as ICU4C's STD3 filter. (But I didn't notice it by reading just the UTS 46 integration language in the URL Standard.)

[05:05:08.0119] <annevk>
I've attempted to influence UTS 46 quite a bit, but the process is still quite opaque to me and I don't always understand the decisions they make. Nor are they explained to me.

[05:06:37.0145] <annevk>
hsivonen: that's good feedback. We should probably move step 7 of the host parser to domain to ASCII.

[05:07:06.0807] <hsivonen>
I'll file a couple of URL Standard issues.

[06:34:18.0450] <emilio>
annevk: anything I need to do to move https://github.com/whatwg/html/pull/10067 forward?

[06:34:28.0796] <emilio>
It blocks some other fixes I want to do in that area

