2024-05-01
[17:07:37.0418] <christianmx>
ok, thanks for all ðŸ˜‰

[10:58:39.0982] <Adrian R.>
> <@bkardell:igalia.com> Idk if it were me i would probably follow things merged in the last week in PRs https://github.com/whatwg/html/pulls?q=is%3Apr+is%3Aclosed

Thanks for this, I've also been wanting to ask the same question

[11:35:51.0172] <Domenic>
I might be missing something, but I think the list of closed PRs will be almost always worse than https://github.com/whatwg/html/commits/main/ . The commits list has better titles in particular. And it only includes accepted changes.

[11:36:16.0120] <Domenic>
I guess the closed PRs list has labels, which are used a bit inconsistently but might be helpful.


2024-05-02
[00:54:44.0773] <annevk>
Yeah, the commits are definitely more curated than the PRs (and we try to make the log fairly scannable as well), though the PRs have a lot more information if you need additional context.

[01:00:49.0059] <sideshowbarker>
Video link for the triage meeting?

[01:04:18.0044] <krosylight>
> <@sideshowbarker:matrix.org> Video link for the triage meeting?

Just heard from smaug that it's just a remnant of an old meeting, no actual meeting now

[01:04:43.0403] <sideshowbarker>
Aha, thanks

[01:05:16.0040] <smaug>
there is another one way later today (or rather, early tomorrow)

[01:05:45.0720] <smaug>
 * there is another meeting way later today (or rather, early tomorrow)

[01:22:58.0784] <annevk>
Yeah, the meeting is in 15h - 22min

[01:23:24.0121] <annevk>
(I'll be sleeping through it per usual.)

[07:22:30.0980] <hsivonen>
annevk: Have you noticed https://www.ietf.org/archive/id/draft-ietf-emailcore-as-09.html#name-use-and-validation-in-html- and https://www.ietf.org/archive/id/draft-ietf-emailcore-as-09.html#name-use-of-addresses-in-top-lev ?

[07:34:40.0058] <annevk>
That's news to me. I'm surprised how it's just a simple description of what HTML does given that J.C. Klensin doesn't appear to like the HTML rules.

[12:00:48.0693] <Jake Archibald>
annevk: do you know off the top of your head how sandboxed data-url workers are? Are they entirely originless?

[12:01:42.0537] <Jake Archibald>
Trying to figure out if it's a safe place to run 3p code. Or if there's a benefit of putting a worker in a sandboxed iframe instead

[16:44:40.0040] <smaug>
jarhar: by any chance, have you checked how often select (size=1) has been used in iframes which are too small to show the whole popup - meaning that in current desktop browsers the popup covers also some of the parent document?

[16:45:23.0256] <smaug>
(I did find some instances of such cases when we were considering to use content processes for select popup rendering)

[16:58:26.0682] <smaug>
(the new select would be of course opt-in)


2024-05-03
[17:14:36.0492] <jarhar>
i dont think we have usecounters for that particular case

[17:15:08.0874] <jarhar>
the new select would be a regular element which gets popover behavior, so it wouldnt escape outside its frame 

[17:16:19.0953] <smaug>
right

[17:20:02.0972] <smaug>
jarhar: does the parser allow anything inside <option> ?

[17:20:25.0276] <smaug>
 * jarhar: does the parser allow all the possible elements inside \<option> ?

[17:21:19.0400] <smaug>
oh, that  would be approach 3

[17:22:09.0924] <jarhar>
my proposal would allow everything in option

[17:23:49.0914] <smaug>
jarhar: hmm, what is the difference between 2 and 3 then? 2 requires use of datalist but 3 wouldn't since one could just use anything inside option?

[17:27:07.0129] <jarhar>
option 2 doesnt relax the parser at all except within button and datalist tags. so the following would be parsed in option 3, but option 2 would continue to throw away the div:
<select>
  <option>
    <div>hello

[17:27:16.0054] <jarhar>
ah the html i wrote is gone

[17:27:58.0051] <jarhar>
select
  option
    div
      text node

[17:28:14.0365] <jarhar>
option 2 would do what the parser currently does here and turn it into this

[17:28:20.0647] <jarhar>
select
option
text node

[17:28:52.0956] <jarhar>
to get the div in option 2 you have to wrap the option in a datalist, which also acts as the popover element

[17:30:21.0400] <smaug>
and still one more question today - before it is getting too late for me. If one doesn't use `<button>` inside `<select>`, what is the expected behavior? Browser would effectively have button as part of internal shadow DOM and that button has then `<selectedoption>` ?

[17:31:36.0258] <jarhar>
yes, but in my current implementation we just copy the text content from the selected option rather than having a full on selectedoption element so we dont have unsanitized content in the ua shadowroot

[17:31:39.0717] <jarhar>
option 2 is implemented in chrome behind experimental web platform features if you want to try it out

[17:32:24.0872] <jarhar>
you just have to add appearance:base-select to the select element to make it render the new stuff

[17:32:59.0511] <smaug>
oh, text content. That is something what was unclear in the explainer, since in one place it is talking about text content and in other place cloning

[17:33:11.0842] <smaug>
"<selectedoption> - The element which contains the text of the currently selected option. Every time that the user selects an option, the browser will replace the text content of this element with the text content of the selected option."

[17:33:29.0274] <smaug>
"The <selectedoption> element enables developers to declaratively clone the content of the selected <option> element to the button and to style it distinctly from the <option>"

[17:34:54.0039] <jarhar>
ah thanks for pointing that out ill fix it right away

[17:35:14.0629] <jarhar>
when the author used the selectedoption element, it clones the node not just the text content

[17:35:24.0382] <jarhar>
*uses

[17:36:41.0782] <smaug>
ok, and that is the reason why https://open-ui.org/components/selectlist/#rich-content-in-options has perhaps a bit surprising behavior. The image isn't part of the selected option.

[17:37:28.0229] <jarhar>
yeah thats because html content doesnt include the selectedoption element

[17:38:18.0193] <jarhar>
if we end up using the not yet implemented sanitizer api to check the content before replacing it, then we can put it in the ua shadowroot by default and youll get the "rich content" without replacing the button

[17:51:37.0191] <smaug>
https://open-ui.org/components/selectlist/#customizing-basic-styles something adds the arrow to the button, but it is not added in https://open-ui.org/components/selectlist/#rendering-the-option-differently-in-the-button 

[22:22:17.0633] <annevk>
Jake Archibald: they use an opaque origin, but both them and sandboxed iframes won't defend you against Spectre attacks in current browser engines

[08:01:02.0337] <jarhar>
thanks, i fixed it by removing the button tag from the example which has a down arrow. the down arrow is inside the button element in the UA shadowroot, so you don't get it when you provide your own button tag.


2024-05-06
[05:06:50.0552] <hsivonen>
> <@annevk:matrix.org> That's news to me. I'm surprised how it's just a simple description of what HTML does given that J.C. Klensin doesn't appear to like the HTML rules.

I think it's a description of how WebKit interpreted what HTML says. Arguably, the HTML spec test supports better what Blink does, and to construe the IETF draft concern to cover Blink, one would have to assume it to mean Blink using the transitional mode for `input type=email`. As for the on-issue discussion, so far, I'm failing to steer the discussion to my specific questions about the rules. Evidently, the current spec text isn't clear enough about "the rules", since Blink, Gecko, and WebKit all have different interpretations.

[05:07:27.0938] <hsivonen>
> <@annevk:matrix.org> That's news to me. I'm surprised how it's just a simple description of what HTML does given that J.C. Klensin doesn't appear to like the HTML rules.

 * I think it's a description of how WebKit interpreted what HTML says. Arguably, the HTML spec text supports better what Blink does, and to construe the IETF draft concern to cover Blink, one would have to assume it to mean Blink using the transitional mode for `input type=email`. As for the on-issue discussion, so far, I'm failing to steer the discussion to my specific questions about the rules. Evidently, the current spec text isn't clear enough about "the rules", since Blink, Gecko, and WebKit all have different interpretations.

[05:11:42.0258] <hsivonen>
Anyway, it's bad that Hixie didn't write down the rationale for making up non-RFC local-part syntax. My findings from today are: 1) Fastmail front end does not reject consecutive dots but back end refuses to go through with sending. 2) Apple Mail app warns about consecutive dots but allows the user to send anyway. 3) iCloud back end tries to send out consecutive dots. 4) Gmail rejects incoming consecutive dots despite ignoring the dots in mailbox matching for RFC-compliantly-dotted incoming addresses.

[05:13:26.0526] <hsivonen>
Since, Fastmail gets away with refusing to send to addresses with consecutive dots, being able to send to consecutive-dot addresses probably isn't a competitiveness-level mail-compat issue. Since the Apple stack enables sending to addresses with consecutive dots, it's not the case that email software would universally block consecutive dots.

[05:45:03.0967] <annevk>
hsivonen: what I find frustrating is that instead of talking about non-ASCII addresses, we keep getting dragged into discussing the subtleties of the ASCII rules, which impact an even smaller subset of end users. Given that multiple providers reject consecutive dots today I would be somewhat inclined to stick with that, but I could be persuaded I suppose. (I could see how they could lead to spoofing issues of sorts.)

