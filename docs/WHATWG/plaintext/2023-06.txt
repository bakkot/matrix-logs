2023-06-01
[01:26:09.0064] <canadahonk>
is there a spec reference for prefetch using `Sec-Fetch-Dest: empty`? (cc Noam Rosenthal)

[01:30:56.0995] <canadahonk>
 * is there a spec reference for prefetch using `Sec-Fetch-Dest: empty`? (cc Noam Rosenthal)
it makes sense (to me) but not sure if there's an explicit reference which should be used

[01:31:07.0666] <Noam Rosenthal>
canadahonk: yes! https://html.spec.whatwg.org/#link-type-prefetch:fetch-and-process-the-linked-resource (#3)

[01:32:42.0397] <canadahonk>
thanks!

[05:19:40.0255] <annevk>
Domenic: so when I click on any of the types/objects in https://webidl.spec.whatwg.org/#ArrayBufferView I end up in the same place as when I click those linked from https://webidl.spec.whatwg.org/#dfn-typed-array-type

[05:20:47.0988] <annevk>
Domenic: so at least fundamentally it seems like Web IDL treats them as interchangeable already

[05:22:05.0129] <annevk>
I guess I should leave that as a comment in the PR. Also found https://w3c.github.io/IndexedDB/#convert-value-to-key thanks to dontcallmedom

[05:28:47.0839] <Domenic>
annevk: yes. I don't think that changes my point that "typed array types" is a concept you reference when talking about types, whereas `Uint8Array` is a concept you reference when talking about either types or instances.

[05:30:14.0021] <Domenic>
We say "a `Uint8Array`" as a shorthand for "a `Uint8Array` instance", and we say "`Uint8Array`" as a shorthand for "the `Uint8Array` type". But we don't say "x is a typed array type" when x is an instance. We can say "x is a `ArrayBufferView` (instance)" if we want though.

[05:31:51.0205] <annevk>
Domenic: I'm pretty sure there's precedent for "x is A or B" and then using "x" in that sense, e.g., in DOM

[05:32:11.0708] <annevk>
Domenic: I guess you're saying there's some magic imbued by it being in Web IDL in this particular section, but that seems super weird

[05:32:22.0833] <Domenic>
I don't think there is when "A" or "B" have "type" in their <dfn> string.

[05:34:40.0907] <annevk>
Okay, so the magic is imbued by "type", that seems even worse, if we ever had `MIMEType` or equivalent

[05:35:29.0127] <annevk>
I don't mind upholding the fiction for now and no longer exporting these terms (apart from buffer source types they don't appear to be used elsewhere), but this doesn't seem like a tenable solution long term

[05:36:20.0285] <Domenic>
I don't think it's magic, it's just staying consistent with how Web IDL is defining terms.

[05:36:51.0226] <Domenic>
Like definitely if you're using "type" in some sense other than "type in a formal type system" (e.g., MIME type) then you don't need to follow this idea.

[05:37:20.0897] <Domenic>
ES has a similar distinction since it's also defining a formal type system

[05:38:15.0640] <Domenic>
https://tc39.es/ecma262/#sec-ecmascript-language-types-boolean-type vs. https://tc39.es/ecma262/#sec-terms-and-definitions-boolean-value

[05:39:00.0338] <Domenic>
and then informally "a Boolean" is shorthand for "a Boolean value", but you don't say "true is a Boolean type"

[05:56:53.0601] <annevk>
ES seems to have _String_ vs String though, at least

[05:57:06.0637] <annevk>
or even _String type_ vs String

[05:57:18.0783] <annevk>
And they're not saying "_String type_ is a String"

[08:24:09.0676] <Ehsan Azari>
> <@domenicdenicola:matrix.org> We say "a `Uint8Array`" as a shorthand for "a `Uint8Array` instance", and we say "`Uint8Array`" as a shorthand for "the `Uint8Array` type". But we don't say "x is a typed array type" when x is an instance. We can say "x is a `ArrayBufferView` (instance)" if we want though.

I should read spec, does it cover uniform array views? or just DataView which are slower than uniform array views
Also covers other things like `Float64Arrays`

[08:41:00.0458] <Ehsan Azari>
> <@domenicdenicola:matrix.org> We say "a `Uint8Array`" as a shorthand for "a `Uint8Array` instance", and we say "`Uint8Array`" as a shorthand for "the `Uint8Array` type". But we don't say "x is a typed array type" when x is an instance. We can say "x is a `ArrayBufferView` (instance)" if we want though.

 * I should read spec, does it cover uniform array views? or just DataView which are slower than uniform array views(typed array views)
Also covers other things like `Float64Array`s

[08:41:25.0839] <Ehsan Azari>
 * I should read spec, does it cover uniform array views? or just DataView which are slower than uniform array views (TypedArrayViews)
Also covers other things like `Float64Array`s


2023-06-02
[17:12:23.0289] <Domenic>
> <@annevk:matrix.org> or even _String type_ vs String

In ES, <dfn>'s CSS is italics.

[23:45:54.0607] <annevk>
Domenic: fair. I think I still can't use the typedefs though because that would not obviously allow for resizable buffers

[23:47:12.0187] <annevk>
Domenic: I guess I should just introduce some terms for the "values"

[23:47:22.0316] <Domenic>
Or just say "an instance of one of the buffer source types"

[23:47:30.0621] <Domenic>
Or define new typedefs if they're useful

[23:48:00.0625] <Domenic>
Actually I'm not sure what's wrong with the typedefs...

[23:48:32.0728] <Domenic>
> To create one of the buffer view types from a byte sequence bytes in a realm realm:

Here "buffer view types" links to a dfn that says it's DataView + Uint8Array + ...

[23:48:50.0325] <Domenic>
But we already have a typedef for that: ArrayBufferView

[23:49:45.0269] <annevk>
I'm not saying my current wording works with my new understanding of types, but https://webidl.spec.whatwg.org/#AllowResizable suggests it creates a new IDL type

[23:50:50.0145] <Domenic>
Yeah, I guess the question is whether the "create" algorithm is meant to allow creating resizable ABs etc.

[23:50:56.0946] <Domenic>
But presumably some of them are

[23:51:16.0744] <Domenic>
E.g. "byte length"

[23:51:30.0739] <Domenic>
So for "byte length" could you use `AllowSharedBufferSource`?

[23:51:44.0290] <annevk>
That still doesn't include AllowResizable

[23:51:54.0594] <Domenic>
Got it

[23:51:58.0198] <Domenic>
So, preexisting issue

[23:52:42.0025] <Domenic>
I guess you have to say "annotated type whose inner type is..." and then you have to use "instance" because you're in type-land

[23:52:43.0162] <annevk>
Yeah I suppose, WebKit doesn't seem to have AllowResizable

[23:53:00.0273] <annevk>
Domenic: that doesn't help with `for` though

[23:53:23.0440] <Domenic>
I think having `for` not be rigorous is OK

[23:53:30.0552] <annevk>
oh

[23:54:25.0666] <Domenic>
Making people type `[=[AllowResizable] Uint8Array/byte length=]` instead of `[=Uint8Array/byte length=]` seems unnecessary, even if they're technically operating on a value whose type is `[AllowResizable] Uint8Array`

[23:55:20.0565] <annevk>
We could define `InclusiveAllowSharedBufferSource` I suppose, hmm

[23:55:39.0485] <annevk>
Well I would expect something like "buffer objects/byte length" maybe

[23:55:53.0574] <annevk>
But I could live with not fixing it, certainly less to fix downstream

[23:56:09.0861] <Domenic>
It's true we probably do need a typedef that includes [AllowResizable]

[23:56:19.0745] <Domenic>
Is anyone using [AllowResizable]? Hmm.

[23:56:33.0280] <Domenic>
WebDex says no https://dontcallmedom.github.io/webdex/a.html#AllowResizable%40%40%40%40extended-attribute

[23:56:47.0316] <Domenic>
But yeah it seems likely anyone who did use it would quickly want a typedef

[23:57:00.0895] <Domenic>
Either AllowResizableBufferSource or AllowSharedAndResizableBufferSource

[23:57:16.0680] <Domenic>
(shared and resizable = growable, I guess??)

[00:07:06.0252] <annevk>
Domenic: yeah maybe, I don't really know what kind of operations you need with resizable, perhaps we should wait until someone actually attempts to do it

[00:07:16.0768] <Domenic>
Yeah fair enough

[00:07:58.0652] <annevk>
Domenic: I guess I'll restore the existing `for` attributes and such and file a follow-up issue

[04:29:13.0141] <sideshowbarker>
zcorpan: (and on the off chance there might be actually be any others here that care about the error-checking behavior of the vnu/mozilla HTML parser) Good news about my investigation of the fubarred behavior for error checking for ampersands is: From testing now, I can say:

- the relevant patch as I had originally written it myself (almost 3 years ago now) was actually passing all the tests; that’s to first commit at https://github.com/validator/htmlparser/pull/30/commits
- as Henri and I were reviewing my patch, we somewhere introduced the bug that caused the regression we only recently discovered we had — from it being reported in the issue at https://github.com/validator/htmlparser/issues/82
- the exact commit where we introduced the bug that caused the regression is https://github.com/validator/htmlparser/pull/30/commits/9814070b66f5d48f7798f97820fac14d36950243
- so I need to back at that commit in fine detail, and trace through it, and test changes to it to try to pinpoint exactly what part of it is where the regression bug was introduced

[05:14:37.0666] <Zomatree>
Are there emcascript type IDL definitions or in another machine readable format? im working on some bindings to another language and would rather not have to manually write it all out

[05:26:49.0318] <annevk>
Zomatree: TypeScript has those, maybe?

[05:29:55.0363] <Zomatree>
parsing ts types would be a nightmare with how complex the type system is

[05:39:48.0598] <annevk>
sideshowbarker: if you're still around, does https://github.com/whatwg/html/pull/9372 look good to you? I'll merge

[05:51:41.0293] <sideshowbarker>
> <@annevk:matrix.org> sideshowbarker: if you're still around, does https://github.com/whatwg/html/pull/9372 look good to you? I'll merge

Looking now

[05:54:04.0672] <nicolo-ribaudo>
It's not exactly what you are looking for, but with https://github.com/es-meta/esmeta you can parse the ecmascript spec and extract type definitions from it

[06:00:38.0057] <sideshowbarker>
> <@annevk:matrix.org> sideshowbarker: if you're still around, does https://github.com/whatwg/html/pull/9372 look good to you? I'll merge

Quick answer for now for here is: I think I am unliking to willingly implement this in the HTML Checker, because I think that on balance this restriction will end up wasting more time of HTML developer-authors than it helps others. Use cases for `summary` are very different from use cases for `button`.

For one thing, a `summary` often acts essentially as a title/heading, as far as its informational purposes go, rather than just its function. I understand and recognize the very-real accessibility problems with allowing it, and I am in no way dismissing those as being ignorable and unimportant.  But in this particular very special case, I do not judge the accessibility problems to be sufficient to merit the restriction being implemented in the HTML checker.

[06:02:22.0349] <sideshowbarker>
Incidentally, all that said, I would have sworn that the spec previously already this restriction (and I had been already intentionally not implementing it), and I so I am a bit surprised to discover that the spec has actually not had this restriction, and this PR is needed to add it.

[06:02:57.0830] <sideshowbarker>
I need to make time to go back and figure out _why_ I had thought this restriction was already in the spec.

[06:03:33.0867] <annevk>
Alright, if you could put your concerns in the issue or PR that would be good. If it's not going to be enforced there's no real reason to make the change.

[06:03:53.0063] <sideshowbarker>
Well I may really be in the wrong side of this

[06:03:56.0869] <annevk>
Or at least it warrants some further discussion I think

[06:04:07.0522] <sideshowbarker>
for sure

[06:06:31.0657] <sideshowbarker>
and for now, I will put the comments into the PR — and then find some time to look back through my stuff and try to see what had confused previously about this already being in the spec. I guess that’s moot/irrelevant anyway as far as this PR goes — but it’s just I feel unsettled about not being able to remember yet why I had this apparent misapprehension so far, about this being in the spec already

[06:06:46.0400] <sideshowbarker>
thanks for the heads-up about the PR

[06:07:28.0121] <sideshowbarker>
I had actually seen notifications about that PR rolling by, but been lazy about not actually going to take a look and read the issue description

[07:28:45.0104] <annevk>
sideshowbarker: I just realized this would also outlaw WebKit's PR bot comments

[07:32:01.0445] <sideshowbarker>
> <@annevk:matrix.org> sideshowbarker: I just realized this would also outlaw WebKit's PR bot comments

There you go. I think there are many other existing uses that it would outlaw — all over the place. I think if we look, we could find plenty of them — because it’s actually a logical normal natural reasonable use case to anybody

[07:33:16.0454] <sideshowbarker>
I am recalling some of this, and what led me before to already having come to the the conclusion that I would not implement it

[07:33:24.0624] <sideshowbarker>
 * I am recalling some of this, and what led me before to already having come to the conclusion that I would not implement it

[07:33:26.0217] <annevk>
Yeah, this no longer seems like a good fix

[07:34:05.0568] <annevk>
I hope you did not provide pushback before and that was not conveyed to us this time around...

[07:35:03.0028] <annevk>
Anyway, no harm done (and we could have always reverted had it been merged, although that would be somewhat bad)

[07:36:15.0627] <sideshowbarker>
Yeah — and I know when I say this that it’s a standard cop-out we have been accused of using since forever in discussions with the accessibility advocates — but it really seems like what needs to happen here is for the AT to be refined to provide the right UX for this

[07:36:36.0542] <sideshowbarker>
I mean, it’s in the wild already being used very commonly for years

[07:37:11.0438] <sideshowbarker>
And we know that developers are not going to change there existing stuff just because the HTML checker starts barking at them

[07:37:23.0183] <sideshowbarker>
 * And we know that many (or most) developers are not going to change their existing stuff just because the HTML checker starts barking at them

[08:47:27.0476] <annevk>
sideshowbarker: oops I was wrong, the WebKit PR bot doesn't put interactive content in `summary`, just in `details`

[08:47:51.0264] <annevk>
sideshowbarker: for `summary` it does seem less likely, but there are probably existing cases

[09:09:20.0887] <annevk>
Wait, why does the selector *|test serialize as test?

[09:24:02.0290] <annevk>
I guess that's just how it works, unless you use @namespace it's all global

[09:24:31.0578] <annevk>
So there's no need for *|* if you don't have @namespace either, something to keep in mind for the "global style sheet" I suppose

[09:24:43.0670] <annevk>
 * So there's no need for `*|*` if you don't have @namespace either, something to keep in mind for the "global style sheet" I suppose

[09:37:59.0485] <sideshowbarker>
 * zcorpan: (and on the off chance there might be actually be any others here that care about the error-checking behavior of the vnu/mozilla HTML parser) Good news about my investigation of the fubarred behavior for error checking for ampersands is: From testing now, I can say:

- the relevant patch as I had originally written it myself (almost 3 years ago now) was actually passing all the tests; that’s the first commit at https://github.com/validator/htmlparser/pull/30/commits
- as Henri and I were reviewing my patch, we somewhere introduced the bug that caused the regression we only recently discovered we had — from it being reported in the issue at https://github.com/validator/htmlparser/issues/82
- the exact commit where we introduced the bug that caused the regression is https://github.com/validator/htmlparser/pull/30/commits/9814070b66f5d48f7798f97820fac14d36950243
- so I need to back at that commit in fine detail, and trace through it, and test changes to it to try to pinpoint exactly what part of it is where the regression bug was introduced

[10:37:57.0086] <Eric Portis (he/him)>
zcorpan: Trying to wrap my head around concrete object size ignoring natural dimensions. Is this correct? https://gist.github.com/eeeps/3b6c4b90f7275526534d5928a978fbaa

[10:38:41.0779] <Yagiz Nizipli>
We just released Ada's website, as well as Rust, Python and Go clients. Appreciate any feedback from WHATWG. http://ada-url.com

[10:40:26.0747] <Eric Portis (he/him)>
> <@etportis:matrix.org> zcorpan: Trying to wrap my head around concrete object size ignoring natural dimensions. Is this correct? https://gist.github.com/eeeps/3b6c4b90f7275526534d5928a978fbaa

(thinking through a new wrinkle, adding an example with height: auto...)

[10:45:45.0379] <Eric Portis (he/him)>
> <@etportis:matrix.org> zcorpan: Trying to wrap my head around concrete object size ignoring natural dimensions. Is this correct? https://gist.github.com/eeeps/3b6c4b90f7275526534d5928a978fbaa

 * <del>(thinking through a new wrinkle, adding an example with height: auto...)</del> nevermind, I forgot how height:auto + width and height work, ignore me...

[10:46:24.0598] <Eric Portis (he/him)>
 * <del>(thinking through a new wrinkle, adding an example with height: auto...)</del> nevermind, I forgot how height:auto + width and height work, ignore me... still curious to check my understanding of the two examples in the gist though

[10:56:50.0479] <Eric Portis (he/him)>
Also, my reading of https://whatpr.org/html/8008/images.html#parsing-a-sizes-attribute is that once you've specified `loading=lazy`, an img will behave equivalently with or without `sizes=auto`. Aka lazy-loaded images get auto-sizes by default. Is that right?

[14:59:43.0119] <sideshowbarker>
> <@annevk:matrix.org> sideshowbarker: for `summary` it does seem less likely, but there are probably existing cases

One concrete thing I can do that with give us some actual data ー though _aggregated_ data, as opposed to a list of sites ー is: I can add a use counter to the HTML checker, and then take a look at the number from that, after the counter has been in there for a few days

[15:07:05.0566] <sideshowbarker>
That is, the counter will give us a percentage of sites which are using interactive content or tabindex inside `summary`

[15:09:07.0422] <sideshowbarker>
...and in parallel to me adding that ice counter, zcorpan or somebody else here who's set up to run HTTPArchive queries can run one for this

[15:09:22.0675] <sideshowbarker>
* ...and in parallel to me adding that use counter, zcorpan or somebody else here who's set up to run HTTPArchive queries can run one for this

[15:12:38.0764] <sideshowbarker>
But separate still from both of those, it would be greatly helpful for somebody to try to create a list of existing widely-visited sites which are using it (interactive content or tabindex inside `summary`)

[15:14:35.0831] <sideshowbarker>
Maybe Scott Ohara or Steve Faulkner already know of some big sites which are


2023-06-03
[20:00:37.0637] <Domenic>
We previously had some of this discussion about the sections at the bottom of https://participate.whatwg.org/agreement

[20:03:20.0148] <Domenic>
> <@yagiznizipli:matrix.org> We just released Ada's website, as well as Rust, Python and Go clients. Appreciate any feedback from WHATWG. http://ada-url.com

Pretty cool. One thing that might be nice is highlighting how up-to-date you currently are. For jsdom/whatwg-url I link to the commit hash of the spec I've most recently updated to. https://github.com/jsdom/whatwg-url#specification-conformance If you put in more work you could translate that into "# of commits behind whatwg/url main".

I think that would be some of the most important info I'd be looking for in a URL Standard-focused URL parser library. Basically, is it maintained.

[20:04:30.0634] <Domenic>
Also for your FAQ entry on WHATWG, maybe consider linking to https://whatwg.org/, and/or https://whatwg.org/faq

[06:06:06.0453] <annevk>
Found an issue with the universal selector, prolly of interest to some people here: https://github.com/w3c/csswg-drafts/issues/8911


2023-06-05
[00:22:10.0507] <zcorpan>
> <@annevk:matrix.org> So there's no need for `*|*` if you don't have @namespace either, something to keep in mind for the "global style sheet" I suppose

right but it's a bit of a footgun e.g. if implementers add the "global" rules into html.css

[00:25:27.0343] <zcorpan>
> <@etportis:matrix.org> zcorpan: Trying to wrap my head around concrete object size ignoring natural dimensions. Is this correct? https://gist.github.com/eeeps/3b6c4b90f7275526534d5928a978fbaa

For example 1, since img is display: block it would be 60rem wide. cf. https://software.hixie.ch/utilities/js/live-dom-viewer/saved/11739

[00:25:50.0714] <zcorpan>
(or less if the viewport is smaller)

[00:27:44.0090] <zcorpan>
Eric Portis (he/him): https://drafts.csswg.org/css-images/#specified-size

[00:29:12.0149] <zcorpan>
Eric Portis (he/him): example 2 seems correct

[00:39:22.0425] <annevk>
zcorpan: hmm yeah, tests? 😀

[01:00:19.0898] <zcorpan>
> <@sideshowbarker:matrix.org> ...and in parallel to me adding that use counter, zcorpan or somebody else here who's set up to run HTTPArchive queries can run one for this

Done, with these exceptions: <a> (sans href) is included, <img>, <audio>, <video> are excluded. It would be harder to get these right, and marginal returns. 105,235 sites out of 12,808,711 (~0.82%). The result was too large to export in full to google sheets, but the first 1327 results (ordered by rank) are here: https://docs.google.com/spreadsheets/d/1o2X2ld_S0JjYdZs2vPKNwfrAIdceiVH2HLSmo4BLYTI/edit?usp=sharing

[01:01:18.0292] <zcorpan>
annevk: maybe interaction with 'display' isn't tested yet :)

[01:01:50.0792] <zcorpan>
annevk: oh you meant for html.css

[01:04:06.0932] <zcorpan>
Turns out <summary tabindex="-1"> is included

[01:04:39.0066] <zcorpan>
I made at least 2 mistakes in the regexp :)

[01:05:37.0044] <sideshowbarker>
> <@zcorpan:mozilla.org> Done, with these exceptions: <a> (sans href) is included, <img>, <audio>, <video> are excluded. It would be harder to get these right, and marginal returns. 105,235 sites out of 12,808,711 (~0.82%). The result was too large to export in full to google sheets, but the first 1327 results (ordered by rank) are here: https://docs.google.com/spreadsheets/d/1o2X2ld_S0JjYdZs2vPKNwfrAIdceiVH2HLSmo4BLYTI/edit?usp=sharing

Thanks much. I had expected a lot more usage than 0.82%. That makes me see that having the HTML checker report an error would not be disruptive to as many developers as I had imagined it might be.

[01:06:00.0011] <zcorpan>
sideshowbarker: I expected less

[01:06:17.0113] <sideshowbarker>
Oh

[01:08:17.0521] <zcorpan>
summary is used on 0.9% of pages per https://docs.google.com/spreadsheets/d/1grkd2_1xSV3jvNK6ucRQ0OL1HmGTsScHuwA8GZuRLHU/edit#gid=2057119066&range=I80

[01:09:03.0818] <zcorpan>
so then 91% of pages using `summary` also use interactive content

[01:09:45.0442] <sideshowbarker>
> <@zcorpan:mozilla.org> sideshowbarker: I expected less

Well it's significantly high by our normal thresholds for feature deprecations. But for the thresholds I have used for the HTML checker in past cases, it's not high.

[01:15:36.0159] <sideshowbarker>
> <@zcorpan:mozilla.org> so then 91% of pages using `summary` also use interactive content

Oh wow yeah then that changes my mind completely.  Forget everything else I just said. The how-many-summary-have-interactive-content is what we need to care about here. And of course having the checker disrupt things for 91% of the developers using summary is nowhere close to be acceptable. It's a complete non-starter.

[01:16:16.0434] <sideshowbarker>
* Oh wow yeah then that changes my mind completely.  Forget everything else I just said. The how-many-summary-have-interactive-content case is what we need to care about here. And of course having the checker disrupt things for 91% of the developers using summary is nowhere close to be acceptable. It's a complete non-starter.

[01:16:28.0734] <zcorpan>
> <@zcorpan:mozilla.org> so then 91% of pages using `summary` also use interactive content

This was bogus, since `summary` usage has increased since sep 2022 :) New query with the same dataset gives 226,719 sites using `summary`, so it's "only" 46% of sites using `summary` also using interactive content in `summary`

[01:30:54.0220] <sideshowbarker>
> <@zcorpan:mozilla.org> This was bogus, since `summary` usage has increased since sep 2022 :) New query with the same dataset gives 226,719 sites using `summary`, so it's "only" 46% of sites using `summary` also using interactive content in `summary`

Ah ok. But 46% is still not anywhere even close to be acceptable for the checker to be reporting errors about. 

[01:32:06.0771] <sideshowbarker>
This week I will try to add a use counter to the checker, to see how well it aligns with that number.

[01:32:57.0141] <zcorpan>
sideshowbarker: also we might need to solve how to make nested interactive content work well so that the UX isn't broken for 0.82% of sites

[01:33:26.0085] <sideshowbarker>
Yup

[01:55:18.0894] <Domenic>
https://github.com/w3c/html-aam/issues/345#issuecomment-931495836 discusses that. I guess at least Facebook's accessibility specialist thinks it's too hard: " Whenever I try to imagine a way to solve all the problems associated with that, my brain feels like it falls into a bottomless hurt pit."

[01:56:19.0707] <Domenic>
I think it's sad when accessibility experts say that giving AT users experience parity with mouse/keyboard users is too hard, but, to be fair, I haven't tried to write AT software myself.

[07:00:22.0309] <annevk>
Mattias Buelens: any update on https://github.com/whatwg/streams/pull/1083?

[07:02:48.0419] <annevk>
Mattias Buelens: similar question for https://github.com/whatwg/streams/pull/1271. I guess they come down to https://github.com/whatwg/streams/pull/1264. Does what Youenn suggests there seem reasonable?

[09:31:53.0687] <Eric Portis (he/him)>
zcorpan: Why did you change the <img> to a <span class=img>, and why (or perhaps when) does the <img> have a computedStyle width of 0?  https://software.hixie.ch/utilities/js/live-dom-viewer/?saved=11742

[09:32:09.0513] <Eric Portis (he/him)>
 * zcorpan: Why did you change the \<img> to a \<span class=img>, and why (or perhaps when) does an \<img> have a computedStyle width of 0?  https://software.hixie.ch/utilities/js/live-dom-viewer/?saved=11742

[09:32:46.0245] <zcorpan>
Eric Portis (he/him): I changed it to remove weird behaviors of `img`

[09:33:16.0102] <Eric Portis (he/him)>
@zcorpan ok. Does sizes=auto have to contend with those weird behaviors?

[09:33:47.0226] <zcorpan>
Eric Portis (he/him): the size is 0 if it's inline or inline-block and no width or min-width, for example

[09:37:40.0015] <Eric Portis (he/him)>
I guess my question is, will the concrete size ignoring natural dimensions in this example be 60em, even though what's getting logged is 0px: https://software.hixie.ch/utilities/js/live-dom-viewer/?saved=11742 If so why?

[09:39:43.0662] <zcorpan>
Eric Portis (he/him): oh right it's 0px because img is a replaced element. So my `span` example is wrong

[09:40:54.0345] <Eric Portis (he/him)>
Ok! So both of the gist examples are correct, and this is testable by putting an empty img in a layout and looking at its dimensions.

[09:42:07.0693] <zcorpan>
Eric Portis (he/him): I think so, but might need to use `alt=""` so that the alt text doesn't affect sizing when testing since alt isn't shown while loading

[09:42:57.0206] <Eric Portis (he/him)>
zcorpan: makes sense. Thanks!

[10:02:15.0148] <zcorpan>
Eric Portis (he/him): to be sure fallback doesn't affect sizing, use a very-slow-loading image

[10:04:53.0609] <Eric Portis (he/him)>
zcorpan: what do you mean by “fallback”?

[10:05:17.0656] <zcorpan>
Eric Portis (he/him): "showing alt"

[10:06:01.0810] <zcorpan>
even if the empty string, there can be a difference between inline box and replaced inline box

[10:09:46.0981] <Eric Portis (he/him)>
zcorpan: ok. I don’t see any differences in Safari/FF/Chrime but I’ll take your word for it that that’s not necessarily spec’s/guaranteed

[10:09:55.0118] <Eric Portis (he/him)>
* zcorpan: ok. I don’t see any differences in Safari/FF/Chrime but I’ll take your word for it that that’s not necessarily spec’d/guaranteed

[10:10:12.0648] <Eric Portis (he/him)>
* zcorpan: ok. I don’t see any differences in Safari/FF/Chrome but I’ll take your word for it that that’s not necessarily spec’d/guaranteed

[10:12:28.0689] <zcorpan>
Eric Portis (he/him): e.g. I think https://www.w3.org/TR/CSS2/visuren.html#position-props is different

[10:18:56.0480] <zcorpan>
Eric Portis (he/him): https://software.hixie.ch/utilities/js/live-dom-viewer/saved/11743

[10:19:24.0483] <zcorpan>
3 different results in 3 browser engines, good times!

[10:22:06.0523] <zcorpan>
https://html.spec.whatwg.org/#images-3 - ah actually `alt=""` means it "repesents nothing" (if there's no image), and so it should act as a 0x0 replaced element

[16:30:08.0134] <Eric Portis (he/him)>
zcorpan: so an <img alt=""> should behave the same, for sizes="auto"-testing purposes, as an <img src="5-second-ttfb.jpeg" /> or whatever. Because the [default object size](https://drafts.csswg.org/css-images/#default-object-size) of both a [loading image](https://drafts.csswg.org/css-images/#loading-image) and an ["img element that represents nothing and the user agent does not expect this to change"](https://html.spec.whatwg.org/#images-3) are both 0x0.

[16:46:20.0017] <Eric Portis (he/him)>
zcorpan: although according to the loading image definition, images in this state "may trigger fallback rendering". Is there anything in the "concrete object size ignoring natural dimensions" spec that forbids fallback rendering dimensions from being used?


2023-06-06
[17:34:21.0840] <ntim>
Hi! can someone help merge this editorial typo fix: https://github.com/whatwg/html/pull/9388 ?

[01:13:51.0468] <annevk>
Jake Archibald: note that `className` is already defined on `Element` as I pointed out earlier; I guess SVG overrides it, though you could probably use the other one if you really wanted to

[01:15:39.0351] <Jake Archibald>
annevk: when did you previously point that out? (Or do you mean `classList`?)

[01:19:49.0379] <annevk>
Jake Archibald: I pointed out in the issue that it's defined in DOM so the request should maybe be tracked there

[01:20:21.0108] <annevk>
Jake Archibald: don't blame you for missing it though, there's a lot of noise :-)

[01:22:30.0372] <Jake Archibald>
annevk: ahh I did see that, but I didn't join the dots to "it's on `Element`"

[01:22:40.0370] <Jake Archibald>
But yeah, that makes sense

[01:46:59.0087] <Jake Archibald>
annevk: happy to move it to DOM, but I figured it'd be better to wait until there's general "let's do it for className and htmlFor" agreement, then split it into two issues

[03:50:10.0275] <annevk>
Ms2ger: how does the Wasm CG render proposals relative to the main spec? Like https://github.com/WebAssembly/gc/issues/376 makes a bunch of changes to the main spec and then I guess the main spec is occasionally merged back in or some such? But is the result rendered somewhere?

[04:10:35.0981] <Ms2ger>
annevk: yeah, proposals are done in a fork of the main spec repo, which is merged into it occasionally. The result is rendered if someone managed to get the CI working

[04:13:22.0717] <Ms2ger>
Example: https://webassembly.github.io/content-security-policy/js-api/#host-ensure-can-compile-wasm-bytes 

[04:37:46.0633] <sideshowbarker>
> <@ms2ger:igalia.com> annevk: yeah, proposals are done in a fork of the main spec repo, which is merged into it occasionally. The result is rendered if someone managed to get the CI working

I've been asked to fix that CI. So I just need to make time to go in and do it. Next week at the earliest

[04:38:01.0756] <Ms2ger>
You have?

[04:38:24.0234] <sideshowbarker>
Yeah, by PLH

[04:39:03.0701] <sideshowbarker>
My understanding is that the former team contact set up that build?

[04:39:50.0251] <sideshowbarker>
And that it's... a bit baroque? Idiosyncratic

[04:40:58.0557] <Ms2ger>
I think you're talking about the `.rst` → HTML build

[04:41:26.0431] <Ms2ger>
 * I think you're talking about the `.rst` → W3C-styled HTML build

[04:41:30.0858] <sideshowbarker>
Ah

[04:41:55.0119] <sideshowbarker>
To be honest, I haven't even looked at any of it yet

[04:42:47.0430] <sideshowbarker>
PLH told me long ago some stuff had stopped working there

[04:43:09.0071] <sideshowbarker>
But I as yet have zero idea of the specifics

[04:44:10.0182] <sideshowbarker>
Regardless, I'd be glad to help good whatever's busted

[04:45:03.0557] <sideshowbarker>
In particular whatever bits are the ones Eric had been taking care of

[04:45:56.0214] <Ms2ger>
This isn't the thing Eric did, but since you offered, https://github.com/WebAssembly/js-types/issues/23 has been ignored for the last 2.5 years

[04:47:17.0101] <sideshowbarker>
Well that's a long time

[04:47:26.0542] <sideshowbarker>
I will go in and take a look

[04:50:02.0199] <sideshowbarker>
The reason I'm good at fixing strangely engineered builds that are broken is that I'm good at strangely engineering them to begin with myself, and breaking them

[05:06:42.0074] <Ehsan Azari>
Is there any `EventSource` (or `EventSource`-like) web api client/browser side?

[05:28:16.0597] <Ehsan Azari>
 * Is there any `EventSource` (or `EventSource`-like) web api for client/browser side communications?

[05:35:21.0246] <Ehsan Azari>
 * Is there any `EventSource` (or `EventSource`-like) web api for client/browser side communications?
I mean having event sources in client/browser side too, to consume those client/browser-side events when is needed 

[05:49:16.0388] <Ehsan Azari>
 * Is there any `EventSource` (or `EventSource`-like) web api for client/browser side communications?
I mean having event sources in client/browser side too, to consume those client/browser-side events when is needed mainly client/browser side (and maybe even server-side?)

I mean following the philosophy of `EventSource` and `EventTarget` for both client/browser and server side
To me it seems that `EventSource` and `EventTarget` comes from those old days that just server was the event source


[05:50:05.0827] <Ehsan Azari>
 * Is there any `EventSource` (or `EventSource`-like) web api for client/browser side communications?
I mean having event sources in client/browser side too, to consume those client/browser-side events when is needed mainly client/browser side (and maybe even server-side?)

I mean following the philosophy of `EventSource` and `EventTarget` for both client/browser and server side
To me it seems that `EventSource` and `EventTarget` comes from those old days when just server was the event source

[05:50:31.0215] <Ehsan Azari>
 * Is there any `EventSource` (or `EventSource`-like) web api for client/browser side communications?
I mean having event sources in client/browser side too, to consume those client/browser-side events when is needed mainly client/browser side (and maybe even server-side?)

I mean following the philosophy of `EventSource` and `EventTarget` for both client/browser and server sides
To me it seems that `EventSource` and `EventTarget` comes from those old days when just server was the event source

[06:10:50.0282] <Ehsan Azari>
 * Is there any `EventSource` (or `EventSource`-like) web api for client/browser side communications?
I mean having event sources in client/browser side too, to consume those client/browser-side events when is needed mainly client/browser side (and maybe even from server-side?)

I mean following the philosophy of `EventSource` and `EventTarget` for both client/browser and server sides
To me it seems that `EventSource` and `EventTarget` comes from those old days when just server was the event source

[06:11:30.0195] <Ehsan Azari>
 * Is there any `EventSource` (or `EventSource`-like) web api for client/browser side communications?
I mean having event sources in client/browser side too, to consume those client/browser-side events when is needed mainly client/browser side (and maybe even from server-side?)

I mean following the philosophy of `EventSource` and `EventTarget` for both client/browser and server sides
To me it seems that `EventSource` and `EventTarget` come from those old days when just server was the event source

[06:14:39.0959] <annevk>
sideshowbarker: 🎉

[06:25:21.0690] <Ehsan Azari>
Isn't a good idea to have event sources in client/browser side too?

[06:27:11.0119] <Ehsan Azari>
 * Isn't a good idea to have event sources on client/browser side too?

[09:16:40.0246] <smaug>
annevk: in https://fetch.spec.whatwg.org/#fetch-groups, the last sentence, should it be "and keepalive", not "or keepalive" ?

[09:42:34.0644] <Ehsan Azari>
> <@smaug:mozilla.org> annevk: in https://fetch.spec.whatwg.org/#fetch-groups, the last sentence, should it be "and keepalive", not "or keepalive" ?

It looks correct with or
It allows for either condition to be true for the associated fetch record's controller to be terminated

[11:55:58.0340] <smaug>
but we don't want to terminate keepalives, no?

[14:38:47.0857] <annevk>
smaug: yeah, that looks wrong, file an issue?

[14:39:06.0918] <annevk>
smaug: seems to have been wrong since I first drafted this concept: https://github.com/whatwg/fetch/commit/744d8b3bbe3b59492cff5f0fdd49b8dd053c4571

[14:52:20.0484] <smaug>
https://github.com/whatwg/fetch/issues/1669

[16:39:03.0533] <Anton Maliev>
Hey folks, question on the Storage spec. I'm trying to get a callback for every site that accesses any form of non-cookie storage. Looking at the spec https://storage.spec.whatwg.org/, which is the best algorithm to monkey patch? I'm considering "obtain a storage bottle map / shelf / key", but I'm not clear on the flow. Are these called once the first time an origin accesses local or session storage, and never before then? Could the browser run them for a non-site reason?


2023-06-07
[18:56:18.0563] <sirisian>
Question about differing behavior in FF and Chrome when focusing outside of a contenteditable with inline-block vs grid. Click below the contenteditable: https://jsfiddle.net/swk91rpx/ Notice for grid it finds the first text content and places the cursor in it in Chrome. I suspect this is a bug in Chrome as I think this happened with inline-block 7 years ago and was changed. Anyone familiar with this topic and could clarify the expected behavior so I know where to file this. (For all I know this edge-case is right for chrome and FF is the one handling it wrong).

[00:41:56.0478] <annevk>
Anton Maliev: that might be correct, yeah; problem is that not everything has been refactored and we have been running into some issues with this abstraction

[00:42:31.0292] <annevk>
Anton Maliev: filing an issue and copying inexorabletash and asuth might be a good start

[00:44:02.0076] <annevk>
sirisian: filing an issue against all of https://github.com/w3c/contentEditable/issues/new, Chromium, and Gecko seems like a good start

[00:44:41.0664] <annevk>
sirisian: unfortunately the spec is not maintained so this has to be addressed on a case-by-case basis and likely slowly

[03:02:44.0081] <Andreu Botella>
That might also be a hit testing issue, rather than a contenteditable issue

[03:03:02.0667] <Andreu Botella>
and hit testing isn't really fully specified anywhere

[03:17:33.0290] <zcorpan>
> <@etportis:matrix.org> zcorpan: so an <img alt=""> should behave the same, for sizes="auto"-testing purposes, as an <img src="5-second-ttfb.jpeg" /> or whatever. Because the [default object size](https://drafts.csswg.org/css-images/#default-object-size) of both a [loading image](https://drafts.csswg.org/css-images/#loading-image) and an ["img element that represents nothing and the user agent does not expect this to change"](https://html.spec.whatwg.org/#images-3) are both 0x0.

I think so! But from my test it looks like at Chromium doesn't implement it correctly

[03:19:13.0621] <zcorpan>
> <@etportis:matrix.org> zcorpan: although according to the loading image definition, images in this state "may trigger fallback rendering". Is there anything in the "concrete object size ignoring natural dimensions" spec that forbids fallback rendering dimensions from being used?

I don't follow. Both cases are replaced element 0x0 per spec?

[04:15:22.0645] <annevk>
Adam Rice: since Mattias Buelens seems to be out, do you have any thoughts on https://github.com/whatwg/streams/pull/1264? Otherwise I'm gonna approve splitting the test out for now so Youenn is unblocked

[07:39:58.0741] <Eric Portis (he/him)>
zcorpan: re: you not following, yes -- ignore me, I was confused. Even if the fallback representation is showing, that only adds an intrinsic size, it doesn't change the default or specified sizes.

What does Chromium do? Is "your test" part of the WPTs?

[07:55:50.0504] <zcorpan>
Eric Portis (he/him): https://software.hixie.ch/utilities/js/live-dom-viewer/saved/11743

[07:57:35.0315] <zcorpan>
Eric Portis (he/him): since the second element gets full width, chromium treats it as a non-replaced element instead of a replaced element with 0x0 natural dimensions. Haven't written a wpt for this

[12:33:18.0960] <ntim>
Hi! Can someone please merge  https://github.com/whatwg/html/pull/9397 ?

[12:41:42.0738] <jub0bs>
Apologies freddy. Work got in the way. I'll shoot you an email as soon as I have more time.

[12:41:54.0837] <jub0bs>
 * Apologies, freddy. Work got in the way. I'll shoot you an email as soon as I have more time.

[15:27:53.0789] <Jeffrey Yasskin>
FYI, https://github.com/w3ctag/design-principles/pull/441 about how to monkeypatch well merged to https://w3ctag.github.io/design-principles/#cant-avoid-monkey-patching. I think it describes what this group wants from monkeypatches, but if I got anything wrong, feel free to comment on the PR, and I'll try to fix it. (or you can always send your own PR of course.)

[15:39:59.0921] <Eric Portis (he/him)>
annevk: Safari 17's `Accept` header when making image fetches seems to be: `image/webp,image/avif,image/jxl,image/heic,image/heic-sequence,video/*;q=0.8,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5` (124 bytes). IIUC from https://github.com/whatwg/fetch/issues/862 and https://fetch.spec.whatwg.org/#cors-safelisted-request-header, the limit before a preflight is required is 128 bytes. Is that an impending problem, or (more likely) am I misunderstanding how CORS works?

[15:43:14.0313] <Eric Portis (he/him)>
zcorpan: Ah! I had only been testing with *no* src attribute, which behaves differently than an attribute with no value. Fun!

[15:44:31.0472] <Eric Portis (he/him)>
zcorpan: Anyways, I think I finally have my mental model straight on this. Hoping to write something up about it soon; I'll definitely ping you for review once I do.


2023-06-08
[03:46:41.0101] <annevk>
Eric Portis (he/him): that does seem like a potential problem

[03:51:26.0474] <Noam Rosenthal>
annevk: Eric Portis (he/him)  We recently had the same problem with chtomium where tinkering with the Accept header triggered preflights. perhaps we can find a solution for this in the standard, like special-case the `Accept` header for the 128bytes limit?

[04:37:13.0585] <annevk>
I'd rather we just reduce the bloat somehow

[14:28:32.0035] <Eric Portis (he/him)>
annevk: Noam Rosenthal I have toyed with the idea of something like `Sec-CH-Accept-Codecs` when thinking about how UAs could add `codecs` or `profiles` parameters to media types when requesting videos. I ended up deciding this was a bad idea: videos are generally requested late so you can use the Media Capabilities API before making a request. But images are requested early, so maybe Client Hints could be a useful tool here.


2023-06-09
[22:25:54.0277] <Noam Rosenthal>
> <@annevk:matrix.org> I'd rather we just reduce the bloat somehow

I wish... Sounds like a big project in terms of compatibility 

[22:27:18.0844] <Noam Rosenthal>
Separate topic: is the event loop still alive when a document is bfcached? Seems like it is but making sure

[22:27:28.0737] <Noam Rosenthal>
Domenic: ^^

[22:31:25.0888] <Domenic>
> <@noamr:matrix.org> Separate topic: is the event loop still alive when a document is bfcached? Seems like it is but making sure

Event loops are per-agent, not per-document. All tasks are tagged with a document though, and those coming from "not fully active" documents (including those in bfcache) will not run, while in bfcache.

[03:30:56.0274] <Noam Rosenthal>
annevk: perhaps the accept header can be a topic for TPAC?


2023-06-12
[01:53:57.0443] <Magnus Jurdal>
Hello to you all


[07:48:53.0053] <annevk>
zcorpan: Mozilla is stated to support https://github.com/whatwg/html/pull/9309. Is that also true if your comment isn't addressed?

[12:02:26.0818] <hacknorris>
quick question but someone knows how to make default value for empty or nonexistent attribute in dtd? just quote doesnt work...

[12:02:45.0840] <hacknorris>
and if i have fixed it still demands content

[12:04:55.0899] <hacknorris>
like if i wanted this in dtd: 
```
<!ATTLIST thing type (a|b|c) "c">
```
and this in xml: 
```
<thing/>
```

[12:05:41.0017] <hacknorris>
but doesnt work

[12:12:53.0907] <hacknorris>
be tomorrow


2023-06-13
[00:48:09.0433] <zcorpan>
hacknorris: if the DTD is in the external subset and you have a non-validating UA then it won't read the DTD. You need to have the default value declarations at least in the internal subset. But also, why are you using DTDs at all?

[01:32:13.0912] <zcorpan>
ok now I don't know for how long this frustration has been building up haha https://github.com/w3c/csswg-drafts/issues/8959

[03:20:13.0922] <zcorpan>
> <@annevk:matrix.org> zcorpan: Mozilla is stated to support https://github.com/whatwg/html/pull/9309. Is that also true if your comment isn't addressed?

Good question, I think so but can check with freddy. How to deal with newlines here depends a bit on what we can do for URLs I think

[03:20:29.0209] <zcorpan>
freddy: ^

[04:26:50.0022] <freddy>
The question was basically about newlines/minification. Do we have data that would help inform us how much of the web is minified? What %age of web pages would be left unprotected by this?

[05:01:04.0468] <Sam Sneddon [:gsnedders]>
> <@zcorpan:mozilla.org> ok now I don't know for how long this frustration has been building up haha https://github.com/w3c/csswg-drafts/issues/8959

the thing that gets me really is how inconsistent it is as to whether it's normative or not 😐️

[05:08:45.0628] <zcorpan>
freddy: I could find out but web pages might be a mashup where some parts are minimized and some are not... Maybe I can count the number of `\r?\n`s

[05:09:34.0235] <freddy>
To be quick. I think this is worth following without the comment. I also think it's worth tracking this as a next step though.

[06:30:03.0265] <smaug>
Hmm, I see _ before any() in https://dom.spec.whatwg.org/#interface-AbortSignal

[07:01:59.0700] <annevk>
smaug: yes, that's IDL

[07:02:15.0174] <annevk>
smaug: we should probably figure out a way to fix the Web IDL parser since this is confusing people

[08:00:44.0892] <hacknorris>
> <@zcorpan:mozilla.org> hacknorris: if the DTD is in the external subset and you have a non-validating UA then it won't read the DTD. You need to have the default value declarations at least in the internal subset. But also, why are you using DTDs at all?

why i use? mainly for testing ( i know, maybe reinventing html wheel is bad but i just wanted to code a little 😆 ). thx for info btw


2023-06-14
[19:46:09.0155] <Domenic>
I wonder what the story behind this RFC standardizing C header and implementation files is. https://www.rfc-editor.org/rfc/rfc6234#section-8

[19:54:18.0475] <Jeffrey Yasskin>
> <@domenicdenicola:matrix.org> I wonder what the story behind this RFC standardizing C header and implementation files is. https://www.rfc-editor.org/rfc/rfc6234#section-8

"Much of the text herein was adapted by the authors from FIPS 180-2." 

[19:55:19.0712] <Jeffrey Yasskin>
I don't know for sure that FIPS 180-2 defines SHA-2 using C code, but I wouldn't put it past them.

[06:20:50.0257] <Adam Rice>
> <@domenicdenicola:matrix.org> I wonder what the story behind this RFC standardizing C header and implementation files is. https://www.rfc-editor.org/rfc/rfc6234#section-8

This isn't even the only RFC containing source code. See https://martinthomson.github.io/rfc-code/

[07:33:06.0128] <bkardell>
wow idk what happened to that :dir pull request, so sorry about that... I *think* it is fixed now

[07:33:40.0666] <zcorpan>
annevk https://github.com/whatwg/html/issues/5880#issuecomment-1589229150

[07:34:55.0389] <smaug>
How does fetch for import() work in workers? https://tc39.es/ecma262/#sec-import-call-runtime-semantics-evaluation calls HostLoadImportedModule ,but https://html.spec.whatwg.org/#hostloadimportedmodule throws in 2.3. 

[07:35:00.0234] <smaug>
I'm missing something obvious

[07:40:10.0568] <annevk>
bkardell: dunno if you did this, but I personally always find it useful to gloss over the changes tab of the pull request for a quick self-review to catch any obvious mistakes

[07:41:00.0824] <annevk>
zcorpan: prolly? If we're the only browser that does that still we could remove it I think

[07:41:22.0595] <evilpie>
smaug: I think this handles worklets and serviceworkers 

[07:41:37.0174] <annevk>
nicolo-ribaudo: ^^

[07:42:00.0146] <smaug>
evilpie: ha, yes, WorkletGlobalScope. Idiot me 🙂 

[08:44:21.0529] <bkardell>
> <@annevk:matrix.org> bkardell: dunno if you did this, but I personally always find it useful to gloss over the changes tab of the pull request for a quick self-review to catch any obvious mistakes

yeah I _generally_ do that myself which is why this was so suprising - but I know that I was rushing to get some things done as I was in and out the door a lot last week with my mom in the hospital - so probably i tried to squeeze something in there in a rush and was careless/sent the push and didn't stick around to check

[08:44:59.0223] <bkardell>
btw - does anyone else find that these PRs can get _really_ hard to follow as people are commenting over time and things are getting resolved

[08:59:27.0183] <Jeffrey Yasskin>
> <@bkardell:igalia.com> btw - does anyone else find that these PRs can get _really_ hard to follow as people are commenting over time and things are getting resolved

This is why I suggest that people do big changes as monkeypatch specs in their own repositories so that we can file and resolve issues instead of just making PR comments.

[09:08:44.0621] <annevk>
Yeah it varies, definitely depends on the size of the PR, turnaround time from both sides, and using fixup commits and resolving threads accurately. And even when all of that is followed you might run into GitHub limitations at some point, though I guess that's really about size.

[09:19:32.0891] <annevk>
Personal repositories are a bit of a problem IPR-wise. I hope the WHATWG SG can get to a better solution there, but it will likely take a while.

[09:21:09.0820] <Jeffrey Yasskin>
> <@annevk:matrix.org> Personal repositories are a bit of a problem IPR-wise. I hope the WHATWG SG can get to a better solution there, but it will likely take a while.

It's really easy to get a repository added into the WICG once it has enough support to be considered as a WHATWG PR. It'll be better to have a dedicated WHATWG org for that, as I think the SG is working on, but the WICG should work in the interim.

[09:30:34.0508] <annevk>
Jeffrey Yasskin: right, was just reacting to "personal repo".

[09:31:23.0121] <Jeffrey Yasskin>
Ooooh, by "their own repositories" I meant the proposal's own repository, not the author's own repository.

[09:38:10.0704] <bkardell>
> <@annevk:matrix.org> Personal repositories are a bit of a problem IPR-wise. I hope the WHATWG SG can get to a better solution there, but it will likely take a while.

aren't the pulls generally from personal repository forks? 

[09:45:31.0794] <Jeffrey Yasskin>
> <@bkardell:igalia.com> aren't the pulls generally from personal repository forks?

The PR is a "Contribution" under https://whatwg.org/ipr-policy#21-contribution, and the author of the PR is clearly making the right IPR commitments ... but I'm not sure that anyone who proposes changes to the fork is covered. A dedicated repository in a CG is clearer on that front.

[09:46:21.0065] <Jeffrey Yasskin>
> <@bkardell:igalia.com> aren't the pulls generally from personal repository forks?

 * The PR is a "Contribution" under https://whatwg.org/ipr-policy#21-contribution, and the author of the PR is clearly making the right IPR commitments ... but I'm not sure that everyone who proposes changes to the fork is covered. A dedicated repository in a CG is clearer on that front.

[09:51:56.0394] <bkardell>
oh I see what you're saying... so if I did as it sounded like you were suggesting I would have asked for comments and issues on my repo and then maybe people can't get thatright?

[09:52:04.0451] <bkardell>
 * oh I see what you're saying... so if I did as it sounded like you were suggesting I would have asked for comments and issues on my repo and then maybe people can't get that right Jeffrey Yasskin ? 

[10:06:17.0168] <Jeffrey Yasskin>
> <@bkardell:igalia.com> oh I see what you're saying... so if I did as it sounded like you were suggesting I would have asked for comments and issues on my repo and then maybe people can't get that right Jeffrey Yasskin ?

If the change is big enough, my suggestion would be to create a new repository in the WICG with a spec for the change, and ask for comments and issues there. So, it's not generally worth doing for something you've already sent a PR for, just for future changes.

[10:20:13.0248] <annevk>
Domenic: krosylight: am I correct in thinking that landing https://github.com/whatwg/webidl/pull/1311 won't break the world? Looking at https://whatpr.org/webidl/1311.html#AllowSharedBufferSource perhaps webidlparser doesn't need any updates...

[10:21:51.0124] <krosylight>
> <@annevk:matrix.org> Domenic: krosylight: am I correct in thinking that landing https://github.com/whatwg/webidl/pull/1311 won't break the world? Looking at https://whatpr.org/webidl/1311.html#AllowSharedBufferSource perhaps webidlparser doesn't need any updates...

The parser will just accept it as an identifier instead of a keyword, which is totally okay

[10:32:04.0545] <annevk>
krosylight: thanks, I'll land it tomorrow then I think, time allowing

[11:15:58.0807] <zcorpan>
annevk: step 9 doesn't use the local name to decide anything, it's only for making the attributes available to https://html.spec.whatwg.org/#html-integration-point

[11:56:13.0820] <zcorpan>
We have both "security-tracker" and "security/privacy" labels. Is this intentional?


2023-06-15
[17:33:01.0691] <Domenic>
I think the former is a W3C thing?

[23:33:15.0039] <annevk>
That's it and yeah, it's intentional therefore

[23:36:31.0917] <annevk>
zcorpan: good point, though that's an example so maybe it's used for other things?

[00:00:35.0059] <zcorpan>
annevk: I've looked at all instances of "context" and "token" in the treebuilder and can't find anything else, so the "e.g." is just adding uncertainty

[00:03:46.0250] <annevk>
zcorpan: maybe we should make it a much more specific check then for when the context element is MathML annotation-xml

[00:07:16.0142] <zcorpan>
annevk: yeah maybe

[00:08:02.0689] <zcorpan>
I'm not a fan of annotation-xml parsing differently based on an attribute value

[00:08:27.0619] <annevk>
zcorpan: removing it altogether seems like a bigger project, but I tend to agree that's bogus


2023-06-18
[03:52:50.0164] <Ali Hammad>
is there a way to have dark background and light text for html spec at html.spec.whatwg.org ?


2023-06-19
[23:37:40.0535] <freddy>
Not yet. You could use a browser add-on like https://addons.mozilla.org/en-US/firefox/addon/darkreader/

[23:39:39.0128] <annevk>
So with critical client hints the server essentially asks for an additional roundtrip, akin to a redirect or authentication required? Can the server only do this in response to a GET?

[15:42:14.0443] <Vadim Dalecky>
Why are there two file system specifications? File System Access API vs File and Directory Entries API. What are the main differences?


2023-06-20
[17:56:28.0914] <Vadim Dalecky>
Implemented Node.js `fs` API on top of File System Access API (an the other way around), PR: https://github.com/streamich/memfs/pull/916

Live demo: https://streamich.github.io/memfs/ - in the demo if you open dev console, there will be exposed `fs` global, which allows you to perform all Node.js file system calls, including streams (createWriteStream) and synchronous calls. It runs on top of OPFS.

[17:58:42.0482] <Vadim Dalecky>
 * Implemented Node.js `fs` API on top of File System Access API (an the other way around), PR: https://github.com/streamich/memfs/pull/916

Live demo: https://streamich.github.io/memfs/ - in the demo if you open dev console, there will be exposed `fs` global, which allows you to perform all Node.js file system calls, including streams (createWriteStream) and synchronous calls. It runs on top of OPFS. One can use OPFS Explorer to verify: https://chrome.google.com/webstore/detail/opfs-explorer/acndjpgkpaclldomagafnognkcgjignd

[19:36:57.0095] <sideshowbarker>
TabAtkins: Is `bikeshed echidna` intended to be usable under CI? If so, how do groups use the `W3C username` and `W3C password`? I mean in particular, how/where can they store the `W3C password` value in a GitHub repo? I guess they encrypt it and store it encrypted?

[20:16:33.0069] <sideshowbarker>
Help. Using bikeshed v3.12.1, when I add an `Issue Tracking` value, that causes bikeshed to fail with this:

```
Traceback (most recent call last):
  File "/opt/homebrew/bin/bikeshed", line 8, in <module>
    sys.exit(main())
             ^^^^^^
  File "/Users/mike/workspace/bikeshed/bikeshed/cli.py", line 439, in main
    handleSpec(options, extras)
  File "/Users/mike/workspace/bikeshed/bikeshed/cli.py", line 496, in handleSpec
    doc.preprocess()
  File "/Users/mike/workspace/bikeshed/bikeshed/Spec.py", line 144, in preprocess
    self.assembleDocument()
  File "/Users/mike/workspace/bikeshed/bikeshed/Spec.py", line 156, in assembleDocument
    self.lines, self.mdDocument = metadata.parse(lines=self.lines)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/mike/workspace/bikeshed/bikeshed/metadata.py", line 1007, in parse
    md.addData(match.group(1), match.group(2), lineNum=line.i)
  File "/Users/mike/workspace/bikeshed/bikeshed/metadata.py", line 169, in addData
    val = md.parse(key, val, lineNum=lineNum)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/mike/workspace/bikeshed/bikeshed/metadata.py", line 719, in parseLinkedText
    entries.append((pieces[0], pieces[1]))
                               ~~~~~~^^^
IndexError: list index out of range
```

Look familiar to anybody?

[20:27:21.0458] <sideshowbarker>
Stepping through it a debugging, I can see there is in fact no `pieces[1]` there, because bikeshed is doing this:
```
    for v in vals:
        pieces = v.rsplit(" ", 1)
        entries.append((pieces[0], pieces[1]))
```
…where
  - `vals` is `['https://github.com/WebAssembly/spec/issues']`
  - `v` is `https://github.com/WebAssembly/spec/issues`
  - `pieces` is `['https://github.com/WebAssembly/spec/issues']`

So, the source seems to be assuming `v` contains at least one space character. But it doesn’t.

[20:27:30.0913] <sideshowbarker>
 * Stepping through it and debugging, I can see there is in fact no `pieces[1]` there, because bikeshed is doing this:

```
    for v in vals:
        pieces = v.rsplit(" ", 1)
        entries.append((pieces[0], pieces[1]))
```

…where

- `vals` is `['https://github.com/WebAssembly/spec/issues']`
- `v` is `https://github.com/WebAssembly/spec/issues`
- `pieces` is `['https://github.com/WebAssembly/spec/issues']`

So, the source seems to be assuming `v` contains at least one space character. But it doesn’t.

[23:01:47.0193] <sideshowbarker>
Now struggling with trying to figure out where bikeshed picks up boilerplate from.

I’m changing the `bikeshed/spec-data/readonly/boilerplate/wasm/status-WD.include` in my local bikeshed clone, then running `pip3 install -e .` and `bikeshed update` — but bikeshed doesn’t seem to be using that boilerplate file. Instead, it seems to be picking up the boilerplate from somewhere else.

[23:39:12.0859] <Andreu Botella>
> <@sideshowbarker:matrix.org> Now struggling with trying to figure out where bikeshed picks up boilerplate from.
> 
> I’m changing the `bikeshed/spec-data/readonly/boilerplate/wasm/status-WD.include` in my local bikeshed clone, then running `pip3 install -e .` and `bikeshed update` — but bikeshed doesn’t seem to be using that boilerplate file. Instead, it seems to be picking up the boilerplate from somewhere else.

https://github.com/speced/bikeshed-boilerplate/

[23:42:16.0324] <youennff>
Adam RiceMattias Buelens, can we finalise https://github.com/whatwg/streams/pull/1271 ?

[23:55:41.0279] <sideshowbarker>
> <@abotella:igalia.com> https://github.com/speced/bikeshed-boilerplate/

Thanks. But if I’m just running bikeshed locally, and if I don’t have any `bikeshed-boilerplate` clone, then I can’t see what it’s doing.

Well, apparently, I can see that it seems to be completely ignoring any changes I make to the `bikeshed/spec-data/readonly/boilerplate` files in my clone of the `bikeshed`. So I don’t understand what the purpose of having those `bikeshed/spec-data/readonly/boilerplate` would be to begin with…

Anyway, I now see that bikeshed is creating a `bikeshed/spec-data/boilerplate/` directory (that is, without the `readonly`), and I guess it does that by downloading the https://github.com/speced/bikeshed-boilerplate/ sources. And I don’t see any way to prevent it from doing that.

So I guess the only way to make local changes is to edit the `bikeshed/spec-data/boilerplate/` files after it downloads them, and change those, and then hope I don’t accidentally run something that causes them to be re-downloaded so that my local changes get clobbered.


[23:57:06.0419] <Andreu Botella>
my understanding was that it only updated the boilerplate when you run `bikeshed update`

[01:29:33.0135] <sideshowbarker>
Andreu Botella: I had been trying with `bikeshed echidna` (rather than `bikeshed spec`), and was getting errors back from Echidna that seemed to indicate it was seeing the wrong boilerplate. But I now think those problems are just Echidna quirks rather then Bikeshed issues.

[01:31:17.0764] <sideshowbarker>
Ms2ger: https://www.w3.org/groups/wg/wasm/charters shows that the WebAssembly WG has been out of charter since 2022-07-31 — and because it’s not currently chartered, then apparently there’s no way Echidna will let any updates be published in TR space.

[01:31:41.0875] <Ms2ger>
lol

[01:34:53.0680] <sideshowbarker>
I don’t know of plh doesn’t realize the group is out of charter, or doesn’t realize we can’t auto-publish when it’s out of charter, or what.
Regardless, he needs to get the group rechartered or re-extended.

[06:19:11.0502] <Ms2ger>
sideshowbarker: I don't have the time or energy to deal with that, but feel free to mention this to plh :)

[08:23:06.0023] <annevk>
zcorpan: the thing I worry about most with something like `<textarea pattern>` is that the existing UI is not great: `data:text/html,<form><input pattern=[a-z] name=x><input type=submit></form>`

[08:24:01.0031] <annevk>
zcorpan: I've heard at least from some developers the desire to constrain what can be used rather than what is valid, which probably requires a more declarative solution

[08:24:30.0906] <annevk>
(and would also allow for matching input modes and such)

[08:24:40.0569] <zcorpan>
annevk: you can use `title="Letters only"`

[08:26:12.0258] <zcorpan>
seems like it doesn't show up in the message in Safari but works in Firefox and Chrome

[08:26:15.0904] <annevk>
zcorpan: seems that's not universally supported, but also not sure if that ends up being super clear to all users

[08:26:43.0001] <annevk>
ü is a letter in these parts

[08:29:36.0551] <zcorpan>
"Letters in the range a-z, only lowercase", but sure.

[08:30:40.0278] <zcorpan>
annevk: so more like how `maxlength` works?

[08:33:30.0287] <annevk>
zcorpan: yeah maybe, that one has its own issue with regards to the meaning of length :-)

[09:09:13.0480] <annevk>
zcorpan: filed https://bugs.webkit.org/show_bug.cgi?id=258301 btw

[10:55:46.0972] <TabAtkins>
sideshowbarker: the `spec-data/readonly` folder is for the version of Bikeshed's data files that ships with the initial install; on first run I immediately move everything up one folder to just be in `spec-data` (and `bikeshed update` only changes `spec-data` folder). I then don't look at `readonly` ever again.

[10:58:24.0298] <TabAtkins>
If you want to use local versions of boilerplates because whatever's getting downloaded by `bikeshed update` is bad, ideally gimme a PR at <https://github.com/speced/bikeshed-boilerplate>, but failing that just put the appropriate boilerplate file next to your spec source. Bikeshed'll use local files over stuff in its database.

[10:59:23.0770] <TabAtkins>
You'll need to set [`Local Boilerplate`](https://speced.github.io/bikeshed/#metadata-local-boilerplate) as well.


2023-06-21
[07:16:18.0513] <bkardell>
happy to leave a similar comment on https://github.com/whatwg/html/pull/9166 but I feel like it might be better to get past simple confusions in chat, so I'd like to clarify something. annevk are you suggesting that you are opposed to the rearranging vs what we tried to do in the original PR that this was replacing - to weave shadow into that already complex but flat version?  I found it very complex, some others here seemed to also think there was room for improvement. I tried and shopped it to at least 3 others before assuming this would be an improvement and make shadow dom fit easier, but... you don't think so?

[07:16:46.0620] <bkardell>
(I'd just like to clarify / not misunderstand the comment before I reply)

[07:25:30.0099] <annevk>
bkardell: I don't think it works as-is, you definitely need to introduce each `<dl>` list with a preceding sentence as we do elsewhere

[07:26:06.0104] <annevk>
bkardell: I would have preferred the restructuring to be a separate editorial change from the shadow tree changes, as reviewing the combination is hard

[07:27:34.0424] <bkardell>
> <@annevk:matrix.org> bkardell: I don't think it works as-is, you definitely need to introduce each `<dl>` list with a preceding sentence as we do elsewhere

its not the only nested dl that's in there, I took the idea from others

[07:29:07.0067] <bkardell>
> <@annevk:matrix.org> bkardell: I would have preferred the restructuring to be a separate editorial change from the shadow tree changes, as reviewing the combination is hard

yeah, I think that makes a lot of sense and regret not doing that. It's mainly the priority is to get the shadow dom stuff in more than make it easier to follow, but trying to weave the shadow dom stuff in is so much harder unless you rearrange it first, I think

[07:29:25.0547] <bkardell>
also, my time on this is just limited

[07:29:52.0964] <bkardell>
where do you prefer we go from here?  I suppose I can _try_  doing a lesser pull first

[07:32:37.0109] <annevk>
I'm not sure what precedent you mean. HTML has a lot of old algorithms that could do with some refactoring. They might not be a good source for inspiration. As for what to tackle next, if you feel tackling all the feedback at once is too much I'd recommend focusing on a restructuring PR first. It seems like it should then not be a whole lot of effort to put the shadow root stuff in.

[07:33:40.0147] <annevk>
But if you want to address it all at once that's okay too.

[10:07:28.0093] <bkardell>
I think the case for rearranging it is weaker without having to incorporate shadow dom but if you think we can be aware of that, I'm willing to try 2 steps

[10:40:15.0853] <annevk>
bkardell: yeah, we'd view it through that lens (and you can make it explicit in your commit message)

[11:03:50.0536] <bkardell>
interesting... does the html build use Prince XML?

[11:03:53.0875] <bkardell>
for what?

[11:09:10.0028] <Jeffrey Yasskin>
https://wicg.github.io/turtledove/ has a couple fields that are passed to the browser in one realm, stored for a while, and then passed to a function in another realm. The spec currently uses JSON for this, where it might be able to use  StructuredSerializeForStorage() instead, but my question for this group is whether there's a good WebIDL pattern for documenting that restriction on types and creating the resulting objects in the right realm? 

https://w3c.github.io/IndexedDB/ does it all manually, but maybe something better has come along since then...

[11:12:01.0797] <Jeffrey Yasskin>
Ah, they don't use Structured Clone in order to defend the data's recipients from too-complex input, so if we add something in WebIDL for this, it couldn't be directly shared by IndexedDB (and maybe couldn't anyway since it would change the order of errors in IndexedDB).

[11:17:44.0636] <Jeffrey Yasskin>
 * Ah, they don't use Structured Clone in order to defend the data's recipients from too-complex input (https://github.com/WICG/turtledove/issues/654), so if we add something in WebIDL for this, it couldn't be directly shared by IndexedDB (and maybe couldn't anyway since it would change the order of errors in IndexedDB).


2023-06-22
[17:09:43.0180] <bkardell>
annevk: I think this is what we said? https://github.com/whatwg/html/pull/9452/commits does it help?

[18:40:53.0381] <Domenic>
> <@bkardell:igalia.com> interesting... does the html build use Prince XML?

The full version that runs on CI does, to produce the PDF

[18:41:38.0901] <Domenic>
> <@jyasskin:matrix.org> https://wicg.github.io/turtledove/ has a couple fields that are passed to the browser in one realm, stored for a while, and then passed to a function in another realm. The spec currently uses JSON for this, where it might be able to use  StructuredSerializeForStorage() instead, but my question for this group is whether there's a good WebIDL pattern for documenting that restriction on types and creating the resulting objects in the right realm? 
> 
> https://w3c.github.io/IndexedDB/ does it all manually, but maybe something better has come along since then...

Interesting, I would have used structs with manual serialize/deserialize. Reusing structured clone or JSON is a neat trick, I guess.

[18:42:05.0921] <Domenic>
Not sure what you mean by Web IDL pattern. Generally IDL object instances are restricted by realm?

[19:07:48.0702] <bkardell>
> <@domenicdenicola:matrix.org> The full version that runs on CI does, to produce the PDF

Interesting!

[20:17:08.0986] <Jeffrey Yasskin>
> <@domenicdenicola:matrix.org> Not sure what you mean by Web IDL pattern. Generally IDL object instances are restricted by realm?

Well, if you take a WebIDL DOMString, you can safely pass that to a different realm even if the DOMString was initialized from a non-string object, because DOMStrings are defined as Infra strings (https://webidl.spec.whatwg.org/#idl-DOMString). It would be straightforward to define a JSONObject WebIDL type whose 'converted to an IDL value' steps ran https://infra.spec.whatwg.org/#serialize-a-javascript-value-to-a-json-string, and then it'd be safe to pass those instances across realms too.

[20:20:27.0361] <Jeffrey Yasskin>
Similarly, a StructuredCloneableObject could do the same with StructuredSerializeForStorage, I think. And we could change postMessage to take those instead of `any`...

[20:21:44.0174] <Jeffrey Yasskin>
(Well, not really, because of the _transfer_ argument, but there might be other simpler places.)

[20:22:22.0299] <Domenic>
I see what you mean, hmm...

[20:23:08.0694] <Domenic>
Very related to your point in https://github.com/whatwg/webidl/issues/1327. This axis of "realm-independent vs. not" is not one I've thought enough about, I guess, but it's an important one.

[20:23:58.0238] <Jeffrey Yasskin>
Yeah. I'm thinking about this because Protected Audience does a lot of these cross-realm transfers.

[20:24:39.0093] <Domenic>
I feel like we've also used dummy realms for related things in the past? Like a realm that is never exposed to anyone. IndexedDB maybe?

[20:25:18.0384] <Jeffrey Yasskin>
IndexedDB does that, but I don't think it has to. It does, in fact, re-serialize from that dummy Realm into the actual storage.

[20:26:16.0056] <Jeffrey Yasskin>
I think this has gotten clearer recently, as we've re-cast the WebIDL types into Infra types.

[20:27:21.0999] <Domenic>
I think the major missing piece is a kind of recursive definition of "realm-agnostic". Like a dictionary containing an interface is not, a dictionary containing strings is.

[20:28:38.0485] <Jeffrey Yasskin>
I thought we'd need that, but actually, you can pass a reference to an interface through 'in parallel', create a dictionary containing that reference in parallel, and then queue a task to return that dictionary to JavaScript.

[20:30:15.0127] <Jeffrey Yasskin>
You couldn't create such a dictionary in parallel from whole cloth, and you couldn't pass it all the way to a different agent cluster, but otherwise it works.

[20:33:24.0819] <Jeffrey Yasskin>
(Maybe we do want a recursive definition of "safe to pass across origins and agent clusters"?)

[21:16:17.0721] <Domenic>
Hmm, doing that would make me pretty uncomfortable... I guess because it's too easy to treat that reference as something non-opaque.

[23:55:26.0331] <annevk>
There's a lot of hand-waving around in parallel, agents, and tasks today. It would be nice to see that formalized, but it would be quite a bit of work.

I'm not sure why IndexedDB needs a custom realm. It can just store the serialized thing, no? Might be an artifact from how "structured clone" was written back in the day and never properly refactored.

[00:07:39.0298] <Domenic>
Yeah that sounds likely

[00:28:40.0219] <annevk>
Domenic: so for https://github.com/whatwg/html/pull/4613 I guess you ended up using rebase & merge and that doesn't cause attribution to go wrong? (Because it will use attribution from the commit which was correct.)

[00:37:04.0400] <Domenic>
Yep

[02:43:48.0316] <annevk>
Ah, good to know that works.


2023-06-23
[06:15:05.0389] <annevk>
Welcome dveditz 👋

[07:18:57.0763] <annevk>
Well https://twitter.com/WeizmanGal/status/1672206009643970560 is cursed, maybe we should address that

[07:21:29.0103] <Sam Sneddon [:gsnedders]>
Do indexed getters have higher precedence than named getters? But I guess you still need to somehow distinguish them…

[07:24:35.0903] <annevk>
Yeah, I'm not sure what "addressing" might mean here. I've long thought that a complete opt-out would make sense, but that might not be a meaningful enough improvement on its own

[07:26:20.0514] <Sam Sneddon [:gsnedders]>
I mean a CSP policy that totally opted out seems… not silly, at first glance?

[07:26:37.0230] <Sam Sneddon [:gsnedders]>
But also I have thought about this for ~seconds, so, ymmv.

[07:49:56.0972] <bkardell>
annevk: was this issue about the mathml core spec? https://github.com/w3c/mathml-core/issues/195

[09:17:22.0643] <annevk>
bkardell: I was assuming that code was based on something in the spec

[09:19:09.0054] <annevk>
bkardell: I'll try to clarify now that I've seen https://w3c.github.io/mathml-core/#html-and-svg

[09:19:28.0663] <bkardell>
hmm the only thing core says is in a note

```
The <math> element can be used at position permitted for flow content (e.g. a <foreignObject> element) or phrasing content.
Any phrasing content can be used inside mi, mo, mn, ms and mtext elements.
The <svg> element can be used inside annotation-xml elements.
Any flow content can be used inside annotation-xml elements with encoding application/xhtml+xml or text/html.
```

[09:19:46.0284] <bkardell>
ah ok you see that

[09:25:03.0862] <bkardell>
thx annevk 

[10:26:31.0338] <dveditz>
> <@gsnedders:mozilla.org> I mean a CSP policy that totally opted out seems… not silly, at first glance?

I love CSP, and at one point envisioned it being used for all security policy things like this, but that was early on when we (Mozilla folks, at least) naively thought servers would mostly go for a site-wide policy served from a URL referenced in the header. It could expand as needed because it would end up cached like the site's large style sheets or JS framework libraries. But given the reality of today's complex header policies in practice I'd prefer seeing if there's a better delivery mechanism for that.

[10:26:49.0032] <dveditz>
Is "Document Policy" going anywhere?

[10:41:51.0555] <dveditz>
Opt out of what, exactly? Maybe opt IN to actually enforcing the lowercase "must"s in the spec?
> When specified on HTML elements, the id attribute value must be unique amongst all the IDs in the element's tree and must contain at least one character. The value must not contain any ASCII whitespace.

[10:43:08.0736] <dveditz>
although what would enforcement mean? probably that "invalid" ids are simply ignored (plus a console error) and the web dev has to debug their page

[10:43:59.0791] <dveditz>
oops, misread "character" as "alpha character"

[10:46:46.0542] <dveditz>
 * oops, misread "character" as "alpha character". that wouldn't solve the problem in the tweet.

[10:48:10.0281] <Sam Sneddon [:gsnedders]>
> <@dveditz:mozilla.org> Opt out of what, exactly? Maybe opt IN to actually enforcing the lowercase "must"s in the spec?
> > When specified on HTML elements, the id attribute value must be unique amongst all the IDs in the element's tree and must contain at least one character. The value must not contain any ASCII whitespace.

Presumably opt-out of there being a named getter on Window at all

[10:50:15.0948] <dveditz>
hm, ok. I was trying to go in the direction of only having valid ones. But good point, why should all the elements be stuck willy-nilly on the global in the first place?

[10:58:07.0769] <dveditz>
could use the same switch to turn of `document.all` while we're at it

[10:58:17.0590] <dveditz>
 * could use the same switch to turn off `document.all` while we're at it

[14:31:22.0389] <Eric Portis (he/him)>
> <@annevk:matrix.org> So with critical client hints the server essentially asks for an additional roundtrip, akin to a redirect or authentication required? Can the server only do this in response to a GET?

1. Yes, I think that's right. "The restart retries the entire navigation (including any prior redirects)." 2. It may make sense to limit it to idempotent requests, although I don't think that's currently spec'd anywhere. Might be worth hashing out in https://github.com/WICG/client-hints-infrastructure/issues/154


2023-06-24
[10:55:03.0640] <Dominic Farolino>
Can you explicitly pass `undefined` in as an argument for an `optional` parameter? Or will that exclusively look for an overload without _any_ param period, and blow up if it doesn't find it?

[10:55:47.0691] <Dominic Farolino>
I think it is valid (to pass `undefined` in an `optional` param), since we want passing undefined vs passing nothing to be treated the same generally, right?

[10:55:56.0067] <Dominic Farolino>
 * WebIDL: Can you explicitly pass `undefined` in as an argument for an `optional` parameter? Or will that exclusively look for an overload without _any_ param period, and blow up if it doesn't find it?


2023-06-25
[01:02:23.0340] <Domenic>
If there are overloads, then passing undefined can be different than not passing the param

[01:02:37.0266] <Domenic>
One of the early steps of overload resolution is to compare the number of arguments passed

[01:02:48.0075] <Domenic>
But if there are no overloads, passing undefined will be equivalent to not passing anything

[01:02:58.0848] <Domenic>
(I am about 70% confident in this)


2023-06-26
[00:10:11.0531] <sideshowbarker>
I’d appreciate if anybody can make a bit of free time to do a technical review of the current contents of https://pr27547.content.dev.mdn.mozit.cloud/en-US/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers

Specifically, if you see anything listed there erroneously, or if you see anything _not_ listed that _should be_ included.

The diff is at https://github.com/mdn/content/pull/27547/files and the change is intended to align with the existing content at https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API#web_workers_concepts_and_usage

(And yeah, those are two different articles and the content is basically getting duplicated across those two articles, and maybe ideally it should be in one place instead, rather than being duplicated. And personally have never reviewed the existing content in the Web_Workers_API article (that the change in this current PR is aligning with), so I also don’t know if it’s accurate and complete — but if it’s not, then any fixes we make to the PR can later be ported to the Web_Workers_API too.)


[07:48:09.0813] <Dominic Farolino>
annevk: is WebKit still planning on marking https://github.com/WebKit/standards-positions/issues/197 as positive?

[07:57:01.0410] <Dominic Farolino>
Why can't dictionary types be nullable when used as function parameters? https://webidl.spec.whatwg.org/#idl-nullable-type:~:text=Note%3A%20Although%20dictionary%20types%20can%20in%20general%20be%20nullable%2C%20they%20cannot%20when%20used%20as%20the%20type%20of%20an%20operation%20argument%20or%20a%20dictionary%20member

[07:58:23.0866] <annevk>
Dominic Farolino: dictionaries are always given, a nullable dictionary would be quite weird

[08:51:20.0070] <Dominic Farolino>
Oh, does null convert into an empty dict then?

[08:53:14.0236] <Jeffrey Yasskin>
> <@domfarolino:matrix.org> Oh, does null convert into an empty dict then?

Yes: https://webidl.spec.whatwg.org/#es-dictionary

[12:14:32.0973] <Jeffrey Yasskin>
When building a URL's query string in a specification, should we have folks use https://url.spec.whatwg.org/#concept-urlencoded-serializer, or is there something better to use that limits its encoding to the 'component percent-encode set'? (https://github.com/WICG/turtledove/issues/650#issuecomment-1608007877)


2023-06-27
[00:51:29.0394] <annevk>
Jeffrey Yasskin: depends, if they're trying to mimic HTML forms with key/value pairs, they should definitely use that

[03:51:48.0618] <annevk>
In particular urlencoded is the only standardized format we have for key/value pairs in URLs so it's not even so much about mimicking HTML forms, it's just that if you're going for that semantic you want to use that format.

[06:17:23.0983] <nevolaa>
Бь9

[06:17:26.0411] <nevolaa>
Зшз7з
щ
жлз

[06:18:09.0137] <nevolaa>
главное не переживай87 сильно больше6 им

[08:42:29.0971] <Jeffrey Yasskin>
> <@annevk:matrix.org> In particular urlencoded is the only standardized format we have for key/value pairs in URLs so it's not even so much about mimicking HTML forms, it's just that if you're going for that semantic you want to use that format.

Ok, thanks!

[08:44:04.0182] <bakkot>
Domenic: is there general guidance for HTML / web platform stuff about when to use options bags arguments vs positional?

[08:44:44.0717] <bakkot>
as a user I am generally happier about options bags because they're easier to read, but we haven't really started leaning in to that

[08:46:02.0736] <bakkot>
as a designer I've mostly only been using them when there's two or more independently-optional arguments (which is how fromPartialBase64 started, but it may not end up there), since positional arguments are awkward to use in that situation (requiring you to pass `void 0` or whatever)

[08:48:12.0339] <bakkot>
(though there's an argument for using them when you have even a single optional argument, to leave room for adding more later)

[08:48:38.0775] <Jeffrey Yasskin>
> <@bakkot:matrix.org> Domenic: is there general guidance for HTML / web platform stuff about when to use options bags arguments vs positional?

Maybe https://w3ctag.github.io/design-principles/#prefer-dictionaries?

[08:48:53.0389] <bakkot>
ah, excellent, thanks

