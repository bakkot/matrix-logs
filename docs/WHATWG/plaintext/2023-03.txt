2023-03-01
[18:18:42.0118] <zero-one>
this might be a dumb question, but at step 4 of https://url.spec.whatwg.org/#host-parsing , what exactly is meant by "UTF-8 decode"?

[18:18:59.0817] <zero-one>
decoded into... UTF32? i.e, the codepoint value?

[18:19:44.0728] <zero-one>
the link to the encoding spec doesn't really clear it up for me

[18:36:39.0003] <Domenic>
It means "run the algorithm given at that link"

[18:36:58.0432] <Jeremy Roman>
It's not super explicit; the algorithm at that link yields an I/O queue of scalar values

[18:37:29.0631] <zero-one>
yeah, but the algorithm just says that UTF-8 has a decoder, it doesn't explain what that means

[18:37:33.0678] <zero-one>
and to run it

[18:37:39.0995] <Domenic>
Well, if you try to implement it, I wonder where you get stuck

[18:37:44.0804] <Domenic>
You need to keep following the links

[18:38:01.0157] <Domenic>
https://encoding.spec.whatwg.org/#concept-encoding-run , https://encoding.spec.whatwg.org/#concept-encoding-process , etc.

[18:38:16.0646] <Jeremy Roman>
at no point does it ever actually construct a string though

[18:38:43.0384] <Jeremy Roman>
(that I could find)

[18:38:53.0453] <Domenic>
Eventually you end up running the UTF-8 decoder's [handler](https://encoding.spec.whatwg.org/#handler). That is defined at https://encoding.spec.whatwg.org/#ref-for-handler%E2%91%A3 .

[18:40:34.0616] <Jeremy Roman>
process an item pushes said code points into the I/O queue output, and process a queue does so until it fails or reaches the end of the input queue

[18:41:10.0265] <Jeremy Roman>
but UTF-8 decode simply returns that I/O queue of scalar values (code points)

[18:41:44.0014] <Jeremy Roman>
whereas infra describes a string as consisting of code units and then handwaves at ECMA-262 to say that if you have code units you can think of them as code points

[18:43:00.0047] <Jeremy Roman>
even though afaict the linked section of ECMA-262 only actually describes how to interpret code units as code points (and not the reverse), the intent seems to be that a conversion takes place and the URL spec is operating on infra strings

[18:43:43.0157] <Jeremy Roman>
(because nothing else would be sensible)

[18:43:53.0828] <Domenic>
The conversion is defined here: https://encoding.spec.whatwg.org/#from-i-o-queue-convert . I think it is intended to be explicit, but it used to be implicit, and maybe not all cases were updated...

[18:44:48.0171] <Domenic>
Or maybe https://github.com/whatwg/infra/issues/319 is saying that it's meant to be implicit, but not defined yet

[18:45:35.0270] <Andreu Botella>
Yeah, the idea was to have implicit conversions between I/O streams and strings/lists, but looking back at it I'm not sure that's a great idea anymore

[18:45:55.0761] <Andreu Botella>
That was my first relatively large spec contribution 😬

[18:48:03.0085] <Jeremy Roman>
I think there probably should be an explicit algorithm that does the UTF-16 encode on the scalar values; just kinda saying that somehow you end up with a string that UTF-16 decodes into the same scalar values feels magical to me

[18:48:08.0881] <Jeremy Roman>
though dunno if it's a big deal

[18:48:27.0204] <zero-one>
as an amateur trying to implement all these specs, i wonder why we don't just assume UTF-8-encoded input for the URL parser

[18:48:34.0480] <zero-one>
given that you have to do the conversion several times anyway

[18:49:06.0893] <zero-one>
and in 2023, i have to imagine that implementations not using UTF-8 anyway are few and far between

[18:49:43.0480] <Jeremy Roman>
afaik most implementations actually pass UTF-16 to the URL parser quite frequently

[18:49:53.0172] <Jeremy Roman>
because ECMAScript defines strings as having 16-bit code units

[18:50:00.0226] <Jeremy Roman>
even though that's now what's spoken on the wire

[18:50:26.0093] <Jeremy Roman>
 * afaik implementations actually pass UTF-16 to the URL parser quite frequently

[18:51:16.0360] <Jeremy Roman>
https://infra.spec.whatwg.org/#strings

[18:52:23.0694] <zero-one>
i guess if the URL parser is tightly coupled to a js engine, it makes more sense

[18:52:29.0516] <zero-one>
but if there's an IO boundary there, then idk

[18:55:13.0353] <Jeremy Roman>
short version is the use of UTF-8 on the wire and 16-bit code units in ECMAScript means there's nothing that doesn't end up with some amount of transcoding around the place

[18:55:31.0071] <Andreu Botella>
In the case of the URL parser, the `encoding` argument (which is the HTML page's encoding) affects how query strings are encoded, but not the rest of the URL

[18:55:33.0673] <Jeremy Roman>
at least for valid sequences of Unicode scalar values that's lossless

[18:55:45.0514] <Andreu Botella>
The reason behind this is probably historical

[18:56:07.0566] <zero-one>
> <@abotella:igalia.com> In the case of the URL parser, the `encoding` argument (which is the HTML page's encoding) affects how query strings are encoded, but not the rest of the URL

ah

[18:59:49.0941] <Jeremy Roman>
> <@abotella:igalia.com> The reason behind this is probably historical

good old hysterical raisins

[19:03:48.0662] <Andreu Botella>
I just remembered this ISO-2022-JP weirdness that affects query string percent-encoding: https://encoding.spec.whatwg.org/#pit-of-iso-2022-jp

[00:53:26.0858] <Ms2ger>
TabAtkins: 
```
WARNING: Error downloading anchors/anchors-ur.data, full error was:

WARNING: Error downloading anchors/anchors-vi.data, full error was:

Updated 2398/2400, 1 errors...
FATAL ERROR: Done, but there were 2 errors (of 2400 total) in downloading or saving. Run `bikeshed update` again to retry.

```

[06:13:32.0575] <annevk>
I think implicit conversion is still fine. Though if we wanted to avoid that we'd need a bunch of wrapper algorithms instead. Putting the burden on each caller to do the conversion seems bad.

Defining the URL parser as byte sequence -> URL is an interesting idea and it definitely makes sense for implementations. Conceptually though scalar value string -> URL seems a lot cleaner.

And as most formats tend to do a byte sequence -> scalar value string conversion early on it's probably also better for callers. Though again that might only be true in concept as implementations could certainly store those URL inputs as byte sequences too.

[06:21:45.0851] <Ms2ger>
> <@ms2ger:igalia.com> TabAtkins: 
> ```
> WARNING: Error downloading anchors/anchors-ur.data, full error was:
> 
> WARNING: Error downloading anchors/anchors-vi.data, full error was:
> 
> Updated 2398/2400, 1 errors...
> FATAL ERROR: Done, but there were 2 errors (of 2400 total) in downloading or saving. Run `bikeshed update` again to retry.
> 
> ```

Not sure what I did, but I managed an update and now everything seems to work again

[06:26:12.0668] <annevk>
WebIDLpedia \o/ https://dontcallmedom.github.io/webidlpedia/


2023-03-02
[16:20:04.0837] <annevk>
mfreed: any chance you could look at the remaining popover issues/PRs this week?

[01:22:16.0657] <hsivonen>
miketayl_r: Does Privacy Budget currently sometimes deny `getHighEntropyValues` or cause it to alter its response or does `getHighEntropyValues` always succeed and return actual high-entropy values?

[01:24:35.0953] <hsivonen>
> <@hsivonen:mozilla.org> miketayl_r: Does Privacy Budget currently sometimes deny `getHighEntropyValues` or cause it to alter its response or does `getHighEntropyValues` always succeed and return actual high-entropy values?

I'm somewhat skeptical of the practicality of Chrome implementing https://bugs.chromium.org/p/chromium/issues/detail?id=1259413 or any other browser implementing a user-visible prompt with the first and promoted-to-Web-developers implementation having been out there without a prompt.

[07:11:27.0902] <annevk>
So many leftover popover issues. And review already took quite a while. Sigh.

[10:44:33.0945] <Dominic Farolino>
postMessaging a SharedArrayBuffer cross-agent-cluster should result in a DataClone error, right? Per https://html.spec.whatwg.org/multipage/structured-data.html#structureddeserialize:~:text=is%20%22SharedArrayBuffer%22%2C%20then%3A-,If%20targetRealm%27s%20corresponding%20agent%20cluster%20is%20not%20serialized.%5B%5BAgentCluster%5D%5D%2C%20then%20then%20throw,-a%20%22DataCloneError (step 12 > 1).

[10:48:06.0929] <Andreu Botella>
The spec says to throw a DataClone error thrown when deserializing a `SharedArrayBuffer` from a different agent cluster (so not in `postMessage`; instead, you'd get an `error` event at the other end rather than a `message` event), but I don't think that is even possible

[10:49:12.0723] <Dominic Farolino>
yeah I can't reproduce an error event on the receiving end in either Chrome or Firefox, unless I'm doing it wrong

[10:50:16.0916] <Andreu Botella>
I had the mental model that it was impossible to `postMessage` anything to a different agent cluster, but I'm not actually sure if that's right

[10:51:09.0197] <Dominic Farolino>
postMessage is mostly for things in a different agent cluster

[10:51:15.0155] <Dominic Farolino>
i.e., cross-origin iframes

[10:51:46.0184] <Dominic Farolino>
its just that SharedArrayBuffers are restricted to moving between agents _inside_ an Agent cluster, since we don't have cross-origin shared memory

[10:52:19.0949] <Andreu Botella>
my mental model was mostly based on `Worker.prototype.postMessage`, I think

[10:52:28.0842] <Andreu Botella>
since I was working on that in the context of Deno

[10:52:30.0011] <Dominic Farolino>
I see

[10:56:42.0045] <annevk>
Dominic Farolino: since you don't know upfront whether it'll go cross-agent-cluster the error happens when deserializing

[10:58:33.0671] <Dominic Farolino>
Right, I knew that part (I didn't clarify that in my question). I just can't observe the error being thrown on the receiver side

[10:59:24.0569] <annevk>
Dominic Farolino: there's no `messageerror` event?

[11:00:09.0758] <Dominic Farolino>
Sheesh. I thought I could catch it with `window.onerror`, sorry :/

[11:01:10.0126] <Dominic Farolino>
Heh, yep that works

[11:01:32.0382] <annevk>
Ah great, this was all a bit of a crapshoot at some point so it's nice that at least parts of it work as intended now.

[11:04:35.0129] <Dominic Farolino>
Yeah I definitely missed the part of https://html.spec.whatwg.org/#posted-message-task-source that says "If this throws an exception, catch it, fire an event named messageerror at targetWindow [...]". Cool, thanks


2023-03-03
[17:27:42.0833] <Domenic>
> <@annevk:matrix.org> So many leftover popover issues. And review already took quite a while. Sigh.

There are some Google folks brainstorming on how we can do better in cases like this. I think there are ways we can make the process less painful (a major part of their concern) but ultimately I also think for large features like this you sometimes just have to accept you'll discover spec bugs in the second implementation. I think that's happened with many other large features too, e.g. service workers.

[17:31:47.0377] <annevk>
This isn't anything like introducing a new environment though. Or at least, I don't think it is.

[17:32:40.0250] <annevk>
I think automated formatting would go a long way toward making the process less painful.

[17:36:09.0018] <Domenic>
I agree it would be less painful, but many of the issues you all are finding aren't formatting issues

[17:36:32.0778] <Domenic>
Some of them are theoretically tooling-detectable (e.g. mismatched algorithm declarations vs. call sites) but several are just solid consistency finds, better APIs, ...

[05:52:10.0385] <annevk>
That's true, but at least I notice I find it hard to spot those when there's formatting errors. And I worry that once I've put a bunch of effort into pointing out various errors, I might no longer be as vigilant the next time around, but that might vary depending on how much time has passed.

[07:39:42.0079] <Dominic Farolino>
Heh, any chance specfmt could help there? (specifically with the formatting)

[08:17:09.0886] <annevk>
Dominic Farolino: if it gets to a stage where it's part of CI somehow, yes


2023-03-06
[15:22:50.0771] <annevk>
dlrobertson: you wrote the 1000th Fetch commit \o/

[15:23:56.0223] <dlrobertson>
Ha! I'll make a plaque for this

[15:24:05.0015] <dlrobertson>
Definitely my greatest achievement to date

[15:25:34.0979] <dlrobertson>
expect a acceptance/life-achievement speech posted to the youtubes shortly 😆


2023-03-07
[06:21:49.0918] <annevk>
Adam Rice: all those isURL libraries do seem to do the equivalent of a hypothetical URL.canParse. Why do you expect that callers want something else? What would they want?

[06:24:59.0891] <Adam Rice>
Thanks for checking. I thought they might want a validation that the input "looks" like a URL, eg. it only has one colon after the scheme, no punctuation in the hostname, no double-slashes in the path, stuff like that.

[06:27:23.0701] <Adam Rice>
I don't know what to make of the fact that there are three different libraries that do the equivalent of `new URL` inside a try ... catch. I guess we need to "pave the cowpath" here.

[06:35:58.0074] <annevk>
Adam Rice: some do offer additional things like isHTTPURL() (not sure how to case that properly), but that's on top

[07:57:43.0035] <Eric Portis (he/him)>
Noam Rosenthal: I need to do some thinking about https://github.com/whatwg/html/issues/8143#issuecomment-1457636957 (particularly the "it's easy" bit...), but my first reaction is, what about audio and video?

[08:01:25.0574] <Noam Rosenthal>
Eric Portis (he/him): yea, easier than with images, I'll reword.

[08:03:42.0277] <Noam Rosenthal>
Eric Portis (he/him): you mean like CSS video backgrounds? Is that a thing? Video/Audio elements have a `crossorigin` attribute

[08:06:48.0280] <Eric Portis (he/him)>
Ok so adding `crossorigin` falls under the "it's easy" part, hm. background-image: url(whatever.mp4) might actually work in Safari? I should test that. But generally not a thing.

[08:07:34.0292] <Noam Rosenthal>
Eric Portis (he/him): adding `crossorigin` in conjunction with usually having a lot more images from different sources on the page than video/audio

[08:08:08.0616] <Noam Rosenthal>
but I think starting with images and perhaps expanding to audio/video if we see a need/value/adoption is reasonable

[08:08:54.0512] <Noam Rosenthal>
note also that no-cors video/audio has strange issues with service-workers because of range (206) requests

[08:41:05.0813] <Noam Rosenthal>
Eric Portis (he/him): btw for CSS images I hope to get this in at some point: https://github.com/w3c/csswg-drafts/pull/8222 but it won't make CORS CSS images "easy" (only "possible")

[09:37:09.0949] <Eric Portis (he/him)>
@noamr amazing, thank you!! (also thanks for [plugging CSS image fetching into Fetch](https://github.com/w3c/csswg-drafts/pull/6715]... 🙌🏻🙏🏻)

[09:38:05.0829] <Eric Portis (he/him)>
 * Noam Rosenthal:  amazing, thank you!! (also thanks for \[plugging CSS image fetching into Fetch\](https://github.com/w3c/csswg-drafts/pull/6715\]... 🙌🏻🙏🏻)

[09:38:34.0252] <Eric Portis (he/him)>
 * Noam Rosenthal:  amazing, thank you!! (also thanks for plugging CSS image fetching into Fetch (https://github.com/w3c/csswg-drafts/pull/6715)... 🙌🏻🙏🏻)

[10:45:03.0261] <TabAtkins>
Noam Rosenthal: apologies for the delay on #8222, will get to it as soon as i can


2023-03-08
[23:18:22.0928] <Domenic>
jsdom/whatwg-url, and thus Live URL viewer, has finally figured out its IDNA issues. Fun examples like https://jsdom.github.io/whatwg-url/#url=aHR0cHM6Ly94bi0tNC0wYmQxNTgwOGEuLi4v&base=YWJvdXQ6Ymxhbms= and https://jsdom.github.io/whatwg-url/#url=aHR0cDovL3huLS1sczhoPS8=&base=YWJvdXQ6Ymxhbms= now match the spec.

[00:46:23.0644] <zcorpan>
The spec PR preview links for html are in alphabetical order. Is it possible to make them be in the spec's natural order instead?

[00:47:36.0241] <zcorpan>
or maybe a link to an annotated ToC would be better

[06:20:59.0702] <annevk>
Domenic: oh that's great, good place to be in before Unicode considers our feedback

[11:48:44.0926] <Lucas Carlesso>
Is there a contradiction between the description of the b and strong elements? If strong can be used to "distinguish the part that really matters from other parts that might be more detailed, more jovial, or merely boilerplate." And "to denote the part of the text that the user is intended to read first." would not it also cover "key words in a document abstract" and "an article lede", which are given as use cases for the b element?


2023-03-09
[00:10:25.0714] <hsivonen>
https://github.com/WebKit/standards-positions/issues/140#issuecomment-1461388677 indicates that WebKit has a bucket-based privacy mechanism for `navigator.languages`. Where can I read a description of the mechanism?

[00:56:26.0637] <Domenic>
Maybe https://github.com/WebKit/WebKit ? :)

[00:57:40.0118] <hsivonen>
> <@domenicdenicola:matrix.org> Maybe https://github.com/WebKit/WebKit ? :)

I was hoping for something other that trying to locate the relevant bits in the source.

[00:59:03.0239] <Domenic>
I got as far as https://github.com/WebKit/WebKit/blob/main/Source/WTF/wtf/Language.cpp#L98, seems promising

[01:08:23.0677] <hsivonen>
AFAICT, the actual minimization happens in `minimizedLanguagesFromLanguages` of `NSLocale`. Is that a private undocumented API?

[11:41:41.0122] <zcorpan>
Chris Harrelson: what is the chromium status is for https://github.com/w3c/csswg-drafts/issues/8261 ?

[11:42:13.0206] <zcorpan>
emilio: ^ same for firefox :) looks like we render visible boxes on release for U+0000

[11:44:39.0969] <zcorpan>
(context: https://bugzilla.mozilla.org/show_bug.cgi?id=1818910 )

[12:31:34.0679] <timothygu>
annevk: is it too late to add something to the Unicode meeting agenda? https://github.com/whatwg/url/issues/760 seems like a UTS 46 bug

[13:36:23.0026] <leoskay12311>
ass

[13:39:17.0145] <Triton Creations>
I'm dead 💀 xd


2023-03-10
[17:08:12.0821] <annevk>
timothygu: are you willing to file? I can also file

[17:08:43.0318] <timothygu>
annevk: it'd be great if you could do it, considering you already have a list of other related issues

[17:09:49.0154] <annevk>
timothygu: I already submitted those, but I can next week I guess

[17:09:53.0627] <annevk>
timothygu: https://corp.unicode.org/reporting/error.html is the form

[17:10:46.0553] <timothygu>
Hmm okay, I can try to write it up. I'll update the ticket if I do

[17:24:41.0374] <Domenic>
The fact that Unicode people updated ICU but not TR46 seems bad... is that common?

[04:23:10.0897] <sideshowbarker>
Is anybody aware of a list somewhere of web-platform features that are implemented in Chromium/Blink but not enabled/shipped in Edge?

[04:24:13.0619] <sideshowbarker>
I guess I could write something to generate a list myself based on BCD data, but would like to same myself the time if possible

[04:26:14.0093] <sideshowbarker>
for example, I’m aware of [the case of AVIF not being enabled in Edge](https://caniuse.com/avif) and would like to identify other such cases 

[04:26:55.0783] <sideshowbarker>
(and I’m aware already that the AVIF case happens to be due to a licensing issue)

[05:48:11.0422] <annevk>
I was going to write that ICU only recently became part of Unicode, but apparently that happened in 2016... So yeah, that does seem bad.

[06:45:55.0991] <annevk>
hsivonen: I regret not paying closer attention to `Intl.`; those APIs pulling in end user preferences is such a bad idea

[09:58:10.0587] <emilio>
zcorpan: I'd ask jfkthame

[09:58:11.0610] <emilio>
(sorry I replied to this earlier but bad internet connection)

[09:58:12.0279] <emilio>
So I just noticed it hadn't been sent


2023-03-12
[23:33:01.0925] <Domenic>
Anyone able to be a good reviewer for CSSOMView / MouseEvents stuff? A community contributor to jsdom is trying to improve the test coverage, and it looks like browsers aren't doing great, so getting some opinion on which of the browser/test/specs should change would be helpful: https://github.com/web-platform-tests/wpt/pull/38912

[06:44:52.0790] <Noam Rosenthal>
Domenic: yes I encountered these exact issues when I was chasing layout thrashing in wikipedia. e.g. https://bugs.chromium.org/p/chromium/issues/detail?id=1054515. My opinion is that interop around mouse events is terrible. Perhaps this can go into interop2024?

[06:45:29.0440] <Noam Rosenthal>
it needs a concentrated cross-vendor effort to get fixed

[06:52:12.0890] <Noam Rosenthal>
IIRC there was some reluctancy to touch any of this because of backwards compatibility


2023-03-13
[01:08:35.0915] <sideshowbarker>
Sam Sneddon [:gsnedders]: jgraham it’d be great if one of you could either give me owner access to the html5lib-tests repo, or else take a look at https://github.com/html5lib/html5lib-tests/pull/152 and figure out why the workflow isn’t running.

I suspect it may be because the repo has some setting that requires approvals for workflows in PRs before they can run.

Otherwise, I don’t know what would be preventing the workflow from running there.

[03:44:25.0697] <Sam Sneddon [:gsnedders]>
> <@noamr:matrix.org> Domenic: yes I encountered these exact issues when I was chasing layout thrashing in wikipedia. e.g. https://bugs.chromium.org/p/chromium/issues/detail?id=1054515. My opinion is that interop around mouse events is terrible. Perhaps this can go into interop2024?

documenting all the cases where it's caused problems (like layout thrashing in Wikipedia) seems like it would both be a lot of effort _but_ would probably make a much more compelling argument in favour of including it in Interop

[03:49:47.0754] <jgraham>
Yeah, seems like it would be an investigation, right? Unless we already have a very clear idea of what the behaviour should be and the problem is just that people aren't implementing it right. I don't off the top of my head have loads of examples of it causing webcompat issues, but maybe if it's a perf footgun that would be enough of an argument.

[04:07:55.0967] <Noam Rosenthal>
Sam Sneddon [:gsnedders]: the wikipedia case was documented here: https://techblog.wikimedia.org/2020/11/23/web-performance-case-study-wikipedia-page-previews/

[04:10:24.0836] <Noam Rosenthal>
I think the spec is actually clear enough, but implementations do all kinds of funny stuff which created de-facto implementation issues

[04:12:13.0204] <Noam Rosenthal>
e.g. offsetX/Y issues in chromium: (1) computed lazily instead of when the event comes - layout thrashing and inaccurate results. (2) computed from the nearest block element (ignores inline). Other implementations have other similar issues, it's kinda described in the aforementioned WPTs

[04:12:30.0210] <Noam Rosenthal>
 * I think the spec is actually clear enough, but implementations do all kinds of funny stuff which created de-facto interop issues

[05:05:53.0693] <Jake Archibald>
annevk: is there a spec definition for a user agent stylesheet that isn't html specific?

[05:06:53.0070] <Jake Archibald>
Context: we want view transitions to work in other document types, and we need somewhere to put the default styles. I could invent a "view transition user agent stylesheet".

[05:44:03.0248] <Domenic>
> <@jakea:matrix.org> annevk: is there a spec definition for a user agent stylesheet that isn't html specific?

Each spec defines their own. E.g. SVG's is at https://www.w3.org/TR/SVG2/styling.html#UAStyleSheet , MathML's is at https://w3c.github.io/mathml-core/#user-agent-stylesheet

[05:44:42.0170] <Jake Archibald>
Ahh cool, I'll do the same then

[05:44:44.0562] <Jake Archibald>
Cheers!

[05:53:45.0136] <Domenic>
> <@jakea:matrix.org> Ahh cool, I'll do the same then

By this, I hope you mean, will send a PR to each of them? Unless you are creating a new markup language, those should be the three canonical UA stylesheets on the web.

[05:53:52.0122] <Domenic>
> <@jakea:matrix.org> Ahh cool, I'll do the same then

 * By this, I hope you mean, will send a PR to each of them? Unless you are creating a new markup language, those should be the three canonical UA stylesheet specs on the web.

[05:57:47.0703] <Jake Archibald>
Domenic: oh, my plan was to create a global view transition UA stylesheet. Would that not be easier for implementers, rather than fragmenting the feature across multiple specs? As a middle ground, could the change to HTML/SVG/MathML say something like "Include the [=global view transition user agent stylesheet=]"?

[05:59:07.0094] <Domenic>
Jake Archibald: so, if something is applicable to all elements, then usually it isn't done via the UA style sheet. It's done via changing the relevant CSS infrastructure directly. E.g. there's no need to add `* { display: inline; }` to the UA stylesheet, because the initial value for `display` is `inline`.

[06:00:25.0809] <Domenic>
Or, e.g., if you want to change how something behaves on the root element (regardless of what type of root element), you'd use language like https://w3c.github.io/csswg-drafts/css-display/#root

[06:02:37.0663] <Jake Archibald>
Domenic: In our case, we have default styles for pseudo-elements https://drafts.csswg.org/css-view-transitions-1/#ua-styles, but we also create dynamic styles in the UA stylesheet that are scoped to the document https://drafts.csswg.org/css-view-transitions-1/#ref-for-document-view-transition-style-sheet%E2%91%A3. I'm in the process of removing the HTML requirement here (eg replacing `html` with `:root`)

[06:06:30.0017] <Domenic>
It looks like there is no good precedent for this. Every other CSS spec has done the bad thing, and ambiguously monkeypatched "the UA stylesheet" (which one of the three?). Sometimes even as a recommendation instead of a requirement. https://drafts.csswg.org/css-pseudo-4/#highlight-ua-styles https://w3c.github.io/csswg-drafts/css-lists-3/#marker-properties

[06:09:34.0541] <Domenic>
I don't know what a good pattern would be, if CSS doesn't have the infrastructure to handle default styles on psuedo-elements without using something like a "UA stylesheet". Ideas:

1. Someone (CSS? HTML?) defines a "global all-namespaces UA stylesheet".
2a. Each CSS spec monkeypatches that as it desires.
2b. Everyone sends PRs against that in a coordinated fashion.
2c. Everyone sends PRs adding "also include [this portion defined over here]".

[06:10:06.0923] <Domenic>
2b and 2c are the only ones that have a hope of detecting conflicts or ordering issues

[06:11:40.0375] <Jake Archibald>
Domenic: Ok, I'll proceed with https://github.com/w3c/csswg-drafts/pull/8572, but also file an issue proposing 1 and 2c with the csswg

[06:11:51.0282] <Jake Archibald>
I'll note it as an issue in our spec too

[06:12:10.0482] <Jake Archibald>
Specifically the lack of coordination in the current model

[06:12:23.0261] <Domenic>
Sounds great

[06:12:43.0538] <Domenic>
I think also your spec might be easier to read if all the UA styles were in one place, but maybe you want to delay that until we have a 2c model.

[06:19:24.0926] <Jake Archibald>
Domenic: We went back and forward on that. I guess all in one place is better for implementers. Whereas documenting the default UA styles with each pseudo seems better for reference.

[06:54:48.0787] <Sam Sneddon [:gsnedders]>
> <@jakea:matrix.org> Domenic: We went back and forward on that. I guess all in one place is better for implementers. Whereas documenting the default UA styles with each pseudo seems better for reference.

Having _both_ is always an option, like how we have an IDL index at the end of most specs.

[06:56:34.0556] <Jake Archibald>
Sam Sneddon [:gsnedders]: hah, I had the same thought, but I'm not keen on maintaining it twice. I guess I could write a script to gather them up. I wonder if bikeshed has a plugin system…

[06:58:36.0437] <Sam Sneddon [:gsnedders]>
> <@jakea:matrix.org> Sam Sneddon [:gsnedders]: hah, I had the same thought, but I'm not keen on maintaining it twice. I guess I could write a script to gather them up. I wonder if bikeshed has a plugin system…

There's always "file a bug on BS"

[06:59:58.0828] <Sam Sneddon [:gsnedders]>
> <@domenicdenicola:matrix.org> I don't know what a good pattern would be, if CSS doesn't have the infrastructure to handle default styles on psuedo-elements without using something like a "UA stylesheet". Ideas:
> 
> 1. Someone (CSS? HTML?) defines a "global all-namespaces UA stylesheet".
> 2a. Each CSS spec monkeypatches that as it desires.
> 2b. Everyone sends PRs against that in a coordinated fashion.
> 2c. Everyone sends PRs adding "also include [this portion defined over here]".

there should probably be some bug _somewhere_ tracking the problem of the fact we essentially have multiple UA stylesheets with no defined cascade between them… is there?

[07:02:13.0270] <Jake Archibald>
Filed https://github.com/w3c/csswg-drafts/issues/8573. But yes, the HTML, MathML and SVG stylesheets should say they appear 'after' this universal UA stylesheet.

[07:38:21.0636] <Sam Sneddon [:gsnedders]>
> <@jakea:matrix.org> Filed https://github.com/w3c/csswg-drafts/issues/8573. But yes, the HTML, MathML and SVG stylesheets should say they appear 'after' this universal UA stylesheet.

does https://github.com/w3c/csswg-drafts/issues/8573#issuecomment-1466263142 seem fair?

[07:46:05.0783] <Jake Archibald>
replied. I think it's ok in some cases


2023-03-14
[05:04:15.0784] <annevk>
TabAtkins: the lack of static with the same identifier support is actually preventing some features from happening: https://github.com/speced/bikeshed/issues/2270

[05:04:52.0123] <annevk>
TabAtkins: if you have some kind of roadmap I think it would be nice if we could prioritize this

[10:18:00.0695] <TabAtkins>
Can do.


2023-03-15
[02:38:02.0720] <Jake Archibald>
annevk Domenic : When's the appropriate time to move the view transitions HTML monkey patches into the HTML spec? (https://drafts.csswg.org/css-view-transitions-1/#monkey-patch-to-rendering-algorithm)

[02:52:22.0051] <annevk>
Jake Archibald: if it's just "update the rendering" skipping multiple implementer interest might be okay as it's essentially just a registry thing at that point

[02:53:25.0678] <Jake Archibald>
annevk: Fwiw, Mozilla have a positive position now https://github.com/mozilla/standards-positions/issues/677. But I'm also happy not to rush the changes to the HTML spec. It isn't getting in the way, just want to make sure we integrate properly

[02:53:50.0108] <Jake Archibald>
(it'd be great to get a WebKit position 😀)

[03:41:17.0847] <Sam Sneddon [:gsnedders]>
Am I right in thinking that `setTimeout(…, 0)` isn't special-cased anywhere? Why did I think that `0` was special-cased here?

[03:43:07.0694] <Andreu Botella>
when the nesting exceeds some limit, the timeout is clamped to 4ms, but there's nothing specific to 0

[03:43:30.0773] <Andreu Botella>
there is a 0 special case for JS's `Atomics.waitAsync` though

[03:51:37.0978] <Jake Archibald>
Step 5 https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timer-initialisation-steps


2023-03-16
[18:02:38.0487] <Domenic>
> <@jakea:matrix.org> annevk: Fwiw, Mozilla have a positive position now https://github.com/mozilla/standards-positions/issues/677. But I'm also happy not to rush the changes to the HTML spec. It isn't getting in the way, just want to make sure we integrate properly

With two-implementer support, it's definitely time :)

[21:50:50.0792] <sideshowbarker>
Progress on HTML Modules seems to be stalled. Is that due to lack of sufficient implementor interest? Or is it due to it being blocked by particular problems? Or because nobody has yet fully specified it?

[21:56:36.0003] <beau87>
I’ve yet to get an assignment 

[22:21:33.0963] <sideshowbarker>
as far as HTML Modules being specified in detail, I see that https://github.com/WICG/webcomponents/blob/gh-pages/proposals/html-module-spec-changes.md seems to have quite detailed spec changes
…but I also see that it’s now been 3 years since it was last updated

[00:30:48.0259] <annevk>
sideshowbarker: there's no detailed proposal I think and the last one got a bunch of feedback (probably not all properly recorded) that was never dealt with

[01:09:27.0793] <sideshowbarker>
> <@annevk:matrix.org> sideshowbarker: there's no detailed proposal I think and the last one got a bunch of feedback (probably not all properly recorded) that was never dealt with

I see. I wonder why this has never ended up bubbling up high enough in the collective priority stack for it to actually start getting anywhere.
About other features like DSD, much has been made (rightfully) of developers speaking up to say they need the feature.
It seems like client-side HTML includes is something that we’ve had many developers asking for relatively forever now.
(A developer contacted me today to ask about it, which is why I ended up asking here.)

[02:10:57.0842] <annevk>
sideshowbarker: probably because it's a quite complex idea that involves a lot of tradeoffs

[02:11:44.0537] <annevk>
sideshowbarker: and there being more pressing problems, such as Web Components accessibility

[04:52:09.0775] <Domenic>
Client-side includes are also very different from HTML includes

[04:52:22.0987] <Domenic>
Client-side includes are just a way to have worse performance for more developer convenience, basically

[04:52:41.0111] <Domenic>
 * Client-side includes are also very different from HTML imports

[05:21:25.0413] <Ms2ger>
annevk: I was just about to file https://github.com/w3c/hr-time/issues/152 😅

[06:49:51.0406] <Jake Archibald>
`<dialog>` and `popover` seem to queue tasks to fire open/close events, even though these things always happen on the main thread. Anyone know the reasons?

[09:03:20.0867] <annevk>
Jake Archibald: `popover` doesn't do that for `beforetoggle`

[09:12:15.0798] <Jake Archibald>
annevk: but it does for `toggle`, meaning that event could come after the next render

[09:12:41.0272] <Jake Archibald>
https://html.spec.whatwg.org/multipage/popover.html#the-popover-attribute:queue-a-popover-toggle-event-task

[09:17:48.0787] <annevk>
Jake Archibald: yeah sorry, I forgot exactly why `dialog` did that; I suppose conceivably it could be moved to "update the rendering", but "update the rendering" is doing a lot which is a problem of its own

[09:18:31.0330] <annevk>
Jake Archibald: one thing we've historically tried to avoid is node tree mutations triggering events, but in the select case of attribute mutations it might be okay

[09:19:01.0733] <Jake Archibald>
yeah, if it was debouncing stuff, I'd expect microtasks or render steps

[09:21:33.0911] <annevk>
Jake Archibald: it seems reasonable to try to change this to be closer to sync; not sure if fully sync would be compatible or desirable

[09:22:01.0735] <annevk>
Jake Archibald: for `popover` the main reason for the timing was consistency with `dialog`

[10:27:52.0094] <Jake Archibald>
annevk: yeah, I wondered if there was some case where a popover opens, but immediately closes or something, and in that case they didn't want an event

[10:28:21.0628] <Jake Archibald>
I made some notes while reading the spec https://github.com/whatwg/html/issues/9036. Some of those might just be misunderstandings though.

[10:50:18.0531] <annevk>
Jake Archibald: for a case like that we don't want two events, though that also follows dialog

[10:51:11.0723] <annevk>
Jake Archibald: you prolly want to tag mfreed and ntim there (and Joey, doesn't seem to be here anymore)

[10:51:37.0080] <annevk>
Jake Archibald: oh, and add the popover label

[12:46:10.0378] <Dominic Farolino>
Someone asked a question today that I didn't immediately know the answer to: why must we enforce CORS check on redirects, if the subsequent request would require a CORS check anyways. I understand that we want the redirecting server to opt-out of redirecting requests initiated by cross-origins (via a standard way that fails closed like CORS), but what is the exact threat? What can the initiating request learn if we didn't enforce CORS there?

[12:58:42.0600] <Dominic Farolino>
I guess the redirect could be computed based on the credentials of the initiator, in which case it could expose sensitive information to the redirectee withour CORS...

[13:24:20.0900] <Dominic Farolino>
 * Someone asked a question today that I didn't immediately know the answer to: why must we enforce CORS check on redirects that required a preflight? Is the explicit preflight opt-in not enough to act as a proper opt-in for the redirect?


2023-03-17
[00:11:24.0607] <annevk>
Dominic Farolino: no, a preflight only validates if the server is capable of handling the request, it doesn't validate if a specific resource wants to hand over data; you can kinda think of it as request vs response authorization

[00:19:22.0763] <sideshowbarker>
annevk: looking at https://stackoverflow.com/questions/75764299/lack-of-automatic-encoding-of-get-parameters-a-bug-chrome-and-edge and wondering what’s supposed to happen there per-spec, and why. I would think that browsers should percent-encode that square bracket, as the OP expects. But no browsers do.

[01:16:36.0605] <Domenic>
> <@sideshowbarker:matrix.org> annevk: looking at https://stackoverflow.com/questions/75764299/lack-of-automatic-encoding-of-get-parameters-a-bug-chrome-and-edge and wondering what’s supposed to happen there per-spec, and why. I would think that browsers should percent-encode that square bracket, as the OP expects. But no browsers do.

] is not in the percent-encode set. https://jsdom.github.io/whatwg-url/#url=aHR0cHM6Ly9leGFtcGxlLmNvbS9wYV10aD9xdT9lcnkjaGFzXWg=&base=YWJvdXQ6Ymxhbms= https://url.spec.whatwg.org/#query-percent-encode-set

[01:18:56.0308] <sideshowbarker>
> <@domenicdenicola:matrix.org> ] is not in the percent-encode set. https://jsdom.github.io/whatwg-url/#url=aHR0cHM6Ly9leGFtcGxlLmNvbS9wYV10aD9xdT9lcnkjaGFzXWg=&base=YWJvdXQ6Ymxhbms= https://url.spec.whatwg.org/#query-percent-encode-set

Ah ok, I assumed that because it's not a URL code point, the spec would require it to be percent encoded

[01:19:44.0078] <Domenic>
https://github.com/whatwg/url/issues/753 and https://github.com/whatwg/url/issues/379 are relevant

[01:21:59.0913] <sideshowbarker>
I guess the specific relevant set here is https://url.spec.whatwg.org/#query-percent-encode-set

[01:22:38.0620] <sideshowbarker>
I mean, for the SO question

[02:18:00.0369] <annevk>
sideshowbarker: right, the validation requirements currently match RFC 3986 and 3987 (I thought I had stopped caring about 3987 and personally I might have, but the spec seems to match still)

[02:18:32.0567] <annevk>
Maybe I should say "aim to match", as Domenic likes to point out we haven't done anything close to formally proving that

[02:38:28.0192] <annevk>
smaug: perhaps we could require element(s)-reflecting attributes to be connected and create more GC opportunities when they are not? Though I think this would require an element was disconnected listener to clear any cached object.

[02:43:21.0410] <smaug>
requiring some manual clearing is a problem. Easy to forget. (just this week analyzed a semi-large website which was leaking like crazy because they were not clearing something - this time it was JS objects though, not DOM nodes)

[02:56:35.0107] <annevk>
smaug: the disconnected listener would be part of the browser, to be clear

[02:56:48.0253] <smaug>
ah

[02:59:51.0071] <smaug>
connected elements are kept alive anyhow, so the reference could be then just weak, no? But do we expose GC behavior if one uses expando properties on disconnected nodes?

[03:08:01.0596] <smaug>
Hmm, and connected... what if the other node is moved to another Document, and that document itself would be GCed if there weren't these references? Or do we handle not-the-same-document somehow?

[03:09:46.0692] <annevk>
smaug: to handle that we'd need more listeners, which doesn't seem ideal

[05:15:49.0756] <annevk>
smaug: the reason the reference is strong is because it's a JS object

[05:26:31.0923] <Jake Archibald>
annevk: I filed https://github.com/whatwg/html/issues/9046 for the event timing issue. It might happen with 'input' events too.

[05:31:47.0861] <annevk>
UI Events, sigh

[05:33:51.0254] <Jake Archibald>
Also wrote up the throw-or-not case, which was a fun bit of research https://github.com/whatwg/html/issues/9045

[05:34:17.0386] <Jake Archibald>
`<dialog>` seems pretty inconsistent with itself

[05:34:19.0724] <annevk>
Jake Archibald: the concern with 4 does not apply to 3? Does each step on "update the rendering" end up running microtasks?

[05:35:46.0617] <Jake Archibald>
annevk: hmm, I guess it could be a problem if the change isn't triggered by script. There are microtask checkpoints within the render steps, but those are weird.

[05:35:50.0914] <Jake Archibald>
Good catch.

[05:37:11.0441] <Jake Archibald>
Actually, the changes would happen in a task, and there's always a microtask checkout afterwards

[05:37:21.0966] <Jake Archibald>
 * Actually, the changes would happen in a task, and there's always a microtask checkpoint afterwards

[05:37:43.0762] <annevk>
I'm not concerned about running script with attribute changes, but `input` listeners running when the tree changes seems more concerning.

[05:38:20.0626] <Jake Archibald>
annevk: the use-case would be, eg, transforming the input, like making it all uppercase, or auto inserting `-` in US phone numbers

[05:38:58.0354] <Jake Archibald>
By queuing a task, you risk a flash of content. Maybe `beforeinput` is better for this

[05:39:11.0404] <Jake Archibald>
 * By queuing a task, you risk a flash of untransformed content. Maybe `beforeinput` is better for this

[05:40:00.0055] <annevk>
Jake Archibald: surely each step in "update the rendering" doesn't equal a task?

[05:40:10.0219] <annevk>
I guess I don't actually really know how that works

[05:40:31.0489] <Jake Archibald>
annevk: there's a microtask checkpoint after running script, no matter where in the loop it happens

[05:41:24.0310] <annevk>
Right, because there's not going to be script on the stack at that point.

[05:42:15.0954] <annevk>
Okay, I guess 3 could work. (Or generalize CEReaction.)

[05:43:17.0506] <Jake Archibald>
Hopefully it's not a breaking change 😬

[05:43:36.0001] <Jake Archibald>
Keeping it async reduces the risk I guess

[07:38:02.0473] <Pascal Müller>
Hi, I'm a DOM noob. Imagine you have a site e.g. "<p>Hello <span>I</span> <a href="#">am</a><div> very</div> funny.</p><bold>Truly!</bold>". You get all the text: "Hello I am very funny. Truly". Now assume we put that text into some fancy algorithm and it gives us back "I am very" and you now wanna wrap that in a <mark></mark> tag to highlight it. How would you do that? E.g. how would I get all the nodes corresponding to "I am very" s.t. I could get the "first" and "last" and add a <mark> resp. </mark> to it? Could I e.g. do something like number all the nodes and set up some mapping? Any input is welcome. :) 

[08:19:28.0915] <annevk>
Ms2ger: do you happen to know where WebAssembly.Global.prototype.type is defined?

[08:20:23.0520] <Ms2ger>
annevk: https://github.com/WebAssembly/js-types/blob/main/document/js-api/index.bs

[08:20:37.0951] <Ms2ger>
No built spec - https://github.com/WebAssembly/js-types/issues/23

[08:28:06.0967] <annevk>
Ms2ger: https://webassembly.github.io/js-types/js-api/index.html seems to contain a definition, but I guess due to that issue you can't be sure

[09:04:22.0576] <annevk>
(thanks btw!)


2023-03-18
[00:36:45.0180] <annevk>
asuth: zcorpan: if Gecko has any feedback on https://github.com/whatwg/fs/pull/96 Monday would be a good time to chime in, Austin and I are pretty close to calling it done

[05:28:55.0624] <jub0bs>
The Fetch standard [states](https://fetch.spec.whatwg.org/#credentials) the following

> Credentials are HTTP cookies, TLS client certificates, and authentication entries (for HTTP authentication).

and it also [defines](https://fetch.spec.whatwg.org/#authentication-entry) authentication entries as follows:

> An authentication entry and a proxy-authentication entry are tuples of username, password, and realm, used for HTTP authentication and HTTP proxy authentication, and associated with one or more requests.

However, unless I'm missing something, not all authentication entries count as credentials in the sense used by the Fetch standard. For instance, `Basic Zm9vOmJhcgo=` does count as credential and, if present, will be automatically attached by the browser to credentialed requests issued by the client; but `Bearer whatever` doesn't count as credential in that sense.

Is the Fetch standard accurate in that respect? What am I missing? And if only some authentication entries count as credentials, is there some authoritative list of them?

[05:36:41.0919] <jub0bs>
 * The Fetch standard [states](https://fetch.spec.whatwg.org/#credentials) the following

> Credentials are HTTP cookies, TLS client certificates, and authentication entries (for HTTP authentication).

and it also [defines](https://fetch.spec.whatwg.org/#authentication-entry) authentication entries as follows:

> An authentication entry and a proxy-authentication entry are tuples of username, password, and realm, used for HTTP authentication and HTTP proxy authentication, and associated with one or more requests.

However, unless I'm missing something, not all authentication entries count as credentials in the sense used by the Fetch standard. For instance, `Basic Zm9vOmJhcgo=` does count as credential and, if present, will be automatically attached by the browser to _credentialed_ requests issued by the client; but `Bearer whatever` doesn't count as credential in that sense.

Is the Fetch standard accurate in that respect? What am I missing? And if only some authentication entries count as credentials, is there some authoritative list of them?

[07:52:53.0504] <jub0bs>
 * The Fetch standard [states](https://fetch.spec.whatwg.org/#credentials) the following

> Credentials are HTTP cookies, TLS client certificates, and authentication entries (for HTTP authentication).

and it also [defines](https://fetch.spec.whatwg.org/#authentication-entry) authentication entries as follows:

> An authentication entry and a proxy-authentication entry are tuples of username, password, and realm, used for HTTP authentication and HTTP proxy authentication, and associated with one or more requests.

However, unless I'm missing something, not all authentication entries count as credentials in the sense used by CORS. For instance, `Basic Zm9vOmJhcgo=` does count as credential and, if present, will be automatically attached by the browser to _credentialed_ requests issued by the client; but `Bearer whatever` doesn't count as credential in that sense.

Is the Fetch standard accurate in that respect? What am I missing? And if only some authentication entries count as credentials, is there some authoritative list of them?

[08:07:00.0505] <annevk>
jub0bs: I'd support a PR renaming "credentials" to "user-agent-bound credentials"

[08:08:00.0510] <annevk>
There are indeed many other forms of credentials, but they're not mediated by the user agent in some fashion

[09:15:46.0700] <jub0bs>
Thanks annevk. I do like the more precise term you suggest. But then my question becomes the following: Is there a standard definition of user-agent-bound credentials?

[09:38:00.0712] <asuth>
> <@annevk:matrix.org> asuth: zcorpan: if Gecko has any feedback on https://github.com/whatwg/fs/pull/96 Monday would be a good time to chime in, Austin and I are pretty close to calling it done

Thanks, I'll pass it along.


2023-03-19
[00:29:15.0973] <annevk>
jub0bs: well, upon rereading I think you are misunderstanding authentication entries, they're entirely controlled by the user agent. That follows from Fetch's algorithms although some details are still missing

[13:28:04.0291] <jub0bs>
annevk: Can you be more specific? What is the nature of my misunderstanding? Sorry, not trying to troll or anything, just trying to get to the bottom of this. 😇


2023-03-20
[00:43:25.0549] <Jake Archibald>
annevk: is it worth making a rule somewhere that UI related events must happen before the next render? Or at the very least, it shouldn't be a race condition 

[00:48:36.0722] <annevk>
jub0bs: how would your `Bearer` example ever end up as authentication entry?

[00:49:48.0421] <annevk>
Jake Archibald: probably, though should get wider input on these toggle cases first

[01:36:27.0498] <annevk>
dlrobertson: I discovered the blob range tests are all wrong, working on a patch

[05:21:58.0657] <dlrobertson>
> <@annevk:matrix.org> dlrobertson: I discovered the blob range tests are all wrong, working on a patch

Sorry! and thanks for finding and fixing it

[05:22:51.0763] <dlrobertson>
Is this in addition to [web-platform-tests/wpt#39078](https://github.com/web-platform-tests/wpt/pull/39078)?

[05:25:34.0163] <annevk>
dlrobertson: no that's all, "all" was an overstatement

[05:27:35.0145] <annevk>
dlrobertson: trying to get you reviewer status over in #wpt:matrix.org 

[05:28:20.0822] <dlrobertson>
I'm not sure why I put the HTTP whitespace examples in the unsupported blob range section

[05:28:55.0047] <dlrobertson>
I think I added those after we found out those were okay

[05:29:26.0456] <dlrobertson>
Good catch and thanks for the fix!

[08:47:08.0525] <smaug>
annevk: how is ORB supposed to work with CORP? The pr does ORB check before CORP.

[08:51:05.0731] <annevk>
smaug: there's some discussion about allowing CORP to bypass it at the end of https://github.com/annevk/orb/issues/3

[08:51:16.0471] <smaug>
aha

[08:51:50.0942] <smaug>
just noticed that some requests Google docs does are blocked by ORB because of this

[09:10:09.0552] <annevk>
smaug: interesting, how would they have been able to use these responses? The CORP thing was mainly considered for future formats

[09:16:33.0914] <smaug>
oh, hmm, is this a beacon

[09:17:34.0083] <annevk>
smaug: ah okay, for those the response is ignorable anyway, could even decide to not let the website process know about those and save some CPU cost

[09:19:35.0514] <smaug>
yeah

[09:26:26.0626] <smaug>
GMaps has some 204 responses, also with cross-origin-resource-policy: cross-origin, and those "fail" because or ORB

[09:58:19.0645] <annevk>
smaug: that might be a real problem; I guess we need to safelist 204

[09:58:35.0245] <annevk>
smaug: I wonder if we should still try to validate something about the body, perhaps that it doesn't have one

[09:59:04.0279] <smaug>
annevk: actually, this case was then from csp-report, again something where response isn't interesting 

[10:00:07.0807] <annevk>
smaug: also, it seems that ORB happens post-cache, so 204 should have been transformed into a 200 already

[10:00:45.0778] <smaug>
But about CORP, I think it is very surprising that CORP: cross-origin doesn't bypass ORB

[10:02:46.0968] <annevk>
smaug: I could see it as some kind of perf improvement or indeed for new formats, but other than that it seems like it would make mistakes easier


2023-03-21
[19:15:11.0100] <Dominic Farolino>
I guess we never figured out the WHATWG spec issue where the style sheets randomly fail to load huh?

[19:17:01.0373] <Dominic Farolino>
It just happened to me and I see a 'The FetchEvent for "https://resources.whatwg.org/standard.css" resulted in a network error response: an "opaque" response was used for a request whose type is not no-cors' warning in DevTools (3 times for 3 different scripts)

[20:17:21.0513] <Domenic>
Yep. It honestly seems like a browser bug. There's no way that <link rel=stylesheet crossorigin> should ever result in an opaque response.

[00:31:17.0846] <annevk>
The only way that can happen is if there's some whatwg.org website where we link to that style sheet without `crossorigin`

[00:31:48.0435] <annevk>
Perhaps historical versions end up poisoning the cache?

[00:32:46.0592] <annevk>
One thing we haven't tried is renaming the style sheet and ensuring all new places that link to it have the attribute set, but then we have versioning :/

[01:27:09.0483] <annevk>
dlrobertson: found some more issues, now also in the spec; out-of-range start/end values are normalized by the File API, but then result in an inaccurate `content-range` header

[01:27:36.0574] <annevk>
dlrobertson: they probably need to be normalized upfront; the default for end is also wrong, it should be total - 1

[01:29:05.0739] <annevk>
I'll work on some patches

[03:15:23.0212] <Noam Rosenthal>
annevk, Domenic can either of you review https://github.com/whatwg/fetch/pull/1614? It's been pre-reviewed by Jeffrey Yasskin and others already
thanks!

[06:09:25.0510] <dlrobertson>
annevk: Yeah it looks like we don't check the end value of the range. The start value we use for the content range comes from parsing a [single-range-header](https://fetch.spec.whatwg.org/#simple-range-header-value), and if I'm reading things right would mean we'd return failure from the parser and return a network error in fetch

[06:10:45.0900] <dlrobertson>
Good catch!

[06:21:32.0343] <annevk>
dlrobertson: I would not have discovered this if I hadn't tried to implement it; that was a very humbling experience (and continues to be)

[06:22:38.0387] <dlrobertson>
hahaha I know the feeling all too well... I've _technically_ picked up the bug to fix this in gecko


2023-03-22
[02:06:17.0637] <Jake Archibald>
annevk: I addressed the nits on https://github.com/whatwg/dom/pull/1170 - is it good to go?

[03:34:09.0878] <annevk>
Jake Archibald: I can't land it due to CI errors (and there's a newline that's being eaten, but I can fix that); I can look into those later today I suspect as I guess they're not your fault

[03:50:15.0600] <Jake Archibald>
annevk: huh, I don't see the newline thing. Yeah, the CI error is `LINK ERROR: Ambiguous for-less link for 'descendant'` which is unrelated to my change.

[04:37:20.0307] <annevk>
Jake Archibald: the heading used to have two preceding newlines unless I'm missing something

[04:42:15.0619] <Jake Archibald>
ohhhhhhh

[04:42:17.0938] <Jake Archibald>
I see now

[04:42:43.0711] <Jake Archibald>
fixed

[05:18:23.0624] <annevk>
css2 claiming all the tree in the global scope terms while it should probably reuse the concepts of DOM is unfortunate

[05:18:41.0990] <annevk>
Fortunately adding for=tree isn't a lot of work, but still

[05:44:05.0652] <annevk>
Noam Rosenthal: I gave it a pass, it didn't seem like all existing feedback was addressed though

[05:46:20.0553] <Noam Rosenthal>
annevk: oh I thought it was but perhaps I missed something. There were auto-commits from github that weren't processed for some reason earlier so perhaps it's that. Thanks!

[05:47:35.0468] <annevk>
Inline comments? Maybe Fetch reached the point where it's too big for those? Those certainly always fail for HTML.

[05:47:54.0976] <Noam Rosenthal>
annevk: regarding "fetching" or "obtaining", none of them represent "the response body is completely downloaded" in laymen terms. Other suggestion?

[05:49:13.0318] <annevk>
has been fully obtained?

[05:49:27.0607] <Noam Rosenthal>
ok will give that a go

[05:49:52.0558] <annevk>
I'll fix the CI error, I guess that might be in part why you switched the element ref

[05:52:51.0106] <bkardell>
> <@annevk:matrix.org> css2 claiming all the tree in the global scope terms while it should probably reuse the concepts of DOM is unfortunate

Is this in response to something?

[05:54:26.0969] <annevk>
bkardell: whatwg/dom CI revealing to me those conflicts exist

[05:54:45.0654] <annevk>
Prolly due to Reffy doing things slightly differently

[06:01:09.0459] <annevk>
TabAtkins: https://github.com/speced/bikeshed/commit/be9d81bf44e171abf9895b555844677cb451f07d resulted in `FATAL ERROR: Spurious / in &lt;a>.` for whatwg/fetch

[06:01:28.0031] <annevk>
No context

[06:01:52.0796] <annevk>
I guess I'll file an issue as I'm not going to try to find that

[06:03:41.0639] <annevk>
In case anyone else is hit by this: https://github.com/speced/bikeshed/issues/2498

[06:40:57.0383] <annevk>
dlrobertson: do you think you can look at those two blob: URL range PRs this week?

[06:41:52.0591] <dlrobertson>
annevk: looking at the wpt PR now, sorry I didn't get to them yesterday

[06:46:10.0410] <annevk>
dlrobertson: that's fine, I just pushed some more changes so...

[08:22:07.0332] <TabAtkins>
annevk: The error messaging is fixed, but there is one new issue that'll affect this spec. I've switched Markdown's backtick-code-span syntax to being part of Bikeshed's core syntax for now (alongside the backtick-code-*blocks*, which are already core syntax), and fetch uses those backticks a good bit. (As does Infra and anyone using byte sequences using Infra syntax.) :/ Wonder if I should revert that and go back to it being gated behind the markdown shorthand flag.

[08:24:29.0926] <annevk>
TabAtkins: I think I'd prefer that; I'll take a look at the current output

[08:24:50.0777] <TabAtkins>
You've got some dfns that are wrapped in backticks, at least

[08:25:52.0312] <annevk>
TabAtkins: yeah, getting errors for those because MDN references can no longer be matched up

[08:25:56.0873] <TabAtkins>
yup

[08:26:44.0313] <TabAtkins>
okay, in a meeting right now but i'll back that out today. i'm doing something *else* similarly wrong but it's much less likely to catch anything by accident.

[08:27:43.0084] <annevk>
Thanks, I'll look at some non-Fetch stuff

[09:38:27.0290] <Ms2ger>
TabAtkins: is the above related to https://github.com/WebAssembly/spec/pull/1626/files ?

[09:55:06.0044] <TabAtkins>
the recent commit is indeed responsible for those, yes.

[11:18:42.0404] <Sam Sneddon [:gsnedders]>
> <@annevk:matrix.org> css2 claiming all the tree in the global scope terms while it should probably reuse the concepts of DOM is unfortunate

ergh, should probably try and figure out what we're doing with CSS 2 again. I would _like_ to drop most of the text, but the WG keeps changing its mind on what they want to do, and it's hard to edit something while the WG has no agreement on what to do.

[11:26:20.0633] <Sam Sneddon [:gsnedders]>
zcorpan: given it relates to your HTML PR, https://github.com/html5lib/html5lib-tests/issues/156

[11:26:32.0851] <Sam Sneddon [:gsnedders]>
(I presume the answer is "the PR shouldn't have landed in html5lib-tests)

[11:44:31.0443] <annevk>
Sam Sneddon [:gsnedders]: well, the problem is really getting those tests synced with WPT, that was the main thing blocking Domenic's PR; not sure if we made progress on that? Also, if we did, I guess we might have to briefly look at the HTML <search> PR again to see everything is still correct

[14:19:13.0785] <TabAtkins>
We really do need to drop most of CSS2. I wasn't capable of intervening the last time we tried it a few years ago, but we should push on it again. I don't recall what the deal was that caused a lot of stuff to need to be reverted.

[14:19:52.0601] <TabAtkins>
I really do *not* want to do significant edits to CSS2 to make it play well in the ecosystem until we get all the replaced bits removed.

[16:38:31.0240] <Sam Sneddon [:gsnedders]>
IIRC, there were three main options: do we just add informative notes "you may want to see [later level]", do we just drop everything from CSS 2 and make them undefined, or do we drop everything from CSS 2 and replace them with references to later levels (maybe, e.g., restricting the value space of a property to what 2.1 defines, to maintain some notion of levels). There were questions about ramifications of the latter two options under the patent policy and the existing IPR commitments. And I just haven't had the time/energy to try and figure this out, we have so many contradictory resolutions now.

[16:38:54.0828] <Sam Sneddon [:gsnedders]>
Like really we need to decide "what are we doing about lower levels" in general, and hopefully what to do with CSS 2 becomes apparent from that.


2023-03-23
[00:23:16.0888] <annevk>
foolip: is there some way to get a higher priority on https://github.com/web-platform-tests/wpt/issues/27868? Not being able to add new HTML elements seems kinda bad. Or perhaps we should ask zcorpan if he wants to perform the import dance once more...

[02:19:59.0400] <foolip>
> <@annevk:matrix.org> foolip: is there some way to get a higher priority on https://github.com/web-platform-tests/wpt/issues/27868? Not being able to add new HTML elements seems kinda bad. Or perhaps we should ask zcorpan if he wants to perform the import dance once more...

I’m guessing all it would take is for someone to write the PR. Or do you expect it’s risky and it needs an RFC or someone?

[02:58:09.0504] <zcorpan>
annevk: foolip : I will fix it by upstreaming mozilla's html5lib-test runner to wpt and then move the test data to wpt

[03:15:08.0850] <Sam Sneddon [:gsnedders]>
> <@zcorpan:mozilla.org> annevk: foolip : I will fix it by upstreaming mozilla's html5lib-test runner to wpt and then move the test data to wpt

we should check that all the other consumers of `html5lib-tests` are okay with it moving to WPT; it seems unfortunate if we stop having other implementations tested against the tests.

[03:16:08.0280] <Sam Sneddon [:gsnedders]>
And AFAIK there are more other consumers of it now then when we had the prior discussion

[03:17:01.0568] <annevk>
I thought the plan was to make WPT directly depend on html5lib-tests rather than html5lib in general. And then use the JS parser Henri wrote to run the tests somehow

[03:18:35.0907] <Sam Sneddon [:gsnedders]>
That issue has zcorpan saying:

> Having the sources files in the same format in wpt

Which very much sounds like them moving them.

[03:18:40.0053] <Sam Sneddon [:gsnedders]>
 * That issue has zcorpan saying:

> Having the sources files in the same format in wpt

Which very much sounds like moving them.

[03:18:43.0966] <annevk>
But also, copying it wholesale is preferable over doing nothing.

[03:19:46.0140] <Sam Sneddon [:gsnedders]>
I still think we should do https://github.com/web-platform-tests/wpt/issues/27868#issuecomment-1039321578 as a first step, which means we avoid having to have the same version of html5lib-tests as html5lib-python uses, merely using html5lib-python as a glorified parser

[03:20:57.0982] <Sam Sneddon [:gsnedders]>
(I still think moving to a JS parser is the right thing longer term, but that takes more work, especially if we want to preserve the current test names which are sha1s of the input. Tho I guess we could just move all the parsing tests to a secure context, then that becomes slightly less painful.)

[03:21:00.0568] <annevk>
Thinking about it more I actually like the idea of copying it wholesale and declaring the era of html5lib-tests to be over. We manage just fine hosting host-independent URL parser tests in WPT and such.

[03:30:22.0848] <annevk>
And also, lowering the bar for browser engineers to contribute HTML parser tests is probably the best thing we could be doing for the HTML parser.

[03:46:57.0957] <Domenic>
At this point this problem has been unsolved for so long I am totally fine abandoning every part of the dependency chain apart from wpt. Go go Simon!

[03:50:56.0204] <Sam Sneddon [:gsnedders]>
https://github.com/web-platform-tests/wpt/pull/39158 implements what I said we should do as a first step, fwiw.

[04:00:14.0098] <Sam Sneddon [:gsnedders]>
I still desperately wish we had more meaningful test names

[05:24:10.0163] <annevk>
Yeah what's generated there is very hard to read. Having the actual data files and operating on those would be an improvement

[06:27:24.0202] <zcorpan>
Do we have a list of consumers of html5lib-tests?

[07:22:56.0159] <freddy>
Do all browsers double-key their caches by first-party site (or even frame tree)? Are there WPT for this kind of behavior?

[07:25:37.0900] <annevk>
freddy: there are some tests, e.g., for the CORS-preflight cache

[07:28:25.0870] <freddy>
Whether a resource passed a CORS-preflight is cached? Is that web observable? I suppose caches are generally not supposed to be observable (except for timing side channels), right?

[07:31:15.0321] <annevk>
freddy: the whole point of partitioning caches is because they're very much observable :-)

[07:31:53.0674] <annevk>
Though I suppose you're right they're not observable in the traditional sense; timing channels count for a change.

[07:32:18.0262] <freddy>
I mean, it's not like you can query a specific API, right? it's a timing side channel, i.e., a probablistic query

[07:33:48.0924] <annevk>
Yeah, though there is some of that too in the larger partitioning state effort. It's observable in the traditional sense if your storage is partitioned for instance, provided you can open a popup.

[07:33:56.0726] <freddy>
probably tricky to have WPT for (:

[07:34:38.0876] <annevk>
freddy: well in the case of CORS preflights the server can observe, and WPT controls the server

[07:35:12.0359] <freddy>
the server can observe whether the browser will do another OPTIONS request. right.

[07:35:14.0077] <annevk>
freddy: that also applies to HTTP cache revalidation requests and such

[07:36:35.0081] <freddy>
Ah, right. Thanks!

[11:21:28.0715] <annevk>
mfreed: so is Google no longer on board with replacements for innerHTML and friends?

[11:22:07.0217] <annevk>
mfreed: I don't really understand https://github.com/whatwg/html/issues/8759#issuecomment-1481321471

[11:26:34.0067] <TabAtkins>
FYI: I've reverted the entire set of commits that started being problematic two weeks ago, so everything should work as it did two weeks ago again. I'll continue working on them in a branch. See my post-mortem <https://github.com/speced/bikeshed/issues/1773#issuecomment-1481598821> for details.

[11:26:46.0119] <TabAtkins>
 * FYI: I've reverted the entire set of Bikeshed commits that started being problematic two weeks ago, so everything should work as it did two weeks ago again. I'll continue working on them in a branch. See my post-mortem https://github.com/speced/bikeshed/issues/1773#issuecomment-1481598821 for details.


2023-03-24
[01:38:57.0456] <freddy>
I really value Jeffrey Yasskin 's comment on the setHTML / DSD issue. I think he's spot on that we have a list of decisions and requirements that ended up not being properly documented and fully resolved. I think we need to retry and get _everyone_ in the same room.

[02:42:47.0142] <annevk>
I don't disagree with the gist of his comment, but I also feel like I've been getting the least amount of clarity from Google on this set of issues.

[02:44:15.0077] <annevk>
And each time we discuss it with them there's a long period with no follow-up...

[02:54:09.0831] <freddy>
does that mean we need to include someone who has only been involved in background conversations? so far

[02:54:14.0245] <freddy>
 * does that mean we need to include someone who has only been involved in background conversations so far?

[03:02:24.0993] <annevk>
Dunno, not entirely sure what's going on.

[05:06:40.0337] <sideshowbarker>
Is anybody planning to attend any part of the IETF meeting next week in Yokohama?
Looking at the agenda at https://datatracker.ietf.org/meeting/116/agenda/ I don’t find much of anything relevant except for a session on Wednesday about the Web Transport protocol — https://datatracker.ietf.org/meeting/116/materials/agenda-116-webtrans-01

[05:07:45.0119] <annevk>
I found a fun WebKit bug: `x =new URL("about:blank");x.toString = () => { throw 1 };w(new URL("about:blank", x));`


2023-03-25
[19:34:56.0178] <Domenic>
Sneaky fast-paths...

[19:35:24.0840] <Domenic>
> <@sideshowbarker:matrix.org> Is anybody planning to attend any part of the IETF meeting next week in Yokohama?
> Looking at the agenda at https://datatracker.ietf.org/meeting/116/agenda/ I don’t find much of anything relevant except for a session on Wednesday about the Web Transport protocol — https://datatracker.ietf.org/meeting/116/materials/agenda-116-webtrans-01

Several people from Chrome Tokyo are attending, but not me

[20:17:45.0216] <sideshowbarker>
> <@domenicdenicola:matrix.org> Several people from Chrome Tokyo are attending, but not me

Do you know which sessions they're attending?

[20:20:28.0216] <sideshowbarker>
Except for the WebTransport protocol session, the closest other things that I see in the agenda were some QUIC sessions and a WebRTC-related WISH sesssion

[20:21:20.0116] <Domenic>
I think it's mostly for personal enrichment, so they'll probably pick which session sound interesting to them. I'd guess the HTTPWG might be relevant too?

[20:21:43.0479] <sideshowbarker>
ah yeah there’s always HTTP stuff yeah

[20:23:10.0707] <sideshowbarker>
I wish they had at least one informal thing that was open to anybody without need to pay the registration fee

[20:24:16.0917] <sideshowbarker>
Otherwise for me personally at least, it’s hard to justify the relatively-steep registration fee, which I think is 375 USD minimum just to attend one day

[20:25:08.0352] <Domenic>
Yeah I was pretty impressed with the prices as well

[20:28:27.0982] <jesup>
Compared to hotel and travel costs (for 99% of attendees), the registration isn't large.   Locals are obviously different

[20:30:42.0321] <sideshowbarker>
Yeah

[20:53:52.0125] <sideshowbarker>
> <@domenicdenicola:matrix.org> Yeah I was pretty impressed with the prices as well

The fact that the prices are so high is even more impressive when you look at the IETF’s budget figures and see that registration fees seem to only cover about _half_ of the gross cost of the meetings.
A big part of the rest of meeting costs are covered by sponsorship — but even after all that, the IETF still ends up spending several hundred thousand dollars of their own money on meetings each year.
I think their annual gross cost for their meetings is about 4 million USD — so, at three meetings a year, it seems like the total price tag for each meeting must be more than 1 million USD.

[04:27:59.0034] <annevk>
Domenic: I vaguely recall you complaining about "base": "about:blank" at some point, I fixed it: https://github.com/web-platform-tests/wpt/pull/39203

[04:28:25.0406] <annevk>
Was looking at some WebKit test failures and turns out some of the tests were wrong instead


2023-03-27
[00:38:59.0221] <annevk>
Domenic: diff looks a lot better now, only the problematic test is removed now

[00:39:27.0130] <annevk>
I should have checked it that way sooner, didn't realize how easy that is nowadays

[02:48:42.0924] <annevk>
Jake Archibald: thanks for https://github.com/WICG/scroll-to-text-fragment/issues/217#issuecomment-1484829059. What do you think makes sense? I'm still leaning towards history entry

[02:50:01.0423] <Jake Archibald>
annevk: hah, I just edited my comment to lean towards history entry.

[10:57:01.0148] <annevk>
I think we might have already ended up in a situation where HTML parser tests are not getting upstreamed...


2023-03-28
[06:43:53.0147] <sefeng>
can someone help me to understand the correct behaviour of sequential focusing when the current focused element is not in `Document's sequential navigation order`. I've filed a bug https://bugzilla.mozilla.org/show_bug.cgi?id=1824805 

[06:47:32.0428] <sefeng>
I think this eventually fits into `Let candidate be the first suitable sequentially focusable area in the home document following starting point, if any; or else null `, however I don't understand what `following starting point` means

[07:26:10.0703] <annevk>
sefeng: I think that's worth filing an issue on

[07:26:32.0866] <annevk>
sefeng: following could mean node tree following, but could also mean some implementation-defined thing that potentially looks at the layout tree, I suppose

[07:27:28.0559] <sefeng>
okay, thanks! I am confused. I'll file one

[07:28:59.0306] <annevk>
sefeng: I'm also not sure I even understand how to navigate that table

[07:39:42.0830] <sefeng>
Filed https://github.com/whatwg/html/issues/9081

[08:15:46.0177] <bkardell: away March 27>
hmm... I just noticed that custom elements are not listed as a means of extenisbility for html (where all the others are  https://html.spec.whatwg.org/#extensibility)... seems strange to me, but...is there a reason? I tried searching issues to see if I could see it discussed, but I couldn't find anything, so  I'm curious... I thought maybe because it wasn't so much about HTML, but it seems like it is as much as data-, for example

[08:15:55.0970] <bkardell: away March 27>
 * hmm... I just noticed that custom elements are not listed as a means of extenisbility for html (where all the others are  https://html.spec.whatwg.org/#extensibility)... seems strange to me, but...is there a reason? I tried searching issues to see if I could see it discussed, but I couldn't find anything, so  I'm curious..\

[08:16:01.0411] <bkardell: away March 27>
 * hmm... I just noticed that custom elements are not listed as a means of extenisbility for html (where all the others are  https://html.spec.whatwg.org/#extensibility)... seems strange to me, but...is there a reason? I tried searching issues to see if I could see it discussed, but I couldn't find anything, so  I'm curious..

[08:20:25.0555] <annevk>
More context on my earlier HTML parser test comment: https://github.com/web-platform-tests/wpt/issues/27868#issuecomment-1487094289

[08:21:38.0106] <annevk>
bkardell: away March 27: we lacked Ian Hickson's holistic knowledge of the HTML Standard when adding custom elements most likely; please file?

[08:36:36.0272] <bkardell: away March 27>
https://github.com/whatwg/html/issues/9082 

[09:44:04.0714] <annevk>
bkardell: feel free to PR stuff like that btw


2023-03-29
[15:20:32.0054] <Jeffrey Yasskin>
How should we decide whether to use https://html.spec.whatwg.org/multipage/webappapis.html#concept-environment-top-level-origin vs getting the node navigable's top-level traversible's active document's origin? I'm nervous that the former is implementation-defined.


2023-03-30
[17:24:59.0903] <Domenic>
> <@jyasskin:matrix.org> How should we decide whether to use https://html.spec.whatwg.org/multipage/webappapis.html#concept-environment-top-level-origin vs getting the node navigable's top-level traversible's active document's origin? I'm nervous that the former is implementation-defined.

It is only implementation-defined for shared and service workers, FWIW.

But, your question is a good one. I think they should be equivalent for Windows and all the complexity comes from the other global types (worklets, dedicated/shared/service workers).

[17:25:36.0032] <Domenic>
https://github.com/whatwg/html/issues/8014 is related

[17:49:44.0961] <bkardell>
> <@annevk:matrix.org> bkardell: feel free to PR stuff like that btw

Done

[22:23:24.0706] <annevk>
Domenic: there is also complexity when there is no Window yet

[22:23:55.0515] <annevk>
Domenic: that's the main reason we have the former cc Jeffrey Yasskin 

[23:25:27.0718] <sideshowbarker>
So about the spec links such as https://dom.spec.whatwg.org/#ref-for-dom-abortcontroller-abortcontroller① — to the for-developers parts of specs — that we’re currently referencing in MDN/BCD but that aren’t guaranteed to forever keep pointing to the parts we intend: I’ve been wondering if I should just go ahead and manually add stable IDs to the specs for all those

[23:25:56.0844] <sideshowbarker>
that is, so the one I cited above would instead be https://dom.spec.whatwg.org/#dom-abortcontroller-abortcontroller-dev

[23:26:47.0932] <sideshowbarker>
…and I mean, rather than patching Bikeshed to auto-add them, I’d just manually patch the specs with patches that add the new IDs

[23:30:40.0079] <sideshowbarker>
Would anybody (especially the spec editors) object to me doing that?
The specs that would need patching include DOM, Encoding, Fetch, File System, Fullscreen, Streams, WebSockets, IndexedDB, and a few others

[23:33:35.0074] <sideshowbarker>
…and most of those specs would need less than 10 new IDs added — but a few others would need dozens of them.
DOM would need the most — 188, and IndexedDB and Fetch and Streams would need a few dozen each

[23:33:57.0287] <annevk>
sideshowbarker: I'd slightly prefer we add the generated Bikeshed ID if that doesn't change the output

[23:34:38.0416] <annevk>
The more stable we can keep existing IDs the better as people might have copied them from MDN and such

[23:35:29.0749] <sideshowbarker>
but we could keep the existing generated IDs while adding new ones in addition to those, right?

[23:35:50.0943] <sideshowbarker>
so no existing IDs would break

[23:37:49.0542] <sideshowbarker>
I can’t remember now who objected to me adding all the -①  etc. links to MDN to begin with — but whoever did, their objection was that we have no way of ensuring those generated IDs will always continue to point to the for-developers targets they currently point to

[23:38:49.0973] <sideshowbarker>
In fact, we don’t have any way of knowing which of those might already now have changed to point to different parts of the specs (due to some new reference to a term being added somewhere earlier in a spec)

[23:40:46.0576] <sideshowbarker>
I don’t personally feel super strongly about it either way — it’s just something that’s been open and unresolved for a while now. And the attempt I made at patching Bikeshed to auto-generate them wasn’t approved, and I’ve not managed to make time to try completely re-doing the Bikeshed patching approach in the way that was suggested as an alternative to my Bikeshed patch

[23:47:52.0676] <annevk>
sideshowbarker: what I mean is that if the ID is `ref-for-dom-abortcontroller-abortcontroller①` for some element today, we just add that directly; or will Bikeshed trip on that?

[00:12:43.0653] <sideshowbarker>
> <@annevk:matrix.org> sideshowbarker: what I mean is that if the ID is `ref-for-dom-abortcontroller-abortcontroller①` for some element today, we just add that directly; or will Bikeshed trip on that?

Ah, yeah, I can test that and see

[00:47:31.0480] <annevk>
I wonder if other browsers are interested in revisiting defining element attribute order. I guess I need to figure out where we last discussed that.

[00:49:37.0602] <Domenic>
IDL interface attribute order?

[00:50:03.0116] <Domenic>
Oh, no, element content attributes also have an order, don't they

[00:55:35.0037] <annevk>
Yeah, I noticed some serialization tests depend on Chromium order

[00:55:55.0410] <annevk>
And rniwa was like, why don't we finally fix that (not in those words)

[05:20:35.0917] <Ms2ger>
I thought that was well specced and implemented?

[05:57:11.0691] <annevk>
Ms2ger: the spec does seem to assume insertion order; I also can't find issues, but this was discussed a long time ago

[05:57:23.0579] <annevk>
Ms2ger: perhaps we resolved on insertion order back then though

[05:57:53.0001] <Ms2ger>
That was what I thought, yeah, but it's definitely been a while

[05:58:42.0795] <annevk>
Ms2ger: looks like it's your commit

[05:58:53.0410] <Ms2ger>
😅

[05:59:00.0447] <annevk>
https://github.com/whatwg/dom/commit/061b9914c2dfdd2e22984470af7e7f39915db74f

[05:59:39.0953] <annevk>
Alright, so the next question is which of Chromium and WebKit is wrong, thanks Ms2ger 

[05:59:56.0056] <Ms2ger>
I vaguely recall that gecko may have had some issue with "mapped" attributes, if that's what they were called

[09:04:06.0705] <Maxim Vaarwel>
Good evening to everyone and excuse me if I interrupted. I have got the question about **task** and its 'component' - **script evaluation environment settings object set**. What is this case when a task has a set with more than one environment settings object? It would be nice if somebody explain this thin moment in spec.

[09:25:24.0628] <hacknorris>
i know you dont do in javascript but a general question - someone knows how to style both visited and unvisited links/anchors thru javascript? im stuck with making themes on my blog... and best i did for now was making first link colored. also i dont want for loops cause all code for themes i throw in onclick event of theme buttons, so for me it'd be a mess doing for's in one line...

[10:31:17.0930] <hacknorris>
noone ?

[11:36:11.0906] <Dominic Farolino>
are infra strings directly usable as ES strings? That is, in a spec, can I invoke an ES function directly with an infra string?

[11:36:34.0970] <Dominic Farolino>
I don't think I have to go through the WebIDL conversion functions since infra strings aren't WebIDL string types, IIUC

[11:42:57.0152] <Andreu Botella>
> <@domfarolino:matrix.org> are infra strings directly usable as ES strings? That is, in a spec, can I invoke an ES function directly with an infra string?

Infra itself calls into ES functions with infra strings: https://infra.spec.whatwg.org/#parse-a-json-string-to-a-javascript-value

[11:44:42.0634] <Jeffrey Yasskin>
Strictly, that's probably incorrect, since the ES-side string is an object with a bunch of properties. Because we know the details of %JSON.parse%, we know it doesn't look at anything besides the things Infra specifies, but we couldn't do that to an ES function in general.

[11:47:00.0924] <Jeffrey Yasskin>
I'd argue that a WebIDL string is an Infra string, but WebIDL doesn't actually say that since it was written before Infra.

[11:47:11.0365] <Jeffrey Yasskin>
(We should fix that. :)

[11:47:53.0488] <Andreu Botella>
The ES-side string isn't an object

[11:48:20.0163] <Andreu Botella>
I expect ToString(anInfraString) to do the right things in terms of creating an object with `String.prototype` as its prototype

[11:54:19.0479] <Jeffrey Yasskin>
https://tc39.es/ecma262/#sec-tostring doesn't actually create an object here, but I think you're right that https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type defines String in the same way as https://infra.spec.whatwg.org/#string except for the maximum length. 

[11:54:56.0215] <Andreu Botella>
 * I expect ToObject(anInfraString) to do the right things in terms of creating an object with `String.prototype` as its prototype

[11:54:59.0710] <Andreu Botella>
I meant to type ToObject

[11:55:08.0517] <Andreu Botella>
 * I meant to type ToObject 🤦

[11:59:22.0859] <Dominic Farolino>
Thanks!

[13:25:34.0829] <TabAtkins>
> <@sideshowbarker:matrix.org> So about the spec links such as https://dom.spec.whatwg.org/#ref-for-dom-abortcontroller-abortcontroller① — to the for-developers parts of specs — that we’re currently referencing in MDN/BCD but that aren’t guaranteed to forever keep pointing to the parts we intend: I’ve been wondering if I should just go ahead and manually add stable IDs to the specs for all those

I've been poking at fixing that issue, by the way. It's still a pretty complex issue, unfortunately. Switching to manually-specified IDs would be a good idea in any case, imo.

[14:38:38.0977] <sideshowbarker>
> <@tabatkins:matrix.org> I've been poking at fixing that issue, by the way. It's still a pretty complex issue, unfortunately. Switching to manually-specified IDs would be a good idea in any case, imo.

Yeah I think the root issue is that we never expected that we'd end up having a lot of need to link to _references_ to terms rather than just the terms themselves. That's true for Wattsi as well. But it's turned out there is some need ー and not just for the developer sections, but also for, e.g., linking to specific steps in algorithms. That's something I've needed to do myself when answering "exactly where does the spec say this is the required behavior" questions on Stack Overflow.

[14:39:20.0218] <TabAtkins>
Indeed. And in algos I *definitely* can't auto-gen IDs to steps, because steps change their position all the time.

[14:39:37.0916] <sideshowbarker>
Right

[14:39:41.0554] <TabAtkins>
Dev sections are at least a little bit easier, maybe.

[14:40:28.0658] <Jeffrey Yasskin>
Linking to specific steps is https://github.com/speced/bikeshed/issues/1405.

[14:40:47.0344] <sideshowbarker>
> <@tabatkins:matrix.org> Dev sections are at least a little bit easier, maybe.

Yup, at least they have some identifiable, shared semantic

[14:41:43.0783] <TabAtkins>
That issue is about formatting a link to an (already ID'd) specific step, so it says "Step 4" or whatever. Making steps linkable is already handled, albeit requiring manual IDs.

[14:41:53.0685] <sideshowbarker>
> <@jyasskin:matrix.org> Linking to specific steps is https://github.com/speced/bikeshed/issues/1405.

Ah cool, I didn't know there was an existing issue. Glad I'm not the only one who does that 😄

[14:42:53.0317] <sideshowbarker>
> <@tabatkins:matrix.org> That issue is about formatting a link to an (already ID'd) specific step, so it says "Step 4" or whatever. Making steps linkable is already handled, albeit requiring manual IDs.

Oh, I see now

[14:44:42.0073] <TabAtkins>
(An <li> with an ID already generates a floating anchor next to it, so you can easily grab the link. Same with dt/dd too, iirc?)

[14:45:57.0393] <Jeffrey Yasskin>
> <@tabatkins:matrix.org> That issue is about formatting a link to an (already ID'd) specific step, so it says "Step 4" or whatever. Making steps linkable is already handled, albeit requiring manual IDs.

That one's https://github.com/speced/bikeshed/issues/796.

[14:46:39.0396] <TabAtkins>
Ohhh you're right, sorry. 

[16:58:29.0776] <Jeffrey Yasskin>
> <@domenicdenicola:matrix.org> https://github.com/whatwg/html/issues/8014 is related

Oh, I only just now read this link. From that issue, it sounds like we should avoid using an environment's top-level origin, and should instead go through the window's navigable.


2023-03-31
[18:14:25.0794] <sideshowbarker>
Jeffrey Yasskin: TabAtkins: If we have a general way to add arbitrary anchors to any line in a spec that we want to share a link for, is there a specific separate need to link to steps in particular?

[18:15:24.0081] <sideshowbarker>
* Jeffrey Yasskin: TabAtkins: If we have a general way to add arbitrary anchors to any line in a spec that we want to share a link for, is there a specific separate need for something else to link to steps in particular?

[18:17:44.0968] <sideshowbarker>
* Jeffrey Yasskin: TabAtkins: If we have a general way to add arbitrary anchors to any line in a spec that we want to share a link for, is there a specific separate need for some additional syntax for manually marking up links to steps in particular?

[18:21:34.0123] <TabAtkins>
That issue was specifically about adding an id to markdown lis, which isn't possible normally

[18:21:57.0331] <sideshowbarker>
Ok

[18:22:59.0451] <sideshowbarker>
Having Bikeshed _automatically_ generate anchors for all steps is something that'd imaginably be pretty useful. But maybe that'd be overkill

[18:27:04.0225] <sideshowbarker>
> <@tabatkins:matrix.org> That issue was specifically about adding an id to markdown lis, which isn't possible normally

But as long as it's being added manually anyway, can't an HTML <a> element be added _within_ the text content of the markdown li?

[18:35:22.0295] <sideshowbarker>
At least, manually giving a step an ID that's the same its current step number seems fragile and imprudent, since the step number can change later. So it'd be better anyway to give it some semantic ID, or even just some opaque ID

[07:16:56.0418] <Yagiz Nizipli>
We recently launched Ada URL parser v2. We shared some benchmarks in this blog post for the interested parties: https://www.yagiz.co/announcing-ada-url-parser-v2-0/

[08:29:53.0504] <snek>
what if browsers had an api to get the etld+1 of a url? for a single website, downloading the entire public suffix list is a lot but since browsers already have it, and they already have url parsing apis...

[08:31:06.0375] <snek>
i guess there is an old issue here... https://github.com/whatwg/url/issues/528

[08:31:13.0769] <snek>
seems like it would be very easy to implement

[08:32:23.0861] <annevk>
snek: needs clarity on use cases and web developer demand, e.g., Stack Overflow questions

[08:32:42.0043] <annevk>
snek: if you can show a bunch of websites bundle packages for this that would probably sell it

[08:33:07.0105] <snek>
that's a tough thing to show

[08:33:35.0199] <snek>
for example for my use case, if i can't convince browsers to add this, i will just highlight the entire domain, rather than shipping the public suffix list in my website

[08:33:44.0524] <annevk>
That's mainly why it hasn't happened yet. There's also some people that really dislike the PSL, despite everything building on top of it

[08:34:11.0475] <annevk>
Please add a comment with your use case snek 

[08:34:47.0773] <Andreu Botella>
Also, if this API is part of the URL spec, it would be hard for server-side JS runtimes to implement, since they don't currently ship the PSL

[08:36:26.0206] <annevk>
snek: also if any other utility methods come to mind I'd very much like to hear about them, ideally in the form of issues against the spec

[08:36:42.0394] <snek>
sure i guess

[08:36:53.0522] <Andreu Botella>
 * Also, if this API is part of the URL spec, it would be hard for server-side JS runtimes to implement, since they don't currently include the PSL

[08:36:58.0974] <snek>
i will say, my experience with whatwg is that opening issues doesn't really do anything

[08:37:19.0370] <snek>
you have to go find whoever works at google on the area you are interested in and talk to them

[08:37:27.0367] <annevk>
snek: some stuff can take a long time for sure, but it's better to have it recorded than not recorded

[11:38:25.0985] <Alexander Kalenik>
hey, I am going through Navigables spec and got a bit confused by HTML document loading step: https://html.spec.whatwg.org/multipage/document-lifecycle.html#navigate-html which is 11.1 step in "Populating a session history entry".

I found https://github.com/whatwg/html/issues/8095#issue-1300437093 and see that the problem appears to be that Fetch callbacks got introduced but this part of spec hasn't been updated yet.

I'm curious if anyone can give a hint of how document loading might look with relevant Fetch spec taken into account. I have vague idea that processResponseEndOfBody should be specified to do something about firing "load" event (which is also confusing because document does not exist on the step that does fetch call so callback cannot capture it). And I am wondering on what step and using what mechanism response body should be piped into HTML parser.

