2023-05-02
[11:46:22.0077] <jugglinmike>
> <@annevk:matrix.org> And it's not like we really govern `file:` fetching to begin with, it's pretty explicitly undefined

Thanks. It sounds like that issue was invalid from the start. I'll review Fetch and see about petitioning implementations to support it.


2023-05-03
[05:18:15.0786] <annevk>
Domenic: on reflection, it should probably be `Document.parseHTML()`. If we ever wanted to tackle non-HTML cases we could do a whole swath of XML-named variants.

[05:47:31.0558] <annevk>
Dominic Farolino: did you forget to push in https://github.com/w3c/csswg-drafts/pull/8759? If not, my first comment still applies I think. Please clarify if you think it doesn't.

[05:48:28.0474] <Dominic Farolino>
Oh hmmm... yeah it looks like I did. Sorry, let me fix that in a bit.

[05:49:49.0585] <Dominic Farolino>
I'm pretty sure I made the commit somewhere... maybe on a different computer & never pushed it heh


2023-05-04
[01:57:26.0408] <annevk>
Domenic: not sure I'm totally onboard yet, but it might be interesting to figure out how often `stopImmediatePropagation()` is used and whether we could make it controlled by yet another boolean controlled by the dispatcher

[09:32:35.0028] <smaug>
bkardell: oops, did I leave too early

[09:32:38.0358] <smaug>
I'll try to review the pr

[09:32:51.0821] <smaug>
ping me if I don't

[09:32:59.0479] <smaug>
(I was traveling last week)

[09:44:45.0679] <bkardell>
> <@smaug:mozilla.org> bkardell: oops, did I leave too early

nope, I just said what it was really and please have a look

[09:55:02.0283] <bkardell>
annevk: sorry about that - i think I fixed the things you mentioned last week. I expect that line wrapping bit is gonna be a general thing to fix in the other :dir PR too

[09:55:58.0870] <bkardell>
(in the silly 9088 one https://github.com/whatwg/html/pull/9088)

[10:14:21.0209] <annevk>
bkardell: it would be great if any nits are fixed ahead of general review as the nits tend to make reviews very noisy

[10:53:22.0571] <annevk>
Andreu Botella: thanks again for https://github.com/whatwg/url/pull/735#issuecomment-1441503315! I will try to find some time to write tests soon

[10:53:34.0340] <Andreu Botella>
sure!

[11:00:36.0593] <bkardell>
> <@annevk:matrix.org> bkardell: it would be great if any nits are fixed ahead of general review as the nits tend to make reviews very noisy

You mean on the dir one?

[13:08:55.0053] <bkardell>
> <@bkardell:igalia.com> You mean on the dir one?

hopefully done with my last commit!  Unless I've misunderstood, which is totally possible


2023-05-05
[18:11:57.0769] <Dominic Farolino>
Anyone been seeing some weird ref box formatting like this?

[20:30:27.0326] <Domenic>
> <@domfarolino:matrix.org> Anyone been seeing some weird ref box formatting like this?

Probably related to https://github.com/whatwg/meta/issues/271

[23:29:22.0694] <zcorpan>
annevk: I guess https://github.com/w3ctag/design-reviews/issues/392#issuecomment-510855073 has been addressed?

[23:34:12.0375] <annevk>
zcorpan: at least partially I think, but it's been a while and HTML's terminology around this changed.

[23:34:59.0884] <annevk>
zcorpan: it used to do checks on the number of top-level bcs in a bcg, I think, but again, it's been a while.

[23:43:18.0916] <zcorpan>
annevk: ok yeah, seems to be step 6 in https://wicg.github.io/scroll-to-text-fragment/#restricting-the-text-fragment

[02:24:05.0889] <sideshowbarker>
This room is now also being logged to https://archive.matrix.org/r/whatwg:matrix.org

The logs have timestamp links — but somewhat unfortunately, the links are matrix.to URLs rather than being URLs for the archive.matrix.org logs themselves.

So that means that anybody wanting to view the messages needs to have a Matrix client installed in order to read them.

That seems… suboptimal — so I’m hoping there will eventually be a way to share timestamp URLs to the archive.matrix.org logs themselves. (I’ve pinged the maintainers already to ask.)

[05:20:34.0076] <annevk>
bkardell: so `data-x="valid custom element name">` does have break opportunities as well...

[05:20:54.0798] <annevk>
bkardell: do you want to try one more time or should I take over?

[05:21:38.0495] <bkardell>
where is the break opportunities, the spaces in the attribute?

[05:21:52.0514] <bkardell>
 * where is the break opportunities, the spaces in the attribute? annevk 

[05:22:03.0126] <bkardell>
no I'd really like to understand, thanks for your patience

[05:22:52.0942] <annevk>
bkardell: yeah exactly, essentially if you put it all on one conceptual line, any space is a break opportunity (for the purposes of the HTML Standard)

[05:22:53.0051] <bkardell>
 * where are the break opportunities, the spaces in the attribute? annevk

[05:23:02.0858] <bkardell>
ok

[05:23:56.0208] <annevk>
bkardell: it's documented at https://github.com/whatwg/html/blob/main/CONTRIBUTING.md#source-formatting

[05:27:09.0031] <bkardell>
ok I _hope_ i got it submitted correctly now

[05:28:36.0443] <bkardell>
 * ok I _hope_ i got it submitted correctly now annevk 

[05:33:31.0862] <annevk>
bkardell: https://twitter.com/htmlstandard/status/1654464175890989056 \o/

[05:33:52.0908] <bkardell>
woohoo thanks

[05:34:29.0301] <bkardell>
now that we landed the super easy editorial one the realy hard directionality one should be a piece of cake :-p 

[06:04:11.0488] <sideshowbarker>
https://github.com/matrix-org/matrix-public-archive/issues/137

[14:04:15.0386] <TabAtkins>
sideshowbarker: Heya, the CSSWG drafts server now just employs an internal redirect to the github.io versions, so I've set up some redirects to ensure that anyone hitting those github URLs gets kicked over to the drafts server URL. Do you still need the timestamps.json file? At the moment I've just killed it, but I can restore it if needed.


2023-05-08
[00:11:37.0030] <sideshowbarker>
> <@tabatkins:matrix.org> sideshowbarker: Heya, the CSSWG drafts server now just employs an internal redirect to the github.io versions, so I've set up some redirects to ensure that anyone hitting those github URLs gets kicked over to the drafts server URL. Do you still need the timestamps.json file? At the moment I've just killed it, but I can restore it if needed.

Thanks for the heads-up. Yes, please, if you can restore the `timestamps.json` file, I’d much appreciated it. Without the old Last-Revised header — and with the Last-Modified header not showing the actual publication date — there’s otherwise no good way to programatically from client code to determine the dates of the published specs. (That is, without resorting to parsing or scraping the HTML from a response, or running a git command to check when the last update was made to the corresponding git source).

[00:12:23.0380] <sideshowbarker>
> <@tabatkins:matrix.org> sideshowbarker: Heya, the CSSWG drafts server now just employs an internal redirect to the github.io versions, so I've set up some redirects to ensure that anyone hitting those github URLs gets kicked over to the drafts server URL. Do you still need the timestamps.json file? At the moment I've just killed it, but I can restore it if needed.

 * Thanks for the heads-up. Yes, please, if you can restore the `timestamps.json` file, I’d much appreciated it. Without the old Last-Revised header — and with the Last-Modified header not showing the actual publication date — there’s otherwise no good way programatically, from client code, to determine the dates of the published specs. (That is, without resorting to parsing or scraping the HTML from a response, or running a git command to check when the last update was made to the corresponding git source).

[00:13:05.0992] <sideshowbarker>
 * Thanks for the heads-up. Yes, please, if you can restore the `timestamps.json` file, I’d much appreciate it. Without the old Last-Revised header — and with the Last-Modified header not showing the actual publication date — there’s otherwise no good way programatically, from client code, to determine the dates of the published specs. (That is, without resorting to parsing or scraping the HTML from a response, or running a git command to check when the last update was made to the corresponding git source).

[02:22:17.0215] <sideshowbarker>
Andreu Botella:  I don’t know you’re aware already, but the spec build for the unversioned CSS specs is currently broken. I think Tab has an idea how to fix it and may just need to make time to do that once he’s back online — but in the meantime maybe you have some insight on an elegant way to get it working again, given the current state of things.

And the current state of things appears to be that drafts.csswg.org is now just proxying w3c.github.io/csswg-drafts — while requests to w3c.github.io/csswg-drafts are now redirecting to drafts.csswg.org — but only partially. (How that setup is actually working at all, I don’t really understand yet.)

The related build changes are in https://github.com/w3c/csswg-drafts/commit/52077ef4b1b0459f2aef3179dcf47a6c3e185012 and https://github.com/w3c/csswg-drafts/commit/8523f13a005f7213c39200e24944f8549e9e5227, and what’s partial about the redirect behavior is this:
- All _versioned_ CSS spec URLs (such as https://w3c.github.io/csswg-drafts/css-backgrounds-3/) are now being redirected to their corresponding drafts.csswg.org URLs (such as https://drafts.csswg.org/css-backgrounds-3/)
- However, all _unversioned_ CSS spec URLs (such as https://w3c.github.io/csswg-drafts/css-backgrounds/) are _not_ being redirected but are instead now just 404s. And among other things, that means all the current 1000+ spec links in CSS articles in MDN are now 404s.
At https://github.com/w3c/csswg-drafts/issues/8798#issuecomment-1536775277 Tab mentions it'd be a bunch of trouble to get the redirects for the unversioned spec URLs working. But since I think you originally wrote the build code, it seems possible you might have some idea of how to do it with less trouble.

[02:23:10.0519] <sideshowbarker>
 * Andreu Botella:  I don’t know you’re aware already, but the spec build for the unversioned CSS specs is currently broken. I think Tab has an idea how to fix it and may just need to make time to do that once he’s back online — but in the meantime maybe you have some insight on an elegant way to get it working again, given the current state of things.

And the current state of things appears to be that drafts.csswg.org is now just proxying w3c.github.io/csswg-drafts — while requests to w3c.github.io/csswg-drafts are now redirecting to drafts.csswg.org — but only partially. (How that setup is actually working at all, I don’t really understand yet.)

The related build changes are in https://github.com/w3c/csswg-drafts/commit/52077ef4b1b0459f2aef3179dcf47a6c3e185012 and https://github.com/w3c/csswg-drafts/commit/8523f13a005f7213c39200e24944f8549e9e5227, and what’s partial about the redirect behavior is this:

- All _versioned_ CSS spec URLs (such as https://w3c.github.io/csswg-drafts/css-backgrounds-3/) are now being redirected to their corresponding drafts.csswg.org URLs (such as https://drafts.csswg.org/css-backgrounds-3/)
- However, all _unversioned_ CSS spec URLs (such as https://w3c.github.io/csswg-drafts/css-backgrounds/) are _not_ being redirected but are instead now just 404s.
  And among other things, that means all the current 1000+ spec links in CSS articles in MDN are now 404s.

At https://github.com/w3c/csswg-drafts/issues/8798#issuecomment-1536775277 Tab mentions it'd be a bunch of trouble to get the redirects for the unversioned spec URLs working. But since I think you originally wrote the build code, it seems possible you might have some idea of how to do it with less trouble.

[03:35:21.0002] <Andreu Botella>
> <@sideshowbarker:matrix.org> Andreu Botella:  I don’t know you’re aware already, but the spec build for the unversioned CSS specs is currently broken. I think Tab has an idea how to fix it and may just need to make time to do that once he’s back online — but in the meantime maybe you have some insight on an elegant way to get it working again, given the current state of things.
> 
> And the current state of things appears to be that drafts.csswg.org is now just proxying w3c.github.io/csswg-drafts — while requests to w3c.github.io/csswg-drafts are now redirecting to drafts.csswg.org — but only partially. (How that setup is actually working at all, I don’t really understand yet.)
> 
> The related build changes are in https://github.com/w3c/csswg-drafts/commit/52077ef4b1b0459f2aef3179dcf47a6c3e185012 and https://github.com/w3c/csswg-drafts/commit/8523f13a005f7213c39200e24944f8549e9e5227, and what’s partial about the redirect behavior is this:
> 
> - All _versioned_ CSS spec URLs (such as https://w3c.github.io/csswg-drafts/css-backgrounds-3/) are now being redirected to their corresponding drafts.csswg.org URLs (such as https://drafts.csswg.org/css-backgrounds-3/)
> - However, all _unversioned_ CSS spec URLs (such as https://w3c.github.io/csswg-drafts/css-backgrounds/) are _not_ being redirected but are instead now just 404s.
>   And among other things, that means all the current 1000+ spec links in CSS articles in MDN are now 404s.
> 
> At https://github.com/w3c/csswg-drafts/issues/8798#issuecomment-1536775277 Tab mentions it'd be a bunch of trouble to get the redirects for the unversioned spec URLs working. But since I think you originally wrote the build code, it seems possible you might have some idea of how to do it with less trouble.

I wasn't aware, I haven't really been keeping track of what was going on with the spec builds. But let me take a look

[04:12:12.0819] <timdream>
Is the event firing order on the same node spec’d anywhere? I saw a blog post saying that the language regarding event firing order (“… in their order of registration.”) was present in the UI Event level 3 draft around 2011 but removed in 2016.
It was indeed not explained in the currency UI Event spec, but the section on “changes from DOM level 2” did mention the event listeners is now ordered.
I am very confused by that blog post…

Post: https://blog.gslin.org/archives/2023/05/08/11176/
Current UI Event draft: https://w3c.github.io/uievents/#event-flow

[04:12:49.0731] <timdream>
* Is the event firing order on the same node spec’d anywhere? I saw a blog post saying that the language regarding event firing order (“… in their order of registration.”) was present in the UI Event level 3 draft around 2011 but removed in 2016. It was indeed not explained in the currenct UI Event spec, but the section on “changes from DOM level 2” did mention the event listeners is now ordered. I am very confused by that blog post…
Post: https://blog.gslin.org/archives/2023/05/08/11176/ Current UI Event draft: https://w3c.github.io/uievents/#event-flow

[04:15:51.0535] <Domenic>
What do you mean "event firing order"? Do you have a code example?

[04:28:30.0870] <timdream>
> <@domenicdenicola:matrix.org> What do you mean "event firing order"? Do you have a code example?

el.addEventListener(e => console.log("a")
el.addEventListener(e => console.log("b")
el.addEventListener(e => console.log("c")
el.dispatchEvent(new Event("test"))

[04:29:42.0133] <timdream>
Should console always print a,b,c per spec?

[04:31:51.0554] <Domenic>
Yes. This is specified in https://dom.spec.whatwg.org.

[04:33:15.0840] <timdream>
Domenic: could you point me the section? Sorry I couldn’t find it.

[04:34:31.0373] <Domenic>
https://dom.spec.whatwg.org/#dispatching-events

[04:35:03.0176] <timdream>
> <@domenicdenicola:matrix.org> https://dom.spec.whatwg.org/#dispatching-events

Wonderful, thank you!

[11:26:54.0615] <TabAtkins>
sideshowbarker: Both unversioned symlinks and the timestamps.json file are back in place, lmk if anything is still wonky on your end.

[15:55:57.0067] <Richard Gibson>
what happens if an author does something like this:
```
function generateBid(foo, bar, baz, setBid) {
  Promise.resolve()
    .then(() => setBid("post hoc"));
}
```
an exception?


2023-05-09
[20:17:28.0034] <sideshowbarker>
> <@tabatkins:matrix.org> sideshowbarker: Both unversioned symlinks and the timestamps.json file are back in place, lmk if anything is still wonky on your end.

Hot diggity dog 🎉 I’ll take a look now

[20:29:54.0626] <sideshowbarker>
> <@tabatkins:matrix.org> sideshowbarker: Both unversioned symlinks and the timestamps.json file are back in place, lmk if anything is still wonky on your end.

All working for me so far except for one problem: fragment IDs get don’t get handled right across the redirect; e.g., https://w3c.github.io/csswg-drafts/css-cascade-5/#layering ends up redirecting to https://drafts.csswg.org/css-cascade-5/#layering##layering — that is, the fragment part unexpectedly becomes `#layering##layering`.

I can look at the code myself this afternoon my time to try figure out why that’s happening, and patch it (if you don’t get to it first)

[20:30:29.0174] <TabAtkins>
Oh lol whoops, I tested that, weird

[20:30:49.0052] <TabAtkins>
Maybe I tested the versions before my new fragment code got built in

[20:30:53.0016] <TabAtkins>
Will fix tomorrow

[20:35:06.0370] <sideshowbarker>
Hai

[23:24:26.0204] <agnieszkamalutka12345>
  https://open.spotify.com/album/4k5cbXoFmZ5fgL06VT5tXR?si=prmDfLo5SY2eItQzgnWuYg&utm_source=copy-link https://docs.google.com/document/d/1O8UWReNENzJvCdLqQz9FMgyBPYYap_F-Sp6goCE9gS8/edit?usp=drivesdk&disco=AAAAh-Naur8

[23:28:50.0341] <agnieszkamalutka12345>
  https://open.spotify.com/album/4k5cbXoFmZ5fgL06VT5tXR?si=prmDfLo5SY2eItQzgnWuYg&utm_source=copy-link_sideshowbarker_: 

[23:29:07.0441] <agnieszkamalutka12345>
https://docs.google.com/document/d/1O8UWReNENzJvCdLqQz9FMgyBPYYap_F-Sp6goCE9gS8/edit?usp=drivesdk&disco=AAAAh-Naur8

[23:29:38.0928] <agnieszkamalutka12345>
 * https://docs.google.com/document/d/1O8UWReNENzJvCdLqQz9FMgyBPYYap_F-Sp6goCE9gS8/edit?usp=drivesdk&disco=AAAAh-Naur8


2023-05-10
[05:18:24.0901] <sideshowbarker>
> <@tabatkins:matrix.org> Maybe I tested the versions before my new fragment code got built in

So I spent some time trying to learn how the redirects are set up, and to find where the code for the redirects lives — but so I’ve not been able to find anything at all, really.

Given what I understand about what’s possible in on GitHub Pages hosting, and given that when I make requests with curl, I just get a 200s, and the index files that come back from curl requests don’t seem to have any kind of client-side redirects in them, at this point it’s kind of baffling to me how the redirects are actually work, or how they _could_ actually even work.

The only clue I have so for is the BUILTBYGITHUBCI text macro I see in the bikeshed calls in the workflow file — but grepping around for that, I don’t find anywhere that’s actually used for anything.

So I’m pretty much stumped :(

[05:18:38.0635] <sideshowbarker>
> <@tabatkins:matrix.org> Maybe I tested the versions before my new fragment code got built in

 * So I spent some time trying to learn how the redirects are set up, and to find where the code for the redirects lives — but so I’ve not been able to find anything at all, really.

Given what I understand about what’s possible in GitHub Pages hosting, and given that when I make requests with curl, I just get a 200s, and the index files that come back from curl requests don’t seem to have any kind of client-side redirects in them, at this point it’s kind of baffling to me how the redirects are actually work, or how they _could_ actually even work.

The only clue I have so for is the BUILTBYGITHUBCI text macro I see in the bikeshed calls in the workflow file — but grepping around for that, I don’t find anywhere that’s actually used for anything.

So I’m pretty much stumped :(

[05:19:36.0234] <Andreu Botella>
I actually made some progress while investigating that

[05:19:44.0119] <Andreu Botella>
https://github.com/speced/bikeshed-boilerplate/blob/main/boilerplate/csswg/abstract.include <- this is where that macro is used

[05:19:48.0460] <sideshowbarker>
 * So I spent some time trying to learn how the redirects are set up, and to find where the code for the redirects lives — but so I’ve not been able to find anything at all, really.

Given what I understand about what’s possible in GitHub Pages hosting, and given that when I make requests with curl, I just get a 200s, and the index files that come back from curl requests don’t seem to have any kind of client-side redirects in them, at this point it’s kind of baffling to me how the redirects are actually work, and however they’re set up, how they could actually even work.

The only clue I have so for is the BUILTBYGITHUBCI text macro I see in the bikeshed calls in the workflow file — but grepping around for that, I don’t find anywhere that’s actually used for anything.

So I’m pretty much stumped :(

[05:20:04.0914] <sideshowbarker>
oh — I’ll look right now

[05:20:49.0510] <Andreu Botella>
that script only redirects if the page isn't being served by drafts.csswg.org

[05:21:05.0811] <sideshowbarker>
ah, the separate bikeshed-boilerplate repo — that’s the one place I had not thought to look at so far. Now it seems obvious that’s where I should have looked 

[05:22:33.0059] <sideshowbarker>
> <@abotella:igalia.com> https://github.com/speced/bikeshed-boilerplate/blob/main/boilerplate/csswg/abstract.include <- this is where that macro is used

OK yeah so it seems the `draftUrl += "#"+location.hash` step isn’t needed at all, maybe?

[05:23:14.0295] <Andreu Botella>
yeah, shouldn't be

[05:23:22.0755] <sideshowbarker>
OK

[05:24:11.0424] <sideshowbarker>
(but even if that step were needed, it should instead be `draftUrl += location.hash`, since `location.hash already includes the `#`

[05:24:18.0280] <sideshowbarker>
 * (but even if that step were needed, it should instead be `draftUrl += location.hash`, since `location.hash` already includes the `#\`

[05:24:28.0240] <sideshowbarker>
 * (but even if that step were needed, it should instead be `draftUrl += location.hash`, since `location.hash` already includes the `#`

[05:24:51.0440] <sideshowbarker>
so I see now that‘s why we end up with the doubled `##`

[05:25:03.0605] <sideshowbarker>
e.g., https://drafts.csswg.org/css-backgrounds/#the-background##the-background

[05:26:00.0390] <Andreu Botella>
For unversioned specs, it seems like the mapping to a version is handled purely in the drafts server, and then the versioned spec is proxied from the github pages site

[05:26:31.0933] <Andreu Botella>
but since the github pages site doesn't build the index or the unversioned copies, opening those on the gihtub page

[05:26:42.0478] <Andreu Botella>
 * but since the github pages site doesn't build the index or the unversioned copies, opening those on the github pages site doesn't redirect to the drafts site

[05:34:05.0809] <sideshowbarker>
Andreu Botella: thanks, opened a PR at https://github.com/speced/bikeshed-boilerplate/pull/39 which just reverts the entire change that added the `draftUrl += "#"+location.hash` part


2023-05-11
[18:37:50.0939] <jugglinmike>
Is `toString` intentionally omitted from the Location object's IDL? https://html.spec.whatwg.org/multipage/nav-history-apis.html

[19:23:06.0941] <jugglinmike>
Actually, since `toString` could alternatively be defined in the additional creation steps but is not, I ought to ask: can someone tell me where `location.toString` is defined? (Chrome and Firefox expose it as an "own" property. Unlike what's spec'd for `location.valueOf`, the value is distinct from the corresponding property on the Object prototype.)

[19:55:53.0131] <jugglinmike>
This was the central topic of [this 2017 patch](https://github.com/whatwg/html/pull/2294), but the resolution is confusing me. The change to the specification seems to rely on prototypal inheritance of `Object.prototype.toString`, but [the corresponding tests added to WPT](https://github.com/web-platform-tests/wpt/pull/4623) expect an "own" property.

[22:26:57.0310] <bakkot>
question:

- "resolve a URL-like module specifier" takes a string https://html.spec.whatwg.org/multipage/webappapis.html#resolving-a-url-like-module-specifier
- but it calls "URL parsing", which takes a scalar value string, i.e. one with no unpaired surrogates https://url.spec.whatwg.org/#concept-url-parser

how does that... work? is it implicitly "convert"ing strings to scalar strings? https://infra.spec.whatwg.org/#javascript-string-convert

assuming yes, in which case Chrome has a bug - `import('./\ud800.js')` doesn't actually end up triggering a network request for `%EF%BF%BD.js”`, which is what it would do if it did the specified conversion (FF and Safari do trigger that request)

[22:31:32.0330] <sideshowbarker>
TabAtkins: https://github.com/speced/bikeshed-boilerplate/pull/39 is a patch for making that change to fix the fragment-preserving redirect behavior for the CSS specs

[00:19:15.0928] <annevk>
snek: I'm gonna take over your WebSockets work, hope that's okay

[00:22:40.0497] <annevk>
bakkot: it's not, you found a bug, but Fx/Safari behave as the spec should read (it should call convert before it calls the URL parser)

[06:43:40.0641] <annevk>
smaug: did you follow the discussion in https://github.com/whatwg/dom/pull/1152? Are you still okay with the PR as-is?

[06:43:57.0021] <annevk>
smaug: I'm okay with it still I think, but I'd like at least one more set of eyes

[07:20:00.0297] <snek>
> <@annevk:matrix.org> snek: I'm gonna take over your WebSockets work, hope that's okay

go for it fam

[07:24:31.0044] <annevk>
snek: shall I add you to the Acknowledgments section?

[07:25:35.0834] <snek>
oh you opened a whole separate pr

[07:25:55.0316] <snek>
yeah some form of attribution would be nice

[07:28:50.0165] <snek>
does your change make it so that the resulting .url will still be ws scheme?

[07:29:11.0749] <snek>
I'm not a huge fan but I'll take what I can get

[07:34:03.0406] <annevk>
snek: it does, I don't think it's worth supporting two sets of URLs (even though we later do rewrite back to HTTP(S)); it's unfortunate we added ws/wss, but they are what callers of `.url` expect

[08:22:10.0176] <Dominic Farolino>
Is there a way to click on a reference of a dfn in a spec, and immediately get a link to *that* reference? (Instead of having to go to the dfn, have the gray dfn box pop up, and binary search through it to find which reference I was at a second ago)

[08:45:57.0189] <zcorpan>
Dominic Farolino: inspect element, copy id

[08:46:30.0451] <Dominic Farolino>
Yikes! In at least the HTML Standard inspecting by element gives me a huge layout shift due to DevTools being popped

[08:46:43.0336] <zcorpan>
or select the link and click the file a bug link

[08:47:27.0661] <zcorpan>
Dominic Farolino: if you have devtools at the bottom there's no layout shift

[08:47:30.0218] <Dominic Farolino>
What do you mean by "select the link"? Click it? Highlight it?

[08:47:34.0591] <Dominic Farolino>
That's true

[08:47:56.0062] <zcorpan>
Highlight it

[08:48:29.0675] <smaug>
annevk: hmm, I had missed possible change to existing behavior 

[08:49:24.0950] <smaug>
but I think the new behavior is better, if original is aborted first (in that fetch test)

[08:49:35.0473] <smaug>
so, I think the pr should be fine

[09:06:34.0125] <annevk>
smaug: thanks, checking with cdumez as well and then I guess I'll merge it tomorrow or early next week

[10:06:05.0730] <jub0bs>
Is there anyone from Mozilla around? I'd like to gain access to https://bugzilla.mozilla.org/show_bug.cgi?id=1790311 (which is referenced on https://www.mozilla.org/en-US/security/advisories/mfsa2022-47/#CVE-2022-45411). The bug could presumably be made public, at this stage.

[10:07:18.0508] <jub0bs>
annevk: Am I correct in assuming that CVE-2022-45411 is what prompted you to add `X-HTTP-Method-Override` and the other two as "conditional" forbidden request-header names?

[10:07:47.0954] <jub0bs>
 * annevk: Am I correct in assuming that CVE-2022-45411 is what prompted you to add `X-HTTP-Method-Override` and the other two as "conditional" forbidden request-header names? https://github.com/whatwg/fetch/pull/1541

[10:08:39.0754] <annevk>
jub0bs: I'm not familiar with CVE numbers

[10:09:00.0216] <annevk>
 * jub0bs: I'm not familiar with specific CVE numbers

[10:09:30.0971] <annevk>
Oh, you linked something above. Seems likely?

[10:22:17.0713] <jub0bs>
> Cross-Site Tracing occurs when a server will echo a request back via the Trace method, allowing an XSS attack to access to authorization headers and cookies inaccessible to JavaScript (such as cookies protected by HTTPOnly). To mitigate this attack, browsers placed limits on fetch() and XMLHttpRequest; however some webservers have implemented non-standard headers such as X-Http-Method-Override that override the HTTP method, and made this attack possible again. Firefox has applied the same mitigations to the use of this and similar headers.

[10:23:15.0985] <jub0bs>
annevk: It has to be related, but your PR (#1541) on the Fetch standard doesn't make explicit reference to this.

[11:08:33.0387] <annevk>
jub0bs: it's not something we keep track of when doing web standard security fixes

[12:08:24.0304] <TabAtkins>
sideshowbarker: Merged, sorry for the delay.


2023-05-12
[23:45:18.0053] <annevk>
Domenic: thoughts on using "nullable" instead of "null or": https://github.com/whatwg/notifications/pull/194/files?

[23:46:08.0048] <Domenic>
Huh. I guess it's OK, but I've never done it and slightly prefer what I do...

[23:46:49.0470] <annevk>
Yeah, I similarly have mixed feelings. I guess I'll push back a bit and ask for an Infra discussion first, though even in IDL we kinda regret the ?-convention so maybe we should just not.

[00:02:26.0085] <annevk>
Adam Rice: did you see https://github.com/whatwg/websockets/pull/45?

[00:40:13.0125] <annevk>
Adam Rice: well that was embarrassing, fortunately tests and code did not make that mistake

[00:48:12.0596] <jub0bs>
Hi Simon. Sorry to bother you. Any chance you or someone else from Mozilla could make the following ticket public? https://bugzilla.mozilla.org/show_bug.cgi?id=1790311

[00:48:43.0707] <jub0bs>
It's related to CVE-2022-45411, which has since been mitigated.

[00:49:36.0038] <jub0bs>
Oh wrong thread. Sorry.

[00:49:59.0281] <jub0bs>
zcorpan: Perhaps?

[00:59:40.0663] <annevk>
Domenic: did you see my ping for review on the timer bits of https://github.com/whatwg/html/pull/4613? It's a relatively small PR, mainly JS asking HTML to run stuff at particular points in time.

[01:00:11.0720] <Domenic>
No, sorry I did not. Will flag it and get to it soon.

