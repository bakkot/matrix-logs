2025-08-01
[17:42:54.0185] <Kaiido>
That would be super old, but it was indeed discussed back when <svg:video> was proposed: https://lists.w3.org/Archives/Public/www-svg/2003May/0005.html

[22:28:59.0048] <annevk>
Lea Verou: not sure, but HTML should probably define some of it eventually.

[07:40:20.0822] <annevk>
Meghan Denny: thanks for dealing with the spam!

[07:43:20.0752] <annevk>
Luke Warlow: did you consider giving ReflectEnum all the values needed instead? `ReflectEnum=(enumToUse, "anonymous", "anonymous", null)` or some such (probably incorrect example).

[07:48:01.0105] <Luke Warlow>
Hmm I hadn't actually, would require slightly funky grammar but that's not insurmountable.

Could also just have multiple extended attributes but still put those on the idl attribute.

Problem then is you duplicate the values between usages of the same enum (fetch priority, cross origin)

[07:49:18.0247] <annevk>
Oh yeah, hmm.

[07:50:04.0977] <annevk>
Okay, so turning an enum into not-quite-an-enum still looks like the best course of action.

[07:57:33.0952] <Luke Warlow>
The grammar to annotate the enum values is a trivial change (updated my parser easily enough), so provided we can work the prose out I think that design is probably best

[08:06:30.0498] <annevk>
Luke Warlow: I thought you determined that didn't make much sense? Or is the idea that we either annotate a value or annotate the enum? And when we annotate the enum it signifies null or some such?

[08:09:13.0405] <Luke Warlow>
> <@annevk:matrix.org> Luke Warlow: I thought you determined that didn't make much sense? Or is the idea that we either annotate a value or annotate the enum? And when we annotate the enum it signifies null or some such?

Yeah either that or there might be a way to just make it fallback to the null / "" case in the event one isn't defined at all

[08:11:04.0791] <Luke Warlow>
Perhaps my current syntax is what ends up being optimal but if we want the other one it is doable

[08:20:48.0365] <annevk>
Looking at this again "no state" seems weird. I wonder if we can get rid of that eventually. But ignoring that, putting it always on the enum is probably the least confusing, even if it's a tad more verbose.

[08:22:21.0917] <annevk>
And I guess they can always take a string that is either one of the enum values or a new state that cannot be expressed as keyword.

[08:23:31.0970] <annevk>
Lol, we also have an actual "No state" (it's different).

[08:24:06.0458] <annevk>
The as attribute does indeed use the "no state", but could also have used a "Default state" or some such and branched on that.

[08:24:40.0085] <annevk>
And the as attribute might be the only attribute that builds on that oddity? Seems ripe for removal.

[12:56:56.0990] <Meghan Denny>
np! happy to help out where i can :)


2025-08-04
[06:18:35.0173] <Noam Rosenthal>
Are the WHATNOT minutes (specifically last week's) published in somewhere shareable?
 cwilso annevk ?

[09:19:55.0542] <annevk>
Noam Rosenthal: thanks for the reminder, sorted.

[10:35:18.0068] <mfreed>
Hi all, just a friendly reminder to post any discussion topics for this Thursday's joint CSSWG/WHATWG/OpenUI task force meeting to the meeting agenda issue: https://github.com/whatwg/html/issues/11483


2025-08-05
[01:24:24.0058] <Doctor>
Are there any pending changes/proposals to do with the way streams work? 

[01:30:29.0134] <evilpie>
I don't think this is what you mean, but https://github.com/whatwg/streams/pull/1283 added transformer.cancel, which hasn't been shipped in any major browser.

[01:33:34.0250] <Doctor>
Not what I was hoping for 

[01:39:14.0074] <Noam Rosenthal>
Being more specific would help people answer your question better. there are probably all kinds of stream-related proposals/issues on github that you could search or propose new ones 

[01:39:50.0908] <Doctor>
Is there a structure guide somewhere on proposing new ones? 

[01:40:13.0623] <Doctor>
What I'd like to change is to allow transform streams to be byob

[01:45:56.0153] <Noam Rosenthal>
https://github.com/whatwg/streams/issues
"New Issue" has a few templates

[01:46:18.0047] <Noam Rosenthal>
... and you can search the existing list in that URL

[07:26:04.0169] <Aron het Lam>
Hi, I am told to ping [Domenic](https://matrix.to/#/@domenicdenicola:matrix.org) about this in the Ladybird chat, so I hope thatâ€™s ok.
Does this in the WebIDL spec essentially mean that extended attributes are allowed on both sides of the `required` keyword for dictionary members?
To me it seems the linked spec below can be expanded to `ExtendedAttributeList required TypeWithExtendedAttributes identifier ;`
 https://webidl.spec.whatwg.org/#prod-DictionaryMember

[08:05:36.0312] <annevk>
Aron het Lam: that seems correct, but I suspect it also means you could have `[X] [X] Type ident;` in theory, which is also a bit weird.

[08:08:38.0736] <annevk>
* Aron het Lam: that seems correct, but I suspect it also means you could have `[X] [X] Type ident;` in theory, which is also a bit weird. Hmm no it doesn't as that wouldn't match the production.

[08:09:15.0327] <annevk>
* Aron het Lam: that seems correct, but I suspect it also means you could have `[X] [X] Type ident;` in theory, which is also a bit weird. Hmm no it doesn't as that wouldn't match the production. I suspect this came to be as part of making extended attributes associable with types, but that left a couple of weird corner cases.

[10:47:08.0320] <Cesar Sanchez>
Hi

[12:45:03.0670] <Doctor>
In a byob readable, you may be given a buffer that that has an offset greater than zero and a length less than the remainder of the buffer. Aka a subsection of the underlying buffer. When transferring this buffer and/or responding with a new buffer, should one make sure the contents before and after your section of the buffer aren't mutated/missing? 

[12:46:00.0494] <Doctor>
For example, if I `.respondWithNewView`, should I guarantee that any content that was before my offset in the buffer given matches that with the buffer I'm now passing back?


2025-08-06
[18:06:43.0950] <Garv>
iframes should be an empty element

[20:49:36.0339] <sideshowbarker>
annevk: (or anybody else familiar with the Fetch API who might have a few minutes), about the part of the diff at https://github.com/mdn/content/pull/40643/files which adds an additional `cache.put`:

Is that additional caching step at that point actually necessary or useful in practice?

[20:51:14.0206] <sideshowbarker>
Or to put it more simply, is that actually the recommended way to use the API? (The way that MDN should be showing developers to use it)

[21:22:35.0984] <Garv>
no like seriously, there's in todays era there's essentially no chance iframes don't run on a browser, and since the only purpose of iframes being full elements was to display an error message, nowadays they should be empty

[21:22:46.0679] <Garv>
* no like seriously, in todays era there's essentially no chance iframes don't run on a browser, and since the only purpose of iframes being full elements was to display an error message, nowadays they should be empty

[23:53:18.0197] <annevk>
sideshowbarker: I'm not sure. Jake Archibald would know. Or you could look at the service worker WHATWG uses. Hopefully that follows best practice somewhat.

[03:23:13.0876] <Jake Archibald>
sideshowbarker: [I've replied](https://github.com/mdn/content/pull/40643#issuecomment-3159234101) 

[03:23:47.0914] <sideshowbarker>
Excellent â€” thanks much

[03:25:59.0084] <Jake Archibald>
Garv: that's ideally true for a lot of elements. I mean, ideally, `/>` would have been meaningful outside of foreign content. The problem is, it's not something that can be changed about the platform now without severe breakages. Here's some history https://jakearchibald.com/2023/against-self-closing-tags-in-html/

[03:27:39.0756] <smaug>
keithamus: I could be wrong, but I think [this](https://html.spec.whatwg.org/multipage/form-elements.html#the-button-element:popover-target-attribute-activation-behavior:~:text=Otherwise%2C%20run%20the%20popover%20target%20attribute%20activation%20behavior%20given%20element%20and%20event's%20target.) doesn't work if the relevant nodes are in shadow DOM

[03:28:05.0183] <smaug>
* keithamus: I could be wrong, but I think [this](https://html.spec.whatwg.org/multipage/form-elements.html#the-button-element:popover-target-attribute-activation-behavior:~:text=Otherwise%2C%20run%20the%20popover%20target%20attribute%20activation%20behavior%20given%20element%20and%20event's%20target.) doesn't work if the relevant nodes are in shadow DOM (related to popovers inside buttons)

[03:28:23.0278] <smaug>
because of https://dom.spec.whatwg.org/#dispatching-events:~:text=true%3A-,Set,event%2E

[03:28:41.0018] <Jake Archibald>
Garv: Specifically, what would you do with the examples of `<iframe src="â€¦">fallback</iframe>` in the wild? According to your suggestion, the "fallback" would be rendered. Eg see [this example](https://jsbin.com/yacedit/edit?html,output)

[03:28:55.0985] <smaug>
Prove me wrong ðŸ™‚ 

[03:29:26.0757] <keithamus>
hmm

[03:29:28.0965] <Jake Archibald>
* Garv: Specifically, what would you do with the examples of `<iframe src="â€¦">fallback</iframe>` in the wild? According to your suggestion, the "fallback" would be rendered. Eg see [this example](https://jsbin.com/yacedit/edit?html,output). You see "Fallback" on the page there as a direct consequence of `<img>` being an empty element.

[03:29:58.0738] <smaug>
I couldn't immediately see tests using shadow DOM

[03:30:01.0815] <smaug>
for this stuff

[03:30:10.0038] <Jake Archibald>
* Garv: Specifically, what would you do with the examples of `<iframe src="â€¦">fallback</iframe>` in the wild? According to your suggestion, the "fallback" would be rendered. Eg see [this example](https://jsbin.com/yacedit/edit?html,output). You see "Fallback" on the page there as a direct consequence of `<img>` being an empty element - it can't have insides, so the "Fallback" is outside of it. Essentially, the `</img>` is ignored.

[03:30:14.0552] <smaug>
* I couldn't immediately find tests using shadow DOM

[03:32:26.0658] <keithamus>
how does one have a popover inside of a shadowroot referenced through the button though?

[03:33:38.0417] <keithamus>
As in:

```
data:text/html,<button id=b>Open<div id=d><template shadowrootmode=open><div popover></div></template></button><script>b.popoverTargetElement = d.shadowRoot.querySelector('div')</script>
``` 

Doesn't work because `popoverTargetElement` will not accept that element as it is not a flat tree ancestor, right?

[03:34:46.0717] <smaug>
keithamus: I was thinking the case when both button and popover are inside shadow dom

[03:35:33.0682] <smaug>
under the same shadow root

[03:41:55.0143] <keithamus>
Okay so `data:text/html,<div><template shadowrootmode=open><button id=b popovertarget=p>Open<div popover id=p></div></template></button></div>` works in Chrome but not with this patch, so they must do something different to the spec I suppose?

[03:44:07.0769] <keithamus>
https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/html/forms/html_form_control_element.cc;l=440-446?q=html_form_control_element.c ðŸ¤”

[03:54:27.0272] <smaug>
I wonder what rawtarget is

[03:54:38.0914] <smaug>
is that something which isn't cleared?

[03:57:43.0165] <keithamus>
https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/dom/events/event.h;l=150-152?q=event.h indee

[03:57:44.0951] <keithamus>
* https://source.chromium.org/chromium/chromium/src/+/main:third\_party/blink/renderer/core/dom/events/event.h;l=150-152?q=event.h indeed

[03:59:19.0997] <keithamus>
I'm confused though, it's the exact same code as `target()`, and `SetTarget()` doesn't look to do anything particularly special

[04:01:02.0880] <smaug>
hmm

[04:08:26.0144] <keithamus>
seems like a simpler way to resolve this might be to mark the default handled for an element that is a popover, so that by the time it propagates to the button click it would just ignore the click

[04:08:58.0573] <keithamus>
but I suppose the button might do something other than popovertarget... though I'm not sure that's warranted even

[04:09:12.0893] <keithamus>
For example if you had a popover in a submit button, should clicking the popover submit the form?

[04:20:33.0232] <Noam Rosenthal>
Jake Archibald: are you planning to join WHATNOT tomorrow morning? I thought we could put patching on the table including some of the issues you've already raised around it

[04:20:54.0230] <Noam Rosenthal>
(it was discussed a few weeks back but attendance was low)

[04:21:34.0936] <Jake Archibald>
Noam Rosenthal: yeah, I'm up for that. I've not attended WHATNOT before. What's the best way to track it?

[04:22:00.0605] <Jake Archibald>
(it might clash with my onboarding stuff, but I'll take a look)

[04:22:21.0156] <Noam Rosenthal>
To be added to meeting invites? I'm not actually sure... cwilso ?

[04:23:09.0246] <Jake Archibald>
Ah, I'll respond to https://github.com/whatwg/html/issues/11527

[04:25:18.0452] <Jake Archibald>
Oh wait, actually morning. Hah, I'm so used to that meaning 'afternoon' for me. Yeah I can make that

[04:28:26.0987] <Noam Rosenthal>
Yup, I think we live at around ~25 minutes distance so timezone adjustments are less necessary :)

[04:29:42.0469] <keithamus>
https://github.com/whatwg/html/issues/11537

[04:44:54.0233] <smaug>
keithamus: does it work for Gecko if you use mOriginalTarget ?

[05:14:11.0590] <smaug>
...since I guess we don't end up clearing the target in this case, given that the final target is in light DOM

[07:07:18.0333] <keithamus>
smaug: it does indeed work. Fixed and added the requisite test case. 


2025-08-07
[19:50:37.0194] <Doctor>
I did a bit of testing myself and the answer seems to be yes. One shouldn't make sure that they mess with or lose the data outside of their subjection of their buffer.

[23:16:06.0610] <annevk>
Domenic: is it intentional that `error` dispatches more often than `load` here: https://html.spec.whatwg.org/#execute-the-script-element

[01:07:41.0684] <Luke Warlow>
annevk: I don't suppose you're about for whatnot

[02:07:17.0354] <annevk>
Sorry for being late. I'm really bad at early meetings because they so rarely happen I'm usually fully absorbed by some other engineering task.

[02:09:02.0254] <annevk>
We also need to figure out the chairing situation as initially these meetings were pitched with the idea of not putting additional burden on editors and while it's not that much work, I do feel it (and occasionally forget). Panos Astithas cwilso any ideas?

[02:12:02.0054] <Noam Rosenthal>
If we had a rotation for chairing I'm happy to take part

[02:23:50.0940] <annevk>
Sounds good. Apart from managing the discussion, the main thing is organizing the minutes, making sure the minutes are posted to this week's issue, and opening the issue for the following week.

[02:36:03.0412] <annevk>
zcorpan: keithamus: for https://github.com/whatwg/html/pull/11413 should we also change the `hn` selectors in the UA style sheet to use `:heading(n)`?

[02:37:19.0416] <annevk>
Oh wait, we already discussed that it seems back in June. Okay. I'll approve. But let's not forget that change when adding the attributes as it's important.

[02:37:48.0224] <zcorpan>
It's equivalent now but would make a difference with `headingstart` or what it's called

[02:38:41.0755] <keithamus>
I think so, especially if we ship headingoffset 

[02:39:11.0308] <annevk>
Maybe after this lands, keithamus can rebase the attribute PR(s?) to include that.

[02:41:47.0363] <annevk>
For those that are interested in the MoU we have with the W3C: https://github.com/w3c/whatwg-coord/issues/22

[03:05:12.0666] <Noam Rosenthal>
opened this for patching: https://github.com/whatwg/html/issues/11542

[03:09:49.0563] <Noam Rosenthal>
... the other one has been open for 9 years (https://github.com/whatwg/html/issues/2142) so I posted on it some of the discussion from today :)

[03:15:17.0510] <Noam Rosenthal>
annevk: given the WHATNOT discussion perhaps https://github.com/WICG/sanitizer-api/issues/190 needs to be reopened?

[03:28:34.0714] <annevk>
Noam Rosenthal: that seems reasonable. Though it's very much out-of-scope for the work currently ongoing it does seem good to keep it in mind.

[03:47:38.0024] <Luke Warlow>
> <@noamr:matrix.org> ... the other one has been open for 9 years (https://github.com/whatwg/html/issues/2142) so I posted on it some of the discussion from today :)

Perhaps worth raising an issue on the trusted types spec too, for some discussion on a new createHTMLAsync poly method or some such

[03:48:02.0956] <Luke Warlow>
* Perhaps worth raising an issue on the trusted types spec too, for some discussion on a new createHTMLAsync policy method or some such

[03:48:31.0351] <Noam Rosenthal>
Yea absolutely, didn't get to it yet. Thanks!

[04:16:53.0653] <Noam Rosenthal>
https://github.com/w3c/trusted-types/issues/594


2025-08-08
[22:07:41.0053] <Doctor>
Are there any other popular matrix servers worth joining? Being in only one for a platform seems lonely.

[02:05:55.0617] <janvarga>
Is there any reason why WebIDL allows a return type for setters? https://webidl.spec.whatwg.org/#idl-indexed-properties https://drafts.css-houdini.org/css-typed-om-1/#csstransformvalue

[02:06:43.0458] <janvarga>
We are discussing this in https://bugzilla.mozilla.org/show_bug.cgi?id=1981764

[02:13:05.0121] <emilio>
/me filed https://github.com/whatwg/webidl/issues/1516

[02:13:31.0242] <annevk>
janvarga: I think emilio is correct and we should either enforce undefined or forbid a type declaration altogether if possible 

[02:14:36.0047] <janvarga>
Sounds good.

[02:16:55.0178] <janvarga>
Interesting how this started spreading. I mean, allowed in WebIDL, then CSS Typed OM used that, then chrome and webkit copied that :)

[02:18:04.0464] <emilio>
Well if it wasn't for that compiler warning about unused results we wouldn't have noticed either probably

[02:18:24.0796] <janvarga>
Yeah :)

[02:18:54.0932] <emilio>
Sent https://github.com/w3c/css-houdini-drafts/pull/1143 to the typedom spec

[02:19:00.0903] <janvarga>
Even CSSUnparsedValue was ok, because the generated code used an out param ...

[02:19:20.0709] <emilio>
Hah, so mostly by chance...

[02:20:28.0089] <janvarga>
So I guess, the way to go now, should be changing the WebIDL in Gecko to return undefined and maybe also provide a simple patch for WebIDL.py to assert that ?

[02:21:22.0059] <annevk>
That sounds good to me. That way we hopefully identify other cases as well.

[02:22:17.0638] <annevk>
I don't think WebKit has shipped CSS Typed OM  btw, there were too many issues with that.

[02:22:24.0579] <annevk>
* I don't think WebKit has shipped CSS Typed OM  btw, there were too many issues with that specification.

[02:22:30.0823] <janvarga>
Hm

[02:23:22.0170] <emilio>
annevk: epiphany does support it at least, can't check Safari r/n tho...

[02:23:54.0426] <janvarga>
`let t = new CSSTransformValue([new CSSTranslate(CSS.px(10), CSS.px(20))]); t.lenth` returns 1

[02:23:59.0849] <janvarga>
in Safari on mac

[02:24:17.0153] <janvarga>
* `let t = new CSSTransformValue([new CSSTranslate(CSS.px(10), CSS.px(20))]); t.length` returns 1

[02:31:26.0876] <annevk>
janvarga: emilio: I misremembered. It's only CSSTypedOMColorEnabled that's disabled.

[02:32:57.0156] <annevk>
I wanted to use that for `<input type=color>`, but alas.

[02:33:39.0585] <emilio>
FWIW I only find one instance of named setters in Gecko (`Storage.setItem`, which does return `undefined`)

[02:37:07.0682] <emilio>
Same on WebKit and Blink

[02:37:25.0461] <annevk>
There's also `DOMStringMap`, `HTMLSelectElement`, and `HTMLOptionsCollection` per HTML, but they're all correct.

[02:37:39.0868] <emilio>
Right but those are not named right?

[02:38:07.0927] <emilio>
I was just thinking that, syntax wise, it might make sense to remove the return type for setters/deleters altogether

[02:38:50.0491] <emilio>
But at that point may as well remove the name

[02:39:01.0212] <emilio>
It seems only Storage would need to change?

[02:39:08.0781] <annevk>
I wonder if that creates an ambiguity as then for a named setter it might look like it returns a setter type.

[02:39:28.0093] <emilio>
(As in, add a `undefined setItem(...);` on top of the setter 

[02:39:38.0422] <emilio>
* (As in, add a `undefined setItem(...);` on top of the setter)

[02:48:37.0483] <annevk>
I see, if that's really the only setter we have that might be reasonable, but it will make it inconsistent with getters, where I don't think we'd want to make such a change. So hmm.

[02:50:11.0363] <emilio>
Right, my point is we'd remove named setters altogether

[02:51:09.0708] <emilio>
Ok... It was just an idea, I don't have very strong opinions either way. It's just that restricting it in prose tends to not be super effective in my experience :)

[02:52:31.0922] <emilio>
Yeah I guess named getters are used pretty often

[04:22:16.0933] <janvarga>
Interesting, Gecko has a WebIDL parser tests containing: ```interface SpecialMethodsCombination {
  getter deleter boolean (DOMString name);
};```


[04:24:33.0256] <janvarga>
Obviously changing boolean to undefined doesn't work because getters must have non-undefined return type, maybe this was the reason for having return type for setters and deleters

[04:24:57.0305] <janvarga>
* Interesting, Gecko has a WebIDL parser test containing: `interface SpecialMethodsCombination { getter deleter boolean (DOMString name); };`

