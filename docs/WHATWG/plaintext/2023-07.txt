2023-07-02
[20:38:28.0197] <Motheo Moitsheki>
Brandon Sheley: 


2023-07-04
[21:35:01.0284] <Domenic>
Alexander Kalenik: Did you have a chance to look at https://github.com/whatwg/html/issues/9148#issuecomment-1610989949 ? I would love to get your implementer experience-informed opinion, before I go making changes.

[00:50:27.0386] <zcorpan>
Domenic: do you know which sites would benefit from `origin-agent-cluster` (regardless of its default value)?

[00:52:54.0686] <Domenic>
> <@zcorpan:mozilla.org> Domenic: do you know which sites would benefit from `origin-agent-cluster` (regardless of its default value)?

Google Workspace uses it heavily to hint for process isolation among its many same-site cross-origin pages.

[00:55:13.0022] <zcorpan>
Domenic: ok. Do you know if there's interest from non-Google properties?

[00:57:26.0556] <Domenic>
I haven't been in touch with any. Unfortunately it looks like it's not used on the sites HTTP archive picks up, but it's used by ~0.5% of page views. https://chromestatus.com/metrics/feature/timeline/popularity/3286

[00:58:11.0644] <zcorpan>
Domenic: ok, thanks!

[01:31:09.0873] <zcorpan>
Domenic: I see 39 sites in httparchive using resources with OAC: ?1

[01:36:27.0782] <Domenic>
Oh nice!

[01:54:37.0938] <zcorpan>
Domenic: https://docs.google.com/spreadsheets/d/1WNmB2zpx8BAf8bkBOeL-gVeHghR02sXW2Jzea6t2vpE/edit?usp=sharing

[01:55:20.0226] <Domenic>
Well, that is kind of suspicious

[01:55:58.0679] <Domenic>
It got into some white-label Brazilian photo-printing site I guess?

[01:56:30.0983] <zcorpan>
oh wait, I made a mistake. They're actually using `Origin-Agent-Cluster: 1`

[02:03:47.0789] <zcorpan>
Domenic: 6406 pages use `?1` https://docs.google.com/spreadsheets/d/11-6EKWZaQdpvOe8L1nxHW3wWtTnwDy1GhNYDJCcVY-0/edit?usp=sharing

[02:05:15.0174] <zcorpan>
Curious that the use counter doesn't find these in httparchive

[02:06:31.0901] <Domenic>
I think maybe I renamed the use counter at one point. I wonder if that broke it.

[02:06:48.0338] <Domenic>
Ah wow that is a nice list.


2023-07-05
[23:14:26.0242] <sideshowbarker>
Domenic: I want to raise an issue for adding `VideoPlaybackQuality` and `getVideoPlaybackQuality()` to HTML. I had thought we had an issue template of some kind with a checklist (e.g., including the _“no implementers object”_ language — but right now, I can’t find any such template.

And maybe I’m confusing it with the browser-project “Intent to implement/ship” messages I’ve seen that do have such checklists?

[23:15:52.0292] <sideshowbarker>
 * Domenic: I want to raise an issue for adding `VideoPlaybackQuality` and `getVideoPlaybackQuality()` to HTML. I had thought we had an issue template of some kind with a checklist (e.g., including the _“no implementers object”_ language) — but right now, I can’t find any such template.

And maybe I’m confusing it with the browser-project “Intent to implement/ship” messages I’ve seen that do have such checklists?

[23:21:47.0725] <sideshowbarker>
ah, nevermind — I realize now that I what I had been thinking of was of course the template for _PRs_


2023-07-06
[17:37:05.0283] <sideshowbarker>
Help wanted / Good first issue: For anybody interested in contributing to the HTML standard, https://github.com/whatwg/html/issues/1102 might be a good issue you could resolve, by writing a spec patch for it with a modest amount of effort — perhaps mostly by just porting over the existing `<input capture>` spec text from https://w3c.github.io/html-media-capture/


[02:01:36.0187] <vrafaeli>
I'm confused about why you cannot directly download the resource (file) on the local machine using JS, but you can do it with JS if you fetch the resource, construct the a element with the fetched resource as URL and then click it using JS?

[02:26:55.0782] <zcorpan>
Is there a spec issue about upstreaming https://wicg.github.io/document-policy/#integrations ?

[05:31:53.0649] <annevk>
zcorpan: I don't think there is one against HTML

[05:32:10.0718] <zcorpan>
annevk: ok

[05:57:34.0326] <annevk>
vrafaeli: example? I thought `<a download>.click()` would generally work. Seems weird if it performs a same-origin check ahead of time given redirects.

[06:18:31.0899] <annevk>
I initially thought https://github.com/whatwg/html/issues/9491 was about making `/>` conforming on all tags but also have it continue to be meaningless

[06:19:11.0958] <annevk>
So you can write `<div />yolo</div>`  and the HTML checker won't yell

[06:20:12.0335] <annevk>
Anyway, if we do a flag it should just be "XML5"

[06:20:40.0427] <annevk>
 * Anyway, if we do a flag it should just be "XML5" (and the flag is `text/xml`)

[06:45:53.0442] <vrafaeli>
> <@annevk:matrix.org> vrafaeli: example? I thought `<a download>.click()` would generally work. Seems weird if it performs a same-origin check ahead of time given redirects.

https://codesandbox.io/s/interesting-nightingale-vkpy9s?file=/src/index.js

I use a plugin to inject response header "content-disposition: attachment".


I was expecting that after the response has been received the browser would initialte a download to the local machine.

[06:46:47.0247] <vrafaeli>
but the download to local machine does not happen

[06:47:24.0110] <vrafaeli>
> <@annevk:matrix.org> vrafaeli: example? I thought `<a download>.click()` would generally work. Seems weird if it performs a same-origin check ahead of time given redirects.

 * https://codesandbox.io/s/interesting-nightingale-vkpy9s?file=/src/index.js

I use a Chrome plugin to inject response header "content-disposition: attachment".

I was expecting that after the response has been received the Chrome browser would initialte a download to the local machine.

[06:47:57.0211] <vrafaeli>
 * https://codesandbox.io/s/interesting-nightingale-vkpy9s?file=/src/index.js

I use a Chrome plugin to inject response header "content-disposition: attachment".

I was expecting that this would make the Chrome browser to do a download to the local machine.

[06:50:28.0748] <vrafaeli>
 * https://codesandbox.io/s/interesting-nightingale-vkpy9s?file=/src/index.js

I use a Chrome plugin to inject response header "content-disposition: attachment". (in my real case the server sets it)

I was expecting that this would make the Chrome browser to do a download to the local machine.

[11:14:09.0413] <TabAtkins>
Hm, is there a term I can reference for "frames that can be communicated with"? Basically just anything you can postMessage to?

[11:17:52.0867] <Jeremy Roman>
browsing context group?

[11:18:22.0678] <Jeremy Roman>
(though BroadcastChannel is an exception)

[11:18:51.0279] <TabAtkins>
(Context is "things that should be able to see an MQ change if it gets toggled by script", re: https://github.com/w3c/csswg-drafts/issues/6517)

[11:19:23.0758] <TabAtkins>
Because if you darkmode a site via an in-site toggle you'd like iframes to darkmode as well, ideally.

[12:41:41.0422] <zcorpan>
TabAtkins: you can postMessage() across origins. In the issue you say it shouldn't be visible to cross-origin iframes

[13:14:28.0268] <TabAtkins>
Basically I just don't want to invent a new security boundary. If you can already freely message a cross-domain frame, you should be able to affect their MQs.

[13:30:12.0475] <zcorpan>
TabAtkins: for popups you can communicate between opener and openee unless it was opened with `noopener`. For iframes I *think* you can always send a message (if embedding is allowed). When same-origin, you can communicate even if there's no reference to the window (with `BroadcastChannel` or `localStorage` or `document.cookie` or a shared worker)

[13:30:43.0752] <TabAtkins>
Right, all this detail is why I was asking if there's already a spec concept for communicating subframes.

[13:34:17.0414] <zcorpan>
TabAtkins: it's still not clear to me what you want

[13:39:26.0232] <TabAtkins>
I want to define that you can toggle certain MQs from script. These MQs want to transmit their script-changed values to subframes (so an iframe will also be darkmode if the top-level frame was set to darkmode). But I don't want to open a new communication channel. I'm *presuming* that "frames you can postMessage" is a reasonable description of the boundary for things that can see the altered MQs.

[13:40:06.0696] <TabAtkins>
And I'm hoping this is already a concept defined somewhere so I don't have to create and maintain such a definition in a CSS spec that doesn't otherwise care about the web's communication/security boundaries.

[13:40:43.0005] <zcorpan>
TabAtkins: what about popups?

[13:41:05.0924] <TabAtkins>
I suspect we should treat them like subframes in this regard.

[13:42:03.0627] <emilio>
> <@tabatkins:matrix.org> I want to define that you can toggle certain MQs from script. These MQs want to transmit their script-changed values to subframes (so an iframe will also be darkmode if the top-level frame was set to darkmode). But I don't want to open a new communication channel. I'm *presuming* that "frames you can postMessage" is a reasonable description of the boundary for things that can see the altered MQs.

Didn't we resolve at some point that the embedded page's color scheme depended on the color-scheme value of the iframe?

[13:42:17.0402] <emilio>
Or discuss doing it or something?

[13:42:43.0855] <TabAtkins>
yeah we at least discussed it, tho I don't recall the conclusion exactly. But we should rely on the same mechanism, def.

[13:43:50.0036] <emilio>
Seems like if we do that stuff then it works. But yeah gecko has the "browsing context group" concept which is just that, stuff you can postMessage to

[13:50:17.0146] <zcorpan>
I'm a bit uneasy with making custom MQ available to the whole browsing context group. It would be like `BroadcastChannel` but to all origins

[13:59:17.0959] <TabAtkins>
I don't really care what concept I end up leaning on. If browsing context group is too large, then a smaller one would work just fine for me. I just need the concept to exist somewhere where it can be reasonably maintained as we continue to add more distinctions and guards to it.

[14:00:40.0276] <annevk>
TabAtkins: it seems like you only want to propagate to descendant documents so that's probably what you want to say; or do you also want to go to ancestors or popups?

[14:01:22.0830] <TabAtkins>
Not ancestors (ancestors need to be able to propagate to *me*). Possibly popups, but I don't think I have much of an opinion. Seems reasonable that if the page is in darkmode its popups should be too.

[14:02:08.0355] <annevk>
"Its popups" is somewhat of a corner area as some popups are created deliberately without communication channel

[14:02:27.0195] <TabAtkins>
yeah that's fair

[14:02:29.0588] <annevk>
Anyway, if you don't want ancestors claiming you want equivalence with postMessage() is not too helpful

[14:02:57.0700] <annevk>
I would start with a document and its descendant documents (HTML has some terms for this though they are not super)

[14:05:09.0502] <TabAtkins>
Descendants will count things like, say, fenced frames tho I assume, so I'll still need more clarification there.

[14:05:14.0313] <TabAtkins>
But yeah that's probably the starting point.

[14:06:16.0706] <annevk>
Fenced frames aren't integrated with HTML so who knows how they work. If descendant documents return them they probably have some issues to work out.

[14:06:33.0957] <TabAtkins>
fair

[14:06:57.0990] <TabAtkins>
Probably just leaving an impl note next to the definition will suffice for now.


2023-07-07
[02:39:12.0527] <zcorpan (OOO until Aug 14)>
Have a nice summer folks

[02:43:10.0919] <Magnus Jurdal>
The same to you all Have a wonderful summer vacation 

[07:07:41.0507] <jgraham>
https://url.spec.whatwg.org/#serialize-an-integer is entertainingly succinct. No idea what data type it returns for example :) 

[07:17:48.0472] <jgraham>
I found https://github.com/whatwg/infra/issues/201, so now I know fetch has a very slight improvement on this, which has apparently been copied into various other specs.

[09:00:19.0119] <annevk>
A decimal number is a data type :p

[09:02:19.0473] <annevk>
Anyway, yeah, we should add numbers and ways to serialize them to strings to Infra. Maybe now that BigInt is defined we can actually do so.

[13:55:52.0419] <annevk>
jarhar: mfreed: hey, did you see https://github.com/whatwg/html/pull/9456#issuecomment-1611419095?

[13:56:39.0868] <annevk>
jarhar: mfreed: would be great to have your input; cc ntim 

[13:57:44.0481] <sideshowbarker>
I’m looking at https://github.com/w3c/webappsec-credential-management/actions/runs/5465713950/jobs/9949551741
```
      LINE ~299: No 'dfn' refs found for 'parent browsing context'.
      [=parent browsing context=]
```

[13:58:26.0965] <sideshowbarker>
I guess `parent browsing context` got changed to something else at some point before March?

[14:02:05.0147] <sideshowbarker>
aha, `parent navigable`, it seems

[14:02:20.0150] <sideshowbarker>
 * aha, `parent navigable`, it seems. Right?

[14:02:47.0795] <annevk>
Yeah, though I'm not sure it's really a term of art on its own; you'd get the current navigable somehow and then grab its parent member.

[14:03:38.0759] <sideshowbarker>
I see

[14:03:59.0235] <sideshowbarker>
Lemme grab the relevant part of the credential-management spec

[14:05:24.0508] <sideshowbarker>
https://w3c.github.io/webappsec-credential-management/#algorithm-same-origin-with-ancestors
> 6. While _current_ has a parent browsing context:
>
>    1. Set _current_ to current’s parent browsing context.


[14:06:17.0259] <sideshowbarker>
So I guess I can’t just `s/parent browsing context/parent navigable/` there?

[14:07:26.0320] <sideshowbarker>
Maybe I need to add some earlier step to get the current navigable first?

[14:10:29.0046] <annevk>
_current_ prolly needs to become a navigable and then you check _current_'s parent

[14:11:17.0162] <annevk>
Domenic and Dominic Farolino have a better hold on this and might be able to suggest even better things

[14:11:20.0095] <sideshowbarker>
is there a _“get navigable for…”_ hook?

[14:12:01.0599] <sideshowbarker>
> <@annevk:matrix.org> Domenic and Dominic Farolino have a better hold on this and might be able to suggest even better things

Thanks yeah then I’ll wait to hear from them. It’s not urgent. The related issue has been open since March 2nd

[14:12:02.0308] <annevk>
You can grab it from the `Window` object at least

[14:12:09.0412] <Domenic>
It looks like you want to go from document -> navigable. For that, use "node navigable".

[15:10:33.0388] <sideshowbarker>
Unrelated incidental bikeshed warning:
```
LINK ERROR: Multiple possible 'fetch()' idl refs.
Arbitrarily chose https://wicg.github.io/background-fetch/#dom-backgroundfetchmanager-fetch
To auto-select one of the following refs, insert one of these lines into a <pre class=link-defaults> block:
spec:background-fetch; type:method; text:fetch(id, requests)
spec:fetch; type:method; text:fetch(input)
{{fetch()}}
```

[15:11:29.0231] <sideshowbarker>
…but I _did_ already put:
```diff
@@ -76,6 +76,7 @@ spec: web-otp; urlPrefix: https://wicg.github.io/web-otp
 <pre class="link-defaults">
 spec:html; type:dfn; for:html-origin-def; text:origin
 spec:html; type:dfn; for:environment settings object; text:global object
+spec:fetch; type:method; text:fetch(input)
 spec:fetch; type:dfn; for:/; text:request
 spec:fetch; type:dictionary; for:/; text:RequestInit
 spec:infra; type:dfn; for:/; text:set
```

[15:12:27.0373] <sideshowbarker>
…but Bikeshed seems to be ignoring that

[15:12:48.0836] <sideshowbarker>
 * Unrelated incidental bikeshed warning:

```plain
LINK ERROR: Multiple possible 'fetch()' idl refs.
Arbitrarily chose https://wicg.github.io/background-fetch/#dom-backgroundfetchmanager-fetch
To auto-select one of the following refs, insert one of these lines into a <pre class=link-defaults> block:
spec:background-fetch; type:method; text:fetch(id, requests)
spec:fetch; type:method; text:fetch(input)
{{fetch()}}
```

[15:12:56.0055] <sideshowbarker>
 * Unrelated incidental bikeshed warning:

```none
LINK ERROR: Multiple possible 'fetch()' idl refs.
Arbitrarily chose https://wicg.github.io/background-fetch/#dom-backgroundfetchmanager-fetch
To auto-select one of the following refs, insert one of these lines into a <pre class=link-defaults> block:
spec:background-fetch; type:method; text:fetch(id, requests)
spec:fetch; type:method; text:fetch(input)
{{fetch()}}
```

[15:13:09.0683] <sideshowbarker>
 * Unrelated incidental bikeshed warning:

```
LINK ERROR: Multiple possible 'fetch()' idl refs.
Arbitrarily chose https://wicg.github.io/background-fetch/#dom-backgroundfetchmanager-fetch
To auto-select one of the following refs, insert one of these lines into a <pre class=link-defaults> block:
spec:background-fetch; type:method; text:fetch(id, requests)
spec:fetch; type:method; text:fetch(input)
{{fetch()}}
```

[15:13:58.0811] <sideshowbarker>
 * Unrelated incidental bikeshed warning:

```text
LINK ERROR: Multiple possible 'fetch()' idl refs.
Arbitrarily chose https://wicg.github.io/background-fetch/#dom-backgroundfetchmanager-fetch
To auto-select one of the following refs, insert one of these lines into a <pre class=link-defaults> block:
spec:background-fetch; type:method; text:fetch(id, requests)
spec:fetch; type:method; text:fetch(input)
{{fetch()}}
```

[15:18:57.0166] <annevk>
sideshowbarker: I think that's because it lacks input as argument so you either want to remove input in link-defaults or add it where you reference

[15:19:55.0286] <annevk>
sideshowbarker: in fact if you did `<a lt=fetch(input)><code>fetch()</code></a>` you'd probably not need link-defaults

[15:23:04.0406] <sideshowbarker>
> <@annevk:matrix.org> sideshowbarker: in fact if you did `<a lt=fetch(input)><code>fetch()</code></a>` you'd probably not need link-defaults

Hai. Will do that instead

[16:03:50.0458] <canadahonk>
hi all, edgecase with `HTMLStyleElement` for you: if the disabled flag is set and the children are updated, should the stylesheet be updated/applied?

[16:04:29.0075] <canadahonk>
example:
```js
const style = document.createElement("style")
style.disabled = true;
assert(style.disabled); // true
style.textContent = "new content";
assert(!style.disabled); // false
```

[16:05:01.0183] <canadahonk>
 * example:

```js
const style = document.createElement("style");
document.body.appendChild(style);

style.disabled = true;
assert(style.disabled); // true

style.textContent = "new content";
assert(!style.disabled); // false
```

[16:05:57.0578] <canadahonk>
 * example:

```js
const style = document.createElement("style");
document.body.appendChild(style);

style.disabled = true;
style.disabled // true

style.textContent = "new content";
style.disabled // false
```

[16:13:14.0741] <annevk>
Yeah, see https://html.spec.whatwg.org/#update-a-style-block and caller


2023-07-10
[19:09:32.0210] <TabAtkins>
> <@sideshowbarker:matrix.org> …but I _did_ already put:
> ```diff
> @@ -76,6 +76,7 @@ spec: web-otp; urlPrefix: https://wicg.github.io/web-otp
>  <pre class="link-defaults">
>  spec:html; type:dfn; for:html-origin-def; text:origin
>  spec:html; type:dfn; for:environment settings object; text:global object
> +spec:fetch; type:method; text:fetch(input)
>  spec:fetch; type:dfn; for:/; text:request
>  spec:fetch; type:dictionary; for:/; text:RequestInit
>  spec:infra; type:dfn; for:/; text:set
> ```

Hmmm, that's a bug on my part if I'm recommending a link-defaults but the linker isn't using it in this situation.

[19:09:55.0603] <TabAtkins>
I presume you've just got a `{{fetch()}}` somewhere that's triggering the failure in the first place?

[19:10:12.0887] <sideshowbarker>
Howdy Tab

[19:10:21.0465] <sideshowbarker>
> <@tabatkins:matrix.org> I presume you've just got a `{{fetch()}}` somewhere that's triggering the failure in the first place?

Yeah, exactly

[19:10:43.0014] <sideshowbarker>
But in the meantime, I worked around it by fulling inlining the ref

[19:10:48.0294] <sideshowbarker>
/me looks for the PR

[19:11:32.0381] <TabAtkins>
k, the magic that makes an arg-less method autolink work even if you didn't dfn any argless forms must be done in such a way that it doesn't catch the link-default. So yeah, bug on my part.

[19:13:23.0990] <sideshowbarker>
well, Anne pointed out to me how to inline it properly in this case — and I guess it’s better to do it that way anyway (so maybe it’s not really so much a workaround after all)

[19:13:29.0885] <sideshowbarker>
https://github.com/w3c/webappsec-credential-management/pull/223/files#diff-5e793325cd2bfc452e268a4aa2f02b4024dd9584bd1db3c2595f61f1ecf7b985R2191

[19:14:20.0260] <sideshowbarker>
but that said, that’s repetitive in that there are multiple instances of that, which I see could instead just be handled by setting a default

[19:14:53.0533] <sideshowbarker>
so that makes me really see the purpose and value of having that mechanism for setting defaults — so that I don’t have to repeat like that

[19:15:06.0308] <TabAtkins>
right, regardless of whether you could work around it in this instance it's still absolutely a bug that I'm recommending a fix that doesn't work

[19:17:09.0118] <sideshowbarker>
> <@tabatkins:matrix.org> If you want to use local versions of boilerplates because whatever's getting downloaded by `bikeshed update` is bad, ideally gimme a PR at <https://github.com/speced/bikeshed-boilerplate>, but failing that just put the appropriate boilerplate file next to your spec source. Bikeshed'll use local files over stuff in its database.

TabAtkins: by the way, I had been meaning to say Thanks to for that guidance ⬆️ you gave me a couple few weeks ago (about how to use local boilerplate properly)

[19:17:30.0662] <sideshowbarker>
> <@tabatkins:matrix.org> If you want to use local versions of boilerplates because whatever's getting downloaded by `bikeshed update` is bad, ideally gimme a PR at <https://github.com/speced/bikeshed-boilerplate>, but failing that just put the appropriate boilerplate file next to your spec source. Bikeshed'll use local files over stuff in its database.

 * TabAtkins: by the way, I had been meaning to say Thanks to you for that guidance ⬆️ you gave me a couple few weeks ago (about how to use local boilerplate properly)

[19:18:26.0466] <TabAtkins>
Nice, glad I could help!

[19:18:29.0622] <TabAtkins>
Also: https://github.com/speced/bikeshed/issues/2600


2023-07-11
[13:47:59.0760] <TabAtkins>
Heads up: I just pushed the first phase of my html parser rewrite (take 2). It looks like it should be great; in particular, I got *zero* output changes in WHATWG specs. I did spot checks on several specs to make sure I wasn't outputting spurious new warnings, but as I don't yet have console text logged as part of tests, I'm not 100% sure about that. Please let me know if anything looks wrong.

[13:48:08.0208] <TabAtkins>
(It's in the new version 3.14.0)

[16:01:52.0481] <sideshowbarker>
> <@tabatkins:matrix.org> Heads up: I just pushed the first phase of my html parser rewrite (take 2). It looks like it should be great; in particular, I got *zero* output changes in WHATWG specs. I did spot checks on several specs to make sure I wasn't outputting spurious new warnings, but as I don't yet have console text logged as part of tests, I'm not 100% sure about that. Please let me know if anything looks wrong.

Python parser? Embedded in Bikeshed?

[16:02:29.0891] <TabAtkins>
Yeah, plan for a long while has been to integrate all of Bikeshed's core parsing into one (heavily modified) parser.

[16:02:54.0306] <TabAtkins>
HTML, markdown, and all of bikeshed's varied shorthand syntaxes

[16:03:00.0878] <sideshowbarker>
Excellent

[16:04:33.0351] <sideshowbarker>
Optimized for performance? Or instead that's not a priority?

[16:05:33.0485] <TabAtkins>
Definitely not a priority at this phase, but I'm pretty confident it will be a perf benefit over the "run shitloads of regexes over the document repeatedly" process that I do today.

[16:06:00.0269] <TabAtkins>
But mostly it's about correctness; processing things in the distinct phases that I do today just doesn't work

[16:07:41.0283] <TabAtkins>
(There's a bunch of places where, say, I have to handle something before the HTML parser sees it, but I have to avoid messing with it if it shows up inside an XMP or markdown code span, etc. All my inline shorthands work only if you nest them in the order that I happen to process them. etc.)


2023-07-13
[17:13:08.0088] <TabAtkins>
sideshowbarker: It looks like the MDN-spec-links project moved to html-now? But the SPECMAP.json file is still present at the old location, and apparently out of date.

[17:13:24.0604] <TabAtkins>
(Bikeshed is pulling down some 404 pages for mdn data right now.)

[18:12:52.0335] <sideshowbarker>
> <@tabatkins:matrix.org> sideshowbarker: It looks like the MDN-spec-links project moved to html-now? But the SPECMAP.json file is still present at the old location, and apparently out of date.

Not moved. The html-now SPECMAP.json is a copy. But spec-links is just borked at the moment, for some reason. I’ll look into right now and fix it.

[18:14:30.0240] <TabAtkins>
Kk. I should respond to 404s better too 

[18:14:44.0844] <sideshowbarker>
yeah

[18:15:14.0530] <sideshowbarker>
can you give me one that you are getting a 404 on right now?

[18:15:54.0628] <sideshowbarker>
ah nevermind

[18:15:59.0396] <sideshowbarker>
I see now

[18:16:08.0161] <sideshowbarker>
lord, what did I do

[18:17:07.0864] <sideshowbarker>
w3c.github.io/mdn-spec-links is just entirely redirecting to https://html-now.github.io/

[18:17:41.0976] <sideshowbarker>
that’s completely unintentional and I don’t yet have any idea how I caused that, nor when (how long ago)

[18:23:16.0243] <sideshowbarker>
…and unfortunately, used a 301 rather than a 302

[18:27:10.0523] <sideshowbarker>
TabAtkins: should be un-borked now — at least from non-browser requests without some network cache in between

[18:27:36.0434] <sideshowbarker>
for browsers, may need to do some fiddling in devtools

[13:01:09.0814] <bakkot>
The web platform and JS are inconsistent wrt each other in the handling of `undefined` & missing arguments to functions. (When I speak of "missing arguments", I mean only for cases where an argument is required, and is not typed to accept `undefined`.)

Historically in JS, missing arguments are treated the same way as explicit `undefined`: coerce the value `undefined` to the relevant argument type. So for example `escape()` returns the string `"undefined"`.

In the web platform, missing arguments are an error, in contrast to JS. Like in JS, an explicit `undefined` is coerced to the relevant argument type, so it is handled differently from missing arguments.

TC39 just came to consensus that we'd like to be stricter here, for new APIs. In fact we'd like to be stricter even than the web platform currently is - we'll adopt the "missing arguments are an error" thing from the web platform, but in addition we'll start treating explicit `undefined` as an error.

I'm hoping the web platform can make the same change: treat missing arguments and explicit `undefined` consistently with each other, as an error. Obviously this is not a trivial change.

Assuming people are open to this, what's the best way to go about making such a change? I was thinking a new [LegacyCoerceUndefined] Web IDL attribute, which would be attached to ~every existing API specified with Web IDL, and then change the default definition for argument handling without that attribute so that explicit `undefined` throws. Does that sound reasonable?

[13:01:51.0211] <bakkot>
cc Domenic since we were talking about this over in the tc39 channel

[14:11:16.0050] <annevk>
bakkot: in principle I think that could work, modulo the amount of work; but presumably it only applies to a subset of arguments, strings and nullables?

[14:12:09.0869] <bakkot>
we don't want to coerce `undefined` to 0 either? and for nullables accepting `undefined` is fine

[14:12:38.0217] <bakkot>
for booleans the default value is generally `false` so coercing is fine, as long as you can also just omit the argument and get `false`

[14:12:57.0278] <bakkot>
you can't coerce `undefined` to object types, of course. I think that covers everything?

[14:14:12.0057] <bakkot>
that is, when passing an explicit `undefined`:
- any object type: already an error
- nullable: legal because that's what "nullable" means
- boolean: presumably intended to default to `false`; should continue to do so
- string: should become error
- number: should become error


[14:14:31.0695] <bakkot>
 * that is, when passing an explicit `undefined`:

- any object type: already an error
- nullable: legal because that's what "nullable" means
- boolean: presumably intended to default to `false`; should continue to do so
- string: should become error
- number: should become error (unless 0 is intended to be the default, as it often is)

[14:15:12.0671] <bakkot>
in the boolean/number cases where you want a default value, missing arguments should be accepted and treated the same way as an explicit `undefined`, rather than getting an error

[14:16:14.0647] <bakkot>
 * that is, when passing an explicit `undefined`:

- any object type: already an error
- symbol/bigint/function types: already an error
- nullable: legal because that's what "nullable" means
- boolean: presumably intended to default to `false`; should continue to do so
- string: should become error
- number: should become error (unless 0 is intended to be the default, as it often is)

[14:19:08.0945] <annevk>
Makes sense, I forgot that undefined works for numbers/booleans

[14:21:24.0705] <Jeffrey Yasskin>
Nit: passing `undefined` to a WebIDL dictionary should probably stay equivalent to passing {}. There's a recommendation  (https://webidl.spec.whatwg.org/#dfn-optional-argument-default-value) to make that the default value for trailing dictionaries, but there might be interior ones for which it matters.

[14:22:33.0995] <Jeffrey Yasskin>
Well, I guess I don't actually have a preference that people be able to pass `undefined` instead of `{}`. It's just not quite true that it's already an error for all object types.

[14:23:56.0325] <bakkot>
ah, I only mean for this to apply when there are no default values specified

[14:24:16.0529] <bakkot>
in the case of default values, I would want explicit `undefined`, like an entirely missing argument, to give you the default value

[14:24:59.0789] <bakkot>
... also is the default for dictionaries really `{}` instead of `{ __proto__: null }`? seems bad...

[14:26:04.0235] <bakkot>
for non-trailing dictionaries, which do not have default values (i.e. the argument is required), it seems like it ought not accept `undefined`, to me?

[14:26:10.0470] <bakkot>
 * for non-trailing dictionaries, which do not have default values specified (i.e. the argument is required), it seems like it ought not accept `undefined`, to me?

[14:28:14.0446] <Andreu Botella>
> <@bakkot:matrix.org> ... also is the default for dictionaries really `{}` instead of `{ __proto__: null }`? seems bad...

WebIDL dictionaries are only ever taken as arguments, they're never returned from an API, so this isn't a concern.

[14:28:32.0221] <annevk>
bakkot: `{}` is a Web IDL literal, it's not a JS object

[14:28:39.0443] <bakkot>
ah, ok

[14:29:23.0779] <annevk>
Dictionaries are returned by some APIs btw.

[14:32:01.0823] <Andreu Botella>
Oh, it says it can't be a value of constants or attributes, but that's because then there's the issue of what happens when JS code updates them

[14:32:24.0304] <Jeffrey Yasskin>
But in the case of a returned dictionary, the empty one is `OrdinaryObjectCreate(%Object.prototype%)`

[14:32:39.0586] <Jeffrey Yasskin>
(https://webidl.spec.whatwg.org/#es-dictionary)

[14:37:48.0206] <bakkot>
I'm not so worried about returned dictionaries. I just want to ensure that when using an empty dictionary as a default value, you don't risk inheriting missing properties from Object.prototype.

[14:38:21.0299] <bakkot>
I guess if you're returning a dictionary for which some property is conditionally present that would be a concern.

[14:44:06.0834] <Jeffrey Yasskin>
It might actually be ambiguous in WebIDL. The spec is "Optional argument default values can also be specified using the two token value {}, which represents a default-initialized (as if from ES null or an object with no properties) dictionary value.", but as you say, null and "an object with no properties" could be interpreted as producing different dictionaries. 


2023-07-14
[00:38:54.0959] <Ms2ger>
> <@jyasskin:matrix.org> It might actually be ambiguous in WebIDL. The spec is "Optional argument default values can also be specified using the two token value {}, which represents a default-initialized (as if from ES null or an object with no properties) dictionary value.", but as you say, null and "an object with no properties" could be interpreted as producing different dictionaries.

No it can't, there's actual normative prose elsewhere that will be unambiguous

[04:26:53.0738] <sideshowbarker>
annevk: https://github.com/mdn/content/pull/27927 would benefit from some of your attention

[07:30:57.0688] <bkardell>
hey annevk I don't really understand this comment https://github.com/whatwg/html/pull/9452#discussion_r1247914359 -- I could reply as much but this has taken so long already (apologies I have been taking care of my mom for the last month) that I thought maybe here could be faster to clarify

[09:04:15.0288] <annevk>
bkardell: I don't have a lot of time right now, but the comment is that what you're saying it branches on and the branches themselves don't line up

[09:24:48.0235] <Jeffrey Yasskin>
> <@ms2ger:igalia.com> No it can't, there's actual normative prose elsewhere that will be unambiguous

"{}" only appears in WebIDL normative text twice, and the other just refers to this use. "Default-initialized" only appears once. Can you find the unambiguous normative prose for this?

[09:58:50.0782] <annevk>
Jeffrey Yasskin: presumably the normative requirement is the overload resolution algorithm followed by ES to dictionary conversion

[10:00:30.0800] <Jeffrey Yasskin>
ES->dictionary clearly specifies how `null` converts, and a fix would probably be to remove "or an object with no properties", but I don't see a place in overload resolution that mentions {} or default initialization.

[10:00:33.0361] <annevk>
Having said that, perhaps we should clarify that parenthetical

[10:01:25.0422] <annevk>
I think the `{}` is more of a syntax requirement on specifications to improve readability and doesn't translate into a requirement on Web IDL consumers

[10:09:44.0659] <Jeffrey Yasskin>
The requirement on WebIDL consumers comes from "If the argument at index i is declared with a default value, then append to values that default value." in https://webidl.spec.whatwg.org/#dfn-overload-resolution-algorithm, but it's only the text I quoted from https://webidl.spec.whatwg.org/#dfn-optional-argument-default-value that defines what the default value is. I fully believe that the text used to specify this precisely, but some refactoring must have lost it. I doubt anyone has actually implemented this differently; it's just a technical nit.

[10:45:39.0701] <annevk>
Jeffrey Yasskin: hmm yeah, file an issue? I couldn't find one

[10:46:47.0058] <annevk>
Great, blame isn't loading

[10:52:53.0179] <annevk>
Oh, it did: https://github.com/whatwg/webidl/commit/7329e8c62b5825376a52626a579a1890ac83cb29

[10:53:06.0695] <annevk>
So looking at that I don't think anything else was added at the time

[13:44:55.0226] <annevk>
bkardell: oh and hey, no need to apologize to me! I'm happy for you to take the time that you need. I should also note that I will be generally less available until August 20 or so. I have a couple more working days here and there and I'll try to prioritize this PR should you update it, but I'm personally in no rush. 😊


2023-07-17
[23:20:50.0253] <sideshowbarker>
TabAtkins:  https://drafts.fxtf.org/compositing/#abstract is showing something other than the expected spec. I guess that must be due to whatever underlying problem is causing https://api.csswg.org/bikeshed/ to not work as expected

[23:21:17.0532] <sideshowbarker>
 * TabAtkins:  https://drafts.fxtf.org/compositing/ is showing something other than the expected spec. I guess that must be due to whatever underlying problem is causing https://api.csswg.org/bikeshed/ to not work as expected

[23:22:37.0593] <sideshowbarker>
but it seems odd that https://drafts.fxtf.org/compositing/ would be the only spec that’s failing (which it is, as far as I can see)

[10:12:46.0151] <TabAtkins>
sideshowbarker: it seems to be showing the expected spec now

[10:13:20.0835] <TabAtkins>
But yeah, I think fxtf and houdini aren't using the same build setup as the csswg atm because we haven't gotten around to it, so if the server is hiccuping it might affect them.

[10:39:16.0827] <Jeffrey Yasskin>
> <@annevk:matrix.org> Jeffrey Yasskin: hmm yeah, file an issue? I couldn't find one

https://github.com/whatwg/webidl/issues/1344 Thanks bakkot too.

