2023-07-02
[20:38:28.0197] <Motheo Moitsheki>
Brandon Sheley: 


2023-07-04
[21:35:01.0284] <Domenic>
Alexander Kalenik: Did you have a chance to look at https://github.com/whatwg/html/issues/9148#issuecomment-1610989949 ? I would love to get your implementer experience-informed opinion, before I go making changes.

[00:50:27.0386] <zcorpan>
Domenic: do you know which sites would benefit from `origin-agent-cluster` (regardless of its default value)?

[00:52:54.0686] <Domenic>
> <@zcorpan:mozilla.org> Domenic: do you know which sites would benefit from `origin-agent-cluster` (regardless of its default value)?

Google Workspace uses it heavily to hint for process isolation among its many same-site cross-origin pages.

[00:55:13.0022] <zcorpan>
Domenic: ok. Do you know if there's interest from non-Google properties?

[00:57:26.0556] <Domenic>
I haven't been in touch with any. Unfortunately it looks like it's not used on the sites HTTP archive picks up, but it's used by ~0.5% of page views. https://chromestatus.com/metrics/feature/timeline/popularity/3286

[00:58:11.0644] <zcorpan>
Domenic: ok, thanks!

[01:31:09.0873] <zcorpan>
Domenic: I see 39 sites in httparchive using resources with OAC: ?1

[01:36:27.0782] <Domenic>
Oh nice!

[01:54:37.0938] <zcorpan>
Domenic: https://docs.google.com/spreadsheets/d/1WNmB2zpx8BAf8bkBOeL-gVeHghR02sXW2Jzea6t2vpE/edit?usp=sharing

[01:55:20.0226] <Domenic>
Well, that is kind of suspicious

[01:55:58.0679] <Domenic>
It got into some white-label Brazilian photo-printing site I guess?

[01:56:30.0983] <zcorpan>
oh wait, I made a mistake. They're actually using `Origin-Agent-Cluster: 1`

[02:03:47.0789] <zcorpan>
Domenic: 6406 pages use `?1` https://docs.google.com/spreadsheets/d/11-6EKWZaQdpvOe8L1nxHW3wWtTnwDy1GhNYDJCcVY-0/edit?usp=sharing

[02:05:15.0174] <zcorpan>
Curious that the use counter doesn't find these in httparchive

[02:06:31.0901] <Domenic>
I think maybe I renamed the use counter at one point. I wonder if that broke it.

[02:06:48.0338] <Domenic>
Ah wow that is a nice list.


2023-07-05
[23:14:26.0242] <sideshowbarker>
Domenic: I want to raise an issue for adding `VideoPlaybackQuality` and `getVideoPlaybackQuality()` to HTML. I had thought we had an issue template of some kind with a checklist (e.g., including the _“no implementers object”_ language — but right now, I can’t find any such template.

And maybe I’m confusing it with the browser-project “Intent to implement/ship” messages I’ve seen that do have such checklists?

[23:15:52.0292] <sideshowbarker>
 * Domenic: I want to raise an issue for adding `VideoPlaybackQuality` and `getVideoPlaybackQuality()` to HTML. I had thought we had an issue template of some kind with a checklist (e.g., including the _“no implementers object”_ language) — but right now, I can’t find any such template.

And maybe I’m confusing it with the browser-project “Intent to implement/ship” messages I’ve seen that do have such checklists?

[23:21:47.0725] <sideshowbarker>
ah, nevermind — I realize now that I what I had been thinking of was of course the template for _PRs_


2023-07-06
[17:37:05.0283] <sideshowbarker>
Help wanted / Good first issue: For anybody interested in contributing to the HTML standard, https://github.com/whatwg/html/issues/1102 might be a good issue you could resolve, by writing a spec patch for it with a modest amount of effort — perhaps mostly by just porting over the existing `<input capture>` spec text from https://w3c.github.io/html-media-capture/


[02:01:36.0187] <vrafaeli>
I'm confused about why you cannot directly download the resource (file) on the local machine using JS, but you can do it with JS if you fetch the resource, construct the a element with the fetched resource as URL and then click it using JS?

[02:26:55.0782] <zcorpan>
Is there a spec issue about upstreaming https://wicg.github.io/document-policy/#integrations ?

[05:31:53.0649] <annevk>
zcorpan: I don't think there is one against HTML

[05:32:10.0718] <zcorpan>
annevk: ok

[05:57:34.0326] <annevk>
vrafaeli: example? I thought `<a download>.click()` would generally work. Seems weird if it performs a same-origin check ahead of time given redirects.

[06:18:31.0899] <annevk>
I initially thought https://github.com/whatwg/html/issues/9491 was about making `/>` conforming on all tags but also have it continue to be meaningless

[06:19:11.0958] <annevk>
So you can write `<div />yolo</div>`  and the HTML checker won't yell

[06:20:12.0335] <annevk>
Anyway, if we do a flag it should just be "XML5"

[06:20:40.0427] <annevk>
 * Anyway, if we do a flag it should just be "XML5" (and the flag is `text/xml`)

[06:45:53.0442] <vrafaeli>
> <@annevk:matrix.org> vrafaeli: example? I thought `<a download>.click()` would generally work. Seems weird if it performs a same-origin check ahead of time given redirects.

https://codesandbox.io/s/interesting-nightingale-vkpy9s?file=/src/index.js

I use a plugin to inject response header "content-disposition: attachment".


I was expecting that after the response has been received the browser would initialte a download to the local machine.

[06:46:47.0247] <vrafaeli>
but the download to local machine does not happen

[06:47:24.0110] <vrafaeli>
> <@annevk:matrix.org> vrafaeli: example? I thought `<a download>.click()` would generally work. Seems weird if it performs a same-origin check ahead of time given redirects.

 * https://codesandbox.io/s/interesting-nightingale-vkpy9s?file=/src/index.js

I use a Chrome plugin to inject response header "content-disposition: attachment".

I was expecting that after the response has been received the Chrome browser would initialte a download to the local machine.

[06:47:57.0211] <vrafaeli>
 * https://codesandbox.io/s/interesting-nightingale-vkpy9s?file=/src/index.js

I use a Chrome plugin to inject response header "content-disposition: attachment".

I was expecting that this would make the Chrome browser to do a download to the local machine.

[06:50:28.0748] <vrafaeli>
 * https://codesandbox.io/s/interesting-nightingale-vkpy9s?file=/src/index.js

I use a Chrome plugin to inject response header "content-disposition: attachment". (in my real case the server sets it)

I was expecting that this would make the Chrome browser to do a download to the local machine.

[11:14:09.0413] <TabAtkins>
Hm, is there a term I can reference for "frames that can be communicated with"? Basically just anything you can postMessage to?

[11:17:52.0867] <Jeremy Roman>
browsing context group?

[11:18:22.0678] <Jeremy Roman>
(though BroadcastChannel is an exception)

[11:18:51.0279] <TabAtkins>
(Context is "things that should be able to see an MQ change if it gets toggled by script", re: https://github.com/w3c/csswg-drafts/issues/6517)

[11:19:23.0758] <TabAtkins>
Because if you darkmode a site via an in-site toggle you'd like iframes to darkmode as well, ideally.

[12:41:41.0422] <zcorpan>
TabAtkins: you can postMessage() across origins. In the issue you say it shouldn't be visible to cross-origin iframes

[13:14:28.0268] <TabAtkins>
Basically I just don't want to invent a new security boundary. If you can already freely message a cross-domain frame, you should be able to affect their MQs.

[13:30:12.0475] <zcorpan>
TabAtkins: for popups you can communicate between opener and openee unless it was opened with `noopener`. For iframes I *think* you can always send a message (if embedding is allowed). When same-origin, you can communicate even if there's no reference to the window (with `BroadcastChannel` or `localStorage` or `document.cookie` or a shared worker)

[13:30:43.0752] <TabAtkins>
Right, all this detail is why I was asking if there's already a spec concept for communicating subframes.

[13:34:17.0414] <zcorpan>
TabAtkins: it's still not clear to me what you want

[13:39:26.0232] <TabAtkins>
I want to define that you can toggle certain MQs from script. These MQs want to transmit their script-changed values to subframes (so an iframe will also be darkmode if the top-level frame was set to darkmode). But I don't want to open a new communication channel. I'm *presuming* that "frames you can postMessage" is a reasonable description of the boundary for things that can see the altered MQs.

[13:40:06.0696] <TabAtkins>
And I'm hoping this is already a concept defined somewhere so I don't have to create and maintain such a definition in a CSS spec that doesn't otherwise care about the web's communication/security boundaries.

[13:40:43.0005] <zcorpan>
TabAtkins: what about popups?

[13:41:05.0924] <TabAtkins>
I suspect we should treat them like subframes in this regard.

[13:42:03.0627] <emilio>
> <@tabatkins:matrix.org> I want to define that you can toggle certain MQs from script. These MQs want to transmit their script-changed values to subframes (so an iframe will also be darkmode if the top-level frame was set to darkmode). But I don't want to open a new communication channel. I'm *presuming* that "frames you can postMessage" is a reasonable description of the boundary for things that can see the altered MQs.

Didn't we resolve at some point that the embedded page's color scheme depended on the color-scheme value of the iframe?

[13:42:17.0402] <emilio>
Or discuss doing it or something?

[13:42:43.0855] <TabAtkins>
yeah we at least discussed it, tho I don't recall the conclusion exactly. But we should rely on the same mechanism, def.

[13:43:50.0036] <emilio>
Seems like if we do that stuff then it works. But yeah gecko has the "browsing context group" concept which is just that, stuff you can postMessage to

[13:50:17.0146] <zcorpan>
I'm a bit uneasy with making custom MQ available to the whole browsing context group. It would be like `BroadcastChannel` but to all origins

[13:59:17.0959] <TabAtkins>
I don't really care what concept I end up leaning on. If browsing context group is too large, then a smaller one would work just fine for me. I just need the concept to exist somewhere where it can be reasonably maintained as we continue to add more distinctions and guards to it.

[14:00:40.0276] <annevk>
TabAtkins: it seems like you only want to propagate to descendant documents so that's probably what you want to say; or do you also want to go to ancestors or popups?

[14:01:22.0830] <TabAtkins>
Not ancestors (ancestors need to be able to propagate to *me*). Possibly popups, but I don't think I have much of an opinion. Seems reasonable that if the page is in darkmode its popups should be too.

[14:02:08.0355] <annevk>
"Its popups" is somewhat of a corner area as some popups are created deliberately without communication channel

[14:02:27.0195] <TabAtkins>
yeah that's fair

[14:02:29.0588] <annevk>
Anyway, if you don't want ancestors claiming you want equivalence with postMessage() is not too helpful

[14:02:57.0700] <annevk>
I would start with a document and its descendant documents (HTML has some terms for this though they are not super)

[14:05:09.0502] <TabAtkins>
Descendants will count things like, say, fenced frames tho I assume, so I'll still need more clarification there.

[14:05:14.0313] <TabAtkins>
But yeah that's probably the starting point.

[14:06:16.0706] <annevk>
Fenced frames aren't integrated with HTML so who knows how they work. If descendant documents return them they probably have some issues to work out.

[14:06:33.0957] <TabAtkins>
fair

[14:06:57.0990] <TabAtkins>
Probably just leaving an impl note next to the definition will suffice for now.


2023-07-07
[02:39:12.0527] <zcorpan (OOO until Aug 14)>
Have a nice summer folks

[02:43:10.0919] <Magnus Jurdal>
The same to you all Have a wonderful summer vacation 

[07:07:41.0507] <jgraham>
https://url.spec.whatwg.org/#serialize-an-integer is entertainingly succinct. No idea what data type it returns for example :) 

[07:17:48.0472] <jgraham>
I found https://github.com/whatwg/infra/issues/201, so now I know fetch has a very slight improvement on this, which has apparently been copied into various other specs.

[09:00:19.0119] <annevk>
A decimal number is a data type :p

[09:02:19.0473] <annevk>
Anyway, yeah, we should add numbers and ways to serialize them to strings to Infra. Maybe now that BigInt is defined we can actually do so.

[13:55:52.0419] <annevk>
jarhar: mfreed: hey, did you see https://github.com/whatwg/html/pull/9456#issuecomment-1611419095?

[13:56:39.0868] <annevk>
jarhar: mfreed: would be great to have your input; cc ntim 

[13:57:44.0481] <sideshowbarker>
I’m looking at https://github.com/w3c/webappsec-credential-management/actions/runs/5465713950/jobs/9949551741
```
      LINE ~299: No 'dfn' refs found for 'parent browsing context'.
      [=parent browsing context=]
```

[13:58:26.0965] <sideshowbarker>
I guess `parent browsing context` got changed to something else at some point before March?

[14:02:05.0147] <sideshowbarker>
aha, `parent navigable`, it seems

[14:02:20.0150] <sideshowbarker>
 * aha, `parent navigable`, it seems. Right?

[14:02:47.0795] <annevk>
Yeah, though I'm not sure it's really a term of art on its own; you'd get the current navigable somehow and then grab its parent member.

[14:03:38.0759] <sideshowbarker>
I see

[14:03:59.0235] <sideshowbarker>
Lemme grab the relevant part of the credential-management spec

[14:05:24.0508] <sideshowbarker>
https://w3c.github.io/webappsec-credential-management/#algorithm-same-origin-with-ancestors
> 6. While _current_ has a parent browsing context:
>
>    1. Set _current_ to current’s parent browsing context.


[14:06:17.0259] <sideshowbarker>
So I guess I can’t just `s/parent browsing context/parent navigable/` there?

[14:07:26.0320] <sideshowbarker>
Maybe I need to add some earlier step to get the current navigable first?

[14:10:29.0046] <annevk>
_current_ prolly needs to become a navigable and then you check _current_'s parent

[14:11:17.0162] <annevk>
Domenic and Dominic Farolino have a better hold on this and might be able to suggest even better things

[14:11:20.0095] <sideshowbarker>
is there a _“get navigable for…”_ hook?

[14:12:01.0599] <sideshowbarker>
> <@annevk:matrix.org> Domenic and Dominic Farolino have a better hold on this and might be able to suggest even better things

Thanks yeah then I’ll wait to hear from them. It’s not urgent. The related issue has been open since March 2nd

[14:12:02.0308] <annevk>
You can grab it from the `Window` object at least

[14:12:09.0412] <Domenic>
It looks like you want to go from document -> navigable. For that, use "node navigable".

[15:10:33.0388] <sideshowbarker>
Unrelated incidental bikeshed warning:
```
LINK ERROR: Multiple possible 'fetch()' idl refs.
Arbitrarily chose https://wicg.github.io/background-fetch/#dom-backgroundfetchmanager-fetch
To auto-select one of the following refs, insert one of these lines into a <pre class=link-defaults> block:
spec:background-fetch; type:method; text:fetch(id, requests)
spec:fetch; type:method; text:fetch(input)
{{fetch()}}
```

[15:11:29.0231] <sideshowbarker>
…but I _did_ already put:
```diff
@@ -76,6 +76,7 @@ spec: web-otp; urlPrefix: https://wicg.github.io/web-otp
 <pre class="link-defaults">
 spec:html; type:dfn; for:html-origin-def; text:origin
 spec:html; type:dfn; for:environment settings object; text:global object
+spec:fetch; type:method; text:fetch(input)
 spec:fetch; type:dfn; for:/; text:request
 spec:fetch; type:dictionary; for:/; text:RequestInit
 spec:infra; type:dfn; for:/; text:set
```

[15:12:27.0373] <sideshowbarker>
…but Bikeshed seems to be ignoring that

[15:12:48.0836] <sideshowbarker>
 * Unrelated incidental bikeshed warning:

```plain
LINK ERROR: Multiple possible 'fetch()' idl refs.
Arbitrarily chose https://wicg.github.io/background-fetch/#dom-backgroundfetchmanager-fetch
To auto-select one of the following refs, insert one of these lines into a <pre class=link-defaults> block:
spec:background-fetch; type:method; text:fetch(id, requests)
spec:fetch; type:method; text:fetch(input)
{{fetch()}}
```

[15:12:56.0055] <sideshowbarker>
 * Unrelated incidental bikeshed warning:

```none
LINK ERROR: Multiple possible 'fetch()' idl refs.
Arbitrarily chose https://wicg.github.io/background-fetch/#dom-backgroundfetchmanager-fetch
To auto-select one of the following refs, insert one of these lines into a <pre class=link-defaults> block:
spec:background-fetch; type:method; text:fetch(id, requests)
spec:fetch; type:method; text:fetch(input)
{{fetch()}}
```

[15:13:09.0683] <sideshowbarker>
 * Unrelated incidental bikeshed warning:

```
LINK ERROR: Multiple possible 'fetch()' idl refs.
Arbitrarily chose https://wicg.github.io/background-fetch/#dom-backgroundfetchmanager-fetch
To auto-select one of the following refs, insert one of these lines into a <pre class=link-defaults> block:
spec:background-fetch; type:method; text:fetch(id, requests)
spec:fetch; type:method; text:fetch(input)
{{fetch()}}
```

[15:13:58.0811] <sideshowbarker>
 * Unrelated incidental bikeshed warning:

```text
LINK ERROR: Multiple possible 'fetch()' idl refs.
Arbitrarily chose https://wicg.github.io/background-fetch/#dom-backgroundfetchmanager-fetch
To auto-select one of the following refs, insert one of these lines into a <pre class=link-defaults> block:
spec:background-fetch; type:method; text:fetch(id, requests)
spec:fetch; type:method; text:fetch(input)
{{fetch()}}
```

[15:18:57.0166] <annevk>
sideshowbarker: I think that's because it lacks input as argument so you either want to remove input in link-defaults or add it where you reference

[15:19:55.0286] <annevk>
sideshowbarker: in fact if you did `<a lt=fetch(input)><code>fetch()</code></a>` you'd probably not need link-defaults

[15:23:04.0406] <sideshowbarker>
> <@annevk:matrix.org> sideshowbarker: in fact if you did `<a lt=fetch(input)><code>fetch()</code></a>` you'd probably not need link-defaults

Hai. Will do that instead

[16:03:50.0458] <canadahonk>
hi all, edgecase with `HTMLStyleElement` for you: if the disabled flag is set and the children are updated, should the stylesheet be updated/applied?

[16:04:29.0075] <canadahonk>
example:
```js
const style = document.createElement("style")
style.disabled = true;
assert(style.disabled); // true
style.textContent = "new content";
assert(!style.disabled); // false
```

[16:05:01.0183] <canadahonk>
 * example:

```js
const style = document.createElement("style");
document.body.appendChild(style);

style.disabled = true;
assert(style.disabled); // true

style.textContent = "new content";
assert(!style.disabled); // false
```

[16:05:57.0578] <canadahonk>
 * example:

```js
const style = document.createElement("style");
document.body.appendChild(style);

style.disabled = true;
style.disabled // true

style.textContent = "new content";
style.disabled // false
```

[16:13:14.0741] <annevk>
Yeah, see https://html.spec.whatwg.org/#update-a-style-block and caller


2023-07-10
[19:09:32.0210] <TabAtkins>
> <@sideshowbarker:matrix.org> …but I _did_ already put:
> ```diff
> @@ -76,6 +76,7 @@ spec: web-otp; urlPrefix: https://wicg.github.io/web-otp
>  <pre class="link-defaults">
>  spec:html; type:dfn; for:html-origin-def; text:origin
>  spec:html; type:dfn; for:environment settings object; text:global object
> +spec:fetch; type:method; text:fetch(input)
>  spec:fetch; type:dfn; for:/; text:request
>  spec:fetch; type:dictionary; for:/; text:RequestInit
>  spec:infra; type:dfn; for:/; text:set
> ```

Hmmm, that's a bug on my part if I'm recommending a link-defaults but the linker isn't using it in this situation.

[19:09:55.0603] <TabAtkins>
I presume you've just got a `{{fetch()}}` somewhere that's triggering the failure in the first place?

[19:10:12.0887] <sideshowbarker>
Howdy Tab

[19:10:21.0465] <sideshowbarker>
> <@tabatkins:matrix.org> I presume you've just got a `{{fetch()}}` somewhere that's triggering the failure in the first place?

Yeah, exactly

[19:10:43.0014] <sideshowbarker>
But in the meantime, I worked around it by fulling inlining the ref

[19:10:48.0294] <sideshowbarker>
/me looks for the PR

[19:11:32.0381] <TabAtkins>
k, the magic that makes an arg-less method autolink work even if you didn't dfn any argless forms must be done in such a way that it doesn't catch the link-default. So yeah, bug on my part.

[19:13:23.0990] <sideshowbarker>
well, Anne pointed out to me how to inline it properly in this case — and I guess it’s better to do it that way anyway (so maybe it’s not really so much a workaround after all)

[19:13:29.0885] <sideshowbarker>
https://github.com/w3c/webappsec-credential-management/pull/223/files#diff-5e793325cd2bfc452e268a4aa2f02b4024dd9584bd1db3c2595f61f1ecf7b985R2191

[19:14:20.0260] <sideshowbarker>
but that said, that’s repetitive in that there are multiple instances of that, which I see could instead just be handled by setting a default

[19:14:53.0533] <sideshowbarker>
so that makes me really see the purpose and value of having that mechanism for setting defaults — so that I don’t have to repeat like that

[19:15:06.0308] <TabAtkins>
right, regardless of whether you could work around it in this instance it's still absolutely a bug that I'm recommending a fix that doesn't work

[19:17:09.0118] <sideshowbarker>
> <@tabatkins:matrix.org> If you want to use local versions of boilerplates because whatever's getting downloaded by `bikeshed update` is bad, ideally gimme a PR at <https://github.com/speced/bikeshed-boilerplate>, but failing that just put the appropriate boilerplate file next to your spec source. Bikeshed'll use local files over stuff in its database.

TabAtkins: by the way, I had been meaning to say Thanks to for that guidance ⬆️ you gave me a couple few weeks ago (about how to use local boilerplate properly)

[19:17:30.0662] <sideshowbarker>
> <@tabatkins:matrix.org> If you want to use local versions of boilerplates because whatever's getting downloaded by `bikeshed update` is bad, ideally gimme a PR at <https://github.com/speced/bikeshed-boilerplate>, but failing that just put the appropriate boilerplate file next to your spec source. Bikeshed'll use local files over stuff in its database.

 * TabAtkins: by the way, I had been meaning to say Thanks to you for that guidance ⬆️ you gave me a couple few weeks ago (about how to use local boilerplate properly)

[19:18:26.0466] <TabAtkins>
Nice, glad I could help!

[19:18:29.0622] <TabAtkins>
Also: https://github.com/speced/bikeshed/issues/2600


2023-07-11
[13:47:59.0760] <TabAtkins>
Heads up: I just pushed the first phase of my html parser rewrite (take 2). It looks like it should be great; in particular, I got *zero* output changes in WHATWG specs. I did spot checks on several specs to make sure I wasn't outputting spurious new warnings, but as I don't yet have console text logged as part of tests, I'm not 100% sure about that. Please let me know if anything looks wrong.

[13:48:08.0208] <TabAtkins>
(It's in the new version 3.14.0)

[16:01:52.0481] <sideshowbarker>
> <@tabatkins:matrix.org> Heads up: I just pushed the first phase of my html parser rewrite (take 2). It looks like it should be great; in particular, I got *zero* output changes in WHATWG specs. I did spot checks on several specs to make sure I wasn't outputting spurious new warnings, but as I don't yet have console text logged as part of tests, I'm not 100% sure about that. Please let me know if anything looks wrong.

Python parser? Embedded in Bikeshed?

[16:02:29.0891] <TabAtkins>
Yeah, plan for a long while has been to integrate all of Bikeshed's core parsing into one (heavily modified) parser.

[16:02:54.0306] <TabAtkins>
HTML, markdown, and all of bikeshed's varied shorthand syntaxes

[16:03:00.0878] <sideshowbarker>
Excellent

[16:04:33.0351] <sideshowbarker>
Optimized for performance? Or instead that's not a priority?

[16:05:33.0485] <TabAtkins>
Definitely not a priority at this phase, but I'm pretty confident it will be a perf benefit over the "run shitloads of regexes over the document repeatedly" process that I do today.

[16:06:00.0269] <TabAtkins>
But mostly it's about correctness; processing things in the distinct phases that I do today just doesn't work

[16:07:41.0283] <TabAtkins>
(There's a bunch of places where, say, I have to handle something before the HTML parser sees it, but I have to avoid messing with it if it shows up inside an XMP or markdown code span, etc. All my inline shorthands work only if you nest them in the order that I happen to process them. etc.)


2023-07-13
[17:13:08.0088] <TabAtkins>
sideshowbarker: It looks like the MDN-spec-links project moved to html-now? But the SPECMAP.json file is still present at the old location, and apparently out of date.

[17:13:24.0604] <TabAtkins>
(Bikeshed is pulling down some 404 pages for mdn data right now.)

[18:12:52.0335] <sideshowbarker>
> <@tabatkins:matrix.org> sideshowbarker: It looks like the MDN-spec-links project moved to html-now? But the SPECMAP.json file is still present at the old location, and apparently out of date.

Not moved. The html-now SPECMAP.json is a copy. But spec-links is just borked at the moment, for some reason. I’ll look into right now and fix it.

[18:14:30.0240] <TabAtkins>
Kk. I should respond to 404s better too 

[18:14:44.0844] <sideshowbarker>
yeah

[18:15:14.0530] <sideshowbarker>
can you give me one that you are getting a 404 on right now?

[18:15:54.0628] <sideshowbarker>
ah nevermind

[18:15:59.0396] <sideshowbarker>
I see now

[18:16:08.0161] <sideshowbarker>
lord, what did I do

[18:17:07.0864] <sideshowbarker>
w3c.github.io/mdn-spec-links is just entirely redirecting to https://html-now.github.io/

[18:17:41.0976] <sideshowbarker>
that’s completely unintentional and I don’t yet have any idea how I caused that, nor when (how long ago)

[18:23:16.0243] <sideshowbarker>
…and unfortunately, used a 301 rather than a 302

[18:27:10.0523] <sideshowbarker>
TabAtkins: should be un-borked now — at least from non-browser requests without some network cache in between

[18:27:36.0434] <sideshowbarker>
for browsers, may need to do some fiddling in devtools

[13:01:09.0814] <bakkot>
The web platform and JS are inconsistent wrt each other in the handling of `undefined` & missing arguments to functions. (When I speak of "missing arguments", I mean only for cases where an argument is required, and is not typed to accept `undefined`.)

Historically in JS, missing arguments are treated the same way as explicit `undefined`: coerce the value `undefined` to the relevant argument type. So for example `escape()` returns the string `"undefined"`.

In the web platform, missing arguments are an error, in contrast to JS. Like in JS, an explicit `undefined` is coerced to the relevant argument type, so it is handled differently from missing arguments.

TC39 just came to consensus that we'd like to be stricter here, for new APIs. In fact we'd like to be stricter even than the web platform currently is - we'll adopt the "missing arguments are an error" thing from the web platform, but in addition we'll start treating explicit `undefined` as an error.

I'm hoping the web platform can make the same change: treat missing arguments and explicit `undefined` consistently with each other, as an error. Obviously this is not a trivial change.

Assuming people are open to this, what's the best way to go about making such a change? I was thinking a new [LegacyCoerceUndefined] Web IDL attribute, which would be attached to ~every existing API specified with Web IDL, and then change the default definition for argument handling without that attribute so that explicit `undefined` throws. Does that sound reasonable?

[13:01:51.0211] <bakkot>
cc Domenic since we were talking about this over in the tc39 channel

[14:11:16.0050] <annevk>
bakkot: in principle I think that could work, modulo the amount of work; but presumably it only applies to a subset of arguments, strings and nullables?

[14:12:09.0869] <bakkot>
we don't want to coerce `undefined` to 0 either? and for nullables accepting `undefined` is fine

[14:12:38.0217] <bakkot>
for booleans the default value is generally `false` so coercing is fine, as long as you can also just omit the argument and get `false`

[14:12:57.0278] <bakkot>
you can't coerce `undefined` to object types, of course. I think that covers everything?

[14:14:12.0057] <bakkot>
that is, when passing an explicit `undefined`:
- any object type: already an error
- nullable: legal because that's what "nullable" means
- boolean: presumably intended to default to `false`; should continue to do so
- string: should become error
- number: should become error


[14:14:31.0695] <bakkot>
 * that is, when passing an explicit `undefined`:

- any object type: already an error
- nullable: legal because that's what "nullable" means
- boolean: presumably intended to default to `false`; should continue to do so
- string: should become error
- number: should become error (unless 0 is intended to be the default, as it often is)

[14:15:12.0671] <bakkot>
in the boolean/number cases where you want a default value, missing arguments should be accepted and treated the same way as an explicit `undefined`, rather than getting an error

[14:16:14.0647] <bakkot>
 * that is, when passing an explicit `undefined`:

- any object type: already an error
- symbol/bigint/function types: already an error
- nullable: legal because that's what "nullable" means
- boolean: presumably intended to default to `false`; should continue to do so
- string: should become error
- number: should become error (unless 0 is intended to be the default, as it often is)

[14:19:08.0945] <annevk>
Makes sense, I forgot that undefined works for numbers/booleans

[14:21:24.0705] <Jeffrey Yasskin>
Nit: passing `undefined` to a WebIDL dictionary should probably stay equivalent to passing {}. There's a recommendation  (https://webidl.spec.whatwg.org/#dfn-optional-argument-default-value) to make that the default value for trailing dictionaries, but there might be interior ones for which it matters.

[14:22:33.0995] <Jeffrey Yasskin>
Well, I guess I don't actually have a preference that people be able to pass `undefined` instead of `{}`. It's just not quite true that it's already an error for all object types.

[14:23:56.0325] <bakkot>
ah, I only mean for this to apply when there are no default values specified

[14:24:16.0529] <bakkot>
in the case of default values, I would want explicit `undefined`, like an entirely missing argument, to give you the default value

[14:24:59.0789] <bakkot>
... also is the default for dictionaries really `{}` instead of `{ __proto__: null }`? seems bad...

[14:26:04.0235] <bakkot>
for non-trailing dictionaries, which do not have default values (i.e. the argument is required), it seems like it ought not accept `undefined`, to me?

[14:26:10.0470] <bakkot>
 * for non-trailing dictionaries, which do not have default values specified (i.e. the argument is required), it seems like it ought not accept `undefined`, to me?

[14:28:14.0446] <Andreu Botella>
> <@bakkot:matrix.org> ... also is the default for dictionaries really `{}` instead of `{ __proto__: null }`? seems bad...

WebIDL dictionaries are only ever taken as arguments, they're never returned from an API, so this isn't a concern.

[14:28:32.0221] <annevk>
bakkot: `{}` is a Web IDL literal, it's not a JS object

[14:28:39.0443] <bakkot>
ah, ok

[14:29:23.0779] <annevk>
Dictionaries are returned by some APIs btw.

[14:32:01.0823] <Andreu Botella>
Oh, it says it can't be a value of constants or attributes, but that's because then there's the issue of what happens when JS code updates them

[14:32:24.0304] <Jeffrey Yasskin>
But in the case of a returned dictionary, the empty one is `OrdinaryObjectCreate(%Object.prototype%)`

[14:32:39.0586] <Jeffrey Yasskin>
(https://webidl.spec.whatwg.org/#es-dictionary)

[14:37:48.0206] <bakkot>
I'm not so worried about returned dictionaries. I just want to ensure that when using an empty dictionary as a default value, you don't risk inheriting missing properties from Object.prototype.

[14:38:21.0299] <bakkot>
I guess if you're returning a dictionary for which some property is conditionally present that would be a concern.

[14:44:06.0834] <Jeffrey Yasskin>
It might actually be ambiguous in WebIDL. The spec is "Optional argument default values can also be specified using the two token value {}, which represents a default-initialized (as if from ES null or an object with no properties) dictionary value.", but as you say, null and "an object with no properties" could be interpreted as producing different dictionaries. 


2023-07-14
[00:38:54.0959] <Ms2ger>
> <@jyasskin:matrix.org> It might actually be ambiguous in WebIDL. The spec is "Optional argument default values can also be specified using the two token value {}, which represents a default-initialized (as if from ES null or an object with no properties) dictionary value.", but as you say, null and "an object with no properties" could be interpreted as producing different dictionaries.

No it can't, there's actual normative prose elsewhere that will be unambiguous

[04:26:53.0738] <sideshowbarker>
annevk: https://github.com/mdn/content/pull/27927 would benefit from some of your attention

[07:30:57.0688] <bkardell>
hey annevk I don't really understand this comment https://github.com/whatwg/html/pull/9452#discussion_r1247914359 -- I could reply as much but this has taken so long already (apologies I have been taking care of my mom for the last month) that I thought maybe here could be faster to clarify

[09:04:15.0288] <annevk>
bkardell: I don't have a lot of time right now, but the comment is that what you're saying it branches on and the branches themselves don't line up

[09:24:48.0235] <Jeffrey Yasskin>
> <@ms2ger:igalia.com> No it can't, there's actual normative prose elsewhere that will be unambiguous

"{}" only appears in WebIDL normative text twice, and the other just refers to this use. "Default-initialized" only appears once. Can you find the unambiguous normative prose for this?

[09:58:50.0782] <annevk>
Jeffrey Yasskin: presumably the normative requirement is the overload resolution algorithm followed by ES to dictionary conversion

[10:00:30.0800] <Jeffrey Yasskin>
ES->dictionary clearly specifies how `null` converts, and a fix would probably be to remove "or an object with no properties", but I don't see a place in overload resolution that mentions {} or default initialization.

[10:00:33.0361] <annevk>
Having said that, perhaps we should clarify that parenthetical

[10:01:25.0422] <annevk>
I think the `{}` is more of a syntax requirement on specifications to improve readability and doesn't translate into a requirement on Web IDL consumers

[10:09:44.0659] <Jeffrey Yasskin>
The requirement on WebIDL consumers comes from "If the argument at index i is declared with a default value, then append to values that default value." in https://webidl.spec.whatwg.org/#dfn-overload-resolution-algorithm, but it's only the text I quoted from https://webidl.spec.whatwg.org/#dfn-optional-argument-default-value that defines what the default value is. I fully believe that the text used to specify this precisely, but some refactoring must have lost it. I doubt anyone has actually implemented this differently; it's just a technical nit.

[10:45:39.0701] <annevk>
Jeffrey Yasskin: hmm yeah, file an issue? I couldn't find one

[10:46:47.0058] <annevk>
Great, blame isn't loading

[10:52:53.0179] <annevk>
Oh, it did: https://github.com/whatwg/webidl/commit/7329e8c62b5825376a52626a579a1890ac83cb29

[10:53:06.0695] <annevk>
So looking at that I don't think anything else was added at the time

[13:44:55.0226] <annevk>
bkardell: oh and hey, no need to apologize to me! I'm happy for you to take the time that you need. I should also note that I will be generally less available until August 20 or so. I have a couple more working days here and there and I'll try to prioritize this PR should you update it, but I'm personally in no rush. 😊


2023-07-17
[23:20:50.0253] <sideshowbarker>
TabAtkins:  https://drafts.fxtf.org/compositing/#abstract is showing something other than the expected spec. I guess that must be due to whatever underlying problem is causing https://api.csswg.org/bikeshed/ to not work as expected

[23:21:17.0532] <sideshowbarker>
 * TabAtkins:  https://drafts.fxtf.org/compositing/ is showing something other than the expected spec. I guess that must be due to whatever underlying problem is causing https://api.csswg.org/bikeshed/ to not work as expected

[23:22:37.0593] <sideshowbarker>
but it seems odd that https://drafts.fxtf.org/compositing/ would be the only spec that’s failing (which it is, as far as I can see)

[10:12:46.0151] <TabAtkins>
sideshowbarker: it seems to be showing the expected spec now

[10:13:20.0835] <TabAtkins>
But yeah, I think fxtf and houdini aren't using the same build setup as the csswg atm because we haven't gotten around to it, so if the server is hiccuping it might affect them.

[10:39:16.0827] <Jeffrey Yasskin>
> <@annevk:matrix.org> Jeffrey Yasskin: hmm yeah, file an issue? I couldn't find one

https://github.com/whatwg/webidl/issues/1344 Thanks bakkot too.

[15:51:43.0714] <dlrobertson>
The web platform tests https://github.com/web-platform-tests/wpt/pull/41029 state that no reviewer could be found. The tests are for https://github.com/whatwg/html/issues/9518 and the corresponding spec  PR https://github.com/whatwg/html/pull/9527. Who would happen to be good folks to tag on the issue and PRs?


2023-07-18
[21:53:50.0711] <Domenic>
I gave it a shot, although I'm not a layout person

[08:11:15.0655] <Dominic Farolino>
annevk: When HTTP-redirect fetch is invoked, at this time response's URL list does not contain the location URL, right? In other words, response's URL (last URL list item) is the URL that redirected (to the location URL), right?

[08:12:06.0112] <Dominic Farolino>
And then I believe we do a bunch of checks, and append the location URL to the request's URL list, and then once we get a response (maybe another redirect), we set the response's URL list to a clone of the request's URL list. Do I have the steps right here?

[13:05:00.0484] <Antony Britto>
Hi Everyone,
I'm an enthusiast Django developer with 25 years of experience in IT, mainly handling DevOps jobs and architect infrastructure solutions for deployment on cloud.

I was thinking about whether we could add some functionalities to HTML to make it handle communication with backend APIs instead of using JavaScript to do the job. Would this make the frontend more secure for web applications and improve data privacy concerns of users?

I've also been wondering why there hasn't been much development happening with HTML after version 5.


2023-07-19
[18:20:08.0089] <Domenic>
There has been a lot of development happening with HTML after "version 5". See https://github.com/whatwg/html/commits/main

[21:51:29.0627] <Antony Britto>
> <@domenicdenicola:matrix.org> There has been a lot of development happening with HTML after "version 5". See https://github.com/whatwg/html/commits/main

HTML 5 version released in 2014, past 9 years I did not heard about any new version? Why cant we add few features to handle backend API for web applications in HTML? That will make a lot more things more secure and address the data privacy concerns of users.

At the time of HTML 3 in 1997 there was technology limitations to handle new features. As of 2023 we have powerful processors and large size storage and memory with pretty good internet connections with good bandwidth. Any thoughts guys?

[21:52:09.0195] <Antony Britto>
 * Hi Everyone,
I'm an enthusiast Django/React/Anguar developer with 25 years of experience in IT, mainly handling DevOps jobs and architect infrastructure solutions for deployment on cloud.

I was thinking about whether we could add some functionalities to HTML to make it handle communication with backend APIs instead of using JavaScript to do the job. Would this make the frontend more secure for web applications and improve data privacy concerns of users?

I've also been wondering why there hasn't been much development happening with HTML after version 5.

[22:55:39.0361] <Andreu Botella>
There has been constant changes to the HTML specification since then, which browsers have been regularly shipping, there just hasn't been a new version

[22:56:00.0691] <Andreu Botella>
the HTML standard is now a living standard, that gets regularly updated at https://html.spec.whatwg.org/multipage

[22:56:19.0222] <Andreu Botella>
 * There has been constant changes to the HTML specification since then, which browsers have been regularly shipping, it just hasn't been released as a new major version

[22:56:25.0271] <Andreu Botella>
 * There has been constant changes to the HTML specification since then, which browsers have been regularly shipping, it just hasn't been released as major versions

[22:57:09.0278] <Andreu Botella>
https://whatwg.org/faq#living-standard

[23:01:02.0841] <Antony Britto>
> <@abotella:igalia.com> There has been constant changes to the HTML specification since then, which browsers have been regularly shipping, it just hasn't been released as major versions

May I know why cant we add few features to handle backend API for web applications in HTML? That will make a lot more things more secure and address the data privacy concerns of users. Is there any technological bottle neck?

[23:03:00.0982] <Andreu Botella>
if there is a way to make such a thing more secure and address privacy concerns, it might make sense to implement it, but I don't see how it would

[23:03:13.0093] <Andreu Botella>
could you expand some more?

[23:06:03.0528] <Antony Britto>
> <@abotella:igalia.com> if there is a way to make such a thing more secure and address privacy concerns, it might make sense to implement it, but I don't see how it would

Is it possible to communicate with backend API from HTML without the help of scripting languages?

[23:06:34.0330] <Andreu Botella>
I doubt so, since backend APIs are used for a lot of things, and I'm not sure how you'd cover most use cases for them without making the features that handle them a programming language unto itself

[23:09:42.0618] <Antony Britto>
> <@abotella:igalia.com> I doubt so, since backend APIs are used for a lot of things, and I'm not sure how you'd cover most use cases for them without making the features that handle them a programming language unto itself

As simple as get the data from the backend API and display it on the web page (this is what we do with web applications in simple terms.) with HTML without any scripting languages. Hope this is clear?

[23:10:08.0209] <Andreu Botella>
with no processing?

[23:11:38.0483] <Antony Britto>
> <@abotella:igalia.com> with no processing?

Server side processing? only validations happens at frontend right, no business logic in frontend

[23:14:46.0545] <Andreu Botella>
in my experience, there's a ton of business logic on the frontend

[23:15:28.0076] <Antony Britto>
> <@abotella:igalia.com> in my experience, there's a ton of business logic on the frontend

Those are the data privacy concerns.

[23:17:08.0102] <Andreu Botella>
also useful business logic

[23:17:22.0027] <Andreu Botella>
the thing is, this new API would have to be attractive enough to existing users so they want to move away from their current solution

[23:17:36.0263] <Andreu Botella>
and what you're describing would just remove functionality that those existing users would be using

[23:18:46.0101] <Andreu Botella>
script would still be a thing, so there wouldn't be any actual security or privacy benefits if no one is using this new API

[23:19:02.0668] <Antony Britto>
> <@abotella:igalia.com> the thing is, this new API would have to be attractive enough to existing users so they want to move away from their current solution

Why should we make them move, it is a personal choice and based on other requirements of the business.

[23:20:06.0385] <Antony Britto>
May I know why cant we add few features to handle backend API for web applications in HTML? Is there any technological bottle neck?

[00:08:14.0468] <Antony Britto>
Would that be possible to develop features for HTML to add interactivity to web pages, such as responding to user input, making changes to the content of the page, and loading new content from the server?

[00:12:22.0870] <Antony Britto>
 * Would it be possible to develop features for HTML to add interactivity to web pages, such as responding to user input, making changes to the content of the page, and loading new content from the server in a minimalist way?

[00:19:22.0984] <Antony Britto>
 * Would it be possible to develop features for HTML to add interactivity to web pages, such as responding to user input, making changes to the content of the page, and loading new content from the server in a minimalist way? Most of these are possible with HTML except loading new content from the server.
An example is a calculator made with HTML and CSS without any scripting.
https://codepen.io/Lovkiy/pen/KxxmNj

Would it be possible to make a feature in HTML to loading new content from the server?

[00:20:49.0426] <Andreu Botella>
that calculator does use javascript, it's in the `onclick` attributes

[00:22:50.0520] <Antony Britto>
> <@abotella:igalia.com> that calculator does use javascript, it's in the `onclick` attributes

Could you please elaborate on it? I could not see any JS in the codepen JS box.

[00:23:51.0865] <Antony Britto>
> <@abotella:igalia.com> that calculator does use javascript, it's in the `onclick` attributes

 * Could you please elaborate on it? I could not see any JS in the codepen JS box. Anyway just curious.

My real query is Would it be possible to make a feature in HTML to loading new content from the server?

[00:27:57.0793] <Andreu Botella>
the contents of the `onclick` attribute of `<input>` is evaluated as JS when you click on it

[00:28:49.0301] <Antony Britto>
> <@abotella:igalia.com> the contents of the `onclick` attribute of `<input>` is evaluated as JS when you click on it

Thanks I have no idea. :-)

[00:29:15.0062] <Antony Britto>
Would it be possible to make a feature in HTML to loading new content from the server?

[00:30:35.0969] <nicolo-ribaudo>
Yes it would be technically possible. The main blocker is that you have to convince browsers and the various other html stakeholders that it's a good idea, and explain in detail how it would work.

[00:31:31.0647] <Andreu Botella>
Technical feasibility isn't the end-all-be-all. And I'm not convinced of the security and privacy advantages you claim it would have

[00:31:46.0861] <Andreu Botella>
but yeah, feel free to file an issue at https://github.com/whatwg/html

[04:04:16.0766] <nicolo-ribaudo>
Domenic I'm not sure anymore that https://github.com/whatwg/html/pull/9520 is correct.
- Before that PR, the top-level worker module script was fetched with _outside settings_ and its settings object was set to _inside settings_. Then, all its dependencies where fetched with _inside settings_ and their settings object was _inside settings_.
- After that PR, all its dependencies are fetched with _outide settings_ and their settings object is _outside settings_.

where _outside settings_ and _inside settings_ are defined in https://html.spec.whatwg.org/#worker-processing-model 

Should the settings object of all the dependencies be _inside settings_ instead, while keeping the fetch client as _outside settings_? Is it observable in any way?

[04:05:42.0289] <nicolo-ribaudo>
The behaviour after that PR matches the old behaviour before the modules loading refactor, but the fact that only the top-level module script has _inside settings_ as its settings object seems weird to me

[05:35:20.0095] <Domenic>
> <@nicolo-ribaudo:matrix.org> Domenic I'm not sure anymore that https://github.com/whatwg/html/pull/9520 is correct.
> - Before that PR, the top-level worker module script was fetched with _outside settings_ and its settings object was set to _inside settings_. Then, all its dependencies where fetched with _inside settings_ and their settings object was _inside settings_.
> - After that PR, all its dependencies are fetched with _outide settings_ and their settings object is _outside settings_.
> 
> where _outside settings_ and _inside settings_ are defined in https://html.spec.whatwg.org/#worker-processing-model 
> 
> Should the settings object of all the dependencies be _inside settings_ instead, while keeping the fetch client as _outside settings_? Is it observable in any way?

Oh dang, oops. Yes, the fetch client should be outside settings, with the settings object being inside settings. That is pretty important. The observability is in the various callers of https://html.spec.whatwg.org/#classic-script . Sigh, sorry I missed that in review.

[06:49:44.0437] <nicolo-ribaudo>
> <@domenicdenicola:matrix.org> Oh dang, oops. Yes, the fetch client should be outside settings, with the settings object being inside settings. That is pretty important. The observability is in the various callers of https://html.spec.whatwg.org/#classic-script . Sigh, sorry I missed that in review.

I'll open an issue about it, but I will not work on a fix until after the params renaming PR is merged (given that every single line would conflict)

[10:29:00.0690] <Antony Britto>
Is it a good idea to think about making the form submission in HTML can be like AJAX requests?

[10:36:29.0178] <Antony Britto>
 * Is it a good idea to think about making the existing form submission method in HTML can be like AJAX requests?


2023-07-20
[08:36:44.0774] <sideshowbarker>
If someone familiar with image lazy loading could take a minute to look at https://github.com/mdn/content/pull/28077 and comment, that would be great. That change is adding this note:
> **Note:** Images that have `loading` set to `lazy` will never be loaded if their width or height is `0`, even if loading them would change that.

[08:39:16.0096] <Eric Portis (he/him)>
sideshowbarker: This isn't an answer, but IIRC it's based on IntersectionObserver, I wonder if that's spec'd to fire when elements have no area

[08:39:32.0674] <sideshowbarker>
aha

[08:45:41.0837] <sideshowbarker>
from a quick read through https://w3c.github.io/IntersectionObserver/#run-the-update-intersection-observations-steps, I can’t tell

[08:50:20.0798] <Eric Portis (he/him)>
sideshowbarker: Because the lazyload spec uses the default threshold of zero, I think it is supposed to fire: https://wpt.fyi/results/intersection-observer/same-document-zero-size-target.html

[08:51:31.0582] <Eric Portis (he/him)>
I'll comment and if I'm wrong maybe somebody else will chime in (:

[08:51:59.0571] <sideshowbarker>
Cheers and thanks 👍

[14:08:01.0249] <Ian Hickson>
does JS support 64 bit numbers yet?

[14:10:15.0388] <Ian Hickson>
i'm trying to parse a binary data format that uses quadwords as the main building block

[14:19:16.0095] <Richard Gibson>
Ian Hickson: are you looking for https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array and/or https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array ?

[14:21:45.0565] <Ian Hickson>
ideally i would like to be able to store a 64 bit int in a variable and do maths with it

[14:24:42.0529] <Richard Gibson>
yes, that is possible with BigInt

[14:58:13.0724] <Richard Gibson>
for example:
```
// Make an array-like view over a byte buffer containing the data for
// 3 big-endian uint64s with the first two set to 2**63 - 1.
const uint8View = new Uint8Array([
  127, ...Array(7).fill(255),
  127, ...Array(7).fill(255),
  ...Array(8),
]);
const dataView = new DataView(uint8View.buffer);
const uint64View = {
  get: i => dataView.getBigUint64(i * 8),
  set: (i, n) => dataView.setBigUint64(i * 8, n),
};

// Read the first two values and set the third to their sum.
const a = uint64View.get(0);
const b = uint64View.get(1);
assert(a === 2n ** 63n - 1n, "a");
assert(b === 2n ** 63n - 1n, "b");
const c = a + b;
uint64View.set(2, c);

// Verify the results from both perspectives.
assert(uint64View.get(2) == 2n ** 64n - 2n, "c");
assert.deepEqual(uint8View.slice(0, 8), [127, ...Array(7).fill(255)], "a bytes");
assert.deepEqual(uint8View.slice(8, 16), [127, ...Array(7).fill(255)], "b bytes");
assert.deepEqual(uint8View.slice(16, 24), [...Array(7).fill(255), 254], "c bytes");
```


2023-07-21
[02:51:30.0138] <jgraham>
Is the build for fetch broken on main? Locally I'm seeing:
```
jgraham@goldfinch:~/develop/fetch$ git fetch origin 
jgraham@goldfinch:~/develop/fetch$ git checkout main 
Switched to branch 'main'
Your branch is up to date with 'origin/main'.
jgraham@goldfinch:~/develop/fetch$ make
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  374k    0   146  100  374k     18  49062  0:00:07  0:00:07 --:--:--    40

Error running preprocessor, returned code: 2.
FATAL ERROR: Spurious / in &lt;a>.
 ✘  Did not generate, due to fatal errors
make: *** [Makefile:5: remote] Error 22

```

[02:53:01.0598] <jgraham>
`make local` works fine, so maybe there's a difference between the remote version of bikeshed and the local one?

[02:54:27.0996] <jgraham>
(also I really do prefer specs that don't depend on make for unclear reasons)

[02:58:16.0488] <annevk>
Why are the reasons unclear?

[02:59:07.0883] <annevk>
This might be the Bikeshed parser changes TabAtkins made. I'm not sure if he tested those on just the tests or also live copies of the current specifications. I haven't really done any specification development recently.

[05:01:18.0580] <annevk>
jgraham: I suspect it's failing on main: https://github.com/whatwg/fetch/pull/1655#issuecomment-1642314570

[09:15:58.0143] <jgraham>
Because specs have trivial dependency graphs, so they don't need any of the features of a complex build system, meanwhile the build system itself becomes an additional requirement. Plus make itself is only well understood by relatively few people.

[09:24:49.0373] <annevk>
I mean, we could replace it with something else, but what else is as cross-platform and readily available?

[10:48:16.0079] <TabAtkins>
I tested on all the specs, but I still don't track build messages in the testsuite, that'll be fixed this quarter. So Fetch builds an *identical output*, it just has a different set of messages. (Apologies for that.)

[10:48:21.0274] <TabAtkins>
anyway lemme see what's up

[10:54:15.0466] <TabAtkins>
Ah, it's actually catching a legimately broken tag.

[10:54:27.0539] <TabAtkins>
`<a for/>`, meant to be `<a for=/>`

[10:56:58.0306] <TabAtkins>
https://github.com/whatwg/fetch/pull/1689

[10:56:59.0937] <TabAtkins>
annevk: ^^^


2023-07-22
[19:49:21.0984] <Domenic>
> <@tabatkins:matrix.org> I tested on all the specs, but I still don't track build messages in the testsuite, that'll be fixed this quarter. So Fetch builds an *identical output*, it just has a different set of messages. (Apologies for that.)

I'm a bit confused by this, with a FATAL ERROR there is no output, so shouldn't the difference between the empty string and the actual fetch spec be detectable?

[20:03:43.0461] <TabAtkins>
No, I build the test suite with -f. Otherwise many, many specs would have no output.

[21:25:12.0714] <Domenic>
Could you build WHATWG specs like they are built by the WHATWG, instead?

[14:42:43.0861] <TabAtkins>
No, because that would mean if something became a fatal error I'd have zero output. What I will do, as I just said, is capture build messages in the test artifacts, so I can tell what else is happening.

[14:43:43.0007] <TabAtkins>
(For example, the testsuite does not capture or use your make script, so the sha macro y'all use in your boilerplate doesn't match. That's a fatal error! But it's also irrelevant for testing purposes, and I have plenty of macro tests elsewhere.)


2023-07-23
[20:26:18.0895] <Domenic>
> <@tabatkins:matrix.org> No, because that would mean if something became a fatal error I'd have zero output. What I will do, as I just said, is capture build messages in the test artifacts, so I can tell what else is happening.

Why is zero output for fatal errors a problem? Fatal errors in WHATWG specs prevent us from deploying them.

[20:26:42.0381] <Domenic>
> <@tabatkins:matrix.org> (For example, the testsuite does not capture or use your make script, so the sha macro y'all use in your boilerplate doesn't match. That's a fatal error! But it's also irrelevant for testing purposes, and I have plenty of macro tests elsewhere.)

Yes, you would need to update the test suite to supply the SHA macro, just like you'd need to update it to stop using -f, for WHATWG specs.

[06:11:02.0205] <annevk>
Can someone rubber-stamp https://github.com/whatwg/meta/pull/268?


2023-07-24
[02:43:42.0808] <jgraham>
> I mean, we could replace it with something else, but what else is as cross-platform and readily available?

Ideally typing `bikeshed spec` would result in a functional build. 

[02:47:05.0528] <annevk>
jgraham: that doesn't meet our requirements

[02:52:38.0480] <jgraham>
OK, but "WHATWG specs have a worse dev experience than W3C specs" seems like a problem worth addressing (and I'm sure the people who work on these specs all the time have internalised the workflow and don't notice this problem). 

[03:02:17.0929] <annevk>
I'd be happy for someone to address that, though I also don't think that statement really holds

[03:03:03.0322] <annevk>
I've tried contributing to ARIA and some other W3C documents and they're generally a mess with very custom solutions, lots of warnings, linking errors, etc.

[03:17:59.0193] <jgraham>
Well I'm sure there's some variety on the W3C side. But the best case scenario is that you can download any spec and type `bikeshed spec` to get a build and `bikeshed serve` to get a local webserver with auto-rebuild, and afaict the current WHATWG template means that neither of those things can work because you always need to look up extra command line arguments to fill in the `COMMIT-SHA` macro, so it might be that you could just make that optional and you'd already be most of the way there (and if it was up to me I'd then inline the deploy steps into the GitHub action, accept that anyone who does any non-trivial spec work is going to end up running bikeshed locally and forget about the `remote` target, and then delete the makefiles entirely to avoid having a complex tool just to more or less wrap three shell commands)

[03:19:02.0117] <jgraham>
 * Well I'm sure there's some variety on the W3C side. But the best case scenario is that you can download any spec and type `bikeshed spec` to get a build and `bikeshed serve` to get a local webserver with auto-rebuild, and afaict the current WHATWG template means that neither of those things can work because you always need to look up extra command line arguments to fill in the `COMMIT-SHA` macro.

So it might be that you could just make that macro optional and you'd already be most of the way there (and if it was up to me I'd then inline the deploy steps into the GitHub action, accept that anyone who does any non-trivial spec work is going to end up running bikeshed locally and forget about the `remote` target, and then delete the makefiles entirely to avoid having a complex tool just to more or less wrap three shell commands)

[09:14:26.0083] <TabAtkins>
> <@domenicdenicola:matrix.org> Why is zero output for fatal errors a problem? Fatal errors in WHATWG specs prevent us from deploying them.

Because I prefer Bikeshed being robust to failure as much as possible, so you can run with `-f` and still get something reasonable rather than forcing people to have a fully working build. (That is, the messages are intended to be lint-level as much as possible; it's of course reasonable to require zero linting errors to publish/update.) That implies I want visibility into the build result regardless. It is just *also* the case, again, that I should be capturing the messages so I know when I'm throwing more or different errors than I previously did. Like I said, this is going to be fixed.

[09:17:15.0514] <TabAtkins>
> <@jgraham_:matrix.org> Well I'm sure there's some variety on the W3C side. But the best case scenario is that you can download any spec and type `bikeshed spec` to get a build and `bikeshed serve` to get a local webserver with auto-rebuild, and afaict the current WHATWG template means that neither of those things can work because you always need to look up extra command line arguments to fill in the `COMMIT-SHA` macro.
> 
> So it might be that you could just make that macro optional and you'd already be most of the way there (and if it was up to me I'd then inline the deploy steps into the GitHub action, accept that anyone who does any non-trivial spec work is going to end up running bikeshed locally and forget about the `remote` target, and then delete the makefiles entirely to avoid having a complex tool just to more or less wrap three shell commands)

Hm, let me raise a whatwg/meta issue, I agree that this can probably be simplified without losing any requirements, but want to make sure I'm not missing anything.

[09:39:15.0539] <TabAtkins>
Okay filed https://github.com/whatwg/meta/issues/286 and https://github.com/whatwg/meta/issues/287

[09:39:38.0124] <TabAtkins>
depending on how those shake out we can talk about dropping `make remote` and removing the makefile entirely

[09:40:34.0566] <bkardell>
annevk: I like what you did with `:dir`


2023-07-25
[17:32:02.0831] <Domenic>
> <@tabatkins:matrix.org> Because I prefer Bikeshed being robust to failure as much as possible, so you can run with `-f` and still get something reasonable rather than forcing people to have a fully working build. (That is, the messages are intended to be lint-level as much as possible; it's of course reasonable to require zero linting errors to publish/update.) That implies I want visibility into the build result regardless. It is just *also* the case, again, that I should be capturing the messages so I know when I'm throwing more or different errors than I previously did. Like I said, this is going to be fixed.

But again, this is about WHATWG specs. THey *don't* prefer to be robust to failure; they prefer to fail-fast (like your new HTML parser). We're asking that you reflect that in your test suite, so your test suite gets the same failures as the actual live environment.

[17:34:05.0317] <TabAtkins>
Capturing the build messages will accomplish the same thing (any messages at all are bad for whatwg specs) without making me lose output entirely when there's a change in build messages. 

[17:34:46.0182] <TabAtkins>
The thing you're actually asking for (ensure that new messages don't break your build) is on my task list this quarter.

[17:49:44.0050] <Domenic>
I just think there's a lot to be said for having tests match prod

[07:09:43.0566] <KBar>
Hello. I hope this is my last cross-post. I was pointed to this room to ask my question.

[07:10:00.0087] <KBar>
i should probably raise this to whatwg, but i was wondering why are user agents required to load `about:blank` in quirks mode? is there a specific reason? if not, shouldn't step 2 of [loading an HTML document](https://html.spec.whatwg.org/multipage/document-lifecycle.html#read-html) include something like

> 1. Let _doctype_ be the result of creating a document type with the qualified name of "html"
> …
> 5 Append _doctype_ to _document_.

or similar steps?

[07:16:42.0706] <Ms2ger>
The answer to "why" is "because that's what browsers have done historically"

[07:17:30.0180] <Ms2ger>
The answer to "and why did they do that" is that that's the result of parsing an empty byte stream (i.e., without a doctype) as html

[07:44:50.0292] <Sam Sneddon [:gsnedders]>
And the answer to "why don't they change that" is it seems relatively risky to change for a relatively small gain.

[08:02:48.0767] <KBar>
> <@ms2ger:igalia.com> The answer to "and why did they do that" is that that's the result of parsing an empty byte stream (i.e., without a doctype) as html

Isn't it still populated with `html/head/body`? There doesn't seem to be any parsing done within this branch. That answer doesn't sound plausible to me. Could it have been just an oversight?

[08:08:18.0921] <Ms2ger>
Try feeding an empty html document to your favourite browser and you'll see that it does indeed get html, head and body elements

[11:39:25.0298] <jgraham>
I think if you ask hsivonen or someone else who's worked on this they might s/relatively risky/very risky/ or maybe just say "totally unworkable given webcompat constraints"

[11:43:40.0533] <emilio>
For what is worth, I think inheriting about:blank quirk-ness for frames and popups could be nice. I've seen site bugs related to that. But yeah rather risky, because `document.write()`-ing inside an `about:blank` document is rather common

[11:44:26.0508] <emilio>
I think I'd take or write a patch to firefox to do that behind a pref to investigate compat, if others think it's worth the effort

[11:44:54.0757] <emilio>
But should probably be a cross-vendor effort, and maybe a hill not worth spending resources on

[11:45:33.0972] <emilio>
But yeah hsivonen (away from Matrix until 2023-08-07) would probably have more context


2023-07-26
[17:04:50.0617] <Ehsan Azari>
Is there any movement on Contact Picker API?
And, is there any shim/polyfill for Contact Picker API that works in all browsers? Or any alternative approach?

