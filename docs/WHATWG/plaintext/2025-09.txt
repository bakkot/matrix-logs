2025-09-01
[05:37:50.0959] <smaug>
I assume there isn't any way to get single-page diffs for PRs?

[05:40:19.0498] <Ms2ger>
If you add `.diff` at the end of the URL like https://github.com/whatwg/html/pull/11543.diff you get the plain text diff, if that helps

[05:40:20.0638] <smaug>
Reviewing especially larger PRs is a bit tricky when they are split to so many diffs

[05:40:41.0665] <smaug>
I was thinking the spec preview diffs

[05:40:55.0629] <Ms2ger>
Ah, that I don't know

[05:45:06.0019] <Luke Warlow>
Especially because cross linking seems mildly broken on the preview URLs

[05:51:31.0707] <smaug>
(looking at ReferenceTarget atm, 16 diffs)


2025-09-02
[17:51:37.0631] <Domenic>
I always just build locally. (But that doesn't give a HTML diff, just, the new HTML.)

[17:52:36.0931] <Domenic>
If someone was able to update PR preview to use https://github.com/whatwg/build.whatwg.org?tab=readme-ov-file#html-build , we could get singlepage builds and diffs (and also fix other things missed by the PR preview, like syntax highlighting or preprocessing). But I'm unsure how to maintain PR preview.

[05:03:46.0337] <zcorpan>
Is it intentional that https://html.spec.whatwg.org/#clone-a-policy-container doesn't clone the integrity policy and report only integrity policy?

[06:15:22.0086] <Noam Rosenthal>
Yoav Weiss: ^^^

[06:15:27.0471] <Schalk Neethling>
Hey all! I am curios about the intended behavior of disabled on link elements with rel=stylesheet. 

From reading here: https://html.spec.whatwg.org/#attr-link-disabled it would seem that this allows one to queue up some stylesheets that can then later be fetched and applied (perhaps using something like intersection observer to load some CSS only when a specific component is about to enter the viewport). However, it seems that all but Safari will still download the CSS on page load. 

None of the browsers which fetches the CSS will apply it though.

The only browser I have seen that seems to behave as I would expect is Safari. In Safari the CSS file does not end up in the network panel on page load i.e. not fetched. When I dynamically set disabled to false, it then fetches and applies the CSS as per (my understanding) of the specification.

Here is a super minimal example: https://fjw3dm.csb.app/

[06:17:17.0613] <Yoav Weiss>
@zcorpan - I don't remember it being intentional. Let me dig up the relevant PR

[06:19:42.0866] <Yoav Weiss>
Seems like it never came up in https://github.com/whatwg/html/pull/11334 and I missed it..

[06:31:33.0425] <Noam Rosenthal>
From looking at the spec seems like safari is in the right here. Relevant chromium bug: https://issues.chromium.org/issues/40286062

[06:33:09.0072] <Schalk Neethling>
Ah. Awesome. Thank you, Noam. I wonder whether there is a bug on the Gecko side as well for this. ü§î My Bugzilla foo is terrible, but then again they are on GitHub now, right?

[06:35:39.0195] <Luke Warlow>
Their bug tracker is still in bugzilla

[06:54:13.0851] <Dominic Farolino>
Is it possible to run script in response to an AbortSignal aborting, but before its `abort` event fires? Basically I'm asking if the web platform has access to internal "abort algorithm" timing (before Observables, that is).

[06:54:16.0806] <Dominic Farolino>
* Is it possible to run script in response to an AbortSignal aborting, but before its `abort` event fires? Basically I'm asking if the web platform has access to internal "abort algorithm" timing (before Observables, that is)?

[06:58:37.0455] <Noam Rosenthal>
I guess other specs that add an algorithm to the `AbortSignal`?

[07:00:32.0027] <Noam Rosenthal>
(seems like the observable spec does this multiple times)
but by "web platform" do you mean a general-purpose API that exposes this?

[07:17:41.0029] <Dominic Farolino>
No I mean indirectly. I looked at all references of "add an algorithm" and none of them *appear* to invoke user-provided script, so I don't think there is any way to register script that runs in response to an AbortSignal being aborted, at "abort algorithm" timing (before `abort` event)

[07:17:50.0810] <Dominic Farolino>
but I'm hoping somebody knows of one subtle instance that I don't know about!

[07:22:26.0172] <Noam Rosenthal>
oh so you mean if there is an existing caller for "add an algorithm" that invokes a script.

[07:23:45.0752] <sissiboi25>
https://matrix.to/#/!JfcsmfWnEQHLwlMXiL:matrix.org?via=matrix.org

[07:30:23.0228] <Noam Rosenthal>
Dominic Farolino: I am pretty sure streams add algorithms that reject promises as "abort algorithms". Promise rejections can invoke a script which would happen before the event is fired. Andreu Botella would be more of an expert though

[07:40:44.0312] <Andreu Botella>
Rejecting a promise can cause script execution in a microtask, but if that happens when no script is running, then I think the microtask queue will only be drained after the next subsequent script execution

[07:41:29.0308] <Andreu Botella>
So if none of the spec callers of "add an algorithm" invokes a script, then promise resolutions or rejections wouldn't cause a script execution before the event is fired

[07:42:35.0160] <Andreu Botella>
* Rejecting a promise can cause script execution in a microtask, but if that happens when no script is running, then I think the microtask queue will only be drained after the next subsequent script execution (or when the current event loop task finishes)

[07:50:53.0510] <Noam Rosenthal>
right, I had it in my head that "reject" calls "prepare to run script" but it doesn't, that would only happen in the microtask

[08:00:02.0432] <zcorpan>
Yoav Weiss: OK, I can file an issue

[09:18:02.0665] <emilio>
Noam Rosenthal: Andreu Botella: Can't reject / resolve with an object actually call the `.then` getter synchronously?

[09:18:21.0430] <emilio>
(Not sure if that applies to the specific case you were discussing tho)

[09:27:58.0179] <Noam Rosenthal>
I don't think so? It queues a microtask to do that here: https://html.spec.whatwg.org/multipage/webappapis.html#hostenqueuepromisejob

[09:29:28.0380] <Noam Rosenthal>
... though future callers of "add an abort algorithm" can fire an event or invoke a direct user callback... I don' t think this is prohibited

[09:32:43.0276] <Schalk Neethling>
Here is the Firefox one https://bugzilla.mozilla.org/show_bug.cgi?id=1376729

[09:46:08.0765] <Noam Rosenthal>
Dominic Farolino: I think you can get `readystatechange` events fired from XMLHttpRequest before the abort event


2025-09-03
[04:59:59.0720] <Simon‚òÄÔ∏è>
I am staring at this part of the permission policy spec: https://www.w3.org/TR/permissions-policy-1/#declared-origin - it seems to imply that an iframe uses its src attribute to determine its "declared origin" and I don't understand how this makes sense, given that an iframe can be navigated and src won't change.

[05:00:16.0469] <Simon‚òÄÔ∏è>
> The declared origin concept is intended to represent the origin of the document which the embedding page intends to load into a frame. This means, for instance, that if the browser does not support the sandbox or srcdoc attributes, it should not take those attributes into account when computing the declared origin.

[05:01:00.0632] <Simon‚òÄÔ∏è>
If a page denies a frame access to e.g. geolocation, the frame shouldn't be able to get around it by navigating, right?

[07:23:21.0932] <zcorpan>
Simon‚òÄÔ∏è: https://w3c.github.io/webappsec-permissions-policy/#declared-origin is the editor's draft

But yeah, it uses the origin of the URL in `src` if `src` is present. Even if the  frame has been navigated elsewhere.

[07:27:13.0606] <zcorpan>
Simon‚òÄÔ∏è: https://w3c.github.io/webappsec-permissions-policy/#algo-process-policy-attributes is the relevant caller

[07:42:59.0345] <smaug>
hmm, window.location = "foo"; consumes transient activation in Chrome. I wonder why 


2025-09-04
[17:54:05.0432] <Domenic>
This is absolutely nuts https://github.com/whatwg/html/issues/7939#issuecomment-3244466196

[00:11:01.0412] <foolip>
WHATNOT is in 50 minutes, add your agenda to https://docs.google.com/document/d/1D90QugzZZM6ga8k0ChMA7llmGFHcH9quDj4oCrgqtkE/edit?usp=sharing


2025-09-05
[05:05:58.0963] <zcorpan>
Can we switch to no line wrapping? re https://github.com/whatwg/html/issues/1059


2025-09-08
[02:12:55.0967] <Schalk Neethling>
Question for you all. Has it been considered to add some or all of the attributes related to loading behavior to the link element when rel=stylesheet? This kinda ties into my question concerning last week concerning the disabled attribute. I made a video and this started some discussions on LinkedIn and this idea was floated. For example:

`<link rel=stylesheets href="./css/lowprio.css" media="screen" loading=lazy>`

or 

`<link rel=stylesheets href="./css/lowprio.css" media="screen" defer>`

or

`<link rel=stylesheets href="./css/lowprio.css" media="screen" fetchpriority="low">`

Of course not _all_ of these, but the one or one's that would make most sense for CSS.

[02:19:06.0930] <emilio>
Defer you can get with something like `media="not all" onload="this.media = 'screen'"` (but not great that it needs js).

It's not clear what loading=lazy would do?

[02:20:57.0353] <Schalk Neethling>
Yeah, the `media` "hacks" was mentioned to kinda force a low priority load. loading-lazy was a bad example and one that would not make sense with CSS - I was more thinking something like fetchpriority would be more interesting.

[02:21:31.0937] <annevk>
zcorpan: I'm not a big fan of the kind of diffs no wrapping at all results in. While we have HTML diffs, the source diffs are important too.

[02:21:59.0648] <Schalk Neethling>
so fetchpriority and defer. The thing with disabled (other than not consistent support across browsers) is that most people would like to be able to have the CSS load, but without blocking and low priority.

[02:23:20.0875] <Domenic>
I find the no-wrapping diffs just as good personally. (I use no-wrapping on non-WHATWG specs.) In both WHATWG and non-WHATWG specs the diff basically ends up being "this paragraph or step changed".

[02:24:13.0950] <Domenic>
Rarely, in WHATWG specs, the diff can be "this one line in the paragraph or step changed", if the change is adding around the same number of characters as are removed. But usually it's the whole step or paragraph that need rewrapping.

[02:24:14.0661] <Schalk Neethling>
There is also currently https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/blocking for script

[02:24:31.0113] <Domenic>
And diff viewers are pretty good at highlighting word diffs within paragraph diffs anyway.

[02:24:40.0256] <annevk>
Yeah, it's true that having to re-wrap often makes it hard anyway. And when GitHub's within-a-line-changes feature works, it's all good. But that isn't always.

[02:25:03.0476] <Schalk Neethling>
That is probably less interesting.

[02:25:39.0940] <Schalk Neethling>
Perhaps the inverse for CSS :) Now I am just thinking out loud.

[02:26:45.0691] <Schalk Neethling>
Thanks, Emilio

[02:30:37.0107] <emilio>
Fetchpriority does exist and does affect the network fetch priority of stylesheets afaict

[02:34:40.0712] <emilio>
What about disabled is inconsistent across browsers? We had to add it for compat, but current behavior is deliberate, see https://github.com/whatwg/html/issues/3840

[02:48:34.0416] <Schalk Neethling>
emilio: see here https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$N8dOVAIGxATxE2SwGrHTW4jQk2bVEpAp2yfh0LwpUWE

[02:49:29.0247] <Schalk Neethling>
> Fetchpriority does exist and does affect the network fetch priority of stylesheets afaict

Nice!

[02:51:25.0462] <Schalk Neethling>
Also, this reply from Noam Rosenthal referring to the Chromium issue - https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$MKLUkD7OnrKnDuOfT9J7UgRPCiVRcxT-TGHn5u2W2p0

[02:51:43.0668] <Schalk Neethling>
There is also a thread from that one that includes a link to the Bugzilla ticket for Firefox

[02:55:49.0010] <Schalk Neethling>
tl;dr

Firefox

- makes a fetch request on load
- does not apply the CSS
- when the disabled flag is flipped
- applies the stylesheet and loads any assets referenced in the CSS

Chromium

- makes a fetch request on load
- does not apply the CSS
- when the disabled flag is flipped
- seems to make another fetch request for the asset but most likely gets this from cache
- applies the stylesheet and loads any assets referenced in the CSS

Safari

- no fetch request on load
- when the disabled flag is flipped
- loads the CSS and any assets referenced in the CSS
- applies the stylesheet

[02:56:17.0043] <Schalk Neethling>
* tl;dr

Firefox

- makes a fetch request on load
- does not apply the CSS
- when the disabled flag is flipped
- applies the stylesheet and loads any assets referenced in the CSS

Chromium

- makes a fetch request on load
- does not apply the CSS
- when the disabled flag is flipped
- seems to make another fetch request for the CSS but most likely gets this from cache
- applies the stylesheet and loads any assets referenced in the CSS

Safari

- no fetch request on load
- when the disabled flag is flipped
- loads the CSS and any assets referenced in the CSS
- applies the stylesheet

[03:03:42.0297] <emilio>
I see, so it seems like we speculatively load it regardless of the disabled attribute but other than that the observable behavior from the page should be the same in all browsers?

[03:04:16.0166] <Schalk Neethling>
Indeed

[03:04:32.0975] <Schalk Neethling>
Once you flip the bit, they all behave the same.

[03:05:14.0062] <Schalk Neethling>
Apply and load any additional referenced assets.

[03:10:05.0461] <emilio>
Right, so I agree that that seems like a bug in chromium and Firefox (no need to speculatively load a disabled sheet)

[03:13:23.0935] <emilio>
https://bugzilla.mozilla.org/show_bug.cgi?id=1376729 is definitely not the right ticket tho, we do support the attribute

[03:13:27.0977] <emilio>
Will file 

[03:20:50.0977] <Schalk Neethling>
Agreed.

[03:23:07.0193] <emilio>
https://bugzilla.mozilla.org/show_bug.cgi?id=1987372

[03:25:46.0699] <Schalk Neethling>
Aha! I see fetchPriority is documented individually for each type of element it applies to. Here is the one for the `link` element - https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/fetchPriority üôå

[03:48:21.0381] <zcorpan>
annevk: 100-col breaks I think is more annoying both for diffs and maintenance. Semantic breaks still has mental overhead to think about and fiddle with linebreaks. On balance I think I like no-breaks best

[04:26:28.0771] <annevk>
zcorpan: I guess I'm okay with slowly switching towards that. If we want to reformat a complete file I'd like to see the impact on blame first in some kind of demo repo.

[04:40:00.0432] <Domenic>
Hmm I don't like the slow switch myself, would prefer all at once. But my opinion should be carrying less and less weight these days, so ü§∑

[04:42:51.0975] <annevk>
There might be some way to do all at once and have it minimally impact blame. I think Gecko did something like that when it added auto formatting. Just need to actively consider that as making blame bad is a problem.

[05:38:14.0325] <jmdyck>
Maybe `git blame --ignore-rev <rev>`

[05:42:01.0652] <jmdyck>
(and related machinery)

[05:50:02.0710] <jmdyck>
Apparently github's 'Blame' button respects a repo's `.git-blame-ignore-revs` file: https://docs.github.com/en/repositories/working-with-files/using-files/viewing-and-understanding-files#ignore-commits-in-the-blame-view

[07:51:37.0988] <AtkinsSJ>
I don't think it's already been mentioned, but wrapping does make it harder to grep for a specific phrase.

[08:27:59.0380] <annevk>
jmdyck: yeah, I guess what I'm wondering about is how ignore-revs works, but I can look that up later

[11:03:08.0908] <zcorpan>
I created https://github.com/zcorpan/reformahtml which now seems to work reasonably for whatwg/html. Can use `data-noreformat` to intentionally use custom indentation.

[11:49:52.0634] <Schalk Neethling>
I also noticed that `fetchpriority` is a hint and not an instruction so it is up to the browser to determine whether to actually lower the priority.

I also see that we do have `blocking` on link rel=stylesheet but, this is to intentionally instruct the browser to render block which, according the the docs on MDN, is mostly useful if the stylesheet was injected with JavaScript as stylesheet linked in the `head` of the document will already be render blocking by default.

So, perhaps what is "missing" for rel=stylesheet is a defer that is an instruction and not a hint.

We then have disabled, which is a HARD do-not-load until I say so :)

defer, which is an explicit instruction to the browser to load the stylesheet with a lower priority (lowest??)

fetchpriority - which is a hint that the browser can choose to ignore if it determines there to be little or no benefit to fetching the external resource with a lower priority that the other stylesheets.

Thoughts?

[11:50:20.0692] <Schalk Neethling>
* I also noticed that `fetchpriority` is a hint and not an instruction so it is up to the browser to determine whether to actually lower the priority.

I also see that we do have `blocking` on link rel=stylesheet but, this is to intentionally instruct the browser to render block which, according the the docs on MDN, is mostly useful if the stylesheet was injected with JavaScript as stylesheets linked in the `head` of the document will already be render blocking by default.

So, perhaps what is "missing" for rel=stylesheet is a defer that is an instruction and not a hint.

We then have disabled, which is a HARD do-not-load until I say so :)

defer, which is an explicit instruction to the browser to load the stylesheet with a lower priority (lowest??)

fetchpriority - which is a hint that the browser can choose to ignore if it determines there to be little or no benefit to fetching the external resource with a lower priority that the other stylesheets.

Thoughts?

[13:20:07.0696] <zcorpan>
Draft PR https://github.com/whatwg/html/pull/11640

[13:30:07.0998] <Abed12345>
 ŸÖÿßŸÇÿØÿ±ÿ™ ÿ£ÿ≥ŸàŸä ÿ¥Ÿäÿ° 


2025-09-09
[17:50:47.0471] <Domenic>
Wow!!

[23:48:49.0430] <annevk>
zcorpan: did you check what happens with `git blame --ignore-rev <that-change>`? I wonder if that works well if we should also add some historical Hixie reformatting revisions to such a file and then hopefully https://searchfox.org respects that and makes blame even more useful.

[23:52:38.0149] <zcorpan>
annevk: no, can try today

[02:59:55.0379] <smaug>
asuth ^

[04:06:30.0371] <zcorpan>
annevk: git blame seems to work well. Just some empty lines now point to the reformatting commit, but that seems ok

[05:13:52.0619] <annevk>
Does anyone know if session history in the specification deals with client-side redirects (setting `location`)? cc Jake Archibald smaug It seems the heuristics around this differ between Safari and Chrome/Firefox.

[05:20:09.0733] <smaug>
farre ^

[05:20:21.0054] <smaug>
annevk: what you mean with redirect in this case?

[05:20:32.0654] <smaug>
Setting location is just another navigation, no?

[05:20:59.0610] <smaug>
Or perhaps you're thinking the special case which happens before end-of-load-event-firing?

[05:24:06.0387] <annevk>
smaug: I'm not entirely sure as I'm not familiar with the specification, but that could be it. Though we also saw it getting skipped in one case where it got invoked after the load event fired.

[05:24:36.0120] <smaug>
Certain annevk reviewed this https://github.com/whatwg/html/pull/6714 üòõ 


2025-09-10
[18:31:47.0958] <Domenic>
Note that we have several large changes in flight: my speculation rules (large addition), jmdyck's <div algorithm> work https://github.com/whatwg/html/pull/11392, and zcorpan's reformatting https://github.com/whatwg/html/pull/11640 .

I landed speculation rules, so the other two will need a bit of rebasing.

It seems like at least zcorpan's work is easy to rebase. Maybe we should target landing jmdyck's algorithm work first, since it seems more painful to rebase?

[21:43:10.0748] <zcorpan>
Yes. I was thinking of running reformahtml in ci so that PRs fail if they use formatting that the script would change

[22:59:45.0483] <annevk>
zcorpan: can we make it work for Bikeshed too you think? Would be nice if we can apply it everywhere

[23:17:25.0853] <zcorpan>
I'll have a word with chatgpt üôÇ

[02:13:33.0258] <Noam Rosenthal>
zcorpan, annevk 
We would like to move HTML out-of-order streaming to stage 1 (https://github.com/whatwg/html/issues/11542)
It seems to pass the bar we've defined for stage 1 (see https://github.com/whatwg/html/issues/11542#issuecomment-3269569121)
Obviously there are still details to flesh out before it makes it in.
Any thoughts/objections?
cc foolip 

[02:29:37.0111] <zcorpan>
Noam Rosenthal: OK with me

[02:43:49.0422] <annevk>
Noam Rosenthal: stage 1 seems okay. I do think the API shape will need some changes. We need to come up with a coherent story for all HTML manipulation methods going forward, including replacement for `insertAdjacentHTML()` and such.

[02:44:14.0118] <foolip>
Yeah, the API shape if definitely not stable.

[03:05:42.0920] <zcorpan>
specfmt --full-spec  0.18s user 0.04s system 86% cpu 0.256 total
python3 reformahtml.py ../../whatwg/html/source  1.37s user 0.05s system 97% cpu 1.467 total

[03:09:19.0491] <zcorpan>
Is Python vs Rust perf difference important here? Contributors won't need to run it locally going forward (just once for existing PRs)

[03:10:58.0931] <annevk>
Adam Rice would you be interested in becoming the Streams Workstream editor? Mattias Buelens would you be okay with that as well? (Both of you will continue to be editor of the Streams Standard. This is primarily to establish who gets to handle disputes.)

[03:14:32.0009] <Domenic>
I think it's fine as long as these are separate tools used at will/on CI. (Like `specfmt` is only used at-will today.)

Eventually an ideal architecture would probably be to incorporate it into whatwg/html-build so that `./build.sh` errors on formatting issues, so people can detect them locally without running CI. At that point faster would be better.

I do suspect ChatGPT could do a good job porting the Python to Rust. If you check out the recent PRs to whatwg/html-build from today, it's been helpful.

[03:19:43.0516] <zcorpan>
Domenic: integrating with the build step (and maybe bikeshed?) seems like a good idea. I'm wondering if we should make specfmt support a no-breaking mode and improve the output for --full-spec (e.g. right now it reformats tags in head), or continue with reformahtml to support bikeshed syntax, add tests, and then convert to rust

[03:20:54.0773] <Domenic>
What Bikeshed syntax were you thinking about?

Our strategy so far has been to add various Bikeshed functionality to Wattsi + html-build.

[03:22:04.0201] <zcorpan>
I was thinking of supporting markdown. But I guess we don't use markdown for whatwg specs, and csswg prefer semantic breaks, so maybe it's not needed

[03:24:43.0708] <zcorpan>
DOM uses `<p>`-less markdown paragraphs

[03:28:09.0848] <Domenic>
Streams is pretty much as Markdown as it can be

[03:28:40.0694] <Domenic>
But yeah I'd suggest just contributing directly to the Rust parts of html-build. With AI, Rust is not so bad.

[03:32:26.0497] <zcorpan>
annevk wanted to be able to reformat the bikeshed specs also though

[03:39:37.0045] <Domenic>
Oh, I see, I totally misunderstood. That explains why you were thinking of updating specfmt, since it already supports those...

[04:19:37.0678] <zcorpan>
Yeah

[04:20:17.0405] <zcorpan>
It seems easy enough to support markdown paragraphs and lists though

[04:39:06.0132] <annevk>
DOM using `<p>`-less paragraphs seems like a mistake, but there's definitely a few WHATWG specifications leaning more heavily into Markdown these days. If we could agree on some kind of canonical format I'd happily switch to that though.

[06:18:20.0225] <Dominic Farolino>
What do you mean no-breaking mode?

[06:19:09.0266] <Dominic Farolino>
Fwiw I use specfmt all the time on bikeshed specs. It works for markdown lists and other markdown features/syntax. The Observable spec is very markdown-ey and I've used specfmt constantly throughout development

[06:33:28.0818] <zcorpan>
Dominic Farolino: https://github.com/whatwg/html/pull/11640

[07:10:14.0729] <annevk>
jmdyck: I guess if Simon's PR doesn't address the whitespace issues you found then a separate PR would be helpful, yes.

[11:16:20.0021] <Dominic Farolino>
OK sorry for my ignorance, are we reformatting HTML to have no line breaks then? Apologies if I missed a bunch of upstream conversation about this.

[11:30:36.0542] <Luke Warlow>
> <@annevk:matrix.org> DOM using `<p>`-less paragraphs seems like a mistake, but there's definitely a few WHATWG specifications leaning more heavily into Markdown these days. If we could agree on some kind of canonical format I'd happily switch to that though.

Fwiw if we could align the formats used by the various specs as much as possible that would be great! It's something I run into when switching between Dom and html how the rules are different.

My two cents are that we should do away with the optional closing tags everywhere for example.

[11:31:09.0409] <Luke Warlow>
* Fwiw if we could align the formats used by the various (whatwg) specs as much as possible that would be great! It's something I run into when switching between Dom and html how the rules are different.
My two cents are that we should do away with the optional closing tags everywhere for example.


[12:22:21.0413] <jmdyck>
11640 is proposing no line-breaks within `<p>` and similar. Conversation started with zcorpan's question (in this room) on Friday, I believe.

[12:52:00.0851] <zcorpan>
Dominic Farolino: no worries! Yes, that's my proposal. Maybe for all whatwg specs, if editors agree. I think it will make things simpler for contributors.

[12:53:16.0686] <zcorpan>
Dominic Farolino: I started vibe-coding reformahtml this week as an experiment, but not married to it.


2025-09-11
[19:07:05.0767] <Dominic Farolino>
zcorpan: I see. Hmm, I think I dislike the idea of no line breaks. IMO it makes the source way harder to read and edit :/ I haven't looked at the output of your PR yet since I'd have to check it out locally first, but that would be my initial opinion.

[19:22:21.0437] <Domenic>
You just gotta turn on word-wrapping in your editor and it's nice, IMO...

[23:44:41.0371] <Yogya Chugh >
hi

[23:45:01.0095] <Yogya Chugh >
while reading the standard, I stumbled upon slots and couldn't understand one thing

[23:45:44.0505] <Yogya Chugh >
what is oldValue here: https://dom.spec.whatwg.org/#slot-name ( just below this link u will find attribute change steps )

[23:47:18.0217] <Yogya Chugh >
* while reading the DOM standard, I stumbled upon slots and couldn't understand one thing

[23:52:26.0141] <Domenic>
Does following the link to https://dom.spec.whatwg.org/#concept-element-attributes-change-ext clarify it for you?

[23:53:20.0012] <Domenic>
If not, you might need to follow the call sites backward, by clicking on the bolded definition of "attribute change steps" and looking at where it's called from. (And then where its callers are called from...)

[00:42:31.0927] <zcorpan>
Dominic Farolino: Most editors have a soft wrapping feature, but don't have an easy way to search for text across lines. But I understand that folks have different preferences. I think a benefit of no wrapping is that contributors don't need to run a formatting script as part of development.

[01:37:46.0102] <annevk>
keithamus zcorpan: is there a reason https://github.com/whatwg/html/pull/11086 hasn't been merged yet? Not in a rush, just curious why it's still sitting there. Is it the `dialog` dispute?

[01:38:22.0419] <keithamus>
I can't merge. I thought the dialog dispute was settled.

[01:44:58.0563] <zcorpan>
annevk: I think I wanted the an+b issue to settle, but I think it has now so we can merge. Maybe we can switch to :heading(6, 7, 8, 9) though, keithamus ?

[01:45:27.0519] <keithamus>
Happy to make that change üëçÔ∏è

[01:47:23.0848] <annevk>
Where is the WHATNOT 2005-08-22 issue? It seems mfreed Domenic smaug et al attended and there are notes in the notes document, but not elsewhere?

[01:48:37.0530] <annevk>
* Where is the WHATNOT 2025-08-22 issue? It seems mfreed Domenic smaug et al attended and there are notes in the notes document, but not elsewhere?

[01:48:47.0115] <annevk>
WHATNOT 2025-08-28 also appears to be missing.

[01:49:47.0833] <keithamus>
IIRC there was a new document started around that time... or maybe I am misremembering

[01:50:14.0936] <annevk>
I have access to all the documents, but I'm talking about public representation in whatwg/html.

[01:50:35.0113] <keithamus>
Oh apologies, the issue itself?

[01:50:41.0836] <annevk>
Yes.

[01:51:12.0059] <Noam Rosenthal>
I chaired those and I must have missed that step. Is that a matter of copy/pasting them manually to the issue?

[01:51:13.0823] <keithamus>
Right. Looks like https://github.com/whatwg/html/issues/11648 was the last updated one.

[01:51:46.0017] <keithamus>
Noam Rosenthal: yes I think you'll want to use that issue as a template, close that one and open new ones (to, I guess, immediately close them)

[01:52:04.0772] <annevk>
Yes, copy-and-paste with maybe some slight formatting changes to keep it legible. 

[01:52:17.0248] <Noam Rosenthal>
OK let me sort that

[01:52:45.0780] <Noam Rosenthal>
I think we have issues open for all of them just without the minutes

[01:53:49.0698] <Noam Rosenthal>
oh we don't. drat. well learning for next time...

[02:04:18.0980] <Noam Rosenthal>
https://github.com/whatwg/html/issues/11651

[02:39:41.0661] <Yogya Chugh >
ok ! Thank you

[10:00:56.0067] <smaug>
Alice (üá≥üá±): how well is reference target tested when it comes to dom mutations? Or perhaps you and dan are working on some more tests?

[10:02:48.0806] <Alice (üá≥üá±)>
That's a bit of a sticky question. It's well tested _in Chrome_: there's a lot that WPTs can't test around accessibility mappings and events (which is what Jamie has been asking about on the FF code reviews)

[10:03:09.0417] <Alice (üá≥üá±)>
there are some WPT test that test that changes are picked up, one moment

[10:04:01.0144] <Alice (üá≥üá±)>
* That's a bit of a sticky question. It's well tested _in Blink_: there's a lot that WPTs can't test around accessibility mappings and events (which is what Jamie has been asking about on the FF code reviews)

[10:04:27.0515] <Alice (üá≥üá±)>
https://github.com/web-platform-tests/wpt/blob/master/shadow-dom/reference-target/tentative/dom-mutation.html

[10:05:28.0182] <Alice (üá≥üá±)>
so yeah, each implementation would need to add their own internal tests for those things

[10:06:53.0815] <Alice (üá≥üá±)>
https://source.chromium.org/chromium/chromium/src/+/main:content/test/data/accessibility/event/aria-treeitem-focus-reference-target.html?q=referenceTarget%20file:test.*accessibility&ss=chromium here's an example Chromium test for the accessibility events

[10:09:03.0939] <smaug>
setup_nested_reference_target() is quite interesting. And there then adding a new element before inner_host with same id attribute.  And then dynamically attaching shadow DOM to that and adding referenceTarget...

[10:09:16.0391] <smaug>
That kinds of things might reveal the issues I'm worried about

