2024-10-01
[23:15:42.0759] <annevk>
Domenic: https://github.com/whatwg/html/commit/65ef915fbfa347928d5ab946cc5df372c44262cd is missing a comma

[23:15:58.0398] <Domenic>
Oops :(

[23:18:03.0914] <annevk>
Domenic: if you're editing, https://github.com/whatwg/html/commit/5db3fd041f6afd0d6c73f0e4bba21360b59b9267 did indentation incorrectly

[23:19:59.0626] <Domenic>
Sigh, my bad...

[15:05:25.0651] <TabAtkins>
Hm, question. If I were to define a new URL format, similar in principle to data: urls but for generating a specific type of image (QR codes, in this case), would I still want to lean on the "opaque origin" concepts that data: urls use? Or is that overkill and I could rely on something simpler since it's just a raster image?


2024-10-02
[23:10:12.0201] <annevk>
Domenic: what prevents you from having a scripting relationship with a bfcache'd document? I guess there's some unspecified(?) magic that might kick it out of bfcache, but you can hold a reference just fine right?

[23:11:11.0241] <Domenic>
annevk: right, I guess it's the fact that no browser bfcaches iframes or windows with openers. (Not a matter of kicking you out; they just never get bfcached in the first place.) Allowing that would probably break tons of specs that are not prepared for it. We offered to add this to the spec in the past but I think there wasn't appetite.

[23:11:57.0385] <annevk>
Domenic: you don't need an opener to hold a reference to a nested document though

[23:12:33.0740] <Domenic>
No browser bfcaches iframes

[23:13:44.0817] <annevk>
Oh, that's new to me

[23:13:56.0939] <Domenic>
So much stuff would break

[23:14:55.0946] <annevk>
TabAtkins: why would you define them as a new URL scheme and not a particular MIME type?

[03:00:31.0644] <Luke Warlow>
Stuff like the otpauth (/apple-otpauth) scheme can already be used for generating a specific type of qr code. In case of otpauth it's a scheme so it can be used in links. I guess the design might depend on whether it makes sense to linkify this new type of data? Is that the sort of thing you were after Tab? is it something more generic?

[04:23:26.0896] <annevk>
Panos Astithas: maybe we should cancel WHATNOT tomorrow. It's a German holiday and currently only Mu-An Chiou @muan, Domenic, and you are confirmed. We also just had TPAC.

[05:45:41.0170] <annevk>
I wonder if https://x.com/Mike_DiDomizio/status/1839692898670879128 is the direct result of encoding the state in an attribute or if there would be some way to avoid this. I guess the only way would be some kind of parser hack?

[05:51:31.0113] <Luke Warlow>
> <@annevk:matrix.org> I wonder if https://x.com/Mike_DiDomizio/status/1839692898670879128 is the direct result of encoding the state in an attribute or if there would be some way to avoid this. I guess the only way would be some kind of parser hack?

Could potentially only fire the event if there's been user activation on the page? But I guess that only helps on first load not subsequently parsed details 

[06:21:48.0356] <Domenic>
I mean we could thread through "did the parser set this" to the attribute changed steps. It'd just be a lot of annoying work for unclear gain.

[06:23:37.0811] <Domenic>
A new MIME type is more elegant than a new URL scheme but it does come with extra baggage. E.g. you'd expect that if the server served an image/qr-code file then that would also work, which maybe is not what Tab is going for. Unsure.

[07:57:45.0537] <Panos Astithas>
Agreed, I will cancel it.

[08:12:12.0370] <annevk>
A new URL scheme also comes with a lot of baggage though. Is it local, when is it same origin, what if you navigate to it, etc. But yeah, I guess it depends a bit on what you want.

[08:52:19.0416] <keithamus>
I noticed someone tweeting about a pain point of custom elements; https://x.com/Rich_Harris/status/1841494391346590072. In which they point out `cloneNode()` clones the element with the `synchronous custom elements flag unset`. 

I know this was raised before in https://github.com/whatwg/dom/issues/922 where annevk said:

> We don't want to execute JavaScript during those operations as that leads to all kinds of complexity. I'm going to close this as this is working-as-designed.

While I obviously respect that position I'm wondering if there's any possibility of movement on this? It seems unfortunate that this is the only place where elements can be created without a definition, but I guess this would mean a performance hit regardless? 

[09:01:31.0479] <Ms2ger>
Probably not just perf, but masses of CVEs

[09:16:34.0838] <annevk>
keithamus: I actually forgot how cloning works. Is the main issue that it does not happen synchronously or that you do not get any information at all? CER timing could maybe allow for something here, but I don't actually know what we have today. I'm also surprised there hasn't been more noise about this since 2020, but Rich Harris usually knows what's up so it's worth looking into I think.

[09:17:45.0215] <Luke Warlow>
> <@keithamus:matrix.org> I noticed someone tweeting about a pain point of custom elements; https://x.com/Rich_Harris/status/1841494391346590072. In which they point out `cloneNode()` clones the element with the `synchronous custom elements flag unset`. 
> 
> I know this was raised before in https://github.com/whatwg/dom/issues/922 where annevk said:
> 
> > We don't want to execute JavaScript during those operations as that leads to all kinds of complexity. I'm going to close this as this is working-as-designed.
> 
> While I obviously respect that position I'm wondering if there's any possibility of movement on this? It seems unfortunate that this is the only place where elements can be created without a definition, but I guess this would mean a performance hit regardless? 

The perhaps more interesting bit to me is the alternative being so much slower?

[09:18:18.0406] <keithamus>
I was wondering if we could do something with CEReactions. The main issue is that cloneNode won't construct custom elements until they're connecting which is somewhat incongruent with the rest of the platform (importNode retains the definition for example)

[09:18:30.0043] <keithamus>
I imagine importNode is slower because it steps into scripting?

[09:19:46.0450] <keithamus>
`cloneNode` is the only method which calls `creating an element` with `synchronous custom elements flag unset AFAICT.

[09:19:54.0334] <keithamus>
 * `cloneNode` is the only method which calls `creating an element` with `synchronous custom elements flag unset` AFAICT.

[09:20:27.0879] <annevk>
Hmm, `importNode()` and `cloneNode()` are almost identical underneath. If they have serious perf differences that should be fixable.

[09:22:16.0411] <keithamus>
Yes I wonder if we should test the perf disparity claims. The vibe I get from this post was that it was a while ago and maybe that no longer holds true?

[09:23:12.0266] <annevk>
Also, "creating an element" is invoked with that flag unset from the HTML parser at times I think. HTML calls it and that flag value is a variable.

[09:23:29.0086] <keithamus>
ah apologies I missed that

[09:24:38.0622] <keithamus>
oh yeah so https://html.spec.whatwg.org/#create-an-element-for-the-token also explicitly calls out the flag which is sometimes set.

[16:37:34.0767] <TabAtkins>
> <@domenicdenicola:matrix.org> A new MIME type is more elegant than a new URL scheme but it does come with extra baggage. E.g. you'd expect that if the server served an image/qr-code file then that would also work, which maybe is not what Tab is going for. Unsure.

Yeah, y'all are right, just having a new mime type is probably the best way to go. My use-case is just to make it possible to hand-author QR codes easily, given that QRs "won" the barcode wars. They don't need to be linkable or anything, just "fetchable", and a data: URL works for that.

[16:39:44.0051] <TabAtkins>
And the ability for a server to *return* a QR code image using this MIME type wasn't in my initial use-cases, but does seem reasonable imo; the server could generate an appropriate response from cookie data, for instance, and not have to go to the effort (and additional bandwidth) of actually *generating* the QR code as a PNG or something and returning that. Seems useful.


2024-10-03
[05:58:40.0858] <zcorpan>
TabAtkins: will you use a sniffable signature at the start of the body?

[07:02:21.0967] <TabAtkins>
I'd considered it, like starting the body with QRCODE. It means a little bit more boilerplate for hand authoring, tho. Is it really recommended?

[09:35:08.0705] <zcorpan>
TabAtkins: I don't know if there's a recommendation, though images are usually sniffed so I think it could make the format more robust


2024-10-04
[18:38:36.0231] <Domenic>
We'd like to move away from sniffing, and have tried to require new formats to not be sniffed, but implementations have not agreed. I believe their objections have been non-technical ("why should my format be slightly harder to adopt than all the old formats?") but maybe there are technical reasons too.

[00:21:00.0204] <annevk>
For SVG implementations already check the MIME type I believe so introducing another such MIME type seems good.

[00:47:55.0780] <annevk>
keithamus: could you give feedback somewhere that I'd love to enable the two-factor authentication requirement for WHATWG if only it gave the option to give everyone impacted a two weeks heads up? It seems like the current checkbox will just kick everyone out which at this point might well be acceptable given the limited number of people impacted, but it still seems preferable to give everyone a bit of wiggle room. (This lack of clarity around how the requirement is communicated has already delayed our adoption by two years or so.)

[01:28:34.0698] <keithamus>
Thanks, I'll pass it on to the team responsible for 2fa enforcement

[02:34:37.0299] <annevk>
Adam Rice: I revived and cleaned up https://github.com/whatwg/encoding/pull/309 as it still seems worth doing

[02:40:07.0354] <annevk>
Yagiz N: what does https://x.com/yagiznizipli/status/1841855393481302338 mean?

[04:18:16.0636] <Yoav Weiss>
Hey folks! Question about URLs.
If I'm [parsing](https://url.spec.whatwg.org/#concept-url-parser) "https://example.com/foo//bar", I wouldn't expect it to be identical to a parsed "https://example.com/foo/bar", right?

[04:20:17.0632] <Adam Rice>
I don't know what you'd expect, but https://www.ada-url.com/playground?url=https%3A%2F%2Fexample.com%2Ffoo%2F%2Fbar says they are different.

[04:21:10.0018] <Yoav Weiss>
yeah, that's what I figured

[04:21:44.0486] <Yoav Weiss>
for some reason I thought the URL parser would remove spurious '/' in the path, but I was wrong

[04:23:34.0251] <Yoav Weiss>
yeah, the spurious slashes even go out on the network

[04:23:44.0347] <Yoav Weiss>
I guess it's on the server to dedup them

[04:50:30.0992] <annevk>
Yoav Weiss: we only ignore infinite slashes after special URL schemes (and a colon), to much chagrin of the curl maintainer

[07:05:44.0765] <mikedidomizio>
Hey group,

Has there at any time been examples of a feature released in browsers where the decision on behaviour has been revisited and revised?

I'm wondering the process behind how that works?
This is all related to the `<design>` element and the `ontoggle` event paired with `open` attribute and how it automatically fires.

In this [GitHub issue](https://github.com/whatwg/html/issues/4500) there was some discussion around if people would misunderstand how it's used, and if it should be changed.

This all stemmed from my current place of employment recognizing a bug in our code, that fortunately wasn't too bad, but nonetheless a bug due to our misunderstanding of the behaviour.  We went ahead and decided to use React to build a layer on top to change the behaviour, replaced current implementations, and forbid all future usages of `<details>` (via ESLint).

So far every person I've explained this current behaviour to gave me the same response in that it behaves differently than they would expect.
I think a part of me worries that leaving it as is means an eternity of devs bug fixing, simply because something behaves differently than most would expect.

So to close this out, I think helping me understand the process, previous examples, and other statistics you would use to make a decision, would help me understand if it's worth to continue to pursue this or not.  

I'm hoping I'm not coming off as a nuisance.  It's not my intention, I'm focused on respecting developers' time and reducing the likelihood of future bugs.

[07:47:01.0371] <annevk>
r? https://github.com/whatwg/meta/pull/332

[07:50:33.0382] <annevk>
We did briefly discuss your xweet on Wednesday and special casing the parser case would actually be quite a bit of work.

I think to me it does signify that tracking state through an attribute was a mistake, but changing it for this existing element would be quite the undertaking.

[08:41:27.0436] <mikedidomizio>
Thanks annevk .  I appreciate you guys taking the time to discuss it further.  I assume it's not an easy decision.  I'm just learning that the WHATNOT meetings are open to the public (I think), and I see transcripts inside the GitHub issues.  Can someone link me the discussion on this?

More so out of curiosity. A lot of what you guys do intrigues me.

[10:19:40.0312] <TabAtkins>
Does anyone have any memory of why the specific list of codepoints were allowed in custom element names? <https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name> The list excludes emoji like ✨, but allows others, so I'm a little confused by it.

[10:21:40.0402] <TabAtkins>
(For example, `a-🥔` is a valid custom element name, but `a-✨` isn't.)

[10:23:28.0712] <TabAtkins>
This is relevant to CSS, because the Syntax spec just copied HTML's set of allowed characters, but that means `--✨` is an invalid custom property name. We at least want to be a *superset* of HTML's allowed characters, so authors don't have to use escapes to write selectors targeting their custom elements; I'm just checking if there's a good reason for this *exact* set of restrictions, or if I can relax CSS a bit.


2024-10-05
[18:47:59.0177] <joshua.shaw>
Hello guys !!!!! ,…….WE POST ALL PRODUCTS AND REVIEWS ON OUR MAIN CHANNEL AND GROUP. WE WON'T BE POSTING ANY PRODUCTS ON THIS CHANNEL.MAIN GROUP AND CHANNEL LINKS BELOW ⬇⬇⬇

SUBSCRIBE HERE CHANNEL :           https://t.me/+ioqje81ziAYyYTc0 https://t.me/+ioqje81ziAYyYTc0 https://t.me/+ioqje81ziAYyYTc0 https://t.me/+ioqje81ziAYyYTc0 https://t.me/+ioqje81ziAYyYTc0

1) ( GBP DOLLARS, EURO), PROP NOTES, WHITE CARDS, PAYPAL TRANSFER 

2) ✅Cloned Card 

3)✅Cashapp

4)✅Apple Pay

5)✅ PayPal 

6)✅Venmo 

7)✅Test run 

8)✅Linkable  

9)✅CC’s drop  

JOIN OUR MAIN TELEGRAM CHANNEL NOW

[00:54:17.0095] <Domenic>
(For the record, Anne answered Tab's question at https://github.com/w3c/csswg-drafts/issues/11005#issuecomment-2394293590 )

[09:46:54.0553] <annevk>
It wasn't discussed in WHATNOT. It was discussed in this channel, but only two messages or so.

[13:38:23.0807] <Jay Madden>
Hello, I am working on fixing some wpt tests for ladybird and am working on the following suite http://wpt.live/html/semantics/interactive-elements/the-details-element/toggleEvent.html

I have run into an issue on the last test however. For the following code 

```
<input id="clickMe" type="button" value="clickme" onclick="doFunction();" />
<script>
function doFunction() {
    new DOMParser().parseFromString("<h1><details open></h1>", "text/html").querySelector("details").ontoggle = function(e) {
      console.log(e.target.open);
    };
}
</script>``` Chrome will send the event even tho. from reading the spec on navigables that document should never be marked as true https://html.spec.whatwg.org/multipage/document-sequences.html#node-navigable

So basically my question is, why do documents parsed with DOMParser() trigger events?

[13:38:31.0539] <Jay Madden>
 * Hello, I am working on fixing some wpt tests for ladybird and am working on the following suite http://wpt.live/html/semantics/interactive-elements/the-details-element/toggleEvent.html

I have run into an issue on the last test however. For the following code

````
<input id="clickMe" type="button" value="clickme" onclick="doFunction();" />
<script>
function doFunction() {
    new DOMParser().parseFromString("<h1><details open></h1>", "text/html").querySelector("details").ontoggle = function(e) {
      console.log(e.target.open);
    };
}
</script>
``` 
Chrome will send the event even tho. from reading the spec on navigables that document should never be marked as true https://html.spec.whatwg.org/multipage/document-sequences.html#node-navigable

So basically my question is, why do documents parsed with DOMParser() trigger events?
````

[13:38:38.0462] <Jay Madden>
 * Hello, I am working on fixing some wpt tests for ladybird and am working on the following suite http://wpt.live/html/semantics/interactive-elements/the-details-element/toggleEvent.html

I have run into an issue on the last test however. For the following code

```
<input id="clickMe" type="button" value="clickme" onclick="doFunction();" />
<script>
function doFunction() {
    new DOMParser().parseFromString("<h1><details open></h1>", "text/html").querySelector("details").ontoggle = function(e) {
      console.log(e.target.open);
    };
}
</script>
``` 
Chrome will send the event even tho. from reading the spec on navigables that document should never be marked as true https://html.spec.whatwg.org/multipage/document-sequences.html#node-navigable

So basically my question is, why do documents parsed with DOMParser() trigger events?
````

[13:40:55.0556] <Jay Madden>
 * Hello, I am working on fixing some wpt tests for ladybird and am working on the following suite http://wpt.live/html/semantics/interactive-elements/the-details-element/toggleEvent.html

I have run into an issue on the last test however. For the following code

```
<input id="clickMe" type="button" value="clickme" onclick="doFunction();" />
<script>
function doFunction() {
    new DOMParser().parseFromString("<h1><details open></h1>", "text/html").querySelector("details").ontoggle = function(e) {
      console.log(e.target.open);
    };
}
</script>
```

Chrome will send the event even tho. from reading the spec on navigables that document should never be marked as true https://html.spec.whatwg.org/multipage/document-sequences.html#node-navigable

Which means the tasks from that DOM should never be runnable right? https://html.spec.whatwg.org/#concept-task-runnable

So basically my question is, why do documents parsed with DOMParser() trigger events?


2024-10-06
[23:32:20.0480] <annevk>
This used to fire an event just fine: https://github.com/whatwg/html/issues/4500. This seems like a potential regression from the introduction of navigables.

[23:32:41.0024] <annevk>
Please file an issue? Thanks for finding it!

[23:34:07.0212] <annevk>
Grmbl, Hacktoberfest is back: https://github.com/whatwg/html/issues/10679

[08:14:23.0603] <Jay Madden>
annevk it does fire the event, thats what i was confused about, where in the spec that would happen.

What i figured out yesterday from more reading was that the element task for the event SHOULD fire the event because the associated global document is null due to it it not being attached to a window. So the task is marked runnable

[08:57:15.0921] <Oluwafemi Franchis>
Hello guys 🥰🥰 I wanted to let you know that I have a Telegram channel where I share some amazing Verified sauce and soft cashout
Here are some of the things you can find on my channel 💯💯💯

I promise you that all the methods are real and legit. No scams here! And please don't worry about how much money you have. Just be honest and I'll try my best to help you out.
So, if you're interested, please join my channel through the link below. See you there ✅✅

🥇🥇🥇🥇🥇🥇🥇🥇🥇🥇🥇🥇🥇🥇
💸💸💸💸

https://t.me/+oGahmYblRPU4NjE0

[09:01:07.0498] <Oluwafemi Franchis>
Hello guys 🥰🥰 I wanted to let you know that I have a Telegram channel where I share some amazing Verified sauce and soft cashout
Here are some of the things you can find on my channel 💯💯💯

I promise you that all the methods are real and legit. No scams here! And please don't worry about how much money you have. Just be honest and I'll try my best to help you out.
So, if you're interested, please join my channel through the link below. See you there ✅✅

🥇🥇🥇🥇🥇🥇🥇🥇🥇🥇🥇🥇🥇🥇
💸💸💸💸

https://t.me/+oGahmYblRPU4NjE0

[09:52:43.0076] <nicolo-ribaudo>
We should have a bot that auto-bans whoever mentions Telegram

[09:53:07.0025] <Colin Alworth>
User was banned for this message


2024-10-07
[23:16:43.0680] <annevk>
Okay, so there's no issue?

[01:11:57.0227] <annevk>
smaug: final call for Mozilla input on https://github.com/whatwg/html/pull/10394. If you want to take a look please let me know by how many days I should delay landing it

[01:13:36.0798] <annevk>
(Same for everyone else seeing that message and wanting to review I suppose, but Olli did weigh in previously.)

[01:22:02.0951] <annevk>
Yoav Weiss: ^^

[01:36:57.0702] <annevk>
Luke Warlow: I think you're correct about the `<input type=color>` issue. I guess either we need to instrument serialization even more or we need to direct the user agent to only use the `color()` function in either srgb or display-p3 fashion. But that would not prevent web developers from writing into `value` themselves at which point it depends on what color space conversion ends up doing...

[01:54:51.0540] <Luke Warlow>
> <@annevk:matrix.org> Luke Warlow: I think you're correct about the `<input type=color>` issue. I guess either we need to instrument serialization even more or we need to direct the user agent to only use the `color()` function in either srgb or display-p3 fashion. But that would not prevent web developers from writing into `value` themselves at which point it depends on what color space conversion ends up doing...

I reckon we should update the the CSS spec to have a way to call into that serialisation specifically?

[01:56:51.0317] <annevk>
Yeah, agreed, that would give the most consistent results. I'll open an issue. Though I should also see what primitives existing implementations have on offer maybe. Don't want to add too many novel concepts. Hopefully Sam Weinig can double check that.

[02:50:27.0717] <annevk>
smaug: https://github.com/whatwg/html/pull/10528 also looks pretty close. WebKit hasn't determined a position yet, but I'm checking on that now. Leaning positive myself.

[02:50:52.0821] <annevk>
Yoav Weiss: maybe file the MDN issue so that's out of the way for that one too?

[02:51:04.0407] <smaug>
I'll ping jonco for that module stuff

[02:52:11.0524] <annevk>
 * Yeah, agreed, that would give the most consistent results. Filed an issue: https://github.com/w3c/csswg-drafts/issues/11008. Though I should also see what primitives existing implementations have on offer maybe. Don't want to add too many novel concepts. Hopefully Sam Weinig can double check that.

[03:26:11.0011] <Yoav Weiss>
Will do!

[03:54:01.0097] <annevk>
Yoav Weiss: how do determine Chromium's position on Dynamic Import Maps actually? In particular with regards to eventually shipping it. Any Chromium API Owners said something somewhere?

[03:55:32.0525] <annevk>
Also, I still think Dynamic Import Maps is confusing given Dynamic Import, but since it's not actually a web-exposed name I guess I'll let other people handle that.

[03:55:50.0491] <annevk>
 * Yoav Weiss: how do we determine Chromium's position on Dynamic Import Maps actually? In particular with regards to eventually shipping it. Any Chromium API Owners said something somewhere?

[03:58:30.0752] <Yoav Weiss>
annevk: that's a great question! There's no official way to ask for a position from Chromium unfortunately. The decisions there have typically been delegated to the relevant Chrome teams. In this particular case, the relevant folks are Domenic and Hiroshige, who both reviewed and are supportive.

[03:59:13.0207] <Yoav Weiss>
^^ Jeffrey Yasskin on the Chrome positions question, as it's not the first time and probably not the last

[04:06:36.0183] <annevk>
Yoav Weiss: I think that's fine, but in that case maybe say so in the line item instead of just saying you prototyped in Chromium?

[04:08:14.0032] <Yoav Weiss>
Will do! regarding "dynamic import maps" as the PR name, happy to rename it to whatever works


2024-10-08
[17:36:45.0944] <Domenic>
Yoav Weiss: annevk: if it's not too much trouble, I tend to agree a renaming of the feature would be nice, to enhance clarity in e.g. ChromeStatus and any blog posts or web developer documentation that gets produced. "Multiple import maps" or "Updateable import maps" maybe.

[23:56:49.0039] <Yoav Weiss>
Domenic: annevk renamed everywhere I could think of (PR, TAG review, positions, chrome feature, relevant bugs)

[14:40:37.0484] <Dominic Farolino>
Does anyone know what https://w3c.github.io/selection-api/#dom-window-getselection is actually supposed to do / point to?


2024-10-09
[17:25:10.0660] <Domenic>
> <@domfarolino:matrix.org> Does anyone know what https://w3c.github.io/selection-api/#dom-window-getselection is actually supposed to do / point to?

The section right above it, right?

[07:13:50.0279] <Dominic Farolino>
Just a quick sanity check around shadows: a node is not considered "inserted into a document" if it is appended to a node inside a shadow tree. That is, its "inserted into" hook won't run, right? https://html.spec.whatwg.org/C#insert-an-element-into-a-document

[08:26:29.0837] <annevk>
Dominic Farolino: "node is inserted into a document" won't run, the "insertion steps" will

[08:26:45.0605] <annevk>
(because the node's root won't be a document)

[10:19:52.0774] <Dominic Farolino>
Right, OK. That's what I thought but I wanted to check because I'm seeing at least two instances of those steps running upon insertion into a shadow tree (in implementations)


2024-10-10
[23:19:17.0267] <annevk>
Dominic Farolino: shadow tree integration with the wider web platform was never really fully finished and I doubt we actually have tests covering all these scenarios, so that seems plausible unfortunately

[23:21:48.0030] <annevk>
Dominic Farolino: in particular when you see something say "in a document" it hasn't been looked at yet, but a lot of these things could do with more review and tests: https://dom.spec.whatwg.org/#document-trees 

[00:06:45.0125] <annevk>
Domenic: look at what you made me do: https://github.com/w3c/csswg-drafts/issues/11008 (Luke Warlow shares some of the blame, but the suggestion for fancy serialization was yours alone)

[00:08:57.0971] <Domenic>
Fun times...

[00:18:03.0909] <annevk>
To be fair, it has been fun figuring out all the C++ primitives in WebKit. The APIs are not always as straightforward as one might like, but there is a way.

[00:44:30.0541] <Luke Warlow>
> <@annevk:matrix.org> To be fair, it has been fun figuring out all the C++ primitives in WebKit. The APIs are not always as straightforward as one might like, but there is a way.

Out of interest do you have a draft PR for this prototype I was looking at the available APIs for parsing and serialising CSS colours in 4 engines and was stumped a bit in all of them. WebKit and chrome both seemed to have stub functions for the parsing for example.

[01:51:27.0242] <annevk>
I'm planning to put it up later today. I wanted to make sure modifications to the colorspace and alpha attributes were properly reflected, but it seems that `::value()` already does the correct thing. (I suppose there is a case to consider about what to do when the picker is open, but I'm not quite there yet.)

[02:35:09.0214] <annevk>
Luke Warlow: https://github.com/WebKit/WebKit/pull/34970

[04:45:20.0122] <zcorpan>
jarhar: for reconstructing formatting elements, the interesting cases are
- <select><div><i></div><option>
- <div><i></div><option>
The not-in-select case should reconstruct to match what happens today. I know I suggested not doing that for option-in-select, but maybe it should also reconstruct so that handling of option is a bit more consistent between the two cases. (Same deal for optgroup)

[04:45:54.0082] <zcorpan>
 * jarhar: for reconstructing formatting elements, the interesting cases are

- \<select>\<div>\<i>\</div>\<option>
- \<div>\<i>\</div>\<option>

The not-in-select case should reconstruct to match what happens today. I know I suggested not doing that for option-in-select, but maybe it should also reconstruct so that handling of option is a bit more consistent between the two cases. (Same deal for optgroup)

[05:43:06.0498] <sauceee>
Yall tapn
https://t.me/+32cFzLuOiacxZmM0


[06:32:55.0038] <Dominic Farolino>
> <@annevk:matrix.org> Dominic Farolino: in particular when you see something say "in a document" it hasn't been looked at yet, but a lot of these things could do with more review and tests: https://dom.spec.whatwg.org/#document-trees

Right, I knew "in a document" usages were pretty suspicious; I had assumed that "in a document tree" usages were fully vetted though. Oh well

