2025-06-02
[21:43:16.0915] <jmdyck>
In https://html.spec.whatwg.org/#steps-to-expose-a-media-resource-specific-text-track, under MPEG-4, there are a couple occurrences of roughly "the concatenation of A, B, and C, or D if condition". It's unclear what the 'scope' of the "or" is. Is it (A+B+C) or (D)? Or is it A+B+(C or D)?

[06:26:21.0725] <zcorpan>
Domenic: fyi https://www.debugbear.com/blog/google-blocked-website

[09:27:17.0733] <jmdyck>
I looked for how browsers implemented that paragraph, but haven't yet found one that does.

[09:27:55.0418] <jmdyck>
* I looked for how browsers implemented that MPEG-4 paragraph, but haven't yet found one that does.

[10:21:26.0113] <jmdyck>
Looks like Hixie added it in 2012 (d485159e) and it hasn't been touched much since then.

[10:41:03.0251] <Ms2ger (ðŸ‡ªðŸ‡¸)>
I have an open PR that I need to get back to to clean up that algorithm a bit, but I don't touch that part

[11:13:15.0951] <TabAtkins>
Testing would be good to verify, but I'm 95% certain that "or" is tightly bound, so it's just "C or D". The C is always "the first FOO field" and the D condition is"if there is no FOO field", so it's extremely likely that the D (always an empty string) is providing a default for the missing C case.

[12:33:45.0518] <jmdyck>
Testing implementations? You'd first have to find one that implements that chunk of the spec, and I'm doubtful there is one. (I don't think anything in WPT calls inBandMetadataTrackDispatchType, so you can't find implementations that way.) And then you'd need to find or create an MPEG-4 file that triggered the condition in question.

[12:39:23.0399] <jmdyck>
The A+B+(C or D) interpretation is 'better' in that it distinguishes more cases. But it seems odd to me that a dispatch type could have a trailing space.

[12:47:37.0644] <TabAtkins>
Oh, you know what, you're right, I misread. This is absolutely `(A + B + C) or D`, I was being silly. So you get either `"metx FOO"` or `""` (or whatever, for the other field names).

[12:48:00.0809] <TabAtkins>
Anyway, 100% needs a rewrite

[14:37:27.0217] <jmdyck>
Wouldn't have to be a rewrite to disambiguate: you can establish the left edge of the or's scope just by inserting an "either". But a bigger rewrite could improve the readability. (It's interesting that the source, with its judicious linebreaks, is more readable than the rendered spec.) OTOH, if nobody is implementing it, maybe it's not worth the bother.

[14:59:21.0244] <TabAtkins>
I've committed the same sins when writing before, precisely because my source linebreaks make it clearer, and it's more ambiguous when rendered inline instead :/

[14:59:34.0151] <TabAtkins>
But anyway, it's the work of like a minute to fix.


2025-06-03
[04:09:42.0503] <freddy>
The `<xmp highlight="json">` looks really fugly in https://w3c.github.io/webappsec-subresource-integrity/#example-2319c0a9 (Source at https://github.com/w3c/webappsec-subresource-integrity/blob/2089aeb95782970d35f96283d1f3da89beaa8802/index.bs#L721). Looking at the bikeshed docs for `<xmp>` didn't really help me, anyone got a better idea?

[06:15:52.0378] <Ms2ger (ðŸ‡ªðŸ‡¸)>
That highlighting sure didn't work for json

[06:42:45.0070] <Noam Rosenthal>
Anyone from Gecko/WebKit cares to respond to a standard position on navigation API precommit handlers? The spec PR is pretty much ready (https://github.com/whatwg/html/pull/10919) and the standard position requests are pending..

It's a minor/medium sized addition to the navigation API that was requested by multiple early adopters and frameworks.

/cc zcorpan annevk 

[14:51:07.0012] <TabAtkins>
Lol woah, what the fuck happened with that highlighting.

[14:56:16.0957] <TabAtkins>
Ah, that's not actually valid JSON (JSON uses double quotes), so it's making the lexer just do some nonsense behavior.

[14:57:00.0591] <TabAtkins>
(Aside from webidl, highlighting is done by Pygments, btw)

[15:17:48.0294] <TabAtkins>
https://github.com/w3c/webappsec-subresource-integrity/pull/139


2025-06-04
[19:46:43.0441] <Domenic>
It's interesting that popular syntax highlighters have generally chosen to be kind of loose and produce nonsense output in the face of nonsense input. For some cases, like writing specs, having them be strict would be quite useful---bonus syntax checking in your build process. But for cases like writing GitHub comments, I guess you want loose.

[00:24:08.0336] <freddy>
thanks TabAtkins 

[00:29:52.0146] <TabAtkins>
> <@domenicdenicola:matrix.org> It's interesting that popular syntax highlighters have generally chosen to be kind of loose and produce nonsense output in the face of nonsense input. For some cases, like writing specs, having them be strict would be quite useful---bonus syntax checking in your build process. But for cases like writing GitHub comments, I guess you want loose.

An issue is handling new syntaxes. Strict parsing means you'll break if there's an update to the language, or someone uses it on a proposal for something new, or someone is highlighting a fragment of syntax that you didn't expect them to start on, etc.

Strict also requires a Real Parser, whereas I know the Pygments model is a pile of regexes, at least by default. That's simpler for most people to author.

[00:30:09.0999] <TabAtkins>
That says, the failure mode here was *weird*

[00:30:19.0859] <TabAtkins>
* That said, the failure mode here was *weird*

[07:40:29.0172] <Luke Warlow (ðŸ‡ªðŸ‡¸)>
jarhar: regarding ToggleEvent.source tests, The spec PR is merged but the tests still seem to be tentative to me, is there a PR to update them?

[09:06:21.0481] <jarhar>
https://chromium-review.googlesource.com/c/chromium/src/+/6621684


2025-06-05
[19:49:12.0746] <Domenic>
annevk: do you know if request's URL list is used for anything "after fetch"? Or would it be an unobservable change for the ecosystem, if we were to truncate it to just Â« the final URL Â» at the end of the fetch algorithm?

(Context: some gnarly prefetch algorithm stuff.)

[23:23:47.0966] <annevk>
Requestâ€™s `url` has to return the first URL. But in general something like that could probably work. I wonder if we can move the construct to the controller to clarify.

[09:17:15.0233] <Eric Portis (he/him)>
Noam Rosenthal: Why is there a blocking attribute on <style>? Aren't <style>s in the <head> already render-blocking? https://html.spec.whatwg.org/multipage/semantics.html#dom-style-blocking

[09:21:20.0716] <zcorpan>
Eric Portis (he/him): https://html.spec.whatwg.org/multipage/semantics.html#the-style-element:implicitly-potentially-render-blocking:~:text=A%20style%20element%20is%20implicitly%20potentially%20render%2Dblocking%20if%20the%20element%20was%20created%20by%20its%20node%20document%27s%20parser

[09:23:36.0542] <Eric Portis (he/him)>
zcorpan: What can create an element besides the node-document's parser? Script?

[09:24:22.0895] <zcorpan>
Eric Portis (he/him): yes. or you can move a parser-created element from one document to another document

[09:25:37.0908] <Eric Portis (he/him)>
Ok. And in those scenarios, the <style> is not render-blocking. Even if the script that's moving or creating the <style> is  synchronous/in-the-head?

[09:25:50.0093] <zcorpan>
I don't know what happens in an XSLT transform

[09:26:19.0370] <zcorpan>
Right

[09:26:53.0112] <Eric Portis (he/him)>
But if a <script> creates a <script blocking=render> in the head, it *is* render blocking.

[09:28:58.0955] <zcorpan>
I assume you mean it creates `<style blocking=render>`, then yes

[09:53:50.0040] <Eric Portis (he/him)>
@zcorpan: here's my current understanding based on our conversation, and earlier conversations with Noam Rosenthal . https://gist.github.com/eeeps/318812c9d4471136363a6aaa4a448251 Happy to wait until June 16th to understand where I'm wrong btw (:

[09:54:05.0149] <Eric Portis (he/him)>
* @zcorpan : here's my current understanding based on our conversation, and earlier conversations with Noam Rosenthal . https://gist.github.com/eeeps/318812c9d4471136363a6aaa4a448251 Happy to wait until June 16th to understand where I'm wrong btw (:

[09:54:56.0758] <Eric Portis (he/him)>
* zcorpan (OOO until June 16): here's my current understanding based on our conversation, and earlier conversations with Noam Rosenthal . https://gist.github.com/eeeps/318812c9d4471136363a6aaa4a448251 Happy to wait until June 16th to understand where I'm wrong btw (:

[09:57:45.0593] <Noam Rosenthal>
What's on June 16th?
This gist seems right to me

[09:57:58.0022] <Noam Rosenthal>
I believe the "no idea" bit is not render-blocking

[09:58:10.0229] <Eric Portis (he/him)>
(when Simon's OOO ends)

[09:59:17.0073] <Eric Portis (he/him)>
Noam Rosenthal: Thanks!

