2022-12-01
[23:54:25.0487] <hsivonen>
FYI regarding earlier discussion: https://github.com/orgs/mdn/discussions/242#discussioncomment-4274011 (TL;DR: MDN continuing to use Prettier without forking it.)

[00:07:25.0825] <annevk>
> The google style guides are almost an antithesis of what we are teaching at MDN.

o_O

[01:25:36.0988] <sideshowbarker>
https://stackoverflow.com/questions/74638920/iframe-issue-javascript-alert-dialog-block-from-parent-when-added-permissions-p

[01:29:54.0177] <sideshowbarker>
https://stackoverflow.com/questions/74630989/why-use-domstringlist-rather-than-an-array is probably worth an answer from somebody familiar, with details on its history (from somebody familiar with its history)

I don‚Äôt know enough to answer well there. I guess `DOMStringList` started out as something used in `window.location`‚Ä¶ for some reason, and then it got used with IndexedDB‚Ä¶ for some reason ‚Äî but then not used anywhere else, and won‚Äôt be, because `sequence<DOMString>` is the thing to use instead?

[01:30:21.0518] <sideshowbarker>
 * https://stackoverflow.com/questions/74630989/why-use-domstringlist-rather-than-an-array is probably worth an answer from somebody familiar with `DOMStringList`, with details on its history (from somebody familiar with its history)

I don‚Äôt know enough to answer well there. I guess `DOMStringList` started out as something used in `window.location`‚Ä¶ for some reason, and then it got used with IndexedDB‚Ä¶ for some reason ‚Äî but then not used anywhere else, and won‚Äôt be, because `sequence<DOMString>` is the thing to use instead?

[01:30:33.0486] <sideshowbarker>
 * https://stackoverflow.com/questions/74630989/why-use-domstringlist-rather-than-an-array is probably worth an answer from somebody familiar with `DOMStringList` ‚Äî¬†and answer with details on its history (from somebody familiar with its history)

I don‚Äôt know enough to answer well there. I guess `DOMStringList` started out as something used in `window.location`‚Ä¶ for some reason, and then it got used with IndexedDB‚Ä¶ for some reason ‚Äî but then not used anywhere else, and won‚Äôt be, because `sequence<DOMString>` is the thing to use instead?

[03:28:43.0034] <Domenic>
Answered. That was a fun one.

[03:34:12.0773] <sideshowbarker>
> <@domenicdenicola:matrix.org> Answered. That was a fun one.

wow yeah, really great answer ‚Äî thanks much

[03:41:50.0430] <sideshowbarker>
By the way, https://w3c.github.io/stackoverflow/ is a dashboard thing I put together recently ‚Äî for daily review of Stack Overflow Q&As for web-platform features (in part as a way to help get a better understanding of which web-platform features developers are actually using, and what their common pain points are)

It is just a set of links to some tag-based searches. If you mouse over the names of the feature sets like **Core** and **Graphics+typography**, it‚Äôll show you which tags it‚Äôs searching on. Or else if you just follow the links, the search-results pages all also show which tags the results are for.

[03:43:35.0068] <Domenic>
Oh, fun!

[08:41:17.0843] <dlrobertson>
annevk: re https://github.com/whatwg/fetch/pull/1520#discussion_r1037244005 do you have an example of a case where a internal model is specified?

[12:32:19.0260] <TabAtkins>
annevk: I'm trying to figure out how to say "if a URL's fragment is an ID reference" (rather than a Media Fragment, or one of those SVG fragment functions, or the like). Any opinions on how to phrase this?

[12:32:30.0949] <TabAtkins>
(I just need to carve out those other cases as Explicitly Undefined right now.)

[12:35:52.0876] <TabAtkins>
possibly the answer is to just not do that, and instead just unreservedly attempt to find an element with the given ID, and if it fails, handle the failure generically.

[12:36:04.0241] <TabAtkins>
(context: i'm cleaning up the spec text for https://github.com/w3c/csswg-drafts/issues/3320)

[13:01:21.0391] <annevk>
TabAtkins: perhaps HTML's fragment navigation thingie needs an abstraction, but that's where I'd look

[13:02:19.0052] <TabAtkins>
I'm end-running around the thing, since I need to handle "can't find the ID" the same way as "isn't an ID ref at all" anyway

[13:02:30.0829] <annevk>
https://html.spec.whatwg.org/#the-indicated-part-of-the-document

[13:02:58.0812] <annevk>
dlrobertson: Headers/Response/Request all do it pretty well I think

[13:03:14.0762] <dlrobertson>
üëçÔ∏è thanks I'll take a look

[13:03:37.0133] <annevk>
(really most WHATWG documents are good at separating private from public API)

[13:07:45.0788] <TabAtkins>
annevk: Hm, the "find a potential indicated element" is what I'm reproducing manually right now, so it would be nice to use it, but the algo specifies its "root" argument as a Document, not Document or ShadowRoot

[13:08:02.0436] <TabAtkins>
Well, I'm not doing the a-name resolution, but I could take or leave that

[13:14:20.0014] <annevk>
It should be possible to generalize to allow for another caller (while at the same time maybe constraining the name attribute stuff)

[13:14:27.0848] <annevk>
Gotta go for the day

[13:14:37.0472] <TabAtkins>
kk, i'll raise an issue. thanks for the help!


2022-12-02
[22:35:58.0269] <Domenic>
Would this be the first time WTF-16 is referenced as a public API name in a programming language? https://github.com/WebAssembly/stringref/blob/main/proposals/stringref/Overview.md

[22:36:06.0299] <Domenic>
`string.new_wtf8` etc.

[23:36:27.0587] <annevk>
Domenic: oh my. Is this on top of the previous "let's use UTF-8" or this some new iteration of that?

[23:47:54.0568] <annevk>
/me files https://github.com/WebAssembly/stringref/issues/54

[00:05:30.0090] <Domenic>
It seems like it's... separate? The previous thing was about the component model, which I think is about boundaries? Whereas this is about adding WTF-8/16 strings to WebAssembly itself?

[00:10:09.0116] <annevk>
I looked through the issues and they're even considering WTF-8 literals (which goes against Simon's spec)... I hope this is not a thing that has wide buy-in.

[00:15:36.0446] <Domenic>
Well, I think now is the time to give feedback through your local wasm committee member... I decided this was pretty low-level and mostly language-ey and not web platform-ey so I didn't have very strong opinions.

[00:16:04.0328] <Domenic>
That is, it seems icky to introduce WTF-* strings into a new programming language in this day and age, but wasm isn't really a new programming language anyway, it's a compile target for old ones, so...

[00:20:54.0317] <annevk>
Domenic: yeah I filed an issue and pinged someone internally. I personally see Wasm as more than just a compile target. At least I'd like them to be more ambitious than that.

[00:21:50.0017] <annevk>
I also don't understand the zero-copy requirement. Given the myriad of JS string types JS engines have, that seems improbable.

[00:22:26.0987] <Domenic>
I think there's only generally two types, strings and ropes. Presumably ropes need to be flattened, but basic strings wouldn't.

[00:22:54.0044] <Domenic>
Hmm, although there's also the 8-bit latin1 vs. 16-bit distinction

[00:23:46.0044] <annevk>
Right, I think in Gecko it ended up at 16 variants total at one point, but maybe that changed

[00:24:40.0591] <annevk>
I would expect Andy Wingo to know that though, so not sure what's up

[01:09:58.0560] <hsivonen>
annevk: What's the use case for an external spec being able to set _beStrict_ to true here https://url.spec.whatwg.org/#idna ? What external spec sets it to true?

[01:26:09.0628] <annevk>
hsivonen: it's not meant for an external spec, it's meant for https://url.spec.whatwg.org/#valid-domain

[01:26:36.0540] <annevk>
hsivonen: no external spec can call those algorithms, they have to go through the host parser

[01:28:30.0735] <hsivonen>
> <@annevk:matrix.org> hsivonen: no external spec can call those algorithms, they have to go through the host parser

That _beStrict_ didn't occur in the caller part of the spec confused me

[01:29:27.0326] <hsivonen>
Positional arguments vs. keyword arguments in specs...

[01:29:54.0187] <annevk>
hsivonen: I could probably remove the default, I'm not even sure why I gave it one

[01:30:55.0849] <hsivonen>
Anyway, it looks like I need to support setting UseSTD3ASCIIRules both ways, but I don't need to support transitional processing.

[01:33:18.0588] <annevk>
hsivonen: I'll make that change and I'll also add beStrict to domain to Unicode for the same reason (URL has 2 callers for Unicode ToUnicode at the moment)

[01:34:21.0073] <hsivonen>
> <@annevk:matrix.org> hsivonen: I'll make that change and I'll also add beStrict to domain to Unicode for the same reason (URL has 2 callers for Unicode ToUnicode at the moment)

Thanks. Aside: It's super confusing what the level of operation reuse in ToASCII and ToUnicode is. It turns out that Gecko uses ICU4C's ToUnicode operation as the back end for both!

[01:35:05.0051] <annevk>
Domenic: could you review https://github.com/whatwg/url/pull/717 and https://github.com/whatwg/url/pull/719?

[01:35:35.0676] <Domenic>
Will do, although maybe not until next week.

[01:36:51.0022] <annevk>
hsivonen: hopefully it being part of Interop 2022 (and likely 2023) will make IDNA handling a bit more understood and worked upon, but it's been rather frustrating trying to make progress on it

[01:37:09.0208] <hsivonen>
I note that the URL Standard at least hard-codes three of the flags: CheckHyphens set to false, CheckBidi set to true, CheckJoiners set to true. Now I'm curious about the history of those being flags in UTS 46.

[01:37:26.0664] <annevk>
hsivonen: including with people deciding out-of-band that non-transitional is suddenly okay without much coordination across browsers and such, very weird

[01:38:20.0248] <annevk>
hsivonen: right yeah this doesn't make sense as an end state to me, UTS 46 can and should probably simplify 

[01:39:15.0229] <annevk>
(and then Chromium advertising this as an IDNA2008 thing which UTS 46 does rather specific things with is also concerning, but hopefully it'll all work out)

[01:40:06.0302] <hsivonen>
(Context: https://github.com/unicode-org/icu4x/issues/2850 )

[01:49:14.0585] <annevk>
hsivonen: you want to review https://github.com/whatwg/url/pull/720?

[01:53:15.0664] <annevk>
Thanks!

[02:19:44.0790] <Ms2ger üíâüíâüíâ>
> * <@annevk:matrix.org> files https://github.com/WebAssembly/stringref/issues/54

Thanks. Fwiw, Andy is out for the next few months, and I doubt we'll make significant changes before he returns


2022-12-07
[01:41:30.0312] <Daniel Mil, van>
Hello, I don't know if the question belongs here, but I was currently involved in a design question like https://discourse.wicg.io/t/waituntil-on-dom-events/2056 and was curious for the possible answer (see http://discourse.wicg.io/t/waituntil-on-dom-events/2056/3). Anyone?

[02:38:17.0829] <Domenic>
I think the comment right after the one you linked is the answer.

[04:34:05.0286] <Daniel Mil, van>
> <@domenicdenicola:matrix.org> I think the comment right after the one you linked is the answer.

Thanks for the answer. But then I was wondering why ExtendableEvent (from the ServiceWorker API) does support async dispatching with the same API?

[04:34:38.0515] <Domenic>
It doesn't support async dispatching. It supports giving a promise to the browser which tells it not to shut down the service worker until the promise is done.

[04:34:46.0608] <Domenic>
That promise doesn't extent event dispatch in any way

[04:34:53.0978] <Domenic>
(E.g. you cannot cancel the event asynchronously)

[04:35:10.0482] <Daniel Mil, van>
ah ok

[04:35:13.0293] <Daniel Mil, van>
interesting

[04:36:02.0191] <Daniel Mil, van>
I had to review some code and a colleage implemented something like: https://github.com/rektide/async-event-target

[04:37:02.0406] <Daniel Mil, van>
For some reason this doesn't seem right and I was wondering why this would be the case, but although it "feels" wrong I can't seem to find the good arguments not to do so

[04:40:06.0241] <Daniel Mil, van>
the comment here http://discourse.wicg.io/t/waituntil-on-dom-events/2056/3 also says: "That requires way too much changes", not that's it's not possible or not a valid use case? 

[04:40:19.0735] <Daniel Mil, van>
we could also chat in private is this is not the place to discuss this here

[04:41:50.0403] <Domenic>
It seems fine to create your own thing if you have no other way of solving the problem. The platform doesn't provide it, and we definitely can't change every EventTarget on the platform to provide it.

[04:42:15.0976] <Domenic>
Heading to bed now myself, but others might have thoughts :)

[04:42:55.0098] <Daniel Mil, van>
thanks!

[05:02:18.0685] <annevk>
mek: https://github.com/whatwg/fs/pull/78


2022-12-08
[08:29:24.0804] <annevk>
While getting groceries I realized that `Response.error()` prolly exists for service workers. If they return one, do you get a rejected fetch?

[09:46:26.0347] <annevk>
Jake Archibald: so based on `error_response` in WPT `service-workers/` it seems like there is some expectation that `Response.error()` is not turned into an exception similar to a network error. At least I think the cache test tries to store and retrieve it as-is.

[09:54:06.0293] <annevk>
It does seem that responding with `Response.error()` from a service worker is treated as a network error, nice.


2022-12-09
[00:33:48.0890] <Jake Archibald>
annevk: are you saying that Chrome's implementation is doing the right thing (`Response.error()` returned from the service worker results in a failed fetch), but some tests suggest it should do something different?

[00:44:09.0463] <annevk>
Jake Archibald: I think the main oddity I found is that you can store it in the Cache API

[00:44:31.0792] <annevk>
Jake Archibald: which both does and does not make sense, so I guess it's okay

[00:50:55.0958] <Jake Archibald>
annevk:  hmm yeah, I see what you mean. I guess it's fine. The only way to get one of those errors is `Response.error()` right?

[01:00:30.0400] <annevk>
Jake Archibald: yes

[01:01:10.0612] <Jake Archibald>
yeah, it's fine I think. Having errors end up in the cache unintentionally might be an issue.

[01:01:21.0675] <Jake Archibald>
But it seems like it has to be pretty intentional now

[03:35:09.0674] <annevk>
Weird, I'm suddenly getting `hgroup` errors again for whatwg/url PRs

[03:36:21.0670] <annevk>
As far as I can tell bikeshed-boilerplate and bikeshed-data are both good. TabAtkins is api.csswg.org known to sometimes use an old version or some such?

[03:36:48.0148] <annevk>
sideshowbarker did something change in the validator perhaps?

[03:40:11.0776] <annevk>
Also weird, PR Preview still has an `h2` in the `hgroup`. I guess it uses some other kind of template?

[03:49:29.0741] <annevk>
Hmm, seems to have been some kind of fluke? Builds are passing again. Very weird.

[03:57:24.0458] <sideshowbarker>
> <@annevk:matrix.org> sideshowbarker did something change in the validator perhaps?

Not sure. We did recently update the checker to align with the current spec. But that was weeks ago, and nothing since then

[03:59:58.0532] <annevk>
Yeah, looks like it was an api.csswg.org fluke of some sort.

[04:00:01.0618] <annevk>
Thanks!

[04:45:10.0041] <Domenic>
It might be because the PRs are not rebased on main

[04:51:36.0316] <annevk>
Domenic: that would not explain it failing first and later passing without changes to the PR

[04:52:36.0397] <annevk>
If you're curious you can look at the two commits of https://github.com/whatwg/url/pull/722. First one still has its failing result. The second also failed, but I ran CI again.


2022-12-11
[04:37:06.0847] <Andreas Kling>
howdy folks! I'm working on implementing <link> on top of fetch primitives, and I've hit a problem:

[04:37:29.0634] <Andreas Kling>
fast-forwarding through all the setup and most of fetch itself, once we get to `fully read` (https://fetch.spec.whatwg.org/#body-fully-read) step 5, we're asked to `react` (https://webidl.spec.whatwg.org/#dfn-perform-steps-once-promise-is-settled) which ends up calling `PerformPromiseThen` (https://tc39.es/ecma262/#sec-performpromisethen) which calls `HostMakeJobCallback` (https://html.spec.whatwg.org/multipage/webappapis.html#hostmakejobcallback)

[04:37:37.0314] <Andreas Kling>
in `HostMakeJobCallback` it wants the incumbent settings object, but since I'm just reacting to the HTML tree-build, there's no script-having execution context present. this breaks the assertion in `incumbent settings object` step 2.1 (https://html.spec.whatwg.org/multipage/webappapis.html#incumbent-settings-object)

[04:37:46.0403] <Andreas Kling>
what am I missing here? was something above supposed to do a "prepare to run callback" (and thus populating the backup incumbent settings object stack)? or could this be a spec issue? (if the spec assumes that fetch operations always happen within some kind of JS execution context)

[04:58:09.0540] <Noam Rosenthal>
Oh hello Andreas Kling 

[04:58:33.0672] <Noam Rosenthal>
Fetching always assumes there's an environment settings object

[04:58:55.0248] <Noam Rosenthal>
in this case, the document. <link> always fetches with the document as the environment settings object

[04:59:11.0389] <Noam Rosenthal>
the whole thing with promises is a bit out-of-spec, `<link>` doesn't work on top of the JS `fetch()`

[05:00:28.0532] <Noam Rosenthal>
specifically it's the request's client (https://fetch.spec.whatwg.org/#concept-request-client)

[05:01:38.0680] <Andreas Kling>
hmm okay, so am I doing something wrong and I shouldn't end up in "fully read a body" in the first place?

[05:02:22.0630] <Andreas Kling>
or what do you mean the thing with promises is a bit out-of-spec? :)

[05:02:40.0110] <Noam Rosenthal>
oh I see what you mean, I forgot about that bit

[05:25:34.0112] <Noam Rosenthal>
Andreas Kling: following the spec:
`PerformPromiseThen` 10.b: Let fulfillJob be `NewPromiseReactionJob(fulfillReaction, value)`.
`NewPromiseReactionJob` 1.e: let handlerResult be Completion(HostCallJobCallback(handler, undefined, ¬´ argument ¬ª)) (https://tc39.es/ecma262/#sec-newpromisereactionjob
)
`HostCallJobCallback(callback, V, argumentsList)`: 3.: Prepare to run a callback with incumbent settings. https://html.spec.whatwg.org/multipage/webappapis.html#hostcalljobcallback

The latter pushes to the backup stack

[05:25:57.0613] <Noam Rosenthal>
https://html.spec.whatwg.org/multipage/webappapis.html#prepare-to-run-a-callback (1.:Push settings onto the backup incumbent settings object stack.)

[05:27:18.0703] <Noam Rosenthal>
seems super-complex, I've never touched this part of the spec TBH

[05:27:20.0881] <Andreas Kling>
earlier in `PerformPromiseThen` step 4.a, we call `HostMakeJobCallback`(https://html.spec.whatwg.org/multipage/webappapis.html#hostmakejobcallback), that's when the assertion fails

[05:28:15.0865] <Andreas Kling>
agree this is very complex

[05:28:33.0906] <Andreas Kling>
 * earlier in `PerformPromiseThen` step 4.a, we call `HostMakeJobCallback`(https://html.spec.whatwg.org/multipage/webappapis.html#hostmakejobcallback), that's when the assertion fails

