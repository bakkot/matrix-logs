2024-01-02
[18:13:29.0992] <Maxim Vaarwel>
annevk: right, what is the next step? It's still doesn't touch the **custom element reactions stack**

[23:58:58.0165] <annevk>
Oh, I was confusing it with the queue. I think the stack is being used when for instance a custom element is being constructed and its constructor uses a thing with CEReactions.

[08:24:01.0762] <Dominic Farolino>
We often check for detached documents by checking if some relevant global object "is a Window" and that it's associated doc is fully active. Is there is an equivalent we need to do for workers/other globals?

[08:24:16.0682] <Dominic Farolino>
Can workers ever become "detached" or "inactive" in the same way that requires this checking?

[08:25:38.0952] <Dominic Farolino>
I'm writing a spec for an interface that is being introduced to Window and Workers, but I have a bunch of "relevant global object's active Document is fully active" checks. But that's obviously insufficient for Workers, so I'm trying to figure out if I need a similar check for those environments or not

[08:49:43.0094] <annevk>
Dominic Farolino: I think in theory a worker can be bfcache'd and then it'd prolly apply, but that's poorly defined

[10:09:42.0035] <Jeffrey Yasskin>
+1 that it would be lovely for org admins and moderators to be able to see an org-wide view of reported content. Then folks wouldn't need to know to forward spam to keithamus; they could just use Github's reporting API.

[10:09:54.0130] <Jeffrey Yasskin>
 * +1 that it would be lovely for org admins and moderators to be able to see an org-wide view of reported content. Then folks wouldn't need to know to forward spam to keithamus; they could just use Github's reporting UI.

[10:13:14.0220] <Jeffrey Yasskin>
Should Infra have any advice on how specs should use exceptions? https://infra.spec.whatwg.org/#algorithm-control-flow says algorithms can throw, and the exception will silently propagate up the stack, but I feel like it's a best practice to at least mention which algorithms can throw.

[11:28:07.0794] <Noam Rosenthal>
I want to propose allowing `blocking=render` on inline scripts, would that be a "new feature" or a "new issue"?

[12:56:14.0296] <zcorpan>
Noam Rosenthal: I guess up to you which template you want

[13:26:06.0425] <Noam Rosenthal>
> <@zcorpan:mozilla.org> Noam Rosenthal: I guess up to you which template you want

Hmm ok thanks.


2024-01-03
[16:43:46.0900] <Maxim Vaarwel>
annevk: well, you confirm my suggestions about API that decorated by CEReactions that can create an element and invoke constructor method with another API decorated by CEReations. Thanks.

[16:47:28.0939] <Maxim Vaarwel>
 * annevk: well, you confirm my suggestions about API that decorated by CEReactions that can create an element and invoke constructor method in the code of which calls another API decorated by CEReations. Thanks.

[22:18:47.0431] <Maxim Vaarwel>
 * annevk: well, you confirm my suggestions about API that decorated by CEReactions that can create an element and invoke constructor method in the code of which is called another API decorated by CEReations. Thanks.

[22:21:05.0573] <Maxim Vaarwel>
 * annevk: well, you confirm my suggestions about API that decorated by CEReactions that can create an element and invoke constructor method in the code of which is called an another API decorated by CEReations. Thanks.

[00:18:40.0742] <annevk>
Jeffrey Yasskin: I don't think WHATWG specs mention it. IDL doesn't either. It is typically mentioned in domintro boxes though. But we could change all of that I suppose.

[01:53:00.0559] <Noam Rosenthal>
> <@noamr:matrix.org> I want to propose allowing `blocking=render` on inline scripts, would that be a "new feature" or a "new issue"?

https://github.com/whatwg/html/issues/10034

[05:48:47.0001] <evilpie>
Is there something in HTML that would trim whitespace from nonce attributes? https://html.spec.whatwg.org/multipage/urls-and-fetching.html#nonce-does-not-update-dom doesn't at least, but I am not sure how attributes from the parser are handled.

[07:52:31.0439] <annevk>
evilpie: typically preserved

[10:00:20.0884] <Jeffrey Yasskin>
> <@annevk:matrix.org> Jeffrey Yasskin: I don't think WHATWG specs mention it. IDL doesn't either. It is typically mentioned in domintro boxes though. But we could change all of that I suppose.

I don't want to change what experienced spec authors are doing, just try to document it better, if there is actually a pattern to document. My impression was that WHATWG specs usually return "failure" from algorithm steps and then only convert that to an exception when implementing a WebIDL operation. For example, https://url.spec.whatwg.org/#dom-url-url converts failure to an exception in the URL constructor, and https://fetch.spec.whatwg.org/#dom-global-fetch does the same conversion from network error to rejection. Some of the helper algorithms for WebIDL operations do throw without mentioning it in their interfaces, but the deeper layers seem to prefer returns. 

[11:44:35.0109] <Noam Rosenthal>
> <@jyasskin:matrix.org> I don't want to change what experienced spec authors are doing, just try to document it better, if there is actually a pattern to document. My impression was that WHATWG specs usually return "failure" from algorithm steps and then only convert that to an exception when implementing a WebIDL operation. For example, https://url.spec.whatwg.org/#dom-url-url converts failure to an exception in the URL constructor, and https://fetch.spec.whatwg.org/#dom-global-fetch does the same conversion from network error to rejection. Some of the helper algorithms for WebIDL operations do throw without mentioning it in their interfaces, but the deeper layers seem to prefer returns.

This usually makes sense to me because "throwing" means that there's some catching semantic, and that's not guaranteed when you're in an internal operation (e.g. it could be an `in parallel` operation)

[11:54:14.0704] <bakkot>
does anyone know why getRandomValues has a size limit? I poked around the git history and mailing lists but couldn't find it offhand

[13:53:23.0892] <annevk>
Jeffrey Yasskin: I think that's right. Just like you would (might?) return std::nullopt in C++ over an exception.

