2025-01-02
[16:40:45.0919] <self7614>
https://dom.spec.whatwg.org/#:~:text=Returns%20the%20event%E2%80%99s%20timestamp%20as,relative%20to%20the%20occurrence.%20

"Returns the event‚Äôs timestamp as the number of milliseconds measured relative to the occurrence."

Is this incorrect as worded? The timestamp is relative to the Unix epoch. "Occurrence" sounds like it's the event occurrence.

[01:44:56.0219] <Noam Rosenthal>
It's not relative to the epoch, it's monotonic time, initialized in https://dom.spec.whatwg.org/#inner-event-creation-steps #w3c:matrix.org 

[01:45:06.0663] <Noam Rosenthal>
* It's not relative to the epoch, it's monotonic time, initialized in https://dom.spec.whatwg.org/#inner-event-creation-steps 

[01:45:48.0356] <Noam Rosenthal>
I agree that the non-normative description for `timeStamp` can be worded better

[06:17:26.0111] <jub0bs>
Happy New Year, WHATWG!
I would appreciate some feedback on https://github.com/whatwg/fetch/issues/1601 (and not just from Anne). üôè

[10:16:43.0823] <judge_sour_dough_bread>
Hi everyone, I wonder what are the accessibility concerns that are solved by making _non-modal_ [HTML] `dialog` elements themselves focusable? I am playing with one here on Firefox 133, and a focused `dialog` shown with the `show` method, focused through keyboard navigation, seems to offer absolutely nothing in terms of being focused. To explain, I have a form that is part of the dialog, with `method="dialog"` so that the [submit] buttons in the form close the  dialog, and the first button is focused initially when the dialog is shown, as expected, and I have zero issues with that. It's when I "tab" myself backwards and the focus switches to the dialog element itself, that got me thinking -- what is the use for that, and shouldn't I, in this case, add a `tabindex="-1"` to the dialog element?


2025-01-03
[08:30:23.0993] <Yagiz Nizipli>
Happy new year everyone! I opened a PR to node.js to add URLPattern https://github.com/nodejs/node/pull/56452


2025-01-06
[02:06:11.0138] <Ms2ger>
> <@akaster:serenityos.org> Is there a meaningful difference between an `optional any` argument being _missing_ vs being the value `undefined`? https://github.com/WebAssembly/spec/issues/1861

I explained how the spec matches the test in the issue

[10:02:55.0123] <Deborah Sollman>
Deborah Sollman: 

[13:19:15.0970] <Meghan Denny>
??


2025-01-07
[20:14:29.0627] <ry_n_bee>
Idk what the f I‚Äôm doing üò©üò©


2025-01-09
[00:58:31.0539] <sideshowbarker>
If an HTML document is served with a `Content-Type: text/html` without a `charset` parameter, but with `<meta charset="shift_jis">`, then the spec requirements are that UAs must respect the `<meta charset="shift_jis">` ‚Äî and use `shift_jis` as the character encoding, right?

[00:58:45.0380] <sideshowbarker>
I‚Äôm specifically looking at https://www.ntt-west.co.jp/news/1504/150417a.html

[01:02:24.0777] <sideshowbarker>
* If an HTML document is served with a `Content-Type: text/html` HTTP header ‚Äî¬†without a `charset` parameter ‚Äî¬†but with a `<meta charset="shift_jis">` element, then the spec requirements are that UAs must respect the `<meta charset="shift_jis">` element¬†‚Äî and use `shift_jis` as the character encoding, right?

[01:15:02.0881] <sideshowbarker>
* If an HTML document is served with a `Content-Type: text/html` HTTP header ‚Äî¬†without a `charset` parameter ‚Äî¬†but with a `<meta charset="shift_jis">` element, then the spec requirements are that UAs must respect the `<meta¬†charset="shift_jis">` element¬†‚Äî and use `shift_jis` as the character encoding, right?

[01:15:59.0344] <annevk>
sideshowbarker: yup.

[01:16:46.0768] <annevk>
A BOM can override all technically, but that website does not appear to have one.

[01:19:51.0000] <sideshowbarker>
OK, the https://webirc.w3.org/ client (which is an instance of https://thelounge.chat)¬†seems to not handle the encoding properly¬†‚Äî¬†even regardless of whether it‚Äôs set in the Content-Type header

[01:20:32.0758] <sideshowbarker>
That client does previews of any link you post¬†‚Äî¬†just as Matrix does here

[01:21:37.0694] <sideshowbarker>
https://www.w3.org/2025/tests/shift_jis-encoding.html is a demo of the same document, but with a proper `Content-Type:¬†text/html; charset=shift_jis` HTTP header. But in TheLounge, the preview for it is mojibake

[01:23:29.0577] <sideshowbarker>
Anyway, maybe I‚Äôll try to write a patch for it. That Lounge is otherwise a really great client. Among other things, it enables you to stay on an IRC channel persistently ‚Äî¬†even after you close the browser tab, or close the browser. Like IRCCloud or whatever

[03:54:23.0022] <s rajasekaran>
Good Day  to all. I am new to coding as well as this community. 

[03:56:58.0994] <s rajasekaran>
I have trying to copy iframe from youtube source and executing in html coding. the frame is showing but video unable to view. if i paste the url again in second line , then the second line video shows properly. May i know how i have to recitfy this.

[10:46:47.0861] <TabAtkins>
This server is about developing HTML and related web standards. For technical coding questions, please ask on Stack Overflow or other dev-focused communities.


2025-01-10
[04:26:45.0181] <Maxim Vaarwel>
Can you please tell me how I can test this step from the specification of the [create and initialize a Document object](https://html.spec.whatwg.org/#initialise-the-document-object) algorithm?

> If browsingContext's active document's is initial about:blank is true, and browsingContext's active document's origin is same origin-domain with navigationParams's origin, then set window to browsingContext's active window.


[04:27:07.0085] <Maxim Vaarwel>
* Can you please tell me how I can test this step from the specification of the [create and initialize a Document object](https://html.spec.whatwg.org/#initialise-the-document-object) algorithm?

> 6. If browsingContext's active document's is initial about:blank is true, and browsingContext's active document's origin is same origin-domain with navigationParams's origin, then set window to browsingContext's active window.

[06:26:45.0825] <zcorpan>
Maxim Vaarwel: I think with https://software.hixie.ch/utilities/js/live-dom-viewer/saved/13378

[06:28:20.0299] <zcorpan>
Chrome, Firefox: true
Safari: undefined

[06:29:12.0892] <zcorpan>
https://html.spec.whatwg.org/#evaluate-a-javascript:-url

[06:48:24.0922] <Maxim Vaarwel>
Interesting. Are there any other examples besides executing javascript in the search bar?

[06:51:19.0881] <Maxim Vaarwel>
* Interesting. Are there any other examples besides executing javascript in the URL?

[07:00:02.0000] <zcorpan>
I think javascript: url is the only case where the document is swapped. But you could detect it in other ways, e.g. OAC

[07:06:18.0569] <Maxim Vaarwel>
I tried iframes, storing different properties in the window object. But I could not find a single case where the window object matches when loading a new document, as in your case.

What does OAC mean?


2025-01-11
[01:40:56.0973] <Domenic>
There are ways to test that without JS URLs. The 2-documents 1-Window horribleness is much more broad-reaching than that, I think... let me find some old threads...

[01:42:35.0113] <Domenic>
Ah it's coming back to me, this can be tested by using global variables and watching them stick around...

[01:43:01.0266] <Domenic>
https://github.com/whatwg/html/issues/3267

[01:45:01.0064] <Domenic>
https://github.com/web-platform-tests/wpt/blob/master/html/browsers/the-window-object/window-reuse-in-nested-browsing-contexts.tentative.html

and the tests in https://chromium-review.googlesource.com/c/chromium/src/+/804797

[01:48:58.0995] <Domenic>
I seem to remember needing to use global `var` declarations for something related to this, to test `Window` vs. `WindowProxy`, but those tests above don't seem to be bothering with that.

[04:18:20.0765] <Maxim Vaarwel>
Yeah, I've seen some of those links. But I haven't looked at wpt tests before your post. I ran tests on chrome and firefox. Chrome fails almost everything, but firefox isn't perfect either, although it passes almost all the tests.

Thanks for the links and help.


2025-01-12
[15:53:41.0505] <sideshowbarker>
zcorpan: (or anybody else set up to do HTTP Archive queries) Can you do query to find out how many pages have `shift_jis` (lowercase) in the `<meta charset>` or `<meta http-equiv content>` values? Or in the `Content-Type` header?


2025-01-13
[16:13:53.0054] <sideshowbarker>
zcorpan: Or actually, not just lowercase but case-insensitive for the standard `Shift_JIS` ‚Äî also (case-insensitive) `shift-jis`

[16:14:01.0765] <sideshowbarker>
Context is https://github.com/thelounge/thelounge/pull/4951#discussion_r1912529404

[01:33:43.0427] <Noam Rosenthal>
Do you have a REGEXP handy? I checked "<meta[^>]+(charset|content)=\"shift[_-]jis\"" on response bodies in November, got 1333 out of 672M

[02:59:35.0159] <sideshowbarker>
That regexp looks right

[03:01:41.0640] <sideshowbarker>
I guess the lowercase shift_jis is relatively rare. Maybe a Shift_JIS query would return a lot more hits

[03:32:15.0167] <Noam Rosenthal>
`SELECT COUNT(*) FROM `httparchive.response_bodies.2024_11_01_desktop` WHERE REGEXP_CONTAINS(response_body, "<meta[^>]+(charset|content)=\"SHIFT[_-]JIS\"")`
returned 32

[04:34:01.0258] <sideshowbarker>
Thanks ‚Äî¬†how about just `Shift_JIS` (that is, `Shift` rather than `SHIFT`)

[05:09:07.0329] <Noam Rosenthal>
With ignore-case it's 3769

[05:09:22.0415] <sideshowbarker>
Thanks much!

[06:20:12.0161] <smaug>
Hmm, what is the odd white box (when using dark mode) in the warning here: https://html.spec.whatwg.org/#interaction-with-details-and-hidden=until-found 

[06:23:40.0869] <Luke Warlow>
It's an image of a fingerprint as a link to somewhere. Bit odd it covers content though. Probably needs a darkmode-aware class adding to the img.

[06:56:41.0814] <zcorpan>
Origin-Agent-Cluster. See the "otherwise" steps in the spec


2025-01-14
[19:00:55.0145] <Kaiido>
Oh, I thought https://github.com/whatwg/wattsi/pull/161 would fix this...

[19:39:18.0945] <sideshowbarker>
not also fixed in bikeshed yet, maybe?

[20:22:25.0747] <Kaiido>
Yes, TabAtkins fixed it for bikeshed in https://github.com/speced/bikeshed/commit/72e42de7d16654bc6059cf0d622d14d4035fe536

[21:40:51.0253] <Domenic>
Maybe HTML's stylesheet doesn't do the darkmode-aware thing? Although I thought that part was shared between HTML and Bikeshed specs.

[22:10:31.0839] <TabAtkins>
The fix there is in the markup of the image itself, html is using its own file.

[01:55:24.0739] <zcorpan>
HTML uses https://resources.whatwg.org/tracking-vector.svg which responds to dark mode. But the `img` needs `class=darkmode-aware`

[01:59:02.0898] <zcorpan>
But now I'm confused why it doesn't - https://github.com/whatwg/wattsi/blob/main/src/wattsi.pas#L1695

[02:48:18.0422] <Noam Rosenthal>
zcorpan: I was thinking about the async-CSS discussion... `font-display: swap` is a valid use case (though I personally really dislike that UX)
I thought of an option to add `<link rel="font stylesheet">`, where `rel=font` would be non-blocking, but only allow font-descriptors

[02:49:56.0552] <zcorpan>
Noam Rosenthal: I assume people use the onload hack for more than fonts

[02:52:35.0323] <Noam Rosenthal>
zcorpan: for that, I thought to have `<link rel=stylesheet for=some-id>` where the stylesheet would load, but would only apply when we see an element with that ID

[02:53:11.0397] <Noam Rosenthal>
zcorpan: I kind of see these as separate use-cases, where in one of them you actively opt-in to an FOUT and in the other one you probably don't want it but you don't know when the element will come

[02:53:20.0889] <Noam Rosenthal>
* zcorpan: I kind of see these as separate use-cases, where in one of them you actively opt-in to a FOUT and in the other one you probably don't want it but you don't know when the element will come

[02:54:13.0884] <Noam Rosenthal>
If we had a general `async` people would use it for "below the fold" and then they'd have a FoUCy race between scrolling and CSS loading

[02:55:42.0581] <Noam Rosenthal>
* zcorpan: I kind of see these as separate use-cases, where in one of them you actively opt-in to a FOUT and in the other one you probably don't want it but you don't know when the content will come

[02:55:56.0490] <zcorpan>
Would the parser block on that stylesheet when it sees an element with `some-id`?

[02:56:02.0953] <Noam Rosenthal>
yes

[02:57:13.0060] <zcorpan>
Interesting, so same effect as putting the link just before that element (in chromium currently), but you can do it from `head`

[02:57:21.0312] <Noam Rosenthal>
exactly

[02:58:53.0725] <zcorpan>
That seems reasonable, at least if webkit and gecko are onboard with the general stylesheets block the parser thing

[02:59:21.0455] <Noam Rosenthal>
zcorpan: also render-blocking rather than parser-blocking at that point would be non-FoUCy

[02:59:59.0041] <Noam Rosenthal>
though probably it would mean freezing the entire frame, might be worse UX than parser blocking where JS still runs

[03:01:02.0872] <zcorpan>
Right we don't currently block rendering after the first paint, and might cause issues to start freezing what the user sees

[03:01:33.0886] <Noam Rosenthal>
I want to see from he thread if more use cases come up. So far we've heard of:
1. `font-display: swap`
2. Non-critical/below-the-fold CSS, where for several reasons the dev can only put stylesheets in the head

[03:03:32.0826] <zcorpan>
I think things that are initially hidden could be a use case. For that, ideally you don't want to block the parser, since that would hold up anything after the non-critical widget

[03:04:18.0658] <Noam Rosenthal>
zcorpan: yea but you probably want to block the JS that allows showing them

[03:04:32.0055] <Noam Rosenthal>
Otherwise you're racing between the interaction that shows them and the CSS loading (FoUC again)O

[03:05:55.0124] <zcorpan>
Yeah. So if `for` points to a script element, wait with running that script until the stylesheet is loaded? (The script could be `async`)

[03:09:14.0126] <Noam Rosenthal>
zcorpan: Yea, parser-blocking would do that automatically. Or alternatively, `import` the style from the script and adopt it

[03:18:07.0253] <Noam Rosenthal>
Thought: Maybe in the future this could be extended to a behavior where the target element is not parser-blocked, but instead received `display: none` until its stylesheet is loaded. So you'd have those elements appearing asynchronously, but at least each of them would be fully styled

[03:28:02.0824] <annevk>
smaug: were you planning on looking at `moveBefore()` once more before it lands?

[03:29:00.0773] <smaug>
yes

[03:29:11.0842] <smaug>
I was out sick last week

[07:19:46.0847] <annevk>
Domenic: I looked a bit more at the prerender code in WebKit we found a long time ago and it turns out that visibilityState at some point supported a prerender value. It's related to that.

[08:50:46.0736] <Dominic Farolino>
I keep seeing people get surprised by the fact that microtasks are not run after callbacks, when JS is on the stack (i.e., user-dispatched events for example). Sometimes it's discussed as a problem that hopefully we can "fix" someday. I'm sure it's intentional, but it is weird and confusing. I haven't thought about it too too much, but is there any appetite / possibility to change this? Any ideas how incompatible it would be?

[08:52:11.0435] <Dominic Farolino>
I imagine it'd lead to very observable differences, but I wonder if we'd be in a better state if we changed it. I don't have a good reason except for "consistency", with the caveat that changing it might introduce other inconsistencies

[08:52:47.0521] <Andreu Botella>
You should check with server-side runtimes (Node.js, Deno...) because they write most of the runtime's code in JS, and they have in a sense the opposite problem, in that if some runtime-internal JS code runs multiple callbacks, the microtasks would only get run at the end

[08:53:49.0843] <Andreu Botella>
That said, making all callbacks behave the same way would also make it easier for them, even if it would mean manually triggering a microtask checkpoint

[12:03:12.0388] <Shannon Booth>
Funnily enough this is something that I've been digging into a litle recently trying to figure out all of the ins and outs of when microtask checkpoint should be run. E.g with how spin the event loop empties the event loop. And the observability of invoking 'spin the event loop' to implement 'Wait for X', since that performs a microtask checkpoint.

[12:36:35.0273] <akaster>
Is "Sec-WebSocket-Extensions: permessage-deflate" mandatory? https://github.com/whatwg/websockets/issues/63

[12:39:58.0220] <Noam Rosenthal>
Dominic Farolino:  We can't empty the microtask queue after the existing `dispatchEvent`, it would be web breaking... The only reason to do that is to be able to call `stopPropagation` in a microtask (as user-dispatched events don't have `preventDefault`). 

[12:43:42.0817] <Noam Rosenthal>
What I would want to have is something like `EventTarget.nextEvent(eventType)` that calls `addEventListener` with `once` and returns a promise... but it would need some mechanism to be able to stop propagation synchronously because of those `dispatchEvent` scenarios

[15:30:19.0628] <Kaiido>
Noam Rosenthal: I'm quite confused by this message about `nextEvent`. If you init your event as `cancelable` then you can very well call `preventDefault()` on it, it even sets the return value of `dispatchEvent()`. Also I'm not sure how `stop[Immediate]Propagation` would be an issue for a `nextEvent()`, which I assume would be a kind of "after non-capture" phase, and would thus possibly only prevent other `nextEvent()` listeners. Or did you envision a second round of the whole dispatching with all 3 phases?  
The issue I see would actually be with the return value of `dispatchEvent()`, and maybe it's what you were hinting at? Dispatchers could wait for one more microtask before checking the event's `defaultPrevented` but that seems indeed problematic that listeners don't know if the dispatcher will receive the info in time.


2025-01-15
[22:46:12.0933] <Noam Rosenthal>
> <@kaiido:matrix.org> Noam Rosenthal: I'm quite confused by this message about `nextEvent`. If you init your event as `cancelable` then you can very well call `preventDefault()` on it, it even sets the return value of `dispatchEvent()`. Also I'm not sure how `stop[Immediate]Propagation` would be an issue for a `nextEvent()`, which I assume would be a kind of "after non-capture" phase, and would thus possibly only prevent other `nextEvent()` listeners. Or did you envision a second round of the whole dispatching with all 3 phases?  
> The issue I see would actually be with the return value of `dispatchEvent()`, and maybe it's what you were hinting at? Dispatchers could wait for one more microtask before checking the event's `defaultPrevented` but that seems indeed problematic that listeners don't know if the dispatcher will receive the info in time.

I haven't thought of all the details here, just that something that turns "once" events into promises could be useful in some scenarios 

[22:59:13.0997] <Kaiido>
Yes, I completely agree, but I didn't understand the concerns you expressed.

[23:40:48.0488] <Noam Rosenthal>
Kaiido: I was referring to the fact that calling something like `const event = await nextEvent("my-event"); event.stopPropagation()` wouldn't work because the event would already have been propagated at that point

[23:44:09.0877] <Noam Rosenthal>
Thinking that `nextEvent` could return something `PromiseLike` instead of a `Promise`, with both `then` and e.g. `preprocess`
So

or something where the `then` is synchronous, e.g. `const event = await nextEvent("name").then({ e => e.stopPropagation(); return e; });`, and `await nextEvent("name")` would just work. Though we can probably come up with better ergonomics

[00:11:15.0675] <Kaiido>
But you could still prevent the propagation to the next handlers added through later `nextEvent()`. It's basically like how you can't expect `stopPropagation()` in the bubbling phase will prevent the handlers in the capturing phase. It makes sense that `nextEvent()` would be its own phase.

[00:33:03.0704] <Noam Rosenthal>
Kaiido: sure, it's a potential way to look at this.

[09:59:39.0098] <annevk>
Dominic Farolino: smaug probably recalls the rationale for not draining microtasks when JS is on the stack. I don't. In any event we might want to clarify it in the HTML standard.

[10:07:56.0299] <smaug>
The whole point of microtasks is that they are handled at the end of outermost script execution. The idea being that it is effectively end of "your" script when your MutationObservers are handled.  Big(est) reason for that is performance, basically trying to batch as many mutation as possible, yet not mix microtasks from different event listeners or so.

[10:11:32.0391] <smaug>
Microtasks were designed for MutationObserver, and I'm not sure anyone ever really thought through how well they work with Promises and such.

[10:15:16.0158] <smaug>
* Microtasks were designed for MutationObserver, and I'm not sure anyone ever really thought through how well they work with Promises and such (Promises started to use them later).

[10:51:32.0616] <smaug>
* Microtasks were designed for MutationObserver, and I'm not sure anyone ever really thought through how well they work with Promises and such (Promises started to use them later). Microtasks were possibly just good enough for Promises.

[10:55:42.0697] <smaug>
* Microtasks were designed for MutationObserver, and I'm not sure anyone ever really thought through how well they work with Promises and such (Promises started to use them later). Microtasks were possibly just good enough for Promises. And it would have been probably quite confusing to have microtasks for MutationObserver and something almost-microtasks for some other use cases.

[11:43:36.0476] <smaug>
* The whole point of microtasks is that they are handled at the end of outermost script execution. The idea being that it is effectively end of "your" script when your MutationObservers are handled.  Big(gest) reason for that is performance, basically trying to batch as many mutation as possible, yet not mix microtasks from different event listeners or so.

[11:43:45.0707] <smaug>
* The whole point of microtasks is that they are handled at the end of outermost script execution. The idea being that it is effectively end of "your" script when your MutationObservers are handled.  Big(gest) reason for that is performance, basically trying to batch as many mutations as possible, yet not mix microtasks from different event listeners or so.


2025-01-16
[16:18:17.0629] <TabAtkins>
Huh, yeah, that's confusing. I don't know enough about wattsi to debug that.

[16:48:25.0539] <Kaiido>
I remember I did test locally when pushing that change and it did work, in fact, running *html-build* `build.sh --remote` on my machine today does generate the proper class and renders fine for me. The issue might be in the building-pipes.

[17:41:54.0406] <Domenic>
Hmmm probably it's because https://github.com/orgs/whatwg/packages?repo_name=html-build doesn't rebuild after Wattsi improvements

[17:41:59.0635] <Domenic>
I thought we had an open issue on that somewhere

[17:42:43.0578] <Domenic>
I wish I knew Docker well enough to know how this is supposed to work

[17:43:20.0150] <Domenic>
Like ideally html-build would have some minimum wattsi version in a file (like Node.js package.json or similar) and we could bump that file and that would force a rebuild.

[17:44:26.0087] <Domenic>
But right now the html-build -> wattsi dependency is expressed via https://github.com/whatwg/html-build/blob/main/ci-build/Dockerfile#L28 (`COPY --from=ghcr.io/whatwg/wattsi:latest`) which is good if html-build and Wattsi are both revved frequently but not good in this case.

[17:44:53.0641] <Domenic>
I believe docker-compose is possibly the relevant tool here but I have not learned it or how to integrate it into our GitHub actions pipeline...

[23:58:29.0080] <annevk>
Domenic: https://github.com/whatwg/html/pull/10737 strictly speaking doesn't have multi-implementer interest

[23:59:08.0384] <Domenic>
Oh no :(. When someone tells me "ping, all the boxes are checked" on a PR that's been open for months, I'm inclined to take them at their word :(

[23:59:12.0765] <Domenic>
I see now that was a mistake

[23:59:30.0498] <annevk>
I think this is the second time this has happened with Mason. I suggest to no longer do that with him.

[23:59:38.0341] <Domenic>
Ugh wow that box is definitely checked in error, yeah

[00:00:07.0811] <Domenic>
Should we revert?

[00:00:50.0670] <annevk>
I think it's probably okay, unless Mozilla has some objection to it. Need to think about it a bit more.

[00:01:00.0585] <annevk>
smaug: zcorpan: ^^

[00:29:26.0462] <Noam Rosenthal>
One related thing to microtasks/promises... I encountered a few times the issue that if you `resolve` a promise from platform code, the promise reactions would only run at the end of the task. This is confusing if you have a task that does multiple things that might have reactions or callbacks, like the rendering task. I thought to generalize it where HTML would have its own `resolve` that resolves the promise inside a "run/cleanup script" scope and specs should be calling that instead of the WebIDL resolve. Wonder what smaug / Domenic think about this

[00:30:51.0884] <Noam Rosenthal>
Kinda like what I had to do in step #5 of https://html.spec.whatwg.org/multipage/browsing-the-web.html#reveal

[00:33:39.0563] <annevk>
From the perspective of how they were introduced for mutation observers, it would seem bad if you don't delay them until the end of rendering, as the reactions might incur new things that require rendering.

[00:34:21.0184] <Noam Rosenthal>
but we already do that when firing events

[00:36:02.0501] <Noam Rosenthal>
also each rAF callback clears the microtask queue and might incur new things that require rendering etc...

[00:36:51.0901] <annevk>
Well yes, but that's why we moved from mutation events to mutation observers. So to then suggest that promises should work like events feels a bit backwards.

[00:37:32.0721] <annevk>
If you don't want promise-timing, don't use a promise.

[00:40:33.0373] <Noam Rosenthal>
Sometimes promises are there because of ergonomics, not because of anything to do with timing

[00:41:28.0993] <Noam Rosenthal>
To be clear, I don't think this would change anything existing in the platform. Apart from view transitions, all the other `resolve` calls are one-per-task

[00:41:50.0469] <Noam Rosenthal>
(AFAICT)

[00:41:51.0682] <annevk>
How would it not change the timing of promises already on the queue?

[00:44:01.0415] <Noam Rosenthal>
There should not be any promises in the queue, only platform microtasks such as mutation observers. But it doesn't matter, because in 100% of uses of resolve today this would be a noop

[00:44:55.0844] <Noam Rosenthal>
... because today all the uses of `resolve` *only* resolve during the task, so at the end of the resolve you'd get the event loop's microtask checkpoint

[00:52:21.0546] <annevk>
I don't understand that sentence. You can only call resolve during a task.

[00:52:31.0847] <Noam Rosenthal>
yes, but no spec does that in practice

[00:52:50.0868] <annevk>
They do?

[00:52:53.0324] <Noam Rosenthal>
I mean, no spec calls resolve and then does something else that calls user code in the same task, AFAICT

[00:53:11.0318] <Noam Rosenthal>
it's usually "queue a task to resolve"

[00:53:28.0497] <annevk>
I think there's plenty of examples of events or callbacks and promises all being handled in one sweep.

[00:53:34.0935] <annevk>
As they should.

[00:54:24.0103] <Noam Rosenthal>
not sure about it, but will go through the specs, maybe my assumption here is wrong

[00:55:11.0813] <annevk>
There's also plenty of cases where a promise is rejected immediately. Which happens during whatever call did the wrong thing according to IDL.

[00:55:21.0968] <Noam Rosenthal>
sure

[00:56:59.0354] <Noam Rosenthal>
ok, perhaps this is not going to work. Thanks for the clarification

[01:13:12.0329] <Domenic>
The cases I am concerned about which are adjacent to (or the same as?) the ones Noam Rosenthal is discussing are the ones where promises and event firing are next to each other, and thus the existence of event handlers can change the ordering. See https://html.spec.whatwg.org/#note-suppress-microtasks-during-navigation-events .

In such cases we can manually add something to the stack to *prevent* promises from immediately resolving when the events are fired. That seems OK as it makes the promises more delayed.

It's only happened a couple of times so far so we haven't needed to do it more generally.

[01:14:27.0068] <Domenic>
I think Noam's case is basically the same as mine.

[01:15:01.0267] <Domenic>
I don't really know how to generalize it though; just wrapping the resolve in run/cleanup a script wouldn't work. You need wrap both the "fire an event" and the "resolve".

[01:21:41.0819] <Noam Rosenthal>
Yea these timing gotchas are not trivial at all to an outside spec to deal with. But not sure what the right solution is

[01:55:09.0913] <annevk>
Domenic: can't you fire the event and then resolve?

[05:21:41.0141] <keithamus>
Given both WebKit and Mozilla track standards positions in public GitHub issues, do you think it is worth adding some tooling to PRs to scrape the API and check that A) an issue is supplied linking to the standards position of those respective vendors and B) that issue has the correct label on it, marking the vendor as supportive?

[05:22:32.0710] <keithamus>
It could be a CI check that fails a PR unless it is able to successfully confirm that each vendor is indeed supportive, reducing the human error involved.

[05:26:46.0247] <Luke Warlow>
> <@keithamus:matrix.org> It could be a CI check that fails a PR unless it is able to successfully confirm that each vendor is indeed supportive, reducing the human error involved.

One issue with this is sometimes a spec PR is to match implementations and in that case you wouldn't want to raise the issues. But possibly that could be handled with labels?

[05:28:14.0023] <keithamus>
I imagine the option to skip those checks could be added via a checkbox saying "standards positions aren't necessary for this", which would pass the check but could provide a signal to the editors merging that this _hasn't_ gone through standards positions

[06:50:25.0978] <annevk>
keithamus: I wouldn't be opposed to that being available, but as I clarified at some point WHATWG uses "implementer interest" which is quite informal (though you do need to actually have someone say it). Going through standards-positions to obtain that is fine, but it's not required.

[06:51:16.0065] <keithamus>
that makes sense. Perhaps it would be too much then.

[08:13:54.0926] <Luke Warlow>
Is there any documentation or issues to read about how moveBefore interacts with stuff like mutation observer?

[08:25:41.0988] <annevk>
https://github.com/whatwg/html/pull/10904/files moves a bunch of text and then makes some tweaks. Is there a good way to highlight the changes? I guess copy-and-paste it all and do a manual diff?

[08:56:30.0683] <Andreu Botella>
Hey, both I and nicolo-ribaudo wanted to join today's WHATNOT meeting to talk about the web integration AsyncContext, and we don't have an invite

[09:02:39.0497] <nicolo-ribaudo>
Figured it out

[10:01:28.0196] <annevk>
Andreu Botella: is there a comment/document somewhere explaining this new design and in particular why it was changed?

[10:03:07.0948] <smaug>
Andreu Botella: FWIW, I'm still super worried about any implicit context capture (assuming I understand the proposal correctly). That kind of things tend to cause leaks. 

[10:03:44.0040] <Andreu Botella>
> <@annevk:matrix.org> Andreu Botella: is there a comment/document somewhere explaining this new design and in particular why it was changed?

There was feedback from a number of folks, but some of that happened in a meeting and there isn't a lot in the PR or issues. Check out Aug 20 in https://docs.google.com/document/d/1pi-NMbqVhg2UuxQAZ4jOGDeHLlZGD_DJ7fyxHt_C2hs/ though

[10:04:31.0733] <Andreu Botella>
> <@smaug:mozilla.org> Andreu Botella: FWIW, I'm still super worried about any implicit context capture (assuming I understand the proposal correctly). That kind of things tend to cause leaks.

Most of the implicit context capture in the previous proposal is gone. What's left now is similar to what the TC39 proposal would do for `await`s and `.then`

[10:05:25.0322] <smaug>
So how would DOM callbacks deal with this then? I'm a bit confused. The proposal talks about "associating state implicitly "

[10:06:21.0181] <Andreu Botella>
I think this is clearer in https://github.com/tc39/proposal-async-context/pull/109

[10:07:00.0057] <Andreu Botella>
For things like `setTimeout`, you'd store the context with the callback, and get rid of it afterwards (or for `setInterval`, when it gets canceled)

[10:07:50.0492] <smaug>
Ok, so context is stored implicitly with the callback?

[10:09:21.0934] <Andreu Botella>
> <@smaug:mozilla.org> Ok, so context is stored implicitly with the callback?

not for every callback, only for APIs that take a callback and schedule it at some later point

[10:09:40.0906] <Andreu Botella>
event listeners would not store the context

[10:09:49.0688] <annevk>
Andreu Botella: for a change of this magnitude I'd expect a bit more. I mean I gave feedback too, but that apparently has been dismissed now.

[10:09:53.0733] <nicolo-ribaudo>
The difference is that now we capture implicitly for callbacks that are going to be run (unless explicitly cancelled) and not for things that _may run_ like event listeners (where you don't know if it's ever going to be triggered again, so you can't capture the context)

[10:10:38.0334] <nicolo-ribaudo>
* The difference is that now we capture implicitly for callbacks that are going to be run (unless explicitly cancelled) and not for things that _may run_ like event listeners (where you don't know if it's ever going to be triggered again, so you can't ever free the context)

[10:20:29.0973] <Andreu Botella>
To avoid misunderstandings: this proposal talks about propagating the context implicitly, as a way to frame the expected behavior for context passing. This could be implemented by changing the way task queueing and "in parallel" work in engines, but for the initial rollout we propose only exposing things that could be implemented in other ways.

[10:21:29.0577] <Andreu Botella>
You could implement/spec `setTimeout` as implicitly passing the context to the "in parallel" code, and then implicitly passing that same context to the queued event loop task

[10:21:36.0557] <Andreu Botella>
Or you could store the context with the callback

[10:22:21.0140] <Andreu Botella>
I don't think this is a change from what we discussed in TPAC

[10:26:39.0321] <annevk>
I'm not sure I was at the discussion at TPAC, but I'm pretty sure I gave feedback that per-thing handling feels extremely error prone.

[10:27:01.0938] <annevk>
Especially for events.

[10:33:54.0853] <Andreu Botella>
> <@annevk:matrix.org> I'm not sure I was at the discussion at TPAC, but I'm pretty sure I gave feedback that per-thing handling feels extremely error prone.

Well, I'm talking about the informal side chats. About per-thing handling, I guess you mean having to know which events have a sync or async dispatch and so on? I think we might be able to spec that such that this doesn't rely on something like a list of events

[10:34:33.0296] <Andreu Botella>
but for the initial rollout, there would be a very small list of events that would be special-cased so the context does propagate for those

[10:34:49.0054] <Andreu Botella>
because that can be implemented without the implicit tracking

[11:34:34.0318] <smaug>
Andreu Botella:  It is quite confusing to have some callbacks work in certain way and other in some other way. And for example idle callbacks aren't guaranteed to be run, even though the are "scheduled". Nothing ensures there is idle time ever.

[11:36:04.0409] <smaug>
(I'm just super concerned about memory leaks here, just given, as an example, the massive leaks Youtube fixed couple of days ago. At least some of them were exactly about capturing certain things semi accidentally and keeping them alive for too long)

[11:40:13.0373] <Andreu Botella>
> <@smaug:mozilla.org> Andreu Botella:  It is quite confusing to have some callbacks work in certain way and other in some other way. And for example idle callbacks aren't guaranteed to be run, even though the are "scheduled". Nothing ensures there is idle time ever.

For the behavior of callbacks, the underlying behavior should be the same as implicit propagation. Different APIs have different behavior, because they do different things on the way to calling the callbacks

[11:41:56.0998] <Andreu Botella>
Well, "the same as implicit propagation" isn't strictly true, because multiple rAF callbacks can be scheduled on the same event loop iteration, but you'd still want each to propagate its own context

[11:42:11.0426] <Andreu Botella>
but it's a similar concept

[11:42:39.0531] <Andreu Botella>
 * Well, "the same as implicit propagation" isn't strictly true, because multiple rAF callbacks can be scheduled on the same event loop iteration (or the same task in some implementations), but you'd still want each to propagate its own context

[15:49:35.0561] <Domenic>
This discussion of "for the initial rollout" seems scary; I cannot imagine changing this sort of thing after it's shipped.

[15:50:01.0691] <Domenic>
I would prefer the final semantics are worked out ahead of time, as part of the "initial rollout".


2025-01-17
[16:39:54.0290] <Derrick>
Hey

[23:23:31.0246] <Andreu Botella>
> <@domenicdenicola:matrix.org> I would prefer the final semantics are worked out ahead of time, as part of the "initial rollout".

That would mean analyzing essentially the whole set of events across the whole web platform, and would probably mean the whole implicit context propagation would need to be implemented from the beginning in browsers, which might result in interoperability bugs because the exposed surface is huge and it might be really easy for interoperability bugs to creep in

[23:25:15.0671] <Andreu Botella>
Also, the set of events we're considering for the initial rollout are ones for which we have use cases at this point, but there might be other use cases that haven't been brought up yet

[23:26:10.0931] <Andreu Botella>
One common thing with AsyncContext is that since much of the goal is for third-party code to be able to pass state seamlessly across first-party code, it's hard to know which events the context should propagate through, because the first-parties are not involved in the conversation

[23:30:38.0266] <Domenic>
I mean, saying people might implement it wrong and therefore we should implement it piecemeal is not generally how we do things on the web platform. We can't trade hypothetical interoperability bugs now for definite compatibility bugs later.

[03:49:42.0222] <Andreu Botella>
I am quite confident that there will be interoperability bugs because we're making things observable that so far have been unobservable

[03:49:56.0640] <Andreu Botella>
but fair enough

[05:11:41.0020] <annevk>
I guess what you're saying is that this new feature might build upon some existing infrastructure that might not match the envisioned behavior? But that's really an argument for writing sufficient tests. Not for delivering only part of the feature.


2025-01-20
[01:33:36.0049] <annevk>
TabAtkins: I like the (new?) markup checker in Bikeshed. Already identified valid issues in DOM and Infra and nothing bogus thus far.

[06:56:11.0409] <TabAtkins>
> <@annevk:matrix.org> TabAtkins: I like the (new?) markup checker in Bikeshed. Already identified valid issues in DOM and Infra and nothing bogus thus far.

Nice, that's precisely what I was hoping for. Saw a lot of little errors in the test suite.

[06:56:22.0144] <TabAtkins>
And yeah, brand new, haven't written up the release notes yet

[06:56:50.0288] <TabAtkins>
If anything bogus does come up just file an issue


2025-01-21
[18:29:18.0953] <Domenic>
All sorts of good Bikeshed stuff being detected now. This is a fun one... https://github.com/whatwg/xhr/actions/runs/12878961165/job/35905693141?pr=394

[02:16:24.0775] <annevk>
I think that one was probably identified already and I caused that to happen when I redid "clone a node".

[09:15:42.0023] <TabAtkins>
Yeah that error isn't from anything new, it's just an ordinary ambiguous link


2025-01-22
[03:26:32.0612] <mbrodesser (offline on Fridays)>
Are IDL setters in the spec expected to be called for an IDL attribute's default value?

[03:34:56.0854] <zcorpan>
mbrodesser (offline on Fridays): can you give an example of what you mean?

[03:47:23.0209] <mbrodesser (offline on Fridays)>
zcorpan: `SomeInterface { DOMString someAttribute; // (default: someDefaultValue) }`

[03:47:55.0172] <mbrodesser (offline on Fridays)>
The question arose in the context of https://github.com/whatwg/html/pull/10873#discussion_r1891023659

[03:51:16.0122] <zcorpan>
mbrodesser (offline on Fridays): the comment about default value has no normative effect and doesn't say anything about when the setter is invoked. The setter is called when author code sets it, or some spec text says to call it. The default value is about what the getter will return

[03:52:11.0277] <mbrodesser (offline on Fridays)>
zcorpan: thanks, that makes sense

[12:02:37.0192] <Dominic Farolino>
Can you have a union of two dictionaries? I think not, since they are not mutually distinguishable (https://webidl.spec.whatwg.org/#distinguishable-table) right?

[12:54:08.0222] <Noam Rosenthal>
> <@domfarolino:matrix.org> Can you have a union of two dictionaries? I think not, since they are not mutually distinguishable (https://webidl.spec.whatwg.org/#distinguishable-table) right?

Yes, I guess you can merge the oredered maps and "implicitly treat them as dictionaries" in the spec 

[12:55:52.0443] <Noam Rosenthal>
https://webidl.spec.whatwg.org/#ref-for-dfn-dictionary-member‚ëß


2025-01-23
[16:47:39.0282] <Domenic>
The Unix domain sockets thread is really something.

[17:36:21.0280] <sideshowbarker>
Domenic: makes me grateful for other people who find themselves at a loss for words

[21:45:41.0854] <sideshowbarker>
PSA: If you can make it to [Web Engines Hackfest](https://webengineshackfest.org) (June 2‚Äì4 in Spain) this year: I‚Äôve proposed a *‚ÄúRunning WPT tests under CI‚Äù* session and want to have some additional facilitators for it. https://github.com/Igalia/webengineshackfest/issues/43

[01:56:40.0440] <Noam Rosenthal>
Apparently there was already a "needs incubation" label, ha

[02:02:15.0620] <annevk>
And I forgot I added that three months ago üòÖ

[02:08:32.0900] <smaug>
Perhaps https://github.com/web-platform-tests/wpt/issues/41745 would have been something for WHATNOT. Oh, well, maybe next time. But that has been a rather unfortunate issue, and oddly enough the discussion is happening in that wpt issue (too).

[08:25:04.0343] <Dominic Farolino>
Ooh what thread is this?

[09:04:53.0556] <annevk>
Dominic Farolino: https://github.com/whatwg/url/issues/577 (I've been wondering whether to lock it, but it's mostly harmless)

[09:05:23.0310] <annevk>
* Dominic Farolino: https://github.com/whatwg/url/issues/577 (I've been wondering whether to lock it, but it's mostly harmless; but also too noisy so I unsubscribed which I feel a bit bad about since other people might still get notifications and if it turns bad then...)


2025-01-24
[19:05:54.0441] <Domenic>
Bikeshedding help requested for an error type that includes properties with how much X is available, versus how much X you requested: https://github.com/whatwg/webidl/issues/1463

[19:18:57.0741] <sideshowbarker>
I don‚Äôt think that to developers using *‚ÄúQuota‚Äù* will seem to storage-specific. I think developers a familiar with the context of ‚Äúquota‚Äù being used in the web platform to mean a browser/UA-imposed maximum. I don‚Äôt think usage of *‚ÄúLimit‚Äù* or other imaginable alternatives would have the same familiarity to developers.

[19:21:55.0385] <Domenic>
That is helpful, thank you!

[19:23:30.0831] <sideshowbarker>
New/separate unrelated question for the room: At https://w3c.github.io/uievents/#event-type-keypress I find this requirement for the `keypress` event:

> _If supported by a user agent, this event MUST be dispatched when a key is pressed down, **if and only if that key normally produces a character value**._

In other words, per-spec browsers must not fire the `keypress` even for the Enter key (and modifier keys, and the arrow keys, etc.)¬†‚Äî¬†but instead only for the alphanumeric keys and symbol keys.



[19:24:31.0882] <sideshowbarker>
But‚Ä¶ that‚Äôs not what existing engines do. Instead, they do fire `keypress` for the Enter keys, and for modifier keys, etc.¬†‚Äî everything

[19:25:00.0195] <sideshowbarker>
Well, all engines except Ladybird (which implements that requirement per-spec)

[19:27:20.0881] <sideshowbarker>
So‚Ä¶ that requirement doesn‚Äôt seem to be compatible. And that makes me wonder why it‚Äôs in the spec, and how it made its way into that spec to begin with ‚Äî I mean, if implementors don‚Äôt support it. And given that if everybody _did_ implement it per-spec, it seems like it would break all kind of existing sites.

[19:28:09.0611] <sideshowbarker>
I‚Äôll file an issue for it, but in the meantime I‚Äôm wondering if anybody here might know that background on where it came from

[19:28:25.0097] <sideshowbarker>
* New/separate unrelated question for the room: At https://w3c.github.io/uievents/#event-type-keypress I find this requirement for the `keypress` event:

> _If supported by a user agent, this event MUST be dispatched when a key is pressed down, **if and only if that key normally produces a character value**._

In other words, per-spec: Browsers must not fire the `keypress` even for the Enter key (and modifier keys, and the arrow keys, etc.)¬†‚Äî¬†but instead only for the alphanumeric keys and symbol keys.

[19:28:32.0750] <sideshowbarker>
* New/separate unrelated question for the room: At https://w3c.github.io/uievents/#event-type-keypress I find this requirement for the `keypress` event:

> _If supported by a user agent, this event MUST be dispatched when a key is pressed down, **if and only if that key normally produces a character value**._

In other words, per-spec: Browsers must not fire the `keypress` event for the Enter key (and modifier keys, and the arrow keys, etc.)¬†‚Äî¬†but instead only for the alphanumeric keys and symbol keys.

[19:28:48.0465] <sideshowbarker>
* So‚Ä¶ that requirement doesn‚Äôt seem to be web-compatible. And that makes me wonder why it‚Äôs in the spec, and how it made its way into that spec to begin with ‚Äî I mean, if implementors don‚Äôt support it. And given that if everybody _did_ implement it per-spec, it seems like it would break all kind of existing sites.

[19:29:10.0011] <sideshowbarker>
* I don‚Äôt think that to developers using _‚ÄúQuota‚Äù_ will seem to storage-specific. I think developers are familiar with the context of ‚Äúquota‚Äù being used in the web platform to mean a browser/UA-imposed maximum. I don‚Äôt think usage of _‚ÄúLimit‚Äù_ or other imaginable alternatives would have the same familiarity to developers.

[19:29:48.0217] <sideshowbarker>
* But‚Ä¶ that‚Äôs not what existing engines do. Instead, they do fire `keypress` for the Enter key, and for modifier keys, etc.¬†‚Äî everything

[20:15:21.0878] <Domenic>
I vaguely remember there being stuff around keyCode vs. other properties, and only one of them makes sense as producing a character value. Maybe the intent was to have an event that only fires when that character value property is set. (But nobody implemented it that way.)

[20:19:58.0768] <sideshowbarker>
I misspoke a bit, actually: UAs _do_ all seem to conform to that requirement for all non-character keys ‚Äî _except_ for the Enter key

[20:20:16.0812] <sideshowbarker>
That is, all UAs do still fire `keypress` for the Enter key

[20:20:50.0588] <sideshowbarker>
So I guess I‚Äôll open a spec PR with a patch which states that exception

[20:50:29.0003] <sideshowbarker>
Well, it seems there are existing already-reported issues:
- https://github.com/w3c/uievents/issues/183
- https://github.com/w3c/uievents/issues/266
- https://bugzilla.mozilla.org/show_bug.cgi?id=1602694

[20:55:32.0215] <sideshowbarker>
Anyway, I really just want to know what I should implement in Ladybird in order to be interoperable with existing behavior in other engines

[20:56:35.0974] <sideshowbarker>
And per Nakano-san‚Äôs analysis in https://github.com/w3c/uievents/issues/183#issuecomment-448091687, that _seems_ to maybe come down to being Enter, Shift + Enter and Ctrl + Enter as the exceptions

[02:20:58.0267] <annevk>
Hype: https://bsky.app/profile/tabatkins.com/post/3lggxdwp4h22w

[02:26:44.0511] <sideshowbarker>
oh wow, finally being able to get the HTML spec build ported over to Bikeshed would be a big win

[02:27:19.0605] <sideshowbarker>
hope Tab gets the perf stuff worked out

[02:27:31.0510] <sideshowbarker>
zcorpan: FYI https://github.com/w3c/uievents/pull/392

[05:47:11.0166] <Colin Alworth>
sideshowbarker: I usually just lurk here, but doesn‚Äôt enter emit a newline ‚Äúcharacter value‚Äù?

[06:48:11.0379] <sideshowbarker>
Colin Alworth: per-spec at https://w3c.github.io/uievents/#character-value, it seems to mean the same thing as https://w3c.github.io/uievents/#unicode-character-categories, which is:
> *all the Letter (Ll, Lm, Lo, Lt, Lu), Number (Nd, Nl, No), Punctuation (Pc, Pd, Pe, Pf, Pi, Po, Ps) and Symbol (Sc, Sk, Sm, So) category values*

[06:50:19.0204] <Colin Alworth>
Hmm, surely space and tab too? Or are you saying those should be excluded as well?

[06:50:42.0821] <Colin Alworth>
Newline is certainly a Unicode character 

[06:51:19.0652] <sideshowbarker>
I‚Äôm saying what the spec says it means is _‚Äúall the Letter (Ll, Lm, Lo, Lt, Lu), Number (Nd, Nl, No), Punctuation (Pc, Pd, Pe, Pf, Pi, Po, Ps) and Symbol (Sc, Sk, Sm, So) category values‚Äù_

[12:02:13.0544] <nsITobin>
I think it is time to bring an XML web back.

[12:02:43.0429] <nsITobin>
along the 1.0 lines not the modular nonsense.

[12:10:56.0578] <nsITobin>
Here is my vague semblance of a plan.. HTML5 living standard does as the living standard does.. But codify versioned strict predictable serializations as XHTML 5.x or Year or whatever. Anyone wanting that is more likely to accept or prefer the strict markup requirements. "Unversioned" XHTML 5 == current standard.

Anyone think there is anything remotely good about my vague list of desires presented as a plan?



[12:18:37.0377] <TabAtkins>
lol i hadn't asked y'all about it yet, just been doing some exploration first to make sure it is indeed possible. i'll poke y'all in q2 or q3; gotta get multi-page output working first

[12:26:46.0634] <TabAtkins>
But yes, getting rid of the accidental quadratics was easy, and I'm continuing to poke around to see what else I can shave off now. Currently the "15 copies of DOM" spec is 1m50s on my laptop, which indeed right about 15x the time of DOM itself, meaning I'm just tightening up some surprisingly linear bits now.


2025-01-25
[16:12:48.0895] <nsITobin>
I see.

[16:33:13.0431] <nsITobin>
out of the fifteen people or so who has read what I said.. no one has even a response?

[16:36:08.0156] <Colin Alworth>
nsITobin: I assume your familiar with how we got where we are? I‚Äôve been at this for ‚Ä¶ a while, and lived through the xhtml days - it was a great idea, but there are good reasons it didn‚Äôt pan out and we ended up where we are (and they aren‚Äôt all technical, or even most). I‚Äôd be very skeptical of another standard that replaces the existing one without a little more than that blurb to base it on

[16:38:00.0227] <nsITobin>
The reason is the W3C slow walking everything plus modular xhtml basically resulted in and endrun and you guys deeming yourselfs a standards body and via market position have strong armed the W3C into acceding to your authority. Great.. don't care anymore. I wanna go forward but I also want an equally capable XML future along side.

[16:38:13.0089] <nsITobin>
* The reason is the W3C slow walking everything plus modular xhtml basically resulted in an endrun and you guys deeming yourselfs a standards body and via market position have strong armed the W3C into acceding to your authority. Great.. don't care anymore. I wanna go forward but I also want an equally capable XML future along side.

[16:38:39.0816] <nsITobin>
I am leaving the upset behind me these days.

[16:40:30.0510] <nsITobin>
Speculation in the Mozilla Outskirts is the W3C specifically slowwalked Mozilla's and early google standards mainly because of Microsoft.. Which is a huge problem now considering issues with Google control over the base chromium and Microsoft's latest stuff they have added to Edge which AI, aside, seems exceedingly familar.

[16:40:44.0277] <nsITobin>
also Opera was there too ;)

[16:42:05.0293] <nsITobin>
On the order of a term.. Every WhatWG member should be familiar with .. no matter if they lived it or not. Shell Update.

[16:43:16.0744] <nsITobin>
Both the W3C and WhatWG now conduct official operations on a Microsoft service where Microsoft are the gatekeepers to whom may contribute or participate. This is ALSO a problem.

[16:44:23.0851] <nsITobin>
I am just no longer interested in debating the decisions made in the late 2000s.. It's 2025 now.

[16:45:47.0382] <nsITobin>
Every browser has either stellar XML parsing or decent enough XML parsing and also JS access to dom interfaces to deal with XML there too. Why is this not being taken more advantage of especially in situations where no person writes a single iota of html.

[16:46:07.0971] <nsITobin>
Computers that generate code can generate strict code just as easily.. see the over-reliance of javascript.

[16:51:49.0347] <nsITobin>
Eventually I am gonna pursue all this anyway and I have a fully functional XUL platform with first party support for an XML web so I can basically create my own microcosm if I so desired and this time I would be calling the shots.. but how does that help anyone else.. HTML5 has real world problems and has had since its inception. We're past the 10 year mark where WhatWG uncommitted by "the little people" just isn't gonna cut it or be great for HTML in the end.

[16:52:32.0855] <nsITobin>
* Eventually I am gonna pursue all this anyway and I have a fully functional XUL platform with first party support for an XML web so I can basically create my own microcosm if I so desired and this time I would be calling the shots.. but how does that help anyone else.. HTML5 has real world problems and has had since its inception. We're past the 10 year mark where WhatWG is allowed to pass uncommented by "the little people" just isn't gonna cut it or be great for HTML in the end.

[16:53:43.0261] <nsITobin>
* Eventually I am gonna pursue all this anyway and I have a fully functional XUL platform with first party support for an XML web so I can basically create my own microcosm if I so desired and this time I would be calling the shots.. but how does that help anyone else.. HTML5 has real world problems and has had since its inception. We're past the 10 year mark where WhatWG is allowed to pass uncommented by "the little people" which simply isn't gonna cut it or be great for HTML in the end.

[16:55:20.0664] <nsITobin>
also partial support for WebComponents.

[16:56:00.0406] <nsITobin>
Though if I go the create my own older style web with xhtml I would opt for a version pre-webcomponents cause I have.. XBL.

[16:56:47.0040] <nsITobin>
But again who does that help outside my self and a few freaks.

[16:57:57.0544] <nsITobin>
Excluding XML now that WhatWG has accomplished so much with str8 living standard html seems kinda silly especially when XML will never die. It's like IRC that way. It should be made as useful as it once was along side your HTML.

[17:00:33.0917] <nsITobin>
Or I can merely document the UXP implementation, deem my self a standards body and have stuff that outshines even my autistically compromised social skills.. May go no where but again the WhatWG could have easily gone no where as well.

[17:05:08.0122] <nsITobin>
I already have a bit of an idea of how to basically use an almost unmodified mozilla XBL file as an input to some javascript to build a custom element based on it. The real issue is I can never get FULL mozilla capability as HTMLElements are on the same level they don't derive from a generic least none I can access. If all HTMLElements derived from a base element then customelements could be done EXACTLY like XBL.

[17:06:24.0807] <nsITobin>
* I already have a bit of an idea of how to basically use an almost unmodified mozilla XBL file as an input to some javascript to build a custom element based on it. The real issue is I can never get FULL mozilla capability as HTMLElements are on the same level they don't derive from a generic least none I can access. Not unless I literally reimpl every element or have a mess. If all HTMLElements derived from a base element then customelements could be done EXACTLY like XBL.

[17:12:05.0481] <nsITobin>
It is not fun anymore being someone who writes markup by hand. Because at this point, its more javascript and css than markup.. and css is trying to become its own scripting language on top of it.

[17:12:25.0020] <Colin Alworth>
So, for the record, I don‚Äôt belong to any standards group etc, and never have, but am an end user, tools/app developer, so I think some of that is either misdirected, or just talking past me (you asked for a response‚Ä¶ I had some free time to offer thoughts). There‚Äôs a lot to follow through on and unpack here, and I think that while the idea makes sense it may not get to the heart of the problems that, from my perspective, are not going to be solved by better standards, but better incentives (and since nearly* every browser is chromium‚Ä¶ that‚Äôs a tough sell). I think making this case as a proper writeup would serve the ideas better, rather than a wall of text in a channel with a different purpose?

[17:13:17.0253] <nsITobin>
The WhatWG is DIRECTLY responsible for the near monoculture we have now.. I am TRYING to .. ignore that.

[17:13:40.0906] <nsITobin>
I warned about it in 2017

[17:13:44.0526] <nsITobin>
and 2019

[17:13:58.0106] <nsITobin>
and then went a bit nuts for a while. I'm better now.

[17:16:00.0895] <nsITobin>
If I wanted to just express how evil the whatwg has been regardless of intent I'd do that get banned and get back to XUL.. Problem is.. that didn't work last time.

[17:16:42.0083] <nsITobin>
I wanna see stuff happen for the FUTURE and not just stuff copyright Microsoft or Google while they are still allowed.

[17:22:51.0248] <nsITobin>
Maybe some extra context. I am Matt A. Tobin aka the New Tobin Paradigm, formerly the number 2 asshole of the Pale Moon Project and creator of the Unified XUL Platform (originally an ESR52 fork with an originally Firefox 24 UI as far as Pale Moon is concerned the Take 2 attempt, the one that worked). I also created the only known independently written multi-application Mozilla Add-ons infrastructure and services site to exist. Until I write a new one.

I am an on-again-off-again browser developer and implementor. And will launch a XUL browser again. It is only..a..matter..of..time.

[17:25:21.0846] <nsITobin>
As I have decided to make use of the xul platform I sold most of my sole for.

[17:25:34.0765] <nsITobin>
* As I have decided to make use of the xul platform I sold most of my soul for.

[17:27:52.0130] <nsITobin>
With modern browsers and whatwg's modern features there should be more than enough stuff to add some extra sugar to to even have a messure of XUL capability within a chromium browser over the web.. it is JUST MISSING that easy to use-ness XUL was known for.

[17:32:11.0302] <nsITobin>
I put a website up on my ISP when I was a kid in the 90s using HotDog Pro .. I moved to FrontPage and then Dreamweaver.. Then I simply started doing it by hand and my stuff exploded it was great.. Then I learned XHTML and damn I love XHTML and XML technologies.. Then HTML5 came with its video and audio tags and 800 different copies of div all slightly different and digital rights management.

[17:32:45.0375] <nsITobin>
Then I joined a browser project

[17:35:05.0661] <nsITobin>
I also enjoyed flash and shockwave and other plugins..

[17:35:36.0162] <nsITobin>
as a browser developer it makes a lot of sense to have special content handlers as external things.. but plugins are bad for android.

[17:36:03.0186] <nsITobin>
also adobe and java did not protect or educate the users enough on the risks and proper usage of plugins

[17:36:07.0237] <nsITobin>
just driveby installed

[17:38:38.0477] <nsITobin>
Basically HTML5 made HTML suck for me

[17:38:58.0520] <nsITobin>
and its over fifteen years past that I relate that and ask for solutions and alternatives.

[17:39:09.0846] <nsITobin>
Or get banned in the process and do what I want knowing I tried.

[17:46:45.0022] <nsITobin>
When the world may end in five years .. what's a ban in comparison to trying to do or say the right thing.. not necessarily the appropriate thing but the right thing.

[17:49:59.0363] <nsITobin>
People banned from github cannot interact with the whatwg even if their ban had nothing to do with anything whatwg related.. Microsoft banned me for participating in an anti-wayland gist because of that and wanting to organize an xorg fork to be ready if wayland craps out I was banned.. on github globally.. my stuff wiped out.. my infra crippled.. my history purged.

[17:50:42.0255] <nsITobin>
Why is the WhatWG gatekept by Microsoft?

[17:51:50.0390] <nsITobin>
Why are WhatWG specs ALWAYS rewritten biasing a Google impl just because it exists despite other impls in other browsers. Why is there a rule of two when almost everyone is chromium based. Why does being chrome give you a majority to dogpile specs onto others like Mozilla or Apple

[17:52:30.0346] <nsITobin>
and why is the WhatWG not inclusive of any browser VENDOR in that case to have equal rights if the engine can be almost if not exactly identical for several controlling memebrs

[17:53:04.0337] <nsITobin>
any firefox fork should be treated the same as any controlling chromium fork or rebuild.

[17:53:25.0207] <nsITobin>
Thus I should be equal to Mozilla or Google the moment I release a browser.

[17:54:14.0384] <nsITobin>
if it is by ENGINE then everyone using chromium should get but one vote and i still should be equal to mozilla because UXP's gecko fork is so unlike gecko then and especially now its defacto a different engine.

[17:55:01.0344] <nsITobin>
but no. That isn't how it works. It's corperations using employee proxies to not be beholden to anyone not even the W3C. A cartel is not a superior option to the wild west my WhatWG friends.

[17:55:30.0867] <nsITobin>
But I would PREFER to talk about the future you see.

[17:55:37.0679] <nsITobin>
Cause I can do.. THAT endlessly.

[17:55:45.0512] <nsITobin>
the not future stuff i mean

[18:03:24.0200] <nsITobin>
Can the designated official body for HTML and many web technologies not seem to use those technologies to run their organization?

[18:04:09.0140] <nsITobin>
* Can the designated official body for HTML and many web technologies not use those technologies to run their organization?

[18:05:21.0271] <nsITobin>
is a 15 dollar a month server too much to ask for to run a small gitforge where people can contriute in standards without being blocked by Micorsoft. Aren't there enough barriers to WhatWG as it was pre-Microsoft owning github?

[18:05:45.0221] <nsITobin>
* is a 15 dollar a month server too much to ask for to run a small gitforge where people can contriute in standards without being blocked by Micorsoft. Aren't there enough barriers to WhatWG pre-Microsoft owning github?

[18:06:15.0176] <nsITobin>
* is a 15 dollar a month server too much to ask for to run a small gitforge where people can contribute in standards without being blocked by Microsoft. Aren't there enough barriers to WhatWG pre-Microsoft owning github?

[18:07:01.0547] <nsITobin>
Why not Gitlab.. you don't have to run it either and it isn't controlled by a major controlling stakeholder in this standards body

[18:09:22.0476] <nsITobin>
I am likely FAR too opinionated on the standards them selves to be of much use but things the WhatWG could be doing to ensure it becomes something more than a damned cartel of the same players for the past 25 years + google who just didn't like agreeing on something AND sticking to it over a duration I might have some suggestions.

[18:10:58.0311] <nsITobin>
Scoped Styles for example.. it didn't REALLY impact the webcomponents standards at all and everyone EXCEPT chromium ALREADY supported it but now no one supports it except UXP and maybe SeaMonkey.

[18:12:23.0041] <nsITobin>
and it sure made an attractive addition for someone not ready or not interested in shadowdom and the rest of the webcomponents stuff.. Which is still conceptually based on classical Mozilla technologies btw. Don't fool yourself. Especially customelements. Mozilla's only REAL hard push at standing firm.. it would have been impressive to me if it didn't kill XBL in the process.

[18:13:04.0873] <nsITobin>
it would have been perfect if it had just that little extra bit to make it as good to use as XBL was.

[18:17:48.0404] <nsITobin>
If the WhatWG and related groups want the actual respect the W3C automatically gets despite them being an ineffectual mess ever since WhatWG was formed.. the WhatWG should do everything in its power to bolster the ranks of browser vendors and engines and stop letting special interests redefine everything on a monthly basis.

A common open platform also means one open to change from without. Else it is just corporate collusion and conceptual price fixing.

[18:18:56.0789] <nsITobin>
the cost being in implementation and refactoring of course since its all technically free.

[18:20:06.0813] <nsITobin>
and being judge for not having the resources to waste millions of dollars on something half a dozen people can do.. but I don't have that now even.

[18:20:41.0582] <nsITobin>
* and being judged and disparaged for a decade personally and collectively for not having the resources to waste millions of dollars on something half a dozen people can do.. but I don't have that now even.

[18:22:47.0773] <nsITobin>
and my **peers** have in the past 3 years devolved from Tech Supremacists to Final MAGA when it is obvious to anyone with a chunk of brain left that it stopped being anything but a new american nazi party after Jan 6th.. THAT is who has the shit I slaved over for a decade because the of the WhatWG and its impacts on the world wide web.

[18:23:30.0483] <nsITobin>
So yeah past.. never ends.. until the future arrives and I would PREFER a future that potentially has SOMETHING for someone like my self as I am now.

[18:25:02.0850] <nsITobin>
So I can go play in my unsandboxed xul sandbox or i can TRY and make it known what exactly its like at my level.

[18:25:18.0394] <nsITobin>
and maybe do some good

[18:26:33.0443] <nsITobin>
* Or I can go play in my unsandboxed xul sandbox or i can TRY and make it known what exactly its like at my level.

[18:26:47.0567] <nsITobin>
* I can go play in my unsandboxed xul sandbox or i can TRY and make it known what exactly its like at my level.

[18:27:48.0364] <nsITobin>
* and being judged and disparaged for a decade personally and collectively for not having the resources to waste millions of dollars on something half a dozen people can do just takes a while.. but I don't have that now even.

[18:31:40.0925] <nsITobin>
The monoculture needs to end and the WhatWG needs to be modernized beyond corporate interests. Because unless that happens I may as well fork HTTP the protocol by writing up its impl in UXP and also XHTML 1.0 and update it for HTML5 stuff but in the way XHTML 1.0 was not later versions.. put it up on a website.. in standard html and have software that can make use of it like a browser and an nginx fork because I'll be damned if I will use http/3 a google protocol any time soon.

[18:33:08.0101] <nsITobin>
because you have a protocol, a browser, and a server and you HAVE a chunk of the Internet of Protocols to your own self.

[18:34:06.0570] <nsITobin>
but I do forget WhatWG also is responsible for superclassing protocols with web tech.. So my Internet of Protocols and the World Wide Web aren'

[18:34:14.0731] <nsITobin>
* but I do forget WhatWG also is responsible for superclassing protocols with web tech.. So my Internet of Protocols and the World Wide Web aren't on the agenda let alone XML.

[18:34:35.0789] <nsITobin>
And that is my general beef.

[18:35:41.0277] <nsITobin>
We have more things but in totality.. we are at BEST no better than before.. and at worst it is a corruption of the evolution of the internet and the world wide web.

[18:37:36.0872] <nsITobin>
So what can be done about it?

[18:41:59.0919] <nsITobin>
The Modern Web is harming The Internet as a whole.

[18:42:14.0878] <nsITobin>
until this is understood i doubt anything I have or will say will matter.

[18:45:19.0619] <nsITobin>
I also expect the adoption of the new Google Web Protocol over UDP will be a shedding point for legacy compatibility and there goes http older than 3 and likely XML as a rendered thing all together and things will get a few more abstractions and superclassings and be as opaque and virtually unusable outside specialized software that it will be indistinguishable in practicality from any closed proprietary series of technologies delivered over the internet. 

[18:45:30.0952] <nsITobin>
and HTML 4

[18:45:49.0587] <nsITobin>
* and HTML 4 will go too

[18:47:58.0517] <nsITobin>
and I have to ask in the face of this almost certain possibility if trends remain unaltered based on the past decade or so when I have been directly affected as a browser and xul platform developer

[18:48:06.0097] <nsITobin>
Is it worth it?

[18:48:38.0882] <nsITobin>
because i look at it.. and it could all be done better as a standalone application in xul or better yet actually securing remotexul

[18:49:22.0207] <nsITobin>
if Firefox's UI is now XHTML and HTML based and they have seperation of chrome vs content privs plus sandboxing.. Remote XUL being insecure was never a real blocker.. it could have been secured.

[18:50:05.0494] <nsITobin>
that little nugget puts the WhatWG's positions into question from the very outset.

[18:50:32.0269] <nsITobin>
as well as Mozilla's decision making at the time.

[18:50:54.0647] <nsITobin>
and brings into question what REALLY happened between Google and Mozilla back then.

[18:52:13.0465] <nsITobin>
and if none of that is relevant to today.. neither is really all the crap that has up till now never been questioned.. so the future CAN be wide open.. Thus I am here trying.

[18:52:29.0914] <nsITobin>
How am I doing?

[18:52:37.0158] <nsITobin>
Please leave a comment .. here.

[18:52:38.0232] <nsITobin>
lol

[18:56:53.0360] <nsITobin>
* and if none of that is relevant to today.. neither is really all the crap that has up till now never been questioned or more properly ALLOWED to be questioned.. so I figure the future CAN be wide open.. Thus I am here trying.

[19:02:51.0075] <nsITobin>
So yeah.. in summery.. radically change the organization and governance of the WhatWG and also embrace XML technologies as equally valid and stop doing Google and increasingly Microsoft's corporate interest driven bidding. Also Mozilla is more or less full of its self and can't be trusted anymore to act on behalf of the internet population and needs taken down a peg for not only causing all this but failing to be bothered to even live up to it or its own past.

[19:03:04.0087] <nsITobin>
and get off github

[19:03:38.0840] <nsITobin>
and you will have a dramatically better and fairer Web Hypertext Application Technology Working Group

[19:04:52.0310] <nsITobin>
I am sure my stuff can be mined for more tidbits of benefit but that will be sufficient for now.

[19:07:44.0158] <nsITobin>
I mean WHATWG is not a stranger to radical changes but my changes may be off brand.. to that I say.. deal with it.. things will be better for it.

[19:09:23.0314] <nsITobin>
Or make it clear that I should piss off and potentially but not very likely obsolete you all with 20 year old technology.

[19:09:48.0002] <nsITobin>
It could be fun.

[19:11:03.0619] <nsITobin>
* It could be fun to try.

[19:12:05.0189] <nsITobin>
I didn't have a lot of fun last time because I had to justify my capability and still burned for it.. This time it will be FUN.

[19:12:16.0829] <nsITobin>
* I didn't have a lot of fun last time because I had to justify my capability and was still burned for it.. This time it will be FUN.

[19:34:29.0515] <nsITobin>
If I can't have a voice in the shaping in the future of the web at this point because I don't have dollar signs and can hire people with social skills .. i dunno how that is any better than the W3C in the end.. I do know the W3C was defeated once and their defacto successor on html is making even worse mistakes. Especially in a time where regardless of your politics.. elites are making their moves because for elites power is the only real political correctness

[19:34:55.0374] <nsITobin>
and valid social construct

[19:35:03.0698] <nsITobin>
* and valid social contract

[19:36:11.0544] <nsITobin>
power and acceding to their authority as a company in the industry they control.

[19:36:51.0668] <nsITobin>
or some industry professional who can't keep a job more than 2 years

[19:37:22.0854] <nsITobin>
but is always gainfully employed SOMEWHERE

[19:38:30.0813] <nsITobin>
Mozilla.. OLD Mozilla Netscape-employed Mozilla wasn't like this.. and I am SURE KDE didn't want this either for their engine.

[19:40:49.0130] <nsITobin>
or the web

[19:41:33.0696] <nsITobin>
and Google.. Google has never been about anything other than services that can place ads on.

[19:41:43.0144] <nsITobin>
What the hell even IS this organization?!

[19:45:04.0708] <nsITobin>
Basically if WhatWG had happened in the 90s.. u'd be selling Chromium Mark of Quality Logo Licenses to non-chromium browsers and no browser not carrying the Chromium Mark of Quality would be trusted.. Effectively That is the web on a functional level THANKS to the WhatWG.

[19:45:17.0023] <nsITobin>
and I want something done about it.

[19:50:04.0731] <nsITobin>
Or is the WhatWG supposed to be the solution to the browser war.. cause it isn't.. it just means when it falls many enemies will fall with it with one stroke..

[19:50:11.0918] <nsITobin>
is that good for the open web?

[19:54:38.0756] <nsITobin>
And how is inverting things the solution.. strict markup and loose js vs loose markup and strict and ever cryptically complex javascript.. How is anything WhatWG has done benefit more than the bottom line of its particpants?

[19:55:51.0925] <nsITobin>
I love when I come to these kinds of places and very little is ever said in response to a slew of questions.. once the first contact has decided I won't just accept and leave.

[19:56:38.0294] <nsITobin>
one strat involves attacking and banning the other involves silence. I am aware of both and really can't care less. I will continue.

[19:58:28.0870] <nsITobin>
I would contend that save video streaming because but mah netflix and youtubes .. nothing that has come from HTML 5 has objectively been better than HTML 4 let alone XHTML 1.0

[19:58:54.0503] <nsITobin>
just as everything ES6+ except promises was all achievable in ES5

[19:59:16.0865] <nsITobin>
and nothing new to the modern web didn't exist in a Mozilla XUL codebase at some point save DRM

[19:59:26.0287] <nsITobin>
* and nothing new to the modern web didn't already exist in a Mozilla XUL codebase at some point save DRM

[19:59:44.0409] <nsITobin>
Anyone care to debate that?

[19:59:53.0088] <nsITobin>
To prove me wrong or how mistaken I am?

[20:00:11.0053] <nsITobin>
Do anything other than the status quo NO ONE ASKED FOR IN THE FIRST PLACE?

[20:02:08.0687] <nsITobin>
also excluding AI of course.

[20:03:20.0493] <nsITobin>
I am also PARTLY a result of the consequences of the WhatWG.

[20:05:41.0174] <nsITobin>
because of what you all have done to a thing to many things I have cared about since I was 8 and have made a significant part of my life ever since. HTML and the World Wide Web.

[20:08:43.0122] <nsITobin>
I would gladly give up XUL for the specs from the end of 90s to still prevail especially XML

[20:08:48.0431] <nsITobin>
* I would gladly give up XUL for the specs from the end of 90s to still prevail especially XML-based ones

[20:10:07.0808] <nsITobin>
and when browsers used to be navigators

[20:12:47.0766] <nsITobin>
How is a Hypertext Application the same as a website.. why aren't you something else rather than slowly but progressively overwriting stuff with other stuff that isn't as capable?

[20:13:36.0784] <nsITobin>
Why does the web have to be THIS and not some other additional valuable protocol and set of technologies on the Internet?

[20:14:11.0783] <nsITobin>
in addition to the world wide web I logged on to in the 90s

[20:15:17.0140] <nsITobin>
better that than the current strategy of seizing and overwriting or merely excluding it

[20:15:48.0769] <nsITobin>
* better that than the current strategy of seizing and overwriting anything one can get their hands on or merely excluding anything else

[20:15:59.0895] <nsITobin>
* better that than the current strategy of seizing and overwriting anything one can get their hands on or merely excluding anything else including revitalized efforts otherwise

[20:20:21.0490] <nsITobin>
and what if I created some old-web protocol and used old-web technologies that also allowed self-signed as valid for integrity but not identity so that central authorities certs can be used when its important and not a cost in time or money depending on if timesink cert or paid cert. Would your corperate masters add the protocol and retain features and capabilities largely XML stuff for it?

[20:20:24.0475] <nsITobin>
I doubt it.

[20:20:30.0204] <nsITobin>
it's not in the profit plan.

[20:21:54.0984] <nsITobin>
and EVEN if I actually REMOVED standard http from my xul browser and it ONLY accessed my old web protocol it would still be shat upon for not only its XUL tech not being web compatible AND for reinventing the wheel everyone wants busted to pieces.

[20:23:12.0929] <nsITobin>
It's already no-win for me as-is and I really don't care I just want solutions and a future that isn't a google initiated microsoft hell that isn't even as interesting as the one planned in the 2000s

[20:25:05.0741] <nsITobin>
Especially when all the wheels the WhatWG makes have an arbitrary expiration date attached and browser parity STILL might not happen but broad adoption outside $mainstream is difficult to impossible

[20:25:30.0833] <nsITobin>
Google Wheels have Chrome hubcaps obviously every browser needs chrome-like hubcaps

[20:25:47.0915] <nsITobin>
disgusting.

[20:26:39.0116] <nsITobin>
Microsoft hubcaps perform illegal operations and need shut down.. can't wait for Chrome Browser to be sold off and Microsoft slots in to defacto chromium maintainer and shoves that down to even Firefox.

[20:26:48.0843] <nsITobin>
their final revenge for netscape i guess

[20:26:56.0249] <nsITobin>
except.. I am still alive.

[20:27:03.0374] <nsITobin>
and too old to stop

[20:28:43.0910] <nsITobin>
and obviously won't shut up.

[20:28:46.0754] <nsITobin>
sooo

[20:36:48.0061] <nsITobin>
If the speculation in the Mozilla Outskirts is correct then if Microsoft assumes Google's defacto leadership and lead on WhatWG specs you will have become the W3C and MUST be endrun with a new standards body.

[20:36:53.0624] <nsITobin>
I hope you all realize that.

[20:38:23.0887] <nsITobin>
Maybe it could be me or maybe it could be someone else. But its a real concern that SHOULD concern the WhatWG

[20:40:12.0111] <nsITobin>
It's happened before.. the WHATWG did it.

[20:42:05.0755] <nsITobin>
It's the only way to preserve an Open Web after all.

[20:42:12.0664] <nsITobin>
;)

[20:46:53.0547] <nsITobin>
precedents when remembered are a bitch aren't they?

[20:48:44.0321] <nsITobin>
It's the same risk as anything really.. when you go against the status quo its all sunshine and rainbows but when you ARE the status quo because you usurped the role even in a minority of people's minds.. you open your self to your own potential downfall..

[20:50:06.0556] <nsITobin>
* It's the same risk as anything really.. when you usurped status quo its all sunshine and rainbows but when you ARE the status quo because you usurped the role even in a minority of people's minds.. you open your self to your own potential downfall..

[01:17:01.0809] <mr. cheff>
wtf did I just read

[01:18:49.0609] <mr. cheff>
sorry but no one's going to use your browser

[04:57:43.0622] <koakuma-chan>
Hey,

[04:59:40.0083] <koakuma-chan>
I‚Äôm building an audio player and one issue I‚Äôm currently facing is that, in order to start the next audio in the playlist, the user has to open the page    to unpause it for it to process the events, etc. Is there any way to work around this? Like somehow wake the page when audio stops playing or something similar?

[06:55:09.0600] <nsITobin>
Good morning. I do believe I did imply that given the conditions surrounding it. But I could do it.. and there is a statistical probability it might explode and take off like crazy.. Just not a very good one ;)

[06:57:16.0373] <nsITobin>
People.. have STOLEN xul code from me from private repos.. SOMEONE other than me is nuts enough and willing to pull scriptkiddy tricks on a gitea instance to get it..

[06:57:36.0008] <nsITobin>
people have tried to steal my branding and logo artwork

[06:57:46.0230] <nsITobin>
it's not impossible just unlikely.

[06:58:05.0083] <nsITobin>
Which is my point. Basically the point of any argument put forth by an autist.

[06:58:13.0037] <nsITobin>
well a good number anyway

[06:59:00.0813] <nsITobin>
and the WHATWG's existence indicates things can change in a big way because it has happened before.

[07:01:02.0299] <nsITobin>
Who knows.. since I have no resources to legally defend my rights I might very well be the architect of the WHATWG downfall it will just be someone else stealing my plans and technology and taking the credit.. I dunno. The future doesn't make sense anymore.

[07:02:40.0034] <nsITobin>
That is why I am here.

[07:15:49.0551] <nsITobin>
Not coming here.. wherever here was before Matrix.. didn't accomplish anything other than all the technology i ever wanted and the near destruction of my personality and soul.. I survived and stuff still ain't any better broadly let alone for my self. That is where I am now.

[07:24:19.0694] <nsITobin>
SPEAKING of no one using my browser.. XUL isn't the only thing there is Modern Mozilla.. its chief issue beyond all the telemetry and service bs and any semblance of real extensibility was gutted and obliterated one interface at a time over years bug after bug.. Anyway the chief issue with Firefox is its UI decisions from Firefox 4 onward.. Pale Moon's Strata 4 style, australis, photon, whatever it is called today.. all stuff users never wanted or even like.. it is why Mozilla has dropped in marketshare.. Regardless the BASIC interface is important. And I think even a modern browser that is laid out and application feature wise is somewhere between Firefox 2 and 3 .. bonus points if the aesthetic can be revived. I have done some experiments towards that end last year.. While transforming a XUL browser back to something more traditional.. Modern Firefox is a lot harder.. But the experiments showed promise.

[07:25:04.0953] <nsITobin>
just a proof of concept. So I can do what I do to XUL on Modern Firefox as well.. after adapting to the changes..

[07:25:31.0067] <nsITobin>
and netwerk.. the necko lib? it's not that different between then and now.. so my protocol bs could apply on a MODERN BROWSER

[07:27:20.0863] <nsITobin>
* SPEAKING of no one using my browser.. XUL isn't the only thing there is Modern Mozilla.. its chief issue beyond all the telemetry and service bs and any semblance of real extensibility was gutted and obliterated one interface at a time over years bug after bug.. Anyway the chief issue with Firefox is its UI decisions from Firefox 4 onward.. Pale Moon's Strata 4 style, australis, photon, whatever it is called today.. all stuff users never wanted or even like.. it is why Mozilla has dropped in marketshare.. Regardless the BASIC interface is important. And I think even a modern browser that is laid out and application feature wise is somewhere between Firefox 2 and 3 .. bonus points if the aesthetic can be revived. I have done some experiments towards that end last year.. While transforming a XUL browser back to something more traditional isn't that hard.. Modern Firefox is a lot harder.. But the experiments showed promise.

[07:29:45.0035] <nsITobin>
of course my goal would be to get MODERN firefox looking like this: My upcoming xul browser

[07:30:28.0945] <nsITobin>
and there is nothing but gobs of stuff layered on top that is in my way.. Traditional interfaces MIGHT lead to a more traditional web.

[07:30:34.0249] <nsITobin>
How about that?

[07:33:12.0784] <nsITobin>
As far as web applications go.. I like PHP my self with as little javascript as possible.. None is prefered.

[07:34:04.0947] <nsITobin>
it would be flatter on non-win7

[07:34:07.0294] <nsITobin>
of course

[07:34:23.0320] <Colin Alworth>
You‚Äôre using this channel as a text editor, rather than making a single coherent case. When you ‚Äúpause‚Äù and ask for comment but don‚Äôt wait and give the assembled async readers the chance to respond (2-3 days id guess), you are ensuring only that no one will read it. 

[07:35:16.0284] <nsITobin>
I have a lot to express.

[07:35:51.0258] <Colin Alworth>
That doesn‚Äôt make this a good approach, it only alienates potential readers. 

[07:35:53.0320] <nicolo-ribaudo>
I very strongly recommend writing all of this as a blog post and then share the blog post in this channel, rather than sending a hundred messages 

[07:36:10.0031] <Colin Alworth>
This is more like spam than a treatise

[07:36:32.0981] <nsITobin>
Colin Alworth: it is OBVIOUS i know no other means or approach. It is also obvious I am not letting that stop me anymore.. its been fifteen years.

[07:37:10.0763] <Colin Alworth>
If you aren‚Äôt interested in feedback to improve, you clearly won‚Äôt be interested in collaboration, and you‚Äôre asking to be ignored. 

[07:37:38.0006] <nsITobin>
You are holding me to social rules I don't understand. Please stop.

[07:38:54.0090] <nsITobin>
Colin Alworth: I am NOT ignoring your feedback I just don't know what to do with most of it.. I never do.

[07:40:27.0889] <nsITobin>
My alternative was to give those freaks at the Pale Moon project the legitimacy they wanted and that was an unmitigated disaster .. nothing I do or say here about stuff will ever be as bad.

[07:44:39.0375] <nsITobin>
built and transformed them into a model of a mini-mozilla.. multiple applications.. service infrastructure.. the add-ons site.. a fully functional late model XUL platform.. all because of me from a once firefox rebrand..

[07:44:53.0560] <nsITobin>
I have that capability.

[07:47:18.0289] <nsITobin>
Biggest mistake i made was for a long time merely attributing MY accomplishments to the project which made it easier for me to become the scapegoat when not set off as an attack dog.

[07:48:39.0604] <nsITobin>
which is the primary function I am known for not for anything that makes a project at that level possible

[07:48:48.0411] <nsITobin>
multiple projects

[07:49:18.0505] <nsITobin>
with my server i donated use of vs what i got in return.. i am owed 120 dollars still.. but i worked for nothing for a decade

[07:49:33.0516] <nsITobin>
because I don't HAVE the social skills to do anything else

[07:49:49.0866] <nsITobin>
and what ones I did got badly eroded.. I am working on it..

[07:55:07.0128] <nsITobin>
but that 120 is of a total of a sub thousand dollar balance so basically he KINDA paid for his hosting but not all of it.. and nothing. This is money i could have used for food mind you. Same as my servers today that have gone virtually unused for 3 years. I could have cancelled them and had more food.

[07:57:03.0524] <nsITobin>
Yes. I transformed a rebuild into a mini-mozilla for a decade for a thousand dollars. That is my capability.. and all without social skills apperently.

[07:57:19.0096] <nsITobin>
So ignore me if you want i guess. Though it makes me more sad than angry at this point.

[08:04:50.0221] <nsITobin>
I just wonder what I could have done with the 200 million 400 million mozilla was getting every year last decade when I did all that for around a thousand dollars total just with dedication and work plus a server 

[08:05:37.0356] <nsITobin>
that my addition was worth so much then but not worth spit now.

[08:06:01.0490] <nsITobin>
and that the stuff I did do is rotting.

[08:07:26.0164] <nsITobin>
but still props up their credibility in the eyes of their users and the uninformed

[08:34:31.0408] <nsITobin>
I have mentioned embracing XML as an equal web technology, I have mentioned the issue with the monoculture and governance and voting issues.. I have expressed my own opinions, my own accomplishments regardless of how tainted they are, my own realization of my own harm which has little to do with the technology.. and their continued threat as well as the very nature of the WHATWG being a rebel usurping force that may very well have it done to them as well as the personal impacts on my own development and progression through life as the decisions and such filter down to me.

I have also related that I am in no way good at this because it is beyond the technology its self and why and have been honest about everything. If that isn't sufficient. I really can't know what is and that should invoke other things I am entitled to but never does of course.

[08:39:56.0465] <nsITobin>
it isn't all one big rigged system it is thousands of small rigged systems with slightly different rules I understood that before I even disagreed with most of it. It's worse now.

