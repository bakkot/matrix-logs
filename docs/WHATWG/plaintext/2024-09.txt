2024-09-01
[19:22:36.0586] <sideshowbarker>
Anybody know if itâ€™s intentional that thereâ€™s no `ariaRelevant` IDL attribute in https://w3c.github.io/aria/#ARIAMixin?

[19:26:01.0322] <sideshowbarker>
The current spec does define an [`aria-relevant`](https://w3c.github.io/aria/#aria-relevant) content attribute, and at https://w3c.github.io/aria/#idl-reflection-attribute-values the spec says:
> All ARIA attributes reflect in IDL as [nullable](https://webidl.spec.whatwg.org/#dfn-nullable-type) [DOMString](https://webidl.spec.whatwg.org/#idl-DOMString) attributes. This includes the boolean-like [true/false](https://w3c.github.io/aria/#valuetype_true-false) type, and all other ARIA attributes.

[19:27:40.0858] <sideshowbarker>
â€¦and https://wpt.fyi/results/html/dom/aria-attribute-reflection.html has a test for a reflected `ariaRelevant` IDL attribute

[19:28:22.0535] <sideshowbarker>
Soâ€¦ it is just a spec bug/oversight that the spec has no ariaRelevant IDL attribute in https://w3c.github.io/aria/#ARIAMixin?

[19:30:05.0525] <sideshowbarker>
*(And incidentally, is it seriously really the case that the Matrix Element client still provides no per-case way to prevent previews from getting added every time somebody includes a hyperlink in a message?)*

[19:30:51.0707] <sideshowbarker>
 * Soâ€¦ is just a spec bug/oversight that the spec has no ariaRelevant IDL attribute in https://w3c.github.io/aria/#ARIAMixin?

[19:31:52.0759] <sideshowbarker>
 * The current spec does define an [`aria-relevant`](https://w3c.github.io/aria/#aria-relevant) content attribute, and at https://w3c.github.io/aria/#idl-reflection-attribute-values the spec says:

> *All ARIA attributes reflect in IDL as [nullable](https://webidl.spec.whatwg.org/#dfn-nullable-type) [DOMString](https://webidl.spec.whatwg.org/#idl-DOMString) attributes. This includes the boolean-like [true/false](https://w3c.github.io/aria/#valuetype_true-false) type, and all other ARIA attributes.*

[19:32:04.0420] <sideshowbarker>
 * The current spec does define an [`aria-relevant`](https://w3c.github.io/aria/#aria-relevant) content attribute, and at https://w3c.github.io/aria/#idl-reflection-attribute-values the spec says:

> _All ARIA attributes reflect in IDL as [nullable](https://webidl.spec.whatwg.org/#dfn-nullable-type) [DOMString](https://webidl.spec.whatwg.org/#idl-DOMString) attributes. This includes the boolean-like [true/false](https://w3c.github.io/aria/#valuetype_true-false) type, and all other ARIA attributes._
â€¦

[19:32:14.0555] <sideshowbarker>
 * The current spec does define an [`aria-relevant`](https://w3c.github.io/aria/#aria-relevant) content attribute, and at https://w3c.github.io/aria/#idl-reflection-attribute-values the spec says:

> _All ARIA attributes reflect in IDL as [nullable](https://webidl.spec.whatwg.org/#dfn-nullable-type) [DOMString](https://webidl.spec.whatwg.org/#idl-DOMString) attributes. This includes the boolean-like [true/false](https://w3c.github.io/aria/#valuetype_true-false) type, and all other ARIA attributes._
> 
â€¦

[19:32:40.0513] <sideshowbarker>
 * The current spec does define an [`aria-relevant`](https://w3c.github.io/aria/#aria-relevant) content attribute, and at https://w3c.github.io/aria/#idl-reflection-attribute-values the spec says:

> _All ARIA attributes reflect in IDL as [nullable](https://webidl.spec.whatwg.org/#dfn-nullable-type) [DOMString](https://webidl.spec.whatwg.org/#idl-DOMString) attributes. This includes the boolean-like [true/false](https://w3c.github.io/aria/#valuetype_true-false) type, and all other ARIA attributes._


[19:32:51.0823] <sideshowbarker>
 * 
â€¦
and https://wpt.fyi/results/html/dom/aria-attribute-reflection.html has a test for a reflected `ariaRelevant` IDL attribute

[19:41:12.0772] <sideshowbarker>
hmm, it seems that in source at https://github.com/w3c/aria/blob/1d0b8b94120beb6fa36edd54fce1a301ce64930c/index.html#L13584, itâ€™s intentionally commented out

[19:44:40.0146] <sideshowbarker>
seems James Craig commented in out in https://github.com/w3c/aria/commit/646f093848a1943c8343f34ad80f72dbd78f54e6 without explanationâ€¦

[19:45:19.0870] <sideshowbarker>
and cited https://github.com/w3c/aria/issues/1058


2024-09-02
[03:41:46.0772] <smaug>
I wonder how to fix Observables to work with preventDefault(). I think that is a blocker

[08:50:43.0525] <annevk>
smaug: I thought that worked unless you switched to promises?

[08:54:42.0369] <smaug>
exactly, the part of the API using Promises breaks it

[09:02:50.0849] <annevk>
smaug: https://github.com/WICG/observable/issues/170 might also be of interest

[09:50:12.0772] <Yoav Weiss>
I'm working through this [comment](https://github.com/whatwg/html/pull/10528/files/e9188a30c6e0bfb1c163555fed3104d173059364#r1712799332) on the dynamic import maps PR, and I'm realizing that it's not clear to me if the normalized scope prefixes could actually be an absolute URL, and whether that URL could be coming from a different origin/site than the top-level site loading the script. AFAICT the answer to that is yes, but I'm failing to find tests to that effect


2024-09-03
[23:33:33.0924] <freddy>
Very slightly related to import maps. I talked to someone about Subresource Integrity and they complained that `<script src=.. integrity..>` has no declarative fallback to a canonical/fallback URL if the `src` resource doesn't match. E.g., point to CDN for speed but fallback to same-origin resource for robustness. I recall that we cut `fallbacksrc` (name TBD) out of SRI v1 for a couple of reason. The main one I remember is that I was too cautious to break assumptions w/ HTML/XSS sanitizers and other security libraries. Essentially not allowing a "new" XSS vector like `<script src=x integrity=x fallbacksrc=xssurl>`.

[23:34:49.0872] <freddy>
I wonder if fallback-URLs would be an interesting thing to consider for import maps, as their syntax is not in HTML and less likely to break assumptions (because most libraries will block/remove inline `<script>`, likely including those of type import maps)

[04:20:14.0190] <Yoav Weiss>
freddy: I guess that could fit into importmaps somehow, but would only work for modules. At the same time, I'm not sure the use case is worth the complexity. Is this a real issue people are trying to solve for? Can they do that with e.g. onerror handlers that rewrite the `src`?

[04:20:37.0524] <freddy>
they _can_ solve it with onerror handlers, but it requires more script

[04:20:55.0758] <freddy>
(script that needs to load first. stuff you originally set out to put on a CDN)

[04:35:37.0675] <Yoav Weiss>
(beyond that, I don't see the onerror event firing.. https://iron-organic-rainstorm.glitch.me/)

[05:08:23.0566] <freddy>
huh..

[05:29:05.0894] <zcorpan>
Yoav Weiss: I think it should, step 4 in https://html.spec.whatwg.org/#execute-the-script-element , called from https://html.spec.whatwg.org/#script-processing-model:execute-the-script-element-3

[05:30:13.0540] <zcorpan>
(or maybe not called from there, since it's parser inserted)

[05:31:44.0043] <zcorpan>
#parsing-main-incdata:execute-the-script-element

[05:36:34.0978] <zcorpan>
Yoav Weiss: you're not calling the functions :)

[05:38:14.0705] <zcorpan>
with `onerror="errorHandler(event)"` it wfm

[06:29:55.0559] <Yoav Weiss>
ðŸ¤¦

[09:34:34.0066] <govocin165>
Hi, I am wondering what is the rationale behind the difference between`location.href` and `document.URL` when credentials are embedded (e.g. https://foo:bar@example.com). Using the former would return an URl without credentials (http://example.com) and the latter would give me the full URL. My best guess here is that since `Location` object provides developers a way to navigate through links, therefore there are security concerns and credentials need to be redacted. And since browsers treat `Document` as an abstraction for the current web document, the property is readonly and not redacted. Could someone kindly disprove or verify my theory? Thanks in advance!

[09:34:58.0293] <govocin165>
 * Hi, I am wondering what is the rationale behind the difference between `location.href` and `document.URL` when credentials are embedded (e.g. https://foo:bar@example.com). Using the former would return an URl without credentials (http://example.com) and the latter would give me the full URL. My best guess here is that since `Location` object provides developers a way to navigate through links, therefore there are security concerns and credentials need to be redacted. And since browsers treat `Document` as an abstraction for the current web document, the property is readonly and not redacted. Could someone kindly disprove or verify my theory? Thanks in advance!

