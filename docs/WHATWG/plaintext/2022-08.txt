2022-08-01
[19:55:01.0738] <dd perdana2>
hallo  every body

[00:14:51.0336] <Kaiido>
Hello, all.
I just noticed a small typo in a section's id in the DOM specs and am not sure what's the best action (since this is used as link, maybe in many places). The section is https://dom.spec.whatwg.org/#action-versus-occurance I guess fixing it is not worth the trouble of potentially breaking existing links? (The readable text is fine)

[00:16:31.0818] <sideshowbarker>
Howdy Kaiido: it‚Äôs possible to add a new ID while preserving the existing ID

[00:17:38.0519] <Andreu Botella>
Usually ID's are autogenerated from the heading text, at least in Bikeshed, and if this one isn't, it might be because the typo was fixed in the heading but the ID had to stay the same to avoid breaking links

[00:17:51.0798] <Andreu Botella>
 * Usually ID's are autogenerated from the heading text, at least in Bikeshed, and if this one isn't, it might be because the typo was fixed in the heading but the ID had to stay the same to avoid breaking links

[00:18:13.0349] <sideshowbarker>
that particular ID is hardcoded in the source, for some reason

[00:18:25.0821] <Andreu Botella>
I also see British "initialisation" in the ID with American "initialization" in the dfn text sometimes

[00:19:19.0612] <sideshowbarker>
> <@abotella:igalia.com> I also see British "initialisation" in the ID with American "initialization" in the dfn text sometimes

you see that in any WHATWG specs?

[00:19:34.0019] <Kaiido>
Yes I would also have thought https://dom.spec.whatwg.org/#action-versus-occurence would be working but it doesn't.

[00:20:09.0239] <sideshowbarker>
yeah that‚Äôs because of it being hardcoded ‚Äî that overrides the Bikeshed auto-generation

[00:20:47.0798] <sideshowbarker>
but the existing `id=action-versus-occurance` could be moved to a `span` child of that `h3`

[00:21:17.0830] <sideshowbarker>
‚Ä¶and then the Bikeshed auto-generation of the ID on the `h3` will work as expected, and the existing ID will work too

[00:21:25.0334] <Andreu Botella>
> <@sideshowbarker:mozilla.org> you see that in any WHATWG specs?

https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timer-initialisation-steps

[00:21:29.0242] <sideshowbarker>
‚Ä¶I think

[00:21:40.0338] <sideshowbarker>
pretty sure I have actually done that before, in some cases

[00:22:54.0457] <sideshowbarker>
> <@abotella:igalia.com> https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timer-initialisation-steps

ah‚Ä¶ I blame Hixie :) that must have been in there for a long time

[00:24:48.0805] <sideshowbarker>
https://ian.hixie.ch/bible/english

[00:26:11.0084] <sideshowbarker>
but I think Hixie always had the spec as `lang=en-US-hixie` so that _‚Äúinitialisation‚Äù_ would have always been a bug anyway

[04:21:13.0628] <Jake Archibald>
When adding spec data to JS objects, I've seen some people use internal slots, whereas others just say "SomeObject has a <dfn for="SomeObject">thing</dfn>". Is there a 'right' way?

[04:21:38.0558] <Jake Archibald>
I usually just do the latter

[05:24:32.0495] <Jake Archibald>
Also, if a callback is put in an internal slot, does it impact the `this` value in the callback when it's called?

[05:44:46.0926] <Domenic>
I prefer the latter, and am somewhat responsible for introducing the former

[05:45:34.0070] <Domenic>
Is a callback a Web IDL callback, or an algorithm? Web IDL callbacks need to be called with specific thisArgs via https://webidl.spec.whatwg.org/#invoke-a-callback-function

[07:42:37.0177] <Jake Archibald>
It's a WebIDL callback. Ok, I'll move the shared element transition spec away from internal slots

[07:42:41.0671] <Jake Archibald>
ts!

[08:30:34.0210] <Jake Archibald>
 * ta!


2022-08-02
[07:23:42.0119] <smaug>
hmm, I'm having trouble to find which spec defines these days that https: pages can use only wss:, not ws:

[07:35:32.0903] <smaug>
oh, hm, is it now part of 'Mixed Content'

[13:24:13.0532] <bakkot>
does anyone know who officially speaks for Mozilla on decisions like https://github.com/WICG/uuid/issues/23 now? I would like to revisit it given the most recent comment in that thread but I understand annevk left.

[16:25:12.0389] <DerekNonGeneric>
bakkot: maybe arai would either be the person or might know who that would be nowadays (might even be yulia afaik)

[16:29:47.0192] <sideshowbarker>
bakkot: maybe @-mention `martinthomson` (his GitHub user ID) in a https://github.com/WICG/uuid/issues/23 comment


2022-08-03
[00:40:38.0894] <Jake Archibald>
annevk: emilio: Is there anyone at WebKit & Mozilla who'd be interested in joining a sync about shared element transitions? Particularly interested in implementor feedback

[05:54:18.0877] <emilio>
> <@jakea:matrix.org> annevk: emilio: Is there anyone at WebKit & Mozilla who'd be interested in joining a sync about shared element transitions? Particularly interested in implementor feedback

Depending on timing I might be able to join, or I can ask around.

[06:52:04.0909] <Jake Archibald>
emilio: we'll look to time it so you can join üòÄ

[06:53:33.0907] <emilio>
Jake Archibald: Are you looking for feedback in some area in particular? Just in case I need to check with the graphics folks and so on :)

[06:58:34.0802] <Jake Archibald>
emilio: I want to make sure the feature isn't designed "for Chromium". As in, are there changes that could be made to make it easier to implement in Gecko (without compromising developer experience)? Are there parts of the design that you feel currently compromise developer experience due to an implementation detail unique to Chromium. But also I'd just like a general review of the feature from someone familiar with the platform.

[10:10:45.0828] <Rhonnell Hari>
üëçÔ∏è

[10:11:50.0440] <Rhonnell Hari>
Rhonnell Hari: 


2022-08-04
[00:04:12.0735] <Jake Archibald>
I think I've asked this before, but when do we use `abort these steps` vs `return`? I tend to use `abort these steps` where returning a value wouldn't make sense, eg in a queued task, or in parallel. Is that‚Ä¶ right?

[05:59:41.0975] <Domenic>
That's right!


2022-08-06
[18:34:31.0786] <sideshowbarker>
https://stackoverflow.com/questions/73254813/javascript-using-fetch-api-to-send-same-origin-get-request-with-non-null-origin

I think the answer is No, there‚Äôs no way to cause an Origin header to be added to a same-origin GET request. Right?


2022-08-07
[06:02:39.0377] <Noam Rosenthal>
Right, it's a forbidden header, so it's ignored from the Headers JS constructor https://fetch.spec.whatwg.org/#forbidden-header-name


2022-08-08
[02:19:55.0184] <Jake Archibald>
sideshowbarker: `Origin` will be added to same-origin CORS requests

[02:24:11.0753] <Jake Archibald>
 * sideshowbarker: `Origin` will be added to same-origin CORS requests - no, I'm wrong

