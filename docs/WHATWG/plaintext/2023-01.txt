2023-01-02
[16:38:43.0996] <sideshowbarker>
https://stackoverflow.com/questions/74978033/how-should-this-erroneous-html5-be-parsed-where-should-the-end-tag-be-inserte

[00:55:14.0015] <annevk>
jugglinmike: jgraham: can either of you tackle https://github.com/w3c/webdriver-bidi/issues/347?

[01:00:25.0469] <annevk>
kblom3: frank-dspeed: while we're not super strict regarding what is on and off topic, this channel is generally intended for discussions about web standards, and primarily WHATWG standards.

[02:18:21.0506] <frank-dspeed>
i guess your correct i am still struggling with correcting my mind model but your right it was my failure this channel is only about WHATWG related stuff not about internet or web or browsers and WHATWG is a standard that is open to get used by people who like it and ignored by people who do not agree with it 

[02:19:51.0228] <frank-dspeed>
i want to apologice for that it is really a missconception in my mind because as i was a kid i expected internet to be equal to WHATWG 

[02:20:58.0635] <frank-dspeed>
and that was still holding me back i need to pray to my self that browsers are not related to whatwg as it is a indipendent free standard without any affilation to real world

[02:32:38.0355] <frank-dspeed>
the real world is equal to the browsers dom api's and HTML is just a syntax that can get translated to it so it is a declarativ instruction set a language not more not less 

[02:33:42.0210] <frank-dspeed>
frameworks like react circumvent the WHATWG standard total while still use the term html which is maybe also missleading

[03:36:27.0610] <Andreu Botella>
I'm currently setting up a personal blog, and I thought I'd cross-publish my post from the WHATWG blog on newline normalization in forms (https://blog.whatwg.org/newline-normalizations-in-form-submission)

[03:36:29.0531] <Andreu Botella>
and as part of that, I noticed there's a code sample in that post that uses the `DataTransfer` hack for setting an `<input type="file">`'s file list, with no explanation

[03:37:38.0106] <Andreu Botella>
I don't have edit permissions, but it'd be great to add even a one-line comment like
```js
// This is a hack to add files to an <input type="file"> from JS.
```

[03:38:10.0161] <Andreu Botella>
 * I'm currently setting up a personal blog, and I thought I'd cross-publish my post from the WHATWG blog on newline normalization in forms (https://blog.whatwg.org/newline-normalizations-in-form-submission)

[07:49:56.0397] <annevk>
Domenic: is putting effort into https://github.com/whatwg/url/pull/502 worth it? Would you implement it in whatwg-url?


2023-01-03
[17:58:51.0456] <Domenic>
annevk: I was thinking of doing it as a holiday project... and I still have 8 days of holiday in Japan. So, probably?

[17:59:46.0329] <Domenic>
"doing it" = "adding full validation error support to jsdom/whatwg-url"

[18:00:02.0317] <Domenic>
Which could then be extended pretty easily with named variants

[00:27:49.0056] <Noam Rosenthal>
annevk: with getting the "internal response" - do I need to do something like "if this is a filtered response, getting response's internal response, otherwise response" 

[00:31:35.0981] <Noam Rosenthal>
ok answered on the issue, thanks :)

[00:35:19.0403] <annevk>
Noam Rosenthal: if you find a place where that would be useful we should upstream HTML's unsafe response (perhaps if it's really useful for HTML we should do that anyway, but I still need to convince myself)

[00:36:05.0856] <Noam Rosenthal>
annevk: gotcha, will take a look

[00:55:19.0606] <annevk>
smaug: emilio: did you see my ping in https://github.com/whatwg/fullscreen/issues/149? If you all are still on break feel free to ignore, I'll try to remember to ping again

[02:17:23.0644] <emilio>
annevk: Yeah I think while retargetting would make some amount of sense, it's not really useful for fullscreen/pip

[02:18:09.0391] <frank-dspeed>
what was the exact usecase of shadow dom?

[02:18:25.0117] <frank-dspeed>
css encapsulating, offering slots?

[02:18:34.0557] <frank-dspeed>
what was the main driver does any one know that?

[02:21:29.0316] <frank-dspeed>
i mean i never used it for any usefull use case only for demos when i import css as ESModule so a CSSDeclaration Object and Object.assign(el.style, cssDeclaration)

[02:21:44.0550] <frank-dspeed>
i get cached compose able css that is applyed directly on the element

[02:22:48.0273] <frank-dspeed>
much less to write no id tag clashing nothing i do not even use ID or class when i programatical create html Elements a combo of document.create object.assign gives me total declarativ js syntax to compose elements and styles

[02:23:44.0804] <frank-dspeed>
i write whole app dependent component frameworks in less then 20 lines of code and complex elements with a lot of events like whole IDE Environments in 50 sloc

[02:26:45.0102] <frank-dspeed>
```js
const createComponent = (el = {}, componentDefinition = {}) => {
    Object.assign(el.style, componentDefinition.style);
    Object.keys(componentDefinition).filter((key) => key !== 'style')
        .forEach((key) => (el[key] = componentDefinition[key]));
    return el;
};
const appendNewComponent = (el,tagName, componentDefinition) => el.appendChild(
    createComponent(createElement(tagName),componentDefinition));

// End framework
    const controls = el.appendChild(document.createElement('ul'));          
    appendNewComponent(controls, 'button', { innerText: `${getChildIndex(el)}|+`, onclick: (ev) => {
        el.parentElement.appendChild(new Notebook());
    }, style: { color: "red" } }); 

 appendNewComponent(controls, 'input', { onclick: (ev) => {}, placeholder: `https://.....js`, value: ``, style: { color: "red" } });
    appendNewComponent(controls, 'button', { onclick: (ev) => {}, innerText: `FETCH`, style: { color: "red" } });
```

