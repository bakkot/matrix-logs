2023-12-01
[16:14:09.0970] <akaster>
> <@annevk:matrix.org> akaster: https://docs.google.com/presentation/d/1hi4gH7pJPHsg_hnIj77XN_ce54HIaNUnBLenVwohFVo/edit#slide=id.g5641ecbac9_0_131 might help for the high-level idea.

To supplement this I've started writing down my understanding of how this is all supposed to fit together and how we're going to map the spec to Ladybird here, beginning with the JS concepts: https://github.com/SerenityOS/serenity/pull/22107/files

[19:34:54.0364] <ntim>
zcorpan: https://github.com/web-platform-tests/wpt/pull/43463/ 

[19:36:04.0366] <ntim>
Note that Firefox wrongly supports unordered list styles on ordered lists and vice-versa

[21:44:47.0778] <Domenic>
The history of people trying to spec ol/ul/li styling using CSS is very fraught... I think Firefox got furthest but IIRC it still had lots of edge cases. Things like start and reverse really stress the system.

[22:29:24.0768] <annevk>
akaster: looks pretty solid, the one piece I'm missing is an explicit callout that the reason we have agents (and not just realms and realm clusters) is because of deficiencies in early web platform design where Window objects could manipulate each other directly through various <iframe> and popup APIs

[22:30:00.0312] <annevk>
akaster: although maybe you're planning on covering that in the TODO section, heh

[09:14:11.0645] <smaug>
jarhar: are the current ideas for https://github.com/whatwg/html/issues/9799 written down somewhere, or perhaps some simple examples of what it would look like?

[09:14:23.0325] <smaug>
I definitely do like the idea of reusing existing elements

[10:40:58.0673] <Eric Portis (he/him)>
zcorpan: I'm trying to write about sizes=auto, and confusing myself. If you hadn't tried to do anything with "concrete size ignoring natural dimensions" and had just used current clientWidth, would it have been racy/cyclical? It feels like "obviously yes" but in the cases I'm working through, the intrinsic dimensions stay locked to whatever the initial extrinsic dimensions were, because of the density-correction mechanism.

[10:42:13.0876] <Eric Portis (he/him)>
 * zcorpan: I'm trying to write about sizes=auto, and confusing myself. If you hadn't tried to do anything with "concrete size ignoring natural dimensions" and had just used current clientWidth, would it have been racy/cyclical? It feels like "obviously yes" but in the cases I'm working through, the intrinsic dimensions stay locked to whatever the initial extrinsic dimensions were (or 0x0 if there were no extrinsic dimensions), because of the density-correction mechanism.

[12:30:53.0501] <Dominic Farolino>
The link element's disabled IDL attribute reflects the content attribute of the same name, whereas the style's disabled IDL attribute has no such content attribute. What principles in general decide whether we should reflect or not?

[12:32:35.0535] <akaster>
I actually didn't know that was the reason why, but it definitely makes sense. Agents feel like a bit of a strange abstraction over realms 

[12:44:48.0101] <Eric Portis (he/him)>
@zcorpan: https://gist.github.com/eeeps/a469258ba387d3c8300f12248ed52032

[13:07:25.0588] <Eric Portis (he/him)>
 * zcorpan: https://gist.github.com/eeeps/a469258ba387d3c8300f12248ed52032


2023-12-02
[22:53:49.0788] <annevk>
akaster: yeah, they only exist because of that and in new "agents" such as workers agents and realms are 1:1

[22:54:26.0620] <annevk>
akaster: having said that, I just remembered TC39 is working on ShadowRealm, which I guess brings the property of 1:N to all agents


2023-12-03
[16:57:57.0565] <Domenic>
> <@domfarolino:matrix.org> The link element's disabled IDL attribute reflects the content attribute of the same name, whereas the style's disabled IDL attribute has no such content attribute. What principles in general decide whether we should reflect or not?

Every content attribute needs to have a reflecting IDL attribute. The other way around is not relevant; there are lots of APIs which are not related to the DOM.

[16:58:16.0480] <Domenic>
The inconsistency between link and style is unfortunate, but the whole disabled feature in general has never felt very well thought out to me.

[17:21:13.0454] <emilio>
Yeah HTMLLinkElement.disabled was a compat requirement (an IEism iirc?)

[17:22:02.0379] <emilio>
https://github.com/whatwg/html/issues/3840 has a lot of that background

[17:22:45.0559] <emilio>
Firefox was consistent before ^ ftr

[05:40:25.0458] <Dominic Farolino>
> there are lots of APIs which are not related to the DOM.

So "related to the DOM" means having a content attribute then?

[05:41:46.0429] <Dominic Farolino>
If someone introduces an IDL attribute, but also wants to trigger the underlying behavior without script, then they'd have to have it reflect a content attribute with the same name. Is that a good enough "justification" / reason for doing that.

[05:42:17.0394] <Dominic Farolino>
It seems like "wanting to do things that you can do with an IDL attribute, but without JS" is the big motivation for wanting to reflect an IDL attribute?


2023-12-04
[19:36:04.0271] <Domenic>
> <@domfarolino:matrix.org> > there are lots of APIs which are not related to the DOM.
> 
> So "related to the DOM" means having a content attribute then?

By "related to the DOM" I mean "related to the structure of nodes and attributes, i.e. the DOM tree"

[19:36:46.0580] <Domenic>
> <@domfarolino:matrix.org> If someone introduces an IDL attribute, but also wants to trigger the underlying behavior without script, then they'd have to have it reflect a content attribute with the same name. Is that a good enough "justification" / reason for doing that.

I would work the other way around. Content attributes first; if they exist you automatically get an IDL attribute. If you don't need a content attribute then you are just doing normal JS API design.

[19:37:34.0515] <Domenic>
> <@domfarolino:matrix.org> It seems like "wanting to do things that you can do with an IDL attribute, but without JS" is the big motivation for wanting to reflect an IDL attribute?

No, the motivation is wanting to do things in JS, slightly easier and more idiomatically. Without IDL attribute reflection: `el.setAttribute("foo", "")`. With IDL attribute reflection: `el.foo = true`.

[02:34:51.0212] <zcorpan>
Thanks for the heads-up!

[02:41:00.0360] <zcorpan>
Eric Portis (he/him): I think the main issue is when the w and the image's actual width don't match. Let's say in your example "a" actual width is 4 pixels, then the layout width becomes 2px after loading the image, which would cause the next image to load, etc.

[02:43:15.0741] <zcorpan>
Eric Portis (he/him): a proposed alternative fix iirc was to stop the "loop" after the second load, but based on prior feedback about double downloads I think it's not acceptable to have double downloads even if it only happens sometimes

[02:46:35.0914] <zcorpan>
Eric Portis (he/him): the other reason is to make it look wrong when not using width/height attributes (or have dimensions with css). Otherwise people might omit dimensions and we would likely double-download in such cases without size containment

[02:48:06.0936] <zcorpan>
Eric Portis (he/him): I suspect size containment for images will be more annoying, and that's unfortunate but I hope acceptable!

[06:20:41.0214] <Dominic Farolino>
> If you don't need a content attribute then you are just doing normal JS API design.

This is the part I'm curious about. I just don't really know when you would "need" a content attribute vs just stick with JS API design on the element's IDL interface. If someone says "I want to introduce a new 'attribute' on this element", then they've two options: (1) content attribute with automatic IDL reflection, vs (2) just IDL attribute, for a JS API. I'm not clear on how to provide guidance to select between those two. I would need to ask them a question relating to "If you need/don't need a content attribute" above. So I guess I'd ask "Can this just be a JS API on the element's interface, or do you need it to also be a content attribute". But to "need a content attribute" (i.e., an IDL attribute alone is insufficient) means your design desires to trigger the attribute's behavior without script... I think.. like just from HTML.

[06:58:19.0984] <annevk>
Dominic Farolino: I think usually it would become pretty clear, pretty fast

[07:27:26.0670] <Eric Portis (he/him)>
zcorpan: Thanks! The incorrect w attribute thing makes sense; looks like you suggested a fix for exactly that here https://github.com/whatwg/html/issues/9448#issuecomment-1611905790 (damn my memory)... but... seems like containment just felt cleaner from a spec/implementation perspective. An explicit severing of any possible way intrinsic size will or could ever influence layout size.

[07:27:51.0578] <jarhar>
the current idea as i would like it is to do whats in the explainer here but reuse the select element instead of creating a selectlist element: https://open-ui.org/components/selectlist/

[07:28:25.0152] <jarhar>
oh and it seems likely that we will reuse the datalist element instead of creating a listbox element

[07:28:50.0926] <jarhar>
so basically if you provide a <button> child to a select element, that will be slotted in to the default button and replace it

[07:29:06.0391] <jarhar>
same with the datalist element replacing the native/default listbox

[08:49:54.0517] <zcorpan>
Eric Portis (he/him): right. Especially the case where the image's final width depends on the image's intrinsic height seems tricky to make stable without size containment


2023-12-05
[16:47:26.0478] <Domenic>
> <@domfarolino:matrix.org> > If you don't need a content attribute then you are just doing normal JS API design.
> 
> This is the part I'm curious about. I just don't really know when you would "need" a content attribute vs just stick with JS API design on the element's IDL interface. If someone says "I want to introduce a new 'attribute' on this element", then they've two options: (1) content attribute with automatic IDL reflection, vs (2) just IDL attribute, for a JS API. I'm not clear on how to provide guidance to select between those two. I would need to ask them a question relating to "If you need/don't need a content attribute" above. So I guess I'd ask "Can this just be a JS API on the element's interface, or do you need it to also be a content attribute". But to "need a content attribute" (i.e., an IDL attribute alone is insufficient) means your design desires to trigger the attribute's behavior without script... I think.. like just from HTML.

Yes, your last sentence is correct.

[16:48:03.0304] <Domenic>
In general HTML elements are designed as HTML first; the fact that they have JS APIs is an interesting addition in some cases.

[16:48:25.0029] <Domenic>
But if you just want a JS API then you can just design a JS API. Maybe even not tied to a HTML element at all.

[19:56:41.0058] <sirisian>
Has anyone ever suggested allowing an element to exist in two places in the dom tree? Like a <slot> that can point to another node? I have vague memories of reading about this over a decade ago before web components. Seems more feasible now though.

[23:06:17.0132] <annevk>
sirisian: we could use it for `<select>`, but it's more of a CSS feature I'd think

[09:45:22.0351] <sirisian>
@annevk That's exactly what I've always needed it for. I have thousands of drop downs and code to deduplicates such picker options. My code would be very elegant if I could just point to their options and not move stuff around manually.

[14:51:46.0047] <sirisian>
> <@annevk:matrix.org> sirisian: we could use it for `<select>`, but it's more of a CSS feature I'd think

How did you envision those working? Thinking of trying to make a very basic proposal. "display: contents; contents: #foo;" I foresee two modes. #foo tag is slotted and another mode where #foo's children are slotted. So "contents: #foo" and "contents: #foo / children;" Not sure on the syntax.

[14:51:57.0667] <sirisian>
> <@annevk:matrix.org> sirisian: we could use it for `<select>`, but it's more of a CSS feature I'd think

 * How did you envision that working? Thinking of trying to make a very basic proposal. "display: contents; contents: #foo;" I foresee two modes. #foo tag is slotted and another mode where #foo's children are slotted. So "contents: #foo" and "contents: #foo / children;" Not sure on the syntax.

[15:34:50.0926] <emilio>
That raises a lot of questions about all sorts of APIs. Lots of things assume an element has one principal box. E.g. how does something like getBoundingClientRect() behave?

[15:35:29.0245] <emilio>
Not trying to discourage necessarily, just pointing out that it's probably a bigger challenge than it seems 


2023-12-06
[19:28:46.0238] <sirisian>
You're completely right. Writing up some examples and running into design issues, so I'll continue thinking about it.

[19:31:03.0248] <sirisian>
emilio: Oh your name sounded familiar. I was just reading your comment the other day when I made this issue: https://github.com/WICG/webcomponents/issues/1038

[22:55:37.0709] <sirisian>
https://github.com/sirisian/slottedelements I think this would work for me. Any less ad-hoc solutions?

