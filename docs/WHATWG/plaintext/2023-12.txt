2023-12-01
[16:14:09.0970] <akaster>
> <@annevk:matrix.org> akaster: https://docs.google.com/presentation/d/1hi4gH7pJPHsg_hnIj77XN_ce54HIaNUnBLenVwohFVo/edit#slide=id.g5641ecbac9_0_131 might help for the high-level idea.

To supplement this I've started writing down my understanding of how this is all supposed to fit together and how we're going to map the spec to Ladybird here, beginning with the JS concepts: https://github.com/SerenityOS/serenity/pull/22107/files

[19:34:54.0364] <ntim>
zcorpan: https://github.com/web-platform-tests/wpt/pull/43463/ 

[19:36:04.0366] <ntim>
Note that Firefox wrongly supports unordered list styles on ordered lists and vice-versa

[21:44:47.0778] <Domenic>
The history of people trying to spec ol/ul/li styling using CSS is very fraught... I think Firefox got furthest but IIRC it still had lots of edge cases. Things like start and reverse really stress the system.

[22:29:24.0768] <annevk>
akaster: looks pretty solid, the one piece I'm missing is an explicit callout that the reason we have agents (and not just realms and realm clusters) is because of deficiencies in early web platform design where Window objects could manipulate each other directly through various <iframe> and popup APIs

[22:30:00.0312] <annevk>
akaster: although maybe you're planning on covering that in the TODO section, heh

[09:14:11.0645] <smaug>
jarhar: are the current ideas for https://github.com/whatwg/html/issues/9799 written down somewhere, or perhaps some simple examples of what it would look like?

[09:14:23.0325] <smaug>
I definitely do like the idea of reusing existing elements

[10:40:58.0673] <Eric Portis (he/him)>
zcorpan: I'm trying to write about sizes=auto, and confusing myself. If you hadn't tried to do anything with "concrete size ignoring natural dimensions" and had just used current clientWidth, would it have been racy/cyclical? It feels like "obviously yes" but in the cases I'm working through, the intrinsic dimensions stay locked to whatever the initial extrinsic dimensions were, because of the density-correction mechanism.

[10:42:13.0876] <Eric Portis (he/him)>
 * zcorpan: I'm trying to write about sizes=auto, and confusing myself. If you hadn't tried to do anything with "concrete size ignoring natural dimensions" and had just used current clientWidth, would it have been racy/cyclical? It feels like "obviously yes" but in the cases I'm working through, the intrinsic dimensions stay locked to whatever the initial extrinsic dimensions were (or 0x0 if there were no extrinsic dimensions), because of the density-correction mechanism.

[12:30:53.0501] <Dominic Farolino>
The link element's disabled IDL attribute reflects the content attribute of the same name, whereas the style's disabled IDL attribute has no such content attribute. What principles in general decide whether we should reflect or not?

[12:32:35.0535] <akaster>
I actually didn't know that was the reason why, but it definitely makes sense. Agents feel like a bit of a strange abstraction over realms 

[12:44:48.0101] <Eric Portis (he/him)>
@zcorpan: https://gist.github.com/eeeps/a469258ba387d3c8300f12248ed52032

[13:07:25.0588] <Eric Portis (he/him)>
 * zcorpan: https://gist.github.com/eeeps/a469258ba387d3c8300f12248ed52032


2023-12-02
[22:53:49.0788] <annevk>
akaster: yeah, they only exist because of that and in new "agents" such as workers agents and realms are 1:1

[22:54:26.0620] <annevk>
akaster: having said that, I just remembered TC39 is working on ShadowRealm, which I guess brings the property of 1:N to all agents


2023-12-03
[16:57:57.0565] <Domenic>
> <@domfarolino:matrix.org> The link element's disabled IDL attribute reflects the content attribute of the same name, whereas the style's disabled IDL attribute has no such content attribute. What principles in general decide whether we should reflect or not?

Every content attribute needs to have a reflecting IDL attribute. The other way around is not relevant; there are lots of APIs which are not related to the DOM.

[16:58:16.0480] <Domenic>
The inconsistency between link and style is unfortunate, but the whole disabled feature in general has never felt very well thought out to me.

[17:21:13.0454] <emilio>
Yeah HTMLLinkElement.disabled was a compat requirement (an IEism iirc?)

[17:22:02.0379] <emilio>
https://github.com/whatwg/html/issues/3840 has a lot of that background

[17:22:45.0559] <emilio>
Firefox was consistent before ^ ftr

[05:40:25.0458] <Dominic Farolino>
> there are lots of APIs which are not related to the DOM.

So "related to the DOM" means having a content attribute then?

[05:41:46.0429] <Dominic Farolino>
If someone introduces an IDL attribute, but also wants to trigger the underlying behavior without script, then they'd have to have it reflect a content attribute with the same name. Is that a good enough "justification" / reason for doing that.

[05:42:17.0394] <Dominic Farolino>
It seems like "wanting to do things that you can do with an IDL attribute, but without JS" is the big motivation for wanting to reflect an IDL attribute?


2023-12-04
[19:36:04.0271] <Domenic>
> <@domfarolino:matrix.org> > there are lots of APIs which are not related to the DOM.
> 
> So "related to the DOM" means having a content attribute then?

By "related to the DOM" I mean "related to the structure of nodes and attributes, i.e. the DOM tree"

[19:36:46.0580] <Domenic>
> <@domfarolino:matrix.org> If someone introduces an IDL attribute, but also wants to trigger the underlying behavior without script, then they'd have to have it reflect a content attribute with the same name. Is that a good enough "justification" / reason for doing that.

I would work the other way around. Content attributes first; if they exist you automatically get an IDL attribute. If you don't need a content attribute then you are just doing normal JS API design.

[19:37:34.0515] <Domenic>
> <@domfarolino:matrix.org> It seems like "wanting to do things that you can do with an IDL attribute, but without JS" is the big motivation for wanting to reflect an IDL attribute?

No, the motivation is wanting to do things in JS, slightly easier and more idiomatically. Without IDL attribute reflection: `el.setAttribute("foo", "")`. With IDL attribute reflection: `el.foo = true`.

[02:34:51.0212] <zcorpan>
Thanks for the heads-up!

[02:41:00.0360] <zcorpan>
Eric Portis (he/him): I think the main issue is when the w and the image's actual width don't match. Let's say in your example "a" actual width is 4 pixels, then the layout width becomes 2px after loading the image, which would cause the next image to load, etc.

[02:43:15.0741] <zcorpan>
Eric Portis (he/him): a proposed alternative fix iirc was to stop the "loop" after the second load, but based on prior feedback about double downloads I think it's not acceptable to have double downloads even if it only happens sometimes

[02:46:35.0914] <zcorpan>
Eric Portis (he/him): the other reason is to make it look wrong when not using width/height attributes (or have dimensions with css). Otherwise people might omit dimensions and we would likely double-download in such cases without size containment

[02:48:06.0936] <zcorpan>
Eric Portis (he/him): I suspect size containment for images will be more annoying, and that's unfortunate but I hope acceptable!

[06:20:41.0214] <Dominic Farolino>
> If you don't need a content attribute then you are just doing normal JS API design.

This is the part I'm curious about. I just don't really know when you would "need" a content attribute vs just stick with JS API design on the element's IDL interface. If someone says "I want to introduce a new 'attribute' on this element", then they've two options: (1) content attribute with automatic IDL reflection, vs (2) just IDL attribute, for a JS API. I'm not clear on how to provide guidance to select between those two. I would need to ask them a question relating to "If you need/don't need a content attribute" above. So I guess I'd ask "Can this just be a JS API on the element's interface, or do you need it to also be a content attribute". But to "need a content attribute" (i.e., an IDL attribute alone is insufficient) means your design desires to trigger the attribute's behavior without script... I think.. like just from HTML.

[06:58:19.0984] <annevk>
Dominic Farolino: I think usually it would become pretty clear, pretty fast

[07:27:26.0670] <Eric Portis (he/him)>
zcorpan: Thanks! The incorrect w attribute thing makes sense; looks like you suggested a fix for exactly that here https://github.com/whatwg/html/issues/9448#issuecomment-1611905790 (damn my memory)... but... seems like containment just felt cleaner from a spec/implementation perspective. An explicit severing of any possible way intrinsic size will or could ever influence layout size.

[07:27:51.0578] <jarhar>
the current idea as i would like it is to do whats in the explainer here but reuse the select element instead of creating a selectlist element: https://open-ui.org/components/selectlist/

[07:28:25.0152] <jarhar>
oh and it seems likely that we will reuse the datalist element instead of creating a listbox element

[07:28:50.0926] <jarhar>
so basically if you provide a <button> child to a select element, that will be slotted in to the default button and replace it

[07:29:06.0391] <jarhar>
same with the datalist element replacing the native/default listbox

[08:49:54.0517] <zcorpan>
Eric Portis (he/him): right. Especially the case where the image's final width depends on the image's intrinsic height seems tricky to make stable without size containment


2023-12-05
[16:47:26.0478] <Domenic>
> <@domfarolino:matrix.org> > If you don't need a content attribute then you are just doing normal JS API design.
> 
> This is the part I'm curious about. I just don't really know when you would "need" a content attribute vs just stick with JS API design on the element's IDL interface. If someone says "I want to introduce a new 'attribute' on this element", then they've two options: (1) content attribute with automatic IDL reflection, vs (2) just IDL attribute, for a JS API. I'm not clear on how to provide guidance to select between those two. I would need to ask them a question relating to "If you need/don't need a content attribute" above. So I guess I'd ask "Can this just be a JS API on the element's interface, or do you need it to also be a content attribute". But to "need a content attribute" (i.e., an IDL attribute alone is insufficient) means your design desires to trigger the attribute's behavior without script... I think.. like just from HTML.

Yes, your last sentence is correct.

[16:48:03.0304] <Domenic>
In general HTML elements are designed as HTML first; the fact that they have JS APIs is an interesting addition in some cases.

[16:48:25.0029] <Domenic>
But if you just want a JS API then you can just design a JS API. Maybe even not tied to a HTML element at all.

[19:56:41.0058] <sirisian>
Has anyone ever suggested allowing an element to exist in two places in the dom tree? Like a <slot> that can point to another node? I have vague memories of reading about this over a decade ago before web components. Seems more feasible now though.

[23:06:17.0132] <annevk>
sirisian: we could use it for `<select>`, but it's more of a CSS feature I'd think

[09:45:22.0351] <sirisian>
@annevk That's exactly what I've always needed it for. I have thousands of drop downs and code to deduplicates such picker options. My code would be very elegant if I could just point to their options and not move stuff around manually.

[14:51:46.0047] <sirisian>
> <@annevk:matrix.org> sirisian: we could use it for `<select>`, but it's more of a CSS feature I'd think

How did you envision those working? Thinking of trying to make a very basic proposal. "display: contents; contents: #foo;" I foresee two modes. #foo tag is slotted and another mode where #foo's children are slotted. So "contents: #foo" and "contents: #foo / children;" Not sure on the syntax.

[14:51:57.0667] <sirisian>
> <@annevk:matrix.org> sirisian: we could use it for `<select>`, but it's more of a CSS feature I'd think

 * How did you envision that working? Thinking of trying to make a very basic proposal. "display: contents; contents: #foo;" I foresee two modes. #foo tag is slotted and another mode where #foo's children are slotted. So "contents: #foo" and "contents: #foo / children;" Not sure on the syntax.

[15:34:50.0926] <emilio>
That raises a lot of questions about all sorts of APIs. Lots of things assume an element has one principal box. E.g. how does something like getBoundingClientRect() behave?

[15:35:29.0245] <emilio>
Not trying to discourage necessarily, just pointing out that it's probably a bigger challenge than it seems 


2023-12-06
[19:28:46.0238] <sirisian>
You're completely right. Writing up some examples and running into design issues, so I'll continue thinking about it.

[19:31:03.0248] <sirisian>
emilio: Oh your name sounded familiar. I was just reading your comment the other day when I made this issue: https://github.com/WICG/webcomponents/issues/1038

[22:55:37.0709] <sirisian>
https://github.com/sirisian/slottedelements I think this would work for me. Any less ad-hoc solutions?

[02:28:29.0516] <Ms2ger>
Looking at [delta traverse](https://html.spec.whatwg.org/multipage/nav-history-apis.html#delta-traverse) from [#6315](https://github.com/whatwg/html/pull/6315), if delta is zero, should we run both step 3 "reload" and step 4 "Traverse the history by a delta"? Before #6315, we seem to have had an early return there. CC Domenic  Jake Archibald 

[02:30:05.0255] <Domenic>
> <@ms2ger:igalia.com> Looking at [delta traverse](https://html.spec.whatwg.org/multipage/nav-history-apis.html#delta-traverse) from [#6315](https://github.com/whatwg/html/pull/6315), if delta is zero, should we run both step 3 "reload" and step 4 "Traverse the history by a delta"? Before #6315, we seem to have had an early return there. CC Domenic  Jake Archibald 

Definitely a bug, thanks. PR or issue appreciated.

[02:30:27.0717] <Ms2ger>
Will do, thx

[02:35:43.0856] <Ms2ger>
https://github.com/whatwg/html/pull/9980

[13:59:27.0295] <akaster>
In the transfer steps for message ports (https://html.spec.whatwg.org/multipage/web-messaging.html#message-ports:transfer-steps), is there any actual implementation steps intended for step 2 to transfer a task source? My interpretation at the moment is that all this is saying is that on the other end, when you reconstitute the message port, to make sure to set up a task source for it.

Or is it possible that there are pending messages at the time you transfer the message port, and those messages should be stashed and delivered to JavaScript on the other side? 

[14:00:00.0407] <akaster>
Does anyone actually write code like that? postMessage to a message port, and then transfer the message port, expecting the message to be received on the other end?


2023-12-07
[23:54:51.0869] <annevk>
akaster: I suspect what happens in practice is that folks forward the remaining tasks

[23:57:21.0931] <annevk>
akaster: although I suppose here a queue is really just a list underneath so you might as well copy the list of tasks all at once, hmm

[23:58:26.0584] <akaster>
In the case of a message port, would all the tasks just be serialized data ready to be deserialized in some arbitrary realm?

[23:58:53.0316] <annevk>
And this could happen when you have some kind of capability-based system as Ian envisioned when he wrote this up. You pass your message port out, but whoever receiving it might pass it along to someone else, but at the same time it starts getting incoming messages.

[23:59:17.0846] <annevk>
akaster: yeah.

[00:00:10.0837] <akaster>
Hmm ok. I guess we can make that work. Still no barriers to allowing process-barriers between workers and windows yet 😸

[00:19:00.0973] <sirisian>
https://github.com/WICG/proposals/issues/131 Updated with a real proposal. Anyone want to fundamentally change DOM?

[00:36:45.0143] <Kaiido>
annevk: I'm looking at adding the historical tests for `commit()` into WPT as you suggested, however I find [html/canvas](https://github.com/web-platform-tests/wpt/tree/master/html/canvas) quite messy there with a mix of manual and auto-generated tests and an *element*/*offscreen* segregation. So I'm not sure where it would be best to add this. Do you think directly in `html/canvas` is just-fine™?
For reference, another such test might be needed for the `scrollPathIntoView` method, removed in https://github.com/whatwg/html/pull/8229 which would concern only *element*, though that one never had any implementation.

[00:47:34.0012] <Kaiido>
For the record, I believe I might do this sometimes: I often use a MessageChannel as a way to start various Promise based communication channels with a single multi-task worker. The first one will thus start the worker, ask to transfer its MessagePort and send a first message into the port synchronously. But if I'm not mistaken, the transferring of the port will actually be done asynchronously, once the worker is ready, and thus after I sent the first message to the port.

[01:08:59.0017] <annevk>
Kaiido: yes html/canvas/historical.any.js (not sure what environments you need, adjust extension accordingly) would be just fine

[01:09:05.0357] <annevk>
(tm)

[01:10:15.0409] <annevk>
Kaiido: and I think adding `scrollPathIntoView` seems reasonable, though perhaps with a comment that it's prolly safe to reuse that name if we wanted to

[15:04:07.0763] <TabAtkins>
annevk: btw, tiny markup fix in <https://github.com/whatwg/url/pull/808> ahead of me cutting a new Bikeshed release that'll start flagging it as an error. 

[15:04:25.0667] <TabAtkins>
(There might be more similar ones coming from me in a few minutes, I'm running thru all the WHATWG specs since they're easy.)


2023-12-08
[01:18:28.0892] <keithamus>
annevk & Domenic I believe https://github.com/whatwg/html/pull/9965 and https://github.com/whatwg/html/pull/9963 are the last 2 PRs before we can close https://github.com/whatwg/html/issues/9832.

[01:22:53.0758] <Domenic>
Sorry, I've been slammed with end of year stuff, and am now taking a short vacation. Hopefully next week!

[03:05:47.0196] <annevk>
keithamus: merged the first, left a nit on the second

[03:05:57.0266] <keithamus>
Thank you kindly

[03:06:10.0600] <keithamus>
Enjoy the vacation Domenic!


2023-12-10
[12:21:41.0537] <Cayden Nguyen>
Hi!

[13:55:35.0302] <Cayden Nguyen>
Nice to meet you!


2023-12-11
[06:37:24.0804] <chargeitall>
When I click on the rd-token> or n-token> links, they do not anchor to their respective definitions. Here is the link to the webpage where this issue is occurring: https://www.w3.org/TR/css-syntax-3/#error-handling.

[07:30:46.0031] <chargeitall>
 * I am trying to get my head used to read dry technical documentation and got stuck here 👉When I click on the rd-token> or n-token> links, they do not anchor to their respective definitions. Here is the link to the webpage where this issue is occurring: https://www.w3.org/TR/css-syntax-3/#error-handling.

[09:11:06.0193] <chargeitall>
> <@chargeitall:matrix.org> I am trying to get my head used to read dry technical documentation and got stuck here 👉When I click on the rd-token> or n-token> links, they do not anchor to their respective definitions. Here is the link to the webpage where this issue is occurring: https://www.w3.org/TR/css-syntax-3/#error-handling.

I figured it out. the ADHD reading extension using bionic reading format omitted the characters  before n-token

[09:19:05.0706] <TabAtkins>
Oh, how strange. I wonder why it's cutting things off like that.

[09:31:22.0637] <chargeitall>
it could be that the extension was originally for chrome. I deleted it and replaced it with similar extension dedicated to edge as this is the browser I am using and this resolved the issue

[09:31:55.0726] <chargeitall>
 * it could be that the extension was originally for chrome. I deleted it and replaced it with similar extension dedicated to edge as this is the browser, I am using of which the later resolved the issue.


2023-12-12
[01:25:44.0895] <chargeitall>
does mdn web doc discord channel work on element?

[05:37:18.0141] <Ms2ger>
annevk: would you take a PR to add `<div algorithm>` to some or all algorithms in DOM (no promises when I might have time, but the lack of them means that variable highlighting doesn't work)

[08:13:09.0681] <annevk>
Ms2ger: yes, see Fetch for my preferred style

[11:53:46.0628] <akaster>
Is it correct to assume that the kind of  "requirement on callers" listed here is discouraged for future specs/spec updates? https://html.spec.whatwg.org/multipage/structured-data.html#performing-structured-clones-from-other-specifications

> Call sites that are not invoked as a result of author code synchronously calling into a user agent method must take care to properly prepare to run script and prepare to run a callback before invoking StructuredSerialize, StructuredSerializeForStorage, or StructuredSerializeWithTransfer abstract operations, if they are being performed on arbitrary objects.

[11:54:39.0220] <akaster>
And following that, is there any kind of tracking issue for places that "should be" updated to explicitly manipulate the surrounding agent's execution context stack?

[11:57:48.0102] <akaster>
As a side note, it seems that Domenic's navigation apis will do that sort of "deferred structured serialize" mentioned in the second example if a navigation history entry needs its history API state serialized/deserialized "in parallel" or on the traversal task source 🤔

[12:01:37.0991] <akaster>
Or maybe it was from a webidl callback context in the WaitForAll in navigation history event processing 🤔🤔. I'll have to revive my branch implementing that

[12:38:39.0646] <akaster>
I think we also ran into this kind of implicit execution context stack issue within the module loading implementation, though that was mostly Andreas this month

[12:41:34.0974] <TabAtkins>
Hm, why would you think it's discouraged? It's useful to know what implicit assumptions an algorithm makes, when relevant, which might affect how you can/should call it.

