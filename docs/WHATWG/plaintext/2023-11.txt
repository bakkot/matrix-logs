2023-11-01
[05:51:48.0976] <keithamus>
To clarify, the conclusion is that CustomStateSet _shouldnt_ validate, and should allow setting states that are not valid productions within the CSS?

[05:51:58.0423] <keithamus>
 * To clarify, the conclusion is that CustomStateSet _shouldnt_ validate, and should allow setting states that are not valid productions within the CSS? annevk smaug 

[06:19:43.0943] <annevk>
keithamus: As I tried to explain, it's not that straightforward. The API doesn't take a CSS identifier. It just takes a string. So the API accepts "1", but you can only match that in CSS writing "\31". And so yeah, no validation would be the same as `getElementById()` and seems like reasonable behavior.

[06:21:09.0333] <keithamus>
Thanks for the clarification annevk. Your explanation has been sufficient, I just wanted to double check so I can remove the checks in the PRs I'm making üòÑ

[06:24:26.0485] <annevk>
keithamus: ooh, you're implementing this? Cool cool cool.

[06:26:07.0937] <keithamus>
I should have clarified my motivation for querying, it may have helped. But yes https://phabricator.services.mozilla.com/D191988#inline-1067489 and a very much WIP https://github.com/WebKit/WebKit/compare/main...keithamus:WebKit:custom-state-set


2023-11-02
[05:42:39.0154] <bilal adnan>
I have a question regarding `<main>` and `<article>`

[05:46:03.0808] <bilal adnan>
Let's say I have a blog article page. Should the main content be labeled with `<main>` or `<article>`? I personally feel `<main>` is a better choice but I am confused in one thing.

<main> can't be nested inside any <article> element, as per the WHATWG HTML standard, to be **hierarchically correct**. But because the main content of the article should go in <main>, why would anyone want to use <article> for the main content of the article. I guess the HTML standard showcases such an example.

[05:46:28.0575] <bilal adnan>
 * Let's say I have a blog article page. Should the main content be labeled with `<main>` or `<article>`? I personally feel `<main>` is a better choice but I am confused in one thing.


`<main>` can't be nested inside any \<article> element, as per the WHATWG HTML standard, to be **hierarchically correct**. But because the main content of the article should go in \<main>, why would anyone want to use \<article> for the main content of the article. I guess the HTML standard showcases such an example.

[05:46:39.0762] <bilal adnan>
 * Let's say I have a blog article page. Should the main content be labeled with `<main>` or `<article>`? I personally feel `<main>` is a better choice but I am confused in one thing.

`<main>` can't be nested inside any \<article> element, as per the WHATWG HTML standard, to be **hierarchically correct**. But because the main content of the article should go in `<main>`, why would anyone want to use `<article>` for the main content of the article. I guess the HTML standard showcases such an example.

[05:51:53.0133] <bilal adnan>
 * Let's say I have a blog article page. Should the main content be labeled with `<main>` or `<article>`? I personally feel `<main>` is a better choice but I am confused in one thing.

Why would anyone want to use `<article>` for the main content of the article. I guess the HTML standard showcases such an example and that confuses me.

[07:53:27.0095] <annevk>
sideshowbarker: sorry, I didn't realize lang-related changes around `slot` were also being reverted

[13:05:43.0857] <sideshowbarker>
> <@annevk:matrix.org> sideshowbarker: sorry, I didn't realize lang-related changes around `slot` were also being reverted

No worries ‚Äî it gave me a chance to go in and read through the spec PRs and related issue comments, and to figure out what it looked like in some actual code. So it was some good learning for me, and I reckon what I learned from it is very likely to be useful for me with some other patch later

[15:34:18.0458] <sideshowbarker>
So I‚Äôm looking at the test at https://github.com/WebKit/WebKit/blob/main/LayoutTests/http/tests/security/xss-DENIED-script-inject-into-inactive-window2.html#L42 and trying to figure out some way to detect that the ‚Äúvictim‚Äù content has loaded ‚Äî other than by checking `location.href`

What that tests does is this:
1. Creates an `a` link
2. Sets the link‚Äôs `target` to `_blank`
3. Sets the link‚Äôs `rel` value to opener
4. Sets the link‚Äôs `href` to `?actually-attack`
5. Clicks the link (with `link.click()`)

The, after the navigation to `?actually-attack` happens:

1. Creates another `a` link
2. Sets the link‚Äôs `target` to `_self`
3. Sets the link‚Äôs `href` to `http://localhost:8000/security/resources/innocent-victim.html`
4. Clicks the link (with `link.click()`)

So I want to figure out a way to detect when the `http://localhost:8000/security/resources/innocent-victim.html` content has loaded.




2023-11-03
[14:26:05.0180] <TabAtkins>
zcorpan: ping on https://github.com/w3c/csswg-drafts/issues/9301

[16:15:45.0419] <annevk>
TabAtkins: FWIW, it's really when you invoke https://url.spec.whatwg.org/#concept-url-parser that you don't pass a third argument

[16:19:51.0739] <TabAtkins>
...oh, huh, I think I finally understand. I didn't realize URLs were, by definition, made of ASCII and percent-encoded bytes; I assumed that after parsing they were codepoints.

[16:20:15.0652] <annevk>
TabAtkins: they are code points, just all of them are ASCII :-)

[16:20:46.0306] <TabAtkins>
right, I mean non-ascii codepoints are turned into ascii codepoints via %-encoding, as part of the underlying value of the URL

[16:20:49.0230] <annevk>
TabAtkins: I kinda redundantly left that remark in the issue as well for other onlookers as well as that we're experimenting with this in WebKit

[16:20:55.0966] <TabAtkins>
rather than as a late "serialize this URL" step

[16:22:29.0488] <annevk>
Yeah makes sense. One of those things we might do differently if it were designed today.

[16:29:42.0757] <TabAtkins>
Hm, I might drop a PR to reword the note in the URL spec to make that clearer; I did not imagine it would be designed that way.


2023-11-07
[05:42:06.0383] <chargeitall>
Why have you chosen not to include the :fullscreen CSS pseudo-class among other CSS pseudo-classes in this link https://html.spec.whatwg.org/multipage/semantics-other.html#pseudo-classes, despite dedicating a page to the fullscreen API here https://fullscreen.spec.whatwg.org/?

[05:44:49.0817] <annevk>
chargeitall: it's defined in https://fullscreen.spec.whatwg.org/#:fullscreen-pseudo-class already, no need to define it twice

[05:46:46.0639] <chargeitall>
Would you omit :checked from the html multipage if it had its own page?

[06:11:01.0943] <chargeitall>
I am inquiring about excluding the :fullscreen pseudo-class from being listed next to other CSS pseudo-classes. It could be listed with a brief description, and the user can click for a more in-depth understanding. Is there another reason for excluding it as there are excluded CSS pseudo-classes e.g. :first-child or :current that were not defined as the case with the Fullscreen API.

[06:19:02.0215] <annevk>
Some pseudo-classes don't require a definition in the host language as they're host-agnostic, though CSS isn't great about differentiating between the two kinds.

[07:36:29.0984] <chargeitall>
The WHATWG focuses on various technologies that are essential components of the web platform. Is this why there is no specific CSS standard? Does this imply that if I want to discover a new CSS feature, I should depend on W3C/CSSWG instead of WHATWG? like the ones in the Candidate Recommendation TRs?

[07:40:49.0052] <annevk>
chargeitall: the web platform is made up of a variety of standards created by a variety of standards organizations. Depending on where your interests lie, you may have to pay attention to WHATWG, Unicode, W3C (includes the CSS WG), Ecma (TC39 in particular), CA/Browser Forum, Khronos, AOM, etc.

[12:31:13.0680] <meacer>
annevk: Friendly ping on https://github.com/whatwg/fetch/pull/1655 when you have a chance


2023-11-08
[01:19:51.0938] <annevk>
meacer: done, I still see the same fundamental design so I'm not really sure if my feedback around HTTP fetch vs HTTP-network fetch was understood

[01:20:45.0508] <annevk>
meacer: happy to try review quickly if you also address the comments somewhat quickly

[04:54:24.0468] <kareem jadou>
kareemjadou@gmail.com 

[07:18:38.0412] <smaug>
Yoav Weiss: What is the lifetime management for LargestContentfulPaint's initial element reference?

[07:18:48.0406] <smaug>
Is that supposed to be strong or weak?

[07:19:20.0252] <smaug>
(I'm not talking about the getter, that is separate thing and may return null even if the internal element is non-null)

[07:21:23.0203] <smaug>
Ah, there is a note later in the spec

[07:25:23.0685] <smaug>
That probably should be described in some algorithm 


2023-11-09
[23:15:20.0269] <meacer>
> <@annevk:matrix.org> meacer: happy to try review quickly if you also address the comments somewhat quickly

Thank you. I resolved the non-structural comments. As for the HTTP fetch vs HTTP-network fetch, I did misunderstand your previous comments (thought you were referring to why were modifying Main fetch). It looks like I can move the fallback handling to somewhere before step 23 of network-or-cache fetch (that is, before any cache handling is done). I'll look into doing that, if that makes sense.

[23:55:48.0387] <annevk>
meacer: in that case you can probably put it directly in HTTP-network fetch?

[00:01:19.0534] <annevk>
meacer: because the early cache lookup in 25 is very specific and I don't think ends up applying here

[00:32:43.0324] <freddy>
Great to see such speedy reviews and patch feedback loops on HTTPS Upgrades.  I'm curious about the answers to my questions about a) redirects and b) IP addresses in the hostname

[00:45:49.0667] <annevk>
So if we do this in HTTP-network fetch it would be way before redirects are handled. Not sure if that answers your question or not.

[00:46:17.0769] <annevk>
meacer: do we have any kind of cross-browser testing story for this feature?

[01:16:59.0797] <freddy>
The tests linked from the pull requests are just https://github.com/web-platform-tests/wpt/tree/master/https-upgrades/tentative.

[01:48:14.0255] <annevk>
I see, I'm not sure there is a lot more that can be tested as most everything else is handled by Mixed Content presumably

[02:27:46.0993] <freddy>
Redirects? :)

[09:27:35.0690] <meacer>
freddy: Sorry, I wasn't ignoring your comments, just wanted to ask the team about the IP addresses first  :) We had a "non-unique hostnames" exception in the first draft (e.g. site.test etc) which presumably covered IP addresses. But it might be a good idea to spell out IP addresses explicitly.

[09:28:18.0972] <meacer>
As for the tests, I have an additional SW related WPT that I'll land for this.

[09:33:21.0357] <meacer>
Could probably write one for redirects as well

[11:35:14.0643] <freddy>
Would be great. If you don't, we will ;)


2023-11-10
[20:57:20.0931] <akaster>
referencing <https://github.com/whatwg/html/issues/9920> is it the case that all 3 major engines use separate processes for Shared/ServiceWorkers but keep DedicatedWorkers in the same process as the renderer, just in different threads? 

[20:59:35.0458] <akaster>
I was hoping to start implementing DedicatedWorkers in Ladybird assuming that any worker type would "always" have its own process (until there's too many processes and we have to start sharing etc etc). Which would mean we can keep covering our ears and pretend that the thread-unsafety of LibWeb/LibJS can wait until 'later' still. 

[21:01:31.0915] <akaster>
Per the issue, Domenic:  was saying his understanding was that that's not a good idea because of the requirements for SharedArrayBuffers in the ECMAScript spec. 

[21:03:59.0581] <Domenic>
> <@akaster:serenityos.org> referencing <https://github.com/whatwg/html/issues/9920> is it the case that all 3 major engines use separate processes for Shared/ServiceWorkers but keep DedicatedWorkers in the same process as the renderer, just in different threads?

Correct, I think. At least definitely correct for dedicated workers in same process; not sure if shared and service are process-isolated everywhere.

[21:06:23.0963] <akaster>
Hmm all right.. well, we'll have to handle distinct realms existing in the same process to handle window.open, so handling separate agents (called VM, in our implementation) is probably not going to be too far from that. I'm mostly worried about the places where we still reach out to the "main thread VM" Singleton.. would be nice to always know which agent we're working with though.

[21:54:07.0919] <Domenic>
same-origin window.open, but also same-origin iframes

[22:41:13.0892] <Jake Archibald>
HTML properties seem inconsistent when it comes to throwing or silently ignoring invalid values. Is either of those seen as the "right way" these days?

[23:26:46.0546] <Jake Archibald>
* HTML property setters seem inconsistent when it comes to throwing or silently ignoring invalid values. Is either of those seen as the "right way" these days?

[23:35:53.0554] <annevk>
Jake Archibald: methods generally throw, setters generally ignore (and then the getter continues to return the same value); this is somewhat enforced by enums

[23:36:10.0644] <annevk>
 * Jake Archibald: methods generally throw, setters generally ignore (and then the getter continues to return the same value); this is somewhat enforced for enums

[23:39:26.0563] <annevk>
I guided someone to follow the "new feature" template a bit more closely and https://github.com/whatwg/dom/issues/1233 is quite understandable now in terms of what it's trying to achieve. Hopefully it continues to work that well.

[23:45:36.0897] <Jake Archibald>
> <@annevk:matrix.org> Jake Archibald: methods generally throw, setters generally ignore (and then the getter continues to return the same value); this is somewhat enforced for enums

So things like `valueAsDate` throwing on, say, a range input, is that breaking convention, or is it correct by some other rule?

[23:46:46.0406] <Jake Archibald>
https://html.spec.whatwg.org/multipage/input.html#dom-input-valueasdate

[23:50:37.0921] <annevk>
Jake Archibald: I think `valueAsDate` is breaking several conventions; doesn't it return a new object each time you invoke the getter?

[23:51:05.0832] <Jake Archibald>
Ohh that's a good point

[23:51:30.0848] <annevk>
Jake Archibald: having said that, I guess I'm not entirely sure about what the convention is for non-enums, but I wouldn't base precedent on `valueAsDate`.

[00:19:33.0584] <Domenic>
I'm not sure setters ignoring is really best practice, but I admit not thinking too hard about it...

[00:19:50.0790] <Domenic>
In JS itself there are some cases where setters throw in strict mode and ignore in sloppy mode, IIRC.

[00:51:25.0915] <chargeitall>
Is this anchor meant to serve as a placeholder to describe the grammar and lexical scanner? https://www.w3.org/TR/css-syntax-3/#placement

[02:13:09.0289] <annevk>
Domenic: https://github.com/WICG/observable/issues/71#issuecomment-1804956795 say we had this "new thing", couldn't you refactor `EventListener` in terms of that?

[02:14:40.0864] <Domenic>
> <@annevk:matrix.org> Domenic: https://github.com/WICG/observable/issues/71#issuecomment-1804956795 say we had this "new thing", couldn't you refactor `EventListener` in terms of that?

Probably, as long as we had the same sort of abstraction layer for turning raw JS functions into this new thing. (Which I am not sure I would otherwise add... although maybe, I dunno.)

[02:15:56.0227] <annevk>
Domenic: well that could also be the overload, provided Web IDL gets support for that

[02:16:44.0625] <annevk>
Domenic: but thanks, that confirms my suspicion that these patterns are in fact identical

[02:17:32.0735] <Domenic>
It's a bit tricky because it seems like the use cases are:

- Streams: need to grab a property eagerly, need to grab methods to call later
- Custom elements: needs to be a constructor, need  to grab properties eagerly, need to grab its *prototype* methods to call later
- EventListener: need to grab a single method eagerly, or convert an incoming JS function into a wrapper around that method. Only one function/method so it's kind of nicer if you don't have to specify the method name.
- Observable, maybe: need to grab methods to call later, or convert an incoming JS function into a wrapper around one of the specific method.

[02:18:31.0030] <Domenic>
Unifying streams & EventListener & observable-maybe seems doable, with minor tradeoffs in syntax that make one case nicer than others.

[02:19:18.0438] <Domenic>
Custom elements is probably too wacky, although you might want to design both at once and share as much infrastructure & syntax as possible.

[02:19:57.0322] <Domenic>
Oh right, what do worklets need... I think they're the same as custom elements?

[02:21:27.0127] <Domenic>
Yes, or at least PaintWorklet is

[02:23:55.0242] <annevk>
Does kind of have strong "callback interface" vibes

[02:25:03.0466] <Domenic>
I dunno, I think you're forgetting how weird and Java-ey callback interfaces were. E.g. the constants, the legacy callback interface object stuff. They definitely didn't have dictionary-type semantics for properties, which is what we'd want here.

[02:25:25.0044] <Domenic>
I guess I would say "callback dictionary" is what we want, vs. "callback interface"

[02:26:26.0794] <annevk>
True, `NodeFilter` still exists btw

[02:44:34.0064] <annevk>
akaster: using a process as agent boundary seems interesting, but also quite bad for perf? The idea is that a document and its dedicated workers end up in a single agent cluster. Which can be 1:1 with a process, but even that you might not want to do as you'd get many processes that way too. Existing user agents typically share multiple agent clusters in a single process.

[02:45:50.0569] <annevk>
akaster: also note that you can have multiple realms/globals within a single agent with `<iframe>` too, not just `window.open()`.

[09:07:48.0439] <akaster>
I think there's many lower hanging fruit for perf than process boundaries in our implementation at the moment. I think the isolation possibilities are a lot more interesting at the moment. And we don't even support SharedArrayBuffers yet üòÖ. From my reading of the JS spec it seems like there's no reason we *couldn't* do it that way, but perhaps some of the total ordering will force us to put all the agents in an agent cluster in one memory space in the future

[09:08:04.0333] <akaster>
* I think there's many lower hanging fruit for perf than process boundaries in our implementation at the moment. I think the isolation possibilities are a lot more interesting as well. And we don't even support SharedArrayBuffers yet üòÖ. From my reading of the JS spec it seems like there's no reason we *couldn't* do it that way, but perhaps some of the total ordering will force us to put all the agents in an agent cluster in one memory space in the future

[09:08:21.0159] <akaster>
* I think there's many lower hanging fruit for perf than process boundaries in our implementation at the moment. I think the isolation possibilities are a lot more interesting as well. And we don't even support SharedArrayBuffers yet üòÖ. From my reading of the JS spec it seems like there's no reason we *couldn't* do it that way, but perhaps some of the total ordering constraints will force us to put all the agents in an agent cluster in one memory space in the future

