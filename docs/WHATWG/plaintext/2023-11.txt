2023-11-01
[05:51:48.0976] <keithamus>
To clarify, the conclusion is that CustomStateSet _shouldnt_ validate, and should allow setting states that are not valid productions within the CSS?

[05:51:58.0423] <keithamus>
 * To clarify, the conclusion is that CustomStateSet _shouldnt_ validate, and should allow setting states that are not valid productions within the CSS? annevk smaug 

[06:19:43.0943] <annevk>
keithamus: As I tried to explain, it's not that straightforward. The API doesn't take a CSS identifier. It just takes a string. So the API accepts "1", but you can only match that in CSS writing "\31". And so yeah, no validation would be the same as `getElementById()` and seems like reasonable behavior.

[06:21:09.0333] <keithamus>
Thanks for the clarification annevk. Your explanation has been sufficient, I just wanted to double check so I can remove the checks in the PRs I'm making üòÑ

[06:24:26.0485] <annevk>
keithamus: ooh, you're implementing this? Cool cool cool.

[06:26:07.0937] <keithamus>
I should have clarified my motivation for querying, it may have helped. But yes https://phabricator.services.mozilla.com/D191988#inline-1067489 and a very much WIP https://github.com/WebKit/WebKit/compare/main...keithamus:WebKit:custom-state-set


2023-11-02
[05:42:39.0154] <bilal adnan>
I have a question regarding `<main>` and `<article>`

[05:46:03.0808] <bilal adnan>
Let's say I have a blog article page. Should the main content be labeled with `<main>` or `<article>`? I personally feel `<main>` is a better choice but I am confused in one thing.

<main> can't be nested inside any <article> element, as per the WHATWG HTML standard, to be **hierarchically correct**. But because the main content of the article should go in <main>, why would anyone want to use <article> for the main content of the article. I guess the HTML standard showcases such an example.

[05:46:28.0575] <bilal adnan>
 * Let's say I have a blog article page. Should the main content be labeled with `<main>` or `<article>`? I personally feel `<main>` is a better choice but I am confused in one thing.


`<main>` can't be nested inside any \<article> element, as per the WHATWG HTML standard, to be **hierarchically correct**. But because the main content of the article should go in \<main>, why would anyone want to use \<article> for the main content of the article. I guess the HTML standard showcases such an example.

[05:46:39.0762] <bilal adnan>
 * Let's say I have a blog article page. Should the main content be labeled with `<main>` or `<article>`? I personally feel `<main>` is a better choice but I am confused in one thing.

`<main>` can't be nested inside any \<article> element, as per the WHATWG HTML standard, to be **hierarchically correct**. But because the main content of the article should go in `<main>`, why would anyone want to use `<article>` for the main content of the article. I guess the HTML standard showcases such an example.

[05:51:53.0133] <bilal adnan>
 * Let's say I have a blog article page. Should the main content be labeled with `<main>` or `<article>`? I personally feel `<main>` is a better choice but I am confused in one thing.

Why would anyone want to use `<article>` for the main content of the article. I guess the HTML standard showcases such an example and that confuses me.

[07:53:27.0095] <annevk>
sideshowbarker: sorry, I didn't realize lang-related changes around `slot` were also being reverted

[13:05:43.0857] <sideshowbarker>
> <@annevk:matrix.org> sideshowbarker: sorry, I didn't realize lang-related changes around `slot` were also being reverted

No worries ‚Äî it gave me a chance to go in and read through the spec PRs and related issue comments, and to figure out what it looked like in some actual code. So it was some good learning for me, and I reckon what I learned from it is very likely to be useful for me with some other patch later

[15:34:18.0458] <sideshowbarker>
So I‚Äôm looking at the test at https://github.com/WebKit/WebKit/blob/main/LayoutTests/http/tests/security/xss-DENIED-script-inject-into-inactive-window2.html#L42 and trying to figure out some way to detect that the ‚Äúvictim‚Äù content has loaded ‚Äî other than by checking `location.href`

What that tests does is this:
1. Creates an `a` link
2. Sets the link‚Äôs `target` to `_blank`
3. Sets the link‚Äôs `rel` value to opener
4. Sets the link‚Äôs `href` to `?actually-attack`
5. Clicks the link (with `link.click()`)

The, after the navigation to `?actually-attack` happens:

1. Creates another `a` link
2. Sets the link‚Äôs `target` to `_self`
3. Sets the link‚Äôs `href` to `http://localhost:8000/security/resources/innocent-victim.html`
4. Clicks the link (with `link.click()`)

So I want to figure out a way to detect when the `http://localhost:8000/security/resources/innocent-victim.html` content has loaded.




2023-11-03
[14:26:05.0180] <TabAtkins>
zcorpan: ping on https://github.com/w3c/csswg-drafts/issues/9301

[16:15:45.0419] <annevk>
TabAtkins: FWIW, it's really when you invoke https://url.spec.whatwg.org/#concept-url-parser that you don't pass a third argument

[16:19:51.0739] <TabAtkins>
...oh, huh, I think I finally understand. I didn't realize URLs were, by definition, made of ASCII and percent-encoded bytes; I assumed that after parsing they were codepoints.

[16:20:15.0652] <annevk>
TabAtkins: they are code points, just all of them are ASCII :-)

[16:20:46.0306] <TabAtkins>
right, I mean non-ascii codepoints are turned into ascii codepoints via %-encoding, as part of the underlying value of the URL

[16:20:49.0230] <annevk>
TabAtkins: I kinda redundantly left that remark in the issue as well for other onlookers as well as that we're experimenting with this in WebKit

[16:20:55.0966] <TabAtkins>
rather than as a late "serialize this URL" step

[16:22:29.0488] <annevk>
Yeah makes sense. One of those things we might do differently if it were designed today.

[16:29:42.0757] <TabAtkins>
Hm, I might drop a PR to reword the note in the URL spec to make that clearer; I did not imagine it would be designed that way.

