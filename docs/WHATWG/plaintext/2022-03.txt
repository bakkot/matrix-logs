2022-03-01
[07:35:57.0792] <ntim>
annevk: Thanks for the review! I wonder if I should remove "The user agent may ignore the node for the purposes of text search
   (commonly known as "find in page")." altogether. No implementation currently does this (unless aria-hidden nodes are ignored in some contexts).

[08:22:55.0849] <ntim>
annevk: also, about "This data-x-href needs to move to where the other data-x-hrefs are.", where are the other data-x-hrefs typically?

[08:23:11.0862] <Ms2ger ðŸ’‰ðŸ’‰>
"dependencies" section?

[08:23:50.0586] <ntim>
ah makes sense thank you

[08:45:15.0888] <annevk>
ntim: I don't have a strong opinion, how do UAs deal with it then? Wouldn't searching result in selection?

[09:00:50.0182] <ntim>
annevk: searching results in highlighting, not necessarily selection

[09:02:15.0852] <ntim>
(anyway, I addressed all your comments)

[09:06:22.0020] <annevk>
Ah yeah, for some reason I thought you could copy-and-paste the currently highlighted one, but that's not a thing

[09:06:41.0343] <annevk>
Still might be frustrating if you can search and find, but not select and copy

[09:11:59.0901] <annevk>
Thanks ntim! Reviewed again. I suspect we'll wait with landing until next week btw as it's a somewhat big change so Domenic should probably be around.

[09:17:15.0774] <ntim>
> Can you edit without selection? Are execCommand() calls prohibited? How does this actually affect the Selection API, come to think of it?

Not sure how to spec this formally aside from this matches `user-select: none` + `-webkit-user-modify: readonly`

[09:17:26.0094] <ntim>
annevk: ^

[09:18:38.0726] <ntim>
https://github.com/web-platform-tests/wpt/blob/master/inert/inert-and-contenteditable.tentative.html

[09:18:59.0453] <ntim>
it would be like execCommand on a non-editable node

[09:19:37.0294] <ntim>
I guess it would reasonable to reference user-select

[09:21:49.0042] <annevk>
That would help. Do we have some tests around this? Creating a Selection object and trying to assign it nodes from an inert tree?

[09:22:28.0896] <annevk>
It's unfortunate none of these specs are defined to that level of detail, but I guess making it clear they should behave the same is a start...

[09:22:37.0199] <annevk>
emilio thoughts on the above?

[09:22:47.0489] <ntim>
https://github.com/web-platform-tests/wpt/blob/master/inert/inert-node-is-unselectable.tentative.html

[09:22:59.0121] <ntim>
uses execCommand("selectAll")

[09:29:21.0228] <ntim>
annevk: The "The user agent may ignore the node for the purposes of text search (commonly known as
   "find in page")." bit, is there more from an a11y standpoint I think, e.g. inert should behave like aria-hidden

[09:29:46.0993] <ntim>
and the UA may choose to ignore aria-hidden nodes from text search if they want

[09:30:05.0180] <annevk>
Okay, let's keep it then, no?

[09:30:05.0359] <ntim>
(It was there before my PR fwiw)

[09:30:10.0595] <ntim>
sounds good

[09:36:30.0987] <ntim>
annevk: I clarified the bits around editing and selection

[09:42:46.0084] <annevk>
ntim: cool, looks good to me modulo nit about using data-x="" instead of dfn

[09:43:36.0723] <ntim>
annevk: <code data-x=""> by itself seems to complain too

[09:45:05.0055] <ntim>
like "none" needs to be defined at least once

[09:45:06.0480] <ntim>
Error: missing <dfn> for topic "inert-css-property-value-none" from 2 sites including explicitly from <code> element containing "none"; previous heading contents are "6.3 Inert subtrees"
Error: missing <dfn> for topic "inert-css-property-value-none" from 2 sites including explicitly from <code> element containing "none"; previous heading contents are "6.3 Inert subtrees"
Error count: 2


[09:47:20.0309] <annevk>
ntim: that means you still use `inert-css-property-value-none` somewhere

[09:47:35.0921] <annevk>
ntim: instead you should have `<code data-x="">none</code>`

[09:48:09.0237] <ntim>
oh empty string

[09:50:15.0748] <ntim>
thanks! that does seem to work

[09:53:06.0886] <ntim>
annevk: something I was wondering is putting the "blocked by a modal dialog" stuff in its own subsection before or after the "inert attribute" one.

[09:53:35.0016] <ntim>
but it's fine as it is too I guess

[09:56:25.0188] <annevk>
/me looks

[09:58:33.0456] <annevk>
ntim: up to you, I agree it could work

[10:00:04.0787] <annevk>
I wonder if inert only applying to Text/Element has implications elsewhere; I guess Text includes CDATASection and Comment/ProcessingInstruction/ShadowRoot are never rendered, so it prolly doesn't matter

[10:55:11.0201] <Seirdy>
(not asking to ask, just asking for future reference) is WCAG discussion relevant here, or is there a better place? doesn't have to be on matrix.

[11:03:03.0641] <aja>
> <@seirdy:seirdy.one> (not asking to ask, just asking for future reference) is WCAG discussion relevant here, or is there a better place? doesn't have to be on matrix.

perhaps ask in https://matrix.to/#/#accessibility:mozilla.org 

[11:10:17.0049] <Seirdy>
thanks, might have some questions later today

[13:06:12.0240] <Domenic>
Yoav Weiss: Noam Rosenthal : what is the cross-origin redirects case for unload timing protecting against? It's basically saying if you go x.com -> y.com --redirects to-> x.com/bar, x.com/bar does not get unload timing for x.com. Why? No information about y.com leaked.

[13:08:24.0291] <Domenic>
Hmm maybe it's because unloadTimeEnd is an absolute time so you can use it to infer how much time was spent on y.com by comparing it to x.com/bar load time.

[13:43:09.0203] <Noam Rosenthal>
> <@domenicdenicola:matrix.org> Yoav Weiss: Noam Rosenthal : what is the cross-origin redirects case for unload timing protecting against? It's basically saying if you go x.com -> y.com --redirects to-> x.com/bar, x.com/bar does not get unload timing for x.com. Why? No information about y.com leaked.

Itâ€™s a good question,I think itâ€™s superfluous. Not sure this protection exists in implementations, will check tomorrow. Since itâ€™s the same origin the unload time is anyway known as x.com can save performance.now() somewhere and send it over to be used by x.com/bar

[13:43:24.0958] <Domenic>
Yeah...

[13:43:32.0306] <Domenic>
Thanks for checking!

[13:51:28.0172] <Doug Conmy>
Is there a way to determine if a company (aka Entity) is a whatwg participant/member?   
    That is, they have signed the agreement,  https://participate.whatwg.org/agreement , and have a point of contact.

I am trying to find out internally in my orgnaization, but if this information is public, or if I could ask a member to check, that could save some time in hunting down the right person from my end.

[14:16:33.0141] <Domenic>
> <@dconmy:matrix.org> Is there a way to determine if a company (aka Entity) is a whatwg participant/member?   
>     That is, they have signed the agreement,  https://participate.whatwg.org/agreement , and have a point of contact.
> 
> I am trying to find out internally in my orgnaization, but if this information is public, or if I could ask a member to check, that could save some time in hunting down the right person from my end.

Ctrl+F through https://github.com/whatwg/participant-data/blob/main/entities.json

[14:41:26.0296] <shu>
got a webidl question: i can't seem to find the definition of what it means "to convert a sequence of values of type T to an ECMAScript value", like in step 1 here: https://webidl.spec.whatwg.org/#es-frozen-array

[14:43:42.0995] <Mattias Buelens>
> <@shuyuguo:matrix.org> got a webidl question: i can't seem to find the definition of what it means "to convert a sequence of values of type T to an ECMAScript value", like in step 1 here: https://webidl.spec.whatwg.org/#es-frozen-array

That should be in https://webidl.spec.whatwg.org/#es-sequence

[14:45:41.0730] <shu>
tyvm


2022-03-02
[17:07:46.0284] <sideshowbarker>
annevk: https://stackoverflow.com/questions/71311305/how-to-prevent-safari-from-dropping-the-authorization-header-when-following-a-re
> Safari seems to drop the `Authorization` header when following a [same-origin] 301 redirect... Chrome (98) and Firefox (97) both follow the redirect and include the `Authorization` header in the subsequent `GET` request.

Wonder what behavior the spec requires here

[17:09:09.0809] <sideshowbarker>
and https://stackoverflow.com/questions/57974176/safari-does-not-persist-the-authorization-header-on-redirect is another 2-year-old question about the same thing

[21:12:15.0255] <Noam Rosenthal>
> <@domenicdenicola:matrix.org> Yoav Weiss: Noam Rosenthal : what is the cross-origin redirects case for unload timing protecting against? It's basically saying if you go x.com -> y.com --redirects to-> x.com/bar, x.com/bar does not get unload timing for x.com. Why? No information about y.com leaked.

I checked, and the specific scenario (same->cross->same redirect, check that unload is not available) is tested in WPT and passes all 3 browsers... https://github.com/web-platform-tests/wpt/blob/master/navigation-timing/unload-event-same-origin-check.html#L57
https://wpt.fyi/results/navigation-timing/unload-event-same-origin-check.html?label=experimental&label=master&aligned

[21:13:09.0653] <Noam Rosenthal>
to me it seems like an unnecessary security measure or I don't understand it. Yoav Weiss ?

[21:35:56.0574] <Yoav Weiss>
It's possible that this is overly strict. It used to be TAO protected and have the same rules as TAO, but at some point we realized that it's not really protecting anything (it's not the origin which information was exposed that was opting in), so moved to a same origin check. The same=>cross=>same scenario was one that we protected against in TAO, so maybe that logic sticked around through the move to same origin checks.

[21:37:30.0182] <Yoav Weiss>
Maybe annevk has reasons as to why we should keep it, but I tend to agree with y'all that if the previous origin is the same as the destination origin, we could expose the data 

[23:48:27.0553] <annevk>
I think Referer and Sec-Fetch-Site are impacted so I think this ought to be impacted as well. What might leak is if y.com does a further redirect based on a cookie. Now x.com could conspire with subsequent x.com, but given that Referer and Sec-Fetch-Site are impacted it might not entirely be clear whether it's the result of a redirect or a subsequent visit. Especially with more navigation tracking mitigation down the line.

[23:48:42.0817] <annevk>
Noam Rosenthal: Yoav Weiss: Domenic: ^^

[23:48:57.0667] <annevk>
 * I think Referer and Sec-Fetch-Site are impacted so I think this ought to be impacted as well. What might leak is if y.com does a further redirect based on a cookie. Now x.com could conspire with subsequent x.com, but given that Referer and Sec-Fetch-Site are impacted it might not entirely be clear whether it's the result of a redirect or a subsequent visit. Especially with more navigation tracking mitigation down the line.

[23:50:49.0582] <Noam Rosenthal>
> <@annevk:mozilla.org> I think Referer and Sec-Fetch-Site are impacted so I think this ought to be impacted as well. What might leak is if y.com does a further redirect based on a cookie. Now x.com could conspire with subsequent x.com, but given that Referer and Sec-Fetch-Site are impacted it might not entirely be clear whether it's the result of a redirect or a subsequent visit. Especially with more navigation tracking mitigation down the line.

OK so this hides the fact that the unload and the new document are the same visit, which is otherwise a hidden fact. This also brings back the https://github.com/w3c/navigation-timing/issues/160 thing...

[23:56:38.0240] <annevk>
Noam Rosenthal: yeah, though I'd argue that case is worse.

[23:57:01.0077] <annevk>
sideshowbarker: left a reply. Not sure if Safari has an open bug for this, maybe you want to file one?

[23:58:41.0459] <sideshowbarker>
> <@annevk:mozilla.org> sideshowbarker: left a reply. Not sure if Safari has an open bug for this, maybe you want to file one?

I'll ask the OP if they can file a bug

[07:28:49.0654] <devsnek>
any webkit/gecko people feeling inspired? https://github.com/whatwg/websockets/issues/20

[07:29:25.0324] <devsnek>
annevk: you seemed to not hate this, in the past at least. do you think mozilla would accept contribution for this?

[07:31:45.0486] <annevk>
devsnek: yeah probably, but will need spec + tests


2022-03-03
[23:56:40.0596] <Noam Rosenthal>
Welcome bashi!  a question to you and Yoav Weiss about early hints: do they survive same-origin redirects?

[23:58:07.0866] <bashi>
Noam Rosenthal: Our implementation is that they don't survive redirects including same-origin.

[00:01:25.0790] <Noam Rosenthal>
I personally think this could be useful - even if it's not implemented yet. e.g. you submit a form which is going to do some heavy processing and then redirect you to somewhere - might as well start sending the 103s beforehand

[00:01:34.0014] <Noam Rosenthal>
 * I personally think this could be useful - even if it's not implemented yet. e.g. you submit a form which is going to do some heavy processing and then redirect you to somewhere - might as well start sending the 103s beforehand

[00:03:23.0296] <bashi>
I think changing the behavior isn't difficult. I think we can update our implementation if that's preferable and there is consensus.

[00:06:40.0326] <Noam Rosenthal>
bashi: OK, since the reserved client survives same-origin redirects, for now we'll leave it in the draft PR and we can discuss the specifics on Github

[00:37:05.0359] <annevk>
I guess the question is whether the preloads are preserved?

[00:39:49.0667] <Noam Rosenthal>
annevk: exactly, if you started preloading something and then redirected to somewhere else in the same origin, should you continue those preloads and then transfer them to the document

[00:41:25.0346] <Noam Rosenthal>
... I think it's useful to allow that, but not sure if that has further implications

[00:43:23.0481] <annevk>
Nothing comes to mind, but you might get rather involved sequences... 103 302 103 401 103 200

[00:44:00.0203] <annevk>
Speaking of which, I guess those questions apply to 401/407 too.

[00:45:03.0095] <Noam Rosenthal>
yea I believe we'll have only the first or last (most likely first) 103 in the sequence apply

