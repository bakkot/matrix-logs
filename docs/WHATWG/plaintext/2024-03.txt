2024-03-03
[06:01:34.0614] <annevk>
zcorpan: I vaguely recall there's an issue tracking something like that? I think there's also some things around navigation that are not being tracked accurately, such as the changes people want to make around bounce-tracking.


2024-03-04
[23:38:45.0022] <annevk>
PSA: https://whatwg.org/stages is live (might have to hard refresh for better table styling)

[05:26:46.0427] <farre>
so, I now have tests, and I checked epiphany (which should be webkit, right?), and load events for cross origin navigation of iframes is done there as well

[05:45:12.0303] <annevk>
That makes sense. That's been the behavior in browsers for literally decades and I think it's also what HTML still requires.

[05:46:10.0171] <annevk>
I don't really have a good idea for how to solve the issue here apart from not dispatching anything at all. Or maybe only dispatching for the initial load, but that will likely break things.

[05:49:12.0194] <farre>
I'm looking at aligning gecko to do this as well. it still leaves the timing issue, but at least it will be the same

[05:58:09.0393] <annevk>
Gecko doesn't fire an event currently?

[06:18:44.0864] <farre>
not when updating #hash, no

[07:08:25.0409] <annevk>
Wait what, firing a load event for that case doesn't sound right. I guess I missed something.

[07:08:35.0790] <annevk>
Looking forward to the tests. :-)

[07:33:47.0821] <farre>
np, I'll ping you a phabricator link tomorrow when I've run try. I'm planning on letting the tests get upstreamed from the gecko repo if you don't object

[07:45:34.0970] <annevk>
That seems fine. But if they don't match the specification please make sure they have `.tentative` in the name.


2024-03-06
[02:27:44.0703] <annevk>
emilio mfreed: I think the CSS WG should probably come up with the native appearance story as it should be the same for all form controls, no? We want something with intrinsic width and height that uses the border-box. There's a number of things that should continue to work, such as transform, positioning, visibility, but there's also a number of things that shouldn't, such as background, font, etc. However, both of those lists are continuously evolving and it seems unreasonable for HTML to be in charge of that?

I will file an issue later today to get the conversation started.

[06:27:19.0457] <Ms2ger>
annevk: hey, I was wondering if you have an idea when we could get a review of the shadowrealms pr

[06:34:15.0798] <annevk>
Ms2ger: last I heard implementers are skeptical on it. Has that changed? It's really hard to get a sense of the amount of buy-in this has beyond a handful of interested parties. Are there recent statements from Chromium and Gecko available?

[06:36:19.0151] <Ms2ger>
I can try to get statements if I can't find any

[06:38:44.0360] <annevk>
Ms2ger: thanks! For instance, https://github.com/tc39/proposal-shadowrealm/issues/401 is the latest I saw from mgaudet. Which I guess is not really saying no, but it's not an enthusiastic endorsement either and perhaps something we need more clarity on to prevent a future `setTimeout()` issue.

[06:41:06.0491] <Ms2ger>
That's fair

[06:49:37.0475] <annevk>
yulia | sick: for when you feel better ^^ (hope that's soon!)

[09:46:52.0702] <annevk>
emilio mfreed: https://github.com/w3c/csswg-drafts/issues/10039


2024-03-07
[17:11:55.0661] <Domenic>
Could use editor review on https://github.com/whatwg/html/pull/10043 (easy) and https://github.com/whatwg/html/pull/10168 (bigger)

[17:13:00.0495] <akaster>
Is it expected that cryptographic keys created by SubtleCrypto are stored in a fun and secure place like a Trusted Platform Module or Secure Enclave? 

[17:13:12.0704] <akaster>
Or would that just be a quality of implementation bonus

[00:56:52.0341] <freddy>
it's not expected and afaiu subtlecrypto predates wide availability and adoption of TPM / enclaves

[00:58:54.0939] <annevk>
Domenic: I'll leave the bigger one for zcorpan.

[01:23:24.0559] <annevk>
yulia | sick: https://github.com/w3c/trusted-types/issues/471 is probably of interest to you. Maybe also to littledan.

[01:24:10.0887] <annevk>
freddy: you too I suppose. Some of the research participants could really use a built-in sanitizer.

[01:24:19.0909] <emilio>
annevk: jarhar: Do you know what kind of styling differences do we want for the `<select>` case in https://github.com/w3c/csswg-drafts/issues/5998?

[01:25:04.0903] <emilio>
Basically, I think the main thing we really need is the non-replaced box stuff, but I'm not aware of all the intended differences between `base` and `none`

[01:25:07.0336] <annevk>
emilio: essentially we want to build something from the ground up, irrespective of auto/none styling.

[01:25:28.0194] <yulia | sick>
wow thats great

[01:25:29.0318] <emilio>
annevk: why? It seems virtually all the default `select` styles would be applicable to the "base" case

[01:26:17.0818] <yulia | sick>
(not really back yet)

[01:26:18.0951] <annevk>
emilio: the mechanism has to work for all form controls, not just `select`. So over-indexing on `select` doesn't seem useful.

[01:26:20.0224] <emilio>
annevk: modulo the `!important` stuff which right now can't be overridden by authors, but maybe we should just fix that

[01:27:00.0831] <emilio>
annevk: I guess I'm looking for a counter-example where it doesn't work. I've thought mostly about `<select>` and `<input switch>`, and seems not overcomplicating stuff would work for those at least

[01:27:55.0547] <emilio>
annevk: that is, the default styles for form controls are sorta reasonable, what is not customizable is the stuff inside them. And _that_ is fixable with appearance: base without weird hacks / internal mechanisms which are generally unsound

[01:33:12.0313] <annevk>
emilio: I don't think people want the base style to match the none style. They want something closer to the auto style, except not platform bound.

[01:35:39.0842] <annevk>
emilio: Also `select` like other form controls is currently undefined, except for like 3 properties?

[01:35:52.0404] <emilio>
annevk: I thought the point of `base` was basically give you control over the inner bits of the control. `none` already gives you something that is a functional control, and the system colors used there are in control of the UA, so can be changed. `border-radius` is the only tricky thing IMO

[01:36:11.0390] <emilio>
annevk: it doesn't have to be that way, select styles are fairly interoperable iirc?

[01:36:34.0841] <annevk>
No the point of `base` is to give somewhat unified cross-browser controls that are fully stylable, but also accessible, etc.

[01:37:06.0285] <annevk>
 * No the point of `base` is to give unified cross-browser controls that are fully stylable, but also accessible, etc.

[01:37:38.0502] <annevk>
I would expect some sort of consistency across `base` controls.

[01:37:44.0726] <emilio>
annevk: well, sure, my point is that `appearance: none` is that, except it doesn't let you style the stuff inside the control

[01:38:21.0753] <emilio>
and the "doesn't let you style stuff inside the control" part is solvable without weird shenanigans

[01:38:54.0884] <annevk>
It's not for checkboxes and it's also not really for other controls? Some of that might be fixable, but I don't think `none` always meets the bar. (And I'd rather `none` going forward actually mean `none`.)

[01:39:56.0338] <annevk>
(The stuff inside the control also has to be described in terms of CSS already for `base`, to be clear.)

[01:40:50.0774] <emilio>
Sure, but that's not an issue because we can do whatever in the UA sheet for inner elements / pseudos inside `base`, and have it not affect `none` / `auto`

[01:41:10.0354] <emilio>
You're right that checkboxes are an issue here, but those are the exception rather than the rule

[01:46:15.0732] <annevk>
emilio: I think the pseudo elements should also work for `none`.

[01:47:10.0786] <emilio>
annevk: that doesn't match how `none` behaves right now, but maybe, if we can get away with it? But that means that we should make the `none` behavior also describable via css.

[02:00:48.0332] <annevk>
emilio: the solution has to work for checkboxes too though. But I also think we want the freedom to be able to change certain things (such as the default size) for `base` to make them really good defaults for people to build on.

[02:01:46.0283] <annevk>
As such I don't really believe in trying to shoehorn it into the existing mess (which I do agree we should clean up as well, but I think we're more limited there in what can be done).

[02:06:35.0610] <emilio>
annevk: I don't see why it wouldn't work for checkboxes fwiw, assuming checkboxes gain some pseudo tree (which they'd need to, right), you could style that however you want. You'd need some special code to not render that tree in the `none` case, to match existing behavior, but that seems feasible

[02:08:00.0015] <emilio>
annevk: I don't think we want css magic, because whatever that magic is we're going to need to explain it to authors. And this is exactly the kind of magic that we don't want to expose to the web (https://wiki.csswg.org/faq#selectors-that-depend-on-layout)

[02:09:02.0741] <emilio>
Anyways I need to go do some work, but I think we can get away without CSS magic.

[02:37:39.0827] <annevk>
I think it's fine to have "magic" when it's constrained. This wouldn't really become a generic thing, it's just for form controls. You want the magic to be more tightly scoped it seems, but I'd rather have it a little wider to decouple things a little more.

[06:54:53.0415] <jarhar>
for appearance:base select as i am trying to implement it, most of the actual new styles are on the button and the datalist children, not the select itself, which makes it easier to put in the UA stylesheet. It looks kind of bad imo to still have the border and other stuff there from the appearance:auto select around the parent element of the button, but maybe once i finish implementing appearance:base and demo it to some more people then maybe nobody will care that much and we can just leave the UA rules in there.

[06:55:14.0179] <jarhar>
if you look at the "actual" and "expected" pictures of this test output, you can see what difference the built-in borders make: https://chromium-layout-test-archives.storage.googleapis.com/results.html?json=chromium/try/linux-rel/1729863/blink_wpt_tests%20%28with%20patch%29/full_results_jsonp.js

[06:55:53.0010] <jarhar>
also it should probably be completely the same across browsers by default when using appearance:base, and if we aren't using the same UA border rule for select then that wouldn't be the case anymore

[09:01:03.0560] <jub0bs>
Hey all. I have some more thoughts about CORS...

[09:04:14.0077] <jub0bs>
A common misunderstanding (dispelled by annevk [long ago](https://twitter.com/annevk/status/948831079649169408)) about CORS is that it is some kind of defence. I think some overeager middleware libraries can be blamed for this, but I'm starting to wonder whether CORS error messages in Chrome specifically could be improved:

> Access to fetch at 'https://example.org' from origin 'https://example.com' has been _blocked by CORS policy_. [...]

My emphasis.


[09:06:03.0131] <jub0bs>
The phrase "blocked by CORS policy" seems to mislead some practitioners into conflating the effects of the SOP and CORS. How about something like the following message instead?

> Access to fetch at 'https://example.org' from origin 'https://example.com' has been blocked because the requested resource's CORS policy is insufficiently permissive. [...]

[09:06:49.0810] <jub0bs>
 * A common misunderstanding (dispelled by annevk [long ago](https://twitter.com/annevk/status/948831079649169408)) about CORS is that it is some kind of defence. I think some overeager middleware libraries can be blamed for this, but I'm starting to wonder whether CORS error messages in Chrome specifically could be improved:

> Access to fetch at 'https://example.org' from origin 'https://example.com' has been _blocked by CORS policy_. \[...\]

(my emphasis)

[09:07:06.0363] <jub0bs>
 * The phrase "blocked by CORS policy" seems to mislead some practitioners into conflating the effects of the SOP and CORS. How about something like the following message instead?

> Access to fetch at 'https://example.org' from origin 'https://example.com' has been blocked _because the requested resource's CORS policy is insufficiently permissive_. \[...\]

(my emphasis)

[09:07:44.0328] <jub0bs>
 * A common misunderstanding (dispelled by annevk [long ago](https://twitter.com/annevk/status/948831079649169408)) about CORS is that it is some kind of defence. I think some overeager middleware libraries can be blamed for this, but I'm starting to wonder whether CORS error messages (in Chrome specifically) could be improved:

> Access to fetch at 'https://example.org' from origin 'https://example.com' has been _blocked by CORS policy_. \[...\]

(my emphasis)

[09:07:50.0053] <jub0bs>
 * A common misunderstanding (dispelled by annevk [long ago](https://twitter.com/annevk/status/948831079649169408)) about CORS is that it is some kind of defence. I think some overeager middleware libraries can be blamed for this, but I'm starting to wonder whether CORS error messages (in Chromium specifically) could be improved:

> Access to fetch at 'https://example.org' from origin 'https://example.com' has been _blocked by CORS policy_. \[...\]

(my emphasis)

[09:08:26.0705] <jub0bs>
 * A common misunderstanding (dispelled by annevk [long ago](https://twitter.com/annevk/status/948831079649169408)) about CORS is that it is some kind of defence. I think some overeager middleware libraries can be blamed for this confusion, but I'm starting to wonder whether CORS error messages (in Chromium specifically) could be improved:

> Access to fetch at 'https://example.org' from origin 'https://example.com' has been _blocked by CORS policy_. \[...\]

(my emphasis)

[09:10:02.0756] <jub0bs>
More verbose, but clearer IMHO.

[09:10:21.0322] <jub0bs>
 * 1. A common misunderstanding (dispelled by annevk [long ago](https://twitter.com/annevk/status/948831079649169408)) about CORS is that it is some kind of defence. I think some overeager middleware libraries can be blamed for this confusion, but I'm starting to wonder whether CORS error messages (in Chromium specifically) could be improved:

> Access to fetch at 'https://example.org' from origin 'https://example.com' has been _blocked by CORS policy_. \[...\]

(my emphasis)

[09:10:37.0164] <jub0bs>
 * One: A common misunderstanding (dispelled by annevk [long ago](https://twitter.com/annevk/status/948831079649169408)) about CORS is that it is some kind of defence. I think some overeager middleware libraries can be blamed for this confusion, but I'm starting to wonder whether CORS error messages (in Chromium specifically) could be improved:

> Access to fetch at 'https://example.org' from origin 'https://example.com' has been _blocked by CORS policy_. \[...\]

(my emphasis)

[09:17:59.0468] <jub0bs>
Two: Some folks attempt to solve their CORS issues by including an `Origin` header in their request. Of course, because `Origin` is a [forbidden request-header name](https://fetch.spec.whatwg.org/#forbidden-request-header), user agents deny clients' attempts to include such a header in a request. The XHR API is vocal about it and issues an error message:

```
httpRequest = new XMLHttpRequest();
httpRequest.open('GET', 'https://www.example.com', true);
httpRequest.setRequestHeader("Origin", "http://localhost")
httpRequest.send(null);
```

> Refused to set unsafe header "Origin"

However, the Fetch API denies such attempts silently:

```
fetch('https://example.com', {headers: {origin: 'http://localhost'}});
```
(no error message about Origin being unsafe)

[09:18:41.0764] <jub0bs>
Shouldn't the Fetch Api be more vocal about attempts to include unsafe headers in requests?

[09:18:49.0528] <jub0bs>
 * Shouldn't the Fetch API be more vocal about attempts to include unsafe headers in requests?

[09:19:02.0199] <jub0bs>
 * Shouldn't the Fetch API be more vocal about those misguided attempts to include unsafe headers in requests?

[09:23:03.0508] <jub0bs>
Three: Some folks also attempt to solve their CORS issues by including CORS _response_ headers (such as `Access-Control-Allow-Origin`) in their request, which may in fact make their CORS issues worth if the requested resource's CORS policy doesn't allow arbitrary request headers. In connection to [my second point above](https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$2ipzTHms8MptHtnnrbf9PtwDdqpv0bObDd5yJGIFYc8?via=matrix.org&via=mozilla.org&via=igalia.com), I think there is a case for adding CORS response headers to the list of forbidden request-header names. I'm conscious that this could break existing clients, but including such CORS response headers to a request is almost always a mistake anyway.

[09:23:15.0747] <jub0bs>
 * Three: Some folks also attempt to solve their CORS issues by including CORS _response_ headers (such as `Access-Control-Allow-Origin`) in their request, which may in fact make their CORS issues worse if the requested resource's CORS policy doesn't allow arbitrary request headers. In connection to [my second point above](https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$2ipzTHms8MptHtnnrbf9PtwDdqpv0bObDd5yJGIFYc8?via=matrix.org&via=mozilla.org&via=igalia.com), I think there is a case for adding CORS response headers to the list of forbidden request-header names. I'm conscious that this could break existing clients, but including such CORS response headers to a request is almost always a mistake anyway.

[09:23:28.0373] <jub0bs>
 * Three: Some folks also attempt to solve their CORS issues by including CORS _response_ headers (such as `Access-Control-Allow-Origin`) in their request, which may in fact make their CORS issues worse if the requested resource's CORS policy doesn't allow arbitrary request-header names. In connection to [my second point above](https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$2ipzTHms8MptHtnnrbf9PtwDdqpv0bObDd5yJGIFYc8?via=matrix.org&via=mozilla.org&via=igalia.com), I think there is a case for adding CORS response headers to the list of forbidden request-header names. I'm conscious that this could break existing clients, but including such CORS response headers to a request is almost always a mistake anyway.

[09:24:07.0036] <jub0bs>
 * Three: Some folks also attempt to solve their CORS issues by including CORS _response_ headers (such as `Access-Control-Allow-Origin`) in their request, which may in fact make their CORS issues worse if the requested resource's CORS policy doesn't allow arbitrary request-header names. In connection to [my second point above](https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$2ipzTHms8MptHtnnrbf9PtwDdqpv0bObDd5yJGIFYc8?via=matrix.org&via=mozilla.org&via=igalia.com), I think there is a case for adding all CORS response headers (`Access-Control-Allow-*` and `Access-Control-Max-Age`) to the list of forbidden request-header names. I'm conscious that this could break existing clients, but including such CORS response headers to a request is almost always a mistake anyway.

[09:24:22.0362] <jub0bs>
 * Three: Some folks also attempt to solve their CORS issues by including CORS _response_ headers (such as `Access-Control-Allow-Origin`) in their request, which may in fact make their CORS issues worse if the requested resource's CORS policy doesn't allow arbitrary request-header names. In connection to [my second point above](https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$2ipzTHms8MptHtnnrbf9PtwDdqpv0bObDd5yJGIFYc8?via=matrix.org&via=mozilla.org&via=igalia.com), I think there is a case for adding all CORS response headers (`Access-Control-Allow-*` and `Access-Control-Max-Age`) to the list of forbidden request-header names. I'm conscious that such a change could break existing clients, but including such CORS response headers to a request is almost always a mistake anyway.

[09:26:13.0351] <jub0bs>
 * Two: Some folks attempt to solve their CORS issues by including an `Origin` header in their request. Of course, because `Origin` is a [forbidden request-header name](https://fetch.spec.whatwg.org/#forbidden-request-header), user agents deny clients' attempts to include such a header in a request. The XHR API is vocal about it and issues an error message:

```
httpRequest = new XMLHttpRequest();
httpRequest.open('GET', 'https://www.example.com', true);
httpRequest.setRequestHeader("Origin", "http://localhost")
httpRequest.send(null);
```
In Chrome:
> Refused to set unsafe header "Origin"


However, the Fetch API denies such attempts silently:

```
fetch('https://example.com', {headers: {origin: 'http://localhost'}});
```

(no error message about Origin being unsafe)

[09:26:28.0507] <jub0bs>
 * Two: Some folks attempt to solve their CORS issues by including an `Origin` header in their request. Of course, because `Origin` is a [forbidden request-header name](https://fetch.spec.whatwg.org/#forbidden-request-header), user agents deny clients' attempts to include such a header in a request. The XHR API is vocal about it and issues an error message:

```
httpRequest = new XMLHttpRequest();
httpRequest.open('GET', 'https://www.example.com', true);
httpRequest.setRequestHeader("Origin", "http://localhost")
httpRequest.send(null);
```

In Chrome:

> Refused to set unsafe header "Origin"

And in Firefox:

> Attempt to set a forbidden header was denied: Origin

However, the Fetch API denies such attempts silently:

```
fetch('https://example.com', {headers: {origin: 'http://localhost'}});
```

(no error message about Origin being unsafe)

[09:27:57.0444] <jub0bs>
 * Two: Some folks attempt to solve their CORS issues by including an `Origin` header in their request. Of course, because `Origin` is a [forbidden request-header name](https://fetch.spec.whatwg.org/#forbidden-request-header), user agents deny clients' attempts to include such a header in a request. The XHR API is vocal about it and issues an error message:

```
httpRequest = new XMLHttpRequest();
httpRequest.open('GET', 'https://www.example.com', true);
httpRequest.setRequestHeader("Origin", "http://localhost")
httpRequest.send(null);
```

In Chrome:

> Refused to set unsafe header "Origin"

And in Firefox:

> Attempt to set a forbidden header was denied: Origin

However, the Fetch API denies such attempts silently:

```
fetch('https://example.com', {headers: {origin: 'http://localhost'}});
```

(no error message about `Origin` being unsafe, [per the Fetch standard](https://fetch.spec.whatwg.org/#headers-validate))

[09:28:50.0012] <jub0bs>
 * Two: Some folks attempt to solve their CORS issues by including an `Origin` header in their request. Of course, because `Origin` is a [forbidden request-header name](https://fetch.spec.whatwg.org/#forbidden-request-header), user agents deny clients' attempts to include such a header in a request. The XHR API is vocal about it and issues an error message:

```
httpRequest = new XMLHttpRequest();
httpRequest.open('GET', 'https://www.example.com', true);
httpRequest.setRequestHeader("Origin", "http://localhost")
httpRequest.send(null);
```

In Chrome and Safari:

> Refused to set unsafe header "Origin"

And in Firefox:

> Attempt to set a forbidden header was denied: Origin

However, the Fetch API denies such attempts silently:

```
fetch('https://example.com', {headers: {origin: 'http://localhost'}});
```

(no error message about `Origin` being unsafe, [per the Fetch standard](https://fetch.spec.whatwg.org/#headers-validate))

[09:30:20.0272] <jub0bs>
 * Three: Many people also attempt to solve their CORS issues by including CORS _response_ headers (such as `Access-Control-Allow-Origin`) in their request, which may in fact make their CORS issues worse if the requested resource's CORS policy doesn't allow arbitrary request-header names. In connection to [my second point above](https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$2ipzTHms8MptHtnnrbf9PtwDdqpv0bObDd5yJGIFYc8?via=matrix.org&via=mozilla.org&via=igalia.com), I think there is a case for adding all CORS response headers (`Access-Control-Allow-*` and `Access-Control-Max-Age`) to the list of forbidden request-header names. I'm conscious that such a change could break existing clients, but including such CORS response headers to a request is almost always a mistake anyway.

[09:35:06.0451] <annevk>
jub0bs: for 1/2, improving warning messages is probably best filed directly with web browsers. Maybe sideshowbarker has done some work on these in the past perhaps. I'd certainly be open to reviewing WebKit patches that improve this. For 3, I think that's also best done as a warning message by web browsers. I wouldn't want to constrain what people can do with HTTP at the API level, but giving them a hint they're likely making a mistake seems reasonable.

[09:39:17.0034] <jub0bs>
annevk: Thanks. I was hoping to catch some browser folks here, actually. As for 3, I believe a warning would be a good middle ground.

[15:51:29.0827] <Luke Warlow>
Could I get bug edit permissions on whatwg/html for labelling issues?


2024-03-08
[16:32:52.0996] <Domenic>
> <@lwarlow:igalia.com> Could I get bug edit permissions on whatwg/html for labelling issues?

Invite sent

[16:50:03.0046] <sideshowbarker>
jub0bs: If you raise bugs and Cc me, I would be happy to write browser patches for adding warnings or improving existing ones.

And while we’re at it, I think we should also try to get a patch landed to make Chrome stop emitting the _“If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled"_ message.

…because to 99.99% or whatever of web developers, that message is in practice the complete opposite of being helpful to them.

[01:29:02.0220] <jub0bs>
sideshowbarker: True. Many people believe that setting the request's mode to `'no-cors`' will magically resolve their CORS issues.

[01:30:14.0072] <jub0bs>
 * sideshowbarker: Thanks for your reply. I'll open a couple of bugs asap.
True about `'no-cors'`: many people believe that setting the request's mode to `'no-cors`' will magically resolve their CORS issues. Perhaps this part of the error message is more harmful than helpful.

[01:30:24.0340] <jub0bs>
 * sideshowbarker: Thanks for your reply. I'll open a couple of bugs asap.
True about `'no-cors'`: many people believe that setting the request's mode to `'no-cors`' will magically resolve their CORS issues. Perhaps this part of the error message is more misleading than helpful.

[01:31:04.0121] <jub0bs>
 * sideshowbarker: Thanks for your reply. I'll open a couple of bugs asap.
True about `'no-cors'`: many people believe that setting the request's mode to `'no-cors'` will magically resolve their CORS issues. Perhaps this part of the error message is more misleading than helpful.

[01:31:19.0221] <jub0bs>
 * sideshowbarker: Thanks for your reply. I'll open a couple of bugs asap.
True about `'no-cors'`: many people believe that setting their request's mode to `'no-cors'` will magically resolve their CORS issues. Perhaps this part of the error message is more misleading than helpful.

[02:07:28.0680] <zcorpan>
jub0bs: yeah, saying it was blocked by the same-origin policy would make more sense

[02:08:45.0835] <zcorpan>
But in the end the message should probably suggest reasonable options

[03:55:32.0711] <smaug>
https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflecting-content-attributes-in-idl-attributes:reflected-idl-attribute-31 is somehow oddly written

[04:27:54.0466] <smaug>
first there are some items, and after them actual getter and setter steps. But what is for example the first item? Is that part of some algorithm or is it not?

[05:12:31.0223] <annevk>
smaug: the first list item is introducing a shorthand, used in the remaining list items for defining infrastructure

[05:13:46.0167] <annevk>
I do agree it's a bit strange, but I also wasn't sure how to refactor it when I last fixed some reflecting stuff.

[06:32:47.0877] <Dominic Farolino>
https://html.spec.whatwg.org/C#becomes-connected happens when the insertion steps for an element are called *and* it is "connected". But can the insertion steps ever be called for an element that's _disconnected_?

[07:44:24.0592] <Jake Archibald>
Folks who are familiar with `delegatesFocus`… what are the use-cases? Is it much different to putting everything in the shadow root in a `<label>` pointing to the field?

[09:15:04.0715] <keithamus>
Jake Archibald: or a custom button or similar.

[09:17:27.0723] <keithamus>
https://github.com/muan/input-duration-element an example in the real world.

[09:21:52.0084] <Jake Archibald>
Yeah, support for `.focus()` is nice. I guess I don't always want the "clicking anything in the shadow root delegates focus to one element" thing


2024-03-09
[22:10:02.0761] <Domenic>
IIRC it was mainly added because we knew built-in controls like `<input type=date>` had that behavior.


2024-03-10
[19:28:37.0598] <dean.highpower>
Hello, does anyone know about the "willful violation of RFC 5322" note in section 4.10.5.1.5 Email state of the whatwg HTML spec? The comment raises some concern for me, since RFC-5322 is not the appropriate standard to find the syntax of email addresses as used on the public Internet today to route email. The correct standard is RFC-5321, which defines the SMTP protocol and includes a grammar for Mailbox which is what most people think of as an email address. This is what people sometimes call the "envelope" address.

The RFC-5322 document specifies the format of the email message content, not the protocol used to transport mail.

So, yeah: you should not follow RFC-5322, but you should follow RFC-5321.


[23:40:55.0276] <annevk>
dean.highpower: there's a long discussion in https://github.com/whatwg/html/issues/4562 without much progress, though someone from the i18n WG might make another attempt this year.

[04:27:18.0288] <judekeyser>
Hello, I badly apologize if the question does not fit this room, but I'm having trouble understanding a piece of JavaScript code and no one could help me in regular javascript servers. The code I'm concerned with is the following (ready to use):
```js
(async () => {
    const stream = (function* chunks(json) {
        const jsonString = JSON.stringify(json);
        const jsonBytes = new TextEncoder().encode(jsonString);
    
        let index = 0;
        while(index < jsonBytes.length) {
            const i = index;
            const j = Math.min(jsonBytes.length, i + 10);
    
            const slice = jsonBytes.slice(i, j);    // LINE (A)
            index = j;
            yield slice;
        }
    })({"Hello!": [2023, 2024 ]});
    
    const jsonBack = await new Response(new ReadableStream({
        type: "bytes",
        start: function(controller) {
            for(const chunk of stream) {
                controller.enqueue(chunk);
            }
            controller.close();
        }
    })).json();
    
    console.log(jsonBack);
})()
```
this code works as expected (google chrome, firefox; latest versions). However, when I replace in line A, `.slice` with `.subarray`, I get different kind of issues, telling me the JSON ends abnormally (in both browsers). I've crawled the official specification of the different API's, and I couldn't find a single clue about whether or not the version with `.subarray` violates the specification. 

For what is worth, turning `.json()` to `.text()` confirms that in the `.subarray` case, only the first chunk seems to be taken into account. I assume (but not sure about it) the same happens for `.json()`.

My question, to make it clear, is: is the current code with `.slice` already violating a point of the specification; and is the version with `.subarray` violates it and how? Could it be a browser bug, common to both Firefox and Google Chrome? Many thanks in advance! This issue puzzles me a lot for some days now

[04:56:06.0470] <judekeyser>
 * Hello, I badly apologize if the question does not fit this room, but I'm having trouble understanding a piece of JavaScript code and no one could help me in regular javascript servers. The code I'm concerned with is the following (ready to use):

```js
(async () => {
    const stream = (function* chunks(json) {
        const jsonString = JSON.stringify(json);
        const jsonBytes = new TextEncoder().encode(jsonString);
    
        let index = 0;
        while(index < jsonBytes.length) {
            const i = index;
            const j = Math.min(jsonBytes.length, i + 10);
    
            const slice = jsonBytes.slice(i, j);    // LINE (A)
            index = j;
            yield slice;
        }
    })({"Hello!": [2023, 2024 ]});
    
    const jsonBack = await new Response(new ReadableStream({
        type: "bytes",
        start: function(controller) {
            for(const chunk of stream) {
                controller.enqueue(chunk);
            }
            controller.close();
        }
    })).json();
    
    console.log(jsonBack);
})()
```

this code works as expected (google chrome, firefox; latest versions). However, when I replace in line A, `.slice` with `.subarray`, I get different kind of issues, telling me the JSON ends abnormally (in both browsers). I've crawled the official specification of the different API's, and I couldn't find a single clue about whether or not the version with `.subarray` violates the specification.

For what is worth, turning `.json()` to `.text()` confirms that in the `.subarray` case, only the first chunk seems to be taken into account. I assume (but not sure about it) the same happens for `.json()`.

My question, to make it clear, is: is the current code with `.slice` already violating a point of the specification; and is the version with `.subarray` violating it and how? Could it be a browser bug, common to both Firefox and Google Chrome? Many thanks in advance! This issue puzzles me a lot for some days now

[07:07:32.0548] <jub0bs>
> <@zcorpan:mozilla.org> But in the end the message should probably suggest reasonable options

Do you mean "reasonable options" for fixing the CORS error? I'm not sure I can think of more than what I've already suggested, tbh. One difficulty is that browsers are often left with insufficient contextual information about a preflight failure to produce a helpful error message. For a typical example, see https://jub0bs.com/posts/2023-02-08-fearless-cors/#9-ease-troubleshooting-by-eschewing-shortcuts-during-preflight

[07:09:07.0425] <jub0bs>
> <@zcorpan:mozilla.org> But in the end the message should probably suggest reasonable options

 * Do you mean "reasonable options" for fixing the CORS error? I'm not sure I can think of more than what I've already suggested, tbh. One difficulty is that browsers are often left with insufficient contextual information about a preflight failure to produce a helpful CORS error message. For a typical example, see https://jub0bs.com/posts/2023-02-08-fearless-cors/#9-ease-troubleshooting-by-eschewing-shortcuts-during-preflight

[08:11:15.0991] <judekeyser>
> <@judekeyser:matrix.org> Hello, I badly apologize if the question does not fit this room, but I'm having trouble understanding a piece of JavaScript code and no one could help me in regular javascript servers. The code I'm concerned with is the following (ready to use):
> 
> ```js
> (async () => {
>     const stream = (function* chunks(json) {
>         const jsonString = JSON.stringify(json);
>         const jsonBytes = new TextEncoder().encode(jsonString);
>     
>         let index = 0;
>         while(index < jsonBytes.length) {
>             const i = index;
>             const j = Math.min(jsonBytes.length, i + 10);
>     
>             const slice = jsonBytes.slice(i, j);    // LINE (A)
>             index = j;
>             yield slice;
>         }
>     })({"Hello!": [2023, 2024 ]});
>     
>     const jsonBack = await new Response(new ReadableStream({
>         type: "bytes",
>         start: function(controller) {
>             for(const chunk of stream) {
>                 controller.enqueue(chunk);
>             }
>             controller.close();
>         }
>     })).json();
>     
>     console.log(jsonBack);
> })()
> ```
> 
> this code works as expected (google chrome, firefox; latest versions). However, when I replace in line A, `.slice` with `.subarray`, I get different kind of issues, telling me the JSON ends abnormally (in both browsers). I've crawled the official specification of the different API's, and I couldn't find a single clue about whether or not the version with `.subarray` violates the specification.
> 
> For what is worth, turning `.json()` to `.text()` confirms that in the `.subarray` case, only the first chunk seems to be taken into account. I assume (but not sure about it) the same happens for `.json()`.
> 
> My question, to make it clear, is: is the current code with `.slice` already violating a point of the specification; and is the version with `.subarray` violating it and how? Could it be a browser bug, common to both Firefox and Google Chrome? Many thanks in advance! This issue puzzles me a lot for some days now

okay for what's worth, I understood what happened here. When enqueuing, the buffer is detached. This forces the length to go down to 0, which abruptly terminates my emission loop and I never emit more than 1 chunk, which is the cause of all issues. That's why I don't have the expected TypeError, since actually I never pass a detached buffer, as the loop terminates after.

I must say debugging this was kind of an adventure! Not sure if it's all clear for everyone that enqueue detaches the buffer, while reading the documentation. but I eventually found it, collecting all the pieces together

[09:12:52.0213] <dean.highpower>
That issue is regarding the extension of the Mailbox grammar in RFC-5321 to support Unicode, which is done in RFC-6531, section 3.3 Extended Mailbox Address Syntax. I should note that the analogous extensions of all the the RFC-5322 grammars is done in RFC-6532.
So yeah, get the basic US-ASCII syntax right by using the grammar in 5321, then extend for Unicode using 6531.


[09:15:24.0015] <dean.highpower>
The way the JSON Schema Validation standard handles this is to recognize two types: "email" for the US-ASCII style, and "idn-email" for an Mailbox address supporting Unicode.

[15:07:12.0598] <dean.highpower>
annevk: I put in my $0.02 in the github issue. Does anyone take the position that RFC-5322 (+RFC-6532) is the relevant standard for email address syntax? (As implied by the "willful violation" comment?)

[15:53:45.0357] <Tomz_plug>
Hello sorry for bothering Y'all, just wanna find out if anyone interested in cannabis and psychedelics products?

 I’m a supplier of quality cannabis and psychedelics products like shrooms, DMT, Lsd, Mdma, ketamine, chocolate bars, cart vapes,Clone cards, buds, wax, shatter, Edibles,distillates and some chill pills, Cashapp flip and many more products prescribed for patients as well. Let me know if you’re interested  by DM🔥🍁 see products in our channel 👇👇👇👇
https://t.me/hightime_markert


2024-03-11
[00:31:58.0118] <sideshowbarker>
Per https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values, when parsing floating-point number values should implementation return Infinity and NaN if that’s the number value a string parses to — or instead should implementations treat Infinity and NaN be treated as errors ?

In that HTML spec algorithm itself, there’s nothing explicit about handling Infinity and NaN — but in the WebIDL spec at https://webidl.spec.whatwg.org/#ref-for-idl-float①, I see:
> `Infinity`, `-Infinity` and `NaN` must not be used as the value of a `float` or `double`

[00:32:17.0859] <sideshowbarker>
 * Per https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values, when parsing floating-point number values: Should implementation return Infinity and NaN if that’s the number value a string parses to — or instead should implementations treat Infinity and NaN be treated as errors ?

In that HTML spec algorithm itself, there’s nothing explicit about handling Infinity and NaN — but in the WebIDL spec at https://webidl.spec.whatwg.org/#ref-for-idl-float①, I see:

> `Infinity`, `-Infinity` and `NaN` must not be used as the value of a `float` or `double`

[00:32:24.0521] <sideshowbarker>
 * Per https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values, when parsing floating-point number values: Should implementations return Infinity and NaN if that’s the number value a string parses to — or instead should implementations treat Infinity and NaN be treated as errors ?

In that HTML spec algorithm itself, there’s nothing explicit about handling Infinity and NaN — but in the WebIDL spec at https://webidl.spec.whatwg.org/#ref-for-idl-float①, I see:

> `Infinity`, `-Infinity` and `NaN` must not be used as the value of a `float` or `double`

[00:34:19.0030] <Domenic>
sideshowbarker: the HTML algorithm treats strings like "Infinity" or "NaN" as errors, if that's what you're asking. It's completely separate from the Web IDL algorithm, and has different call sites.

[00:38:02.0335] <annevk>
I'm not sure, but I think there's definitely a worry about changing the existing contract drastically as it'll impact many websites.

[00:38:25.0109] <sideshowbarker>
So I guess the only way that algorithm would ever return Inifinity or NaN is if it were given "Infinity" or "NaN"  as input? If so then I guess another way to state it is: The algorithm never returns "Infinity" or "NaN" — it always returns either an actual number, or any error?

[00:38:39.0287] <sideshowbarker>
 * So I guess the only way that algorithm would ever return Inifinity or NaN is if it were given "Infinity" or "NaN"  as input? If so then I guess another way to state it is: The algorithm never returns "Infinity" or "NaN" — it always returns either an actual number, or an error?

[00:39:54.0999] <annevk>
That looks correct, from a quick glance.

[00:43:53.0623] <Domenic>
The latter statement seems correct. But the former doesn't. If the algorithm were given "Infinity" or "NaN" as an input, then it would return error, not Infinity or NaN.

[00:45:41.0791] <sideshowbarker>
Right, sorry — I misspoke there. I guess meant to say something more like, The only way something would end up getting _evaluated_ (not returned) by the algorithm as Inifinity or NaN would be if it the algorithm were given the strings "Infinity" or "NaN"  as input.

[03:42:41.0855] <hsivonen>
The ZWNJ and ZWJ rules at https://www.iana.org/assignments/idna-tables-12.0.0/idna-tables-12.0.0.xhtml#idna-tables-context affect whether a URL is fetchable, but the middle dot rule seems to affect only the URL bar display the domain. Has anyone researched what the effect of this list should be on browser behavior? https://www.iana.org/assignments/idna-tables-12.0.0/idna-tables-12.0.0.xhtml#idna-tables-context CC annevk 

[04:12:14.0154] <hsivonen>
> <@hsivonen:mozilla.org> The ZWNJ and ZWJ rules at https://www.iana.org/assignments/idna-tables-12.0.0/idna-tables-12.0.0.xhtml#idna-tables-context affect whether a URL is fetchable, but the middle dot rule seems to affect only the URL bar display the domain. Has anyone researched what the effect of this list should be on browser behavior? https://www.iana.org/assignments/idna-tables-12.0.0/idna-tables-12.0.0.xhtml#idna-tables-context CC annevk

Ooh. I noticed the "lookup" column just now. That explains fetchability vs. display.

[05:38:59.0688] <hsivonen>
annevk: I'm looking at the unit tests of the IDNA crate and have trouble believing what I'm seeing. Is it really intentional that empty DNS labels are allowed in URLs as long as the domain as a whole isn't empty? (Somehow I imagined that only a trailing empty label was allowed.) Browsers don't seem to treat hsivonen.fi.xn-- as equivalent to hsivonen.fi. , but I fail to find spec text that says so. What am I missing?

[05:42:21.0971] <annevk>
So `https://example..com/` parses. I think I was surprised by that as well. Not sure about `xn--` though.

[05:48:05.0652] <annevk>
hsivonen: I guess what's not clear is where decoding `xn--` fails. It does seem good for it to fail though as it would normalize away, which seems bad.

[05:48:59.0125] <hsivonen>
> <@annevk:matrix.org> hsivonen: I guess what's not clear is where decoding `xn--` fails. It does seem good for it to fail though as it would normalize away, which seems bad.

When reading the RFC, I don't see `xn--` failing at all.

[05:49:21.0422] <hsivonen>
annevk: But are other empty labels supposed to be allowed. Is hsivonen..fi really supposed to be allowed?

[05:49:45.0343] <annevk>
hsivonen: I think it has worked in all browsers since forever?

[05:50:36.0460] <annevk>
If we just did DNS there's a whole bunch of things we could ban, but we don't and therefore it's trickier.

[05:51:33.0997] <hsivonen>
> <@annevk:matrix.org> hsivonen: I think it has worked in all browsers since forever?

Ah, in Firefox the URL bar behavior depends on the URL scheme being there

[05:53:54.0222] <annevk>
I think per https://www.unicode.org/reports/tr46/#ProcessingStepPunycode and https://www.rfc-editor.org/rfc/rfc3492.html `xn--` is indeed expected to become the empty string. That seems like a bug though.

[05:57:35.0343] <annevk>
hsivonen: r? https://github.com/whatwg/encoding/pull/328

[06:58:17.0674] <zcorpan>
> <@jub0bs:matrix.org> Do you mean "reasonable options" for fixing the CORS error? I'm not sure I can think of more than what I've already suggested, tbh. One difficulty is that browsers are often left with insufficient contextual information about a preflight failure to produce a helpful CORS error message. For a typical example, see https://jub0bs.com/posts/2023-02-08-fearless-cors/#9-ease-troubleshooting-by-eschewing-shortcuts-during-preflight

I haven't checked closely what the status quo is, but the message can include a link at least. It seems Firefox currently links to https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS/Errors/CORSMissingAllowOrigin but Chrome doesn't have a link

[07:42:03.0913] <hsivonen>
> <@annevk:matrix.org> I think per https://www.unicode.org/reports/tr46/#ProcessingStepPunycode and https://www.rfc-editor.org/rfc/rfc3492.html `xn--` is indeed expected to become the empty string. That seems like a bug though.

More generally, it seems like a bug not to require Punycode decode to output at least one non-ASCII code point.

[07:43:04.0088] <dean.highpower>
The existing HTML spec respects no RFC (5321 or 5322), instead invents a new syntax for email addresses. This new syntax rejects perfectly valid us-ascii mailbox addresses that are and have been valid (since at least 1982) with no apparent basis. This is harmful. I have seen this new syntax used by other projects, citing the HTML spec as the authority for their "willful violation of RFC 5322" -- with no mention of the standard they *should* be looking at, RFC-5321.
I understand the practical considerations of wanting a simple grammar to check against. Could we specify a simple syntax check that would not reject any mailbox address considered valid by RFC-5321?
A strict check could be used to test *exact* adherence to the RFC, such checkers exist for many languages. (https://www.npmjs.com/package/smtp-address-parser for JavaScript.)
The HTML spec is a "living standard" so should be open to change. Please can we fix it?


[07:49:35.0258] <annevk>
hsivonen: that would probably be a good property, yeah!

[07:52:01.0750] <annevk>
It's not about wanting a simple grammar, it's a worry about breaking existing websites.

[07:55:45.0618] <dean.highpower>
> <@annevk:matrix.org> It's not about wanting a simple grammar, it's a worry about breaking existing websites.

Well, *changing* them -- I would say they're broken now, so fixing them.

[07:56:10.0933] <dean.highpower>
😀

[07:58:30.0831] <annevk>
Right, I'm well familiar with both sides of this debate. You asked why people might be reluctant so I attempted to explain.

[08:05:25.0753] <dean.highpower>
Okay, does anybody think that RFC-5322 is the right standard to be looking to for mailbox address syntax?
I think this is the underlying mistake (not recognizing RFC-5321 as the relavent document) that lead the HTML spec into inventing it's own syntax. (That's like swallowing a spider to catch the fly...)


[08:11:25.0833] <dean.highpower>
no blame here, email standard are complex

[08:11:56.0575] <dean.highpower>
it's easy to get confused

[08:12:25.0321] <dean.highpower>
this is the count of RFC related to DNS and mail

[08:14:37.0550] <Andreu Botella>
I'm taking a look at which parts of event handling in the DOM spec server-side runtimes and other non-DOM implementations need to implement and which don't

[08:15:15.0032] <Andreu Botella>
and I'm wondering about the behavior of an event's path if the same event gets dispatched from an event listener

[08:17:03.0168] <Andreu Botella>
in dispatch 5.3, before running the listeners, an item is added to the event's path, and then after running the listeners in step 8 the path is cleared

[08:17:30.0029] <Andreu Botella>
but if you have an event dispatch inside a listener, any "outer" listeners that haven't yet run will have an empty path

[08:17:52.0390] <Andreu Botella>
am I reading this right?

[08:19:37.0044] <Andreu Botella>
annevk:

[08:26:33.0130] <annevk>
I guess I don't think that's a relevant question here. Pretty much everyone is in agreement that this should change. The question is really how, what the processing model is going to be, and what the impact of that change will be (which likely requires some amount of testing and perhaps incremental rollout in some browser).

[08:29:38.0952] <Andreu Botella>
oh, I just realized that the dispatch flag is meant to avoid this kind of thing

[08:30:12.0633] <Andreu Botella>
but it doesn't seem to prevent dispatches from `el.click()`

[08:30:25.0856] <Andreu Botella>
oh, never mind, that's of course a new event

[08:32:11.0912] <Andreu Botella>
I'm working on a PR that adds a few assertions and notes to indicate which parts of event handling are not needed for implementers like server-side runtimes

[08:32:44.0304] <Andreu Botella>
and it seems like for such runtimes, an event's path can be simplified into an `EventListener` or null, rather than a list

[08:38:55.0977] <annevk>
Why would a path ever be an `EventListener`? That seems weird. That also wouldn't work once we add path support to the `EventTarget` constructor, as has been requested for a while (mainly needs someone to write down a design).

[08:40:29.0309] <Andreu Botella>
 * and it seems like for such runtimes, an event's path can be simplified into an `EventTarget` or null, rather than a list

[08:40:34.0133] <Andreu Botella>
my bad, an `EventTarget`

[08:43:40.0976] <Andreu Botella>
> <@annevk:matrix.org> Why would a path ever be an `EventListener`? That seems weird. That also wouldn't work once we add path support to the `EventTarget` constructor, as has been requested for a while (mainly needs someone to write down a design).

By "adding path support to the `EventTarget` constructor", I assume you mean letting custom `EventTarget`s define tree structures?

[08:44:56.0773] <Andreu Botella>
I didn't know that was being worked on, or in people's todo list

[08:51:23.0393] <Andreu Botella>
there's still a number of event handling-related things that implementations without a native DOM wouldn't need to support, such as things related to shadow trees or touch target lists

[08:52:05.0636] <Andreu Botella>
so that PR might still be useful after all, but it's better to wait until the path support is ready

[09:19:59.0135] <zcorpan>
> <@sideshowbarker:matrix.org> Right, sorry — I misspoke there. I guess meant to say something more like, The only way something would end up getting _evaluated_ (not returned) by the algorithm as Inifinity or NaN would be if it the algorithm were given the strings "Infinity" or "NaN"  as input.

No, those strings are treated as garbage and return an error in step 10. Numbers that are greater than 2^1024 or less than -2^1024 are "like +Infinity and -Infinity" and return an error in step 17

[09:27:20.0853] <hsivonen>
> <@annevk:matrix.org> hsivonen: that would probably be a good property, yeah!

Looks like Firefox and Safari already enforce this. Time to file UTS 46 feedback, I guess. As for genuinely empty labels, at least the error messages in both Firefox and Safari suggest that those cases fail on the DNS resolution layer. It's unclear to me how useful that is. Are there cases where an empty label (in non-final position) actually resolves?

[09:28:25.0643] <annevk>
hsivonen: see the DNS vs host parser issue on non-DNS systems. They are rather opaque to me.

[12:44:23.0039] <dean.highpower>
So will the HTML spec going forward define the syntax of email address according to the <Mailbox> ABNF rule from RFC 5321, as extended by RFC 6531? I believe this would be consistent with the vast majority of operational email systems on the public Internet. (Including gmail, outlook, etc.) How is a "processing model" involved in this? (Please forgive my ignorance.)


[15:24:49.0129] <dean.highpower>
Bonus: once you're citing the correct RFC, there is no need to publish any "willful violation" notice about any irreverent RFCs.


2024-03-12
[20:42:32.0405] <sideshowbarker>
Is the https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values algorithm known to differ in any way from the behavior of [`strtod`](https://en.cppreference.com/w/c/string/byte/strtof)?

[03:38:17.0946] <Ms2ger>
I assume you could find any number of differences if you looked, if those are even consistent between platforms

[03:51:41.0391] <sideshowbarker>
Well the thing is, as far as I can see, in practice none of Blink, Gecko, Servo, or WebKit actually implement that algorithm — at least not intentionally.

Instead, as far as I can see, Blink and Gecko use https://github.com/google/double-conversion — and until a year ago, WebKit did too. WebKit now uses https://github.com/fastfloat/fast_float — which is functionally equivalent to `strtod` — as a drop-in replacement for the double-conversion it had also been using previously.

So if our goal is interoperability, it seems like what we’d ideally need to specify is, functional equivalence with double-conversion — which essentially seems to mean functional equivalence with `strtod`.

[03:52:34.0223] <sideshowbarker>
And for the case of Servo, as far as I can see, it just uses the Rust standard library’s `parse()`

[03:53:25.0463] <sideshowbarker>
The only engine implementation I have found that seems to attempt to implement its own double parser is the one in Ladybird.

[03:55:32.0338] <sideshowbarker>
But by attempting implement what’s in the spec rather than just using double-conversion or fast_float, it seems like the Ladybird implementation risks lack of interoperability with the other engines.

[04:58:39.0176] <Ms2ger>
Oh, hmm. I seem to recall that all the integer ones were handcrafted, at least; but maybe floats are too hard

[07:26:19.0439] <akaster>
I suspect Ladybird will have quite a few Interop concerns like that, seeing as implementing the spec as written before trying to optimize is a project goal/strategy. And that pulling in a third party dependency would be against the project's... Identity? Ethos? Something like that. 

If the status quo is that everyone uses an implementation that "matches strtod" then perhaps the spec should have a normative reference to ISO C rather than define the float parsing algorithm itself.

[08:14:14.0758] <annevk>
Hmm, has anyone actually identified any differences? Also, it's unclear to me if ISO C is a suitable reference. I thought most ISO standards were not freely accessible.

[09:12:57.0393] <Jeffrey Yasskin>
Both strtod and HTML start with a computation of the exact mathematical value of the number, and then round to a nearby representation. strtod's rounding is: " If the subject sequence has the decimal form and at most DECIMAL_DIG (defined in
<float.h>) significant digits, the result should be correctly rounded. If the subject
sequence D has the decimal form and more than DECIMAL_DIG significant digits,
consider the two bounding, adjacent decimal strings L and U, both having
DECIMAL_DIG significant digits, such that the values of L, D, and U satisfy L ≤ D ≤ U.
The result should be one of the (equal or adjacent) values that would be obtained by
correctly rounding L and U according to the current rounding direction, with the extra stipulation that the error with respect to D should have a correct sign for the current
rounding direction." This is also a "should"-level requirement, while HTML's is a "must".

So there's not just one "strtod"; potentially each platform can have its own. Looking at `fast_float()`, they say "We provide exact rounding (including round to even).", which I think matches HTML's requirement.

[09:13:34.0775] <Jeffrey Yasskin>
 * Both (the specification of) strtod and HTML start with a computation of the exact mathematical value of the number, and then round to a nearby representation. strtod's rounding is: " If the subject sequence has the decimal form and at most DECIMAL\_DIG (defined in
\<float.h>) significant digits, the result should be correctly rounded. If the subject
sequence D has the decimal form and more than DECIMAL\_DIG significant digits,
consider the two bounding, adjacent decimal strings L and U, both having
DECIMAL\_DIG significant digits, such that the values of L, D, and U satisfy L ≤ D ≤ U.
The result should be one of the (equal or adjacent) values that would be obtained by
correctly rounding L and U according to the current rounding direction, with the extra stipulation that the error with respect to D should have a correct sign for the current
rounding direction." This is also a "should"-level requirement, while HTML's is a "must".

So there's not just one "strtod"; potentially each platform can have its own. Looking at `fast_float()`, they say "We provide exact rounding (including round to even).", which I think matches HTML's requirement.

[15:12:59.0187] <Jeffrey Yasskin>
FYI, https://whatwg.org/working-mode links to https://whatwg.org/Stages.md, which doesn't exist.

[15:13:24.0487] <Jeffrey Yasskin>
(I'll file an issue at some point, but distracted by the W3C Breakout Day right now.)


2024-03-13
[18:24:47.0287] <Domenic>
Seems like the sort of thing where if your concern was interop, step 1 would be an exhaustive test suite.

[18:29:26.0575] <sideshowbarker>
I guess my biggest concern is whether we can maybe prevent other implementors from spending time evaluating that algorithm, if it‘s not actually important or useful for it to be actually be implemented as-is to the letter of the spec.

[18:29:45.0717] <sideshowbarker>
It’s not clear to me at least what the algorithm is actually based on

[18:31:26.0757] <sideshowbarker>
For example, was is written based on reading the double definition in the IEEE 754 spec and then attempting to put together an algorithm for parsing that? Or else was it written by looking at existing parsing code for double-parsing functions (`strtod` or whatever)?

[18:35:56.0894] <sideshowbarker>
I would personally be happy with us just adding a non-normative Note to the end or that algorithm, saying something like
> _Note: In practice, rather than handcrafting an implementation of the above algorithm, most existing implementations use double-parsing functions from libraries such as [double-conversion](https://github.com/google/double-conversion) and [fast_float](https://github.com/fastfloat/fast_float)._
…or whatever similar wording we might be able to get agreement on.

[18:36:13.0598] <sideshowbarker>
 * I would personally be happy with us just adding a non-normative Note to the end or that algorithm, saying something like

> _Note: In practice, rather than handcrafting an implementation of the above algorithm, most existing implementations use double-parsing functions from libraries such as [double-conversion](https://github.com/google/double-conversion) and [fast\_float](https://github.com/fastfloat/fast_float)._

…or whatever similar wording we might be able to get agreement on.

[18:46:00.0641] <sideshowbarker>
I think it’s also worth noting that the ES spec doesn’t rely on the HTML floating-point algorithm for double parsing, and I think the CSS spec doesn’t either.

And so also worth noting that because of that, implementations do double-parsing in places in their code other than just for HTML attribute values — notably, in the JavaScript-handling sources, and in the CSS sources.

And so, in the engine sources, implementations have common/shared code for double-parsing that‘s called into from the HTML-attribute parsing code, and the JavaScript parsing code, and the CSS parsing code.

Given all that, it seems very unlikely that any engine over the long run is going to have a specific implementation of the HTML floating-point algorithm that’s separate from their shared double-parsing code. (I realize that Ladybird does now, but I think that’s likely to change eventually — for various reasons, maybe including performance.)

[18:53:39.0305] <sideshowbarker>
I’m personally happy with the existing level of WPT coverage that we have for this — with https://github.com/web-platform-tests/wpt/pull/44355 now merged. What I’m less happy about is the effect it may have for causing implementors be unaware that existing engines don’t implement the algorithm as-is, and for causing implementors to potentially waste time.

[18:55:01.0488] <Domenic>
I mean, in general it's pretty rare to implement spec algorithms as-is, especially for low-level stuff like numbers and strings. https://infra.spec.whatwg.org/#algorithm-conformance and all that.

[18:58:04.0322] <sideshowbarker>
True, but in most cases what’s implemented in engines is an algorithm that’s handcrafted to be a workalike that’s functionally equivalent to the spec algorithm — rather than instead being implemented by just calling some code in a third-party library that you don’t know actually fully conforms to the requirements in the spec as written.

[19:00:14.0553] <sideshowbarker>
Anyway, I don’t mean to beat this into the ground and I’m not bringing it up to be pedantic about it — instead, I’m just wondering whether it’s a place where we might be able to save implementors some trouble by putting a little more information in the spec, even if just a non-normative note.

[19:00:38.0801] <sideshowbarker>
And if so, I’d be very happy to raise a PR for it.

[19:01:56.0861] <Domenic>
I guess I'd personally like to hear if the implementers of the relevant parts of the browser were confused by the spec, or not. I guess we have one testimonial from yourself, but more would be helpful before concluding its a problem.

[19:05:06.0588] <sideshowbarker>
Fair enough

[01:54:45.0012] <Ms2ger>
I assume all the implementations besides Servo and Ladybird long predate the spec

[01:55:14.0394] <sideshowbarker>
yeah I reckon so

[02:01:53.0335] <annevk>
I think what is first- and third-party code can shift over time and it's not really the job of the specification to go into the weeds about that. If you find a library or function call that happens to match the requirements in the specification and passes all the tests, and is better in some measurable way over what you had before, more power to you. From what Jeffrey wrote about ISO C that at least doesn't match the spirit of the HTML language as it allows for less precision. HTML in theory also allows for that due to the overarching "limits may apply", but also encourages implementers to push those limits. I'm not sure a note would really help with this as it would have to go into the weeds as I have done here to properly convey all the nuances.

[02:02:48.0058] <sideshowbarker>
Yeah, as far as a note, I can imaging that it would be challenging to get the wording right

[02:11:35.0643] <sideshowbarker>
Also by the way, I realize I misspoke a bit about something: While it’s true that the Blink and Gecko and WebKit use double-conversion or fast_float — they don’t _just _ use those. Instead they have to do preprocessing to skip ASCII whitespace — not Unicode whitespace, and specifically not U+000B, and _maybe_ to skip/ignore any leading plus sign.

fast_float uses a `from_chars` implementation rather than `strtod` — and `from_chars` on its own per-spec doesn’t skip/ignore leading whitespace. The docs say it also doesn’t skip/ignore a leading plus sign, but it seems to me that maybe the fast_float `from_chars` at least actually does.

And I’m not sure if the double parser in double-conversion skips leading plus signs and whitespace — but if it _does_ skip whitespace, it would do it for Unicode whitespace, not the ASCII whitespace subset.

So anyway, to conform to the HTML algorithm, engines using any third-party libraries would need to do preprocessing on the strings — to skip/ignore the right kind of whitespace and (possibly) the plus sign.

[02:13:32.0649] <sideshowbarker>
(and with that I’ll be quiet, and go back to trying to figure out how to correctly handle find-in-page for closed `details` that are nested…)

[06:18:16.0507] <Dominic Farolino>
How does one "copy" or "clone" an infra struct? There are several definitions for "clone" in infra, but none specifically for structs. Can we just say "copy" or "clone" manually?

[06:21:31.0582] <Ms2ger>
I'd ask infra for a definition

[06:23:43.0299] <annevk>
Hmm, maybe URL.parse() should be added: https://twitter.com/kilianvalkhof/status/1765312128188088454 (I disagree with the assertion there, but it seems reasonable to have a URL-or-null abstraction)

[08:08:38.0491] <Noam Rosenthal>
Dominic Farolino: usually you clone a struct manually. Often enough some special processing needs to be done on one or more of the items (e.g. if one of the items is a list, do you want to clone the list or pass it by reference?)

[08:11:21.0411] <annevk>
It seems reasonable to define a shallow clone for structs. We have that for lists and maps. Thus far nobody needed it for structs I guess. Should be a fairly straightforward PR.

[08:36:03.0710] <TabAtkins>
> <@annevk:matrix.org> Hmm, maybe URL.parse() should be added: https://twitter.com/kilianvalkhof/status/1765312128188088454 (I disagree with the assertion there, but it seems reasonable to have a URL-or-null abstraction)

Yes, having to use a try block every time you want to parse a URL is indeed very frustrating. If we had an expression-level way to catch an error and return a value, it wouldn't be as big of an issue, but in the absence of JS having that, we absolutely should have a non-throwing way to parse a URL (returning null on failure, definitely).

[08:41:11.0723] <annevk>
Reopened https://github.com/whatwg/url/issues/372 cc Adam Rice 

[08:57:48.0662] <Jeffrey Yasskin>
> <@sideshowbarker:matrix.org> I think it’s also worth noting that the ES spec doesn’t rely on the HTML floating-point algorithm for double parsing, and I think the CSS spec doesn’t either.
> 
> And so also worth noting that because of that, implementations do double-parsing in places in their code other than just for HTML attribute values — notably, in the JavaScript-handling sources, and in the CSS sources.
> 
> And so, in the engine sources, implementations have common/shared code for double-parsing that‘s called into from the HTML-attribute parsing code, and the JavaScript parsing code, and the CSS parsing code.
> 
> Given all that, it seems very unlikely that any engine over the long run is going to have a specific implementation of the HTML floating-point algorithm that’s separate from their shared double-parsing code. (I realize that Ladybird does now, but I think that’s likely to change eventually — for various reasons, maybe including performance.)

FWIW, +1 to having a single double-parsing algorithm that all of ES, CSS, and HTML can use ... if that's web-compatible. See also https://github.com/whatwg/infra/issues/189.

[08:59:41.0869] <annevk>
I'm not sure we should share with ES until we know how the long term number types thing plays out. It came up before and the main reason not to do it was to preserve infinite precision, which seems like a worthwhile goal for a high-level language.

[09:00:01.0131] <annevk>
CSS & HTML I can see though.

[09:15:07.0318] <Jeffrey Yasskin>
I don't feel strongly about the details, but we could explicitly divide the algorithm into 2 pieces: First we parse the string into an infinite-precision real number, which pins down syntax like whitespace and leading-plus behavior. Then we define the Real->IEEE 754 conversion, which establishes than 0 ULPs of error are allowed, and the round-to-even behavior. If ES wants to preserve infinite-precision arithmetic for a while after the string is parsed, that's fine; they just only call the first algorithm.

[09:15:18.0051] <Jeffrey Yasskin>
 * I don't feel strongly about the details, but we could explicitly divide the algorithm into 2 pieces: First we parse the string into an infinite-precision real number, which pins down syntax like whitespace and leading-plus behavior. Then we define the Real->IEEE 754 conversion, which establishes that 0 ULPs of error are allowed, and the round-to-even behavior. If ES wants to preserve infinite-precision arithmetic for a while after the string is parsed, that's fine; they just only call the first algorithm.

[11:01:49.0225] <judge_sour_dough_bread>
Hi all. The HTML spec says, under [§4.13.4](https://html.spec.whatwg.org/#custom-elements-api), for "Element definition" list of steps, specifically step 18:
> Let upgrade candidates be all elements that are shadow-including descendants of document, whose namespace is the HTML namespace and whose local name is localName, in shadow-including tree order. Additionally, if extends is non-null, only include elements whose is value is equal to name.
This suggests that e.g. `define(`foo-bar`, class FooBarElement extends HTMLElement { /* ... */ })` (autonomous custom element)  ` will _not_ "upgrade" elements like `<span is="foo-bar"></span>` (`span` is an example, any other known HTML element will do as well), correct? To explain how I have assumed this: the `name` for the element is `foo-bar`, after all (established at the outset of the aforementioned list of steps), while `localName` is same as `name` (step 5) since `extends` is null, and so only `foo-bar` element(s) in the document will be upgraded. Can someone tell me my reading of the spec is correct?

[11:02:50.0368] <judge_sour_dough_bread>
 * Hi all. The HTML spec says, under [§4.13.4, "The `CustomElementRegistry` interface"](https://html.spec.whatwg.org/#custom-elements-api), for the "Element definition" list of steps, specifically step 18:

> Let upgrade candidates be all elements that are shadow-including descendants of document, whose namespace is the HTML namespace and whose local name is localName, in shadow-including tree order. Additionally, if extends is non-null, only include elements whose is value is equal to name.
This suggests that e.g. `define(`foo-bar`, class FooBarElement extends HTMLElement { /* ... */ })` (autonomous custom element)  `will _not_ "upgrade" elements like`\<span is="foo-bar">` (`span`is an example, any other known HTML element will do as well), correct? To explain how I have assumed this: the`name`for the element is`foo-bar`, after all (established at the outset of the aforementioned list of steps), while `localName`is same as`name`(step 5) since`extends`is null, and so only`foo-bar\` element(s) in the document will be upgraded. Can someone tell me my reading of the spec is correct?

[11:03:04.0320] <judge_sour_dough_bread>
 * Hi all. The HTML spec says, under [§4.13.4, "The `CustomElementRegistry` interface"](https://html.spec.whatwg.org/#custom-elements-api), for the "Element definition" list of steps, specifically step 18:

> Let upgrade candidates be all elements that are shadow-including descendants of document, whose namespace is the HTML namespace and whose local name is localName, in shadow-including tree order. Additionally, if extends is non-null, only include elements whose is value is equal to name.

This suggests that e.g. `define(`foo-bar`, class FooBarElement extends HTMLElement { /* ... */ })` (autonomous custom element)  `will _not_ "upgrade" elements like`\<span is="foo-bar">` (`span`is an example, any other known HTML element will do as well), correct? To explain how I have assumed this: the`name`for the element is`foo-bar`, after all (established at the outset of the aforementioned list of steps), while `localName`is same as`name`(step 5) since`extends`is null, and so only`foo-bar\` element(s) in the document will be upgraded. Can someone tell me my reading of the spec is correct?

[11:03:29.0834] <judge_sour_dough_bread>
 * Hi all. The HTML spec says, under [§4.13.4, "The `CustomElementRegistry` interface"](https://html.spec.whatwg.org/#custom-elements-api), for the "Element definition" list of steps, specifically step 18:

> Let upgrade candidates be all elements that are shadow-including descendants of document, whose namespace is the HTML namespace and whose local name is localName, in shadow-including tree order. Additionally, if extends is non-null, only include elements whose is value is equal to name.

This suggests that e.g. `define("foo-bar", class FooBarElement extends HTMLElement { /* ... */ })` (autonomous custom element) will _not_ "upgrade" elements like`\<span is="foo-bar">` (`span`is an example, any other known HTML element will do as well), correct? To explain how I have assumed this: the`name`for the element is`foo-bar`, after all (established at the outset of the aforementioned list of steps), while `localName`is same as`name`(step 5) since`extends`is null, and so only`foo-bar\` element(s) in the document will be upgraded. Can someone tell me my reading of the spec is correct?

[11:04:31.0073] <judge_sour_dough_bread>
 * Hi all. The HTML spec says, under [§4.13.4, "The `CustomElementRegistry` interface"](https://html.spec.whatwg.org/#custom-elements-api), for the "Element definition" list of steps, specifically step 18:

> Let upgrade candidates be all elements that are shadow-including descendants of document, whose namespace is the HTML namespace and whose local name is localName, in shadow-including tree order. Additionally, if extends is non-null, only include elements whose is value is equal to name.

This suggests that e.g. `define("foo-bar", class FooBarElement extends HTMLElement { /* ... */ })` (autonomous custom element) will _not_ "upgrade" elements like`<span is="foo-bar"><!-- ... --></span>` (`span`is an example, any other known HTML element will do as well), correct? To explain how I have assumed this: the`name`for the element is`foo-bar`, after all (established at the outset of the aforementioned list of steps), while `localName` is same as`name` (step 5) since`extends` is null, and so only`<foo-bar><!-- ... --></foo-bar>` element(s) in the document will be upgraded. Can someone tell me my reading of the spec is correct?

[11:12:10.0410] <judge_sour_dough_bread>
 * Hi all. The HTML spec says, under [§4.13.4, "The `CustomElementRegistry` interface"](https://html.spec.whatwg.org/#custom-elements-api), for the "Element definition" list of steps, specifically step 18:

> Let upgrade candidates be all elements that are shadow-including descendants of document, whose namespace is the HTML namespace and whose local name is localName, in shadow-including tree order. Additionally, if extends is non-null, only include elements whose is value is equal to name.

This suggests that e.g. `define("foo-bar", class FooBarElement extends HTMLElement { /* ... */ })` (autonomous custom element) will _not_ "upgrade" elements like`<span is="foo-bar"><!-- ... --></span>` (`span` can be replaced with any other known HTML element for the sake of the example), correct? To explain how I have assumed this: the`name`for the element is`foo-bar`, after all (established at the outset of the aforementioned list of steps), while `localName` is same as`name` (step 5) since`extends` is null, and so only`<foo-bar><!-- ... --></foo-bar>` element(s) in the document will be upgraded. Can someone tell me my reading of the spec is correct?

[13:30:15.0872] <Noam Rosenthal>
judge_sour_dough_bread: seems right, you need to have an `extends` option to make this into a customize built-in element.


2024-03-14
[03:14:31.0863] <judge_sour_dough_bread>
> <@noamr:matrix.org> judge_sour_dough_bread: seems right, you need to have an `extends` option to make this into a customize built-in element.

Thank you, Noam. To give some context here, I may have understood Web components a bit wrong -- I originally wanted some subclass of specifically `HTMLElement` -- and not a known HTML element like `span`, `fieldset`, `button` etc -- because I wanted a "mix-in" component, one that can work regardless what element is upgraded to its functionality. Which is why I was trying to use the `is` attribute, but turns out that in practice (correct me if I am wrong about this, please) one either uses `is` attribute on a known HTML element, to upgrade to a custom element that specifies `extends`, or one that uses the custom element name (e.g. `foo-bar`) for a component that does _not_ use `extends`. So, in effect, "mix-ins", contrary to perhaps their general principle, cannot be used without `extends`?

[07:17:35.0182] <Noam Rosenthal>
Yea I don’t think you can implement a mixin in this particular way, but there might be other forums with more ideas around this (this forum is for working on the standards themselves)

[07:58:39.0838] <annevk>
Luke Warlow: feel free to reverse dupe yourself in the future, especially if it's an area you're working on. I think you should be able to do that given you're in the triage team.

[07:59:36.0489] <Luke Warlow>
Okay good to note, forgot I had those permissions.

[09:49:30.0598] <zcorpan>
annevk: https://github.com/whatwg/html/issues/10077#issuecomment-1997383562

[11:22:24.0558] <Dominic Farolino>
Suppose you want a web API to be able to take as an argument, an instance of a JS class that has some methods, and you want the API to be able to call those methods on the input instance. Do you have to define the param as type `any` and then just `GetMethod(obj, 'method1')`, ....? and pull those methods off and store them separately as callback functions, for later invocation?

[11:23:59.0784] <Dominic Farolino>
And does that give you the right `this` value (i.e., the instance of the class w/ the methods) when you're invoking the callbacks later on? I'm pretty sure it doesn't

[11:27:22.0315] <annevk>
Is this about Observer? There's an issue discussing that I thought.

[11:27:40.0848] <Dominic Farolino>
This is not

[11:27:49.0502] <annevk>
Thanks, will hopefully have some details tomorrow.

[11:27:50.0131] <Dominic Farolino>
I found https://webidl.spec.whatwg.org/#dfn-callback-this-value though, which is what I'm looking for

[11:27:54.0447] <Dominic Farolino>
This is about shared storage worklets

[11:28:14.0230] <Dominic Farolino>
So it turns out https://html.spec.whatwg.org/C#fakeworkletglobalscope-process is basically what I was looking for-ish i think

[11:28:50.0784] <TabAtkins>
If it's an arbitrary JS class (not an IDL interface), then generally we'll treat it as a dictionary, I think? And pull the methods off when initially passed, stashing them for later calling.

[11:29:20.0364] <Dominic Farolino>
That, _plus_ storing the original instance for later use as the callback this value, I guess?

[11:29:20.0869] <annevk>
Worklets was the other thing I thought of that might have something like this, yeah.

[11:30:11.0715] <annevk>
The one wrinkle here is that this is what `interface callback` is, essentially, but we generally decided we didn't want that. But maybe we do, sometimes.

[11:33:10.0385] <Dominic Farolino>
Heh, yeah but for as long as that scary note above callback interfaces exists, getting away with normal callbacks feels less controversial

[11:55:06.0062] <annevk>
These are not normal callbacks though. You're using `object` here presumably in IDL. That's even more magical.

[15:09:29.0646] <snek>
is the parent document of an iframe supposed to lose focus when the iframe is focused? seeing disagreement among browsers

[16:55:21.0931] <Domenic>
> <@domfarolino:matrix.org> That, _plus_ storing the original instance for later use as the callback this value, I guess?

Example at https://streams.spec.whatwg.org/#rs-constructor , underlyingSource is taken as an object but also converted to a dictionary type to grab the methods

[16:57:00.0693] <Domenic>
https://github.com/whatwg/webidl/issues/701 is the canonical issue and we did discuss something very similar at https://github.com/WICG/observable/issues/71#issuecomment-1804956795


2024-03-15
[00:11:42.0734] <annevk>
snek: I think so, yes.

[00:36:44.0854] <annevk>
Details posted. Apparently code has been in place for about a decade...

[02:38:39.0853] <zcorpan>
A lot of red in https://wpt.fyi/results/html/semantics/embedded-content/media-elements/loading-the-media-resource?label=experimental&label=master&aligned

[02:41:00.0545] <zcorpan>
annevk: https://github.com/WebKit/WebKit/blob/a7b863a49945946c913e6e194ec047da844094a4/Source/WebCore/html/HTMLMediaElement.cpp#L5404 responds to inserting `source` elements, and https://github.com/WebKit/WebKit/blob/a7b863a49945946c913e6e194ec047da844094a4/Source/WebCore/html/HTMLMediaElement.cpp#L886 ("end tag seen") only invokes text track selection, so it looks to me like WebKit follows the spec's model to try `source` elements in order during parsing

[02:41:51.0150] <zcorpan>
but I may be missing something

[02:48:51.0595] <annevk>
zcorpan: I think the blog post is mistaken, yeah.

[02:50:12.0046] <zcorpan>
annevk: so are software-only formats rejected on iOS?

[02:50:28.0830] <annevk>
The existence of `track` relying on the media element end tag being seen does make the overall proposal more acceptable, though still not a big fan personally.

[02:56:04.0239] <annevk>
zcorpan: as far as `source` processing goes it seems like it, yeah.

[03:24:46.0486] <zcorpan>
jyavenard's comment says later sources are evaluated, which I think means selection is sensitive to where the HTML parser yields


2024-03-17
[03:41:55.0338] <Arnau>
Hi, I was implementing an HTML parser, specifically the decoder part. What is the decoder supposed to report if the input byte stream/queue ended in the middle of a multi-byte codepoint?

[03:43:25.0162] <Arnau>
Can't find it in https://html.spec.whatwg.org/multipage/parsing.html#parse-errors

[03:46:29.0604] <annevk>
Arnau: that's defined in https://encoding.spec.whatwg.org

[03:46:54.0222] <Arnau>
> <@annevk:matrix.org> Arnau: that's defined in https://encoding.spec.whatwg.org

Oh! Sorry to ask stupid questions haha... Thank you

[03:49:18.0116] <sideshowbarker>
Arnau: You're implementing full error reporting in your implementation?

[03:50:42.0637] <Arnau>
My idea is to report a somewhat informative error, yes... The only thing I may not do is multiple errors.


2024-03-18
[00:53:40.0961] <annevk>
Hmm, navigator.userActivation is somehow specified in a completely different way from all other navigator members.

[04:20:31.0193] <csarven>
Does/Can the `type` attribute on the `pre` element (similar to https://html.spec.whatwg.org/multipage/scripting.html#attr-script-type ) help express the type of the formatted text?

[04:33:06.0944] <annevk>
csarven: https://html.spec.whatwg.org/multipage/grouping-content.html#the-pre-element suggests using nested elements. (And I think there's a further suggestion to use the `class` attribute on `code` to denote a programming language.)

[06:11:16.0082] <csarven>
Thanks @annevk:matrix.org . I have noted the use of the `class` attribute before but AFAIK, `language-` is not a prefix for a prefined language as suffix.

Would `<pre type=` violate anything and/or not particularly meaningful for processing software? Its use would be similar to `<script type=` in that it indicates content corresponds to a MIME type. A `class` value is relatively arbitrary compared to `type` using a MIME type.

[06:26:32.0638] <annevk>
csarven: since it's not a defined attribute for the `pre` element it would be non-conforming HTML and might clash with future extensions of HTML. Not recommended.

[06:27:08.0282] <annevk>
csarven: also note that for `script` we have explicitly moved away from using MIME types for the `type` attribute.

[07:27:50.0897] <csarven>
Nod "moveed away from" but as I understand it, conforming values are not limiited to MIME types so far as that *data blocks* are still allowed in the context of `script`.

Is there a definition or advisement on using or error handling attributes that are not defined by a particular element? There are a couple of points in 
https://html.spec.whatwg.org/multipage/introduction.html#syntax-errors and html.spec.whatwg.org/multipage/introduction.html#restrictions-on-content-models-and-on-attribute-values but nothing specifically jumps out.

I ask because if use in the wild is one way for standardised adoption, how can authors know whether they can use something without violating the specification. I'm not trying to insist `<pre type` (although it makes sense to me) but trying to better understand the process. Thanks.

[07:28:35.0055] <csarven>
* Nod "moved away from" but as I understand it, conforming values are not limiited to MIME types so far as that *data blocks* are still allowed in the context of `script`.

Is there a definition or advisement on using or error handling attributes that are not defined by a particular element? There are a couple of points in https://html.spec.whatwg.org/multipage/introduction.html#syntax-errors and html.spec.whatwg.org/multipage/introduction.html#restrictions-on-content-models-and-on-attribute-values but nothing specifically jumps out.

I ask because if use in the wild is one way for standardised adoption, how can authors know whether they can use something without violating the specification. I'm not trying to insist `<pre type` (although it makes sense to me) but trying to better understand the process. Thanks.

[07:45:01.0389] <csarven>
* Nod "moved away from" but as I understand it, conforming values are not limiited to MIME types so far as that *data blocks* are still allowed in the context of `script`.

Is there a definition or advisement on using or error handling attributes that are not defined by a particular element? There are a couple of points in https://html.spec.whatwg.org/multipage/introduction.html#syntax-errors and https://html.spec.whatwg.org/multipage/introduction.html#restrictions-on-content-models-and-on-attribute-values but nothing specifically jumps out.

I ask because if use in the wild is one way for standardised adoption, how can authors know whether they can use something without violating the specification. I'm not trying to insist `<pre type` (although it makes sense to me) but trying to better understand the process. Thanks.

[07:50:32.0771] <zcorpan>
csarven: a quick check is running your doc through https://validator.nu/ / https://validator.w3.org/nu/

[07:51:18.0710] <zcorpan>
csarven: less quick is to read the HTML standard and follow the conformance criteria that apply for documents

[07:52:41.0215] <zcorpan>
csarven: in this case https://html.spec.whatwg.org/multipage/grouping-content.html#the-pre-element says 
Content attributes:
    Global attributes
which does not include `type`

[07:54:40.0826] <zcorpan>
csarven: for user agents the requirement is to follow the defined processing per spec, regardless of what is allowed or not allowed for documents

[09:13:08.0922] <Adıl Babayev>
Salam 

[09:40:12.0489] <csarven>
@zcorpan:mozilla.org  I have read the relevant parts of the spec but like I said what the intended error handling is not clear to me. I understand what the validator says and can observe what browsers do but that's it. Is there a processing instruction that says "when a processor encounter an unrecognised attribute, it must/advised to...". I understand it is 'non-conforming' on paper with respect to the spec.

That aside, any particular reason one should not propose having the `type` attribute on the `pre` element? If UAs are to follow the spec, then how do you get something into the spec? Just make the proposal? Show usage in the wild to support the proposal?

[09:58:07.0400] <Luke Warlow>
Got a question that I think this is probably the best place to ask.

WebKit and Chromium (haven't checked firefox) have this Element::finishParsingChildren() method that gets called from various places. I'm not able to find a corresponding place in the HTML spec for this behaviour though? Does one exist or is there a close aproximate step in the spec anyone knows? I understand it's generally not encouraged to be used but I think I have a legitimate need for it.

[10:01:07.0158] <annevk>
Luke Warlow: it's when the parser does something for an end tag, such as `</script>`. And unless there's a legacy thing, I really think we shouldn't be adding more of it.

[10:03:05.0987] <Luke Warlow>
I need some hook to know when a script finishes parsing to know to set an internal slot.

Though there's added complexity because you can change the contents mid-parse and that shouldn't be set to the slot. So maybe that shows there should be some other approach.

[10:21:26.0994] <zcorpan>
csarven: If the spec doesn't say to do something, UAs aren't expected to do something. i.e. ignore unknown attributes. Other specs can define some processing however.

[10:22:32.0461] <zcorpan>
csarven: for the second question, see https://whatwg.org/faq#adding-new-features

[11:02:30.0329] <annevk>
Luke Warlow: for `script` it's no problem as it's already magic (if you search for "script" inclusive of quotes you'll find where it's handled)


2024-03-19
[00:47:09.0429] <nakima>
What's the matrix "script"

[00:49:27.0107] <nakima>
Woe

[01:40:11.0486] <sideshowbarker>
TabAtkins: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user) state? And a way to use that in combination with its content-visibility state to toggle making it visible?

On the face of it, it seems like what the HTML [`inert`](https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute) attribute means is the same as what CSS means by “not [relevant to the user](https://drafts.csswg.org/css-contain/#relevant-to-the-user)” — and so, that the combination of `inert` + `content-visibility: auto` on a node should cause it to be non-visible.

But the CSS doesn’t actually say that, nor due implementations do that.

The context is: I want to implement the closing and opening of `details` elements using content-visibility internally but also make the contents searchable with find-in-page. The [relevant part of the current HTML spec requirements](https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6) say to use `hidden`:
> The [`details`](https://html.spec.whatwg.org/#the-details-element) element's second [slot](https://dom.spec.whatwg.org/#concept-slot) is expected to have its [`style`](https://html.spec.whatwg.org/#attr-style) attribute set to `"display: block; content-visibility: hidden;"` when the [`details`](https://html.spec.whatwg.org/#the-details-element) element does not have an [`open`](https://html.spec.whatwg.org/#attr-details-open) attribute.

…however, the relevant part of the current CSS Containment spec about `hidden` says this:

> The element [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). The [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **_must not_ be accessible to user-agent features, such as find-in-page**, tab-order navigation, etc., nor be selectable or focusable.

…while the relevant part about `auto` says this:

> If the element is not [relevant to the user](https://drafts.csswg.org/css-contain/#relevant-to-the-user), it also [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). Unlike [`hidden`](https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden), the [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **must still be available as normal to user-agent features such as find-in-page**, tab order navigation, etc., and must be focusable and selectable as normal.

So, to conform to the current CSS spec requirements, to allow find-in-page on closed `details` elements, it seems I actually should not use `hidden` to make them closed (despite what the HTML spec currently says), but should instead use `auto`.

However, just using `content-visibility: auto` for closed `details` will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user). And to me at least, it seems like `inert` could/should be the way to do that, and the CSS and/or HTML specs could/should say that.

But if not with `inert`, is there some other way to make a node not “relevant to the user”?

[01:40:46.0966] <sideshowbarker>
 * TabAtkins: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user) state? And a way to use that in combination with its content-visibility state to toggle making it visible?

On the face of it, it seems like what the HTML [`inert`](https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute) attribute means is the same as what CSS means by “not relevant to the user” — and so, that the combination of `inert` + `content-visibility: auto` on a node should cause it to be non-visible.

But the CSS doesn’t actually say that, nor due implementations do that.

The context is: I want to implement the closing and opening of `details` elements using content-visibility internally but also make the contents searchable with find-in-page. The [relevant part of the current HTML spec requirements](https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6) say to use `hidden`:

> The [`details`](https://html.spec.whatwg.org/#the-details-element) element's second [slot](https://dom.spec.whatwg.org/#concept-slot) is expected to have its [`style`](https://html.spec.whatwg.org/#attr-style) attribute set to `"display: block; content-visibility: hidden;"` when the [`details`](https://html.spec.whatwg.org/#the-details-element) element does not have an [`open`](https://html.spec.whatwg.org/#attr-details-open) attribute.

…however, the relevant part of the current CSS Containment spec about `hidden` says this:

> The element [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). The [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **_must not_ be accessible to user-agent features, such as find-in-page**, tab-order navigation, etc., nor be selectable or focusable.

…while the relevant part about `auto` says this:

> If the element is not [relevant to the user](https://drafts.csswg.org/css-contain/#relevant-to-the-user), it also [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). Unlike [`hidden`](https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden), the [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **must still be available as normal to user-agent features such as find-in-page**, tab order navigation, etc., and must be focusable and selectable as normal.

So, to conform to the current CSS spec requirements, to allow find-in-page on closed `details` elements, it seems I actually should not use `hidden` to make them closed (despite what the HTML spec currently says), but should instead use `auto`.

However, just using `content-visibility: auto` for closed `details` will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user). And to me at least, it seems like `inert` could/should be the way to do that, and the CSS and/or HTML specs could/should say that.

But if not with `inert`, is there some other way to make a node not “relevant to the user”?

[01:41:16.0610] <sideshowbarker>
 * TabAtkins: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user) state? And a way to use that in combination with its content-visibility state to toggle making it visible?

On the face of it, it seems like what the HTML [`inert`](https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute) attribute means is the same as what CSS means by “not relevant to the user” — and so, the combination of `inert` + `content-visibility: auto` should cause a node to be non-visible.

But the CSS doesn’t actually say that, nor due implementations do that.

The context is: I want to implement the closing and opening of `details` elements using content-visibility internally but also make the contents searchable with find-in-page. The [relevant part of the current HTML spec requirements](https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6) say to use `hidden`:

> The [`details`](https://html.spec.whatwg.org/#the-details-element) element's second [slot](https://dom.spec.whatwg.org/#concept-slot) is expected to have its [`style`](https://html.spec.whatwg.org/#attr-style) attribute set to `"display: block; content-visibility: hidden;"` when the [`details`](https://html.spec.whatwg.org/#the-details-element) element does not have an [`open`](https://html.spec.whatwg.org/#attr-details-open) attribute.

…however, the relevant part of the current CSS Containment spec about `hidden` says this:

> The element [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). The [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **_must not_ be accessible to user-agent features, such as find-in-page**, tab-order navigation, etc., nor be selectable or focusable.

…while the relevant part about `auto` says this:

> If the element is not [relevant to the user](https://drafts.csswg.org/css-contain/#relevant-to-the-user), it also [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). Unlike [`hidden`](https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden), the [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **must still be available as normal to user-agent features such as find-in-page**, tab order navigation, etc., and must be focusable and selectable as normal.

So, to conform to the current CSS spec requirements, to allow find-in-page on closed `details` elements, it seems I actually should not use `hidden` to make them closed (despite what the HTML spec currently says), but should instead use `auto`.

However, just using `content-visibility: auto` for closed `details` will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user). And to me at least, it seems like `inert` could/should be the way to do that, and the CSS and/or HTML specs could/should say that.

But if not with `inert`, is there some other way to make a node not “relevant to the user”?

[01:41:36.0498] <sideshowbarker>
 * TabAtkins: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user) state? And a way to use that in combination with its content-visibility state to toggle making it visible?

On the face of it, it seems like what the HTML [`inert`](https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute) attribute means is the same as what CSS means by “not relevant to the user” — and so, the combination of `inert` + `content-visibility: auto` should cause a node to be non-visible.

But the CSS doesn’t actually say that, nor due implementations do that.

The context is: I want to implement closing/opening of `details` elements using content-visibility internally but also make the contents searchable with find-in-page. The [relevant part of the current HTML spec requirements](https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6) say to use `hidden`:

> The [`details`](https://html.spec.whatwg.org/#the-details-element) element's second [slot](https://dom.spec.whatwg.org/#concept-slot) is expected to have its [`style`](https://html.spec.whatwg.org/#attr-style) attribute set to `"display: block; content-visibility: hidden;"` when the [`details`](https://html.spec.whatwg.org/#the-details-element) element does not have an [`open`](https://html.spec.whatwg.org/#attr-details-open) attribute.

…however, the relevant part of the current CSS Containment spec about `hidden` says this:

> The element [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). The [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **_must not_ be accessible to user-agent features, such as find-in-page**, tab-order navigation, etc., nor be selectable or focusable.

…while the relevant part about `auto` says this:

> If the element is not [relevant to the user](https://drafts.csswg.org/css-contain/#relevant-to-the-user), it also [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). Unlike [`hidden`](https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden), the [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **must still be available as normal to user-agent features such as find-in-page**, tab order navigation, etc., and must be focusable and selectable as normal.

So, to conform to the current CSS spec requirements, to allow find-in-page on closed `details` elements, it seems I actually should not use `hidden` to make them closed (despite what the HTML spec currently says), but should instead use `auto`.

However, just using `content-visibility: auto` for closed `details` will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user). And to me at least, it seems like `inert` could/should be the way to do that, and the CSS and/or HTML specs could/should say that.

But if not with `inert`, is there some other way to make a node not “relevant to the user”?

[01:42:52.0877] <sideshowbarker>
 * TabAtkins: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user) state? And a way to use that in combination with its content-visibility state to toggle making it visible?

On the face of it, it seems like what the HTML [`inert`](https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute) attribute means is the same as what CSS means by “not relevant to the user” — and so, the combination of `inert` + `content-visibility: auto` could/should cause a node to be non-visible.

But the CSS doesn’t actually say that, nor due implementations do that.

The context is: I want to implement closing/opening of `details` elements using content-visibility internally but also make the contents searchable with find-in-page. The [relevant part of the current HTML spec requirements](https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6) say to use `hidden`:

> The [`details`](https://html.spec.whatwg.org/#the-details-element) element's second [slot](https://dom.spec.whatwg.org/#concept-slot) is expected to have its [`style`](https://html.spec.whatwg.org/#attr-style) attribute set to `"display: block; content-visibility: hidden;"` when the [`details`](https://html.spec.whatwg.org/#the-details-element) element does not have an [`open`](https://html.spec.whatwg.org/#attr-details-open) attribute.

…however, the relevant part of the current CSS Containment spec about `hidden` says this:

> The element [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). The [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **_must not_ be accessible to user-agent features, such as find-in-page**, tab-order navigation, etc., nor be selectable or focusable.

…while the relevant part about `auto` says this:

> If the element is not [relevant to the user](https://drafts.csswg.org/css-contain/#relevant-to-the-user), it also [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). Unlike [`hidden`](https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden), the [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **must still be available as normal to user-agent features such as find-in-page**, tab order navigation, etc., and must be focusable and selectable as normal.

So, to conform to the current CSS spec requirements, to allow find-in-page on closed `details` elements, it seems I actually should not use `hidden` to make them closed (despite what the HTML spec currently says), but should instead use `auto`.

However, just using `content-visibility: auto` for closed `details` will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user). And to me at least, it seems like `inert` could/should be the way to do that, and the CSS and/or HTML specs could/should say that.

But if not with `inert`, is there some other way to make a node not “relevant to the user”?

[01:43:04.0565] <sideshowbarker>
 * TabAtkins: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user) state? And a way to use that in combination with its content-visibility state to toggle making it visible?

On the face of it, it seems like what the HTML [`inert`](https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute) attribute means is the same as what CSS means by “not relevant to the user” — and so, the combination of `inert` + `content-visibility: auto` could/should cause a node to be non-visible.

But the CSS doesn’t actually say that, nor do implementations do that.

The context is: I want to implement closing/opening of `details` elements using content-visibility internally but also make the contents searchable with find-in-page. The [relevant part of the current HTML spec requirements](https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6) say to use `hidden`:

> The [`details`](https://html.spec.whatwg.org/#the-details-element) element's second [slot](https://dom.spec.whatwg.org/#concept-slot) is expected to have its [`style`](https://html.spec.whatwg.org/#attr-style) attribute set to `"display: block; content-visibility: hidden;"` when the [`details`](https://html.spec.whatwg.org/#the-details-element) element does not have an [`open`](https://html.spec.whatwg.org/#attr-details-open) attribute.

…however, the relevant part of the current CSS Containment spec about `hidden` says this:

> The element [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). The [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **_must not_ be accessible to user-agent features, such as find-in-page**, tab-order navigation, etc., nor be selectable or focusable.

…while the relevant part about `auto` says this:

> If the element is not [relevant to the user](https://drafts.csswg.org/css-contain/#relevant-to-the-user), it also [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). Unlike [`hidden`](https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden), the [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **must still be available as normal to user-agent features such as find-in-page**, tab order navigation, etc., and must be focusable and selectable as normal.

So, to conform to the current CSS spec requirements, to allow find-in-page on closed `details` elements, it seems I actually should not use `hidden` to make them closed (despite what the HTML spec currently says), but should instead use `auto`.

However, just using `content-visibility: auto` for closed `details` will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user). And to me at least, it seems like `inert` could/should be the way to do that, and the CSS and/or HTML specs could/should say that.

But if not with `inert`, is there some other way to make a node not “relevant to the user”?

[02:07:33.0686] <sideshowbarker>
Or alternatively, we could change the HTML spec to not say that content-visibility should be used for `details` — but instead just that UAs must make the contents of closed `details` elements non-visible to users (using whatever internal means the UA chooses to use for that) while also requiring the contents must not be skipped contents for the purposes of find-in-page. (While also having the spec continue to state that for any closed `details` in which find-in-page locates a match, the UA must auto-expand it — by setting its `open` attribute).

[02:14:53.0640] <sideshowbarker>
It’s starting to seem to me now that having the HTML spec say that UAs are expected to use content-visibility for closing/opening `details` may not be a great choice. It certainly doesn’t seem _necessary_ to use content-visibility for that case, because the CSS `content-visibility` state of any `details` contents is not observable by web developers anyway.

[02:26:26.0982] <sideshowbarker>
All that said, though, I guess since it’s not exposed/observable to web developers anyway, then it seems like I could reasonably argue that implementing opening/closing of `details` with `content-visibility: hidden` _internally_ doesn’t strictly break conformance with CSS spec requirements

[03:38:15.0348] <zcorpan>
sideshowbarker: hmm, what gives? https://participate.whatwg.org/agreement-status?user=sideshowbarker&repo=html&pull=9870

[03:39:33.0384] <sideshowbarker>
zcorpan:  sigh yeah that’s because my membership in the relevant GitHub organization is private, not public

[03:40:43.0508] <sideshowbarker>
I very much don’t like the fact that the participation mechanism requires me to make my membership in that relevant GitHub public

[03:40:56.0781] <sideshowbarker>
but anyway, I can turn it back on temporarily

[03:42:21.0191] <zcorpan>
sideshowbarker: hmm, can you create a new GH org that's just for the IPR check?

[03:42:48.0634] <sideshowbarker>
Yeah, I guess I could, but I rightly shouldn’t have to

[03:43:15.0958] <sideshowbarker>
Instead, the participation mechanism should be made to work in some different way

[03:44:16.0173] <sideshowbarker>
And I don’t say that personally about my own case — but in general, for all participants, we should not be forcing them to publicly leak any organizational membership to the entire world that they might not really want to

[03:45:13.0712] <sideshowbarker>
Myself, a while back, I made all my GitHub org memberships private — because I don’t personally have much need to make them public

[03:45:39.0742] <sideshowbarker>
We should be allowing everybody to have the same choice if they want

[03:45:46.0388] <sideshowbarker>
 * We should be allowing everybody to have that same choice if they want

[03:45:50.0750] <zcorpan>
sideshowbarker: seems like something to bring up with the sg

[03:46:15.0766] <sideshowbarker>
In the past, I have not had much success in getting the SG to see anything my way

[03:46:45.0778] <sideshowbarker>
I tried with the pseudonymous-contributor case, and lost

[03:49:12.0952] <sideshowbarker>
I also tried with the case of distinguishing editorial/non-substantive/no-possible-IPR-impact changes from substantive/IPR-impacting changes — I _think_ the SG ended up deciding to make some change there, but if so, it was after such a long time that I had lost energy for paying attention

[03:49:21.0948] <sideshowbarker>
 * I also tried with the case of distinguishing editorial/non-substantive/no-possible-IPR-impact changes from substantive/IPR-impacting changes — and I _think_ the SG ended up deciding to make some change there, but if so, it was after such a long time that I had lost energy for paying attention

[03:53:29.0155] <zcorpan>
https://github.com/whatwg/sg/pull/228

[10:06:01.0595] <Jeffrey Yasskin>
> <@sideshowbarker:matrix.org> And I don’t say that personally about my own case — but in general, for all participants, we should not be forcing them to publicly leak any organizational membership to the entire world that they might not really want to

I have mixed feelings about that: on the one hand, you're right that people should be able to participate in github without their affiliations always being fully public. On the other, when someone's contributing to an open standard on behalf of their employer, it's both useful for reviewers to know that we should think of their contribution as coming from that organization, and important for the public to be able to see what organizations are influencing the standards. I wish Github had a "public-but-not-publicized" setting for this, where the affiliation would appear in the context of certain contributions, but wouldn't appear on the profile page.

[13:03:41.0548] <Arnau>
Is the stack of open elements a stack of elements or nodes? By the name I would guess elements, but the definition (https://html.spec.whatwg.org/multipage/parsing.html#stack-of-open-elements) seems a bit ambiguous and says "the topmost **node** on the stack is the first one added to the stack". Plus, if the stack only has element nodes, wouldn't the current node and adjusted current node always be elements?

[13:04:41.0627] <Arnau>
 * For HTML tree construction, is the stack of open elements a stack of elements or nodes? By the name I would guess elements, but the definition (https://html.spec.whatwg.org/multipage/parsing.html#stack-of-open-elements) seems a bit ambiguous and says "the topmost **node** on the stack is the first one added to the stack". Plus, if the stack only has element nodes, wouldn't the current node and adjusted current node always be elements?

[13:08:15.0533] <Andreu Botella>
The stack of open nodes can also be seen as the set of ancestors of the current point in the DOM into which you're currently parsing

[13:09:11.0985] <Andreu Botella>
since the stack is created empty (so there's no `Document` node in it), and the only non-Document nodes that can contain children are `Element` nodes, I think it can be safely assumed that it only contains elements

[13:09:48.0723] <Andreu Botella>
(wait, no, `Document` also can't contain children)

[13:10:00.0723] <Andreu Botella>
 * (oh, actually `Document` also can't contain children)

[13:25:08.0948] <Arnau>
Oh, I get it

[13:25:46.0302] <Arnau>
So I can make it a stack of element nodes, right?

[16:55:12.0962] <Eric Portis (he/him)>
TabAtkins Florian Rivoal: should `contain-intrinsic-size` alter `Image.naturalWidth/Height` ? https://codepen.io/eeeps/pen/RwOKmJL?editors=1111


2024-03-20
[17:00:20.0660] <Eric Portis (he/him)>
(FF, WebKit, and Blink all agree that it doesn't, but I don't think [?] it's specified [?])

[19:05:58.0890] <sideshowbarker>
Jeffrey Yasskin: 
> _when someone's contributing to an open standard on behalf of their employer, it's both useful for reviewers to know that we should think of their contribution as coming from that organization, and important for the public to be able to see what organizations are influencing the standards_

That’s just the thing: In my case, Keio University is the organization that I was forced by the Participation requirements into stating as being my employer. But I am actually _not_ contributing on behalf of Keio, and it would be a mistake for to interpret my contributions as being a way that Keio is attempting to influencing standards.

https://github.com/w3ckeio/ is the relevant org in GitHub, and Keio didn’t create it — I myself did, personally. And I did it just to get around the Participation requirements.

The thing is, as far as Keio is concerned, I am essentially just a independent contractor. My arrangement with them is just that each year, I sign a contract with them in which I confirm that the (virtual) lab I’m associated with in their bookkeeping arrangements will transfer to them enough revenue to cover my compensation and their overhead for having me on their books — and they for their part confirm that, out of the revenue I confirm will be brought in, they’ll pay out a certain amount of money to me.

And that’s really it. In particular, I don’t sign away any rights of any kind to them — specifically, I don’t sign away any IPR to them. So they don’t claim any IPR on anything I do, and would never want to, and wouldn’t care to be troubled to even be asked about it.

[19:07:32.0562] <sideshowbarker>
And part of the reason I mention all those details is that I am hardly unique in this regard — many people nominally “employed” by universities are in circumstances that are nearly identical to mine.

[19:09:12.0654] <sideshowbarker>
But our current Participation requirements do not square well at all with those circumstances, and so I think they are putting an obstacle in the way of a significant number of people who might otherwise be able to contribute freely.

[19:11:46.0995] <sideshowbarker>
And I can really speak from experience when I say that it is likely to be extremely difficult for anybody in circumstances like mine to ever get their university “employers” to sign the Participation agreement. It took me _two years_ and a mountain of effort and badgering and string-pulling to be able to get the agreement signed in my case.

[19:14:44.0820] <sideshowbarker>
And in the end, what we have is a result that’s bad, because it puts a misleading association on my contributions.

[19:42:57.0900] <Lurian Orsina>
Oieee

[00:24:30.0171] <sideshowbarker>
jarhar: About details auto-expand, and specifically about the following spec requirement:
> After find-in-page finishes searching for matches, the [details](https://html.spec.whatwg.org/#the-details-element) elements and the elements with the [hidden](https://html.spec.whatwg.org/#attr-hidden) attribute in the [hidden until found](https://html.spec.whatwg.org/#attr-hidden-until-found-state) state should have their contents become skipped again.

…In checking with current Chrome (v123 and Canary/), I notice that Chrome now doesn’t seem to close the auto-expanded details elements after I exit the find-in-page UI or after I do a different find-in-page for a different term.

Is that correct? Or am I maybe somehow testing wrong?

I could have sworn that in Chrome previously — back in October or so least — Chrome _did_ close the auto-expanded details elements in the way that spec says we should.

I guess it changed in the meantime? If so, why? For accessibility reasons?

Regardless, if y’all made a decision to un-implement that requirement, should we also remove it from the spec?

[01:45:48.0518] <zcorpan>
Dominic Farolino: in chromium, does navigating a lazy iframe before it has run its lazy load resumption steps nullify the resumption steps? http://software.hixie.ch/utilities/js/live-dom-viewer/saved/12473

[07:26:44.0896] <jarhar>
the details elements are always supposed to stay open after they are expanded for being the active match. this sentence is in the spec because *all* details elements are opened without showing that frame to the user in order to run a text search as if they are open. without this sentence, simply pressing ctrl+f would open every details element in the page without closing them again even if there are no matches

[07:26:58.0193] <jarhar>
it would probably be good to add a clarifying sentence to the spec

[07:29:14.0419] <sideshowbarker>
aha, I see now

[07:29:27.0294] <sideshowbarker>
thanks

[13:44:53.0583] <Jeffrey Yasskin>
> <@sideshowbarker:matrix.org> Jeffrey Yasskin: 
> > _when someone's contributing to an open standard on behalf of their employer, it's both useful for reviewers to know that we should think of their contribution as coming from that organization, and important for the public to be able to see what organizations are influencing the standards_
> 
> That’s just the thing: In my case, Keio University is the organization that I was forced by the Participation requirements into stating as being my employer. But I am actually _not_ contributing on behalf of Keio, and it would be a mistake for to interpret my contributions as being a way that Keio is attempting to influencing standards.
> 
> https://github.com/w3ckeio/ is the relevant org in GitHub, and Keio didn’t create it — I myself did, personally. And I did it just to get around the Participation requirements.
> 
> The thing is, as far as Keio is concerned, I am essentially just a independent contractor. My arrangement with them is just that each year, I sign a contract with them in which I confirm that the (virtual) lab I’m associated with in their bookkeeping arrangements will transfer to them enough revenue to cover my compensation and their overhead for having me on their books — and they for their part confirm that, out of the revenue I confirm will be brought in, they’ll pay out a certain amount of money to me.
> 
> And that’s really it. In particular, I don’t sign away any rights of any kind to them — specifically, I don’t sign away any IPR to them. So they don’t claim any IPR on anything I do, and would never want to, and wouldn’t care to be troubled to even be asked about it.

For folks on https://www.w3.org/staff/, I'd expect a public association with https://github.com/w3c to be sufficient, especially now that W3C Inc. exists. But that's also not generalizable to other people employed by universities. For those folks, I think they do not "work in the field of web technologies", as defined by https://whatwg.org/ipr-policy#2101-work-in-the-field-of-web-technologies, and so they should be able to sign the individual agreement. But this is probably something the SG should clarify.

[14:43:02.0420] <Richard Gibson>
> <@sideshowbarker:matrix.org> Is the https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values algorithm known to differ in any way from the behavior of [`strtod`](https://en.cppreference.com/w/c/string/byte/strtof)?

aside from obvious differences like rejecting e.g. hexadecimal input, `strtod` is subject to rounding direction as configurable by `fesetround`, and it is not clear to me that the `FE_TONEAREST` default (which corresponds most closely with the HTML algorithm) _guarantees_ "round ties to even" behavior (although https://stackoverflow.com/questions/69365468/does-c-standards-fe-tonearest-rounding-mode-guarantee-that-halfway-ties-are-rou suggests that it does, at least in later editions of the standard, https://github.com/Moddable-OpenSource/moddable/issues/944 is a concrete analogous ECMAScript example in which XS incorrectly rounds `9007199254740993` to `9007199254740994` rather than the correct even-significand `9007199254740992`)

[15:09:22.0494] <sideshowbarker>
Richard Gibson: Do you know if the same is true for the equivalent in the double-conversion library?

[15:12:48.0023] <Richard Gibson>
hmm, I don't think I know what "the double-conversion library" is

[15:14:18.0328] <sideshowbarker>
ah, sorry: https://github.com/google/double-conversion — it’s what Chrome and Firefox use for double parsing (and that WebKit also used until about a year ago, when it switched to using https://github.com/fastfloat/fast_float instead)

[15:20:32.0662] <Richard Gibson>
I don't know for sure, but https://github.com/google/double-conversion/blob/15b7e306433dd899585f92758f7776a37a9c25ff/double-conversion/string-to-double.cc#L357 and https://github.com/google/double-conversion/blob/15b7e306433dd899585f92758f7776a37a9c25ff/double-conversion/strtod.cc#L481 strongly suggest that it has the desired behavior

[15:37:43.0475] <sideshowbarker>
jarhar: I am only just now noticing that trying to do find-in-page on `details` contents in GitHub issue comments doesn’t work in Chrome — the details elements that have matches don’t auto-expand as expected. Do you any idea why?

For example, open https://github.com/whatwg/html/pull/6242 and try a find-in-page for _“web service”_ (which should match on the contents of the **More** details in the issue description).

(With the WebKit patch I’m working on, those GitHub issue-comment `details` also don’t auto-expand as expected, but I’ve yet not tried debugging it to isolate the reason).


2024-03-21
[17:11:19.0969] <jarhar>
github added css to disable auto-expanding details

[17:11:27.0862] <jarhar>
```
details:not([open])>*:not(summary) {
    display: none !important;
}
```

[17:12:10.0885] <jarhar>
it works on some details element in github where there is no element in between the details and the text child, but not this one since there is a <p> in between the details and the "web service" text node

[17:13:31.0004] <sideshowbarker>
I see

[17:14:06.0118] <sideshowbarker>
Do you know why they’re intentionally disabling it?

[17:14:29.0756] <jarhar>
nope

[17:14:40.0149] <jarhar>
keithamus: any ideas?

[19:29:21.0787] <sideshowbarker>
I guess it’s due to https://github.com/primer/css/commit/8145e90a694820dd7d92a32161cb13e2b67a4d06#diff-3f525a94a06ff75c679cc6c537ff60dfe8c69e13af9fb029bc31a12399e3659e

[19:29:47.0936] <sideshowbarker>
“muan committed on Oct 16, 2017”

[19:30:24.0353] <sideshowbarker>
So maybe we could ask muan if/when she’s around

[19:33:19.0634] <sideshowbarker>
But from that it seems like it was never specifically intended to prevent auto-expand, but instead was added ~6 years ago as just part of a normal reset, in the context of https://github.com/primer/css/pull/346 and https://github.com/primer/css/pull/371

[01:08:24.0305] <annevk>
Panos Astithas: I was planning on attending this morning and Marcos was too. Not sure if that would have tipped the RSVP balance however.

[01:09:50.0117] <sideshowbarker>
annevk: So there‘s no call? The calendar invite didn’t have a link to call details anyway

[01:15:22.0643] <annevk>
sideshowbarker: It was canceled per a calendar email I saw this morning.

[01:15:32.0548] <sideshowbarker>
aha

[02:34:58.0868] <keithamus>
We can probably remove those style rules now as `<details>` is well supported

[02:35:35.0901] <sideshowbarker>
Hi keithamus Yeah, that would be great

[02:35:46.0116] <sideshowbarker>
Should I raise an issue for it?

[02:36:20.0079] <keithamus>
That would be great!

[02:57:38.0119] <annevk>
Panos Astithas: I see you also mentioned this in https://github.com/whatwg/html/issues/10205. All good I think and sorry for not RSVP'ing sooner.

[04:19:15.0900] <sideshowbarker>
https://github.com/primer/css/issues/2592

[10:06:16.0463] <annevk>
sideshowbarker Florian Scholz: can either of you help with this MDN question? Thanks! https://github.com/w3c/webappsec/pull/639#issuecomment-2013037309 

[12:56:08.0562] <Panos Astithas>
Yeah, sorry if this was a surprise, I tried my best to communicate early and often. The low attendance was secondary really, the main cause for canceling was the lack of agenda items.

[13:25:15.0536] <Eric Portis (he/him)>
TabAtkins Florian Rivoal : Miriam answered my question about whether `contain-intrinsic-size` should affect natural dimensions, above (it shouldn't). But now I have another question (take a look if you get a chance): https://github.com/w3c/csswg-drafts/issues/10116

[15:18:31.0306] <sideshowbarker>
annevk: FYI https://github.com/mdn/content/pull/32781 — and in particular this part:
> In Firefox, `loaded` is the size of the compressed data; in Chrome, it's the size of the decompress data. I would have loved to find sources for this, but the only thing I could find is that the RFC doesn't specify which value it should be! Browsers implement it differently.
I suggested they file an XHR spec issue — but it’d also be great if you could do a (post-commit) review of https://github.com/mdn/content/pull/32781/files, and if there’s anything that’s wrong spec-wise, or worth clarifying further, we could do a follow-up PR

[15:18:41.0350] <sideshowbarker>
 * annevk: FYI https://github.com/mdn/content/pull/32781 — and in particular this part:

> In Firefox, `loaded` is the size of the compressed data; in Chrome, it's the size of the decompress data. I would have loved to find sources for this, but the only thing I could find is that the RFC doesn't specify which value it should be! Browsers implement it differently.

I suggested they file an XHR spec issue — but it’d also be great if you could do a (post-commit) review of https://github.com/mdn/content/pull/32781/files, and if there’s anything that’s wrong spec-wise, or worth clarifying further, we could do a follow-up PR

[15:23:55.0133] <sideshowbarker>
> I'm a developer with several _years_ of experience in **Markdown**.


2024-03-22
[01:34:54.0461] <Ms2ger>
Me too

[01:36:25.0135] <sideshowbarker>
cool — y’all could start a club (since we now know there’s more than two of you)

[01:36:33.0280] <sideshowbarker>
 * cool — y’all could start a club (since we now know there’s at least two of you)

[02:53:51.0875] <judge_sour_dough_bread>
Hi all, for questions about CSS syntax and the CSS Syntax Module (Level 3) spec., can these be asked here or is there a better room for such discussions? I need to clarify a paragraph written in the spec.

[02:55:59.0902] <judge_sour_dough_bread>
 * Hi all, for questions about CSS syntax and the CSS Syntax Module (Level 3) spec., can these be asked here or is there a better room for such discussions? I need to clarify a paragraph written in the spec. I am unable to find a "CSSWG" room, at any rate (searching using Element Matrix client).

[03:04:59.0720] <peterv>
annevk: it's a bit unclear to me when _attr-associated elements_ is computed for reflected `FrozenArray<T>`-typed attributes, couldn't really find a reference to that. Is that something that needs to be explicitly called somewhere?

[03:15:20.0416] <judge_sour_dough_bread>
> <@judge_sour_dough_bread:matrix.org> Hi all, for questions about CSS syntax and the CSS Syntax Module (Level 3) spec., can these be asked here or is there a better room for such discussions? I need to clarify a paragraph written in the spec. I am unable to find a "CSSWG" room, at any rate (searching using Element Matrix client).

Going to take a chance and go ahead asking. Reading https://www.w3.org/TR/css-syntax-3/#consume-an-ident-like-token I am unable to "succinctly" understand the following condition, quoting:
> If the next one or two input code points are U+0022 QUOTATION MARK ("), U+0027 APOSTROPHE ('), or whitespace followed by U+0022 QUOTATION MARK (") or U+0027 APOSTROPHE (')
This reads too ambiguous to me -- do the authors it mean _either_ the next code point (the first in this context) is _one of_ `"`, `'` or whitespace, with the subsequent code point (one immediately following the first) being one of `"` or `'`? Or do they mean something else?

[03:15:33.0173] <judge_sour_dough_bread>
> <@judge_sour_dough_bread:matrix.org> Hi all, for questions about CSS syntax and the CSS Syntax Module (Level 3) spec., can these be asked here or is there a better room for such discussions? I need to clarify a paragraph written in the spec. I am unable to find a "CSSWG" room, at any rate (searching using Element Matrix client).

 * Going to take a chance and go ahead asking. Reading https://www.w3.org/TR/css-syntax-3/#consume-an-ident-like-token I am unable to "succinctly" understand the following condition, quoting:

> If the next one or two input code points are U+0022 QUOTATION MARK ("), U+0027 APOSTROPHE ('), or whitespace followed by U+0022 QUOTATION MARK (") or U+0027 APOSTROPHE (')

This reads too ambiguous to me -- do the authors it mean _either_ the next code point (the first in this context) is _one of_ `"`, `'` or whitespace, with the subsequent code point (one immediately following the first) being one of `"` or `'`? Or do they mean something else?

[03:16:51.0759] <judge_sour_dough_bread>
 * Going to take a chance and go ahead asking. Reading https://www.w3.org/TR/css-syntax-3/#consume-an-ident-like-token I am unable to "succinctly" understand the following condition, quoting:

> If the next one or two input code points are U+0022 QUOTATION MARK ("), U+0027 APOSTROPHE ('), or whitespace followed by U+0022 QUOTATION MARK (") or U+0027 APOSTROPHE (')

This reads too ambiguous to me -- do the authors mean the [compound] condition where the next code point (the first in this context) is _one of_ `"`, `'` or whitespace, _and_ the subsequent code point (one immediately following the first) being one of `"` or `'`? Or do they mean something else?

[04:46:49.0981] <annevk>
peterv: that's a good question. That also applies to the "attr-associated element" concept. I think we should make that more explicit yeah. Just saying something is computed doesn't really tell you much.

[04:48:53.0593] <annevk>
peterv: my inclination would be to make it an algorithm instead that we just invoke wherever we currently access the property.

[04:51:48.0606] <annevk>
judge_sour_dough_bread: they mean the next code point is " or ' or the next code point is whitespace and the one after is " or '.

[04:52:22.0762] <annevk>
judge_sour_dough_bread: seems reasonable to file an issue and ask for clarification though.

[05:48:23.0602] <judge_sour_dough_bread>
> <@annevk:matrix.org> judge_sour_dough_bread: seems reasonable to file an issue and ask for clarification though.

Oh, I was meaning to, thanks.

[06:05:21.0685] <peterv>
annevk: ok, out of curiosity, was `ObservableArray` considered for these instead of `FrozenArray`? I understand it would be quite a different model since you'd have to keep track of changes to the list as opposed to computing it from the getter.

[06:27:28.0401] <Jake Archibald>
annevk: With `ElementInternals` you can create a custom element with form field capabilities. But is there a way to create a custom element that has form capabilities? As in, inner inputs can become associated with it. I could do it with `<form is="my-custom-thing">`, but given WebKit's opposition to that, is there an alternative?

[06:40:54.0320] <Jake Archibald>
I guess a solution (aside from `<form is>`) would be to allow a form within a shadow root to become the associated form for elements within the shadow and light DOM within. Has there been any discussion around that?

[06:52:29.0922] <Jake Archibald>
Filed an issue https://github.com/whatwg/html/issues/10220

[07:05:50.0954] <annevk>
peterv: I'm not sure. I don't recall being super closely involved when these were added. Just wanted to maintain some invariants around shadow trees. I can look at git blame I suppose.

[07:08:24.0048] <annevk>
Jake Archibald: this is the first request I've heard for <form>, interesting. I guess you'd need to do something like FACE, but for form. This has come up for label and such too, but it was hard to agree on how much semantics such a thing would have by default and how much you'd have to implement yourself.

[07:14:29.0169] <annevk>
peterv: So I was involved but I guess I didn't care for that detail. And Domenic noted it, but it was already implemented twice and so didn't push it. And so here we are. Hmm. https://github.com/whatwg/html/pull/7934

[07:18:39.0771] <annevk>
I guess some takeaways:
1. All details matter. You can ignore them, but they'll just come back to haunt you later (unless you don't stick around, which is some people don't understand why you're blocking them over some detail that's not important to them).
2. We should be very hesitant to use FrozenArray for anything from now on. And I think I was already hesitant back then, but implementations had already kinda happened so...

[07:27:59.0639] <annevk>
Oh, we export attr-associated element, that makes it harder to fix. Hmm.

[07:28:46.0808] <annevk>
Although, per https://dontcallmedom.github.io/webdex/a.html#attr-associated%20element%40%40Element%40dfn nothing references it? ... Success.

[07:35:33.0776] <Jake Archibald>
annevk: what's FACE?

[07:35:46.0282] <Jake Archibald>
ohh form-associated-custom-element

[07:35:54.0667] <Jake Archibald>
I should have thought about it an extra second

[07:36:27.0984] <Jake Archibald>
Yeah, I put two options in the issue. One is to allow form associations to cross shadow boundaries in some opt-in case, or do the FACE thing.

[07:41:51.0296] <Sam Sneddon [:gsnedders]>
> <@judge_sour_dough_bread:matrix.org> Hi all, for questions about CSS syntax and the CSS Syntax Module (Level 3) spec., can these be asked here or is there a better room for such discussions? I need to clarify a paragraph written in the spec. I am unable to find a "CSSWG" room, at any rate (searching using Element Matrix client).

https://matrix.to/#/#w3c_css:matrix.org

[07:46:25.0569] <annevk>
Jake Archibald: as with many things (I'm reminded of a recent Twitter exchange), the main thing all of this needs is the TC39-equivalent of a champion

[07:47:09.0710] <annevk>
I guess that should be "WHATWG-equivalent of a TC39 champion".

[07:47:52.0641] <Jake Archibald>
Fair

[10:58:24.0442] <TabAtkins>
> <@judge_sour_dough_bread:matrix.org> Going to take a chance and go ahead asking. Reading https://www.w3.org/TR/css-syntax-3/#consume-an-ident-like-token I am unable to "succinctly" understand the following condition, quoting:
> 
> > If the next one or two input code points are U+0022 QUOTATION MARK ("), U+0027 APOSTROPHE ('), or whitespace followed by U+0022 QUOTATION MARK (") or U+0027 APOSTROPHE (')
> 
> This reads too ambiguous to me -- do the authors mean the [compound] condition where the next code point (the first in this context) is _one of_ `"`, `'` or whitespace, _and_ the subsequent code point (one immediately following the first) being one of `"` or `'`? Or do they mean something else?

That's technically four conditions - next is quote mark, next is apostrophe, next two is whitespace followed by quote, or next two is whitespace followed by apostrophe

[11:21:08.0955] <sideshowbarker>
TabAtkins: It seems that’s the answer for what the _intent_ of the spec is. But the other part of what they were pointing out is that as currently written, the statement was ambiguous to them because they thought it could be parsed in two different ways.

Maybe it could be made unambiguous them (and to others who might potentially be confused by it), if it were a bulleted list:

> If the next one or two input code points are one of the following:
> - U+0022 QUOTATION MARK (")
> - U+0027 APOSTROPHE (')
> - whitespace followed by U+0022 QUOTATION MARK (")
> - whitespace U+0027 APOSTROPHE (')

[11:21:20.0502] <sideshowbarker>
 * TabAtkins: It seems that’s the answer for what the _intent_ of the spec is. But the other part of what they were pointing out is that as currently written, the statement was ambiguous to them because they thought it could be parsed in two different ways.

Maybe it could be made unambiguous them (and to others who might potentially be confused by it) if it were a bulleted list:

> If the next one or two input code points are one of the following:
> 
> - U+0022 QUOTATION MARK (")
> - U+0027 APOSTROPHE (')
> - whitespace followed by U+0022 QUOTATION MARK (")
> - whitespace U+0027 APOSTROPHE (')

[14:31:49.0097] <judge_sour_dough_bread>
> <@sideshowbarker:matrix.org> TabAtkins: It seems that’s the answer for what the _intent_ of the spec is. But the other part of what they were pointing out is that as currently written, the statement was ambiguous to them because they thought it could be parsed in two different ways.
> 
> Maybe it could be made unambiguous them (and to others who might potentially be confused by it) if it were a bulleted list:
> 
> > If the next one or two input code points are one of the following:
> > 
> > - U+0022 QUOTATION MARK (")
> > - U+0027 APOSTROPHE (')
> > - whitespace followed by U+0022 QUOTATION MARK (")
> > - whitespace U+0027 APOSTROPHE (')

I remember dealing with a similar issue of ambiguous writing in some specification a while back, and the most useful answer and discussion I had gotten out of it was the mention of something called the Oxford comma. Basically, presence or absence of the comma at just the right place, combined with lack of standard "parsing" of sentences featuring the comma(s), on both sides of the Atlantic (and beyond, no doubt), was the source of unending confusion demonstrated by myself and _some_ of the authors of the spec. Wish I could dig up the link now (on GH), alas. Anyway, a bullet-list will make it far more understandable, IMO, at the cost of more verbosity and "negative white space" (i.e. length of the document), although I admit I myself wouldn't be bothered by said increased verbosity.

[14:32:12.0646] <judge_sour_dough_bread>
 * I remember dealing with a similar issue of ambiguous writing in some specification a while back, and the most useful answer and discussion I had gotten out of it was the mention of something called the Oxford comma. Basically, presence or absence of the comma at just the right place, combined with lack of standard "parsing" of sentences featuring the comma(s), by _humans_, on both sides of the Atlantic (and beyond, no doubt), was the source of unending confusion demonstrated by myself and _some_ of the authors of the spec. Wish I could dig up the link now (on GH), alas. Anyway, a bullet-list will make it far more understandable, IMO, at the cost of more verbosity and "negative white space" (i.e. length of the document), although I admit I myself wouldn't be bothered by said increased verbosity.

[14:34:18.0344] <ljharb>
huh, i've never seen an example of the presence of an oxford comma introducing ambiguity. do you have an example?

[14:35:29.0378] <judge_sour_dough_bread>
Found it: https://github.com/whatwg/dom/issues/870
May not be ambiguity proper, but certainly was mentioned in the issue

[14:52:32.0458] <TabAtkins>
The *presence* of an oxford comma shouldn't be ambiguous, but the *absence* of it certainly can be.

[14:53:06.0749] <TabAtkins>
yeah i could rephrase into a list

[14:53:12.0076] <TabAtkins>
won't happen today, head down in some code

[14:53:14.0701] <TabAtkins>
but PR accepted

[14:57:46.0323] <judge_sour_dough_bread>
> <@sideshowbarker:matrix.org> TabAtkins: It seems that’s the answer for what the _intent_ of the spec is. But the other part of what they were pointing out is that as currently written, the statement was ambiguous to them because they thought it could be parsed in two different ways.
> 
> Maybe it could be made unambiguous them (and to others who might potentially be confused by it) if it were a bulleted list:
> 
> > If the next one or two input code points are one of the following:
> > 
> > - U+0022 QUOTATION MARK (")
> > - U+0027 APOSTROPHE (')
> > - whitespace followed by U+0022 QUOTATION MARK (")
> > - whitespace U+0027 APOSTROPHE (')

Reading the title of the list you suggested, I am not convinced it's all that unambiguous either. Which of the categories expressed in the bullets of the list, for example, may pertain to which of the two code points? Is every bullet point applicable to any one of the two code points? That's just _one_ ambiguity I, for one, would be struggling with.

[14:58:46.0636] <TabAtkins>
the phrasing used in the opening of the sentence is a term of art

[14:58:47.0538] <judge_sour_dough_bread>
Yes, I had admitted the same thing then, and I agree again :)

[14:59:16.0802] <TabAtkins>
"next code point" can't be "whitespace followed by quotation mark", given that it's one and those are two

[14:59:42.0940] <TabAtkins>
and vice versa for "next two" and "quotation mark"

[15:00:57.0343] <judge_sour_dough_bread>
> <@tabatkins:matrix.org> "next code point" can't be "whitespace followed by quotation mark", given that it's one and those are two

Are you referring to your suggestion, or the original wording (in the spec.)?

[15:01:48.0318] <TabAtkins>
both ^_^

[15:03:49.0786] <judge_sour_dough_bread>
> <@tabatkins:matrix.org> "next code point" can't be "whitespace followed by quotation mark", given that it's one and those are two

I guess that's one reason I were lost in the words there -- I think it's not unsound to implement a check like whether a specific code point matches "whitespace followed by quotation mark". Maybe I am damaged by look-ahead in regular expressions...

[15:05:08.0467] <ljharb>
yeah i don't think a single instance of confusion indicates objective ambiguity :-) the presence of the comma always makes for a clearer result ime

[15:06:27.0025] <judge_sour_dough_bread>
> <@tabatkins:matrix.org> "next code point" can't be "whitespace followed by quotation mark", given that it's one and those are two

 * I guess that's one reason I were lost in the words there -- I think it's not unsound to implement a check like whether a specific code point matches "whitespace followed by quotation mark". Maybe I am damaged by look-ahead in regular expressions...

For example, `code_point.matches(regex('\s(?=\?))` is a valid expression in at least JavaScript, expressing exactly the aforementioned condition.

[15:07:02.0941] <TabAtkins>
Yes, you're overthinking this. ^_^

[15:07:29.0592] <judge_sour_dough_bread>
> <@tabatkins:matrix.org> Yes, you're overthinking this. ^_^

It's late, I'll sleep on this and get back to the parable tomorrow, see if it makes all the sense it hasn't so far :)

[15:16:04.0401] <judge_sour_dough_bread>
Ok, before I retire for the day, does [the parable](https://www.w3.org/TR/css-syntax-3/#consume-ident-like-token) express the equivalent of `if (first is '\u0022' or first is '\u0027') or (is_whitespace(first) and (second is '\u0022' or second is '\u0027')) then create <function-token> ...`, am I getting it now? (`first` is the first code point of the two and `second` is the one directly following it)

[16:31:02.0746] <TabAtkins>
yes


2024-03-23
[19:43:07.0980] <Domenic>
peterv: annevk: I think we could change from FrozenArray -> ObservableArray web-compatibly, but someone would need to sign up for the spec work, and we'd need to have some implementers willing to change.

[00:17:16.0742] <Ravi Kumar>
how can i query on url in next js

[01:38:12.0831] <vrafaeli>
https://github.com/whatwg/html/blob/main/FAQ.md#html-feature-proposals The proposed `tr` hack does not give right click context menu, nor handles stuff like CTRL+click properly. Would it be possible for the browsers to handle `href` just on the `tr` element?

[01:38:34.0203] <vrafaeli>
 * [https://github.com/whatwg/html/blob/main/FAQ.md#html-feature-proposals ](https://github.com/whatwg/html/blob/main/FAQ.md#html-should-support-href-on-any-element )The proposed `tr` hack does not give right click context menu, nor handles stuff like CTRL+click properly. Would it be possible for the browsers to handle `href` just on the `tr` element?

[01:39:11.0083] <vrafaeli>
 * [https://github.com/whatwg/html/blob/main/FAQ.md#html-feature-proposals ](https://github.com/whatwg/html/blob/main/FAQ.md#html-should-support-href-on-any-element)The proposed `tr` "workaround" does not give right click context menu, nor handles stuff like CTRL+click properly. Would it be possible for the browsers to handle `href` just on the `tr` element?

[01:39:35.0577] <vrafaeli>
 * [https://github.com/whatwg/html/blob/main/FAQ.md#html-feature-proposals ](https://github.com/whatwg/html/blob/main/FAQ.md#html-should-support-href-on-any-element)The proposed `tr` "workaround" does not give right click context menu, nor handles stuff like CTRL+click properly. Therefore it is not a workaround at all.

Would it be possible for the browsers to handle `href` just on the `tr` element?

[01:45:21.0929] <vrafaeli>
 * [https://github.com/whatwg/html/blob/main/FAQ.md#html-feature-proposals ](https://github.com/whatwg/html/blob/main/FAQ.md#html-should-support-href-on-any-element)The proposed `tr` "workaround" does not give right click context menu, nor handles stuff like CTRL+click, or show the link's address in the bottom corner properly. Therefore it is not a workaround at all.

Would it be possible for the browsers to handle `href` just on the `tr` element?

[02:54:00.0798] <judge_sour_dough_bread>
Hi Ravi, I think your questions on Next.js and Web development practicalities like that are better asked in [the #webdevelopment room](https://matrix.to/#/#webdevelopment:matrix.org) -- this is (AFAIK, correct me someone else if I am wrong) for chatting about Web standard(s) by [WHATWG](http://whatwg.org/faq#what-is-the-whatwg)


2024-03-25
[00:31:25.0271] <Adam Rice>
Chrome has started development on Private Network Access for WebSockets, which is going to require a preflight. As discussed in the following few messages after https://github.com/whatwg/websockets/issues/16#issuecomment-1926609805, we will probably need new `Access-Control-Allow-WebSocket` and `Access-Control-Request-WebSocket` headers. What's the right forum to propose and discuss those?

[00:37:01.0180] <sideshowbarker>
Adam Rice: Any reason not to just use the https://github.com/whatwg/fetch/issues tracker?

[03:37:40.0896] <annevk>
TabAtkins: algorithm="..." values in Bikeshed are just for disambiguation purposes, right?

[03:39:28.0074] <annevk>
 * TabAtkins: algorithm="..." values in Bikeshed are just for disambiguation purposes, right? See https://github.com/whatwg/url/pull/826 for context. I guess I'll leave it unmerged for a bit so you can review. Fortunately adding these didn't reveal any variable name errors.

[06:55:27.0089] <TabAtkins>
> <@annevk:matrix.org> TabAtkins: algorithm="..." values in Bikeshed are just for disambiguation purposes, right?

Yes, tho they're also required to have variable colors kick in

[07:21:55.0158] <annevk>
TabAtkins: right, that's why it's worth adding them. (Although I also added them for algorithms that don't contain any variables, mainly for consistency.)

[07:29:27.0634] <TabAtkins>
I also use them for some useful styling, the little gray border, which I'm planning to add to the bikeshed stylesheet. Might want to look into putting it in whatwg as well

[07:29:47.0960] <TabAtkins>
Seems to really help in algorithm heavy sections to know the bounds of the text

[07:41:08.0210] <annevk>
TabAtkins: does the PR look okay btw?

[08:02:33.0037] <TabAtkins>
> <@annevk:matrix.org> TabAtkins: does the PR look okay btw?

Looks reasonable to me with a quick scan

[08:32:11.0707] <annevk>
I think at one point I was down to <25 issues for whatwg/url. Now it's 79.

[09:53:05.0251] <jub0bs>
Just checking my sanity here... Is there any case where a Fetch-compliant browser would include multiple `Access-Control-Request-Headers` headers in a preflight request? My understanding of [CORS-preflight fetch](https://fetch.spec.whatwg.org/#cors-preflight-fetch-0) (specifically step 5.2) tells me no, but I'd appreciate confirmation 🙏

[09:56:04.0400] <jub0bs>
For context, the reason I'm asking is that some libraries assume the presence of an arbitrary number of ACRH headers and do... funky things with them, leading to many unnecessary heap allocations. 😬

[10:10:53.0603] <annevk>
jub0bs: I guess middleware is not allowed to do the reverse of combine? And I guess with multiple headers you mean the equivalent of multiple H1 header lines for the same header name. If so, I don't think so.

[10:16:39.0277] <jub0bs>
annevk: Thanks for your reply. 😃
I'm actually asking regardless of what a middleware is "allowed" to do (I'm guessing you mean according to the HTTP spec).
And I'm not sure what you mean by "H1 header", but what I mean by multiple ACRH header is something like

```http
Origin: https://example.com
Access-Control-Request-Headers: foo
Access-Control-Request-Headers: bar
Access-Control-Request-Headers: baz
```

I'd like to rely on the guarantee that there be at most one `Access-Control-Request-Headers` in the preflight request.

[10:17:18.0844] <jub0bs>
 * annevk: Thanks for your reply. 😃
I'm actually asking regardless of what a middleware is "allowed" to do (I'm guessing you mean according to the HTTP spec).
And I'm not sure what you mean by "H1 header", but what I mean by multiple ACRH header is something like

```http
Origin: https://example.com
Access-Control-Request-Headers: foo
Access-Control-Request-Headers: bar
Access-Control-Request-Headers: baz
```

I'd like to rely on the guarantee that there be at most one `Access-Control-Request-Headers` in the preflight request. I would just like confirmation that this guarantee is provided by the Fetch standard.

[10:18:51.0525] <jub0bs>
More context: in one of those CORS middleware library, a single malicious 1Mb preflight request can cause 100+Mb of heap allocations, in part because they cater for multiple ACRH headers in preflight requests.

[10:19:04.0031] <jub0bs>
 * More context: in one of those CORS middleware library, a single malicious/spoofed 1Mb preflight request can cause 100+Mb of heap allocations, in part because they cater for multiple ACRH headers in preflight requests.

[10:19:20.0948] <jub0bs>
 * More context: in one of those CORS middleware library, a single malicious/spoofed 1Mb preflight request can cause 100+Mb of heap allocations, in part because that library caters for multiple ACRH headers in preflight requests.

[10:19:30.0716] <annevk>
I understood the question.

[10:19:35.0124] <jub0bs>
 * More context: in one of those CORS middleware libraries, a single malicious/spoofed 1Mb preflight request can cause 100+Mb of heap allocations, in part because that library caters for multiple ACRH headers in preflight requests.

[10:20:36.0467] <jub0bs>
Thanks!

[12:54:36.0727] <jub0bs>
 * Thanks for confirming.


2024-03-26
[07:55:54.0334] <Dominic Farolino>
Hey smaug, do you think you could take a look at https://github.com/whatwg/dom/pull/1261 soon?

[07:59:24.0549] <smaug>
Let me try, hmm, later today

[08:14:48.0854] <smaug>
Dominic Farolino: have you started to try to figure out range/selection handling?

[08:15:03.0190] <smaug>
(related to node moves)

[08:15:24.0321] <smaug>
shadow dom selection itself is still unclear even without any moves

[08:16:06.0570] <smaug>
session history might have some interesting stuff too, if iframes move

[08:20:28.0950] <Dominic Farolino>
smaug: You're asking specifically about https://github.com/whatwg/dom/issues/1255 right? (Because I think #1261 is very much a subset of that work, unrelated to all the tricky stuff over in #1255.)

[08:20:59.0937] <smaug>
right, I'm asking about that, since I assume 1261 is done because of that

[08:22:26.0925] <Dominic Farolino>
Eh, the two are related but how dependent they are is unclear. #1261 needs to get done regardless, though it probably helps out with #1255 to some limited extent, yeah.

[08:23:16.0063] <Dominic Farolino>
We have not dug into all of the nastiness of selection/range of #1255 yet, though that is next on my agenda :)

[08:24:19.0049] <smaug>
Dominic Farolino: ok, so this is more about just defining things better in the spec. 

[08:24:31.0147] <smaug>
I wasn't quite sure about the context here

[08:35:08.0970] <Dominic Farolino>
Pretty much yeah. Like I said, I think it will help out with the iframe atomic move case in general, which is nice, but it also stands on its own outside of that work

[09:00:13.0508] <annevk>
Luca Casonato: nice work on async iterable! Wish Deno would let you do some standards maintenance work. 😊

[09:00:26.0704] <annevk>
 * Luca Casonato: nice work on async iterable! Wish Deno would let you do some more standards maintenance work. 😊

[09:01:53.0129] <Luca Casonato>
> <@annevk:matrix.org> Luca Casonato: nice work on async iterable! Wish Deno would let you do some more standards maintenance work. 😊

Thanks! I'd like to do some more - just difficult to find the time between all of the fun projects I work on (mostly my own choice rather than Deno limiting my time though :) )

[15:33:49.0392] <zcorpan>
annevk: Yoav Weiss : I'm not sure that needing the crossorigin attribute for font preloads was the right call. See referenced issues in https://github.com/w3c/preload/issues/32 and https://stackoverflow.com/search?q=font+preload+crossorigin&s=bb683b7b-3977-46cf-b187-70da3a7ca6b1

[15:34:35.0479] <zcorpan>
Also, what is the situation now for same-origin font preloads? Can `crossorigin` be omitted?


2024-03-27
[23:20:42.0696] <annevk>
zcorpan: I think I said as much in that issue?

[23:25:25.0350] <Yoav Weiss>
I agree it was a mistake. I also think that preconnect requiring a definition ahead of time of whether the resource would be CORS-enabled or not is bad. (this may be a Chromium-only requirement, not sure)

[23:25:51.0151] <Yoav Weiss>
 * I agree it was a mistake. I also think that preconnect requiring a definition ahead of time of whether the resources eventually fetched on it would be CORS-enabled or not is bad. (this may be a Chromium-only requirement, not sure)

[23:27:21.0388] <Yoav Weiss>
I think Firefox got it right at the time, but Chromium net code wasn't amenable to align with that.

[01:17:25.0455] <annevk>
I don't even understand how the `crossorigin` was made to apply to same-origin fetches. Was there a brief period where fonts were not fetched with credentials ever or some such?

[01:17:49.0008] <annevk>
But even then that would be a change to the semantics of the `crossorigin` attribute that I don't think were ever documented.

[01:20:04.0339] <annevk>
Yoav Weiss: that's for cross-origin fetches. Those are somewhat more tricky. I forgot what Gecko did exactly there and how sound that was. I suspect all of this might still be broken in various ways.

[01:22:58.0212] <Yoav Weiss>
For cross-origin fetches, I agree that we should use different connections for CORS and no-CORS resources. But Chromium uses different pools even for same-origin fetches, because of something related to how the redirects work that I don't quite remember now

[01:24:25.0927] <Yoav Weiss>
So cors anonymous same-origin fetches do happen with credentials, but over a different connection than a no-cors same-origin fetch

[01:27:54.0146] <annevk>
I don't think you need to use different connections for CORS and no-CORS? Connections are keyed on credentials, not CORS.

[01:31:07.0148] <zcorpan>
annevk: I don't see anyone in the issue agreeing with Yoav Weiss 's proposal in OP to make `as=font` imply `crossorigin=anonymous`

[01:32:54.0300] <Yoav Weiss>
annevk: I 100% agree. Chromium net folks at the time disagreed due to reasons that may no longer be applicable. I may try to take a stab at rectifying the situation (but that's orthogonal to Simon's suggestion)

[01:34:31.0522] <Yoav Weiss>
(nm, misread)

[01:40:12.0972] <annevk>
Ah okay. So I guess the issue is that by default `preload` sets credentials mode to include? And so for fonts that will do the wrong thing as by default they use credentials mode same-origin.

[01:40:51.0680] <annevk>
I mean, this also impacts module JavaScript in the same way, no? But perhaps nobody uses that.

[01:41:27.0705] <Noam Rosenthal>
it would impact modules in the same way, but `as=script` is also for classic scripts

[01:41:50.0256] <annevk>
Right, so maybe `preload` is just kinda broken.

[01:42:18.0226] <Noam Rosenthal>
that's a bit of a general statement, no?

[01:42:44.0761] <annevk>
It includes "kinda", which should offset that.

[01:43:00.0713] <Noam Rosenthal>
that's why "a bit" of a general statement

[01:43:02.0134] <zcorpan>
For fetches that are mode=cors by default, the ergonomics of preload is not great

[01:43:53.0626] <zcorpan>
I think making `as` set the defaults to match the later request is an improvement

[01:43:58.0824] <annevk>
(mode=cors and credentials mode=same-origin (which admittedly is all of them unless you fiddle with things))

[01:44:37.0651] <annevk>
I'm not sure, that only helps with `font` and thereby masks the issue from developers for even longer.

[01:45:03.0145] <annevk>
In five years you'll get "why does it work for fonts but not module scripts?"

[01:45:17.0630] <zcorpan>
`as=module` ?

[01:45:26.0601] <zcorpan>
or `modulescript`

[01:45:55.0161] <annevk>
Maybe, but try to specify that. It goes against the `as` attribute pretty hard.

[01:46:12.0834] <zcorpan>
`as=script type=module`

[01:46:25.0349] <Noam Rosenthal>
`type` is already a mime-type

[01:46:50.0903] <Noam Rosenthal>
I think `as=modulescript` would not be that difficult to specify TBH

[01:47:19.0420] <Noam Rosenthal>
we already translate `fetch` to ``, we can translate `modulescript` to be `script` + default cors

[01:47:25.0157] <annevk>
Allowing `type=module` could maybe still work? I like that better than `as=modulescript` given how that mismatches with destination and such.

[01:47:56.0626] <annevk>
Aside: what's Sec-Fetch-Dest for `fetch()`?

[01:48:17.0988] <Noam Rosenthal>
Isn't it something like "empty"? checking...

[01:48:44.0329] <annevk>
Yeah it is. Ugh.

[01:51:13.0999] <Noam Rosenthal>
pecified here: https://w3c.github.io/webappsec-fetch-metadata/#abstract-opdef-set-dest

[01:54:19.0692] <annevk>
I guess I don't mind `as` impacting these other settings as long as we have a holistic plan for all of them. And the plan should probably involve some MDN updates.

[02:02:31.0189] <Yoav Weiss>
modules have `modulepreload` which is defined as a different link rel

[02:03:47.0926] <Yoav Weiss>
I think that having `as=font` imply crossorigin anonymous makes sense, and can be done now in a backward compatible way (as folks that don't include it are simply holding it wrong, and have unused preloads) 

[02:04:18.0494] <Yoav Weiss>
We could do the same for `modulepreload` if it doesn't already (I'm not sure, as I wasn't involved)

[02:05:35.0444] <zcorpan>
Oh right, it is a different rel. So module scripts are already good I think

[02:05:40.0487] <annevk>
Yoav Weiss: `modulepreload` is for an entire module graph, but maybe that should always be used? Hmm.

[02:06:52.0860] <Yoav Weiss>
I don't believe the "entire module graph" bit is actually implemented in Chromium (but could be wrong)

[02:07:29.0685] <annevk>
Is there preloading for media text tracks?

[02:07:36.0707] <Yoav Weiss>
I also can't imagine a case where I'd want to preload a single module without its dependencies

[02:10:04.0450] <Yoav Weiss>
Looks like "track" is supported: https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/loader/preload_helper.cc;l=343

[02:12:55.0480] <annevk>
I think there's some disagreements on text tracks with respect to CORS as well.

[02:14:38.0956] <zcorpan>
https://wpt.fyi/results/html/semantics/embedded-content/media-elements/track/track-element/cors?label=experimental&label=master&aligned

[02:18:55.0415] <Noam Rosenthal>
I agree with Yoav Weiss here. Changing fonts to crossorigin=anonymous by default has no downsides, and we can do the same for track if these fun disagreements are resolved

[02:19:26.0653] <Noam Rosenthal>
(forgot about `modulepreload`, it indeed diminishes the reasoning to handling it in `preload`)

[02:21:36.0533] <annevk>
zcorpan: are we sure those tests are good? Having 2/3 engines fail most of the tests seems like a very bad state to be in.

[02:23:40.0301] <zcorpan>
annevk: I wrote them when foolip (iirc) implemented track support in Presto. I would need to check if they still match the spec.

