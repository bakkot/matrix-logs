2024-03-03
[06:01:34.0614] <annevk>
zcorpan: I vaguely recall there's an issue tracking something like that? I think there's also some things around navigation that are not being tracked accurately, such as the changes people want to make around bounce-tracking.


2024-03-04
[23:38:45.0022] <annevk>
PSA: https://whatwg.org/stages is live (might have to hard refresh for better table styling)

[05:26:46.0427] <farre>
so, I now have tests, and I checked epiphany (which should be webkit, right?), and load events for cross origin navigation of iframes is done there as well

[05:45:12.0303] <annevk>
That makes sense. That's been the behavior in browsers for literally decades and I think it's also what HTML still requires.

[05:46:10.0171] <annevk>
I don't really have a good idea for how to solve the issue here apart from not dispatching anything at all. Or maybe only dispatching for the initial load, but that will likely break things.

[05:49:12.0194] <farre>
I'm looking at aligning gecko to do this as well. it still leaves the timing issue, but at least it will be the same

[05:58:09.0393] <annevk>
Gecko doesn't fire an event currently?

[06:18:44.0864] <farre>
not when updating #hash, no

[07:08:25.0409] <annevk>
Wait what, firing a load event for that case doesn't sound right. I guess I missed something.

[07:08:35.0790] <annevk>
Looking forward to the tests. :-)

[07:33:47.0821] <farre>
np, I'll ping you a phabricator link tomorrow when I've run try. I'm planning on letting the tests get upstreamed from the gecko repo if you don't object

[07:45:34.0970] <annevk>
That seems fine. But if they don't match the specification please make sure they have `.tentative` in the name.


2024-03-06
[02:27:44.0703] <annevk>
emilio mfreed: I think the CSS WG should probably come up with the native appearance story as it should be the same for all form controls, no? We want something with intrinsic width and height that uses the border-box. There's a number of things that should continue to work, such as transform, positioning, visibility, but there's also a number of things that shouldn't, such as background, font, etc. However, both of those lists are continuously evolving and it seems unreasonable for HTML to be in charge of that?

I will file an issue later today to get the conversation started.

[06:27:19.0457] <Ms2ger>
annevk: hey, I was wondering if you have an idea when we could get a review of the shadowrealms pr

[06:34:15.0798] <annevk>
Ms2ger: last I heard implementers are skeptical on it. Has that changed? It's really hard to get a sense of the amount of buy-in this has beyond a handful of interested parties. Are there recent statements from Chromium and Gecko available?

[06:36:19.0151] <Ms2ger>
I can try to get statements if I can't find any

[06:38:44.0360] <annevk>
Ms2ger: thanks! For instance, https://github.com/tc39/proposal-shadowrealm/issues/401 is the latest I saw from mgaudet. Which I guess is not really saying no, but it's not an enthusiastic endorsement either and perhaps something we need more clarity on to prevent a future `setTimeout()` issue.

[06:41:06.0491] <Ms2ger>
That's fair

[06:49:37.0475] <annevk>
yulia | sick: for when you feel better ^^ (hope that's soon!)

[09:46:52.0702] <annevk>
emilio mfreed: https://github.com/w3c/csswg-drafts/issues/10039


2024-03-07
[17:11:55.0661] <Domenic>
Could use editor review on https://github.com/whatwg/html/pull/10043 (easy) and https://github.com/whatwg/html/pull/10168 (bigger)

[17:13:00.0495] <akaster>
Is it expected that cryptographic keys created by SubtleCrypto are stored in a fun and secure place like a Trusted Platform Module or Secure Enclave? 

[17:13:12.0704] <akaster>
Or would that just be a quality of implementation bonus

[00:56:52.0341] <freddy>
it's not expected and afaiu subtlecrypto predates wide availability and adoption of TPM / enclaves

[00:58:54.0939] <annevk>
Domenic: I'll leave the bigger one for zcorpan.

[01:23:24.0559] <annevk>
yulia | sick: https://github.com/w3c/trusted-types/issues/471 is probably of interest to you. Maybe also to littledan.

[01:24:10.0887] <annevk>
freddy: you too I suppose. Some of the research participants could really use a built-in sanitizer.

[01:24:19.0909] <emilio>
annevk: jarhar: Do you know what kind of styling differences do we want for the `<select>` case in https://github.com/w3c/csswg-drafts/issues/5998?

[01:25:04.0903] <emilio>
Basically, I think the main thing we really need is the non-replaced box stuff, but I'm not aware of all the intended differences between `base` and `none`

[01:25:07.0336] <annevk>
emilio: essentially we want to build something from the ground up, irrespective of auto/none styling.

[01:25:28.0194] <yulia | sick>
wow thats great

[01:25:29.0318] <emilio>
annevk: why? It seems virtually all the default `select` styles would be applicable to the "base" case

[01:26:17.0818] <yulia | sick>
(not really back yet)

[01:26:18.0951] <annevk>
emilio: the mechanism has to work for all form controls, not just `select`. So over-indexing on `select` doesn't seem useful.

[01:26:20.0224] <emilio>
annevk: modulo the `!important` stuff which right now can't be overridden by authors, but maybe we should just fix that

[01:27:00.0831] <emilio>
annevk: I guess I'm looking for a counter-example where it doesn't work. I've thought mostly about `<select>` and `<input switch>`, and seems not overcomplicating stuff would work for those at least

[01:27:55.0547] <emilio>
annevk: that is, the default styles for form controls are sorta reasonable, what is not customizable is the stuff inside them. And _that_ is fixable with appearance: base without weird hacks / internal mechanisms which are generally unsound

[01:33:12.0313] <annevk>
emilio: I don't think people want the base style to match the none style. They want something closer to the auto style, except not platform bound.

[01:35:39.0842] <annevk>
emilio: Also `select` like other form controls is currently undefined, except for like 3 properties?

[01:35:52.0404] <emilio>
annevk: I thought the point of `base` was basically give you control over the inner bits of the control. `none` already gives you something that is a functional control, and the system colors used there are in control of the UA, so can be changed. `border-radius` is the only tricky thing IMO

[01:36:11.0390] <emilio>
annevk: it doesn't have to be that way, select styles are fairly interoperable iirc?

[01:36:34.0841] <annevk>
No the point of `base` is to give somewhat unified cross-browser controls that are fully stylable, but also accessible, etc.

[01:37:06.0285] <annevk>
 * No the point of `base` is to give unified cross-browser controls that are fully stylable, but also accessible, etc.

[01:37:38.0502] <annevk>
I would expect some sort of consistency across `base` controls.

[01:37:44.0726] <emilio>
annevk: well, sure, my point is that `appearance: none` is that, except it doesn't let you style the stuff inside the control

[01:38:21.0753] <emilio>
and the "doesn't let you style stuff inside the control" part is solvable without weird shenanigans

[01:38:54.0884] <annevk>
It's not for checkboxes and it's also not really for other controls? Some of that might be fixable, but I don't think `none` always meets the bar. (And I'd rather `none` going forward actually mean `none`.)

[01:39:56.0338] <annevk>
(The stuff inside the control also has to be described in terms of CSS already for `base`, to be clear.)

[01:40:50.0774] <emilio>
Sure, but that's not an issue because we can do whatever in the UA sheet for inner elements / pseudos inside `base`, and have it not affect `none` / `auto`

[01:41:10.0354] <emilio>
You're right that checkboxes are an issue here, but those are the exception rather than the rule

[01:46:15.0732] <annevk>
emilio: I think the pseudo elements should also work for `none`.

[01:47:10.0786] <emilio>
annevk: that doesn't match how `none` behaves right now, but maybe, if we can get away with it? But that means that we should make the `none` behavior also describable via css.

[02:00:48.0332] <annevk>
emilio: the solution has to work for checkboxes too though. But I also think we want the freedom to be able to change certain things (such as the default size) for `base` to make them really good defaults for people to build on.

[02:01:46.0283] <annevk>
As such I don't really believe in trying to shoehorn it into the existing mess (which I do agree we should clean up as well, but I think we're more limited there in what can be done).

[02:06:35.0610] <emilio>
annevk: I don't see why it wouldn't work for checkboxes fwiw, assuming checkboxes gain some pseudo tree (which they'd need to, right), you could style that however you want. You'd need some special code to not render that tree in the `none` case, to match existing behavior, but that seems feasible

[02:08:00.0015] <emilio>
annevk: I don't think we want css magic, because whatever that magic is we're going to need to explain it to authors. And this is exactly the kind of magic that we don't want to expose to the web (https://wiki.csswg.org/faq#selectors-that-depend-on-layout)

[02:09:02.0741] <emilio>
Anyways I need to go do some work, but I think we can get away without CSS magic.

[02:37:39.0827] <annevk>
I think it's fine to have "magic" when it's constrained. This wouldn't really become a generic thing, it's just for form controls. You want the magic to be more tightly scoped it seems, but I'd rather have it a little wider to decouple things a little more.

[06:54:53.0415] <jarhar>
for appearance:base select as i am trying to implement it, most of the actual new styles are on the button and the datalist children, not the select itself, which makes it easier to put in the UA stylesheet. It looks kind of bad imo to still have the border and other stuff there from the appearance:auto select around the parent element of the button, but maybe once i finish implementing appearance:base and demo it to some more people then maybe nobody will care that much and we can just leave the UA rules in there.

[06:55:14.0179] <jarhar>
if you look at the "actual" and "expected" pictures of this test output, you can see what difference the built-in borders make: https://chromium-layout-test-archives.storage.googleapis.com/results.html?json=chromium/try/linux-rel/1729863/blink_wpt_tests%20%28with%20patch%29/full_results_jsonp.js

[06:55:53.0010] <jarhar>
also it should probably be completely the same across browsers by default when using appearance:base, and if we aren't using the same UA border rule for select then that wouldn't be the case anymore

[09:01:03.0560] <jub0bs>
Hey all. I have some more thoughts about CORS...

[09:04:14.0077] <jub0bs>
A common misunderstanding (dispelled by annevk [long ago](https://twitter.com/annevk/status/948831079649169408)) about CORS is that it is some kind of defence. I think some overeager middleware libraries can be blamed for this, but I'm starting to wonder whether CORS error messages in Chrome specifically could be improved:

> Access to fetch at 'https://example.org' from origin 'https://example.com' has been _blocked by CORS policy_. [...]

My emphasis.


[09:06:03.0131] <jub0bs>
The phrase "blocked by CORS policy" seems to mislead some practitioners into conflating the effects of the SOP and CORS. How about something like the following message instead?

> Access to fetch at 'https://example.org' from origin 'https://example.com' has been blocked because the requested resource's CORS policy is insufficiently permissive. [...]

[09:06:49.0810] <jub0bs>
 * A common misunderstanding (dispelled by annevk [long ago](https://twitter.com/annevk/status/948831079649169408)) about CORS is that it is some kind of defence. I think some overeager middleware libraries can be blamed for this, but I'm starting to wonder whether CORS error messages in Chrome specifically could be improved:

> Access to fetch at 'https://example.org' from origin 'https://example.com' has been _blocked by CORS policy_. \[...\]

(my emphasis)

[09:07:06.0363] <jub0bs>
 * The phrase "blocked by CORS policy" seems to mislead some practitioners into conflating the effects of the SOP and CORS. How about something like the following message instead?

> Access to fetch at 'https://example.org' from origin 'https://example.com' has been blocked _because the requested resource's CORS policy is insufficiently permissive_. \[...\]

(my emphasis)

[09:07:44.0328] <jub0bs>
 * A common misunderstanding (dispelled by annevk [long ago](https://twitter.com/annevk/status/948831079649169408)) about CORS is that it is some kind of defence. I think some overeager middleware libraries can be blamed for this, but I'm starting to wonder whether CORS error messages (in Chrome specifically) could be improved:

> Access to fetch at 'https://example.org' from origin 'https://example.com' has been _blocked by CORS policy_. \[...\]

(my emphasis)

[09:07:50.0053] <jub0bs>
 * A common misunderstanding (dispelled by annevk [long ago](https://twitter.com/annevk/status/948831079649169408)) about CORS is that it is some kind of defence. I think some overeager middleware libraries can be blamed for this, but I'm starting to wonder whether CORS error messages (in Chromium specifically) could be improved:

> Access to fetch at 'https://example.org' from origin 'https://example.com' has been _blocked by CORS policy_. \[...\]

(my emphasis)

[09:08:26.0705] <jub0bs>
 * A common misunderstanding (dispelled by annevk [long ago](https://twitter.com/annevk/status/948831079649169408)) about CORS is that it is some kind of defence. I think some overeager middleware libraries can be blamed for this confusion, but I'm starting to wonder whether CORS error messages (in Chromium specifically) could be improved:

> Access to fetch at 'https://example.org' from origin 'https://example.com' has been _blocked by CORS policy_. \[...\]

(my emphasis)

[09:10:02.0756] <jub0bs>
More verbose, but clearer IMHO.

[09:10:21.0322] <jub0bs>
 * 1. A common misunderstanding (dispelled by annevk [long ago](https://twitter.com/annevk/status/948831079649169408)) about CORS is that it is some kind of defence. I think some overeager middleware libraries can be blamed for this confusion, but I'm starting to wonder whether CORS error messages (in Chromium specifically) could be improved:

> Access to fetch at 'https://example.org' from origin 'https://example.com' has been _blocked by CORS policy_. \[...\]

(my emphasis)

[09:10:37.0164] <jub0bs>
 * One: A common misunderstanding (dispelled by annevk [long ago](https://twitter.com/annevk/status/948831079649169408)) about CORS is that it is some kind of defence. I think some overeager middleware libraries can be blamed for this confusion, but I'm starting to wonder whether CORS error messages (in Chromium specifically) could be improved:

> Access to fetch at 'https://example.org' from origin 'https://example.com' has been _blocked by CORS policy_. \[...\]

(my emphasis)

[09:17:59.0468] <jub0bs>
Two: Some folks attempt to solve their CORS issues by including an `Origin` header in their request. Of course, because `Origin` is a [forbidden request-header name](https://fetch.spec.whatwg.org/#forbidden-request-header), user agents deny clients' attempts to include such a header in a request. The XHR API is vocal about it and issues an error message:

```
httpRequest = new XMLHttpRequest();
httpRequest.open('GET', 'https://www.example.com', true);
httpRequest.setRequestHeader("Origin", "http://localhost")
httpRequest.send(null);
```

> Refused to set unsafe header "Origin"

However, the Fetch API denies such attempts silently:

```
fetch('https://example.com', {headers: {origin: 'http://localhost'}});
```
(no error message about Origin being unsafe)

[09:18:41.0764] <jub0bs>
Shouldn't the Fetch Api be more vocal about attempts to include unsafe headers in requests?

[09:18:49.0528] <jub0bs>
 * Shouldn't the Fetch API be more vocal about attempts to include unsafe headers in requests?

[09:19:02.0199] <jub0bs>
 * Shouldn't the Fetch API be more vocal about those misguided attempts to include unsafe headers in requests?

[09:23:03.0508] <jub0bs>
Three: Some folks also attempt to solve their CORS issues by including CORS _response_ headers (such as `Access-Control-Allow-Origin`) in their request, which may in fact make their CORS issues worth if the requested resource's CORS policy doesn't allow arbitrary request headers. In connection to [my second point above](https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$2ipzTHms8MptHtnnrbf9PtwDdqpv0bObDd5yJGIFYc8?via=matrix.org&via=mozilla.org&via=igalia.com), I think there is a case for adding CORS response headers to the list of forbidden request-header names. I'm conscious that this could break existing clients, but including such CORS response headers to a request is almost always a mistake anyway.

[09:23:15.0747] <jub0bs>
 * Three: Some folks also attempt to solve their CORS issues by including CORS _response_ headers (such as `Access-Control-Allow-Origin`) in their request, which may in fact make their CORS issues worse if the requested resource's CORS policy doesn't allow arbitrary request headers. In connection to [my second point above](https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$2ipzTHms8MptHtnnrbf9PtwDdqpv0bObDd5yJGIFYc8?via=matrix.org&via=mozilla.org&via=igalia.com), I think there is a case for adding CORS response headers to the list of forbidden request-header names. I'm conscious that this could break existing clients, but including such CORS response headers to a request is almost always a mistake anyway.

[09:23:28.0373] <jub0bs>
 * Three: Some folks also attempt to solve their CORS issues by including CORS _response_ headers (such as `Access-Control-Allow-Origin`) in their request, which may in fact make their CORS issues worse if the requested resource's CORS policy doesn't allow arbitrary request-header names. In connection to [my second point above](https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$2ipzTHms8MptHtnnrbf9PtwDdqpv0bObDd5yJGIFYc8?via=matrix.org&via=mozilla.org&via=igalia.com), I think there is a case for adding CORS response headers to the list of forbidden request-header names. I'm conscious that this could break existing clients, but including such CORS response headers to a request is almost always a mistake anyway.

[09:24:07.0036] <jub0bs>
 * Three: Some folks also attempt to solve their CORS issues by including CORS _response_ headers (such as `Access-Control-Allow-Origin`) in their request, which may in fact make their CORS issues worse if the requested resource's CORS policy doesn't allow arbitrary request-header names. In connection to [my second point above](https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$2ipzTHms8MptHtnnrbf9PtwDdqpv0bObDd5yJGIFYc8?via=matrix.org&via=mozilla.org&via=igalia.com), I think there is a case for adding all CORS response headers (`Access-Control-Allow-*` and `Access-Control-Max-Age`) to the list of forbidden request-header names. I'm conscious that this could break existing clients, but including such CORS response headers to a request is almost always a mistake anyway.

[09:24:22.0362] <jub0bs>
 * Three: Some folks also attempt to solve their CORS issues by including CORS _response_ headers (such as `Access-Control-Allow-Origin`) in their request, which may in fact make their CORS issues worse if the requested resource's CORS policy doesn't allow arbitrary request-header names. In connection to [my second point above](https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$2ipzTHms8MptHtnnrbf9PtwDdqpv0bObDd5yJGIFYc8?via=matrix.org&via=mozilla.org&via=igalia.com), I think there is a case for adding all CORS response headers (`Access-Control-Allow-*` and `Access-Control-Max-Age`) to the list of forbidden request-header names. I'm conscious that such a change could break existing clients, but including such CORS response headers to a request is almost always a mistake anyway.

[09:26:13.0351] <jub0bs>
 * Two: Some folks attempt to solve their CORS issues by including an `Origin` header in their request. Of course, because `Origin` is a [forbidden request-header name](https://fetch.spec.whatwg.org/#forbidden-request-header), user agents deny clients' attempts to include such a header in a request. The XHR API is vocal about it and issues an error message:

```
httpRequest = new XMLHttpRequest();
httpRequest.open('GET', 'https://www.example.com', true);
httpRequest.setRequestHeader("Origin", "http://localhost")
httpRequest.send(null);
```
In Chrome:
> Refused to set unsafe header "Origin"


However, the Fetch API denies such attempts silently:

```
fetch('https://example.com', {headers: {origin: 'http://localhost'}});
```

(no error message about Origin being unsafe)

[09:26:28.0507] <jub0bs>
 * Two: Some folks attempt to solve their CORS issues by including an `Origin` header in their request. Of course, because `Origin` is a [forbidden request-header name](https://fetch.spec.whatwg.org/#forbidden-request-header), user agents deny clients' attempts to include such a header in a request. The XHR API is vocal about it and issues an error message:

```
httpRequest = new XMLHttpRequest();
httpRequest.open('GET', 'https://www.example.com', true);
httpRequest.setRequestHeader("Origin", "http://localhost")
httpRequest.send(null);
```

In Chrome:

> Refused to set unsafe header "Origin"

And in Firefox:

> Attempt to set a forbidden header was denied: Origin

However, the Fetch API denies such attempts silently:

```
fetch('https://example.com', {headers: {origin: 'http://localhost'}});
```

(no error message about Origin being unsafe)

[09:27:57.0444] <jub0bs>
 * Two: Some folks attempt to solve their CORS issues by including an `Origin` header in their request. Of course, because `Origin` is a [forbidden request-header name](https://fetch.spec.whatwg.org/#forbidden-request-header), user agents deny clients' attempts to include such a header in a request. The XHR API is vocal about it and issues an error message:

```
httpRequest = new XMLHttpRequest();
httpRequest.open('GET', 'https://www.example.com', true);
httpRequest.setRequestHeader("Origin", "http://localhost")
httpRequest.send(null);
```

In Chrome:

> Refused to set unsafe header "Origin"

And in Firefox:

> Attempt to set a forbidden header was denied: Origin

However, the Fetch API denies such attempts silently:

```
fetch('https://example.com', {headers: {origin: 'http://localhost'}});
```

(no error message about `Origin` being unsafe, [per the Fetch standard](https://fetch.spec.whatwg.org/#headers-validate))

[09:28:50.0012] <jub0bs>
 * Two: Some folks attempt to solve their CORS issues by including an `Origin` header in their request. Of course, because `Origin` is a [forbidden request-header name](https://fetch.spec.whatwg.org/#forbidden-request-header), user agents deny clients' attempts to include such a header in a request. The XHR API is vocal about it and issues an error message:

```
httpRequest = new XMLHttpRequest();
httpRequest.open('GET', 'https://www.example.com', true);
httpRequest.setRequestHeader("Origin", "http://localhost")
httpRequest.send(null);
```

In Chrome and Safari:

> Refused to set unsafe header "Origin"

And in Firefox:

> Attempt to set a forbidden header was denied: Origin

However, the Fetch API denies such attempts silently:

```
fetch('https://example.com', {headers: {origin: 'http://localhost'}});
```

(no error message about `Origin` being unsafe, [per the Fetch standard](https://fetch.spec.whatwg.org/#headers-validate))

[09:30:20.0272] <jub0bs>
 * Three: Many people also attempt to solve their CORS issues by including CORS _response_ headers (such as `Access-Control-Allow-Origin`) in their request, which may in fact make their CORS issues worse if the requested resource's CORS policy doesn't allow arbitrary request-header names. In connection to [my second point above](https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$2ipzTHms8MptHtnnrbf9PtwDdqpv0bObDd5yJGIFYc8?via=matrix.org&via=mozilla.org&via=igalia.com), I think there is a case for adding all CORS response headers (`Access-Control-Allow-*` and `Access-Control-Max-Age`) to the list of forbidden request-header names. I'm conscious that such a change could break existing clients, but including such CORS response headers to a request is almost always a mistake anyway.

[09:35:06.0451] <annevk>
jub0bs: for 1/2, improving warning messages is probably best filed directly with web browsers. Maybe sideshowbarker has done some work on these in the past perhaps. I'd certainly be open to reviewing WebKit patches that improve this. For 3, I think that's also best done as a warning message by web browsers. I wouldn't want to constrain what people can do with HTTP at the API level, but giving them a hint they're likely making a mistake seems reasonable.

[09:39:17.0034] <jub0bs>
annevk: Thanks. I was hoping to catch some browser folks here, actually. As for 3, I believe a warning would be a good middle ground.

[15:51:29.0827] <Luke Warlow>
Could I get bug edit permissions on whatwg/html for labelling issues?


2024-03-08
[16:32:52.0996] <Domenic>
> <@lwarlow:igalia.com> Could I get bug edit permissions on whatwg/html for labelling issues?

Invite sent

[16:50:03.0046] <sideshowbarker>
jub0bs: If you raise bugs and Cc me, I would be happy to write browser patches for adding warnings or improving existing ones.

And while we’re at it, I think we should also try to get a patch landed to make Chrome stop emitting the _“If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled"_ message.

…because to 99.99% or whatever of web developers, that message is in practice the complete opposite of being helpful to them.

[01:29:02.0220] <jub0bs>
sideshowbarker: True. Many people believe that setting the request's mode to `'no-cors`' will magically resolve their CORS issues.

[01:30:14.0072] <jub0bs>
 * sideshowbarker: Thanks for your reply. I'll open a couple of bugs asap.
True about `'no-cors'`: many people believe that setting the request's mode to `'no-cors`' will magically resolve their CORS issues. Perhaps this part of the error message is more harmful than helpful.

[01:30:24.0340] <jub0bs>
 * sideshowbarker: Thanks for your reply. I'll open a couple of bugs asap.
True about `'no-cors'`: many people believe that setting the request's mode to `'no-cors`' will magically resolve their CORS issues. Perhaps this part of the error message is more misleading than helpful.

[01:31:04.0121] <jub0bs>
 * sideshowbarker: Thanks for your reply. I'll open a couple of bugs asap.
True about `'no-cors'`: many people believe that setting the request's mode to `'no-cors'` will magically resolve their CORS issues. Perhaps this part of the error message is more misleading than helpful.

[01:31:19.0221] <jub0bs>
 * sideshowbarker: Thanks for your reply. I'll open a couple of bugs asap.
True about `'no-cors'`: many people believe that setting their request's mode to `'no-cors'` will magically resolve their CORS issues. Perhaps this part of the error message is more misleading than helpful.

[02:07:28.0680] <zcorpan>
jub0bs: yeah, saying it was blocked by the same-origin policy would make more sense

[02:08:45.0835] <zcorpan>
But in the end the message should probably suggest reasonable options

[03:55:32.0711] <smaug>
https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflecting-content-attributes-in-idl-attributes:reflected-idl-attribute-31 is somehow oddly written

[04:27:54.0466] <smaug>
first there are some items, and after them actual getter and setter steps. But what is for example the first item? Is that part of some algorithm or is it not?

[05:12:31.0223] <annevk>
smaug: the first list item is introducing a shorthand, used in the remaining list items for defining infrastructure

[05:13:46.0167] <annevk>
I do agree it's a bit strange, but I also wasn't sure how to refactor it when I last fixed some reflecting stuff.

[06:32:47.0877] <Dominic Farolino>
https://html.spec.whatwg.org/C#becomes-connected happens when the insertion steps for an element are called *and* it is "connected". But can the insertion steps ever be called for an element that's _disconnected_?

[07:44:24.0592] <Jake Archibald>
Folks who are familiar with `delegatesFocus`… what are the use-cases? Is it much different to putting everything in the shadow root in a `<label>` pointing to the field?

[09:15:04.0715] <keithamus>
Jake Archibald: or a custom button or similar.

[09:17:27.0723] <keithamus>
https://github.com/muan/input-duration-element an example in the real world.

[09:21:52.0084] <Jake Archibald>
Yeah, support for `.focus()` is nice. I guess I don't always want the "clicking anything in the shadow root delegates focus to one element" thing


2024-03-09
[22:10:02.0761] <Domenic>
IIRC it was mainly added because we knew built-in controls like `<input type=date>` had that behavior.


2024-03-10
[19:28:37.0598] <dean.highpower>
Hello, does anyone know about the "willful violation of RFC 5322" note in section 4.10.5.1.5 Email state of the whatwg HTML spec? The comment raises some concern for me, since RFC-5322 is not the appropriate standard to find the syntax of email addresses as used on the public Internet today to route email. The correct standard is RFC-5321, which defines the SMTP protocol and includes a grammar for Mailbox which is what most people think of as an email address. This is what people sometimes call the "envelope" address.

The RFC-5322 document specifies the format of the email message content, not the protocol used to transport mail.

So, yeah: you should not follow RFC-5322, but you should follow RFC-5321.


[23:40:55.0276] <annevk>
dean.highpower: there's a long discussion in https://github.com/whatwg/html/issues/4562 without much progress, though someone from the i18n WG might make another attempt this year.

