2024-08-01
[03:46:26.0361] <smaug>
Anyone with Safari? I wonder if it has changed behavior regarding https://github.com/whatwg/html/issues/2429 

[04:18:24.0322] <arai>
I get `log: 195` on Safari Technology Preview (Release 199 (Safari 18.0, WebKit 19619.1.22.5)) and Safari (17.5 (19618.2.12.11.6))


2024-08-02
[20:37:24.0443] <Ben Ho>
Following up on this, for my usable Dialog component, I eventually added a custom function to loop back to first focusable element and visa versa to encapsulate the tabbing. 

I have seen some concerns about accessibility where it is trapping users to make a decision when they want to move to address bar or other browser controls but it works for me because my Dialog always has escape method that can not be blocked. 

[20:37:33.0300] <Ben Ho>
 * Following up on this, for my re-usable Dialog component, I eventually added a custom function to loop back to first focusable element and visa versa to encapsulate the tabbing. 

I have seen some concerns about accessibility where it is trapping users to make a decision when they want to move to address bar or other browser controls but it works for me because my Dialog always has escape method that can not be blocked. 

[02:31:39.0972] <Yoav Weiss>
Not with Safari but I've been poking around this in webkit https://github.com/WebKit/WebKit/pull/31055

[02:31:57.0754] <Yoav Weiss>
My impression is that all image loading is sync

[02:32:05.0796] <Yoav Weiss>
(I'm trying to fix that)

[08:20:33.0882] <smaug>
But the spec issue hints that some stuff in webkit is async


2024-08-04
[21:15:25.0654] <schickb>
Adam Rice: Any more thought on the stream close question above? Why is close() alone not sufficient? When constructing a ReadableStream  it is unexpected that you need to call controller.byobRequest.respond(0) after close() when no data is enqueued or risk causing the stream reader to hang.


2024-08-05
[04:10:11.0640] <Adam Rice>
> <@schickb:matrix.org> Adam Rice: Any more thought on the stream close question above? Why is close() alone not sufficient? When constructing a ReadableStream  it is unexpected that you need to call controller.byobRequest.respond(0) after close() when no data is enqueued or risk causing the stream reader to hang.

Sorry, I don't remember what the reason was, and I haven't been able to find the original discussion.


2024-08-06
[22:19:38.0537] <Domenic>
> <@schickb:matrix.org> Adam Rice: Any more thought on the stream close question above? Why is close() alone not sufficient? When constructing a ReadableStream  it is unexpected that you need to call controller.byobRequest.respond(0) after close() when no data is enqueued or risk causing the stream reader to hang.

I suggest filing an issue on whatwg/streams. Async discussion will likely get more participants and someone might be able to help. And if there is no good answer we can use the issue to track fixing it.

(I myself have not really been able to follow the issue across the multiple chat messages which often come in while I'm afk :))

[07:30:59.0090] <Jake Archibald>
https://dom.spec.whatwg.org/#dom-event-preventdefault - this mentions that calling `preventDefault` can have no effect. Does that mean `event.defaultPrevented` will remain false?

[07:31:42.0378] <Jake Archibald>
Or does it just mean that the dispatcher of the event may do nothing with that information

[11:30:00.0719] <TabAtkins>
I think the latter.

[15:56:57.0203] <gentlgeek>
Hi everyone! üëã I‚Äôm new here and excited to join the conversation. I‚Äôm keen to learn more about HTML and related topics, and I‚Äôm looking forward to diving into some great discussions with all of you. If you have any tips or resources for someone just getting started, I‚Äôd love to hear them! Thanks for having me!




2024-08-07
[11:08:55.0756] <schickb>
Domenic: Adam Rice Create this ticket https://github.com/whatwg/streams/issues/1321

[11:09:05.0245] <schickb>
 * Domenic: Adam Rice Created this ticket https://github.com/whatwg/streams/issues/1321


2024-08-08
[04:58:46.0540] <zcorpan>
> <@gentlgeek:matrix.org> Hi everyone! üëã I‚Äôm new here and excited to join the conversation. I‚Äôm keen to learn more about HTML and related topics, and I‚Äôm looking forward to diving into some great discussions with all of you. If you have any tips or resources for someone just getting started, I‚Äôd love to hear them! Thanks for having me!

Welcome! Maybe https://wpc.guide/ is of interest

[05:41:30.0933] <gentlgeek>
I have gone through the material and I think it will be of great benefit. There is a lot to learn, thankyou so much, I really appreciate your effort üëçÔ∏è.


2024-08-09
[02:28:42.0406] <Kaiido>
> <@jakea:matrix.org> https://dom.spec.whatwg.org/#dom-event-preventdefault - this mentions that calling `preventDefault` can have no effect. Does that mean `event.defaultPrevented` will remain false?

In case the cancelable attribute is falsy, or if the passive listener flag is set, it indeed does nothing.
https://dom.spec.whatwg.org/#set-the-canceled-flag

[04:21:34.0355] <hsivonen>
annevk: Regarding https://github.com/whatwg/url/issues/815#issuecomment-2275009761 , do you have a recollection of why the ASCII asterisk and double quote are allowed in the domain name by the URL Standard?

[12:06:56.0833] <Meghan Denny>
spam <https://github.com/whatwg/url/issues/830>


2024-08-11
[04:01:38.0249] <Gasim Gasimzada>
Hello, I have recently been working on trying to implement `console.table` for the LadyBird browser and I have came across the `console` WHATWG repo. Unfortunately, there was no algorithm defined for `console.table`; so, I decided to investigate how Chromium and Firefox implement it and tried to figure out the algorithm. I created a pull request to https://github.com/whatwg/console/pull/237 that tries to describe the algorithm. Please let me know of your comments and concerns about this since this is my first ever contribution to Whatwg.

[10:41:37.0255] <Herman official>
Hallo


2024-08-13
[02:20:16.0971] <annevk>
I just found out that implementations use a decimal library to implement `<input type=number>` while HTML says nothing of the sort. Didn't realize that when initially reporting https://github.com/tc39/proposal-decimal/issues/80. Does anyone know more about this?

[13:30:46.0476] <one_>
Hi

[13:31:02.0646] <one_>
Hi


2024-08-14
[18:18:38.0457] <Domenic>
> <@annevk:matrix.org> I just found out that implementations use a decimal library to implement `<input type=number>` while HTML says nothing of the sort. Didn't realize that when initially reporting https://github.com/tc39/proposal-decimal/issues/80. Does anyone know more about this?

We had to do this in jsdom to pass web platform tests.

[10:43:33.0737] <annevk>
So maybe someone wrote some non-floating-point-compliant WPTs and everyone just decided to copy in a decimal lib? lol

[10:53:14.0539] <Sam Sneddon [:gsnedders]>
I mean if the spec doesn't define behaviour, and everyone thinks it's the right behaviour from a UX point-of-view, then making the tests pass is unsurprising. Or people blindly following the tests, unless it goes against the spec. Or just completely blindly following the tests.


2024-08-15
[18:05:17.0595] <Domenic>
I admit not reading the spec closely when we implemented in jsdom but I kind of assumed the spec was based on mathematical infinite-precision numbers.

[00:14:49.0152] <annevk>
I assumed that for a long time too, but looking at it today it just references floating-point math?

[01:16:33.0469] <Domenic>
I'm not sure, I think it only references floating-point for the parsing/serialization?

[01:17:06.0484] <Domenic>
The tests are for stepUp() etc. IIRC which says "Let value be the result of adding delta to value."

[02:22:21.0916] <annevk>
Ah, I guess that's fair.

[02:22:53.0300] <annevk>
Still, some additional clarity on this wouldn't hurt. Perhaps once we sort out numbers in Infra.

[05:11:37.0097] <sideshowbarker>
> <@annevk:matrix.org> So maybe someone wrote some non-floating-point-compliant WPTs and everyone just decided to copy in a decimal lib? lol

Are the relevant tests https://wpt.fyi/results/html/semantics/forms/the-input-element/number.html? or somewhere else?

[05:14:20.0827] <sideshowbarker>
hmm, I guess it‚Äôs probably not those, because Ladybird passes most of those

[05:17:34.0613] <sideshowbarker>
Anyway, I believe Ladybird implements the core `<input type=number>` requirements per-spec ‚Äî that, is Ladybird uses a double parser. And so, if the WPTs don‚Äôt match the spec requirements, then Ladybird should be failing those

[06:34:26.0878] <Gasim Gasimzada>
> <@gasim:matrix.org> Hello, I have recently been working on trying to implement `console.table` for the LadyBird browser and I have came across the `console` WHATWG repo. Unfortunately, there was no algorithm defined for `console.table`; so, I decided to investigate how Chromium and Firefox implement it and tried to figure out the algorithm. I created a pull request to https://github.com/whatwg/console/pull/237 that tries to describe the algorithm. Please let me know of your comments and concerns about this since this is my first ever contribution to Whatwg.

annevk janbrasna Can I add you as reviewers for this PR?

[08:15:58.0144] <annevk>
Gasim Gasimzada: I think Dominic Farolino or one of the other editors is prolly better suited to review, maybe Domenic but I suspect he's very busy; if all that fails I could maybe take a look, but I'd have to ramp up on the whole subject so I'd rather not

[08:46:45.0555] <Dominic Farolino>
Ah, yeah I've been notified about the PR, just haven't had time to look at it yet. Coming back from vacation this week, so still warming up

[08:55:18.0691] <annevk>
Samesies. Been going pretty well thus far, but I'm suspecting it's because a lot of other people are away which makes it easier.

[09:14:50.0694] <Dominic Farolino>
zcorpan: I want to confirm something about https://github.com/web-platform-tests/wpt/blob/master/html/semantics/embedded-content/the-iframe-element/iframe-loading-lazy-reload-navigation-reload.html#L9-L10. Is this statement true because reloads don't go through the "normal" #navigate path, and it is only the normal #navigate path that clears the lazyload resumption steps? (https://html.spec.whatwg.org/C#beginning-navigation:lazy-load-resumption-steps). Is that the idea?

[09:16:16.0197] <Gasim Gasimzada>
> <@domfarolino:matrix.org> Ah, yeah I've been notified about the PR, just haven't had time to look at it yet. Coming back from vacation this week, so still warming up

Thanks! No rush! Just wanted to know who to set in the Checklist for "At least two implementers are interested (and none opposed):"

[09:21:13.0713] <annevk>
Gasim Gasimzada: ah, that part you want to lobby implementers for. But I if it's documenting what's already implemented you don't strictly need that.

[09:21:39.0582] <Gasim Gasimzada>
> <@annevk:matrix.org> Gasim Gasimzada: ah, that part you want to lobby implementers for. But I if it's documenting what's already implemented you don't strictly need that.

Makes sense! Thank you.


2024-08-16
[21:39:46.0528] <Domenic>
zcorpan: should have CCed you on the email, but FYI in https://groups.google.com/a/chromium.org/g/blink-dev/c/UquTxWTNON0 we're discussing UA styles for <meter> + appearance: none, which might be interesting given your past work in the area.

[01:01:27.0178] <zcorpan>
> <@domfarolino:matrix.org> zcorpan: I want to confirm something about https://github.com/web-platform-tests/wpt/blob/master/html/semantics/embedded-content/the-iframe-element/iframe-loading-lazy-reload-navigation-reload.html#L9-L10. Is this statement true because reloads don't go through the "normal" #navigate path, and it is only the normal #navigate path that clears the lazyload resumption steps? (https://html.spec.whatwg.org/C#beginning-navigation:lazy-load-resumption-steps). Is that the idea?

Right. https://html.spec.whatwg.org/#reload doesn't call "navigate"

[01:03:14.0320] <zcorpan>
> <@domenicdenicola:matrix.org> zcorpan: should have CCed you on the email, but FYI in https://groups.google.com/a/chromium.org/g/blink-dev/c/UquTxWTNON0 we're discussing UA styles for <meter> + appearance: none, which might be interesting given your past work in the area.

Thanks

[01:06:47.0183] <zcorpan>
Domenic: iirc I left primitive style for meter undefined because there wasn't consensus, but it seems now we might have consensus

[04:19:04.0780] <jub0bs>
I'm told that AWS API Gateway exhibits a weird behaviour: it splits a list-based field (`Access-Control-Request-Headers`) into multiple field lines. Example:
```http
Access-Control-Request-Headers: bar,baz,foo
```
becomes
```http
A
```
which I believe is non-compliant

[04:19:17.0400] <jub0bs>
 * I'm told that AWS API Gateway exhibits a weird behaviour: it splits a list-based field (`Access-Control-Request-Headers`) into multiple field lines. Example:

```http
Access-Control-Request-Headers: bar,baz,foo
```

becomes

```http
Access-Control-Request-Headers: bar,baz,foo
```

which I believe is non-compliant

[04:20:47.0746] <jub0bs>
 * I'm told that AWS API Gateway exhibits a weird behaviour: it splits a list-based field (`Access-Control-Request-Headers`) into multiple field lines. Example:

```http
Access-Control-Request-Headers: bar,baz,foo
```

becomes

```http
Access-Control-Request-Headers: bar
Access-Control-Request-Headers: baz
Access-Control-Request-Headers: foo
```

which I believe is non-compliant. I haven't found anything in RFC 9110 that describes this behaviour (only the reverse, i.e. merging multiple field lines of the same name into one). Am I missing something? Is such a proxy behaviour allowed?

[04:21:37.0424] <jub0bs>
 * I'm told that AWS API Gateway exhibits a weird behaviour: it splits a list-based field (`Access-Control-Request-Headers`) into multiple field lines. Example:

```http
Access-Control-Request-Headers: bar,baz,foo
```

becomes

```http
Access-Control-Request-Headers: bar
Access-Control-Request-Headers: baz
Access-Control-Request-Headers: foo
```

which I believe is non-compliant. I haven't found anything in RFC 9110 that describes this "splitting" behaviour (only the reverse, i.e. merging multiple field lines of the same name into one). Am I missing something? Is such a proxy behaviour allowed?

[04:22:33.0021] <jub0bs>
 * I'm told that AWS API Gateway exhibits a weird behaviour: it splits a list-based field (`Access-Control-Request-Headers`) into multiple field lines. Example:

```http
Access-Control-Request-Headers: bar,baz,foo
```

becomes

```http
Access-Control-Request-Headers: bar
Access-Control-Request-Headers: baz
Access-Control-Request-Headers: foo
```

which I believe is non-compliant. I haven't found anything in RFC 9110 that describes this "splitting" behaviour (only the reverse, i.e. merging multiple field lines of the same name into one). Am I missing something? Is a proxy allowed to split list-based fields like this?

[04:23:08.0226] <jub0bs>
 * I'm told that AWS API Gateway exhibits a weird behaviour: it allegedly (I haven't verified this yet) splits a list-based field (`Access-Control-Request-Headers`) into multiple field lines. Example:

```http
Access-Control-Request-Headers: bar,baz,foo
```

becomes

```http
Access-Control-Request-Headers: bar
Access-Control-Request-Headers: baz
Access-Control-Request-Headers: foo
```

which I believe is non-compliant. I haven't found anything in RFC 9110 that describes this "splitting" behaviour (only the reverse, i.e. merging multiple field lines of the same name into one). Am I missing something? Is a proxy allowed to split list-based fields like this?

[07:30:20.0531] <Richard Gibson>
it's allowed; see https://www.rfc-editor.org/rfc/rfc9110#section-5.3 (emphasis mine):
> a sender MUST NOT generate multiple field lines with the same name in a message (whether in the headers or trailers) or append a field line when a field line of the same name already exists in the message, **_unless_ that field's definition allows multiple field line values to be recombined as a comma-separated list** (i.e., at least one alternative of the field's definition allows a comma-separated list, **such as an ABNF rule of #(values) defined in [Section 5.6.1](https://www.rfc-editor.org/rfc/rfc9110#abnf.extension)**).

[Section 5.6.1](https://www.rfc-editor.org/rfc/rfc9110#section-5.6.1) defines "_a #rule extension to the ABNF rules of [RFC5234](https://www.rfc-editor.org/rfc/rfc9110#RFC5234)‚Ä¶ for defining comma-delimited lists of elements‚Ä¶ and optional whitespace_".

[`Access-Control-Request-Headers` is registered](https://www.iana.org/assignments/http-fields/http-fields.xhtml#field-names) with reference to WHATWG Fetch, which [describes its values](https://fetch.spec.whatwg.org/#http-new-header-syntax) as ABNF `1#field-name`, where ["ABNF" explicitly includes HTTP `#`](https://fetch.spec.whatwg.org/#infrastructure).

[09:22:33.0943] <hsivonen>
annevk: TIL: https://www.ietf.org/archive/id/draft-gulbrandsen-smtputf8-nice-addresses-00.html

[09:23:09.0508] <hsivonen>
> <@hsivonen:mozilla.org> annevk: TIL: https://www.ietf.org/archive/id/draft-gulbrandsen-smtputf8-nice-addresses-00.html

(Not particularly relevant to what HTML forms need to support, but there's a normative reference to the BNF currently in HTML!)

[09:27:40.0880] <annevk>
I guess we should email the authors if we manage to make progress on `<input type=email>` soon.

[12:03:04.0281] <janbrasna>
At the same time it won‚Äôt hurt having someone from the existing implementations check this retroactive speccing is aligned with how they‚Äôve been understanding it for what‚Äôs shipped in the first place.

[12:05:42.0059] <janbrasna>
But I see you‚Äôre having such conversations already in both the spec PR and your implementation PR so let‚Äôs see where that leads you;) 


2024-08-17
[11:03:56.0090] <jub0bs>
> <@gibson042:matrix.org> it's allowed; see https://www.rfc-editor.org/rfc/rfc9110#section-5.3 (emphasis mine):
> > a sender MUST NOT generate multiple field lines with the same name in a message (whether in the headers or trailers) or append a field line when a field line of the same name already exists in the message, **_unless_ that field's definition allows multiple field line values to be recombined as a comma-separated list** (i.e., at least one alternative of the field's definition allows a comma-separated list, **such as an ABNF rule of #(values) defined in [Section 5.6.1](https://www.rfc-editor.org/rfc/rfc9110#abnf.extension)**).
> 
> [Section 5.6.1](https://www.rfc-editor.org/rfc/rfc9110#section-5.6.1) defines "_a #rule extension to the ABNF rules of [RFC5234](https://www.rfc-editor.org/rfc/rfc9110#RFC5234)‚Ä¶ for defining comma-delimited lists of elements‚Ä¶ and optional whitespace_".
> 
> [`Access-Control-Request-Headers` is registered](https://www.iana.org/assignments/http-fields/http-fields.xhtml#field-names) with reference to WHATWG Fetch, which [describes its values](https://fetch.spec.whatwg.org/#http-new-header-syntax) as ABNF `1#field-name`, where ["ABNF" explicitly includes HTTP `#`](https://fetch.spec.whatwg.org/#infrastructure).

Very interesting! Thanks for the pointers.


2024-08-19
[22:40:22.0800] <annevk>
If anyone has particular topics to discuss at TPAC, we're holding another WHATUP: https://github.com/whatwg/meta/issues/326

[23:58:45.0573] <annevk>
Domenic: further thoughts on https://github.com/whatwg/html/pull/10564?

[00:06:40.0467] <Domenic>
I think our existing "(the empty string)" convention is good. I would prefer you correct the single capitalized variant you found. I think we could contemplate adding quotes to all keywords (not just in the tables, but elsewhere too) but I think that opens up a lot of questions, e.g. do we do the same for attribute names or element local names?

[00:07:06.0649] <Domenic>
I'm unclear why we're revisiting this months after Keith's original PRs settled everything on a single style.

[00:16:24.0383] <annevk>
I guess I'll do that for now, but I had missed at the time we included parenthesis here. I think that's a rather confusing notation.

[00:19:26.0233] <annevk>
(And I do think it might make sense to distinguish a node's local name from a reference to the node itself.)

[08:19:51.0202] <Jake Archibald>
Anyone know where the click behaviour on `<button disabled>` is specified?

[08:22:57.0468] <Jake Archibald>
https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#enabling-and-disabling-form-controls:-the-disabled-attribute

> A form control that is disabled must prevent any click events that are queued on the user interaction task source from being dispatched on the element.

But that doesn't seem to cover how it prevents propagation of click events dispatched on child elements

[08:25:39.0223] <annevk>
Jake Archibald: https://github.com/whatwg/html/issues/1567 is related and generally search for "activation behavior" in whatwg/html; unfortunately that's messy and nobody has taken the time to clean it up as-of-yet

[08:26:23.0345] <Jake Archibald>
Good to know I'm not missing something obvious. Thanks!


2024-08-20
[19:18:02.0683] <Domenic>
https://github.com/whatwg/html/issues/10032 is some recent dsicussion

[14:48:58.0428] <TabAtkins>
Domenic / annevk : I'm doing some refactoring in Bikeshed, and realized that, although the "whatwg" group is listed as requiring Privacy and Security sections, all WHATWG specs didn't actually trigger that check in the code, due to a case mismatch (was expecting `Group: whatwg`, but all your specs have `Group: WHATWG`). Now that I'm fixing that (as a side-effect of some other bits), almost all WHATWG specs end up triggering the warning.

[14:49:18.0802] <TabAtkins>
Do y'all want WHATWG to require privacy/security sections? I can turn it off if not.

[14:53:58.0275] <TabAtkins>
(Well, I'm turning it off for now anyway; no reason to suddenly start making specs fail unexpectedly. Let me know if you'd like me to turn it back *on*.)

[14:57:25.0029] <TabAtkins>
(it looks like the check was added back in 2015 by Mike West <https://github.com/speced/bikeshed/commit/89f5bdc7f12294f5c59890ee19d9ee5619c57a66>, I'm not sure if y'all were even aware of it)


2024-08-21
[18:01:23.0646] <Domenic>
Turning it off, at least for now, sounds good; thank you!

[00:02:36.0430] <annevk>
I'm not convinced Privacy & Security sections are a net positive. They need to be an integral part of feature design.

[00:56:39.0759] <freddy>
Not a WHATWG steering commitee member, but I think we all know that privacy/security/a11y is seldomly well-solved when done as an afterthought. So, it would be more important to have this required for all specs during design phase (as anne says, I believe?) and thus enable these checks for all new specs

[00:57:39.0373] <freddy>
(Solutionism: Maybe there's could be a tag, like "legacy-no-security-privacy-section" that could be applied to old specs _and_ do the check such that that new specs will get the warning)

[01:04:46.0085] <annevk>
No, I'm saying these sections don't help. They often lead to people making normative statements in these sections that really should be part of the processing model.

[01:09:33.0528] <Domenic>
I'm not ready to make a blanket statement that the sections don't help, but I will strongly agree that I've seen that antipattern quite often.

[01:11:23.0326] <Domenic>
I guess they feel more like explainer sections than spec sections to me. But then we get into the old discussion about how much explanatory/non-normative text is helpful in a spec.

[01:34:46.0587] <annevk>
Yeah fair. I just think that if you need these sections to get something that's good security & privacy-wise, you've likely failed. But they can be useful to add some context, e.g., https://encoding.spec.whatwg.org/#security-background

[04:59:31.0895] <annevk>
freddy: see also the somewhat painful https://github.com/whatwg/dom/issues/776 and https://github.com/whatwg/dom/issues/777 which resulted in https://dom.spec.whatwg.org/#security-and-privacy. I could see it being helpful, but I can also see it leading to people not critically thinking about it for themselves.

[05:32:49.0516] <hsivonen>
Intentional or accidental that JSON modules integration ended up with a normative reference to IETF JSON instead of using the same specification mechanisms as Fetch?

[05:35:35.0208] <annevk>
hsivonen: oh wow, that seems bogus.

[05:37:33.0031] <annevk>
I wonder if people here have a term for "hash including hash sign" and "search including question mark", as an alternative way of solving https://github.com/whatwg/url/issues/779. We could do `hasSearch` that returns a boolean, but `searchWithSyntax` (if there's a better name) that returns `?test` instead of `test` might be more convenient.

[05:39:03.0288] <annevk>
hsivonen: oh actually, I think it might be a result of where the MIME type is defined

[05:40:13.0370] <hsivonen>
I'm trying to figure out if HTML ends up allowing non-UTF-8 encodings for JSON modules...

[05:40:30.0517] <annevk>
hsivonen: because for parsing we do end up calling the same %JSON.parse% operation as far as I can tell

[05:40:59.0373] <annevk>
hsivonen: we don't, see the logic in https://html.spec.whatwg.org/#fetch-a-single-module-script

[05:41:35.0912] <annevk>
hsivonen: in particular 13.2 and then 13.9

[05:42:12.0345] <hsivonen>
> <@annevk:matrix.org> hsivonen: in particular 13.2 and then 13.9

Thanks.

[05:42:40.0369] <hsivonen>
> <@annevk:matrix.org> hsivonen: oh actually, I think it might be a result of where the MIME type is defined

It appears in HTML as a conformance requirement beyond the MIME type.

[05:43:34.0752] <annevk>
Yeah, there might also be some [JSON] copypasta. Seems reasonable to file an issue to address at one point.

[06:10:32.0630] <hsivonen>
Oh, the encoding requirements of this version of IETF JSON are more reasonable than past IETF JSON.

[06:23:27.0800] <annevk>
hsivonen: I think at some point I pushed them pretty hard with the XMLHttpRequest "precedent" and that we were not going to change our ways

[06:34:02.0407] <easrng>
It's funny that RFC8259 requires both encoding as utf-8 and escapes as utf-16

[06:37:40.0786] <annevk>
Yeah, JavaScript was developed in the 16-bits are enough for all characters in the world days. And I guess since JSON is frozen-in-time and happened before the 21-bit escapes were added to JavaScript everyone will have to learn about that legacy anew.

[10:07:44.0890] <Vuk Stefanovic>
Hi All!
I need some help on how to handle backpressure for the ReadableSide of a Transform stream.

For example I am trying to implement a replace text functionality, where I replace a string of text coming from a ReadableStream with text coming from a second Readable stream, so far I couldn't find any example for this using whatwg streams.

This is pseudo code, so for simplicity I'm pretending like the text to replace won't span chunk boundaries

```javascript
class Transformer {
  async transform(chunk, controller) {
    const foundTextIndex = chunk.indexOf('text to replace');
    
    if (foundTextIndex === -1) {
      controller.enqueue(chunk);
      return;
    }

    // Enqueue text before the part that needs to be replaced
    controller.enqueue(chunk.slice(0, foundTextIndex));
    
    // This is where we do the replacement, we enqueue the text from the second source 
    // this is the part I'm not sure on how to handle, like for example what if we are adding
    // chunks to the readable sides, but it's internal queue is full full
    for await (const chunk of streamForReplacement) {
     controller.enqueue(chunk.slice(0, foundTextIndex));
     console.log(chunk);
   }
   
    // Enqueue text after replacement
    controller.enqueue(chunk.slice(foundTextIndex + 'text to replace'.length));
  }
}
```

One thing I saw thanks to good old `chatGTP` was to use `Promise.resolve()` to wait for the next event loop tick in case the `desiredSize` was negative.

For example
```javascript
class Transformer {
  async transform(chunk, controller) {
    const foundTextIndex = chunk.indexOf('text to replace');
    
    if (foundTextIndex === -1) {
      controller.enqueue(chunk);
      return;
    }

    // Enqueue text before the part that needs to be replaced
    controller.enqueue(chunk.slice(0, foundTextIndex));
    
    // Enqueue the text from the second source with backpressure support (maybe)
    for await (const chunk of streamForReplacement) {
     while (controller.desiredSize <= 0) {
       await Promise.resolve(); // wait for next tick to check if we can enqueue more chunks
     }
     controller.enqueue(chunk.slice(0, foundTextIndex));
   }
   
    // Enqueue text after replacement
    controller.enqueue(chunk.slice(foundTextIndex));
  }
}
```

I'm not sure if doing `Promise.resolve();` is valid, as I couldn't find any example dealing with this problem, and I want to know if there are better alternatives? I would really appreciate if someone could help with this and point me in the right direction

[10:34:08.0416] <Colin Alworth>
Can‚Äôt help with the spec side of things, but await Promise.resolve() is only going to be a microtask, so as I understand it there won‚Äôt be time for other tasks (like IO, browser events) to take place

[11:11:23.0943] <Vuk Stefanovic>
> <@niloc132:delightfullyoffto.pics> Can‚Äôt help with the spec side of things, but await Promise.resolve() is only going to be a microtask, so as I understand it there won‚Äôt be time for other tasks (like IO, browser events) to take place

This will actually be running in a Node env, not browser, it's going to be running in an edge function, where I get HTLM as streams and I need to combine main page with some other fragments and return that in the response

[11:12:02.0680] <Vuk Stefanovic>
so starving the macrotask queue is not really a concern


2024-08-22
[00:10:01.0365] <annevk>
Domenic: will ask internally about `file:` URL hostnames. Is this the only `file:` URL issue Chromium is blocked on? Ideally we make one set of changes to settle it forever, but maybe that is too much to hope for?

[00:11:00.0565] <Domenic>
No, I think it's more general unease about any changes unfortunately. Adam Rice is the relevant authority I believe.

[00:24:33.0731] <Luca Casonato>
> <@annevk:matrix.org> Domenic: will ask internally about `file:` URL hostnames. Is this the only `file:` URL issue Chromium is blocked on? Ideally we make one set of changes to settle it forever, but maybe that is too much to hope for?

What are these changes? I think Node and Deno have more in the wild usage of file:// URLs than all the browsers combined, so it‚Äôd be useful to ensure that those changes would not break any of our users.

[00:59:35.0894] <annevk>
Luca Casonato: makes sense. Nothing concrete as-of-yet, but https://github.com/whatwg/url/issues/599 recently got some new comments. There's a number of other `file:` URL issues open too (identified through a label).

[01:18:25.0051] <Adam Rice>
Hayato is more knowledgeable than me but I don't think he's here. The difference in drive-letter handling is my biggest concern, but given that people start Chromium with a file name on the command-line from batch scripts any change to the mapping between file: URLs and system filenames is scary.

[02:41:39.0417] <Domenic>
Yeah, it may be the case that Chromium is just not willing to change anything and thus can't contribute very helpfully to standards discussions, so that's why in my comment I was trying to be helpful to Dan by just giving a general vibe for the ecosystem. From that perspective Node/Deno would be great voices to happy.

[02:41:44.0938] <Domenic>
 * Yeah, it may be the case that Chromium is just not willing to change anything and thus can't contribute very helpfully to standards discussions, so that's why in my comment I was trying to be helpful to Dan by just giving a general vibe for the ecosystem. From that perspective Node/Deno would be great voices to have.

[05:30:16.0463] <annevk>
Domenic: I need to do some work with JSON for Declarative Web Push and the algorithms you added to Infra are really nice. I was thinking of hand-waving converting Infra values back to JS (so I can then do dictionary conversion), but even that is covered. Thanks!

[09:38:14.0967] <annevk>
Is it possible to find out what sites registered for https://developer.chrome.com/origintrials/#/view_trial/919297273937002497?

[10:02:17.0529] <Luke Warlow>
That link just goes to the active trials tab btw

[11:01:49.0572] <annevk>
Interesting, for me it goes to "Trial for Mutation Events Deprecation Trial" in a couple of browsers at least. Anyway, that's the trial I'm interested in. :-)

[14:49:33.0047] <Panos Astithas>
annevk: unfortunately we can't share trial registration info externally. You can ask the feature owners for aggregate data that they can share.

[16:59:35.0396] <smaug>
I'd be also interested in to know  which sites do want to still use mutation events. Telemetry data has gone down a bit, but it is not zero.


2024-08-23
[23:41:36.0179] <annevk>
littledan: FWIW, serialization and deserialization of non-ECMA-262 objects is generally defined alongside the objects directly using the IDL [Serializable] annotation

[23:42:59.0581] <annevk>
Panos Astithas: that essentially makes it impossible for other browsers to act until the reverse trial is done

[23:43:35.0314] <annevk>
So maybe we shouldn't have negative tests in WPT and such yet then... Or register WPT for the reverse origin trial

[02:38:45.0902] <littledan>
> <@annevk:matrix.org> littledan: FWIW, serialization and deserialization of non-ECMA-262 objects is generally defined alongside the objects directly using the IDL [Serializable] annotation

Right thanks for the correction, not sure how I forgot that.

[04:56:25.0295] <annevk>
keithamus: just stumbled across https://github.com/whatwg/notifications/issues/17 üòÄ

[04:57:12.0148] <keithamus>
Are you looking at all of the 10yo issues? üòÜ

[05:10:51.0645] <annevk>
keithamus: hah, did you file many? I was just looking at Notifications and was somewhat surprised we briefly interacted 10 years ago. But my memory generally being bad could also be an explanation.

[05:13:09.0679] <keithamus>
annevk: I don't even remember filing this issue so my memory is no better. Looking at it now I don't think I have historically filed all that many. One or two a year: https://github.com/issues?q=is%3Aissue+author%3Akeithamus+archived%3Afalse+org%3Awhatwg+sort%3Acreated-asc+

[05:15:34.0210] <annevk>
Oh wow, `<dialog>` without JavaScript is from 2018 lol

[08:58:14.0559] <annevk>
Why does Push API talk about the "plain text of the message". Surely that's the "byte sequence of the message" or some such. Vague and wrong is a great combination. Makes it hard to blame colleagues who just implement against WPT.

[09:00:01.0908] <annevk>
To be clear and fair, DOM is doing things like this too: https://github.com/whatwg/dom/commit/ad422bef2890c14c92e8d618ac372e16b808b0c5

The number of people critically reading standards and reporting what is wrong feels like low single digits. üòÖ

[13:22:38.0366] <Luke Warlow>
> <@annevk:matrix.org> To be clear and fair, DOM is doing things like this too: https://github.com/whatwg/dom/commit/ad422bef2890c14c92e8d618ac372e16b808b0c5
> 
> The number of people critically reading standards and reporting what is wrong feels like low single digits. üòÖ

I've found the ladybird model of writing exactly what the specs say is really handy for finding bits where the specs just make no sense. Just reading specs on its own I find it a struggle to contextualise what's being said in quite the same way.

[15:29:22.0942] <Panos Astithas>
annevk: I don't think Origin Trial registrations would be that useful, given that there is no guarantee that registering an origin implies control over that origin. As I said, the feature owners can collect data about feature usage (or deprecation in this case) and share that.


2024-08-25
[00:59:46.0458] <sideshowbarker>
In WPT do we not actually have any tests which check that ‚Äútrailing junk‚Äù in floating-point-number values is ignored?

