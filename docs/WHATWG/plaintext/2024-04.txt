2024-04-01
[18:39:33.0718] <Adam Rice>
Sorry, yes, Chrome's behaviour for non-special URLs is currently incorrect, but we're working on it. You can star this bug https://issues.chromium.org/issues/40063064 to be notified when there are updates.

[02:04:42.0027] <evilpie>
https://github.com/whatwg/url/issues/815

[02:39:38.0636] <sideshowbarker>
When trying to build the HTML spec in my macOS (Sonoma 14.4.1) environment, I was getting the following error:
>   = note: ld: library 'System' not found
>          clang: error: linker command failed with exit code 1 (use -v to see invocation)

To fix it I needed to do this:

> export LIBRARY_PATH="$LIBRARY_PATH:/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib"

I wonder if we should document this


2024-04-02
[02:39:41.0523] <zcorpan>
Looking for mathml content in httparchive but it's almost entirely this: https://github.com/facebook/react/blob/6e650109999e5f483fcb910ff20fe8148a566cb2/packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js#L3934 (cc bkardell )

[02:49:16.0391] <zcorpan>
https://chromestatus.com/metrics/feature/timeline/popularity/4403 might be better. Maybe mathml on the web usually isn't in markup but generated from script?

[04:15:42.0871] <annevk>
I really only know one website: https://golem.ph.utexas.edu/~distler/blog/

[04:16:17.0353] <annevk>
There used to be a website that collected all of them, but I don't remember that one

[05:44:46.0639] <bkardell>
> <@zcorpan:mozilla.org> Looking for mathml content in httparchive but it's almost entirely this: https://github.com/facebook/react/blob/6e650109999e5f483fcb910ff20fe8148a566cb2/packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js#L3934 (cc bkardell )

yeah not surprising since the http archive is mainly getting home pages and even sites dedicated to math and science don't usually put math on the home page :). There are sites like https://ar5iv.labs.arxiv.org/, for example..

[05:48:13.0531] <bkardell>
and wikipedia has many millions but currently (because of core interop issues - that's why we're here) still doesn't use it for rendering, only for a11y -- so like https://en.wikipedia.org/wiki/Mass%E2%80%93energy_equivalence has 30 mathml instances related to images of math - ick

[05:51:20.0669] <bkardell>
zcorpan: we have a few very rich sources - is there something you're trying to answer specifically that I can help with or just generally poking around?

[05:53:51.0827] <zcorpan>
bkardell: trying to get a sense of how much content uses `href` and on which elements

[05:56:18.0066] <bkardell>
> <@zcorpan:mozilla.org> bkardell: trying to get a sense of how much content uses `href` and on which elements

ah well you can see _some_ discussion in that issue (there are some related emails or issues with more on this same topic, but it's pretty generally aligned with this) https://github.com/w3c/mathml-core/issues/142#issuecomment-1082772082

[05:56:37.0224] <bkardell>
> in the full collection there, there are 30 <mrow with href as opposed 97549 <mi and 3226 <mn

[05:58:06.0090] <bkardell>
the thing is most of the corpuses are in XML toolchains that they are open to some transforms on - many things have been adapted for mathml-core already

[06:00:10.0306] <bkardell>
That's why I am saying if the group is like "we should prefer mrow because then links still work" I am like, well, only a tiny tiny fraction and the rest you have to transform anyways - let's just fix it properly

[06:03:51.0929] <zcorpan>
Right

[06:58:31.0946] <bkardell>
> <@zcorpan:mozilla.org> Right

 I do think the a11y tools might be a pretty compelling argument (many are already fine so we'd have to see how difficult the other two are I guess)  - I am just trying to make sure `<a>` gets a fair shot is all because i think it is clearly the best answer if possible...But I can also accept if it is not, it's not a hill I want to get seriously injured on

[08:00:30.0271] <bkardell>
zcorpan: do you have all you need or can I help you find more?

[08:01:54.0598] <zcorpan>
bkardell: a separate use counter for every mathml element in a document with an href attribute, maybe? :)

[08:02:33.0185] <zcorpan>
For now my conclusion is that href at all is very rare

[08:10:02.0157] <bkardell>
hmm, idk - in some sets it is not rare at all. In a few almost every token has an href, but in those cases that is to do a toolip about what it represents or something and would be better maybe as a popover :)

[08:12:48.0775] <bkardell>
but yeah I guess there are many many docs with no links too

[08:16:12.0339] <bkardell>
there are also potentially false positives depending on how you count.. like `document.querySelectorAll('math [href]').length` is too naieve because it will give you positives of links that are in foreign content inside the tokens (which is fine, it's just HTML), and also stuff inside `<annotation-xml>` which isn't displayed 

[08:17:10.0360] <zcorpan>
I looked at like 50 that match the chromium use counter and not one had `math [href]` on a presentation-math element. There was one with a href attribute inside `annotation-xml` but that was not a rendered element

[08:23:05.0110] <bkardell>
emilio: had some counters in moz, not sure if they are still there or if they're counting this, but you could check? I mean, he is the one that opened the issue we're all pointing at even - so it's possible :)

[15:36:15.0382] <Timo Tijhof>
I'm trying to preload requests for `<script type=module src=…>` via the HTTP Link header.

I'm aware of, and have read, the past discussions around why `rel=modulepreload` was introduced separately instead of within rel=preload. As I understand it, module requests are made with a different CORS setting, plus by signalling the module type this way, browsers can do additional optimizations (e.g. look for indirect imports and preload those as well, and honouring import maps).

I'm also aware that at this time, there is no way to apply an import map to preloaded resources, which is fine, since the server-side in my case knows the flat and full list of "real" requests that will be made.

All that having been said, I can't seem to find in the spec what rel=preload incantation will result in the preloaded result being used by `<script type=module>`.

In Chrome, if I use `Link: </static/foo.js>;rel=preload;as=script;crossorigin` it will correctly result in the later demand for `<script type=module src=foo.js>` using this request (I can tell by the timing, the initiator, the order, and there not being a duplicat req).

In Firefox, it doesn't and there's instead a duplicate request made later on.

[15:37:40.0186] <Timo Tijhof>
 * I'm trying to preload requests for `<script type=module src=…>` via the HTTP Link header.

I'm aware of, and have read, the past discussions around why `rel=modulepreload` was introduced separately instead of within rel=preload. As I understand it, module requests are made with a different CORS setting, plus by signalling the module type this way, browsers can do additional optimizations (e.g. look for indirect imports and preload those as well, and honouring import maps).

I'm also aware that at this time, there is no way to apply an import map to preloaded resources, which is fine, since the server-side in my case knows the flat and full list of "real" requests that will be made.

All that having been said, I can't seem to find in the spec what rel=preload incantation will result in the preloaded result being used by `<script type=module>`.

In Chrome, if I use `Link: </static/foo.js>;rel=preload;as=script;crossorigin` it will correctly satisfy the later demand for `<script type=module src=foo.js>` by re-using the preload response (I can tell by the timing, the initiator, the order, and there not being a duplicat req).

In Firefox, it doesn't and there's instead a duplicate request made later on.

[15:52:02.0171] <Timo Tijhof>
Hm.. so via [Bugzilla search](https://bugzilla.mozilla.org/buglist.cgi?product=Core&short_desc=preload%20crossorigin&classification=Components&query_format=advanced&short_desc_type=allwordssubstr) I'm finding a related change https://hg.mozilla.org/mozilla-central/rev/72570ac420f0, where I see in the diff context that Gecko apparently considers an (unspecified?) `type=module` attribute for `preload as=script` and discards those. This was done last year for https://bugzilla.mozilla.org/show_bug.cgi?id=1803744 which implemented support for the (also unspecified) ability for `rel=modulepreload` to be used in a Link header.. this despite the standard still saying at https://html.spec.whatwg.org/multipage/links.html#linkTypes:link-type-preload that `modulepreload` does not have "Link processing".

[15:57:43.0109] <Timo Tijhof>
While that sounds cool (and Firefox-only today, Chrome discards it with a console warning for invalid `rel=modulepreload` in HTTP), it's actually unusable for my use case because if I use `rel=preload` with foo.js?v=1, bar.js?v=1 and baz.js?v=1. It ends up doing its recursive logic on each of them, and attempts to preload the unversioned URLs of the discovered dependencies (since the import map isn't known at this time).

[15:58:27.0228] <Timo Tijhof>
 * While that sounds cool (and Firefox-only today, Chrome discards it with a console warning for invalid `rel=modulepreload` in HTTP), it's actually unusable for my use case because if I use `rel=modulepreload` in Firefox for all (or even one) of foo.js?v=1, bar.js?v=1 and baz.js?v=1. It ends up doing its recursive logic, and attempt to preload the unversioned dependency URLs of the discovered imports (since the import map isn't known at this time).


2024-04-03
[18:18:06.0193] <Timo Tijhof>
> <@timotijhof:matrix.org> I'm trying to preload requests for `<script type=module src=…>` via the HTTP Link header.
> 
> I'm aware of, and have read, the past discussions around why `rel=modulepreload` was introduced separately instead of within rel=preload. As I understand it, module requests are made with a different CORS setting, plus by signalling the module type this way, browsers can do additional optimizations (e.g. look for indirect imports and preload those as well, and honouring import maps).
> 
> I'm also aware that at this time, there is no way to apply an import map to preloaded resources, which is fine, since the server-side in my case knows the flat and full list of "real" requests that will be made.
> 
> All that having been said, I can't seem to find in the spec what rel=preload incantation will result in the preloaded result being used by `<script type=module>`.
> 
> In Chrome, if I use `Link: </static/foo.js>;rel=preload;as=script;crossorigin` it will correctly satisfy the later demand for `<script type=module src=foo.js>` by re-using the preload response (I can tell by the timing, the initiator, the order, and there not being a duplicat req).
> 
> In Firefox, it doesn't and there's instead a duplicate request made later on.

I've comment at https://github.com/whatwg/html/issues/7854#issuecomment-2033368873 instead. Hoping I've missed something and that there is at least a way to do these "manually".

[22:21:02.0830] <annevk>
Timo Tijhof: we were just discussing this case earlier in this channel; however, with the `crossorigin` attribute set it should in theory match up. Thinking about it again there's another thing however that set module scripts apart and maybe that's why Gecko doesn't reuse the cache. And that would make sense. Module scripts parse differently and so if you eagerly parse and don't store the original text you couldn't reuse the script as both classic and module script.

[22:23:14.0448] <Domenic>
It felt like that thread had several good implementation bugs that should be filed. Although I can understand that discriminating between impl bugs vs impls following the spec could take some work.

[22:23:18.0335] <annevk>
I guess that makes me lean towards only endorsing `modulepreload` for this, but I see you also need import maps at that level for that to be an okay solution. It's a bit unclear whether that should be prioritized or we should try to make `rel=preload type=module` be a thing as some kind of inbetweeny solution as well.

[22:25:24.0709] <annevk>
Domenic: I only saw this Chrome/Firefox mismatch and if anything that's probably a specification bug for suggesting `rel=preload as=script` works for `type=module`. At least I'm quite convinced now that shouldn't work as it would rule out pre-parsing.

[22:27:27.0818] <Domenic>
Firefox downloading bare imports seems bad. Safari not using module map to dedupe requests seems bad. Chrome downloading bare imports seems bad.

[22:28:58.0379] <Domenic>
rel=preload as=script crossorigin seems like it should not work, although it might populate the HTTP cache. Maybe Chrome has some general request deduping happening; I suspect that's not a module specific problem. "Memory cache"??

[22:30:23.0518] <Domenic>
That said I'm not sure the description is accurate since it includes the <script>. Some of the things Timo Tijhof ascribes to preload/modulepreload are almost certainly due to the <script>

[22:31:30.0809] <Domenic>
Safari behavior also looks so strange that I wonder if it's a DevTools issue.

[23:50:58.0406] <annevk>
Oh, I guess I should have read the Observations section more carefully.

[23:56:48.0446] <Domenic>
 * That said I'm not sure the description is accurate since it includes the `<script>`. Some of the things \<a href="https://matrix.to/#/@timotijhof:matrix.org">Timo Tijhof\</a> ascribes to preload/modulepreload are almost certainly due to the `<script>`

[00:41:27.0098] <zcorpan>
Oooh another browser engine https://github.com/Wuelle/Stormlicht

[05:08:09.0164] <annevk>
PSA: Now would be good time to do a thorough review of https://github.com/WICG/sanitizer-api if that kind of API interests you. We're trying to settle the remaining details so if there's anything you don't like please raise it.

[08:30:24.0988] <bkardell>
annevk: 
> We discussed and agreed we should do what @zcorpan said above for MathML.

Just curious where was that discussion?

[08:38:28.0252] <annevk>
bkardell: Sanitizer API meeting

[08:41:15.0125] <bkardell>
what is the meeting organized under? Igalia is interetest in the Sanitizer API but we weren't aware of the meeting

[08:41:23.0691] <bkardell>
 * what is the meeting organized under? Igalia is interetest in the Sanitizer API but we weren't aware of the meeting annevk 

[08:42:28.0089] <bkardell>
 * what is the meeting organized under? Igalia is interetested in the Sanitizer API but we weren't aware of the meeting annevk

[08:43:27.0713] <bkardell>
we'd like to attend future meetings, and obviously would have liked to have been at that one given the whole mathml thing :)

[08:43:55.0826] <annevk>
freddy: ^^

[08:56:32.0342] <bkardell>
for the record, we're not unhappy with that decision or anything - we just would like to be involved and have interests

[09:17:09.0319] <freddy>
Oh yeah, happy to send invites. Which timezone do you have folks? We're currently very EMEA friendly ;-)

[09:35:31.0735] <Luke Warlow>
> <@fbraun:mozilla.org> Oh yeah, happy to send invites. Which timezone do you have folks? We're currently very EMEA friendly ;-)

Off the top of my head it'd probably be me and Brian most interested, I'm on BST (Europe) so EMEA is perfect for me.

[10:23:06.0996] <bkardell>
I'm in ET 

[10:44:48.0095] <annevk>
It's at 4AM ET.

[10:50:41.0290] <bkardell>
🤷 unfortunate, but I can't expect the world to bend to my schedule.  Luke will be there at least. If I need to be there I will 

[10:51:00.0952] <bkardell>
 * 🤷 unfortunate, but I guess I can't expect the world to bend to my schedule :)  Luke will be there at least. If I need to be there I will 


2024-04-04
[23:09:58.0774] <freddy>
Invites sent

[03:25:21.0360] <zcorpan>
Who remembers this gem? https://www.youtube.com/watch?v=zoInPRApZcc (the original site is no longer functional, and it was Flash - https://web.archive.org/web/20110415095516/http://www.xtranormal.com/watch/7991991/web-sockets-we-are-the-first )

[03:29:03.0391] <annevk>
Have you heard about the IndexDB? 😂

[05:11:33.0842] <peterv>
Luke Warlow: the PR for `StringContext` doesn't have any changes for distinguishability, but I wonder if that's ok. Strings and objects are distinguishable in general, but I'm not sure that that's going to work with `StringContext` annotated strings.

[05:11:57.0291] <peterv>
since that can take a trusted type object

[05:13:41.0176] <Luke Warlow>
Generally speaking we don't need overloading for the use case of StringContext, and I think that's why the PR has kinda skirted around that issue. Given StringContext has side effects I'm not sure how it could work to resolve the overloads

[05:15:02.0613] <peterv>
right, so we might need to make `StringContext`-annotated strings not distinguishable from `object`, or anything that object is not distinguishable from

[05:15:15.0314] <peterv>
this also affects unions iirc

[05:17:44.0146] <Luke Warlow>
The approach TT has taken for where it needs unions is to just use the Trusted type directly and handle the enforcement in the specific algorithm for that call site. So we also don't need to "support" that case. The only thing we do need to support is shadowing an IDL attribute on a subtype, I'm not sure how that works spec wise?

[05:22:26.0071] <peterv>
that just adds a property on the derived interface's interface prototype object

[05:23:24.0685] <peterv>
I assume the shadowing adds a `StringContext` annotation?

[05:24:21.0474] <peterv>
hmm, but the base interface also has a property for that attribute that would just accept a string

[05:24:38.0377] <peterv>
and you can call that property's setter directly

[05:25:04.0043] <Luke Warlow>
In this specific case that's fine as there's another fallback mechanism to protect against it

[05:25:09.0455] <peterv>
ok

[05:25:27.0665] <peterv>
that should just work as is I think (for attributes)

[05:26:11.0242] <Luke Warlow>
Yeah that was my impression too (it does in practice in my implementation). Just wondered if that came into the overloading stuff at all.

[05:27:00.0091] <peterv>
shouldn't that's for operations

[05:27:07.0381] <peterv>
 * shouldn't, that's for operations

[05:53:45.0086] <peterv>
annevk: is the idea that none of the arguments that have an index >= distinguishing argument index can have a `[StringContext]` extended attribute on their type?

[06:41:06.0520] <annevk>
peterv: I hadn't really considered that yet. It seems weird that [StringContext] only works some of the time and the remainder you have to patch the specification algorithm directly. Why not just patch the specification algorithm in all cases then?

[06:48:07.0893] <peterv>
It almost feels like we should treat `[StringContext]`-annotated strings as a different string type from non-`[StringContext]`-annotated, that way all string types for index < distinguishing argument index must all either have `[StringContext]` or not

[06:48:16.0134] <peterv>
since they must have the same type

[06:48:42.0741] <Luke Warlow>
> <@annevk:matrix.org> peterv: I hadn't really considered that yet. It seems weird that [StringContext] only works some of the time and the remainder you have to patch the specification algorithm directly. Why not just patch the specification algorithm in all cases then?

Because that's much more intrusive in specs and in implementations.

[06:48:57.0868] <peterv>
if they're in the same position in the argument list that is

[06:48:58.0703] <Luke Warlow>
With this attribute we can avoid touching most callsites and spec algorithms

[06:50:46.0983] <peterv>
but for index >= distinguishing argument index it's unclear to me what we want

[06:51:21.0927] <peterv>
where does that come up in practice?

[06:52:13.0736] <annevk>
I think it doesn't come up currently because it's sparsely used. Which makes me wonder how many call sites we are worried about here.

[06:52:47.0730] <annevk>
But it's also becoming clear that as a generic IDL utility there's quite a few issues with it which makes me wonder if it will ever see usage beyond Trusted Types.

[06:52:58.0880] <peterv>
hmm, can we cop out then and disallow that?

[06:53:36.0227] <annevk>
We could or we could not add this to IDL and instead have the various specification algorithms deal with it directly. As the more complicated cases are already doing.

[06:56:22.0434] <peterv>
so they would all take `TrustedType or DOM/USVString`?

[06:57:09.0086] <peterv>
a bit messy for attributes, since they'll only return a string ever

[06:57:40.0685] <annevk>
Yeah and the first step of their algorithm does something to turn that into an Infra string. Presumably that matches what we do for the more complicated cases Luke Warlow?

[06:58:09.0953] <annevk>
Yeah, I guess this brings up attributes really needing to be separated into setters and getters again.

[06:58:45.0240] <Luke Warlow>
> <@annevk:matrix.org> Yeah and the first step of their algorithm does something to turn that into an Infra string. Presumably that matches what we do for the more complicated cases Luke Warlow?

Yeah pretty much, https://pr-preview.s3.amazonaws.com/lukewarlow/trusted-types/pull/484.html#the-textContent-idl-attribute shows a good example.

[06:59:25.0424] <Luke Warlow>
> <@annevk:matrix.org> Yeah and the first step of their algorithm does something to turn that into an Infra string. Presumably that matches what we do for the more complicated cases Luke Warlow?

 * Yeah pretty much, https://pr-preview.s3.amazonaws.com/lukewarlow/trusted-types/pull/484.html#the-textContent-idl-attribute shows a good example.

It uses a union (so we don't have to deal with nullable types with StringContext) and then step 1 is just to call the algorithm that handles converting to a string (with enforcement)

[07:00:17.0920] <Luke Warlow>
Fwiw at least in WebKit if you have an attribute with a union type the function can just return one of the types directly and it'll handle it further up. So at least the getters don't need to worry about variants

[07:01:19.0456] <Luke Warlow>
> <@annevk:matrix.org> I think it doesn't come up currently because it's sparsely used. Which makes me wonder how many call sites we are worried about here.

I'm counting the callsites we'd have to change now

[07:01:28.0126] <annevk>
To me that doesn't seem so bad and preferable over this StringContext business. Especially if there's only a dozen or so callers that use StringContext currently. Or are there many more?

[07:08:49.0214] <Luke Warlow>
```
Element innerHTML
Element outerHTML
Element insertAdjacentHTML
Element setHTMLUnsafe

ShadowRoot innerHTML
ShadowRoot setHTMLUnsafe

Document parseHTMLUnsafe
Document parseFromString

Range createContextualFragment

HTMLIframeElement srcdoc

Window/Worker setTimeout
Window/Worker setInterval


HTMLScriptElement innerText
HTMLScriptElement src
HTMLScriptElement text

ServiceWorkerContainer register

WorkerGlobalScope importScripts
```



[07:09:28.0570] <Luke Warlow>
I think that's the full list (unless we find anymore missing ones 🙈), so just shy of 20.

[07:11:29.0635] <Ms2ger>
Where does HTMLScriptElement innerText come from?

[07:11:58.0652] <Luke Warlow>
https://pr-preview.s3.amazonaws.com/lukewarlow/trusted-types/pull/484.html#the-textContent-idl-attribute This PR which partially fixes the TT specs script handling

[07:12:23.0925] <Luke Warlow>
 * https://pr-preview.s3.amazonaws.com/lukewarlow/trusted-types/pull/484.html#dom-htmlscriptelement-innertext This PR which partially fixes the TT specs script handling

[07:14:48.0822] <Luke Warlow>
> <@annevk:matrix.org> To me that doesn't seem so bad and preferable over this StringContext business. Especially if there's only a dozen or so callers that use StringContext currently. Or are there many more?

My gut feeling is this attribute probably won't get used outside of TT. And that the changes to algorithms are probably unintrusive enough (exactly because they're the simple cases) that it's probably fine to just go with union IDL types everywhere. Obviously it will require changes to implementations, but its entirely an implementation detail (not an observable difference in behaviour) so it's not too much of a hassle?

[07:15:24.0344] <Ms2ger>
Implementations will need work anyway :)

[07:16:42.0481] <Luke Warlow>
> <@ms2ger:igalia.com> Implementations will need work anyway :)

I mean yeah exactly, it's not even implemented in Gecko yet (I don't think), I can do the webkit change easily enough, so it's really Chrome that it would be extra work for but even then they'll have to make changes to their implementation in various places anyway.

[07:18:09.0736] <peterv>
I'm wondering, why doesn't `Element setAttribute` need to be changed too?

[07:18:19.0854] <Luke Warlow>
It uses a union type

[07:18:25.0037] <zcorpan>
Luke Warlow: https://source.chromium.org/search?q=(scripturlstring%20OR%20htmlstring%20OR%20scriptstring%20OR%20trustedtype)%20file:.idl&ss=chromium

[07:19:03.0093] <Luke Warlow>
 * It uses a union type, the list above is just ones currently using the IDL attribute

[07:19:26.0477] <peterv>
> <@lwarlow:igalia.com> It uses a union type, the list above is just ones currently using the IDL attribute

as in, it will use a union type?

[07:19:33.0786] <Ms2ger>
peterv: there's an "attribute change steps" override

[07:19:51.0767] <peterv>
sure, but WebIDL takes a `DOMString`

[07:19:53.0131] <Ms2ger>
Though that doesn't answer your question

[07:19:54.0049] <Luke Warlow>
> <@pvanderbeken:mozilla.org> as in, it will use a union type?

It already does per the spec. there's a few more complicated call sites already setup that way

[07:20:07.0644] <Luke Warlow>
> <@pvanderbeken:mozilla.org> as in, it will use a union type?

 * It already does per the spec (that one is in a PR to DOM still). there's a few more complicated call sites already setup that way

[07:20:19.0830] <peterv>
ah, ok, so that change still needs to happen

[07:20:39.0122] <peterv>
I didn't see it in the TT spec as one of the changes that need to be done to other specs

[07:21:04.0637] <Luke Warlow>
> <@pvanderbeken:mozilla.org> I didn't see it in the TT spec as one of the changes that need to be done to other specs

Yeah that particular one is in an odd state, I should probably add a note to TT to point to the PRs

[07:21:40.0595] <peterv>
I'm fine with not having the extended attribute given that we have a mix now

[07:22:16.0867] <peterv>
the extended attribute is nice because it documents what happens, but if it's not used everywhere that isn't exactly true

[07:22:35.0710] <Luke Warlow>
All the DOM APIs (of which a several are changed), execCommand, SVGAnimatedString baseVal, HTMLScriptElement textContent all already use union types (potentially others too)

[07:22:57.0427] <Luke Warlow>
 * All the DOM APIs (of which a several are changed), execCommand, SVGAnimatedString baseVal, HTMLScriptElement textContent all already use (or are planned to) union types (potentially others too)

[07:23:35.0228] <peterv>
well, the union also documents but it's more complicated to understand in that the end result is still a string value

[07:24:07.0251] <Luke Warlow>
> <@pvanderbeken:mozilla.org> well, the union also documents but it's more complicated to understand in that the end result is still a string value

Yeah I think ultimately TT complicates things no matter what form it's in. So it's probably fine?

[07:26:30.0772] <peterv>
in terms of implementation, the extended attribute might be easier for adding special treatment in the binding code itself (with the union you'd have to detect these special unions)

[07:27:11.0326] <Luke Warlow>
So I think the binding code would treat it as any other union and you'd just update the callsite directly

[07:27:27.0087] <peterv>
but I don't have implementation experience 🙂

[07:27:45.0620] <Luke Warlow>
Bit messier having to unpack a variant, but it's pretty fine, and we already have to do it in a number of places :)

[07:28:04.0686] <peterv>
hmm, I think I would advocate doing it in the generated code in Gecko 🙂

[07:28:28.0626] <peterv>
there's all kinds of complications with the exceptions etc that I'd rather centralize

[07:29:32.0075] <Luke Warlow>
Mirko was working on that recently and as I understand it the binding code is quite custom in gecko already, so probably something nice that can be done there.

[07:34:14.0894] <Luke Warlow>
Next steps are to close that PR out and update the spec to use unions instead? Should we wait to hear from Googlers?

[07:42:48.0000] <peterv>
I think we should wait a bit 🙂

[09:07:20.0189] <keithamus>
Is there a meeting happening? I requested to join but I don't know if I'm in the wrong one or what.

[09:10:55.0017] <annevk>
keithamus: my calendar says there's a meeting at 1AM Berlin time.

[09:11:45.0099] <keithamus>
Ah, odd. Mine says there's one during this hour. I guess that's in error, and I'll delete. Thanks annevk 

[09:12:53.0214] <annevk>
Yeah, looks like it's in error: https://github.com/whatwg/html/issues/10229

[16:15:13.0560] <Domenic>
> <@lwarlow:igalia.com> My gut feeling is this attribute probably won't get used outside of TT. And that the changes to algorithms are probably unintrusive enough (exactly because they're the simple cases) that it's probably fine to just go with union IDL types everywhere. Obviously it will require changes to implementations, but its entirely an implementation detail (not an observable difference in behaviour) so it's not too much of a hassle?

I think it's observable via exception order and other side effects during argument processing. (x, y, z) where right now doing TT conversions on y would throw an exception. Now we'd convert z before doing TT conversions.


2024-04-05
[23:18:47.0685] <annevk>
Yeah, that aspect would be observable with this change. I think if we had to preserve that I'd favor some kind of [VerifyArgument] annotation over attempting to change the type. So you'd have to write `[VerifyArgument] (TrustedHTML or DOMString) input` and `[VerifyArgument]` would take care of running some kind of callback based on the type of argument. Maybe that's a reasonable middle ground even that would also allow the more complicated cases to rely on IDL.

[23:19:32.0763] <annevk>
 * Yeah, that aspect would be observable with this change. I think if we had to preserve that I'd favor some kind of \[VerifyArgument\] annotation over attempting to change the type. So you'd have to write `[VerifyArgument] (TrustedHTML or DOMString) input` and `[VerifyArgument]` would take care of running the "verify/validate" algorithm based on the type of argument. Maybe that's a reasonable middle ground that would also allow the more complicated cases to rely on IDL.

[00:36:15.0386] <Ms2ger>
I'm not sure if running arbitrary validation code in the middle of IDL conversion excites me all that much. Is changing the order of operations a blocker?

[01:48:18.0429] <Luke Warlow>
We're already changing the ordering for some things (script element properties) so I don't think that's gonna be a blocker personally. It would be odd if people are relying on that ordering. And as we already use unions in some places its not consistently ordered already.

[01:59:58.0790] <dprz>
> <@ricea:matrix.org> Sorry, yes, Chrome's behaviour for non-special URLs is currently incorrect, but we're working on it. You can star this bug https://issues.chromium.org/issues/40063064 to be notified when there are updates.

thanks for confirming, and thank you for the work done on the Chrome project :)

[07:32:25.0876] <Domenic>
I think the question is do implementations want to code-gen in their bindings or write custom per-method C++.

If they want to code-gen in their bindings then I think it should be handled with an IDL extended attribute or type. I think this IDL construct should be very trusted types specific; I don't understand why we'd want something generic like [StringContext] or [VerifyArgument].

[07:58:11.0617] <Luke Warlow>
My two cents are that implementations already have to write custom c++ in a number of cases (I count at least 11 separate places), so it's probably not particularly worse to have to do it for the 19 or so new places. That being said it's ultimately up to WebKit, Gecko and Chromium projects to decide if they're comfortable with that.

[07:59:05.0878] <annevk>
Given what CEReactions does I don't think the timing has to depend on where it's solved. Although I guess there's an interesting question as to whether CEReactions or this goes first? Also the fact that there's a number of cases that are not solved through bindings makes me rather wary about having a complete special case for a subset.

[08:01:25.0069] <Luke Warlow>
> <@lwarlow:igalia.com> My two cents are that implementations already have to write custom c++ in a number of cases (I count at least 11 separate places), so it's probably not particularly worse to have to do it for the 19 or so new places. That being said it's ultimately up to WebKit, Gecko and Chromium projects to decide if they're comfortable with that.

Worth noting it's realistically actually more than 11 places that need custom c++ because of various of ways that TT integrate into browsers, e.g csp pre navigation checks, and the DOM attribute handling both have similar enforcement code.


[08:14:55.0949] <smaug>
Looks like the image around https://html.spec.whatwg.org/#attr-script-async isn't working too well in dark mode

[09:49:25.0303] <sideshowbarker>
jarhar: Can you remind me what setup you’re using with vim to get auto-completion when working on the Chromium sources?

[09:54:45.0846] <jarhar>
i dont use auto completion in vim. for browsing the code and figuring out what to write i just use source.chromium.org

[10:02:20.0640] <sideshowbarker>
ah OK (I vaguely recall now that’s what you’d already actually told me before…)

[10:14:52.0711] <annevk>
bakkot: I'm postponing merging Float16Array till Monday. Not feeling great and want to make sure it happens correctly.

[10:15:03.0587] <annevk>
 * bakkot: I'm postponing merging Float16Array into IDL/WPT till Monday. Not feeling great and want to make sure it happens correctly.

[10:15:33.0141] <bakkot>
√, no rush at all given that it's only barely implemented in one engine

[11:07:44.0067] <hacknorris>
okay, this might be offtopic but better here than nowhere. someone knows any cool tutorial for writing xsd schemas? i'm that dumb i don't understand even from w3schools…

[11:11:52.0952] <hacknorris>
like i wanted to make something like sitemap.xml but for "bookmarks" of sites people like (idk how it's named. webring? maybe…)

[12:05:11.0136] <hacknorris>
?

[12:05:20.0318] <hacknorris>
 * so any tutorial?

[13:33:18.0803] <hacknorris>
nvm. manually downloaded sitemap.xsd from origin and learning from there 😕

[15:19:34.0223] <TabAtkins>
> <@smaug:mozilla.org> Looks like the image around https://html.spec.whatwg.org/#attr-script-async isn't working too well in dark mode

https://github.com/whatwg/html/pull/10257

[15:19:40.0578] <TabAtkins>
annevk or Domenic ^^^

[15:21:09.0382] <smaug>
superb. Will there be a preview of that all?

[15:22:16.0056] <smaug>
ah, it is there now, I think

[15:24:28.0528] <smaug>
but looks like the new diagrams aren't there

[15:26:11.0097] <TabAtkins>
Yeah, I suspect it's still linking to the ones on whatwg.org, not the local files from the PR

[15:27:49.0648] <TabAtkins>
but if you drop in a `.render-shell img { background: none !important; }` into your inspector and look at the files-changed tab, you'll see the files against a dark background.

[15:29:27.0214] <TabAtkins>
you'll have to do it per-file, since they're in separate iframes, unfortuantely.

[15:29:49.0227] <TabAtkins>
oh, also need `.render-shell { color-scheme: dark; background: #222; }`

[15:30:01.0962] <TabAtkins>
then you can properly see the old image failing and the new one succeeding

