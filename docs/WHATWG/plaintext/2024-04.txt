2024-04-01
[18:39:33.0718] <Adam Rice>
Sorry, yes, Chrome's behaviour for non-special URLs is currently incorrect, but we're working on it. You can star this bug https://issues.chromium.org/issues/40063064 to be notified when there are updates.

[02:04:42.0027] <evilpie>
https://github.com/whatwg/url/issues/815

[02:39:38.0636] <sideshowbarker>
When trying to build the HTML spec in my macOS (Sonoma 14.4.1) environment, I was getting the following error:
>   = note: ld: library 'System' not found
>          clang: error: linker command failed with exit code 1 (use -v to see invocation)

To fix it I needed to do this:

> export LIBRARY_PATH="$LIBRARY_PATH:/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib"

I wonder if we should document this


2024-04-02
[02:39:41.0523] <zcorpan>
Looking for mathml content in httparchive but it's almost entirely this: https://github.com/facebook/react/blob/6e650109999e5f483fcb910ff20fe8148a566cb2/packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js#L3934 (cc bkardell )

[02:49:16.0391] <zcorpan>
https://chromestatus.com/metrics/feature/timeline/popularity/4403 might be better. Maybe mathml on the web usually isn't in markup but generated from script?

[04:15:42.0871] <annevk>
I really only know one website: https://golem.ph.utexas.edu/~distler/blog/

[04:16:17.0353] <annevk>
There used to be a website that collected all of them, but I don't remember that one

[05:44:46.0639] <bkardell>
> <@zcorpan:mozilla.org> Looking for mathml content in httparchive but it's almost entirely this: https://github.com/facebook/react/blob/6e650109999e5f483fcb910ff20fe8148a566cb2/packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js#L3934 (cc bkardell )

yeah not surprising since the http archive is mainly getting home pages and even sites dedicated to math and science don't usually put math on the home page :). There are sites like https://ar5iv.labs.arxiv.org/, for example..

[05:48:13.0531] <bkardell>
and wikipedia has many millions but currently (because of core interop issues - that's why we're here) still doesn't use it for rendering, only for a11y -- so like https://en.wikipedia.org/wiki/Mass%E2%80%93energy_equivalence has 30 mathml instances related to images of math - ick

[05:51:20.0669] <bkardell>
zcorpan: we have a few very rich sources - is there something you're trying to answer specifically that I can help with or just generally poking around?

[05:53:51.0827] <zcorpan>
bkardell: trying to get a sense of how much content uses `href` and on which elements

[05:56:18.0066] <bkardell>
> <@zcorpan:mozilla.org> bkardell: trying to get a sense of how much content uses `href` and on which elements

ah well you can see _some_ discussion in that issue (there are some related emails or issues with more on this same topic, but it's pretty generally aligned with this) https://github.com/w3c/mathml-core/issues/142#issuecomment-1082772082

[05:56:37.0224] <bkardell>
> in the full collection there, there are 30 <mrow with href as opposed 97549 <mi and 3226 <mn

[05:58:06.0090] <bkardell>
the thing is most of the corpuses are in XML toolchains that they are open to some transforms on - many things have been adapted for mathml-core already

[06:00:10.0306] <bkardell>
That's why I am saying if the group is like "we should prefer mrow because then links still work" I am like, well, only a tiny tiny fraction and the rest you have to transform anyways - let's just fix it properly

[06:03:51.0929] <zcorpan>
Right

[06:58:31.0946] <bkardell>
> <@zcorpan:mozilla.org> Right

 I do think the a11y tools might be a pretty compelling argument (many are already fine so we'd have to see how difficult the other two are I guess)  - I am just trying to make sure `<a>` gets a fair shot is all because i think it is clearly the best answer if possible...But I can also accept if it is not, it's not a hill I want to get seriously injured on

[08:00:30.0271] <bkardell>
zcorpan: do you have all you need or can I help you find more?

[08:01:54.0598] <zcorpan>
bkardell: a separate use counter for every mathml element in a document with an href attribute, maybe? :)

[08:02:33.0185] <zcorpan>
For now my conclusion is that href at all is very rare

[08:10:02.0157] <bkardell>
hmm, idk - in some sets it is not rare at all. In a few almost every token has an href, but in those cases that is to do a toolip about what it represents or something and would be better maybe as a popover :)

[08:12:48.0775] <bkardell>
but yeah I guess there are many many docs with no links too

[08:16:12.0339] <bkardell>
there are also potentially false positives depending on how you count.. like `document.querySelectorAll('math [href]').length` is too naieve because it will give you positives of links that are in foreign content inside the tokens (which is fine, it's just HTML), and also stuff inside `<annotation-xml>` which isn't displayed 

[08:17:10.0360] <zcorpan>
I looked at like 50 that match the chromium use counter and not one had `math [href]` on a presentation-math element. There was one with a href attribute inside `annotation-xml` but that was not a rendered element

[08:23:05.0110] <bkardell>
emilio: had some counters in moz, not sure if they are still there or if they're counting this, but you could check? I mean, he is the one that opened the issue we're all pointing at even - so it's possible :)

[15:36:15.0382] <Timo Tijhof>
I'm trying to preload requests for `<script type=module src=…>` via the HTTP Link header.

I'm aware of, and have read, the past discussions around why `rel=modulepreload` was introduced separately instead of within rel=preload. As I understand it, module requests are made with a different CORS setting, plus by signalling the module type this way, browsers can do additional optimizations (e.g. look for indirect imports and preload those as well, and honouring import maps).

I'm also aware that at this time, there is no way to apply an import map to preloaded resources, which is fine, since the server-side in my case knows the flat and full list of "real" requests that will be made.

All that having been said, I can't seem to find in the spec what rel=preload incantation will result in the preloaded result being used by `<script type=module>`.

In Chrome, if I use `Link: </static/foo.js>;rel=preload;as=script;crossorigin` it will correctly result in the later demand for `<script type=module src=foo.js>` using this request (I can tell by the timing, the initiator, the order, and there not being a duplicat req).

In Firefox, it doesn't and there's instead a duplicate request made later on.

[15:37:40.0186] <Timo Tijhof>
 * I'm trying to preload requests for `<script type=module src=…>` via the HTTP Link header.

I'm aware of, and have read, the past discussions around why `rel=modulepreload` was introduced separately instead of within rel=preload. As I understand it, module requests are made with a different CORS setting, plus by signalling the module type this way, browsers can do additional optimizations (e.g. look for indirect imports and preload those as well, and honouring import maps).

I'm also aware that at this time, there is no way to apply an import map to preloaded resources, which is fine, since the server-side in my case knows the flat and full list of "real" requests that will be made.

All that having been said, I can't seem to find in the spec what rel=preload incantation will result in the preloaded result being used by `<script type=module>`.

In Chrome, if I use `Link: </static/foo.js>;rel=preload;as=script;crossorigin` it will correctly satisfy the later demand for `<script type=module src=foo.js>` by re-using the preload response (I can tell by the timing, the initiator, the order, and there not being a duplicat req).

In Firefox, it doesn't and there's instead a duplicate request made later on.

[15:52:02.0171] <Timo Tijhof>
Hm.. so via [Bugzilla search](https://bugzilla.mozilla.org/buglist.cgi?product=Core&short_desc=preload%20crossorigin&classification=Components&query_format=advanced&short_desc_type=allwordssubstr) I'm finding a related change https://hg.mozilla.org/mozilla-central/rev/72570ac420f0, where I see in the diff context that Gecko apparently considers an (unspecified?) `type=module` attribute for `preload as=script` and discards those. This was done last year for https://bugzilla.mozilla.org/show_bug.cgi?id=1803744 which implemented support for the (also unspecified) ability for `rel=modulepreload` to be used in a Link header.. this despite the standard still saying at https://html.spec.whatwg.org/multipage/links.html#linkTypes:link-type-preload that `modulepreload` does not have "Link processing".

[15:57:43.0109] <Timo Tijhof>
While that sounds cool (and Firefox-only today, Chrome discards it with a console warning for invalid `rel=modulepreload` in HTTP), it's actually unusable for my use case because if I use `rel=preload` with foo.js?v=1, bar.js?v=1 and baz.js?v=1. It ends up doing its recursive logic on each of them, and attempts to preload the unversioned URLs of the discovered dependencies (since the import map isn't known at this time).

[15:58:27.0228] <Timo Tijhof>
 * While that sounds cool (and Firefox-only today, Chrome discards it with a console warning for invalid `rel=modulepreload` in HTTP), it's actually unusable for my use case because if I use `rel=modulepreload` in Firefox for all (or even one) of foo.js?v=1, bar.js?v=1 and baz.js?v=1. It ends up doing its recursive logic, and attempt to preload the unversioned dependency URLs of the discovered imports (since the import map isn't known at this time).


2024-04-03
[18:18:06.0193] <Timo Tijhof>
> <@timotijhof:matrix.org> I'm trying to preload requests for `<script type=module src=…>` via the HTTP Link header.
> 
> I'm aware of, and have read, the past discussions around why `rel=modulepreload` was introduced separately instead of within rel=preload. As I understand it, module requests are made with a different CORS setting, plus by signalling the module type this way, browsers can do additional optimizations (e.g. look for indirect imports and preload those as well, and honouring import maps).
> 
> I'm also aware that at this time, there is no way to apply an import map to preloaded resources, which is fine, since the server-side in my case knows the flat and full list of "real" requests that will be made.
> 
> All that having been said, I can't seem to find in the spec what rel=preload incantation will result in the preloaded result being used by `<script type=module>`.
> 
> In Chrome, if I use `Link: </static/foo.js>;rel=preload;as=script;crossorigin` it will correctly satisfy the later demand for `<script type=module src=foo.js>` by re-using the preload response (I can tell by the timing, the initiator, the order, and there not being a duplicat req).
> 
> In Firefox, it doesn't and there's instead a duplicate request made later on.

I've comment at https://github.com/whatwg/html/issues/7854#issuecomment-2033368873 instead. Hoping I've missed something and that there is at least a way to do these "manually".

[22:21:02.0830] <annevk>
Timo Tijhof: we were just discussing this case earlier in this channel; however, with the `crossorigin` attribute set it should in theory match up. Thinking about it again there's another thing however that set module scripts apart and maybe that's why Gecko doesn't reuse the cache. And that would make sense. Module scripts parse differently and so if you eagerly parse and don't store the original text you couldn't reuse the script as both classic and module script.

[22:23:14.0448] <Domenic>
It felt like that thread had several good implementation bugs that should be filed. Although I can understand that discriminating between impl bugs vs impls following the spec could take some work.

[22:23:18.0335] <annevk>
I guess that makes me lean towards only endorsing `modulepreload` for this, but I see you also need import maps at that level for that to be an okay solution. It's a bit unclear whether that should be prioritized or we should try to make `rel=preload type=module` be a thing as some kind of inbetweeny solution as well.

[22:25:24.0709] <annevk>
Domenic: I only saw this Chrome/Firefox mismatch and if anything that's probably a specification bug for suggesting `rel=preload as=script` works for `type=module`. At least I'm quite convinced now that shouldn't work as it would rule out pre-parsing.

[22:27:27.0818] <Domenic>
Firefox downloading bare imports seems bad. Safari not using module map to dedupe requests seems bad. Chrome downloading bare imports seems bad.

[22:28:58.0379] <Domenic>
rel=preload as=script crossorigin seems like it should not work, although it might populate the HTTP cache. Maybe Chrome has some general request deduping happening; I suspect that's not a module specific problem. "Memory cache"??

[22:30:23.0518] <Domenic>
That said I'm not sure the description is accurate since it includes the <script>. Some of the things Timo Tijhof ascribes to preload/modulepreload are almost certainly due to the <script>

[22:31:30.0809] <Domenic>
Safari behavior also looks so strange that I wonder if it's a DevTools issue.

[23:50:58.0406] <annevk>
Oh, I guess I should have read the Observations section more carefully.

[23:56:48.0446] <Domenic>
 * That said I'm not sure the description is accurate since it includes the `<script>`. Some of the things \<a href="https://matrix.to/#/@timotijhof:matrix.org">Timo Tijhof\</a> ascribes to preload/modulepreload are almost certainly due to the `<script>`

[00:41:27.0098] <zcorpan>
Oooh another browser engine https://github.com/Wuelle/Stormlicht

[05:08:09.0164] <annevk>
PSA: Now would be good time to do a thorough review of https://github.com/WICG/sanitizer-api if that kind of API interests you. We're trying to settle the remaining details so if there's anything you don't like please raise it.

[08:30:24.0988] <bkardell>
annevk: 
> We discussed and agreed we should do what @zcorpan said above for MathML.

Just curious where was that discussion?

[08:38:28.0252] <annevk>
bkardell: Sanitizer API meeting

[08:41:15.0125] <bkardell>
what is the meeting organized under? Igalia is interetest in the Sanitizer API but we weren't aware of the meeting

[08:41:23.0691] <bkardell>
 * what is the meeting organized under? Igalia is interetest in the Sanitizer API but we weren't aware of the meeting annevk 

[08:42:28.0089] <bkardell>
 * what is the meeting organized under? Igalia is interetested in the Sanitizer API but we weren't aware of the meeting annevk

[08:43:27.0713] <bkardell>
we'd like to attend future meetings, and obviously would have liked to have been at that one given the whole mathml thing :)

[08:43:55.0826] <annevk>
freddy: ^^

[08:56:32.0342] <bkardell>
for the record, we're not unhappy with that decision or anything - we just would like to be involved and have interests

[09:17:09.0319] <freddy>
Oh yeah, happy to send invites. Which timezone do you have folks? We're currently very EMEA friendly ;-)

[09:35:31.0735] <Luke Warlow>
> <@fbraun:mozilla.org> Oh yeah, happy to send invites. Which timezone do you have folks? We're currently very EMEA friendly ;-)

Off the top of my head it'd probably be me and Brian most interested, I'm on BST (Europe) so EMEA is perfect for me.

