2021-09-01
[00:30:20.0904] <sideshowbarker>
https://github.com/mdn/content/issues/8515 could just some quick help. Basically just needs a comment in response to the OP‚Äôs question. Should only take ~10 minutes.

[10:17:40.0459] <annevk>
Domenic: thoughts on where we should put a Security/Privacy section? First no-num section? Also, in DOM, should the Historical section become a no-num section? See https://github.com/whatwg/dom/issues/1013 for context. (I'm out now, but I figured I'd leave this here and maybe address it tomorrow. Thoughts from others welcome as well of course.)

[10:19:52.0634] <Domenic>
annevk: no real opinion, besides that it seems a bit weird that W3C process/groups is influencing our editorial style. I guess I would lean toward leaving it numbered since it is not shared boilerplate that all specs are expected to have? Or is it?

[10:25:23.0114] <annevk>
Domenic: I guess it kinda is shared, in the sense that a reviewer can access the impact, but the contents would be specific to the document. I'm not quite sure how I feel about it yet and I'm not really volunteering on adding the complicated sections, e.g., to HTML.

[10:48:30.0726] <Domenic>
Yeah this seems like a "PR welcome" situation at the most.

[10:55:08.0150] <Eric Portis (he/him)>
Step 4.7. here https://html.spec.whatwg.org/multipage/images.html#updating-the-source-set says: 

"Parse child's sizes attribute with the fallback width _width_, and let source set's source size be the returned value."

I don't see _width_ defined anywhere, or fallback width used anywhere in the "Parse a sizes attribute" algorithm.

Ten bucks says I'm just missing something, though. cc: zcorpan 


2021-09-02
[18:55:07.0372] <sideshowbarker>
yipes *‚ÄúNo server is currently available to service your request.‚Äù* from GitHub

[18:55:15.0209] <sideshowbarker>
never seen that one before

[19:02:31.0675] <sideshowbarker>
big AWS failure affecting many sites maybe?

[19:04:01.0387] <sideshowbarker>
ah, maybe just Japan

[01:36:53.0384] <annevk>
foolip: you around? Does https://github.com/whatwg/sg/pull/160#pullrequestreview-744777669 seem reasonable?

[01:48:14.0847] <sideshowbarker>
hsivonen: reviewing and testing and merging the ambiguous-ampersand patch took me a bit longer than I had anticipated, but with it landed now, I‚Äôm super glad ‚Äî no more need for a separate branch of the parser for the HTML checker, and now we have CI working (so we can catch regressions later, etc.)

[01:50:01.0763] <hsivonen>
> <@sideshowbarker:mozilla.org> hsivonen: reviewing and testing and merging the ambiguous-ampersand patch took me a bit longer than I had anticipated, but with it landed now, I‚Äôm super glad ‚Äî no more need for a separate branch of the parser for the HTML checker, and now we have CI working (so we can catch regressions later, etc.)

Thanks!

[01:50:45.0882] <sideshowbarker>
hsivonen: thank you for making that code a lot nicer :)

[01:51:31.0970] <annevk>
jgraham: for Test Utils, the Workstream is now approved. https://github.com/whatwg/meta/blob/main/NEW-STANDARD.md has a checklist. Is there an existing repo that will be moved or do you need a new one? When do you want to work on this?

[01:56:14.0234] <sideshowbarker>
hsivonen: the only remaining big thing about making the standalone Java version of parser spec-conforming is the encoding stuff ‚Äî¬†as discussed in https://github.com/validator/htmlparser/pull/48. As mentioned at https://github.com/validator/htmlparser/pull/48#issuecomment-691654072 I‚Äôd thought that could be addressed by merging in the changes from the `encodings` branch. But since that branch is now gone, I guess the changes there were never intended to end being released anyway?

[01:57:23.0620] <hsivonen>
The encoding stuff was _intenteded_ to be released, but when it became clear it wasn't progressing to a releaseable state, I stashed it away.

[01:57:31.0459] <sideshowbarker>
OK

[01:57:47.0269] <hsivonen>
 * The encoding stuff was _intented_ to be released, but when it became clear it wasn't progressing to a releaseable state, I stashed it away.

[01:57:57.0594] <hsivonen>
 * The encoding stuff was _intended_ to be released, but when it became clear it wasn't progressing to a releaseable state, I stashed it away.

[01:59:05.0366] <sideshowbarker>
well since without those encoding changes the Java parser doesn‚Äôt pass the html5lib encoding tests, I can‚Äôt recall now how I made CI pass without them. I assume I must just somehow have it skipping those tests.

[01:59:32.0897] <hsivonen>
The html5lib tests just test the labels and not the encoding tables, right?

[01:59:46.0770] <hsivonen>
You did land spec-compliant labels, IIRC.

[02:00:09.0836] <sideshowbarker>
OK maybe I just need to quit fretting about it

[02:01:59.0566] <sideshowbarker>
I just vaguely recall that we still have some significant failures when running some of the html5lib encoding tests ‚Äî maybe some that we have to flip on some non-default things to actually enable testing for, I dunno

[02:02:12.0163] <sideshowbarker>
I guess should just go back and look at my code and see

[02:04:40.0414] <sideshowbarker>
ideally it would just seem nice to be able to assert ‚Äúthis is a fully spec-conforming parser‚Äù with confidence ‚Äî and document it with passing tests

[02:05:10.0195] <sideshowbarker>
but the existence of https://github.com/validator/htmlparser/pull/48 makes me think we can‚Äôt actually do that yet

[02:06:47.0331] <sideshowbarker>
(all the encoding stuff really bewilders me ‚Äî even after I were to look back at the code, I think it would take me quite a bit of time to get back again to whatever marginal understanding of it I managed to arrive at when I‚Äôd hacked on it previously)

[02:08:22.0240] <sideshowbarker>
anyway, hsivonen and annevk in other news: I remember previously being subscribed to a Mozilla mailing list where, when there was some W3C spec transition or charter out for AC review, dbaron would post FYI messages asking if anybody wanted to send comments or objections as part of the review

[02:09:25.0237] <sideshowbarker>
but I either no longer seem to be on that list ‚Äî or else no such FYI-about-AC-review messages are going out any longer to whatever list that is

[02:09:56.0399] <hsivonen>
The list is dev-platform. Not sure if Tantek has systematically posted such messages or not.

[02:10:42.0811] <sideshowbarker>
ah OK thanks ‚Äî I‚Äôm pretty sure I‚Äôm still subscribed to dev-platform and getting messages from it

[02:11:51.0415] <hsivonen>
(encoding_rs has some nice properties that logically make it nicely compilable to efficient Java byte code. Sadly, related tools are too general instead of being customized to those nice properties.)

[02:12:29.0759] <hsivonen>
(The nice properties being: Reading and writing from caller-provided arrays, static read-only arrays and otherwise allocating only on the stack.)

[02:14:36.0269] <sideshowbarker>
wow well I would really love to have a good reason to work on Rust sources for a change, rather than doing all in Java

[02:15:47.0267] <hsivonen>
I think the the approach that wouldn't involve the yak shave of a custom compiler would be compiling to asm.js and then cleaning that up manually as Java as a one-time operation.

[02:16:04.0097] <hsivonen>
Still might be easier to write Java manually from the spec.

[02:16:53.0015] <hsivonen>
The main problem with compiling to wasm and then converting wasm to Java byte code is the loss of Java `char` arrays as Rust `u16` arrays.

[02:18:10.0173] <hsivonen>
Or, rather, Rust `u16` slices.

[02:19:42.0546] <jgraham>
annevk: https://github.com/jgraham/browser-test/ is the existing repo

[02:20:54.0097] <jgraham>
I strongly advise against getting me to make an icon :)

[02:31:57.0809] <annevk>
jgraham: it's the best part :-)

[02:50:55.0731] <jgraham>
Many years ago I had a simple Firefox extension and I got some feedback asking for a toolbar button. Afterwards I got feedback complaining I'd let a toddler design the icon.

[04:24:00.0845] <Ms2ger üíâüíâ>
Did you?

[05:25:00.0131] <jgraham>
Yes?

[05:27:06.0253] <jgraham>
Dunno how one would find it now given it previously probably worked with Firefox 3 or something

[06:02:54.0101] <annevk>
Domenic: so when I run make deploy I get a .spec.whatwg.org directory rather than a SHORTNAME.spec.whatwg.org directory and I don't really understand why

[06:03:23.0076] <annevk>
Domenic: maybe it's a macOS thing that sed -n 's#.*/\([^.]*\)\(\.git\)\?#\1#p' ends up returning the empty string for the given input

[06:03:34.0036] <annevk>
/me vaguely recalls some issues with macOS and sed

[06:03:47.0663] <Andreu Botella (he/they)>
I get the right directory name on Linux, if that's worth for anything

[06:04:38.0832] <annevk>
Thanks, I guess that means I ought to look into it being a macOS thing and perhaps copy-and-paste something from the previous solution

[06:11:18.0710] <freddy>
maybe there are different `sed`s and you can install gnu-sed?

[06:13:27.0355] <annevk>
I'd rather not require that for these kind of scripts, although in practice I wonder how many people end up running make deploy or equivalent

[06:56:37.0950] <stephanluis>
Hi everyone!

[07:03:06.0671] <stephanluis>
Was wondering the history behind a html5 tag <input type='duration'> for periods of time which don't require time localisation.  For example if I build a countdown clock that allows users to input a start time, HTML5 has no input type that will have the great functionality of the input-time but not be affected by local time formatting.  The situation seems odd, why is there not a control to input hours, minutes, seconds and milliseconds especially since these units are used around the world?

[07:05:44.0764] <Domenic>
> <@annevk:mozilla.org> I'd rather not require that for these kind of scripts, although in practice I wonder how many people end up running make deploy or equivalent

Yeah, fixing it to work on Macs would probably be worthwhile.

[07:08:16.0543] <jgraham>
> <@ms2ger:igalia.com> Did you?

Oh, I just reparsed this. I let someone whose graphic design skills hadn't improved noticably since being a toddler (i.e. me) create it.

[07:17:21.0653] <Ms2ger üíâüíâ>
hs-ivonen taught me reparsing is bad

[07:27:18.0024] <jgraham>
If you don't think humans are full of security vunerabilities, I have some horse drugs to sell you :)

[07:52:59.0106] <annevk>
Andreu Botella (he/they): Domenic: does `git config --local remote.origin.url | sed 's/.*\///' | sed 's/.git//'` work for you?

[07:54:07.0906] <Domenic>
Yes

[08:03:07.0053] <Andreu Botella (he/they)>
Same here

[08:16:52.0523] <annevk>
Thanks, I'll send a PR

[08:23:57.0481] <annevk>
stephanluis: in theory you can control localization through the `lang` attribute, but I'm aware of implementations

[08:32:37.0714] <stephanluis>
Yes, I've looked into that and it's too unreliable.  Additionally my specific implementation is a JS plugin, so don't want to update the language for the user's page.  Why isn't a duration type input part of the spec?  It seems universally useful.   

[08:34:25.0831] <annevk>
I'm somewhat surprised by the renewed relevance of the The Unpaired Surrogates and Lone Surrogates band names. Maybe it's time to start playing an instrument.

[08:36:19.0686] <annevk>
stephanluis: I don't recall. Perhaps it was discussed, but you'd have to go back pretty far in the archives. Most of the "new" input types were added in 2006 if I remember correctly.

[08:36:55.0433] <annevk>
https://lists.w3.org/Archives/Public/public-whatwg-archive/ / https://lists.whatwg.org/pipermail/whatwg-whatwg.org/

[08:37:35.0008] <stephanluis>
Wow!  And the process for amending the spec to include a new input type?

[08:37:59.0872] <annevk>
Oh, no, they were added in 2004 in Web Forms 2.0 (private draft end of 2003 I think), implemented in 2006 by Opera.

[08:38:18.0696] <annevk>
stephanluis: https://whatwg.org/working-mode#changes and https://whatwg.org/faq#adding-new-features

[08:39:38.0355] <stephanluis>
If I were to look back through the archive what reasons for not including duration would preclude it from being later accepted?

[08:52:43.0822] <stephanluis>
This duration input is such a generic idea it's hard to imagine why it's not an exposable base class to input time?   

[08:56:49.0635] <stephanluis>
... in most browser implementations.

[09:08:23.0752] <annevk>
I think at this point it would probably be judged based on need, amount of workarounds people deploy for it, etc. You might also want to look at the Open UI effort to see if they are tackling it.

[09:08:46.0219] <annevk>
The archives could be useful for understanding why it didn't happen back then, if it was even suggested.

[09:13:08.0352] <stephanluis>
are these the people https://open-ui.org/ ? 

[09:18:40.0947] <annevk>
Yeah, that looks correct

[09:20:42.0866] <stephanluis>
To me it's weird, but not many people seem to think they require this control but seem put up with converting from strings or multiple text boxes to separate units.  To me it seems like a glaring omission.  Writing a polyfill doesn't seem to be the correct approach?  What would you recommend?   

[09:22:00.0693] <stephanluis>
(I'll be away from my console for a couple hours, can resume the conversation later.)  Thanks for your guidance !

[16:27:10.0389] <sideshowbarker>
Domenic: about the sed thing, I think the `/p` flag is GNUism ‚Äî not in BSD sed

[16:27:55.0447] <sideshowbarker>
I‚Äôm not sure what the equivalent is is non-GNU sed for the combination of `-n` and the `/p` flag

[16:28:04.0979] <sideshowbarker>
 * I‚Äôm not sure what the equivalent is in non-GNU sed for the combination of `-n` and the `/p` flag

[16:30:08.0107] <sideshowbarker>
ah at https://chat.mozilla.org/#/room/#whatwg:matrix.org/$97SLXIeKZsBedPUx7a5hXmEijTqd_X1biuokaS6yxdo I see that Anne already came up with a fix

[16:33:27.0820] <sideshowbarker>
 * ah at https://matrixlogs.bakkot.com/WHATWG/2021-09-02#L54 I see that Anne already came up with a fix


2021-09-03
[19:36:56.0259] <sideshowbarker>
annevk: https://twitter.com/jub0bs/status/1432025056234835980

[23:00:15.0807] <freddy>
that's what we call a "simple request" though, isn't it? Also looking at https://twitter.com/bcrypt/status/1422243807328804882 and responses in the thread (e.g., https://twitter.com/shhnjk/status/1423013294860767237)

[23:28:07.0565] <sideshowbarker>
freddy: yeah I know;
* per-spec it‚Äôs a simple request since the ‚Äúessence‚Äù of the Content-Type header is `text/plain`, and
* any server that‚Äôs treating a request body with `text/plain; application/json` as JSON has broken content-type handling that should be fixed
‚Ä¶but I think in practice there are many servers that have broken content-type handling for JSON

[23:28:16.0510] <sideshowbarker>
 * freddy: yeah I know;
- per-spec it‚Äôs a simple request since the ‚Äúessence‚Äù of the Content-Type header is `text/plain`, and
- any server that‚Äôs treating a request body with `text/plain; application/json` as JSON has broken content-type handling that should be fixed

‚Ä¶but I think in practice there are many servers that have broken content-type handling for JSON

[23:30:44.0840] <annevk>
sideshowbarker: that's been known for ages I think, there's an open issue against the specification about it

[23:31:50.0747] <sideshowbarker>
ah OK

[23:32:19.0075] <sideshowbarker>
well I guess a similar real-world case is maybe https://stackoverflow.com/a/45752919/441757

[23:33:01.0278] <annevk>
sideshowbarker: text/plain; application/json isn't actually the evil example, https://github.com/whatwg/fetch/issues/838 has the worse attacks

[23:33:13.0238] <sideshowbarker>
/me looks

[23:33:42.0171] <sideshowbarker>
aha

[23:33:57.0453] <annevk>
The only complete solution here would be for the browser to take ownership of setting Content-Type, but I think that ends up breaking things, but it could be tried again I suppose

[23:35:27.0782] <annevk>
stephanluis: writing a polyfill or library and making it popular is often the first step toward something becoming part of the platform. This doesn't work for all features, but it would work for a duration input box.

[23:36:29.0941] <sideshowbarker>
> <@annevk:mozilla.org> The only complete solution here would be for the browser to take ownership of setting Content-Type, but I think that ends up breaking things, but it could be tried again I suppose

Well, short of that, would another solution be, just for the case of JSON request bodies, for the browser to refuse to allow the Content-Type request header to be set to a non-JSON media type?

[23:37:48.0324] <sideshowbarker>
‚Ä¶like CORB but from the client side ‚Äî for requests rather than responses

[23:38:08.0602] <annevk>
sideshowbarker: we cannot tell the type of a body

[23:38:15.0471] <sideshowbarker>
ah OK

[23:39:10.0996] <annevk>
I guess we could try to parse all bodies to see if they are JSON, but I'm pretty sure rejecting those would break the web at this point

[23:39:49.0979] <sideshowbarker>
yeah, parsing the bodies is what I had in mind, and yeah I think it would definitely break a lot people‚Äôs stuff

[23:40:41.0510] <sideshowbarker>
e.g., it would break requests to the Slack API from frontend code, as in that https://stackoverflow.com/a/45752919/441757 case

[23:43:40.0368] <sideshowbarker>
anyway, I‚Äôm not on Twitter so I can‚Äôt reply myself to that https://twitter.com/jub0bs/status/1432025056234835980 tweet. But if somebody cares to take the time, might be worthwhile to reply to that tweet with a link to https://github.com/whatwg/fetch/issues/838

[01:22:37.0568] <freddy>
annevk:  in a URL, how would you call a hostname that does not contain any dots? bare hostname? non-dotted hostname? I was looking for "prior" art in our UriFixup files and the whatwg url spec, but found none.

[01:27:45.0978] <annevk>
freddy: maybe a single-label domain, but we don't have solid terminology at that level

[01:28:17.0307] <annevk>
freddy: and I'm also not sure if people would consider `x.` a two-label domain; probably more a single-label-domain-with-trailing-dot

[01:29:21.0313] <annevk>
sideshowbarker: btw, I ended up not replying as they mostly figured it out themselves and person posting had it from 2018 research; can't 386 them all

[01:29:33.0538] <annevk>
 * sideshowbarker: btw, I ended up not replying as they mostly figured it out themselves and the person posting had it from 2018 research; can't 386 them all

[01:46:34.0650] <sideshowbarker>
ah OK

[01:55:45.0808] <freddy>
annevk: Thanks :)

[02:19:42.0508] <stephanluis>
 * > stephanluis: writing a polyfill or library and making it popular is often the first step toward something becoming part of the platform. This doesn't work for all features, but it would work for a duration input box.


[02:24:28.0302] <stephanluis>
> stephanluis: writing a polyfill or library and making it popular is often the first step toward something becoming part of the platform. This doesn't work for all features, but it would work for a duration input box.

annevk: So what's the best way to structure the polyfill?  I'd like to keep all the functionality of the time input, but make all browsers use a 24h clock so that can be used as a twenty-four hour duration input.  Phase 2

[02:27:02.0098] <stephanluis>
 * > stephanluis: writing a polyfill or library and making it popular is often the first step toward something becoming part of the platform. This doesn't work for all features, but it would work for a duration input box.

annevk: So what's the best way to structure the polyfill?  I'd like to keep all the functionality of the time input, but make all browsers use a 24h clock so that can be used as a twenty-four hour duration input.  'Phase 2' would be deciding how to represent days and that would be to either expand hours beyond 24 or have days:hours:min:sec.microsec .  I think 24 hour days are universal!!??

[02:28:29.0702] <stephanluis>
annevk:  how do you recommend commandeering the time input? or do you think I should use another strategy? 

[02:54:53.0952] <annevk>
stephanluis: not sure, if I were to work on this I'd probably look at existing libraries to get some inspiration

[02:56:46.0447] <dbaron>
(I think my IRC client is telling me someone mentioned me in this channel, but it's not up to usefully telling me how many pages up that mention is...)

[02:57:33.0529] <dbaron>
 * (I think my client is telling me someone mentioned me in this channel, but it's not up to usefully telling me how many pages up that mention is...)

[02:57:45.0013] <Ms2ger üíâüíâ>
If you use the web client, there's a bell icon in the top right corner

[02:57:55.0609] <sideshowbarker>
dbaron: that was me, I think ‚Äî at https://matrixlogs.bakkot.com/WHATWG/2021-09-02#L23

[02:58:06.0160] <dbaron>
Ms2ger üíâüíâ: yeah, I clicked that but it takes me to the wrong place, as usual

[02:58:08.0215] <stephanluis>
annevk: I have, they're pretty dismal I think this is the best https://nadchif.github.io/html-duration-picker.js/ ... the control requires additional buttons and looses the most of the key functions present for time input.  So haven't looked at the source.

[03:02:30.0420] <stephanluis>
https://dan503.github.io/time-input-polyfill/ initially looked more promising, but ran into problems with that too.  Can't remember exactly what it was, looked at it a while ago.   

[03:04:27.0978] <stephanluis>
I think the problem was that it the polyfill didn't take milliseconds. 

[03:07:23.0030] <stephanluis>
 * I think the problem was that it the polyfill didn't handle milliseconds. 

[03:24:49.0270] <stephanluis>
Having had another look at the Time Input Polyfill I may be able to start with that.  Will keep you updated.  Still feel that duration input should probably be in the standard as it's the 'universal'/ not region or language dependant  part of a time input !

[10:28:53.0738] <sideshowbarker>
TabAtkins: about https://github.com/tabatkins/bikeshed/pull/2094 is there something more I should do there before we can move forward with what you outlined in https://github.com/tabatkins/bikeshed/pull/2094#issuecomment-873145774 ?

[10:38:29.0506] <TabAtkins>
sideshowbarker: No, with those changes I'd be happy to accept the PR.

[10:39:13.0902] <sideshowbarker>
oh, then I guess I‚Äôm not clear on how to actually make those changes

[10:41:16.0945] <sideshowbarker>
I‚Äôll need to go back and look at it

[10:43:19.0075] <sideshowbarker>
e.g., for *‚ÄúFormalize domintro sections a little bit more, ensuring they're fit for this purpose‚Äù* I wasn‚Äôt sure if that concretely amounted just to *‚ÄúRequire an ID on them, and visibly expose that anchor like we do for headings and such, so it's easy to spot what should be linked to‚Äù*, or if there was something more than just that which you had in mind

[15:29:22.0539] <DerekNonGeneric>
sideshowbarker: is `#css` on `irc.w3.org` still a thing or has that channel been bridged to somewhere else? (have some questions about how CSS modules being imported to JS should behave)

[15:34:42.0902] <DerekNonGeneric>
/cc maybe TabAtkins where do my CSS questions go? üòÑ

[15:35:23.0099] <TabAtkins>
The W3C still operates its chat rooms, feel free to ask there

[15:35:48.0349] <TabAtkins>
sideshowbarker: Nope, that's what I meant. ^_^

[15:37:50.0493] <DerekNonGeneric>
cool, my question is there -- hope it doesn't seem obnoxious, but aside from MIME types, not sure what else JS is expected to do w/ an imported CSS file

[15:41:09.0026] <DerekNonGeneric>
(even JS has no idea about MIME types, but what should be asserted is confusing me)

[16:24:50.0649] <GPHemsley>
are there any Edge developers in here?


2021-09-04
[17:11:45.0936] <sideshowbarker>
> <@dereknongeneric:mozilla.org> sideshowbarker: is `#css` on `irc.w3.org` still a thing or has that channel been bridged to somewhere else? (have some questions about how CSS modules being imported to JS should behave)

#_w3c_#css:matrix.org should work (Matrix bridge to #css on irc.w3.org) ‚Äî¬†but Element seems to have some problem with actually exposing it

[17:12:07.0632] <sideshowbarker>
> <@dereknongeneric:mozilla.org> sideshowbarker: is `#css` on `irc.w3.org` still a thing or has that channel been bridged to somewhere else? (have some questions about how CSS modules being imported to JS should behave)

 * `#_w3c_#css:matrix.org` should work (Matrix bridge to #css on irc.w3.org) ‚Äî¬†but Element seems to have some problem with actually exposing it

[17:14:39.0381] <sideshowbarker>
 * `#_w3c_#css:matrix.org` should work (Matrix bridge to #css on irc.w3.org) ‚Äî¬†but Element seems to have some problem with actually exposing it.
Looking at the #css channel in my IRC client, I can see that Matrix did actually let me join it. But for some reason Element just doesn‚Äôt load as a room.

[18:33:12.0690] <DerekNonGeneric>
connecting to it from my IRC client seems legit lol

[18:35:14.0352] <DerekNonGeneric>
so far all the Matrix clients (except the Element web app seem too far behind on the whole Spaces concept to be worth the bother for me)

[18:50:55.0266] <sideshowbarker>
https://matrix.to/#/!XSiAkrIbWRxITaanYw:matrix.org

[18:55:13.0729] <DerekNonGeneric>
oof, no preview üòÖ (not joining that lol)

[18:55:48.0240] <DerekNonGeneric>
might have set up the room wrong üôÉ


2021-09-05

2021-09-06
[23:50:01.0626] <annevk>
CSS module scripts are standardized in HTML, not in CSS. The idea is that you can append whatever you imported to a style sheet set. For instance, a style sheet set belonging to a shadow root.

[00:45:09.0538] <hsivonen>
Ambiguous ampersand made it to Nightly. üéâ Thanks sideshowbarker !

[01:14:49.0368] <sideshowbarker>
> <@hsivonen:mozilla.org> Ambiguous ampersand made it to Nightly. üéâ Thanks sideshowbarker !

Excellent ‚Äî laissez les bons temps rouler

[03:17:22.0325] <stephanluis>
annevk: Ok. already back with the first example of where javascript will not be sufficient for modifying the time input to become a duration input.  The hurdle is that Safari adds AM or PM and converts to a 12hr clock.  While the 12hr conversion is straightforward to deal with -- for a timer up to 12 hours, removing the AM/PM with css updates is unreliable as this seems the only way to approach it  ::-webkit-datetime-edit-ampm-field { display: none;}  .  AM/PM is still displaying in my tests. I'm doubting that js/css can be used for a duration input polyfill .

[03:18:04.0558] <stephanluis>
 * annevk: Ok. already back with the first example of where javascript is not sufficient for modifying the time input into a duration input.  The hurdle is that Safari adds AM or PM and converts to a 12hr clock.  While the 12hr conversion is straightforward to deal with -- for a timer up to 12 hours, removing the AM/PM with css updates is unreliable as this seems the only way to approach it  ::-webkit-datetime-edit-ampm-field { display: none;}  .  AM/PM is still displaying in my tests. I'm doubting that js/css can be used for a duration input polyfill .

[03:20:44.0075] <annevk>
stephanluis: a quick search yields https://nadchif.github.io/html-duration-picker.js/

[03:21:39.0992] <stephanluis>
I've looked at that it doesn't maintain the time input functionality, on the demo you can see additional buttons are required.

[03:27:17.0220] <annevk>
You could remove those presumably. And what input type=time is largely depends on implementations. Anyway, I recommend reaching out to Open UI or some such. I don't think I can help.

[03:32:40.0065] <stephanluis>
But that's the problem, time input is based on browser implementations because there are so many international formats for time.  The standard needs (is missing) is straightforward hours minutes, seconds -- with decimals -- control that browsers implement for the universal part of time. 

[03:41:43.0214] <stephanluis>
annevk: and there doesn't seem to be a 'follow the usual path' of writing a polyfill to demonstrate the need because browsers have such 'in baked' and diverse implementations.

[04:00:12.0197] <stephanluis>
annevk: I hope WHATWG sees the need to do something.  Let me know if I can help in any way.  Thanks.

[04:29:50.0651] <annevk>
 * You could remove those presumably. And what input type=time is largely depends on implementations. Anyway, I recommend reaching out to Open UI. I don't think I can help.


2021-09-07
[13:41:31.0701] <Luca Casonato>
wanderview: Am I correct in the assumption that `URLPattern.compareComponent` will not be part of the shipping of URLPattern in Chrome 95?

[13:41:39.0567] <Luca Casonato>
 * wanderview: Am I correct in the assumption that `URLPattern.compareComponent` will not be part of the shipping of URLPattern in Chrome 95?

[13:41:54.0308] <wanderview>
correct

[13:42:05.0509] <wanderview>
its behind a separate flag

[13:43:31.0202] <Luca Casonato>
cool cool - i'll wait with implementing it in Deno until the discussion has settled then.

[13:43:51.0655] <wanderview>
Luca Casonato: btw, thanks for all the work you and crowlKats have put into fixing spec mistakes!

[13:44:03.0418] <Luca Casonato>
has been great fun to implement URLPattern so far by the way - spec is very well written and easy to follow üëçÔ∏è

[13:44:05.0464] <wanderview>
sorry there are so many

[13:44:16.0572] <Luca Casonato>
oh no worries - its a large spec, so makes total sense

[13:44:33.0557] <wanderview>
thanks!  all readability due to Domenic's review

[13:45:03.0347] <Luca Casonato>
https://github.com/denoland/rust-urlpattern <- we have a fully spec compliant implementation here now (not chromium compliant yet though üòâ)

[13:45:23.0270] <Luca Casonato>
were planning to ship it flagged in a week and a half

[13:45:33.0833] <Luca Casonato>
and then stabilize around the time 95 goes beta

[13:46:13.0876] <wanderview>
wow, awesome!

[13:47:10.0010] <wanderview>
fwiw, mozilla was asking if there were other implementations on their standards-position repo... I mentioned your work, but didn't know the status: https://github.com/mozilla/standards-positions/issues/566

[13:48:27.0798] <Luca Casonato>
it's written in Rust, so mozilla could probably just pull it in for their implementation. i'd be happy to collaborate on that front. i'll leave a comment on the standards position issue.

[16:10:07.0753] <TabAtkins>
annevk: Could I get an eye on <https://drafts.csswg.org/css-cascade-4/#fetch-an-import> at some point? I'm trying to define @import on top of Fetch, but there's very little guidance, so I'm mostly just copypasting/tweaking text I'm finding in HTML and hoping I'm doing things correctly.

[16:37:10.0686] <Andreu Botella (he/they)>
So I'm not an expert on fetch by any means, but there's a few things that stand out to me

[16:37:58.0382] <Andreu Botella (he/they)>
1. If the original stylesheet was linked to with `<link crossorigin>`, you'd presumably want imports to use mode `"cors"` and credentials mode `"same-origin"`, right?

[16:39:02.0721] <Andreu Botella (he/they)>
2. Unless you explicitly set the request's synchronous mode, fetch will not block, so you don't want to run it in parallel.

[16:40:05.0626] <Andreu Botella (he/they)>
Instead of that, you should set one or more of the optional algorithms that are passed to fetch: "processResponse" if you just need a response, or "processResponseEndOfBody"  which will give you a response and a byte sequence.

[16:41:32.0187] <Andreu Botella (he/they)>
Those algorithms will be run in tasks on the networking task source, with the event loop that corresponds to request's client.

[16:42:57.0499] <Andreu Botella (he/they)>
And request's client should be a `Window`'s environment settings object, I believe


2021-09-08
[18:23:12.0192] <babaca>

https://skidson.online/ Best AQW Private server 
AQW Is a free to play browser mmorpg you can play with your friends join us now!

Join our discord below:
https://discord.gg/ZAebPzpsbR


[00:39:04.0773] <zcorpan>
> <@etportis:matrix.org> Step 4.7. here https://html.spec.whatwg.org/multipage/images.html#updating-the-source-set says: 
> 
> "Parse child's sizes attribute with the fallback width _width_, and let source set's source size be the returned value."
> 
> I don't see _width_ defined anywhere, or fallback width used anywhere in the "Parse a sizes attribute" algorithm.
> 
> Ten bucks says I'm just missing something, though. cc: zcorpan

Looks like fallout from https://github.com/whatwg/html/pull/5900 -- interested in submitting a PR? :)

[02:04:56.0459] <sideshowbarker>
anybody know why CSS `background-clip: text` has not been added/upstreamed to https://drafts.csswg.org/css-backgrounds/#background-clip

[02:05:14.0471] <sideshowbarker>
https://compat.spec.whatwg.org/#the-webkit-background-clip-property has `text` allowed

[02:05:35.0521] <sideshowbarker>
and UAs apparently support that for `background-clip`

[02:07:03.0315] <sideshowbarker>
‚Ä¶but https://drafts.csswg.org/css-backgrounds/#background-clip only allows `<box>#`, which resolves to ` border-box | padding-box | content-box` ‚Äî while the compat spec allows `border-box | padding-box | content-box | text`

[02:12:09.0464] <sideshowbarker>
well

[02:12:20.0946] <sideshowbarker>
basically same question for https://compat.spec.whatwg.org/#touch-action

[02:16:08.0124] <sideshowbarker>
further in that case, I wonder in general how much a great idea it is for non-CSS specs to be defining CSS features to begin with

[02:17:30.0675] <sideshowbarker>
because in that case, the Compat spec is basically patching something in the Pointer Events spec, which is defining something that instead rightly ought to be defined in whatever appropriate a CSS spec

[02:27:33.0626] <annevk>
sideshowbarker: the idea is that Compat ends up integrated into the actual specs, but I don't think there's active triaging to ensure that it happens

[02:51:20.0268] <sideshowbarker>
annevk: OK but I guess there‚Äôs also some ambiguity about features in the Compat spec ‚Äî because some of the features are things that we don‚Äôt really plan to integrate into other specs, right?

[02:52:05.0157] <Ms2ger üíâüíâ>
"we" is doing heavy lifting there :)

[02:52:12.0088] <sideshowbarker>
heh

[02:52:32.0196] <sideshowbarker>
anyway, I mean, it seems like some Compat features are features that we really don‚Äôt want developers using

[02:52:57.0202] <Ms2ger üíâüíâ>
Sure, but that hasn't stopped us from putting such features in HTML, say

[02:53:06.0197] <sideshowbarker>
sure

[02:53:58.0819] <sideshowbarker>
but for MDN at least, I think for the most part we avoid documenting stuff in the Compat spec, on the assumption that we don‚Äôt want to encourage developers to use those features

[02:55:19.0281] <sideshowbarker>
for example, looking back at the `background-clip: text` browser-compat data now, at https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip#browser_compatibility, I see it‚Äôs poorly supported anyway

[02:57:08.0553] <sideshowbarker>
and I‚Äôm guessing that browser projects may not be very interested in improving support for it ‚Äî and that‚Äôs maybe the same reason it‚Äôs not already gotten uplifted to the CSS Backgrounds spec

[03:00:15.0046] <Ms2ger üíâüíâ>
I'm confident in MDN's ability to figure this out even at a smaller than "whole spec" granularity :)

[03:00:38.0999] <Ms2ger üíâüíâ>
Anyway, I'm not going to do any work on this, so *crickets*

[03:01:52.0476] <Ms2ger üíâüíâ>
(Available for consulting if you want to change that, rates available on request)

[04:48:03.0197] <annevk>
sideshowbarker: I don't like that strategy. It's what JavaScript has used (separate "bad stuff" into an appendix) and HTML as well to some extent and it leads to misunderstandings and hard to comprehend processing models.

[04:49:43.0519] <annevk>
sideshowbarker: especially for simple things it seems much more straightforward if it's in the "base" standard and clearly marked as "historical" or some such.

[05:03:02.0726] <sideshowbarker>
annevk: I am happy with that as long as, however it‚Äôs marked, it‚Äôs with something that clearly conveys to web developers: *‚Äúdon‚Äôt use this‚Äù*

[05:03:29.0237] <sideshowbarker>
‚Ä¶but we have cases now where the specs aren‚Äôt making that clear to developers

[05:03:56.0319] <sideshowbarker>
one example is: most the NavigatorID members

[05:04:38.0031] <sideshowbarker>
there‚Äôs nothing in that HTML spec that clearly signals to developers that that should not be trying to do anything useful with those

[05:06:11.0803] <sideshowbarker>
and another case in the DOM spec spec where for some things, the only indication about them being different from anything else is a `// historical` comment in an IDL

[05:06:58.0564] <sideshowbarker>
‚Ä¶which is not the clearest signal for developers, since we don‚Äôt really want them needing to ever read the IDL anyway

[05:07:31.0225] <sideshowbarker>
 * and another case is in the DOM spec spec where for some things, the only indication about them being different from anything else is a `// historical` comment in an IDL

[05:07:37.0038] <sideshowbarker>
 * and another case is in the DOM spec spec where for some things, the only indication about them being different from anything else is a `// historical` comment in an IDL block

[05:38:23.0074] <annevk>
Well, // historical isn't included in "for web developer blocks"

[05:38:41.0969] <annevk>
NavigatorID seems like a very complex example

[05:39:58.0879] <annevk>
I think it's fair to say that we lack some consistency in specifications when it comes to developer-facing instructions. I think for APIs the idea has been that we cover everything in domintro blocks (and leave out what shouldn't be done), but that hasn't been consistently done.

[05:45:03.0464] <annevk>
TabAtkins: do Andreu Botella (he/they)'s observations help? Request's client is an environment settings object and used for defaulting of certain things. For CSS this would typically be the one associated with the document ultimately responsible for the request. Now CSS is complex and does some things differently so you might need to set certain things yourself, such as the referrer field. Also, you no longer have to go in parallel or queue a task, you can pass your callbacks to fetch and it'll do all that for you.

[05:46:00.0146] <annevk>
TabAtkins: also, to be clear, I still have your GitHub request in my backlog, but haven't managed to get to it yet.

[07:55:28.0105] <bakkot>
> <@annevk:mozilla.org> sideshowbarker: I don't like that strategy. It's what JavaScript has used (separate "bad stuff" into an appendix) and HTML as well to some extent and it leads to misunderstandings and hard to comprehend processing models.

yeah, tc39 has largely come to the understanding that this was a mistake, and we're (very) slowly moving bits into the body of the main specification, marked as "Legacy" meaning "we don't like this but we can't take it out, please don't use it"

[08:02:32.0268] <annevk>
Domenic: what do you think about doing a Twitter poll for overloading Promise<T> with functions? Also, now that I write that, I wonder what should happen if the function doesn't return a promise. There's a choice there between throwing and passing it on to resolve.

[08:47:04.0112] <Domenic>
sideshowbarker: annevk: in my opinion specs are not a good place to make recommendations on what developers should or should not use, except in cases where we're actively trying to remove something from the platform (like appcache, alert(), etc.). It's a total judgment call whether document.charset or document.characterSet is more correct, or node.appendChild() vs. node.append(), or compat spec stuff, or NavigatorID.

[08:47:38.0105] <Domenic>
MDN might be a reasonable place to make such judgments, but it shouldn't rely on specs being authoritative about anything in that regard. It needs to make its own decisions as to what APIs it supports developers using.

[08:48:07.0607] <Domenic>
annevk: Twitter poll seems reasonable. If it doesn't return a promise I think passing it on to resolve makes more sense.

