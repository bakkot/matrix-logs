2021-09-01
[00:30:20.0904] <sideshowbarker>
https://github.com/mdn/content/issues/8515 could just some quick help. Basically just needs a comment in response to the OP‚Äôs question. Should only take ~10 minutes.

[10:17:40.0459] <annevk>
Domenic: thoughts on where we should put a Security/Privacy section? First no-num section? Also, in DOM, should the Historical section become a no-num section? See https://github.com/whatwg/dom/issues/1013 for context. (I'm out now, but I figured I'd leave this here and maybe address it tomorrow. Thoughts from others welcome as well of course.)

[10:19:52.0634] <Domenic>
annevk: no real opinion, besides that it seems a bit weird that W3C process/groups is influencing our editorial style. I guess I would lean toward leaving it numbered since it is not shared boilerplate that all specs are expected to have? Or is it?

[10:25:23.0114] <annevk>
Domenic: I guess it kinda is shared, in the sense that a reviewer can access the impact, but the contents would be specific to the document. I'm not quite sure how I feel about it yet and I'm not really volunteering on adding the complicated sections, e.g., to HTML.

[10:48:30.0726] <Domenic>
Yeah this seems like a "PR welcome" situation at the most.

[10:55:08.0150] <Eric Portis (he/him)>
Step 4.7. here https://html.spec.whatwg.org/multipage/images.html#updating-the-source-set says: 

"Parse child's sizes attribute with the fallback width _width_, and let source set's source size be the returned value."

I don't see _width_ defined anywhere, or fallback width used anywhere in the "Parse a sizes attribute" algorithm.

Ten bucks says I'm just missing something, though. cc: zcorpan 


2021-09-02
[18:55:07.0372] <sideshowbarker>
yipes *‚ÄúNo server is currently available to service your request.‚Äù* from GitHub

[18:55:15.0209] <sideshowbarker>
never seen that one before

[19:02:31.0675] <sideshowbarker>
big AWS failure affecting many sites maybe?

[19:04:01.0387] <sideshowbarker>
ah, maybe just Japan

[01:36:53.0384] <annevk>
foolip: you around? Does https://github.com/whatwg/sg/pull/160#pullrequestreview-744777669 seem reasonable?

[01:48:14.0847] <sideshowbarker>
hsivonen: reviewing and testing and merging the ambiguous-ampersand patch took me a bit longer than I had anticipated, but with it landed now, I‚Äôm super glad ‚Äî no more need for a separate branch of the parser for the HTML checker, and now we have CI working (so we can catch regressions later, etc.)

[01:50:01.0763] <hsivonen>
> <@sideshowbarker:mozilla.org> hsivonen: reviewing and testing and merging the ambiguous-ampersand patch took me a bit longer than I had anticipated, but with it landed now, I‚Äôm super glad ‚Äî no more need for a separate branch of the parser for the HTML checker, and now we have CI working (so we can catch regressions later, etc.)

Thanks!

[01:50:45.0882] <sideshowbarker>
hsivonen: thank you for making that code a lot nicer :)

[01:51:31.0970] <annevk>
jgraham: for Test Utils, the Workstream is now approved. https://github.com/whatwg/meta/blob/main/NEW-STANDARD.md has a checklist. Is there an existing repo that will be moved or do you need a new one? When do you want to work on this?

[01:56:14.0234] <sideshowbarker>
hsivonen: the only remaining big thing about making the standalone Java version of parser spec-conforming is the encoding stuff ‚Äî¬†as discussed in https://github.com/validator/htmlparser/pull/48. As mentioned at https://github.com/validator/htmlparser/pull/48#issuecomment-691654072 I‚Äôd thought that could be addressed by merging in the changes from the `encodings` branch. But since that branch is now gone, I guess the changes there were never intended to end being released anyway?

[01:57:23.0620] <hsivonen>
The encoding stuff was _intenteded_ to be released, but when it became clear it wasn't progressing to a releaseable state, I stashed it away.

[01:57:31.0459] <sideshowbarker>
OK

[01:57:47.0269] <hsivonen>
 * The encoding stuff was _intented_ to be released, but when it became clear it wasn't progressing to a releaseable state, I stashed it away.

[01:57:57.0594] <hsivonen>
 * The encoding stuff was _intended_ to be released, but when it became clear it wasn't progressing to a releaseable state, I stashed it away.

[01:59:05.0366] <sideshowbarker>
well since without those encoding changes the Java parser doesn‚Äôt pass the html5lib encoding tests, I can‚Äôt recall now how I made CI pass without them. I assume I must just somehow have it skipping those tests.

[01:59:32.0897] <hsivonen>
The html5lib tests just test the labels and not the encoding tables, right?

[01:59:46.0770] <hsivonen>
You did land spec-compliant labels, IIRC.

[02:00:09.0836] <sideshowbarker>
OK maybe I just need to quit fretting about it

[02:01:59.0566] <sideshowbarker>
I just vaguely recall that we still have some significant failures when running some of the html5lib encoding tests ‚Äî maybe some that we have to flip on some non-default things to actually enable testing for, I dunno

[02:02:12.0163] <sideshowbarker>
I guess should just go back and look at my code and see

[02:04:40.0414] <sideshowbarker>
ideally it would just seem nice to be able to assert ‚Äúthis is a fully spec-conforming parser‚Äù with confidence ‚Äî and document it with passing tests

[02:05:10.0195] <sideshowbarker>
but the existence of https://github.com/validator/htmlparser/pull/48 makes me think we can‚Äôt actually do that yet

[02:06:47.0331] <sideshowbarker>
(all the encoding stuff really bewilders me ‚Äî even after I were to look back at the code, I think it would take me quite a bit of time to get back again to whatever marginal understanding of it I managed to arrive at when I‚Äôd hacked on it previously)

[02:08:22.0240] <sideshowbarker>
anyway, hsivonen and annevk in other news: I remember previously being subscribed to a Mozilla mailing list where, when there was some W3C spec transition or charter out for AC review, dbaron would post FYI messages asking if anybody wanted to send comments or objections as part of the review

[02:09:25.0237] <sideshowbarker>
but I either no longer seem to be on that list ‚Äî or else no such FYI-about-AC-review messages are going out any longer to whatever list that is

[02:09:56.0399] <hsivonen>
The list is dev-platform. Not sure if Tantek has systematically posted such messages or not.

[02:10:42.0811] <sideshowbarker>
ah OK thanks ‚Äî I‚Äôm pretty sure I‚Äôm still subscribed to dev-platform and getting messages from it

[02:11:51.0415] <hsivonen>
(encoding_rs has some nice properties that logically make it nicely compilable to efficient Java byte code. Sadly, related tools are too general instead of being customized to those nice properties.)

[02:12:29.0759] <hsivonen>
(The nice properties being: Reading and writing from caller-provided arrays, static read-only arrays and otherwise allocating only on the stack.)

[02:14:36.0269] <sideshowbarker>
wow well I would really love to have a good reason to work on Rust sources for a change, rather than doing all in Java

[02:15:47.0267] <hsivonen>
I think the the approach that wouldn't involve the yak shave of a custom compiler would be compiling to asm.js and then cleaning that up manually as Java as a one-time operation.

[02:16:04.0097] <hsivonen>
Still might be easier to write Java manually from the spec.

[02:16:53.0015] <hsivonen>
The main problem with compiling to wasm and then converting wasm to Java byte code is the loss of Java `char` arrays as Rust `u16` arrays.

[02:18:10.0173] <hsivonen>
Or, rather, Rust `u16` slices.

[02:19:42.0546] <jgraham>
annevk: https://github.com/jgraham/browser-test/ is the existing repo

[02:20:54.0097] <jgraham>
I strongly advise against getting me to make an icon :)

[02:31:57.0809] <annevk>
jgraham: it's the best part :-)

[02:50:55.0731] <jgraham>
Many years ago I had a simple Firefox extension and I got some feedback asking for a toolbar button. Afterwards I got feedback complaining I'd let a toddler design the icon.

[04:24:00.0845] <Ms2ger üíâüíâ>
Did you?

[05:25:00.0131] <jgraham>
Yes?

[05:27:06.0253] <jgraham>
Dunno how one would find it now given it previously probably worked with Firefox 3 or something

[06:02:54.0101] <annevk>
Domenic: so when I run make deploy I get a .spec.whatwg.org directory rather than a SHORTNAME.spec.whatwg.org directory and I don't really understand why

[06:03:23.0076] <annevk>
Domenic: maybe it's a macOS thing that sed -n 's#.*/\([^.]*\)\(\.git\)\?#\1#p' ends up returning the empty string for the given input

[06:03:34.0036] <annevk>
/me vaguely recalls some issues with macOS and sed

[06:03:47.0663] <Andreu Botella (he/they)>
I get the right directory name on Linux, if that's worth for anything

[06:04:38.0832] <annevk>
Thanks, I guess that means I ought to look into it being a macOS thing and perhaps copy-and-paste something from the previous solution

[06:11:18.0710] <freddy>
maybe there are different `sed`s and you can install gnu-sed?

[06:13:27.0355] <annevk>
I'd rather not require that for these kind of scripts, although in practice I wonder how many people end up running make deploy or equivalent

[06:56:37.0950] <stephanluis>
Hi everyone!

[07:03:06.0671] <stephanluis>
Was wondering the history behind a html5 tag <input type='duration'> for periods of time which don't require time localisation.  For example if I build a countdown clock that allows users to input a start time, HTML5 has no input type that will have the great functionality of the input-time but not be affected by local time formatting.  The situation seems odd, why is there not a control to input hours, minutes, seconds and milliseconds especially since these units are used around the world?

[07:05:44.0764] <Domenic>
> <@annevk:mozilla.org> I'd rather not require that for these kind of scripts, although in practice I wonder how many people end up running make deploy or equivalent

Yeah, fixing it to work on Macs would probably be worthwhile.

[07:08:16.0543] <jgraham>
> <@ms2ger:igalia.com> Did you?

Oh, I just reparsed this. I let someone whose graphic design skills hadn't improved noticably since being a toddler (i.e. me) create it.

[07:17:21.0653] <Ms2ger üíâüíâ>
hs-ivonen taught me reparsing is bad

[07:27:18.0024] <jgraham>
If you don't think humans are full of security vunerabilities, I have some horse drugs to sell you :)

[07:52:59.0106] <annevk>
Andreu Botella (he/they): Domenic: does `git config --local remote.origin.url | sed 's/.*\///' | sed 's/.git//'` work for you?

[07:54:07.0906] <Domenic>
Yes

[08:03:07.0053] <Andreu Botella (he/they)>
Same here

[08:16:52.0523] <annevk>
Thanks, I'll send a PR

[08:23:57.0481] <annevk>
stephanluis: in theory you can control localization through the `lang` attribute, but I'm aware of implementations

[08:32:37.0714] <stephanluis>
Yes, I've looked into that and it's too unreliable.  Additionally my specific implementation is a JS plugin, so don't want to update the language for the user's page.  Why isn't a duration type input part of the spec?  It seems universally useful.   

[08:34:25.0831] <annevk>
I'm somewhat surprised by the renewed relevance of the The Unpaired Surrogates and Lone Surrogates band names. Maybe it's time to start playing an instrument.

[08:36:19.0686] <annevk>
stephanluis: I don't recall. Perhaps it was discussed, but you'd have to go back pretty far in the archives. Most of the "new" input types were added in 2006 if I remember correctly.

[08:36:55.0433] <annevk>
https://lists.w3.org/Archives/Public/public-whatwg-archive/ / https://lists.whatwg.org/pipermail/whatwg-whatwg.org/

[08:37:35.0008] <stephanluis>
Wow!  And the process for amending the spec to include a new input type?

[08:37:59.0872] <annevk>
Oh, no, they were added in 2004 in Web Forms 2.0 (private draft end of 2003 I think), implemented in 2006 by Opera.

[08:38:18.0696] <annevk>
stephanluis: https://whatwg.org/working-mode#changes and https://whatwg.org/faq#adding-new-features

[08:39:38.0355] <stephanluis>
If I were to look back through the archive what reasons for not including duration would preclude it from being later accepted?

[08:52:43.0822] <stephanluis>
This duration input is such a generic idea it's hard to imagine why it's not an exposable base class to input time?   

[08:56:49.0635] <stephanluis>
... in most browser implementations.

[09:08:23.0752] <annevk>
I think at this point it would probably be judged based on need, amount of workarounds people deploy for it, etc. You might also want to look at the Open UI effort to see if they are tackling it.

[09:08:46.0219] <annevk>
The archives could be useful for understanding why it didn't happen back then, if it was even suggested.

[09:13:08.0352] <stephanluis>
are these the people https://open-ui.org/ ? 

[09:18:40.0947] <annevk>
Yeah, that looks correct

[09:20:42.0866] <stephanluis>
To me it's weird, but not many people seem to think they require this control but seem put up with converting from strings or multiple text boxes to separate units.  To me it seems like a glaring omission.  Writing a polyfill doesn't seem to be the correct approach?  What would you recommend?   

[09:22:00.0693] <stephanluis>
(I'll be away from my console for a couple hours, can resume the conversation later.)  Thanks for your guidance !

[16:27:10.0389] <sideshowbarker>
Domenic: about the sed thing, I think the `/p` flag is GNUism ‚Äî not in BSD sed

[16:27:55.0447] <sideshowbarker>
I‚Äôm not sure what the equivalent is is non-GNU sed for the combination of `-n` and the `/p` flag

[16:28:04.0979] <sideshowbarker>
 * I‚Äôm not sure what the equivalent is in non-GNU sed for the combination of `-n` and the `/p` flag

[16:30:08.0107] <sideshowbarker>
ah at https://chat.mozilla.org/#/room/#whatwg:matrix.org/$97SLXIeKZsBedPUx7a5hXmEijTqd_X1biuokaS6yxdo I see that Anne already came up with a fix

[16:33:27.0820] <sideshowbarker>
 * ah at https://matrixlogs.bakkot.com/WHATWG/2021-09-02#L54 I see that Anne already came up with a fix


2021-09-03
[19:36:56.0259] <sideshowbarker>
annevk: https://twitter.com/jub0bs/status/1432025056234835980

[23:00:15.0807] <freddy>
that's what we call a "simple request" though, isn't it? Also looking at https://twitter.com/bcrypt/status/1422243807328804882 and responses in the thread (e.g., https://twitter.com/shhnjk/status/1423013294860767237)

[23:28:07.0565] <sideshowbarker>
freddy: yeah I know;
* per-spec it‚Äôs a simple request since the ‚Äúessence‚Äù of the Content-Type header is `text/plain`, and
* any server that‚Äôs treating a request body with `text/plain; application/json` as JSON has broken content-type handling that should be fixed
‚Ä¶but I think in practice there are many servers that have broken content-type handling for JSON

[23:28:16.0510] <sideshowbarker>
 * freddy: yeah I know;
- per-spec it‚Äôs a simple request since the ‚Äúessence‚Äù of the Content-Type header is `text/plain`, and
- any server that‚Äôs treating a request body with `text/plain; application/json` as JSON has broken content-type handling that should be fixed

‚Ä¶but I think in practice there are many servers that have broken content-type handling for JSON

[23:30:44.0840] <annevk>
sideshowbarker: that's been known for ages I think, there's an open issue against the specification about it

[23:31:50.0747] <sideshowbarker>
ah OK

[23:32:19.0075] <sideshowbarker>
well I guess a similar real-world case is maybe https://stackoverflow.com/a/45752919/441757

[23:33:01.0278] <annevk>
sideshowbarker: text/plain; application/json isn't actually the evil example, https://github.com/whatwg/fetch/issues/838 has the worse attacks

[23:33:13.0238] <sideshowbarker>
/me looks

[23:33:42.0171] <sideshowbarker>
aha

[23:33:57.0453] <annevk>
The only complete solution here would be for the browser to take ownership of setting Content-Type, but I think that ends up breaking things, but it could be tried again I suppose

[23:35:27.0782] <annevk>
stephanluis: writing a polyfill or library and making it popular is often the first step toward something becoming part of the platform. This doesn't work for all features, but it would work for a duration input box.

[23:36:29.0941] <sideshowbarker>
> <@annevk:mozilla.org> The only complete solution here would be for the browser to take ownership of setting Content-Type, but I think that ends up breaking things, but it could be tried again I suppose

Well, short of that, would another solution be, just for the case of JSON request bodies, for the browser to refuse to allow the Content-Type request header to be set to a non-JSON media type?

[23:37:48.0324] <sideshowbarker>
‚Ä¶like CORB but from the client side ‚Äî for requests rather than responses

[23:38:08.0602] <annevk>
sideshowbarker: we cannot tell the type of a body

[23:38:15.0471] <sideshowbarker>
ah OK

[23:39:10.0996] <annevk>
I guess we could try to parse all bodies to see if they are JSON, but I'm pretty sure rejecting those would break the web at this point

[23:39:49.0979] <sideshowbarker>
yeah, parsing the bodies is what I had in mind, and yeah I think it would definitely break a lot people‚Äôs stuff

[23:40:41.0510] <sideshowbarker>
e.g., it would break requests to the Slack API from frontend code, as in that https://stackoverflow.com/a/45752919/441757 case

[23:43:40.0368] <sideshowbarker>
anyway, I‚Äôm not on Twitter so I can‚Äôt reply myself to that https://twitter.com/jub0bs/status/1432025056234835980 tweet. But if somebody cares to take the time, might be worthwhile to reply to that tweet with a link to https://github.com/whatwg/fetch/issues/838

[01:22:37.0568] <freddy>
annevk:  in a URL, how would you call a hostname that does not contain any dots? bare hostname? non-dotted hostname? I was looking for "prior" art in our UriFixup files and the whatwg url spec, but found none.

[01:27:45.0978] <annevk>
freddy: maybe a single-label domain, but we don't have solid terminology at that level

[01:28:17.0307] <annevk>
freddy: and I'm also not sure if people would consider `x.` a two-label domain; probably more a single-label-domain-with-trailing-dot

[01:29:21.0313] <annevk>
sideshowbarker: btw, I ended up not replying as they mostly figured it out themselves and person posting had it from 2018 research; can't 386 them all

[01:29:33.0538] <annevk>
 * sideshowbarker: btw, I ended up not replying as they mostly figured it out themselves and the person posting had it from 2018 research; can't 386 them all

[01:46:34.0650] <sideshowbarker>
ah OK

[01:55:45.0808] <freddy>
annevk: Thanks :)

[02:19:42.0508] <stephanluis>
 * > stephanluis: writing a polyfill or library and making it popular is often the first step toward something becoming part of the platform. This doesn't work for all features, but it would work for a duration input box.


[02:24:28.0302] <stephanluis>
> stephanluis: writing a polyfill or library and making it popular is often the first step toward something becoming part of the platform. This doesn't work for all features, but it would work for a duration input box.

annevk: So what's the best way to structure the polyfill?  I'd like to keep all the functionality of the time input, but make all browsers use a 24h clock so that can be used as a twenty-four hour duration input.  Phase 2

[02:27:02.0098] <stephanluis>
 * > stephanluis: writing a polyfill or library and making it popular is often the first step toward something becoming part of the platform. This doesn't work for all features, but it would work for a duration input box.

annevk: So what's the best way to structure the polyfill?  I'd like to keep all the functionality of the time input, but make all browsers use a 24h clock so that can be used as a twenty-four hour duration input.  'Phase 2' would be deciding how to represent days and that would be to either expand hours beyond 24 or have days:hours:min:sec.microsec .  I think 24 hour days are universal!!??

[02:28:29.0702] <stephanluis>
annevk:  how do you recommend commandeering the time input? or do you think I should use another strategy? 

[02:54:53.0952] <annevk>
stephanluis: not sure, if I were to work on this I'd probably look at existing libraries to get some inspiration

[02:56:46.0447] <dbaron>
(I think my IRC client is telling me someone mentioned me in this channel, but it's not up to usefully telling me how many pages up that mention is...)

[02:57:33.0529] <dbaron>
 * (I think my client is telling me someone mentioned me in this channel, but it's not up to usefully telling me how many pages up that mention is...)

[02:57:45.0013] <Ms2ger üíâüíâ>
If you use the web client, there's a bell icon in the top right corner

[02:57:55.0609] <sideshowbarker>
dbaron: that was me, I think ‚Äî at https://matrixlogs.bakkot.com/WHATWG/2021-09-02#L23

[02:58:06.0160] <dbaron>
Ms2ger üíâüíâ: yeah, I clicked that but it takes me to the wrong place, as usual

[02:58:08.0215] <stephanluis>
annevk: I have, they're pretty dismal I think this is the best https://nadchif.github.io/html-duration-picker.js/ ... the control requires additional buttons and looses the most of the key functions present for time input.  So haven't looked at the source.

[03:02:30.0420] <stephanluis>
https://dan503.github.io/time-input-polyfill/ initially looked more promising, but ran into problems with that too.  Can't remember exactly what it was, looked at it a while ago.   

[03:04:27.0978] <stephanluis>
I think the problem was that it the polyfill didn't take milliseconds. 

[03:07:23.0030] <stephanluis>
 * I think the problem was that it the polyfill didn't handle milliseconds. 

[03:24:49.0270] <stephanluis>
Having had another look at the Time Input Polyfill I may be able to start with that.  Will keep you updated.  Still feel that duration input should probably be in the standard as it's the 'universal'/ not region or language dependant  part of a time input !

[10:28:53.0738] <sideshowbarker>
TabAtkins: about https://github.com/tabatkins/bikeshed/pull/2094 is there something more I should do there before we can move forward with what you outlined in https://github.com/tabatkins/bikeshed/pull/2094#issuecomment-873145774 ?

[10:38:29.0506] <TabAtkins>
sideshowbarker: No, with those changes I'd be happy to accept the PR.

[10:39:13.0902] <sideshowbarker>
oh, then I guess I‚Äôm not clear on how to actually make those changes

[10:41:16.0945] <sideshowbarker>
I‚Äôll need to go back and look at it

[10:43:19.0075] <sideshowbarker>
e.g., for *‚ÄúFormalize domintro sections a little bit more, ensuring they're fit for this purpose‚Äù* I wasn‚Äôt sure if that concretely amounted just to *‚ÄúRequire an ID on them, and visibly expose that anchor like we do for headings and such, so it's easy to spot what should be linked to‚Äù*, or if there was something more than just that which you had in mind

[15:29:22.0539] <DerekNonGeneric>
sideshowbarker: is `#css` on `irc.w3.org` still a thing or has that channel been bridged to somewhere else? (have some questions about how CSS modules being imported to JS should behave)

[15:34:42.0902] <DerekNonGeneric>
/cc maybe TabAtkins where do my CSS questions go? üòÑ

[15:35:23.0099] <TabAtkins>
The W3C still operates its chat rooms, feel free to ask there

[15:35:48.0349] <TabAtkins>
sideshowbarker: Nope, that's what I meant. ^_^

[15:37:50.0493] <DerekNonGeneric>
cool, my question is there -- hope it doesn't seem obnoxious, but aside from MIME types, not sure what else JS is expected to do w/ an imported CSS file

[15:41:09.0026] <DerekNonGeneric>
(even JS has no idea about MIME types, but what should be asserted is confusing me)

[16:24:50.0649] <GPHemsley>
are there any Edge developers in here?


2021-09-04
[17:11:45.0936] <sideshowbarker>
> <@dereknongeneric:mozilla.org> sideshowbarker: is `#css` on `irc.w3.org` still a thing or has that channel been bridged to somewhere else? (have some questions about how CSS modules being imported to JS should behave)

#_w3c_#css:matrix.org should work (Matrix bridge to #css on irc.w3.org) ‚Äî¬†but Element seems to have some problem with actually exposing it

[17:12:07.0632] <sideshowbarker>
> <@dereknongeneric:mozilla.org> sideshowbarker: is `#css` on `irc.w3.org` still a thing or has that channel been bridged to somewhere else? (have some questions about how CSS modules being imported to JS should behave)

 * `#_w3c_#css:matrix.org` should work (Matrix bridge to #css on irc.w3.org) ‚Äî¬†but Element seems to have some problem with actually exposing it

[17:14:39.0381] <sideshowbarker>
 * `#_w3c_#css:matrix.org` should work (Matrix bridge to #css on irc.w3.org) ‚Äî¬†but Element seems to have some problem with actually exposing it.
Looking at the #css channel in my IRC client, I can see that Matrix did actually let me join it. But for some reason Element just doesn‚Äôt load as a room.

[18:33:12.0690] <DerekNonGeneric>
connecting to it from my IRC client seems legit lol

[18:35:14.0352] <DerekNonGeneric>
so far all the Matrix clients (except the Element web app seem too far behind on the whole Spaces concept to be worth the bother for me)

[18:50:55.0266] <sideshowbarker>
https://matrix.to/#/!XSiAkrIbWRxITaanYw:matrix.org

[18:55:13.0729] <DerekNonGeneric>
oof, no preview üòÖ (not joining that lol)

[18:55:48.0240] <DerekNonGeneric>
might have set up the room wrong üôÉ


2021-09-05

2021-09-06
[23:50:01.0626] <annevk>
CSS module scripts are standardized in HTML, not in CSS. The idea is that you can append whatever you imported to a style sheet set. For instance, a style sheet set belonging to a shadow root.

[00:45:09.0538] <hsivonen>
Ambiguous ampersand made it to Nightly. üéâ Thanks sideshowbarker !

[01:14:49.0368] <sideshowbarker>
> <@hsivonen:mozilla.org> Ambiguous ampersand made it to Nightly. üéâ Thanks sideshowbarker !

Excellent ‚Äî laissez les bons temps rouler

[03:17:22.0325] <stephanluis>
annevk: Ok. already back with the first example of where javascript will not be sufficient for modifying the time input to become a duration input.  The hurdle is that Safari adds AM or PM and converts to a 12hr clock.  While the 12hr conversion is straightforward to deal with -- for a timer up to 12 hours, removing the AM/PM with css updates is unreliable as this seems the only way to approach it  ::-webkit-datetime-edit-ampm-field { display: none;}  .  AM/PM is still displaying in my tests. I'm doubting that js/css can be used for a duration input polyfill .

[03:18:04.0558] <stephanluis>
 * annevk: Ok. already back with the first example of where javascript is not sufficient for modifying the time input into a duration input.  The hurdle is that Safari adds AM or PM and converts to a 12hr clock.  While the 12hr conversion is straightforward to deal with -- for a timer up to 12 hours, removing the AM/PM with css updates is unreliable as this seems the only way to approach it  ::-webkit-datetime-edit-ampm-field { display: none;}  .  AM/PM is still displaying in my tests. I'm doubting that js/css can be used for a duration input polyfill .

[03:20:44.0075] <annevk>
stephanluis: a quick search yields https://nadchif.github.io/html-duration-picker.js/

[03:21:39.0992] <stephanluis>
I've looked at that it doesn't maintain the time input functionality, on the demo you can see additional buttons are required.

[03:27:17.0220] <annevk>
You could remove those presumably. And what input type=time is largely depends on implementations. Anyway, I recommend reaching out to Open UI or some such. I don't think I can help.

[03:32:40.0065] <stephanluis>
But that's the problem, time input is based on browser implementations because there are so many international formats for time.  The standard needs (is missing) is straightforward hours minutes, seconds -- with decimals -- control that browsers implement for the universal part of time. 

[03:41:43.0214] <stephanluis>
annevk: and there doesn't seem to be a 'follow the usual path' of writing a polyfill to demonstrate the need because browsers have such 'in baked' and diverse implementations.

[04:00:12.0197] <stephanluis>
annevk: I hope WHATWG sees the need to do something.  Let me know if I can help in any way.  Thanks.

[04:29:50.0651] <annevk>
 * You could remove those presumably. And what input type=time is largely depends on implementations. Anyway, I recommend reaching out to Open UI. I don't think I can help.


2021-09-07
[13:41:31.0701] <Luca Casonato>
wanderview: Am I correct in the assumption that `URLPattern.compareComponent` will not be part of the shipping of URLPattern in Chrome 95?

[13:41:39.0567] <Luca Casonato>
 * wanderview: Am I correct in the assumption that `URLPattern.compareComponent` will not be part of the shipping of URLPattern in Chrome 95?

[13:41:54.0308] <wanderview>
correct

[13:42:05.0509] <wanderview>
its behind a separate flag

[13:43:31.0202] <Luca Casonato>
cool cool - i'll wait with implementing it in Deno until the discussion has settled then.

[13:43:51.0655] <wanderview>
Luca Casonato: btw, thanks for all the work you and crowlKats have put into fixing spec mistakes!

[13:44:03.0418] <Luca Casonato>
has been great fun to implement URLPattern so far by the way - spec is very well written and easy to follow üëçÔ∏è

[13:44:05.0464] <wanderview>
sorry there are so many

[13:44:16.0572] <Luca Casonato>
oh no worries - its a large spec, so makes total sense

[13:44:33.0557] <wanderview>
thanks!  all readability due to Domenic's review

[13:45:03.0347] <Luca Casonato>
https://github.com/denoland/rust-urlpattern <- we have a fully spec compliant implementation here now (not chromium compliant yet though üòâ)

[13:45:23.0270] <Luca Casonato>
were planning to ship it flagged in a week and a half

[13:45:33.0833] <Luca Casonato>
and then stabilize around the time 95 goes beta

[13:46:13.0876] <wanderview>
wow, awesome!

[13:47:10.0010] <wanderview>
fwiw, mozilla was asking if there were other implementations on their standards-position repo... I mentioned your work, but didn't know the status: https://github.com/mozilla/standards-positions/issues/566

[13:48:27.0798] <Luca Casonato>
it's written in Rust, so mozilla could probably just pull it in for their implementation. i'd be happy to collaborate on that front. i'll leave a comment on the standards position issue.

[16:10:07.0753] <TabAtkins>
annevk: Could I get an eye on <https://drafts.csswg.org/css-cascade-4/#fetch-an-import> at some point? I'm trying to define @import on top of Fetch, but there's very little guidance, so I'm mostly just copypasting/tweaking text I'm finding in HTML and hoping I'm doing things correctly.

[16:37:10.0686] <Andreu Botella (he/they)>
So I'm not an expert on fetch by any means, but there's a few things that stand out to me

[16:37:58.0382] <Andreu Botella (he/they)>
1. If the original stylesheet was linked to with `<link crossorigin>`, you'd presumably want imports to use mode `"cors"` and credentials mode `"same-origin"`, right?

[16:39:02.0721] <Andreu Botella (he/they)>
2. Unless you explicitly set the request's synchronous mode, fetch will not block, so you don't want to run it in parallel.

[16:40:05.0626] <Andreu Botella (he/they)>
Instead of that, you should set one or more of the optional algorithms that are passed to fetch: "processResponse" if you just need a response, or "processResponseEndOfBody"  which will give you a response and a byte sequence.

[16:41:32.0187] <Andreu Botella (he/they)>
Those algorithms will be run in tasks on the networking task source, with the event loop that corresponds to request's client.

[16:42:57.0499] <Andreu Botella (he/they)>
And request's client should be a `Window`'s environment settings object, I believe


2021-09-08
[18:23:12.0192] <babaca>

https://skidson.online/ Best AQW Private server 
AQW Is a free to play browser mmorpg you can play with your friends join us now!

Join our discord below:
https://discord.gg/ZAebPzpsbR


[00:39:04.0773] <zcorpan>
> <@etportis:matrix.org> Step 4.7. here https://html.spec.whatwg.org/multipage/images.html#updating-the-source-set says: 
> 
> "Parse child's sizes attribute with the fallback width _width_, and let source set's source size be the returned value."
> 
> I don't see _width_ defined anywhere, or fallback width used anywhere in the "Parse a sizes attribute" algorithm.
> 
> Ten bucks says I'm just missing something, though. cc: zcorpan

Looks like fallout from https://github.com/whatwg/html/pull/5900 -- interested in submitting a PR? :)

[02:04:56.0459] <sideshowbarker>
anybody know why CSS `background-clip: text` has not been added/upstreamed to https://drafts.csswg.org/css-backgrounds/#background-clip

[02:05:14.0471] <sideshowbarker>
https://compat.spec.whatwg.org/#the-webkit-background-clip-property has `text` allowed

[02:05:35.0521] <sideshowbarker>
and UAs apparently support that for `background-clip`

[02:07:03.0315] <sideshowbarker>
‚Ä¶but https://drafts.csswg.org/css-backgrounds/#background-clip only allows `<box>#`, which resolves to ` border-box | padding-box | content-box` ‚Äî while the compat spec allows `border-box | padding-box | content-box | text`

[02:12:09.0464] <sideshowbarker>
well

[02:12:20.0946] <sideshowbarker>
basically same question for https://compat.spec.whatwg.org/#touch-action

[02:16:08.0124] <sideshowbarker>
further in that case, I wonder in general how much a great idea it is for non-CSS specs to be defining CSS features to begin with

[02:17:30.0675] <sideshowbarker>
because in that case, the Compat spec is basically patching something in the Pointer Events spec, which is defining something that instead rightly ought to be defined in whatever appropriate a CSS spec

[02:27:33.0626] <annevk>
sideshowbarker: the idea is that Compat ends up integrated into the actual specs, but I don't think there's active triaging to ensure that it happens

[02:51:20.0268] <sideshowbarker>
annevk: OK but I guess there‚Äôs also some ambiguity about features in the Compat spec ‚Äî because some of the features are things that we don‚Äôt really plan to integrate into other specs, right?

[02:52:05.0157] <Ms2ger üíâüíâ>
"we" is doing heavy lifting there :)

[02:52:12.0088] <sideshowbarker>
heh

[02:52:32.0196] <sideshowbarker>
anyway, I mean, it seems like some Compat features are features that we really don‚Äôt want developers using

[02:52:57.0202] <Ms2ger üíâüíâ>
Sure, but that hasn't stopped us from putting such features in HTML, say

[02:53:06.0197] <sideshowbarker>
sure

[02:53:58.0819] <sideshowbarker>
but for MDN at least, I think for the most part we avoid documenting stuff in the Compat spec, on the assumption that we don‚Äôt want to encourage developers to use those features

[02:55:19.0281] <sideshowbarker>
for example, looking back at the `background-clip: text` browser-compat data now, at https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip#browser_compatibility, I see it‚Äôs poorly supported anyway

[02:57:08.0553] <sideshowbarker>
and I‚Äôm guessing that browser projects may not be very interested in improving support for it ‚Äî and that‚Äôs maybe the same reason it‚Äôs not already gotten uplifted to the CSS Backgrounds spec

[03:00:15.0046] <Ms2ger üíâüíâ>
I'm confident in MDN's ability to figure this out even at a smaller than "whole spec" granularity :)

[03:00:38.0999] <Ms2ger üíâüíâ>
Anyway, I'm not going to do any work on this, so *crickets*

[03:01:52.0476] <Ms2ger üíâüíâ>
(Available for consulting if you want to change that, rates available on request)

[04:48:03.0197] <annevk>
sideshowbarker: I don't like that strategy. It's what JavaScript has used (separate "bad stuff" into an appendix) and HTML as well to some extent and it leads to misunderstandings and hard to comprehend processing models.

[04:49:43.0519] <annevk>
sideshowbarker: especially for simple things it seems much more straightforward if it's in the "base" standard and clearly marked as "historical" or some such.

[05:03:02.0726] <sideshowbarker>
annevk: I am happy with that as long as, however it‚Äôs marked, it‚Äôs with something that clearly conveys to web developers: *‚Äúdon‚Äôt use this‚Äù*

[05:03:29.0237] <sideshowbarker>
‚Ä¶but we have cases now where the specs aren‚Äôt making that clear to developers

[05:03:56.0319] <sideshowbarker>
one example is: most the NavigatorID members

[05:04:38.0031] <sideshowbarker>
there‚Äôs nothing in that HTML spec that clearly signals to developers that that should not be trying to do anything useful with those

[05:06:11.0803] <sideshowbarker>
and another case in the DOM spec spec where for some things, the only indication about them being different from anything else is a `// historical` comment in an IDL

[05:06:58.0564] <sideshowbarker>
‚Ä¶which is not the clearest signal for developers, since we don‚Äôt really want them needing to ever read the IDL anyway

[05:07:31.0225] <sideshowbarker>
 * and another case is in the DOM spec spec where for some things, the only indication about them being different from anything else is a `// historical` comment in an IDL

[05:07:37.0038] <sideshowbarker>
 * and another case is in the DOM spec spec where for some things, the only indication about them being different from anything else is a `// historical` comment in an IDL block

[05:38:23.0074] <annevk>
Well, // historical isn't included in "for web developer blocks"

[05:38:41.0969] <annevk>
NavigatorID seems like a very complex example

[05:39:58.0879] <annevk>
I think it's fair to say that we lack some consistency in specifications when it comes to developer-facing instructions. I think for APIs the idea has been that we cover everything in domintro blocks (and leave out what shouldn't be done), but that hasn't been consistently done.

[05:45:03.0464] <annevk>
TabAtkins: do Andreu Botella (he/they)'s observations help? Request's client is an environment settings object and used for defaulting of certain things. For CSS this would typically be the one associated with the document ultimately responsible for the request. Now CSS is complex and does some things differently so you might need to set certain things yourself, such as the referrer field. Also, you no longer have to go in parallel or queue a task, you can pass your callbacks to fetch and it'll do all that for you.

[05:46:00.0146] <annevk>
TabAtkins: also, to be clear, I still have your GitHub request in my backlog, but haven't managed to get to it yet.

[07:55:28.0105] <bakkot>
> <@annevk:mozilla.org> sideshowbarker: I don't like that strategy. It's what JavaScript has used (separate "bad stuff" into an appendix) and HTML as well to some extent and it leads to misunderstandings and hard to comprehend processing models.

yeah, tc39 has largely come to the understanding that this was a mistake, and we're (very) slowly moving bits into the body of the main specification, marked as "Legacy" meaning "we don't like this but we can't take it out, please don't use it"

[08:02:32.0268] <annevk>
Domenic: what do you think about doing a Twitter poll for overloading Promise<T> with functions? Also, now that I write that, I wonder what should happen if the function doesn't return a promise. There's a choice there between throwing and passing it on to resolve.

[08:47:04.0112] <Domenic>
sideshowbarker: annevk: in my opinion specs are not a good place to make recommendations on what developers should or should not use, except in cases where we're actively trying to remove something from the platform (like appcache, alert(), etc.). It's a total judgment call whether document.charset or document.characterSet is more correct, or node.appendChild() vs. node.append(), or compat spec stuff, or NavigatorID.

[08:47:38.0105] <Domenic>
MDN might be a reasonable place to make such judgments, but it shouldn't rely on specs being authoritative about anything in that regard. It needs to make its own decisions as to what APIs it supports developers using.

[08:48:07.0607] <Domenic>
annevk: Twitter poll seems reasonable. If it doesn't return a promise I think passing it on to resolve makes more sense.

[09:24:07.0597] <annevk>
Domenic: so you think not having domintro for document.all is bad?

[09:36:48.0563] <Domenic>
annevk: heh, fair. I guess that would be consistent with my position since we don't have plans to remove document.all. I dunno, maybe I have an exception for things that are just too weird and broken, like document.all/embed/object?

[09:37:33.0449] <Domenic>
But like, whether or not you use webkit-prefixed CSS stuff seems like a style choice, as long as it's well-specified and works in all browsers (like many such CSS constructs do these days).

[09:52:05.0552] <annevk>
I guess, but surfacing them also adds noise and complexity for those consuming the information. Why should I have to read about webkitMatchesSelector if matches will do just fine?

[10:01:40.0658] <jgraham>
Historically HTML in particular has given a lot of attention to what authors ought to do seperate to what works (the entire concept of a "valid" document). So it's very understandable that people would expect it to continue doing that and take lack of such information as implicit endorsement of features.

[10:02:03.0626] <jgraham>
 * Historically HTML in particular has given a lot of attention to what authors ought to do seperate to what works (the entire concept of a "valid" document). So it's very understandable that people would expect it to continue doing so, and that they take lack of such information as implicit endorsement of features.

[10:02:20.0345] <jgraham>
 * Historically HTML in particular has given a lot of attention to what authors ought to do seperate to what works (the entire concept of a "valid" document). So it's very understandable that people would expect it to continue doing so, and that they take lack of negitative indicators as implicit endorsement.

[10:02:51.0105] <miketayl_r>
> Why should I have to read about webkitMatchesSelector if matches will do just fine?

are you reading this on MDN? or in the DOM spec?

[10:03:19.0817] <jgraham>
I also tend to agree that specs in general are a pretty poor place to set authoring norms since authors shouldn't have to read specs in general.

[10:03:33.0816] <jgraham>
 * I also tend to agree that specs in general are a pretty poor place to set authoring norms since authors shouldn't be expected to read specs in general.

[10:04:19.0439] <jgraham>
 * I also tend to agree that specs in general are a pretty poor place to set authoring norms since authors shouldn't be expected to read specs as a matter of course.

[10:05:08.0595] <jgraham>
 * Historically HTML in particular has given a lot of attention to what authors ought to do seperate to what works (the entire concept of a "valid" document). So it's very understandable that people would expect it to continue doing so, and that they take lack of negative indicators as implicit endorsement.

[10:06:21.0019] <miketayl_r>
i think that note is more useful on MDN

[10:06:35.0098] <miketayl_r>
(but i don't think that it's harmful in a spec)

[10:06:48.0199] <miketayl_r>
 * i think that second note is more useful on MDN

[12:47:15.0867] <miketayl_r>
jgraham: where is the right place to talk about WPT? is there a testing matrix channel now? or still on IRC?

[12:56:48.0215] <aja>
https://matrix.to/#/#wpt:matrix.org

[13:01:49.0532] <miketayl_r>
nice, thanks aja 


2021-09-09
[19:22:08.0825] <sideshowbarker>
Domenic: I don‚Äôt disagree. But as far as the MDN side goes, a specific problem we chronically run into is that historically (and still) we have only had Deprecated and Obsolete flags. The current policy is to completely stop using Obsolete flag and only use the Deprecated flag. But if we mark a feature as Deprecated when the relevant spec doesn‚Äôt actually indicate that feature is deprecated, then we get reports from (sometimes angry) developers who somewhat-rightly take issue with MDN saying that something‚Äôs deprecated when it‚Äôs actually not.

[19:23:25.0781] <sideshowbarker>
The solution I support for that is:
* We stop using the term _Deprecated_ altogether.
* We instead use the term _Discouraged_.
‚Ä¶for reasons outlined in https://github.com/mdn/content/discussions/5549#discussioncomment-814689

[19:23:33.0212] <sideshowbarker>
 * The solution I support for that is:
- We stop using the term _Deprecated_ altogether.
- We instead use the term _Discouraged_.

‚Ä¶for reasons outlined in https://github.com/mdn/content/discussions/5549#discussioncomment-814689

[19:38:25.0782] <sideshowbarker>
> <@bakkot:matrix.org> yeah, tc39 has largely come to the understanding that this was a mistake, and we're (very) slowly moving bits into the body of the main specification, marked as "Legacy" meaning "we don't like this but we can't take it out, please don't use it"

I like *Legacy* but also be happy to see some accompanying ‚Äúdiscouraged‚Äù language where appropriated. Commented to say as much after at https://github.com/tc39/ecma262/pull/2441/files#r704904382

[19:38:50.0197] <sideshowbarker>
> <@bakkot:matrix.org> yeah, tc39 has largely come to the understanding that this was a mistake, and we're (very) slowly moving bits into the body of the main specification, marked as "Legacy" meaning "we don't like this but we can't take it out, please don't use it"

 * I like _Legacy_ but also be happy to see some accompanying ‚Äúdiscouraged‚Äù language where appropriate. Commented to say as much after at https://github.com/tc39/ecma262/pull/2441/files#r704904382

[19:39:01.0916] <sideshowbarker>
 * I like _Legacy_ but also be happy to see some accompanying ‚Äúdiscouraged‚Äù language where appropriate. Commented to say as much over at https://github.com/tc39/ecma262/pull/2441/files#r704904382

[19:45:06.0564] <sideshowbarker>
> <@jgraham_:matrix.org> Historically HTML in particular has given a lot of attention to what authors ought to do seperate to what works (the entire concept of a "valid" document). So it's very understandable that people would expect it to continue doing so, and that they take lack of negative indicators as implicit endorsement.

Exactly ‚Äî¬†though the cases where the spec states those kind of restrictions for authors/documents has mostly been limited to markup, with the rationale documented in https://html.spec.whatwg.org/multipage/introduction.html#restrictions-on-content-models-and-on-attribute-values and in https://html.spec.whatwg.org/multipage/introduction.html#syntax-errors. So I guess if we were to really want to venture into doing something similar for methods and properties, we‚Äôd ideally want to have some similar documented rationale guiding the choices.

[19:48:14.0183] <sideshowbarker>
But given the reasons Domenic mentioned at https://matrixlogs.bakkot.com/WHATWG/2021-09-08#L40, it seems it might be more difficult to articulate some consistent rationale than it is for the markup case.

[23:29:19.0925] <annevk>
miketayl_r: I think a web developer should be able to read a spec directly if they want and I also think that information in a specification addressed to them should be focused if possible (i.e., not introduce multiple ways of doing the same thing when one suffices), but I realize that is somewhat idealized

[23:48:21.0901] <Ms2ger üíâüíâ>
> <@miketayl_r:mozilla.org> sent an image.

I actually feel the second note is unnecessarily harsh even for MDN. It really doesn't hurt anyone to keep using those other properties. I don't mind discouraging people from using old features that have surprising behavior (like doc.all), but this is just an alias...

[01:54:22.0836] <annevk>
I think at the time that note was added the other properties were not uniformly supported. Perhaps at this point it doesn't matter, but it still seems preferable for everyone to align on one of them.

[01:58:02.0771] <Ms2ger üíâüíâ>
"This one is more widely supported" seems like a useful note. I guess I just don't see the value in practice of the alignment

[01:58:06.0468] <Ms2ger üíâüíâ>
/me returns to work

[03:36:08.0178] <Jake Archibald>
annevk: I'm planning on adding 'origin' to history entries, so when a document is brought back to life it'll use the same origin as it did before, unless something happens which changes the origin along the way, such as a redirect to another origin.

This should cater for things like `about:blank` that take their origin from their creator.

[03:36:14.0557] <Jake Archibald>
Does that make sense?

[03:43:58.0603] <annevk>
I wonder if we should only do that for cases where we cannot derive it from elsewhere to avoid accidental dependencies. Do we have many other cases besides about:blank? smaug ^^ 

[03:48:56.0792] <Jake Archibald>
I can't remember exactly what data/blob URLs do here. I know they're an 'opaque' origin, but does that mean all storage is blocked, or is a temporary origin created?

[03:53:02.0255] <Luca Casonato>
storage is blocked

[03:53:46.0574] <Luca Casonato>
`data:text/html,<script>try { localStorage.setItem("foo", "foo") } catch(err) { alert(err) }</script>`

[04:01:20.0365] <Jake Archibald>
There's srcdoc, but I guess you could always get the origin from the parent in that case

[04:10:53.0728] <annevk>
Jake Archibald: blob URLs get their origin from the blob URL store

[04:11:25.0642] <annevk>
 * Jake Archibald: blob URLs get their origin from the blob URL store (definitely not always opaque)

[04:20:23.0697] <Jake Archibald>
If it's just `about:blank` then I agree it should be special-cased

[04:25:50.0619] <Jake Archibald>
/me starts thinking about `document.domain`

[04:58:44.0062] <annevk>
Jake Archibald: I think in the case where you navigate to something again that isn't in bfcache, you wouldn't want things like a document.domain set to be restored, although maybe you do for about:blank? Not sure there is a correct answer here. History is hard.

[04:59:11.0371] <Jake Archibald>
It doesn't seem like `document.domain` is restored

[04:59:53.0359] <Jake Archibald>
But, I think apphistory needs history entries to have an origin to it knows which entries are same-origin.

[04:59:59.0145] <annevk>
Though note that the origin about:blank inherits could be a document.domain-type origin.

[05:01:14.0185] <Jake Archibald>
That didn't seem to be the case in a quick test I did in Chrome. Although it could be different in other browsers

[05:01:35.0775] <Jake Archibald>
haha this stuff is all so messy

[05:02:26.0416] <annevk>
Jake Archibald: if the parent sets document.domain and then you create the about:blank child, how could it not inherit it?

[05:02:52.0113] <Jake Archibald>
hmm, I see what you mean

[05:02:56.0937] <annevk>
The child ends up being cross-origin? Or after navigating the child and then going back it's cross-origin?

[05:03:28.0644] <Jake Archibald>
testing again‚Ä¶

[05:03:30.0785] <Ms2ger üíâüíâ>
> * <@jakea:matrix.org> starts thinking about `document.domain`

I'm so sorry

[05:05:15.0279] <annevk>
As for your question, it seems you could mainly use URLs for determining same-origin-ness, except for sandboxing cases and document.domain. Ignoring document.domain for this seems fine, sandboxing is unclear. But sandboxing is also something that could change if the entries are not bfcache-backed.

[05:06:17.0626] <Jake Archibald>
There's an open question on whether the sandbox stuff should be in the history entry

[05:06:38.0358] <Jake Archibald>
I still think we should cycle the iframe browsing context when sandboxing changes

[05:06:55.0338] <Jake Archibald>
(or, the navigation after sandboxing changes)

[05:07:32.0143] <Jake Archibald>
Is there an API that gives me the origin of a document?

[05:07:43.0205] <annevk>
I suspect we don't want to take sandboxing into account for same-origin-ness though.

[05:07:47.0563] <annevk>
Jake Archibald: self.origin

[05:08:02.0773] <Jake Archibald>
self.origin doesn't update with document.domain

[05:08:22.0565] <annevk>
Jake Archibald: document.domain things you can only reveal through script access and such

[05:08:31.0683] <Jake Archibald>
gotcha

[05:10:06.0080] <annevk>
Because if you go from /a to /b to /c initially, we'd consider those all same-origin. If /b happens to be sandboxed, it'd be weird if the navigation to /c and going back to /a would suddenly be seen as cross-origin I think.

[05:11:44.0324] <Jake Archibald>
/c to /a wouldn't be cross-origin, but /a to /b would be, right?

[05:13:52.0293] <annevk>
Jake Archibald: sorry, I meant if you navigate to /b (which you then discover to be sandboxed) and then go to /c or back to /a.

[05:15:57.0567] <Jake Archibald>
annevk: navigating from an opaque origin would always be a cross origin navigation, no?

[05:17:49.0964] <annevk>
Jake Archibald: yeah, true, I'm not sure what to make of this. Is app history even available on opaque origins?

[05:20:38.0677] <Jake Archibald>
annevk: Good question. I assumed yes, but it'd have no visibility of other entries since they're other-origin both forwards and back. I think history entries need an origin with app history because: /a to (same origin blob url) to /c - the final page should have visibility into the two history entries before it because they're contiguously same origin, even if the blob url is revoked. Domenic does that make sense?

[05:22:26.0881] <annevk>
A same-origin blob URL always has the origin in the URL itself, so even if it's revoked you get it. See also https://url.spec.whatwg.org/#origin.

[05:23:00.0589] <Jake Archibald>
ah, fair enough

[05:23:16.0939] <annevk>
Ah, except in the case where an opaque origin minted the blob URL. You could then get a blob URL that's same-origin with the opaque origin. But at that point I guess the question that's important is whether we want to support opaque origins at all.

[05:24:11.0544] <Jake Archibald>
I forgot that blob urls have an origin in them

[05:25:34.0535] <annevk>
(One oddity here is that while (same origin blob url) can have the same origin as /a, if it's revoked traversing to it will result in a document with an opaque origin (network error).)

[05:26:13.0448] <Jake Archibald>
Yeah, but redirects can happen too

[05:26:31.0497] <Jake Archibald>
there's no guarantee that a history entry will be the same origin when you traverse to it

[05:27:05.0083] <Jake Archibald>
hm, wait, I see what you mean

[05:27:17.0583] <Jake Archibald>
is it now an opaque origin history entry

[05:27:43.0412] <Jake Archibald>
that's an interesting question for app history in general

[05:35:41.0817] <Jake Archibald>
Ah ok, now I think it through, I don't think network error pages would change the origin of the history entry, in the same way it wouldn't change the referrer or form state

[05:39:35.0266] <annevk>
Yeah, didn't mean to send you astray

[06:04:19.0510] <annevk>
Jake Archibald: I realized just now that SVGOMG doesn't remove the version attribute

[06:07:10.0568] <Jake Archibald>
annevk: huh, it does on the demo image

[06:08:23.0936] <annevk>
Jake Archibald: view-source:https://resources.whatwg.org/logo-testutils.svg is my test

[06:09:30.0980] <annevk>
I've used your tool to optimize some of the new logos I created, but looking at the new SVGOMG today I realized it still had the version attribute

[06:15:22.0411] <Jake Archibald>
@annevk aha, so SVGO removes attributes that are set to their 'default', and it has the default as '1.1'

[06:15:29.0493] <Jake Archibald>
I'll file an issue with them

[06:16:35.0015] <annevk>
Jake Archibald: ah I see, I'm pretty sure browsers ignore this attribute completely

[06:18:00.0981] <miketayl_r>
> <@annevk:mozilla.org> miketayl_r: I think a web developer should be able to read a spec directly if they want and I also think that information in a specification addressed to them should be focused if possible (i.e., not introduce multiple ways of doing the same thing when one suffices), but I realize that is somewhat idealized

yeah - i used to read specs back when doing web-dev - i agree it should be useful. but yeah, also a challenge to to expect all editors to keep up with useful author-level guidance. i feel like good tech writing is harder than writing specs (i say this as someone who is skilled at neither)

[07:48:11.0240] <annevk>
Domenic: what prevents a CSS module script from working in a worker? It seems the standard doesn't branch anywhere at the moment.

[07:48:42.0866] <annevk>
Domenic: this was one of the things I raised in https://github.com/tc39/proposal-import-assertions/pull/111.

[07:48:57.0295] <annevk>
dandclark: ^^

[07:49:42.0068] <annevk>
Never mind, I see now:

> If the CSSStyleSheet interface is not exposed in setting's Realm, then return null.

[07:51:04.0179] <annevk>
Which I guess means things are being fetched still.

[08:10:25.0238] <Domenic>
> <@annevk:mozilla.org> Which I guess means things are being fetched still.

Oh true, we should probably fix that to not happen? If you file a bug I bet Dan will fix spec and write tests in short order :)

[08:12:51.0616] <annevk>
Yeah, I think it makes more sense that we claim it's not supported when we do the type check, similar to how you are proposing the new method to work. I'll file.

[08:45:10.0848] <annevk>
Jake Archibald: so if opaque origins cannot access app history, we could maybe not take sandboxing into account for the same origin check; sandbox + allow-same-origin could then participate fully, and sandbox without that would create a same origin entry, but wouldn't be able to look at entries itself

[08:46:29.0117] <annevk>
Jake Archibald: I think that also covers the error pages. The error pages do not get access (and cannot modify presumably), but they continue to be in the session history of the respective origin.

[08:51:09.0404] <Jake Archibald>
annevk: I don't think sandboxed pages can be same-origin for apphistory. Eg, if an opaque origin page does a `replaceState` type thing, isn't it a cross-origin leak to expose that new URL and state object to the other pages?

[08:52:22.0764] <annevk>
Jake Archibald: I meant sandbox + allow-same-origin

[08:53:19.0250] <Jake Archibald>
annevk: "sandbox without that would create a same origin entry" that's the bit I don't think works

[08:53:46.0583] <annevk>
Jake Archibald: ah, there's the legacy history APIs too

[08:54:18.0600] <Jake Archibald>
annevk: I think the issue is with the new APIs, but maybe I'm missing something

[08:54:47.0095] <annevk>
Jake Archibald: I was thinking that opaque origins wouldn't have access to session history

[08:55:16.0774] <annevk>
Jake Archibald: in such a setup, it would be okay if they were same origin for the purposes of session history, I think

[08:55:32.0838] <annevk>
Jake Archibald: but history.friends breaks it

[08:55:44.0716] <Jake Archibald>
annevk: or just a hash navigation

[08:56:17.0859] <Jake Archibald>
If an opaque origin page navigates to #super-secret, the non-opaque pages shouldn't be able to see that

[08:57:13.0168] <annevk>
Yeah, I don't really want to special case error pages and such though. Ideally they'd follow the same model.

[09:02:37.0429] <annevk>
I guess I'd be okay with network errors being somewhat weird as they are also somewhat unusual (and you could use a service worker if you worry about them).

[09:03:42.0170] <Jake Archibald>
annevk: yeah, there are other special cases that I don't think the current spec handles. Eg, error documents must always be discarded when traversing away.

[09:04:52.0427] <annevk>
Jake Archibald: ah, so that means we don't have to store an origin for them as they go away

[09:05:11.0655] <annevk>
Jake Archibald: but we'd have to store an origin for sandbox without allow-same-origin

[09:05:38.0700] <Jake Archibald>
annevk: agreed

[09:06:44.0379] <Domenic>
annevk: to confirm, you are OK with Firefox following Chrome's behavior for redirects to data:/etc., of an error page for both top-level and iframes? Instead of Firefox's behavior of staying on the current page sometimes?

[09:09:32.0061] <annevk>
Domenic: yeah

[09:41:47.0869] <GPHemsley>
annevk: We're finally getting somewhere https://wpt.fyi/results/mimesniff/mime-type-sniffing?pr=30403

[10:14:17.0137] <annevk>
Oh wow, that's so cool. Thanks for working on that!

[10:53:53.0649] <GPHemsley>
(turns out there are lot of places where nobody's following the spec...)

[12:34:45.0741] <GPHemsley>
annevk: Do we know if there's a comprehensive list of MIME types that UAs *must* support?

[12:44:26.0054] <GPHemsley>
(where "support" is loosely defined as "not prompt for download or otherwise redirect to another external app")

[14:11:12.0953] <miketayl_r>
[`text/jscript`]


2021-09-10
[19:17:35.0982] <sideshowbarker>
TabAtkins: Can you do a new pip release for Bikeshed? So I can get the https://github.com/tabatkins/bikeshed/pull/2134 change included

[19:18:33.0499] <sideshowbarker>
I do need an actual updated pip release to get that, right? Just doing `bikeshed update` doesn‚Äôt pull it in

[19:20:03.0361] <sideshowbarker>
Do you auto-release an updated pip package on some schedule? I mean at some point after there‚Äôs been an update to the sources

[19:22:23.0214] <TabAtkins>
No auto-release, I do it occasionally, and try to hit it a day or two after updates (partially to ensure I catch necessary changes like what happened ^_^). I'll take care of it tomorrow morning.

[19:22:41.0027] <sideshowbarker>
OK ‚Äî thanks

[19:22:43.0515] <TabAtkins>
On my short list is moving the boilerplates over to being `bikeshed update`-able, so I don't need to release a new pip version just for that

[19:22:57.0976] <sideshowbarker>
oh that would be very cool

[19:23:46.0172] <TabAtkins>
It would also mean the boilerplates would be in sync with the other test files, and not require rebasing tests just to be updated.

[19:24:51.0345] <sideshowbarker>
ah yeah I guess the test rebasing thing is something that‚Äôs a bit confusing to Bikeshed code contributors

[19:28:57.0065] <sideshowbarker>
anyway I agreed a long time back to get the WebAppSec TR copies set up to get auto-(re)published as CRDs on every push ‚Äî¬†so I‚Äôm overdue on actually making that happen

[19:29:49.0943] <sideshowbarker>
(I forgot what the D in CRD stands for, but anyway it‚Äôs the thing were calling ‚Äúevergreen‚Äù before and that rest of us just call Living Standards)

[19:35:25.0073] <sideshowbarker>
so once I have that boilerplate/webappsec/status-CRD.include file in, I can start trying to set those all up. (Tried already with the Secure Context spec ‚Äî¬†with the Status in the doc itself rather than from boilerplate ‚Äî but the W3C pubrules checker didn‚Äôt seem to recognize it‚Ä¶ The only way I‚Äôve found to troubleshoot errors running under CI with spec-prod/pubrules (Echidna or Specberus or whatever it‚Äôs actually call) is through trial-and-error. It doesn‚Äôt log any useful debug info

[23:27:38.0326] <annevk>
GPHemsley: there's no comprehensive list, media and fonts are kind of a mess; aside from that it might be doable, not sure

[06:26:49.0058] <GPHemsley>
annevk: Where do you suppose that list would live, if we did put one together?

[06:38:07.0060] <Ms2ger üíâüíâ>
iana

[06:38:09.0953] <Ms2ger üíâüíâ>
/me ü¶Ü

[08:14:51.0898] <zcorpan>
"Remove Clipboard API and Events, ContentEditable, Selection API, and Input Events from the Deliverables." anyone know what will happen to these specs? https://www.w3.org/2021/08/webapps-charter-2021.html

[08:20:29.0093] <Ms2ger üíâüíâ>
As little as before, probably

[10:27:47.0659] <TabAtkins>
sideshowbarker: version 3.0.4 published

[10:35:52.0708] <Sam Sneddon [:gsnedders]>
is there any way to detect whether a dictionary member is supported in general? I don't think so, given unknown dictionary members are ignored‚Ä¶ maybe something with a getter?

[10:43:24.0811] <miketayl_r>
in general seems hard... depending on what you're trying to detect support for, can you observe side effects?

[11:22:07.0379] <TabAtkins>
Using a getter is the only reliable way. I *think* known dict members are iterated over by default by the IDL marshalling? I'd have to double-check.

[11:28:24.0000] <Domenic>
Yep, they are, so yeah, a getter works

[11:29:07.0893] <Domenic>
The best trick is something like `{ get thingToDetect() { throw "supported"; }, get tthingAlphabeticallyAfterThingToDetect() { throw "not supported"; } }`

[11:29:23.0364] <Domenic>
As long as the thing you want to detect is not alphabetically last, that gives a general-purpose detection mechanism with no side effects.

[11:30:18.0971] <TabAtkins>
Why do you need the second throw? Isn't the absence of the first throw sufficient?

[11:30:31.0473] <Domenic>
The second throw prevents the method from going through in browsers that don't support the API

[11:30:36.0101] <Domenic>
I.e. prevents side effects

[11:30:56.0698] <TabAtkins>
Ahhhh yes, makes sense.

[11:31:13.0984] <Domenic>
(This technique is beautiful and I will take no further questions.)

[11:31:50.0426] <Domenic>
(but more seriously this is a long-running thread: https://github.com/heycam/webidl/issues/107 )


2021-09-11
[02:48:40.0282] <annevk>
GPHemsley: some combination of HTML/MIME Sniffing/Fetch, not sure; depends on where we end up needing it the most I guess

[07:02:28.0384] <GPHemsley>
annevk: Right now mimesniff says stuff like "User agents may implicitly extend this table to support additional MIME types." which seems bad for interop. And I'm writing some of the tests to say "I explicitly expect you to download this resource". So, in that context, it seems to me like a minimum list of supported MIME types (and maybe explicitly unsupported MIME types?) would be beneficial.

[14:16:39.0219] <GPHemsley>
annevk: Alright, calling this dev-complete. https://github.com/web-platform-tests/wpt/pull/30403

[14:18:24.0916] <GPHemsley>
jgraham, foolip: GitHub suggests you may also be stakeholders ^

[14:20:42.0330] <GPHemsley>
(Safari didn't want to run my tests)

[16:06:28.0836] <GPHemsley>
TabAtkins: The old (anolis) way of referencing other specs allowed "HTTP" to refer to the multiple RFCs involved: https://github.com/whatwg/xref/blob/c275b8f3c9d1ae654b42c3db5ad2c723e77c8e8e/references.json#L339-L369
It doesn't look like SpecRef supports that format? Is there any way to replicate it in Bikeshed?

[16:12:06.0969] <TabAtkins>
Nope, could you file an issue with details?

[16:13:42.0865] <GPHemsley>
at Bikeshed?


2021-09-12
[17:53:31.0322] <GPHemsley>
TabAtkins: Assuming yes, https://github.com/tabatkins/bikeshed/issues/2137

[17:53:51.0784] <GPHemsley>
TabAtkins: also filed https://github.com/tabatkins/bikeshed/issues/2136

[02:32:28.0292] <tusf>
I assume this is a good place to ask: I'm implementing a DOM structure for a project, and wanted to be clear of a couple things before diving into the spec (over 100 pages!).
First, are elements able to overlap reach other? I know that current HTML parsers quietly split up any overlapping inline elements, but is that due to the DOM's representation as a tree? I've seen an older spec that mentioned the DOM doesn't necessarily have to be a tree, and I.E. used to represent it more "flat"...
Second, related to that tangent, are there any good articles comparing different ways to represent a DOM? Came across linkedom, and has me interested in looking into non-tree implementations, mostly to be contrarian..

[02:33:51.0576] <tusf>
* I assume this is a good place to ask: I'm implementing a DOM structure for a project, and wanted to be clear of a couple things before diving into the spec (over 100 pages!).
First, are elements able to overlap each other? I know that current HTML parsers quietly split up any overlapping inline elements, but is that due to the DOM's representation as a tree? I've seen an older spec that mentioned the DOM doesn't necessarily have to be a tree, and I.E. used to represent it more "flat"... (But that's I.E., so...)
Second, related to that tangent, are there any good articles comparing different ways to represent a DOM? Came across linkedom, and has me interested in looking into non-tree implementations, mostly to be contrarian..


2021-09-13
[18:49:27.0178] <sideshowbarker>
> <@tabatkins:matrix.org> sideshowbarker: version 3.0.4 published

Thanks much ‚Äî that got me past the previous errors I was having with the Secure Context spec

[18:49:39.0570] <sideshowbarker>
‚Ä¶but now having new errors: https://github.com/w3c/webappsec-secure-contexts/runs/3582240315?check_suite_focus=true#step:3:607

[18:49:59.0352] <sideshowbarker>
> Copyright string does not match requirements

[18:50:26.0034] <sideshowbarker>
/me now tries to figure out from the the Copyright text is generated

[18:50:59.0463] <sideshowbarker>
/me finds `bikeshed/boilerplate/webappsec/copyright.include`

[18:54:27.0948] <TabAtkins>
Sigh, so many undocumented changes

[19:32:39.0950] <sideshowbarker>
TabAtkins: r? https://github.com/tabatkins/bikeshed/pull/2138 (with those changes, I can get locally-generated CRD of Secure Contexts to pass pubrules/specberus)

[19:33:00.0269] <sideshowbarker>
 * TabAtkins: r? https://github.com/tabatkins/bikeshed/pull/2138 (with those changes, I can get a locally-generated CRD of Secure Contexts to pass pubrules/specberus)

[23:26:08.0915] <annevk>
tusf: it's a tree. Not aware of articles, but in the early days linked list vs array for representing children was a topic.

[23:52:22.0478] <annevk>
Jake Archibald: re https://github.com/WICG/app-history/issues/167; what about the example I gave is not possible? I.e., you have a sandboxed document that can execute script. It creates a blob URL and navigates to that. How are those not two documents that are same-origin?

[00:37:26.0432] <Jake Archibald>
annevk ah, I missed your reference to blob URLs there

[04:17:27.0968] <Sam Sneddon [:gsnedders]>
> <@domenicdenicola:matrix.org> The second throw prevents the method from going through in browsers that don't support the API

but you need to know that the second throw _is_ supported, right? ‚òπÔ∏è

[04:17:58.0250] <Sam Sneddon [:gsnedders]>
> <@domenicdenicola:matrix.org> (but more seriously this is a long-running thread: https://github.com/heycam/webidl/issues/107 )

oh hey apparently I already thumbed up that! üòÜ

[08:30:56.0082] <jgraham>
So if, in a spec, I have an exception and want to create a stack trace, what kind of handwaving do these days? I assume that js still pretends that's not a thing. 

[08:37:27.0805] <Benjamin Gruenbaum>
Domenic: what would you think it would take for you to support a CancelToken like proposal (as in you personally - not as in Chrome/WHATWG or anyone else)? I'm asking because you have the most experience thinking about this problem (maybe Petka or Kris too? IDK).

[08:45:14.0515] <Benjamin Gruenbaum>
(Mainly interested because I'd love language-level sugar)

[08:52:37.0729] <Domenic>
> <@benjamin.gruenbaum:matrix.org> Domenic: what would you think it would take for you to support a CancelToken like proposal (as in you personally - not as in Chrome/WHATWG or anyone else)? I'm asking because you have the most experience thinking about this problem (maybe Petka or Kris too? IDK).

I think it would be net harmful for there to be a protocol now that we have a cross-environment standard object. So I can't really think of anything. Syntax-level support for AbortSignal would be nice but it should be through host hooks not through a protocol that allows a proliferation of different types.

[08:53:25.0154] <Domenic>
> <@jgraham_:matrix.org> So if, in a spec, I have an exception and want to create a stack trace, what kind of handwaving do these days? I assume that js still pretends that's not a thing.

There is a long-standing HTML issue about making this better, so nothing very good. I have been doing the following handwaving: https://wicg.github.io/app-history/#finalize-with-an-aborted-navigation-error step 4

[08:59:21.0040] <Benjamin Gruenbaum>
> <@domenicdenicola:matrix.org> I think it would be net harmful for there to be a protocol now that we have a cross-environment standard object. So I can't really think of anything. Syntax-level support for AbortSignal would be nice but it should be through host hooks not through a protocol that allows a proliferation of different types.

Hey, thanks for the super-quick reply. I'm wondering if there can still be a `then`able like interop with `AbortSignal` implementing that (doesn't have to be Ron's protocol exactly) so that the language can provide syntactic assist.

What would host-hooks look like? If that gives the capability for language-level syntax support and debugging help that would totally address the things I care about (similarly to async/await being easy to debug compared to raw-promises because of browser tooling)

[09:00:37.0421] <Domenic>
I think the `then` protocol was a bit of a mistake; it wasn't as useful for the transition as anticipated, and in the long term it isn't good to have different thenables in the ecosystem at all. I strongly believe we should not do a general protocol for new things like AbortSignal; instead everyone should use and collaborate on the single thing (i.e. AbortSignal).

[09:02:12.0376] <Domenic>
Host hooks would look like: HostAddAbortListener(signal, listener), which the DOM spec would define to use "add an abort algorithm" in web browsers/Node/Deno/etc. Then the ES spec could call HostAddAbortListener whenever it gets an AbortSignal from a developer and wants to add some abort steps.

[09:02:41.0733] <Domenic>
So for example that would easily allow you to add AbortSignal support to import()

[09:03:43.0898] <Domenic>
For syntax-level support it depends on what you mean. So far I have seen no real proposals for syntactic aborting that people generally agree as being workable or good. But if they use AbortSignal then some kind of host hook to abstract over AbortSignal vs. theoretical other-host cancel tokens would be fine.

[09:05:07.0946] <Domenic>
https://github.com/tc39/proposal-cancelable-promises/blob/0e769fda8e16bff0feffe964fddc43dcd86668ba/Cancel%20Tokens.md#advanced-usage-within-async-functions-awaitcanceltoken was my idea back in the day but nobody liked it in committee and I haven't seen a lot of demand for it since. So, shrug.

[09:08:14.0140] <Benjamin Gruenbaum>
Yeah I remember that proposal - if you recall I was very much in favour and I think not having third-state cancellation (except in like 2-3 places but don't tell anyone about generators!) is one of the biggest mistakes in the (modern) language IMO.

[09:09:10.0113] <Benjamin Gruenbaum>
I tend to agree about `then`ables, I've added a "consider native promises" banner to bluebird ¬±3 years ago - hopefully it's slowly dying soon. I still can't wrap my head around twilio using the Q V2 beta in production :D 

[09:11:48.0993] <Benjamin Gruenbaum>
And while mistakes were made around promises I think we can agree the value they brought to the language and the web ecosystem was/is tremendous and stuff like `then`ables and subclassable promises is somewhat unfortunate but negligible compared to the time saved.

[09:14:06.0340] <Benjamin Gruenbaum>
So if I understand correctly a possible concern is that if we have a `then` like cancellation protocol proposal the web would be stuck with two similar but slightly different APIs and if it's like promises the API we'd end up with _eventually_ is the language level one (i.e. `CancelToken`) with AbortSignal being eventually side-stepped and that API would be much harder to iterate or work on because the language moves slowly + it'd be confusing to developers?

With hooks on the other hand you'd still have the one API (AbortSignal)

[09:15:08.0841] <jgraham>
Domenic: Thanks, that's a useful reference point.

[09:15:09.0902] <Benjamin Gruenbaum>
 * So if I understand correctly a possible concern is that if we have a `then` like cancellation protocol proposal the web would be stuck with two similar but slightly different APIs and if it's like promises the API we'd end up with _eventually_ is the language level one (i.e. `CancelToken`) with AbortSignal being eventually side-stepped and that API would be much harder to iterate or work on because the language moves slowly + it'd be confusing to developers?

With hooks on the other hand you'd still have the one API (AbortSignal) and we'd be able to iterate on it effectively in WHATWG and not TC39.

[09:17:04.0522] <Benjamin Gruenbaum>
On a fun tangent - I recalled https://github.com/tc39/proposal-cancelable-promises/issues/14#issuecomment-227671239 when non-third-state cancellation woke me up a few weeks ago ^^

[09:18:40.0841] <Domenic>
Benjamin Gruenbaum: the concern is a bit different than that. The core goal is that we should have exactly one cancel token primitive. 2 (AbortSignal + whatever TC39 comes up with) is bad. But N (AbortSignal + a bunch of userland stuff using [Symbol.cancelToken]()) is also bad.

[09:19:21.0394] <Domenic>
Benjamin Gruenbaum: also it's just frustrating wasted effort that these people are busy fighting a turf war to get cancel tokens over in TC39 instead of working (like you!) to improve AbortSignal, which benefits all the same consumers (web, Node, Deno, anyone else who implements it, ...)

[09:23:43.0041] <Benjamin Gruenbaum>
Interesting, good points. I'm wondering if the concerns about `EventTarget` people have are still a big deal - EventTarget was a big part of the pushback against AbortSignal but now it seems all the platforms have it.

I am still not sure about composability (unfortunately I feel kind of stuck but we do need a `.follow` or a `new AbortSignal(...signals)` or similar API). It's also possible to iterate on EventTarget to add capabilities (like weak listeners) to enable it to compose.


[09:24:59.0159] <Benjamin Gruenbaum>
I think I am mostly convinced that host-hooks are a viable way forward without most of the downsides. Thanks!

[09:36:17.0355] <Marc Wensauer>
Here is suggested to use document.execCommand() API,  
https://html.spec.whatwg.org/multipage/interaction.html#editing-2
There shoudl be a note that it was deprecated
https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand

[09:39:04.0112] <sideshowbarker>
> <@daslicht:matrix.org> Here is suggested to use document.execCommand() API,  
> https://html.spec.whatwg.org/multipage/interaction.html#editing-2
> There shoudl be a note that it was deprecated
> https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand

You‚Äôre right. To fix that, you could raise a PR at https://github.com/whatwg/html/ with patch the removes that reference.

[09:39:28.0374] <sideshowbarker>
or I can if you want

[09:39:36.0286] <Marc Wensauer>
üëçÔ∏è

[09:39:43.0306] <Marc Wensauer>
yeh please do

[09:39:54.0623] <sideshowbarker>
OK will do it right now

[09:40:09.0008] <Marc Wensauer>
perfect thank you you very much 

[09:40:32.0664] <sideshowbarker>
cheers

[10:09:40.0247] <sideshowbarker>
Marc Wensauer: https://github.com/whatwg/html/pull/7064

[10:09:54.0168] <sideshowbarker>
I guess it‚Äôs unlikely that PR will be merged

[10:11:40.0932] <sideshowbarker>
but regardless of whether it is not, we won‚Äôt be un-deprecating it in MDN ‚Äî because what MDN has is consistent with what the execCommand spec itself says

[14:16:17.0323] <muffinkiller>
I think the process likt good and that in pattern, likt OP slicer ways from een 3d prindenter File. Lease Wait with Push of pull. The System is so massiv better then Yesterday.


2021-09-14
[19:12:43.0304] <tusf>
> <@annevk:mozilla.org> tusf: it's a tree. Not aware of articles, but in the early days linked list vs array for representing children was a topic.

Gotcha. Thought I'd try experimenting with a document representation that was non-hierarchical, but I suppose that would need something outside the DOM (or a specialized extension of it; based on Ranges, perhaps?)

[23:55:48.0036] <annevk>
Benjamin Gruenbaum: FWIW, composing AbortSignal objects is still something we should do, but we need someone to do the work essentially :-)

[23:56:43.0483] <annevk>
Benjamin Gruenbaum: there's also another tricky issue about making AbortSignal work well with timeouts, for which you really want to expose a cancel reason (or use a different exception, as XHR does)

[01:42:42.0184] <annevk>
Jake Archibald: for the issue you just filed you haven't explained what an "isolated browsing context group" is

[01:43:45.0292] <Jake Archibald>
annevk: I thought it'd be obvious it's https://html.spec.whatwg.org/multipage/browsers.html#cross-origin-isolation-mode, or do we have another form of isolation?

[01:44:31.0139] <annevk>
Okay, I was thinking it would be that, but I wasn't sure.

[01:44:40.0989] <Jake Archibald>
I'll add a note

[01:47:14.0922] <annevk>
Jake Archibald: also is it intentional that it's first about bcg and later about bc?

[01:51:46.0300] <Jake Archibald>
annevk: made some edits. Did I fix the bit you mean?

[01:55:39.0798] <annevk>
Jake Archibald: not the second question; the post seems to be about bcgs but the questions are about bcs

[01:56:04.0476] <Jake Archibald>
annevk: I thought it was impossible for a top level to change browsing context without also changing group?

[01:56:37.0486] <Jake Archibald>
And a browsing context cannot exist in two groups

[01:56:42.0866] <annevk>
Jake Archibald: yeah that is correct, maybe I'm being too pedantic 

[01:57:08.0193] <Jake Archibald>
I'll add those points in as asserts üòÄ

[01:58:23.0944] <Jake Archibald>
Added some clarifying text to question 1

[02:05:33.0376] <annevk>
Jake Archibald: so the main reason to care about bcg/bc identity is because of popups, right? Is there anything else you are concerned with here?

[02:07:10.0163] <annevk>
Jake Archibald: question 2 is rather complex; I would not expect identity to be preserved if they are not visited in order (e.g., if you visit something else in between). As in, the traversal is what causes the swap and if you then traverse to non-isolated and then to isolated again, two more swaps.

[05:12:41.0751] <annevk>
Glad we migrated away from Travis: https://twitter.com/peter_szilagyi/status/1437646118700175360

[11:13:17.0509] <sideshowbarker>
MDN PSA: as of a few moments ago, the sources for all the docs in the https://developer.mozilla.org/en-US/docs/Web/API tree are now in Markdown rather than HTML

[11:17:44.0574] <sideshowbarker>
And the all the https://developer.mozilla.org/en-US/docs/Web/JavaScript and https://developer.mozilla.org/en-US/docs/Web/CSS sources also got converted to Markdown recently, so that means the core of MDN reference docs is now all a lot more pleasant to work on and contribute to than it was before 

[11:19:31.0671] <sideshowbarker>
The https://developer.mozilla.org/en-US/docs/Web/HTTP and https://developer.mozilla.org/en-US/docs/Web/HTML trees and other remaining trees will soon be following

[11:25:45.0849] <bakkot>
is there a list somewhere of the shipped APIs that WHATWG/browsers would like to deprecate? I'm considering shipping something in the script I build for work which will touch a whole bunch of APIs, which would mess up any use counters (this script runs on a nontrivial fraction of all page loads across the web). if there's a list of APIs which are being considered for deprecation (or which have use counters for any other reason) I can try to avoid those.

[11:34:34.0790] <sideshowbarker>
bakkot: FWIW all data in https://github.com/mdn/browser-compat-data/tree/main/api has a true/false `deprecated` field that you could filter on to programmatically generate such a list

[11:44:27.0770] <bakkot>
sideshowbarker: that's helpful, thanks! but I'm also thinking of things like `alert`, which I don't think is formally deprecated but I know there is a desire to deprecate it

[11:44:53.0538] <bakkot>
(though `alert` itself is not one I would touch either way)

