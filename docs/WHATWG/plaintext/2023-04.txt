2023-04-01
[17:51:45.0367] <Domenic>
> <@aliaksandr.kalenik:matrix.org> hey, I am going through Navigables spec and got a bit confused by HTML document loading step: https://html.spec.whatwg.org/multipage/document-lifecycle.html#navigate-html which is 11.1 step in "Populating a session history entry".
> 
> I found https://github.com/whatwg/html/issues/8095#issue-1300437093 and see that the problem appears to be that Fetch callbacks got introduced but this part of spec hasn't been updated yet.
> 
> I'm curious if anyone can give a hint of how document loading might look with relevant Fetch spec taken into account. I have vague idea that processResponseEndOfBody should be specified to do something about firing "load" event (which is also confusing because document does not exist on the step that does fetch call so callback cannot capture it). And I am wondering on what step and using what mechanism response body should be piped into HTML parser.

My take last time I looked at this is that we'd use processResponse, incrementally read from the stream to feed it into the parser (replacing step 2), and when there's nothing more in the stream, do the end of step 2. It's not immediately clear how to fit this into an algorithm which currently does a synchronous return of _document_.

[17:53:34.0303] <Domenic>
Also it's not immediately clear how to fit this with the existing use of processResponse in https://html.spec.whatwg.org/multipage/browsing-the-web.html#create-navigation-params-by-fetching . But these problems are mostly about how to restructure the algorithms, ideally without making them even harder to read than they currently are.

[17:54:30.0118] <Domenic>
Hmm I guess maybe we just wouldn't use procesResponse in #navigate-html. We just use processResponse to save it into the navigation params, and then we can incrementally read it later. So that isn't a big deal.

[18:07:49.0140] <Alexander Kalenik>
> <@domenicdenicola:matrix.org> Hmm I guess maybe we just wouldn't use procesResponse in #navigate-html. We just use processResponse to save it into the navigation params, and then we can incrementally read it later. So that isn't a big deal.

thank you for having a look! yeah, reading in #navigate-html response saved in navigation params earlier in #create-navigation-params-by-fetching by procesResponse is the way I went for now.

[13:54:47.0307] <snek>
> <@annevk:matrix.org> snek: some stuff can take a long time for sure, but it's better to have it recorded than not recorded

i don't care about the time. the issue is the power dynamic. i really wish this standards body would reconsider how people who do not happen to be employed by apple or mozilla or google can actually drive improvements forward of their own volition.


2023-04-02
[17:44:25.0628] <Domenic>
snek: how do you anticipate this being done, if none of the browsers are interested in your change? Put stuff in standards which no browsers ship?

[17:45:44.0021] <Domenic>
Ultimately, we are writing standards about what those browsers ship. If we're not doing that, there's no point. Participation here is open and welcome (unlike other SDOs, no paying needed!) but yes, if you don't get your change agreed to be shipped by those organizations, you can't accomplish much.

[17:46:02.0820] <snek>
i've never had to beg browsers to want to implement my thing at tc39

[17:46:16.0698] <snek>
maybe take a look at their process

[17:46:59.0777] <Domenic>
Yes, you have. They've decided to agree, because language teams are generally sitting around looking for things to do, in my experience. (Sometimes they start whole new languages just to have something to do!)

[17:47:47.0989] <Domenic>
If they thought your thing was not worth their engineering time, they would object. That's how it works at the WHATWG too, it's just that instead of making someone stand up and say "I object", we require the proposer to get their affirmative consent

[17:48:14.0403] <snek>
whatever the case

[17:48:25.0878] <snek>
even walking to the browsers with spec, tests, and implementation work

[17:48:28.0837] <snek>
is not enough for whatwg

[17:48:40.0274] <snek>
i doubt there is a simple solution but

[17:48:47.0864] <snek>
the current process is insurmountable 

[17:48:50.0877] <Domenic>
Yep, it looks like you've had some browsers object to your feature. I'm sorry, but that happens, no matter the SDO.

[17:49:13.0643] <Domenic>
Many people surmount this; many features are shipped every release, including from non-employees. I'm sorry you had a bad experience once, but it's not representative.

[17:49:45.0086] <snek>
i mean there is a way it could get done

[17:49:49.0228] <snek>
i'm just not willing to do it

[17:50:08.0601] <snek>
its humiliating to have to crawl to some guys feet and ask him to pretty please consider my feature

[17:50:42.0020] <Domenic>
I guess at this point you're just being melodramatic, so this isn't a very productive conversation. I'll move on.

[17:51:07.0399] <snek>
lol

[18:43:47.0432] <Shane Brown>
Has my husband Shane brown been on here 

[23:02:15.0110] <annevk>
Is this about the WebSockets enhancement? I tend to agree I haven't seen a lot of ask for supporting non-ws(s) schemes there from web developers.

[23:07:21.0734] <annevk>
Hmm, apparently html5lib-tests doesn't discover change in attribute qualified name

[23:59:45.0843] <annevk>
And also, at least some html5lib test runners end up sorting attributes

[12:41:08.0468] <hacknorris>
someone knows why neither on chrome neither firefox this doesnt display like on your docs? 
```
<input type="range" name="a" list="a-values">
<datalist id="a-values">
<option value="10" label="Low">
<option value="90" label="High">
</datalist>
```

[12:41:42.0365] <hacknorris>
like from this part :https://html.spec.whatwg.org/multipage/input.html#range-state-(type=range) 

[12:42:16.0968] <hacknorris>
 * someone knows why neither on chrome (at me chromium tbh) neither firefox this doesnt display like on your docs?

```
<input type="range" name="a" list="a-values">
<datalist id="a-values">
<option value="10" label="Low">
<option value="90" label="High">
</datalist>
```

[12:51:06.0033] <hacknorris>
any1 why ?

[12:51:57.0059] <Andreu Botella>
those sections are notes, and they only give a suggested possible rendering

[12:52:35.0425] <hacknorris>
but 2 most popular browsers just ignore it ?

[12:52:42.0553] <hacknorris>
 * but why 2 most popular browsers just ignore it ?

[12:53:11.0182] <hacknorris>
(tbh - wanted to make similar to avoid hoards of css with content things and more js than needed..)

[12:54:19.0709] <evilpie>
at least you get tick marks in all Firefox and Chrome nowadays

[12:54:35.0046] <hacknorris>
in firfox i dont get, only chorme

[12:54:42.0362] <hacknorris>
 * in firefox i dont get, only chrome

[12:54:44.0365] <evilpie>
you are using some old version

[12:54:49.0474] <hacknorris>
nop

[12:54:51.0099] <hacknorris>
 * nope

[12:54:54.0927] <hacknorris>
moment

[12:56:59.0303] <evilpie>
 * at least you get tick marks in Firefox and Chrome nowadays

[12:57:47.0373] <hacknorris>
user agent of firfox : Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0

[12:57:54.0069] <hacknorris>
 * user agent of firefox : Mozilla/5.0 (X11; Linux x86\_64; rv:102.0) Gecko/20100101 Firefox/102.0

[12:58:05.0313] <hacknorris>
(taken quickly from console ;p)

[12:58:07.0897] <evilpie>
you need at least 109

[12:58:22.0617] <hacknorris>
ok, now i have hoards of reinstalls 😕

[12:59:35.0534] <hacknorris>
slackware moment

[12:59:47.0004] <hacknorris>
 * lfs/slackware moment

[12:59:53.0022] <hacknorris>
 * /spoiler lfs/slackware moment


2023-04-03
[14:59:44.0084] <canadahonk>
hey all, just wondering why sometimes maplike isn't used for some webidl interfaces even though they are called `...Map` and links to the ordered map? (specifically https://drafts.css-houdini.org/css-typed-om/#the-stylepropertymap)

[15:25:57.0145] <canadahonk>
looks like it is because it's a multimap: https://github.com/w3c/css-houdini-drafts/issues/139


2023-04-04
[20:28:16.0016] <莫言>
Hello everyone, I have a problem, in HTML

```
// this is ok 
document.body.onscroll = (e) => {console.log('xxx', e)} 
 // this is not working
document.body.addEventListener('scroll', (e) => { console.log(e)})
```


[03:26:15.0568] <Jake Archibald>
> <@jhoneybee:matrix.org> Hello everyone, I have a problem, in HTML
> 
> ```
> // this is ok 
> document.body.onscroll = (e) => {console.log('xxx', e)} 
>  // this is not working
> document.body.addEventListener('scroll', (e) => { console.log(e)})
> ```

You want to put the listener on the `Window`, not the body. https://jsbin.com/pitoqeg/edit?js,console,output

[04:24:07.0274] <annevk>
hsivonen: smaug: didn't you both ask me about https://github.com/web-platform-tests/wpt/pull/38199? Would be nice if it got reviewed

[05:32:31.0152] <hsivonen>
> <@annevk:matrix.org> hsivonen: smaug: didn't you both ask me about https://github.com/web-platform-tests/wpt/pull/38199? Would be nice if it got reviewed

Approved. Thanks.

[05:58:28.0471] <roman harsveld>
i like to learn to build my own websites but have no have no idea where I can learn html 

[05:59:10.0474] <roman harsveld>
i try html standard for learn 


2023-04-05
[17:39:22.0737] <bakkot>
streams question:

```
(async () => {
  let stream = new ReadableStream(
    {
      start(controller) {
          controller.enqueue(Promise.resolve(0)); // NOTE: enqueuing a promise
          controller.close();
      },
    },
  );
  for await (let item of stream) {
    console.log({ item });
  }
})();
```

(Streams are async iterable as of https://github.com/whatwg/streams/pull/980, though only FF has implemented as far as I know.)

Here, should the `console.log` be of `0` or of a Promise for `0`? If I'm reading the various specs right, it should be a Promise. FF has it as an actual 0. The original conversation about async iterators which yield promises (in the iterator result object) decided that it should be considered a contract violation to do so - see slide 27 of https://docs.google.com/presentation/d/1U6PivKbFO0YgoFlrYB82MtXf1ofCp1xSVOODOvranBM/edit#slide=id.g223fba4116_0_196

this is really an edge case, so maybe the "contract violation" is fine? it's not like the language enforces that contract. but if the intent is that it should be a Promise for 0, that probably warrants a WPT

[17:58:27.0638] <Alexander Kalenik>
a document loading question:

https://html.spec.whatwg.org/multipage/document-lifecycle.html#read-ua-inline
step 3 assumes there is "response" from which URL can be obtained but "response" is not listed in the parameters.
step 4 initialize navigationParams params with newly created response but step 5 that creates document using these navigationParams seems to assume that response always has non-empty URL.

am I missing something or there is a bug that "Loading a document for inline content that doesn't have a DOM" should accept url?

[18:00:30.0441] <Domenic>
> <@aliaksandr.kalenik:matrix.org> a document loading question:
> 
> https://html.spec.whatwg.org/multipage/document-lifecycle.html#read-ua-inline
> step 3 assumes there is "response" from which URL can be obtained but "response" is not listed in the parameters.
> step 4 initialize navigationParams params with newly created response but step 5 that creates document using these navigationParams seems to assume that response always has non-empty URL.
> 
> am I missing something or there is a bug that "Loading a document for inline content that doesn't have a DOM" should accept url?

Looks like a bug to me. I think we can just use about:blank though instead of passing in a URL.

[18:01:03.0262] <Domenic>
> <@bakkot:matrix.org> streams question:
> 
> ```
> (async () => {
>   let stream = new ReadableStream(
>     {
>       start(controller) {
>           controller.enqueue(Promise.resolve(0)); // NOTE: enqueuing a promise
>           controller.close();
>       },
>     },
>   );
>   for await (let item of stream) {
>     console.log({ item });
>   }
> })();
> ```
> 
> (Streams are async iterable as of https://github.com/whatwg/streams/pull/980, though only FF has implemented as far as I know.)
> 
> Here, should the `console.log` be of `0` or of a Promise for `0`? If I'm reading the various specs right, it should be a Promise. FF has it as an actual 0. The original conversation about async iterators which yield promises (in the iterator result object) decided that it should be considered a contract violation to do so - see slide 27 of https://docs.google.com/presentation/d/1U6PivKbFO0YgoFlrYB82MtXf1ofCp1xSVOODOvranBM/edit#slide=id.g223fba4116_0_196
> 
> this is really an edge case, so maybe the "contract violation" is fine? it's not like the language enforces that contract. but if the intent is that it should be a Promise for 0, that probably warrants a WPT

I think it'd be best if Web IDL enforced that such cases get unwrapped, like (IIRC) the relevant ES machinery does.

[18:02:31.0631] <bakkot>
there's not much ES machinery, but the closest things are async generators manually `yield`ing promises, and `for-await` over sync iterator of promises as in `for await (let item of [Promise.resolve(0)]) ...`, both of which do indeed unwrap

[18:03:06.0571] <Domenic>
Yes, this feels analogous to async generators manually `yield`ing promises

[18:04:39.0871] <bakkot>
unfortunately unwrapping means you have to `await` every value, which is kind of annoying. maybe there can be a check to see if the type of the iterator could be something `await`-able, so it's only in generic cases like the ReadableStream ctor rather than having to pay the cost of `await`ing for all async iterables? but on the other hand maybe not worth trying to optimize away the extra `await`.

[18:04:53.0211] <bakkot>
anyway, I'll open a webIDL issue

[18:15:21.0295] <bakkot>
done: https://github.com/whatwg/webidl/issues/1288

[18:15:42.0353] <bakkot>
(also added an edge case around error handling which occurred to me while writing it.)

[21:56:59.0891] <bakkot>
ah, turns out I misread the streams spec and in fact it already unboxes (or rather the "get the next iteration result" algorithm is phrased in terms of a promise for the value, so it'll flatten promises)

[21:57:55.0802] <bakkot>
 * ah, turns out I misread the streams spec and in fact it already unboxes (or rather, to be precise, the "get the next iteration result" algorithm is phrased in terms of a promise resolved with enqueued value, so it'll flatten promises)

[22:20:26.0885] <bakkot>
there is, alas, still a bug around the handling of rejected promises - https://github.com/whatwg/streams/issues/1266

[00:33:07.0201] <annevk>
Hmm, the encoding Standard has a lot of "lead X"

[00:33:15.0971] <annevk>
 * Hmm, the Encoding Standard has a lot of "lead X"

[07:22:03.0031] <roman harsveld>
i like to learn to build my own websites but have no have no idea where I can learn html 
i try html standard for learn 

[09:37:40.0866] <annevk>
hsivonen: mfreed: https://github.com/html5lib/html5lib-tests/pull/163 and https://github.com/html5lib/html5lib-tests/issues/137 would appreciate your review (and that of others interested in the HTML parser)

[10:35:24.0856] <zcorpan>
annevk: Ms2ger : interesting, "in select" vs "in select in table"?

[15:23:45.0590] <Ehsan Azari>
Hi all, how can I record and store event loops? Is there any way?

[15:24:09.0604] <Ehsan Azari>
 * Hi all, how can I record and store event loops as data? Is there any way?

[16:12:50.0656] <TabAtkins>
Hm, *is* it actually possible to define an interface that inherits from ObservableArray?


2023-04-06
[19:06:56.0011] <Domenic>
> <@tabatkins:matrix.org> Hm, *is* it actually possible to define an interface that inherits from ObservableArray?

Nope

[19:07:41.0856] <TabAtkins>
Huh, that's extremely unfortunate. It means it's impossible for us to upgrade older list-like interfaces into OA.

[19:08:24.0097] <Domenic>
It's possible someone could do the work to define that, but yeah, the idea was to use ObservableArray for all new things, since nobody has ever had the appetite to upgrade any old things

[19:27:40.0277] <TabAtkins>
Well "upgrade the old things" was a requirement for the CSSWG to agree to use OA for the new CSSStyleRule.cssRules attribute, so I guess I'll have to do the work to define that. ^^_

[19:27:44.0394] <TabAtkins>
 * Well "upgrade the old things" was a requirement for the CSSWG to agree to use OA for the new CSSStyleRule.cssRules attribute, so I guess I'll have to do the work to define that. ^_^

[19:28:11.0733] <TabAtkins>
(Which is extremely fair; it would be terrible API to have *some* .cssRules properties be the old version and some be the new.)

[19:28:45.0456] <TabAtkins>
I've also got that iterator work to finish up on WebIDL, so I'll just spend some time on that spec in general soon.

[19:34:19.0096] <Domenic>
> <@tabatkins:matrix.org> I've also got that iterator work to finish up on WebIDL, so I'll just spend some time on that spec in general soon.

I kind of thought that was in my court to review and have been feeling guilty... I feel a bit less bad if you say it's not finished up? :)

[19:34:37.0521] <TabAtkins>
I think I have some things to do? I'll see next week

[19:34:42.0427] <TabAtkins>
I'll ping if it's your fault

[19:36:39.0164] <Domenic>
> <@tabatkins:matrix.org> Well "upgrade the old things" was a requirement for the CSSWG to agree to use OA for the new CSSStyleRule.cssRules attribute, so I guess I'll have to do the work to define that. ^_^

Maybe start by opening an issue to discuss. There are at least two ways you could do it I can think of: something that does actual inheritance (so that `x.constructor.name === "CSSRuleList"`, `x.hasOwnProperty("push") === false`, but `x.hasOwnProperty("item") === true`), or something that changes the proxy that ObservableArray uses to have special behavior for the defined properties (i.e., instead of [[GetOwnProperty]] on `"item"` returning undefined/whatever gets stored there via normal property access, it returns some property descriptor for the method that we conjured up). Both are pretty subtle to actually define and I'm not sure which is best, or if there's a better third option...

[22:58:34.0776] <annevk>
zcorpan: that's not it, otherwise the second table wouldn't show up in one of the implementations; it's reset the insertion mode that does the wrong thing in Firefox (I think)

[23:07:12.0527] <zcorpan>
annevk: ok

[23:57:00.0923] <Ms2ger>
Huh, I wonder what I was doing to stumble upon https://github.com/html5lib/html5lib-tests/issues/137

[09:22:26.0651] <bkardell>
hey so I'm looking into resolving the :dir stuff in the spec / tests etc and I pulled up the current spec and was looking at it and... either it has a couple of errors or (also very plausible) I do not actually understand how to read these.. I'd like to know which is the case before I move forward too far... I think you can see in this screenshot the bit that is highlighted seems like it is impossible? there are a couple of these in the existing text

[09:25:25.0375] <bkardell>
(it looks like it is checking if an input or a text area are a document element which seems... strange?)

[09:33:07.0802] <bkardell>
 * (it _looks like_ it is checking if an input or a text area are a document element which seems... strange?)

[11:50:41.0354] <bkardell>
I guess the punchline of the above is I'd like to understand if anyone else I should open a bug/pr or can help me understand how I am reading it wrong?

[12:10:52.0841] <TabAtkins>
Yeah, that's kinda a weird way to phrase "element doesnt' have a parent", but that's what it's getting at.

[12:11:07.0248] <TabAtkins>
Like, it's absolutely an unlikely situation to occur, but it *can* if you do weird DOM stuff.

[12:11:29.0573] <TabAtkins>
Noam Rosenthal: Is <https://github.com/w3c/csswg-drafts/issues/1088> something in your wheelhouse still? Or do I need to load up that context and solve it myself?

[12:16:29.0974] <bkardell>
> <@tabatkins:matrix.org> Yeah, that's kinda a weird way to phrase "element doesnt' have a parent", but that's what it's getting at.

this is in reply to my thing?  But an element that doesn't have a parent isn't necessarily a document element?  we have several things that say "If the element has a parent element" couldn't we just say "If the element has no parent element"?

[12:17:11.0185] <TabAtkins>
bkardell: Isn't something a document element by definition if its parent is the document?

[12:17:23.0648] <TabAtkins>
(I might be wrong here, I'm not chasing definitions at the moment.)

[12:18:19.0879] <bkardell>
> The document element of a document is the element whose parent is that document, if it exists; otherwise null.

[12:19:14.0841] <bkardell>
so if you said 

> let x = document.createElement('div')

I think x's document element is null

[12:23:33.0287] <TabAtkins>
Right.

[12:23:52.0435] <TabAtkins>
Anyway I agree with you, I think it really does *mean* "doesn't have a parent".

[12:24:09.0907] <TabAtkins>
Since otherwise the definition doesn't give an answer to your case.


2023-04-07
[20:36:25.0710] <Noam Rosenthal>
> <@tabatkins:matrix.org> Noam Rosenthal: Is <https://github.com/w3c/csswg-drafts/issues/1088> something in your wheelhouse still? Or do I need to load up that context and solve it myself?

It wasn’t in my queue but happy to help

[23:37:01.0021] <sideshowbarker>
Looking at https://github.com/mdn/content/pull/25958/files about `method=dialog` for the `form` element when the `form` is a descendant of a `dialog` element, I don’t find where the spec states that when closing the `dialog`, there is a requirement for it to happen _“without submitting data or clearing the form”_.

[23:40:00.0723] <sideshowbarker>
What the spec seems to state instead is that if a `form` has `method=dialog` and the `form` is _not_ a descendant of a `dialog`, then in that case the form is not submitted.

[23:40:48.0224] <sideshowbarker>
(Though even in that case the spec doesn’t explicitly state any separate requirement about clearing the form.)

[23:43:29.0764] <sideshowbarker>
 * What the spec at https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fs-method seems to state instead is: If a `form` has `method=dialog` and the `form` is _not_ a descendant of a `dialog`, then in that case the form is not submitted.

[23:45:11.0055] <sideshowbarker>
 * Looking at https://github.com/mdn/content/pull/25958/files about `method=dialog` for the `form` element when the `form` is a descendant of a `dialog` element, and looking at the relevant algorithm in the spec at https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#form-submission-algorithm:attr-fs-method-dialog, I don’t find where the spec states that when closing the `dialog`, there is a requirement for it to happen _“without submitting data or clearing the form”_.

[23:49:00.0738] <sideshowbarker>
 * d’oh, nevermind — only just now I notice that the last substep of step 11 at https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#form-submission-algorithm:attr-fs-method-dialog is an early return…
(Will delete these messages, because it looks like maybe nobody else has read them yet anyway).

[00:52:48.0255] <Ms2ger>
https://html.spec.whatwg.org/multipage/dom.html#the-directionality

[00:53:27.0862] <Ms2ger>
bkardell: looks like it means element.parentNode?.nodeType == DOCUMENT_NODE

[05:59:39.0066] <bkardell>
> <@ms2ger:igalia.com> bkardell: looks like it means element.parentNode?.nodeType == DOCUMENT_NODE

I mean.. in my head the node type is what i was thinking too.. but Are you saying then the  thing i highlighted in my screenshot above is meaningful? Like.. If that is the whole document or something?

[06:00:42.0093] <Ms2ger>
It's phrased a bit weird, but I think it means "there exists a document d for which the element is d's "document element" (root element)

[10:11:18.0383] <TabAtkins>
The root question there tho, is, why is *that* condition being used, when it seems like the *intended* condition being checked for is "doesn't have a parent", given that the next and final step is to look at the parent's direction?


2023-04-09
[19:52:24.0366] <Alexander Kalenik>
hey, I ran into issue but not sure if it is fetch spec, navigables spec or me missing something:

Step 19.6 in https://html.spec.whatwg.org/multipage/browsing-the-web.html#create-navigation-params-by-fetching
"6. Otherwise, process the next manual redirect for fetchController."
has a note:
"This will result in calling the processResponse we supplied above, during our first iteration through the loop, and thus setting response."

but when I look into fetch spec it seems like processing of the next manual redirect cannot result in calling processResponse callback because, according to the fetch spec:
1. process manual redirect is set to https://fetch.spec.whatwg.org/#concept-http-redirect-fetch.
2. Last step 20 of "HTTP-redirect fetch" calls "main fetch" with fetchParams and true (true is for "redirect" param, correct?)
3. https://fetch.spec.whatwg.org/#concept-main-fetch does early return of response on step 13 ("If recursive is true, then return response.") because "HTTP-redirect fetch" passed redirect=true earlier.

https://fetch.spec.whatwg.org/#fetch-finale which is the only place that calls processResponse callback is never reached while processing manual redirect because main fetch did early return because redirect=true param is passed by "HTTP-redirect fetch".

am I missing something?


[21:11:36.0770] <Alexander Kalenik>
 * hey, I ran into issue but not sure if it is fetch spec, navigables spec or me missing something:

Step 19.6 in https://html.spec.whatwg.org/multipage/browsing-the-web.html#create-navigation-params-by-fetching
"6. Otherwise, process the next manual redirect for fetchController."
has a note:
"This will result in calling the processResponse we supplied above, during our first iteration through the loop, and thus setting response."

but when I look into fetch spec it seems like processing of the next manual redirect cannot result in calling processResponse callback because, according to the fetch spec:

1. process manual redirect is set to https://fetch.spec.whatwg.org/#concept-http-redirect-fetch.
2. Last step 20 of "HTTP-redirect fetch" calls main fetch with fetchParams and true" (true is for "redirect" param, correct?)
3. https://fetch.spec.whatwg.org/#concept-main-fetch does early return of response on step 13 ("If recursive is true, then return response.") because "HTTP-redirect fetch" passed redirect=true earlier.

https://fetch.spec.whatwg.org/#fetch-finale which is the only place that calls processResponse callback is never reached while processing manual redirect because main fetch did early return because redirect=true param is passed by "HTTP-redirect fetch".

am I missing something?

[21:12:03.0103] <Alexander Kalenik>
 * hey, I ran into issue but not sure if it is fetch spec, navigables spec or me missing something:

Step 19.6 in https://html.spec.whatwg.org/multipage/browsing-the-web.html#create-navigation-params-by-fetching
"6. Otherwise, process the next manual redirect for fetchController."
has a note:
"This will result in calling the processResponse we supplied above, during our first iteration through the loop, and thus setting response."

but when I look into fetch spec it seems like processing of the next manual redirect cannot result in calling processResponse callback because, according to the fetch spec:

1. process manual redirect is set to https://fetch.spec.whatwg.org/#concept-http-redirect-fetch.
2. Last step 20 of "HTTP-redirect fetch" calls main fetch with fetchParams and true (true is for "redirect" param, correct?)
3. https://fetch.spec.whatwg.org/#concept-main-fetch does early return of response on step 13 ("If recursive is true, then return response.") because "HTTP-redirect fetch" passed redirect=true earlier.

https://fetch.spec.whatwg.org/#fetch-finale which is the only place that calls processResponse callback is never reached while processing manual redirect because main fetch did early return because redirect=true param is passed by "HTTP-redirect fetch".

am I missing something?

[21:16:17.0382] <Alexander Kalenik>
I checked fetch spec commit history and in the past instead of "Return the result of running main fetch given fetchParams and true." there was "Return the result of performing a main fetch using request with recursive flag set if request's redirect mode is not manual". Specifying recursive=false if redirect mode is not manual solves the problem that I described above. Not sure why this addition has been removed from spec. Commit that changed the line https://github.com/whatwg/fetch/commit/12dd6fa8ca76bd3bdff0c65a0c5a84b3ca870c3d

[09:47:35.0070] <Dominic Farolino>
Hmm, I think you're right. It seems like HTTP-redirect fetch should not unconditionally call main fetch with "true", and if that's right, then I think this sentence is also wrong: https://fetch.spec.whatwg.org/#ref-for-process-response%E2%91%A2.

[11:14:15.0605] <Alexander Kalenik>
 * hey, I ran into issue but not sure if it is fetch spec, navigables spec or me missing something:

Step 19.6 in https://html.spec.whatwg.org/multipage/browsing-the-web.html#create-navigation-params-by-fetching
"6. Otherwise, process the next manual redirect for fetchController."
has a note:
"This will result in calling the processResponse we supplied above, during our first iteration through the loop, and thus setting response."

but when I look into fetch spec it seems like processing of the next manual redirect cannot result in calling processResponse callback because, according to the fetch spec:

1. process manual redirect is set to https://fetch.spec.whatwg.org/#concept-http-redirect-fetch.
2. Last step 20 of "HTTP-redirect fetch" calls main fetch with fetchParams and true (true is for "redirect" param, correct?)
3. https://fetch.spec.whatwg.org/#concept-main-fetch does early return of response on step 13 ("If recursive is true, then return response.") because "HTTP-redirect fetch" passed recursive=true earlier.

https://fetch.spec.whatwg.org/#fetch-finale which is the only place that calls processResponse callback is never reached while processing manual redirect because main fetch did early return because redirect=true param is passed by "HTTP-redirect fetch".

am I missing something?

[11:26:55.0136] <Alexander Kalenik>
> <@domfarolino:matrix.org> Hmm, I think you're right. It seems like HTTP-redirect fetch should not unconditionally call main fetch with "true", and if that's right, then I think this sentence is also wrong: https://fetch.spec.whatwg.org/#ref-for-process-response%E2%91%A2.

thank you for looking. I created an issue https://github.com/whatwg/fetch/issues/1629. Actually I tried changing HTTP-redirect to set recursive to false for manual redirect mode like it was in the spec before and then processResponse is called like navigation expects. could you share you thoughts on what is wrong with the sentence? for me it looks correct that processReponse should be called again after every next manual redirect.

[13:03:35.0812] <Dominic Farolino>
I think your logic is sound. Changing the last line of http-redirect-fetch to what it used to be seems good, but (1) I'm not sure if doing so would have any unwanted side effects from the steps that would run _after_ https://fetch.spec.whatwg.org/#ref-for-fetch-params-process-response%E2%91%A0, or (2) if the change to the current state was intentional and I'm just missing something ;) Anne is the expert here.


2023-04-10
[10:14:19.0366] <Noam Rosenthal>
Alexander Kalenik: good catch, I think the conclusion you and Dominic Farolino reached is correct. One of my commits may have caused this (when I refactored navigation redirects to use the manual redirect steps)

[10:30:46.0579] <bkardell: holidays 4/10>
It seems there are quite a lot of cases where getComputedStyle(.slottedThing).direction will give one answer but will match the opposite on slottedThing:dir  in both Chrome and WebKit... I mean, that should never be the case, right? Or am I misunderstanding why we'd want that to be the case?

[10:34:09.0650] <bkardell: holidays 4/10>
I'm trying to improve a lot of things about my own understanding about this as I am trying to come up with the spec text but then I write a bunch of tests and find "mixed" answers like that - I'm not sure why... feels like a bug, but I'd like to be certain. Also, assuming there should be only 1 answer - very curious in those cases which they meant it to be

[10:35:13.0708] <bkardell: holidays 4/10>
https://codepen.io/bkardell/pen/rNqaVQe. contains a few examples... 

[10:36:06.0331] <bkardell: holidays 4/10>
#5 and #7 have different answers like that in the same browser for chrome/webkit

[11:06:07.0580] <bkardell: holidays 4/10>
interesting they both have the _same_ discrepancy on those two - they computed style direction is ltr, but the style matches :dir(rtl)

[13:44:29.0028] <bkardell: holidays 4/10>
* It seems there are quite a lot of cases where getComputedStyle(.slottedThing).direction will give one answer but will match the opposite on the slottedThing:dir selector in both Chrome and WebKit... I mean, that should never be the case, right? Or am I misunderstanding why we'd want that to be the case?


2023-04-11
[17:19:59.0635] <emilio>
bkardell: holidays 4/10: Yes, that seems like a bug


2023-04-12
[02:34:18.0715] <sideshowbarker>
Jake Archibald: https://stackoverflow.com/questions/75968955/update-cache-file-if-last-modified-is-changed-in-service-worker

[02:35:19.0357] <Jake Archibald>
sideshowbarker: I think this is more a Workbox question, and I'm not at all familiar with that library

[02:45:48.0115] <Jake Archibald>
Gave a not-workbox specific reply https://stackoverflow.com/a/75994036/123395

[02:49:22.0155] <sideshowbarker>
> <@jakea:matrix.org> Gave a not-workbox specific reply https://stackoverflow.com/a/75994036/123395

Thanks much — I also added the `workbox` tag to the question

[02:57:14.0512] <sideshowbarker>
and heads-up: I might have some more Stack Overflow questions to ping you about later — I’m working through a bit of backlog right now (the time I’ve spent recently needing to help with moderate the huge number of ChatGPT spam answers has cut into the time I have free for finding good questions about web-platforms stuff in need of good answers)

[07:30:00.0177] <sideshowbarker>
Jake Archibald: https://stackoverflow.com/questions/75861825/service-worker-registration-error-scope-url-should-start-with-the-given-sc


2023-04-13
[21:06:06.0588] <sideshowbarker>
Running https://wpt.live/service-workers/service-worker/registration-iframe.https.html in Safari on an iOS 16.0 device, I notice it’s all fail — with this error message:
> undefined is not an object (evaluating 'navigator.serviceWorker.getRegistration')
In macOS/desktop Safari, those tests all pass.
Is this some known issue with SW on iOS?
I tried some searches but couldn’t find anything relevant.

[21:06:25.0307] <sideshowbarker>
 * Running https://wpt.live/service-workers/service-worker/registration-iframe.https.html in Safari on an iOS 16.0 device, I notice it’s all fail — with this error message:

> undefined is not an object (evaluating 'navigator.serviceWorker.getRegistration')

In macOS/desktop Safari, those tests all pass.
Is this some known issue with SW on iOS?
I tried some searches but couldn’t find anything relevant.

[21:07:12.0197] <sideshowbarker>
 * Running https://wpt.live/service-workers/service-worker/registration-iframe.https.html in Safari on an iOS 16.0 device, I notice it’s all fail — with this error message:

> undefined is not an object (evaluating 'navigator.serviceWorker.getRegistration')

In macOS/desktop Safari, those tests all pass.
Is this some known issue with SW registration on iOS?
I tried some searches but couldn’t find anything relevant.

[01:14:19.0618] <Noam Rosenthal>
Hey annevk! We discussed some of the pending beacon stuff internally, and reached two possible alternatives to how to follow the feedback make it more fetch-extensible: https://github.com/WICG/pending-beacon/issues/70#issuecomment-1506373481. Would love to hear your thoughts now that it's more settled.

[04:09:01.0074] <aiunusov>
Hello! Out of curiosity. Can anyone from Google answer what is the state of the Workers throttling feature? I found that kDedicatedWorkerThrottling is simply disabled. https://source.chromium.org/search?q=kDedicatedWorkerThrottling&sq=&ss=chromium 

[04:13:51.0414] <Domenic>
I think you have answered your own question?

[04:45:54.0488] <aiunusov>
I just would like to know the reason, why it's not enabled :)

[08:30:24.0937] <bkardell>
silly question... is there a reason/rule as to why sometimes the if'ing in the spec uses switch and sometimes it's just words?

[08:31:22.0007] <bkardell>
so like here, there are switch conditions and then inside one of those are more conditions, but just in text

[08:32:02.0775] <bkardell>
is there a reason that _shouldn't_ or at least couldnt be like this instead?

[08:32:33.0661] <bkardell>
(ignoring for a moment if I made a mistake in converting for the purposes of this example for a minute :))

[08:35:24.0756] <Ms2ger>
I guess it would be pretty hard to read if you had to put "or" between 30-word conditions

[08:35:47.0707] <Ms2ger>
Using switches more is possible, I guess

[08:52:50.0552] <bkardell>
Ms2ger: you're saying you'd prefer to read the second one? If so, me too and I'm wondering if there is a reason it _shouldnt_ be like that... I guess it's mainly a question to the main editors

[08:53:26.0413] <Ms2ger>
I think the first one would be worse if it wasn't a switch

[08:53:34.0810] <Ms2ger>
I don't care strongly between 1 and 2

[10:00:19.0343] <Magician>
Hi Is it possible to make a suggestion to the html consortium?

[11:00:16.0857] <bkardell>
 * is there a reason that _shouldn't_ or at least couldnt be like this instead? Domenic annevk 

[11:08:06.0454] <annevk>
Noam Rosenthal: I can look Monday most likely, maybe ping then if I'm slow

[11:09:32.0093] <annevk>
bkardell: depends on readability, not sure either of those are particularly great examples at that though


2023-04-14
[04:32:03.0710] <smaug>
are setTimeout/setInterval somehow exposed to ShadowRealms?

[04:33:09.0231] <smaug>
oh, nm, AbortSignal's timeout isn't anyhow

[05:20:19.0003] <annevk>
smaug: I guess we don't want to require an event loop there?

[05:25:58.0806] <smaug>
yeah

[05:27:42.0644] <Andreu Botella>
my understanding was that `setTimeout`/`setInterval` were intended to be exposed, but that would need defining a `ShadowRealmGlobalScope` which hasn't happened yet

[05:28:49.0284] <annevk>
Andreu Botella: interesting, but wouldn't that make it less shadowy as it would expose the ambient event loop? I guess that kinda happens anyway

[05:29:14.0521] <smaug>
I wonder what will not be exposed in shadow realms

[05:29:39.0004] <annevk>
Also, I'm pretty sure that `ShadowRealmGlobalScope` became a requirement per the latest discussion on the HTML PR?

[14:37:00.0455] <TabAtkins>
sideshowbarker: It looks like <https://github.com/w3c/mdn-spec-links> has to be manually updated, rather than auto-updating on a cron or something, is that right? (Last commit was Oct last year.) If so, could you kick off an update?

[14:37:45.0656] <sideshowbarker>
> <@tabatkins:matrix.org> sideshowbarker: It looks like <https://github.com/w3c/mdn-spec-links> has to be manually updated, rather than auto-updating on a cron or something, is that right? (Last commit was Oct last year.) If so, could you kick off an update?

Will do today, yes


2023-04-17
[17:52:40.0349] <sideshowbarker>
> <@tabatkins:matrix.org> sideshowbarker: It looks like <https://github.com/w3c/mdn-spec-links> has to be manually updated, rather than auto-updating on a cron or something, is that right? (Last commit was Oct last year.) If so, could you kick off an update?

I worked on the mdn-spec-links over the weekend but still have a handful of related changes I need to make before I can the spec json files properly updated.
Basically, the build is CI-automated such that every time a change is made the BCD or MDN sources, if that change affects any of the mdn-spec-links data, the CI generates a new PR that I then review and merge.
However, the CI build first does a check to verify that all the URLs and fragment IDs in the spec links in BCD still exist — and if it finds any that don’t exist, the build errors and get a notification and then I need to fix the broken URLs/fragments, with PRs upstream in BCD.
And things like big “Navigation and session history rewrite” (navigables) change to the HTML spec can really generate a lot of links that need to be fixed — in that case, for example, it caused the filename part of dozens of BCD URLs to change to `nav-history-apis.html`, so I needed to fix all those in BCD in order to get my build working again.
And other such cases, with other specs.
But anyway, I only have a few left to fix, and I should be able to get them done today, and everything will then hopefully be back to normal again (as far as my CI generating mergeable PRs that are all green).

[17:56:17.0655] <sideshowbarker>
smaug: https://bugzilla.mozilla.org/show_bug.cgi?id=1828286 looks like an interesting FF issue with fetches from iframes getting add to history unexpectedly, and in turn causing the back button to not take the user back to where they’d expect (or really, not seeming to the user to take them back to anywhere at all)
https://stackoverflow.com/questions/76026846/how-to-work-around-firefox-adding-fetches-from-iframes-to-user-s-browser-history is a related Stack Overflow Q&A

[17:56:55.0094] <sideshowbarker>
 * smaug: https://bugzilla.mozilla.org/show\_bug.cgi?id=1828286 looks like an interesting issue with FF adding fetches from iframes to history unexpectedly — and in turn causing the back button to not take the user back to where they’d expect (or really, not seeming to the user to take them back to anywhere at all)
https://stackoverflow.com/questions/76026846/how-to-work-around-firefox-adding-fetches-from-iframes-to-user-s-browser-history is a related Stack Overflow Q&A

[17:58:40.0533] <sideshowbarker>
> <@tabatkins:matrix.org> sideshowbarker: It looks like <https://github.com/w3c/mdn-spec-links> has to be manually updated, rather than auto-updating on a cron or something, is that right? (Last commit was Oct last year.) If so, could you kick off an update?

 * I worked on the mdn-spec-links build over the weekend but still have a handful of related changes I need to make before I can the spec json files properly updated.
Basically, the build is CI-automated such that every time a change is made the BCD or MDN sources, if that change affects any of the mdn-spec-links data, the CI generates a new PR that I then review and merge.
However, the CI build first does a check to verify that all the URLs and fragment IDs in the spec links in BCD still exist — and if it finds any that don’t exist, the build errors and get a notification and then I need to fix the broken URLs/fragments, with PRs upstream in BCD.
And things like big “Navigation and session history rewrite” (navigables) change to the HTML spec can really generate a lot of links that need to be fixed — in that case, for example, it caused the filename part of dozens of BCD URLs to change to `nav-history-apis.html`, so I needed to fix all those in BCD in order to get my build working again.
And other such cases, with other specs.
But anyway, I only have a few left to fix, and I should be able to get them done today, and everything will then hopefully be back to normal again (as far as my CI generating mergeable PRs that are all green).

[17:59:51.0657] <sideshowbarker>
 * I worked on the mdn-spec-links build over the weekend but still have a handful of related changes I need to make before I can the spec json files properly updated.
Basically, the build is CI-automated such that every time a change is made the BCD or MDN sources, if that change affects any of the mdn-spec-links data, the CI generates a new PR that I then review and merge.
However, the CI build first does a check to verify that all the URLs and fragment IDs in the spec links in BCD still exist — and if it finds any that don’t exist, the build fails and I need to fix the broken URLs/fragments, with PRs upstream in BCD to get the build working again.
And things like big “Navigation and session history rewrite” (navigables) change to the HTML spec can really generate a lot of links that need to be fixed — in that case, for example, it caused the filename part of dozens of BCD URLs to change to `nav-history-apis.html`, so I needed to fix all those in BCD in order to get my build working again.
And other such cases, with other specs.
But anyway, I only have a few left to fix, and I should be able to get them done today, and everything will then hopefully be back to normal again (as far as my CI generating mergeable PRs that are all green).

[18:00:33.0362] <sideshowbarker>
 * I worked on the mdn-spec-links build over the weekend but still have a handful of related changes I need to make before I can get the spec json files properly updated.
Basically, the build is CI-automated such that every time a change is made the BCD or MDN sources, if that change affects any of the mdn-spec-links data, the CI generates a new PR that I then review and merge.
However, the CI build first does a check to verify that all the URLs and fragment IDs in the spec links in BCD still exist — and if it finds any that don’t exist, the build fails and I need to fix the broken URLs/fragments, with PRs upstream in BCD to get the build working again.
And things like big “Navigation and session history rewrite” (navigables) change to the HTML spec can really generate a lot of links that need to be fixed — in that case, for example, it caused the filename part of dozens of BCD URLs to change to `nav-history-apis.html`, so I needed to fix all those in BCD in order to get my build working again.
And other such cases, with other specs.
But anyway, I only have a few left to fix, and I should be able to get them done today, and everything will then hopefully be back to normal again (as far as my CI generating mergeable PRs that are all green).

[18:01:44.0790] <sideshowbarker>
 * I worked on the mdn-spec-links build over the weekend but still have a handful of related changes I need to make before I can get the spec json files properly updated.

Basically, the build is CI-automated such that every time a change is made the BCD or MDN sources, if that change affects any of the mdn-spec-links data, the CI generates a new PR that I then review and merge.

However, the CI build first does a check to verify that all the URLs and fragment IDs in the spec links in BCD still exist — and if it finds any that don’t exist, the build fails. And to get the build workin again, I need to fix the broken URLs/fragments, with PRs upstream in BCD.

And things like big “Navigation and session history rewrite” (navigables) change to the HTML spec can really generate a lot of links that need to be fixed — in that case, for example, it caused the filename part of dozens of BCD URLs to change to `nav-history-apis.html`, so I needed to fix all those in BCD in order to get my build working again.
…And other such cases, with other specs.

But anyway, I only have a few left to fix, and I should be able to get them done today, and everything will then hopefully be back to normal again (as far as my CI generating mergeable PRs that are all green).

[18:02:06.0975] <sideshowbarker>
 * I worked on the mdn-spec-links build over the weekend but still have a handful of related changes I need to make before I can get the spec json files properly updated.

Basically, the build is CI-automated such that every time a change is made the BCD or MDN sources, if that change affects any of the mdn-spec-links data, the CI generates a new PR that I then review and merge.

However, the CI build first does a check to verify that all the URLs and fragment IDs in the spec links in BCD still exist — and if it finds any that don’t exist, the build fails. And to get the build working again, I need to fix the broken URLs/fragments, with PRs upstream in BCD.

And things like big “Navigation and session history rewrite” (navigables) change to the HTML spec can really generate a lot of links that need to be fixed — in that case, for example, it caused the filename part of dozens of BCD URLs to change to `nav-history-apis.html`, so I needed to fix all those in BCD in order to get my build working again.
…And other such cases, with other specs.

But anyway, I only have a few left to fix, and I should be able to get them done today, and everything will then hopefully be back to normal again (as far as my CI generating mergeable PRs that are all green).

[18:02:33.0586] <sideshowbarker>
 * I worked on the mdn-spec-links build over the weekend but still have a handful of related changes I need to make before I can get the spec json files properly updated.

Basically, the build is CI-automated such that every time a change is made the BCD or MDN sources, if that change affects any of the mdn-spec-links data, the CI generates a new PR that I then review and merge.

However, the CI build first does a check to verify that all the URLs and fragment IDs in the spec links in BCD still exist — and if it finds any that don’t exist, the build fails. And to get the build working again, I need to fix the broken URLs/fragments, with PRs upstream in BCD.

And things like big “Navigation and session history rewrite” (navigables) change to the HTML spec can really generate a lot of links that need to be fixed — in that case, for example, it caused the filename part of dozens of BCD URLs to change to `nav-history-apis.html`, so I needed to fix all those in BCD in order to get my build working again.
…And other such cases, with other specs.

But anyway, I only have a few broken URLs/fragments left to fix, and I should be able to get them done today, and everything will then hopefully be back to normal again (as far as my CI generating mergeable PRs that are all green).

[21:04:52.0927] <Domenic>
I think the fetch is a red herring and it's setting the child src that creates a new history entry (which is per spec)

