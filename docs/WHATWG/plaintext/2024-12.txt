2024-12-01
[22:36:14.0880] <annevk>
Curious, is it obvious to everyone that `importNode()` clones from its name?

[00:52:28.0843] <Noam Rosenthal>
> <@annevk:matrix.org> Curious, is it obvious to everyone that `importNode()` clones from its name?

No. It’s not *that* surprising but also not obvious I guess 

[09:17:25.0994] <Yagiz Nizipli>
small community update from ada-url.com: we added URLSearchParams to Ada on v2.9.0. right now, I’m working on adding URLSearchParams to Ada’s Rust crate. https://github.com/ada-url/rust/pull/57


2024-12-02
[16:24:43.0976] <leoisverycool>
Apologies if this is a common question -- I searched the FAQ but I don't _think_ I saw anything https://github.com/whatwg/html/blob/main/FAQ.md

Is there a canonical representation of the HTML _spec_ as opposed to the IDL (for example, the spec would specify that the `type` on a `button` is an "enumerated attribute" as opposed to a DOM string [which the IDL says])?

[16:25:25.0368] <leoisverycool>
Certainly I could parse https://github.com/whatwg/html/blob/main/source and while it's not "hard" it's a non-trivial task

[16:26:03.0816] <leoisverycool>
 * Apologies if this is a common question -- I searched the FAQ but I don't _think_ I saw anything https://github.com/whatwg/html/blob/main/FAQ.md

Is there a canonical representation of the HTML _spec_ **in a machine readable-format** like XML or JSON as opposed to the IDL (for example, the spec would specify that the `type` on a `button` is an "enumerated attribute" as opposed to a DOM string \[which the IDL says\])?

[16:26:24.0060] <leoisverycool>
 * Apologies if this is a common question -- I searched the FAQ but I don't _think_ I saw anything https://github.com/whatwg/html/blob/main/FAQ.md

Is there a canonical representation of the HTML _spec_ **in a machine readable-format** like XML or JSON as opposed to the IDL (for example, the spec would specify that the `type` on a `button` is an "enumerated attribute" that can take "button" "submit", etc. as opposed to a DOM string \[which the IDL says\])?

[16:27:35.0046] <leoisverycool>
There are quite a few scattered efforts out there -- e.g. https://github.com/tawesoft/html5spec

[16:28:16.0298] <leoisverycool>
Certainly I would imagine MDN does this to prepare their documentation -- but it's not immediately clear to me how or if they do that without studying their build process a lot more

[16:29:22.0421] <leoisverycool>
 * Apologies if this is a common question -- I searched the FAQ but I don't _think_ I saw anything https://github.com/whatwg/html/blob/main/FAQ.md

Is there a canonical representation of the HTML _spec_ **in a machine readable-format** like XML or JSON as opposed to the IDL? 

For example, the spec would specify that the `type` on a `button` is an "enumerated attribute" that can take "button" "submit", etc. as opposed to the IDL, which specifies a DOM String 

[16:49:32.0692] <akaster (OOO 🦃)>
if you want to parse `source`, you'd be best off using or extending wattsi https://github.com/whatwg/wattsi

[17:34:01.0334] <Domenic>
There is no such machine-readable format besides the source itself.

[18:34:30.0205] <leoisverycool>
>if you want to parse source, you'd be best off using or extending wattsi https://github.com/whatwg/wattsi

That makes sense. I had a look at I am impressed it is maintained and in Pascal. I agree that parsing wattsi sources (and potentially using wattsi itself) makes sense due to the useful `dfn`tag especially. For example in the case of `button`, it is helpful that `dfn` holds context for attributes:

```
  <table>
   <thead>
    <tr>
     <th> Keyword
     <th> State
     <th> Brief description
   <tbody>
    <tr>
     <td><dfn attr-value for="button/type"><code
     data-x="attr-button-type-submit">submit</code></dfn>
     <td><span data-x="attr-button-type-submit-state">Submit Button</span>
     <td>Submits the form.
    <tr>
     <td><dfn attr-value for="button/type"><code data-x="attr-button-type-reset">reset</code></dfn>
     <td><span data-x="attr-button-type-reset-state">Reset Button</span>
     <td>Resets the form.
    <tr>
     <td><dfn attr-value for="button/type"><code
     data-x="attr-button-type-button">button</code></dfn>
     <td><span data-x="attr-button-type-button-state">Button</span>
     <td>Does nothing.
  </table>
  <table>
   <thead>
    <tr>
     <th> Keyword
     <th> State
     <th> Brief description
   <tbody>
    <tr>
     <td><dfn attr-value for="button/type"><code
     data-x="attr-button-type-submit">submit</code></dfn>
     <td><span data-x="attr-button-type-submit-state">Submit Button</span>
     <td>Submits the form.
    <tr>
     <td><dfn attr-value for="button/type"><code data-x="attr-button-type-reset">reset</code></dfn>
     <td><span data-x="attr-button-type-reset-state">Reset Button</span>
     <td>Resets the form.
    <tr>
     <td><dfn attr-value for="button/type"><code
     data-x="attr-button-type-button">button</code></dfn>
     <td><span data-x="attr-button-type-button-state">Button</span>
     <td>Does nothing.
  </table>
```


[18:36:54.0325] <leoisverycool>
Although I don't have a specific suggestion in mind, are maintainers of `wattsi` open to contributions that would _extendi_ the language at all? I don't have anything specific in mind at the moment, but something that could potentially help the robustness of such a parser for subsequent updates to the standard.

[18:37:02.0290] <leoisverycool>
 * Although I don't have a specific suggestion in mind, are maintainers of `wattsi` open to contributions that would _extend_ the language at all? I don't have anything specific in mind at the moment, but something that could potentially help the robustness of such a parser for subsequent updates to the standard.

[18:37:08.0680] <leoisverycool>
 * Although I don't have a specific suggestion in mind, are maintainers of `wattsi` open to contributions that would _extend_ the language? I don't have anything specific in mind at the moment, but something that could potentially help the robustness of such a parser for subsequent updates to the standard.

[18:42:30.0915] <leoisverycool>
For example, I could envision a collection of tags that could be used to articulate each dom element, would retain searchability within `wattsi` sources, yet could reduce boilerplate.

[18:43:25.0191] <leoisverycool>
 * For example, I could envision a collection of tags that could be used to articulate each dom element, would retain searchability within `wattsi` sources, yet could reduce boilerplate and enhance parseability.

[18:43:32.0897] <leoisverycool>
 * For example, I could envision a collection of tags that could be used to articulate each dom element, would retain searchability within `wattsi` sources, yet could reduce boilerplate while enhancing parseability.

[18:43:44.0784] <leoisverycool>
 * For example, I could envision a collection of tags that could be used to articulate each dom element, while retaining searchability within `wattsi` sources, yet could reduce boilerplate while enhancing parseability.

[18:46:13.0250] <leoisverycool>
 * For example, I could envision a collection of tags that could be used to articulate each dom element, while retaining searchability within `wattsi` sources and could reduce boilerplate while enhancing parseability.

[18:53:11.0417] <leoisverycool>
Here is a very rough example:

```
<h4 split-filename="form-elements">The <dfn element><code>button</code></dfn> element</h4>

<element name="button">
  <categories>
    Flow content, Phrasing content, Interactive content, Palpable content
    Listed, Labelable, Submittable, Autocapitalize-and-autocorrect inheriting
  </categories>

  <contexts>
    Where phrasing content is expected
  </contexts>

  <content-model>
    Phrasing content, no interactive content descendant, no tabindex attribute descendant
  </content-model>

  <attributes>
    Global attributes
    disabled, form, formaction, formenctype, formmethod, formnovalidate, formtarget
    name, popovertarget, popovertargetaction, type, value
  </attributes>

  <accessibility>
    <link href="https://w3c.github.io/html-aria/#el-button">For authors</link>
    <link href="https://w3c.github.io/html-aam/#el-button">For implementers</link>
  </accessibility>
...
```

[18:53:55.0408] <leoisverycool>
I very much doubt it -- but appreciate your consideration

[18:54:09.0748] <leoisverycool>
 * I very much doubt it -- but very much appreciate your consideration. 

[18:54:27.0348] <leoisverycool>
 * I would doubt it for many reasons -- but very much appreciate your consideration. 

[18:54:55.0775] <leoisverycool>
[this isn't quite right -- but perhaps conveys the idea]

[19:41:30.0542] <Domenic>
Yes, we're quite open to that. Although it'd be even better if it could be done in the new Rust pre-processor layer, which is in a more well-known language and has nice things like unit tests. I'd be ideal if eventually we moved everything from Wattsi to Rust.

See this example issue for one such project (not quite what you're looking for, but gives an idea): https://github.com/whatwg/html-build/issues/293

See here for the Rust layer: https://github.com/whatwg/html-build/blob/main/src/main.rs

See here for some previous discussion of machine-readable stuff: https://github.com/whatwg/wattsi/issues/146 + https://github.com/whatwg/html/issues/1246

[21:35:29.0443] <leoisverycool>
Thank you so much

[21:36:04.0151] <leoisverycool>
Is there openness to moving wattsi in its entirety over to Rust? ie matching the same existing spec

[21:36:20.0191] <leoisverycool>
 * Aside: is there interest in moving wattsi in its entirety over to Rust? ie matching the same existing spec

[21:36:31.0950] <leoisverycool>
 * Aside: is there interest in moving wattsi in its entirety over to Rust? for example, also matching the same existing spec

[21:36:36.0421] <leoisverycool>
 * Aside: is there interest in moving wattsi in its entirety over to Rust? for example, also matching the existing spec

[21:37:09.0048] <leoisverycool>
 * Aside: is there interest in moving wattsi in its entirety over to Rust? for example matching the existing spec

[21:37:17.0375] <leoisverycool>
 * Aside: is there interest in moving wattsi in its entirety over to Rust? Matching the existing spec

[21:37:26.0679] <leoisverycool>
 * Aside: is there interest in moving wattsi in over to Rust? Matching the existing spec

[21:39:28.0150] <leoisverycool>
 * ~Aside: is there interest in moving wattsi in over to Rust? Matching the existing spec~

Edit: re-read, looks like yes

> I'd be ideal if eventually we moved everything from Wattsi to Rust.

[21:39:58.0946] <leoisverycool>
[oh wow, I had no idea hixie worked on this back in the day.]

[22:04:18.0942] <leoisverycool>
Minor patch https://github.com/whatwg/wattsi/pull/164

[22:04:35.0089] <leoisverycool>
 * Minor patch https://github.com/whatwg/wattsi/pull/164 cc/ Domenic 

[05:24:49.0268] <Kaiido>
Small curiosity, can a node's children ever not be "in tree order"? Asking because at least in [node insert](https://dom.spec.whatwg.org/#concept-node-insert), it's asked to iterate over a DocumentFragment's children in tree order and that seemed redundant, but maybe it's not.

[07:03:06.0023] <Ms2ger>
No, that's just saying if you have a node with children [a, b, c], you should work on a first, then b, then c

[08:08:08.0781] <bkardell>
Ian Hickson: https://www.software.hixie.ch/utilities/js/live-dom-viewer/ doesn't seem to be responding

[08:08:58.0514] <bkardell>
I guess this could have been a dm, but maybe someone else knows or can help :)

[08:09:29.0597] <bkardell>
 * I guess this could have been a dm, but maybe someone else knows something (like the host is generally having troubles) or can help :)

[08:10:28.0727] <bkardell>
 * Ian Hickson: https://www.software.hixie.ch/utilities/js/live-dom-viewer/ doesn't seem to be responding (indeed your domain in general)

[09:59:33.0761] <jay.herry77>
If you’re all this payment method and you needs some cash 💵 just clink on my link and join my telegram group 👍👍👍👍🙏🙏

👇👇👇👇👇👇👇👇👇👇

Cashapp? Chime Apple Pay? pal? Venmo? BOA? Wells Fargo? Join my channel now
Got any of these
Chase?
BOA?
Wells Fargo?
Navy federal?
Capital one?
Truist?
Att &t?
PNC?
TD bank?
Credit union?
M&T bank?
Santander bank?
Northwest bank?
Or any other local Bank
JOIN MY CHANNEL NOW TO GET PAID!!✅
Join the telegram channel

👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇

https://t.me/+ioqje81ziAYyYTc0

https://t.me/+ioqje81ziAYyYTc0

👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆

@EVERYBODY @EVERYBODY @EVERBODY @EVERYBODY

[10:40:36.0674] <zcorpan (OOO 22 Nov)>
How do we want to handle https://github.com/whatwg/html/pull/10557 ? It looks like the boxes in OP are ticked, but it's not clear if it's web compatible yet, and there was at least one crbug filed about <select><input> (https://issues.chromium.org/issues/379612186) cc annevk

(For https://issues.chromium.org/issues/379034733#comment6 , that should be fixed in the spec PR, but maybe not yet in chromium)

[14:33:49.0232] <Kaiido>
> <@ms2ger:igalia.com> No, that's just saying if you have a node with children [a, b, c], you should work on a first, then b, then c

Ok, but given that a node's `children` is already an ordered set, it's thus redundant to iterate it in tree order, no? Unless its order is something else than tree order.

[14:56:28.0498] <Domenic>
> <@zcorpan:mozilla.org> How do we want to handle https://github.com/whatwg/html/pull/10557 ? It looks like the boxes in OP are ticked, but it's not clear if it's web compatible yet, and there was at least one crbug filed about <select><input> (https://issues.chromium.org/issues/379612186) cc annevk
> 
> (For https://issues.chromium.org/issues/379034733#comment6 , that should be fixed in the spec PR, but maybe not yet in chromium)

Maybe jarhar can give us an update on the shipping plans? Is Chromium still proceeding to ship exactly what's in the PR?

I think it might be reasonable to delay landing until it's baked in stable for a while, but we could also land and revert if it's not able to make it.


2024-12-03
[01:22:11.0977] <Ms2ger>
> <@kaiido:matrix.org> Ok, but given that a node's `children` is already an ordered set, it's thus redundant to iterate it in tree order, no? Unless its order is something else than tree order.

I'm not sure I follow your question - the children are ordered, and you should iterate over them in that order. You might imagine in some case you'd want to iterate over them in reverse order, or in other cases it might not matter at all

[01:35:42.0132] <Kaiido>
Yes, so my point is that in at least [node insert](https://dom.spec.whatwg.org/#concept-node-insert), at step 7, it's asked to iterate over `children` in tree order. That made me wonder if `children` could ever not be in tree order, since it's already an ordered set (which I assume is already in tree order).  So either this "in tree order" at this step is redundant, either `children` can indeed be in an other order.

[01:39:55.0067] <Kaiido>
 * Yes, so my point is that in at least [node insert](https://dom.spec.whatwg.org/#concept-node-insert), at step 7, it's asked to iterate over `children` in tree order. That made me wonder if `children` could ever not be in tree order, since it's already an ordered set (which I assume is already in tree order).  So either this "in tree order" at this step is redundant, either `children` can indeed be in an other order.

Ps: I'm fine with it being redundant, that's really just something that got me curious.

[02:02:29.0178] <Ms2ger>
I don't understand. It's not a question of whether children is in tree order or not; it's a question of the order in which you handle them

[02:03:32.0176] <Ms2ger>
Say you have a tree `<a><b></b><i></i></a>` and you say "for each child x of the a element, print the local name of x", you could print either "bi" or "ib"

[02:04:29.0472] <Noam Rosenthal>
The default order for this ordered set is "tree order" so it's redundant, but it's good to be explicit as sometimes iterations don't care about order

[02:33:04.0553] <Kaiido>
Thanks Noam. That's just what I wanted to know, and yes, I agree it's good to be explicit here.

Sorry Ms2ger I wasn't clear enough.

[02:35:15.0378] <annevk>
zcorpan: Domenic: yeah, I'd like to hear from jarhar before moving ahead. And given that there's already been some fallout maybe we should at least give it a couple of weeks of shipping.

[02:37:34.0519] <annevk>
Noam Rosenthal: Kaiido: when it's just children we might be able to omit the term these days, but when it's descendants we can't. That we can omit it for children is new as we didn't define their data structure until quite recently and I didn't actually think it had implications when I did that. So maybe this is something to open an issue for and figure out what we want to do.

[06:01:31.0175] <annevk>
zcorpan: see also https://github.com/whatwg/html/issues/10310#issuecomment-2506360351 btw on `<select>` parsing

[08:09:48.0358] <annevk>
Kaiido: reviewing https://github.com/whatwg/html/pull/9537 still on your radar?

[10:30:22.0667] <jarhar>
i replied on the parsing spec pr

[13:11:02.0569] <Kaiido>
annevk: Yes, I still plan to make another review there.


2024-12-04
[00:33:16.0794] <annevk>
keithamus: I have a GitHub question. I was curious who downvoted an a11y PR question, but their profile page 404s. But I thought that if someone deleted their profile they'd be known as "ghost" or some such. Do you know what might be going on?

[00:56:16.0231] <annevk>
a11y/i18n PR template checkbox PR is up: https://github.com/whatwg/spec-factory/pull/76

[00:56:27.0424] <annevk>
 * a11y & i18n PR template checkbox PR is up: https://github.com/whatwg/spec-factory/pull/76

[01:22:50.0459] <keithamus>
Probably spammy if their profile 404s. Perhaps reactions don't get cleaned up like comments do :/ 

[01:25:20.0082] <keithamus>
Sorry only just spotted this, https://github.com/w3c/aria/pull/2354 is the aria PR for commandfor /cc Luke Warlow 

[04:47:59.0678] <Yagiz Nizipli>
Community update: Ada rust crate v3.1.0 is available with URLSearchParams. https://github.com/ada-url/rust/releases/tag/v3.1.0

[05:03:08.0552] <freddy>
TIL about ada-url rust. Looks like a cool target for differential fuzzing w/ rust-url :>

[05:03:48.0769] <freddy>
 * TIL about ada-url rust. Looks like a cool target for differential fuzzing with servo/rust-url :>

[05:13:31.0678] <Yagiz Nizipli>
> <@fbraun:mozilla.org> TIL about ada-url rust. Looks like a cool target for differential fuzzing with servo/rust-url :>

I guess servo/rust-url needs to be spec compliant first. https://github.com/servo/rust-url/blob/main/url/tests/expected_failures.txt

[05:29:12.0994] <annevk>
Yagiz Nizipli: nice, are you watching whatwg/url? I expect we'll make some changes next year around file: URLs in particular. And then hopefully not too long after we can consider parsing fully stabilized.

[05:55:33.0527] <Yagiz Nizipli>
> <@annevk:matrix.org> Yagiz Nizipli: nice, are you watching whatwg/url? I expect we'll make some changes next year around file: URLs in particular. And then hopefully not too long after we can consider parsing fully stabilized.

Yes, although I want to be more involved starting from next year.

[09:29:52.0241] <annevk>
I had completely missed https://ln.hixie.ch/?start=1721260117&count=1


2024-12-05
[20:04:24.0954] <eason12>
SOS!!!!🥺🥺🥺
Is there has anyone could help me?
I was confused about this code(see img), So I found this algorithm.
https://html.spec.whatwg.org/multipage/images.html#normalizing-the-source-densities

I was really confused about what my code will be interpreted?and what is the source-size when dpr is different?

<img 
sizes="(max-width: 800px) 100px, (max-width: 1250px) 300px, 600px" 
srcSet="/static/images/blog/gzip1.jpg 200w, /static/images/blog/gzip2.jpg 400w, /static/images/blog/gzip3.jpg" 
src="/static/images/blog/gzip1"/>



[04:28:27.0406] <annevk>
Anyone here familiar with ReSpec? I wonder why https://github.com/w3c/push-api/pull/385 is timing out through PR Preview after my latest commit. CI only reveals one additional cross-reference not working, but nothing else appears wrong.

[10:06:20.0344] <annevk>
eason12: FWIW, that's better asked on Stack Overflow


2024-12-06
[19:59:14.0868] <Domenic>
annevk: ping for early thoughts on https://github.com/whatwg/html/pull/10818 . I'm excited to get moving on it.

[00:25:25.0553] <sideshowbarker>
Please try (force) pushing to that PR branch now. Apparently there was a general problem with the spec generator (not specific to your PR changes) — https://status.w3.org/incidents/89w65fgy69sy — but it’s now been fixed.

[00:27:05.0301] <annevk>
sideshowbarker: getting a different error now, `<pre>Error: ENOENT: no such file or directory, mkdtemp &#39;uploads/wS9uFZ&#39;<br> &nbsp; &nbsp;at async mkdtemp (node:internal/fs/promises:1178:10)<br> &nbsp; &nbsp;at async file:///u/spec-generator/server.js:113:32</pre>`

[00:35:40.0565] <sideshowbarker>
Pinged Denis about it. But by the way, the place I asked about it is the #respec channel in the W3C Slack. So if you want to, you can join there. That said, there’s also a #spec-publication channel — which is usually the right place to get attention about problems with the publications tooling/infrastructure, if it’s not something specific to #respec

[07:22:46.0566] <annevk>
Simon☀️: freddy: would you have time to do a review of https://github.com/whatwg/fetch/pull/1655? I'll get to it, but want to try to load balance a bit


2024-12-07
[10:04:11.0794] <akaster>
Any chance we can get some more eyes on <https://github.com/whatwg/fetch/issues/1754> ? Resolving it would unblock a ton of fetch progress for ladybird. 

[10:06:48.0607] <akaster>
I believe this comment has the most minimized reproducer of the problem https://github.com/LadybirdBrowser/ladybird/pull/2162#issuecomment-2521178568

[12:50:55.0049] <Noam Rosenthal>
akaster: when we "fully read" the body, we get it as bytes, and then "safely extracting" bytes creates a new stream. It's not the same stream that you've read

[12:58:19.0731] <Noam Rosenthal>
... The act of "fully reading" a stream turns it into bytes and creates a fresh stream with no readers. Later hand over pipes that fresh stream for the "end of body" callback

[12:58:27.0550] <Noam Rosenthal>
This way, you can "fully read" a body multiple times :)

[12:59:26.0284] <Noam Rosenthal>
(I added the exact algo steps on the github issue, but of course there could always be missing bits and bobs)

[13:01:42.0864] <akaster>
Thanks! I'll take a look. Hopefully that's something we can slot in to our implementation, because that sounds like it would avoid the issue as I've had it described to me 

[13:02:21.0990] <Noam Rosenthal>
Good luck!

[13:04:38.0963] <Noam Rosenthal>
 * ... The act of "fully reading" a body turns it into bytes and creates a fresh stream with no readers. Later hand over pipes that fresh stream for the "end of body" callback

[15:19:36.0535] <akaster>
well, I rebased the branch that folks were working on and the issue from the reproducer is still there. The steps you mentioned for how fetch_response_handover gets its own stream seem to be followed to the letter of the spec, so something else must be going on

[15:23:48.0448] <akaster>
I did notice that a handful of algorithms in the streams spec seem to call both https://webidl.spec.whatwg.org/#upon-fulfillment and https://webidl.spec.whatwg.org/#upon-rejection, which ends up invoking https://webidl.spec.whatwg.org/#dfn-perform-steps-once-promise-is-settled twice, and doing something different each time. which is probably not optimal

[15:24:06.0407] <akaster>
 * I did notice that a handful of algorithms in the streams spec seem to call both https://webidl.spec.whatwg.org/#upon-fulfillment and https://webidl.spec.whatwg.org/#upon-rejection, which ends up invoking https://webidl.spec.whatwg.org/#dfn-perform-steps-once-promise-is-settled twice in a row, and doing something different each time. which is probably not optimal

[15:25:08.0549] <akaster>
 * I did notice that a handful of algorithms in the streams spec seem to call both https://webidl.spec.whatwg.org/#upon-fulfillment and https://webidl.spec.whatwg.org/#upon-rejection, which ends up invoking https://webidl.spec.whatwg.org/#dfn-perform-steps-once-promise-is-settled twice in a row, and doing something different each time. which is probably not optimal (and in our implementation creates a bunch of extra PromiseCapabilities that are not used)

[15:48:51.0432] <akaster>
aha. currently in https://streams.spec.whatwg.org/#readable-stream-pipe-to, we call https://streams.spec.whatwg.org/#readablestreamdefaultreader-read-all-bytes

[15:49:36.0070] <akaster>
instead of doing... whatever spec step 15 of ReadableStreamPipeTo is trying to convey. "move the bytes over somehow idk" seems to be what it wants to say


2024-12-08
[00:27:51.0952] <Noam Rosenthal>
I don't think specs are expected to optimize for this non-observable behavior

[00:28:08.0227] <Noam Rosenthal>
(regarding the double-promise thing)

[00:30:30.0184] <Noam Rosenthal>
Sounds like you've violated this line: `Public API must not be used: while reading or writing, or performing any of the operations below, the JavaScript-modifiable reader, writer, and stream APIs (i.e. methods on the appropriate prototypes) must not be used. Instead, the streams must be manipulated directly.`

[00:30:56.0595] <Noam Rosenthal>
... which would explain this whole thread :)

[00:31:42.0265] <akaster>
It seems so! It took quite a bit of digging to find the "massive fixme but it's probably fine" comment 

[11:22:53.0535] <akaster>
> <@noamr:matrix.org> Sounds like you've violated this line: `Public API must not be used: while reading or writing, or performing any of the operations below, the JavaScript-modifiable reader, writer, and stream APIs (i.e. methods on the appropriate prototypes) must not be used. Instead, the streams must be manipulated directly.`

The real issue seems to be we didn't have a facility to set the internal response's body when appropriate on Response. So in the cases that we had a subclass of Response, we were setting a body that nobody used 😅. Some class refactoring is in order


2024-12-09
[18:02:59.0913] <Mr Fit>
Hi

[18:27:27.0544] <Mr Fit>
Hello

[07:56:23.0204] <Yagiz Nizipli>
I've opened a PR to URL repository to add an extremely common fast-path. Appreciate if you could take a look: https://github.com/whatwg/url/pull/847

[08:02:16.0346] <Ms2ger>
Yagiz Nizipli: is it supposed to have an observable impact?

[08:02:40.0079] <Yagiz Nizipli>
> <@ms2ger:igalia.com> Yagiz Nizipli: is it supposed to have an observable impact?

Other than performance, no. 

[08:02:58.0377] <Ms2ger>
Then there is no need to change the spec

[08:03:22.0817] <Ms2ger>
You're allowed to implement the algorithm in any way you like, as long as you get the same output

[08:05:31.0204] <freddy>
looks like excellent blogging material though :)  

[08:07:21.0025] <Yagiz Nizipli>
> <@fbraun:mozilla.org> looks like excellent blogging material though :)  

We already wrote an academic paper about this: https://onlinelibrary.wiley.com/doi/10.1002/spe.3296

[08:09:10.0466] <freddy>
even better, thank you

[08:22:04.0247] <annevk>
Yagiz Nizipli: see https://infra.spec.whatwg.org/#algorithm-conformance for more information on Ms2ger's feedback

[15:19:03.0193] <Dominic Farolino>
I'm surprised there's no "topic: iframe" label in the HTML repo


2024-12-10
[16:44:56.0763] <sideshowbarker>
Dominic Farolino: hmm yeah — but I guess for going forward at least, should go ahead and make one

[16:46:45.0068] <zcorpan>
There is a "browsing context" label, but maybe one for "iframe" would be useful

