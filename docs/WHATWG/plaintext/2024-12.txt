2024-12-01
[22:36:14.0880] <annevk>
Curious, is it obvious to everyone that `importNode()` clones from its name?

[00:52:28.0843] <Noam Rosenthal>
> <@annevk:matrix.org> Curious, is it obvious to everyone that `importNode()` clones from its name?

No. It’s not *that* surprising but also not obvious I guess 

[09:17:25.0994] <Yagiz Nizipli>
small community update from ada-url.com: we added URLSearchParams to Ada on v2.9.0. right now, I’m working on adding URLSearchParams to Ada’s Rust crate. https://github.com/ada-url/rust/pull/57


2024-12-02
[16:24:43.0976] <leoisverycool>
Apologies if this is a common question -- I searched the FAQ but I don't _think_ I saw anything https://github.com/whatwg/html/blob/main/FAQ.md

Is there a canonical representation of the HTML _spec_ as opposed to the IDL (for example, the spec would specify that the `type` on a `button` is an "enumerated attribute" as opposed to a DOM string [which the IDL says])?

[16:25:25.0368] <leoisverycool>
Certainly I could parse https://github.com/whatwg/html/blob/main/source and while it's not "hard" it's a non-trivial task

[16:26:03.0816] <leoisverycool>
 * Apologies if this is a common question -- I searched the FAQ but I don't _think_ I saw anything https://github.com/whatwg/html/blob/main/FAQ.md

Is there a canonical representation of the HTML _spec_ **in a machine readable-format** like XML or JSON as opposed to the IDL (for example, the spec would specify that the `type` on a `button` is an "enumerated attribute" as opposed to a DOM string \[which the IDL says\])?

[16:26:24.0060] <leoisverycool>
 * Apologies if this is a common question -- I searched the FAQ but I don't _think_ I saw anything https://github.com/whatwg/html/blob/main/FAQ.md

Is there a canonical representation of the HTML _spec_ **in a machine readable-format** like XML or JSON as opposed to the IDL (for example, the spec would specify that the `type` on a `button` is an "enumerated attribute" that can take "button" "submit", etc. as opposed to a DOM string \[which the IDL says\])?

[16:27:35.0046] <leoisverycool>
There are quite a few scattered efforts out there -- e.g. https://github.com/tawesoft/html5spec

[16:28:16.0298] <leoisverycool>
Certainly I would imagine MDN does this to prepare their documentation -- but it's not immediately clear to me how or if they do that without studying their build process a lot more

[16:29:22.0421] <leoisverycool>
 * Apologies if this is a common question -- I searched the FAQ but I don't _think_ I saw anything https://github.com/whatwg/html/blob/main/FAQ.md

Is there a canonical representation of the HTML _spec_ **in a machine readable-format** like XML or JSON as opposed to the IDL? 

For example, the spec would specify that the `type` on a `button` is an "enumerated attribute" that can take "button" "submit", etc. as opposed to the IDL, which specifies a DOM String 

[16:49:32.0692] <akaster (OOO 🦃)>
if you want to parse `source`, you'd be best off using or extending wattsi https://github.com/whatwg/wattsi

[17:34:01.0334] <Domenic>
There is no such machine-readable format besides the source itself.

[18:34:30.0205] <leoisverycool>
>if you want to parse source, you'd be best off using or extending wattsi https://github.com/whatwg/wattsi

That makes sense. I had a look at I am impressed it is maintained and in Pascal. I agree that parsing wattsi sources (and potentially using wattsi itself) makes sense due to the useful `dfn`tag especially. For example in the case of `button`, it is helpful that `dfn` holds context for attributes:

```
  <table>
   <thead>
    <tr>
     <th> Keyword
     <th> State
     <th> Brief description
   <tbody>
    <tr>
     <td><dfn attr-value for="button/type"><code
     data-x="attr-button-type-submit">submit</code></dfn>
     <td><span data-x="attr-button-type-submit-state">Submit Button</span>
     <td>Submits the form.
    <tr>
     <td><dfn attr-value for="button/type"><code data-x="attr-button-type-reset">reset</code></dfn>
     <td><span data-x="attr-button-type-reset-state">Reset Button</span>
     <td>Resets the form.
    <tr>
     <td><dfn attr-value for="button/type"><code
     data-x="attr-button-type-button">button</code></dfn>
     <td><span data-x="attr-button-type-button-state">Button</span>
     <td>Does nothing.
  </table>
  <table>
   <thead>
    <tr>
     <th> Keyword
     <th> State
     <th> Brief description
   <tbody>
    <tr>
     <td><dfn attr-value for="button/type"><code
     data-x="attr-button-type-submit">submit</code></dfn>
     <td><span data-x="attr-button-type-submit-state">Submit Button</span>
     <td>Submits the form.
    <tr>
     <td><dfn attr-value for="button/type"><code data-x="attr-button-type-reset">reset</code></dfn>
     <td><span data-x="attr-button-type-reset-state">Reset Button</span>
     <td>Resets the form.
    <tr>
     <td><dfn attr-value for="button/type"><code
     data-x="attr-button-type-button">button</code></dfn>
     <td><span data-x="attr-button-type-button-state">Button</span>
     <td>Does nothing.
  </table>
```


[18:36:54.0325] <leoisverycool>
Although I don't have a specific suggestion in mind, are maintainers of `wattsi` open to contributions that would _extendi_ the language at all? I don't have anything specific in mind at the moment, but something that could potentially help the robustness of such a parser for subsequent updates to the standard.

[18:37:02.0290] <leoisverycool>
 * Although I don't have a specific suggestion in mind, are maintainers of `wattsi` open to contributions that would _extend_ the language at all? I don't have anything specific in mind at the moment, but something that could potentially help the robustness of such a parser for subsequent updates to the standard.

[18:37:08.0680] <leoisverycool>
 * Although I don't have a specific suggestion in mind, are maintainers of `wattsi` open to contributions that would _extend_ the language? I don't have anything specific in mind at the moment, but something that could potentially help the robustness of such a parser for subsequent updates to the standard.

[18:42:30.0915] <leoisverycool>
For example, I could envision a collection of tags that could be used to articulate each dom element, would retain searchability within `wattsi` sources, yet could reduce boilerplate.

[18:43:25.0191] <leoisverycool>
 * For example, I could envision a collection of tags that could be used to articulate each dom element, would retain searchability within `wattsi` sources, yet could reduce boilerplate and enhance parseability.

[18:43:32.0897] <leoisverycool>
 * For example, I could envision a collection of tags that could be used to articulate each dom element, would retain searchability within `wattsi` sources, yet could reduce boilerplate while enhancing parseability.

[18:43:44.0784] <leoisverycool>
 * For example, I could envision a collection of tags that could be used to articulate each dom element, while retaining searchability within `wattsi` sources, yet could reduce boilerplate while enhancing parseability.

[18:46:13.0250] <leoisverycool>
 * For example, I could envision a collection of tags that could be used to articulate each dom element, while retaining searchability within `wattsi` sources and could reduce boilerplate while enhancing parseability.

[18:53:11.0417] <leoisverycool>
Here is a very rough example:

```
<h4 split-filename="form-elements">The <dfn element><code>button</code></dfn> element</h4>

<element name="button">
  <categories>
    Flow content, Phrasing content, Interactive content, Palpable content
    Listed, Labelable, Submittable, Autocapitalize-and-autocorrect inheriting
  </categories>

  <contexts>
    Where phrasing content is expected
  </contexts>

  <content-model>
    Phrasing content, no interactive content descendant, no tabindex attribute descendant
  </content-model>

  <attributes>
    Global attributes
    disabled, form, formaction, formenctype, formmethod, formnovalidate, formtarget
    name, popovertarget, popovertargetaction, type, value
  </attributes>

  <accessibility>
    <link href="https://w3c.github.io/html-aria/#el-button">For authors</link>
    <link href="https://w3c.github.io/html-aam/#el-button">For implementers</link>
  </accessibility>
...
```

[18:53:55.0408] <leoisverycool>
I very much doubt it -- but appreciate your consideration

[18:54:09.0748] <leoisverycool>
 * I very much doubt it -- but very much appreciate your consideration. 

[18:54:27.0348] <leoisverycool>
 * I would doubt it for many reasons -- but very much appreciate your consideration. 

[18:54:55.0775] <leoisverycool>
[this isn't quite right -- but perhaps conveys the idea]

[19:41:30.0542] <Domenic>
Yes, we're quite open to that. Although it'd be even better if it could be done in the new Rust pre-processor layer, which is in a more well-known language and has nice things like unit tests. I'd be ideal if eventually we moved everything from Wattsi to Rust.

See this example issue for one such project (not quite what you're looking for, but gives an idea): https://github.com/whatwg/html-build/issues/293

See here for the Rust layer: https://github.com/whatwg/html-build/blob/main/src/main.rs

See here for some previous discussion of machine-readable stuff: https://github.com/whatwg/wattsi/issues/146 + https://github.com/whatwg/html/issues/1246

[21:35:29.0443] <leoisverycool>
Thank you so much

[21:36:04.0151] <leoisverycool>
Is there openness to moving wattsi in its entirety over to Rust? ie matching the same existing spec

[21:36:20.0191] <leoisverycool>
 * Aside: is there interest in moving wattsi in its entirety over to Rust? ie matching the same existing spec

[21:36:31.0950] <leoisverycool>
 * Aside: is there interest in moving wattsi in its entirety over to Rust? for example, also matching the same existing spec

[21:36:36.0421] <leoisverycool>
 * Aside: is there interest in moving wattsi in its entirety over to Rust? for example, also matching the existing spec

[21:37:09.0048] <leoisverycool>
 * Aside: is there interest in moving wattsi in its entirety over to Rust? for example matching the existing spec

[21:37:17.0375] <leoisverycool>
 * Aside: is there interest in moving wattsi in its entirety over to Rust? Matching the existing spec

[21:37:26.0679] <leoisverycool>
 * Aside: is there interest in moving wattsi in over to Rust? Matching the existing spec

[21:39:28.0150] <leoisverycool>
 * ~Aside: is there interest in moving wattsi in over to Rust? Matching the existing spec~

Edit: re-read, looks like yes

> I'd be ideal if eventually we moved everything from Wattsi to Rust.

[21:39:58.0946] <leoisverycool>
[oh wow, I had no idea hixie worked on this back in the day.]

[22:04:18.0942] <leoisverycool>
Minor patch https://github.com/whatwg/wattsi/pull/164

[22:04:35.0089] <leoisverycool>
 * Minor patch https://github.com/whatwg/wattsi/pull/164 cc/ Domenic 

[05:24:49.0268] <Kaiido>
Small curiosity, can a node's children ever not be "in tree order"? Asking because at least in [node insert](https://dom.spec.whatwg.org/#concept-node-insert), it's asked to iterate over a DocumentFragment's children in tree order and that seemed redundant, but maybe it's not.

[07:03:06.0023] <Ms2ger>
No, that's just saying if you have a node with children [a, b, c], you should work on a first, then b, then c

[08:08:08.0781] <bkardell>
Ian Hickson: https://www.software.hixie.ch/utilities/js/live-dom-viewer/ doesn't seem to be responding

[08:08:58.0514] <bkardell>
I guess this could have been a dm, but maybe someone else knows or can help :)

[08:09:29.0597] <bkardell>
 * I guess this could have been a dm, but maybe someone else knows something (like the host is generally having troubles) or can help :)

[08:10:28.0727] <bkardell>
 * Ian Hickson: https://www.software.hixie.ch/utilities/js/live-dom-viewer/ doesn't seem to be responding (indeed your domain in general)

[09:59:33.0761] <jay.herry77>
If you’re all this payment method and you needs some cash 💵 just clink on my link and join my telegram group 👍👍👍👍🙏🙏

👇👇👇👇👇👇👇👇👇👇

Cashapp? Chime Apple Pay? pal? Venmo? BOA? Wells Fargo? Join my channel now
Got any of these
Chase?
BOA?
Wells Fargo?
Navy federal?
Capital one?
Truist?
Att &t?
PNC?
TD bank?
Credit union?
M&T bank?
Santander bank?
Northwest bank?
Or any other local Bank
JOIN MY CHANNEL NOW TO GET PAID!!✅
Join the telegram channel

👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇

https://t.me/+ioqje81ziAYyYTc0

https://t.me/+ioqje81ziAYyYTc0

👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆

@EVERYBODY @EVERYBODY @EVERBODY @EVERYBODY

[10:40:36.0674] <zcorpan (OOO 22 Nov)>
How do we want to handle https://github.com/whatwg/html/pull/10557 ? It looks like the boxes in OP are ticked, but it's not clear if it's web compatible yet, and there was at least one crbug filed about <select><input> (https://issues.chromium.org/issues/379612186) cc annevk

(For https://issues.chromium.org/issues/379034733#comment6 , that should be fixed in the spec PR, but maybe not yet in chromium)

[14:33:49.0232] <Kaiido>
> <@ms2ger:igalia.com> No, that's just saying if you have a node with children [a, b, c], you should work on a first, then b, then c

Ok, but given that a node's `children` is already an ordered set, it's thus redundant to iterate it in tree order, no? Unless its order is something else than tree order.

[14:56:28.0498] <Domenic>
> <@zcorpan:mozilla.org> How do we want to handle https://github.com/whatwg/html/pull/10557 ? It looks like the boxes in OP are ticked, but it's not clear if it's web compatible yet, and there was at least one crbug filed about <select><input> (https://issues.chromium.org/issues/379612186) cc annevk
> 
> (For https://issues.chromium.org/issues/379034733#comment6 , that should be fixed in the spec PR, but maybe not yet in chromium)

Maybe jarhar can give us an update on the shipping plans? Is Chromium still proceeding to ship exactly what's in the PR?

I think it might be reasonable to delay landing until it's baked in stable for a while, but we could also land and revert if it's not able to make it.


2024-12-03
[01:22:11.0977] <Ms2ger>
> <@kaiido:matrix.org> Ok, but given that a node's `children` is already an ordered set, it's thus redundant to iterate it in tree order, no? Unless its order is something else than tree order.

I'm not sure I follow your question - the children are ordered, and you should iterate over them in that order. You might imagine in some case you'd want to iterate over them in reverse order, or in other cases it might not matter at all

[01:35:42.0132] <Kaiido>
Yes, so my point is that in at least [node insert](https://dom.spec.whatwg.org/#concept-node-insert), at step 7, it's asked to iterate over `children` in tree order. That made me wonder if `children` could ever not be in tree order, since it's already an ordered set (which I assume is already in tree order).  So either this "in tree order" at this step is redundant, either `children` can indeed be in an other order.

[01:39:55.0067] <Kaiido>
 * Yes, so my point is that in at least [node insert](https://dom.spec.whatwg.org/#concept-node-insert), at step 7, it's asked to iterate over `children` in tree order. That made me wonder if `children` could ever not be in tree order, since it's already an ordered set (which I assume is already in tree order).  So either this "in tree order" at this step is redundant, either `children` can indeed be in an other order.

Ps: I'm fine with it being redundant, that's really just something that got me curious.

[02:02:29.0178] <Ms2ger>
I don't understand. It's not a question of whether children is in tree order or not; it's a question of the order in which you handle them

[02:03:32.0176] <Ms2ger>
Say you have a tree `<a><b></b><i></i></a>` and you say "for each child x of the a element, print the local name of x", you could print either "bi" or "ib"

[02:04:29.0472] <Noam Rosenthal>
The default order for this ordered set is "tree order" so it's redundant, but it's good to be explicit as sometimes iterations don't care about order

[02:33:04.0553] <Kaiido>
Thanks Noam. That's just what I wanted to know, and yes, I agree it's good to be explicit here.

Sorry Ms2ger I wasn't clear enough.

[02:35:15.0378] <annevk>
zcorpan: Domenic: yeah, I'd like to hear from jarhar before moving ahead. And given that there's already been some fallout maybe we should at least give it a couple of weeks of shipping.

[02:37:34.0519] <annevk>
Noam Rosenthal: Kaiido: when it's just children we might be able to omit the term these days, but when it's descendants we can't. That we can omit it for children is new as we didn't define their data structure until quite recently and I didn't actually think it had implications when I did that. So maybe this is something to open an issue for and figure out what we want to do.

[06:01:31.0175] <annevk>
zcorpan: see also https://github.com/whatwg/html/issues/10310#issuecomment-2506360351 btw on `<select>` parsing

[08:09:48.0358] <annevk>
Kaiido: reviewing https://github.com/whatwg/html/pull/9537 still on your radar?

[10:30:22.0667] <jarhar>
i replied on the parsing spec pr

[13:11:02.0569] <Kaiido>
annevk: Yes, I still plan to make another review there.


2024-12-04
[00:33:16.0794] <annevk>
keithamus: I have a GitHub question. I was curious who downvoted an a11y PR question, but their profile page 404s. But I thought that if someone deleted their profile they'd be known as "ghost" or some such. Do you know what might be going on?

[00:56:16.0231] <annevk>
a11y/i18n PR template checkbox PR is up: https://github.com/whatwg/spec-factory/pull/76

[00:56:27.0424] <annevk>
 * a11y & i18n PR template checkbox PR is up: https://github.com/whatwg/spec-factory/pull/76

[01:22:50.0459] <keithamus>
Probably spammy if their profile 404s. Perhaps reactions don't get cleaned up like comments do :/ 

[01:25:20.0082] <keithamus>
Sorry only just spotted this, https://github.com/w3c/aria/pull/2354 is the aria PR for commandfor /cc Luke Warlow 

[04:47:59.0678] <Yagiz Nizipli>
Community update: Ada rust crate v3.1.0 is available with URLSearchParams. https://github.com/ada-url/rust/releases/tag/v3.1.0

[05:03:08.0552] <freddy>
TIL about ada-url rust. Looks like a cool target for differential fuzzing w/ rust-url :>

[05:03:48.0769] <freddy>
 * TIL about ada-url rust. Looks like a cool target for differential fuzzing with servo/rust-url :>

[05:13:31.0678] <Yagiz Nizipli>
> <@fbraun:mozilla.org> TIL about ada-url rust. Looks like a cool target for differential fuzzing with servo/rust-url :>

I guess servo/rust-url needs to be spec compliant first. https://github.com/servo/rust-url/blob/main/url/tests/expected_failures.txt

[05:29:12.0994] <annevk>
Yagiz Nizipli: nice, are you watching whatwg/url? I expect we'll make some changes next year around file: URLs in particular. And then hopefully not too long after we can consider parsing fully stabilized.

[05:55:33.0527] <Yagiz Nizipli>
> <@annevk:matrix.org> Yagiz Nizipli: nice, are you watching whatwg/url? I expect we'll make some changes next year around file: URLs in particular. And then hopefully not too long after we can consider parsing fully stabilized.

Yes, although I want to be more involved starting from next year.

[09:29:52.0241] <annevk>
I had completely missed https://ln.hixie.ch/?start=1721260117&count=1


2024-12-05
[20:04:24.0954] <eason12>
SOS!!!!🥺🥺🥺
Is there has anyone could help me?
I was confused about this code(see img), So I found this algorithm.
https://html.spec.whatwg.org/multipage/images.html#normalizing-the-source-densities

I was really confused about what my code will be interpreted?and what is the source-size when dpr is different?

<img 
sizes="(max-width: 800px) 100px, (max-width: 1250px) 300px, 600px" 
srcSet="/static/images/blog/gzip1.jpg 200w, /static/images/blog/gzip2.jpg 400w, /static/images/blog/gzip3.jpg" 
src="/static/images/blog/gzip1"/>



[04:28:27.0406] <annevk>
Anyone here familiar with ReSpec? I wonder why https://github.com/w3c/push-api/pull/385 is timing out through PR Preview after my latest commit. CI only reveals one additional cross-reference not working, but nothing else appears wrong.

[10:06:20.0344] <annevk>
eason12: FWIW, that's better asked on Stack Overflow


2024-12-06
[19:59:14.0868] <Domenic>
annevk: ping for early thoughts on https://github.com/whatwg/html/pull/10818 . I'm excited to get moving on it.

[00:25:25.0553] <sideshowbarker>
Please try (force) pushing to that PR branch now. Apparently there was a general problem with the spec generator (not specific to your PR changes) — https://status.w3.org/incidents/89w65fgy69sy — but it’s now been fixed.

[00:27:05.0301] <annevk>
sideshowbarker: getting a different error now, `<pre>Error: ENOENT: no such file or directory, mkdtemp &#39;uploads/wS9uFZ&#39;<br> &nbsp; &nbsp;at async mkdtemp (node:internal/fs/promises:1178:10)<br> &nbsp; &nbsp;at async file:///u/spec-generator/server.js:113:32</pre>`

[00:35:40.0565] <sideshowbarker>
Pinged Denis about it. But by the way, the place I asked about it is the #respec channel in the W3C Slack. So if you want to, you can join there. That said, there’s also a #spec-publication channel — which is usually the right place to get attention about problems with the publications tooling/infrastructure, if it’s not something specific to #respec

[07:22:46.0566] <annevk>
Simon☀️: freddy: would you have time to do a review of https://github.com/whatwg/fetch/pull/1655? I'll get to it, but want to try to load balance a bit


2024-12-07
[10:04:11.0794] <akaster>
Any chance we can get some more eyes on <https://github.com/whatwg/fetch/issues/1754> ? Resolving it would unblock a ton of fetch progress for ladybird. 

[10:06:48.0607] <akaster>
I believe this comment has the most minimized reproducer of the problem https://github.com/LadybirdBrowser/ladybird/pull/2162#issuecomment-2521178568

[12:50:55.0049] <Noam Rosenthal>
akaster: when we "fully read" the body, we get it as bytes, and then "safely extracting" bytes creates a new stream. It's not the same stream that you've read

[12:58:19.0731] <Noam Rosenthal>
... The act of "fully reading" a stream turns it into bytes and creates a fresh stream with no readers. Later hand over pipes that fresh stream for the "end of body" callback

[12:58:27.0550] <Noam Rosenthal>
This way, you can "fully read" a body multiple times :)

[12:59:26.0284] <Noam Rosenthal>
(I added the exact algo steps on the github issue, but of course there could always be missing bits and bobs)

[13:01:42.0864] <akaster>
Thanks! I'll take a look. Hopefully that's something we can slot in to our implementation, because that sounds like it would avoid the issue as I've had it described to me 

[13:02:21.0990] <Noam Rosenthal>
Good luck!

[13:04:38.0963] <Noam Rosenthal>
 * ... The act of "fully reading" a body turns it into bytes and creates a fresh stream with no readers. Later hand over pipes that fresh stream for the "end of body" callback

[15:19:36.0535] <akaster>
well, I rebased the branch that folks were working on and the issue from the reproducer is still there. The steps you mentioned for how fetch_response_handover gets its own stream seem to be followed to the letter of the spec, so something else must be going on

[15:23:48.0448] <akaster>
I did notice that a handful of algorithms in the streams spec seem to call both https://webidl.spec.whatwg.org/#upon-fulfillment and https://webidl.spec.whatwg.org/#upon-rejection, which ends up invoking https://webidl.spec.whatwg.org/#dfn-perform-steps-once-promise-is-settled twice, and doing something different each time. which is probably not optimal

[15:24:06.0407] <akaster>
 * I did notice that a handful of algorithms in the streams spec seem to call both https://webidl.spec.whatwg.org/#upon-fulfillment and https://webidl.spec.whatwg.org/#upon-rejection, which ends up invoking https://webidl.spec.whatwg.org/#dfn-perform-steps-once-promise-is-settled twice in a row, and doing something different each time. which is probably not optimal

[15:25:08.0549] <akaster>
 * I did notice that a handful of algorithms in the streams spec seem to call both https://webidl.spec.whatwg.org/#upon-fulfillment and https://webidl.spec.whatwg.org/#upon-rejection, which ends up invoking https://webidl.spec.whatwg.org/#dfn-perform-steps-once-promise-is-settled twice in a row, and doing something different each time. which is probably not optimal (and in our implementation creates a bunch of extra PromiseCapabilities that are not used)

[15:48:51.0432] <akaster>
aha. currently in https://streams.spec.whatwg.org/#readable-stream-pipe-to, we call https://streams.spec.whatwg.org/#readablestreamdefaultreader-read-all-bytes

[15:49:36.0070] <akaster>
instead of doing... whatever spec step 15 of ReadableStreamPipeTo is trying to convey. "move the bytes over somehow idk" seems to be what it wants to say


2024-12-08
[00:27:51.0952] <Noam Rosenthal>
I don't think specs are expected to optimize for this non-observable behavior

[00:28:08.0227] <Noam Rosenthal>
(regarding the double-promise thing)

[00:30:30.0184] <Noam Rosenthal>
Sounds like you've violated this line: `Public API must not be used: while reading or writing, or performing any of the operations below, the JavaScript-modifiable reader, writer, and stream APIs (i.e. methods on the appropriate prototypes) must not be used. Instead, the streams must be manipulated directly.`

[00:30:56.0595] <Noam Rosenthal>
... which would explain this whole thread :)

[00:31:42.0265] <akaster>
It seems so! It took quite a bit of digging to find the "massive fixme but it's probably fine" comment 

[11:22:53.0535] <akaster>
> <@noamr:matrix.org> Sounds like you've violated this line: `Public API must not be used: while reading or writing, or performing any of the operations below, the JavaScript-modifiable reader, writer, and stream APIs (i.e. methods on the appropriate prototypes) must not be used. Instead, the streams must be manipulated directly.`

The real issue seems to be we didn't have a facility to set the internal response's body when appropriate on Response. So in the cases that we had a subclass of Response, we were setting a body that nobody used 😅. Some class refactoring is in order


2024-12-09
[18:02:59.0913] <Mr Fit>
Hi

[18:27:27.0544] <Mr Fit>
Hello

[07:56:23.0204] <Yagiz Nizipli>
I've opened a PR to URL repository to add an extremely common fast-path. Appreciate if you could take a look: https://github.com/whatwg/url/pull/847

[08:02:16.0346] <Ms2ger>
Yagiz Nizipli: is it supposed to have an observable impact?

[08:02:40.0079] <Yagiz Nizipli>
> <@ms2ger:igalia.com> Yagiz Nizipli: is it supposed to have an observable impact?

Other than performance, no. 

[08:02:58.0377] <Ms2ger>
Then there is no need to change the spec

[08:03:22.0817] <Ms2ger>
You're allowed to implement the algorithm in any way you like, as long as you get the same output

[08:05:31.0204] <freddy>
looks like excellent blogging material though :)  

[08:07:21.0025] <Yagiz Nizipli>
> <@fbraun:mozilla.org> looks like excellent blogging material though :)  

We already wrote an academic paper about this: https://onlinelibrary.wiley.com/doi/10.1002/spe.3296

[08:09:10.0466] <freddy>
even better, thank you

[08:22:04.0247] <annevk>
Yagiz Nizipli: see https://infra.spec.whatwg.org/#algorithm-conformance for more information on Ms2ger's feedback

[15:19:03.0193] <Dominic Farolino>
I'm surprised there's no "topic: iframe" label in the HTML repo


2024-12-10
[16:44:56.0763] <sideshowbarker>
Dominic Farolino: hmm yeah — but I guess for going forward at least, should go ahead and make one

[16:46:45.0068] <zcorpan>
There is a "browsing context" label, but maybe one for "iframe" would be useful

[18:01:51.0932] <Domenic>
Yeah I haven't been happy with our labels around browsing contexts / navigables / iframes for a while, but didn't feel up to re-tagging stuff...

[18:12:26.0012] <Dominic Farolino>
Ah browsing context is useful. Shoulda searched that..

[00:10:10.0983] <Meghan Denny>
if i'm at a particular heading such as `4.10.21.8` is there anyway to see the section hierarchy of it?

[00:13:45.0100] <Domenic>
No (besides looking at the TOC). https://github.com/whatwg/html/issues/5649 + https://github.com/whatwg/whatwg.org/issues/320 envisions something that would help with this.

[00:16:38.0039] <annevk>
If the labels are local to the repository I think it's okay to rename them. But it might be more tricky if you want to redo them completely indeed. "topic: iframe" seems a bit too scoped as typically what goes for `iframe` goes for `frame` too, but maybe it's still a better name than "nested browsing context" or some such as everyone calls them "iframes".

[07:18:08.0241] <akaster>
Nested browsing context? Or should it be "navigable container"? "Child navigable"? :)

[07:20:54.0655] <annevk>
These are good questions and I'm gonna let Domenic, Jake Archibald, and Dominic Farolino decide. 😊

[14:43:14.0883] <Noam Rosenthal>
`topic: frames, iframes, navigables`


2024-12-11
[22:24:57.0349] <sideshowbarker>
annevk: https://github.com/whatwg/html/pull/9546/files#r1879416670

[23:55:58.0963] <annevk>
Dominic Farolino: there's also pre-removing steps. Should that be pre-remove steps then?

[23:57:16.0449] <annevk>
sideshowbarker: there's an open issue on standardizing [Reflect] and I think we're pretty close after the refactoring I did on reflection a while back, but not quite there yet

[02:08:08.0811] <Jake Archibald>
annevk Domenic: Atomics & SAB let you 'sleep' workers waiting _something_, but that requires an isolated origin, and it's not trivial to pack data into an SAB. Could message ports have a `postMessage` type thing that synchronously waits for a response from the other side? Like atomics, the sleeping side must be a worker.

API sketch:

In a worker:

```js
console.log(
  self.postSyncCall({ action: 'sum', numbers: [2, 2] })
);
```

In a page:

```js
worker.addEventListener('synccall', (event) => {
  if (event.data.action === 'sum') {
    event.respondWith(async () => {
      const result = await someAsyncMathsSupercomputer.sum(event.data.numbers);
      return result;
    });
  }
});
```

Is this is stupid idea?

[02:08:50.0004] <Jake Archibald>
Our usecase is a DOM polyfill in a worker, and in some cases we want getters to get their result from some other thread

[02:11:36.0246] <Jake Archibald>
 * annevk Domenic: Atomics & SAB let you 'sleep' workers waiting _something_, but that requires an isolated origin, and it's not trivial to pack data into an SAB. Could message ports have a `postMessage` type thing that synchronously waits for a response from the other side? Like atomics, the sleeping side must be a worker.

API sketch:

In a worker:

```js
console.log(
  self.postSyncCall({ action: 'sum', numbers: [2, 2] })
);
```

…logs `4`.

In a page:

```js
worker.addEventListener('synccall', (event) => {
  if (event.data.action === 'sum') {
    event.respondWith(async () => {
      const result = await someAsyncMathsSupercomputer.sum(event.data.numbers);
      return result;
    });
  }
});
```

Is this is stupid idea?

[02:12:43.0204] <sideshowbarker>
HTML spec issue, or WebIDL issue? I looked in both places, but didn’t manage to find what I was looking for…

[02:59:09.0114] <annevk>
sideshowbarker: https://github.com/whatwg/html/issues/3238

[02:59:50.0252] <annevk>
Jake Archibald: has the same kind of issue as any kind of sync API proposal, but maybe it's considered more reasonable these days for dedicated workers to block on something?

[03:01:24.0612] <Jake Archibald>
annevk: Maybe? `Atomics.wait()` certainly does that

[04:36:06.0455] <annevk>
Jake Archibald: yeah and there's also synchronous file reading.

[04:37:42.0955] <Jake Archibald>
Although, an async version of the above would be somewhat useful too. Easy to have both I guess

[06:01:53.0469] <annevk>
Jake Archibald: oh you mean `postMessage()` but instead it returns? Yeah maybe.

[06:02:50.0716] <Jake Archibald>
annevk: It might need to be another method, but yeah, like `postMessage` but returns `Promise<something>`, which is a clone of whatever was passed to `respondWith` on the other side

[06:20:14.0688] <annevk>
Reusing `respondWith()` could be interesting too. Much less API surface to add.

[07:56:54.0156] <Dominic Farolino>
Renamed to `topic: frames/navigables/browsing contexts` (apparently commas are illegal?

[07:57:16.0257] <Dominic Farolino>
Figured we didn't need "iframes" and "frames" to be enumerated, and the previous label name is "browsing contexts" which seems find to preserve

[08:04:42.0859] <Dominic Farolino>
I suppose. I feel like this kind of renaming is usually the sort of thing you ask for in a follow-up. Do you want me to do all the renaming in the moveBefore() PR?

[08:31:01.0619] <annevk>
It's probably better as a separate PR, yes.

[08:33:31.0562] <Dominic Farolino>
annevk: Should I revert https://github.com/whatwg/dom/pull/1307/commits/5c87649e6ac3475589220ad72e0e59855d2eb636 then?

[08:55:06.0120] <annevk>
If you make the other PR then it'll just disappear all on its own.


2024-12-12
[02:36:06.0675] <Sacha Greif>
hi all! just wanted to let you know that the State of JS 2024 results are now available to preview: https://state-of-js-2024.onrender.com/en-US/

[07:03:27.0856] <annevk>
Dominic Farolino: if you're around I'd appreciate a quick look at these PRs:
- https://github.com/whatwg/dom/pull/1331
- https://github.com/whatwg/dom/pull/1332
- https://github.com/whatwg/dom/pull/1333
- https://github.com/whatwg/html/pull/10857

[07:04:08.0933] <annevk>
Preparing a bit for scoped custom element registries.

[07:25:33.0095] <Dominic Farolino>
Looking


2024-12-13
[01:12:43.0865] <annevk>
smaug: can I get you to quickly review https://github.com/whatwg/dom/pull/1334? rniwa already looked it over, but since it's fairly significant I thought I should get at least one other person.

[02:21:37.0432] <smaug>
will do in a moment

[02:54:38.0171] <sharonne>
Any Cashapp? Chime? Zelle? Btc? Usdt?Skrill? Apple Pay? Pay pal? Venmo? BOA? Wells Fargo? Join my channel
https://t.me/+32cFzLuOiacxZmM0
 Got any of these Chase? BOA? Wells Fargo? Navy federal? Capital one? Truist? Att &t? PNC? TD bank? Credit union? M&T bank? Santander bank? Northwest bank? Or any other local Bank JOIN THE CHANNEL NOW TO GET PAID💯 ✅

[04:16:38.0885] <annevk>
smaug: thanks! So I guess that means that "clone a shadow root" needs to be its independent operation that we call from both "clone a node" and "clone a node's children". And I guess that also goes for running the cloning steps then as they will also append a bunch of nodes in case of the template element.

[04:18:28.0392] <annevk>
So much unfortunate duplication, but it seems hard to avoid.

[04:21:21.0649] <smaug>
I guess template element just calls clone for its content. And it doesn't matter much where that happens, since the content lives on its own subtree

[04:22:28.0063] <smaug>
or does it create document fragment on the new one and clones that as the parent

[04:22:33.0388] <smaug>
I guess it goes like that

[04:22:47.0206] <smaug>
but still doesn't matter too much when that happens

[04:25:11.0459] <annevk>
Oh I guess you're right. It's only shadow-including tree traversal. That doesn't go into all conceptual hosts.

[04:52:31.0836] <annevk>
smaug: should be good now.

[05:06:37.0020] <annevk>
smaug: I think I have stared long enough at this now that I can deduplicate "clone a node" and "clone a node's children". Let me try that.

[05:09:43.0398] <smaug>
/me will read the pr after lunch

[05:22:19.0225] <annevk>
I think this is the approach I had initially in mind, but then forgot how to do it. I still need to push it.

[05:29:13.0414] <annevk>
I think I could even go back to a single recursive algorithm. The only new parameter it needs is a parent node. But it seems a little clearer with cloning a single node being its own algorithm. And also with most callers not having to pass in a null parent.

[09:42:27.0630] <smaug>
FWIW, I'm now looking at whether the order of cloning shadowroot vs other nodes can affect to slotchange ordering in case of nested shadow dom

[12:42:30.0640] <Yagiz Nizipli>
Hey folks, I couldn't find the declaration of URLPattern.compareComponent in the urlpattern spec. Can someone help me to find where is it defined? There is a test in WPT checking for it.

[13:41:55.0497] <smaug>
And Safari seems to have different behavior there current vs. Firefox and Chrome.

[13:42:05.0124] <smaug>
 * And Safari seems to have different behavior there currently vs. Firefox and Chrome.

[13:44:50.0002] <smaug>
Safari doing something against the current spec

[13:45:29.0595] <smaug>
 * Firefox and Chrome seem to follow the current spec

[13:48:52.0815] <smaug>
 * Firefox and Chrome  follow the current spec

[15:02:39.0398] <Meghan Denny>
https://github.com/whatwg/urlpattern/issues/61 looks to be the source of truth atm, which is still open

[15:16:45.0230] <Yagiz Nizipli>
> <@meghanbun:matrix.org> https://github.com/whatwg/urlpattern/issues/61 looks to be the source of truth atm, which is still open

I see thank you Meghan


2024-12-14
[23:27:14.0455] <Shannon Booth>
is the "port message queue" task source a *unique* task source, like the HTMLMediaElement, which says:

> Each media element has a *unique* media element event task source.

Just trying to  read through and understand the implications of that task queue at the moment

[23:52:09.0326] <annevk>
Shannon Booth: it's one per MessagePort as I read it; we should make the language consistent though.

[23:53:23.0613] <annevk>
As a non-native speaker it always bugs me when a lot of different words are used to describe the same thing. I can understand it for non-normative content to give people some additional ways to grasp the concepts, but for normative content it just makes matters too confusing.

[00:30:16.0277] <Shannon Booth>
yeah, I was trying to figure out if there was a subtle difference in some way, but it sounds like it means the same thing!


2024-12-16
[00:33:00.0846] <annevk>
Simon☀️: thanks for reviewing the HTTPS thingie; hopefully they'll get back to it a lil quicker this time around

[00:33:20.0116] <annevk>
Although with the end-of-year coming up that actually seems unlikely

[07:56:36.0322] <annevk>
If I can get a quick review on [Editorial: add a concept for Window's CustomElementRegistry](https://github.com/whatwg/html/pull/10865) I'd appreciate it.

[08:30:04.0333] <annevk>
Similarly, I'd really like to land [Remove quadratic behavior from clone a node](https://github.com/whatwg/dom/pull/1334) as well. smaug (and everyone else interested), if you could have another look that'd be great!

[08:30:35.0563] <smaug>
I should have time in ~2.5h 

[11:45:31.0039] <smaug>
Unrelated - any time soon we'll figure out how iframe's should work in shadow DOM 😉 https://www.w3.org/Bugs/Public/show_bug.cgi?id=27325 and https://github.com/whatwg/html/issues/763 

[14:50:33.0743] <smaug>
 * Unrelated - any time soon we'll figure out how iframes should work in shadow DOM 😉 https://www.w3.org/Bugs/Public/show\_bug.cgi?id=27325 and https://github.com/whatwg/html/issues/763 


2024-12-17
[23:32:56.0728] <annevk>
smaug: given the navigation/history rewrite it seems that should be more tractable now, in theory. I currently don't have time to investigate though.

[23:37:46.0799] <annevk>
smaug: also, I don't like putting the "cloning steps" before append in "clone a node", but I'll do it. It seems like in theory it could result in the same kind of issues. But it's also not important for scoped custom element registries where it is done so meh for now.

[23:42:29.0849] <annevk>
I should add, I really appreciate the thorough review. It has come out much better as a result.

[01:05:48.0247] <annevk>
Domenic: are you still around? Wanted to discuss some design issue with scoped custom element registries. We need to put the right custom element registry in scope when we call the constructor and then ideally we remove it from scope as soon as we can (as part of super(), inside HTMLElement's constructor) so there's as few side effects as possible. Of course, arbitrary script can run which can put other registries in scope and cause mischief.

[01:06:28.0069] <annevk>
So you need some kind of stack that HTMLElement's constructor pops. But it should only pop when the user agent pushed.

[01:06:51.0763] <Domenic>
Not really, but my GitHub email is in my personal inbox and I haven't been able to resist checking it daily yet

[01:08:29.0789] <annevk>
Oh that doesn't sound good. Well, I guess I'll try to leave you alone then. 😀

[01:39:36.0359] <opemonee>

Any Cashapp? Chime? Zelle? Btc? Usdt?Skrill? Apple Pay? Pay pal? Venmo? BOA? Wells Fargo? Join my channel
https://t.me/+32cFzLuOiacxZmM0
 Got any of these Chase? BOA? Wells Fargo? Navy federal? Capital one? Truist? Att &t? PNC? TD bank? Credit union? M&T bank? Santander bank? Northwest bank? Or any other local Bank JOIN THE CHANNEL NOW TO GET PAID💯 ✅

[02:54:40.0842] <smaug>
yeah, I'm not sure whether it matters too much where it is, but since implementations are consistent there...

[07:58:00.0471] <annevk>
smaug: are you going to review `moveBefore()` again?

[07:59:30.0580] <smaug>
yes

[07:59:34.0671] <annevk>
smaug: modulo some nits I think I'm okay merging it, though I need to check if everything is still in the right place in the document now that a couple of aspects are changed

[07:59:37.0044] <smaug>
and I need to look at the HTML bits

[08:00:47.0979] <annevk>
Dominic Farolino: I think that means we won't merge this before 2025, but we should be able to wrap it up early January

[08:02:04.0934] <smaug>
aha, I see, the connected check was removed

[08:04:54.0435] <Dominic Farolino>
Ah, so we can't expect smaug 's review until the new year is what you're saying maybe?

[08:05:15.0649] <smaug>
I'm definitely trying to review before the next whatnot

[08:08:23.0362] <Dominic Farolino>
Got it! In that case, I'm still holding out hope for merging before EOY :)

[08:12:17.0013] <annevk>
Well, I won't have time after WHATNOT.

[09:43:16.0368] <Dominic Farolino>
annevk & smaug: Outside of existing nits you're aware of, do you have any breaking/significant things in mind that you could imagine would need to change? We were hoping to ship this in the next Chrome milestone, so I just want to make sure we're as prepared as possible on our end for such things.

[09:44:15.0070] <smaug>
Dominic Farolino: earlier today I started to ponder if fullscreen needs some tweaks, but I didn't check the spec at all, so perhaps it is fine

[09:47:30.0002] <Dominic Farolino>
(should be OK since the fullscreen spec is pretty good about only unfullscreening things during the removal steps hook (which don't run during a move), but yes feel free to take a look too!)


2024-12-18
[01:20:32.0006] <sideshowbarker>
annevk: About the `FrozenArray<Element>?` WebIDL design for the various `*Elements` attributes in ARIAMixin https://w3c.github.io/aria/#ARIAMixin: I’m wondering if you happen to know the history behind that

[01:47:20.0704] <sideshowbarker>
hmm OK looking at https://github.com/alice/aom/blob/e1d084046dafb9867bab5514c87d8e56f796e239/explainer.md#use-case-2-setting-relationship-properties-without-needing-to-use-idrefs I find this:
> _allow specifying semantic relationships between elements without the need to assign globally unique ID attributes to each element which participates in a relationship_

[06:18:31.0891] <annevk>
sideshowbarker: I think some mixture of premature shipping and the better array type not being quite ready yet. There should certainly be some history captured in whatwg/html issues.

[11:59:45.0372] <Yagiz Nizipli>
Is there any other browser/runtime that implements URLPattern other than Chrome?

[12:03:43.0018] <Yagiz Nizipli>
I think there is a WPT that is wrong. If I'm correct, new URLPattern({ "protocol": "http", "port": "80 " }) should not fail, because port setter defined in URL spec trims leading and trailing whitespace characters from the input on port setter. Chrome throws because it doesn't comply with spec...

[12:05:45.0174] <Yagiz Nizipli>
Any idea why `new URLPattern({ "protocol": "http", "port": "80 " })` fails?

[12:39:28.0546] <Yagiz Nizipli>
It seems the spec doesn't mention port validation, but Chrome is implementing it. https://chromium.googlesource.com/chromium/src/+/main/extensions/common/url_pattern.cc#101

[12:43:13.0022] <Noam Rosenthal>
https://urlpattern.spec.whatwg.org/#high-level-operations step 6 seems relevant?

[12:44:29.0302] <Yagiz Nizipli>
This just sets the processed_init port to empty string. It doesn't validate or throws an error for it. 

[12:47:08.0203] <Yagiz Nizipli>
I've opened an issue for this: https://github.com/whatwg/urlpattern/issues/239

[12:53:21.0498] <Yagiz Nizipli>
From my understanding, this is only throwing because Chrome doesn't follow URLPattern spec and call the URL setter.

[12:53:28.0117] <Yagiz Nizipli>
But I don't understand how this landed into WPT


2024-12-19
[22:21:50.0901] <annevk>
Yagiz Nizipli: that's probably because Chromium was also the initial implementer. They are not always careful to ensure the tests match the specification. I've run into this a couple of times as well.

[22:22:31.0476] <annevk>
I'm surprised you're the first one to run into this however as there were also other implementers reportedly with a different URL stack.

[22:31:29.0800] <Yagiz Nizipli>
annevk: So, what do you recommend going forward? Should I open a PR to WPT to remove this, or should the spec be changed?

[23:11:57.0816] <annevk>
Yagiz Nizipli: assuming it's indeed a bug the test should be aligned with the specification. If Chromium (or anyone) has concerns about aligning with the specification that can then be a separate discussion after which the test could in theory be changed back. I hope that Jeremy or Shunya will get back to you relatively quickly. If not, I'm happy to take a look early January.

[23:12:56.0654] <annevk>
Generally though we don't want to remove coverage, especially if it led to discovery of some interoperability issue.

[23:20:16.0845] <Yagiz Nizipli>
By the way, it seems Deno’s implementation also parses the port number to unsigned integer to pass it to URL port setter. 

[23:27:00.0607] <annevk>
Luca Casonato: ^^

[23:39:22.0803] <Luca Casonato>
> <@yagiznizipli:matrix.org> By the way, it seems Deno’s implementation also parses the port number to unsigned integer to pass it to URL port setter. 

Oh we do? Can you file a bug?

[02:14:45.0803] <黄宏杨``0111 y_y L0VE r_r>
Wash world win

