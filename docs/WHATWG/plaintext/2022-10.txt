2022-10-01
[08:02:55.0561] <annevk>
Domenic: can you get me one of these? https://twitter.com/googlejapan/status/1576014429845594113


2022-10-02
[22:43:37.0756] <Domenic>
Is that real?? They keep creating fun keyboard April Fools like https://www.youtube.com/watch?v=5LI1PysAlkU but the day is not April 1...

[22:46:01.0346] <Domenic>
Last October 1 there was a cup keyboard so maybe October 1 is a special day?? https://www.youtube.com/watch?v=20pC05yisRM

[22:46:11.0812] <Domenic>
(Maybe this is what threads are for...)

[23:55:47.0331] <sideshowbarker>
I guess https://github.com/whatwg/html/pull/8344 marks the start of Hacktoberfest…

[00:09:51.0698] <Domenic>
It's opt-in this year so I'm a bit more optimistic... but we'll see how many people read the directions.

[05:13:49.0005] <annevk>
Domenic: you and sideshowbarker should figure it out! That cup keyboard looks amazing too.

[05:20:13.0950] <sideshowbarker>
I already ordered mine — along with a ordering an extra-long desk, since my current desk is deficiently too short to support proper use of the keyboard. Now I just need to move to desk to a bigger room, since I don’t have enough free space in my current office to fit the improved desk in. But once I do that, I’ll be all set

[15:05:49.0005] <sideshowbarker>
annevk: FYI: Stack Overflow question leads to URL-parsing bug getting fixed in the HTML checker, and test suite getting more coverage  https://stackoverflow.com/questions/73845912/why-is-an-invalid-path-when-a-is-valid


2022-10-03
[01:00:30.0133] <myakura>
> <@domenicdenicola:matrix.org> Last October 1 there was a cup keyboard so maybe October 1 is a special day?? https://www.youtube.com/watch?v=20pC05yisRM

https://japan.googleblog.com/2022/10/gboard-2022.html says they choose October 1 because many people use keyboards with 101 keys

[01:05:59.0206] <myakura>
I've seen a couple of those funny keyboards at Google Japan office (when their office was in Roppongi Hills)

[01:06:18.0134] <Domenic>
We have a kanji keyboard with ~2000 keys at the Shibuya office

[01:10:48.0703] <myakura>
Ah, the drum sets one :)

[06:10:51.0944] <Andreas Kling>
hey folks! I have some questions about implementing flexbox, is this an appropriate channel for that, or should I go somewhere more specific? :)

[06:29:04.0555] <aja>
> <@myakura:matrix.org> Ah, the drum sets one :)

imagining a Taiko keyboard

[07:47:42.0483] <emilio>
> <@awesomekling:matrix.org> hey folks! I have some questions about implementing flexbox, is this an appropriate channel for that, or should I go somewhere more specific? :)

#css on irc.w3.org might also be good. Also, most of the Gecko layout hackers hang in #layout:mozilla.org, depending on your question it might be worth posting there for more eyes :)

[07:48:52.0601] <networkException>
the irc channel should also be bridged to #w3c_css:matrix.org

[08:11:21.0808] <Andreas Kling>
awesome, thanks both of you :^)

[10:06:23.0242] <hober>
/me waves at Andreas Kling :)


2022-10-04
[23:13:45.0625] <Domenic>
Anyone with CSSWG write privileges want to close https://github.com/w3c/csswg-drafts/issues/4683 ?

[23:14:48.0057] <Domenic>
https://github.com/w3c/csswg-drafts/issues/5508 also seems fixed

[23:15:45.0718] <Domenic>
and https://github.com/w3c/csswg-drafts/issues/3946

[23:15:56.0436] <Domenic>
OK, there's probably lots, I'll stop triaging another repo's issues now...

[00:29:59.0357] <annevk>
Domenic: I've closed those three issues.

[09:00:53.0203] <annevk>
mfreed: why `popUp`? Per https://whatwg.org/style-guide it's popup.

[11:48:19.0384] <khafra>
for this test https://github.com/web-platform-tests/wpt/blob/master/fetch/api/abort/general.any.js#L507 isn't duplex: 'half' needed in fetch options to make it reject with a DOMException rather than a typeerror? It also appears to be failing on all browsers

[11:49:07.0088] <khafra>
 * for this test https://github.com/web-platform-tests/wpt/blob/master/fetch/api/abort/general.any.js#L507 isn't duplex: 'half' needed in fetch options to make it reject with a DOMException rather than a typeerror? It also appears to be failing on all browsers


2022-10-05
[20:17:25.0949] <Domenic>
> <@khafra:matrix.org> for this test https://github.com/web-platform-tests/wpt/blob/master/fetch/api/abort/general.any.js#L507 isn't duplex: 'half' needed in fetch options to make it reject with a DOMException rather than a typeerror? It also appears to be failing on all browsers

duplex: 'half' is the default.

[00:22:24.0142] <annevk>
Well, we do require specifying `duplex` if you supply a stream.

[00:23:42.0450] <annevk>
So I think that test probably needs to be modified. At least, I'd assume it throws a `TypeError` in Chrome.

[00:23:51.0905] <annevk>
 * So I think that test probably needs to be modified. At least, I'd assume it throws a `TypeError` in Chrome.

[00:25:17.0573] <annevk>
https://github.com/web-platform-tests/wpt/pull/36268 is the PR for that test. Thanks @khafra:matrix.org

[01:40:55.0316] <sideshowbarker>
hsivonen: r? https://github.com/validator/htmlparser/pull/75

[07:51:30.0462] <Dominic Farolino>
I know there's been discussion about the errors we sometimes see with the style sheets not being fully loaded from the SW

[07:51:55.0763] <Dominic Farolino>
I loaded a spec today with DevTools open and came across this, not sure if it gives any _new_ insight into what's going on /cc annevk 

[08:01:56.0402] <Dominic Farolino>
Btw I am reproducing this on every navigation to a spec as long as I have DevTools open

[08:20:37.0000] <annevk>
Dominic Farolino: how old could this storage data be?

[15:33:07.0863] <Andreu Botella>
TabAtkins: Hey, could you take a look at https://github.com/w3c/csswg-drafts/pull/7801 and possibly merge it?

[15:33:15.0743] <Andreu Botella>
MDN depends on it

[15:34:13.0842] <TabAtkins>
thanks for ping, I'd entirely missed that. merged

[15:34:45.0010] <Andreu Botella>
thanks


2022-10-06
[18:54:26.0214] <Domenic>
> <@domfarolino:matrix.org> Btw I am reproducing this on every navigation to a spec as long as I have DevTools open

Interesting, I wonder if DevTools is messing with things? The requests should be "cors" since they use the crossorigin="" attribute.

[18:55:23.0038] <Domenic>
Oh I see that is consistent with the error

[18:55:29.0905] <Domenic>
How did they get an opaque response, indeed...

[00:32:14.0452] <annevk>
Domenic: I strongly suspect https://github.com/whatwg/html/pull/5339#issuecomment-1269482374 is correct, but a quick peek from you might not be a bad idea before people start doing a bunch of work you wouldn't be happy with

[00:32:40.0091] <Domenic>
Yep, just read it, thanks for checking. Will give it a thumbs up

[00:43:45.0428] <Ms2ger 💉💉💉>
I rebased it on Monday :(

[00:44:53.0520] <Ms2ger 💉💉💉>
annevk: so I'm guessing we're looking at either 50 or so web specs or 50 or so TC39 proposals

[00:53:17.0201] <Domenic>
Or they could just stop changing the meaning of current realm, and pick a new word for shadow-including current realm...

[00:54:05.0645] <annevk>
Ms2ger 💉💉💉: if we're including proposals there's gonna be more web specs

[00:54:35.0413] <annevk>
Ms2ger 💉💉💉: I suspect it's because there's also some other JS-related refactoring going on and maybe import maps had an impact?

[00:55:04.0177] <annevk>
Ms2ger 💉💉💉: the realm lowercasing wasn't the primary source of conflicts at least

[00:55:23.0852] <Ms2ger 💉💉💉>
Yeah, it's nicolo-ribaudo 

[00:56:18.0198] <Domenic>
 * ~~Or they could just stop changing the meaning of current realm, and pick a new word for shadow-including current realm...~~ Wait this is wrong, that's the change TC39 specs option

[00:56:23.0531] <Domenic>
 * ~Or they could just stop changing the meaning of current realm, and pick a new word for shadow-including current realm...~ Wait this is wrong, that's the change TC39 specs option

[00:56:25.0194] <annevk>
Those darn colleagues always making a mess.

[00:57:39.0207] <nicolo-ribaudo>
> <@annevk:matrix.org> Those darn colleagues always making a mess.

We ensure job security for eachother 

[01:01:36.0442] <Ms2ger 💉💉💉>
Anyway - if I changed to "current realm" (incl SR) and "current principal realm / current principal global object / current principal settings object" (excl SR), that would work for you Domenic annevk ?

[01:01:55.0483] <Ms2ger 💉💉💉>
Then I just need to make sure nobody else complains

[01:01:57.0694] <Domenic>
Yep

[01:06:22.0500] <Ms2ger 💉💉💉>
I hope the light at the end of the tunnel isn't an oncoming train :)

[01:44:40.0088] <annevk>
Oh, some of my decl shadow DOM comments echo those I made in 2020.

[03:04:52.0635] <Ms2ger 💉💉💉>
Pushed some initial changes in that direction, more after lunch

[05:39:22.0184] <sideshowbarker>
About the `slot` element document-conformance requirements, did we ever consider making the spec require that a `slot` element must have a `template` ancestor?

Is there any reason not to make such a requirement? Is there any use case for a `slot` element that’s not a descendant of a `template` element?

[05:39:34.0488] <sideshowbarker>
 * About the `slot` element document-conformance requirements, did we ever consider making the spec require that a `slot` element must have a `template` ancestor?

Is there any reason not to make such a requirement? Is there any use case for a `slot` element that’s not a descendant of a `template` element?

[05:40:28.0453] <sideshowbarker>
 * About the `slot` element document-conformance requirements, did we ever consider making the spec require that a `slot` element must have a `template` ancestor?

Is there any reason not to make such a requirement? Is there any use case for a `slot` element that’s not a descendant of a `template` element?

(I vaguely recall that I may have asked this question before, but if so I don’t remember what the answer was…)

[07:08:27.0056] <annevk>
sideshowbarker: an actual descendant of a `template` element? Or being part of its "contents"? Did you look at the original `slot` element PR? I vaguely recall there being at least some discussion about it.

[07:41:36.0916] <dlrobertson>
At what point does a cluster of issues become a interop <year> effort?

[07:44:05.0451] <dlrobertson>
I've started working on upstream tests for https://github.com/whatwg/fetch/issues/1436, https://github.com/whatwg/fetch/issues/1464, and https://github.com/whatwg/xhr/issues/357

[07:45:00.0434] <dlrobertson>
but they're all very much related, so I wasn't sure if they'd be worth an interop issue

[07:45:53.0878] <dlrobertson>
also they're very much just a random nit picked up to learn more about the specs... not something I've seen extensively in the real world

[08:00:25.0174] <annevk>
dlrobertson: there was a somewhat random bucket last year for assorted issues; it seems worth proposing these and perhaps they can be captured in a similar thing

[08:00:41.0561] <annevk>
dlrobertson: jgraham prolly has better advice

[08:01:12.0806] <annevk>
(Also, I think I've said this before, the yak shaving is appreciated!)

[08:07:07.0419] <dlrobertson>
awesome! thanks for the info

[10:29:47.0248] <TabAtkins>
Wait if we're doing realm work can we settle the WebIDL issue that defines the default realms for everything to the correct option so the rest of us don't have to understand the completely opaque differences between each of the terms?

[10:40:41.0067] <annevk>
TabAtkins: unfortunately that's not really a blocker for anyone's goals here (I agree that would be very very good though if it can be made to work)

[10:42:09.0516] <TabAtkins>
Ugh, it's a blocker for the vast majority of specs to have correct (/any at all) realm information, tho at least the current "most specs don't mention it at all, and implementors just do whatever similar things do, which is generally correct" mostly works in practice.

[10:46:47.0043] <annevk>
Yeah that's indeed the status quo for many allocated objects. 😕

[15:39:53.0000] <sideshowbarker>
> <@annevk:matrix.org> sideshowbarker: an actual descendant of a `template` element? Or being part of its "contents"? Did you look at the original `slot` element PR? I vaguely recall there being at least some discussion about it.

yeah, to be more clear: I meant just in the context of the markup — the serialized source markup

The specific context is https://github.com/validator/validator/issues/1438, where the OP has this markup:

```html
<!DOCTYPE html><html lang=en><title>!</title>
<span><slot></slot></span>
```
… and the checker gives an odd an unexpected message — because the checker sources/schema don’t (yet) know anything about a `slot` element: nothing about where it’s allowed or what content model it might have. (The _“Contexts in which element slot may be used: Where phrasing content is expected.”_ snippet that the OP quotes isn’t from the checker sources/schema but is instead is just some text that we pull and build from a copy of the HTML spec.)

And the reason the checker doesn’t know anything about a `slot` element is that since the only use case I know of for `slot` is if the markup has `<template>…<slot>…</slot>…</template>` — in which case the `slot` doesn’t get parsed into document. And so for the purposes of the checker, we never need to know it exists or care where it’s allowed or what its content model is — because we can’t check it (since the checker checks the parsed document tree, not the markup).

So while I could update the checker sources/schema to recognize the `slot` element in `template`-less cases like that `<!DOCTYPE html><html lang=en><title>!</title><span><slot></slot></span>` one, I’m not sure there’s any point in changing anything if there’s no real-world case for ever having slot-with-no-template markup like that.



[15:40:17.0818] <sideshowbarker>
> <@annevk:matrix.org> sideshowbarker: an actual descendant of a `template` element? Or being part of its "contents"? Did you look at the original `slot` element PR? I vaguely recall there being at least some discussion about it.

 * yeah, to be more clear: I meant just in the context of the markup — the serialized source markup

The specific context is https://github.com/validator/validator/issues/1438, where the OP has this markup:

```html
<!DOCTYPE html><html lang=en><title>!</title>
<span><slot></slot></span>
```

… and the checker gives an odd/unexpected message — because the checker sources/schema don’t (yet) know anything about a `slot` element: nothing about where it’s allowed or what content model it might have. (The _“Contexts in which element slot may be used: Where phrasing content is expected.”_ snippet that the OP quotes isn’t from the checker sources/schema but is instead is just some text that we pull and build from a copy of the HTML spec.)

And the reason the checker doesn’t know anything about a `slot` element is that since the only use case I know of for `slot` is if the markup has `<template>…<slot>…</slot>…</template>` — in which case the `slot` doesn’t get parsed into document. And so for the purposes of the checker, we never need to know it exists or care where it’s allowed or what its content model is — because we can’t check it (since the checker checks the parsed document tree, not the markup).

So while I could update the checker sources/schema to recognize the `slot` element in `template`-less cases like that `<!DOCTYPE html><html lang=en><title>!</title><span><slot></slot></span>` one, I’m not sure there’s any point in changing anything if there’s no real-world case for ever having slot-with-no-template markup like that.

[15:40:50.0542] <sideshowbarker>
 * yeah, to be more clear: I meant just in the context of the markup — the serialized source markup

The specific context is https://github.com/validator/validator/issues/1438, where the OP has this markup:

```html
<!DOCTYPE html><html lang=en><title>!</title>
<span><slot></slot></span>
```

… and the checker gives an odd/unexpected message — because the checker sources/schema don’t (yet) know anything about a `slot` element: nothing about where it’s allowed or what content model it might have. (The _“Contexts in which element slot may be used: Where phrasing content is expected.”_ snippet that the OP quotes isn’t from the checker sources/schema but is instead is just some text that we pull and build from a copy of the HTML spec.)

And the reason the checker doesn’t know anything about a `slot` element is that the only use case I know of for `slot` is if the markup has `<template>…<slot>…</slot>…</template>` — in which case the `slot` doesn’t get parsed into document. And so for the purposes of the checker, we never need to know it exists or care where it’s allowed or what its content model is — because we can’t check it (since the checker checks the parsed document tree, not the markup).

So while I could update the checker sources/schema to recognize the `slot` element in `template`-less cases like that `<!DOCTYPE html><html lang=en><title>!</title><span><slot></slot></span>` one, I’m not sure there’s any point in changing anything if there’s no real-world case for ever having slot-with-no-template markup like that.

[15:41:06.0235] <sideshowbarker>
 * yeah, to be more clear: I meant just in the context of the markup — the serialized source markup

The specific context is https://github.com/validator/validator/issues/1438, where the OP has this markup:

```html
<!DOCTYPE html><html lang=en><title>!</title>
<span><slot></slot></span>
```

… and the checker gives an odd/unexpected message — because the checker sources/schema don’t (yet) know anything about a `slot` element: nothing about where it’s allowed or what content model it might have. (The _“Contexts in which element slot may be used: Where phrasing content is expected.”_ snippet that the OP quotes isn’t from the checker sources/schema but is instead is just some text that we pull and build from a copy of the HTML spec.)

And the reason the checker doesn’t know anything about a `slot` element is that the only use case I know of for `slot` is if the markup has `<template>…<slot>…</slot>…</template>` — in which case the `slot` doesn’t get parsed into the document. And so for the purposes of the checker, we never need to know it exists or care where it’s allowed or what its content model is — because we can’t check it (since the checker checks the parsed document tree, not the markup).

So while I could update the checker sources/schema to recognize the `slot` element in `template`-less cases like that `<!DOCTYPE html><html lang=en><title>!</title><span><slot></slot></span>` one, I’m not sure there’s any point in changing anything if there’s no real-world case for ever having slot-with-no-template markup like that.

[15:41:30.0085] <sideshowbarker>
 * yeah, to be more clear: I meant just in the context of the markup — the serialized source markup

The specific context is https://github.com/validator/validator/issues/1438, where the OP has this markup:

```html
<!DOCTYPE html><html lang=en><title>!</title>
<span><slot></slot></span>
```

… and the checker gives an odd/unexpected message — because the checker sources/schema don’t (yet) know anything about a `slot` element: nothing about where it’s allowed or what content model it might have. (The _“Contexts in which element slot may be used: Where phrasing content is expected.”_ snippet that the OP quotes isn’t from the checker sources/schema but is instead is just some text that we pull and build from a copy of the HTML spec.)

And the reason the checker doesn’t know anything about a `slot` element is that the only use case I know of for `slot` is if the markup has `<template>…<slot>…</slot>…</template>` — in which case the `slot` doesn’t get parsed into the document. And so for the purposes of the checker, we never need to know that `slot` exists or care where it’s allowed or what its content model is — because we can’t check it (since the checker checks the parsed document tree, not the markup).

So while I could update the checker sources/schema to recognize the `slot` element in `template`-less cases like that `<!DOCTYPE html><html lang=en><title>!</title><span><slot></slot></span>` one, I’m not sure there’s any point in changing anything if there’s no real-world case for ever having slot-with-no-template markup like that.


2022-10-07
[02:10:24.0883] <jgraham>
dlrobertson: A small number of related tests is a much better interop proposal than a large number of independent changes. The process is that we don't intend to split proposals, but will group them, so if you propose too much it's more likely to be rejected because some parts aren't a priority, whereas something small is easier to justify.

[02:28:53.0601] <annevk>
sideshowbarker: the content model makes sense inside a shadow tree; I'm curious what the `slot` PR said about this as I think we did consider it

[02:45:33.0168] <sideshowbarker>
> <@annevk:matrix.org> sideshowbarker: the content model makes sense inside a shadow tree; I'm curious what the `slot` PR said about this as I think we did consider it

Ok, I'll go back and take a look at it and see

[03:49:20.0358] <nicolo-ribaudo>
What does `w-nodev` on some span/div tags in the HTML spec mean?

[03:57:59.0129] <annevk>
nicolo-ribaudo: I think it means exclude from the developer edition, but if that doesn't make sense it means the opposite

[03:58:39.0767] <annevk>
nicolo-ribaudo: https://github.com/whatwg/wattsi/blob/main/Syntax.md confirms it's the former

[04:01:19.0014] <nicolo-ribaudo>
Thank you!

[12:04:57.0784] <dlrobertson>
jgraham: Thanks, I'll take a peek at the existing proposals to see if the blob content type work is similar in size to the others


2022-10-08
[01:53:02.0799] <wayneca>
I am getting confused about entities, named or otherwise. Are any of them necessary, and if so, which ones and in what context? The last list I looked at showed &amp;, &lt;, &gt;, &quot; and &apos; as still being necessary, but with the exception of &lt; and &gt;, I haven't seen any place where the browser doesn't render the &, " or ' correctly without using the entity.

[01:54:13.0477] <wayneca>
Also, the html5 validator doesn't return any errors or warnings if I don't use an entity for &, " or ' in the body of a document.

[02:02:28.0054] <Andreu Botella>
you need `&amp;` in order to display the text "& amp;" (without the space)

[02:02:39.0834] <Andreu Botella>
fuck, Element gets their escapes wrong

[02:02:55.0918] <Andreu Botella>
 * you need `&amp;` in order to display the text "&<b></b>amp;"

[02:03:06.0723] <Andreu Botella>
 * you need `&amp;` in order to display the text "& amp;" (without the space)

[02:03:26.0319] <Andreu Botella>
as for the quotes, they're needed for escaping inside attributes

[02:14:45.0250] <Andreu Botella>
Domenic: Since the `.at()` TC39 proposal had reached stage 4 and part of the motivation for it was making the `*List` DOM APIs upgradable, I was confused for a bit as to why that wasn't enough, and as to why `item()` on `FileList` wasn't called `at()`

[02:15:04.0958] <Andreu Botella>
I hadn't realized the method name in the proposal had changed at some point 😅

[02:15:13.0823] <Domenic>
Yeah, that motivation sadly ended up not being possible to fulfill

[02:15:30.0434] <Domenic>
 * Yeah, that motivation sadly ended up not being possible to fulfill

[06:15:27.0604] <Domenic>
TabAtkins: Bikeshed linking DB seems borked, e.g. stuff like {{Window}} no longer works.

[07:36:18.0972] <TabAtkins>
Sighhhhh, thanks for the heads up

[07:42:13.0826] <TabAtkins>
wayneca: You need &amp;lt; to render < in text. You need &amp;amp; *sometimes* - most of the time it'll get displayed literally, but not when it's next to certain characters, so it's safer to use it any time the & has characters right after it. (Spaces or punctuation after it are always safe tho.) You need &amp;quot; or &amp;apos; only to display those characters inside of attributes using that character as the quotes. You never need &amp;gt;.

[07:42:43.0315] <TabAtkins>
Lollllll the escapes are actively rendered in Matrix, fuck

[07:43:47.0011] <TabAtkins>
* wayneca: You need &amp;lt; to render < in text. You need &amp;amp; *sometimes* - most of the time it'll get displayed literally, but not when it's next to certain characters, so it's safer to use it any time the & has characters right after it. (Spaces or punctuation after it are always safe tho.) You need &amp;quot; or &amp;apos; only to display those characters inside of attributes using that character as the quotes. You never need &amp;gt;.

[07:44:20.0674] <TabAtkins>
Welp Matrix's formatting is fucked, I can't render these correctly no matter what I do.

[07:44:43.0836] <annevk>
Now I'm curious. &apos; `&apos;`

[07:44:55.0360] <annevk>
Backticks!

[07:44:55.0902] <Andreu Botella>
yeah, inside a codeblock they seem to be escaped

[07:45:35.0317] <TabAtkins>
* wayneca: You need `&lt;` to render < in text. You need `&amp;` *sometimes* - most of the time it'll get displayed literally, but not when it's next to certain characters, so it's safer to use it any time the & has characters right after it. (Spaces or punctuation after it are always safe tho.) You need `&quot;` or `&apos;` only to display those characters inside of attributes using that character as the quotes. You never need `&gt;`.

[07:45:42.0913] <Andreu Botella>
this is probably Element the client, rather than Matrix the protocol though

[07:46:05.0076] <TabAtkins>
Oh right the element mobile and desktop clients do escaping differently

[07:46:23.0403] <TabAtkins>
Which is just [chef-kiss]

[07:47:38.0079] <annevk>
How is there no nod emoji

[07:51:26.0227] <TabAtkins>
 * wayneca: You need `&lt;` to render \< in text. You need `&amp;` *sometimes* - most of the time it'll get displayed literally, but not when it's next to certain characters, so it's safer to use it any time the & has characters right after it. (Spaces or punctuation after it are always safe tho.) You need `&quot;` or `&apos;` only to display those characters inside of attributes using that character as the quotes. You never need `&gt;`.


2022-10-09
[23:17:41.0729] <wayneca>
OK, so if I have this right, ```&lt;``` is always needed, ```&gt;``` is never needed, ```&amp;``` is only needed when certain characters follow it, so safer to just use it in all circumstances, and ```&quot;``` and ```&apos;``` are only needed when used in attributes using those characters as the quote marks. All other entities are not necessary at all, since unicode takes care of character handling. 

[23:19:04.0201] <wayneca>
Thanks guys. I appreciate the insight.

[00:47:59.0502] <Domenic>
I think maybe `&gt;` could be needed if you're doing unquoted attributes? software.hixie.ch/utilities/js/live-dom-viewer/saved/10864


2022-10-11
[00:08:12.0814] <annevk>
Hall of Web IDL shame (includes Web IDL due to a fault in Cookie Store): https://github.com/w3c/webref/tree/main/ed/idlpatches

[00:47:25.0228] <Marcos Casagrande>
Hello annevk I've been working on Deno MIME sniffing tests, but noticed that if we pass all mimesniff tests, FileAPI tests begin to fail. Could you take a look at: https://github.com/web-platform-tests/wpt/issues/36377

It seems Blob (FileAPI) and mimesniff spec/tests conflict with each other.

[00:48:15.0553] <Andreu Botella>
that might be related to https://github.com/w3c/FileAPI/issues/170

[00:49:41.0804] <Marcos Casagrande>
Known issue it seems then, thanks for the link Andreu Botella 

[00:52:01.0021] <annevk>
Marcos Casagrande: I wouldn't mind seeing the File API tests updated with some kind of pointer to issue 43

[00:52:30.0884] <annevk>
There was agreement this was going to be fixed, but File API isn't really maintained by anyone at the moment

[00:53:15.0288] <Andreu Botella>
you'd think the Chrome folks would be maintaining it, since it interacts with the OPFS and file system APIs

[01:10:04.0293] <Marcos Casagrande>
> <@annevk:matrix.org> There was agreement this was going to be fixed, but File API isn't really maintained by anyone at the moment

So making Deno's Blob compliant with MIME sniffing spec would be the best path forward given that File API isn't being maintained?

[01:34:32.0127] <annevk>
Marcos Casagrande: I think so, ideally we do the same in browsers and perhaps find a maintainer for File API...

[01:41:21.0036] <Marcos Casagrande>
Thanks annevk 

[01:42:12.0216] <Marcos Casagrande>
By updated, you mean remove the broken ones in favour of mimesniff tests?

[02:44:46.0615] <Ms2ger 💉💉💉>
So Marcos Casagrande, how do you feel about becoming an editor for File API?

[03:33:05.0246] <sideshowbarker>
If somebody familiar with cache partitioning in current engines could weigh in on https://github.com/mdn/content/issues/21469 that would be much appreciated.

It would be nice to have some sources to cite that clearly show:
1. Major browser engines have all implemented cache partitioning.
2. Cache partitioning prevents Etag-based tracking.

[04:04:22.0430] <annevk>
sideshowbarker: I'm familiar, but don't have good sources other than https://privacycg.github.io/storage-partitioning/

[04:09:39.0795] <Marcos Casagrande>
I'm flattered but to be honest writing specs is not my thing. I prefer to implement them. And I'll barely have any time to do it as well.

[04:35:16.0504] <sideshowbarker>
/me looks

[04:36:00.0234] <Ms2ger 💉💉💉>
It was worth a try :)

[04:41:06.0982] <sideshowbarker>
annevk: MDN has https://developer.mozilla.org/en-US/docs/Web/Privacy/State_Partitioning#network_partitioning already too — but that document is Firefox-specific

However, it seems like that doesn’t need to be Firefox-specific and could be re-worked to also cover what’s implemented in other UAs too.

But making that so still depends on having info on exactly what’s implemented in the various engines (and ideally also on having more-specific info about how it affects Etag-based tracking in particular)

[05:14:00.0944] <annevk>
sideshowbarker: I can tell you that the reporter is correct (they're a security researcher if I'm not mistaken)

[05:14:52.0970] <sideshowbarker>
yeah I don’t doubt that — would just be useful to have something to reference

