2022-10-01
[08:02:55.0561] <annevk>
Domenic: can you get me one of these? https://twitter.com/googlejapan/status/1576014429845594113


2022-10-02
[22:43:37.0756] <Domenic>
Is that real?? They keep creating fun keyboard April Fools like https://www.youtube.com/watch?v=5LI1PysAlkU but the day is not April 1...

[22:46:01.0346] <Domenic>
Last October 1 there was a cup keyboard so maybe October 1 is a special day?? https://www.youtube.com/watch?v=20pC05yisRM

[22:46:11.0812] <Domenic>
(Maybe this is what threads are for...)

[23:55:47.0331] <sideshowbarker>
I guess https://github.com/whatwg/html/pull/8344 marks the start of Hacktoberfest…

[00:09:51.0698] <Domenic>
It's opt-in this year so I'm a bit more optimistic... but we'll see how many people read the directions.

[05:13:49.0005] <annevk>
Domenic: you and sideshowbarker should figure it out! That cup keyboard looks amazing too.

[05:20:13.0950] <sideshowbarker>
I already ordered mine — along with a ordering an extra-long desk, since my current desk is deficiently too short to support proper use of the keyboard. Now I just need to move to desk to a bigger room, since I don’t have enough free space in my current office to fit the improved desk in. But once I do that, I’ll be all set

[15:05:49.0005] <sideshowbarker>
annevk: FYI: Stack Overflow question leads to URL-parsing bug getting fixed in the HTML checker, and test suite getting more coverage  https://stackoverflow.com/questions/73845912/why-is-an-invalid-path-when-a-is-valid


2022-10-03
[01:00:30.0133] <myakura>
> <@domenicdenicola:matrix.org> Last October 1 there was a cup keyboard so maybe October 1 is a special day?? https://www.youtube.com/watch?v=20pC05yisRM

https://japan.googleblog.com/2022/10/gboard-2022.html says they choose October 1 because many people use keyboards with 101 keys

[01:05:59.0206] <myakura>
I've seen a couple of those funny keyboards at Google Japan office (when their office was in Roppongi Hills)

[01:06:18.0134] <Domenic>
We have a kanji keyboard with ~2000 keys at the Shibuya office

[01:10:48.0703] <myakura>
Ah, the drum sets one :)

[06:10:51.0944] <Andreas Kling>
hey folks! I have some questions about implementing flexbox, is this an appropriate channel for that, or should I go somewhere more specific? :)

[06:29:04.0555] <aja>
> <@myakura:matrix.org> Ah, the drum sets one :)

imagining a Taiko keyboard

[07:47:42.0483] <emilio>
> <@awesomekling:matrix.org> hey folks! I have some questions about implementing flexbox, is this an appropriate channel for that, or should I go somewhere more specific? :)

#css on irc.w3.org might also be good. Also, most of the Gecko layout hackers hang in #layout:mozilla.org, depending on your question it might be worth posting there for more eyes :)

[07:48:52.0601] <networkException>
the irc channel should also be bridged to #w3c_css:matrix.org

[08:11:21.0808] <Andreas Kling>
awesome, thanks both of you :^)

[10:06:23.0242] <hober>
/me waves at Andreas Kling :)


2022-10-04
[23:13:45.0625] <Domenic>
Anyone with CSSWG write privileges want to close https://github.com/w3c/csswg-drafts/issues/4683 ?

[23:14:48.0057] <Domenic>
https://github.com/w3c/csswg-drafts/issues/5508 also seems fixed

[23:15:45.0718] <Domenic>
and https://github.com/w3c/csswg-drafts/issues/3946

[23:15:56.0436] <Domenic>
OK, there's probably lots, I'll stop triaging another repo's issues now...

[00:29:59.0357] <annevk>
Domenic: I've closed those three issues.

[09:00:53.0203] <annevk>
mfreed: why `popUp`? Per https://whatwg.org/style-guide it's popup.

[11:48:19.0384] <khafra>
for this test https://github.com/web-platform-tests/wpt/blob/master/fetch/api/abort/general.any.js#L507 isn't duplex: 'half' needed in fetch options to make it reject with a DOMException rather than a typeerror? It also appears to be failing on all browsers

[11:49:07.0088] <khafra>
 * for this test https://github.com/web-platform-tests/wpt/blob/master/fetch/api/abort/general.any.js#L507 isn't duplex: 'half' needed in fetch options to make it reject with a DOMException rather than a typeerror? It also appears to be failing on all browsers


2022-10-05
[20:17:25.0949] <Domenic>
> <@khafra:matrix.org> for this test https://github.com/web-platform-tests/wpt/blob/master/fetch/api/abort/general.any.js#L507 isn't duplex: 'half' needed in fetch options to make it reject with a DOMException rather than a typeerror? It also appears to be failing on all browsers

duplex: 'half' is the default.

[00:22:24.0142] <annevk>
Well, we do require specifying `duplex` if you supply a stream.

[00:23:42.0450] <annevk>
So I think that test probably needs to be modified. At least, I'd assume it throws a `TypeError` in Chrome.

[00:23:51.0905] <annevk>
 * So I think that test probably needs to be modified. At least, I'd assume it throws a `TypeError` in Chrome.

[00:25:17.0573] <annevk>
https://github.com/web-platform-tests/wpt/pull/36268 is the PR for that test. Thanks @khafra:matrix.org

[01:40:55.0316] <sideshowbarker>
hsivonen: r? https://github.com/validator/htmlparser/pull/75

[07:51:30.0462] <Dominic Farolino>
I know there's been discussion about the errors we sometimes see with the style sheets not being fully loaded from the SW

[07:51:55.0763] <Dominic Farolino>
I loaded a spec today with DevTools open and came across this, not sure if it gives any _new_ insight into what's going on /cc annevk 

[08:01:56.0402] <Dominic Farolino>
Btw I am reproducing this on every navigation to a spec as long as I have DevTools open

[08:20:37.0000] <annevk>
Dominic Farolino: how old could this storage data be?

[15:33:07.0863] <Andreu Botella>
TabAtkins: Hey, could you take a look at https://github.com/w3c/csswg-drafts/pull/7801 and possibly merge it?

[15:33:15.0743] <Andreu Botella>
MDN depends on it

[15:34:13.0842] <TabAtkins>
thanks for ping, I'd entirely missed that. merged

[15:34:45.0010] <Andreu Botella>
thanks


2022-10-06
[18:54:26.0214] <Domenic>
> <@domfarolino:matrix.org> Btw I am reproducing this on every navigation to a spec as long as I have DevTools open

Interesting, I wonder if DevTools is messing with things? The requests should be "cors" since they use the crossorigin="" attribute.

[18:55:23.0038] <Domenic>
Oh I see that is consistent with the error

[18:55:29.0905] <Domenic>
How did they get an opaque response, indeed...

[00:32:14.0452] <annevk>
Domenic: I strongly suspect https://github.com/whatwg/html/pull/5339#issuecomment-1269482374 is correct, but a quick peek from you might not be a bad idea before people start doing a bunch of work you wouldn't be happy with

[00:32:40.0091] <Domenic>
Yep, just read it, thanks for checking. Will give it a thumbs up

[00:43:45.0428] <Ms2ger 💉💉💉>
I rebased it on Monday :(

[00:44:53.0520] <Ms2ger 💉💉💉>
annevk: so I'm guessing we're looking at either 50 or so web specs or 50 or so TC39 proposals

[00:53:17.0201] <Domenic>
Or they could just stop changing the meaning of current realm, and pick a new word for shadow-including current realm...

[00:54:05.0645] <annevk>
Ms2ger 💉💉💉: if we're including proposals there's gonna be more web specs

[00:54:35.0413] <annevk>
Ms2ger 💉💉💉: I suspect it's because there's also some other JS-related refactoring going on and maybe import maps had an impact?

[00:55:04.0177] <annevk>
Ms2ger 💉💉💉: the realm lowercasing wasn't the primary source of conflicts at least

[00:55:23.0852] <Ms2ger 💉💉💉>
Yeah, it's nicolo-ribaudo 

[00:56:18.0198] <Domenic>
 * ~~Or they could just stop changing the meaning of current realm, and pick a new word for shadow-including current realm...~~ Wait this is wrong, that's the change TC39 specs option

[00:56:23.0531] <Domenic>
 * ~Or they could just stop changing the meaning of current realm, and pick a new word for shadow-including current realm...~ Wait this is wrong, that's the change TC39 specs option

[00:56:25.0194] <annevk>
Those darn colleagues always making a mess.

[00:57:39.0207] <nicolo-ribaudo>
> <@annevk:matrix.org> Those darn colleagues always making a mess.

We ensure job security for eachother 

[01:01:36.0442] <Ms2ger 💉💉💉>
Anyway - if I changed to "current realm" (incl SR) and "current principal realm / current principal global object / current principal settings object" (excl SR), that would work for you Domenic annevk ?

[01:01:55.0483] <Ms2ger 💉💉💉>
Then I just need to make sure nobody else complains

[01:01:57.0694] <Domenic>
Yep

[01:06:22.0500] <Ms2ger 💉💉💉>
I hope the light at the end of the tunnel isn't an oncoming train :)

[01:44:40.0088] <annevk>
Oh, some of my decl shadow DOM comments echo those I made in 2020.

[03:04:52.0635] <Ms2ger 💉💉💉>
Pushed some initial changes in that direction, more after lunch

[05:39:22.0184] <sideshowbarker>
About the `slot` element document-conformance requirements, did we ever consider making the spec require that a `slot` element must have a `template` ancestor?

Is there any reason not to make such a requirement? Is there any use case for a `slot` element that’s not a descendant of a `template` element?

[05:39:34.0488] <sideshowbarker>
 * About the `slot` element document-conformance requirements, did we ever consider making the spec require that a `slot` element must have a `template` ancestor?

Is there any reason not to make such a requirement? Is there any use case for a `slot` element that’s not a descendant of a `template` element?

[05:40:28.0453] <sideshowbarker>
 * About the `slot` element document-conformance requirements, did we ever consider making the spec require that a `slot` element must have a `template` ancestor?

Is there any reason not to make such a requirement? Is there any use case for a `slot` element that’s not a descendant of a `template` element?

(I vaguely recall that I may have asked this question before, but if so I don’t remember what the answer was…)

[07:08:27.0056] <annevk>
sideshowbarker: an actual descendant of a `template` element? Or being part of its "contents"? Did you look at the original `slot` element PR? I vaguely recall there being at least some discussion about it.

[07:41:36.0916] <dlrobertson>
At what point does a cluster of issues become a interop <year> effort?

[07:44:05.0451] <dlrobertson>
I've started working on upstream tests for https://github.com/whatwg/fetch/issues/1436, https://github.com/whatwg/fetch/issues/1464, and https://github.com/whatwg/xhr/issues/357

[07:45:00.0434] <dlrobertson>
but they're all very much related, so I wasn't sure if they'd be worth an interop issue

[07:45:53.0878] <dlrobertson>
also they're very much just a random nit picked up to learn more about the specs... not something I've seen extensively in the real world

[08:00:25.0174] <annevk>
dlrobertson: there was a somewhat random bucket last year for assorted issues; it seems worth proposing these and perhaps they can be captured in a similar thing

[08:00:41.0561] <annevk>
dlrobertson: jgraham prolly has better advice

[08:01:12.0806] <annevk>
(Also, I think I've said this before, the yak shaving is appreciated!)

[08:07:07.0419] <dlrobertson>
awesome! thanks for the info

[10:29:47.0248] <TabAtkins>
Wait if we're doing realm work can we settle the WebIDL issue that defines the default realms for everything to the correct option so the rest of us don't have to understand the completely opaque differences between each of the terms?

[10:40:41.0067] <annevk>
TabAtkins: unfortunately that's not really a blocker for anyone's goals here (I agree that would be very very good though if it can be made to work)

[10:42:09.0516] <TabAtkins>
Ugh, it's a blocker for the vast majority of specs to have correct (/any at all) realm information, tho at least the current "most specs don't mention it at all, and implementors just do whatever similar things do, which is generally correct" mostly works in practice.

[10:46:47.0043] <annevk>
Yeah that's indeed the status quo for many allocated objects. 😕

[15:39:53.0000] <sideshowbarker>
> <@annevk:matrix.org> sideshowbarker: an actual descendant of a `template` element? Or being part of its "contents"? Did you look at the original `slot` element PR? I vaguely recall there being at least some discussion about it.

yeah, to be more clear: I meant just in the context of the markup — the serialized source markup

The specific context is https://github.com/validator/validator/issues/1438, where the OP has this markup:

```html
<!DOCTYPE html><html lang=en><title>!</title>
<span><slot></slot></span>
```
… and the checker gives an odd an unexpected message — because the checker sources/schema don’t (yet) know anything about a `slot` element: nothing about where it’s allowed or what content model it might have. (The _“Contexts in which element slot may be used: Where phrasing content is expected.”_ snippet that the OP quotes isn’t from the checker sources/schema but is instead is just some text that we pull and build from a copy of the HTML spec.)

And the reason the checker doesn’t know anything about a `slot` element is that since the only use case I know of for `slot` is if the markup has `<template>…<slot>…</slot>…</template>` — in which case the `slot` doesn’t get parsed into document. And so for the purposes of the checker, we never need to know it exists or care where it’s allowed or what its content model is — because we can’t check it (since the checker checks the parsed document tree, not the markup).

So while I could update the checker sources/schema to recognize the `slot` element in `template`-less cases like that `<!DOCTYPE html><html lang=en><title>!</title><span><slot></slot></span>` one, I’m not sure there’s any point in changing anything if there’s no real-world case for ever having slot-with-no-template markup like that.



[15:40:17.0818] <sideshowbarker>
> <@annevk:matrix.org> sideshowbarker: an actual descendant of a `template` element? Or being part of its "contents"? Did you look at the original `slot` element PR? I vaguely recall there being at least some discussion about it.

 * yeah, to be more clear: I meant just in the context of the markup — the serialized source markup

The specific context is https://github.com/validator/validator/issues/1438, where the OP has this markup:

```html
<!DOCTYPE html><html lang=en><title>!</title>
<span><slot></slot></span>
```

… and the checker gives an odd/unexpected message — because the checker sources/schema don’t (yet) know anything about a `slot` element: nothing about where it’s allowed or what content model it might have. (The _“Contexts in which element slot may be used: Where phrasing content is expected.”_ snippet that the OP quotes isn’t from the checker sources/schema but is instead is just some text that we pull and build from a copy of the HTML spec.)

And the reason the checker doesn’t know anything about a `slot` element is that since the only use case I know of for `slot` is if the markup has `<template>…<slot>…</slot>…</template>` — in which case the `slot` doesn’t get parsed into document. And so for the purposes of the checker, we never need to know it exists or care where it’s allowed or what its content model is — because we can’t check it (since the checker checks the parsed document tree, not the markup).

So while I could update the checker sources/schema to recognize the `slot` element in `template`-less cases like that `<!DOCTYPE html><html lang=en><title>!</title><span><slot></slot></span>` one, I’m not sure there’s any point in changing anything if there’s no real-world case for ever having slot-with-no-template markup like that.

[15:40:50.0542] <sideshowbarker>
 * yeah, to be more clear: I meant just in the context of the markup — the serialized source markup

The specific context is https://github.com/validator/validator/issues/1438, where the OP has this markup:

```html
<!DOCTYPE html><html lang=en><title>!</title>
<span><slot></slot></span>
```

… and the checker gives an odd/unexpected message — because the checker sources/schema don’t (yet) know anything about a `slot` element: nothing about where it’s allowed or what content model it might have. (The _“Contexts in which element slot may be used: Where phrasing content is expected.”_ snippet that the OP quotes isn’t from the checker sources/schema but is instead is just some text that we pull and build from a copy of the HTML spec.)

And the reason the checker doesn’t know anything about a `slot` element is that the only use case I know of for `slot` is if the markup has `<template>…<slot>…</slot>…</template>` — in which case the `slot` doesn’t get parsed into document. And so for the purposes of the checker, we never need to know it exists or care where it’s allowed or what its content model is — because we can’t check it (since the checker checks the parsed document tree, not the markup).

So while I could update the checker sources/schema to recognize the `slot` element in `template`-less cases like that `<!DOCTYPE html><html lang=en><title>!</title><span><slot></slot></span>` one, I’m not sure there’s any point in changing anything if there’s no real-world case for ever having slot-with-no-template markup like that.

[15:41:06.0235] <sideshowbarker>
 * yeah, to be more clear: I meant just in the context of the markup — the serialized source markup

The specific context is https://github.com/validator/validator/issues/1438, where the OP has this markup:

```html
<!DOCTYPE html><html lang=en><title>!</title>
<span><slot></slot></span>
```

… and the checker gives an odd/unexpected message — because the checker sources/schema don’t (yet) know anything about a `slot` element: nothing about where it’s allowed or what content model it might have. (The _“Contexts in which element slot may be used: Where phrasing content is expected.”_ snippet that the OP quotes isn’t from the checker sources/schema but is instead is just some text that we pull and build from a copy of the HTML spec.)

And the reason the checker doesn’t know anything about a `slot` element is that the only use case I know of for `slot` is if the markup has `<template>…<slot>…</slot>…</template>` — in which case the `slot` doesn’t get parsed into the document. And so for the purposes of the checker, we never need to know it exists or care where it’s allowed or what its content model is — because we can’t check it (since the checker checks the parsed document tree, not the markup).

So while I could update the checker sources/schema to recognize the `slot` element in `template`-less cases like that `<!DOCTYPE html><html lang=en><title>!</title><span><slot></slot></span>` one, I’m not sure there’s any point in changing anything if there’s no real-world case for ever having slot-with-no-template markup like that.

[15:41:30.0085] <sideshowbarker>
 * yeah, to be more clear: I meant just in the context of the markup — the serialized source markup

The specific context is https://github.com/validator/validator/issues/1438, where the OP has this markup:

```html
<!DOCTYPE html><html lang=en><title>!</title>
<span><slot></slot></span>
```

… and the checker gives an odd/unexpected message — because the checker sources/schema don’t (yet) know anything about a `slot` element: nothing about where it’s allowed or what content model it might have. (The _“Contexts in which element slot may be used: Where phrasing content is expected.”_ snippet that the OP quotes isn’t from the checker sources/schema but is instead is just some text that we pull and build from a copy of the HTML spec.)

And the reason the checker doesn’t know anything about a `slot` element is that the only use case I know of for `slot` is if the markup has `<template>…<slot>…</slot>…</template>` — in which case the `slot` doesn’t get parsed into the document. And so for the purposes of the checker, we never need to know that `slot` exists or care where it’s allowed or what its content model is — because we can’t check it (since the checker checks the parsed document tree, not the markup).

So while I could update the checker sources/schema to recognize the `slot` element in `template`-less cases like that `<!DOCTYPE html><html lang=en><title>!</title><span><slot></slot></span>` one, I’m not sure there’s any point in changing anything if there’s no real-world case for ever having slot-with-no-template markup like that.


2022-10-07
[02:10:24.0883] <jgraham>
dlrobertson: A small number of related tests is a much better interop proposal than a large number of independent changes. The process is that we don't intend to split proposals, but will group them, so if you propose too much it's more likely to be rejected because some parts aren't a priority, whereas something small is easier to justify.

[02:28:53.0601] <annevk>
sideshowbarker: the content model makes sense inside a shadow tree; I'm curious what the `slot` PR said about this as I think we did consider it

[02:45:33.0168] <sideshowbarker>
> <@annevk:matrix.org> sideshowbarker: the content model makes sense inside a shadow tree; I'm curious what the `slot` PR said about this as I think we did consider it

Ok, I'll go back and take a look at it and see

[03:49:20.0358] <nicolo-ribaudo>
What does `w-nodev` on some span/div tags in the HTML spec mean?

[03:57:59.0129] <annevk>
nicolo-ribaudo: I think it means exclude from the developer edition, but if that doesn't make sense it means the opposite

[03:58:39.0767] <annevk>
nicolo-ribaudo: https://github.com/whatwg/wattsi/blob/main/Syntax.md confirms it's the former

[04:01:19.0014] <nicolo-ribaudo>
Thank you!

[12:04:57.0784] <dlrobertson>
jgraham: Thanks, I'll take a peek at the existing proposals to see if the blob content type work is similar in size to the others


2022-10-08
[01:53:02.0799] <wayneca>
I am getting confused about entities, named or otherwise. Are any of them necessary, and if so, which ones and in what context? The last list I looked at showed &amp;, &lt;, &gt;, &quot; and &apos; as still being necessary, but with the exception of &lt; and &gt;, I haven't seen any place where the browser doesn't render the &, " or ' correctly without using the entity.

[01:54:13.0477] <wayneca>
Also, the html5 validator doesn't return any errors or warnings if I don't use an entity for &, " or ' in the body of a document.

[02:02:28.0054] <Andreu Botella>
you need `&amp;` in order to display the text "& amp;" (without the space)

[02:02:39.0834] <Andreu Botella>
fuck, Element gets their escapes wrong

[02:02:55.0918] <Andreu Botella>
 * you need `&amp;` in order to display the text "&<b></b>amp;"

[02:03:06.0723] <Andreu Botella>
 * you need `&amp;` in order to display the text "& amp;" (without the space)

[02:03:26.0319] <Andreu Botella>
as for the quotes, they're needed for escaping inside attributes

[02:14:45.0250] <Andreu Botella>
Domenic: Since the `.at()` TC39 proposal had reached stage 4 and part of the motivation for it was making the `*List` DOM APIs upgradable, I was confused for a bit as to why that wasn't enough, and as to why `item()` on `FileList` wasn't called `at()`

[02:15:04.0958] <Andreu Botella>
I hadn't realized the method name in the proposal had changed at some point 😅

[02:15:13.0823] <Domenic>
Yeah, that motivation sadly ended up not being possible to fulfill

[02:15:30.0434] <Domenic>
 * Yeah, that motivation sadly ended up not being possible to fulfill

[06:15:27.0604] <Domenic>
TabAtkins: Bikeshed linking DB seems borked, e.g. stuff like {{Window}} no longer works.

[07:36:18.0972] <TabAtkins>
Sighhhhh, thanks for the heads up

[07:42:13.0826] <TabAtkins>
wayneca: You need &amp;lt; to render < in text. You need &amp;amp; *sometimes* - most of the time it'll get displayed literally, but not when it's next to certain characters, so it's safer to use it any time the & has characters right after it. (Spaces or punctuation after it are always safe tho.) You need &amp;quot; or &amp;apos; only to display those characters inside of attributes using that character as the quotes. You never need &amp;gt;.

[07:42:43.0315] <TabAtkins>
Lollllll the escapes are actively rendered in Matrix, fuck

[07:43:47.0011] <TabAtkins>
* wayneca: You need &amp;lt; to render < in text. You need &amp;amp; *sometimes* - most of the time it'll get displayed literally, but not when it's next to certain characters, so it's safer to use it any time the & has characters right after it. (Spaces or punctuation after it are always safe tho.) You need &amp;quot; or &amp;apos; only to display those characters inside of attributes using that character as the quotes. You never need &amp;gt;.

[07:44:20.0674] <TabAtkins>
Welp Matrix's formatting is fucked, I can't render these correctly no matter what I do.

[07:44:43.0836] <annevk>
Now I'm curious. &apos; `&apos;`

[07:44:55.0360] <annevk>
Backticks!

[07:44:55.0902] <Andreu Botella>
yeah, inside a codeblock they seem to be escaped

[07:45:35.0317] <TabAtkins>
* wayneca: You need `&lt;` to render < in text. You need `&amp;` *sometimes* - most of the time it'll get displayed literally, but not when it's next to certain characters, so it's safer to use it any time the & has characters right after it. (Spaces or punctuation after it are always safe tho.) You need `&quot;` or `&apos;` only to display those characters inside of attributes using that character as the quotes. You never need `&gt;`.

[07:45:42.0913] <Andreu Botella>
this is probably Element the client, rather than Matrix the protocol though

[07:46:05.0076] <TabAtkins>
Oh right the element mobile and desktop clients do escaping differently

[07:46:23.0403] <TabAtkins>
Which is just [chef-kiss]

[07:47:38.0079] <annevk>
How is there no nod emoji

[07:51:26.0227] <TabAtkins>
 * wayneca: You need `&lt;` to render \< in text. You need `&amp;` *sometimes* - most of the time it'll get displayed literally, but not when it's next to certain characters, so it's safer to use it any time the & has characters right after it. (Spaces or punctuation after it are always safe tho.) You need `&quot;` or `&apos;` only to display those characters inside of attributes using that character as the quotes. You never need `&gt;`.


2022-10-09
[23:17:41.0729] <wayneca>
OK, so if I have this right, ```&lt;``` is always needed, ```&gt;``` is never needed, ```&amp;``` is only needed when certain characters follow it, so safer to just use it in all circumstances, and ```&quot;``` and ```&apos;``` are only needed when used in attributes using those characters as the quote marks. All other entities are not necessary at all, since unicode takes care of character handling. 

[23:19:04.0201] <wayneca>
Thanks guys. I appreciate the insight.

[00:47:59.0502] <Domenic>
I think maybe `&gt;` could be needed if you're doing unquoted attributes? software.hixie.ch/utilities/js/live-dom-viewer/saved/10864


2022-10-11
[00:08:12.0814] <annevk>
Hall of Web IDL shame (includes Web IDL due to a fault in Cookie Store): https://github.com/w3c/webref/tree/main/ed/idlpatches

[00:47:25.0228] <Marcos Casagrande>
Hello annevk I've been working on Deno MIME sniffing tests, but noticed that if we pass all mimesniff tests, FileAPI tests begin to fail. Could you take a look at: https://github.com/web-platform-tests/wpt/issues/36377

It seems Blob (FileAPI) and mimesniff spec/tests conflict with each other.

[00:48:15.0553] <Andreu Botella>
that might be related to https://github.com/w3c/FileAPI/issues/170

[00:49:41.0804] <Marcos Casagrande>
Known issue it seems then, thanks for the link Andreu Botella 

[00:52:01.0021] <annevk>
Marcos Casagrande: I wouldn't mind seeing the File API tests updated with some kind of pointer to issue 43

[00:52:30.0884] <annevk>
There was agreement this was going to be fixed, but File API isn't really maintained by anyone at the moment

[00:53:15.0288] <Andreu Botella>
you'd think the Chrome folks would be maintaining it, since it interacts with the OPFS and file system APIs

[01:10:04.0293] <Marcos Casagrande>
> <@annevk:matrix.org> There was agreement this was going to be fixed, but File API isn't really maintained by anyone at the moment

So making Deno's Blob compliant with MIME sniffing spec would be the best path forward given that File API isn't being maintained?

[01:34:32.0127] <annevk>
Marcos Casagrande: I think so, ideally we do the same in browsers and perhaps find a maintainer for File API...

[01:41:21.0036] <Marcos Casagrande>
Thanks annevk 

[01:42:12.0216] <Marcos Casagrande>
By updated, you mean remove the broken ones in favour of mimesniff tests?

[02:44:46.0615] <Ms2ger 💉💉💉>
So Marcos Casagrande, how do you feel about becoming an editor for File API?

[03:33:05.0246] <sideshowbarker>
If somebody familiar with cache partitioning in current engines could weigh in on https://github.com/mdn/content/issues/21469 that would be much appreciated.

It would be nice to have some sources to cite that clearly show:
1. Major browser engines have all implemented cache partitioning.
2. Cache partitioning prevents Etag-based tracking.

[04:04:22.0430] <annevk>
sideshowbarker: I'm familiar, but don't have good sources other than https://privacycg.github.io/storage-partitioning/

[04:09:39.0795] <Marcos Casagrande>
I'm flattered but to be honest writing specs is not my thing. I prefer to implement them. And I'll barely have any time to do it as well.

[04:35:16.0504] <sideshowbarker>
/me looks

[04:36:00.0234] <Ms2ger 💉💉💉>
It was worth a try :)

[04:41:06.0982] <sideshowbarker>
annevk: MDN has https://developer.mozilla.org/en-US/docs/Web/Privacy/State_Partitioning#network_partitioning already too — but that document is Firefox-specific

However, it seems like that doesn’t need to be Firefox-specific and could be re-worked to also cover what’s implemented in other UAs too.

But making that so still depends on having info on exactly what’s implemented in the various engines (and ideally also on having more-specific info about how it affects Etag-based tracking in particular)

[05:14:00.0944] <annevk>
sideshowbarker: I can tell you that the reporter is correct (they're a security researcher if I'm not mistaken)

[05:14:52.0970] <sideshowbarker>
yeah I don’t doubt that — would just be useful to have something to reference

[05:16:01.0971] <annevk>
sideshowbarker: etag-tracking relies on putting something in the cache and then looking if it's there at a different point in time; if the key is only the URL of the thing you put in, that's easy; if the key includes the top-level site, it won't work across cross-site "tabs". These days the key includes the top-level site in all browsers. More keys are only a reality in some browsers and still a topic of discussion.

[05:16:34.0160] <sideshowbarker>
I see

[05:18:15.0111] <sideshowbarker>
Well I guess for now I should just delete that _“Etags are therefore similar to fingerprints, and might also be used for tracking purposes by some servers”_ sentence from the docs

Would be nicer to have something suitable to update/replace with it, but not really essential I guess

[05:22:43.0588] <sideshowbarker>
https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching is a great doc but doesn’t currently describe any details about how engines construct cache keys now how it relates to Etags. It seems like it’d be helpful if it did (or at least enlightening)

[05:29:12.0376] <annevk>
Yeah agreed. Perhaps if you start with linking https://privacycg.github.io/storage-partitioning/ here and there someone will eventually expand on it a bit.

[11:01:10.0658] <TabAtkins>
> <@domenicdenicola:matrix.org> I think maybe `&gt;` could be needed if you're doing unquoted attributes? software.hixie.ch/utilities/js/live-dom-viewer/saved/10864

Right, my personal strat in full is:
1. If writing by hand, use unquoted attrs when I can do so safely. Otherwise, use quoted (and escape the quote char.). Always escape `<`; escape `&` if it's not surrounded by whitespace.
2. If writing HTML content with user-submitted content, always escape `<` and `&` in text, and always quote attributes and escape the quote character and `&` in attr values.
3. If in a live webpage, always use the DOM APIs to insert user-submitted text, so no escaping is needed whatsoever. Exposing user content to the parser is a landmine.

[11:09:13.0382] <Andreu Botella>
TabAtkins: could you look at this? https://github.com/w3c/csswg-drafts/issues/7865

[11:09:22.0759] <Andreu Botella>
the w3c.github.io build is failing after a recent change

[11:09:54.0063] <TabAtkins>
ah, thanks, will fix shortly.

[11:10:06.0265] <TabAtkins>
(and I should indeed change it to not fail on a fatal error)

[11:10:16.0766] <TabAtkins>
i was wondering why they started failing yesterday afternoon


2022-10-12
[22:30:24.0861] <Domenic>
TabAtkins: Bikeshed failing on {{Window}} again.

[00:55:37.0832] <annevk>
sideshowbarker: do you still want to do https://github.com/whatwg/spec-factory/issues/28?

[01:05:39.0184] <sideshowbarker>
> <@annevk:matrix.org> sideshowbarker: do you still want to do https://github.com/whatwg/spec-factory/issues/28?

Yeah. Though I'll now need to remember what I need to do

[01:05:42.0243] <annevk>
sideshowbarker: I went ahead and did it: https://github.com/whatwg/spec-factory/pull/41

[01:05:57.0040] <annevk>
If you want to review, that'd be nice :-)

[01:06:08.0826] <sideshowbarker>
At yeah, looking now

[01:08:00.0172] <sideshowbarker>
Dang, squash merged but forgot to remove the PR number

[01:10:31.0989] <annevk>
I think this is an improvement! Might go right next time. Also, GitHub should really give us some options around squash merging (and also commit message review in general)

[01:46:41.0696] <annevk>
I've put a spec-factory deploy in my calendar for Monday, in case someone thinks of something else we should change between now and then

[07:47:13.0294] <annevk>
TabAtkins: Fetch is also hitting random Bikeshed failures (No 'abstract-op' refs found for 'StructuredSerialize'), used to work fine

[07:47:52.0247] <TabAtkins>
Yeah this is killing me


2022-10-13
[18:44:15.0849] <Domenic>
One day I will be able to merge an editorial PR to a bikeshed spec...

[18:44:53.0106] <Domenic>
Oh hey it's a 500 error this time instead of a {{Window}} error, that's new at least.

[18:45:30.0583] <Domenic>
annevk: maybe we should move off of depending on api.csswg.org for Bikeshed, and locally install it on GitHub actions instead. I'll send a spec-factory PR and see what you think...

[19:00:49.0524] <aja>
plinss' csswg.org DB migration still underway?

[20:59:47.0967] <Domenic>
PendingGetBeacon/PendingPostBeacon, or PendingGETBeacon/PendingPOSTBeacon? Hmm.

[21:03:53.0394] <Domenic>
I guess "GET" is not an initialism so probably "PendingGetBeacon" is best...

[21:59:48.0899] <Peter Linss>
DB server on csswg.org was being migrated this evening, server was down for a while. Should have normal service now. (should be better than the recent 'normal')

[23:09:56.0201] <annevk>
Domenic: historically I didn't like that because I thought it meant that we had to download and install Bikeshed for each build

[23:10:22.0068] <Domenic>
There is some cache thing but it might only work if there's a requirements.txt file... I didn't really want to try it.

[23:10:43.0111] <annevk>
I see, it just seems very wasteful to do it this way

[23:10:54.0370] <Domenic>
I should check some of the W3C specs that download and install Bikeshed each time and see how long that takes

[23:11:45.0782] <Domenic>
I mean to be fair we're downloading and installing all of Python each time, it's not like Bikeshed is that much more comparatively :)

[23:12:56.0577] <Domenic>
It seems to take ~17 seconds: https://github.com/w3c/IndexedDB/actions/runs/3063414506/jobs/4945465758#step:3:391

[23:14:15.0405] <Peter Linss>
Another option is to have a GH action that periodically builds a custom docker image with bikeshed and the latest data, then just use that image in your actions

[23:14:49.0977] <Peter Linss>
https://github.blog/changelog/2020-09-24-github-actions-private-registry-support-for-job-and-service-containers/

[23:15:46.0097] <Peter Linss>
In theory we could build and serve that image from the csswg.org server (if needed)

[23:15:58.0358] <Peter Linss>
 * In theory we could build and serve that image from the csswg.org server (if needed)

[23:17:28.0486] <Peter Linss>
(ideally I'd like to have such an image and a k8s cluster to generate all the specs in parallel)

[23:17:38.0515] <annevk>
Domenic: oh we are? Why is that? Bah.

[23:18:59.0135] <annevk>
I guess I was kinda naïve in thinking that GitHub would have things locally for things you list statically in the configuration file

[23:21:07.0530] <Domenic>
Well that must be what's going on under the hood because setup-python action takes less than 1 second

[23:21:24.0576] <Domenic>
Probably it's preinstalled on all the builders already, maybe setup-python just symlinks something

[23:22:08.0097] <annevk>
Okay good :-)

[23:33:04.0098] <Domenic>
annevk: while I have you, would love to get this merged. https://github.com/whatwg/fetch/pull/1469#issuecomment-1262513703 . I think I addressed your comment to look at things more closely.

[23:40:18.0253] <annevk>
Domenic: so what's weird is that we invoke "process response" but the data isn't final yet; and typically we wouldn't reveal the data until all redirects are followed; does that make sense?

[23:40:57.0263] <Domenic>
Hmm, I think I see... let me work through the flow

[23:41:04.0307] <annevk>
Domenic: I do see your point that it makes sense to hold on to the data given that's what we already do, but currently it wouldn't be exposed at this intermediate point

[23:41:29.0556] <Domenic>
Well right now the spec is broken ever since the move to callbacks

[23:41:41.0484] <Domenic>
You used to call fetch, get back an intermediate response, and then call HTTP-redirect fetch with that intermediate response

[23:41:51.0234] <Domenic>
Now fetch does not return a response, but HTTP-redirect fetch still expects one

[23:42:30.0167] <Domenic>
So you'd have to do something like having your processResponse (which gets the intermediate response!) call HTTP-redirect fetch

[23:43:04.0491] <Domenic>
sorry s/HTTP-redirect fetch/navigate-redirect fetch/

[23:43:18.0106] <Domenic>
Although I guess both expect the intermediate response

[23:43:26.0679] <annevk>
And with `fetch(, { ... "manual" })` they are exposed of course and presumably reveal the "intermediate" timing.

[23:43:40.0040] <annevk>
 * And with `fetch(, { ... "manual" })` they are exposed of course and presumably reveal the "intermediate" timing.

[23:43:55.0133] <Domenic>
But the point I'm taking from you is that it'd be nicer for consumers if processResponse had the same semantics for both manual and non-manual redirects... I want to trace through the flow to see if that fails to be the case.

[23:44:44.0129] <Domenic>
I think this PR actually accomplishes that?

[23:44:53.0469] <Domenic>
Because only main fetch, in the no-Location-header case, calls processResponse

[23:45:52.0510] <annevk>
Wait, if that's the case how would you get a response when there is a Location header?

[23:45:53.0101] <Domenic>
Ah OK, but the problem is, where do we bail out and give HTML the intermediate response.

[23:46:39.0242] <Domenic>
OK so yes, I'm caught up now. I think a new callback would be good.

[23:46:54.0531] <Domenic>
...maybe...

[23:46:54.0686] <annevk>
Wait, HTTP fetch returns a redirect-response to main fetch.

[23:47:22.0289] <annevk>
So I think "process response" is getting called for manual redirect responses, which is good, otherwise `fetch()` wouldn't even work.

[23:47:57.0213] <annevk>
Anyway, I think you and Yoav made a good point that the setup with navigate is somewhat broken already and that this would improve things.

[23:49:07.0974] <annevk>

So as long as we document that this setup can result in "process response" being called multiple times and essentially can resurrect a fetch that thought it was near the finish line, I think we're okay.

[23:49:20.0295] <annevk>
 * 
So as long as we document that this setup can result in "process response" being called multiple times and essentially can resurrect a fetch that thought it was near the finish line, I think we're okay.

[23:50:12.0970] <Domenic>
OK, I'll try adding something about that

[23:50:39.0761] <Domenic>
I think you are right that "process response" is called for intermediate responses

[23:55:44.0462] <Domenic>
OK when writing guidance, there is a problem, which is you have no easy way of knowing which processResponse is the final one.

[23:56:31.0546] <annevk>
Domenic: wouldn't response's status tell you?

[23:56:56.0848] <Domenic>
Yeah, I guess there are ways

[23:56:59.0799] <annevk>
Domenic: might have to peak at the internal response for that, but this is only for "navigate" so...

[23:57:45.0535] <Domenic>
Right now HTML's strategy is to call navigate-redirect fetch and it's a no-op if we've reached the end. Then we look at the location URL. And only call navigate-redirect fetch if it's not null or failure.

[23:57:51.0851] <Domenic>
I guess I'll just recommend that strategy.

[00:03:27.0046] <Domenic>
Done https://whatpr.org/fetch/1469.html#fetch-elsewhere-fetch

[00:05:41.0373] <annevk>
TabAtkins: 101₆ took me a while, but I think you might be close to a year older than me. Enjoy whatever is left of your last hextury. 😂

[00:19:30.0868] <annevk>
Domenic: that looks good, but you prolly want to state that it also requires mode to be "navigate"

[00:20:23.0275] <annevk>
I'm gonna make some tea and then I'll do a proper review. I'm happy to help with nits, so I suspect we can land it in a bit

[00:21:01.0206] <Domenic>
Excellent, thanks!

[00:32:14.0356] <Noam Rosenthal>
Domenic, annevk thanks for moving this along, hope to return to capacity in a month-ish

[00:36:57.0840] <sideshowbarker>
annevk: https://stackoverflow.com/questions/74049310/distinguish-network-error-from-opaque-response-in-fetch-with-no-cors

[00:47:07.0585] <annevk>
Noam Rosenthal: enjoy your kiddo time, hope the nights are reasonable

[00:50:15.0615] <karlcow>
what does that mean? 
https://github.com/whatwg/compat/pull/215#issuecomment-1277180030

I didn't remove it anything related to this. 

[00:50:34.0667] <karlcow>
did the check become stricter?

[00:56:33.0439] <annevk>
sideshowbarker: succesful nerd-snipe

[00:57:25.0391] <annevk>
It probably means that upstream has changed since you last updated the specification.

[00:59:07.0665] <annevk>
We run Bikeshed strictly so sometimes you'll find new problems like this.

[00:59:24.0236] <karlcow>
The references didn't seem to have ever been there. :) 

[00:59:32.0449] <karlcow>
I guess we need to add a bit more

[01:00:02.0990] <karlcow>
thanks. :) I'll do that later. 

[02:35:08.0867] <annevk>
Aside, you probably want to mark this as "Meta: " if you're just fiddling with references as per https://github.com/whatwg/meta/blob/main/COMMITTING.md

[05:00:17.0962] <annevk>
Anyone here familiar with W3C tooling? sideshowbarker maybe? When I commit to a W3C draft there's a subsequent commit done by a bot that links me and it's very annoying: https://github.com/w3c/webappsec-upgrade-insecure-requests/commit/9ea1e027ed1db4ad0b7d9c7e94ba7cfe9a0ac5f6

[05:02:28.0776] <Ms2ger 💉💉💉>
I think it comes from here: https://github.com/w3c/spec-prod/blob/main/src/deploy-gh-pages.ts#L67

[05:03:19.0296] <annevk>
I guess I'll try filing an issue against spec-prod

[05:05:19.0444] <annevk>
Better: https://github.com/w3c/spec-prod/pull/149

[05:21:29.0020] <Ms2ger 💉💉💉>
Damn, that response time!

[05:41:08.0522] <karlcow>
yup

[05:53:28.0389] <karlcow>
oh probably https://github.com/tabatkins/bikeshed/pull/2364

[07:48:20.0222] <johannhof>
Is there any guidance on writing error messages for exceptions? Looking at https://webidl.spec.whatwg.org/#dfn-exception-message those seem to be "user agent defined", but do we consider consistency valuable anyway here?

[08:09:14.0781] <Ms2ger 💉💉💉>
I don't think there's any guidance

[08:09:41.0912] <Ms2ger 💉💉💉>
Has anyone had the "commit suggestion" feature work for them on the html spec?

[08:10:54.0983] <freddy>
I think some features actually have tests in wpt on the exception details, but most don't.

[08:11:26.0169] <freddy>
The other thing that's worth looking out for is not leaking sensitive stuff (e.g., cross-origin URLs or redirect targets) in the exception's details

[08:14:18.0224] <annevk>
Ms2ger 💉💉💉: it doesn't work for `source`, too big (same with blame)

[08:15:40.0735] <annevk>
I would like `message` to not be implementation-defined, but it's a lot of work. (It does at times result in compatibility issues.)

[08:20:09.0055] <Ms2ger 💉💉💉>
> <@annevk:matrix.org> Ms2ger 💉💉💉: it doesn't work for `source`, too big (same with blame)

too bad

[08:34:47.0168] <Ms2ger 💉💉💉>
Pushed a few more changes, I think https://github.com/whatwg/html/pull/5339 is in Domenic's court now

[09:20:11.0698] <TabAtkins>
I think there's still something slightly screwy with references even after that PR. I've screwed up my shoulder overnight so I dunno how much computer I'll be able to do today, but if I can this'll be my priority

[10:02:11.0473] <johannhof>
Thanks for the replies folks! I'll take that to mean that unless there's a strong reason not to, I'll try to match other browser's messages.


2022-10-14
[20:07:41.0449] <sideshowbarker>
Aren’t a `template` element’s attributes just normal attribute nodes of the `template` element — in the same way as for any other element?

Or instead are a `template` element’s attributes part of its [template contents](https://html.spec.whatwg.org/multipage/scripting.html#template-contents)?

[20:08:34.0361] <sideshowbarker>
 * Aren’t a `template` element’s attributes just normal attribute nodes of the `template` element — in the same way that any other element’s attributes are?

Or instead are a `template` element’s attributes part of its [template contents](https://html.spec.whatwg.org/multipage/scripting.html#template-contents)?

[20:09:05.0206] <sideshowbarker>
 * Aren’t a `template` element’s attributes just normal attribute nodes of the `template` element — in the same way as for any other element?

Or instead are a `template` element’s attributes part of its [template contents](https://html.spec.whatwg.org/multipage/scripting.html#template-contents)?

[20:12:03.0200] <Domenic>
The former

[20:14:12.0837] <sideshowbarker>
OK thanks

[20:20:12.0894] <sideshowbarker>
What made me want to confirm is that https://validator.w3.org/nu/parsetree/ shows them as part of the template contents instead.

But I guess that’s just a bug in that tool — in that it’s not correctly showing what the validator.nu parser is actually doing. Because otherwise, if it were somehow making the `template` attributes part of the template contents, then the same behavior would be seen in Firefox (since Firefox uses the same parser).

[20:20:40.0800] <sideshowbarker>
 * What made me want to confirm is that https://validator.w3.org/nu/parsetree/ shows them as part of the template contents instead.

But I guess that’s just a bug in that tool — in that it’s not correctly showing what the validator.nu parser is actually doing. Because otherwise, if it were somehow making the `template` attributes part of the template contents, then the same behavior would be seen in Firefox (since Firefox uses the same parser).

[23:13:51.0157] <annevk>
sideshowbarker: yeah that's a bug, DocumentFragment cannot have attributes

[23:17:47.0958] <sideshowbarker>
OK — thanks

[23:18:34.0815] <sideshowbarker>
hsivonen: r? https://github.com/validator/htmlparser/pull/77

[23:20:07.0998] <hsivonen>
> <@sideshowbarker:matrix.org> hsivonen: r? https://github.com/validator/htmlparser/pull/77

r+. Thanks.

[02:08:49.0166] <hsivonen>
I'm curious how the spec and WebKit/Blink got the complication of `about:blank?foo` being `about:blank`-like enough for it to have magic behavior as the first URL to be loaded into a browsing context.

[02:27:39.0009] <Domenic>
> <@hsivonen:mozilla.org> I'm curious how the spec and WebKit/Blink got the complication of `about:blank?foo` being `about:blank`-like enough for it to have magic behavior as the first URL to be loaded into a browsing context.

https://github.com/whatwg/html/pull/6869#discussion_r675520796 is where we first started down that path, I think....

[02:30:18.0513] <Domenic>
https://domenic.github.io/rewrapper/ fails less and has more test coverage (https://github.com/domenic/rewrapper/tree/master/testcases). Maybe one day we can run all of HTML through it.

[02:30:35.0793] <hsivonen>
> <@domenicdenicola:matrix.org> https://github.com/whatwg/html/pull/6869#discussion_r675520796 is where we first started down that path, I think....

Thanks. That explains the spec history but not how WebKit got the behavior. (Blink presumably inherited from WebKit.)

[04:00:00.0066] <annevk>
hsivonen: WebKit has had a pretty good URL parser for a long term where `?foo` would not be considered part of the path; that might have something to do with it

[04:00:57.0915] <annevk>
(I think Chrome ended up regressing on that, but perhaps not everywhere due to tests?)

[04:02:30.0327] <hsivonen>
> <@annevk:matrix.org> hsivonen: WebKit has had a pretty good URL parser for a long term where `?foo` would not be considered part of the path; that might have something to do with it

But surely someone has had to write the code where the URL of the initial about:blank gets swapped so that it becomes about:blank?foo in place. That seems like something that should give one a pause while implementing.

[04:16:00.0137] <annevk>
Oh, I misunderstood. That sounds weird.

[04:16:56.0053] <annevk>
https://github.com/WebKit/WebKit/search?q=about%3Ablank%3Ffoo only returns tests.

[05:32:38.0183] <sideshowbarker>
TabAtkins: does the Bikeshed `Spec` object metadata include the last-modified date?

[14:03:17.0162] <TabAtkins>
sideshowbarker: Yeah, `spec.inputSource.mtime()` (for input types that support it)


2022-10-15
[18:47:18.0170] <sideshowbarker>
> <@tabatkins:matrix.org> sideshowbarker: Yeah, `spec.inputSource.mtime()` (for input types that support it)

Perfect — thanks much

[05:24:37.0953] <David Halls>
Hi, I've got a question about stream reader closed promise, specifically whether it should resolve before all enqueued data has been read

[05:27:10.0502] <David Halls>
In this program, I'm seeing `data not read yet` being logged. I was assuming `reader.closed` wouldn't get resolved until the program had read the data. I've read the spec and it `closed` should be resolved after the queue is empty.

const rs = new ReadableStream({
start(controller) {
controller.enqueue(new Uint8Array(3));
controller.close();
}
});

let data = null;
const reader = rs.getReader();

reader.closed.then(() => {
if (!data) {
console.error('data not read yet');
}
});

data = await reader.read();
console.log(data);

data = await reader.read();
console.log(data);
```

[05:28:00.0620] <David Halls>
 * In this program, I'm seeing `data not read yet` being logged. I was assuming `reader.closed` wouldn't get resolved until the program had read the data. I've read the spec and it `closed` should be resolved after the queue is empty.

```jsconst rs = new ReadableStream({
  start(controller) {
controller.enqueue(new Uint8Array(3));
controller.close();
}
});

let data = null;
const reader = rs.getReader();

reader.closed.then(() => {
if (!data) {
console.error('data not read yet');
}
});

data = await reader.read();
console.log(data);

data = await reader.read();
console.log(data);

[05:28:35.0831] <David Halls>
 * In this program, I'm seeing `data not read yet` being logged. I was assuming `reader.closed` wouldn't get resolved until the program had read the data. I've read the spec and it `closed` should be resolved after the queue is empty.

const rs = new ReadableStream({
start(controller) {
controller.enqueue(new Uint8Array(3));
controller.close();
}
});

let data = null;
const reader = rs.getReader();

reader.closed.then(() => {
if (!data) {
console.error('data not read yet');
}
});

data = await reader.read();
console.log(data);

data = await reader.read();
console.log(data);
```

[05:30:31.0666] <David Halls>
 * In this program, I'm seeing `data not read yet` being logged. I was assuming `reader.closed` wouldn't get resolved until the program had read the data. I've read the spec and it `closed` should be resolved after the queue is empty.

```js
const rs = new ReadableStream({
  start(controller) {
    controller.enqueue(new Uint8Array(3));
    controller.close();
  }
});

let data = null;
const reader = rs.getReader();

reader.closed.then(() => {
  if (!data) {
    console.error('data not read yet');
  }
});

data = await reader.read();
console.log(data);

data = await reader.read();
console.log(data);
```


[05:31:16.0074] <David Halls>
 * In this program, I'm seeing `data not read yet` being logged. I was assuming `reader.closed` wouldn't get resolved until the program had read the data. I've read the spec and it says`closed` should be resolved after the queue of data is empty.

```js
const rs = new ReadableStream({
  start(controller) {
    controller.enqueue(new Uint8Array(3));
    controller.close();
  }
});

let data = null;
const reader = rs.getReader();

reader.closed.then(() => {
  if (!data) {
    console.error('data not read yet');
  }
});

data = await reader.read();
console.log(data);

data = await reader.read();
console.log(data);
```

[05:39:45.0892] <David Halls>
In this algorithm: https://streams.spec.whatwg.org/#rs-default-controller-private-pull you can see what's happening:  ReadableStreamClose is performed before the read request's chunk steps.

[05:40:56.0331] <David Halls>
I would expect that to be the other way around (i.e. resolve the final read request before resolving the closed promise)

[05:41:05.0253] <David Halls>
 * I would expect that to be the other way around (i.e. resolve the final read request before resolving the closed promise)


2022-10-16
[19:23:09.0636] <Domenic>
David Halls: can you file the issue on whatwg/streams instead of here? That is a bit surprising...

[04:41:50.0641] <sideshowbarker>
Looking at https://github.com/mdn/content/issues/21550 … what’s the `Response.json()` method useful for?

[04:42:28.0351] <Andreu Botella>
it was added because it was useful for server-side runtimes that had fetch-based HTTP server APIs

[04:42:37.0953] <Andreu Botella>
and it wasn't a burden on browsers

[04:46:32.0663] <Domenic>
It's also useful in service workers

[04:54:50.0494] <sideshowbarker>
OK. Well, it would be nice to have it documented in MDN — minimally at least with a one- or two-sentence description

[04:55:29.0340] <Andreu Botella>
it creates a response corresponding to the JSON serialization of the passed object

[04:55:42.0775] <Andreu Botella>
 * it creates a response corresponding to the JSON serialization of the passed object

[04:57:02.0610] <sideshowbarker>
Ideally somebody who’s already familiar with it would write up an MDN patch…

[04:57:58.0663] <sideshowbarker>
Andreu Botella: speaking of patches, I don’t know if you’ve had a chance to look at https://github.com/w3c/csswg-drafts/pull/7886, but I’m wondering if there’s any reason you’re aware of that we can’t/shouldn’t use symlinks instead of redirects

[04:58:50.0873] <Andreu Botella>
There's no technical reason why not to use that, but I would prefer redirecting.

[04:59:05.0582] <Andreu Botella>
Ideally HTTP redirects, of course, but Github Pages doesn't support them

[04:59:28.0560] <sideshowbarker>
Why would you prefer redirecting?

[05:00:09.0464] <sideshowbarker>
From a user point of view, it seems like redirecting is subobtimal

[05:00:16.0738] <sideshowbarker>
 * From a user point of view, it seems like redirecting is subobtimal

[05:01:46.0288] <sideshowbarker>
and https://drafts.csswg.org/ uses symlinks rather than redirects

[05:04:59.0679] <Andreu Botella>
> <@sideshowbarker:matrix.org> From a user point of view, it seems like redirecting is subobtimal

in the sense that if you're copying the URL in the address bar, it'd be the URL for a specific level?

[05:05:21.0977] <sideshowbarker>
I see

[05:05:51.0160] <sideshowbarker>
I wonder whether most users would see that as preferable

[05:06:52.0056] <sideshowbarker>
Also, at MDN we have a policy of linking to the un-leveled shortnames

[05:07:40.0884] <sideshowbarker>
we never link to the specific levels except in case of features that are on some higher leveled version but not in the current-work version

[05:07:55.0794] <sideshowbarker>
 * we never link to the specific levels except in case of features that are on some higher leveled version but not in the current-work version

[05:09:04.0295] <Andreu Botella>
yeah, I guess that's fine then

[06:06:33.0854] <Domenic>
> <@sideshowbarker:matrix.org> OK. Well, it would be nice to have it documented in MDN — minimally at least with a one- or two-sentence description

IIRC this was impossible in MDN because they use the same namespace "Response/json" for both static and prototype methods.

[06:07:00.0536] <Domenic>
Related to https://github.com/orgs/mdn/discussions/248

[06:10:06.0831] <Domenic>
Being redirected to version-specific URLs is quite unfortunate, and a big downside of w3c.github.io over the old csswg-drafts server. I don't like knowing my links will become obsolete in the future.

[10:17:30.0527] <Luca Casonato>
Yeah, I wanted to contribute a patch but I didn’t manage to figure out where to put the new file so it doesn’t conflict with Response.prototype.json. I couldn’t figure it out, and gave up eventually

