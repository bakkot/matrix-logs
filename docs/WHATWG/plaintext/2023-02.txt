2023-02-01
[00:32:19.0257] <sideshowbarker>
https://twitter.com/Hixie/status/1620694008405331968

[00:32:39.0205] <sideshowbarker>
https://docs.google.com/document/d/1peUSMsvFGvqD5yKh3GprskLC3KVdAlLGOsK6gFoEOD0/edit?resourcekey=0-bPajpoo9IBZpG__-uCBE6w#

[00:46:02.0914] <sideshowbarker>
https://twitter.com/Hixie/status/1620704532748701697

[00:51:26.0327] <sideshowbarker>
maybe we could call it “The Second System”…

[00:52:15.0697] <sideshowbarker>
or if we’re really optimizing for irony, “Web4”

[00:53:25.0437] <sideshowbarker>
or else just skip to “Web5” (and also create some entertaining narrative for why we skipped past “Web4”)

[00:56:23.0383] <sideshowbarker>
anyway, this rightly seems like something we should have seriously started working on already — and I’ve not heard any sound objections to it other than some assertions that the performance benefits wouldn’t be significant enough to merit the spec work and implementation work required

[00:57:12.0544] <sideshowbarker>
but as Hixie says in one of his tweets, _“The goal is simplicity and developer ergonomics, more than performance”_

[00:57:49.0001] <sideshowbarker>
 * anyway, this rightly seems like something we should have seriously started working on already — and I’ve not heard any sound objections to it other than some assertions that the performance benefits wouldn’t be significant enough to merit the spec work and implementation work required

[03:53:34.0758] <sideshowbarker>
WABI

[05:57:52.0023] <Domenic>
"applications could ship with their own implementations of high-level concepts like layout, widgets, and gestures" seems like an anti-goal to me.

[05:58:10.0698] <Domenic>
And not one any other successful platform has embraced

[06:39:44.0482] <sideshowbarker>
I think Flutter at least has already essentially embraced it, for their Web output — at least as an option.

See https://docs.flutter.dev/development/platform-integration/web/renderers — the CanvasKit renderer: https://skia.org/docs/user/modules/canvaskit/, which amounts to every app shipping with its own embedded layout engine (Skia)

[07:44:42.0424] <bkardell>
I feel like I have a lot of thoughts myself, but also - I kind of don't get at all how aria fits in that particular mix really

[08:12:01.0441] <bkardell>
well, I guess "at all" is an overstatement really

[08:14:18.0595] <bkardell>
but like - it feels like a lot of the industry was trying to go in a not totally dissimilar direction around 2004 before whatwg... like, lots of VMs with core and then a thing atop trying to add an application version of a markup maybe - flex/flash, java/jfx, silverlight/xaml ... no?

[11:12:47.0694] <timothygu>
Has anyone seen https://github.com/ada-url/ada?

[12:32:54.0273] <Ian Hickson>
> <@domenicdenicola:matrix.org> And not one any other successful platform has embraced

what about X11/Wayland?

[12:33:09.0759] <Ian Hickson>
and Android now, with Jetpack Compose

[12:33:27.0562] <Ian Hickson>
also, most gaming platforms

[12:34:32.0453] <Ian Hickson>
really the web is the _only_ platform where the bootstrap mode is so high-level that you're literally a document

[12:35:03.0635] <Ian Hickson>
even android, which bootstraps you into a java environment via the zygote doesn't start that high

[13:15:16.0649] <bkardell>
Ian Hickson: do you imagine any kind of document there? One geared toward apps? like that sort of thing almost existed  (did in a way in flex, xaml, xul, jfx) and they do kind of exist now - like QML is a thing, right?

[13:17:32.0921] <bkardell>
 * Ian Hickson: do you imagine any kind of document there? One geared toward apps? like that sort of thing almost existed  (did in a way in flex, xaml, xul, jfx) and they do kind of exist now - like QML is a thing, right?

[13:21:07.0899] <bkardell>
 * Ian Hickson: do you not imagine any kind of document there? One geared toward apps? like that sort of thing almost existed  (did in a way in flex, xaml, xul, jfx) and they do kind of exist now - like QML is a thing, right?

[13:39:06.0678] <Ian Hickson>
not sure i understand the question

[14:04:24.0672] <bkardell>
> <@hixie:matrix.org> not sure i understand the question

Yeah, I mean, I guess I kind of confused too, so probably not asking the question well enough... sorry :(. 

[14:22:53.0608] <bkardell>
so in your idea, things still have a URL I guess and the thing at the end of the URL is just.... straight to WASM, and that WASM you're suggesting would have some kind of (new) core libraries available to it based on WebGPU, WebHID and ARIA (the taxonomies, at least)... I guess it would probably need _some_ additional primitives there or I'm not sure how you apply them together? Am I understanding that at least generally or just way off what you are describing?

[14:23:35.0235] <bkardell>
(also, happy to take this to a different room if this is just silly for the main whatwg channel but you're still willing to answer potentially dumb questions)

[14:31:39.0870] <bkardell>
 * so in your idea, things still have a URL I guess and the thing at the end of the URL is just.... straight to WASM (but like, an archive? some descriptor?), and that WASM you're suggesting would have some kind of (new) core libraries available to it based on WebGPU, WebHID and ARIA (the taxonomies, at least)... I guess it would probably need _some_ additional primitives there or I'm not sure how you apply them together? Am I understanding that at least generally or just way off what you are describing?


2023-02-02
[16:50:49.0249] <sideshowbarker>
bkardell: yeah, every web app still has a URL, and the thing at the end of the URL is straight to WASM

That is, the thing at the end of the URL is a single binary, a single executable, completely just object code — a single `.wasm` file/resource

And so then for that app, all that the browser does is just to load that single binary into memory and execute it — execute it in the existing WebAssembly execution environment that all browsers already have.

And that’s all in contrast to what browsers need to do now with the current HTML/DOM+JS+CSS stack, which is: browsers must load three different things into memory: the must a DOM tree/object, a JavaScript global object, and CSS cascade/Stylesheet object — and then also keep those three in sync through all the DOM mutations and everything

[16:52:40.0951] <sideshowbarker>
With this WABI alternative, there’s no DOM at all, there’s no JavaScript global at all, there’s CSS Stylesheet at all

[16:53:19.0969] <sideshowbarker>
Instead, browsers load only the binary object code for the app, and just execute that

[16:55:26.0486] <sideshowbarker>
And the WABI binary is the equivalent of statically linked object code — that is, it has all of its dependencies already compiled in, and doesn’t need to link into anything else nor load anything else

[16:56:34.0611] <sideshowbarker>
So a WABI binary can contain its own layout engine, and its own complete runtime

[17:00:05.0119] <sideshowbarker>
As far as that goes, one analogy is how server-side Java apps can be built today — which is that you use `jlink` to compiles a singole binary that embeds a JVM runtime and all the Java libraries that the app depends on (and so, users don’t need to have a Java runtime installed on their systems to run that app, because the app itself contains the runtime)

[17:04:23.0402] <sideshowbarker>
But that analogy is not at all exact, because in that case the binary is an architecture-specific binary that can only run on a single platform — that is, a Windows binary, or a Linux binary, or a macOS binary.

But a WABI binary is not architecture-specific but instead is a portable binary in every way that WASM binaries already are

[17:08:58.0019] <sideshowbarker>
I think the loading code that’s currently required in browsers for HTML/DOM loading and JS loading and CSS loading may be the single most complex part of browsers implementations, and may be one of the most fragile parts — in the sense that it’s prone to regressions and to new bugs getting introduced that are hard to troubleshoot

[17:11:05.0727] <sideshowbarker>
And at least I can say from experience as patch contributor to Chrome, that loading code is just incredibly complicated and intimidating to try to work on. Chrome has an entire team that’s devoted to just that loading code.

[17:14:50.0374] <sideshowbarker>
And for web apps (as opposed to documents), all that loading code arguably should be unnecessary anyway — it’s just a side effect of having needed to bolt an application-execution environment on top of a model that’s not fundamentally designed for running apps but instead is just designed for laying out documents

[17:19:01.0842] <sideshowbarker>
So there is huge value alone in just being able to cut out the need for all that loading code, and all its complexity, and (over the long run) all its ongoing maintenance cost in implementations. (Because this is the web, implementations would also forever need to still retain all that code — to run all the content that exists on the web now — but over the long run, developers building web apps would mostly move to targeting WABI instead, and most web apps would be running in the WABI execution environment instead.)

[17:30:48.0367] <sideshowbarker>
 * bkardell: yeah, every web app still has a URL, and the thing at the end of the URL is straight to WASM

That is, the thing at the end of the URL is a single binary, a single executable, completely just object code — a single `.wasm` file/resource

And so then for that app, all that the browser does is just to load that single binary into memory and execute it — execute it in the existing WebAssembly execution environment that all browsers already have.

And that’s all in contrast to what browsers need to do now with the current HTML/DOM+JS+CSS stack, which is: browsers must load three different things into memory: they must a DOM tree/object, a JavaScript global object, and CSS cascade/Stylesheet object — and then also keep those three in sync through all the DOM mutations and everything

[17:31:24.0915] <sideshowbarker>
 * As far as that goes, one analogy is how server-side Java apps can be built today — which is that you use `jlink` to compile a singole binary that embeds a JVM runtime and all the Java libraries that the app depends on (and so, users don’t need to have a Java runtime installed on their systems to run that app, because the app itself contains the runtime)

[17:31:31.0624] <sideshowbarker>
 * As far as that goes, one analogy is how server-side Java apps can be built today — which is that you use `jlink` to compile a single binary that embeds a JVM runtime and all the Java libraries that the app depends on (and so, users don’t need to have a Java runtime installed on their systems to run that app, because the app itself contains the runtime)

[17:32:05.0030] <sideshowbarker>
 * I think the loading code that’s currently required in browsers for HTML/DOM loading and JS loading and CSS loading may be the single most complex part of browser implementations, and may be one of the most fragile parts — in the sense that it’s prone to regressions and to new bugs getting introduced that are hard to troubleshoot

[17:32:18.0981] <sideshowbarker>
 * And at least I can say from experience as a patch contributor to Chrome, that loading code is just incredibly complicated and intimidating to try to work on. Chrome has an entire team that’s devoted to just that loading code.

[17:33:04.0590] <sideshowbarker>
 * So there is huge value alone in just being able to cut out the need for all that loading code, and all its complexity, and (over the long run) all its ongoing maintenance cost in implementations. (Though, because this is the web, implementations would also forever need to still retain all that code — to run all the content that exists on the web now — but over the long run, developers building web apps would mostly move to targeting WABI instead, and most web apps would be running in the WABI execution environment instead.)

