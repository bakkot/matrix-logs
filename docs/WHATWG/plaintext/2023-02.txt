2023-02-01
[00:32:19.0257] <sideshowbarker>
https://twitter.com/Hixie/status/1620694008405331968

[00:32:39.0205] <sideshowbarker>
https://docs.google.com/document/d/1peUSMsvFGvqD5yKh3GprskLC3KVdAlLGOsK6gFoEOD0/edit?resourcekey=0-bPajpoo9IBZpG__-uCBE6w#

[00:46:02.0914] <sideshowbarker>
https://twitter.com/Hixie/status/1620704532748701697

[00:51:26.0327] <sideshowbarker>
maybe we could call it “The Second System”…

[00:52:15.0697] <sideshowbarker>
or if we’re really optimizing for irony, “Web4”

[00:53:25.0437] <sideshowbarker>
or else just skip to “Web5” (and also create some entertaining narrative for why we skipped past “Web4”)

[00:56:23.0383] <sideshowbarker>
anyway, this rightly seems like something we should have seriously started working on already — and I’ve not heard any sound objections to it other than some assertions that the performance benefits wouldn’t be significant enough to merit the spec work and implementation work required

[00:57:12.0544] <sideshowbarker>
but as Hixie says in one of his tweets, _“The goal is simplicity and developer ergonomics, more than performance”_

[00:57:49.0001] <sideshowbarker>
 * anyway, this rightly seems like something we should have seriously started working on already — and I’ve not heard any sound objections to it other than some assertions that the performance benefits wouldn’t be significant enough to merit the spec work and implementation work required

[03:53:34.0758] <sideshowbarker>
WABI

[05:57:52.0023] <Domenic>
"applications could ship with their own implementations of high-level concepts like layout, widgets, and gestures" seems like an anti-goal to me.

[05:58:10.0698] <Domenic>
And not one any other successful platform has embraced

[06:39:44.0482] <sideshowbarker>
I think Flutter at least has already essentially embraced it, for their Web output — at least as an option.

See https://docs.flutter.dev/development/platform-integration/web/renderers — the CanvasKit renderer: https://skia.org/docs/user/modules/canvaskit/, which amounts to every app shipping with its own embedded layout engine (Skia)

[07:44:42.0424] <bkardell>
I feel like I have a lot of thoughts myself, but also - I kind of don't get at all how aria fits in that particular mix really

[08:12:01.0441] <bkardell>
well, I guess "at all" is an overstatement really

[08:14:18.0595] <bkardell>
but like - it feels like a lot of the industry was trying to go in a not totally dissimilar direction around 2004 before whatwg... like, lots of VMs with core and then a thing atop trying to add an application version of a markup maybe - flex/flash, java/jfx, silverlight/xaml ... no?

[11:12:47.0694] <timothygu>
Has anyone seen https://github.com/ada-url/ada?

[12:32:54.0273] <Ian Hickson>
> <@domenicdenicola:matrix.org> And not one any other successful platform has embraced

what about X11/Wayland?

[12:33:09.0759] <Ian Hickson>
and Android now, with Jetpack Compose

[12:33:27.0562] <Ian Hickson>
also, most gaming platforms

[12:34:32.0453] <Ian Hickson>
really the web is the _only_ platform where the bootstrap mode is so high-level that you're literally a document

[12:35:03.0635] <Ian Hickson>
even android, which bootstraps you into a java environment via the zygote doesn't start that high

[13:15:16.0649] <bkardell>
Ian Hickson: do you imagine any kind of document there? One geared toward apps? like that sort of thing almost existed  (did in a way in flex, xaml, xul, jfx) and they do kind of exist now - like QML is a thing, right?

[13:17:32.0921] <bkardell>
 * Ian Hickson: do you imagine any kind of document there? One geared toward apps? like that sort of thing almost existed  (did in a way in flex, xaml, xul, jfx) and they do kind of exist now - like QML is a thing, right?

[13:21:07.0899] <bkardell>
 * Ian Hickson: do you not imagine any kind of document there? One geared toward apps? like that sort of thing almost existed  (did in a way in flex, xaml, xul, jfx) and they do kind of exist now - like QML is a thing, right?

[13:39:06.0678] <Ian Hickson>
not sure i understand the question

[14:04:24.0672] <bkardell>
> <@hixie:matrix.org> not sure i understand the question

Yeah, I mean, I guess I kind of confused too, so probably not asking the question well enough... sorry :(. 

[14:22:53.0608] <bkardell>
so in your idea, things still have a URL I guess and the thing at the end of the URL is just.... straight to WASM, and that WASM you're suggesting would have some kind of (new) core libraries available to it based on WebGPU, WebHID and ARIA (the taxonomies, at least)... I guess it would probably need _some_ additional primitives there or I'm not sure how you apply them together? Am I understanding that at least generally or just way off what you are describing?

[14:23:35.0235] <bkardell>
(also, happy to take this to a different room if this is just silly for the main whatwg channel but you're still willing to answer potentially dumb questions)

[14:31:39.0870] <bkardell>
 * so in your idea, things still have a URL I guess and the thing at the end of the URL is just.... straight to WASM (but like, an archive? some descriptor?), and that WASM you're suggesting would have some kind of (new) core libraries available to it based on WebGPU, WebHID and ARIA (the taxonomies, at least)... I guess it would probably need _some_ additional primitives there or I'm not sure how you apply them together? Am I understanding that at least generally or just way off what you are describing?


2023-02-02
[16:50:49.0249] <sideshowbarker>
bkardell: yeah, every web app still has a URL, and the thing at the end of the URL is straight to WASM

That is, the thing at the end of the URL is a single binary, a single executable, completely just object code — a single `.wasm` file/resource

And so then for that app, all that the browser does is just to load that single binary into memory and execute it — execute it in the existing WebAssembly execution environment that all browsers already have.

And that’s all in contrast to what browsers need to do now with the current HTML/DOM+JS+CSS stack, which is: browsers must load three different things into memory: the must a DOM tree/object, a JavaScript global object, and CSS cascade/Stylesheet object — and then also keep those three in sync through all the DOM mutations and everything

[16:52:40.0951] <sideshowbarker>
With this WABI alternative, there’s no DOM at all, there’s no JavaScript global at all, there’s CSS Stylesheet at all

[16:53:19.0969] <sideshowbarker>
Instead, browsers load only the binary object code for the app, and just execute that

[16:55:26.0486] <sideshowbarker>
And the WABI binary is the equivalent of statically linked object code — that is, it has all of its dependencies already compiled in, and doesn’t need to link into anything else nor load anything else

[16:56:34.0611] <sideshowbarker>
So a WABI binary can contain its own layout engine, and its own complete runtime

[17:00:05.0119] <sideshowbarker>
As far as that goes, one analogy is how server-side Java apps can be built today — which is that you use `jlink` to compiles a singole binary that embeds a JVM runtime and all the Java libraries that the app depends on (and so, users don’t need to have a Java runtime installed on their systems to run that app, because the app itself contains the runtime)

[17:04:23.0402] <sideshowbarker>
But that analogy is not at all exact, because in that case the binary is an architecture-specific binary that can only run on a single platform — that is, a Windows binary, or a Linux binary, or a macOS binary.

But a WABI binary is not architecture-specific but instead is a portable binary in every way that WASM binaries already are

[17:08:58.0019] <sideshowbarker>
I think the loading code that’s currently required in browsers for HTML/DOM loading and JS loading and CSS loading may be the single most complex part of browsers implementations, and may be one of the most fragile parts — in the sense that it’s prone to regressions and to new bugs getting introduced that are hard to troubleshoot

[17:11:05.0727] <sideshowbarker>
And at least I can say from experience as patch contributor to Chrome, that loading code is just incredibly complicated and intimidating to try to work on. Chrome has an entire team that’s devoted to just that loading code.

[17:14:50.0374] <sideshowbarker>
And for web apps (as opposed to documents), all that loading code arguably should be unnecessary anyway — it’s just a side effect of having needed to bolt an application-execution environment on top of a model that’s not fundamentally designed for running apps but instead is just designed for laying out documents

[17:19:01.0842] <sideshowbarker>
So there is huge value alone in just being able to cut out the need for all that loading code, and all its complexity, and (over the long run) all its ongoing maintenance cost in implementations. (Because this is the web, implementations would also forever need to still retain all that code — to run all the content that exists on the web now — but over the long run, developers building web apps would mostly move to targeting WABI instead, and most web apps would be running in the WABI execution environment instead.)

[17:30:48.0367] <sideshowbarker>
 * bkardell: yeah, every web app still has a URL, and the thing at the end of the URL is straight to WASM

That is, the thing at the end of the URL is a single binary, a single executable, completely just object code — a single `.wasm` file/resource

And so then for that app, all that the browser does is just to load that single binary into memory and execute it — execute it in the existing WebAssembly execution environment that all browsers already have.

And that’s all in contrast to what browsers need to do now with the current HTML/DOM+JS+CSS stack, which is: browsers must load three different things into memory: they must a DOM tree/object, a JavaScript global object, and CSS cascade/Stylesheet object — and then also keep those three in sync through all the DOM mutations and everything

[17:31:24.0915] <sideshowbarker>
 * As far as that goes, one analogy is how server-side Java apps can be built today — which is that you use `jlink` to compile a singole binary that embeds a JVM runtime and all the Java libraries that the app depends on (and so, users don’t need to have a Java runtime installed on their systems to run that app, because the app itself contains the runtime)

[17:31:31.0624] <sideshowbarker>
 * As far as that goes, one analogy is how server-side Java apps can be built today — which is that you use `jlink` to compile a single binary that embeds a JVM runtime and all the Java libraries that the app depends on (and so, users don’t need to have a Java runtime installed on their systems to run that app, because the app itself contains the runtime)

[17:32:05.0030] <sideshowbarker>
 * I think the loading code that’s currently required in browsers for HTML/DOM loading and JS loading and CSS loading may be the single most complex part of browser implementations, and may be one of the most fragile parts — in the sense that it’s prone to regressions and to new bugs getting introduced that are hard to troubleshoot

[17:32:18.0981] <sideshowbarker>
 * And at least I can say from experience as a patch contributor to Chrome, that loading code is just incredibly complicated and intimidating to try to work on. Chrome has an entire team that’s devoted to just that loading code.

[17:33:04.0590] <sideshowbarker>
 * So there is huge value alone in just being able to cut out the need for all that loading code, and all its complexity, and (over the long run) all its ongoing maintenance cost in implementations. (Though, because this is the web, implementations would also forever need to still retain all that code — to run all the content that exists on the web now — but over the long run, developers building web apps would mostly move to targeting WABI instead, and most web apps would be running in the WABI execution environment instead.)

[01:55:04.0086] <Andreu Botella>
annevk: About `URLSearchParams` `has()` and `delete()`, do you think use counters would be helpful to see if they're called with extra arguments?

[04:54:59.0817] <jub0bs>
Posting here for more visibility: https://github.com/whatwg/fetch/issues/1601

[06:14:16.0289] <Domenic>
> <@sideshowbarker:matrix.org> So there is huge value alone in just being able to cut out the need for all that loading code, and all its complexity, and (over the long run) all its ongoing maintenance cost in implementations. (Though, because this is the web, implementations would also forever need to still retain all that code — to run all the content that exists on the web now — but over the long run, developers building web apps would mostly move to targeting WABI instead, and most web apps would be running in the WABI execution environment instead.)

I disagree. That code, or something equivalent, will still be needed---it will just be built by framework developers. And re-built, over and over and over, with the same mistakes repeated and missed and some of the frameworks good at using the a11y parts of the "ABI" and some bad and some doing a good job at meeting user expectations and some bad. For better or for worse, to build a successful UI framework you *need* a lot of code complexity---witness the thousands of people-years spent on them throughout history, from Win32 to WPF to Cocoa to Carbon to the web. Ones built by smaller teams, e.g. Flutter or the various Java or Linux GUI-framework-from-scratch attempts, tend to be painful for end users. GUI frameworks are just a hard problem; wishing you could start over and do it better this time is, IMO, not a good use of the tech industry's collective effort. The web works, and we even have escape hatches like wasm and WebGPU on top of it for cases like video games or CAD software or porting native apps to the web or whatever. But if you want a set of controls, loading primitives, etc., what we have is good and recreating it will not work well.

[06:15:09.0390] <Domenic>
(Try using a Flutter Web app and you'll see what I mean!)

[06:18:10.0872] <Domenic>
> <@timothygu:matrix.org> Has anyone seen https://github.com/ada-url/ada?

This is neat! Hadn't seen it before.

[06:21:11.0571] <sideshowbarker>
Domenic: I think mobile is the place where the current HTML/DOM+JS+CSS stack is not working well — as far as providing good user experiences for end users on mobile

[06:23:42.0696] <sideshowbarker>
I think it’s clear that we began to lose a huge segment of developer share around 2009 when the iPhone really took off and Android did too, and we were busy enough anyway, in the following years, with just trying to evolve the core web runtime in the necessary ways, with the features that were needed for good app experiences on the web to viable at all even on desktop

[06:24:07.0838] <sideshowbarker>
…and we have not won those developers back

[06:24:31.0223] <Domenic>
I think that problem is two-pronged. One, "document-like" web sites/apps are bad on mobile because of cookie banners/ads/etc. "App-like" mobile web apps are few and relatively hard to build well, but it also seems clear if the developer puts in enough effort they can get good results: see e.g. Twitter or Uber. For the rest, are developers not putting in enough effort, or is it too hard to put in enough effort because the web's UI framework is bad comparatively? I could see it being the latter. I doubt having everyone download a UI framework per web app, created by indie teams, would be a good solution though.

[06:25:04.0902] <sideshowbarker>
yes, the web's UI framework is bad comparatively

[06:25:09.0769] <Domenic>
Reasons developers might not put in the effort are mostly around: capabilities gap; lack of app store access. There's some really interesting UX research by Chrome folks about this

[06:25:39.0535] <Domenic>
E.g. teams which tried to build web apps but found when surveying users that the users found the web app *less* trustworthy than a native app---the web is where all the viruses come from, etc.

[06:26:02.0352] <Domenic>
(Or just, the competitors were on the app store, so users assumed something must be wrong with the web app if it couldn't make it through the app store process.)

[06:26:38.0772] <sideshowbarker>
I think the core reason currently starts from the reality that _users_ currently choose mobile apps because the user experience of those apps is relatively much better than they get from web apps


[06:27:51.0467] <sideshowbarker>
and developers choose to write native mobile apps because those mobile apps provide a better user experience for users, and are relatively dead simple to create using available SDKs and tooling

[06:28:18.0690] <sideshowbarker>
developers do not need to be stellar developers in order to create mobile apps that end users will actually use

[06:28:24.0601] <Domenic>
It's not clear there's any one core reason, such that if you fixed it we'd change things. I suspect it's a bunch of self-reinforcing reasons, which have trapped us in an inadequate equilibrium. E.g. if you could snap your fingers and fix the web's UI framework, the app store stickiness and capabilities gap remain. If you could fix the capabilities gap, the other two issues remain. And even if you could magically fix them all, the historical inertia remains. It's not great.

[06:28:46.0373] <sideshowbarker>
they can instead just develop mobile apps only, with much less trouble and pain

[06:29:49.0245] <sideshowbarker>
…and they forgo creating web apps because, in practice currently, their users prefer native mobile apps anyway

[06:31:49.0441] <sideshowbarker>
And I think the reason that SDK and authoring-tool vendors don’t consistently provide mechanisms for generating output for the web runtime with a great user experience is: in practice it’s still so incredibly hard and costly to implement and maintain the code needed to generate HTML/DOM+JS+CSS output that provides a great user experience on mobile

[06:31:55.0292] <Domenic>
It's a potential hypothesis that it's easier for a company to create two good native mobile apps than one good mobile web app. I'd give it somewhere around 50% odds. I don't think WABI is really related to that hypothesis; building a good web UI framework to make app development easier isn't something that framework developers have been unable to do because the browser doesn't have a native MIME type handler for application/wasm.

[06:32:11.0724] <Domenic>
 * It's a potential hypothesis that it's easier for a company to create two good native mobile apps than one good mobile web app. I'd give it somewhere around 50% odds. I don't think WABI is really related to that hypothesis; building a good web UI framework to make app development easier isn't something that framework developers have been unable to do because the browser doesn't have a native MIME type handler for application/wasm.

[06:32:16.0893] <sideshowbarker>
 * And I think the reason that SDK and authoring-tool vendors don’t consistently provide mechanisms for generating output for the web runtime with a great user experience is: in practice it’s still so incredibly hard and costly to implement and maintain the code needed to generate HTML/DOM+JS+CSS output that provides a great user experience on mobile

[06:32:53.0685] <sideshowbarker>
yes, I think the _“potential hypothesis that it's easier for a company to create two good native mobile apps than one good mobile web app”_ has proven to be true thus far

[06:33:01.0614] <sideshowbarker>
 * yes, I think the _“potential hypothesis that it's easier for a company to create two good native mobile apps than one good mobile web app”_ has proven to be true thus far

[06:33:07.0089] <bkardell>
> <@sideshowbarker:matrix.org> I think the core reason currently starts from the reality that _users_ currently choose mobile apps because the user experience of those apps is relatively much better than they get from web apps
> 

 that's really far too over simplified imo, there's so many factors here pushing users that way i don't think you can say users really chose tbh

[06:33:18.0884] <Domenic>
I think it would remain incredibly hard---in fact, probably be harder---if you chose to restrict yourself to WebGPU + ARIA + whatever when creating this hypothetical better-than-iOS-and-Android-SDKs web framework.

[06:35:03.0010] <bkardell>
I agree with Domenic on this ^

[06:35:43.0885] <sideshowbarker>
well part of the context around this is, we’ve been trying with the current stack since at least 2009 to create an ecosystem where better-than-iOS-and-Android-SDKs web frameworks can be developed and can flourish — but it has not happened

[06:35:49.0128] <Domenic>
(and the user experience will at the very least involve a long download time for first load, which is not a great start.)

[06:36:04.0737] <sideshowbarker>
> <@domenicdenicola:matrix.org> (and the user experience will at the very least involve a long download time for first load, which is not a great start.)

that’s very true yeah

[06:36:27.0138] <bkardell>
But also i feel like this aria part (much if it really) needs a little meat to be able to even discuss it. The "and aria" i feel like is handwaved but load bearing

[06:37:06.0231] <Domenic>
Again, I think it's really unclear whether iOS/Android SDKs are that much better. Remember that Flutter and SwiftUI are based on the React paradigm, which was pioneered on the web!

[06:38:39.0296] <Domenic>
My hypothesis is that the gap comes mainly in a good control library, and having stuck my foot in that area for a half-year and failed with a small team of Googlers, it comes back to my earlier point that you basically need major institutional buy-in (e.g. a large team working for 5-10 years) to get to the same level that Windows/macOS/Android/iOS have gotten to.

[06:39:17.0702] <Domenic>
Saying "you have WebGPU, raw HID events, and some ARIA thing---community, please build a good control library!" seems like a recipe for disaster to me.

[06:40:04.0620] <Domenic>
Flutter's tried for some number of years, don't know the size of their team, and the apps still feel quite unnatural to try to use on both Android and the web.

[06:40:22.0187] <sideshowbarker>
> <@domenicdenicola:matrix.org> My hypothesis is that the gap comes mainly in a good control library, and having stuck my foot in that area for a half-year and failed with a small team of Googlers, it comes back to my earlier point that you basically need major institutional buy-in (e.g. a large team working for 5-10 years) to get to the same level that Windows/macOS/Android/iOS have gotten to.

Yes — and the companies that are financially in the position to put that kind of investment in making it happen may not have great incentives for doing so

[06:43:40.0695] <sideshowbarker>
But part of what’s implicit in the design sketch as Hixie wrote it up is that the primitives would not all need to be implemented at once anyway

[06:44:37.0377] <sideshowbarker>
We could start with just the “ABI to spawn a JavaScript environment” piece

[06:44:45.0886] <Domenic>
The primitives are all already there; the only novel thing in Hixie's writeup is the new MIME type handler to remove the need for a one-line HTML document. (And, I guess, the magic world where we get Safari/Firefox to implement WebHID.)

[06:45:18.0940] <Domenic>
The document is basically "what if Flutter apps could save one line of code?"

[06:49:31.0254] <sideshowbarker>
my understanding of implementation costs could be naïve, but it seems to me there is in fact a non-insignificant real cost to currently needing the HTML and JS “glue code” for WASM apps to run, and to needing to parse and load that

[06:49:43.0866] <Domenic>
Cost to who?

[06:51:12.0129] <sideshowbarker>
I meant, cost to browser implementors relative to a new code path that didn’t require it

[06:52:08.0167] <Domenic>
Nah, no cost. If you have a JS escape hatch/bridge of the type Hixie's doc talks about, then the JS -> wasm step is free from that. And the HTML -> JS step has been implemented for ~20 years.

[06:52:44.0561] <sideshowbarker>
I see

[06:53:21.0308] <Domenic>
Building something that was straight wasm would be more costly, as you'd have to figure out what kind of document that produces (presuming you don't want it to just auto-generate <html><canvas></canvas></html> like .pdf generates <html><object></object></html>; I feel like the latter would violate the spirit of the thing)

[06:53:57.0849] <Domenic>
(And you need a "document" in at least some broad sense, so that you have some idea of what the back/forward button does, and what other windows see when they reach into yours.)

[06:56:55.0080] <sideshowbarker>
would it absolutely have to create a document at all? could it instead be done without even instantiating a document at all but instead having a new kind of object that the browser operates directly?

[06:57:03.0139] <sideshowbarker>
 * would it absolutely have to create a document at all? could it instead be done without even instantiating a document at all but instead having a new kind of object that the browser operates directly?

[06:57:20.0303] <sideshowbarker>
ah, I see you answered that already

[06:57:55.0218] <sideshowbarker>
so Hixie responded somewhat to that already, in his Twitter thread, I think

[06:58:03.0955] <sideshowbarker>
/me looks

[06:59:43.0639] <Domenic>
Yeah I mean it's conceivable you could invent something new, and have some sort of Document-like facade when other parts of the browser or other websites look at it, but it's unclear what the gain is; especially if the point was to reduce implementation complexity, I am quite sure that sort of thing would not reduce it.

[06:59:54.0099] <Matthew Phillips>
> <@domenicdenicola:matrix.org> Saying "you have WebGPU, raw HID events, and some ARIA thing---community, please build a good control library!" seems like a recipe for disaster to me.

very much agree here. 

[07:00:33.0600] <Noam Rosenthal>
it would very quickly be "you have WebGPU, raw HID events, some ARIA thing and flutter"...

[07:08:02.0722] <Matthew Phillips>
A more interesting question to me is not why developers aren't using the web as much for these app-like experiences, but why the web is not used even for document experiences. For example, why isn't the web the dominant way that readers read ebooks? Why isn't it the dominant way that publishers publish ebooks?

[07:08:52.0726] <Matthew Phillips>
Lack of integration with stores is part of it, but that can't be the only thing or public domain books would be read on the web, and I don't believe that they are.

[07:13:10.0492] <bkardell>
I agree it's useful to look at other stuff there too, but I also think anyone looking for a *the* technical why on any of these is trying to force simplcity where it doesn't exist like that in practice. There are tons of reasons and often they aren't even techinically good or necessarily logical.  

[07:17:13.0460] <Domenic>
The ebooks question is quite interesting as a smaller test case of the app question. I like that; I hadn't thought about it much before.

[07:18:28.0763] <Domenic>
Possible answers: the web is bad for commercial distribution; HTML subsetting allowing a wider tooling/device ecosystem; the technical lack of packaging format makes parts of the pipeline awkward

[07:21:22.0672] <bkardell>
Why people use 'native apps' is many things.  It's a combination of the fact that the app stores tell us we should and the app store is by the same people who make the OS, and sometimes the device too so as customers people say "seems legit".  It's the fact that sometimes people _like_ the app store... If you're looking for a thing you open over and over again it's very handy - you _think_ of it as an app and you don't want to search the web for that... You want maybe somewhere where you can see how many other people got it and read some reviews and comparisons -- a lot like why you would use a brick and mortar store... You have some sense that you can learn somethign about the quality. In practice I think that is mostly bunk - we need to do better than what we do, but yeah, same reason people like amazon reviews/purchase data, etc. You can't get that easily today with the web. But also then we built this whole movement where businesses which would do great with a PWA and who could build the great UX, etc still think they gotta build the native thing and use their site to push you to it, which again makes users think "oh, I guess that's better"... Basically that is a self-fulfilling prophecy even if all other things were equal (I think they aren't, but still)

[07:21:34.0225] <bkardell>
 * Why people use 'native apps' is many things.  It's a combination of the fact that the app stores tell us we should and the app store is by the same people who make the OS, and sometimes the device too so as customers people say "seems legit".  It's the fact that sometimes people _like_ the app store... If you're looking for a thing you open over and over again it's very handy - you _think_ of it as an app and you don't want to search the web for that... You want maybe somewhere where you can see how many other people got it and read some reviews and comparisons -- a lot like why you would use a brick and mortar store... You have some sense that you can learn somethign about the quality. In practice I think that is mostly bunk - we need to do better than what we do, but yeah, same reason people like amazon reviews/purchase data, etc. You can't get that easily today with the web. But also then we built this whole movement where businesses which would do great with a PWA and who could build the great UX, etc still think they gotta build the native thing and use their site to push you to it, which again makes users think "oh, I guess that's better"... Basically that is a self-fulfilling prophecy even if all other things were equal (I think they aren't, but still)

[07:21:35.0210] <Domenic>
Public domain books do exist on the web, e.g. Project Gutenberg, https://standardebooks.org/, things like the Rust book etc. But the online reading experience is not great for those in my experience. E.g. my bookmarks get lost among a sea of other bookmarks; reliance on scroll position instead of pagination

[07:22:44.0107] <Domenic>
(And of course, no Kindle integration)

[07:23:22.0326] <bkardell>
> <@domenicdenicola:matrix.org> Public domain books do exist on the web, e.g. Project Gutenberg, https://standardebooks.org/, things like the Rust book etc. But the online reading experience is not great for those in my experience. E.g. my bookmarks get lost among a sea of other bookmarks; reliance on scroll position instead of pagination

I think for a brief moment edge had a built in ebook reader

[07:26:38.0154] <bkardell>
ebooks are differently complex than apps in a way because standards have changed and moved venues and probably they tried to solve a lot of problems before we had critical things in place.  It would be really great to make that wonderful at last

[07:26:56.0803] <bkardell>
now they can at least all display math :)

[07:27:48.0870] <Domenic>
Can they, though. Publishers still tend to use pixelated pngs for math in the eBooks I've seen.

[07:28:25.0942] <Matthew Phillips>
now i kind of want to build some ebook web components.

[07:30:29.0045] <Matthew Phillips>
Building an ereader in HTML/JS shouldn't be that difficult, I can't think of any technical limitations that prevent it. I think things like Project Gutenberg don't have great web ereaders because not enough of their users use it, to make it worth their while

[07:30:31.0546] <bkardell>
> <@domenicdenicola:matrix.org> Can they, though. Publishers still tend to use pixelated pngs for math in the eBooks I've seen.

where do you read your eboooks?

[07:30:59.0519] <Domenic>
Kindle

[07:31:00.0163] <bkardell>
(can was referring to browsers can, sorry)

[07:31:08.0707] <bkardell>
kindle has their own rendering engine for that

[07:32:13.0859] <Domenic>
Yeah I meant it's more of a publisher pipeline thing, presumably

[07:32:21.0224] <bkardell>
yeah

[07:33:28.0092] <bkardell>
also another (I think) critical thing is the next gen rendering engine reworks in theory enable a lot of that stuff to actually be practical -- like pagination, etc... previously kind of very shoehorned, but we have good fragmentation design etc now

[07:33:54.0262] <bkardell>
so like, the web today would be a real nice basis IMO for all this

[07:36:24.0560] <bkardell>
 * so like, the web today would be a much nicer basis IMO for all this if we were coming at it fresh today

[08:37:55.0131] <bkardell>
"shouldn't be" means ideally or today?  The guttenberg thing is very chicken and egg. I have only read a few books digitally and all but one has been public domain.  I just like physical books 🤷 in fact, I like physical book _stores_ still, and libraries :) Even as a lover of the web, any kind of digital is still just not my ideal choice for most of my actual _book_ reading.

[08:38:00.0221] <bkardell>
> <@matthewcp:matrix.org> Building an ereader in HTML/JS shouldn't be that difficult, I can't think of any technical limitations that prevent it. I think things like Project Gutenberg don't have great web ereaders because not enough of their users use it, to make it worth their while

 * "shouldn't be" means ideally or today?  The guttenberg thing is very chicken and egg. I have only read a few books digitally and all but one has been public domain.  I just like physical books 🤷 in fact, I like physical book _stores_ still, and libraries :) Even as a lover of the web, any kind of digital is still just not my ideal choice for most of my actual _book_ reading.

[08:39:52.0291] <bkardell>
I think if you were solving this problem today you would probably not come up with .epub

[11:14:20.0911] <TabAtkins>
As an avid ebook user, I believe the ebook "issue" is almost entirely (1) payment/drm, and (2) pagination. For the latter, it just turns out that pagination is *usually* a bad UI pattern on the web and scrolling is better; books are one of the rare places where the opposite is true.

[11:15:28.0877] <TabAtkins>
Related: *good* book rendering involves some algorithms that have bad worst-case runtime complexity but are perfectly fine for rendering things like book pages.

[11:15:46.0563] <bkardell>
I will agree those are a very big part :)

[11:16:13.0242] <TabAtkins>
So once you're inventing pagination yourself, doing *the rest* of book rendering is actually quite simple and avoids most of the problems with replacing the web (no need for a bunch of input controls, complex layouts, etc)

[11:17:17.0188] <TabAtkins>
So the cost of doing it all natively, vs wrangling the web into doing it when you're trying to tweak things at a level below the primitives it naturally exposes, just leans pretty heavily towards native, and that's not unreasoanble.

[11:18:25.0323] <TabAtkins>
I'd certainly *like* good book rendering on the web, like we could just iframe an epub and it would Just Work, but it would be a pretty large effort with very questionable return on value.

[11:19:27.0875] <bkardell>
why would you need to iframe it?

[11:19:59.0714] <TabAtkins>
I mean, loading up a `http://example.com/book.epub` would work just as well, sure

[11:20:11.0371] <TabAtkins>
but assuming you were rendering a reader site around it

[11:20:21.0387] <bkardell>
right. I think that used to work in ms briefly

[11:21:15.0181] <bkardell>
maybe not well - idk I never used it... I just think I remember someone, maybe rossen showing me some talks

[11:30:03.0603] <Jake Archibald>
I'm always surprised that folks think UAs would produce an excellent epub reader, given how bad things like HTML date inputs were (and continue to be, depending on UA) for years

[11:46:29.0709] <bkardell>
kinda curious how those are related - I definitely think what Matthew Phillips is saying is that books are documents about text, you know the thing the web is supposed to be great at. Date pickers, are mostly used in stuff that is more of a stretch for that model

[12:02:21.0728] <TabAtkins>
Yeah, I'm not seeing the connection. Several browsers rendered some form controls in a relatively shitty manner (tho I've seen *worse* in userland; rarely, but still), but that doesn't seem to have any bearing on how everything else is rendered.

[14:19:38.0496] <Ian Hickson>
fwiw, i think the "but then you'd have a million frameworks all reinventing text editing" argument doesn't match reality. we've run the experiment. there aren't a million frameworks on android, there's a half dozen real ones and maybe a dozen more small ones. on the other hand the web has literally thousands and more pop up every year. they don't reinvent text editing, instead they reinvent other things, but they still exist, in a way that just doesn't happen on other platforms. i'm not sure i 100% understand why, but i think it's curious nonetheless.
also, "save flutter one line of code" is exactly what this proposal is, yes. i mean, it's more like "one stub file" than "one line of code", but it's basically the same thing. the idea is for the web to recognize it's in 2023 not 1991, so that when you boot a web app it doesn't have to first get you from real mode to protected mode and then from protected mode to long x64 mode (or rather, from 1991 CERN document mode to 1997 DOM mode to 2020 Wasm mode to 2023 WasmGC mode etc). everything this proposal suggests is already possible, the proposal is just to clean up the technical debt around it.

[14:22:29.0713] <Ian Hickson>
there's shades of the 2004 w3c apps & compound documents meeting in this, where mozilla and apple (and microsoft and sun!) were telling the w3c they can either get on the train or be left at the station, except this time the train is wasm&webgpu :-)

[14:43:54.0679] <bkardell>
> <@hixie:matrix.org> there's shades of the 2004 w3c apps & compound documents meeting in this, where mozilla and apple (and microsoft and sun!) were telling the w3c they can either get on the train or be left at the station, except this time the train is wasm&webgpu :-)

this is exactly what I was getting at/referencing above in https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$iRXTwv9IAQjoP_M8ri_OoA0RIJlMYqvDPXnausitzK4?via=matrix.org&via=mozilla.org&via=igalia.com

[15:06:24.0000] <bkardell>
we are saying completely different things about how it is related to 2004 I think though :)

[15:23:31.0599] <bkardell>
 * we are saying completely different things about how we interpreted its relationship to 2004 I think though :)

[15:26:13.0324] <Ian Hickson>
WPF would have been amazing, i'm still surprised microsoft didn't succeed at that

[15:26:35.0388] <Ian Hickson>
it only really lacked two things, a security model and vendor-neutrality

[15:27:00.0202] <Ian Hickson>
this is our opportunity to finally get there 20 years later though

[15:27:17.0099] <bkardell>
if you squint at your proposal the right way does it resemble flash a little?

[15:27:25.0937] <Ian Hickson>
it resembles flash a lot

[15:27:51.0782] <Ian Hickson>
flash was a huge boon for the web, with a few fatal flaws, the prime of which was again, lack of vendor-neutrality

[15:28:08.0513] <bkardell>
ok 😆 I was afraid to say that because I didn't want to insult you or something, but it is what I was saying too

[15:28:10.0764] <Ian Hickson>
it's kind of amazing that nothing ever really took its place

[15:28:20.0876] <Ian Hickson>
SVG i guess sort of did

[15:28:35.0895] <Ian Hickson>
but not like back then

[15:28:35.0952] <bkardell>
this thing called html 5 came along and told it to stop

[15:28:37.0366] <bkardell>
:)

[15:28:49.0839] <Ian Hickson>
well, html5 was sort of orthogonal to what flash did

[15:29:00.0423] <Ian Hickson>
html5 was more about stopping xforms

[15:29:23.0651] <bkardell>
that might have been the intent

[15:29:37.0218] <Ian Hickson>
i think apple had more of a hand in killing flash than html5

[15:29:47.0326] <bkardell>
but we also got canvas and animations and all kinds of things that made flash less necessary

[15:30:08.0398] <Ian Hickson>
somewhat. but those animations that flash made? we never really got them back.

[15:30:21.0584] <Ian Hickson>
youtube provides the non-interactive version i guess

[15:30:23.0731] <bkardell>
svg coming :)

[15:30:34.0111] <Ian Hickson>
if svg was going to do it, it would have done it already

[15:31:18.0535] <Ian Hickson>
anyway, i think wasm+webgpu is going to enable a whole category of things that we've been lacking every since flash and wpf died

[15:31:28.0699] <Ian Hickson>
(whether or not we do the thing i proposed)

[15:31:42.0916] <Ian Hickson>
we see it already in the kinds of apps people are making with flutter on web

[15:31:44.0552] <Ian Hickson>
like Rive

[15:31:58.0010] <bkardell>
youtube is interesting I was saying the other day how i wanted to write a post called Howard the Doc about this idea that how you think about what it is you're doing is hard and you always have to kind of squint at it. A doc is one model, but like, flash's was a movie.  Hypercards was a stack. 

[15:32:26.0022] <bkardell>
 * youtube is interesting I was saying the other day how i wanted to write a post called Howard the Doc about this idea that how you think about what it is you're doing is hard and you always have to kind of squint at it. A doc is one model, but like, flash's was a movie.  Hypercards was a stack. 

[15:33:16.0461] <bkardell>
none of those are apps, but what is an app?  When you look at the UI history the web and native clearly cross pollenate one another with ideas on how the model should be

[15:34:05.0362] <bkardell>
> <@hixie:matrix.org> like Rive

LInk?  I'm unfamiiliar it seems hard to google

[15:34:41.0986] <bkardell>
> <@hixie:matrix.org> anyway, i think wasm+webgpu is going to enable a whole category of things that we've been lacking every since flash and wpf died

what about webxr?  you see any relationship here?

[15:38:29.0772] <Ian Hickson>
rive.app, it's the first google result for "rive"

[15:38:46.0523] <Ian Hickson>
not familiar with webxr


2023-02-03
[17:00:28.0884] <bkardell>
Ah apparently i was searching with... Not Google 😊

[17:08:41.0670] <sideshowbarker>
for users and developers, we definitely have regressed from what could be done easily with Flash

[17:09:58.0741] <sideshowbarker>
…for that class of web content that was being produced with Flash — that timeline-based experience

[17:11:14.0539] <sideshowbarker>
which is admittedly only a subset, and different from a full “app” experience the way that mobile apps provide

[17:11:37.0281] <sideshowbarker>
but the web losing Flash was not a win for end users and developers

[17:12:33.0175] <sideshowbarker>
Flash enabled a lot of people to develop content without needing to be “coders” — the tooling made it easy for them to create content

[17:13:16.0617] <sideshowbarker>
and they did it on scale, and users on scale liked the experience it provided

[17:16:04.0567] <sideshowbarker>
And it had ubiquity all the way up until the first iPhone came out — on which even Safari was just barely even usable running on the iPhone on its own. And so it just literally wasn’t feasible to have the Flash runtime also running on top of the browser runtime in Safari on the first iPhones

[17:16:30.0764] <sideshowbarker>
And so Flash lost the key property of ubiquity it’d had until then

[17:17:02.0168] <sideshowbarker>
 * And it had ubiquity all the way up until the first iPhone came out — on which even Safari was just barely even usable running on the iPhone on its own. And so it just literally wasn’t feasible to have the Flash runtime also running on top of the browser runtime in Safari on the first iPhones

[17:55:13.0219] <sideshowbarker>
I’ve been thinking back to 2004–2005 when Flickr and other such sites first launched, and I was still working at Openwave and we had a mobile browser

[17:55:33.0768] <sideshowbarker>
 * I’ve been thinking back to 2004–2005 when Flickr and other such sites first launched, and I was still working at Openwave and we had a mobile browser

[17:57:36.0929] <sideshowbarker>
once I learned that XHR was what those sites were using to make the user experience they gave, I remember talking with people on the browser team and saying to them, Well, clearly now we really need to enable XHR in our browser

[17:58:08.0558] <sideshowbarker>
But there response at the time was, No, we really don’t, because what we have now is working

[17:59:49.0663] <sideshowbarker>
And they were provably right when they said that, because our browser (EZWeb browser) was shipping preinstalled on literally millions of browsers in Japan, and that browser was solving problems for literally millions of people in Japan who were using it every day to do all kinds of things

[18:00:22.0970] <sideshowbarker>
And we were making great money from it all

[18:00:48.0199] <sideshowbarker>
But my feeling was still, we can do better than this

[18:02:53.0779] <sideshowbarker>
The browser was well designed, and worked with content written in XHTML and CSS, not just WML — and it even had scripting. But it wasn’t JavaScript — it was WMLScript instead

[18:06:03.0146] <sideshowbarker>
And I remember people from the browser team patiently telling me that, with just our current stack, we could actually enable developers to create richer user experiences of the kind that were coming out in sites then, in 2004 and 2005 — that it in part, just needed developers to start doing some things differently and better (and providers buying more of our server products)

[18:07:46.0718] <sideshowbarker>
And then into our market came the full Opera browser shipping preinstalled on just one phone, labeled as “PC Site Viewer” — and users in Japan could then, on their mobile phones, access real full web content, from real web sites

[18:09:08.0339] <sideshowbarker>
with some XHR support in the browser

[18:09:55.0336] <sideshowbarker>
but for us at Openwave, enabling XHR meant adding support to JavaScript, switching from WMLScript to JavaScript

[18:12:04.0201] <sideshowbarker>
but the company just did not at all have the economic incentives to invest in doing that — we already had the customers shipping our browser on millions of devices, we had a huge number of developers creating content that worked well in it already, and we had millions of users already using it

[18:13:07.0350] <sideshowbarker>
and the browser PMs and engineers just saw no good strong need for it

[18:13:47.0305] <sideshowbarker>
…and that’s when I left and went to work at Opera

[18:16:41.0700] <sideshowbarker>
among the great things at Opera was that among the engineering team and QA team the default attitude really was “we can do better than this”, and they were wiling to try out some risky, nutty, unproven ideas — and the company management then really supported that (all the way up to Jon von Tetzchner and Haakon, especially)

[18:20:30.0342] <sideshowbarker>
 * but for us at Openwave, enabling XHR meant adding support for JavaScript to the browser, switching from WMLScript to JavaScript

[10:30:28.0205] <wanderview>
Is there a canonical way to go from a Navigator to the environment settings object that contains it?

[10:44:18.0065] <wanderview>
I guess I want relevant settings object

[10:59:37.0671] <Matthew Phillips>
> <@tabatkins:matrix.org> So the cost of doing it all natively, vs wrangling the web into doing it when you're trying to tweak things at a level below the primitives it naturally exposes, just leans pretty heavily towards native, and that's not unreasoanble.

I don't think I understand this point. Are you saying that not having built in pagination elements / primitives / whatever is enough of a reason to go native? Not debating just trying to understand the point.

[11:00:28.0550] <TabAtkins>
I'm saying that the cost of reproducing those, compared with the cost of losing the rest of the web platform, tilts the economics pretty decently toward "do it yourself in native code"

[11:00:45.0871] <TabAtkins>
You just don't need much of the web platform in an ereader

[11:01:14.0461] <TabAtkins>
But you do need pagination and better text layout, which the web platform doesn't provide and doesn't give you the primitives to reasonably do yourself.

[11:01:36.0809] <Matthew Phillips>
No, but building a full ereader from scratch in native is more complicated than building a pagination widget in JS, no?

[11:01:51.0517] <Matthew Phillips>
 * No, but building a full ereader from scratch in native is more complicated than building a pagination widget, no?

[11:02:05.0395] <Matthew Phillips>
 * No, but building a full ereader from scratch in native is more complicated than building a pagination widget in JS, no?

[11:02:27.0449] <TabAtkins>
That one bit, yes. There's more that you end up needing to reinvent.

[11:03:10.0217] <TabAtkins>
Other things I mentioned above: drm (and its precursor, dependable local storage)

[11:04:35.0588] <Matthew Phillips>
Ok, so things that are possibly fixable.

[11:04:52.0646] <TabAtkins>
Everything's potentially fixable, yeah

[11:05:26.0006] <Matthew Phillips>
But small things in comparison to the "reinvent the web on wasm" idea :)

[11:05:34.0077] <TabAtkins>
It's just that several of them aren't high-prio (or even perhaps medium prio) for web content as it exists today, so making the argument for working on it (specs and impls) isn't easy.

[11:05:55.0334] <TabAtkins>
Different people are reinventing the stuff in that case, with different incentives. ^_^

[11:08:18.0316] <Matthew Phillips>
The upside here is potentially huge though. Inventing an ereader in native is a lot of work. So much so that only a few companies have ever even tried.

The web is close here. And the upside would be that publishers could avoid the Amazon tax.

[11:09:33.0459] <Matthew Phillips>
So what is it about payment? Is it just the friction (which presumably web payments removes) or is it something else?

[11:10:07.0478] <TabAtkins>
Payment's gotten a lot better in the last few years! It was still pretty bad even five years ago.

[11:10:41.0019] <TabAtkins>
Tho the app stores getting more aggressive with their cuts make the friction argument less and less relevant to the bottom line.

[11:11:23.0191] <TabAtkins>
Like, the Nook app on Android no longer lets you buy books in it (because they'd have to give 30% of the price to Google). All you can do is wishlist, then they'll link you to the b&n website to actually buy it.

[11:11:57.0571] <Matthew Phillips>
Does Google take the same cut from web payments?

[11:13:00.0532] <TabAtkins>
Surely not; the CC processers would scream bloody murder and they're a powerful mafia.

[11:13:14.0145] <TabAtkins>
But I don't know the details.

[11:13:15.0171] <Matthew Phillips>
Comixology (Amazon company) had to do the same thing in their Android app. It makes the experience really bad. Feels like an opportunity for the web.

[11:14:23.0734] <Matthew Phillips>
ok, that makes sense, i was thinking that web payments had the same UI overlay as native but that doesn't mean that google is taking a cut

[11:20:29.0574] <Matthew Phillips>
So if we were doing a list:

- Payments: fixed?
- Pagination: some nice web components could pave the way for builtins later.
- DRM: What is this? preventing Save Page As?
- Better text layout: What is this one? What's wrong with text on the web?

[13:57:23.0309] <zip>
DRM: Remove


2023-02-04
[18:56:16.0469] <Alan Stearns>
Pagination: there are plenty of ways to simulate pagination in web components, but since we do not provide useful primitives for this they all rely on breaking apart and re-assembling markup elements which is a hard and expensive thing to do

[18:58:22.0095] <Alan Stearns>
Better text layout: The main missing thing (at least for English text) is better line breaking. If you consider more than one line of text at a time, you can come up with better line breaks over an entire paragraph. All browsers only consider one line at a time at the moment.

[06:54:12.0136] <Domenic>
I would not call payments near fixed, at the moment. The web is stuck in a very inadequate equilibrium there and I suspect no single actor could move it. (E.g., even if all browsers wanted to move, payment processors / merchants might not.) But I guess if books are already shelling out to the web, at least a web-based reader would not be worse.


2023-02-06
[01:13:24.0056] <annevk>
hsivonen: have you made up your mind on how to deal with the gb18030 update? Or maybe Adam Rice looked into it?

[01:44:57.0725] <hsivonen>
> <@annevk:matrix.org> hsivonen: have you made up your mind on how to deal with the gb18030 update? Or maybe Adam Rice looked into it?

It's unclear to me to if the upstream standard change is driven by practical improvement or by theory. At least I'm not advocating in favor of a browser change at this time.

[01:45:27.0377] <hsivonen>
Or are we talking about a different gb18030 update?

[01:53:26.0665] <annevk>
hsivonen: nah that one; https://www.unicode.org/L2/L2023/23003r-gb18030-recommendations.pdf was also brought to my attention

[02:34:37.0894] <hsivonen>
> <@annevk:matrix.org> hsivonen: nah that one; https://www.unicode.org/L2/L2023/23003r-gb18030-recommendations.pdf was also brought to my attention

Interesting. I guess a reasonable position for the Encoding Standard is to wait and see what reaction (if any) that letter gets.

[03:08:12.0217] <annevk>
Andreu Botella: Luca Casonato: will either of you update https://github.com/whatwg/fetch/pull/1346?

[03:10:18.0956] <annevk>
I'm also happy to do some work if that would be easier. I think there's enough agreement to merge this and give it a go.

[03:53:42.0338] <Andreu Botella>
> <@annevk:matrix.org> Andreu Botella: Luca Casonato: will either of you update https://github.com/whatwg/fetch/pull/1346?

I would update it if I had write permissions for fetch

[03:57:40.0024] <Andreu Botella>
or if Luca gave me write access to his branch

[04:00:35.0846] <annevk>
Andreu Botella: I gave you write access

[04:00:43.0540] <Andreu Botella>
thanks

[04:08:18.0920] <Noam Rosenthal>
Is there a place I'm missing where UI events create a task on the event loop? Seems like they don't and we rely on "SHOULD"-style somewhat implementation-specific behavior, but I wanted to make sure

[04:17:34.0736] <annevk>
Noam Rosenthal: the sequence of events should be that there's user input, which results in some computation and a task consisting of a set of steps, and those steps then end up dispatching the event

[04:17:50.0148] <annevk>
Noam Rosenthal: you're correct that UI events has been hand-wavy about this since say forever

[04:18:15.0610] <annevk>
Noam Rosenthal: there are some issues and depending on where you look you might find me complaining about it

[04:24:41.0496] <Noam Rosenthal>
annevk: gotcha, thanks for the context. 

[06:59:32.0259] <hsivonen>
Ms2ger: What use case is this test ensuring proper support for? https://github.com/tc39/test262/issues/1696 That is, are you aware of a use case where it's actually useful to load a search collation into the sorting-oriented API? I'm seriously considering sending an Intent to unship: Search collations. (Due to making libxul larger with no reasonable use case that I can see given the API surface available.)

[07:01:05.0251] <hsivonen>
(My question at https://github.com/tc39/ecma402/issues/256#issuecomment-979760435 has remained unanswered for over a year.)

[10:23:48.0361] <littledan>
> <@hsivonen:mozilla.org> Ms2ger: What use case is this test ensuring proper support for? https://github.com/tc39/test262/issues/1696 That is, are you aware of a use case where it's actually useful to load a search collation into the sorting-oriented API? I'm seriously considering sending an Intent to unship: Search collations. (Due to making libxul larger with no reasonable use case that I can see given the API surface available.)

This sounds like something to raise to TC39-TG2, the ECMA-402 committee, to see if people are still interested. It's been part of Intl since the beginning.

[10:24:11.0791] <littledan>
e.g., in one of their calls

[10:25:37.0860] <littledan>
I raised this in #tc39-ecma402:matrix.org 

[13:22:31.0223] <TabAtkins>
> <@matthewcp:matrix.org> So if we were doing a list:
> 
> - Payments: fixed?
> - Pagination: some nice web components could pave the way for builtins later.
> - DRM: What is this? preventing Save Page As?
> - Better text layout: What is this one? What's wrong with text on the web?

Re: the DRM part, I mean a way to serve purchased books that doesn't trivially allow the user to just save the file and email it to someone else. (I feel very strongly that DRM is fundamentally immoral, but it's absolutely a business requirement in this case.)

[13:23:47.0533] <TabAtkins>
For example, if I buy a book from B&N for my Nook, by default it's in a proprietary format that's locked to my account. Luckily the DRM is easy to strip off to obtain the epub inside the container, so I can archive my book collection, but aiui the process is somewhat more difficult for Kindle books.


2023-02-07
[01:02:06.0251] <hsivonen>
> <@littledan:matrix.org> I raised this in #tc39-ecma402:matrix.org

Thanks. It doesn't look particularly indicative of strong use cases existing that there isn't already a use case given on the channel while two collator implementors (Markus Scherer and I) on GitHub are saying that the sorting API isn't suitable for searching.

