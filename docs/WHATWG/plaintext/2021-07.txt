2021-07-01
[01:34:35.0083] <sujaldev>
Hi, Can anyone please describe what is exact procedure to "Consume the maximum number of characters possible" mentioned here: https://html.spec.whatwg.org/#named-character-reference-state

[01:35:32.0274] <sujaldev>
 * Hi, Can anyone please describe what is the exact procedure to "Consume the maximum number of characters possible" mentioned here: https://html.spec.whatwg.org/#named-character-reference-state

[01:45:30.0344] <Andreu Botella (he/they)>
Hm, there's arguably a bug there, since the string `&centerNotDot;` should only match the charref `&center`, rather than the prefix of `&centerdot;`

[01:46:08.0081] <Andreu Botella (he/they)>
 * Hm, there's arguably a bug there, since the string `&centerd;` should only match the charref `&center`, rather than the prefix of `&centerdot;`

[01:47:44.0487] <Andreu Botella (he/they)>
 * Hm, there's arguably a bug there, since the string `&centerd;` should only match the charref `&cent`, rather than the prefix of `&centerdot;`

[01:47:55.0225] <Andreu Botella (he/they)>
 * Hm, there's arguably a bug there, since the string `&center` should only match the charref `&cent`, rather than the prefix of `&centerdot;`

[01:50:21.0827] <sujaldev>
So what's the correct way to do this?

[01:51:45.0453] <Andreu Botella (he/they)>
Keep a copy of the named character references list, and for every consumed character, remove the entries that don't match up for that character

[01:53:07.0308] <Andreu Botella (he/they)>
But keep in a variable the latest entry that you have consumed in full (that is, for which the next character would be end-of-string)

[01:54:29.0619] <Andreu Botella (he/they)>
Once the list is empty, unconsume as many characters as (number of characters you've consumed in this algorithm - length of the latest entry consumed in full or 0)

[01:54:52.0418] <Andreu Botella (he/they)>
the latest entry consumed in full is the match you've found, if there is any

[01:56:27.0036] <sujaldev>
sorry to ask a stupid question but what does it mean to "unconsume" here?

[01:59:31.0276] <Andreu Botella (he/they)>
To walk back the pointer into the input stream, such that the next input characters would be the characters after the end of the matched character reference, even if in parsing you've consumed more characters than those

[02:00:40.0500] <sujaldev>
oh ok! thank you for the help!!

[02:08:20.0816] <Andreu Botella (he/they)>
If it's not very obvious, that part of the algorithm tries to find the longest character reference that matches the input

[02:09:19.0036] <Andreu Botella (he/they)>
So both `cent` and `centerdot;` are character references, so if the next few characters are `center;`, you want to match `cent` only

[02:09:39.0867] <Andreu Botella (he/they)>
If you're reading character by character, you would have to read `center` and then backtrack when you find the semicolon

[02:10:46.0708] <Andreu Botella (he/they)>
but if you do find `centerdot;` you want to take that as the match, not `cent`

[02:24:05.0296] <sujaldev>
So from what I understand from the above explanation an html stream <p>center;</p> would be read as <p>&cent;er</p>

right?

[02:24:39.0229] <sujaldev>
displayed as:
¢er;

[02:24:57.0635] <sujaldev>
 * So from what I understand from the above explanation an html stream <p>center;</p> would be read as <p>&cent;er;</p>

right?

[02:28:39.0856] <sideshowbarker>
sujaldev: `center;` would never reach that algorithm — because `center;` doesn’t begin with an `&` ampersand 

[02:29:24.0528] <sujaldev>
sorry i mean &center;

[02:29:48.0033] <sujaldev>
let me just edit that

[02:29:55.0501] <sujaldev>
 * So from what I understand from the above explanation an html stream <p>&center;</p> would be read as <p>&cent;er;</p>

right?

[02:31:34.0810] <Andreu Botella (he/they)>
¢er; indeed

[02:32:32.0163] <sujaldev>
trying to implement it now in my project! thank you again!

[02:35:01.0390] <sideshowbarker>
sujaldev: I guess you probably already know about the html5lib test suite, but if not, you definitely want to be testing your implementation against that — https://github.com/html5lib/html5lib-tests

[02:36:37.0199] <sideshowbarker>
and not to muddy the waters, but it’s worth mentioning that you don’t need to match the steps in that part of the parsing algorithm exactly, as long as you end up with the same result

[02:37:39.0469] <sujaldev>
> <@sideshowbarker:mozilla.org> sujaldev: I guess you probably already know about the html5lib test suite, but if not, you definitely want to be testing your implementation against that — https://github.com/html5lib/html5lib-tests

I didn't know about this, real helpful.

[02:37:53.0647] <sideshowbarker>
yeah for https://github.com/validator/htmlparser we don’t match the spec steps exactly for that part of the algorithm, but do it in a different way that produces the same test results

[02:39:28.0599] <sujaldev>
does it still follow state machine concept?

[02:39:54.0295] <sideshowbarker>
yes

[02:41:52.0317] <sideshowbarker>
there are some places where it doesn’t conform to the spec, and I’ve had some pull requests open for quite a while now to fix those, but… fixing them has not been a big priority for that particular project

[02:43:49.0582] <sujaldev>
> <@sideshowbarker:mozilla.org> yeah for https://github.com/validator/htmlparser we don’t match the spec steps exactly for that part of the algorithm, but do it in a different way that produces the same test results

If I knew more about parsing and also knew java would have loved to contribute to this

