2024-07-04
[20:49:42.0064] <ljharb>
if there are more considerations for https://github.com/tc39/proposal-is-error/issues/8 i would love to hear them before the agenda deadline for the july plenary


2024-07-11
[17:15:43.0395] <Michael Ficarra>
https://github.com/tc39/Reflector/issues/535#issuecomment-2221750690


2024-07-15
[02:38:31.0849] <nicolo-ribaudo>
Hey I opened https://github.com/tc39/ecma262/pull/3374 to remove the dynamic scoping from indirect eval, reviews are appreciated

[02:38:38.0002] <nicolo-ribaudo>
I'll try to prepare some slides for next plenary

[09:09:24.0244] <Michael Ficarra>
@nicolo-ribaudo:matrix.org you should add it to the agenda now, you can always add slides later


2024-07-17
[10:25:38.0799] <ljharb>
sorry i'm late; what have i missed so far?

[10:26:25.0585] <Michael Ficarra>
the thing on screen, that's it

[10:27:47.0897] <ljharb>
lol ok

[10:33:13.0767] <Michael Ficarra>
whenever `eval` comes up, I just tune out because I couldn't give a single fuck about what happens once someone invokes `eval`

[10:33:17.0842] <Michael Ficarra>
it may as well be UB

[12:50:48.0203] <Mathieu Hofman>
eval doesn't have to be evil ;)


2024-07-18
[20:25:53.0532] <dveditz>
but it only takes one bitflip to make it so

[03:37:39.0273] <littledan>
> <@michaelficarra:matrix.org> whenever `eval` comes up, I just tune out because I couldn't give a single fuck about what happens once someone invokes `eval`

Don’t most of your customers’ sites not have csp on, or configured properly?

[05:54:36.0464] <Michael Ficarra>
> <@littledan:matrix.org> Don’t most of your customers’ sites not have csp on, or configured properly?

last I looked, most sites period don't have CSP on or configured properly

[06:05:34.0281] <littledan>
> <@michaelficarra:matrix.org> last I looked, most sites period don't have CSP on or configured properly

Right, so isn’t eval pretty relevant?

[06:08:20.0287] <Michael Ficarra>
you're assuming that's intentional rather than either them not caring about CSP, not being aware of CSP, or CSP being incredibly hard to not screw up

[06:09:42.0667] <Michael Ficarra>
also a lot of the directives are overly broad, so, until recently, you had to permit eval even to just run wasm fully sandboxed

[06:09:49.0005] <littledan>
I’m not assuming that, I just mean we need to worry about what happens when it happens 

[06:10:52.0603] <Michael Ficarra>
oh somebody, sure, just not me

[06:13:44.0580] <littledan>
(I am in the eval is evil camp fwiw)

[06:14:38.0756] <littledan>
(Was certainly necessary historically of course)

[07:07:06.0568] <Michael Ficarra>
IMO new things like dynamic eval shouldn't even work within eval

[07:07:22.0509] <Michael Ficarra>
probably the only reason they do is because it simplifies engines

[07:07:32.0396] <Michael Ficarra>
* IMO new things like dynamic import shouldn't even work within eval

[07:36:42.0329] <littledan>
no, it definitely makes engines more complex. supporting eval for various cases was a complicated, not-fun part of implementing ES6.

[07:38:04.0512] <littledan>
part of the motivation is supporting various code loading systems. another part (for certain particularly obscure cases) is consistency for TC39 itself.

[07:38:19.0084] <littledan>
 * part of the motivation is supporting various code loading systems. another part (for certain particularly obscure cases) is consistency for TC39's goals.

[08:49:21.0955] <Michael Ficarra>
well you'll have to explain that to me more over drinks some day

[08:49:28.0128] <Michael Ficarra>
a lot of drinks

[09:27:05.0620] <Mathieu Hofman>
There are multiple TC39 member organizations that run production systems based on eval.


2024-07-20
[08:16:04.0904] <kriskowal>
> <@michaelficarra:matrix.org> IMO new things like dynamic import shouldn't even work within eval

With the Evaluators proposal, that sort of arrangement would be possible to make. Agree that it’s a pity it’s possible at all

[10:27:16.0736] <littledan>
> <@michaelficarra:matrix.org> well you'll have to explain that to me more over drinks some day

Remember the change about removing the extra scope inside default params? This was because V8 (!) insisted on it for consistency. Years later, V8 (different individuals) championed its removal. The only observable impact was on direct eval, namely blocking sloppy mode var leaking. These semantics only made implementations more complex.

[10:28:08.0413] <littledan>
We also considered things like making private fields not accessible within direct eval, but this was also rejected for inconsistency 

[10:28:37.0079] <littledan>
None of this is about blocking features entirely, just about making the scoping for direct eval less fancy

[10:28:58.0327] <littledan>
* We also considered things like making private fields not accessible within direct eval (if their name is defined from outside of the eval), but this was also rejected for inconsistency

[10:29:35.0800] <littledan>
I would be very happy to move in a direction where we don’t do this in the future! It would definitely simplify implementations

[10:30:35.0136] <littledan>
These sorts of things also aren’t very useful for eval-driven code loading either (but simultaneously we should be working on alternatives, like ShadowRealm importValue)

