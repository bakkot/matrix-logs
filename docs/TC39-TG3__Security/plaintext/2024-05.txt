2024-05-01
[10:01:34.0418] <kriskowal>
I‚Äôm unable to join the webex ‚Äúanother meeting is in progress‚Äù.

[10:01:55.0642] <ljharb>
hm, it's letting me in

[10:02:44.0645] <kriskowal>
Seems to be a ‚Äúme‚Äù issue. I need to figure out how to leave the meeting I‚Äôm not in.

[10:13:25.0223] <ljharb>
next week i'll be at RSA conf so i won't be at TG3.

[12:18:13.0227] <littledan>
I got a regular conflict that I had with this meeting moved (it wasn't signals; it was something else) so I can hopefully come next week

[12:18:34.0063] <littledan>
are all SES meetings now TG3 meetings instead?

[12:42:23.0989] <ljharb>
yup


2024-05-03
[16:25:02.0862] <nullvoxpopuli>
hello!


2024-05-04
[17:19:04.0320] <Chris de Almeida>
üëã


2024-05-07
[06:49:14.0923] <ulises.gascon>
Hi all! seems like I managed to join the Matrix room üò∂‚Äçüå´Ô∏è


2024-05-08
[09:59:36.0867] <littledan>
I will join the TG3 meeting in 30 minutes 

[10:44:49.0803] <ljharb>
(i'm at RSA this week so i won't be in the meeting)

[11:35:33.0320] <shaylew>
re: curentComputed in the Signals proposal -- what I was trying to get at earlier was that, with AsyncContext in the picture, each framework would be able to make their own variables for whatever dynamic stuff they needed. AFAIK the global accessibility isn't vital to anyone's use cases; well-behaved frameworks would only ever be asking "is the Computed that's running one of mine?" and then reading their own separate properties off of it from there.

(currentComputed is one of a couple of things in the current proposal that are "sufficient but not minimal" for enabling certain use patterns; introspection is another. I think thinking about the security invariants is definitely a good way for us to search for better-behaved primitives for those uses.)

[15:14:07.0598] <Mathieu Hofman>
I filed https://github.com/tc39/proposal-signals/issues/219 to help think about some cross-realm issues of signals, which I think have a lot to do with current computed and how dependency graphs are created


2024-05-13
[16:30:45.0534] <guybedford>
Is there a standard process for adding TG3 agenda items? It would be great to get feedback on the latest JS module source design.

[16:33:59.0693] <ljharb>
huh, good point. we don't have an agenda doc for upcoming meetings.

if you want to make a PR that creates one (cribbing from the last one), that seems like it'll work :-)

[16:40:52.0239] <Chris de Almeida>
I normally do this and I've been slacking.  apologies


2024-05-15
[09:03:18.0726] <Chris de Almeida>
> <@guybedford:matrix.org> Is there a standard process for adding TG3 agenda items? It would be great to get feedback on the latest JS module source design.

https://hackmd.io/PQ9FSbVsSo6FcbnH9xGySA

this will have to suffice for now.  if not today, then if there is a particular week that you want to discuss, let us know and we will schedule it accordingly.=

[09:03:28.0032] <Chris de Almeida>
I will not be able to attend today

[10:17:33.0117] <nicolo-ribaudo>
Aaand my browser crashed, I'm not taking minutes anymore

[10:17:44.0131] <nicolo-ribaudo>
Well, I still see the screen but I have no audio

[10:18:11.0510] <ljharb>
i'll help with notes too

[10:20:15.0717] <nicolo-ribaudo>
I'm back

[11:05:09.0530] <ljharb>
sorry, had to drop

[11:31:19.0391] <nicolo-ribaudo>
Right after our call I went back working on my code, that _during the call_ I didn't realize at all was realted üòÅ
```js
interface HelperMetadata {
  globals: string[];
  localBindingNames: string[];
  dependencies: Map<string, string>;
  exportBindingAssignments: string[];
  exportPath: string;
  exportName: string;
  importBindingsReferences: string[];
  importPaths: string[];
}
``

[11:31:30.0857] <nicolo-ribaudo>
 * Right after our call I went back working on my code, that during the call I didn't realise at all was related üòÅ

```js
interface HelperMetadata {
  globals: string[];
  localBindingNames: string[];
  dependencies: Map<string, string>;
  exportBindingAssignments: string[];
  exportPath: string;
  exportName: string;
  importBindingsReferences: string[];
  importPaths: string[];
}
``
```

[11:32:21.0175] <guybedford>
to the letter


2024-05-22
[09:40:11.0374] <kriskowal>
I have today off and will not be present for the meeting. I look forward to catching up

[10:21:21.0357] <Michael Ficarra>
`namespaceReexports` would be a better name than `starExports` IMO @guybedford:matrix.org

[10:21:58.0338] <guybedford>
I'm open to naming changes

[10:22:28.0775] <guybedford>
`star exports` is used in the spec currently, but we can reconsider public naming for sure

[10:22:49.0693] <Michael Ficarra>
yeah "star" should be kept internal

[10:22:55.0369] <guybedford>
strictly speaking `export * from './x.js'` is distinct from `import * as ns from './x.js'`

[10:23:02.0614] <guybedford>
so I haven't heard these referred to as "namespace"

[10:23:07.0451] <guybedford>
but I'm open to that terminology

[10:23:43.0919] <Michael Ficarra>
sure but the latter is just a named export (`ns`)

[10:23:53.0042] <Michael Ficarra>
sorry import

[10:23:55.0162] <Michael Ficarra>
of a namespace

[10:24:19.0711] <guybedford>
I hadn't heard them called namespace exports before, but I do like the term

[10:24:27.0845] <guybedford>
are there any examples of this usage anywhere you know of?

[10:39:42.0224] <Michael Ficarra>
I dunno, that's just what I had casually called them lol

[11:43:18.0633] <kriskowal>
ses just calls them reexports, period. 

[11:44:10.0559] <kriskowal>
XS went with exportAllFrom and I like all > star

[12:03:31.0692] <guybedford>
I'm open to saying these are namespace exports, although it might be confused with `export * as ns from './mod.js'`

[12:04:18.0195] <guybedford>
reexports can work too - `reexports()`?

[14:35:56.0855] <ljharb>
fwiw in `import * as x`, `x` is a "namespace object"

[14:36:20.0013] <ljharb>
 * fwiw in `import * as x`, `x` is a "module namespace object"


2024-05-23
[17:52:15.0579] <kriskowal>
And we do not currently reify the internal namespace object so it doesn‚Äôt really have a name other than the spec environment record (which has additional burdens apart from capturing the internal namespace)

[14:21:47.0346] <guybedford>
How about the term `namespaceReexports` then

[14:22:05.0185] <guybedford>
either term along might be misconstrued, but together it seems fairly well-defined?

[14:22:09.0934] <guybedford>
 * either term alone might be misconstrued, but together it seems fairly well-defined?


2024-05-29
[09:18:38.0234] <littledan>
Note, we're collecting Trusted Type feedback on Array.isTemplateObject at https://github.com/w3c/trusted-types/issues/519 . I encourage people here to ask any relevant follow-up questions.

[09:19:48.0960] <littledan>
Given the current feedback (that Realms don't matter for TT one way or the other), I plan to propose Array.isTemplateObject as a realm-independent check to minimize overall complexity, both for spec and implementation

[09:55:12.0005] <Chris de Almeida>
perhaps my imagination is lacking but I'm having trouble summoning a situation in which a realm-specific check would be important

[09:55:30.0348] <Chris de Almeida>
 * perhaps my imagination is lacking but I'm having trouble summoning a situation in which a realm-specific check would be important for `Array.isTemplateObject()`

[12:23:08.0067] <ljharb>
i believe the goal of that request is to be able to use membranes and ensure that a template object (from the dry or the wet side, i can never remember which is which) is recognized as you expect by isTemplateObject on the other side?

[12:23:50.0623] <ljharb>
(personally i want a cross-realm slot check, like every other slot check, which i think is what dan means by "realm-independent")

[12:35:05.0393] <littledan>
After the TG3 call, I'm thinking to keep the check cross-realm, but make isTemplateObject a global, rather than on Array (which was confusing anyway)

