2022-05-02
[10:39:56.0420] <legendecas>
> <@legendecas:matrix.org> That will be great. I'd be happy to volunteer to work on test262 :D

Just submitted the initial setup https://github.com/tc39/test262/pull/3512


2022-05-04
[10:43:05.0879] <rbuckton>
I was looking at the outline for parameter decorators mentioned here: https://github.com/tc39/proposal-decorators/blob/master/EXTENSIONS.md#parameter-decorators-and-annotations, and was thinking about the shape of the context object. I think there are a few things we could add aside from `kind`:

```ts
interface ParameterDecoratorContext {
  kind: "parameter";
  index: number; // ordinal position of parameter
  name?: string; // name if an Identifier, `undefined` if a binding pattern
  rest: boolean; // indicates a rest parameter (i.e., `...`)
  parent:
    | {
        kind: "function";
        name?: string;
      }
    | {
        kind: "method" | "getter" | "setter";
        name: string | symbol;
        private: boolean;
        static: boolean;
        parent: // may be other parents in the future such as `struct`, `object`, etc.
          | {
              kind: "class";
              name?: string;
            }
      };
  // phase: "function" runs initializers at the start of the function body
  addInitializer(cb: () => unknown, phase?: "class" | "static" | "instance" | "function"): void;
}
```
The above also incorporates the parent context idea from https://github.com/tc39/proposal-decorators/issues/466

[10:46:08.0407] <rbuckton>
TS parameter decorators get the parameter index which is necessary for DI, RTTI, and RTTC, so that seems a minimum requirement for a parameter context.

