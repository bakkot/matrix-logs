2022-04-01
[20:55:09.0684] <jschoi>
Probably not, but just in case…
Is there a way for ecmarkup to become aware of definitions from Ecma262 pull requests? I want a proposal spec to refer to the Decorator productions from #2417—and I want to suppress the grammar-shape errors resulting from the spec referring to those productions.

[21:02:37.0396] <jschoi>
* Probably not, but just in case…
Is there a way for ecmarkup to become aware of definitions from Ecma262 pull requests? I want a proposal spec to refer to the Decorator productions from #2417—and I want to prevent the grammar-shape errors resulting from the spec referring to those productions.

[21:15:42.0453] <bakkot>
jschoi: check out the pr, run `ecmarkup --verbose --write-biblio whatever.json spec.html > /dev/null`; this will produce a `whatever.json` biblio file. in your proposal, do `ecmarkup --load-biblio ./whatever.json your-proposal.html`.

[21:16:09.0033] <bakkot>
that said I am halfway through making a breaking change to the biblio format so you might want to wait a couple days

[21:16:21.0122] <bakkot>
 * jschoi: check out the pr, run `ecmarkup --verbose --write-biblio whatever.json spec.html > /dev/null`; this will produce a `whatever.json` biblio file. in your proposal, do `ecmarkup --load-biblio ./whatever.json your-proposal.html`.

[21:16:54.0710] <bakkot>
(the `./` is import because otherwise ecmarkup will attempt to load a node module named `whatever.json` which is not the thing you want)

[21:17:24.0349] <bakkot>
this requires a recent (v10/v11) version of ecmarkup, I should mention

[21:17:45.0353] <bakkot>
uh, but that might not actually fix your problem

[21:18:00.0025] <bakkot>
because some of the checks are from grammarkdown, which doesn't really know about the biblio

[21:20:23.0621] <jschoi>
Thank you very much! I think the PR’s biblio file will be sufficient. Looking forward to the biblio-format upgrade. 

[21:20:46.0989] <bakkot>
it is just a small tweak to make it better for other tooling: https://github.com/tc39/ecmarkup/pull/425

[21:21:03.0960] <jschoi>
This will be a v12?

[21:21:18.0841] <bakkot>
https://github.com/tc39/ecmarkup/releases/tag/v12.0.0

[21:21:36.0504] <bakkot>
but there's a bug to do with https://github.com/tc39/ecmarkup/pull/426 that I gotta fix before this is actually usable

[21:21:41.0717] <bakkot>
so stick with 11 for now

[07:20:50.0355] <ryzokuken>
https://twitter.com/DasSurma/status/1509835337295609865

[07:25:17.0923] <Ashley Claymore>
The different between imports and destructuring seems to come up more 

[07:25:43.0276] <nicolo-ribaudo>
That's not imports and destructuring, but imports vs exports!

[07:27:00.0686] <nicolo-ribaudo>
 * That's not imports and destructuring, but imports vs exports

[07:27:04.0410] <nicolo-ribaudo>
 * That's not imports and destructuring, but imports vs exports!

[07:28:23.0469] <Ashley Claymore>
yes, I mean how default is treated different here:

`import x from "path"`
And 
`const x = v`;

when 

`import {x} from "path"`
and
`const {x} = v;`

[07:28:39.0564] <guybedford>
This was also discussed via https://github.com/tc39/notes/blob/main/meetings/2016-11/nov-29.md#12iid-proposal-to-reform-the-spec-to-include-default-export-in-export--from-module around creating an aliasing pattern (since redirects have instancing issues)

[07:28:53.0681] <Ashley Claymore>
I find more people get confused about that, vs using `export *`

[07:29:16.0126] <guybedford>
it could be worth considering an `export **` in future, bradleymeck previously suggested that alternative

