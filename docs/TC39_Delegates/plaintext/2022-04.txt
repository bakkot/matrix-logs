2022-04-01
[20:55:09.0684] <jschoi>
Probably not, but just in case‚Ä¶
Is there a way for ecmarkup to become aware of definitions from Ecma262 pull requests? I want a proposal spec to refer to the Decorator productions from #2417‚Äîand I want to suppress the grammar-shape errors resulting from the spec referring to those productions.

[21:02:37.0396] <jschoi>
* Probably not, but just in case‚Ä¶
Is there a way for ecmarkup to become aware of definitions from Ecma262 pull requests? I want a proposal spec to refer to the Decorator productions from #2417‚Äîand I want to prevent the grammar-shape errors resulting from the spec referring to those productions.

[21:15:42.0453] <bakkot>
jschoi: check out the pr, run `ecmarkup --verbose --write-biblio whatever.json spec.html > /dev/null`; this will produce a `whatever.json` biblio file. in your proposal, do `ecmarkup --load-biblio ./whatever.json your-proposal.html`.

[21:16:09.0033] <bakkot>
that said I am halfway through making a breaking change to the biblio format so you might want to wait a couple days

[21:16:21.0122] <bakkot>
 * jschoi: check out the pr, run `ecmarkup --verbose --write-biblio whatever.json spec.html > /dev/null`; this will produce a `whatever.json` biblio file. in your proposal, do `ecmarkup --load-biblio ./whatever.json your-proposal.html`.

[21:16:54.0710] <bakkot>
(the `./` is import because otherwise ecmarkup will attempt to load a node module named `whatever.json` which is not the thing you want)

[21:17:24.0349] <bakkot>
this requires a recent (v10/v11) version of ecmarkup, I should mention

[21:17:45.0353] <bakkot>
uh, but that might not actually fix your problem

[21:18:00.0025] <bakkot>
because some of the checks are from grammarkdown, which doesn't really know about the biblio

[21:20:23.0621] <jschoi>
Thank you very much! I think the PR‚Äôs biblio file will be sufficient. Looking forward to the biblio-format upgrade. 

[21:20:46.0989] <bakkot>
it is just a small tweak to make it better for other tooling: https://github.com/tc39/ecmarkup/pull/425

[21:21:03.0960] <jschoi>
This will be a v12?

[21:21:18.0841] <bakkot>
https://github.com/tc39/ecmarkup/releases/tag/v12.0.0

[21:21:36.0504] <bakkot>
but there's a bug to do with https://github.com/tc39/ecmarkup/pull/426 that I gotta fix before this is actually usable

[21:21:41.0717] <bakkot>
so stick with 11 for now

[07:20:50.0355] <ryzokuken>
https://twitter.com/DasSurma/status/1509835337295609865

[07:25:17.0923] <Ashley Claymore>
The different between imports and destructuring seems to come up more 

[07:25:43.0276] <nicolo-ribaudo>
That's not imports and destructuring, but imports vs exports!

[07:27:00.0686] <nicolo-ribaudo>
 * That's not imports and destructuring, but imports vs exports

[07:27:04.0410] <nicolo-ribaudo>
 * That's not imports and destructuring, but imports vs exports!

[07:28:23.0469] <Ashley Claymore>
yes, I mean how default is treated different here:

`import x from "path"`
And 
`const x = v`;

when 

`import {x} from "path"`
and
`const {x} = v;`

[07:28:39.0564] <guybedford>
This was also discussed via https://github.com/tc39/notes/blob/main/meetings/2016-11/nov-29.md#12iid-proposal-to-reform-the-spec-to-include-default-export-in-export--from-module around creating an aliasing pattern (since redirects have instancing issues)

[07:28:53.0681] <Ashley Claymore>
I find more people get confused about that, vs using `export *`

[07:29:16.0126] <guybedford>
it could be worth considering an `export **` in future, bradleymeck previously suggested that alternative

[07:30:17.0915] <Ashley Claymore>
the default export can always be chosen explicitly right; just requires a second import 

[07:30:25.0927] <nicolo-ribaudo>
Yes

[07:30:26.0288] <Ashley Claymore>
Or am I missing something?

[07:30:37.0023] <Ashley Claymore>
* Or am I missing something?

[07:31:07.0821] <Ashley Claymore>
* yes, I mean how default is treated different here:

`import x from "path"`
And 
`const x = v`;

compared to here:

`import {x} from "path"`
and
`const {x} = v;`

[07:42:21.0899] <jschoi>
There‚Äôs no formal specification yet for function decorators, right? Are there plans to allow arrow functions to be decorated? 

[07:44:15.0729] <nicolo-ribaudo>
I don't think there is even a proposal yet, it's mostly a desire

[07:44:32.0112] <nicolo-ribaudo>
(btw, we created a decorators room if you are interested)

[08:35:05.0326] <ljharb>
There‚Äôs a proposal for export default from, so you could do `export default, * from ‚Äòf‚Äô` - still stage 1

[08:46:42.0963] <Rob Palmer>
I'm assuming you need to know if the target has a default, else that will early error. 

[09:38:40.0601] <ljharb>
ah true, that's a good point

[09:38:52.0093] <ljharb>
altho tbf i'd hope you do always know what you're re-exporting :-)

[10:03:37.0168] <Rob Palmer>
I tripped up on this when trying to create a monorepo build tool using ES modules as redirects for inter-package links. It was annoying that those link modules could not be stable, and instead needed to be regenerated based on the target's content. 

[10:05:12.0749] <bakkot>
yeah, I generally feel like `export *` is only useful for glue code, and the glue code should not need to be updated when the thing it's re-exporting is updated; that's the whole point of it

[10:33:01.0673] <Ashley Claymore>
```
export * from "./mod.mjs";
import * as NS from "./mod.mjs";
export default NS.default ?? "üí•";
```

[10:33:59.0202] <rbuckton (OOF thru Apr. 1st)>
`export { default } from "./mod.js";`?

[10:35:28.0748] <Ashley Claymore>
that throws if mod doesn't have a default export. Going for agnostic glue code with a cryptic error when you use it wrong

[10:43:52.0717] <Ashley Claymore>
```
export * from "./mod.mjs";
import * as NS from "./mod.mjs";
export default NS.default ?? "nothing to see here";

export function then(cb) {
    cb({
        ...Object.fromEntries(Object.entries(NS).filter(([n]) => n !== 'default')),
        get default() {
            if ('default' in NS) return NS.default;
            throw new Error("not the module you were looking for");
        }
    });
}
```

[10:46:47.0250] <Ashley Claymore>
And this is also enough April 1st things from me

[10:48:20.0445] <Ashley Claymore>
 * ```
export * from "./mod.mjs";
import * as NS from "./mod.mjs";
export default NS.default ?? "nothing to see here";

export function then(cb) {
    cb({
         ...Object.fromEntries(Object.keys(NS).filter((n) => n !== 'default').map(n => [n, NS[n]])),
        get default() {
            if ('default' in NS) return NS.default;
            throw new Error("not the module you were looking for");
        }
    });
}
```

[10:48:25.0030] <Ashley Claymore>
 * And this is also enough April 1st things from me

[11:09:11.0054] <Mathieu Hofman>
Problem with using any expression is that you'd not be able to have default be re-exported live binding

[12:14:58.0702] <ljharb>
Defaults don‚Äôt have live bindings anyways, i thought

[12:16:22.0288] <nicolo-ribaudo>
They do, if you use { x as default } both to import and to export

[12:17:54.0658] <Mathieu Hofman>
Yeah that one is a pesky little corner case

[12:18:38.0131] <nicolo-ribaudo>
Also I think `export default function a() {}` is live?

[12:47:47.0897] <Mathieu Hofman>
and `export default class A {}`

[12:48:06.0110] <Mathieu Hofman>
but arguably most people don't re-assign these ;)

[16:52:15.0666] <jschoi>
I saw that you released 12.0.1; thanks for your hard work.
FYI: I‚Äôm still getting some warnings even with a biblio file.

That is: I tried upgrading ecmarkup to 12.0.1, running `ecmarkup --verbose --write-biblio biblio-decorators.json spec.html > /dev/null` in ecma262‚Äôs #2417 branch (‚Äúdecorators‚Äù), moved biblio-decorators.json to the pipe operator‚Äôs #268 branch (‚Äúat-sign‚Äù), and then (in that pipe branch) ran `ecmarkup --verbose spec.html --load-biblio ./biblio-decorators.json dist/index.html`.

The biblio file is definitely doing something; without it I also get a bunch of extra ‚Äúcan't find clause, production, note or example with id‚Äù warnings.
But it‚Äôs still giving me ‚Äúcould not find definition corresponding to production Decorator‚Äù warnings; I‚Äôm not sure why.

[16:52:39.0435] <jschoi>
> <@bakkot:matrix.org> but there's a bug to do with https://github.com/tc39/ecmarkup/pull/426 that I gotta fix before this is actually usable

 * I saw that you released 12.0.1; thanks for your hard work. 
FYI: I tried upgrading ecmarkup to 12.0.1, running `ecmarkup --verbose --write-biblio biblio-decorators.json spec.html > /dev/null` in ecma262‚Äôs #2417 branch (‚Äúdecorators‚Äù), moved biblio-decorators.json to the pipe operator‚Äôs #268 (‚Äúat-sign‚Äù), and then ran `ecmarkup --verbose spec.html --load-biblio ./biblio-decorators.json dist/index.html`.

(The biblio file is definitely doing something; without it I also get a bunch of extra ‚Äúcan't find clause, production, note or example with id‚Äù warnings.)

But it‚Äôs still giving me ‚Äúcould not find definition corresponding to production Decorator‚Äù warnings; I‚Äôm not sure why.

[16:52:58.0979] <jschoi>
 * I saw that you released 12.0.1; thanks for your hard work.
FYI: I‚Äôm still getting some warnings even with a biblio file.
That is: I tried upgrading ecmarkup to 12.0.1, running `ecmarkup --verbose --write-biblio biblio-decorators.json spec.html > /dev/null` in ecma262‚Äôs #2417 branch (‚Äúdecorators‚Äù), moved biblio-decorators.json to the pipe operator‚Äôs #268 (‚Äúat-sign‚Äù), and then ran `ecmarkup --verbose spec.html --load-biblio ./biblio-decorators.json dist/index.html`.

(The biblio file is definitely doing something; without it I also get a bunch of extra ‚Äúcan't find clause, production, note or example with id‚Äù warnings.)

But it‚Äôs still giving me ‚Äúcould not find definition corresponding to production Decorator‚Äù warnings; I‚Äôm not sure why.

[16:54:10.0082] <jschoi>
 * I saw that you released 12.0.1; thanks for your hard work.
FYI: I‚Äôm still getting some warnings even with a biblio file.

That is: I tried upgrading ecmarkup to 12.0.1, running `ecmarkup --verbose --write-biblio biblio-decorators.json spec.html > /dev/null` in ecma262‚Äôs #2417 branch (‚Äúdecorators‚Äù), moved biblio-decorators.json to the pipe operator‚Äôs #268 branch (‚Äúat-sign‚Äù), and then (in that pipe branch) ran `ecmarkup --verbose spec.html --load-biblio ./biblio-decorators.json dist/index.html`.

The biblio file is definitely doing something; without it I also get a bunch of extra ‚Äúcan't find clause, production, note or example with id‚Äù warnings.
But it‚Äôs still giving me ‚Äúcould not find definition corresponding to production Decorator‚Äù warnings; I‚Äôm not sure why.


2022-04-02
[17:19:05.0304] <bakkot>
jschoi: ah, yeah, that's the "because some of the checks are from grammarkdown, which doesn't really know about the biblio" thing

[17:19:25.0507] <bakkot>
I will look into suppressing that warning or conveying the necessary information to grammarkdown sometime soon

[17:24:36.0422] <bakkot>
oh actually that one is not from grammarkdown

[17:24:56.0247] <bakkot>
anyway should be easy enough to fix

[19:16:22.0242] <bakkot>
jschoi: https://github.com/tc39/ecmarkup/releases/tag/v12.0.2

[19:16:39.0613] <bakkot>
this also hopefully makes it possible to use `--lint-spec` in proposals which add syntax, like this one


2022-04-03
[18:51:19.0907] <bakkot>
do we think anyone has written code along the lines of `/(?<a>x)|\k<a>/` since the introduction of named capturing groups

[18:51:42.0494] <bakkot>
i.e. where there's a named backreference to a capturing group in a different alternative

[18:51:48.0473] <bakkot>
 * i.e. where there's a named backreference to a capturing group in a different alternative

[18:51:59.0511] <bakkot>
I want to make this illegal for reasons but realized it would technically be a breaking change

[18:55:09.0412] <bakkot>
there's no reason _to_ write this, as I understand things, since the `\k` can never refer to anything (since you can't match both arms of the disjunction at the same time)

[20:40:30.0274] <devsnek>
it does seem unlikely that code exists in the real world but who knows

[20:41:07.0994] <devsnek>
maybe one of the browsers can do an analytic for it

[12:32:02.0527] <bakkot>
https://github.com/tc39/ecma262/pull/2721


2022-04-05
[16:07:03.0737] <bakkot>
temporal spec now has user-code annotations, available by pressing `u`: https://tc39.es/proposal-temporal/

[16:07:07.0087] <bakkot>
(cc shu ^)

[16:54:35.0979] <shu>
nice! but also man that's a lot of UC

