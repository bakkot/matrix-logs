2023-02-01
[16:14:11.0083] <ljharb>
reading through it, it kind of seems like the conclusion of this page is roughly identical (modulo placeholder choice, perhaps) to the JS proposal?

[17:42:22.0845] <littledan>
Huh, I assumed that the range operator| was supposed to subsume pipeline 

[20:17:21.0192] <Ashley Claymore>
> "Scala is unique in that it only provides _, but that placeholder refers to a different parameter on each use. So _ > _ is a binary predicate that checks if the first parameter is greater than the second. Boost.HOF does the same with its unnamed placeholders [boost.hof.unnamed]."

[20:17:26.0600] <Ashley Claymore>
Wild!

[20:19:41.0362] <bakkot>
honestly kinda like scala's `_`

[20:32:18.0467] <rbuckton>
> <@bakkot:matrix.org> honestly kinda like scala's `_`

I mean, PFA would do this with `?`, though doing that with operators required other syntax. 

[21:15:31.0166] <littledan>
Notes editors: letâ€™s remember to remove the >> and add a blank line between different speakers (and text that you want to render in different paragraphs in general). I did this for some topics but I think we can also do it on-line as well.

[22:10:40.0115] <ljharb>
scala has something like 18 meanings for `_`, it's very confusing until you've internalized all the relevant contexts

[00:50:16.0351] <pipobscure>
> <@haxjs:matrix.org> At least wikipedia article also use ID as the abbr for identifier or identity ( https://en.wikipedia.org/wiki/Identifier )

What are you talking about? 

[00:50:43.0811] <pipobscure>
So wikipedia is probably not a good source to go for here.

[01:27:58.0851] <Ashley Claymore>
`_ ? _ : _`

[03:04:01.0694] <eemeli>
> <@ljharb:matrix.org> at any rate i feel very strongly against "Id" but "identifier" or "code" seem fine to me

ljharb: Could you clarify how you feel about "ID", an acronym of "identity document"?

[04:32:39.0479] <Ashley Claymore>
This _should_ now be OK for day 1 & 2.

[04:32:44.0145] <Ashley Claymore>
> <@littledan:matrix.org> Notes editors: letâ€™s remember to remove the >> and add a blank line between different speakers (and text that you want to render in different paragraphs in general). I did this for some topics but I think we can also do it on-line as well.

 * This _should_ now be OK for day 1 & 2.

[04:33:56.0845] <Ashley Claymore>
I think we should also keep the practice of starting every paragraph with the acronym, even if it's a continuation of the current speaker. To make it super clear that it is a continuation and not a missing acronym.

[04:34:04.0829] <Ashley Claymore>
 * I think we should also keep the practice of starting every paragraph with the acronym, even if it's a continuation of the current speaker. To make it super clear that it is a continuation and not a missing acronym.

[05:44:57.0315] <HE Shi-Jun>
> <@pipobscure:matrix.org> What are you talking about?

check the page history, someone changed ID to Id yesterday. ðŸ«¥

[05:46:33.0645] <littledan>
> <@aclaymore:matrix.org> I think we should also keep the practice of starting every paragraph with the acronym, even if it's a continuation of the current speaker. To make it super clear that it is a continuation and not a missing acronym.

Good point, we usually do that and I hadnâ€™t made that fix

[05:53:11.0497] <Anthony Bullard>
One point to note there, the transcriptionist introduces many unnecessary or unnatural newlines

This affects the grammar checking a lot, and is very tedious to clean up(and sometimes to even notice)

[06:00:43.0404] <Ashley Claymore>
yep hopefully that can get sorted at some point. I would say "surely that is an easy part of the software to change" but we all know not to assume the ease of making code changes to software :D

[06:00:52.0833] <Ashley Claymore>
 * yep hopefully that can get sorted at some point. I would say "surely that is an easy part of the software to change" but we all know not to assume the ease of making code changes to software :D

[06:02:12.0731] <Ashley Claymore>
a post-meeting script that replaces newlines where the previous line has text which does not end in punctuation might cover the majority of the occurrences.

[06:03:04.0018] <littledan>
Yes, we complained about these new lines to the transcriptionist, and I will also follow up with the company after this meeting to see if there is any possible fix.

[06:05:21.0266] <pipobscure>
> <@haxjs:matrix.org> check the page history, someone changed ID to Id yesterday. ðŸ«¥

Sorry if that wasnâ€™t clear from the tone. That was me in order to point out how unreliable Wikipedia is for topics where there is controversy. Itâ€™s ok as a lookup for common knowledge stuff, but wherever there is ongoing discussion wikipedia is useless.

[06:06:53.0345] <pipobscure>
Even years of interwebs experience still let me forget that tone doesnâ€™t always translate well. /blush

[06:07:12.0923] <pipobscure>
> <@pipobscure:matrix.org> Sorry if that wasnâ€™t clear from the tone. That was me in order to point out how unreliable Wikipedia is for topics where there is controversy. Itâ€™s ok as a lookup for common knowledge stuff, but wherever there is ongoing discussion wikipedia is useless.

 * Even years of interwebs experience still let me forget that tone doesnâ€™t always translate well. /blush

[06:11:38.0324] <littledan>
Yeah I am pretty baffled, what does vandalizing Wikipedia have to do with what we are discussing?

[06:13:36.0650] <pipobscure>
> <@littledan:matrix.org> Yeah I am pretty baffled, what does vandalizing Wikipedia have to do with what we are discussing?

I resent that (vandalizing?). That was an entirely valid edit. Also you do have to explain why the change is an improvement. Soâ€¦

But it does go to show that some sources (i.e. wikipedia) canâ€™t really be valid precedent in this argument. 

[06:15:44.0148] <littledan>
OK, I think we all know Wikipedia can be editedâ€¦ not sure what that proves

[06:16:18.0107] <littledan>
The bigger point here is, we should be able to collectively bikeshed something and be able to draw a conclusion based on treating all delegates as equal and respecting all the points raised. This is what we are having trouble doing here.

[06:21:25.0219] <littledan>
I think our unanimity model is getting a little frustrating here because folks feel like threats of blocks are being used in a way that makes other delegates feel like their point will be ignored (which would violate the original goal of our consensus-seeking in the first place). This equality/inclusion/process question is a bigger issue than the actual contents of the arguments (since anything will work technically).

[06:51:13.0055] <Anthony Bullard>
Luckily we could ensure that doesn't happen. Scala evolves with a very different process

[06:51:21.0683] <Anthony Bullard>
And values different things

[06:52:07.0796] <Anthony Bullard>
But as someone who wrote it in some capacity professionally for four years, the _ seems like a more natural  placeholder

[06:55:11.0014] <Anthony Bullard>
Compiled languages have it so much easier in many ways...

[07:00:19.0678] <msaboff>
> <@littledan:matrix.org> I think our unanimity model is getting a little frustrating here because folks feel like threats of blocks are being used in a way that makes other delegates feel like their point will be ignored (which would violate the original goal of our consensus-seeking in the first place). This equality/inclusion/process question is a bigger issue than the actual contents of the arguments (since anything will work technically).

I would support the change to a consensus model that doesn't require 100% agreement.  I don't like that one veto stops something.

[07:01:28.0344] <msaboff>
I think all other TC's use a true consensus model.

[07:10:41.0802] <Anthony Bullard>
It feels like there needs to be a very clear model of what kind of dissent and by how many parties constitutes a breakage of consensus. 

[07:14:26.0633] <bakkot>
re: async contexts, I am assuming that the behavior is, whenever a function is scheduled to be run on a subsequent microtask tick or turn of the event loop, the host is required to snapshot the current async context bits and then restore them before running the function?

[07:14:42.0457] <HE Shi-Jun>
If not one, how many? To be honest, I feel the problem is not 100% or 80%.

[07:14:43.0402] <bakkot>
i.e. this isn't just for literal `async` but also for stuff like `addEventListener`?

[07:14:48.0451] <bakkot>
 * i.e. this isn't just for literal `async` but also for stuff like `addEventListener`?

[07:14:57.0812] <yulia>
> <@msaboff:matrix.org> I would support the change to a consensus model that doesn't require 100% agreement.  I don't like that one veto stops something.

I agree. The failure mode we have is very unfortunate, and this case highlights it. I think this indicates a need for us to reconsider our process.

[07:15:08.0650] <bakkot>
though event listeners are kind of an odd case, because they run _sync_ if you dispatch an event manually, so I'm not totally clear what's supposed to happen there...

[07:15:19.0066] <Ben Newman (Apollo, @benjamn on GH)>
> <@bakkot:matrix.org> re: async contexts, I am assuming that the behavior is, whenever a function is scheduled to be run on a subsequent microtask tick or turn of the event loop, the host is required to snapshot the current async context bits and then restore them before running the function?

yes, there will be a responsibility for the host environment to make sure the event-scheduling APIs it introduces (like `setTimeout`) use something similar to `AsyncContext.wrap` for their callbacks

[07:15:23.0864] <shu>
bakkot: that's been my understanding as well

[07:15:38.0642] <shu>
i'm kind of confused by justin's example saying the propagation point is at the await pause

[07:15:43.0902] <ljharb>
there is a decent list of proposals that were blocked by a lone objector, including some of the folks discussing changing the process here, fwiw. would we revist all of those if there were a process change?

[07:15:49.0057] <shu>
it can't work if it's _just_ promise reactions

[07:16:04.0382] <Ben Newman (Apollo, @benjamn on GH)>
right, but those are the hardest to polyfill

[07:16:38.0221] <bakkot>
> <@shuyuguo:matrix.org> i'm kind of confused by justin's example saying the propagation point is at the await pause

the await pause is the point where you are scheduling a thing to be run on a subsequent tick, so that seems consistent?

[07:16:55.0580] <shu>
bakkot: that's the second one, i thought there was a handler scheduled earlier

[07:16:59.0731] <shu>
i might be mixing slides?

[07:17:22.0709] <shu>
anyway my point is just the host hooks i added for incumbent are only for JS callbacks

[07:17:31.0650] <shu>
this needs host event loop hook-ins as well

[07:17:49.0103] <ljharb>
 * there is a decent list of proposals that were blocked by a lone objector, including some of the folks discussing changing the process here, fwiw. would we revist all of those if there were a process change?

[07:17:50.0239] <shu>
 * anyway my point is just the host hooks i added for incumbent are only for JS callbacks

[07:18:17.0761] <bakkot>
indeed, as this slide is saying

[07:19:02.0060] <bakkot>
I will ask the question about event listener dispatch I guess

[07:19:20.0285] <Ben Newman (Apollo, @benjamn on GH)>
are folks here aware of the V8 methods `v8::Context::{Get,Set}ContinuationPreservedEmbedderData`?

[07:19:40.0756] <shu>
that's not quite enough

[07:19:52.0807] <shu>
we have that, yes, but you need more muxing

[07:19:53.0084] <Ben Newman (Apollo, @benjamn on GH)>
I know, but I'm trying to gauge context

[07:20:00.0726] <Ashley Claymore>
> <@bakkot:matrix.org> I will ask the question about event listener dispatch I guess

good to ask. Though presumably all APIs could be wrapped in userland anyway. So technically nothing also stopping hosts doing that?

[07:21:09.0059] <bakkot>
Ashley Claymore: the event listener question is less "how is this implemented" and more "what is the thing you want here" - I'm trying to get at the mental model, not the implementation

[07:21:38.0824] <littledan>
I disagree with Justin's example: i think web platform built-ins should do the `wrap` for you. It's more like if you have JS code which queues callbacks, that you want `wrap`.

[07:22:07.0935] <Ben Newman (Apollo, @benjamn on GH)>
that becomes a lot easier if/once `AsyncWrap` is standardized

[07:22:15.0978] <Chengzhong Wu>
> <@bakkot:matrix.org> Ashley Claymore: the event listener question is less "how is this implemented" and more "what is the thing you want here" - I'm trying to get at the mental model, not the implementation

https://github.com/legendecas/proposal-async-context/issues/19 many events are emitted by runtimes asynchronously

[07:22:43.0641] <littledan>
> <@benjamn:matrix.org> that becomes a lot easier if/once `AsyncWrap` is standardized

Yes, obviously the platform can't do anything if we don't add AsyncContext :) I was just nit-picking

[07:22:53.0651] <bakkot>
Chengzhong Wu: right, and others are emitted synchronously (e.g. by a manual `dispatchEvent`)

[07:24:00.0526] <bakkot>
so: if you register an event listener while within an async context, and then an event is dispatched async by the browser, presumably you want the listener to see the original context. but what if the event is dispatched sync, by `dispatchEvent`? sync dispatch is basically just a weird sort of function call, so it seems like it's the _current_ context, not the original one?

[07:24:10.0550] <bakkot>
not clear to me which context you want there

[07:25:09.0901] <littledan>
Unfortunately the answer might depend on the event

[07:25:10.0726] <Ben Newman (Apollo, @benjamn on GH)>
sync function calls should just inherit the current context, leading to the same behavior? (pls clarify)

[07:25:20.0235] <Ben Newman (Apollo, @benjamn on GH)>
 * sync function calls should just inherit the current context, leading to the same behavior? (pls clarify)

[07:25:25.0656] <littledan>
and there may be up to three answers for different task types

[07:25:40.0593] <littledan>
this would be part of the DOM/HTML/Node.js integration with AsyncContext

[07:25:42.0959] <Chengzhong Wu>
Yeah, that's the point of an alternative option `captureAsyncContext` of `addEventListener`

[07:25:47.0195] <bakkot>
> <@benjamn:matrix.org> sync function calls should just inherit the current context, leading to the same behavior? (pls clarify)

sorry: the same behavior as what?

[07:26:11.0798] <littledan>
> <@legendecas:matrix.org> Yeah, that's the point of an alternative option `captureAsyncContext` of `addEventListener`

well, there are separate questions about whether we want to give programmatic control, and what the default should be for each event.

[07:26:14.0579] <Ben Newman (Apollo, @benjamn on GH)>
the event should be dispatched with the context you bound/wrapped, whether that happens synchronously or async

[07:26:40.0499] <littledan>
> <@benjamn:matrix.org> the event should be dispatched with the context you bound/wrapped, whether that happens synchronously or async

this is definitely sometimes not true. It is really not the right answer for the unhandled rejection event, for example (we are discussing this in an issue)

[07:26:54.0325] <littledan>
I think we have to look event by event to figure this out

[07:27:01.0009] <Ben Newman (Apollo, @benjamn on GH)>
sorry I think we must be talking past each other or about slightly different things

[07:27:05.0231] <bakkot>
> <@benjamn:matrix.org> the event should be dispatched with the context you bound/wrapped, whether that happens synchronously or async

I guess I don't know what those words mean

[07:30:53.0095] <Andreu Botella>
calling a wrapped synchronous function would also let you change a context synchronously

[07:30:58.0936] <bakkot>
OK I think I understand now

[07:35:16.0497] <bakkot>
the fact that not all callbacks will necessarily automatically inherit the context in which the callback was added (depending on the API which adds the callback) is a little bit awkward, since the whole point of this is that you want to define a context which is available when your callback runs _even though your callback is getting registered to run by code you don't control_

[07:35:18.0689] <Michael Ficarra>
is there any precedent for an API like this?

[07:35:31.0823] <Michael Ficarra>
it's a stage 2 concern, but I'm very skeptical that this is the right representation

[07:35:47.0102] <Michael Ficarra>
 * it's a stage 2 concern, but I'm very skeptical that this is the right representation

[07:36:28.0076] <bakkot>
 * the fact that not all callbacks will necessarily automatically inherit the context in which the callback was added is a little bit awkward, since the whole point of this is that you want to define a context which is available when your callback runs _even though your callback is getting scheduled by code you don't control_

[07:37:03.0182] <bakkot>
 * the fact that not all callbacks will necessarily automatically inherit the context in which the callback was added (depending on the API which adds the callback) is a little bit awkward, since the whole point of this is that you want to define a context which is available when your callback runs _even though your callback is getting registered to run by code you don't control_

[07:38:42.0336] <Chengzhong Wu>
https://github.com/legendecas/proposal-async-context#prior-arts

[07:39:05.0436] <Chengzhong Wu>
These are javascript precedents. C# also implements similar APIs

[07:39:20.0894] <Ashley Claymore>
Reactivity libraries with dependency tracking like SolidJS also have similar though more domain specific APIs

[07:39:46.0443] <Chengzhong Wu>
https://learn.microsoft.com/en-us/dotnet/api/system.threading.asynclocal-1?view=net-7.0

[07:41:53.0843] <bakkot>
here's the link from Mark from the jitsi chat: https://github.com/endojs/endo/blob/markm-fluid-scopes/packages/eventual-send/src/async-contexts/6-async-context-transpose.js

[07:42:32.0541] <Michael Ficarra>
thanks for the links, Chengzhong Wu and Ashley Claymore 

[07:42:36.0538] <bakkot>
> <@bakkot:matrix.org> the fact that not all callbacks will necessarily automatically inherit the context in which the callback was added (depending on the API which adds the callback) is a little bit awkward, since the whole point of this is that you want to define a context which is available when your callback runs _even though your callback is getting registered to run by code you don't control_

thinking about this more, I guess the fix is, if you are passing a context to someone else you manually `.wrap` the function first

[07:42:36.0782] <littledan>
I have no idea how a JS engine would implement that super fancy context splitting that Shu was alluding to

[07:42:49.0966] <littledan>
this is a bit distinct from weak maps/references

[07:43:08.0420] <littledan>
always impressed by all JS engines' optimization ideas

[07:44:32.0185] <Ashley Claymore>
Someone might be able to get a published paper out of optimizing this :D

[07:45:23.0634] <Ashley Claymore>
"This one weird trick to get zero overhead async contexts" 

[07:46:24.0578] <shu>
v8 has zero overhead async contexts

[07:46:27.0742] <bakkot>
thinking about this even more, I am tempted to say that automatic wrapping happens _only_ when you can't do it yourself, i.e. only for syntactic `yield` and `await` (and friends, like `using await`, of course) - in every other case (including manual calls to `.then`) you can just wrap the continuation yourself, and not have to worry about whether the scheduler you're using happens to do wrapping for you

[07:46:30.0137] <shu>
the trick is that sometimes you can't get the stack!

[07:46:49.0486] <bakkot>
> <@bakkot:matrix.org> thinking about this more, I guess the fix is, if you are passing a context to someone else you manually `.wrap` the function first

 * thinking about this even more, I am tempted to say that automatic wrapping happens _only_ when you can't do it yourself, i.e. only for syntactic `yield` and `await` - in every other case (including manual calls to `.then`) you can just wrap the continuation yourself, and not have to worry about whether the scheduler you're using happens to do wrapping for you

[07:47:30.0249] <bakkot>
 * thinking about this even more, I am tempted to say that automatic wrapping happens _only_ when you can't do it yourself, i.e. only for syntactic `yield` and `await` (and friends, like `using await`, of course) - in every other case (including manual calls to `.then`) you can just wrap the continuation yourself, and not have to worry about whether the scheduler you're using happens to do wrapping for you

[07:47:41.0502] <Andreu Botella>
https://github.com/wintercg/proposal-common-minimum-api/blob/main/asynclocalstorage.md

[07:48:36.0527] <rbuckton>
> <@bakkot:matrix.org> thinking about this even more, I am tempted to say that automatic wrapping happens _only_ when you can't do it yourself, i.e. only for syntactic `yield` and `await` (and friends, like `using await`, of course) - in every other case (including manual calls to `.then`) you can just wrap the continuation yourself, and not have to worry about whether the scheduler you're using happens to do wrapping for you

I mostly agree, with the exception of `.then`. The biggest problem with context passing and Promises is that you would need to potentially wrap _every_ `.then` callback in the event one of them throws. This is far more arduous than wrapping the single entrypoint of an event handler.

[07:48:57.0168] <rbuckton>
If it works with `await`, it should work with `.then` on native `Promise` implementations.

[07:49:29.0337] <bakkot>
> <@rbuckton:matrix.org> I mostly agree, with the exception of `.then`. The biggest problem with context passing and Promises is that you would need to potentially wrap _every_ `.then` callback in the event one of them throws. This is far more arduous than wrapping the single entrypoint of an event handler.

only if you have a bunch of `.then` calls, which isn't so common, and even then if you factor out a helper to do the wrapping it seems not so arduous?

[07:49:42.0240] <bakkot>
but I am maybe open to it; something to talk about more

[07:50:11.0115] <rbuckton>
I disagree. If you are still using `.then` today when async/await exists, you are likely doing something far more complex than a single `.then` continuation.

[07:50:32.0286] <ljharb>
tons of people do that with fetch - `await fetch(â€¦).then(x => x.json())`

[07:50:37.0222] <ljharb>
it's pretty common

[07:50:37.0482] <rbuckton>
> <@bakkot:matrix.org> only if you have a bunch of `.then` calls, which isn't so common, and even then if you factor out a helper to do the wrapping it seems not so arduous?

 * I disagree. If you are still using `.then` today when async/await exists, you are likely doing something far more complex than a single `.then` continuation.

[07:51:01.0679] <bakkot>
I am OK with the people doing the `fetch` thing having to refactor their code or do a manual wrap

[07:51:08.0065] <bakkot>
but yes sometimes things get more complicated

[07:52:29.0183] <ljharb>
i haven't been following, but it seems pretty important to preserve the sugar-ness of await over promises.

[07:52:35.0577] <bakkot>
my main concern with automatically wrapping in `.then` is, the rule "you have to wrap any callback, whereas syntactic continuations get wrapped for you" is much easier to learn than "Promise.then automatically wraps, but [some other subset of schedulers] does not"

[07:53:05.0097] <bakkot>
> <@ljharb:matrix.org> i haven't been following, but it seems pretty important to preserve the sugar-ness of await over promises.

it's still preserved either way, the sugar just gets a little more complicated

[07:53:10.0890] <Ashley Claymore>
in the `.json` case, it will probably be fine that it doesn't keep the context, unless `.json` has been patched

[07:53:19.0802] <Michael Ficarra>
oohh I think I like that WinterCG proposed API better

[07:53:33.0066] <ljharb>
that's fine as long as the non-await usage isn't made more complicated - altho i guess it might be in order to use the new functionality without the sugar, as is the case with `class`

[07:53:45.0857] <littledan>
Can someone link to the YouTube playlist?

[07:53:48.0831] <littledan>
for the minutes

[07:54:00.0310] <ljharb>
 * that's fine as long as the non-await usage isn't made more complicated - altho i guess it might be in order to use the new functionality without the sugar, as is the case with `class`

[07:54:10.0109] <rbuckton>
It will also be difficult to explain why `await x; doSomethingWithContext()` would work, but `x.then(() => doSomethingWithContext())` wouldn't. Especially when many editors have refactorings for that, which now become potentially unsafe operations.

[07:55:11.0405] <bakkot>
> <@rbuckton:matrix.org> It will also be difficult to explain why `await x; doSomethingWithContext()` would work, but `x.then(() => doSomethingWithContext())` wouldn't. Especially when many editors have refactorings for that, which now become potentially unsafe operations.

that seems pretty straightforward to explain, for people using async contexts? "if you pass a callback, you need to wrap it" is not a hard rule to learn

[07:55:31.0221] <bakkot>
and if you're _not_ using an async context in your own function body you don't need to learn anything

[07:55:50.0239] <Ashley Claymore>
> <@littledan:matrix.org> Can someone link to the YouTube playlist?

done

[07:56:19.0742] <yulia>
I appreciate the investigation into performance from v8 and the security review from SES. From our side, we see use cases for this but need to do a more thorough review. No outstanding concerns from us right now

[07:56:26.0008] <shu>
what is mark talking about?

[07:56:33.0725] <yulia>
 * I appreciate the investigation into performance from v8 and the security review from SES. From our side, we see use cases for this but need to do a more thorough review. No outstanding concerns from us right now

[07:56:36.0841] <shu>
is this the AsyncContext spec draft or 262?

[07:58:06.0185] <bakkot>
the other side of this, it will be difficult to explain why `x.then(doSomethingWithContext)` would work, but `setTimeout(doSomethingWithContext)` would not. so that implies `setTimeout` needs to automatically wrap as well. and then now you have the same problem but with `s/setTimeout/setEventListener/`, and so on

[07:58:21.0707] <rbuckton>
This becomes one more thing to consider when wrapping code in an `AsyncContext`, especially if that code calls into a third-party package that might use `.then`.

[07:58:22.0120] <bakkot>
> <@rbuckton:matrix.org> It will also be difficult to explain why `await x; doSomethingWithContext()` would work, but `x.then(() => doSomethingWithContext())` wouldn't. Especially when many editors have refactorings for that, which now become potentially unsafe operations.

 * the other side of this, it will be difficult to explain why `x.then(doSomethingWithContext)` would work, but `setTimeout(doSomethingWithContext)` would not. so that implies `setTimeout` needs to automatically wrap as well. and then now you have the same problem but with `s/setTimeout/setEventListener/`, and so on

[07:58:50.0229] <Michael Ficarra>
since this is only stage 1, can we word the proposal (in its repo and the proposals list) in terms that don't lock us into any API decisions? something like "hooks for associating state with async call stack frames"?

[07:59:16.0195] <rbuckton>
> <@bakkot:matrix.org> the other side of this, it will be difficult to explain why `x.then(doSomethingWithContext)` would work, but `setTimeout(doSomethingWithContext)` would not. so that implies `setTimeout` needs to automatically wrap as well. and then now you have the same problem but with `s/setTimeout/setEventListener/`, and so on

IIRC, `setTimeout`, `setImmediate`, `process.nextTick` were discussed in the slides as other potential places to automatically flow state.

[07:59:40.0924] <bakkot>
> <@rbuckton:matrix.org> This becomes one more thing to consider when wrapping code in an `AsyncContext`, especially if that code calls into a third-party package that might use `.then`.

does it? if you pass a callback to the library you need to wrap it. but you need to _anyway_ because the third-party package might schedule the callback to get called in some way _other than_ `.then`, like event listener dispatch or something.

[07:59:46.0277] <Michael Ficarra>
Justin Ridgewell: ^

[08:00:10.0589] <bakkot>
i.e., if you're passing a callback to another library, you need to wrap it anyway, because you can't trust that the library is going to do the scheduling using one of the automatically-wrapping APIs

(or even schedule it at all - some libraries do deliberately invoke zalgo)

[08:00:20.0942] <bakkot>
so making the rule "you always need to wrap callbacks" is much simpler

[08:00:43.0698] <bakkot>
 * i.e., if you're passing a callback to another library, you need to wrap it anyway, because you can't trust that the library is going to do the scheduling using one of the automatically-wrapping APIs

(or even schedule it at all - some libraries do deliberately invoke zalgo)

[08:02:09.0733] <rbuckton>
> <@bakkot:matrix.org> so making the rule "you always need to wrap callbacks" is much simpler

I don't agree its simpler. Simpler is not having to wrap callbacks for things that are, categorically, async continuations. 

[08:02:58.0864] <bakkot>
if you are passing a callback to another library, you don't know that it's categorically an async continuation.

[08:03:14.0706] <bakkot>
it's just a callback. whether it's an async continuation depends on how _that library_ consumes the callback.

[08:03:47.0392] <bakkot>
so if you want to preserve the async context, you need to mark it as an async continuation, by wrapping it

[08:03:52.0125] <rbuckton>
Simpler is knowing that `asyncIterable[Symbol.asyncIterator]().map(element => { /*has outer context*/ })` will work, but since there's no explicit `await`, how would I know? 

[08:06:01.0357] <bakkot>
Regardless of whether `.then` automatically wraps, I could write a `Symbol.asyncIterator` implementation that does not in fact wrap the callback using the top-of-stack callback; that's up to the implementation of `Symbol.asyncIterator`.

[08:06:06.0294] <rbuckton>
I also think not supporting this in `.then` would make it far less useful to quite a few of the use cases this is intended to support.

[08:06:41.0481] <rbuckton>
I'm pointing at the async iterator helpers proposal's built-in capabilities here.

[08:07:34.0508] <bakkot>
Right, but my point is that the async iterable is something someone hands you, and you can't trust that it's only going to use the scheduling APIs you expect it to on the way to its ultimate call to `Promise.prototype.then`.

[08:08:26.0594] <bakkot>
And the whole point of this API is that you shouldn't have to coordinate with other people's code about how they choose to schedule your callback. If you could coordinate, you could just have the other code thread the state through.

[08:08:38.0418] <bakkot>
 * And the whole point of this API is that you shouldn't have to coordinate with other people's code about how they choose to schedule your callback. If you could coordinate, you could just have the other code thread the state through.

[08:09:29.0972] <littledan>
There was some fascinating investigation into a sort of "borrowing" model for ArrayBuffers in https://gist.github.com/domenic/a9343fa787ba54b4ba3a60882c49cc32#file-readme-md

[08:09:42.0720] <bakkot>
Which is why I think we should not encourage you to write patterns which rely on other people's code using particular APIs to do scheduling.

[08:10:08.0236] <bakkot>
i.e., we should not make some APIs do wrapping of callbacks automatically.

[08:10:39.0628] <littledan>
This is a different primitive; it couldn't be implemented in `transfer`. It'd be better IMO. Anyway, done is better than perfect, we already had Stage 3 on this current thread

[08:10:55.0337] <littledan>
> <@bakkot:matrix.org> i.e., we should not make some APIs do wrapping of callbacks automatically.

huh, have you considered arguing this to the Node.js APM ecosystem?

[08:11:25.0482] <bakkot>
littledan: nope

[08:11:43.0624] <littledan>
well... I think the implicit wrapping is just a sort of requirement to make any of this work in practice.

[08:11:51.0182] <Chengzhong Wu>
It's still stated as possible solution in the readme.

[08:12:03.0721] <bakkot>
implicit wrapping of syntactic `await`/`yield` continuations, absolutely

[08:12:18.0031] <bakkot>
implicit wrapping of explicit callbacks, I don't see it. you can wrap those yourself.

[08:13:31.0103] <littledan>
I think it'd be worth looking at existing use cases to see whether your suggestion would be viable...

[08:13:37.0094] <bakkot>
indeed you _have to_ wrap those yourself if the callback is going to thread through someone else's code, because you can't trust that they're going to do the scheduling using one of those automatically wrapping APIs 

[08:13:45.0320] <littledan>
I mean, cases, where this is already deployed

[08:14:00.0920] <Justin Ridgewell>
`yield` is something we'll need to discuss: https://github.com/legendecas/proposal-async-context/issues/18

[08:14:24.0784] <Justin Ridgewell>
For `await` and `Promise.p.then`, I think we have to do them automatically

[08:14:36.0192] <Justin Ridgewell>
`await` should just be a sytnax on top of promises

[08:14:56.0745] <Justin Ridgewell>
(And also if you force me to take away the fast path for `await promise` because I have to patch `.then`, I will riot)

[08:14:57.0310] <littledan>
I think bakkot's arguments would need to be made to host environments, since we just don't own much of what would need to make these decisions

[08:15:13.0085] <bakkot>
> <@jridgewell:matrix.org> (And also if you force me to take away the fast path for `await promise` because I have to patch `.then`, I will riot)

My point is that you don't have to patch `.then`

[08:15:21.0158] <Justin Ridgewell>
As the platform, I do

[08:15:25.0356] <bakkot>
... why?

[08:15:35.0399] <bakkot>
Assuming there's implicit wrapping in syntactic `await`s

[08:15:41.0328] <Justin Ridgewell>
The whole `console.log` use case in the slides

[08:15:53.0521] <littledan>
> <@bakkot:matrix.org> Assuming there's implicit wrapping in syntactic `await`s

sure, I agree, in theory we could fork the semantics here

[08:15:57.0209] <Justin Ridgewell>
I have to preserve across any promise usage, because anything else will break an important API for us

[08:16:00.0200] <littledan>
what I don't understand is the motivation

[08:16:11.0191] <littledan>
> <@jridgewell:matrix.org> I have to preserve across any promise usage, because anything else will break an important API for us

I think bakkot is saying, you could go patch that

[08:16:21.0772] <bakkot>
> <@jridgewell:matrix.org> I have to preserve across any promise usage, because anything else will break an important API for us

Can you give an example?

[08:16:22.0701] <Justin Ridgewell>
I think he's saying I don't

[08:16:50.0539] <littledan>
by "you" I mean, either the program or the Vercel environment

[08:17:02.0163] <Justin Ridgewell>
Vercel's platform

[08:17:05.0003] <Justin Ridgewell>
https://docs.google.com/presentation/d/1yw4d0ca6v2Z2Vmrnac9E9XJFlC872LDQ4GFR17QdRzk/edit#slide=id.g18e6eaa50e1_0_164

[08:17:16.0275] <Justin Ridgewell>
I have to preserve this start time across any user code  per request

[08:17:24.0840] <littledan>
Let's slow down; I think you're talking past each other

[08:17:34.0497] <Justin Ridgewell>
It doesn't matter if they use `setTimeout`, `p.then()`, or `await`, it's all got to work

[08:18:15.0123] <bakkot>
Justin Ridgewell: right, and that would still work?

[08:18:16.0522] <bakkot>
I am confused

[08:18:35.0447] <bakkot>
You need to wrap your handlers before you hand them to other people

[08:18:47.0504] <Justin Ridgewell>
How? If I force my users to wrap their `p.then()` callbacks, then it's not seamlessly working

[08:18:49.0410] <bakkot>
and as long as you do that, the handlers run in your context, regardless of how other people are scheduling them to run

[08:19:01.0501] <bakkot>
 * and as long as you do that, the handlers run in your context, regardless of how other people are scheduling them to run

[08:19:18.0570] <Justin Ridgewell>
`console.log` isn't a callback I pass around, it exists in the global scope

[08:19:57.0983] <Justin Ridgewell>
I can't wrap it per requests, because the global value will change per request

[08:20:16.0708] <Justin Ridgewell>
They don't store an access to the current value, they just access the property on the shared `console` object

[08:20:18.0187] <rbuckton>
> <@bakkot:matrix.org> You need to wrap your handlers before you hand them to other people

If you automatically associate context for .then, you are saving users a significant amount of complexity and boilerplate. If you are calling into questionable code, the presence of automatic context copying doesn't prevent you from manually wrapping the callback yourself. 

[08:21:03.0761] <Justin Ridgewell>
 * I can't wrap it per requests, because the global value would change per request

[08:21:12.0565] <bakkot>
Justin Ridgewell: oh, sorry, I missed that it is crucial to this example that you are patching global state and expecting that to be respected. I am not convinced that's something worth designing for.

[08:21:54.0539] <bakkot>
> <@rbuckton:matrix.org> If you automatically associate context for .then, you are saving users a significant amount of complexity and boilerplate. If you are calling into questionable code, the presence of automatic context copying doesn't prevent you from manually wrapping the callback yourself.

"calling into questionable code" meaning calling into... any code?

[08:22:55.0236] <bakkot>
if you aren't calling into other people's code, you don't need async contexts at all. and if you are, you need to wrap. I don't see how any work is saved here.

[08:23:40.0487] <Ashley Claymore>
Other use cases are distributed trace, where request handlers are, eventually, resolved by combing other requests.  That's not 'global state' like `console.log`, but still a global singleton to make a request

[08:24:12.0911] <Justin Ridgewell>
> I am not convinced that's something worth designing for.

This would be a significant change from the way Node works, and would be a huge burden

[08:24:22.0409] <Justin Ridgewell>
And it's also going to force me out of my promise fast path

[08:24:36.0257] <Justin Ridgewell>
My two proposals won't play nice with each other

[08:24:41.0909] <bakkot>
> <@jridgewell:matrix.org> I can't wrap it per requests, because the global value would change per request

hm, also, I'm confused about this example. assuming that `addEventListener` doesn't automatically wrap callbacks passed to it, how does this work if the dev code, instead of using `await`, had added an event listener which would do the `console.log` at some later time?

[08:24:56.0354] <Michael Ficarra>
I think `transferAndFixLength is better than `transferToFixedLength`

[08:24:58.0795] <Justin Ridgewell>
I think it has to work for promises

[08:25:08.0934] <Michael Ficarra>
 * I think `transferAndFixLength` is better than `transferToFixedLength`

[08:25:33.0523] <ljharb>
> <@michaelficarra:matrix.org> I think `transferAndFixLength` is better than `transferToFixedLength`

"fix" as a verb there is pretty overloaded

[08:25:38.0143] <littledan>
> <@bakkot:matrix.org> "calling into questionable code" meaning calling into... any code?

I don't believe people should or do compose code in a perfectly defensive way all the time

[08:25:57.0670] <Justin Ridgewell>
Devs cannot escape our context on our platform, so any future point in which they would trigger an event listener would already have restored the request context

[08:26:08.0102] <Michael Ficarra>
the same overload as `Fixed`, no?

[08:26:13.0068] <bakkot>
littledan: while true, I also believe that a refactoring from scheduling with promises to scheduling with some other mechanism should be transparent to consumers of your code.

[08:26:25.0086] <littledan>
yeah, Bloomberg's use case also has requirements that we strictly not allow "escape".

[08:26:28.0963] <bakkot>
that is, we should not design the language such that such a refactoring is by-default not transparent.

[08:26:50.0157] <littledan>
In APMs OTOH, they would simply not work if everyone had to update all of their code... they are just based around implicit wrapping

[08:27:03.0792] <littledan>
like, this was proven out historically, leading to its development

[08:27:39.0924] <ryzokuken>
APMs have used decorators in the past to get around that though

[08:28:07.0995] <Michael Ficarra>
shu: please try to give a little more time between a name change and a stage 3 advancement next time; we may have been able to come up with a better name if we had more time

[08:28:08.0511] <ryzokuken>
well, although that'd still need changes

[08:28:09.0495] <bakkot>
> <@jridgewell:matrix.org> Devs cannot escape our context on our platform, so any future point in which they would trigger an event listener would already have restored the request context

If you hand your callback to someone else, and there is literally no way they could schedule the callback to run with a different context than the one which existed when you handed the callback to them, I am also fine with that 

[08:28:36.0456] <littledan>
> <@michaelficarra:matrix.org> shu: please try to give a little more time between a name change and a stage 3 advancement next time; we may have been able to come up with a better name if we had more time

Why didn't you put yourself on the queue?

[08:28:40.0214] <bakkot>
but that does lock us into, _every_ way of scheduling a task in the host must automatically wrap the callback passed to that context

[08:28:40.0881] <shu>
Michael Ficarra: technically there wasn't a name change

[08:28:46.0499] <Michael Ficarra>
littledan: because it didn't matter enough

[08:28:52.0656] <bakkot>
eventListener, unhandled promise handler, everything

[08:29:12.0449] <Chengzhong Wu>
you can AsyncContext.wrap the callback in such case

[08:29:21.0779] <bakkot>
Chengzhong Wu: well, that's my argument

[08:29:23.0989] <Chengzhong Wu>
> <@bakkot:matrix.org> If you hand your callback to someone else, and there is literally no way they could schedule the callback to run with a different context than the one which existed when you handed the callback to them, I am also fine with that

 * you can AsyncContext.wrap the callback in such case

[08:29:39.0749] <bakkot>
if some ways of scheduling require you to wrap, they all should

[08:29:49.0050] <bakkot>
but if no ways of scheduling require you to wrap, that's fine too

[08:30:02.0850] <Justin Ridgewell>
Promises are a way for our users to later schedule a task, we do not control where they create promises or where the chain `.then()`

[08:30:03.0468] <shu>
Michael Ficarra: `transfer` was always named transfer, but because of the "preserve resizability" semantics change, to get the original "fixed length" behavior, i added a new method

[08:30:04.0611] <bakkot>
I am just not enthusiastic about _some_ callback-taking scheduling APIs wrapping

