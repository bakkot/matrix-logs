2023-10-01
[17:08:53.0045] <Jack Works>
if a proxy returns configurable: false for property "x", why future calls return true throws an error? (I know it is maintaining invariant) it can also silently change configurable to false IMO

[17:45:12.0405] <Jack Works>
https://github.com/Jack-Works/proposal-module-sync-assert

[21:05:09.0877] <ljharb>
Why would it be better to silently fail to recognize a bug?

[21:05:41.0726] <ljharb>
arguably it could have just not called the trap once the value wouldn’t change, but here we are

[02:58:19.0222] <Ashley Claymore>
My understanding is that Proxies don't have a memory. The invariants that involve time are enforced by comparing the result to the same call made to the target object. So the invariants would be broken if the target object has broken the invariant, but hosts are not supposed to create objects that break the invariants  

[15:35:51.0123] <Mathieu Hofman>
> <@littledan:matrix.org> What if we made a function like Error.raise instead of adding syntax?

rbuckton: I'd like to bring to your attention a TypeScript limitation that seriously impedes the usage of any function call that unconditionally throws like this. I suspect it would also be a problem that needs to be solved for throw expressions in general: https://github.com/microsoft/TypeScript/issues/50739


2023-10-02
[00:55:04.0548] <Ashley Claymore>
> <@mhofman:matrix.org> rbuckton: I'd like to bring to your attention a TypeScript limitation that seriously impedes the usage of any function call that unconditionally throws like this. I suspect it would also be a problem that needs to be solved for throw expressions in general: https://github.com/microsoft/TypeScript/issues/50739

Maybe it might be easier to solve for throw expressions, as the TypeScript AST control-flow-node can be determined without any binding lookup or type-information, the throw is right there in the syntax.  


2023-10-03
[12:21:59.0410] <bakkot>
littledan etc: is there a types-as-comments chat room or call or something I could join? I have a followup thesis from the discussion earlier:

- Making almost all of TS runnable is a bad goal.
  - It's too big to reasonably specify.
  - TS adds new keywords more frequently than our process would allow, and that's good. The constraints on evolving the grammar of TS are genuinely different from the constraints on evolving the grammar of JS.
  - And given the existence of things like Svelte, JSX, `--experimentalDecorators`, etc, you're never going to reach a point where almost all TS projects can stop using transpilers anyway, so there's nothing particularly special about "almost all of TS".
- Making it more practical to use type checkers without transpilation is a good goal. The current jsdoc support in TS is bad enough that people will put up with the cost of transpilation rather than use it except in extreme cases (e.g. Svelte), and that could be improved.
  - But that only helps people in specific circumstances (i.e., those who otherwise would not have a transpilation step).
  - Flow's comment syntax actually gets used, which means that there's room for something between "only jsdoc-style comments" and "all of TS".
  - By far the largest painpoint with Flow's comment syntax is inline type annotations on variables and parameters. Multiline comment syntax is verbose and awkward to type for something used so frequently.
- Therefore, the proposal ought to drop the "un-fork JS" goal and instead set a goal of 80-20'ing the types-without-transpilation experience using a more minimal grammar, omitting (e.g.) any keywords other than maybe `type`. There's a handful of issues on the repo already proposing something like this. Those users who would benefit can opt in without much more pain, and those who would not can continue to benefit from TypeScript's full syntax being able to evolve outside our process.
  - This doesn't need to be a subset of the TS grammar, particularly if automated translation from full-TS to this subset is easy (which it ought to be).
  - This should be general enough to allow ~any type system to opt in to using only this grammar, but shouldn't aim to have parity with the grammar of any existing type systems. It's OK if this grammar is somewhat more awkward than those available when using a transpiler.
  - Concretely, this might look like `:: [nlth] (.? IdentifierName [nlth])* MatchedBraces` being allowed in a few places, and maybe a new top-level `type` declaration form. Possibly with one or two more forms for e.g. imports, but only a couple more at most.
    - This solves some but not all of the ambiguities in the current grammar; the remaining ones (e.g. FunctionBody braces) would need fixing either way.
    - Yes, this means a lot of nontrivial types will need parentheses. That is a significant cost. I think the cost is worth it.

[13:54:44.0496] <littledan>
Yeah, there is a Matrix room, I will try to get it more open to TC39 in general (I don’t have permission to add you). Thanks for the thoughtful comment, interesting stuff to consider. May be good to file an issue for too.

[14:14:47.0865] <TabAtkins>
Strong agree with bakkot's thesis, as someone who has no idea how TS works but is very familiar with Python's types-as-comments.


2023-10-04
[20:08:05.0456] <littledan>
I think we would be better off with O(5) constructs, with the aim of not enabling avoiding all type /* */comment formats, rather than literally just parameters and return values. It sounds like you are open to this possibility, right?

But I am also not yet sure if the whole thing should be reduced as much as bakkot suggests—we should talk more about overall motivation/usage modes in the next presentation.

[20:52:55.0473] <bakkot>
I'm open to that possibility. Also to be clear I didn't mean to suggest this would only cover parameters and return values - for example, `let x = y ::as string;` would be legal under my suggested grammar (assuming the `::` comment form is allowed in the appropriate places). And I think that's better than having a separate `as` production even though that means you can't use TypeScript casts as they're written today.

[21:40:51.0957] <Jack Works>
/// interface X {
///     either(x: this): this
/// }

/// <T extends X>(i: T, j: T): T
function f(i, j) {
    let next = i.either(j) /// T
    return next
}

[23:45:59.0349] <littledan>
One issue with magic comments is that it’s unclear how tools should handle errors—was that comment just a comment?

[23:47:09.0017] <littledan>
I remember having a thought about `::` being problematic grammatically, but I can’t remember what the problem was…

[23:48:14.0781] <littledan>
The main reason I am a little hesitant about that particular grammar is that some things will want to take an argument and some won’t. This is the kind of thing to work out case-by-case when developing encodings of type systems into JS grammar

[00:30:39.0150] <bakkot>
Uhhh yeah I guess it would be something like `:: [nlth] (.? IdentifierName [nlth])+ MatchedBraces?` or `:: MatchedBraces`

[00:30:48.0966] <bakkot>
 * Uhhh yeah I guess it would be something like `:: [nlth] (.? IdentifierName [nlth])+ MatchedBraces?` plus also `:: MatchedBraces`

[00:31:10.0389] <bakkot>
And yes this still has the `FunctionBody` ambiguity

[00:37:07.0851] <littledan>
yeah this seems like it'd have ambiguities about when it ends but I understand what you're getting at.

[00:37:14.0776] <littledan>
Anyway I'm not sure we should give up on the "easy transition from existing type systems" goal because, if migration to a minimal grammar is difficult or the grammar is seen as ugly, then the ecosystem may be split.


2023-10-10
[04:15:44.0739] <eemeli>
As I'm trying to figure out how to set up incubator calls, it looks like the initial steps aren't really clear atm. To start, is it on me as an interested party to file a new "Chartered Proposals" issue in the incubator-agendas repo, or should I expect someone else like shu to be doing so?

[07:25:12.0414] <shu>
eemeli: that's a link to what's on the incubator call schedule between meetings

[07:25:25.0727] <shu>
i haven't updated that in a while -- it should be safe enough to ignore

[07:59:43.0362] <eemeli>
Ok, so the first step for me is presumably then to put together a Doodle and submit a reflector issue, yes?

[08:02:38.0489] <shu>
yep, the important parts are 1) get a voting sheet out to find a time and 2) set an agenda for discussion items -- IME you can't handle more than 1 or 2 in depth

[08:02:59.0328] <shu>
"can't" meaning no time to in an hour

[09:35:47.0748] <eemeli>
Is there a Google Docs template somewhere for the notes doc for an incubator call, or should I just copy and trim the contents of a previous meeting's notes?

[09:40:47.0373] <shu>
i always just copy previous docs and delete the actual contents

[09:40:51.0861] <shu>
in fact i do that for everything

[09:41:00.0384] <shu>
fork is life

[09:50:35.0761] <eemeli>
Also a good answer if your run out of spoons.

[10:42:42.0617] <shu>
i gotta say we always run out of spoons and forks but never knives

[10:42:49.0397] <shu>
knives are not very useful utensils

[10:43:04.0866] <shu>
in any case i don't even want to cut my food just in time, i want my food pre-cut

[10:52:50.0634] <eemeli>
Chopsticks are quite often the safer option.

But I think I finally did get my incubator call PR & issue filed relatively smoothly. This could definitely be streamlined a bit, as the cross-references meant that I needed to predict not only which incubator-agendas PR number I'd get, but also the reflector issue number.

[10:55:50.0608] <eemeli>
Here, have a reflector link that leads on to the proposed agenda and the doodle poll: https://github.com/tc39/Reflector/issues/508

[10:58:10.0686] <shu>
agreed, could certainly use streamlining


2023-10-11
[02:35:22.0309] <Michael Ficarra>
shu: an example of a spec-level vulnerability (as opposed to a vulnerability in any particular implementation): https://nvd.nist.gov/vuln/detail/CVE-2023-44487

[02:37:24.0846] <Michael Ficarra>
> Because the attack abuses an underlying weakness in the HTTP/2 protocol, we believe any vendor that has implemented HTTP/2 will be subject to the attack. This included every modern web server.

[07:37:58.0329] <shu>
ah okay, i can see the case for protocols having such vulnerabilities


2023-10-12
[21:45:20.0647] <bakkot>
littledan: another occasion to note that the current "register as a contributor" process is absurd and I think ought to be revised https://github.com/tc39/ecma262/pull/3192#issuecomment-1758898371

[21:45:48.0067] <bakkot>
ecma262 editors should have discretion to mark a contribution as not substantial and merge without getting the CLA signed

[06:47:59.0484] <Michael Ficarra>
Please remember to review and fix up your notes from the last meeting: https://github.com/tc39/Reflector/issues/506. Publish date is *tomorrow*.

[07:00:04.0336] <littledan>
> <@bakkot:matrix.org> littledan: another occasion to note that the current "register as a contributor" process is absurd and I think ought to be revised https://github.com/tc39/ecma262/pull/3192#issuecomment-1758898371

I don't really see how that thread is evidence of anything being absurd; the contributor registered immediately without complaint.

[07:00:23.0928] <littledan>
> <@bakkot:matrix.org> ecma262 editors should have discretion to mark a contribution as not substantial and merge without getting the CLA signed

This could be OK; could you propose concrete guidelines for which things are trivial, so I can ask lawyers to review it?

[12:03:50.0987] <Michael Ficarra>
non-technical contributions seem like a very conservative place to start drawing that line

[12:21:13.0560] <littledan>
yeah, so if you write some policy down, I'll go talk to Bloomberg's lawyers about it. I think "nontechnical" isn't really concrete enough, though (clearly there are nontechnical things in the world which copyright applies to).

[12:36:26.0723] <Andreu Botella>
I wonder if "non-technical and not subject to copyright" (because the contribution is small/trivial enough) might be an acceptable policy as far as lawyers are concerned

[12:37:12.0935] <Andreu Botella>
though the lawyers won't be the ones judging whether the contribution is subject to copyrihgt

[13:16:23.0782] <bakkot>
ljharb: can you put a conclusion for the "export default from" item in the notes?

[13:16:43.0523] <ljharb>
yes, i'll do that when i review them later today

[13:16:55.0655] <bakkot>
great

[13:17:27.0810] <ljharb>
> <@littledan:matrix.org> yeah, so if you write some policy down, I'll go talk to Bloomberg's lawyers about it. I think "nontechnical" isn't really concrete enough, though (clearly there are nontechnical things in the world which copyright applies to).

wouldn't ecma's lawyers be the ones that need to approve it?


2023-10-13
[20:15:04.0783] <littledan>
> <@ljharb:matrix.org> wouldn't ecma's lawyers be the ones that need to approve it?

Ecma tends to call out to several company’s lawyers when these things come up. I would ask Bloomberg‘s first before bothering others.

[20:15:49.0639] <littledan>
Ecma can also contact their lawyer on retainer for advice but these IPR questions are not handled by only that

[10:46:22.0936] <bakkot>
where did all of these people come from all of a sudden https://github.com/tc39/proposal-array-grouping/issues/62

[10:46:29.0369] <bakkot>
did the proposal get linked somewhere

[10:53:13.0090] <shu>
"
I tried explaining the issue to my small (kindergarten~) son, and to summarize him after explaining it a few times at different levels of complexity:
"It feels like a cute little penguin swimming against the flow of other array functions, breaking the chain of function chaining possibilities and hiding its cuteness from discoverability"
"

[10:53:14.0608] <shu>
is this satire

