2021-11-08
[12:19:34.0348] <rbuckton>
Could someone with permissions to tc39-transfer finish the transfer process for the proposals that advanced to Stage 1 last meeting?

[13:03:36.0121] <ljharb>
(that'd be the chairs)

[15:30:52.0344] <shu>
Aki: bterlson: Rob Palmer: ^ (would also appreciate finalizing transfer of structs, which i forgot to transfer to tc39-transfers after last meeting)

[15:44:48.0796] <jschoi>
Also when possible, I would like a chair to turn on GitHub Actions in proposals-bigint-math and proposals-array-fromasync and switch their repository homepages to their spec pages on tc39.github.com. 


2021-11-09
[21:01:38.0133] <ljharb>
github actions should be automatically on for everything, is it not?

[21:01:41.0254] <ljharb>
 * github actions should be automatically on for everything, is it not?

[11:40:20.0464] <bakkot>
shu: what's `Atomics.waitAsync` waiting on? just a second implementation? 

[11:40:55.0600] <shu>
correct

[11:41:13.0789] <shu>
it is actually pretty tricky to implement, and the use case is fairly niche, so probably not prioritized

[11:41:23.0079] <shu>
you have a use case?

[11:45:55.0297] <bakkot>
not really

[11:46:02.0472] <bakkot>
I was just going to publish a pure-JS `setTimeout` polyfill

[11:48:38.0474] <shu>
ah


2021-11-10
[11:29:06.0083] <jschoi>
What was the deadline for October-plenary notes edits, again? I was planning to edit them over the weekend.

[11:55:35.0313] <bakkot>
jschoi: "They will be published on November 11th" per the reflector

[11:55:50.0143] <bakkot>
though I imagine you could ask to hold off a couple of days to get your edits in


2021-11-11
[16:03:46.0024] <Rob Palmer>
I'm happy to delay publishing until Monday. 

[16:08:08.0055] <jschoi>
> <@ljharb:matrix.org> github actions should be automatically on for everything, is it not?

GitHub Actions are not active for https://github.com/tc39/proposal-bigint-math/. (I was wrong about proposal-array-from-async, though. Actions are active on that one‚Äîalthough, for some reason, https://tc39.github.io/proposal-array-from-async/ doesn‚Äôt work.)

[16:14:26.0880] <bakkot>
jschoi: presumably you don't have github pages on, which is a distinct thing from having github actions on

[16:16:13.0555] <jschoi>
> <@bakkot:matrix.org> jschoi: presumably you don't have github pages on, which is a distinct thing from having github actions on

Ah yeah, that‚Äôs right. That‚Äôs under repository settings, right? 

So I have two TC39 repositories in which the GitHub Pages option needs to be turned on, as well as editing the repository home page. One repository also needs to have Actions turned on.

[16:17:18.0623] <ljharb>
If you‚Äôre an admin on those repos you can do it yourself; if not, then that‚Äôs the ask id make of the chairs :-)

[16:18:01.0634] <jschoi>
Yes, I would like to be made admin of those repositories by a chair. I‚Äôve pinged before but they‚Äôre busy, and it‚Äôs not urgent anyway. üòÑ

[16:18:14.0745] <jschoi>
* Yes, I would like to be made admin of those repositories by a chair. I‚Äôve pinged before but they‚Äôre busy, and it‚Äôs not urgent anyway. üòÑ

[16:22:39.0298] <ljharb>
unfortunately when you transfer your own repo to an org, you lose admin rights on it by default; i usually try to restore those rights while it's in tc39-transfer but sometimes the chairs transfer the repos before i get to it


2021-11-15
[09:13:21.0177] <jschoi>
@Rob Palmer: Sorry, I‚Äôm working on the previous plenary notes right now. I‚Äôll try to have them done within the next five hours.

[09:13:55.0299] <jschoi>
 * @Rob Palmer: Sorry, I‚Äôm working on the previous plenary notes right now. I‚Äôll try to have them done within the next five hours.

[09:25:54.0666] <Rob Palmer>
Alright. Please do finish soon! 

[11:08:07.0964] <Rob Palmer>
Someone has created a website that scrapes the tc39/proposals repo and then provides a UI to see various summaries/indexes.

https://www.proposals.es/

It somewhat duplicates the official website, but has extra data, e.g. proposals are sorted by star count. 

[11:14:52.0104] <Hemanth H.M>
There was https://github.com/bevacqua/prop-tc39 which was active for few years, also there is https://jsfeatures.in [shameless plug] we should request the author of proposals.es to contribute to the official site rather? 

[11:15:39.0218] <Hemanth H.M>
 * There was https://github.com/bevacqua/prop-tc39 which was active for few years, also there is https://jsfeatures.in [shameless plug, old needs update] we should request the author of proposals.es to contribute to the official site rather? 

[11:18:53.0389] <bakkot>
official site definitely should not include star counts

[11:18:55.0773] <bakkot>
star counts are poison

[12:14:37.0335] <shu>
should include randomized star counts on every load

[12:14:39.0687] <shu>
keep'em guessing

[12:15:36.0584] <shu>
also include some other kind of emoji counts, like ü•¶ or ü™Å

[12:19:49.0640] <Rob Palmer>
Putting aside the broccoli for a moment, I think there was a related plenary discussion on maintaining authoritative structured data to enable more folk to create live websites for viewing proposal summaries.

https://github.com/tc39/notes/blob/master/meetings/2020-11/nov-19.md#dealing-with-tc39-data

[12:23:43.0796] <Rob Palmer>
We can ask Yulia the status of this, but I read it as general agreement with the principle, modulo Leo's test262 experience with trying this previously.  My guess is that, like many things in TC39, we just need some energetic volunteer willing to lead an initiative to make it happen.

[12:24:03.0211] <shu>
oh Rob Palmer while you're here, do you have access to finish the transfer for https://github.com/tc39-transfer/proposal-structs?

[12:25:46.0494] <Rob Palmer>
that is now transferred, Shu

[12:27:55.0883] <shu>
much appreciated, thank you


2021-11-17
[07:45:32.0655] <shu>
jschoi: how do you do your corpus analyses? i'm interested in gauging the popularity of some Array methods

[07:46:50.0227] <jschoi>
shu: Take a look at the ‚ÄúWhat methodology was used‚Äù disclosure element at the end of this section: https://github.com/tc39/proposal-bind-this#bind-and-call-are-very-common.

[07:47:40.0562] <shu>
ah you did mention Gzmenid

[07:47:42.0385] <shu>
neat, thank you!

[07:47:55.0416] <jschoi>
Basically, download Gzemnid‚Äôs slim.code.js.txt.lz4 and search.topcode.sh.
Then run:
```bash
./search.topcode.sh '\.bind\b' | awk 'END { print NR }‚Äô
```
‚Ä¶or whatever.

[08:52:25.0017] <Ashley Claymore>
Not as impressive as what jschoi has done but we also did a bit of corpus research for change-array-by-copy: https://github.com/tc39/proposal-change-array-by-copy/issues/37

[08:53:35.0018] <Ashley Claymore>
regex matching, so .slice could be string or array


2021-11-18
[11:35:41.0988] <Richard Gibson>
why is `WeakRef.prototype.constructor` normative optional? https://tc39.es/ecma262/#sec-weak-ref.prototype.constructor

[11:36:14.0396] <shu>
SES IIRC?

[11:43:19.0397] <Richard Gibson>
how so? I could see WeakRef itself being normative optional, but what is the point of shipping a WeakRef whose prototype does not have a `constructor` property?

[11:45:12.0978] <Richard Gibson>
and I don't see discussion at https://github.com/tc39/ecma262/pull/2089 other than "we're adding inline normative optional spec text" from yulia in the PR description without further explanation

[11:49:30.0455] <Mathieu Hofman>
The motivation is that it can be removed so you wouldn't be able to create a new WeakRef from an instance. Aka sharing an instance to observe the liveness of one object doesn't allow you start observing the liveness of any object.

[11:51:27.0778] <Richard Gibson>
but why would an implementation ship that rather than requiring code to delete the property?

[11:52:51.0713] <Richard Gibson>
it seems bizarrely special-cased from an implementation perspective

[11:53:21.0107] <ljharb>
same reason an implementation would "ship" without any other normative-optional thing

[11:53:26.0402] <Mathieu Hofman>
The idea is that an environment without access to the contructor through the prototype would still be a compliant JavaScript environment. Aka not introduce code that expects it to be there.

[11:53:40.0139] <ljharb>
code that requires normative-optional things to exist isn't portable; it's reasonable for an implementation to only support portable code (where "implementation" could include "any environment that's been prepared with first-run JS code")

[11:54:01.0592] <ljharb>
 * code that requires normative-optional things to exist isn't portable; it's reasonable for an implementation to only support portable code (where "implementation" could include "any environment that's been prepared with first-run JS code")

[11:54:30.0032] <Mathieu Hofman>
Richard Gibson  Is there any reason you would want it to always be there?

[11:54:55.0724] <Mathieu Hofman>
besides the "it's different

[11:55:28.0028] <Richard Gibson>
to avoid the cognitive burden of an exception to the rule that every built-in constructor's prototype has a `constructor` property referencing it

[11:56:52.0288] <Richard Gibson>
`delete builtInConstructor.prototype.constructor` is always allowed, but only in this one case is a conforming implementation allowed to ship without the property present at all

[11:58:37.0884] <Mathieu Hofman>
Do you have a specific use case, or is it conceptual only ?

[11:58:51.0417] <Richard Gibson>
the latter

[11:59:51.0331] <Richard Gibson>
it's not even like it allows SES or similar to avoid the `delete WeakRef.prototype.constructor` code, because conforming implementations can and do ship with it

[12:01:04.0796] <Mathieu Hofman>
No but it means the environment SES/lockdown creates is still a fully compliant JavaScript environment

[12:01:27.0624] <Richard Gibson>
no, that isn't true because of the other mutations

[12:01:42.0865] <Richard Gibson>
Function.prototype, Date.now, Math.random, etc.

[12:03:04.0116] <Mathieu Hofman>
Ok, fair, it's one less difference, and we're working on mitigating the others. E.g. all those you mention are there, but they throw. Doing that on `Function.prototype` is ok because SES has to virtualize `Function` anyway.

[12:04:18.0003] <Richard Gibson>
an implementation that shipped with a https://tc39.es/ecma262/#sec-math.random that throws exceptions would not be conforming with https://tc39.es/ecma262/#sec-math.random

[12:04:36.0343] <Mathieu Hofman>
Having the spec say "this may not be there" encourages programs to not rely on it being there.

[12:06:53.0694] <Richard Gibson>
SES lockdown intentionally restricts the environment in ways that violate the spec; why should there be a special exception for WeakRef.prototype.constructor?

[12:07:09.0632] <Mathieu Hofman>
Right, I think we're trying to compare something that was there from the beginning, and something that is introduced more recently. E.g. for arrays, most original methods seem to skip over holes, but all newer ones don't. It's a difference that avoids repeating previous mistakes in light of new knowledge

[12:08:44.0612] <Richard Gibson>
if that were the case, then shipping it should be considered a violation. This allows for differences that are rightfully discouraged elsewhere

[12:10:33.0206] <Richard Gibson>
we don't permit implementations to pass holes to Array.prototype.flatMap callbacks

[12:12:35.0036] <Richard Gibson>
so I guess I have my answer about why the annotation is there, but the answer doesn't make sense

[12:15:32.0549] <Mathieu Hofman>
There is no risk in allowing the WeakRef constructor in a non-SES environment, there is in SES. And SES strives to provide a fully compatible environment. So only SES needs to remove the constructor. I assume removing it always was not an option (I wasn't around when this was decided)

[12:17:24.0028] <Richard Gibson>
in what sense is the SES environment "fully compatible" when it intentionally blocks execution of unsafe code that a conforming environment is required to support?

[12:19:45.0261] <Mathieu Hofman>
"strives to" is the operating keyword here. The idea is to stop introducing further things that SES would have to willfully break, while working on remediating the ones that currently do (the override mistake is still around)

[12:23:13.0506] <Richard Gibson>
doesn't SES also freeze all builtins, including new ones like WeakRef?

[12:25:59.0221] <Richard Gibson>
it is important for ES conformance that they be mutable, and important for SES that they not be. There's an explicit divergence there that seems to me like it has exactly the same character as deleting and overriding properties in a way that is allowed by the spec but results in an environment that does not itself conform with the necessary initial state

[12:35:42.0355] <Richard Gibson>
and worse, anyone who cares about restricting access to liveness information must control the global `WeakRef` anyway, even if the host implementation decided not to include `WeakRef.prototype.constructor`. There's just doesn't seem to be any benefit in shipping without it or in considering such an environment to be a valid initial state

[12:37:20.0540] <Mathieu Hofman>
I would like to see code which assumes `WeakRef` contructor to be present on the global

[12:48:19.0234] <shu>
i just don't see what value SES gets from claiming compliance

[12:48:31.0445] <shu>
if it doesn't care about interop, my position is it doesn't need to care about compliance either

[12:48:36.0270] <shu>
it can still strive to be mostly interoperable

[13:11:15.0082] <jschoi>
Does SES claim to be ‚Äúcompliant‚Äù with ES? Last I checked it merely claimed to be a syntactic subset with ‚Äúmostly‚Äù identical semantics. 

[13:12:05.0289] <shu>
if it doesn't then i am further confused why mark cares about normative optionality of things 

[13:12:20.0652] <shu>
 * if it doesn't then i am further confused why mark cares about normative optionality of things 

[13:13:01.0042] <jschoi>
Probably wanting to maximize the ‚Äúmostly‚Äù part in ‚Äúmostly identical semantics‚Äù, I guess, haha. 

[13:13:26.0788] <shu>
he can perfectly well claim that without the spec having any special allowances

[13:13:37.0023] <shu>
just say they're willful violations, but very few and sensible for this use case

[13:23:39.0629] <jschoi>
* Does SES claim to be ‚Äúcompliant‚Äù with ES? Last I checked it merely claimed to be a syntactic subset with ‚Äúmostly‚Äù identical semantics. Ditto for Jessie versus SES. 

[13:32:41.0830] <Michael Ficarra>
Can someone in TG2 please add a String titlecase method so I can stop having conversations like this? https://twitter.com/smooshMap/status/1461445458253860864

[13:33:15.0899] <Michael Ficarra>
Richard Gibson: given you worked on Intl.Segmenter, you might be interested ^

[13:44:43.0158] <jschoi>
I saw some people asking for a camel-casing method too on Discourse, for what it‚Äôs worth. 

[13:51:11.0872] <Michael Ficarra>
jschoi: if we had titlecasing, camel casing could be implemented easily with Intl.Segmenter

[13:51:31.0460] <Michael Ficarra>
but we just can't implement titlecasing without UNIDATA

[13:57:17.0287] <Mathieu Hofman>
Richard Gibson: it sounds like we should discuss how SES requirements and JavaScript compliance interact, and if anything should be formalized. Maybe a good topic for a future SES meeting?

[14:05:21.0626] <bakkot>
Michael Ficarra: you should +1 https://github.com/tc39/ecma402/issues/294 if you want that

[14:11:01.0090] <jschoi>
> <@michaelficarra:matrix.org> but we just can't implement titlecasing without UNIDATA

Titlecasing is definitely complex, but I suspect many developers just want a capitalizeWords or something, heh.

[14:48:08.0907] <shu>
why not toTitleCaseASCII

[14:51:32.0220] <Michael Ficarra>
jschoi: I think what Unicode calls title case, you call capitalise words

[14:51:58.0207] <Michael Ficarra>
which is still quite hard to do

[14:55:52.0959] <jschoi>
Well, in ¬ß¬†5.18 (https://www.unicode.org/versions/Unicode14.0.0/ch05.pdf#page=43), the Standard refers to ‚Äútitlecasing‚Äù as a process in which not all words are capitalized, e.g., ‚ÄúThe Merry Wives of Windsor‚Äù in English and ‚ÄúLes joyeuses comm√®res de Windsor‚Äù in French.

[14:58:47.0683] <jschoi>
> <@michaelficarra:matrix.org> jschoi: I think what Unicode calls title case, you call capitalise words

 * Well, in ¬ß¬†5.18 (https://www.unicode.org/versions/Unicode14.0.0/ch05.pdf#page=43), the Standard refers to ‚Äútitlecasing‚Äù as a process in which not all words are capitalized, e.g., ‚ÄúThe Merry Wives of Windsor‚Äù in English and ‚ÄúLes joyeuses comm√®res de Windsor‚Äù in French.

[15:07:03.0844] <Michael Ficarra>
jschoi: Looks like they use it in both ways
> Titlecasing refers to a casing practice wherein the first letter of a word is an uppercase letter and the rest of the letters are lowercase. This typically applies, for example, to initial words of sentences and to proper nouns. Depending on the language and orthographic practice, this convention may apply to other words as well, as for common nouns in German. Titlecasing also applies to entire strings, as in instances of headings or titles of documents, for which multiple words are titlecased. The choice of which words to titlecase in headings and titles is dependent on language and local conventions. For example, ‚ÄúThe Merry Wives of Windsor‚Äù is the appropriate titlecasing of that play‚Äôs name in English, with the word ‚Äúof‚Äù not titlecased.

[15:07:21.0671] <Michael Ficarra>
 * jschoi: Looks like they use it in both ways
> Titlecasing refers to a casing practice wherein the first letter of a word is an uppercase letter and the rest of the letters are lowercase. This typically applies, for example, to initial words of sentences and to proper nouns. Depending on the language and orthographic practice, this convention may apply to other words as well, as for common nouns in German. Titlecasing also applies to entire strings, as in instances of headings or titles of documents, for which multiple words are titlecased. The choice of which words to titlecase in headings and titles is dependent on language and local conventions. For example, ‚ÄúThe Merry Wives of Windsor‚Äù is the appropriate titlecasing of that play‚Äôs name in English, with the word ‚Äúof‚Äù not titlecased.


2021-11-19
[19:20:30.0271] <jschoi>
Ah, I suppose the first and second sentences do actually refer to simply capitalizing words. 

[19:21:11.0807] <jschoi>
Though of course ‚Äúword‚Äù is still locale dependent, like ‚ÄúL‚ÄôWhatever‚Äù in French‚Ä¶but that‚Äôs Segmenter‚Äôs problem, of course. 

[19:22:05.0202] <jschoi>
* Though of course ‚Äúword‚Äù is still locale dependent, like ‚ÄúL‚ÄôWhatever‚Äù in French‚Ä¶but that‚Äôs Segmenter‚Äôs problem, of course. 

[19:22:29.0111] <jschoi>
* Ah, I suppose the first and second sentences do actually refer to simply capitalizing words. 

[10:10:35.0486] <nicolo-ribaudo>
When will Oct notes be published?

[11:25:49.0974] <Rob Palmer>
Tomorrow morning. Apologies I have been swamped. 

