2022-02-02
[09:21:16.0351] <ljharb>
bakkot: i wonder if it might be web compatible to remove the add/set calling in the Set/Map constructors, considering that anyone trying to override those in their subclass would throw (`class X extends Set { #x = []; add(v) { this.#x.push(v); } } new X(['a'])` throws, eg)

[09:26:45.0276] <Ashley Claymore>
I should of added unit tests to the deck https://docs.google.com/presentation/d/1-Hp4Qd0mmdufYCwI9fTdCxgt4xEHqE1mPfqRxzuzMvc/edit#slide=id.g10d8b1925be_0_0

[09:28:47.0347] <bakkot>
ljharb: possibly; michael and I looked into it and even people who are subclassing Map usually also override the ctor

[09:29:10.0415] <ljharb>
seems like it'd be a win for normal collection usage as well as potential future methods/subclassing

[09:29:43.0786] <bakkot>
and it's not just private fields; even in plain es6 style, if your `add` method depends on fields added by the constructor it's not going to work

[09:29:52.0124] <bakkot>
no idea why we thought this was a good idea

[09:38:58.0057] <Ashley Claymore>
https://twitter.com/basarat/status/557680386042765312

[09:42:32.0151] <Ashley Claymore>
I upset shu when I found out about this https://twitter.com/_shu/status/1362579124246646784

[09:45:41.0002] <Ashley Claymore>
 * I upset shu when I found out about this https://twitter.com/_shu/status/1362579124246646784 ðŸ˜…

[10:43:19.0691] <bakkot>
> even people who are subclassing Map usually also override the ctor

just to back that up, here's
- a WPT test: https://github.com/chromium/chromium/blob/596d50e6bfa4ec7824664645fc5422728092658e/third_party/blink/web_tests/external/wpt/webrtc/RTCPeerConnection-helper.js#L661
- some code from w3c (respec): https://github.com/w3c/respec/blob/971a29796becb27759bd958c89aedba08ac2e222/src/core/utils.js#L725-L730

and conversely, here's various bits of code which are _currently_ broken because of this behavior
- in Firefox: https://github.com/mozilla/gecko-dev/blob/489e82dcc1e5afbe691ff3b1c982382914637e38/toolkit/components/extensions/ExtensionUtils.jsm#L142-L168
- in moodle: https://github.com/moodle/moodle/blob/8885e22a0b56f503b685313d0ae3e581ecf0665b/lib/amd/src/local/reactive/statemanager.js#L673-L702
- https://github.com/cowlicks/privacypossum/blob/a328104217e6bebc35ee48f9561255ef83c51c41/src/js/fakes.js#L7-L29

and here's some which have explicitly had to work around it:
- https://github.com/Katello/katello/blob/438351af3352088f3a8347ed1aaaf84dc3d2ae69/webpack/components/Table/TableHooks.js#L8-L9
- https://github.com/Mintnoii/Vue-MintShop/blob/8f98a5258658c953d92d03ace4b0c199bd763b72/mintshop-server/node_modules/_mongoose%405.4.22%40mongoose/lib/types/map.js#L42-L50
- https://github.com/peer-base/peer-base/blob/35166484f71e67c668f39982a8333099f2fd1b9e/src/common/peer-set.js#L4-L13

[10:43:54.0939] <bakkot>
that said, this doesn't mean it would necessarily be web-compat to change the behavior at this point, since you _can_ make something which depends on it (e.g. a Set subclass which just filters out a particular kind of value)

[10:56:20.0731] <Michael Ficarra>
btw we looked through examples of subclassing Set/Map for probably like 3 hours and I don't think we found a single example where the default constructor behaviour was useful

[11:09:22.0626] <bakkot>
the first two links above are places it _would_ have been useful, they just didn't know it existed so they re-implemented it


2022-02-03
[18:53:53.0096] <bakkot>
shu: you should put https://github.com/tc39/ecma262/pull/2646 on the agenda probably

[18:53:58.0617] <bakkot>
for I guess march, wow

[18:54:06.0663] <bakkot>
lots of time to get stuff ready for the next meeting

[11:20:50.0849] <shu>
bakkot: yes, i was planning on it

[11:21:12.0098] <shu>
i was just going to do a batch later since end of march is still a ways away


2022-02-05
[16:53:15.0552] <jschoi>
What would be the best repository to publish last monthâ€™s post-plenary ad-hoc dataflow meetingâ€™s notes in? tc39/notes, tc39/incubator-agendas, or somewhere elseâ€¦?

[16:53:27.0038] <jschoi>
* What would be the best repository to publish last monthâ€™s post-plenary ad-hoc dataflow meetingâ€™s notes in? tc39/notes, tc39/incubator-agendas, or somewhere elseâ€¦?

[16:58:11.0476] <shu>
hm, could do incubator-agendas since it was explicitly not part of plenary

[16:58:15.0627] <shu>
feel free to PR

[13:55:11.0510] <jschoi>
Someone named Liu Tao from Bytedance left their attendance in the notes for that ad-hoc meetingâ€¦but I canâ€™t find their abbreviation in https://github.com/tc39/notes/blob/master/delegates.txt. What is Liu Taoâ€™s abbreviation? (HE Shi-Jun, would you happen to know?)

[13:55:19.0976] <jschoi>
 * Someone named Liu Tao from Bytedance left their attendance in the notes for that ad-hoc meetingâ€¦but I canâ€™t find their abbreviation in https://github.com/tc39/notes/blob/master/delegates.txt. What is Liu Taoâ€™s abbreviation? (HE Shi-Jun, would you happen to know?)


2022-02-06
[21:09:24.0650] <Jack Works>
reviewing accessor in the decorator proposal

[21:10:15.0424] <Jack Works>
I have a question. In the `@logged accessor x` example, is it possible to use `this.#x`  to access the derived private field to bypass the decorated accessor and access the original value?

[22:56:10.0469] <ljharb>
it should not be possible to access a private field inside the class body that was declared by the decorator

[22:56:18.0721] <ljharb>
iow, `this.#x` should only work if the class body declares `#x`, statically

[23:06:32.0661] <Jack Works>
Then what happened if I write: `#x; @logged accessor x = 1`

[01:45:50.0721] <nicolo-ribaudo>
The accessor uses a different private name; `#x` is a name chosen just to show that they are related in the example.

[02:32:18.0899] <Jack Works>
> <@nicolo-ribaudo:matrix.org> The accessor uses a different private name; `#x` is a name chosen just to show that they are related in the example.

this is good /

[08:57:49.0767] <devsnek>
decorators on functions when ðŸ˜­

[09:58:25.0465] <ljharb>
indeed, like symbols, each #x is a different one

[10:40:42.0165] <rbuckton>
> <@devsnek:matrix.org> decorators on functions when ðŸ˜­

There's a proposal for function expressions/arrows already

[10:42:30.0124] <rbuckton>
Function decls is trickier since decorating a function decl probably means that function isn't hoisted. 

[11:34:13.0260] <devsnek>
imo that doesn't matter in practice but if we get function expressions that's good enough i suppose :(

[12:07:16.0274] <Ashley Claymore>
decorators on nested destructures  bindings could be handy

[12:43:16.0408] <rbuckton>
> <@devsnek:matrix.org> imo that doesn't matter in practice but if we get function expressions that's good enough i suppose :(

It would matter to the TS code base, at least (that is, if we wanted to decorate a function). Quite a bit of the code base is structured like this:

```js
function f() {
  return {
   g,
   h,
  }
  function g() {}
  function h() {}
}
```


[12:43:27.0775] <rbuckton>
> <@aclaymore:matrix.org> decorators on nested destructures  bindings could be handy

For what purpose? 

[12:44:18.0554] <devsnek>
> <@rbuckton:matrix.org> It would matter to the TS code base, at least (that is, if we wanted to decorate a function). Quite a bit of the code base is structured like this:
> 
> ```js
> function f() {
>   return {
>    g,
>    h,
>   }
>   function g() {}
>   function h() {}
> }
> ```

they aren't decorated though

[12:44:33.0118] <devsnek>
its opt in, that's the nice part

[12:44:54.0032] <devsnek>
anyway i don't wanna get into an argument about it, expressions sound "good enough" probably

[12:45:04.0863] <devsnek>
although you'd have to opt into expressions too

[12:49:57.0154] <rbuckton>
> <@devsnek:matrix.org> its opt in, that's the nice part

My point is that opting in would require breaking from an established convention. In a few small places that's fine, but if it happens more and more often then it's likely the convention would need to change. That leads to huge code moves to conform and would then complicate git history operations like blame, bisect, etc. 

[12:50:22.0040] <devsnek>
sure but you need the same changes to use it with expressions ðŸ¤·

[12:50:43.0624] <rbuckton>
That's probably a big enough reason we *wouldn't* use function decorators if they were available

[12:51:05.0111] <rbuckton>
> <@devsnek:matrix.org> sure but you need the same changes to use it with expressions ðŸ¤·

Or we just don't use them. 

[12:52:19.0696] <rbuckton>
My point is that, while breaking hoisting seems like a sensible choice on the surface, there's a lot more to the iceberg

[12:53:28.0574] <devsnek>
i don't see the difference, both turn the function into a tdz

[12:54:17.0243] <devsnek>
same iceberg 

[13:35:07.0596] <Ashley Claymore>
> <@rbuckton:matrix.org> For what purpose? 

I was thinking of a niche case, but will try and find a more mainstream use case for when this pattern:

```
const { x: { _a }, _b } = y;
const a = f(_a);
const b = f(_b);
```

Would benefit from this style:

```
const {
  x: { @f a }, @f b
} = y;
```

[13:49:46.0356] <devsnek>
> <@aclaymore:matrix.org> I was thinking of a niche case, but will try and find a more mainstream use case for when this pattern:
> 
> ```
> const { x: { _a }, _b } = y;
> const a = f(_a);
> const b = f(_b);
> ```
> 
> Would benefit from this style:
> 
> ```
> const {
>   x: { @f a }, @f b
> } = y;
> ```

`const { @debounce(500) a } = y;`

[14:58:08.0835] <Ashley Claymore>
* > <@rbuckton:matrix.org> For what purpose? 

I was thinking of a niche case, but will try and find a more mainstream use case for when this pattern:

```
const { x: { a: _a }, b: _b } = y;
const a = f(_a);
const b = f(_b);
```

Would benefit from this style:

```
const {
  x: { @f a }, @f b
} = y;
```


2022-02-07
[17:42:34.0688] <Jack Works>
I think the powerful follow on is the decorated block

[18:42:03.0457] <rbuckton>
I have been considering proposing something like Scala's extractor objects to pair with ADT enums. That would let you invoke logic during destructuring:

```js
const obj = Option.Some(1);
const Option.Some(x) = obj;
```

Also, 
```js
const { extractor(x) } = obj;
```

[18:44:02.0774] <rbuckton>
Rough outline here: https://gist.github.com/rbuckton/ae46b33f383ba69880c7138c49b5e799

[10:00:49.0772] <shu>
bakkot: Michael Ficarra the usage of Symbol.species in https://tc39.es/ecma262/#sec-initializetypedarrayfromtypedarray was pointed out to me to be very strange

[10:01:56.0075] <shu>
what the hell is going on there? we get `@@species` for the underlying ArrayBuffer, but then don't ever call `Construct` on it, instead only pulling the prototype off via `OrdinaryCreateFromConstructor`

[10:02:23.0545] <shu>
i don't remember the history here, but if that's not a bug, that's gotta be the worst usage of `@@species` in the spec

[10:25:11.0000] <bakkot>
that's pretty weird, yes

[10:27:29.0944] <bakkot>
that _has_ to be possible to rip out

[10:27:46.0777] <bakkot>
i will be so sad if someone is actually depending on that in a serious way

[10:28:03.0085] <bakkot>
(by "that" I mean the use of species in TypedArrays and ArrayBuffers)

