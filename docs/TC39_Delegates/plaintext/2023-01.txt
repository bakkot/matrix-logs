2023-01-01
[15:26:40.0665] <ljharb>
i agree that stuff needs to be figured out, but it's not a blocker - it wasn't a blocker for ecmarkup either.


2023-01-03
[11:32:21.0252] <ptomato>
is there any recent news on the "rm subclassing" proposal?

[11:47:26.0557] <littledan>
arguably set methods to Stage 3 is a pretty strong milestone to establishing how these things should work in the future

[11:47:56.0798] <littledan>
beyond that, I haven't heard of any progress in the assessments to how web-compatible it'd be to remove some of the ES6 cruft

[11:51:57.0772] <ptomato>
I seem to remember that someone said last time that Set methods wasn't intended to be a precedent?

[12:24:23.0316] <shu>
firefox said there were incompats and i have vague memory of waiting on the data there for next steps, but it's been a bit

[12:34:34.0195] <bakkot>
Set methods were explicitly intended to be a precedent https://docs.google.com/presentation/d/1HCqPMsWiTtsn92gA3b1luVpnVHWVVR0iKaAE0marxkA/edit#slide=id.g13a69787e9f_0_13

[12:36:05.0708] <bakkot>
I do think we should have gone with Symbols rather than strings, and might fight about that when that particular question comes up, but IIRC that was the only point of contention

[12:36:14.0581] <bakkot>
we were all on board with the subclassing behavior, I believe

[12:36:25.0675] <bakkot>
 * I do think we should have gone with Symbols rather than strings, and might fight about that when that particular question comes up, but IIRC that was the only point of contention

[12:40:34.0884] <bakkot>
https://github.com/tc39/notes/blob/6f7e075341e435f22777b07a3ee5141442d2d8a7/meetings/2022-03/mar-31.md#extending-built-ins is a better link I guess, since that's the presentation where we talked about subclassing in particular rather than Symbol vs string

[12:41:29.0269] <bakkot>
well, though that was less focused on Symbol.species, actually

[12:41:32.0689] <bakkot>
there's a lot of parts of this...


2023-01-04
[15:11:07.0475] <bakkot>
Ashley Claymore: what's the status of change-array-by-copy? if it's shipping in two places do you want to go for stage 4 in January?

[15:11:18.0315] <bakkot>
I ask because we're going to cut the next edition sometime in the next few months

[15:14:27.0483] <bakkot>
littledan: same question as ^ re: symbols as weakmap keys (not sure if you're the right champion but you're listed first)


2023-01-05
[19:53:35.0828] <littledan>
Thanks for the ping, we will discuss both of these proposals within Bloomberg and get back to you (possibly via an agenda PR)

[09:32:00.0344] <TabAtkins>
Where's the proposed schedule of the year's meetings posted again? I kinda expected it on the agendas repo, but I only see the upcoming Jan meeting there.

[09:33:12.0172] <Chris de Almeida>
will message you

[09:45:25.0743] <bakkot>
TabAtkins: bottom of https://github.com/tc39/agendas/blob/main/2023/01.md#dates-and-locations-of-future-meetings


2023-01-06
[16:10:21.0237] <TabAtkins>
danke, y'all, suggesting we copy it to a more obvious place https://github.com/tc39/agendas/pull/1295

[15:13:21.0400] <ljharb>
can anyone help me come up with values that would trigger the returns on steps 6 and 8 in https://tc39.es/ecma262/#sec-makeday ?

[15:24:04.0148] <ptomato>
step 6 would return for `Date.UTC(Number.MAX_VALUE, Number.MAX_VALUE)`

[15:25:28.0404] <ptomato>
step 8 is not clear about what would return and there's an issue open about it: https://github.com/tc39/ecma262/issues/1087

[15:26:13.0370] <ptomato>
but in any case it seems likely that `Date.UTC(-271821, 3, 19)` ought to make step 8 return

[15:26:20.0866] <ljharb>
hm, using MAX_VALUE seems to hit step 8 but not step 6 in my impl

[15:26:37.0556] <ljharb>
(the AO only takes number values, to be clear)

[15:27:10.0291] <ljharb>
and `+Date.UTC(-271821, 3, 19)` returns NaN  for me in Safari and node :-/

[15:31:00.0605] <ljharb>
aha, but using MAX_VALUE for both the year and month seems to hit step 6, thanks!


2023-01-09
[11:21:37.0612] <rbuckton>
Chairs: The January TC39 was moved to January 30th, making the agenda deadline January 20th, correct? The link in the "Agenda topic rules" labeled "CALCULATE TIME HERE" is calculating the time until January 30th, not January 20th. I assume this is in error?

[11:22:18.0366] <Rob Palmer>
Checking...

[11:25:48.0916] <Rob Palmer>
You are correct.  Here's the fix:  https://github.com/tc39/agendas/pull/1296

[11:26:33.0287] <Rob Palmer>
Thank you for noticing.


2023-01-10
[13:45:47.0524] <shu>
ljharb: what's the preferred way to publish rendered specs in proposal repos?

[13:45:55.0287] <shu>
a branch or a subdir?

[13:46:08.0342] <Michael Ficarra>
definitely a gh-pages branch

[13:46:12.0655] <ljharb>
there isn't consensus. the template i built does neither, it auto-publishes to the root

[13:46:21.0561] <ljharb>
michael and some others prefer a separate gh-pages branch

[13:46:38.0416] <shu>
i don't really care, i just want the least amount of work possible

[13:46:45.0831] <shu>
i didn't know it could just use a single file?

[13:46:54.0088] <ljharb>
it can

[13:47:03.0335] <ljharb>
you can make a proposal repo from the template for the "root" approach

[13:47:34.0035] <shu>
oh i see, you can just serve the entire root directory

[13:47:59.0379] <ljharb>
yep

[13:48:37.0735] <ljharb>
the pros of this approach are that you can switch commits to specific ecmarkup and the rendered html is largely right there. cons are that the commit history will be slightly more crowded.

[13:51:51.0136] <Michael Ficarra>
reviewing PRs becomes annoying

[14:07:08.0459] <shu>
how so?

[14:08:13.0199] <Michael Ficarra>
the built spec HTML changes are mixed in with the source spec ecmarkup changes

[14:08:37.0560] <shu>
ah, when i used a subdir i always just push another commit called "Update render" or the like

[14:12:27.0313] <bakkot>
that gets annoying when there's multiple commits though

[14:12:50.0863] <bakkot>
strongly prefer the approach the spec takes, where there's a different branch with the rendered spec and you never have to think about it

[14:13:31.0708] <bakkot>
you can use https://github.com/tc39/template-for-proposals/pull/32 as a basis for this and then never think about it; commits to the main branch will automatically update the gh-pages branch

[14:26:56.0064] <shu>
wfm

[14:43:40.0439] <ljharb>
`.gitattributes` auto-collapses the diff in the PR for the HTML changes


2023-01-11
[16:13:32.0032] <shu>
ljharb: okay, initial spec for transfer up at https://tc39.es/proposal-arraybuffer-transfer/ if you'd like to review

[16:18:52.0721] <shu>
huh i wonder why it says January 11, what timezone is GH on

[16:19:29.0783] <Andreu Botella>
probably UTC

[21:18:46.0334] <ljharb>
yeah, it's utc, it's really annoying

[21:19:13.0009] <ljharb>
there's an env var kevin added to ecmarkup that lets you set the modified time, but unfortunately i haven't worked out an ergonomic way to use it so that the date is deterministic :-/

[22:11:36.0054] <bakkot>
well

[22:11:59.0581] <bakkot>
it's easy to make it deterministically 1970-01-01 or whatever

[22:12:29.0176] <ljharb>
lol ok well, deterministic and increasing as time itself increases :-p

[22:12:29.0465] <bakkot>
but deterministically "date of last file modification" is trickier yes

[22:12:57.0622] <ljharb>
 * lol ok well, deterministic and increasing as time itself increases :-p

[22:14:28.0590] <bakkot>
for CI it's probably fine to have it do the commit date

[22:14:43.0681] <bakkot>
if you want it to be deterministic and increasing

[08:01:27.0662] <ljharb>
that date isnâ€™t known until after the committed build is generated tho

[08:58:37.0646] <bakkot>
if you commit changes to the spec and then CI generates a separate commit with the build for that spec, CI can use the date of the "changes to the spec" commit to generate the date for the build

[09:00:06.0693] <ryzokuken>
that would help with the "CI rebuilds spec and causes merge conflicts" issue

[09:00:24.0903] <ryzokuken>
because the default template has this really irritating issue

[09:01:07.0754] <ryzokuken>
GH actions tries to rebuild the spec everytime, even if the commit already updates the built spec and adds fixup commits that need to be addressed but at the very least would cause merge conflicts

[09:01:48.0835] <ryzokuken>
so it's pretty much impossible to merge multiple PRs in a row. You have to always rebase all PRs on top of the main branch once you merge anything, it's quite irritating at times.

[09:05:22.0921] <bakkot>
ryzokuken: that's already fixed by https://github.com/tc39/template-for-proposals/pull/32, which puts the built spec on its own branch

[09:05:57.0540] <ryzokuken>
oh nice

[09:06:06.0770] <ryzokuken>
how can I incorporate this into an existing proposal repo?

[09:06:08.0625] <bakkot>
 * ryzokuken: that's already fixed by https://github.com/tc39/template-for-proposals/pull/32, which puts the built spec on its own branch

[09:06:16.0917] <ryzokuken>
 * how can I incorporate this into an existing proposal repo?

[09:07:10.0823] <bakkot>
uhhh basically just apply that PR as a patch

[09:07:52.0108] <ryzokuken>
ah cool! Wasn't sure that'd just work. Will try this and let you know how it went

[09:07:52.0756] <bakkot>
and then change the repo settings to deploy from the gh-pages branch once the new CI runs and generates it


2023-01-12
[15:25:10.0100] <shu>
in case folks haven't seen: https://blog.sigplan.org/2023/01/12/from-research-prototypes-to-continuous-integration-guiding-the-design-and-implementation-of-javascript/

[15:32:22.0529] <ptomato>
I never thought that me saying "I sat through the presentation with my mouth open the whole time" would make it into an academic conference paper

[15:34:33.0008] <shu>
the real takeaway is edit the notes

[15:34:49.0588] <shu>
lest you want speech2text errors make it into publications!

[15:35:56.0864] <shu>
(i say that as someone who does not edit the notes very well)

[15:40:36.0670] <Justin Ridgewell>
Did we record that presentation?


2023-01-13
[23:01:21.0000] <snek>
oh wow i didn't realize esmeta was running on test262

[23:01:23.0693] <snek>
guess i can retire engine262

[23:03:10.0493] <snek>
it even implements my idea of showing how each line of js executes in the spec better than i could do in engine262 ðŸ˜„

[07:20:38.0750] <ryzokuken>
from next plenary onwards, we should have professional stenography ðŸ¤ž

[07:21:59.0653] <Ben>
hah. the thing that tripped me up was whenever I had to pause to look up stuff


2023-01-16
[08:43:54.0543] <Rob Palmer>
Please can everyone fill in this super-quick survey for the March 2023 plenary to see if we have enough interest in the meeting being in-person at the F5 Tower in Seattle, US.

  [Survey link](https://github.com/tc39/Reflector/issues/457)

Responses are requested by Monday 23 January 2023.  It will take less than 60s to complete.


2023-01-18
[08:24:36.0399] <Rob Palmer>
A reminder:  Please add your response to [the March 2023 plenary survey](https://github.com/tc39/Reflector/issues/457) (it will likely be the quickest survey you have completed in your life - only one question)

[12:42:32.0688] <littledan>
We had a whole bunch of topics which didn't make it last meeting. Shouldn't we add them all to the agenda for this meeting?

[12:42:38.0043] <littledan>
in the overflow slot

[12:42:45.0902] <littledan>
it looks like we only have AsyncContext there for now

[13:18:14.0761] <ljharb>
i used to add them automatically, but often presenters didn't realize it and weren't there to present them the next meeting. it's probably best if the presenters add themselves to the overflow slot

[13:38:40.0905] <littledan>
Ah OK I was unaware of the change, thanks for the history; I'll add my topics

[14:03:31.0007] <ljharb>
no worries, wasn't really a policy either way, just something i did on my own. open to do it differently if it's easier on anyone


2023-01-19
[08:50:31.0643] <rbuckton>
FYI, for anyone intending to read the Async Resource Management proposal spec text, GitHub is having issues with Pages deployments currently so the spec text at https://tc39.es/proposal-async-explicit-resource-management is not up to date. Until the issue is resolved, the spec text at https://tc39.es/proposal-async-explicit-resource-management/pr/6 is the most up to date version.

[13:31:17.0796] <shu>
Richard Gibson: are you planning to bring https://github.com/tc39/proposal-json-parse-with-source/issues/39 to the january plenary?

[13:31:51.0303] <shu>
it'd be nice to get it fixed, as there're multiple implementations already

[13:53:28.0086] <rbuckton>
> <@rbuckton:matrix.org> FYI, for anyone intending to read the Async Resource Management proposal spec text, GitHub is having issues with Pages deployments currently so the spec text at https://tc39.es/proposal-async-explicit-resource-management is not up to date. Until the issue is resolved, the spec text at https://tc39.es/proposal-async-explicit-resource-management/pr/6 is the most up to date version.

GitHub pages is working again, so the spec text at https://tc39.es/proposal-async-explicit-resource-management is now up to date.

[14:22:43.0783] <Richard Gibson>
> <@shuyuguo:matrix.org> Richard Gibson: are you planning to bring https://github.com/tc39/proposal-json-parse-with-source/issues/39 to the january plenary?

yes, expect an agenda item today

[14:33:37.0691] <shu>
awesome, thanks


2023-01-21
[18:02:18.0778] <Jack Works>
I think the getIntrinsic is too niche. It is useful for language experts, but it shouldn't be a thing in the language imo

[22:27:36.0849] <ljharb>
lots of things are like that tho - atomics and weak references, for example

[22:28:06.0516] <ljharb>
or Proxy

[22:28:11.0552] <ljharb>
iow, there's lots of things that are useful for language experts that in turn benefit hundreds of millions of users even though they never interact with them directly. getIntrinsic is one such thing.

[22:28:15.0420] <ljharb>
 * iow, there's lots of things that are useful for language experts that in turn benefit hundreds of millions of users even though they never interact with them directly. getIntrinsic is one such thing.

[01:35:49.0575] <Rob Palmer>
> <@robpalme:matrix.org> Please can everyone fill in this super-quick survey for the March 2023 plenary to see if we have enough interest in the meeting being in-person at the F5 Tower in Seattle, US.
> 
>   [Survey link](https://github.com/tc39/Reflector/issues/457)
> 
> Responses are requested by Monday 23 January 2023.  It will take less than 60s to complete.

Final reminder! Please complete the the survey. 


2023-01-24
[03:45:59.0701] <Rob Palmer>
Thanks all for the survey responses.  The Seattle meeting is now confirmed for March  ðŸŽ‰

https://github.com/tc39/Reflector/issues/457#issuecomment-1401791367


2023-01-26
[21:56:34.0255] <snek>
i just realized that overlaps with GDC

[21:56:37.0359] <snek>
:(

[00:54:02.0309] <Rob Palmer>
If you check the Reflector (I don't want to link here), we have a spreadsheet for collecting plenary scheduling constraints. Clashes to avoid etc. You are welcome to add GDC to that so that we try to avoid it for future years. 

[13:21:34.0497] <ljharb>
ryzokuken: i see in the draft schedule that ron's `using` update is on day 2; i'd love to have my topic on SuppressedError be directly before or after that if possible (currently on day 3), since they're about the same proposal

[13:38:12.0627] <ryzokuken>
> <@ljharb:matrix.org> ryzokuken: i see in the draft schedule that ron's `using` update is on day 2; i'd love to have my topic on SuppressedError be directly before or after that if possible (currently on day 3), since they're about the same proposal

Could you please add that to the constraints? I'll try to reorganize in a bit.

[13:46:06.0074] <rbuckton>
bakkot: Do you know if `esmeta` supports multiple constraints preceding a RHS? In the `using await` proposal I have a `[+Using, +Await] `using` ...` production, which both `grammarkdown` and `ecmarkup` support, but when I run `esmeta` it stops immediately with `[ESMeta v0.1.0] [Parser (List[spec.Production])] [14.110] failure: end of input expected`

[14:02:26.0806] <rbuckton>
I've filed https://github.com/es-meta/esmeta/issues/133 for the issue.

[15:11:47.0671] <bakkot>
Yeah, I believe they did basically a clean-room reimplementation of the parsing, so I would not be surprised if it doesn't. I don't know offhand but the devs are pretty responsive.


2023-01-27
[06:41:13.0650] <rbuckton>
It looks like they fixed it last night in https://github.com/es-meta/esmeta/pull/134


2023-01-28
[16:17:01.0302] <bakkot>
apparently typescript is going to add extra non-standard syntax for decorators (specifically, allowing them before `export` as well as after)

[16:19:39.0188] <ljharb>
yep, it's very unfortunate :-/

[00:41:10.0649] <Ashley Claymore>
I think others have had this issue; trying to commit GH suggestions on ecma262 PRs it always errors with "This diff has recently been updated". Any ideas/tips?

[08:24:31.0663] <bakkot>
Ashley Claymore: nope, it just doesn't work

[09:25:05.0379] <Richard Gibson>
seems to be a consequence of the large file size, which hopefully will be fixed at some point like the context expansion was

[14:05:06.0805] <Ashley Claymore>
Thanks for confirming it's not just me being dumb!

