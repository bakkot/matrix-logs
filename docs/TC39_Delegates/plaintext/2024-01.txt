2024-01-01
[14:24:50.0753] <bakkot>
> The IndexedDB API provides a built-in method for comparing two ArrayBuffers or ArrayBuffer views in a bytewise fashion. This is because IndexedDB has a concept of "key order", where a subset of JavaScript values that can be used as "keys" in IndexedDB have a defined sorting order. The important part is that one such kind of key is a binary key, which is defined in the spec as "ArrayBuffer objects (or views on buffers such as Uint8Array)."


2024-01-11
[11:00:40.0291] <Rob Palmer>
Happy New Year, all üëã

The 100th TC39 meeting in San Diego is now only 3.5 weeks away!  So far we have 17 folk registered on [the sign-up sheet.](https://forms.gle/PSAjQCQQTCP8cDfG8) The advertised deadline for registrations is Friday 18th January 2024 - so if you plan on coming please sign up soon so our hosts can plan accordingly!

- https://github.com/tc39/Reflector/issues/516

[11:28:59.0982] <rbuckton>
I'm unable to attend in person, unfortunately. If there are to be TC39 hats, will there be a way to get one for remote attendees?

[11:58:17.0779] <Rob Palmer>
I don't think we've explicitly said what the swag will be yet? Taking notes and writing summaries will definitely increase the chances of getting some.

[12:01:49.0589] <rbuckton>
Well, swag in general. I have the last two hats, can't let the collection be incomplete.

[12:13:49.0565] <Rob Palmer>
It seems likely there will be enough to bring to future plenaries. 

[13:33:06.0925] <Michael Ficarra>
ah, but do you have the beanie?


2024-01-12
[16:11:05.0539] <rbuckton>
Alas, no. I do have the ball caps though

[16:12:34.0830] <rbuckton>
Unfortunately, the next two are outside the US and are outside of my travel budget. Iay have to wait for the next east coast plenary. 

[16:12:53.0995] <rbuckton>
* Unfortunately, the next two are outside the US and are outside of my travel budget. I may have to wait for the next east coast plenary.


2024-01-13
[16:43:43.0372] <Rob Palmer>
We are now at 21 registered attendees for the Feb meeting in San Diego.

The advertised deadline for registrations is Friday 18th January 2024 - so if you plan on coming please sign up soon!

- https://github.com/tc39/Reflector/issues/516

[17:57:58.0099] <Michael Ficarra>
18th January is a Thursday

[02:05:24.0251] <Rob Palmer>
* We are now at 21 registered attendees for the Feb meeting in San Diego.
The advertised deadline for registrations is Friday 19th January 2024 - so if you plan on coming please sign up soon!
https://github.com/tc39/Reflector/issues/516


[02:05:40.0969] <Rob Palmer>
* Happy New Year, all üëã
The 100th TC39 meeting in San Diego is now only 3.5 weeks away! So far we have 17 folk registered on the sign-up sheet. The advertised deadline for registrations is Friday 19th January 2024 - so if you plan on coming please sign up soon so our hosts can plan accordingly!
https://github.com/tc39/Reflector/issues/516



2024-01-15
[02:51:36.0250] <Rob Palmer>
As of Monday we have 22 registered attendees for the Feb meeting in San Diego.  Please join us!

[15:50:18.0159] <Aki>
Whooops my company is out so i am out. Y'all I live in San Diego, lets' get a cocktail or tea or something.


2024-01-16
[17:14:55.0390] <rkirsling>
> <@akirose:matrix.org> Whooops my company is out so i am out. Y'all I live in San Diego, lets' get a cocktail or tea or something.

count me in!

[17:16:15.0289] <rkirsling>
oh wait, she won't be able to see that, will she

[17:19:35.0814] <bakkot>
the channel is still public, you just can't post when below the delegate power level

[17:21:29.0634] <rkirsling>
oh! cool, thanks for the clarification

[08:31:38.0125] <Rob Palmer>
On Thursday 8th Feb we will have a Community Event in San Diego.  If you wish to present or would like to help judge proposals (in an entertaining and education way) please volunteer on [the Reflector. post.](https://github.com/tc39/Reflector/issues/516)

[12:13:00.0791] <Rob Palmer>
* On Thursday 8th Feb we will have a Community Event in San Diego.  If you wish to present or would like to help judge proposals (in an entertaining and education way) please volunteer on 
[the Reflector post](https://github.com/tc39/Reflector/issues/518) 


2024-01-17
[11:13:28.0972] <rbuckton>
dminor: Is there a tracking bug for https://github.com/tc39/proposal-regexp-modifiers, which is at Stage 3? I cannot find one on https://bugzilla.mozilla.org/.

[11:47:43.0459] <rbuckton>
msaboff: Do you know if JSC has a tracking bug for RegExp Modifiers yet, I also cannot find one on https://bugs.webkit.org/

[11:47:51.0409] <rbuckton>
 * msaboff: Do you know if JSC has a tracking bug for RegExp Modifiers yet? I also cannot find one on https://bugs.webkit.org/

[14:21:09.0301] <Rob Palmer>
We now have 26 folk signed up for February San Diego meeting. So it's on track to be the biggest meeting since 2019.

The advertised deadline for registrations is Friday 19th January 2024 - so if you plan on coming please sign up soon!
https://github.com/tc39/Reflector/issues/516


[14:29:31.0041] <littledan>
should be 27 now--see you all there!


2024-01-20
[18:02:23.0903] <ljharb>
Last meeting, which proposals did we agree are at 2.7?

[19:09:34.0306] <Chris de Almeida>
> <@ljharb:matrix.org> Last meeting, which proposals did we agree are at 2.7?

none

[19:16:14.0171] <Chris de Almeida>
the only proposal that could have been regressed was decorator metadata and it was objected to on the grounds that proposals stage changes need to be on the agenda.  in any case, it's moot now because the 2.7 -> 3 criteria was quickly resolved for that proposal, so it remains at stage 3

[19:17:36.0770] <Chris de Almeida>
https://github.com/tc39/test262/pull/3971

[19:48:35.0234] <ljharb>
ah ok, gotcha


2024-01-22
[16:11:32.0347] <Michael Ficarra>
to be pedantic, many proposals "qualified" for demotion to stage 2.7, in that their tests may not be deemed sufficient by committee

[16:12:05.0129] <Michael Ficarra>
but I only proposed demotion for proposals that had no tests at all

[16:12:45.0464] <Michael Ficarra>
if somebody wanted to do the work, they could probably make a pretty good case for demotion of a few more stage 3 proposals

[20:43:24.0235] <bakkot>
anyone want to volunteer to review the base64 proposal so I can go for stage 3? https://github.com/tc39/proposal-arraybuffer-base64

[20:44:13.0335] <bakkot>
the actual decoding is a little annoying, but mostly quite mechanical, and otherwise there's not much to it

[20:44:26.0270] <bakkot>
(also there's a polyfill which works pretty much exactly like the spec text)

[07:17:40.0644] <ljharb>
sure, i can do that

[14:36:48.0608] <Rob Palmer>
FYI we have an in-person Matrix room for those attending San Diego in Feb. Please shout if you need a invite to the room.

So far we have 29 in-person attendees so it will be the highest attendance since Hawaii which coincidentally also featured whales.

[14:56:31.0994] <Jan Olaf Martin>
‚úã


2024-01-23
[11:49:31.0319] <bakkot>
does anyone have strong opinions about `Uint8Array.fromHexInto` being on the prototype vs static? It sets bytes in an existing `Uint8Array`. Currently it's static to match TextEncoder's `encodeInto`, which is a very similar method, but it could be prototype instead

[11:49:42.0819] <bakkot>
 * does anyone have strong opinions about `Uint8Array.fromHexInto` being on the prototype vs static? It sets bytes in an existing `Uint8Array` and returns a `{ read, written }` pair. Currently it's static to match TextEncoder's `encodeInto`, which is a very similar method, but it could be prototype instead

[11:50:06.0009] <bakkot>
 * does anyone have strong opinions about `Uint8Array.fromBase64Into` being on the prototype vs static? It sets bytes in an existing `Uint8Array` and returns a `{ read, written }` pair. Currently it's static to match TextEncoder's `encodeInto` and the `Uint8Array.fromBase64` method, but it could be prototype instead


2024-01-24
[08:31:19.0903] <Kris Kowal>
I do not have a strong opinion. My weak opinion teeters. Just facts: TextEncoder had to be static because the byte array could not be the receiver. The ‚Äúinto‚Äù term indicates that writer array is an argument, not a return or the receiver. By contrast ‚ÄúcopyWithin‚Äù implies both the reader and writer are the receiver. I don‚Äôt know a modifier word precedent for indicating the operation writes to the receiver and reads from an argument. 

[08:35:42.0481] <Kris Kowal>
So nothing prevents the method from being on the prototype but it is easier to name on the constructor. 

[09:05:26.0043] <rbuckton>
`write`?

[09:06:45.0213] <Richard Gibson>
> I don‚Äôt know a modifier word precedent for indicating the operation writes to the receiver and reads from an argument.

Plausibly [`fill`](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.fill), which I guess for this proposal would suggest something like `Uint8Array.prototype.fillFromBase64`

[09:07:08.0521] <TabAtkins>
`fill` sounds very reasonable, imo

[09:07:50.0034] <rbuckton>
Maybe `set`? `DataView.prototype.setUint32()` sets multiple bytes on the receiver from an argument.

[09:08:12.0778] <rbuckton>
`fill` usually means performing a repetitive action, like "fill this array with zeroes"

[09:09:44.0121] <Richard Gibson>
yep, `set` appears to be the other prior instance of that pattern

[09:10:00.0777] <rbuckton>
This is also a somewhat new capability in the standard library, so something precedent-setting isn't necessarily uncalled for. I would generally use a term like `write` for this kind of operation elsewhere.

[09:11:28.0633] <rbuckton>
Also, `decode` has *some* precedent with `decodeURI`/`decodeURIComponent`, so `decodeBase64Into` is a possibility.

[09:12:40.0291] <Richard Gibson>
I think the overarching point is that we ought to avoid "into" in the naming of a prototype method that writes into its receiver

[09:13:54.0409] <rbuckton>
The name I would normally use for such a method, were it on the prototype, would be `writeBase64Bytes()`

[09:15:23.0244] <rbuckton>
`set` doesn't seem like the right precedent, because its essentially a byte-for-byte copy. There's no encoding that happens (aside from byte order)

[09:15:50.0635] <Richard Gibson>
`setFromBase64` and `writeFromBase64` seem like solid options. `writeBase64Bytes` isn't as strong IMO, but also isn't bad.

[09:16:47.0561] <rbuckton>
The term `byte` has precedent within the language, despite referring to it as `Uint8` on DataView and in the TypedArray constructor. `BYTES_PER_ELEMENT`, `byteLength`, etc.

[09:19:39.0704] <rbuckton>
Also, `writeBase64Bytes` means it could theoretically be applied to any typedarray prototype with the same meaning (i.e., "write the bytes"). An `Int32Array.prototype.writeFromBase64`, for example, might be misconstrued as decoding base64 into `Int32` elements, rather that bytes. `writeFromBase64` is probably fine if its *only* on `Uint8Array` (or maybe `Int8Array`).

[09:42:56.0354] <Kris Kowal>
I think `writeBase64` is sufficiently specific and would be equally sensible on DataView or Uint*Array. 

[09:43:12.0424] <Kris Kowal>
* I think writeBase64 is sufficiently specific and would be equally sensible on DataView or Uint8*Array.

[09:43:39.0446] <Kris Kowal>
* I think writeBase64 is sufficiently specific and would be equally sensible on DataView or Uint8Array (and variants).

[09:43:44.0622] <bakkot>
plan is for these to only be on Uint8Array specifically, so I'm not too worried about the interpretation on other TA types

[09:43:56.0837] <bakkot>
I would find base64-decoding to non-byte types confusing

[09:45:28.0042] <Kris Kowal>
I don‚Äôt like it but `set` has much stronger precedent than `write`

[09:45:48.0416] <bakkot>
re: `set` vs `write`, we have a bunch of methods called "set" and none called "write", and the names themselves don't seem to suggest that one of them does decoding, so I'm inclined more towards `set`

[09:46:28.0898] <bakkot>
the DataView `setUint32` etc methods are arguably doing encoding, especially given the endianness parameter

[09:46:47.0846] <bakkot>
so of the names above, `setFromBase64` is my preference

[09:47:21.0223] <bakkot>
not opposed to `write`, but `set` seems nicer

[09:47:33.0148] <bakkot>
and it sounds like people are leaning towards having this on the prototype rather than a static?

[09:53:12.0301] <bakkot>
ok maybe no one actually cares about prototype vs static?

[10:25:24.0894] <rbuckton>
As I said, my biggest concern for `set` is that methods like `setInt32` imply a byte-for-byte copy, which doesn't seem consistent with this, but I'm not strongly opposed. 

