2022-03-01
[14:22:36.0271] <mgaudet>
Hey; I've got [a bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1757162) which essentially boils down to this little test case

```
class A {
    #x = "hello";
    constructor(o = this.#x) {
        this.value = o;
    }
};

var a = new A;
// Does new A throw? if not, does a.value have the value of `hello`?
```


[14:22:48.0705] <mgaudet>
I'm trying to figure out what the spec says and got a little confused

[14:24:02.0915] <mgaudet>
https://tc39.es/ecma262/#sec-evaluatenew says that ArgumentListEvaluation happens before the constructor is invoked; but AFAICT it's the constructor that actually allocates the object... 

[14:24:35.0604] <mgaudet>
does ArgumentListEvaluation not actually... evaluate the arguments? ie, is the processing of the default argument deferred until later? 

[14:31:39.0687] <bakkot>
`ArgumentListEvaluation` evaluates _the arguments_, not the parameters

[14:32:16.0995] <bakkot>
it's the thing which would trigger the `console.log` in `f(console.log(0));`, not the thing which would trigger the `console.log` in `function f(x = console.log(0)) {}; f()`

[14:32:59.0899] <mgaudet>
yeah; I think I've got the latter traced down further into https://tc39.es/ecma262/#sec-functiondeclarationinstantiation 

[14:33:32.0804] <mgaudet>
(which seems to imply that the answer is that private fields ought to be available in that parameter expression) 

[14:33:55.0892] <mgaudet>
(I always get bit when coming back to arguments/formals/parameters) 

[14:36:38.0597] <bakkot>
yeah

[14:37:36.0990] <bakkot>
specifically, for base classes, class fields are created/installed by [[construct]] step 6.b: https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ecmascript-function-objects-construct-argumentslist-newtarget

[14:38:04.0399] <bakkot>
 * specifically, for base classes, class fields are created/installed by [[construct]] step 6.b: https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ecmascript-function-objects-construct-argumentslist-newtarget

[14:39:12.0103] <bakkot>
and parameter defaults (and other expressions) are evaluated later, in [[construct]] step 8, via OrdinaryCallEvaluateBody -> EvaluateBody -> EvaluateFunctionBody -> FunctionDeclarationInstantiation -> IteratorBindingInitialization

[14:40:11.0699] <bakkot>
so private fields (and all other fields) are available (for base classes) by the time the parameter list is evaluated

[14:40:28.0166] <mgaudet>
Yep :) Was writing that out... less nicely than you in the bug :P 


2022-03-02
[12:11:07.0493] <bakkot>
the snippet of code for getting the time is wrong on the agenda; can someone fix it? https://github.com/tc39/agendas/blob/main/2022/03.md

[12:11:33.0045] <bakkot>
I can do it if I remember next time I have an opportunity

[12:12:01.0489] <bakkot>
(it has the wrong date)


2022-03-03
[16:06:48.0051] <ljharb>
done


2022-03-07
[10:13:38.0587] <jschoi>
A friendly reminder to delegates that thereâ€™s an incubator meeting about `Function` helper functions tomorrow! Hope to see you there. https://github.com/tc39/incubator-agendas/blob/master/2022/03-08.md


2022-03-08
[08:03:53.0082] <shu>
ljharb: incubator call?

[08:05:00.0615] <ljharb>
Iâ€™ll be a few late, but Iâ€™m coming

[08:25:12.0906] <ljharb>
jschoi: "demethodize" is pretty gross imo, ftr :-p

[09:01:10.0789] <shu>
it sounds like a surgical procedure

[11:51:46.0153] <ljharb>
so, we have `x?.(y)`, where it doesn't call `x` unless `x` is non-nullish; is there no simple way to do `x(y)` when _y_ is non-nullish? (obv i can do `y == null ? y : x(y)` but that means i have to repeat the `y` expression more than once, or store it in a var)

[12:01:17.0935] <Ashley Claymore>
sounds like you want optional pipeline ðŸ˜‰

[12:01:34.0057] <Ashley Claymore>
 * sounds like you want optional pipeline ðŸ˜‰

[12:02:10.0572] <Ashley Claymore>
`y ?> x(<sigil>)`

[12:02:26.0534] <bakkot>
optional pipeline :(

[12:02:49.0120] <bakkot>
we could just have do-notation, like a real language

[12:03:07.0046] <Ashley Claymore>
ðŸ”¥

[12:04:40.0003] <shu>
real languages are statement based, only acceptable expressions are immediates and registers and addresses

[12:04:46.0945] <shu>
and immediates can't be too big

[12:04:52.0405] <shu>
and it'll be an awkward number of bits, like 21

[12:06:00.0164] <Ashley Claymore>
all logic is ternary. true/false/unknown 

[12:11:13.0038] <jschoi>
> <@aclaymore:matrix.org> sounds like you want optional pipeline ðŸ˜‰

Thereâ€™s going to be a bikeshed around whether to use falsey or nullish for optional pipes. ðŸ¤” 

[12:12:08.0125] <bakkot>
nullish is the only reasonable choice for optional pipes

[12:12:11.0812] <bakkot>
also I don't want optional pipes

[12:12:17.0408] <bakkot>
but it's the only reasonable choice if we have to have them

[12:22:57.0854] <jschoi>
> <@aclaymore:matrix.org> all logic is ternary. true/false/unknown 

Also, we both have null and undefined. We can go further. https://www.computer.org/csdl/proceedings-article/glsv/1991/00143992/12OmNzzxusf

Quaternary logic. We have the technology. Do we have the courage? [joke]

[12:23:35.0286] <jschoi>
* > <@aclaymore:matrix.org> all logic is ternary. true/false/unknown 

Also, we have null and undefined. We can go further. https://www.computer.org/csdl/proceedings-article/glsv/1991/00143992/12OmNzzxusf

Quaternary logic. We have the technology. Do we have the courage?

[12:24:22.0159] <jschoi>
* > <@aclaymore:matrix.org> all logic is ternary. true/false/unknown 

Also, we both have null and undefined. We can go further. https://www.computer.org/csdl/proceedings-article/glsv/1991/00143992/12OmNzzxusf

Quaternary logic. We have the technology. Do we have the courage? [joke]

[12:30:58.0308] <bakkot>
we have gone further

[12:31:07.0359] <bakkot>
we have an infinite number of `document.all`s available to us

[12:31:18.0811] <bakkot>
for as many non-null/undef nullish values as you want

[12:46:45.0073] <TabAtkins>
> <@jschoi:matrix.org> Thereâ€™s going to be a bikeshed around whether to use falsey or nullish for optional pipes. ðŸ¤”

? It would use the same rules as optional-call and ??; anything else would be a profound mistake.

[13:59:53.0261] <jschoi>
Yeah, I had thought there would be some disagreement on this, but it looks like everyone (including me) agrees with nullishness.

[14:46:24.0173] <TabAtkins>
I don't think it's *particularly* that everyone agrees on nullishness (tho maybe people do), it's just that it's extremely clear that all the things doing optionality with the same syntax pattern need to act the same.

[15:39:44.0342] <Michael Ficarra>
> <@bakkot:matrix.org> we have an infinite number of `document.all`s available to us

not even limited to `document.all`, hosts can put `[[IsHTMLDDA]]` on any objects they choose

[15:40:28.0658] <shu>
owo

[15:41:41.0154] <bakkot>
"can", but "should" not

[15:41:56.0611] <bakkot>
"implementations should not create any with the exception of document.all"

[15:42:00.0633] <bakkot>
should've said "must"

[15:42:22.0916] <ljharb>
still could

[15:43:09.0856] <Michael Ficarra>
^

[15:43:12.0141] <bakkot>
with consensus, which, I definitely do not care enough about this to spend committee time on it

[15:43:24.0213] <Michael Ficarra>
also, now I've noticed that there's an issue with B.3.6.3 https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-typeof

[15:44:17.0740] <bakkot>
what's the issue?

[15:44:41.0610] <Michael Ficarra>
the left column of that table should separate all language values unambiguously

[15:45:01.0817] <Michael Ficarra>
an object with `[[IsHTMLDDA]]` will always fall into two rows

[15:45:10.0479] <Michael Ficarra>
either it has `[[Call]]` or it doesn't

[15:48:45.0981] <Michael Ficarra>
we should just have it insert a step into 13.5.3.1 instead of a row into the table

[15:53:31.0030] <Michael Ficarra>
https://github.com/tc39/ecma262/issues/2685


2022-03-09
[15:15:34.0307] <bakkot>
262 editors are planning on changing out `the result of evaluating |Whatever|` with `Evaluation of |Whatever|`, to better match other SDOs (`NamedEvaluation of |Whatever|`, etc)

this makes it more consistent with the rest of the spec and also works better with tooling

if anyone strongly objects to this change, speak now


2022-03-10
[16:16:36.0822] <shu>
so many editors in agreement

[16:32:50.0575] <bakkot>
shu: array find-from-last shipped unflagged in M97, right?

[16:32:55.0964] <bakkot>
should probably close https://bugs.chromium.org/p/v8/issues/detail?id=11990 if that's so

[16:33:25.0691] <bakkot>
 * shu: array find-from-last shipped unflagged in M97, right?

[16:33:56.0690] <shu>
good call, done

[02:57:54.0594] <Jack Works>
can anyone access https://jschoi.org/21/es-dataflow/map/ ?

[02:59:06.0403] <nicolo-ribaudo>
No

[02:59:37.0342] <nicolo-ribaudo>
I get an error even on your homepage

[03:44:48.0507] <legendecas>
> <@jackworks:matrix.org> can anyone access https://jschoi.org/21/es-dataflow/map/ ?

Not sure if jschoi removed it intentionally. I'm assuming it's not since the whole site is down. You can try https://web.archive.org/web/20220121194801if_/https://cdn.glitch.me/fce49fe7-f83b-4170-90d5-ab11ebc3ff25/21--es-dataflow--map.png

[06:21:47.0649] <jschoi>
Jack Works, legendecas, nicolo-ribaudo: Thanks for letting me know. My website hostâ€™s DNS settings had changed for some reason. I just updated them, so the website including the dataflow article should work now (though it might take up to several hours for the new DNS records to propagate).

[06:22:38.0994] <jschoi>
 * Jack Works, legendecas, nicolo-ribaudo: Thanks for letting me know. My website hostâ€™s DNS settings had changed for some reason. I just updated them, so the website including the dataflow article should work now (though it might take up to several hours for the new DNS records to propagate).

[13:24:55.0557] <rkirsling>
wait what's this about an in-person meeting?

[13:25:12.0402] <rkirsling>
first I'm catching wind of that

[13:27:45.0069] <Rob Palmer>
It was announced as part of the 2022 schedule last year. And in the last meeting I said I would give an update in the next plenary to confirm the details. 

I shall be sending out a Reflector post soon to collect numbers and feedback. It is hosted by OpenJS in Austin, Texas. The OpenJS organisers themselves plan to make a call on whether to proceed in just over a week. So it will also depend on their stance. 

[13:29:20.0726] <Rob Palmer>
We will still have dial in as always and there will be no pressure to attend in person. 

[13:41:17.0336] <devsnek>
i hope they cancel it

[13:43:45.0962] <shu>
austin in summer is not the kind of weather i'd travel for

[13:45:41.0319] <devsnek>
erights phoddie do you have any additional info on this weakmap implementation ðŸ‘€

[13:49:59.0146] <Luca Casonato>
These recent Texas news are also not really making me super enthused about traveling there anymore

[14:23:18.0209] <rkirsling>
true, I think I would wait yet

[14:44:52.0042] <ljharb>
(both June and September are loosely planned to be in-person, as i understand it)

