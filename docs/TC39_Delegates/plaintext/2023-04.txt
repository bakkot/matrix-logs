2023-04-01
[18:26:35.0385] <Chris de Almeida>
https://github.com/tc39/how-we-work/issues/94

☝️ 🚨  important calendar info  🚨 ☝️

[18:26:50.0945] <Chris de Almeida>
 * https://github.com/tc39/how-we-work/issues/94#issuecomment-1492775885

☝️ 🚨  important calendar info  🚨 ☝️


2023-04-03
[22:08:13.0803] <ljharb>
ES2023: https://github.com/tc39/Reflector/issues/466

[16:03:42.0565] <shu>
Michael Ficarra: did you intend step 5 of https://tc39.es/proposal-iterator-helpers/#sec-iteratorprototype.reduce to be "not present", as in an arguments length check? it is consistent with Array.prototype.reduce, but is generally weirder than just checking for undefined nowadays

[16:06:41.0132] <Michael Ficarra>
hmm, yeah it seems like the right call, as that's how we distinguish two pretty radically different behaviors

[16:07:27.0736] <Michael Ficarra>
reduce can either be passed the initial memo (which is perfectly reasonable to be `undefined`) or it can assume the structure is non-empty and use the first element as the initial memo

[16:07:52.0971] <Michael Ficarra>
I think a presence check is the only thing we can do short of separating `reduce` and `reduce1`

[16:07:59.0791] <shu>
ah good point, undefined is a good initial value, so the only choice here is an arguments length check

[16:08:03.0593] <shu>
thanks


2023-04-04
[17:13:30.0800] <TabAtkins>
Yeah, reduce() def needs the presence check rather than undefinedness.

[18:33:10.0051] <Michael Ficarra>
shu: FYI there's another 2 iterator helper topics added to the May agenda

[18:33:23.0766] <Michael Ficarra>
they're some minor inconsistencies that I discovered while working on the tests

[18:34:12.0075] <Michael Ficarra>
the slides should be self-explanatory

[18:45:19.0695] <shu>
do they really need 30 minutes each

[18:47:36.0715] <Michael Ficarra>
hopefully not

