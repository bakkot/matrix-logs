2021-08-01

2021-08-02

2021-08-03
[06:23:16.0421] <Sergey Rubanov>
Agenda for today's wasm CG call also include string encoding discussion https://github.com/WebAssembly/meetings/blob/main/main/2021/CG-08-03.md


2021-08-04
[01:09:00.0524] <Rob Palmer>
Please could I get a review for https://github.com/tc39/notes/pull/144


2021-08-05

2021-08-06
[15:15:09.0146] <jschoi>
I’d like to champion my first (small) proposal (as a delegate from Indiana University) and get it added to the August meeting’s agenda. I’ve never done this before—do I just open a pull request to tc39/agendas?
 (The proposal is at https://github.com/js-choi/proposal-array-async-from, with specification at https://jschoi.org/21/es-array-async-from/. No slides yet.)

[15:15:31.0250] <jschoi>
* I’d like to champion my first (small) proposal (as a delegate from Indiana University) and get it added to the August meeting’s agenda. I’ve never done this on my own before—do I just open a pull request to tc39/agendas?
 (The proposal is at https://github.com/js-choi/proposal-array-async-from, with specification at https://jschoi.org/21/es-array-async-from/. No slides yet.)

[16:22:23.0754] <bakkot>
jschoi: yup, that's all! you do need to open the PR >= 10 days before the meeting, so people get a chance to review, but you've got another couple of weeks before that deadline

[16:22:35.0554] <bakkot>
(though earlier is better, of course)

[16:22:42.0522] <jschoi>
bakkot: Thank you!

[16:30:49.0968] <bakkot>
jschoi: commentary on the proposal: I like it, but you should be aware that the iterator helpers proposal includes a `toArray` method on async iterators which accomplishes the same thing, so you might get pushback on it being duplicated with that

[16:30:56.0119] <bakkot>
personally I think it's fine though

[16:53:24.0287] <jschoi>
Heh, if they’re already fine with duplicating `Array.from`, then surely they could stand a little more duplication with an `Array.asyncFrom`.

[16:54:07.0580] <jschoi>
* Heh, if they’re already fine with duplicating `Array.from`, then surely they could stand a little more duplication with an `Array.asyncFrom`. 
Anyways, thanks, and we’ll see.


2021-08-07

2021-08-08
[18:25:11.0317] <Jack Works>
hi bakkot I have to say I really like the alternative design of do expression (https://github.com/theScottyJam/proposal-statements-as-expressions/issues/3)

[18:25:35.0970] <Jack Works>
IMO that's the real meaningful way to turn statements into expressions

[18:25:55.0640] <Jack Works>
without the complex early errors that do expressions currently have

[18:26:38.0504] <Jack Works>
and my idea in the link above also allows the "temp variable" case.

[18:27:33.0393] <Jack Works>
To be short: We add `if expression` and `try expression`. (`throw expression` has it's own proposal, `switch` has `pattern matching` as the expression version)

[18:28:51.0600] <Jack Works>
Then we add a `ExprBlock`, that in form of
`{`
`OneOrMore Declaration or Expression`
`Expression``}`)

[18:29:07.0216] <Jack Works>
 * Then we add a `ExprBlock`, that in the form of
`{`
`OneOrMore Declaration or Expression`
`Expression`
`}`

[18:29:19.0656] <Jack Works>
 * Then we add a `ExprBlock`, that in the form of
expr `{`
`OneOrMore Declaration or Expression`
`Expression`
`}`

[18:29:50.0098] <Jack Works>
So we can do

```js
const sth = expr {
    const tmp = random()
    tmp * tmp
}
```

[18:30:42.0593] <Jack Works>
meanwhile `for` loop, `break`, `continue`, `return`, `if-without-else` are naturally syntax error in the form above.

[18:31:39.0290] <Jack Works>
That brings more composable syntax sets for developer to use (`if expression`, `try expression`, `pattern matching`, `throw expression`, `expression block`, ...)

[18:32:07.0390] <Jack Works>
cc HE Shi-Jun I guess you will like this idea too

[18:35:37.0500] <Jack Works>
(and I still don't think using break continue and return in the expression position is a good idea)

[23:31:54.0179] <bakkot>
Jack Works: thanks for the suggestion, I'll take a look in a bit

[23:44:31.0139] <Jack Works>
> <@bakkot:matrix.org> Jack Works: thanks for the suggestion, I'll take a look in a bit

I have posted into the GitHub issue


2021-08-09
[01:55:24.0434] <littledan>
The code of conduct continues to mention former members as if they are current. Is someone planning on updating this list? https://tc39.es/code-of-conduct/#code-of-conduct-committee


2021-08-10

2021-08-11

2021-08-12

2021-08-13
[10:01:58.0003] <bakkot>
anyone interested in the arraybuffer-base64 proposal, please sign up for the incubator call: https://github.com/tc39/incubator-agendas/issues/19

[10:31:11.0188] <shu>
that's the charter, the call issue is here: https://github.com/tc39/Reflector/issues/393


2021-08-14

2021-08-15

2021-08-16

2021-08-17

2021-08-18

2021-08-19

2021-08-20

2021-08-21

2021-08-22

2021-08-23
[16:21:05.0478] <TabAtkins>
Could we get https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org?via=matrix.org&via=igalia.com added to the TC39 space?

[16:22:28.0133] <TabAtkins>
Rob Palmer maybe?

[16:24:22.0651] <Rob Palmer>
Done


2021-08-24
[02:27:52.0256] <ryzokuken>
Hm, makes me think if we should add the Temporal champions room to the space as well...

[02:28:30.0788] <ryzokuken>
for discoverability if nothing else


2021-08-25
[12:18:23.0840] <yulia>
hey, a thought -- we are quite packed for this meeting

[12:18:44.0855] <yulia>
how about we do blitz updates? for those who are willing to significantly shorten their presentations

[12:19:03.0253] <yulia>
so, for example i can shorten my presentation to 3 minutes maybe?

[12:24:45.0394] <Rob Palmer>
This is a good idea! Please update the agenda if you are willing to shorten your session.

As inspiration, I recommend reading the minutes for Chip's updates on ECMA-404. They are admirably short. Be like Chip.

[12:26:24.0680] <yulia>
maybe we can do it lightning talk style, people update their thing with "blitz" or somethinig, and we set aside 15-20 minutes for all of them?

[12:39:23.0277] <littledan>
Maybe also, at the beginning of the meeting and topics, we can give people an extra chance to shorten their timebox?

[12:51:23.0113] <shu>
+1 can't rely on enough delegates reading this channel outside of plenary

[13:08:03.0325] <ptomato>
I would be happy to shorten the Temporal item if delegates feel like they had enough of a chance to review the slides and the normative PRs being presented beforehand, and they prove uncontroversial (as I hope they will). I don't know if I can count on that happening, though.


2021-08-26

2021-08-27

2021-08-28

2021-08-29

2021-08-30
[08:41:28.0252] <Rob Palmer>
This special meeting (non-plenary) begins in 20 mins (09:00PDT).  https://github.com/tc39/Reflector/issues/394

[08:50:14.0243] <Rob Palmer>
Reminder:  There is a spreadsheet linked from that issue ^^^ that lets you enter questions ahead of time.  I encourage folk to use it to assist record keeping.

[11:42:29.0413] <sffc>
Do the chairs plan to publish a schedule of timeboxes for this week's TC39 meeting on HackMD as has been done in the past?

[11:48:00.0154] <Rob Palmer>
Yes. We slightly delayed publishing to allow for timebox reductions. There is way too much on the agenda. 


2021-08-31
[18:19:50.0430] <jschoi>
https://github.com/tc39/Reflector/issues/388 says, “Sign-in form will be added before the meeting - fill in the sign-in form and you'll get the link”. Sorry for bothering, but where’s the sign-in form?

[18:25:30.0854] <bakkot>
presumably it'll be added in the next 12.5 hours

[20:42:51.0236] <Aki>
sorry i didn't get the schedule up earlier y'all

[22:31:34.0523] <Aki>
oh my look at that overflow https://hackmd.io/@tc39-chairs/rJJlSXjbF

[06:51:09.0728] <Rob Palmer>
The meeting starts in 9 mins

[06:51:25.0223] <Rob Palmer>
if anyone is having trouble joining, please say

[06:57:47.0368] <ryzokuken>
nothing to report for ECMA-402 btw

[06:57:57.0866] <ryzokuken>
and I'll try to speedrun my DurationFormat presentation

[06:59:25.0925] <bradleymeck>
Rob Palmer: don't see the sign-in form on reflector?

[06:59:44.0278] <bradleymeck>
or... i'm looking at wrong meeting...

[06:59:52.0959] <Rob Palmer>
https://github.com/tc39/Reflector/issues/388

[06:59:55.0183] <Jamie Kyle>
Issue 388, under "Video Conference"

[07:00:18.0488] <Rob Palmer>
(we can put reflector links here, but not the signin form or the notes)

[07:00:47.0782] <Rob Palmer>
Room subject updated!

[07:10:22.0647] <rbuckton>
experiencing technical difficulties, will rejoin jitsi shortly

[07:13:32.0688] <Jamie Kyle>
oh im sorry

[07:17:35.0160] <rbuckton>
jitsi does not seem to like my webcam.

[07:18:11.0823] <Aki>
rbuckton: i saw you for a sec!

[07:19:21.0739] <Michael Ficarra>
thanks for taking that one, ljharb 

[07:19:49.0045] <Michael Ficarra>
I had to step away and the moment I got back and sat down, my topic was up lol

[07:19:51.0701] <Michael Ficarra>
I just got flustered

[07:23:01.0096] <bakkot>
slides, for anyone with technical difficulties: https://docs.google.com/presentation/d/177vM52Cd6Dij-ta6vmw4Wi1sCKrzbCKjavSBpbdz9fM/edit

[07:26:09.0569] <Michael Ficarra>
I think optional catch went straight to stage 3 in one meeting and then stage 4 the next meeting?

[07:26:12.0456] <Michael Ficarra>
it was fast

[07:26:43.0838] <ljharb>
behind optional catch, fastest includes Object.hasOwn, Object.fromEntries, Object.entries/values, iirc

[07:27:09.0981] <shu>
i see

[07:27:19.0157] <Michael Ficarra>
I think there were some really fast String.prototype ones, too

[07:27:24.0361] <Ashley Claymore>
note for tcq. Item 8, change-array-by-copy. I'll be presenting, instead of Robin.

[07:27:27.0114] <shu>
i should be proposing stuff to be under Object for a faster speed then

[07:27:57.0889] <littledan>
it'd be great if we can call for explicit support for consensus

[07:28:01.0042] <Michael Ficarra>
shu: Object.at when?

[07:28:08.0336] <ryzokuken>
Ashley Claymore: IIUC, the presenter listed in TCQ doesn't matter all that much

[07:28:10.0160] <littledan>
maybe getting a couple people to support things for each stage advancement

[07:29:20.0346] <jschoi>
Where’s the question queue? Is it just the 8x8 Meet chat, or is it something special?

[07:29:40.0279] <ryzokuken>
jschoi: TCQ

[07:29:45.0789] <ryzokuken>
there's a link in reflector

[07:29:59.0361] <jschoi>
Thank you!

[07:32:17.0857] <rbuckton>
Any reason why I shouldn't tweet about `static {}` achieving stage 4 consensus?

[07:34:58.0126] <Michael Ficarra>
we didn't add flatMap to TypedArray? 🤔

[07:36:25.0899] <shu>
is there a usecase?

[07:36:41.0732] <ljharb>
rbuckton: go for it, commit's pushed to the proposals repo already

[07:41:13.0488] <devsnek>
hello everyone

[07:44:39.0930] <bakkot>
we should add `setAt` to arrays

[07:44:42.0960] <bakkot>
solves this problem

[07:45:48.0863] <TabAtkins>
I mean we probably should add set() to arrays, if TypedArray has it

[07:46:06.0650] <TabAtkins>
kinda weird otherwise

[07:46:18.0454] <ljharb>
not stoked about adding more mutators to Array.prototype tho

[07:46:35.0663] <TabAtkins>
it's cool it's just an alias

[07:46:49.0353] <TabAtkins>
(with negative-wrapping magic, granted)

[07:47:45.0275] <devsnek>
there's a simple two step solution here:
1) at() returns a reference instead of a value
2) change assignment semantics to allow new values to be returned

[07:48:21.0362] <TabAtkins>
ah yes simple

[07:48:51.0610] <shu>
hell yeah brother, we never unshipped function calls as LHS of assignments syntactically

[07:49:22.0023] <bakkot>
TA.p.set throws for negative indices

[07:49:29.0419] <bakkot>
which, I guess we could probably change that to wrap like `.at`

[07:51:12.0743] <bakkot>
though actually TA.p.set has this behavior where it spreads arrays which are passed, which we would probably not want to do with A.p.set

[07:51:20.0109] <bakkot>
so maybe not actually feasible to copy it over

[07:51:44.0942] <rbuckton>
> <@ljharb:matrix.org> rbuckton: go for it, commit's pushed to the proposals repo already

I shouldn't have waited, Rick Waldron beat me to it :) He has a larger audience though, so I'm happy either way.

[07:52:02.0674] <ljharb>
lol you can still tweet about your own proposal even if others have

[07:52:05.0227] <ljharb>
but up to you ofc

[07:52:34.0201] <rbuckton>
Already did. 

[07:53:00.0677] <bakkot>
it seems like the list of methods should be decided before stage 2?

[07:54:18.0705] <rbuckton>
> <@devsnek:matrix.org> there's a simple two step solution here:
> 1) at() returns a reference instead of a value
> 2) change assignment semantics to allow new values to be returned

I would like to introduce you to my friend https://github.com/rbuckton/proposal-refs (may propose soon depending on outcome of Fixed shape objects proposal)

[08:00:02.0102] <bakkot>
I don't get why everything on Tuple needs to be on Array

[08:00:30.0619] <ljharb>
a tuple is conceptually an immutable array

[08:01:34.0018] <littledan>
bakkot: One hope is that it'll be easy to write code that's generic between Tuples and Arrays

[08:01:46.0311] <littledan>
who is objecting to consensus?

[08:02:35.0132] <bakkot>
littledan: so, that seems like a good motivation for all the _access_ methods to work. it seems like a strange goal to say you want _mutating_ code which is generic between Tuples and Arrays, though

[08:02:48.0356] <shu>
Ashley Claymore: please work on a rough initial reduced list and link it here for interested parties before end of the plenary if possible

[08:02:52.0272] <Michael Ficarra>
I am a bit uncomfortable with how this advancement went

[08:03:03.0929] <shu>
why?

[08:03:08.0008] <littledan>
> <@michaelficarra:matrix.org> I am a bit uncomfortable with how this advancement went

Did you want to block it?

[08:03:09.0547] <rbuckton>
I was about to point out that @aki's mic was making noise, but I think she said her mic went out and it seems to be better now.

[08:03:12.0138] <littledan>
I mean, the wording was a bit weird

[08:03:22.0727] <shu>
i mean the timebox rushing is uncomfortable but i don't think there was actual objection

[08:03:28.0677] <littledan>
if someone was on the queue and wanted to block, that should of course be respected

[08:03:33.0147] <littledan>
I didn't see what the timebox items were

[08:03:38.0765] <littledan>
 * I didn't see what the queue items were

[08:03:43.0206] <shu>
since mozilla worked it out and kevin and i wanna see a list

[08:03:56.0541] <shu>
and that list... can just be communicated here, since nobody else asked for it

[08:04:25.0757] <Michael Ficarra>
I just feel like there wasn't agreement between the chairs and the rest of the committee about whether we covered everything sufficiently for advancement

[08:04:50.0789] <littledan>
it would've taken the same amount of time to ask, "is there consensus?" and give 15 seconds of uncomfortable silence for anyone to interject, as to have that argument

[08:05:00.0380] <littledan>
maybe we can add that as a blitz bonus topic

[08:05:28.0073] <littledan>
anyway chairing is hard; Aki is doing well

[08:07:06.0228] <bterlson>
The queue items weren't blockers, but in the future if we run up against timebox and someone raises a question we will move on even if there are no obvious objections.

[08:07:30.0925] <Michael Ficarra>
I am fine with moving on without advancement whenever we're even a second over timebox, but rushing advancement, whether within or without timebox, doesn't seem right

[08:08:16.0064] <Aki>
Michael Ficarra: i don't disagree. i think I should have held firm.

[08:10:21.0725] <Ashley Claymore>
> <@shuyuguo:matrix.org> Ashley Claymore: please work on a rough initial reduced list and link it here for interested parties before end of the plenary if possible

Will do. In the mean time there is discussion here if useful https://github.com/tc39/proposal-change-array-by-copy/issues/27

[08:16:43.0603] <Michael Ficarra>
ryzokuken: I'm still happy to review

[08:18:06.0800] <Michael Ficarra>
I ❤️ this proposal

[08:19:16.0050] <ryzokuken>
thanks Michael Ficarra 😇

[08:20:01.0987] <Aki>
TabAtkins: & jschoi  y'all want to hop on that next 30 min slot?

[08:20:10.0167] <TabAtkins>
i'm ready for it

[08:21:02.0640] <jschoi>
Ready; hoping my microphone will work.

[08:28:47.0291] <bakkot>
honestly it actually does seem a little bit analogous to shadow DOM

[08:30:34.0630] <TabAtkins>
"analogous to" isn't always great if it doesn't actually hook into the same concept tho. "this is theoretically similar to shadow DOM, but doesn't actually have anything to do with shadow DOM" can be problematic for learning.

[08:30:37.0243] <ljharb>
if it is analogous then that's a stronger argument _for_ this name

[08:30:51.0413] <ljharb>
 * if it is analogous then that's a stronger argument _for_ this name

[08:31:35.0946] <TabAtkins>
I'm not objecting, but I suspect the HTML/DOM editors might have an opinion on it

[08:31:49.0737] <shu>
i confirmed with domenic he's fine with SHadowRealm

[08:31:51.0942] <bakkot>
Domenic has been involved in the thread at least

[08:31:53.0815] <shu>
could ask anne i guess

[08:31:55.0692] <devsnek>
i don't get the analogy to shadow dom personally

[08:34:19.0420] <bakkot>
shadow dom and shadow realm both have the property of, it's a separate X where changes in it do not affect the main X except through specific boundaries

