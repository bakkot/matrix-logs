2021-08-01

2021-08-02

2021-08-03
[06:23:16.0421] <Sergey Rubanov>
Agenda for today's wasm CG call also include string encoding discussion https://github.com/WebAssembly/meetings/blob/main/main/2021/CG-08-03.md


2021-08-04
[01:09:00.0524] <Rob Palmer>
Please could I get a review for https://github.com/tc39/notes/pull/144


2021-08-05

2021-08-06
[15:15:09.0146] <jschoi>
I’d like to champion my first (small) proposal (as a delegate from Indiana University) and get it added to the August meeting’s agenda. I’ve never done this before—do I just open a pull request to tc39/agendas?
 (The proposal is at https://github.com/js-choi/proposal-array-async-from, with specification at https://jschoi.org/21/es-array-async-from/. No slides yet.)

[15:15:31.0250] <jschoi>
* I’d like to champion my first (small) proposal (as a delegate from Indiana University) and get it added to the August meeting’s agenda. I’ve never done this on my own before—do I just open a pull request to tc39/agendas?
 (The proposal is at https://github.com/js-choi/proposal-array-async-from, with specification at https://jschoi.org/21/es-array-async-from/. No slides yet.)

[16:22:23.0754] <bakkot>
jschoi: yup, that's all! you do need to open the PR >= 10 days before the meeting, so people get a chance to review, but you've got another couple of weeks before that deadline

[16:22:35.0554] <bakkot>
(though earlier is better, of course)

[16:22:42.0522] <jschoi>
bakkot: Thank you!

[16:30:49.0968] <bakkot>
jschoi: commentary on the proposal: I like it, but you should be aware that the iterator helpers proposal includes a `toArray` method on async iterators which accomplishes the same thing, so you might get pushback on it being duplicated with that

[16:30:56.0119] <bakkot>
personally I think it's fine though

[16:53:24.0287] <jschoi>
Heh, if they’re already fine with duplicating `Array.from`, then surely they could stand a little more duplication with an `Array.asyncFrom`.

[16:54:07.0580] <jschoi>
* Heh, if they’re already fine with duplicating `Array.from`, then surely they could stand a little more duplication with an `Array.asyncFrom`. 
Anyways, thanks, and we’ll see.


2021-08-07

2021-08-08
[18:25:11.0317] <Jack Works>
hi bakkot I have to say I really like the alternative design of do expression (https://github.com/theScottyJam/proposal-statements-as-expressions/issues/3)

[18:25:35.0970] <Jack Works>
IMO that's the real meaningful way to turn statements into expressions

[18:25:55.0640] <Jack Works>
without the complex early errors that do expressions currently have

[18:26:38.0504] <Jack Works>
and my idea in the link above also allows the "temp variable" case.

[18:27:33.0393] <Jack Works>
To be short: We add `if expression` and `try expression`. (`throw expression` has it's own proposal, `switch` has `pattern matching` as the expression version)

[18:28:51.0600] <Jack Works>
Then we add a `ExprBlock`, that in form of
`{`
`OneOrMore Declaration or Expression`
`Expression``}`)

[18:29:07.0216] <Jack Works>
 * Then we add a `ExprBlock`, that in the form of
`{`
`OneOrMore Declaration or Expression`
`Expression`
`}`

[18:29:19.0656] <Jack Works>
 * Then we add a `ExprBlock`, that in the form of
expr `{`
`OneOrMore Declaration or Expression`
`Expression`
`}`

[18:29:50.0098] <Jack Works>
So we can do

```js
const sth = expr {
    const tmp = random()
    tmp * tmp
}
```

[18:30:42.0593] <Jack Works>
meanwhile `for` loop, `break`, `continue`, `return`, `if-without-else` are naturally syntax error in the form above.

[18:31:39.0290] <Jack Works>
That brings more composable syntax sets for developer to use (`if expression`, `try expression`, `pattern matching`, `throw expression`, `expression block`, ...)

[18:32:07.0390] <Jack Works>
cc HE Shi-Jun I guess you will like this idea too

[18:35:37.0500] <Jack Works>
(and I still don't think using break continue and return in the expression position is a good idea)

[23:31:54.0179] <bakkot>
Jack Works: thanks for the suggestion, I'll take a look in a bit

[23:44:31.0139] <Jack Works>
> <@bakkot:matrix.org> Jack Works: thanks for the suggestion, I'll take a look in a bit

I have posted into the GitHub issue

