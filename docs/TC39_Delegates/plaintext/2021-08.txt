2021-08-01

2021-08-02

2021-08-03
[06:23:16.0421] <Sergey Rubanov>
Agenda for today's wasm CG call also include string encoding discussion https://github.com/WebAssembly/meetings/blob/main/main/2021/CG-08-03.md


2021-08-04
[01:09:00.0524] <Rob Palmer>
Please could I get a review for https://github.com/tc39/notes/pull/144


2021-08-05

2021-08-06
[15:15:09.0146] <jschoi>
I’d like to champion my first (small) proposal (as a delegate from Indiana University) and get it added to the August meeting’s agenda. I’ve never done this before—do I just open a pull request to tc39/agendas?
 (The proposal is at https://github.com/js-choi/proposal-array-async-from, with specification at https://jschoi.org/21/es-array-async-from/. No slides yet.)

[15:15:31.0250] <jschoi>
* I’d like to champion my first (small) proposal (as a delegate from Indiana University) and get it added to the August meeting’s agenda. I’ve never done this on my own before—do I just open a pull request to tc39/agendas?
 (The proposal is at https://github.com/js-choi/proposal-array-async-from, with specification at https://jschoi.org/21/es-array-async-from/. No slides yet.)

[16:22:23.0754] <bakkot>
jschoi: yup, that's all! you do need to open the PR >= 10 days before the meeting, so people get a chance to review, but you've got another couple of weeks before that deadline

[16:22:35.0554] <bakkot>
(though earlier is better, of course)

[16:22:42.0522] <jschoi>
bakkot: Thank you!

[16:30:49.0968] <bakkot>
jschoi: commentary on the proposal: I like it, but you should be aware that the iterator helpers proposal includes a `toArray` method on async iterators which accomplishes the same thing, so you might get pushback on it being duplicated with that

[16:30:56.0119] <bakkot>
personally I think it's fine though

[16:53:24.0287] <jschoi>
Heh, if they’re already fine with duplicating `Array.from`, then surely they could stand a little more duplication with an `Array.asyncFrom`.

[16:54:07.0580] <jschoi>
* Heh, if they’re already fine with duplicating `Array.from`, then surely they could stand a little more duplication with an `Array.asyncFrom`. 
Anyways, thanks, and we’ll see.


2021-08-07

2021-08-08
[18:25:11.0317] <Jack Works>
hi bakkot I have to say I really like the alternative design of do expression (https://github.com/theScottyJam/proposal-statements-as-expressions/issues/3)

[18:25:35.0970] <Jack Works>
IMO that's the real meaningful way to turn statements into expressions

[18:25:55.0640] <Jack Works>
without the complex early errors that do expressions currently have

[18:26:38.0504] <Jack Works>
and my idea in the link above also allows the "temp variable" case.

[18:27:33.0393] <Jack Works>
To be short: We add `if expression` and `try expression`. (`throw expression` has it's own proposal, `switch` has `pattern matching` as the expression version)

[18:28:51.0600] <Jack Works>
Then we add a `ExprBlock`, that in form of
`{`
`OneOrMore Declaration or Expression`
`Expression``}`)

[18:29:07.0216] <Jack Works>
 * Then we add a `ExprBlock`, that in the form of
`{`
`OneOrMore Declaration or Expression`
`Expression`
`}`

[18:29:19.0656] <Jack Works>
 * Then we add a `ExprBlock`, that in the form of
expr `{`
`OneOrMore Declaration or Expression`
`Expression`
`}`

[18:29:50.0098] <Jack Works>
So we can do

```js
const sth = expr {
    const tmp = random()
    tmp * tmp
}
```

[18:30:42.0593] <Jack Works>
meanwhile `for` loop, `break`, `continue`, `return`, `if-without-else` are naturally syntax error in the form above.

[18:31:39.0290] <Jack Works>
That brings more composable syntax sets for developer to use (`if expression`, `try expression`, `pattern matching`, `throw expression`, `expression block`, ...)

[18:32:07.0390] <Jack Works>
cc HE Shi-Jun I guess you will like this idea too

[18:35:37.0500] <Jack Works>
(and I still don't think using break continue and return in the expression position is a good idea)

[23:31:54.0179] <bakkot>
Jack Works: thanks for the suggestion, I'll take a look in a bit

[23:44:31.0139] <Jack Works>
> <@bakkot:matrix.org> Jack Works: thanks for the suggestion, I'll take a look in a bit

I have posted into the GitHub issue


2021-08-09
[01:55:24.0434] <littledan>
The code of conduct continues to mention former members as if they are current. Is someone planning on updating this list? https://tc39.es/code-of-conduct/#code-of-conduct-committee


2021-08-10

2021-08-11

2021-08-12

2021-08-13
[10:01:58.0003] <bakkot>
anyone interested in the arraybuffer-base64 proposal, please sign up for the incubator call: https://github.com/tc39/incubator-agendas/issues/19

[10:31:11.0188] <shu>
that's the charter, the call issue is here: https://github.com/tc39/Reflector/issues/393


2021-08-14

2021-08-15

2021-08-16

2021-08-17

2021-08-18

2021-08-19

2021-08-20

2021-08-21

2021-08-22

2021-08-23
[16:21:05.0478] <TabAtkins>
Could we get https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org?via=matrix.org&via=igalia.com added to the TC39 space?

[16:22:28.0133] <TabAtkins>
Rob Palmer maybe?

[16:24:22.0651] <Rob Palmer>
Done


2021-08-24
[02:27:52.0256] <ryzokuken>
Hm, makes me think if we should add the Temporal champions room to the space as well...

[02:28:30.0788] <ryzokuken>
for discoverability if nothing else


2021-08-25
[12:18:23.0840] <yulia>
hey, a thought -- we are quite packed for this meeting

[12:18:44.0855] <yulia>
how about we do blitz updates? for those who are willing to significantly shorten their presentations

[12:19:03.0253] <yulia>
so, for example i can shorten my presentation to 3 minutes maybe?

[12:24:45.0394] <Rob Palmer>
This is a good idea! Please update the agenda if you are willing to shorten your session.

As inspiration, I recommend reading the minutes for Chip's updates on ECMA-404. They are admirably short. Be like Chip.

[12:26:24.0680] <yulia>
maybe we can do it lightning talk style, people update their thing with "blitz" or somethinig, and we set aside 15-20 minutes for all of them?

[12:39:23.0277] <littledan>
Maybe also, at the beginning of the meeting and topics, we can give people an extra chance to shorten their timebox?

[12:51:23.0113] <shu>
+1 can't rely on enough delegates reading this channel outside of plenary

[13:08:03.0325] <ptomato>
I would be happy to shorten the Temporal item if delegates feel like they had enough of a chance to review the slides and the normative PRs being presented beforehand, and they prove uncontroversial (as I hope they will). I don't know if I can count on that happening, though.


2021-08-26

2021-08-27

2021-08-28

2021-08-29

2021-08-30
[08:41:28.0252] <Rob Palmer>
This special meeting (non-plenary) begins in 20 mins (09:00PDT).  https://github.com/tc39/Reflector/issues/394

[08:50:14.0243] <Rob Palmer>
Reminder:  There is a spreadsheet linked from that issue ^^^ that lets you enter questions ahead of time.  I encourage folk to use it to assist record keeping.

[11:42:29.0413] <sffc>
Do the chairs plan to publish a schedule of timeboxes for this week's TC39 meeting on HackMD as has been done in the past?

[11:48:00.0154] <Rob Palmer>
Yes. We slightly delayed publishing to allow for timebox reductions. There is way too much on the agenda. 


2021-08-31
[18:19:50.0430] <jschoi>
https://github.com/tc39/Reflector/issues/388 says, “Sign-in form will be added before the meeting - fill in the sign-in form and you'll get the link”. Sorry for bothering, but where’s the sign-in form?

[18:25:30.0854] <bakkot>
presumably it'll be added in the next 12.5 hours

[20:42:51.0236] <Aki>
sorry i didn't get the schedule up earlier y'all

[22:31:34.0523] <Aki>
oh my look at that overflow https://hackmd.io/@tc39-chairs/rJJlSXjbF

