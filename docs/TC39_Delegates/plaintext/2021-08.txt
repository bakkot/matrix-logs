2021-08-01

2021-08-02

2021-08-03
[06:23:16.0421] <Sergey Rubanov>
Agenda for today's wasm CG call also include string encoding discussion https://github.com/WebAssembly/meetings/blob/main/main/2021/CG-08-03.md


2021-08-04
[01:09:00.0524] <Rob Palmer>
Please could I get a review for https://github.com/tc39/notes/pull/144


2021-08-05

2021-08-06
[15:15:09.0146] <jschoi>
I’d like to champion my first (small) proposal (as a delegate from Indiana University) and get it added to the August meeting’s agenda. I’ve never done this before—do I just open a pull request to tc39/agendas?
 (The proposal is at https://github.com/js-choi/proposal-array-async-from, with specification at https://jschoi.org/21/es-array-async-from/. No slides yet.)

[15:15:31.0250] <jschoi>
* I’d like to champion my first (small) proposal (as a delegate from Indiana University) and get it added to the August meeting’s agenda. I’ve never done this on my own before—do I just open a pull request to tc39/agendas?
 (The proposal is at https://github.com/js-choi/proposal-array-async-from, with specification at https://jschoi.org/21/es-array-async-from/. No slides yet.)

[16:22:23.0754] <bakkot>
jschoi: yup, that's all! you do need to open the PR >= 10 days before the meeting, so people get a chance to review, but you've got another couple of weeks before that deadline

[16:22:35.0554] <bakkot>
(though earlier is better, of course)

[16:22:42.0522] <jschoi>
bakkot: Thank you!

[16:30:49.0968] <bakkot>
jschoi: commentary on the proposal: I like it, but you should be aware that the iterator helpers proposal includes a `toArray` method on async iterators which accomplishes the same thing, so you might get pushback on it being duplicated with that

[16:30:56.0119] <bakkot>
personally I think it's fine though

[16:53:24.0287] <jschoi>
Heh, if they’re already fine with duplicating `Array.from`, then surely they could stand a little more duplication with an `Array.asyncFrom`.

[16:54:07.0580] <jschoi>
* Heh, if they’re already fine with duplicating `Array.from`, then surely they could stand a little more duplication with an `Array.asyncFrom`. 
Anyways, thanks, and we’ll see.


2021-08-07

2021-08-08
[18:25:11.0317] <Jack Works>
hi bakkot I have to say I really like the alternative design of do expression (https://github.com/theScottyJam/proposal-statements-as-expressions/issues/3)

[18:25:35.0970] <Jack Works>
IMO that's the real meaningful way to turn statements into expressions

[18:25:55.0640] <Jack Works>
without the complex early errors that do expressions currently have

[18:26:38.0504] <Jack Works>
and my idea in the link above also allows the "temp variable" case.

[18:27:33.0393] <Jack Works>
To be short: We add `if expression` and `try expression`. (`throw expression` has it's own proposal, `switch` has `pattern matching` as the expression version)

[18:28:51.0600] <Jack Works>
Then we add a `ExprBlock`, that in form of
`{`
`OneOrMore Declaration or Expression`
`Expression``}`)

[18:29:07.0216] <Jack Works>
 * Then we add a `ExprBlock`, that in the form of
`{`
`OneOrMore Declaration or Expression`
`Expression`
`}`

[18:29:19.0656] <Jack Works>
 * Then we add a `ExprBlock`, that in the form of
expr `{`
`OneOrMore Declaration or Expression`
`Expression`
`}`

[18:29:50.0098] <Jack Works>
So we can do

```js
const sth = expr {
    const tmp = random()
    tmp * tmp
}
```

[18:30:42.0593] <Jack Works>
meanwhile `for` loop, `break`, `continue`, `return`, `if-without-else` are naturally syntax error in the form above.

[18:31:39.0290] <Jack Works>
That brings more composable syntax sets for developer to use (`if expression`, `try expression`, `pattern matching`, `throw expression`, `expression block`, ...)

[18:32:07.0390] <Jack Works>
cc HE Shi-Jun I guess you will like this idea too

[18:35:37.0500] <Jack Works>
(and I still don't think using break continue and return in the expression position is a good idea)

[23:31:54.0179] <bakkot>
Jack Works: thanks for the suggestion, I'll take a look in a bit

[23:44:31.0139] <Jack Works>
> <@bakkot:matrix.org> Jack Works: thanks for the suggestion, I'll take a look in a bit

I have posted into the GitHub issue


2021-08-09
[01:55:24.0434] <littledan>
The code of conduct continues to mention former members as if they are current. Is someone planning on updating this list? https://tc39.es/code-of-conduct/#code-of-conduct-committee


2021-08-10

2021-08-11

2021-08-12

2021-08-13
[10:01:58.0003] <bakkot>
anyone interested in the arraybuffer-base64 proposal, please sign up for the incubator call: https://github.com/tc39/incubator-agendas/issues/19

[10:31:11.0188] <shu>
that's the charter, the call issue is here: https://github.com/tc39/Reflector/issues/393


2021-08-14

2021-08-15

2021-08-16

2021-08-17

2021-08-18

2021-08-19

2021-08-20

2021-08-21

2021-08-22

2021-08-23
[16:21:05.0478] <TabAtkins>
Could we get https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org?via=matrix.org&via=igalia.com added to the TC39 space?

[16:22:28.0133] <TabAtkins>
Rob Palmer maybe?

[16:24:22.0651] <Rob Palmer>
Done


2021-08-24
[02:27:52.0256] <ryzokuken>
Hm, makes me think if we should add the Temporal champions room to the space as well...

[02:28:30.0788] <ryzokuken>
for discoverability if nothing else


2021-08-25
[12:18:23.0840] <yulia>
hey, a thought -- we are quite packed for this meeting

[12:18:44.0855] <yulia>
how about we do blitz updates? for those who are willing to significantly shorten their presentations

[12:19:03.0253] <yulia>
so, for example i can shorten my presentation to 3 minutes maybe?

[12:24:45.0394] <Rob Palmer>
This is a good idea! Please update the agenda if you are willing to shorten your session.

As inspiration, I recommend reading the minutes for Chip's updates on ECMA-404. They are admirably short. Be like Chip.

[12:26:24.0680] <yulia>
maybe we can do it lightning talk style, people update their thing with "blitz" or somethinig, and we set aside 15-20 minutes for all of them?

[12:39:23.0277] <littledan>
Maybe also, at the beginning of the meeting and topics, we can give people an extra chance to shorten their timebox?

[12:51:23.0113] <shu>
+1 can't rely on enough delegates reading this channel outside of plenary

[13:08:03.0325] <ptomato>
I would be happy to shorten the Temporal item if delegates feel like they had enough of a chance to review the slides and the normative PRs being presented beforehand, and they prove uncontroversial (as I hope they will). I don't know if I can count on that happening, though.


2021-08-26

2021-08-27

2021-08-28

2021-08-29

2021-08-30
[08:41:28.0252] <Rob Palmer>
This special meeting (non-plenary) begins in 20 mins (09:00PDT).  https://github.com/tc39/Reflector/issues/394

[08:50:14.0243] <Rob Palmer>
Reminder:  There is a spreadsheet linked from that issue ^^^ that lets you enter questions ahead of time.  I encourage folk to use it to assist record keeping.

[11:42:29.0413] <sffc>
Do the chairs plan to publish a schedule of timeboxes for this week's TC39 meeting on HackMD as has been done in the past?

[11:48:00.0154] <Rob Palmer>
Yes. We slightly delayed publishing to allow for timebox reductions. There is way too much on the agenda. 


2021-08-31
[18:19:50.0430] <jschoi>
https://github.com/tc39/Reflector/issues/388 says, “Sign-in form will be added before the meeting - fill in the sign-in form and you'll get the link”. Sorry for bothering, but where’s the sign-in form?

[18:25:30.0854] <bakkot>
presumably it'll be added in the next 12.5 hours

[20:42:51.0236] <Aki>
sorry i didn't get the schedule up earlier y'all

[22:31:34.0523] <Aki>
oh my look at that overflow https://hackmd.io/@tc39-chairs/rJJlSXjbF

[06:51:09.0728] <Rob Palmer>
The meeting starts in 9 mins

[06:51:25.0223] <Rob Palmer>
if anyone is having trouble joining, please say

[06:57:47.0368] <ryzokuken>
nothing to report for ECMA-402 btw

[06:57:57.0866] <ryzokuken>
and I'll try to speedrun my DurationFormat presentation

[06:59:25.0925] <bradleymeck>
Rob Palmer: don't see the sign-in form on reflector?

[06:59:44.0278] <bradleymeck>
or... i'm looking at wrong meeting...

[06:59:52.0959] <Rob Palmer>
https://github.com/tc39/Reflector/issues/388

[06:59:55.0183] <Jamie Kyle>
Issue 388, under "Video Conference"

[07:00:18.0488] <Rob Palmer>
(we can put reflector links here, but not the signin form or the notes)

[07:00:47.0782] <Rob Palmer>
Room subject updated!

[07:10:22.0647] <rbuckton>
experiencing technical difficulties, will rejoin jitsi shortly

[07:13:32.0688] <Jamie Kyle>
oh im sorry

[07:17:35.0160] <rbuckton>
jitsi does not seem to like my webcam.

[07:18:11.0823] <Aki>
rbuckton: i saw you for a sec!

[07:19:21.0739] <Michael Ficarra>
thanks for taking that one, ljharb 

[07:19:49.0045] <Michael Ficarra>
I had to step away and the moment I got back and sat down, my topic was up lol

[07:19:51.0701] <Michael Ficarra>
I just got flustered

[07:23:01.0096] <bakkot>
slides, for anyone with technical difficulties: https://docs.google.com/presentation/d/177vM52Cd6Dij-ta6vmw4Wi1sCKrzbCKjavSBpbdz9fM/edit

[07:26:09.0569] <Michael Ficarra>
I think optional catch went straight to stage 3 in one meeting and then stage 4 the next meeting?

[07:26:12.0456] <Michael Ficarra>
it was fast

[07:26:43.0838] <ljharb>
behind optional catch, fastest includes Object.hasOwn, Object.fromEntries, Object.entries/values, iirc

[07:27:09.0981] <shu>
i see

[07:27:19.0157] <Michael Ficarra>
I think there were some really fast String.prototype ones, too

[07:27:24.0361] <Ashley Claymore>
note for tcq. Item 8, change-array-by-copy. I'll be presenting, instead of Robin.

[07:27:27.0114] <shu>
i should be proposing stuff to be under Object for a faster speed then

[07:27:57.0889] <littledan>
it'd be great if we can call for explicit support for consensus

[07:28:01.0042] <Michael Ficarra>
shu: Object.at when?

[07:28:08.0336] <ryzokuken>
Ashley Claymore: IIUC, the presenter listed in TCQ doesn't matter all that much

[07:28:10.0160] <littledan>
maybe getting a couple people to support things for each stage advancement

[07:29:20.0346] <jschoi>
Where’s the question queue? Is it just the 8x8 Meet chat, or is it something special?

[07:29:40.0279] <ryzokuken>
jschoi: TCQ

[07:29:45.0789] <ryzokuken>
there's a link in reflector

[07:29:59.0361] <jschoi>
Thank you!

[07:32:17.0857] <rbuckton>
Any reason why I shouldn't tweet about `static {}` achieving stage 4 consensus?

[07:34:58.0126] <Michael Ficarra>
we didn't add flatMap to TypedArray? 🤔

[07:36:25.0899] <shu>
is there a usecase?

[07:36:41.0732] <ljharb>
rbuckton: go for it, commit's pushed to the proposals repo already

[07:41:13.0488] <devsnek>
hello everyone

[07:44:39.0930] <bakkot>
we should add `setAt` to arrays

[07:44:42.0960] <bakkot>
solves this problem

[07:45:48.0863] <TabAtkins>
I mean we probably should add set() to arrays, if TypedArray has it

[07:46:06.0650] <TabAtkins>
kinda weird otherwise

[07:46:18.0454] <ljharb>
not stoked about adding more mutators to Array.prototype tho

[07:46:35.0663] <TabAtkins>
it's cool it's just an alias

[07:46:49.0353] <TabAtkins>
(with negative-wrapping magic, granted)

[07:47:45.0275] <devsnek>
there's a simple two step solution here:
1) at() returns a reference instead of a value
2) change assignment semantics to allow new values to be returned

[07:48:21.0362] <TabAtkins>
ah yes simple

[07:48:51.0610] <shu>
hell yeah brother, we never unshipped function calls as LHS of assignments syntactically

[07:49:22.0023] <bakkot>
TA.p.set throws for negative indices

[07:49:29.0419] <bakkot>
which, I guess we could probably change that to wrap like `.at`

[07:51:12.0743] <bakkot>
though actually TA.p.set has this behavior where it spreads arrays which are passed, which we would probably not want to do with A.p.set

[07:51:20.0109] <bakkot>
so maybe not actually feasible to copy it over

[07:51:44.0942] <rbuckton>
> <@ljharb:matrix.org> rbuckton: go for it, commit's pushed to the proposals repo already

I shouldn't have waited, Rick Waldron beat me to it :) He has a larger audience though, so I'm happy either way.

[07:52:02.0674] <ljharb>
lol you can still tweet about your own proposal even if others have

[07:52:05.0227] <ljharb>
but up to you ofc

[07:52:34.0201] <rbuckton>
Already did. 

[07:53:00.0677] <bakkot>
it seems like the list of methods should be decided before stage 2?

[07:54:18.0705] <rbuckton>
> <@devsnek:matrix.org> there's a simple two step solution here:
> 1) at() returns a reference instead of a value
> 2) change assignment semantics to allow new values to be returned

I would like to introduce you to my friend https://github.com/rbuckton/proposal-refs (may propose soon depending on outcome of Fixed shape objects proposal)

[08:00:02.0102] <bakkot>
I don't get why everything on Tuple needs to be on Array

[08:00:30.0619] <ljharb>
a tuple is conceptually an immutable array

[08:01:34.0018] <littledan>
bakkot: One hope is that it'll be easy to write code that's generic between Tuples and Arrays

[08:01:46.0311] <littledan>
who is objecting to consensus?

[08:02:35.0132] <bakkot>
littledan: so, that seems like a good motivation for all the _access_ methods to work. it seems like a strange goal to say you want _mutating_ code which is generic between Tuples and Arrays, though

[08:02:48.0356] <shu>
Ashley Claymore: please work on a rough initial reduced list and link it here for interested parties before end of the plenary if possible

[08:02:52.0272] <Michael Ficarra>
I am a bit uncomfortable with how this advancement went

[08:03:03.0929] <shu>
why?

[08:03:08.0008] <littledan>
> <@michaelficarra:matrix.org> I am a bit uncomfortable with how this advancement went

Did you want to block it?

[08:03:09.0547] <rbuckton>
I was about to point out that @aki's mic was making noise, but I think she said her mic went out and it seems to be better now.

[08:03:12.0138] <littledan>
I mean, the wording was a bit weird

[08:03:22.0727] <shu>
i mean the timebox rushing is uncomfortable but i don't think there was actual objection

[08:03:28.0677] <littledan>
if someone was on the queue and wanted to block, that should of course be respected

[08:03:33.0147] <littledan>
I didn't see what the timebox items were

[08:03:38.0765] <littledan>
 * I didn't see what the queue items were

[08:03:43.0206] <shu>
since mozilla worked it out and kevin and i wanna see a list

[08:03:56.0541] <shu>
and that list... can just be communicated here, since nobody else asked for it

[08:04:25.0757] <Michael Ficarra>
I just feel like there wasn't agreement between the chairs and the rest of the committee about whether we covered everything sufficiently for advancement

[08:04:50.0789] <littledan>
it would've taken the same amount of time to ask, "is there consensus?" and give 15 seconds of uncomfortable silence for anyone to interject, as to have that argument

[08:05:00.0380] <littledan>
maybe we can add that as a blitz bonus topic

[08:05:28.0073] <littledan>
anyway chairing is hard; Aki is doing well

[08:07:06.0228] <bterlson>
The queue items weren't blockers, but in the future if we run up against timebox and someone raises a question we will move on even if there are no obvious objections.

[08:07:30.0925] <Michael Ficarra>
I am fine with moving on without advancement whenever we're even a second over timebox, but rushing advancement, whether within or without timebox, doesn't seem right

[08:08:16.0064] <Aki>
Michael Ficarra: i don't disagree. i think I should have held firm.

[08:10:21.0725] <Ashley Claymore>
> <@shuyuguo:matrix.org> Ashley Claymore: please work on a rough initial reduced list and link it here for interested parties before end of the plenary if possible

Will do. In the mean time there is discussion here if useful https://github.com/tc39/proposal-change-array-by-copy/issues/27

[08:16:43.0603] <Michael Ficarra>
ryzokuken: I'm still happy to review

[08:18:06.0800] <Michael Ficarra>
I ❤️ this proposal

[08:19:16.0050] <ryzokuken>
thanks Michael Ficarra 😇

[08:20:01.0987] <Aki>
TabAtkins: & jschoi  y'all want to hop on that next 30 min slot?

[08:20:10.0167] <TabAtkins>
i'm ready for it

[08:21:02.0640] <jschoi>
Ready; hoping my microphone will work.

[08:28:47.0291] <bakkot>
honestly it actually does seem a little bit analogous to shadow DOM

[08:30:34.0630] <TabAtkins>
"analogous to" isn't always great if it doesn't actually hook into the same concept tho. "this is theoretically similar to shadow DOM, but doesn't actually have anything to do with shadow DOM" can be problematic for learning.

[08:30:37.0243] <ljharb>
if it is analogous then that's a stronger argument _for_ this name

[08:30:51.0413] <ljharb>
 * if it is analogous then that's a stronger argument _for_ this name

[08:31:35.0946] <TabAtkins>
I'm not objecting, but I suspect the HTML/DOM editors might have an opinion on it

[08:31:49.0737] <shu>
i confirmed with domenic he's fine with SHadowRealm

[08:31:51.0942] <bakkot>
Domenic has been involved in the thread at least

[08:31:53.0815] <shu>
could ask anne i guess

[08:31:55.0692] <devsnek>
i don't get the analogy to shadow dom personally

[08:34:19.0420] <bakkot>
shadow dom and shadow realm both have the property of, it's a separate X where changes in it do not affect the main X except through specific boundaries

[08:36:25.0049] <leobalter>
devsnek the analogy is weak. Other than what Bakkot has said, it just indicates ShadowRealm is not the main Realm.

[08:36:37.0631] <ryzokuken>
can someone please give cjtenny access to post?

[08:37:10.0736] <ryzokuken>
> <@leobalter:matrix.org> devsnek the analogy is weak. Other than what Bakkot has said, it just indicates ShadowRealm is not the main Realm.

This is exactly what I think about the name and exactly what I think the correct understanding should be (I might be very biased though)

[08:37:18.0999] <ryzokuken>
something like "secondary" realm

[08:37:54.0747] <ljharb>
inb4 TertiaryRealm

[08:38:03.0193] <jschoi>
QuaternaryRealm……

[08:38:11.0289] <ryzokuken>
> <@usharma:igalia.com> can someone please give cjtenny access to post?

also ioanna 

[08:38:27.0991] <leobalter>
The follow up candidates would be SatelliteRealm and Bubble

[08:38:29.0231] <Aki>
Schedule shifted

[08:38:51.0393] <ryzokuken>
thanks Aki 

[08:38:56.0561] <ioanna>
Thank you!

[08:39:24.0300] <leobalter>
SatelliteRealm has the pretty annoying double L in between. It fails to check the "easy to spell" box.

[08:40:19.0295] <leobalter>
Bubble has subjective concerns over the meaningful item and it fails the Unique box

[08:40:20.0634] <Michael Ficarra>
okay but WHY does it need to be point-free?

[08:40:40.0489] <leobalter>
a "JS bubble" search will lead to a lot of documentation over event bubble, etc

[08:40:46.0827] <Michael Ficarra>
wow, right on cue

[08:40:59.0602] <bakkot>
yup

[08:41:02.0582] <bakkot>
nicely anticipated

[08:41:24.0984] <Michael Ficarra>
eh, still not compelling

[08:41:59.0092] <yulia>
this is a straw argument...

[08:42:06.0993] <yulia>
you could do `$=` for all of those

[08:42:08.0014] <Michael Ficarra>
agreed

[08:42:12.0395] <yulia>
and have basically the pipeline operator

[08:44:41.0002] <Michael Ficarra>
to be clear, I think the operator is alright, but I'm not convinced the `%` is necessary

[08:45:41.0574] <Michael Ficarra>
 * to be clear, I think the pipeline operator itself is alright, but I'm not convinced the placeholder syntax (`%` in these examples) is necessary

[08:45:57.0462] <bakkot>
Michael Ficarra: pipeline is not worth it without `%`

[08:46:00.0596] <jschoi>
I think a point is that people could use `$=`…but they often don’t. Heavily nested code occurs all the time, because people make the choice between nesting versus assigning variables (whether something with a name or `$`), and it often is in favor of nesting.

[08:46:09.0521] <bakkot>
but this is hashed out on github at length

[08:47:18.0610] <yulia>
I would prefer to have a partial application proposal. I don't see what this adds to the language other than another way to do a lot of what we can do already but in a different form

[08:47:55.0389] <Tierney Cyren>
what is the tcq code?

[08:48:12.0336] <rbuckton>
Its in the reflector thread near the bottom

[08:48:17.0294] <Tierney Cyren>
ah ty

[08:48:23.0850] <rbuckton>
Its not published here because this room's contents are public

[08:49:03.0704] <ljharb>
the placeholder isn't partial application tho

[08:49:08.0391] <ljharb>
 * this placeholder isn't partial application tho, is it?

[08:49:21.0759] <ljharb>
it doesn't create another function

[08:49:29.0304] <shu>
yulia: i have concerns about readability and performance if partial application has easy to reach for syntax, personally

[08:49:54.0948] <devsnek>
ljharb i was thinking of it as a variable with a non-identifier name

[08:49:59.0548] <bakkot>
partial application also doesn't work for `await` or other keyword operators

[08:50:08.0598] <yulia>
thats fair, we actually have similar concerns about the performance of this proposal

[08:50:23.0809] <shu>
oh? what performance concerns

[08:50:36.0886] <shu>
i thought it could be straightforwardly compiled to be using temp vars

[08:50:39.0518] <ljharb>
devsnek: anything that's not already a possible variable name is fine with me wrt that objection

[08:52:22.0098] <Michael Ficarra>
bakkot: then have special awaiting forms?

[08:52:31.0069] <bakkot>
and yield and typeof and delete?

[08:52:31.0652] <bakkot>
ugh

[08:52:37.0243] <bakkot>
that's a bunch of new forms

[08:52:43.0792] <bakkot>
instead of one general thing that just works

[08:53:02.0244] <yulia>
shu: with the amount of potential threading we would need to do, and how it may be layered

[08:53:05.0807] <Michael Ficarra>
I just really don't think the placeholder provides any value over an arrow

[08:53:14.0880] <yulia>
we won't block alone on this, but we still aren't convinced this is worth the cost

[08:53:30.0964] <shu>
yulia: not sure i understand, like it's harder to parse?

[08:53:34.0073] <devsnek>
you want to write an arrow function in each part?

[08:53:35.0012] <yulia>
this will have a long standing impact on the languagee

[08:53:42.0728] <bakkot>
Michael Ficarra: your opinion on that question is not widely shared, as far as I can tell

[08:54:07.0265] <yulia>
oh wow my matrix is out of sync

[08:54:21.0194] <Michael Ficarra>
devsnek: only when it's necessary

[08:54:52.0156] <devsnek>
i think it would be necessary most of the time

[08:55:06.0852] <devsnek>
literally never have i worked with a fully functional-style api in js

[08:55:49.0269] <Michael Ficarra>
I work with functions of one input and one output all the time

[08:57:01.0323] <yulia>
shu: nah, it won't be harder to parse - we had some concerns because this will operate on expressions rather than functions and we would need to allow for both

[08:57:32.0707] <yulia>
and we didn't think too much about it, because we blocked before and understand the "taste" aspect here about how people want to write code

[08:58:13.0878] <shu>
yulia: i see, if there's a concrete example i'd love to see. i'm pretty neutral to slightly negative on any and all FP proposals, to be clear, and this seemed unproblematic at first glance for implementations, but might've missed something!

[08:58:58.0967] <yulia>
so if there is significant support here and people really want this, even though we are creating a second language on top of existing js syntax, even though there are criticisms of how pipeline works in bash and whether it was a wise addition, and in addition to the remove of partial application, then we aren't going to further complain

[09:02:19.0963] <yulia>
> <@shuyuguo:matrix.org> yulia: i see, if there's a concrete example i'd love to see. i'm pretty neutral to slightly negative on any and all FP proposals, to be clear, and this seemed unproblematic at first glance for implementations, but might've missed something!

If i get some free time and this moves forward, ill see about modifying our current version to update the new proposal... but don't know how long that will be put off due to other work

[09:03:53.0371] <ljharb>
can we please add to the notes that stage 3 will require a method extraction solution?

[09:04:03.0721] <ljharb>
i can say that out loud if needed but i don't want to slow the agenda

[09:04:19.0094] <bakkot>
it was not clear to me that we were advancing with contingent consensus

[09:04:22.0888] <bakkot>
there were several objections to that

[09:04:23.0261] <ljharb>
 * can we please add to the notes that i would like stage 3 to require a method extraction solution at stage 2?

[09:04:34.0081] <bakkot>
so I am reluctant to put that in the ntoes

[09:04:35.0688] <ljharb>
the consensus today was about stage 2 advancement

[09:04:52.0805] <ljharb>
and reflects what jschoi actually said out loud already, iirc

[09:04:55.0193] <jschoi>
(It should also be clear in the notes that Hax’s current Extensions proposal does not address method extraction; it’ll have to be another extension.)

[09:05:08.0427] <littledan>
I don't think it's right to link multiple proposals this way. My understanding of our previous discussion was more like, I personally would need to see a really strong case for both pipeline and the *infix* form of :: to both be added to the language

[09:05:09.0280] <jschoi>
* (It should also be clear in the notes that Hax’s current Extensions proposal does not address method extraction; it’ll have to be another extension.)

[09:05:15.0249] <shu>
jschoi: going back to something you said earlier, why do you think people don't type something like `$ =` in practice, but will type `|>`?

[09:05:19.0346] <littledan>
method extraction has no conflict whatsoever

[09:05:28.0806] <legendecas>
is bind operator dead by now?

[09:05:35.0069] <littledan>
but, also, we'd need to see a proposal written to make the case for it independently

[09:05:35.0824] <ljharb>
littledan and that is exactly my concern about pipeline advancing at all; i'd rather have neither than not have method extraction.

[09:05:44.0384] <littledan>
ljharb: The coupling was always false

[09:05:52.0028] <littledan>
I don't see how this makes method extraction harder

[09:05:57.0813] <ljharb>
the coupling is because the original `::` proposal did so

[09:06:10.0154] <littledan>
yes, I am saying that is a false coupling

[09:06:13.0924] <littledan>
they are just unrelated

[09:06:17.0081] <TabAtkins>
Michael Ficarra: I'm confused about your "point free" comment. It's absolutely pointful - the point is named `%`. F#-syntax is point-free (unless you eta-expand manually via an arrow function)

[09:06:19.0075] <ljharb>
> <@dehrenberg:igalia.com> I don't see how this makes method extraction harder

i mean you literally just said "I personally would need to see a really strong case for both pipeline and the infix form of :: to both be added to the language". that's how.

[09:06:30.0525] <littledan>
the infix form was the form that wasn't method extraction

[09:06:32.0199] <jschoi>
legendecas: The old bind operator was supposed to do many things. I already have written a proposal that addresses one of its old use cases that Hax’s Extensions don’t, method extraction. https://github.com/js-choi/proposal-method-extraction/

[09:06:34.0055] <jschoi>
I will present it later.

[09:06:35.0519] <littledan>
so, yes, those are related

[09:06:48.0756] <littledan>
the prefix form was method extraction. Totally unrelated.

[09:06:54.0605] <jschoi>
* legendecas: The old bind operator was supposed to do many things. I already have written a proposal that addresses one of its old use cases that Hax’s Extensions don’t, method extraction. https://github.com/js-choi/proposal-method-extraction/

[09:07:16.0636] <ljharb>
wait, maybe i'm confused. what do you mean by "the infix form"

[09:07:50.0302] <littledan>
the infix form was object::function(...args), which did function.call(object, ...args)

[09:08:03.0286] <littledan>
the prefix form was ::object.function, which did object.function.bind(object)

[09:08:17.0855] <littledan>
the prefix form is method extraction; the infix form is more like what will be presented later this meeting

[09:08:30.0968] <ljharb>
ah ok, then yes. i think the infix form is obviated by pipeline

[09:08:35.0469] <littledan>
I think the infix form's motivation is significantly reduced with pipeline at Stage 2, but the prefix (method extraction) is fine

[09:08:42.0804] <littledan>
this is what I mean by false coupling

[09:08:58.0118] <littledan>
however, we can't agree on method extraction yet, without an independent presentation on it

[09:09:05.0008] <jschoi>
shu: We know that people often don’t already write `$=` or `temp = `, because deeply nested expressions occur all the time in real code.  But there seems to be strong community pressure to have some sort of pipe operator in order to be able to decompose statements into linear chains, e.g., The State of JS 2020.

[09:09:38.0217] <shu>
i understand that statement of fact

[09:09:46.0830] <shu>
i'm asking for some color and conjecture on why

[09:09:56.0896] <devsnek>
what does `%==` do

[09:10:02.0039] <ljharb>
because temp vars are gross when they aren't adding readability

[09:10:11.0024] <ljharb>
and reassigning the same var is gross because reassignment hurts readability

[09:10:11.0125] <shu>
but in this they are, by linearizing

[09:10:20.0983] <shu>
 * but in this they are, by linearizing

[09:10:23.0145] <jschoi>
devsnek: `%==something` is `% == something`.

[09:10:34.0639] <devsnek>
oh, ez

[09:10:35.0456] <shu>
pipeline is conceptually reassigning?

[09:10:37.0282] <ljharb>
right but +linearizing -tempvars -reassignment is not a net win

[09:11:06.0158] <ljharb>
> <@shuyuguo:matrix.org> pipeline is conceptually reassigning?

i can't really disagree with this, but since it's syntactic/special i think it's more like `this`, which is different from reassignment

[09:11:07.0195] <littledan>
pipeline helps you have fluid APIs, i.e., just letting you deal with intermediaries logically, rather than assigning names to them all

[09:11:21.0990] <jschoi>
shu: Currently the only way to linearize deeply nested expressions is by assigning to temporary variables or declaring unary functions and composing them. (And the latter does not work with several kinds of operations like `yield`, of course.)

[09:11:41.0906] <jschoi>
* shu: Currently the only way to linearize deeply nested expressions is by assigning to variables or declaring unary functions and composing them. (And the latter does not work with several kinds of operations like `yield`, of course.)

[09:11:45.0199] <shu>
i think the confusing to me is that tab's argument was about the difficulty of coming up with unique names for all intermediates, which isn't needed

[09:11:58.0424] <jschoi>
* shu: Currently the only way to linearize deeply nested expressions is by assigning to temporary variables or declaring unary functions and composing them. (And the latter does not work with several kinds of operations like `yield`, of course.)

[09:12:05.0724] <ljharb>
in terms of color/conjecture, reusing the same name is gross - naming each step differently can be seen as more readable even though it's not needed.

[09:12:15.0518] <devsnek>
technically you need the unique names to guard against function nesting

[09:12:25.0655] <ljharb>
 * in terms of color/conjecture, reusing the same name is gross - naming each step differently can be seen as more readable even though it's not needed.

[09:12:47.0063] <devsnek>
but that can be a case-by-case thing when writing the multi-variable form

[09:13:03.0077] <shu>
so the question is: why not use the same binding name, and the answer _seems_ to be there are, in the ecosystem there are independent reasons that reassigning to the same variable is already gross?

[09:13:13.0209] <shu>
i don't share that reassigning-is-gross opinion, is that a linting thing?

[09:13:37.0709] <ljharb>
i don't think any linters enforce it

[09:13:43.0259] <ljharb>
but it's def a styleguide/code review thing

[09:13:45.0467] <shu>
whence "it's gross"?

[09:13:48.0701] <Justin Ridgewell>
> <@shuyuguo:matrix.org> i don't share that reassigning-is-gross opinion, is that a linting thing?

My immediate code review would be "please create new variables"

[09:13:55.0611] <shu>
sure but please tell me why :)

[09:13:56.0459] <ljharb>
same, every time

[09:14:11.0291] <shu>
you have to understand i have like 8 general purpose regs i can work with most of the time

[09:14:16.0416] <shu>
my world is reassigning

[09:14:18.0386] <ljharb>
one reason is because reusing the same name means it's hard to distinguish between a bug or an intentional conflation

[09:14:25.0243] <ljharb>
same reason `let` is strongly discouraged

[09:14:28.0682] <ljharb>
 * same reason `let` is strongly discouraged in favor of `const`

[09:14:31.0749] <shu>
wat

[09:14:56.0790] <Justin Ridgewell>
My formal CS degree was with C/C++, and it's not possible to do that way

[09:14:59.0856] <ljharb>
i'm sure there's many reasons, that's just the first one that popped into my head

[09:15:07.0546] <bakkot>
ljharb: I think if you saw
```
$ = fetch(url);
$ = await $;
$ = await $.json();
console.log($)
```
you would not think it was a mistake

[09:15:07.0703] <Justin Ridgewell>
So seeing it done feels really ikcy

[09:15:26.0277] <ljharb>
bakkot: agree, but it still looks gross to me subjectively/aesthetically

[09:15:38.0307] <devsnek>
that code is difficult for me to process

[09:15:39.0888] <bakkot>
> <@ljharb:matrix.org> same reason `let` is strongly discouraged in favor of `const`

sidebar: I wish you would phrase these things as "I strongly discourage `let`", not "`let` is strongly discouraged"

[09:15:47.0028] <bakkot>
as I'm sure you are aware, not everyone shares that opinion

[09:15:53.0140] <ljharb>
sure. but it's not just me that has that opinion.

[09:15:56.0696] <sarahghp>
reassigning would get kicked out of any codebase I have ever worked on

[09:16:01.0930] <ljharb>
"let is strongly discouraged by many", if you require the qualifier

[09:16:02.0850] <devsnek>
because i need to stop for a moment and mentally remove the assignment and only focus on the right hand sides

[09:16:38.0741] <Jamie Kyle>
I do this in Rust every now and then: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=5cffe97b80fea645eb3a34b711d36ad6

[09:16:42.0276] <ptomato>
I've more than once heard people say that `const` names can be better optimized by the engine and therefore you shouldn't use `let`

[09:17:19.0488] <shu>
that is definitely not true

[09:17:23.0311] <littledan>
I feel like reassigning is sort of logically more complicated than having a nested expression or chain of method calls. You have to think about what else might be affected, instead of just seeing the single use in the expression tree.

[09:17:27.0625] <ljharb>
whenever i've heard that i've pointed out that a) you can't know that unless you look at the engine's code and/or benchmark it, and b) perf doesn't matter, clarity does

[09:17:46.0282] <ptomato>
I didn't say I believe that, I'm saying it's an idea that's out there

[09:17:55.0697] <bakkot>
"perf doesn't matter" is, uh, also a strong claim which maybe should be qualified

[09:18:04.0273] <sarahghp>
I think many devs have learned not to reassign because that smells like global variable, bug farm code. And so socially it's not done unless it can be proven it's more performant or someone who likes it has the power on that codebase. 

[09:18:30.0709] <shu>
sarahghp: thanks, that's helpful

[09:18:45.0231] <shu>
i mean, i disagree with it, but that's helpful

[09:19:17.0084] <sarahghp>
You disagree with my description of experience or you think people shuldn't think that?

[09:19:23.0391] <shu>
the latter

[09:19:58.0817] <littledan>
well, I guess as language designers, we're sort of co-creators in this shared, socially constructed reality

[09:20:07.0923] <shu>
is this an accurate summary: it is easier to try for higher quality code to forbid reassignment stylistically, and that's of higher priority even though it takes out "linearization via reusing the same temp var" as collateral

[09:20:24.0235] <shu>
but at the same time, linearization is also good style

[09:20:24.0554] <littledan>
the culture of usage patterns is just as much co-creation, alongside the definition of the language

[09:20:30.0362] <shu>
so we should do pipeline?

[09:20:59.0613] <shu>
to be clear, my disagreement is it's just fine to carve an exception for "reassignment is bad, except when linearizing"

[09:21:07.0414] <ljharb>
but also, pipeline helps with things like Object.fromEntries, where otherwise you have to nest

[09:21:08.0931] <ljharb>
or react HOCs

[09:21:22.0370] <Jamie Kyle>
Sorry quick aside, did hack-style pipelines reach stage 2? I wasn't really clear

[09:21:26.0962] <ljharb>
yes

[09:21:33.0143] <shu>
but people really want to type what they want to type, and that's fine too, i don't have too much skin in the game

[09:21:53.0532] <Michael Ficarra>
the compiler's going to turn it into a reassignment for you anyway

[09:22:10.0371] <ljharb>
`Component |> withC(%) |> withB(%) |> withA(%)` or `Object.entries(o).map(…) |> Object.fromEntries(%)` are much clearer than `withA(withB(withC(Component)))` or `Object.fromEntries(Object.entries(o).map(…))`, or the temp var equivalents

[09:22:24.0836] <shu>
i disagree?

[09:22:26.0174] <sarahghp>
> <@shuyuguo:matrix.org> is this an accurate summary: it is easier to try for higher quality code to forbid reassignment stylistically, and that's of higher priority even though it takes out "linearization via reusing the same temp var" as collateral

Yes.

[09:22:28.0454] <ljharb>
the compiler turns it all into electricity anyways, "what the compiler does" doesn't matter

[09:23:02.0178] <shu>
especially the withA/B/C example, how is `Component |> withC(%) |> withB(%) |> withA(%)` clearer?

[09:23:13.0630] <bakkot>
I am not at all convinced that it's actually that much more clear than
```
let $= Component;
$= withC($);
$= withB($);
withA($);
```

[09:23:28.0969] <bakkot>
no one writes that, of course, but no one writes `|>` either, so

[09:23:32.0820] <jschoi>
shu: I think it becomes clearer if postfix or circumfix operations (like array wrapping or function calls with following arguments) get involved, so that you no longer have to switch between LTR and RTL reading.

[09:23:34.0917] <legendecas>
> <@shuyuguo:matrix.org> especially the withA/B/C example, how is `Component |> withC(%) |> withB(%) |> withA(%)` clearer?

In this style, the order you read is the order of execution.

[09:23:39.0494] <Jamie Kyle>
> <@ljharb:matrix.org> the compiler turns it all into electricity anyways, "what the compiler does" doesn't matter

Welcome to TC39, where the points are made up, and what the compiler does doesn't matter

[09:23:46.0097] <jschoi>
* shu: I think it becomes clearer if postfix or circumfix operations get involved, so that you no longer have to switch between LTR and RTL reading.

[09:24:07.0710] <ljharb>
whose pipeline is it anyway

[09:24:10.0228] <shu>
the "order of execution" thing is weird to me

[09:24:21.0944] <shu>
like, presumably the folks who want this are FP enthusiasts

[09:24:22.0755] <jschoi>
* shu: I think it becomes clearer if postfix or circumfix operations (like array wrapping or function calls with following arguments) get involved, so that you no longer have to switch between LTR and RTL reading.

[09:24:25.0809] <littledan>
well, it's what I really loved about Factor and postfix langauges in general!

[09:24:35.0555] <littledan>
and also what I think many people love about method-chaining APIs

[09:24:46.0657] <shu>
yet a major selling point here is that they find function composition and order of function application confusing, and there should be new syntax to make it look imperative?

[09:24:49.0387] <ljharb>
i am very much not an FP enthusiast in that way, i think RxJS-style coding is harder to understand. and i very much want pipeline for my not-super-FP but not-OO code.

