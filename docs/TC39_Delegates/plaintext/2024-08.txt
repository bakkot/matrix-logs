2024-08-01
[20:24:52.0465] <ljharb>
> <@jridgewell:matrix.org> Iâ€™m not sure theyâ€™re different from the userâ€™s point of view.

of course there are; `import type` vs `import`, "what gets stripped" vs "what doesn't", etc

[20:24:55.0420] <ljharb>
> <@jridgewell:matrix.org> Iâ€™m not sure theyâ€™re different from the userâ€™s point of view.

 * of course they are; `import type` vs `import`, "what gets stripped" vs "what doesn't", etc

[20:25:21.0311] <ljharb>
i would be surprised if any user actually didn't understand that typescript wasn't what runs in the actual application

[22:47:23.0604] <sffc>
About Decimal and primitives, littledan's logic makes a lot of sense to me. If we were to have decimals as a primitive, they would need to be normalized (no quantum). However, the champions have presented rationale for why decimals should retain their quantum. Therefore, Decimals should be objects, not primitives.

This logic flows completely independently from any argument about whether or not engines may eventually change their position on decimals being a new primitive.

[00:55:36.0635] <Luca Casonato>
> <@ljharb:matrix.org> i would be surprised if any user actually didn't understand that typescript wasn't what runs in the actual application

Youâ€™d be surprised ðŸ˜ƒ

[01:14:31.0235] <Rob Palmer>
In the old days, folk learned JS before they learned TS, so had a strong mental model of the difference.

Nowadays many people learn TS first (or at least, it's not sequenced).

And we have runtimes with built-in support, further hiding the difference.

[10:42:04.0754] <ljharb>
are most of those newcomers using those alternative runtimes tho?

[10:53:17.0347] <Anthony Bullard>
Definitely not. Most still use the browser - though through transpilers - or node(same).

[10:59:09.0824] <ljharb>
that matches my intuition - anyone who's using "not browsers or unflagged node" is not a newcomer and knows the difference.

[11:25:57.0387] <Justin Ridgewell>
> <@ljharb:matrix.org> of course they are; `import type` vs `import`, "what gets stripped" vs "what doesn't", etc

I donâ€™t understand your point. To users writing functions, `deferred`/`immediate` seems very similar to `readonly` in `readonly number[]` which tells the user they canâ€™t don `foo[0] = 1`. `derred () => void` means they canâ€™t call that function within their function body, only pass it off to another deferring function or store it for later.

[12:40:06.0296] <ljharb>
`: readonly number[]` tho. it's part of the type.

[13:47:04.0378] <Justin Ridgewell>
Yes, and `: deferred () => void` is part of the type, too.

[13:48:20.0219] <Justin Ridgewell>
The type system should error if you call a defferred callback sync, the same way it will if you mutate a readonly array.

[15:56:04.0325] <shu>
is the only way to observe number of ticks via user code `then` handlers?

if i have some spec doing the following:

```
let p1 = new %Promise%;
let p2 = new %Promise%;
PerformPromiseThen(p2, () => p1, () => {});
return p2;
```

where `p1` and `p2` are built-in promises, and `p1` never escapes to user code, are the two ticks unobservable? is that equivalent to returning `p1` directly?

