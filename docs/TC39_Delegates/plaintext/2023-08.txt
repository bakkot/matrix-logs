2023-08-01
[20:48:08.0108] <ljharb>
bakkot: bad news for your coercion proposal, some people like it https://twitter.com/wesbos/status/1686014875040956416

[00:10:50.0710] <bakkot>
ljharb: some people are incorrect

[07:26:28.0110] <shu>
this is someone who teaches beginner javascript, according to the twitter profile

[07:59:09.0760] <Anthony Bullard>
> <@shuyuguo:matrix.org> this is someone who teaches beginner javascript, according to the twitter profile

He's one of the most popular and influential people in JS dev content targeted at beginners to early intermediate 

[07:59:30.0359] <shu>
alas

[07:59:43.0955] <shu>
teaching `at(0.1)` as a benefit seems not good to me

[08:01:01.0336] <Anthony Bullard>
Not going to argue that.  And does somewhat surprise me

[08:01:28.0522] <Anthony Bullard>
I haven't been in discussions on .at() so I was unaware of the coercion

[08:02:18.0307] <shu>
there were no discussions around coercion specifically at the time, the method follows the coercion precedence of other methods

[08:02:31.0771] <Anthony Bullard>
I wasn't aware it worked with other array methods either, hadn't tried in that in my 24 years of JavaScripting

[08:02:46.0986] <shu>
which is the point of bakkot's proposal. we've been operating on precedence grounds for decades, it's time to rethink that

[08:02:48.0945] <Anthony Bullard>
Never even occurred to me to try

[08:02:53.0235] <shu>
yeah

[08:04:16.0715] <rkirsling>
huh

[08:04:41.0503] <rkirsling>
yeah I can't say I've ever attempted to pass a non-integral number to `slice`, say

[08:11:06.0271] <Anthony Bullard>
Strangely enough it works. Had to open a terminal to prove it to myself

[08:12:22.0999] <rkirsling>
yeah.

[08:13:58.0025] <rkirsling>
the thing is that if `array[1.2]` were already valid, then you could argue that `array.at(1.2)` is a non-regression, or something

[08:14:57.0605] <rkirsling>
but given that `array[1.2]` is not in fact equivalent to `array[1]`, it definitely seems hard to consider the equivalence of `.at(1.2)` and `.at(1)` a good thing

[08:15:03.0076] <rkirsling>
I don't necessarily mean that we screwed up

[08:15:11.0947] <rkirsling>
but for educational materials...

[08:15:18.0762] <rkirsling>
üòì

[08:16:02.0335] <rkirsling>
 * the thing is that if `array[1.2]` already worked like that, then you could argue that `array.at(1.2)` is a non-regression, or something

[08:25:17.0180] <Anthony Bullard>
`array[1.2]` won't error though, so it's a question of what the behavior should be for `.at()` if we don't want coercion.  There is a sort of coercion happening with `arr[1.2]` as well, and I don't think we would want to extend that to `.at(1.2)`

[08:27:37.0770] <rkirsling>
certainly, `at` isn't meant to string coerece

[08:27:39.0499] <rkirsling>
 * certainly, `at` isn't meant to string coerce

[08:27:59.0816] <rkirsling>
in that regard I guess an error could've been argued for

[08:30:28.0385] <Anthony Bullard>
My argument is that either way there is either a loss of backwards compat (nope) or a lack of symmetry between accessing an integer index or a decimal extension of said integer.

[08:31:26.0345] <Anthony Bullard>
I think the best case for sanity going forward would be a TypeError, but it would create more errata for devs leveraging previous knowledge 

[08:55:46.0983] <rkirsling>
I think it's probably too late to change though

[09:41:29.0618] <bakkot>
my hope is a TypeError (or RangeError) for this case for new methods

[09:41:37.0788] <bakkot>
to break with precedent because it's a bad precedent

[09:41:57.0948] <bakkot>
and yeah, the main cost is to devs who have already learned the existing rules

[09:42:14.0148] <bakkot>
but, even among people who know those rules, hopefully not too many actually rely on them in practice

[10:04:35.0826] <Anthony Bullard>
Do we have tools to find such usages in the corpus?

[10:34:46.0049] <Chris de Almeida>
> <@anthonybullard:matrix.org> Do we have tools to find such usages in the corpus?

https://sourcegraph.com/search

[10:35:12.0960] <Anthony Bullard>
Lovely

[10:35:52.0569] <Anthony Bullard>
Given that JS is dynamic, it may be hard to really nail down usages outside of literal usages


2023-08-03
[20:17:08.0701] <HE Shi-Jun>
I don't understand the highlighted part (double "link"), is that a typo?

[20:58:42.0942] <rkirsling>
it surely is

[14:27:14.0404] <bakkot>
has there been a proposal for a `Promise.prototype.settled()`? Implementation `function(){ return this.then(value => ({ status: 'fulfilled', value }), reason => ({ status: 'rejected', reason });)`

[14:27:19.0874] <bakkot>
like `allSettled` but for a single promise

[14:27:27.0350] <bakkot>
I seem to recall someone bringing this up but couldn't find it

[14:44:26.0204] <ljharb>
I haven‚Äôt seen any proposal for it being async - that seems perfectly reasonable to me. The past ones i recall are for something sync, which have obvious issues.

[14:57:33.0859] <bakkot>
I'm not sure what "sync" would even mean in this context

[14:57:48.0250] <bakkot>
unless you mean it would let you synchronously get the promise's status? yeah definitely not that


2023-08-04
[09:46:52.0453] <nicolo-ribaudo>
Could finally start passing a parameter to its callback?

[09:52:54.0973] <snek>
but then we would need Promise.allFinallyed

[10:03:34.0088] <bakkot>
nicolo-ribaudo: probably; adding new parameters is rarely breaking. but what parameter are you thinking of?

[10:27:49.0288] <Ashley Claymore>
finally could be given the same as settled?

[10:39:31.0708] <bakkot>
Ashley Claymore: I can't parse your comment at all

[10:39:34.0422] <bakkot>
can you say that again but with more words

[10:45:22.0869] <Rob Palmer>
If your company has the space (or the funds to rent a venue) and desire to host a TC39 plenary meeting in 2024, please reach out to the Chairs üôè

- [Call for hosts](https://github.com/tc39/Reflector/issues/502) (2024 meeting planning)

[11:02:16.0724] <Ashley Claymore>
How about more code?
`.finally(({status, value, reason}) => ... )`

[11:06:30.0377] <bakkot>
ah, yeah

[11:06:40.0808] <bakkot>
that's a thing we could do but wouldn't actually do the thing I want

[11:07:00.0184] <bakkot>
I guess you could do `.finally(x => x)` to get the thing you want

[11:07:12.0842] <bakkot>
 * I guess you could do `.finally(x => x)` to get the thing I want

[11:07:16.0172] <bakkot>
but that would be kind of odd

[11:13:02.0000] <Ashley Claymore>
> <@bakkot:matrix.org> I guess you could do `.finally(x => x)` to get the thing I want

Finally ignores the return of the callback right? (Apart from waiting for it to resolve)

[11:13:19.0207] <Ashley Claymore>
and rejecting too I guess 

[11:13:54.0156] <bakkot>
yeah, true

[11:13:57.0555] <Ashley Claymore>
So that would be a difference between .settled and .finally, the first would allow a change in the resulting promise's resolved value 

[11:14:21.0351] <bakkot>
that comment I do not understand

[11:14:29.0123] <bakkot>
settled as I've proposed it doesn't take a callback

[11:15:01.0839] <bakkot>
so there's not anything to be making changes

[11:15:23.0961] <Ashley Claymore>
Ah right. I keep just merging a following .then thinking of it as a callback to settled 

[11:15:54.0066] <Ashley Claymore>
It's almost like it lates on a Friday and I'm off on holiday next week. Brain shutdown 

[16:54:54.0003] <ljharb>
we can't do that for `.finally()` because it wouldn't match a `finally` block, in which you don't have that info


2023-08-05
[23:59:59.0544] <Ashley Claymore>
simple solution:

```
try {}
finally ({ status, value, reason}) {}
```

üòé


2023-08-07
[08:10:02.0606] <littledan>
The TC39 community event on September 25th in Japan is confirmed. You can find details at https://github.com/tc39/Reflector/issues/499#issuecomment-1668039136

[08:37:03.0306] <pzuraq>
shu: when you have a moment, do you think you could look at the proposed change in https://github.com/tc39/proposal-decorators/issues/513 and let me know if you think it will cause issues with performance? I think there are options we could explore for working around it if so, but I think this would be the ideal behavior from a consistent-mental-model perspective


2023-08-09
[08:58:11.0597] <rbuckton>
littledan: would it make sense to set up a matrix channel for TG4 discussions outside of the scheduled meetings? 

[08:59:08.0032] <Chris de Almeida>
#tc39-tg4:matrix.org 

[09:00:13.0184] <rbuckton>
Ah! Thanks

[10:16:16.0235] <snek>
is there a matrix client that makes threads good

[10:41:36.0928] <rkirsling>
> <@devsnek:matrix.org> is there a matrix client that makes threads good

it's so vexing

[10:42:08.0461] <rkirsling>
it's like "how many times do I have to refresh this page before you'll be willing to tell me I don't have new messages"

[10:42:24.0062] <rkirsling>
I hate this site so much lol

