2023-08-01
[20:48:08.0108] <ljharb>
bakkot: bad news for your coercion proposal, some people like it https://twitter.com/wesbos/status/1686014875040956416

[00:10:50.0710] <bakkot>
ljharb: some people are incorrect

[07:26:28.0110] <shu>
this is someone who teaches beginner javascript, according to the twitter profile

[07:59:09.0760] <Anthony Bullard>
> <@shuyuguo:matrix.org> this is someone who teaches beginner javascript, according to the twitter profile

He's one of the most popular and influential people in JS dev content targeted at beginners to early intermediate 

[07:59:30.0359] <shu>
alas

[07:59:43.0955] <shu>
teaching `at(0.1)` as a benefit seems not good to me

[08:01:01.0336] <Anthony Bullard>
Not going to argue that.  And does somewhat surprise me

[08:01:28.0522] <Anthony Bullard>
I haven't been in discussions on .at() so I was unaware of the coercion

[08:02:18.0307] <shu>
there were no discussions around coercion specifically at the time, the method follows the coercion precedence of other methods

[08:02:31.0771] <Anthony Bullard>
I wasn't aware it worked with other array methods either, hadn't tried in that in my 24 years of JavaScripting

[08:02:46.0986] <shu>
which is the point of bakkot's proposal. we've been operating on precedence grounds for decades, it's time to rethink that

[08:02:48.0945] <Anthony Bullard>
Never even occurred to me to try

[08:02:53.0235] <shu>
yeah

[08:04:16.0715] <rkirsling>
huh

[08:04:41.0503] <rkirsling>
yeah I can't say I've ever attempted to pass a non-integral number to `slice`, say

[08:11:06.0271] <Anthony Bullard>
Strangely enough it works. Had to open a terminal to prove it to myself

[08:12:22.0999] <rkirsling>
yeah.

[08:13:58.0025] <rkirsling>
the thing is that if `array[1.2]` were already valid, then you could argue that `array.at(1.2)` is a non-regression, or something

[08:14:57.0605] <rkirsling>
but given that `array[1.2]` is not in fact equivalent to `array[1]`, it definitely seems hard to consider the equivalence of `.at(1.2)` and `.at(1)` a good thing

[08:15:03.0076] <rkirsling>
I don't necessarily mean that we screwed up

[08:15:11.0947] <rkirsling>
but for educational materials...

[08:15:18.0762] <rkirsling>
üòì

[08:16:02.0335] <rkirsling>
 * the thing is that if `array[1.2]` already worked like that, then you could argue that `array.at(1.2)` is a non-regression, or something

[08:25:17.0180] <Anthony Bullard>
`array[1.2]` won't error though, so it's a question of what the behavior should be for `.at()` if we don't want coercion.  There is a sort of coercion happening with `arr[1.2]` as well, and I don't think we would want to extend that to `.at(1.2)`

[08:27:37.0770] <rkirsling>
certainly, `at` isn't meant to string coerece

[08:27:39.0499] <rkirsling>
 * certainly, `at` isn't meant to string coerce

[08:27:59.0816] <rkirsling>
in that regard I guess an error could've been argued for

[08:30:28.0385] <Anthony Bullard>
My argument is that either way there is either a loss of backwards compat (nope) or a lack of symmetry between accessing an integer index or a decimal extension of said integer.

[08:31:26.0345] <Anthony Bullard>
I think the best case for sanity going forward would be a TypeError, but it would create more errata for devs leveraging previous knowledge 

[08:55:46.0983] <rkirsling>
I think it's probably too late to change though

[09:41:29.0618] <bakkot>
my hope is a TypeError (or RangeError) for this case for new methods

[09:41:37.0788] <bakkot>
to break with precedent because it's a bad precedent

[09:41:57.0948] <bakkot>
and yeah, the main cost is to devs who have already learned the existing rules

[09:42:14.0148] <bakkot>
but, even among people who know those rules, hopefully not too many actually rely on them in practice

[10:04:35.0826] <Anthony Bullard>
Do we have tools to find such usages in the corpus?

[10:34:46.0049] <Chris de Almeida>
> <@anthonybullard:matrix.org> Do we have tools to find such usages in the corpus?

https://sourcegraph.com/search

[10:35:12.0960] <Anthony Bullard>
Lovely

[10:35:52.0569] <Anthony Bullard>
Given that JS is dynamic, it may be hard to really nail down usages outside of literal usages


2023-08-03
[20:17:08.0701] <HE Shi-Jun>
I don't understand the highlighted part (double "link"), is that a typo?

[20:58:42.0942] <rkirsling>
it surely is

[14:27:14.0404] <bakkot>
has there been a proposal for a `Promise.prototype.settled()`? Implementation `function(){ return this.then(value => ({ status: 'fulfilled', value }), reason => ({ status: 'rejected', reason });)`

[14:27:19.0874] <bakkot>
like `allSettled` but for a single promise

[14:27:27.0350] <bakkot>
I seem to recall someone bringing this up but couldn't find it

[14:44:26.0204] <ljharb>
I haven‚Äôt seen any proposal for it being async - that seems perfectly reasonable to me. The past ones i recall are for something sync, which have obvious issues.

[14:57:33.0859] <bakkot>
I'm not sure what "sync" would even mean in this context

[14:57:48.0250] <bakkot>
unless you mean it would let you synchronously get the promise's status? yeah definitely not that


2023-08-04
[09:46:52.0453] <nicolo-ribaudo>
Could finally start passing a parameter to its callback?

[09:52:54.0973] <snek>
but then we would need Promise.allFinallyed

[10:03:34.0088] <bakkot>
nicolo-ribaudo: probably; adding new parameters is rarely breaking. but what parameter are you thinking of?

[10:27:49.0288] <Ashley Claymore>
finally could be given the same as settled?

[10:39:31.0708] <bakkot>
Ashley Claymore: I can't parse your comment at all

[10:39:34.0422] <bakkot>
can you say that again but with more words

[10:45:22.0869] <Rob Palmer>
If your company has the space (or the funds to rent a venue) and desire to host a TC39 plenary meeting in 2024, please reach out to the Chairs üôè

- [Call for hosts](https://github.com/tc39/Reflector/issues/502) (2024 meeting planning)

[11:02:16.0724] <Ashley Claymore>
How about more code?
`.finally(({status, value, reason}) => ... )`

[11:06:30.0377] <bakkot>
ah, yeah

[11:06:40.0808] <bakkot>
that's a thing we could do but wouldn't actually do the thing I want

[11:07:00.0184] <bakkot>
I guess you could do `.finally(x => x)` to get the thing you want

[11:07:12.0842] <bakkot>
 * I guess you could do `.finally(x => x)` to get the thing I want

[11:07:16.0172] <bakkot>
but that would be kind of odd

[11:13:02.0000] <Ashley Claymore>
> <@bakkot:matrix.org> I guess you could do `.finally(x => x)` to get the thing I want

Finally ignores the return of the callback right? (Apart from waiting for it to resolve)

[11:13:19.0207] <Ashley Claymore>
and rejecting too I guess 

[11:13:54.0156] <bakkot>
yeah, true

[11:13:57.0555] <Ashley Claymore>
So that would be a difference between .settled and .finally, the first would allow a change in the resulting promise's resolved value 

[11:14:21.0351] <bakkot>
that comment I do not understand

[11:14:29.0123] <bakkot>
settled as I've proposed it doesn't take a callback

[11:15:01.0839] <bakkot>
so there's not anything to be making changes

[11:15:23.0961] <Ashley Claymore>
Ah right. I keep just merging a following .then thinking of it as a callback to settled 

[11:15:54.0066] <Ashley Claymore>
It's almost like it lates on a Friday and I'm off on holiday next week. Brain shutdown 

[16:54:54.0003] <ljharb>
we can't do that for `.finally()` because it wouldn't match a `finally` block, in which you don't have that info


2023-08-05
[23:59:59.0544] <Ashley Claymore>
simple solution:

```
try {}
finally ({ status, value, reason}) {}
```

üòé


2023-08-07
[08:10:02.0606] <littledan>
The TC39 community event on September 25th in Japan is confirmed. You can find details at https://github.com/tc39/Reflector/issues/499#issuecomment-1668039136

[08:37:03.0306] <pzuraq>
shu: when you have a moment, do you think you could look at the proposed change in https://github.com/tc39/proposal-decorators/issues/513 and let me know if you think it will cause issues with performance? I think there are options we could explore for working around it if so, but I think this would be the ideal behavior from a consistent-mental-model perspective


2023-08-09
[08:58:11.0597] <rbuckton>
littledan: would it make sense to set up a matrix channel for TG4 discussions outside of the scheduled meetings? 

[08:59:08.0032] <Chris de Almeida>
#tc39-tg4:matrix.org 

[09:00:13.0184] <rbuckton>
Ah! Thanks

[10:16:16.0235] <snek>
is there a matrix client that makes threads good

[10:41:36.0928] <rkirsling>
> <@devsnek:matrix.org> is there a matrix client that makes threads good

it's so vexing

[10:42:08.0461] <rkirsling>
it's like "how many times do I have to refresh this page before you'll be willing to tell me I don't have new messages"

[10:42:24.0062] <rkirsling>
I hate this site so much lol

[11:25:05.0899] <shu>
down with threads

[12:16:07.0015] <Chris de Almeida>
> <@devsnek:matrix.org> is there a matrix client that makes threads good

Cinny displays them as if they were regular replies like this

[12:40:24.0057] <Chris de Almeida>
> <@shuyuguo:matrix.org> down with threads

yet you started a thread the other day.  curious.

[12:40:44.0511] <Chris de Almeida>
maybe at Sept plenary we can ask for consensus to ban threads in TC39 rooms...  üå∂Ô∏è  
does anyone _like_ threads?  I think one or two changes could redeem them and make them usable, but until that happens, they are annoying.  I keep finding myself semi-inadvertently starting them due to cognitive momentum from using them in slack and forgetting how annoying they are in element

[12:58:05.0540] <Michael Ficarra>
I *want* to like threads but they make a mess out of notifications

[12:58:23.0006] <Michael Ficarra>
but I definitely do want a way to ignore side conversations I don't care about, which is the point of threads

[13:00:19.0780] <bakkot>
IIRC slack/discord only count threads as "unread" for the purposes of the notification dot(s) when you've participated in them, which is the behavior I want

[13:02:40.0237] <Chris de Almeida>
slack behavior is that you don't get notified about any thread activity until and unless: 1. you've deliberately subscribed or 2. you've deliberately participated, e.g. replied in the thread

it also helps that slack has a thread view, almost like a thread channel, rather than forcing you into the right sidebar only.  there was a time before that feature existed but that made threads more bearable in slack

[13:03:01.0845] <Chris de Almeida>
indeed... just look at this insane issue re: notifications/threads  https://github.com/vector-im/element-web/issues/24392

[13:07:33.0411] <Chris de Almeida>
oh, and in slack you can also unsubscribe to the thread notifications.  that's a big one too

[13:07:56.0434] <Chris de Almeida>
 * oh, and in slack you can also unsubscribe to a particular thread.  that's a big one too

[13:28:59.0151] <shu>
> <@softwarechris:matrix.org> yet you started a thread the other day.  curious.

i did?

[13:29:08.0317] <shu>
what thread did i start

[13:33:13.0648] <Chris de Almeida>
> <@shuyuguo:matrix.org> what thread did i start

I have falsely accused you..  I see now I started the thread by replying to my own message, and then you replied in the thread.  I didn't notice my message was split in two, so I thought your message was the one that began the thread.  ü§¶

[13:33:30.0514] <shu>
huzzah, i am exonerated

[13:40:02.0084] <shu>
i knew i was innocent all along because i actually do not know how to start new threads

[13:57:02.0520] <ljharb>
i love threads. i hate the notification issues. i don't think banning threads is justified by them.

[14:18:14.0934] <Chris de Almeida>
what client do you use?

[14:32:58.0563] <shu>
i don't know

[14:33:01.0580] <shu>
Matrix

[15:07:11.0923] <ptomato>
+1 in favour of threads as well. would be nice if they worked properly, but I'd rather mark them read manually than scroll past all the side conversations

[15:08:32.0192] <ptomato>
BTW, I'd seen that tracking issue before; they basically identified the root cause as having moved threads out of beta too early. seems like they're working pretty hard on it; hopefully the usability fixes make it into a release soon


2023-08-10
[08:24:29.0259] <rkirsling>
ohhhhh Kris was making an _Exxon_ joke

[08:24:42.0411] <rkirsling>
I had to sit with that one for a while there

[08:45:17.0600] <shu>
ooo

[08:46:26.0293] <shu>
wait, you think i am like an oil and gas company?

[08:47:25.0912] <Kris Kowal>
you are ironically very much unlike an oil and gas company in that you have been exonerated.

[08:48:11.0038] <Kris Kowal>
but there was definitely an exxon pun in my choice of reactji.

[08:49:30.0086] <shu>
well watch out seagulls

[08:49:32.0495] <shu>
never liked the bunch

[09:24:42.0696] <Chris de Almeida>
bad luck to kill a seabird

[09:29:25.0635] <Jack Works>
üëÄ

[10:08:58.0854] <shu>
the seabirds don't need to die, only to suffer

[14:48:49.0885] <Chris de Almeida>
https://mailarchive.ietf.org/arch/msg/jsonpath/kuPW5d4Y6X6StVTs54T9tRvqxqk/

[14:49:18.0296] <Chris de Almeida>
shots fired in `JSONPath` last call review

[14:54:07.0438] <Chris de Almeida>
```
I also object.

This document is better than most IETF documents. I don't understand the
GenArt review here, and I know more about JSON than most humans on earth.

thanks,
```
ü§£

[14:54:22.0964] <shu>
what's sayrer up to these days anyway

[14:55:27.0875] <shu>
i had assumed retired

[14:55:50.0815] <Chris de Almeida>
> <@shuyuguo:matrix.org> what's sayrer up to these days anyway

getting üå∂Ô∏è on the `JSONPath` mailing list at the very least


2023-08-11
[14:04:30.0237] <Michael Ficarra>
what's the delay with getting the July meeting notes published?

[14:04:43.0682] <Michael Ficarra>
I went looking for them today in the notes repo and was surprised they weren't there

[15:07:21.0591] <Rob Palmer>
We're working with our new secretary to figure out the best process going forward. Apologies for the delay. 

[16:12:38.0286] <littledan>
> <@michaelficarra:matrix.org> what's the delay with getting the July meeting notes published?

We are working on getting the summaries done. Lots of people didn‚Äôt write summaries, and there weren‚Äôt really subsequent edits even after Samina sent out that request.

[16:13:08.0513] <littledan>
Trying to actually have summaries is a new challenge which we haven‚Äôt actually done before

[16:14:00.0751] <littledan>
If people could write good summaries and conclusions in the Google Docs, it would help a lot. Check Nicolo‚Äôs presentations for good examples.

[16:14:49.0019] <littledan>
A good summary includes some brief main points from the presentation and brief points of discussion. The conclusion is then what the committee decided as a whole. Lots of times, there was just a conclusion, and it was labeled a summary

[16:15:45.0393] <littledan>
While it would be ideal if presenters filled in summaries and conclusions, it would be Ok if other committee members filled thread in as well IMO.

[16:16:02.0432] <littledan>
* While it would be ideal if presenters filled in summaries and conclusions, it would be Ok if other committee members filled them in as well IMO.

[16:19:44.0846] <littledan>
I don‚Äôt really want to ping each person one by one or write the summaries (for topics that I didn‚Äôt present) myself, but this is the currently limiting factor for publishing the notes.

[16:28:50.0297] <ljharb>
can they not be published without the summaries, and the summaries added later?

[16:31:34.0799] <ptomato>
I saw Samina's email and checked that all my topics had summaries. please let me know if they are not written as a summary should be written


2023-08-12
[08:41:14.0928] <eemeli>
Is there a reason why the JSON spec is not available as https://tc39.es/ecma404/? I keep on expecting to find it there.

[10:32:25.0269] <snek>
what are you talking about its right here https://gc.gy/159566524.png

[10:32:41.0614] <snek>
actually is anyone else seeing that ecma's website is down again? 508 resource limit is reached 

[11:41:16.0884] <ljharb>
> <@eemeli:mozilla.org> Is there a reason why the JSON spec is not available as https://tc39.es/ecma404/? I keep on expecting to find it there.

because it‚Äôs only a pdf spec and nobody‚Äôs taken the time to convert it to ecmarkup

[11:48:03.0591] <eemeli>
Is there actually any place more appropriate than this channel for me to note that it would be nice if this thing existed? As is, there isn't a GH repo for JSON either.

[12:02:27.0139] <snek>
do you just want an html reference? or is there actual changes you want to make to json? cuz i feel like the latter is sort of purposely not a thing that happens

[12:02:54.0453] <snek>
 * do you just want an html reference? or are there actual changes you want to make to json? cuz i feel like the latter is sort of purposely not a thing that happens

[12:05:06.0903] <eemeli>
I do not want to make changes to JSON. I want an HTML reference that lets me link to specific sections of the spec.

[12:06:05.0308] <snek>
makes sense

[12:07:23.0813] <snek>
maybe https://github.com/tc39/Admin-and-Business could be good? i assume moving the source of truth for json from word doc to ecmarkup would need some process changes

[12:08:35.0018] <bakkot>
you can link to specific pages of a PDF

[14:47:26.0298] <ljharb>
eemeli: i've had that task on my backlog for awhile actually, just haven't had the time


2023-08-13
[15:06:23.0087] <ljharb>
bakkot: the more i convert codebases to use iterator helpers, the more i dearly need .concat - that follow-on can't come fast enough

[15:06:52.0430] <bakkot>
if you have use cases that will help!

[15:07:09.0257] <bakkot>
I suspect the committee will not need much convincing but it's always good to collect them

[15:10:28.0797] <ljharb>
i mean, basically every time i have a chain of transformations that starts in an iterable, and i want to manually add in some hardcoded cases. concretely, in eslint-plugin-jsx-a11y, there's a few places where we need to hardcode specific aria role values, so we need to concat them onto the Set provided by an aria library as part of the transformation chain

[15:11:07.0948] <ljharb>
also, i build up arrays/iterators of test cases, and then i want to combine the different conceptual streams of test cases, i have to reify them each into an array before concatenating

[15:12:20.0783] <ljharb>
(so specifically, i need the ability to concatenate both single values as well as iterators of values)

[15:12:45.0598] <ljharb>
 * (so specifically, i need the ability to concatenate both single values as well as iterators of values, which is exactly where concat is most useful for arrays/scalars)

[15:36:01.0046] <bakkot>
ah, that specific behavior is... not one I would carry over if we can avoid it

[15:36:17.0323] <bakkot>
we'll see though

[15:36:58.0370] <bakkot>
it's a little trickier for iterators than for arrays because a lot more things are iterable than concat-spreadable

[15:40:35.0030] <bakkot>
my inclination would be to go with the same thing as Iterator.prototype.flatMap, i.e. iterable (except strings) or iterator, otherwise error

[15:40:52.0565] <bakkot>
so you'd have to `.concat([x])` to do a single item


2023-08-14
[22:56:16.0326] <ljharb>
that's workable but gross, and it shouldn't be called concat in that case

[00:09:01.0727] <bakkot>
concat is the only name for this operation in every single language and every library

[07:00:22.0013] <Justin Ridgewell>
This is called [chain](https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.chain) in Rust, and is combined with [once](https://doc.rust-lang.org/stable/std/iter/fn.once.html) to create an iterator of a single value

[07:52:26.0305] <Michael Ficarra>
ljharb: You're in luck! I was already planning on starting work on this proposal today.

[07:53:16.0810] <ljharb>
> <@bakkot:matrix.org> concat is the only name for this operation in every single language and every library

but concat in this language accepts a single thing or a list of things

[07:55:56.0193] <Michael Ficarra>
I am very much okay with the meaning of `concat` depending on the kind of thing it's applied to

[07:58:19.0692] <Michael Ficarra>
regardless, though, it's probably more important to match one of `Iterator.from` or `Iterator.prototype.flatMap`, which both reject primitives (though differ in their handling of strings)

[10:52:57.0581] <TabAtkins>
Yeah, so long as there's an easy way to lift a primitive into an iterable (via `once()` or something), then having `concat()` only accept iterables is fine with me. 

[10:53:17.0968] <TabAtkins>
It'll still probably commit the cardinal sin of Treating Strings Like Iterables tho, unless we explicitly guard against that.

[10:55:48.0091] <ljharb>
if it requires being an array than i'll probably just always `concat([].concat(item))` which would be annoying

[10:56:04.0002] <nicolo-ribaudo>
You can lift `x` into an iterable by doing `[x]`

[11:18:43.0620] <bakkot>
> <@tabatkins:matrix.org> It'll still probably commit the cardinal sin of Treating Strings Like Iterables tho, unless we explicitly guard against that.

iterator flatmap explicitly guards against that, so concat would too

[11:19:01.0295] <TabAtkins>
Excellent.

[11:20:16.0424] <bakkot>
> <@ljharb:matrix.org> if it requires being an array than i'll probably just always `concat([].concat(item))` which would be annoying

you'd only do that if you don't know whether or not `item` is an array, surely? which... I have a hard time imagining code where that comes up very much?

[11:21:54.0446] <TabAtkins>
yeah there's very, very little non-trivial stuff you can do with a value that could be an X *or* an array of Xs that doesn't require first establishing which it is. `Array#concat` allowing it is a weird historical quirk, most langs don't have that.

[11:48:20.0587] <Michael Ficarra>
> <@bakkot:matrix.org> iterator flatmap explicitly guards against that, so concat would too

not necessarily; if we just make Iterator.from variadic, it will iterate strings

[11:48:41.0124] <bakkot>
that sounds like a good reason to do `concat` instead of making `Iterator.from` variadic

[11:48:55.0667] <TabAtkins>
Why would variadicity change this behavior.

[11:49:13.0813] <Michael Ficarra>
TabAtkins: it changes nothing, that's already the behaviour of iterator.from on a single argument

[11:49:18.0741] <bakkot>
`Iterator.from` does accept strings

[11:49:32.0059] <bakkot>
it's only specifically `flatMap` which doesn't

[11:49:32.0253] <TabAtkins>
Ah, ok, so the Sin has already been committed.

[11:49:33.0533] <TabAtkins>
Damn.

[11:49:36.0813] <Michael Ficarra>
Iterator.from and Iterator.prototype.flatMap are different in this respect

[11:49:49.0103] <bakkot>
(`Iterator.from` being an explicit coercion it makes a lot more sense there)

[11:49:54.0094] <TabAtkins>
wish I'd recognized that and complained loudly about it earlier

[11:50:24.0349] <Michael Ficarra>
but I think it's the right call for Iterator.from; whether we like it or not, strings *are* iterable

[11:50:51.0725] <Michael Ficarra>
Array.from shouldn't reject strings either

[11:50:59.0693] <bakkot>
it's important not to _implicitly_ treat strings as iterable, but explicitly is fine I think

[11:51:04.0385] <bakkot>
or, well

[11:51:06.0527] <bakkot>
given that they are iterable

[11:51:08.0776] <TabAtkins>
Since `[..."foo"]` works, I *guess*, ugh

[11:51:12.0805] <bakkot>
if they weren't, yes

[11:51:19.0454] <Michael Ficarra>
exactly

[13:08:35.0267] <ljharb>
> <@bakkot:matrix.org> you'd only do that if you don't know whether or not `item` is an array, surely? which... I have a hard time imagining code where that comes up very much?

it comes up for me all the time

[13:09:24.0190] <ljharb>
and yes the original Sin is that strings are iterable

[13:13:42.0554] <TabAtkins>
> <@bakkot:matrix.org> it's important not to _implicitly_ treat strings as iterable, but explicitly is fine I think

(Note that I still feel quite strongly that this is also a (lesser) sin; there is no Correct way to iterate a string and pretending there is just misleads authors. Giving strings well-named iterator-returning methods is the correct thing to do. But that ship sailed long ago for JS.)

