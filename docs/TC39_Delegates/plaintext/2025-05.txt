2025-05-01
[22:02:06.0035] <Aki>
y'all what font is this

[22:10:31.0303] <Aki>
i cannot find that exact 9 in any font i've looked at

[00:12:29.0797] <snek>
i believe it is two fonts

[00:12:38.0504] <snek>
the "TC" is neutraface 

[00:12:46.0079] <snek>
idk what the 39 is

[00:38:06.0726] <snek>
that 39 really is a mystery i cannot find anything that matches it

[00:38:21.0904] <snek>
inb4 the 3 and 9 are separate fonts too

[00:38:38.0735] <nicolo-ribaudo>
Maybe the .ai file for the logo has some useful metadata?

[02:03:22.0935] <Jonas Kruckenberg>
it may also be a logo-specific modification of some other typeface 

[02:03:41.0307] <Jonas Kruckenberg>
the 9 looks kinda wonky in particular 

[07:44:31.0096] <Aki>
everything is curves even in the oldest file i can find

[07:54:35.0496] <ptomato>
the "39" looks like Roboto to me, although I checked what it looks like in unmodified Roboto and the 9 is indeed off

[07:55:50.0036] <Chris de Almeida>
looks like helvetica or a variant like helvetica neue for the numbers

[07:58:22.0124] <Chris de Almeida>
top helvetica, bottom helvetica neue

[07:59:18.0667] <Chris de Almeida>
hmm, no, they are quite similar but def different

[07:59:27.0071] <Chris de Almeida>
* hmm, no, they are quite similar to the logo but def different

[08:06:46.0760] <Chris de Almeida>
SYG should know, I think he created it

[09:12:58.0334] <shu>
i did

[09:12:59.0740] <shu>
let me see

[09:16:55.0902] <shu>
i... thought it was Neutraface Bold

[09:17:02.0462] <shu>
but i see that the 9 glyph is not that 9 glyph

[09:21:21.0426] <shu>
i have no memory of what font the 39 is in

[09:23:56.0819] <Ashley Claymore>
Looks like an upside down 6 to me, maybe you were feeling extra creative that day?

[09:28:57.0191] <shu>
it shouldn't be particularly obscure, i did not spend a lot of time on it

[09:29:29.0586] <shu>
i suppose i could've manually edited the path but i don't really remember

[09:37:37.0065] <shu>
okay i'm pretty sure it's Roboto Bold, but the current version looks slightly different

[09:38:00.0931] <shu>
if you look at this font: https://github.com/erinmclaughlin/Yantramanav

[09:38:12.0221] <shu>
which is a devangari font meant to match Roboto

[09:38:19.0993] <shu>
the '39' in that font matches pretty much exactly

[09:38:31.0037] <shu>
which makes me think it had copied the number glyphs from 10 years ago

[09:38:38.0112] <shu>
and since then, Roboto has slightly updated

[09:51:18.0791] <Aki>
:interess:

[09:51:25.0081] <Aki>
thanks for your research shu 

[09:51:28.0091] <Aki>
v helpful

[10:18:20.0340] <shu>
Aki: what're you doing with the logo?

[10:18:59.0130] <Aki>
Nothing for TC39. Possibly throwing together guidance on individual TC logos.

[10:19:14.0973] <shu>
ah

[10:19:53.0724] <shu>
well, i'm sure you can tell that this logo was specifically a nod to the community JS logo. i wouldn't think any of the design here generalizes

[10:23:07.0520] <Chris de Almeida>
https://tc54.org/

TC54 copied it.  what did they use Aki ?

[10:23:14.0090] <Chris de Almeida>
* https://tc54.org/

TC54 copied the style.  what did they use Aki ?

[11:56:15.0216] <Michael Ficarra>
Roboto has an alternative glyph for 9 that appears to match

[12:04:12.0379] <shu>
ah interesting

[12:04:57.0994] <Aki>
Conveniently, Ecma's website also uses Roboto

[16:35:06.0095] <Aki>
OMG Y'ALL. 100% SUMMARIES AND CONCLUSIONS. 

[16:35:10.0718] <Aki>
Thank you all so much!


2025-05-05
[03:28:54.0967] <Rob Palmer>
syg: I just noticed that Explicit Resource Management is shipping in Chrome, despite [the source](https://chromium.googlesource.com/v8/v8/+/refs/heads/main/src/flags/flag-definitions.h#295) suggesting it is behind the `--harmony` flag.  Does Chromium always enable `--harmony` now?


[07:28:47.0819] <shu>
no, it is shipping, and we don't enable `--harmony`

[07:28:59.0295] <shu>
it's shipping by being default to on in chromium

[07:31:44.0808] <shu>
the odd state of affairs (default on in chromium, default off in v8) is due to test expectations annoyances in chromium. we kept it off in v8 in case we needed to unship in chromium

[07:31:59.0256] <shu>
should be safe to default to on now

[09:42:37.0604] <nicolo-ribaudo>
Editors, I can join this week

[09:42:45.0057] <nicolo-ribaudo>
* Editors, I can join the editor call this week

[09:42:50.0042] <nicolo-ribaudo>
It's actually the best week for me

[09:43:42.0482] <shu>
perfect


2025-05-09
[09:14:50.0461] <Chris de Almeida>
gentle reminder:  the deadline for advancement is ~7 days from now

[10:53:44.0698] <shu>
no way really

[10:53:47.0052] <shu>
we just met

[11:28:07.0790] <Ashley Claymore>
Yeah only 5 weeks between these two meetings 

[11:47:06.0232] <Rob Palmer>
Normally this next meeting would be later in the year. It's why I made sure the later weeks were an option in the interest survey. But folk (including the host) preferred an earlier meeting in this specific case. 


2025-05-12
[09:28:10.0380] <Rob Palmer>
Last time we had plenary at the Igalia office, this was the recommended hotel because it is walkable to the office.

https://www.hotelavenida.com/

[09:29:19.0595] <Rob Palmer>
Given that A Coruna is quite spread out, is that a good place to set as the default hotel to optimize taxi sharing and serendipitous conversations about negative zero in the lobby?

[09:40:24.0071] <nicolo-ribaudo>
We (Igalians going to A Coruña) usually stay at that hotel when going to the office, however this year the hotel explicitly asked us to not recommend them because they are running low on space.

I'll ask if there is some "informal" recommendation, but that's the reason why we didn't suggest that hotel this time.

[09:42:44.0787] <nicolo-ribaudo>
My personal recommendation, if you try to book that one and fail because it's full, is to prioritize hotels further north than further south (even if maybe they are a bit more distant from the office), because they are closer to the city center 

[10:12:52.0582] <ryzokuken>
There isn't an informal recommendation because none of our "second favorites" are any closer or specifically better than others.

[10:14:17.0942] <ryzokuken>
I can say both Hotel Riazor and Eurostars Atlantic have been reviewed favorably by delegates in the past.

[10:17:37.0280] <ryzokuken>
Definitely prefer hotels inwards in the peninsula (towards the city center) because it's better connected through taxis, buses and city bikes

[10:27:13.0544] <ryzokuken>
* Definitely prefer hotels inwards in the peninsula (towards the city center) because it's better connected through taxis, buses and city bikes (as well as bike paths)

[10:30:44.0013] <dminor>
I never really thought about biking, any thoughts on bicicoruña? it looks like there's spots close to both my hotel and the Igalia offices.

[10:31:10.0315] <ryzokuken>
BTW, reminder to fill the (in-person sign up form)[https://github.com/tc39/Reflector/issues/558) and also sign-up for the TG5 workshop and the (community event)[https://github.com/tc39/Reflector/issues/556] if you plan to attend. 25 folks have signed up already and we look forward to host you here! 😄 

[10:31:20.0509] <ryzokuken>
I use it everyday to commute to the office

[10:33:17.0808] <ryzokuken>
I can add more details later but the bike station at Rua Pablo Picasso is right next to the office and is a great station especially for trips to the office

[10:33:32.0979] <dminor>
That would be great, thank you :)

[10:33:41.0027] <ryzokuken>
it always has free spots to park etc

[10:33:51.0685] <ryzokuken>
sometimes getting an electric bike from there can be trickier 

[10:37:33.0363] <ryzokuken>
* BTW, reminder to fill the [in-person sign up form](https://github.com/tc39/Reflector/issues/558) and also sign-up for the TG5 workshop and the [community event](https://github.com/tc39/Reflector/issues/556) if you plan to attend. 25 folks have signed up already and we look forward to host you here! 😄 

[13:20:40.0583] <Even Stensberg>
Hi folks! Even from webpack here. We've recently finished our new governance model transition and we are looking forward to contributing to tc39 in anyway where our work clashes <3

[13:36:07.0713] <kriskowal>
We will look for you in #tc39-compartments:matrix.org!


2025-05-13
[19:13:02.0287] <rkirsling>
bakkot: should I interpret silence as a lack of significant further qualms on my Annex B PR? not trying to rush anybody, just don't want editors to have complaints to voice at presentation time, hehe

[05:21:07.0866] <Rob Palmer>
***Reminder**:  The agenda deadline for the May plenary is in **3 days time!**

https://github.com/tc39/agendas/blob/main/2025/05.md

There is **11 hours of spare time,** so now is the time to discuss matters that have remained undiscussed for too long.  Seize the moment to pitch that proposal you previously shied away from due to lack of meeting time.

[12:21:45.0805] <rbuckton>
As of today I am no longer employed by Microsoft and cannot serve as a delegate in that capacity, nor continue to champion my current set of proposals. I had hoped to recommend Explicit Resource Management for Stage 4 this meeting, but it seems I will be unable to do so unless granted invited expert status, or until such time as I find myself employed by another ECMA member organization. If you need to reach me for any reason, please feel free to send me a DM on Matrix and I can send you my personal email.

[12:23:30.0875] <Aki>
So sorry to hear this Ron, you'd be an asset to anyone who snatches you up

[15:51:48.0456] <ljharb>
oof https://www.cnbc.com/2025/05/13/microsoft-is-cutting-3percent-of-workers-across-the-software-company.html

[16:33:05.0749] <TabAtkins>
Once again all the business-school-brained nincompoops in the C-suite are copying each other, since Google's "Voluntary Exit Program" (+ firings to make up the diff for the desired amount of exits) is also kicking off this month.

[16:33:46.0048] <TabAtkins>
I shall refrain from sharing my *full* opinions here, as I would prefer they not show up in deposition later.


2025-05-15
[04:30:31.0206] <nicolo-ribaudo>
Maybe we should make the agenda deadline always be on the same weekday, rather than 10 days before the first day

[04:30:51.0358] <nicolo-ribaudo>
It makes it easy to track it and plan around it

[04:30:55.0380] <nicolo-ribaudo>
* It makes it easier to track it and plan around it

[08:25:00.0625] <TabAtkins>
Ah, like always a Friday? That would mean a variable number of days from the meeting, but within a small range, since the meetings always start M-W. I'd approve of that.

[08:25:15.0960] <TabAtkins>
"Agenda deadline is two Fridays before the meeting"

[09:17:56.0753] <ljharb>
almost every plenary starts on a tuesday, so the 10 days is the same weekday usually - this one's an anomaly

[09:18:58.0992] <nicolo-ribaudo>
Half of them start on mondays

[09:21:20.0921] <nicolo-ribaudo>
* Half of them start on mondays, half on Tuesday

[09:30:59.0254] <Michael Ficarra>
just pretend that the deadline is 2 Mondays before the meeting and you'll always be good

[09:31:34.0856] <Michael Ficarra>
me, I will continue adding agenda items 5 minutes before the deadline

[10:38:07.0396] <TabAtkins>
Monday deadlines are annoying, tho - I don't think about it the preceding week, then I miss it on Monday!

[10:39:52.0377] <TabAtkins>
But a Friday deadline, now *that's* something I can procrastinate and then panic-work into 👍️

[11:07:43.0276] <shu>
i am beyond categorical concepts such as deadlines

[13:37:00.0852] <canadahonk>
(in theory) there's no deadline for non-advancement right?

[13:43:58.0392] <nicolo-ribaudo>
Right, but if you want to get useful opinions in many cases you still need to give time to people to talk with their colleagues 

[13:45:03.0778] <nicolo-ribaudo>
Not every delegate speaks for themselves, many are actually representing their team/company for real :) And thus many companies have internal meetings before TC39 to gather internal feedback: if there is no material, it's impossible to do it

[14:06:48.0463] <mgaudet>
(Mozilla would really really really appreciate materials be available before our review meeting for example) 

[14:57:27.0669] <TabAtkins>
Yeah, for non-advancement the deadline is a "please do so" rather than a strict requirement - it's very useful to be able to review things a week+ in advance.

[16:18:36.0093] <rbuckton>
Apologies, when adding my topic and constraints to the agenda I misclicked and failed to make that a PR. The commit is dd7987ea52e8923cbcc67915176f534541276eee if it needs to be backed out for any reason.


2025-05-16
[17:00:33.0116] <Michael Ficarra>
🙁 it's not following the ordering rules

[17:36:00.0365] <rbuckton>
Thanks for fixing that

[19:45:55.0467] <jschoi>
> <@michaelficarra:matrix.org> sent an image.

Where can I find this countdown webpage?

[20:07:38.0220] <Michael Ficarra>
@jschoi:matrix.org linked from the agenda

[20:07:55.0128] <Michael Ficarra>
https://www.timeanddate.com/countdown/generic?iso=20250516T10&p0=681&csz=1&msg=TC39%20Submission%20deadline

[22:07:25.0181] <rkirsling>
cute

[08:51:42.0658] <TabAtkins>
ljharb: Narrow window for SeededPRNG between our two constraints!

[08:52:09.0256] <ljharb>
lol true, but there's 3 days in which to find it :-p

[11:07:41.0909] <nicolo-ribaudo>
:P

[11:19:58.0959] <Chris de Almeida>
what is this help button you speak of

[11:23:26.0009] <bakkot>
go to the spec, type `?`

[11:23:54.0401] <bakkot>
this works on a surprising number of sites, like youtube

[11:25:10.0879] <bakkot>
I have actually mentioned this at least once or twice during the editor updates in plenary but no one pays attention to those either

[11:29:49.0446] <Ashley Claymore>
I pay attention to them. Our spec tech is the coolest

[13:20:19.0013] <Michael Ficarra>
until the new version of ecmarkup lands, `0` is a secret keyboard shortcut 🤫

[13:20:25.0529] <Michael Ficarra>
it wasn't previously listed in the help modal

[13:20:30.0355] <Michael Ficarra>
who knows what it will do

[13:22:37.0934] <Michael Ficarra>
well I have an upcoming talk I think you'll like https://2025.ecoop.org/details/plss-2025-papers/2/The-Software-Supporting-the-JavaScript-Language-Specification (also at RPLS)


2025-05-19
[10:40:04.0452] <nicolo-ribaudo>
Chris de Almeida What is https://github.com/tc39/Admin-and-Business/blob/main/.github/ISSUE_TEMPLATE/delegate-to-invited-expert.md for, if not for when a delegate leaves their company and somebody wants to keep them around as an invited expert?

[10:40:50.0931] <nicolo-ribaudo>
* Chris de Almeida What is https://github.com/tc39/Admin-and-Business/blob/main/.github/ISSUE\_TEMPLATE/delegate-to-invited-expert.md for, if not for when a delegate leaves their company and gets at the same time nominated as an IE?

[10:42:19.0364] <nicolo-ribaudo>
Oh I had a typo in the name, was that it?

[11:14:43.0727] <Chris de Almeida>
it's because there are already steps completed for them which do not require the full onboarding steps.  but first the IE needs to be nominated and we have a feedback period (7 days), etc

[14:22:58.0969] <bakkot>
dminor: the slides for upsert are linked but not accessible

[16:56:22.0638] <rkirsling>
shouldn't the upsert proposal be renamed now that the method in question has been renamed?

[16:56:58.0320] <rkirsling>
like, it's already gotta be pretty confusing for anybody not paying close attention, and it'll get even more confusing once MDN et al. are in the mix


2025-05-20
[17:21:50.0779] <Michael Ficarra>
no, we shouldn't change the name, we should just avoid naming proposals after specific API names in the first place

[17:22:15.0788] <Michael Ficarra>
I watch very carefully for this mistake during advancement to Stage 1, and so should you

[17:23:09.0049] <Michael Ficarra>
this proposal was a very old one that had been revived though

[20:29:06.0446] <rkirsling>
understood 🫡


2025-05-21
[04:45:00.0654] <canadahonk>
I think I don't have perms to edit the repo metadata for https://github.com/tc39/proposal-math-clamp, could I get perms for that (or could someone update the link to tc39.es)?

[04:45:09.0687] <canadahonk>
* I think I don't have perms to edit the repo metadata for https://github.com/tc39/proposal-math-clamp, could I get perms for that (or could someone update the link to tc39.es)? ty

[07:26:47.0488] <ljharb>
fixed!

[11:42:40.0167] <jschoi>
> <@rkirsling:matrix.org> like, it's already gotta be pretty confusing for anybody not paying close attention, and it'll get even more confusing once MDN et al. are in the mix

This reminds me of a longstanding bugbear I’ve had. I much prefer the term “pipe operator” to the unnecessarily long name “pipeline operator”, and I’ve long wanted to rename proposal-pipeline-operator to proposal-pipe-operator. 
But I’ve accepted that the repository name should be left alone. I just need to make sure MDN names with the shorter name it if it ever reaches Stage 3…

[11:44:18.0417] <jschoi>
> <@michaelficarra:matrix.org> no, we shouldn't change the name, we should just avoid naming proposals after specific API names in the first place

I think this is a good policy, but what should proposal-upsert have been called at Stage 1 instead of its current name?
(Autocorrection changed it on my phone just now to “proposal-upset”, which might be as good of a name as any.)

[11:45:21.0299] <jschoi>
> <@michaelficarra:matrix.org> I watch very carefully for this mistake during advancement to Stage 1, and so should you

I feel that this advice should be in https://github.com/tc39/how-we-work/blob/main/champion.md and related files. 

[11:47:22.0978] <Michael Ficarra>
the more general advice is "don't overcook your Stage 1 proposal", and choosing a name that's not tied to a particular solution follows from that

[11:52:46.0580] <Michael Ficarra>
ironically, "map get-or-insert" would probably be it, though "upsert" isn't the worst since it means that same thing to many people, it's just not universally known and not self-evident to those who don't know it

[15:34:51.0843] <bakkot>
shu: I assume you've seen https://github.com/WebAssembly/custom-descriptors/blob/main/proposals/custom-descriptors/Overview.md

[15:34:58.0440] <bakkot>
some bearing on the structs proposal, maybe

[15:48:46.0041] <Michael Ficarra>
@bakkot:matrix.org it was presented at the wasm CG yesterday (and advanced!) and both Shu and I were there

[16:18:19.0239] <shu>
bakkot: yes, thomas is a colleague

[16:19:09.0395] <bakkot>
good good


2025-05-24
[08:40:17.0614] <rkirsling>
whoa the meeting is Wed-Fri instead of Tue-Thu

[08:40:26.0475] <rkirsling>
how'd that happen 

[09:40:24.0795] <Rob Palmer>
That's a good reminder to not turn up at Igalia'a office on the Tuesday! "Wed" was put in bold on the calendar to emphasize this. 

https://github.com/tc39/Reflector/issues/541

[11:01:58.0673] <Andreu Botella>
That said, if someone gets that wrong, there'll be people at the office. While you're there, you could help us set stuff up 😇


2025-05-25
[13:26:46.0025] <snek>
i've been there the whole time 🥷


2025-05-26
[21:41:29.0314] <rkirsling>
okay sam


2025-05-27
[03:04:53.0133] <Luca Casonato>
what are people's opinons on changing the `Map` and `Set` constructor to not call `Symbol.iterator` on the passed value if the passed value brand checks as a Map/Set? So `new Map(new Map())` would not call `Map.prototype[Symbol.iterator] ` anymore

[03:44:54.0506] <Ashley Claymore>
We didn't do this for `Set.prototype.union` and co

[03:51:57.0744] <Ashley Claymore>
Do any engines have a faster path for this already, the value is a real Map and the iterator hasn't been modified 

[03:54:18.0046] <Ashley Claymore>
I am interested how much benefit there would be if we can modify array destructuring to avoid the iterator when destructuring an array

[05:45:27.0041] <yulia>
Is the draft schedule up yet?

[06:48:03.0600] <Chris de Almeida>
nearlyu

[06:48:05.0653] <Chris de Almeida>
* nearly

[07:13:06.0908] <Chris de Almeida>
draft schedule now available via reflector issue:  https://github.com/tc39/Reflector/issues/558

[08:20:49.0233] <Luca Casonato>
> <@aclaymore:matrix.org> I am interested how much benefit there would be if we can modify array destructuring to avoid the iterator when destructuring an array

Yes this was the next thing I was going to ask

[08:22:41.0447] <ljharb>
engines can already do that unobservably when they know the map/set isn't modified

[08:38:10.0263] <snek>
I don't think any engine does it for these, it's very annoying to track

[08:38:20.0662] <snek>
having the spec change would definitely help

[08:41:45.0955] <mgaudet>
Agreed with snek; while heroics are possible and sometimes happen, any place we can specify that no heroics re needed is appreciated 

[08:41:50.0322] <mgaudet>
* Agreed with snek; while heroics are possible and sometimes happen, any place we can specify that no heroics are needed is appreciated 

[09:12:48.0478] <iain>
We actually [already optimize this path](https://searchfox.org/mozilla-central/source/js/src/builtin/MapObject.cpp#789-800)

[09:13:41.0966] <iain>
Although it would be nice if we didn't have to do all the careful plumbing to make sure it's a valid transformation

[09:14:33.0868] <ljharb>
(tbc i'm fully on board with having explicit fast paths for things that pass brand-checks)

[09:25:03.0839] <bakkot>
at least the map iterator isn't side-effecting

[09:25:16.0169] <bakkot>
array iteration is probably the most common case and the iterator has side effects all over the place

[09:36:03.0086] <Ashley Claymore>
Array iterstor side-effecting in that it triggers MOP methods?

[09:36:25.0195] <Ashley Claymore>
* Array iterator side-effecting in that it triggers MOP methods?

[09:40:56.0155] <bakkot>
sure and also getters

[09:42:47.0087] <bakkot>
also this is a good place for me to beat my drum of "iterating built ins does not need allocations" https://docs.google.com/document/d/1M5S-u3N3vQkVBGFCoaYt_ABPGl0EW16QQrvDBaY2FiE/edit

[12:11:25.0760] <shu>
Rob Palmer Chris de Almeida please accommodate https://github.com/tc39/agendas/pull/1889 if possible. i know that AsyncContext is held up on web integration stuff, and Scott represents the web side of it for Chrome, so i think it's important to get his input during plenary

[12:13:07.0617] <shu>
could a chair please ping me if the constraint could (or not) be accommodated?

[12:13:26.0037] <shu>
(in case of not, would try to find a secondary)

[14:33:57.0288] <James M Snell>
Hey all... had some feedback come up with regards to Explicit Resource Management today that I wanted to surface and get some input on. The question specifically is, "I think explicit resource management is missing a really important feature: The ability to transfer ownership. I need a way to "release" a variable I declared with using, especially to return it." ... essentially treating the ERM/using as similar to an RAII that can be moved away.

```
function foo() {
  using foo = new Foo();
  using bar = new Bar();
  // I only want foo or bar disposed if they are not returned
  if (someCondition()) return bar; 
  else return foo;
}
```

[14:35:15.0819] <James M Snell>
Unfortunately, since both are declared with `using`, both are going to be disposed when the function returns. The ask from the feedback is whether it would make sense to have some generalized "release" or "move" capability.. like `return move bar`, etc

[14:37:33.0207] <James M Snell>
obviously we can follow a pattern similar to `DisposableStack` and have the disposable object itself declare a `move()` method but that means allocating a new object or having to keep track of the moved state manually

[14:37:54.0500] <Duncan MacGregor>
So I think one of the good things about explicit resource management is its simplicity, there isn't much of an ownership or lifetime model to think about or to get wrong.

[14:38:01.0726] <James M Snell>
we can also null/undefined out the original decl and assign it to a regular scoped variable but that's also a bit wonky

[14:38:18.0541] <James M Snell>
100% agree

[14:38:41.0455] <Duncan MacGregor>
I think I'd prefer seeing people declaring `move()` themselves rather than trying to design something in the language.

[14:39:49.0340] <Duncan MacGregor>
But now I'm curious if typescript could layer a full borrow checker on top and do this automatically. :-)

[14:40:06.0676] <James M Snell>
* we can also null/undefined out the original decl and assign it to a regular scoped variable but that's also a bit wonky .... actually, nevermind, I don't think this works

[14:52:24.0608] <James M Snell>
Making every disposable object declare a `move()` is a bit ... difficult.  From the conversation I'm having in another channel on this, "It has to allocate a new instance of itself and move all the contents over to it. This is a lot of work to write for every type. And if anything else in the world holds a (presumably non-owning) reference to the object, those references are now invalid, so it might not even be possible to implement move() correctly, at least without adding a layer of indirection."

[15:16:03.0682] <Duncan MacGregor>
I think I need to sleep on it. I've started writing an reply about 5 times, and deleted them 5 times. My essential concern is that both the 'other non-owning references becoming invalid' and the return of the resource suggest that it is leaking in ways that probably aren't good for an explicit allocated and released resource (the former because we seem to have lost ownership during the method's lifetime, and the latter because we can't require the result is allocated to a variable declared with `using`).

[15:19:54.0155] <James M Snell>
yeah, it's a tricky one

[15:21:04.0175] <James M Snell>
I prefer the simplicity of ERM as it is but compared to the typical RAII pattern in c++, etc it's a bit *over* simplified... and that's there the questions here are coming from. We have a code base that is quite heavy in RAII mechanisms and the c++ level with no equivalent at the JS level

[15:22:49.0638] <nicolo-ribaudo>
If we get Symbol.enter/exit, then you'd be able to declare a function `movable` that you'd use as `using x = movable(foo)`

[15:23:03.0858] <James M Snell>
Another example to stew on... 
```
function foo() {
  using bar = new MyDisposable();
  if (someCondition()) throw new Error('boom'); // I want bar disposed in this case
  return bar;  // I don't want it disposed in this case
}
```

[15:23:40.0794] <James M Snell>
Is there an open proposal for this?

[15:23:49.0896] <James M Snell>
and is it functions only?

[15:25:24.0444] <nicolo-ribaudo>
Actually maybe you don't need .enter? (Sorry my element client is refusing to format markdown)

Instead of
```
using foo = getObj()
```
you can do
```
const foo = getObj();
using move = movable(foo)

...

move()
```

Where movable returns a function move that returns foo and has its own dispose method, deactivated by move.

[15:25:49.0068] <nicolo-ribaudo>
* Actually maybe you don't need .enter? (Sorry my element client is refusing to format markdown)

Instead of
```
using foo = getObj()
```
you can do
```
const foo = getObj();
using move = movable(foo)

...

move()
```

Where movable returns a function move that returns foo and has its own dispose method forwarded to foo, deactivated by move.

[15:26:38.0190] <James M Snell>
ah, ok, so it's essentially like declaring a disposable boxed type similar to `DisposableStack`

[15:26:40.0467] <nicolo-ribaudo>
> <@jasnell:matrix.org> Is there an open proposal for this?

We have https://github.com/tc39/proposal-explicit-resource-management/issues/195

[15:26:59.0782] <nicolo-ribaudo>
It was also discussed in the context of async context, maybe Chengzhong Wu knows if we actually have a proposal

[15:27:48.0287] <James M Snell>
Interesting ok

[15:45:55.0830] <Chengzhong Wu>
https://github.com/tc39/proposal-using-enforcement for Symbol.enter

[16:32:49.0546] <bakkot>
```js
function movable(foo) {
  let dispose = foo[Symbol.dispose];
  if (typeof dispose !== 'function') throw new Error('not disposable');
  return {
    resource: foo,
    moved: false,
    [Symbol.dispose]() {
      if (this.moved) return;
      dispose.call(foo);
    },
    move() {
      this.moved = true;
    },
  }
}
```

[16:33:06.0219] <bakkot>
```js
// usage:
function makeDisposable() {
  return {
    [Symbol.dispose]() {
      console.log('disposed');
    },
  };
}
{
  using movableFoo = movable(makeDisposable());
  const { resource: foo } = movableFoo;
  console.log('normal exit');
  // disposed
}
{
  using movableFoo = movable(makeDisposable());
  const { resource: foo } = movableFoo;
  movableFoo.move();
  console.log('moved before exit');
  // not disposed
}
```

[16:33:22.0913] <bakkot>
this seems like it's fine to leave to userland

[16:33:49.0125] <bakkot>
it's a little boilerplate I guess

[16:49:27.0664] <Ashley Claymore>
Could make .move return a new movable in the same way DisposableStack.p.move returns a new Stack

[16:50:29.0127] <Ashley Claymore>
or maybe just return the resource after nulling it out 

[16:52:51.0103] <Ashley Claymore>
though need to be careful moving in a _tearable_ hand over 

[16:55:03.0859] <bakkot>
* ```js
function movable(foo) {
  let dispose = foo[Symbol.dispose];
  if (typeof dispose !== 'function') throw new Error('not disposable');
  return {
    resource: foo,
    moved: false,
    [Symbol.dispose]() {
      if (this.moved) return;
      dispose.call(foo);
    },
    move() {
      this.moved = true;
      return foo;
    },
  }
}
```

[16:55:43.0900] <bakkot>
I think just returning the resource is better for the cases described above; presumably the caller is not expecting this wrapped thing and _a priori_ there is no reason to expect them to want to move it again

[16:56:02.0094] <Ashley Claymore>
```
return {
  p: moveable.move(),
  q: mightThrow()
}
```



[16:56:14.0635] <bakkot>
but good idea, returning the resource is a nice convenience, updated

[16:56:21.0550] <bakkot>
yeah it's easy to hold this wrong

[16:56:31.0827] <bakkot>
although this is also true of `disposableStack.move()`

[16:56:49.0493] <bakkot>
boundaries are always tricky

[16:56:59.0144] <bakkot>
not much to be done about that though without linear types

[16:57:05.0321] <Ashley Claymore>
Yeah, the point of stack.move is that it should be the very last expression 

[16:57:22.0752] <Ashley Claymore>
to ensure the time to move has truly arrived 

[16:58:02.0659] <shu>
if you return the resource and not a new movable, isn't that more like release()

[16:58:23.0318] <bakkot>
I guess but I liked the symmetry with `disposableStack.move()`

[16:58:39.0469] <shu>
but DS does return a new movable DS

[16:59:44.0420] <Ashley Claymore>
one difference is that the resource is itself a disposable, so it can be _used_ by the caller


2025-05-28
[17:00:10.0941] <Ashley Claymore>
only needs to remain a movable if the intention is to move again

[17:02:08.0414] <rbuckton>
Wouldn't you just use `DisposableStack` itself for this?

[17:03:07.0202] <Ashley Claymore>
Yeah I would 

[17:03:08.0832] <bakkot>
only if it's all-or-nothing

[17:03:15.0538] <James M Snell>
DS was my initial response on the discussion on this side but the feedback is that it just *feels* cumbersome 

[17:03:22.0798] <bakkot>
making one stack per resource is kinda annoying

[17:03:33.0665] <bakkot>
though I guess not really any different than the wrapper, in practice

[17:03:36.0180] <rbuckton>
Maybe, but it works.

[17:03:55.0206] <James M Snell>
More context from the discussion I've been having on this side. It should give more context

[17:03:58.0688] <rbuckton>
Changing ownership should be rare.

[17:04:35.0170] <James M Snell>
Keeping in mind that this is coming from someone who is super familiar with RAII patterns and move semantics in C++

[17:04:38.0339] <bakkot>
yeah but it takes one more line than my little wrapper, because you have to `new` the stack before you can use it

[17:04:51.0737] <bakkot>
difference between two lines of boilerplate and one line of boilerplate is a lot!

[17:05:39.0274] <bakkot>
anyway yes it totally works, just saying that if this was bothering someone a lot I would recommend they write a wrapper such as the above and maybe that will placate them

[17:05:52.0929] <rbuckton>
Except your wrapper could just new up a `DisposableStack`. It also breaks the RAII pattern, since you need a 2nd `const { resource: foo } = ...` line.

[17:08:42.0155] <bakkot>
implementation of the wrapper is not important, just the ergonomics, and if it were me I would definitely be happier breaking the RAII pattern and having one line of boilerplate per resource, vs having two lines of boilerplate

[17:11:21.0242] <rbuckton>
```js
const movableFoo = new DisposableStack();
const foo = movableFoo.use(makeDisposable());
```
is just as many lines

[17:11:28.0021] <rbuckton>
* ```js
using movableFoo = new DisposableStack();
const foo = movableFoo.use(makeDisposable());
```

is just as many lines

[17:12:03.0591] <bakkot>
Sure; I guess I wasn't thinking of the `const { resource: foo } = movableFoo;` as boilerplate.

[00:41:55.0020] <Rob Palmer>
FYI we had to switch the Notes (Google Doc) link.  Please see [the reflector post](https://github.com/tc39/Reflector/issues/558) for the new link.

[00:50:29.0975] <Rob Palmer>
The meeting begins in 9 minutes!!!

[00:50:41.0294] <Rob Palmer>
Please could someone dial in and help us check the AV.

[00:51:58.0713] <rkirsling>
I'm on the call

[00:52:48.0179] <rkirsling>
* I'm on the call, if you need me to try something

[00:55:27.0409] <rkirsling>
really interesting integration of multiple cameras in the room there

[00:55:40.0121] <naugtur>
TCQ link in the Reflector for the meeting is a github issues view with a TODO for a filter. Is that expected?

[00:56:18.0420] <naugtur>
I see it updated now

[00:56:26.0958] <canadahonk>
uhh hackmd.io is down for me btw

[00:56:37.0198] <rkirsling>
TCQ, I seek you

[00:56:42.0587] <rkirsling>
* TCQ, we seek you

[00:56:48.0718] <canadahonk>
* uhh hackmd.io is down for me btw (for draft schedule)

[00:57:05.0062] <rkirsling>
it loaded crazy slow for me but I thought it was my company's network, heh

[00:57:32.0099] <canadahonk>
ah yeah I refreshed like 5 times and it loaded now lol

[01:01:00.0678] <canadahonk>
TCQ link is up on Reflector now

[01:09:19.0716] <jkup>
Is there history where we are nervous to / unable to alter TCQ? 

[01:09:29.0627] <jkup>
(always curious when we get to the "please do not click the button" part of the intro)

[01:10:54.0329] <canadahonk>
notes are indeed online and being transcribed 🎉

[01:11:22.0617] <Christian Ulbrich>
TCQ is just waiting to be reborn. Groundwork has been done, we just need some decisions. -> https://github.com/zalari/tcq/tree/feature/minimal-dockerized

[01:11:36.0192] <Christian Ulbrich>
Hope to find some time during the plenary...

[01:21:58.0516] <sffc>
I am getting a 504 Gateway Time-out on the Hackmd draft schedule page.

[01:22:16.0526] <naugtur>
keep refreshing

[01:23:27.0560] <rkirsling>
hell yeah, editor's update

[01:23:33.0045] <rkirsling>
* hell yeah, editors' update

[01:24:02.0261] <rkirsling>
(just felt the need to counter Michael's sarcasm 😁)

[01:27:40.0499] <rkirsling>
oof, that sucks to hear, Chip 

[01:27:55.0634] <jkup>
+1 sorry to hear but as always *love* your JSON updates

[01:28:00.0165] <nicolo-ribaudo>
Maybe Chip should have told AA "without JSON, none of your airplanes would ever take off"

[01:32:36.0807] <Michael Ficarra>
@nicolo-ribaudo:matrix.org probably also without JS 😭

[01:37:30.0739] <nicolo-ribaudo>
Oh are we going to use this as the first inline "normative optional" step? nice

[01:38:56.0949] <Michael Ficarra>
@nicolo-ribaudo:matrix.org no, technically not

[01:39:29.0828] <Michael Ficarra>
https://github.com/tc39/ecma262/pull/2952 will be landing first

[01:45:34.0845] <Jesse (🇪🇸)>
looking at the fairly light schedule on Friday, is there any interest in having some optional self-organized breakout sessions, similar to what we did in Seattle?

[01:48:03.0597] <Rob Palmer>
Thanks for raising this Jesse.  I think Friday is currently up for debate as to what we do given we have at most 1 hour of content so far.

[01:48:55.0272] <Christian Ulbrich>
I'll gladly discuss moving TCQ forward...

[01:53:05.0095] <Rob Palmer>
Christian, please send a PR to the agenda so others get visiblity.

[01:55:40.0420] <Christian Ulbrich>
Rob Palmer: I'll do!

[01:58:13.0503] <Jesse (🇪🇸)>
I've also made one (not sure about the placement in the agenda): https://github.com/tc39/agendas/pull/1891

[02:14:43.0522] <waldemar>
Where can I find the time zone history of Niue? Currently it's in the UTC-11 time zone.

[02:16:33.0951] <Chengzhong Wu>
it could be in "Longer or open-ended discussions" instead of "Overflow items, right?

[02:17:24.0912] <Michael Ficarra>
tzdata, presumably https://www.iana.org/time-zones

[02:17:34.0617] <JaseW>
https://github.com/eggert/tz/blob/main/australasia#L644-L657

[02:19:16.0583] <Jesse (🇪🇸)>
updated, thanks!

[02:22:40.0113] <ryzokuken>
how's the view of the meeting room for folks online? Does it look good? awkward? disorienting?

[02:23:21.0191] <ryzokuken>
"aaaand with that the camera moved to him again"

[02:23:40.0207] <snek>
the camera's auto framing seems a bit wonky yeah

[02:24:35.0734] <ryzokuken>
it relies on the in-built microphone and only works precisely if we use it as everything (camera, mic and speakers)

[02:24:43.0199] <ryzokuken>
but we gotta use the room's sound

[02:25:01.0706] <snek>
ah so it gets confused by the room speakers

[02:25:03.0290] <Michael Ficarra>
"pre-approval" for something so arbitrary seems... bad

[02:25:14.0511] <ryzokuken>
so it's a tradeoff... if you prefer to be framed you could speak a bit louder but it's not exactly in the middle 

[02:25:21.0318] <ryzokuken>
* so it's a tradeoff... if you prefer to be framed you could speak a bit louder but it's not exactly in the middle either 

[02:25:49.0941] <naugtur>
The 1st sentence is ambiguous about the undefined being returned in place of string or object

[02:27:14.0620] <snek>
it's the same level of ambiguous as saying one of the string values could be returned in place of the object. 

[02:34:32.0055] <Chengzhong Wu>
my first impression on category "standard library" is https://github.com/tc39/proposal-built-in-modules

[02:34:54.0588] <Chengzhong Wu>
the proposal also claims "Built In Modules Proposal (aka JavaScript Standard Library)"

[02:37:38.0129] <Michael Ficarra>
@dminor:mozilla.org the slides said the champions assign the topics

[02:40:59.0179] <Michael Ficarra>
I think the categories part still needs a lot more thinking

[02:41:29.0018] <Jesse (🇪🇸)>
this could be a little breakout topic!

[02:42:25.0843] <nicolo-ribaudo>
Is Bigint a new capability?

[02:42:42.0649] <nicolo-ribaudo>
Technically transpilable, but in practice it's not

[02:44:34.0768] <Rob Palmer>
Transpilable-with-terrible perf, vs previously-impossible (WeakRef)

[02:44:49.0503] <Jesse (🇪🇸)>
I guess for bigint, we have a new primitive type, so I guess new capability

[02:45:20.0409] <nicolo-ribaudo>
Fwiw Babel polyfills+transpiles symbols

[02:45:57.0610] <nicolo-ribaudo>
Except for the Symbol object wrappers probably 

[02:47:03.0918] <Andreu Botella>
are you transpiling typeof?

[02:47:10.0164] <nicolo-ribaudo>
Yes

[02:48:30.0740] <Michael Ficarra>
I would prefer we not spend too much time on the portion of this topic that was explicitly stated as a non-goal at the moment

[02:48:35.0482] <Rob Palmer>
maybe we should articulate levels of transpiling, (e.g. whole-program stuff where you handle typeof)

[02:55:36.0626] <Michael Ficarra>
obviously "process change"

[04:04:14.0333] <Rob Palmer>
The meeting has resumed with AsyncContext

[04:18:05.0292] <jkup>
Is someone (possibly an IE) asking questions via the Google Meet chat? I wanted to make sure we weren't missing anything important. I tried joining the Meet call but I can't see previous messages.

[04:18:32.0495] <jkup>
(Rob took care of this, sorry)

[04:20:01.0050] <ryzokuken>
thanks for raising it 

[04:27:31.0976] <Rob Palmer>
MarkM's audio is not the high quality he normally has.  Maybe a different mic is in use.

[04:28:17.0117] <ryzokuken>
should we let him know if it persists?

[04:28:25.0290] <naugtur>
@erights Mark Miller (Agoric) MM: It's a popular trick, used inside React and alike, to use postMessage instead of setTImeout(,0) to avoid the browser limiting how often it runs (setTimeout and others are being prevented from tightly looping)

[04:42:04.0282] <nicolo-ribaudo>
The good thinks about properties is that they can be analyzed on a case-by-case basis

[04:42:07.0881] <nicolo-ribaudo>
* The good thing about properties is that they can be analyzed on a case-by-case basis

[04:42:42.0131] <Chengzhong Wu>
it could also be incrementally added, btw

[04:43:46.0125] <nicolo-ribaudo>
Steve Hicks Do you have examples of DOM events that are async and dispatched from JS? When I actually looked into them, most of them were either sync or browser-generated

[04:56:58.0187] <nicolo-ribaudo>
* Steve Hicks Do you have examples of DOM events that are async and dispatched from JS? When I actually looked into them, most of them were either sync or browser-generated

EDIT: Oh well, load and error obviously, as Michal has on the queue

[05:18:21.0761] <ryzokuken>
`variantList`

[05:44:43.0004] <Steve Hicks>
Looking through the HTML spec, I see a lot of cases where load/error and fired async with JS causes; media resize is async and can be caused by e.g. changing the track; various media events (abort, emptied, timeupdate, and many others) are an async result of load(); input elements' showPicker() can async-fire cancel/input/change; el.select() can async-fire various select events, dialog.show() async-fires a toggle event

[05:44:59.0945] <Steve Hicks>
This isn't an event, but toBlob() invokes its callback async

[05:46:14.0502] <Steve Hicks>
At one point we'd discussed having "queue a [...] task to" carry an implicit "propagating the current context" - I'm not sure I ever heard a reason why that wasn't viable.

[05:51:44.0450] <yulia>
Luca Casonato: Sorry i couldn't speak more re async-context, I'm in a really loud location and was just listening in. As Dan said, i think the best feedback you will get is from Ollie at hackfest later next week

[05:52:00.0913] <yulia>
i'll be moving to a quieter location so if necessary i'll be able to talk more at length

[06:02:00.0380] <Andreu Botella>
that would definitely work for some async events, but not for those that go "in parallel"

[06:02:22.0452] <Andreu Botella>
and implementing that could run into a lot of issues

[06:04:13.0621] <Steve Hicks>
if we're going case-by-case, then at least having the non-parallel tasks propagate might be a better compromise

[06:09:43.0021] <yulia>
sorry it looks like my mic is broken

[06:10:04.0648] <ryzokuken>
no worries I suspected you might still be in the loud location

[06:10:10.0852] <ryzokuken>
lmk if you fix it and would like to speak

[06:10:42.0460] <yulia>
if we have confirmation from moddable and v8  that they have no issues with the new changes i think it is fine to go ahead. 

[06:11:16.0593] <nicolo-ribaudo>
If we have confirmation that they didn't yet, should the proposta stage at stage 3?

[06:11:24.0489] <nicolo-ribaudo>
* If we have confirmation that they didn't yet, should the propostal stay at stage 3?

[06:11:28.0010] <nicolo-ribaudo>
* If we have confirmation that they didn't yet, should the proposal stay at stage 3?

[06:11:56.0499] <yulia>
then i think there is more to discuss. its a similar issue as test262 -- are we closer to a month vs a year of getting those changes landed? My guess is closer to a month, if someone can sign up for that. In that case conditional advancement is appropriate

[06:11:56.0655] <nicolo-ribaudo>
* If we have confirmation that they didn't yet implement them, should the proposal stay at stage 3?

[06:13:14.0643] <yulia>
on our end we can't guarantee it will be in a month, but the work isn't that far off. I would rather that we have more experience than less with a spec change. i don't want to block this because outstanding issues have been addressed, but we may want to advance this at a later date just to make sure all the t's are crossed and i's are dotted

[06:13:30.0627] <yulia>
but that might fall outside of what we've defined as conditional advancement. 

[06:14:16.0241] <yulia>
feel free to read it out, i'll switch locations and get a new mic after this proposal

[06:14:47.0392] <yulia>
ron -- it *might* be a blocking concern. I don't really want it to be but it might be. Can we get anyone from v8 or moddable to speak?

[06:17:32.0843] <yulia>
100% support getting this through ron, sorry to be a pita here... 

[06:17:58.0627] <rbuckton>
Not a problem.

[06:22:07.0661] <yulia>
* if we have confirmation from moddable and v8  that they have no issues with the new changes and that they are implemented i think it is fine to go ahead. 

[06:34:02.0921] <Luca Casonato>
@jschoi we were just joking about the fact that michael was so suprised by all of this

[06:38:06.0077] <Michael Ficarra>
serves me right for chatting in the hallway too long 😓

[06:50:14.0530] <ljharb>
we usually don't pick reviewers til stage 2

[06:50:24.0578] <Andreu Botella>
who volunteered for stage 3 review?

[06:50:26.0955] <ljharb>
* we usually don't pick reviewers til stage 2, i thought

[06:50:27.0578] <nicolo-ribaudo>
Yeah but if the hope is to do 1->2.7 at the next meeting

[06:50:31.0293] <Andreu Botella>
we missed noting the speaker on the notes

[06:50:31.0926] <ljharb>
ah right k

[07:22:41.0550] <eemeli>
As we've a longish queue and overall some slack in the meeting timetable, could the timebox for this discussion be extended until it's extinguished?

[07:24:15.0580] <ljharb>
there's tons of schedule constraints

[07:26:13.0212] <Rob Palmer>
eemeli: we've already given this more timebox than allocated.  a continuation is possible another day.  we have space after lunch tomorrow for example.

[07:26:16.0082] <Duncan MacGregor>
Is the decimal proposal now a subnormal distance from progressing? :-)

[07:28:00.0565] <nicolo-ribaudo>
Not sure if Mark is here, but to answer his question to Shane. For every Number value x, Number(Decimal(x)) gives back x. This means that if you create an Amount from a Decimal that was originally created with a Number, you can get the original number out of it by explicitly casting it to Number.

[07:28:40.0630] <nicolo-ribaudo>
(I'm not 100% sure this is true about Infinity because I don't remember what Decimal does with Infinity, and what Amount does with it)

[07:34:39.0151] <Jesse (🇪🇸)>
Infinity also works

[07:35:23.0083] <Jesse (🇪🇸)>
(the reason is to align with Decimal; i.e., since Decimal supports them, so should Amount)

[07:35:30.0071] <snek>
Decimal can represent every ieee754 double fp value?

[07:35:48.0178] <Jesse (🇪🇸)>
(one could argue that amount shoulnd't support infinity and NaN, but that's the current thinking)

[07:37:59.0359] <Jesse (🇪🇸)>
well, it doesn't support literally all of them (Shane offered a simple example, and Waldemar suggested another in the queue), but it *practically* does, in the sense that the toString of all binary64's have fewer than 34 significant digits

[07:38:11.0334] <nicolo-ribaudo>
What do you mean by "represent"?

- For every Number x, there is a Decimal y such that MV(x)=MV(y)? no
- For every Number x, there is a Decimal y such that Number(Decimal(x))=x? yes

[07:38:27.0888] <snek>
ok

[07:38:43.0720] <nicolo-ribaudo>
* What do you mean by "represent"?

- For every Number x, there is a Decimal y such that MV(x)=MV(y)? no
- For every Number x, there is a Decimal y such that Decimal(x)=y and Number(y)=x? yes

[07:39:54.0497] <Jesse (🇪🇸)>
there's a discussion of the representability issue here: https://github.com/tc39/proposal-measure/issues/26#issuecomment-2865053353

[07:42:50.0807] <shu>
what is this in reference to?

[07:43:52.0647] <Chris de Almeida>
> if we have confirmation from moddable and v8  that they have no issues with the new changes and that they are implemented i think it is fine to go ahead. 

[07:45:44.0668] <shu>
new changes to what?

[07:45:55.0314] <nicolo-ribaudo>
Banning it in `switch`

[07:46:00.0059] <nicolo-ribaudo>
* Banning `using` in `switch`

[07:46:00.0071] <arai>
https://github.com/rbuckton/ecma262/pull/14

[07:46:13.0940] <shu>
oh yeah, i started that issue and have implemented the ban

[07:46:22.0086] <shu>
didn't we get consensus last meeting for it?

[07:46:47.0548] <nicolo-ribaudo>
Yes, but the proposal was going for Stage 4 earlier today and we wanted to make sure that the change has actually been tested in an implementation

[07:46:57.0957] <shu>
ah ha

[07:46:58.0193] <nicolo-ribaudo>
Since well, stage 4 requires implementations

[07:47:17.0839] <shu>
confirmed v8 has no concerns here


2025-05-29
[01:00:31.0812] <Rob Palmer>
We are now starting the meeting!

[01:02:57.0287] <Christian Ulbrich>
-> https://github.com/tc39/notes/blob/main/delegates.txt

[01:04:10.0718] <yulia>
I can't edit the doc

[01:05:24.0395] <yulia>
ah just needed to refresh

[01:16:23.0781] <Rob Palmer>
There's been minor schedule rearrangement, inserting TCQ & Decimal continuation after lunch, and bringing forward Tabs items to meet his constraint of avoiding the final hour.

[01:24:59.0080] <Michael Ficarra>
we need to advance the queue @robpalme:matrix.org @usharma:igalia.com

[01:25:29.0302] <ryzokuken>
done ty for the reminder

[01:26:07.0219] <Michael Ficarra>
why did my reply get moved to a new topic?

[01:26:23.0303] <ryzokuken>
because Yulia's reply came before yours

[01:26:30.0226] <ryzokuken>
but they're replies

[01:26:36.0713] <nicolo-ribaudo>
(my reply came before michael's too)

[01:26:48.0160] <ryzokuken>
TCQ just doesn't allow us to move stuff without turning them into topics

[01:27:11.0043] <ryzokuken>
oh right sorry I didn't even notice when it came in nicolo-ribaudo 

[01:27:16.0001] <Michael Ficarra>
only because the queue wasn't advanced so there was no reply button @nicolo-ribaudo:matrix.org 😛

[01:27:38.0001] <ryzokuken>
yep sorry it's atleast half of TCQ's fault though

[01:27:41.0911] <Jesse (🇪🇸)>
TCQ feature requests?

[01:27:51.0181] <ryzokuken>
we have a presentation coming up later!

[01:35:43.0710] <Michael Ficarra>
@yulia:mozilla.org objecting to what?

[01:35:52.0279] <yulia>
objecting to the dual view

[01:35:56.0493] <yulia>
integration path 2

[01:36:19.0713] <Michael Ficarra>
if I want none of these options, does that count?

[01:36:32.0128] <yulia>
that also counts, but could you talk a bit about why?

[01:36:39.0833] <yulia>
esp. why not option 1 in that case

[01:38:59.0212] <Michael Ficarra>
it's more exceptional than not, there's already too much irregularity that needs to be dealt with in the language

[01:39:27.0683] <Michael Ficarra>
also I would like to hear from multiple implementations (or other constituents) that this would be useful

[01:40:07.0665] <Michael Ficarra>
@shuyuguo:matrix.org expressed in the editor call, where we talked about this at some length, that he didn't think V8 would find this useful

[01:40:15.0247] <Michael Ficarra>
I don't want to speak further for him though

[01:40:49.0715] <Michael Ficarra>
@tabatkins:matrix.org this is almost certainly going to be the case, I don't see why it would not be

[01:42:41.0394] <Michael Ficarra>
what I mean is, any IDL is going to be *full* of exceptional cases because it's describing a language that is full of exceptional cases

[01:53:06.0566] <snek>
doesn't webidl's coercion for numeric arguments not match our current consensus for new apis in tc39

[01:54:13.0323] <Michael Ficarra>
@devsnek:matrix.org yes

[01:54:28.0941] <Michael Ficarra>
all new APIs will require attributes to that effect

[01:54:51.0681] <Michael Ficarra>
I feel like people haven't ready arai's document

[01:54:57.0729] <Michael Ficarra>
* I feel like people haven't read arai's document

[01:58:07.0365] <snek>
i feel like having a declarative definition of all our stuff would be nice, especially if it reduces function entry/exit boilerplate. but it seems like webidl is a bit msimatched for us...

[01:58:26.0722] <snek>
i haven't read the full document though

[01:59:47.0830] <Michael Ficarra>
this conversation has not convinced me in the direction of WebIDL, if anything it has convinced me that a JS-specific IDL or no IDL would be better

[02:00:19.0363] <snek>
i guess in particular if the primary argument is reusing assumptions/code from existing webidl... all the extended attributes and special cases probably end up making it a moot point

[02:01:53.0686] <TabAtkins>
yulia: btw I'd like to help with this project

[02:02:23.0667] <yulia>
that would be brilliant

[02:03:16.0034] <danielrosenwasser>
It could be nice to generate TypeScript `.d.ts` files if TC39 published those, though I don't know if we would always generate them as a source of truth.

[02:03:36.0599] <danielrosenwasser>


I do wonder if an IDL for JS could also be used to generate the actual boilerplate of spec text under that dual approach.

[02:03:44.0603] <danielrosenwasser>
* I do wonder if an IDL for JS could also be used to generate the actual boilerplate of spec text under that dual approach.

[02:03:59.0159] <Michael Ficarra>
typescript types diverge enough from reality that it probably wouldn't make sense

[02:04:16.0074] <Andreu Botella>
DOM types are automatically generated from WebIDL

[02:04:29.0504] <Michael Ficarra>
what I mean is, typescript pretends certain complexity doesn't exist because that's how 99% of users use the built-in and it makes things nicer for them

[02:04:29.0916] <Andreu Botella>
* DOM types in TypeScript are automatically generated from WebIDL

[02:05:09.0225] <Duncan MacGregor>
I'm not sure I can officially help with the web IDL stuff, but we've been through a number of internal systems for exposing and describing core parts of our system, and I might well look at what we could do that would closely aligned with web IDL and could be automatically translated. 

[02:08:07.0563] <rkirsling>
er wait, I'm participating in execom on behalf of an associate member

[02:10:25.0453] <rkirsling>
ah right this slide explains

[02:10:36.0350] <rkirsling>
a maximum of four people can be exceptions 

[02:11:41.0936] <danielrosenwasser>
Right, this is why I don't think the output would be the source of truth. We would manually adjust the output periodically.

[02:12:53.0358] <danielrosenwasser>
Maybe? As we've talked about, we typically add more restrictions because we're following the spirit of the API rather than just assuming `any` everywhere.

[02:13:22.0764] <Michael Ficarra>
as you should (though I may disagree with a couple of them)

[02:19:55.0003] <eemeli>
Michael Ficarra: One should presumably read your "10 days > 3 weeks" to imply a transition, and not an inequality?

[02:20:08.0273] <eemeli>
(And I was just about to submit a similar topic)

[02:20:32.0576] <Michael Ficarra>
it's an inequality but on value, not duration

[02:21:07.0256] <yulia>
Duncan MacGregor: what is your github>

[02:22:38.0111] <Michael Ficarra>
why does this sound so threatening? lol

[02:23:16.0886] <yulia>
ha, probably because im in a rush and got a baby on me

[02:23:25.0990] <yulia>
*toddler

[02:23:29.0103] <yulia>
arguably harder

[02:23:48.0630] <snek>
what is the toddler's github?

[02:24:09.0474] <yulia>
she's hosting her own git instance

[02:24:29.0066] <ryzokuken>
she's more like a gitea person /s

[02:26:55.0160] <Andreu Botella>
for this particular plenary, 3 weeks ahead would've been basically right after the last one

[02:31:11.0876] <Michael Ficarra>
they do literally say "shall" though lol

[02:31:38.0672] <eemeli>
That perhaps tells us something about how often we have meetings more than anything else. As I recall, quite a few of the last few meetings have had an underflow of the agenda, and perhaps five meetings a year could be enough.

[02:32:16.0145] <Andreu Botella>
don't other meetings have overflow?

[02:32:29.0416] <Andreu Botella>
it seems there's an uneven distribution throughout the year

[02:32:36.0325] <Michael Ficarra>
yes we have had overflow quite often in the past

[02:32:52.0745] <Michael Ficarra>
the last 2 meetings having underflow is new and unusual

[02:33:33.0930] <ryzokuken>
yep it's a timing thing

[02:33:38.0067] <snek>
its not just a function of number of agenda items though, its also what overall latency we want to aim for. we can always have more meetings with fewer days, for example

[02:34:21.0298] <yulia>
we could potentally "bucket" work so that it is less cognative load to cover all of the topics

[02:35:04.0684] <yulia>
i think there are multiple approaches, but i think this is a very valid problem that is being raised

[02:35:48.0847] <yulia>
i think we should aim to fulfill the spirit of the 3 week requirement. maybe that means 3 weeks, maybe that means something else

[02:37:41.0336] <Rob Palmer>
What if we imposed the 3-week time only to requests for 2.7 advancement?  (and keep it as 10 days for all other types of advancement)

[02:38:43.0807] <yulia>
i think that is potentially the most important stage (although its less "absolute" than stage 3 advancement)

[02:38:52.0157] <yulia>
either stage 2.7 or 3

[02:40:01.0168] <Michael Ficarra>
I am not as optimistic as Samina about how unlikely it would be for a bad actor to try to join and disrupt our process

[02:40:29.0628] <snek>
does javascript as an institution have enemies

[02:40:31.0842] <Michael Ficarra>
hopefully we don't have to deal with that, but we should be robust against such an occurrence

[02:41:30.0172] <Rob Palmer>
(I focus on 2.7 because that is where the primary decision-making happens, whereas advancement to stage 3 nowadays is when tests are complete which is something champions self-declare)

[02:41:49.0778] <Chengzhong Wu>
competitor languages?

[02:42:29.0322] <Michael Ficarra>
I don't think champions self-declare. They make the claim and try to convince the committee that it's true. Sometimes it's self-evident.

[02:42:29.0591] <yulia>
We've had angry users who have attempted blocking in various ways

[02:42:35.0037] <yulia>
usually we can resolve it

[02:43:33.0351] <yulia>
Right and stage 2.7 isn't a protected stage the same way as stage 3 iirc? 

[02:43:41.0747] <Rob Palmer>
That is fair - the claim may turn out to be false.

[02:43:54.0322] <yulia>
the risk of moving to stage 3 is higher, because then you are basically on the train to shipping modulo very specific concerns

[02:46:27.0517] <snek>
14 minutes of tail calls

[02:46:45.0819] <ptomato>
one does not do just 14 minutes of tail calls

[02:47:12.0136] <Andreu Botella>
if you do tail calls, you gotta do infinite recursion

[02:47:26.0557] <Michael Ficarra>
I don't know what "protected stage" means. Is it a term of art or just colloquial usage?

[02:47:34.0470] <snek>
its an infinite topic but each iteration takes half the time of the last 

[02:48:30.0482] <Michael Ficarra>
reminder that this is the delegates channel, not TDZ

[02:49:31.0472] <TabAtkins>
I think it would also be helpful in the future to have the attendees list in the notes doc separated into in-person and remote lists, to make searching for a name faster.

[02:49:56.0929] <Rob Palmer>
Umm - I'm happy to go back to when we defined Stage 2.7 to check, but my understanding is that your definition applies to 2.7.  Meaning we were not introducing a new relitigation point at 3.0.  3.0 is simply the sign that tests are ready.

[02:53:12.0723] <Rob Palmer>
So it is critical that all design opinions are volunteered prior to achieving 2.7.  People should not be holding back feedback in the hope of redirecting the proposal during 2.7.

[02:53:19.0690] <yulia>
If that’s the case we should update the process doc

[02:53:22.0876] <yulia>
Currently:

[02:53:25.0020] <yulia>
Given that consensus on Stage 3 means "the solution is complete" (i.e., all open design issues have been resolved including anticipated implementation and ecosystem compatibility issues), all TC39 participants should validate the design of proposals they care about before granting Stage 3 consensus. Stage 3 proposals which have fulfilled the acceptance criteria for Stage 4 may not be withheld from advancement unless the issue raised is related to implementation experience or identifies a problem or information which has not previously been discussed by the committee. The goal is to enable implementers to invest in implementations, and preserve the significance of Stage 3 in the process.



[02:54:39.0209] <yulia>
It’s a detail honestly, I’m not saying one way or the other

[02:54:46.0447] <yulia>
Just we should align on it

[02:55:20.0947] <Rob Palmer>
I think that wording still holds.  But maybe there's more we could say because I do wonder if the spririt (and words!) of the introduction of Stage 2.7 might get lost over time.

[02:55:58.0229] <yulia>
Stage 3 as a backstop is useful outside of stage 2.7 imo

[02:56:10.0503] <yulia>
Most of stage 3 is in 2.7

[02:57:18.0229] <yulia>
> <@michaelficarra:matrix.org> I don't know what "protected stage" means. Is it a term of art or just colloquial usage?

Protected stage is in reference to the paragraph that I just posted

[02:57:20.0241] <Rob Palmer>
The process doc is already pretty explicit about excluding relitigation after 2.7. 

[02:57:59.0931] <Rob Palmer>
- 2.7: No changes to the proposal will be requested by the committee aside from those elicited through testing, implementation, or usage experience.
- 3.0: No changes to the proposal are expected, but some necessary changes may still occur due to web incompatibilities or feedback from production-grade implementations.
- 4.0: No further changes will be made to the proposal.

[02:59:37.0772] <yulia>
Can you point me to where it says that in the process document? I’m just not finding it

[02:59:57.0496] <yulia>
The only place where it says advancement to the next stage cannot be blocked is in reference to stage 3-4 advancement

[03:00:01.0743] <Rob Palmer>
I think we are saying the same thing:  perhaps just slight different view on what a "very specific concern is"

[03:01:00.0360] <yulia>
I’m perfectly happy if we added more guard rails here, but I don’t think we have. At least not to the degree that was done for stage 3. The stage 3 guard rail is explicitly stated in our process document

[03:01:29.0116] <yulia>
This isn’t about changes btw, it’s about appropriate blocks

[03:02:08.0683] <Rob Palmer>
There's no explicit statement saying advancement to 3 cannot be blocked. But there is scoping on the types of changes that can be requested.  I'm not sure if we need to add the belt and braces as we have done for advancement to stage 3.

[03:02:16.0142] <Rob Palmer>
* There's no explicit statement saying advancement to 3 cannot be blocked. But there is scoping on the types of changes that can be requested.  I'm not sure if we need to add the belt and braces as we have done for advancement to stage 4.

[03:02:45.0590] <yulia>
There is

[03:02:47.0617] <yulia>
Stage 3 proposals which have fulfilled the acceptance criteria for Stage 4 may not be withheld from advancement unless the issue raised is related to implementation experience or identifies a problem or information which has not previously been discussed by the committee. 

[03:03:02.0119] <yulia>
This was very deeply discussed at committee

[03:03:11.0007] <Rob Palmer>
We are agreeing ;-)

[03:03:22.0438] <yulia>
That is why stage 3 is dangerous in a way stage 2.7 is not

[03:03:47.0982] <yulia>
“May not be withheld from advancement”

[03:03:57.0937] <yulia>
At all other stages you can say no 

[03:04:29.0324] <yulia>
We are not agreeing, this is not the same level. 

[03:05:20.0693] <yulia>
If committee wants to change this, that is fine. However, at stage 2.7 you cannot elide someone’s block

[03:06:12.0012] <yulia>
I also do not think applying this to stage 2.7 is wise

[03:06:24.0233] <yulia>
The flexibility provided by the other stages is important

[03:11:51.0600] <yulia>
This paragraph was introduced extremely deliberately

[03:12:14.0847] <Rob Palmer>
I'm in agreement on the super-power of 3->4.  There reason I'm discussing this is in case folk apply a lower threshold of review when deciding whether to permit advancement, on the basis that they can change their mind later.

[03:12:26.0652] <Rob Palmer>
* I'm in agreement on the super-power of 3->4.  The reason I'm discussing this is in case folk apply a lower threshold of review when deciding whether to permit advancement, on the basis that they can change their mind later.

[03:13:00.0057] <yulia>
Right, regarding whether 3 weeks should be for 2.7 or 3 — I think both have good arguments

[03:13:30.0364] <yulia>
2.7 is when the design work is really done, 3 is when “if you didn’t review this and let it through, you are out of options because we are implementing”

[03:15:01.0811] <yulia>
Obviously new info will be taken into account, but no one can just join the committee to block stage 4

[03:23:01.0123] <Rob Palmer>
This has been useful. I think there might be scope for additional wording.

[04:03:58.0730] <ryzokuken>
https://github.com/zalari/tcq/tree/feature/minimal-dockerized

[04:09:28.0603] <Michael Ficarra>
doesn't deno have a free tier?

[04:10:30.0484] <jkup>
also maybe cf pages/workers? (if we are rewriting)

[04:20:49.0592] <Christian Ulbrich>
We still need a persistent service for the socket.io/ websocket thing. Idea is to de-couple this and have the rest being serverless / cloud flare, etc ...

[04:22:34.0232] <canadahonk>
cf workers support websockets i think

[04:22:34.0988] <jkup>
could do with durable objects I think? (Not pushing for cf, just thinking of member companies that offer hosting)

[04:22:54.0763] <canadahonk>
https://developers.cloudflare.com/workers/examples/websockets/

[04:23:10.0242] <canadahonk>
not pushing either but has been nice in my experience

[04:23:15.0315] <canadahonk>
also they have a very generous free plan iirc

[04:23:24.0191] <Christian Ulbrich>
canadahonk: You are right! -> https://developers.cloudflare.com/workers/examples/websockets/ interesting!

[04:23:50.0898] <nicolo-ribaudo>
Who's chairing?

[04:23:55.0157] <canadahonk>
happy to help with dev btw :) 

[04:24:03.0760] <nicolo-ribaudo>
> <@nicolo-ribaudo:matrix.org> Who's chairing?

(there is a point of order about people not following the queue)

[04:24:07.0288] <canadahonk>
* happy to help with dev btw :) maybe we should have a channel or something?

[04:24:25.0730] <canadahonk>
* happy to help with dev btw :) maybe we should have a separate channel or something?

[04:28:32.0223] <eemeli>
Rounding modes in Intl.NumberFormat: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#roundingmode

[04:29:17.0631] <nicolo-ribaudo>
Here "half even" only talks about integers, and not to "round to 1 fractional digit"

[04:29:25.0764] <nicolo-ribaudo>
> Ties towards the nearest even integer

[04:29:41.0192] <nicolo-ribaudo>
* In these docs "half even" only talks about integers, and not to "round to 1 fractional digit"

[04:31:59.0053] <nicolo-ribaudo>
Ok yes it looks at the `0`.
```
new Intl.NumberFormat("en-US", { minimumFractionDigits: 1, maximumFractionDigits: 1, roundingMode: "halfEven" }).format(0.95) 
```
returns "1.0"

[04:34:13.0114] <snek>
could someone with permission to do so create a TCQ development channel?

[04:38:57.0071] <Duncan MacGregor>
This is consistent with my understanding of rounding modes in IEEE-754 and Java's DecimalFormatter.

[04:40:18.0217] <Duncan MacGregor>
I thought I had found a bug in Decimal formatter once. Luckily I checked very carefully, and it turned out the my test vectors had a bug and Guy Steele wasn't wrong. :-)

[04:54:19.0387] <nicolo-ribaudo>
Steve Hicks I'd argue 1.1 does not exist in IEEE754, and instead when you try to get to thet number you get to 1.1000000009870432

[04:56:08.0555] <Michael Ficarra>
I would say all reals exist in IEEE754 binary64, they just share a single representation among many reals

[04:56:23.0538] <Michael Ficarra>
so each binary64 value is a *range* of reals

[04:56:55.0577] <Michael Ficarra>
there's one particular real associated with each of these ranges that we use to talk about that range

[04:57:14.0077] <Michael Ficarra>
(this is only in reference to finite binary64s)

[04:57:20.0415] <nicolo-ribaudo>
It's not used just to talk about it but also to do math on it

[04:57:30.0252] <Michael Ficarra>
yeah, that's right

[05:04:47.0271] <Michael Ficarra>
please advance the queue

[05:04:57.0697] <Michael Ficarra>
@robpalme:matrix.org

[05:05:25.0175] <nicolo-ribaudo>
I can volunteer to take shared "queue advancing" responsibility

[05:05:42.0363] <Michael Ficarra>
we have no way to add a reply atm

[05:08:31.0595] <Jesse (🇪🇸)>
I think I should prepare a diagram showing the different spaces here: digit strings, binary64 values, decimal128 values, real numbers

[05:10:03.0231] <snek>
tcq development room https://matrix.to/#/!FnKBZWyZXEOJHuOtWy:igalia.com?via=igalia.com&via=matrix.org

[05:22:04.0608] <rkirsling>
yeah it seems a bit weird to auto-object on somebody's behalf

[05:24:51.0451] <snek>
i feel like increasing the "strength" of stage 2 based on the size of the proposal just slows down smaller proposals 

[05:24:56.0705] <snek>
* i feel like increasing the "strength" of stage 2 criteria based on the size of the proposal just slows down smaller proposals 

[05:25:02.0830] <snek>
* i feel like increasing the "strength" of stage 2 criteria based on the size of the proposal just needlessly slows down smaller proposals 

[05:25:37.0408] <TabAtkins>
Yeah, this is definitely a Stage 2-compatible concern.

[05:26:03.0716] <TabAtkins>
(I say that as someone who definitely agrees with Waldemar on the merits.)

[05:30:59.0289] <waldemar>
No one was increasing the "strength" of stage 2 criteria.
Stage 2 entrance requires the major semantics to be worked out. For something that's purely a math function the throwing behavior on valid input is major semantics.

[05:59:04.0593] <Rob Palmer>
Meeting resumes in one minute!

[06:00:44.0566] <Michael Ficarra>
when you consider how many binary64s *don't* throw, it's a very small set of inputs we're talking about

[06:03:14.0860] <snek>
i don't think the input domain or that the function only performs a single operation is really relevant in this case. but i guess there is contention here.

[06:10:22.0644] <canadahonk>
could someone else take over notes from me please? (need to work on clamp stuff)

[06:10:39.0064] <Duncan MacGregor>
So, I think I should clarify what I was saying about the rounding of 0.15, and why I say that rounding to 0.1 is a bug. 0.15 translates to a float 64 with the following raw bits: `0x3fc3333333333333`. This number is not *quite* 0.15, but is shortest decimal representation of a decimal number that is closer to the float 64 value than any other float 64 value. The raw bits `0x3fc3333333333332` are closest to `0.14999999999999997` and the raw bits `0x3fc3333333333334` are closest to `0.15000000000000002`.

So the first stage of rounding a floating point number to a number of decimal digits (or significant figures) is to convert it to a stream of digits because we are inherently working in the decimal domain, and then rounding should occur using whichever rounding rule you are using.

So in our example the decimal digits produced  are `0.15`, and then it is rounded by half even rule to 0.2. Anything else is a bug.

[06:16:06.0441] <bakkot>
incidentally, cite for chacha being a CSPRNG: https://www.johndcook.com/blog/2020/02/22/chacha-rng-with-fewer-rounds/

[06:17:41.0122] <snek>
> But the results of the simple poker test are harder to understand. What is it about simulating poker that makes ChaCha(3) fail spectacularly?

[06:18:42.0830] <eemeli>
I didn't really understand the relevance of rounding in the Decimal discussion, given that `new Decimal(n)` will implicitly first convert its input into a string, and so `n === Number(new Decimal(n).toString())` for all `typeof n === 'number'`.

[06:20:01.0078] <Michael Ficarra>
We're not using Chacha3 lol, we're using Chacha12

[06:20:16.0652] <Michael Ficarra>
well, *well* over the bar for a CSPRNG

[06:21:12.0118] <snek>
yeah for sure

[06:21:24.0873] <Michael Ficarra>
Chacha20 is only used in TLS because we didn't have as much confidence in it at the time

[06:22:59.0098] <bakkot>
https://eprint.iacr.org/2019/1492.pdf

[06:23:13.0267] <bakkot>
"Too Much Crypto" is a fun title

[06:24:01.0196] <snek>
especially from the swiss

[06:27:06.0365] <Duncan MacGregor>
waldemar might be able to clarify the root of the example he was asking about. I know that various other languages have attempted to offer rounding functions that give and return float 64s, and try to avoid real conversion to the decimal domain. I know Ruby has such a function, and it has a number of issues which will never be fixed because there is code out there that depends on its bugs. Various string formatting implementations have also had bugs.

[06:28:38.0866] <Michael Ficarra>
this is why I use 2DES, 3DES is too many

[06:31:33.0357] <eemeli>
Ok, but how does any of that impact anything around the Decimal proposal?

[06:32:02.0063] <Duncan MacGregor>
Sadly, in the case of 3DES, too much is never enough.

[06:33:29.0870] <bakkot>
if I never have to write fischer-yates again I'll be happy

[06:36:19.0351] <Duncan MacGregor>
I think it's thoroughly in the weeds. We seem to end up circling back to rounding questions whenever Decimal is discussed and I'd far rather we write this stuff down and avoid retreading the same ground repeatedly.

[06:37:27.0831] <bakkot>
I appreciate tab's repeated nods towards directing people to the crypto API so they are not misled

[06:37:34.0969] <bakkot>
I wish the crypto API had as much care for not misleading people

[06:37:37.0832] <bakkot>
what a terrible API

[06:37:44.0742] <bakkot>
also it still only offers pbkdf2

[06:38:11.0752] <bakkot>
sidebar, any implementers in the room please direct your attention to https://github.com/twiss/webcrypto-modern-algos

[06:38:45.0299] <Christian Ulbrich>
x-posting from TDZ, but I found -> https://medium.com/@betable/tifu-by-using-math-random-f1c308c4fd9d a very good intro, into the topic of good randomness...

[06:45:11.0914] <snek>
pretty banger ideas from mark here

[06:46:01.0237] <Michael Ficarra>
there's a reason MM has his reputation

[06:54:34.0184] <bakkot>
static and prototype methods of the same name on the same class! let's do it

[06:54:50.0501] <Michael Ficarra>
so I guess we're doing `Random.Seeded` now

[07:11:16.0349] <bakkot>
Michael Ficarra and I came up with a reasonably comprehensive test plan for Iterator.zip, incidentally https://github.com/tc39/test262/issues/4112#issuecomment-2415235086

[07:11:23.0233] <bakkot>
not quite as nice as this one

[07:11:29.0600] <bakkot>
it's a very useful exercise though

[07:11:43.0944] <bakkot>
* Michael Ficarra and I came up with a reasonably comprehensive test plan for `Iterator.zip`, incidentally https://github.com/tc39/test262/issues/4112#issuecomment-2415235086

[07:11:54.0489] <bakkot>
if anyone wants to help .zip advance, PRs implementing these tests welcome

[07:12:12.0065] <Michael Ficarra>
🙏 someone please write these tests

[07:34:44.0038] <ljharb>
what would be the difference between chunks and windows if windows does option 3?

[07:35:26.0176] <ljharb>
* what would be the difference between chunks and windows if windows does option 3? (nvm, put it on the queue)

[07:35:54.0628] <nicolo-ribaudo>
Chunks slides by the chunk size, window by (by default) 1

[07:36:01.0947] <ljharb>
ah ok

[07:36:11.0644] <ljharb>
and chunks has no default size?

[07:36:29.0014] <nicolo-ribaudo>
No, you need to specify how big you want the chunks

[07:36:34.0373] <ljharb>
ok so with option 3, windows is just chunks of 1?

[07:36:35.0362] <nicolo-ribaudo>
Like you have to specify how big you want the windows

[07:37:07.0901] <nicolo-ribaudo>
[1, 2, 3, 4]
- windows (size 2): 12, 23, 34
- chunks (size 2): 12, 34

[07:37:23.0973] <nicolo-ribaudo>
* \[1, 2, 3, 4, 5\]

- windows (size 2): 12, 23, 34, 45
- chunks (size 2): 12, 34

[07:37:24.0636] <ljharb>
ahhh right

[07:37:25.0985] <ljharb>
thank you

[07:37:28.0209] <nicolo-ribaudo>
* \[1, 2, 3, 4, 5\]

- windows (size 2): 12, 23, 34, 45
- chunks (size 2): 12, 34, 5

[07:37:52.0328] <ljharb>
(my realization is that windows "repeats" values by sliding, chunks does not)

[07:38:48.0368] <Richard Gibson>
neither has a default size, but they differ in how results overlap ([slide 3](https://docs.google.com/presentation/d/1Mse7PDM0vcMg4Ag_SK1_OGwVwrJuVxKz-qaWj2RyX8o/edit?slide=id.g3580329a96b_0_50#slide=id.g3580329a96b_0_50) and [slide 4](https://docs.google.com/presentation/d/1Mse7PDM0vcMg4Ag_SK1_OGwVwrJuVxKz-qaWj2RyX8o/edit?slide=id.g3580329a96b_0_63#slide=id.g3580329a96b_0_63) visualize this well)

[07:40:28.0665] <kriskowal>
(i’m on my way to go camping but) in case it gets missed, i’m recommending that the windows() algorithm return an array with any iteration values that were consumed but not produced in any window, so they can be disposed of properly, which only occurs if the producer does not have enough values to fill a single window.

[07:40:39.0960] <TabAtkins>
I'm no longer in the meeting because I'm busy cooking, but big +1 from me for stage advancement

[07:41:41.0172] <kriskowal>
(and also would like to see concrete uses of windows(). I know of at least two sliding window algorithms, but can’t imagine doing TCP or gzip this way.)

[07:42:29.0491] <nicolo-ribaudo>
Probably 80% of the times I use the "index" parameter in `.map`&friends is because I need to access the previous or next item

[07:42:34.0704] <nicolo-ribaudo>
Which means I need `.windows(2)`

[07:42:45.0845] <TabAtkins>
I'd hang to go track down where, but I've definitely written windows by hand (and chunks)

[07:42:53.0066] <bakkot>
ljharb yes, `return`ing from a generator is the case that populates the `value` of the `{ done: true, value: _ }` object

[07:43:07.0156] <ljharb>
thanks, glad i remembered right

[07:43:28.0315] <bakkot>
I wonder how many people in the world know that fact

[07:43:48.0942] <bakkot>
mid double digits, probably? at most?

[07:44:19.0551] <kriskowal>
In those cases, I assume you also want length-1 iterations and can tolerate 0 iterations when there’s only one value?

[07:44:56.0925] <nicolo-ribaudo>
Hold on let me find an example

[07:45:39.0942] <kriskowal>
(I have definitely used index to get at a neighbor before, so this answer is on the right track.)

[07:47:05.0560] <nicolo-ribaudo>
Ok one example from the Babel codebase is
```
nums.forEach((num, i) => {
  if (i > 0 && nums[i] <= nums[i - 1]) throw new Error()
});
```

[07:47:22.0562] <nicolo-ribaudo>
Where I need to explicitly skip the first iteration to only actually work on pairs

[07:47:24.0624] <kriskowal>
It’s useful. I think that using it for the remainder is good because it hides the remainder in the common case, but gives the tiny minority a place to stand if they need it.

[07:48:33.0501] <bakkot>
it does also make it more expensive for everyone just for the benefit of the tiny minority, though

[07:48:35.0344] <bakkot>
which seems bad

[07:48:49.0997] <kriskowal>
how so? you have to accumulate the window array regardless

[07:49:23.0551] <bakkot>
you don't have to allocate an actual array

[07:49:38.0355] <bakkot>
it's strictly internal

[07:50:05.0420] <kriskowal>
it’s allocated in something. you mean that you avoid the reïfication of the internal array?

[07:51:04.0222] <bakkot>
yes

[07:51:11.0847] <sffc>
Call sites of windows in the icu4x codebase: https://github.com/search?q=repo%3Aunicode-org%2Ficu4x+%22.windows%28%22&type=code

[07:51:15.0874] <bakkot>
doing allocations in C++ is cheap

[07:51:21.0512] <bakkot>
allocating JS objects is expensive

[07:51:22.0957] <bakkot>
relatively speaking

[07:51:44.0893] <kriskowal>
i think that cost will vanish in comparison to the cost of the happy path for this algorithm

[07:52:15.0001] <jkup>
Can someone advance the queue?

[07:52:16.0588] <bakkot>
there is no reason for this algorithm to have _any_ allocations on the happy path unless you are doing manual iteration

[07:52:25.0169] <bakkot>
( https://docs.google.com/document/d/1M5S-u3N3vQkVBGFCoaYt_ABPGl0EW16QQrvDBaY2FiE/edit )

[07:52:47.0504] <kriskowal>
windows() allocates iteration results and an array for the value of each iteration result, no?

[07:52:52.0090] <ljharb>
well, it'd have an array per window/chunk, surely, but no more than that

[07:53:01.0805] <bakkot>
see my link

[07:53:17.0588] <ljharb>
that's about the iteration result

[07:53:22.0095] <kriskowal>
Cool, so merely a window length array for each iteration.

[07:53:22.0284] <bakkot>
ah yes it does of course have to allocate the chunk

[07:53:23.0449] <ljharb>
the value is an allocation too

[07:53:58.0762] <ljharb>
luca ty for doing the github search, i thought about it but am too tired

[07:54:02.0388] <Richard Gibson>
sffc do any of those speak to the question of what to do when there aren't enough elements to fill a window?

[07:54:07.0211] <ljharb>
* btw luca ty for doing the github search, i thought about it but am too tired

[07:54:30.0649] <kriskowal>
The champions arguably could propose a variant of this algorithm that allocates a single array up front and reuses it by shifting and pushing. Then they’d just return the thing at the end at no extra cost. That’s the optimized case.

[07:54:56.0230] <ljharb>
that proposal would not be considered acceptable by some :-)

[07:55:13.0080] <kriskowal>
But shifting and pushing is a different performance character for large windows. Probably not the majority case.

[07:56:39.0972] <kriskowal>
Also, my recommendation does not require reïfying the final chunk array unless there were too few elements to send a single iteration. Otherwise, the final value should be undefined.

[07:57:00.0274] <jkup>
this is inside a rust codebase, so that means empty returns?

[07:57:41.0219] <bakkot>
ah, that's fair

[07:57:58.0988] <bakkot>
I was imagining always having an array

[07:59:26.0732] <Michael Ficarra>
I didn't give a summary but I guess we're moving on

[07:59:34.0333] <nicolo-ribaudo>
Michael Ficarra
Steve Hicks left a comment that a whole separate method just because we cannot agree on an edge case seems overkill. I tend to agree

[07:59:36.0779] <Michael Ficarra>
I'll add it to the notes later I guess

[07:59:55.0829] <Michael Ficarra>
I'll create an issue where people can leave feedback and post it here

[08:01:34.0770] <Richard Gibson>
the uses mostly seem like `.windows(2)` verification that the inputs are sorted and/or unique, for which the best-aligned behavior is to not yield an incomplete window (e.g., every single-element iteration is sorted and duplicate-free)

[08:09:12.0287] <bakkot>
Michael Ficarra speaking of summaries, one of the bullet points in your summary of yesterday's iterator sequencing item is just "* Pull request #1923, access .value on the final IteratorResult object"

[08:09:21.0033] <bakkot>
it does not say any things about this pull request

[08:09:50.0985] <Michael Ficarra>
🤷‍♂️ I haven't opened the notes doc at all yet this meeting

[08:10:06.0334] <Michael Ficarra>
I will review the summaries when I review the notes after the meeting

[08:10:19.0676] <bakkot>
I just wanted to know what the decision was

[08:10:28.0106] <bakkot>
we're backing out all the yield* stuff?

[08:16:42.0368] <Michael Ficarra>
yep

[08:16:48.0794] <Michael Ficarra>
all of it

[08:30:57.0937] <kriskowal>
I’m adding “deltas and deltas of deltas” to the pot for motivating use cases for `windows(2)` specifically. For those algorithms, there’s an expectation of quantity-1 total iterations, with no desired recourse for a remainder.

[08:54:14.0149] <Michael Ficarra>
yeah I think we gave more than enough justification to keep windows

[09:06:56.0554] <ljharb>
SeededPRNG got stage 2 today, and was on the agenda as already being stage 1, but i can't find anywhere in the notes indicating it ever had stage 1 before. can someone help me find that?

[09:08:53.0273] <ljharb>
* SeededPRNG got stage 2 today, and was on the agenda as already being stage 1, but i can't find anywhere in the notes indicating it ever had stage 1 before. can someone help me find that? (cc TabAtkins)

[09:47:59.0813] <TabAtkins>
ljharb: The Stage 1 request was discussed back in Jan 2018 <https://github.com/tc39/agendas/blob/main/2018/01.md>, but I can't find the actual notes (links are broken in <https://github.com/tc39/Reflector/issues/116>)

[09:48:35.0697] <ljharb>
https://github.com/tc39/notes/blob/main/meetings/2018-01/jan-23.md#13iif-mathseededrandoms-for-stage-1 ?

[09:49:08.0188] <TabAtkins>
that looks right. It ends with "Conclusion: stage 1 acceptance"

[09:49:10.0563] <ljharb>
perfect, thanks!

[09:49:31.0816] <TabAtkins>
(I can't believe it's been *7 years*, but hey, COVID fucked everything.)

[09:51:33.0635] <ljharb>
did we select reviewers for stage 2.7?

[09:53:18.0822] <ljharb>
if not, we should do that tomorrow morning first thing

[10:11:33.0993] <bakkot>
I am not going to be in the room tomorrow morning but will volunteer as a reviewer

[10:35:26.0407] <eemeli>
I transferred the https://github.com/tc39/proposal-intl-keep-trailing-zeros repo to the `tc39` org earlier today. Could I also be granted admin rights on that repo?

[10:37:45.0437] <ljharb>
i set you to "maintain" but can set you to "admin" if there's something you need that level for?

[10:44:38.0234] <eemeli>
The current level doesn't appear to let me e.g. set the repo's URL or description, which would be quite nice.

[10:46:00.0018] <ljharb>
ah oops, you were set to "write" - try now? i'll bump it higher if that doesn't do it

[10:46:35.0111] <eemeli>
Thanks, looks good now!


2025-05-30
[00:56:07.0876] <Rob Palmer>
Good morning, all

[00:56:15.0131] <Rob Palmer>
We will start in 3 mins!

[00:56:22.0437] <Rob Palmer>
(just working through AV issues in the room)

[01:00:56.0730] <Rob Palmer>
The schedule has been updated.  Chris would prefer to defer the "Agenda Deadline" topic to the next plenary.  Therefore the meeting will conclude at 12:30 CET.

[01:03:20.0500] <jkup>
Where can we find the issues on the code of conduct? Trying to link in notes

[01:06:11.0997] <Rob Palmer>
Issue #62

[01:07:03.0624] <Rob Palmer>
* [Issue #62](https://github.com/tc39/code-of-conduct/issues/62)

[01:16:05.0499] <jkup>
I don't see the person currently talking in the delegates.txt file

[01:16:24.0798] <ljharb>
it's an open PR, hasn't landed yet

[01:16:56.0601] <ljharb>
use ZTZ for now, i think

[01:17:06.0765] <jkup>
looks like their abbrevation is not yet decided. ok will do thanks!

[01:17:13.0401] <naugtur>
I submitted a PR with ZBT

[01:17:37.0570] <Michael Ficarra>
we really need to get better about merging those before the meeting, this isn't the first (or even the second) time this has happened

[01:17:40.0846] <ljharb>
yep - there's a comment on that PR that explains our typical convention

[01:17:56.0675] <ljharb>
* yep - there's a comment on that PR that explains our typical convention, which is "first initial, first letter of last name, last letter of last name"

[01:18:41.0663] <naugtur>
oh. ok

[01:35:57.0373] <naugtur>
I support Waldemar's clarifying question

[01:43:32.0241] <Chengzhong Wu>
naugtur: please feel free to update typos (directly) in the doc, without a doc suggestion

[01:44:33.0647] <Christian Ulbrich>
I support MMs concerns. Proxy should not be "detectable". I also think, that what actual equality means, is hard to decide on.

[01:44:43.0710] <Michael Ficarra>
or any other kinds of edits!

[01:45:40.0134] <Michael Ficarra>
I would prefer we move this forward with only a "shallow" SameValue comparison, and possibly consider some other comparison operations as follow-ons

[01:46:19.0254] <Michael Ficarra>
otherwise we're never going to get past all these weird equality hang-ups and see if we even want the feature to begin with

[01:46:50.0130] <Michael Ficarra>
I guess I'll get on the queue

[01:46:51.0325] <naugtur>
I've been doing that a lot over the 3 days, I'm only using suggestions if I'm offering a change I'm not sure about to something I already saw someone edit. (happened twice out of ~100)

[01:49:02.0319] <naugtur>
One useful simplification would be to validate a clone that uses the same behavior as JSON serializer does and return a POJO as a result. But that's barely on topic

[01:49:40.0779] <Michael Ficarra>
again, these are the rat holes I don't want to go down at the moment, we will waste all of our time when we don't even know whether we want to do this

[01:51:07.0463] <naugtur>
RIP validation usecase

[01:54:41.0509] <ljharb>
we wouldn't want anything with global state, but a sort of "create an assert function" API might work for customization

[01:59:05.0006] <Ashley Claymore>
lots of people seemed interested in disabling code in production.
Right now the closest to a standard we have is `process.env.NODE_ENV === "development"`.
Maybe time for standard pre-processor tags :D

[01:59:56.0318] <Ashley Claymore>
just disabling assertions is not always enough as the code we actually want to disable is: compute-expensive-value and assert-something-about-it

[02:02:43.0662] <Michael Ficarra>
I'm reminded again that we really need to add a section to our new contributors guide on how to not "over cook" a Stage 0 proposal

[02:02:52.0368] <Michael Ficarra>
like *everyone* makes this mistake

[02:03:59.0787] <Michael Ficarra>
* like *every newcomer* makes this mistake

[02:05:19.0346] <Michael Ficarra>
agreed, and we didn't even mention whether the asserted expression would be eliminated or run for its effects yet!

[02:11:53.0928] <nicolo-ribaudo>
https://matrix.to/#/#tc39-decimal:matrix.org

[02:14:04.0526] <joyee>
Needs to be careful to not run into https://nodejs.org/en/learn/getting-started/nodejs-the-difference-between-development-and-production

[02:16:55.0355] <nicolo-ribaudo>
My topic also disappeared, is there somebody clicking "I'm done speaking" by themselves?

[02:33:34.0015] <jkup>
Would someone mind taking over notes at some point soon? My wrist is starting to feel it 😅

[02:40:48.0721] <Ashley Claymore>
Yeah it's a Wild West right now.
sometimes we want to run the tests on production code and include assertions.
other times we want to do performance tests and skip the development assertions.
sometimes code checks for === development, other times it checks for !== development.
😫

[02:49:41.0957] <jkup>
I'm not sure if the notes can support images? If not, maybe naugtur we can just add a note inside brackets instead? I think these notes get pulled into some official archive after we touch them up

[03:09:27.0930] <nicolo-ribaudo>
Wishing TCQ supported more levels of nesting...

[03:10:31.0938] <jkup>
yeah we're very deep in reply land

[03:16:24.0185] <Jacob Smith>
i'm putting together an updated proposal presentation. what is the latest time i can present today?

[03:25:36.0529] <jkup>
I just asked in TCQ, I'm unsure if we're meeting back after lunch or if it would need to be before?

[03:25:53.0367] <nicolo-ribaudo>
Rob Palmer: ?

[03:26:47.0236] <jkup>
Jacob Smith: are you prepared to present now or in 5 minutes?

[03:26:55.0358] <Jacob Smith>
yes, i can do

[03:26:56.0387] <jkup>
I think we're planning to be finished at lunch time

[03:29:29.0230] <naugtur>
I need to get off the notes duty

[03:29:34.0672] <naugtur>
and tend to family

[03:30:53.0670] <jkup>
Thank you for all the help!

[03:30:57.0743] <jkup>
I can help with Nic

[03:31:22.0068] <naugtur>
thanks, I'm out for a bit

[03:40:29.0858] <Jacob Smith>
thank you Michael Ficarra 🙏

[03:48:30.0747] <Rob Palmer>
The plenary meeting has now fully closed.  There will not be a PM session.

[11:21:05.0304] <James M Snell>
hey all... a question has come up with regards to ERM in practical use.... the current definition gives no mechanism to determine what *kind* of completion has occurred in the block where the disposers are called. For instance 

[11:22:34.0034] <James M Snell>
For some kinds of resources, it would be good to know if the completion was normal or exceptional to determine how best to close the resource. For example, let's consider a socket... `{ using sock = connect(...) }` when this block exits, should the socket be closed gracefully or should it be abruptly aborted

[11:24:32.0240] <James M Snell>
I might want to customize the disposer behavior based on the answer to that question and currently the only way I can do so is to catch any error inside the block, like `{using sock = connect(...); try { ... } catch (err) { sock.hadError(err); } }` or some other similar kind of signal... in which case I just wouldn't use ERM and would call `sock.abort()` directly

[11:28:27.0900] <bakkot>
Discussed explicitly in  https://github.com/tc39/proposal-explicit-resource-management/issues/234 / https://github.com/tc39/proposal-explicit-resource-management/issues/49

[11:29:13.0163] <bakkot>
though the way I would do it right now is not with a try/catch but with a `.commit` method which you call at the end of the block; if it's not called you can assume the exit was exceptional (although this does not work if you have an early `return`)

[11:30:12.0260] <James M Snell>
oh awesome, somehow I managed to completely overlook those two issues :-/ .... thanks for the links!

[11:42:27.0737] <rbuckton>
I will probably ly transfer that issue (and any other related issues) to the Symbol.enter repo so the discussion can continue in that proposal. 

[11:44:29.0513] <James M Snell>
And FWIW, in our use cases in workers we really would have no desire for the disposer to suppress an error... for our purposes it mostly just ideal to have access to the error. For instance, if I have something like `using socket = connect(...)` and the block has an exception, it would be ideal to be able to `socket.abort(error)` with the error that was thrown, but as it stands now I have no way of getting to it

[11:44:42.0217] <James M Snell>
without hacks at least

[12:05:42.0666] <bakkot>
I liked the idea of passing the error (if any) as an argument to `Symbol.dispose`

[12:05:46.0317] <bakkot>
I forget what happened to that

[12:06:19.0358] <bakkot>
it does mean you have to check `arguments.length` to tell apart the case of no error vs throwing `undefined`, but otoh if someone throws `undefined` I think that's their problem

[12:08:31.0413] <James M Snell>
nothing good can come from throwing undefined lol

[12:24:52.0235] <James M Snell>
For our case, tho, it really wouldn't matter if they did throw undefined, we would end up passing it to, for instance, `socket.abort(error)` without really worrying too much about the specific thing that was thrown. We more just want to be able to (a) detect that it was, in fact, an exception return and (b) propagate whatever was thrown to the abort

[12:25:31.0659] <James M Snell>
I can definitely see the use cases for `Symbol.enter`/`Symbol.exit` as being useful but just having the `error` argument passed would be a major improvement

[13:11:15.0846] <bakkot>
the point about `undefined` is that if you just did `[Symbol.dispose](error) { if (error != null) socket.abort(error) }` then you would think that it didn't throw in the case that someone had thrown `undefined`

[13:11:31.0088] <bakkot>
so the correct thing to write would be `[Symbol.dispose](error) { if (arguments.length) socket.abort(error) }`

[13:12:18.0170] <James M Snell>
yep, unless we just kept always assuming disposal was the exception case

[13:13:23.0930] <James M Snell>
in which case we'd likely just do something like `[Symbol.dispose](error) { if (!socket.closed) socket.abort(error); }`

[13:31:02.0174] <bakkot>
ah, sure, yeah

[15:39:43.0685] <Steve Hicks>
Michael Ficarra: You summarized "Pull request #1923, access .value on the final IteratorResult object" - can you please clarify which #1923 that is?  I'm struggling to figure out the context here.  Thanks!

