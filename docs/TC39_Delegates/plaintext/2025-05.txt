2025-05-01
[22:02:06.0035] <Aki>
y'all what font is this

[22:10:31.0303] <Aki>
i cannot find that exact 9 in any font i've looked at

[00:12:29.0797] <snek>
i believe it is two fonts

[00:12:38.0504] <snek>
the "TC" is neutraface 

[00:12:46.0079] <snek>
idk what the 39 is

[00:38:06.0726] <snek>
that 39 really is a mystery i cannot find anything that matches it

[00:38:21.0904] <snek>
inb4 the 3 and 9 are separate fonts too

[00:38:38.0735] <nicolo-ribaudo>
Maybe the .ai file for the logo has some useful metadata?

[02:03:22.0935] <Jonas Kruckenberg>
it may also be a logo-specific modification of some other typeface 

[02:03:41.0307] <Jonas Kruckenberg>
the 9 looks kinda wonky in particular 

[07:44:31.0096] <Aki>
everything is curves even in the oldest file i can find

[07:54:35.0496] <ptomato>
the "39" looks like Roboto to me, although I checked what it looks like in unmodified Roboto and the 9 is indeed off

[07:55:50.0036] <Chris de Almeida>
looks like helvetica or a variant like helvetica neue for the numbers

[07:58:22.0124] <Chris de Almeida>
top helvetica, bottom helvetica neue

[07:59:18.0667] <Chris de Almeida>
hmm, no, they are quite similar but def different

[07:59:27.0071] <Chris de Almeida>
* hmm, no, they are quite similar to the logo but def different

[08:06:46.0760] <Chris de Almeida>
SYG should know, I think he created it

[09:12:58.0334] <shu>
i did

[09:12:59.0740] <shu>
let me see

[09:16:55.0902] <shu>
i... thought it was Neutraface Bold

[09:17:02.0462] <shu>
but i see that the 9 glyph is not that 9 glyph

[09:21:21.0426] <shu>
i have no memory of what font the 39 is in

[09:23:56.0819] <Ashley Claymore>
Looks like an upside down 6 to me, maybe you were feeling extra creative that day?

[09:28:57.0191] <shu>
it shouldn't be particularly obscure, i did not spend a lot of time on it

[09:29:29.0586] <shu>
i suppose i could've manually edited the path but i don't really remember

[09:37:37.0065] <shu>
okay i'm pretty sure it's Roboto Bold, but the current version looks slightly different

[09:38:00.0931] <shu>
if you look at this font: https://github.com/erinmclaughlin/Yantramanav

[09:38:12.0221] <shu>
which is a devangari font meant to match Roboto

[09:38:19.0993] <shu>
the '39' in that font matches pretty much exactly

[09:38:31.0037] <shu>
which makes me think it had copied the number glyphs from 10 years ago

[09:38:38.0112] <shu>
and since then, Roboto has slightly updated

[09:51:18.0791] <Aki>
:interess:

[09:51:25.0081] <Aki>
thanks for your research shu 

[09:51:28.0091] <Aki>
v helpful

[10:18:20.0340] <shu>
Aki: what're you doing with the logo?

[10:18:59.0130] <Aki>
Nothing for TC39. Possibly throwing together guidance on individual TC logos.

[10:19:14.0973] <shu>
ah

[10:19:53.0724] <shu>
well, i'm sure you can tell that this logo was specifically a nod to the community JS logo. i wouldn't think any of the design here generalizes

[10:23:07.0520] <Chris de Almeida>
https://tc54.org/

TC54 copied it.  what did they use Aki ?

[10:23:14.0090] <Chris de Almeida>
* https://tc54.org/

TC54 copied the style.  what did they use Aki ?

[11:56:15.0216] <Michael Ficarra>
Roboto has an alternative glyph for 9 that appears to match

[12:04:12.0379] <shu>
ah interesting

[12:04:57.0994] <Aki>
Conveniently, Ecma's website also uses Roboto

[16:35:06.0095] <Aki>
OMG Y'ALL. 100% SUMMARIES AND CONCLUSIONS. 

[16:35:10.0718] <Aki>
Thank you all so much!


2025-05-05
[03:28:54.0967] <Rob Palmer>
syg: I just noticed that Explicit Resource Management is shipping in Chrome, despite [the source](https://chromium.googlesource.com/v8/v8/+/refs/heads/main/src/flags/flag-definitions.h#295) suggesting it is behind the `--harmony` flag.  Does Chromium always enable `--harmony` now?


[07:28:47.0819] <shu>
no, it is shipping, and we don't enable `--harmony`

[07:28:59.0295] <shu>
it's shipping by being default to on in chromium

[07:31:44.0808] <shu>
the odd state of affairs (default on in chromium, default off in v8) is due to test expectations annoyances in chromium. we kept it off in v8 in case we needed to unship in chromium

[07:31:59.0256] <shu>
should be safe to default to on now

[09:42:37.0604] <nicolo-ribaudo>
Editors, I can join this week

[09:42:45.0057] <nicolo-ribaudo>
* Editors, I can join the editor call this week

[09:42:50.0042] <nicolo-ribaudo>
It's actually the best week for me

[09:43:42.0482] <shu>
perfect


2025-05-09
[09:14:50.0461] <Chris de Almeida>
gentle reminder:  the deadline for advancement is ~7 days from now

[10:53:44.0698] <shu>
no way really

[10:53:47.0052] <shu>
we just met

[11:28:07.0790] <Ashley Claymore>
Yeah only 5 weeks between these two meetings 

[11:47:06.0232] <Rob Palmer>
Normally this next meeting would be later in the year. It's why I made sure the later weeks were an option in the interest survey. But folk (including the host) preferred an earlier meeting in this specific case. 


2025-05-12
[09:28:10.0380] <Rob Palmer>
Last time we had plenary at the Igalia office, this was the recommended hotel because it is walkable to the office.

https://www.hotelavenida.com/

[09:29:19.0595] <Rob Palmer>
Given that A Coruna is quite spread out, is that a good place to set as the default hotel to optimize taxi sharing and serendipitous conversations about negative zero in the lobby?

[09:40:24.0071] <nicolo-ribaudo>
We (Igalians going to A Coruña) usually stay at that hotel when going to the office, however this year the hotel explicitly asked us to not recommend them because they are running low on space.

I'll ask if there is some "informal" recommendation, but that's the reason why we didn't suggest that hotel this time.

[09:42:44.0787] <nicolo-ribaudo>
My personal recommendation, if you try to book that one and fail because it's full, is to prioritize hotels further north than further south (even if maybe they are a bit more distant from the office), because they are closer to the city center 

[10:12:52.0582] <ryzokuken>
There isn't an informal recommendation because none of our "second favorites" are any closer or specifically better than others.

[10:14:17.0942] <ryzokuken>
I can say both Hotel Riazor and Eurostars Atlantic have been reviewed favorably by delegates in the past.

[10:17:37.0280] <ryzokuken>
Definitely prefer hotels inwards in the peninsula (towards the city center) because it's better connected through taxis, buses and city bikes

[10:27:13.0544] <ryzokuken>
* Definitely prefer hotels inwards in the peninsula (towards the city center) because it's better connected through taxis, buses and city bikes (as well as bike paths)

[10:30:44.0013] <dminor>
I never really thought about biking, any thoughts on bicicoruña? it looks like there's spots close to both my hotel and the Igalia offices.

[10:31:10.0315] <ryzokuken>
BTW, reminder to fill the (in-person sign up form)[https://github.com/tc39/Reflector/issues/558) and also sign-up for the TG5 workshop and the (community event)[https://github.com/tc39/Reflector/issues/556] if you plan to attend. 25 folks have signed up already and we look forward to host you here! 😄 

[10:31:20.0509] <ryzokuken>
I use it everyday to commute to the office

[10:33:17.0808] <ryzokuken>
I can add more details later but the bike station at Rua Pablo Picasso is right next to the office and is a great station especially for trips to the office

[10:33:32.0979] <dminor>
That would be great, thank you :)

[10:33:41.0027] <ryzokuken>
it always has free spots to park etc

[10:33:51.0685] <ryzokuken>
sometimes getting an electric bike from there can be trickier 

[10:37:33.0363] <ryzokuken>
* BTW, reminder to fill the [in-person sign up form](https://github.com/tc39/Reflector/issues/558) and also sign-up for the TG5 workshop and the [community event](https://github.com/tc39/Reflector/issues/556) if you plan to attend. 25 folks have signed up already and we look forward to host you here! 😄 

[13:20:40.0583] <Even Stensberg>
Hi folks! Even from webpack here. We've recently finished our new governance model transition and we are looking forward to contributing to tc39 in anyway where our work clashes <3

[13:36:07.0713] <kriskowal>
We will look for you in #tc39-compartments:matrix.org!


2025-05-13
[19:13:02.0287] <rkirsling>
bakkot: should I interpret silence as a lack of significant further qualms on my Annex B PR? not trying to rush anybody, just don't want editors to have complaints to voice at presentation time, hehe

[05:21:07.0866] <Rob Palmer>
***Reminder**:  The agenda deadline for the May plenary is in **3 days time!**

https://github.com/tc39/agendas/blob/main/2025/05.md

There is **11 hours of spare time,** so now is the time to discuss matters that have remained undiscussed for too long.  Seize the moment to pitch that proposal you previously shied away from due to lack of meeting time.

[12:21:45.0805] <rbuckton>
As of today I am no longer employed by Microsoft and cannot serve as a delegate in that capacity, nor continue to champion my current set of proposals. I had hoped to recommend Explicit Resource Management for Stage 4 this meeting, but it seems I will be unable to do so unless granted invited expert status, or until such time as I find myself employed by another ECMA member organization. If you need to reach me for any reason, please feel free to send me a DM on Matrix and I can send you my personal email.

[12:23:30.0875] <Aki>
So sorry to hear this Ron, you'd be an asset to anyone who snatches you up

[15:51:48.0456] <ljharb>
oof https://www.cnbc.com/2025/05/13/microsoft-is-cutting-3percent-of-workers-across-the-software-company.html

[16:33:05.0749] <TabAtkins>
Once again all the business-school-brained nincompoops in the C-suite are copying each other, since Google's "Voluntary Exit Program" (+ firings to make up the diff for the desired amount of exits) is also kicking off this month.

[16:33:46.0048] <TabAtkins>
I shall refrain from sharing my *full* opinions here, as I would prefer they not show up in deposition later.


2025-05-15
[04:30:31.0206] <nicolo-ribaudo>
Maybe we should make the agenda deadline always be on the same weekday, rather than 10 days before the first day

[04:30:51.0358] <nicolo-ribaudo>
It makes it easy to track it and plan around it

[04:30:55.0380] <nicolo-ribaudo>
* It makes it easier to track it and plan around it

[08:25:00.0625] <TabAtkins>
Ah, like always a Friday? That would mean a variable number of days from the meeting, but within a small range, since the meetings always start M-W. I'd approve of that.

[08:25:15.0960] <TabAtkins>
"Agenda deadline is two Fridays before the meeting"

[09:17:56.0753] <ljharb>
almost every plenary starts on a tuesday, so the 10 days is the same weekday usually - this one's an anomaly

[09:18:58.0992] <nicolo-ribaudo>
Half of them start on mondays

[09:21:20.0921] <nicolo-ribaudo>
* Half of them start on mondays, half on Tuesday

[09:30:59.0254] <Michael Ficarra>
just pretend that the deadline is 2 Mondays before the meeting and you'll always be good

[09:31:34.0856] <Michael Ficarra>
me, I will continue adding agenda items 5 minutes before the deadline

[10:38:07.0396] <TabAtkins>
Monday deadlines are annoying, tho - I don't think about it the preceding week, then I miss it on Monday!

[10:39:52.0377] <TabAtkins>
But a Friday deadline, now *that's* something I can procrastinate and then panic-work into 👍️

[11:07:43.0276] <shu>
i am beyond categorical concepts such as deadlines

[13:37:00.0852] <canadahonk>
(in theory) there's no deadline for non-advancement right?

[13:43:58.0392] <nicolo-ribaudo>
Right, but if you want to get useful opinions in many cases you still need to give time to people to talk with their colleagues 

[13:45:03.0778] <nicolo-ribaudo>
Not every delegate speaks for themselves, many are actually representing their team/company for real :) And thus many companies have internal meetings before TC39 to gather internal feedback: if there is no material, it's impossible to do it

[14:06:48.0463] <mgaudet>
(Mozilla would really really really appreciate materials be available before our review meeting for example) 

[14:57:27.0669] <TabAtkins>
Yeah, for non-advancement the deadline is a "please do so" rather than a strict requirement - it's very useful to be able to review things a week+ in advance.

[16:18:36.0093] <rbuckton>
Apologies, when adding my topic and constraints to the agenda I misclicked and failed to make that a PR. The commit is dd7987ea52e8923cbcc67915176f534541276eee if it needs to be backed out for any reason.


2025-05-16
[17:00:33.0116] <Michael Ficarra>
🙁 it's not following the ordering rules

[17:36:00.0365] <rbuckton>
Thanks for fixing that

[19:45:55.0467] <jschoi>
> <@michaelficarra:matrix.org> sent an image.

Where can I find this countdown webpage?

[20:07:38.0220] <Michael Ficarra>
@jschoi:matrix.org linked from the agenda

[20:07:55.0128] <Michael Ficarra>
https://www.timeanddate.com/countdown/generic?iso=20250516T10&p0=681&csz=1&msg=TC39%20Submission%20deadline

[22:07:25.0181] <rkirsling>
cute

[08:51:42.0658] <TabAtkins>
ljharb: Narrow window for SeededPRNG between our two constraints!

[08:52:09.0256] <ljharb>
lol true, but there's 3 days in which to find it :-p

[11:07:41.0909] <nicolo-ribaudo>
:P

[11:19:58.0959] <Chris de Almeida>
what is this help button you speak of

[11:23:26.0009] <bakkot>
go to the spec, type `?`

[11:23:54.0401] <bakkot>
this works on a surprising number of sites, like youtube

[11:25:10.0879] <bakkot>
I have actually mentioned this at least once or twice during the editor updates in plenary but no one pays attention to those either

[11:29:49.0446] <Ashley Claymore>
I pay attention to them. Our spec tech is the coolest

[13:20:19.0013] <Michael Ficarra>
until the new version of ecmarkup lands, `0` is a secret keyboard shortcut 🤫

[13:20:25.0529] <Michael Ficarra>
it wasn't previously listed in the help modal

[13:20:30.0355] <Michael Ficarra>
who knows what it will do

[13:22:37.0934] <Michael Ficarra>
well I have an upcoming talk I think you'll like https://2025.ecoop.org/details/plss-2025-papers/2/The-Software-Supporting-the-JavaScript-Language-Specification (also at RPLS)


2025-05-19
[10:40:04.0452] <nicolo-ribaudo>
Chris de Almeida What is https://github.com/tc39/Admin-and-Business/blob/main/.github/ISSUE_TEMPLATE/delegate-to-invited-expert.md for, if not for when a delegate leaves their company and somebody wants to keep them around as an invited expert?

[10:40:50.0931] <nicolo-ribaudo>
* Chris de Almeida What is https://github.com/tc39/Admin-and-Business/blob/main/.github/ISSUE\_TEMPLATE/delegate-to-invited-expert.md for, if not for when a delegate leaves their company and gets at the same time nominated as an IE?

[10:42:19.0364] <nicolo-ribaudo>
Oh I had a typo in the name, was that it?

[11:14:43.0727] <Chris de Almeida>
it's because there are already steps completed for them which do not require the full onboarding steps.  but first the IE needs to be nominated and we have a feedback period (7 days), etc

[14:22:58.0969] <bakkot>
dminor: the slides for upsert are linked but not accessible

[16:56:22.0638] <rkirsling>
shouldn't the upsert proposal be renamed now that the method in question has been renamed?

[16:56:58.0320] <rkirsling>
like, it's already gotta be pretty confusing for anybody not paying close attention, and it'll get even more confusing once MDN et al. are in the mix


2025-05-20
[17:21:50.0779] <Michael Ficarra>
no, we shouldn't change the name, we should just avoid naming proposals after specific API names in the first place

[17:22:15.0788] <Michael Ficarra>
I watch very carefully for this mistake during advancement to Stage 1, and so should you

[17:23:09.0049] <Michael Ficarra>
this proposal was a very old one that had been revived though

[20:29:06.0446] <rkirsling>
understood 🫡


2025-05-21
[04:45:00.0654] <canadahonk>
I think I don't have perms to edit the repo metadata for https://github.com/tc39/proposal-math-clamp, could I get perms for that (or could someone update the link to tc39.es)?

[04:45:09.0687] <canadahonk>
* I think I don't have perms to edit the repo metadata for https://github.com/tc39/proposal-math-clamp, could I get perms for that (or could someone update the link to tc39.es)? ty

[07:26:47.0488] <ljharb>
fixed!

[11:42:40.0167] <jschoi>
> <@rkirsling:matrix.org> like, it's already gotta be pretty confusing for anybody not paying close attention, and it'll get even more confusing once MDN et al. are in the mix

This reminds me of a longstanding bugbear I’ve had. I much prefer the term “pipe operator” to the unnecessarily long name “pipeline operator”, and I’ve long wanted to rename proposal-pipeline-operator to proposal-pipe-operator. 
But I’ve accepted that the repository name should be left alone. I just need to make sure MDN names with the shorter name it if it ever reaches Stage 3…

[11:44:18.0417] <jschoi>
> <@michaelficarra:matrix.org> no, we shouldn't change the name, we should just avoid naming proposals after specific API names in the first place

I think this is a good policy, but what should proposal-upsert have been called at Stage 1 instead of its current name?
(Autocorrection changed it on my phone just now to “proposal-upset”, which might be as good of a name as any.)

[11:45:21.0299] <jschoi>
> <@michaelficarra:matrix.org> I watch very carefully for this mistake during advancement to Stage 1, and so should you

I feel that this advice should be in https://github.com/tc39/how-we-work/blob/main/champion.md and related files. 

[11:47:22.0978] <Michael Ficarra>
the more general advice is "don't overcook your Stage 1 proposal", and choosing a name that's not tied to a particular solution follows from that

[11:52:46.0580] <Michael Ficarra>
ironically, "map get-or-insert" would probably be it, though "upsert" isn't the worst since it means that same thing to many people, it's just not universally known and not self-evident to those who don't know it

[15:34:51.0843] <bakkot>
shu: I assume you've seen https://github.com/WebAssembly/custom-descriptors/blob/main/proposals/custom-descriptors/Overview.md

[15:34:58.0440] <bakkot>
some bearing on the structs proposal, maybe

[15:48:46.0041] <Michael Ficarra>
@bakkot:matrix.org it was presented at the wasm CG yesterday (and advanced!) and both Shu and I were there

[16:18:19.0239] <shu>
bakkot: yes, thomas is a colleague

[16:19:09.0395] <bakkot>
good good


2025-05-24
[08:40:17.0614] <rkirsling>
whoa the meeting is Wed-Fri instead of Tue-Thu

[08:40:26.0475] <rkirsling>
how'd that happen 

[09:40:24.0795] <Rob Palmer>
That's a good reminder to not turn up at Igalia'a office on the Tuesday! "Wed" was put in bold on the calendar to emphasize this. 

https://github.com/tc39/Reflector/issues/541

[11:01:58.0673] <Andreu Botella>
That said, if someone gets that wrong, there'll be people at the office. While you're there, you could help us set stuff up 😇


2025-05-25
[13:26:46.0025] <snek>
i've been there the whole time 🥷


2025-05-26
[21:41:29.0314] <rkirsling>
okay sam


2025-05-27
[03:04:53.0133] <Luca Casonato>
what are people's opinons on changing the `Map` and `Set` constructor to not call `Symbol.iterator` on the passed value if the passed value brand checks as a Map/Set? So `new Map(new Map())` would not call `Map.prototype[Symbol.iterator] ` anymore

[03:44:54.0506] <Ashley Claymore>
We didn't do this for `Set.prototype.union` and co

[03:51:57.0744] <Ashley Claymore>
Do any engines have a faster path for this already, the value is a real Map and the iterator hasn't been modified 

[03:54:18.0046] <Ashley Claymore>
I am interested how much benefit there would be if we can modify array destructuring to avoid the iterator when destructuring an array

[05:45:27.0041] <yulia>
Is the draft schedule up yet?

[06:48:03.0600] <Chris de Almeida>
nearlyu

[06:48:05.0653] <Chris de Almeida>
* nearly

[07:13:06.0908] <Chris de Almeida>
draft schedule now available via reflector issue:  https://github.com/tc39/Reflector/issues/558

[08:20:49.0233] <Luca Casonato>
> <@aclaymore:matrix.org> I am interested how much benefit there would be if we can modify array destructuring to avoid the iterator when destructuring an array

Yes this was the next thing I was going to ask

[08:22:41.0447] <ljharb>
engines can already do that unobservably when they know the map/set isn't modified

[08:38:10.0263] <snek>
I don't think any engine does it for these, it's very annoying to track

[08:38:20.0662] <snek>
having the spec change would definitely help

[08:41:45.0955] <mgaudet>
Agreed with snek; while heroics are possible and sometimes happen, any place we can specify that no heroics re needed is appreciated 

[08:41:50.0322] <mgaudet>
* Agreed with snek; while heroics are possible and sometimes happen, any place we can specify that no heroics are needed is appreciated 

[09:12:48.0478] <iain>
We actually [already optimize this path](https://searchfox.org/mozilla-central/source/js/src/builtin/MapObject.cpp#789-800)

[09:13:41.0966] <iain>
Although it would be nice if we didn't have to do all the careful plumbing to make sure it's a valid transformation

[09:14:33.0868] <ljharb>
(tbc i'm fully on board with having explicit fast paths for things that pass brand-checks)

[09:25:03.0839] <bakkot>
at least the map iterator isn't side-effecting

[09:25:16.0169] <bakkot>
array iteration is probably the most common case and the iterator has side effects all over the place

[09:36:03.0086] <Ashley Claymore>
Array iterstor side-effecting in that it triggers MOP methods?

[09:36:25.0195] <Ashley Claymore>
* Array iterator side-effecting in that it triggers MOP methods?

[09:40:56.0155] <bakkot>
sure and also getters

[09:42:47.0087] <bakkot>
also this is a good place for me to beat my drum of "iterating built ins does not need allocations" https://docs.google.com/document/d/1M5S-u3N3vQkVBGFCoaYt_ABPGl0EW16QQrvDBaY2FiE/edit

[12:11:25.0760] <shu>
Rob Palmer Chris de Almeida please accommodate https://github.com/tc39/agendas/pull/1889 if possible. i know that AsyncContext is held up on web integration stuff, and Scott represents the web side of it for Chrome, so i think it's important to get his input during plenary

[12:13:07.0617] <shu>
could a chair please ping me if the constraint could (or not) be accommodated?

[12:13:26.0037] <shu>
(in case of not, would try to find a secondary)

[14:33:57.0288] <James M Snell>
Hey all... had some feedback come up with regards to Explicit Resource Management today that I wanted to surface and get some input on. The question specifically is, "I think explicit resource management is missing a really important feature: The ability to transfer ownership. I need a way to "release" a variable I declared with using, especially to return it." ... essentially treating the ERM/using as similar to an RAII that can be moved away.

```
function foo() {
  using foo = new Foo();
  using bar = new Bar();
  // I only want foo or bar disposed if they are not returned
  if (someCondition()) return bar; 
  else return foo;
}
```

[14:35:15.0819] <James M Snell>
Unfortunately, since both are declared with `using`, both are going to be disposed when the function returns. The ask from the feedback is whether it would make sense to have some generalized "release" or "move" capability.. like `return move bar`, etc

[14:37:33.0207] <James M Snell>
obviously we can follow a pattern similar to `DisposableStack` and have the disposable object itself declare a `move()` method but that means allocating a new object or having to keep track of the moved state manually

[14:37:54.0500] <Duncan MacGregor>
So I think one of the good things about explicit resource management is its simplicity, there isn't much of an ownership or lifetime model to think about or to get wrong.

[14:38:01.0726] <James M Snell>
we can also null/undefined out the original decl and assign it to a regular scoped variable but that's also a bit wonky

[14:38:18.0541] <James M Snell>
100% agree

[14:38:41.0455] <Duncan MacGregor>
I think I'd prefer seeing people declaring `move()` themselves rather than trying to design something in the language.

[14:39:49.0340] <Duncan MacGregor>
But now I'm curious if typescript could layer a full borrow checker on top and do this automatically. :-)

[14:40:06.0676] <James M Snell>
* we can also null/undefined out the original decl and assign it to a regular scoped variable but that's also a bit wonky .... actually, nevermind, I don't think this works

[14:52:24.0608] <James M Snell>
Making every disposable object declare a `move()` is a bit ... difficult.  From the conversation I'm having in another channel on this, "It has to allocate a new instance of itself and move all the contents over to it. This is a lot of work to write for every type. And if anything else in the world holds a (presumably non-owning) reference to the object, those references are now invalid, so it might not even be possible to implement move() correctly, at least without adding a layer of indirection."

[15:16:03.0682] <Duncan MacGregor>
I think I need to sleep on it. I've started writing an reply about 5 times, and deleted them 5 times. My essential concern is that both the 'other non-owning references becoming invalid' and the return of the resource suggest that it is leaking in ways that probably aren't good for an explicit allocated and released resource (the former because we seem to have lost ownership during the method's lifetime, and the latter because we can't require the result is allocated to a variable declared with `using`).

[15:19:54.0155] <James M Snell>
yeah, it's a tricky one

[15:21:04.0175] <James M Snell>
I prefer the simplicity of ERM as it is but compared to the typical RAII pattern in c++, etc it's a bit *over* simplified... and that's there the questions here are coming from. We have a code base that is quite heavy in RAII mechanisms and the c++ level with no equivalent at the JS level

[15:22:49.0638] <nicolo-ribaudo>
If we get Symbol.enter/exit, then you'd be able to declare a function `movable` that you'd use as `using x = movable(foo)`

[15:23:03.0858] <James M Snell>
Another example to stew on... 
```
function foo() {
  using bar = new MyDisposable();
  if (someCondition()) throw new Error('boom'); // I want bar disposed in this case
  return bar;  // I don't want it disposed in this case
}
```

[15:23:40.0794] <James M Snell>
Is there an open proposal for this?

[15:23:49.0896] <James M Snell>
and is it functions only?

[15:25:24.0444] <nicolo-ribaudo>
Actually maybe you don't need .enter? (Sorry my element client is refusing to format markdown)

Instead of
```
using foo = getObj()
```
you can do
```
const foo = getObj();
using move = movable(foo)

...

move()
```

Where movable returns a function move that returns foo and has its own dispose method, deactivated by move.

[15:25:49.0068] <nicolo-ribaudo>
* Actually maybe you don't need .enter? (Sorry my element client is refusing to format markdown)

Instead of
```
using foo = getObj()
```
you can do
```
const foo = getObj();
using move = movable(foo)

...

move()
```

Where movable returns a function move that returns foo and has its own dispose method forwarded to foo, deactivated by move.

[15:26:38.0190] <James M Snell>
ah, ok, so it's essentially like declaring a disposable boxed type similar to `DisposableStack`

[15:26:40.0467] <nicolo-ribaudo>
> <@jasnell:matrix.org> Is there an open proposal for this?

We have https://github.com/tc39/proposal-explicit-resource-management/issues/195

[15:26:59.0782] <nicolo-ribaudo>
It was also discussed in the context of async context, maybe Chengzhong Wu knows if we actually have a proposal

[15:27:48.0287] <James M Snell>
Interesting ok

[15:45:55.0830] <Chengzhong Wu>
https://github.com/tc39/proposal-using-enforcement for Symbol.enter

[16:32:49.0546] <bakkot>
```js
function movable(foo) {
  let dispose = foo[Symbol.dispose];
  if (typeof dispose !== 'function') throw new Error('not disposable');
  return {
    resource: foo,
    moved: false,
    [Symbol.dispose]() {
      if (this.moved) return;
      dispose.call(foo);
    },
    move() {
      this.moved = true;
    },
  }
}
```

[16:33:06.0219] <bakkot>
```js
// usage:
function makeDisposable() {
  return {
    [Symbol.dispose]() {
      console.log('disposed');
    },
  };
}
{
  using movableFoo = movable(makeDisposable());
  const { resource: foo } = movableFoo;
  console.log('normal exit');
  // disposed
}
{
  using movableFoo = movable(makeDisposable());
  const { resource: foo } = movableFoo;
  movableFoo.move();
  console.log('moved before exit');
  // not disposed
}
```

[16:33:22.0913] <bakkot>
this seems like it's fine to leave to userland

[16:33:49.0125] <bakkot>
it's a little boilerplate I guess

[16:49:27.0664] <Ashley Claymore>
Could make .move return a new movable in the same way DisposableStack.p.move returns a new Stack

[16:50:29.0127] <Ashley Claymore>
or maybe just return the resource after nulling it out 

[16:52:51.0103] <Ashley Claymore>
though need to be careful moving in a _tearable_ hand over 

[16:55:03.0859] <bakkot>
* ```js
function movable(foo) {
  let dispose = foo[Symbol.dispose];
  if (typeof dispose !== 'function') throw new Error('not disposable');
  return {
    resource: foo,
    moved: false,
    [Symbol.dispose]() {
      if (this.moved) return;
      dispose.call(foo);
    },
    move() {
      this.moved = true;
      return foo;
    },
  }
}
```

[16:55:43.0900] <bakkot>
I think just returning the resource is better for the cases described above; presumably the caller is not expecting this wrapped thing and _a priori_ there is no reason to expect them to want to move it again

[16:56:02.0094] <Ashley Claymore>
```
return {
  p: moveable.move(),
  q: mightThrow()
}
```



[16:56:14.0635] <bakkot>
but good idea, returning the resource is a nice convenience, updated

[16:56:21.0550] <bakkot>
yeah it's easy to hold this wrong

[16:56:31.0827] <bakkot>
although this is also true of `disposableStack.move()`

[16:56:49.0493] <bakkot>
boundaries are always tricky

[16:56:59.0144] <bakkot>
not much to be done about that though without linear types

[16:57:05.0321] <Ashley Claymore>
Yeah, the point of stack.move is that it should be the very last expression 

[16:57:22.0752] <Ashley Claymore>
to ensure the time to move has truly arrived 

[16:58:02.0659] <shu>
if you return the resource and not a new movable, isn't that more like release()

[16:58:23.0318] <bakkot>
I guess but I liked the symmetry with `disposableStack.move()`

[16:58:39.0469] <shu>
but DS does return a new movable DS

[16:59:44.0420] <Ashley Claymore>
one difference is that the resource is itself a disposable, so it can be _used_ by the caller


2025-05-28
[17:00:10.0941] <Ashley Claymore>
only needs to remain a movable if the intention is to move again

[17:02:08.0414] <rbuckton>
Wouldn't you just use `DisposableStack` itself for this?

[17:03:07.0202] <Ashley Claymore>
Yeah I would 

[17:03:08.0832] <bakkot>
only if it's all-or-nothing

[17:03:15.0538] <James M Snell>
DS was my initial response on the discussion on this side but the feedback is that it just *feels* cumbersome 

[17:03:22.0798] <bakkot>
making one stack per resource is kinda annoying

[17:03:33.0665] <bakkot>
though I guess not really any different than the wrapper, in practice

[17:03:36.0180] <rbuckton>
Maybe, but it works.

[17:03:55.0206] <James M Snell>
More context from the discussion I've been having on this side. It should give more context

[17:03:58.0688] <rbuckton>
Changing ownership should be rare.

[17:04:35.0170] <James M Snell>
Keeping in mind that this is coming from someone who is super familiar with RAII patterns and move semantics in C++

[17:04:38.0339] <bakkot>
yeah but it takes one more line than my little wrapper, because you have to `new` the stack before you can use it

[17:04:51.0737] <bakkot>
difference between two lines of boilerplate and one line of boilerplate is a lot!

[17:05:39.0274] <bakkot>
anyway yes it totally works, just saying that if this was bothering someone a lot I would recommend they write a wrapper such as the above and maybe that will placate them

[17:05:52.0929] <rbuckton>
Except your wrapper could just new up a `DisposableStack`. It also breaks the RAII pattern, since you need a 2nd `const { resource: foo } = ...` line.

[17:08:42.0155] <bakkot>
implementation of the wrapper is not important, just the ergonomics, and if it were me I would definitely be happier breaking the RAII pattern and having one line of boilerplate per resource, vs having two lines of boilerplate

[17:11:21.0242] <rbuckton>
```js
const movableFoo = new DisposableStack();
const foo = movableFoo.use(makeDisposable());
```
is just as many lines

[17:11:28.0021] <rbuckton>
* ```js
using movableFoo = new DisposableStack();
const foo = movableFoo.use(makeDisposable());
```

is just as many lines

[17:12:03.0591] <bakkot>
Sure; I guess I wasn't thinking of the `const { resource: foo } = movableFoo;` as boilerplate.

[00:41:55.0020] <Rob Palmer>
FYI we had to switch the Notes (Google Doc) link.  Please see [the reflector post](https://github.com/tc39/Reflector/issues/558) for the new link.

[00:50:29.0975] <Rob Palmer>
The meeting begins in 9 minutes!!!

[00:50:41.0294] <Rob Palmer>
Please could someone dial in and help us check the AV.

[00:51:58.0713] <rkirsling>
I'm on the call

[00:52:48.0179] <rkirsling>
* I'm on the call, if you need me to try something

[00:55:27.0409] <rkirsling>
really interesting integration of multiple cameras in the room there

[00:55:40.0121] <naugtur>
TCQ link in the Reflector for the meeting is a github issues view with a TODO for a filter. Is that expected?

[00:56:18.0420] <naugtur>
I see it updated now

[00:56:26.0958] <canadahonk>
uhh hackmd.io is down for me btw

[00:56:37.0198] <rkirsling>
TCQ, I seek you

[00:56:42.0587] <rkirsling>
* TCQ, we seek you

[00:56:48.0718] <canadahonk>
* uhh hackmd.io is down for me btw (for draft schedule)

[00:57:05.0062] <rkirsling>
it loaded crazy slow for me but I thought it was my company's network, heh

[00:57:32.0099] <canadahonk>
ah yeah I refreshed like 5 times and it loaded now lol

[01:01:00.0678] <canadahonk>
TCQ link is up on Reflector now

[01:09:19.0716] <jkup>
Is there history where we are nervous to / unable to alter TCQ? 

[01:09:29.0627] <jkup>
(always curious when we get to the "please do not click the button" part of the intro)

[01:10:54.0329] <canadahonk>
notes are indeed online and being transcribed 🎉

[01:11:22.0617] <Christian Ulbrich>
TCQ is just waiting to be reborn. Groundwork has been done, we just need some decisions. -> https://github.com/zalari/tcq/tree/feature/minimal-dockerized

[01:11:36.0192] <Christian Ulbrich>
Hope to find some time during the plenary...

[01:21:58.0516] <sffc>
I am getting a 504 Gateway Time-out on the Hackmd draft schedule page.

[01:22:16.0526] <naugtur>
keep refreshing

[01:23:27.0560] <rkirsling>
hell yeah, editor's update

[01:23:33.0045] <rkirsling>
* hell yeah, editors' update

[01:24:02.0261] <rkirsling>
(just felt the need to counter Michael's sarcasm 😁)

[01:27:40.0499] <rkirsling>
oof, that sucks to hear, Chip 

[01:27:55.0634] <jkup>
+1 sorry to hear but as always *love* your JSON updates

[01:28:00.0165] <nicolo-ribaudo>
Maybe Chip should have told AA "without JSON, none of your airplanes would ever take off"

[01:32:36.0807] <Michael Ficarra>
@nicolo-ribaudo:matrix.org probably also without JS 😭

[01:37:30.0739] <nicolo-ribaudo>
Oh are we going to use this as the first inline "normative optional" step? nice

[01:38:56.0949] <Michael Ficarra>
@nicolo-ribaudo:matrix.org no, technically not

[01:39:29.0828] <Michael Ficarra>
https://github.com/tc39/ecma262/pull/2952 will be landing first

[01:45:34.0845] <Jesse (🇪🇸)>
looking at the fairly light schedule on Friday, is there any interest in having some optional self-organized breakout sessions, similar to what we did in Seattle?

[01:48:03.0597] <Rob Palmer>
Thanks for raising this Jesse.  I think Friday is currently up for debate as to what we do given we have at most 1 hour of content so far.

[01:48:55.0272] <Christian Ulbrich>
I'll gladly discuss moving TCQ forward...

[01:53:05.0095] <Rob Palmer>
Christian, please send a PR to the agenda so others get visiblity.

[01:55:40.0420] <Christian Ulbrich>
Rob Palmer: I'll do!

[01:58:13.0503] <Jesse (🇪🇸)>
I've also made one (not sure about the placement in the agenda): https://github.com/tc39/agendas/pull/1891

[02:14:43.0522] <waldemar>
Where can I find the time zone history of Niue? Currently it's in the UTC-11 time zone.

[02:16:33.0951] <Chengzhong Wu>
it could be in "Longer or open-ended discussions" instead of "Overflow items, right?

[02:17:24.0912] <Michael Ficarra>
tzdata, presumably https://www.iana.org/time-zones

[02:17:34.0617] <JaseW>
https://github.com/eggert/tz/blob/main/australasia#L644-L657

[02:19:16.0583] <Jesse (🇪🇸)>
updated, thanks!

[02:22:40.0113] <ryzokuken>
how's the view of the meeting room for folks online? Does it look good? awkward? disorienting?

[02:23:21.0191] <ryzokuken>
"aaaand with that the camera moved to him again"

[02:23:40.0207] <snek>
the camera's auto framing seems a bit wonky yeah

[02:24:35.0734] <ryzokuken>
it relies on the in-built microphone and only works precisely if we use it as everything (camera, mic and speakers)

[02:24:43.0199] <ryzokuken>
but we gotta use the room's sound

[02:25:01.0706] <snek>
ah so it gets confused by the room speakers

[02:25:03.0290] <Michael Ficarra>
"pre-approval" for something so arbitrary seems... bad

[02:25:14.0511] <ryzokuken>
so it's a tradeoff... if you prefer to be framed you could speak a bit louder but it's not exactly in the middle 

[02:25:21.0318] <ryzokuken>
* so it's a tradeoff... if you prefer to be framed you could speak a bit louder but it's not exactly in the middle either 

[02:25:49.0941] <naugtur>
The 1st sentence is ambiguous about the undefined being returned in place of string or object

[02:27:14.0620] <snek>
it's the same level of ambiguous as saying one of the string values could be returned in place of the object. 

[02:34:32.0055] <Chengzhong Wu>
my first impression on category "standard library" is https://github.com/tc39/proposal-built-in-modules

[02:34:54.0588] <Chengzhong Wu>
the proposal also claims "Built In Modules Proposal (aka JavaScript Standard Library)"

[02:37:38.0129] <Michael Ficarra>
@dminor:mozilla.org the slides said the champions assign the topics

[02:40:59.0179] <Michael Ficarra>
I think the categories part still needs a lot more thinking

[02:41:29.0018] <Jesse (🇪🇸)>
this could be a little breakout topic!

[02:42:25.0843] <nicolo-ribaudo>
Is Bigint a new capability?

[02:42:42.0649] <nicolo-ribaudo>
Technically transpilable, but in practice it's not

[02:44:34.0768] <Rob Palmer>
Transpilable-with-terrible perf, vs previously-impossible (WeakRef)

[02:44:49.0503] <Jesse (🇪🇸)>
I guess for bigint, we have a new primitive type, so I guess new capability

[02:45:20.0409] <nicolo-ribaudo>
Fwiw Babel polyfills+transpiles symbols

[02:45:57.0610] <nicolo-ribaudo>
Except for the Symbol object wrappers probably 

[02:47:03.0918] <Andreu Botella>
are you transpiling typeof?

[02:47:10.0164] <nicolo-ribaudo>
Yes

[02:48:30.0740] <Michael Ficarra>
I would prefer we not spend too much time on the portion of this topic that was explicitly stated as a non-goal at the moment

[02:48:35.0482] <Rob Palmer>
maybe we should articulate levels of transpiling, (e.g. whole-program stuff where you handle typeof)

[02:55:36.0626] <Michael Ficarra>
obviously "process change"

[04:04:14.0333] <Rob Palmer>
The meeting has resumed with AsyncContext

[04:18:05.0292] <jkup>
Is someone (possibly an IE) asking questions via the Google Meet chat? I wanted to make sure we weren't missing anything important. I tried joining the Meet call but I can't see previous messages.

[04:18:32.0495] <jkup>
(Rob took care of this, sorry)

[04:20:01.0050] <ryzokuken>
thanks for raising it 

[04:27:31.0976] <Rob Palmer>
MarkM's audio is not the high quality he normally has.  Maybe a different mic is in use.

[04:28:17.0117] <ryzokuken>
should we let him know if it persists?

[04:28:25.0290] <naugtur>
@erights Mark Miller (Agoric) MM: It's a popular trick, used inside React and alike, to use postMessage instead of setTImeout(,0) to avoid the browser limiting how often it runs (setTimeout and others are being prevented from tightly looping)

[04:42:04.0282] <nicolo-ribaudo>
The good thinks about properties is that they can be analyzed on a case-by-case basis

[04:42:07.0881] <nicolo-ribaudo>
* The good thing about properties is that they can be analyzed on a case-by-case basis

[04:42:42.0131] <Chengzhong Wu>
it could also be incrementally added, btw

[04:43:46.0125] <nicolo-ribaudo>
Steve Hicks Do you have examples of DOM events that are async and dispatched from JS? When I actually looked into them, most of them were either sync or browser-generated

[04:56:58.0187] <nicolo-ribaudo>
* Steve Hicks Do you have examples of DOM events that are async and dispatched from JS? When I actually looked into them, most of them were either sync or browser-generated

EDIT: Oh well, load and error obviously, as Michal has on the queue

[05:18:21.0761] <ryzokuken>
`variantList`

[05:44:43.0004] <Steve Hicks>
Looking through the HTML spec, I see a lot of cases where load/error and fired async with JS causes; media resize is async and can be caused by e.g. changing the track; various media events (abort, emptied, timeupdate, and many others) are an async result of load(); input elements' showPicker() can async-fire cancel/input/change; el.select() can async-fire various select events, dialog.show() async-fires a toggle event

[05:44:59.0945] <Steve Hicks>
This isn't an event, but toBlob() invokes its callback async

[05:46:14.0502] <Steve Hicks>
At one point we'd discussed having "queue a [...] task to" carry an implicit "propagating the current context" - I'm not sure I ever heard a reason why that wasn't viable.

[05:51:44.0450] <yulia>
Luca Casonato: Sorry i couldn't speak more re async-context, I'm in a really loud location and was just listening in. As Dan said, i think the best feedback you will get is from Ollie at hackfest later next week

[05:52:00.0913] <yulia>
i'll be moving to a quieter location so if necessary i'll be able to talk more at length

[06:02:00.0380] <Andreu Botella>
that would definitely work for some async events, but not for those that go "in parallel"

[06:02:22.0452] <Andreu Botella>
and implementing that could run into a lot of issues

[06:04:13.0621] <Steve Hicks>
if we're going case-by-case, then at least having the non-parallel tasks propagate might be a better compromise

[06:09:43.0021] <yulia>
sorry it looks like my mic is broken

[06:10:04.0648] <ryzokuken>
no worries I suspected you might still be in the loud location

[06:10:10.0852] <ryzokuken>
lmk if you fix it and would like to speak

[06:10:42.0460] <yulia>
if we have confirmation from moddable and v8  that they have no issues with the new changes i think it is fine to go ahead. 

[06:11:16.0593] <nicolo-ribaudo>
If we have confirmation that they didn't yet, should the proposta stage at stage 3?

[06:11:24.0489] <nicolo-ribaudo>
* If we have confirmation that they didn't yet, should the propostal stay at stage 3?

[06:11:28.0010] <nicolo-ribaudo>
* If we have confirmation that they didn't yet, should the proposal stay at stage 3?

[06:11:56.0499] <yulia>
then i think there is more to discuss. its a similar issue as test262 -- are we closer to a month vs a year of getting those changes landed? My guess is closer to a month, if someone can sign up for that. In that case conditional advancement is appropriate

[06:11:56.0655] <nicolo-ribaudo>
* If we have confirmation that they didn't yet implement them, should the proposal stay at stage 3?

[06:13:14.0643] <yulia>
on our end we can't guarantee it will be in a month, but the work isn't that far off. I would rather that we have more experience than less with a spec change. i don't want to block this because outstanding issues have been addressed, but we may want to advance this at a later date just to make sure all the t's are crossed and i's are dotted

[06:13:30.0627] <yulia>
but that might fall outside of what we've defined as conditional advancement. 

[06:14:16.0241] <yulia>
feel free to read it out, i'll switch locations and get a new mic after this proposal

[06:14:47.0392] <yulia>
ron -- it *might* be a blocking concern. I don't really want it to be but it might be. Can we get anyone from v8 or moddable to speak?

[06:17:32.0843] <yulia>
100% support getting this through ron, sorry to be a pita here... 

[06:17:58.0627] <rbuckton>
Not a problem.

[06:22:07.0661] <yulia>
* if we have confirmation from moddable and v8  that they have no issues with the new changes and that they are implemented i think it is fine to go ahead. 

[06:34:02.0921] <Luca Casonato>
@jschoi we were just joking about the fact that michael was so suprised by all of this

[06:38:06.0077] <Michael Ficarra>
serves me right for chatting in the hallway too long 😓

[06:50:14.0530] <ljharb>
we usually don't pick reviewers til stage 2

[06:50:24.0578] <Andreu Botella>
who volunteered for stage 3 review?

[06:50:26.0955] <ljharb>
* we usually don't pick reviewers til stage 2, i thought

[06:50:27.0578] <nicolo-ribaudo>
Yeah but if the hope is to do 1->2.7 at the next meeting

[06:50:31.0293] <Andreu Botella>
we missed noting the speaker on the notes

[06:50:31.0926] <ljharb>
ah right k

[07:22:41.0550] <eemeli>
As we've a longish queue and overall some slack in the meeting timetable, could the timebox for this discussion be extended until it's extinguished?

[07:24:15.0580] <ljharb>
there's tons of schedule constraints

[07:26:13.0212] <Rob Palmer>
eemeli: we've already given this more timebox than allocated.  a continuation is possible another day.  we have space after lunch tomorrow for example.

[07:26:16.0082] <Duncan MacGregor>
Is the decimal proposal now a subnormal distance from progressing? :-)

[07:28:00.0565] <nicolo-ribaudo>
Not sure if Mark is here, but to answer his question to Shane. For every Number value x, Number(Decimal(x)) gives back x. This means that if you create an Amount from a Decimal that was originally created with a Number, you can get the original number out of it by explicitly casting it to Number.

[07:28:40.0630] <nicolo-ribaudo>
(I'm not 100% sure this is true about Infinity because I don't remember what Decimal does with Infinity, and what Amount does with it)

[07:34:39.0151] <Jesse (🇪🇸)>
Infinity also works

[07:35:23.0083] <Jesse (🇪🇸)>
(the reason is to align with Decimal; i.e., since Decimal supports them, so should Amount)

[07:35:30.0071] <snek>
Decimal can represent every ieee754 double fp value?

[07:35:48.0178] <Jesse (🇪🇸)>
(one could argue that amount shoulnd't support infinity and NaN, but that's the current thinking)

[07:37:59.0359] <Jesse (🇪🇸)>
well, it doesn't support literally all of them (Shane offered a simple example, and Waldemar suggested another in the queue), but it *practically* does, in the sense that the toString of all binary64's have fewer than 34 significant digits

[07:38:11.0334] <nicolo-ribaudo>
What do you mean by "represent"?

- For every Number x, there is a Decimal y such that MV(x)=MV(y)? no
- For every Number x, there is a Decimal y such that Number(Decimal(x))=x? yes

[07:38:27.0888] <snek>
ok

[07:38:43.0720] <nicolo-ribaudo>
* What do you mean by "represent"?

- For every Number x, there is a Decimal y such that MV(x)=MV(y)? no
- For every Number x, there is a Decimal y such that Decimal(x)=y and Number(y)=x? yes

[07:39:54.0497] <Jesse (🇪🇸)>
there's a discussion of the representability issue here: https://github.com/tc39/proposal-measure/issues/26#issuecomment-2865053353

[07:42:50.0807] <shu>
what is this in reference to?

[07:43:52.0647] <Chris de Almeida>
> if we have confirmation from moddable and v8  that they have no issues with the new changes and that they are implemented i think it is fine to go ahead. 

[07:45:44.0668] <shu>
new changes to what?

[07:45:55.0314] <nicolo-ribaudo>
Banning it in `switch`

[07:46:00.0059] <nicolo-ribaudo>
* Banning `using` in `switch`

[07:46:00.0071] <arai>
https://github.com/rbuckton/ecma262/pull/14

[07:46:13.0940] <shu>
oh yeah, i started that issue and have implemented the ban

[07:46:22.0086] <shu>
didn't we get consensus last meeting for it?

[07:46:47.0548] <nicolo-ribaudo>
Yes, but the proposal was going for Stage 4 earlier today and we wanted to make sure that the change has actually been tested in an implementation

[07:46:57.0957] <shu>
ah ha

[07:46:58.0193] <nicolo-ribaudo>
Since well, stage 4 requires implementations

[07:47:17.0839] <shu>
confirmed v8 has no concerns here


2025-05-29
[01:00:31.0812] <Rob Palmer>
We are now starting the meeting!

[01:02:57.0287] <Christian Ulbrich>
-> https://github.com/tc39/notes/blob/main/delegates.txt

[01:04:10.0718] <yulia>
I can't edit the doc

[01:05:24.0395] <yulia>
ah just needed to refresh

