2022-05-02
[13:10:48.0779] <shu>
jschoi: does May 6 8:00 - 9:00 PT work for you for the incubator call?

[13:47:17.0269] <jschoi>
> <@shuyuguo:matrix.org> jschoi: does May 6 8:00 - 9:00 PT work for you for the incubator call?

This time works for me, thank you.

[13:47:33.0680] <jschoi>
I will try to have an agenda ready by tomorrow.

[14:42:10.0269] <shu>
excellent, thank you

[15:13:51.0547] <shu>
jschoi: argh, oops, i misread the doodle

[15:14:09.0676] <shu>
i meant May 6 9:00 - 10:00 PT, 1 hour later


2022-05-03
[06:11:35.0580] <jschoi>
> <@shuyuguo:matrix.org> i meant May 6 9:00 - 10:00 PT, 1 hour later

No worries; I can make that too. Thanks for arranging!

[15:14:50.0385] <ljharb>
`Array(Math.pow(2, 32) - 1).concat(1)` throws a RangeError about "too large" in node; in Safari it throws an OOM RangeError; in FF it seems to just hang. the spec seems to say it should throw a TypeError (https://tc39.es/ecma262/#sec-array.prototype.concat step 5.b.iii). am i reading it right? if so i can make a test262 test for it.

[15:22:50.0245] <shu>
that's not my reading

[15:23:21.0508] <shu>
OOMs are implementation-defined and can really happen anywhere. the spec says a `TypeError` should be thrown for lengths that exceed that length, even without an implementation-defined OOM error

[15:23:34.0576] <shu>
so Safari is certainly allowed to throw an OOM

[15:23:58.0652] <shu>
as for FF hanging, that's fine too, i think, from a compliance perspective

[15:24:19.0213] <shu>
it might be undesirable to hang, but i don't think that's breaking compliance with the spec

[15:25:12.0997] <shu>
a test262 here test can test that either a TypeError or an OOM RangeError is thrown, i'd think

[15:25:41.0992] <shu>
actually i'm not sure implementation-defined OOM errors are required to be `RangeError`s or can be anything

[15:25:48.0949] <shu>
so maybe the test is just that it must throw _something_

[15:27:55.0264] <shu>
 * OOMs are implementation-defined and can really happen anywhere. the spec says a `TypeError` should be thrown for lengths that exceed that value, even without an implementation-defined OOM error

[15:33:46.0983] <ljharb>
oh the OOM part and the hanging part yes, ofc

[15:34:05.0824] <ljharb>
but chrome/node doesn't throw an OOM - it throws a RangeError with a message. but the spec says it should be a TypeError

[15:34:23.0074] <ljharb>
thinking about it, it should really just be a RangeError anyways. so maybe it'd be a better web reality change to change the spec?

[15:34:40.0960] <shu>
hm, maybe, agreed that it feels like a rangeerror

[15:35:05.0887] <shu>
i feel like OOMs and resource limit-related errors are usually Range, not Type

