2025-04-01
[21:20:55.0671] <ljharb>
the ES2025 candidate has been prepared:
https://github.com/tc39/ecma262/releases/tag/es2025-candidate-2025-03-31
https://github.com/tc39/Reflector/issues/557

[22:35:29.0753] <jschoi>
linusg has kindly made a pull request to proposal-array-from-async (https://github.com/tc39/proposal-array-from-async/pull/48). It makes mostly editorial updates to the proposal spec to match ECMA-262 changes. There‚Äôs also a small proposal spec bugfix.

Way back in 2022, the proposal spec received pre-Stage-3 reviews from ljharb and nicolo-ribaudo. Should I ask them for repeated reviews before merging the pull request, or should I be okay with merging it unilaterally?

(I do plan on kickstarting the proposal back up soon, maybe all the way to Stage¬†4.)

[01:01:51.0633] <nicolo-ribaudo>
I'm happy to take another look next week


2025-04-03
[19:01:46.0722] <jschoi>
Is there a particular reason why withdrawn [proposal-operator-overloading](https://github.com/tc39/proposal-operator-overloading)‚Äôs repository hasn‚Äôt been archived? littledan withdrew it about a year ago, but various people have still been posting to it.

[19:02:11.0578] <jschoi>
* Is there a particular reason why withdrawn [proposal-operator-overloading](https://github.com/tc39/proposal-operator-overloading)‚Äôs repository hasn‚Äôt been archived? littledan withdrew it about a year ago, but various people have still been posting to it since.

[19:03:55.0098] <jschoi>
(It would also be good to link prominently to https://github.com/tc39/notes/blob/main/meetings/2023-11/november-28.md#withdrawing-operator-overloading from the explainer.)

[19:04:30.0305] <jschoi>
Ditto goes for [proposal-extended-numeric-literals](https://github.com/tc39/proposal-extended-numeric-literals).

[19:04:46.0571] <jschoi>
* Ditto goes for [proposal-extended-numeric-literals](https://github.com/tc39/proposal-extended-numeric-literals), though that‚Äôs been getting less community traffic.

[01:14:51.0828] <Ashley Claymore>
Good spot. A withdrawn proposal could be re-started. So I don't necessarily think they need to be archived, unless the champions wish to. But an updated README and a pinned issue makes a lot of sense 

[04:38:53.0781] <eemeli>
Renaming the repo with a `withdrawn-` or similar prefix would make the status a bit clearer.

[04:51:26.0966] <Jesse>
AFAIU the tc39 organization in GitHub can define a label (e.g., `withdrawn`) that can be used on repos within the organization

[06:00:49.0657] <ryzokuken>
Hi everyone! For folks interested in visiting us for the hybrid plenary in May, we're working on organizing a community event in collaboration with local communities along the same lines as the recent SeattleJS event you might remember from the last hybrid meeting in Seattle. I've posted a call for participation here: https://github.com/tc39/Reflector/issues/556, which allows you to volunteer for a talk or a panel but we're also open to new ideas. Basically if you're up for it, let us know through the spreadsheet form or just informally since it'd help us plan.

[09:32:50.0576] <ljharb>
they should be, it just slipped through the cracks. repos can be unarchived if needed

[10:16:42.0912] <Chris de Almeida>
üì¢ REMINDER! üì¢ The deadline for advancement for the April meeting is just ~20 hours from now!

[12:31:37.0029] <jschoi>
It‚Äôs been a long time for me, sorry‚Äîwhat‚Äôs the deadline for new agenda items that do not advance a proposal?

[12:32:39.0856] <ptomato>
before the draft schedule is published?

[12:46:29.0980] <Rob Palmer>
We still encourage early posting.

[13:11:09.0301] <Michael Ficarra>
we formally accept an agenda at the beginning of a meeting, but that hasn't stopped us from making updates during the meeting

[13:11:34.0104] <Michael Ficarra>
> 3. Adoption of the agenda

[13:22:33.0322] <shu>
do we really

[13:22:44.0802] <shu>
like does someone say "are there any objections to adopting this agenda"

[13:38:27.0895] <bakkot>
at literally every meeting, yes

[13:39:49.0987] <shu>
i evict memories of the start of tc39 meetings almost immediately after they occur

[14:06:13.0272] <bakkot>
that's what the notes are for https://github.com/tc39/notes/blob/main/meetings/2024-12/december-02.md#:~:text=.%20Are%20there%20any%20objections%20against%20proceeding%20with%20the%20current%20agenda%3F%20None%3F%20Okay.%20We%20have%20adopted%20the%20agenda.

[14:08:16.0480] <shu>
look, i'm not even in the list of attendees, it checks out

[15:43:57.0227] <Michael Ficarra>
there's a lot of things on the agenda for stage advancement with no links

[15:44:51.0468] <Michael Ficarra>
reminder @mhofman:matrix.org @erights:matrix.org that links to review materials should be provided before the advancement deadline

[15:46:03.0656] <kriskowal>
Mark‚Äôs been working to produce material all week. I‚Äôll pass on the reminder, and you can expect links soon.


2025-04-04
[06:32:48.0093] <nicolo-ribaudo>
Could we give back to delegates permission to merge in the agenda repo, at least when CI on a PR is green?

[06:34:04.0607] <nicolo-ribaudo>
I understand that ljharb would like to merge the PRs to make sure they conform to the nice commit format (i.e. `YYYY.MM: description`, single commit, squash locally and then merge withuot squashing), but:
- many delegates are trying to respect this format by ourselves too
- many delegates don't care about it and have write access anyway

[06:34:14.0413] <nicolo-ribaudo>
* I understand that ljharb would like to merge the PRs to make sure they conform to the nice commit format (i.e. `YYYY.MM: description`, single commit, squash locally and then merge withuot squashing), but:

- many delegates are trying to respect this format by ourselves too
- multiple delegates don't care about it and have write access anyway

[06:50:58.0363] <nicolo-ribaudo>
(sorry Jordan for putting you on the spot if the reason I lost merge access is not this one üòÖ)

[07:01:46.0384] <Chris de Almeida>
nicolo-ribaudo: delegates have write access

[07:02:12.0963] <Chris de Almeida>
this hasn't changed.. not sure what issue you are running into

[07:02:28.0307] <littledan>
I do not have write access

[07:02:57.0341] <Chris de Almeida>
do you have a couple minutes to hop on a call to investigate?

[07:03:46.0113] <littledan>
sure

[07:14:08.0828] <ljharb>
? you should have that permission already on the agenda repo, yes

[07:14:22.0295] <ljharb>
PRs aren‚Äôt even a requirement

[07:14:25.0174] <Chris de Almeida>
I fixed it

[07:18:32.0375] <Chris de Almeida>
nicolo-ribaudo: fixed

[07:20:08.0098] <nicolo-ribaudo>
Ok thank you :)

[07:21:48.0960] <ljharb>
(also merely having an open PR means you hit the deadline, so this sort of thing wouldn't impact that, at least)

[07:23:39.0447] <Chris de Almeida>
gentle reminder that even though PRs are not required, they are greatly appreciated because people who have notifications on will know there is something new on the agenda


2025-04-07
[19:51:00.0595] <jschoi>
[Math.sqrt](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.sqrt) says, ‚ÄúReturn ùîΩ(the square root of ‚Ñù(n)),‚Äù but [Math.cbrt](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.cbrt) says, ‚ÄúReturn an implementation-approximated Number value representing the cube root of ‚Ñù(n).‚Äù Does anyone know why their language is different?

[19:53:35.0440] <bakkot>
jschoi: https://github.com/tc39/ecma262/pull/3345

[19:53:58.0625] <bakkot>
basically we know that everyone is using a correct sqrt because wasm requires it but we don't know this about cube root and it's a pain to find out

[19:56:22.0949] <jschoi>
Ah‚Ä¶so it‚Äôs because there‚Äôs no cbrt instruction.

[19:57:23.0068] <jschoi>
* Ah‚Ä¶so it‚Äôs because there‚Äôs no cbrt instruction in WASM. A shame.

[20:01:55.0607] <jschoi>
* Ah‚Ä¶so it‚Äôs because there‚Äôs no cbrt instruction in WASM. That seems like an unfortunate omission.

[20:01:58.0037] <jschoi>
I presume that BigInt.sqrt should also use the ‚Äúimplementation-approximated‚Äù language, since it‚Äôs not trying to match a f32/364 WASM instruction.

[20:02:17.0691] <jschoi>
* I presume that BigInt.sqrt should also use the ‚Äúimplementation-approximated‚Äù language, since it‚Äôs not trying to match a f32/364 WASM instruction but rather something like [Waldemar‚Äôs novel implementation](https://github.com/waldemarhorwat/integer-roots).

[20:04:00.0309] <jschoi>
* I presume that BigInt.sqrt should also use the ‚Äúimplementation-approximated‚Äù language, since it‚Äôs not trying to match a f32/364 WASM instruction but rather something like [Waldemar‚Äôs novel implementation](https://github.com/waldemarhorwat/integer-roots) over an unbounded ‚Ñï domain.

[20:31:37.0198] <bakkot>
no, if it's straightforward for everyone to have the right answer, then we should require the right answer

[20:31:46.0130] <bakkot>
and waldemar's is exact

[20:32:08.0099] <bakkot>
we only do implementation-approximated if getting the exact right answer is difficult or expensive

[20:38:34.0408] <jschoi>
Oh, so then *both* BigInt.sqrt and BigInt.cbrt should say, ‚ÄúReturn ‚Ñ§(the square/cube root of ‚Ñù(n))‚Äù.

[20:39:10.0319] <jschoi>
* Oh, so then _both_ BigInt.sqrt and BigInt.cbrt should say something like, ‚ÄúReturn ‚Ñ§(the square/cube root of ‚Ñù(n)), truncated toward 0‚Äù.

[20:39:12.0272] <jschoi>
* Oh, so then _both_ BigInt.sqrt and BigInt.cbrt should say something like, ‚ÄúReturn ‚Ñ§(the square/cube root of ‚Ñù(n)), truncated toward 0.‚Äù

[20:45:13.0979] <bakkot>
yes although the ‚Ñ§ operator takes an integer as input so it would have to be more like ‚ÄúReturn ‚Ñ§(the square/cube root of ‚Ñù(n) truncated toward 0)‚Äù

[20:45:19.0534] <bakkot>
though probably clearer as two steps

[20:48:11.0593] <jschoi>
Editorially, would
‚ÄúLet _root_ be the integer part of the square/cube root of ‚Ñù(n)‚Äù or
‚ÄúLet _root_ be the square/cube root of ‚Ñù(n), truncated toward 0‚Äù
be preferable?

[20:48:22.0243] <jschoi>
* Editorially, would
‚ÄúLet _root_ be the integer part of the square/cube root of ‚Ñù(_n_)‚Äù or
‚ÄúLet _root_ be the square/cube root of ‚Ñù(_n_), truncated toward 0‚Äù
be preferable?

[20:49:47.0006] <jschoi>
* Editorially, do you have an opinion about whether
‚ÄúLet _root_ be the integer part of the square/cube root of ‚Ñù(_n_); return ‚Ñ§(_root_)‚Äù,
‚ÄúLet _root_ be the square/cube root of ‚Ñù(_n_), truncated toward 0; return ‚Ñ§(_root_)‚Äù,
‚ÄúLet _root_ be the square/cube root of ‚Ñù(_n_); return ‚Ñ§(the integer part of _root_)‚Äù, or
‚ÄúLet _root_ be the square/cube root of ‚Ñù(_n_); return ‚Ñ§(_root_ truncated toward 0)‚Äù
be preferable?

[20:50:40.0154] <jschoi>
* Editorially, do you have an opinion about which would be preferable?
1. Let _root_ be the integer part of the square/cube root of ‚Ñù(_n_). Return ‚Ñ§(_root_).
2. Let _root_ be the square/cube root of ‚Ñù(_n_), truncated toward 0. Return ‚Ñ§(_root_).
3. Let _root_ be the square/cube root of ‚Ñù(_n_). Return ‚Ñ§(the integer part of _root_).
4. Let _root_ be the square/cube root of ‚Ñù(_n_). Return ‚Ñ§(_root_ truncated toward 0).

[20:58:04.0786] <jschoi>
* Editorially, do you have an opinion about which would be preferable?

1. Let _root_ be the integer part of the square/cube root of ‚Ñù(_n_). Return ‚Ñ§(_root_).
2. Let _root_ be the square/cube root of ‚Ñù(_n_), truncated toward 0. Return ‚Ñ§(_root_).
3. Let _root_ be the square/cube root of ‚Ñù(_n_). Return ‚Ñ§(the integer part of _root_).
4. Let _root_ be the square/cube root of ‚Ñù(_n_). Return ‚Ñ§(_root_ truncated toward 0).

Hm, I see MakeFullYear does already use ‚Äúthe integer part of‚Äù. There is nowhere in the spec that uses ‚Äútoward 0/+‚àû/-‚àû‚Äù.


2025-04-08
[09:37:58.0505] <Michael Ficarra>
Do we have an in-person sign-up form or location information for the May (Igalia/A Coru√±a) meeting yet? I would like to book travel soon to avoid higher fares. /cc @usharma:igalia.com

[09:40:12.0898] <ryzokuken>
We do, let me publish something on the reflector soon.

[09:40:26.0520] <ryzokuken>
* We do but it was a bit WIP around some details, let me publish something on the reflector soon.

[09:43:35.0504] <Michael Ficarra>
The things I need most urgently are just the address of the meeting and some hotel recommendations.

[10:53:08.0629] <Richard Gibson>
We don't have "toward 0/+‚àû/-‚àû", but we do have [truncate](https://tc39.es/ecma262/multipage/notational-conventions.html#eqn-truncate), which I would prefer:
1. Let _root_ be the square/cube root of ‚Ñù(_n_).
2. Return ‚Ñ§(truncate(_root_)).

[14:04:45.0658] <jschoi>
Richard Gibson: Thanks for pointing out that there is a truncate; I don‚Äôt know how I missed that. 
Two other people marked that they wanted ‚ÄúLet root be the integer part of the square/cube root of ‚Ñù(n). Return ‚Ñ§(root),‚Äù but your suggestion seems cleaner to me.


2025-04-09
[19:33:48.0057] <TabAtkins (Vacation until May)>
FYI, I'm on vacation until nearly the end of the month.

[08:05:42.0807] <Duncan MacGregor>
Does anybody know if there is something in test262 covering the ordering of the  steps in [sec-function-calls-runtime-semantics](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-function-calls-runtime-semantics-evaluation) and [sec-evaluatecall](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-evaluatecall), specifically resolving if ref, then evaluating the arguments, and then checking if the _func_ is an function?

[08:06:33.0537] <Duncan MacGregor>
I couldn't find anything, and was surprised, and I thought it would be a good idea to check with everybody before trying to write a PR for this.

[08:43:26.0713] <bakkot>
Duncan MacGregor one way to check is to take engine262, run test262, then modify engine262 to have the wrong semantics and see if any tests start failing

[08:43:38.0009] <bakkot>
modifying engine262 for that sort of thing is usually trivial

[09:10:13.0486] <Duncan MacGregor>
bakkot: I'll give that a go, it should be trivial to make that change, nad see what breaks. I think that even if it does break something I may still submit something new for test262 that is more obivously tied those parts of the spec.


2025-04-10
[04:32:06.0353] <Duncan MacGregor>
Okay, there is actually a reasonable amount of testing round this (under its es5 section id), but it's all the `TypeError` cases rather than checking that the arguments are not evaluated if the evaluation of the reference expression itself caused a `ReferenceError` to be raised.


2025-04-11
[17:39:21.0026] <jschoi>
I‚Äôm disappointed to see that Observables didn‚Äôt end up on the April plenary agenda. I wonder what happened there. 
I was looking forward to that one, particularly about its role versus ES Signals.

[17:40:09.0532] <jschoi>
* I‚Äôm disappointed to see that Observables didn‚Äôt end up on the April plenary agenda. I wonder what happened there. 
I was looking forward to that one, particularly about the potential for them to return from WHATWG to TC39 and the intersection of their role versus ES Signals‚Äô.

[18:25:44.0650] <jschoi>
* I‚Äôm disappointed to see that Observables didn‚Äôt end up on the April plenary agenda, at which Dominic Farolino had asked to present. I wonder what happened there. 
I was looking forward to that presentation, particularly about the potential for them to return from WHATWG to TC39 and the intersection of their role versus ES Signals‚Äô.

[05:42:24.0895] <Rob Palmer>
jschoi: DominicF said he will send a PR to put this on the agenda. I just sent him a second reminder to do so.


2025-04-13
[14:47:35.0333] <Chris de Almeida>
The draft schedule is up. Link is available in [the reflector issue](https://github.com/tc39/Reflector/issues/554).

Unfortunately, due to the scope of the constraints, it was not possible to accommodate them all. Furthermore, as scheduling is fluid throughout the meeting, as we move topics up when possible, it is possible that existing met constraints will not necessarily remain that way.

For folks who supplied constraints, *it would be a great help, if at all possible, to reduce the scope of your constraints, either by removing topics, or by increasing your availability during the meeting.* Thank you.

[14:47:42.0666] <Chris de Almeida>
* The draft schedule is up. Link is available in [the reflector issue](https://github.com/tc39/Reflector/issues/554).

Unfortunately, due to the scope of the constraints, it was not possible to accommodate them all. Furthermore, as scheduling is fluid throughout the meeting, as we move topics up when possible, it is possible that existing met constraints will not necessarily remain that way.

For folks who supplied constraints, __it would be a great help, if at all possible, to reduce the scope of your constraints, either by removing topics, or by increasing your availability during the meeting.__ Thank you.

[14:48:39.0785] <Chris de Almeida>
* The draft schedule is up. Link is available in [the reflector issue](https://github.com/tc39/Reflector/issues/554).

Unfortunately, due to the scope of the constraints, it was not possible to accommodate them all. Furthermore, as scheduling is fluid throughout the meeting, as we move topics up as time allows, it is possible that existing met constraints will not necessarily remain that way.

For folks who supplied constraints, **it would be a great help, if at all possible, to reduce the scope of your constraints, either by removing topics, or by increasing your availability during the meeting.** Thank you.

[15:01:47.0217] <jschoi>
How may I get access to the draft schedule on HackMD? (I couldn‚Äôt find instructions in how-we-work or the Matrix logs.)

[15:07:00.0007] <Chris de Almeida>
hold please, looks like I need to fix permissions

[15:07:28.0362] <jschoi>
* How may I get access to the draft schedule on HackMD? The website gives a 403. (I couldn‚Äôt find instructions in how-we-work or the Matrix logs. I made a HackMD account with a username ‚ÄúJSChoi‚Äù.)

[15:07:44.0697] <jschoi>
* How may I get access to the draft schedule on HackMD? The website gives a 403. (I couldn‚Äôt find instructions in how-we-work or the Matrix logs.)

[15:27:27.0018] <Chris de Almeida>
looks like some hackmd bug (which I submitted to them just now). so I'll need to copy into a new doc in my account

[15:29:35.0428] <Chris de Almeida>
link on reflector updated. try now

[15:32:06.0547] <jschoi>
Chris de Almeida: It works now, thank you.

[15:34:05.0202] <nicolo-ribaudo>
Chris de Almeida If AsyncContext cannot be scheduled outside of day 2, could it be at least moved to the morning? I can try to find some time, the earlier the better.

[15:36:05.0766] <nicolo-ribaudo>
Looking at the constraints, it could be swapped (together with the R&T topic, to make 60 mins) with Mark's topic

[15:37:45.0934] <Chris de Almeida>
moved to day 1 am

[15:40:19.0273] <Chris de Almeida>
sorry, I missed that you were also a presenter on that topic


2025-04-14
[20:32:39.0765] <jschoi>
FYI: A late-breaking pull request has been opened for Observables with slides. 
https://github.com/tc39/agendas/pull/1846, https://docs.google.com/presentation/d/1i5_zneksrU7i7ZHcl5EQRzUHGkmXRIQKd-bLfrPRNXY/edit?usp=sharing

[06:51:05.0574] <ryzokuken>
@room starting in 10 minutes!

[07:12:07.0945] <Jesse>
please add yourself to the attendees list in the doc if you're here!

[07:12:38.0299] <Jesse>
(I'm not exactly a newbie when taking notes, but I don't know everyone's abbreviation 100%, I usually go to the attendee list when I'm unsure)

[07:12:49.0595] <dminor>
Question about the next meeting, are we confident enough that A Coru√±a will be in person that delegates can start making travel plans?

[07:13:45.0621] <Michael Ficarra>
it's easier to just keep https://github.com/tc39/notes/blob/main/delegates.txt open

[07:14:22.0674] <Michael Ficarra>
I've already booked my travel üò¨

[07:14:36.0460] <ryzokuken>
yes

[07:15:12.0802] <ryzokuken>
sorry I have no idea why it seemed unclear on the chairs' end: this is most certainly a confirmed meeting, please feel free to book travel

[07:15:33.0476] <ryzokuken>
the interest survey was sent out earlier than usual

[07:16:29.0048] <Michael Ficarra>
it seems weird to have a domain-agnostic "structured data" TC

[07:16:46.0286] <littledan>
tell that to TC49, "programming languages"

[07:16:56.0482] <Michael Ficarra>
I imagine it would require participation from experts in each of the respective (and disparate) domains

[07:17:18.0986] <littledan>
it would, yes. We won't fully found it if we don't get those experts, but initial discussion with the open source communities tends positive

[07:17:22.0680] <Michael Ficarra>
yeah, that's weird and obviously too broad

[07:17:42.0738] <littledan>
well... it's just normal. We also feed into ISO/IEC JTC1 SC22, which is also programming languages...

[07:17:55.0484] <littledan>
note that this TC proposal hasn't been announced publicly

[07:18:03.0865] <littledan>
(at Ecma's request)

[07:18:17.0377] <Michael Ficarra>
I guess you'll have separate TGs that basically don't overlap at all?

[07:21:22.0236] <shu>
what is the upshot of ecma involvement in C#, if that's an analogy here?

[07:22:00.0002] <jschoi>
I‚Äôve been excited about this initiative ever since I heard about it last plenary. 

[07:22:42.0345] <littledan>
the development of C# takes place in https://github.com/dotnet/csharplang yet we standardize it in TC49 later

[07:22:59.0470] <littledan>
TC39's model of doing development in committee is just one possible model, which some TCs follow and others don't

[07:23:01.0090] <shu>
what does one get out of the standardization in TC49

[07:23:52.0324] <Michael Ficarra>
maybe obscure government requirements?

[07:24:00.0987] <littledan>
I don't know much about C#, but for CycloneDX and JSON Schema, there's also need to normatively reference things from other specs, and we've also seen in CycloneDX that creating a standards committee can attract engineering effort to do detailed reviews which just weren't happening on the open source side alone

[07:24:58.0937] <littledan>
I'm very hopeful that we'll get this last sort of value out of the JSON Schema effort, and also that it will help people rally around this version

[07:25:46.0831] <littledan>
yeah but there's also proposed to be a "methodology" TC to find common requirements for such languages and schemas (schemata?)

[07:33:40.0883] <jschoi>
> ECMA404 Status Updates (15m)
> 15m

[07:33:52.0650] <jschoi>
> 15m

[07:34:21.0362] <jschoi>
* It always amuses me how fifteen minutes are allowed to Chip‚Äôs ‚Äúupdate‚Äù.

[07:35:18.0327] <Chris de Almeida>
oh, the agenda numbers for the boilerplate stuff should probably get updated. on the schedule and TCQ it is `1m`

[07:35:49.0284] <Aki>
when i was handling scheduling I used it as agenda timeslot breathing room

[07:36:44.0357] <Steve Hicks>
Chris de Almeida: Not sure what the procedure is or if I'm too late, but I can loosen my constraint to include availability the first hour of Day 4, which if we can swap the two topics that morning would unblock all constraints for Disposable AsyncContext.

[07:37:35.0012] <jschoi>
ü´Å 

