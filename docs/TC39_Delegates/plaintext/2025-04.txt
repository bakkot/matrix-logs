2025-04-01
[21:20:55.0671] <ljharb>
the ES2025 candidate has been prepared:
https://github.com/tc39/ecma262/releases/tag/es2025-candidate-2025-03-31
https://github.com/tc39/Reflector/issues/557

[22:35:29.0753] <jschoi>
linusg has kindly made a pull request to proposal-array-from-async (https://github.com/tc39/proposal-array-from-async/pull/48). It makes mostly editorial updates to the proposal spec to match ECMA-262 changes. There‚Äôs also a small proposal spec bugfix.

Way back in 2022, the proposal spec received pre-Stage-3 reviews from ljharb and nicolo-ribaudo. Should I ask them for repeated reviews before merging the pull request, or should I be okay with merging it unilaterally?

(I do plan on kickstarting the proposal back up soon, maybe all the way to Stage¬†4.)

[01:01:51.0633] <nicolo-ribaudo>
I'm happy to take another look next week


2025-04-03
[19:01:46.0722] <jschoi>
Is there a particular reason why withdrawn [proposal-operator-overloading](https://github.com/tc39/proposal-operator-overloading)‚Äôs repository hasn‚Äôt been archived? littledan withdrew it about a year ago, but various people have still been posting to it.

[19:02:11.0578] <jschoi>
* Is there a particular reason why withdrawn [proposal-operator-overloading](https://github.com/tc39/proposal-operator-overloading)‚Äôs repository hasn‚Äôt been archived? littledan withdrew it about a year ago, but various people have still been posting to it since.

[19:03:55.0098] <jschoi>
(It would also be good to link prominently to https://github.com/tc39/notes/blob/main/meetings/2023-11/november-28.md#withdrawing-operator-overloading from the explainer.)

[19:04:30.0305] <jschoi>
Ditto goes for [proposal-extended-numeric-literals](https://github.com/tc39/proposal-extended-numeric-literals).

[19:04:46.0571] <jschoi>
* Ditto goes for [proposal-extended-numeric-literals](https://github.com/tc39/proposal-extended-numeric-literals), though that‚Äôs been getting less community traffic.

[01:14:51.0828] <Ashley Claymore>
Good spot. A withdrawn proposal could be re-started. So I don't necessarily think they need to be archived, unless the champions wish to. But an updated README and a pinned issue makes a lot of sense 

[04:38:53.0781] <eemeli>
Renaming the repo with a `withdrawn-` or similar prefix would make the status a bit clearer.

[04:51:26.0966] <Jesse>
AFAIU the tc39 organization in GitHub can define a label (e.g., `withdrawn`) that can be used on repos within the organization

[06:00:49.0657] <ryzokuken>
Hi everyone! For folks interested in visiting us for the hybrid plenary in May, we're working on organizing a community event in collaboration with local communities along the same lines as the recent SeattleJS event you might remember from the last hybrid meeting in Seattle. I've posted a call for participation here: https://github.com/tc39/Reflector/issues/556, which allows you to volunteer for a talk or a panel but we're also open to new ideas. Basically if you're up for it, let us know through the spreadsheet form or just informally since it'd help us plan.

[09:32:50.0576] <ljharb>
they should be, it just slipped through the cracks. repos can be unarchived if needed

[10:16:42.0912] <Chris de Almeida>
üì¢ REMINDER! üì¢ The deadline for advancement for the April meeting is just ~20 hours from now!

[12:31:37.0029] <jschoi>
It‚Äôs been a long time for me, sorry‚Äîwhat‚Äôs the deadline for new agenda items that do not advance a proposal?

[12:32:39.0856] <ptomato>
before the draft schedule is published?

[12:46:29.0980] <Rob Palmer>
We still encourage early posting.

[13:11:09.0301] <Michael Ficarra>
we formally accept an agenda at the beginning of a meeting, but that hasn't stopped us from making updates during the meeting

[13:11:34.0104] <Michael Ficarra>
> 3. Adoption of the agenda

[13:22:33.0322] <shu>
do we really

[13:22:44.0802] <shu>
like does someone say "are there any objections to adopting this agenda"

[13:38:27.0895] <bakkot>
at literally every meeting, yes

[13:39:49.0987] <shu>
i evict memories of the start of tc39 meetings almost immediately after they occur

[14:06:13.0272] <bakkot>
that's what the notes are for https://github.com/tc39/notes/blob/main/meetings/2024-12/december-02.md#:~:text=.%20Are%20there%20any%20objections%20against%20proceeding%20with%20the%20current%20agenda%3F%20None%3F%20Okay.%20We%20have%20adopted%20the%20agenda.

[14:08:16.0480] <shu>
look, i'm not even in the list of attendees, it checks out

[15:43:57.0227] <Michael Ficarra>
there's a lot of things on the agenda for stage advancement with no links

[15:44:51.0468] <Michael Ficarra>
reminder @mhofman:matrix.org @erights:matrix.org that links to review materials should be provided before the advancement deadline

[15:46:03.0656] <kriskowal>
Mark‚Äôs been working to produce material all week. I‚Äôll pass on the reminder, and you can expect links soon.


2025-04-04
[06:32:48.0093] <nicolo-ribaudo>
Could we give back to delegates permission to merge in the agenda repo, at least when CI on a PR is green?

[06:34:04.0607] <nicolo-ribaudo>
I understand that ljharb would like to merge the PRs to make sure they conform to the nice commit format (i.e. `YYYY.MM: description`, single commit, squash locally and then merge withuot squashing), but:
- many delegates are trying to respect this format by ourselves too
- many delegates don't care about it and have write access anyway

[06:34:14.0413] <nicolo-ribaudo>
* I understand that ljharb would like to merge the PRs to make sure they conform to the nice commit format (i.e. `YYYY.MM: description`, single commit, squash locally and then merge withuot squashing), but:

- many delegates are trying to respect this format by ourselves too
- multiple delegates don't care about it and have write access anyway

[06:50:58.0363] <nicolo-ribaudo>
(sorry Jordan for putting you on the spot if the reason I lost merge access is not this one üòÖ)

[07:01:46.0384] <Chris de Almeida>
nicolo-ribaudo: delegates have write access

[07:02:12.0963] <Chris de Almeida>
this hasn't changed.. not sure what issue you are running into

[07:02:28.0307] <littledan>
I do not have write access

[07:02:57.0341] <Chris de Almeida>
do you have a couple minutes to hop on a call to investigate?

[07:03:46.0113] <littledan>
sure

[07:14:08.0828] <ljharb>
? you should have that permission already on the agenda repo, yes

[07:14:22.0295] <ljharb>
PRs aren‚Äôt even a requirement

[07:14:25.0174] <Chris de Almeida>
I fixed it

[07:18:32.0375] <Chris de Almeida>
nicolo-ribaudo: fixed

[07:20:08.0098] <nicolo-ribaudo>
Ok thank you :)

[07:21:48.0960] <ljharb>
(also merely having an open PR means you hit the deadline, so this sort of thing wouldn't impact that, at least)

[07:23:39.0447] <Chris de Almeida>
gentle reminder that even though PRs are not required, they are greatly appreciated because people who have notifications on will know there is something new on the agenda


2025-04-07
[19:51:00.0595] <jschoi>
[Math.sqrt](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.sqrt) says, ‚ÄúReturn ùîΩ(the square root of ‚Ñù(n)),‚Äù but [Math.cbrt](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.cbrt) says, ‚ÄúReturn an implementation-approximated Number value representing the cube root of ‚Ñù(n).‚Äù Does anyone know why their language is different?

[19:53:35.0440] <bakkot>
jschoi: https://github.com/tc39/ecma262/pull/3345

[19:53:58.0625] <bakkot>
basically we know that everyone is using a correct sqrt because wasm requires it but we don't know this about cube root and it's a pain to find out

[19:56:22.0949] <jschoi>
Ah‚Ä¶so it‚Äôs because there‚Äôs no cbrt instruction.

[19:57:23.0068] <jschoi>
* Ah‚Ä¶so it‚Äôs because there‚Äôs no cbrt instruction in WASM. A shame.

[20:01:55.0607] <jschoi>
* Ah‚Ä¶so it‚Äôs because there‚Äôs no cbrt instruction in WASM. That seems like an unfortunate omission.

[20:01:58.0037] <jschoi>
I presume that BigInt.sqrt should also use the ‚Äúimplementation-approximated‚Äù language, since it‚Äôs not trying to match a f32/364 WASM instruction.

[20:02:17.0691] <jschoi>
* I presume that BigInt.sqrt should also use the ‚Äúimplementation-approximated‚Äù language, since it‚Äôs not trying to match a f32/364 WASM instruction but rather something like [Waldemar‚Äôs novel implementation](https://github.com/waldemarhorwat/integer-roots).

[20:04:00.0309] <jschoi>
* I presume that BigInt.sqrt should also use the ‚Äúimplementation-approximated‚Äù language, since it‚Äôs not trying to match a f32/364 WASM instruction but rather something like [Waldemar‚Äôs novel implementation](https://github.com/waldemarhorwat/integer-roots) over an unbounded ‚Ñï domain.

[20:31:37.0198] <bakkot>
no, if it's straightforward for everyone to have the right answer, then we should require the right answer

[20:31:46.0130] <bakkot>
and waldemar's is exact

[20:32:08.0099] <bakkot>
we only do implementation-approximated if getting the exact right answer is difficult or expensive

[20:38:34.0408] <jschoi>
Oh, so then *both* BigInt.sqrt and BigInt.cbrt should say, ‚ÄúReturn ‚Ñ§(the square/cube root of ‚Ñù(n))‚Äù.

[20:39:10.0319] <jschoi>
* Oh, so then _both_ BigInt.sqrt and BigInt.cbrt should say something like, ‚ÄúReturn ‚Ñ§(the square/cube root of ‚Ñù(n)), truncated toward 0‚Äù.

[20:39:12.0272] <jschoi>
* Oh, so then _both_ BigInt.sqrt and BigInt.cbrt should say something like, ‚ÄúReturn ‚Ñ§(the square/cube root of ‚Ñù(n)), truncated toward 0.‚Äù

[20:45:13.0979] <bakkot>
yes although the ‚Ñ§ operator takes an integer as input so it would have to be more like ‚ÄúReturn ‚Ñ§(the square/cube root of ‚Ñù(n) truncated toward 0)‚Äù

[20:45:19.0534] <bakkot>
though probably clearer as two steps

[20:48:11.0593] <jschoi>
Editorially, would
‚ÄúLet _root_ be the integer part of the square/cube root of ‚Ñù(n)‚Äù or
‚ÄúLet _root_ be the square/cube root of ‚Ñù(n), truncated toward 0‚Äù
be preferable?

[20:48:22.0243] <jschoi>
* Editorially, would
‚ÄúLet _root_ be the integer part of the square/cube root of ‚Ñù(_n_)‚Äù or
‚ÄúLet _root_ be the square/cube root of ‚Ñù(_n_), truncated toward 0‚Äù
be preferable?

[20:49:47.0006] <jschoi>
* Editorially, do you have an opinion about whether
‚ÄúLet _root_ be the integer part of the square/cube root of ‚Ñù(_n_); return ‚Ñ§(_root_)‚Äù,
‚ÄúLet _root_ be the square/cube root of ‚Ñù(_n_), truncated toward 0; return ‚Ñ§(_root_)‚Äù,
‚ÄúLet _root_ be the square/cube root of ‚Ñù(_n_); return ‚Ñ§(the integer part of _root_)‚Äù, or
‚ÄúLet _root_ be the square/cube root of ‚Ñù(_n_); return ‚Ñ§(_root_ truncated toward 0)‚Äù
be preferable?

[20:50:40.0154] <jschoi>
* Editorially, do you have an opinion about which would be preferable?
1. Let _root_ be the integer part of the square/cube root of ‚Ñù(_n_). Return ‚Ñ§(_root_).
2. Let _root_ be the square/cube root of ‚Ñù(_n_), truncated toward 0. Return ‚Ñ§(_root_).
3. Let _root_ be the square/cube root of ‚Ñù(_n_). Return ‚Ñ§(the integer part of _root_).
4. Let _root_ be the square/cube root of ‚Ñù(_n_). Return ‚Ñ§(_root_ truncated toward 0).

[20:58:04.0786] <jschoi>
* Editorially, do you have an opinion about which would be preferable?

1. Let _root_ be the integer part of the square/cube root of ‚Ñù(_n_). Return ‚Ñ§(_root_).
2. Let _root_ be the square/cube root of ‚Ñù(_n_), truncated toward 0. Return ‚Ñ§(_root_).
3. Let _root_ be the square/cube root of ‚Ñù(_n_). Return ‚Ñ§(the integer part of _root_).
4. Let _root_ be the square/cube root of ‚Ñù(_n_). Return ‚Ñ§(_root_ truncated toward 0).

Hm, I see MakeFullYear does already use ‚Äúthe integer part of‚Äù. There is nowhere in the spec that uses ‚Äútoward 0/+‚àû/-‚àû‚Äù.


2025-04-08
[09:37:58.0505] <Michael Ficarra>
Do we have an in-person sign-up form or location information for the May (Igalia/A Coru√±a) meeting yet? I would like to book travel soon to avoid higher fares. /cc @usharma:igalia.com

[09:40:12.0898] <ryzokuken>
We do, let me publish something on the reflector soon.

[09:40:26.0520] <ryzokuken>
* We do but it was a bit WIP around some details, let me publish something on the reflector soon.

[09:43:35.0504] <Michael Ficarra>
The things I need most urgently are just the address of the meeting and some hotel recommendations.

[10:53:08.0629] <Richard Gibson>
We don't have "toward 0/+‚àû/-‚àû", but we do have [truncate](https://tc39.es/ecma262/multipage/notational-conventions.html#eqn-truncate), which I would prefer:
1. Let _root_ be the square/cube root of ‚Ñù(_n_).
2. Return ‚Ñ§(truncate(_root_)).

[14:04:45.0658] <jschoi>
Richard Gibson: Thanks for pointing out that there is a truncate; I don‚Äôt know how I missed that. 
Two other people marked that they wanted ‚ÄúLet root be the integer part of the square/cube root of ‚Ñù(n). Return ‚Ñ§(root),‚Äù but your suggestion seems cleaner to me.


2025-04-09
[19:33:48.0057] <TabAtkins (Vacation until May)>
FYI, I'm on vacation until nearly the end of the month.

[08:05:42.0807] <Duncan MacGregor>
Does anybody know if there is something in test262 covering the ordering of the  steps in [sec-function-calls-runtime-semantics](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-function-calls-runtime-semantics-evaluation) and [sec-evaluatecall](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-evaluatecall), specifically resolving if ref, then evaluating the arguments, and then checking if the _func_ is an function?

[08:06:33.0537] <Duncan MacGregor>
I couldn't find anything, and was surprised, and I thought it would be a good idea to check with everybody before trying to write a PR for this.

[08:43:26.0713] <bakkot>
Duncan MacGregor one way to check is to take engine262, run test262, then modify engine262 to have the wrong semantics and see if any tests start failing

[08:43:38.0009] <bakkot>
modifying engine262 for that sort of thing is usually trivial

[09:10:13.0486] <Duncan MacGregor>
bakkot: I'll give that a go, it should be trivial to make that change, nad see what breaks. I think that even if it does break something I may still submit something new for test262 that is more obivously tied those parts of the spec.


2025-04-10
[04:32:06.0353] <Duncan MacGregor>
Okay, there is actually a reasonable amount of testing round this (under its es5 section id), but it's all the `TypeError` cases rather than checking that the arguments are not evaluated if the evaluation of the reference expression itself caused a `ReferenceError` to be raised.


2025-04-11
[17:39:21.0026] <jschoi>
I‚Äôm disappointed to see that Observables didn‚Äôt end up on the April plenary agenda. I wonder what happened there. 
I was looking forward to that one, particularly about its role versus ES Signals.

[17:40:09.0532] <jschoi>
* I‚Äôm disappointed to see that Observables didn‚Äôt end up on the April plenary agenda. I wonder what happened there. 
I was looking forward to that one, particularly about the potential for them to return from WHATWG to TC39 and the intersection of their role versus ES Signals‚Äô.

[18:25:44.0650] <jschoi>
* I‚Äôm disappointed to see that Observables didn‚Äôt end up on the April plenary agenda, at which Dominic Farolino had asked to present. I wonder what happened there. 
I was looking forward to that presentation, particularly about the potential for them to return from WHATWG to TC39 and the intersection of their role versus ES Signals‚Äô.

[05:42:24.0895] <Rob Palmer>
jschoi: DominicF said he will send a PR to put this on the agenda. I just sent him a second reminder to do so.


2025-04-13
[14:47:35.0333] <Chris de Almeida>
The draft schedule is up. Link is available in [the reflector issue](https://github.com/tc39/Reflector/issues/554).

Unfortunately, due to the scope of the constraints, it was not possible to accommodate them all. Furthermore, as scheduling is fluid throughout the meeting, as we move topics up when possible, it is possible that existing met constraints will not necessarily remain that way.

For folks who supplied constraints, *it would be a great help, if at all possible, to reduce the scope of your constraints, either by removing topics, or by increasing your availability during the meeting.* Thank you.

[14:47:42.0666] <Chris de Almeida>
* The draft schedule is up. Link is available in [the reflector issue](https://github.com/tc39/Reflector/issues/554).

Unfortunately, due to the scope of the constraints, it was not possible to accommodate them all. Furthermore, as scheduling is fluid throughout the meeting, as we move topics up when possible, it is possible that existing met constraints will not necessarily remain that way.

For folks who supplied constraints, __it would be a great help, if at all possible, to reduce the scope of your constraints, either by removing topics, or by increasing your availability during the meeting.__ Thank you.

[14:48:39.0785] <Chris de Almeida>
* The draft schedule is up. Link is available in [the reflector issue](https://github.com/tc39/Reflector/issues/554).

Unfortunately, due to the scope of the constraints, it was not possible to accommodate them all. Furthermore, as scheduling is fluid throughout the meeting, as we move topics up as time allows, it is possible that existing met constraints will not necessarily remain that way.

For folks who supplied constraints, **it would be a great help, if at all possible, to reduce the scope of your constraints, either by removing topics, or by increasing your availability during the meeting.** Thank you.

[15:01:47.0217] <jschoi>
How may I get access to the draft schedule on HackMD? (I couldn‚Äôt find instructions in how-we-work or the Matrix logs.)

[15:07:00.0007] <Chris de Almeida>
hold please, looks like I need to fix permissions

[15:07:28.0362] <jschoi>
* How may I get access to the draft schedule on HackMD? The website gives a 403. (I couldn‚Äôt find instructions in how-we-work or the Matrix logs. I made a HackMD account with a username ‚ÄúJSChoi‚Äù.)

[15:07:44.0697] <jschoi>
* How may I get access to the draft schedule on HackMD? The website gives a 403. (I couldn‚Äôt find instructions in how-we-work or the Matrix logs.)

[15:27:27.0018] <Chris de Almeida>
looks like some hackmd bug (which I submitted to them just now). so I'll need to copy into a new doc in my account

[15:29:35.0428] <Chris de Almeida>
link on reflector updated. try now

[15:32:06.0547] <jschoi>
Chris de Almeida: It works now, thank you.

[15:34:05.0202] <nicolo-ribaudo>
Chris de Almeida If AsyncContext cannot be scheduled outside of day 2, could it be at least moved to the morning? I can try to find some time, the earlier the better.

[15:36:05.0766] <nicolo-ribaudo>
Looking at the constraints, it could be swapped (together with the R&T topic, to make 60 mins) with Mark's topic

[15:37:45.0934] <Chris de Almeida>
moved to day 1 am

[15:40:19.0273] <Chris de Almeida>
sorry, I missed that you were also a presenter on that topic


2025-04-14
[20:32:39.0765] <jschoi>
FYI: A late-breaking pull request has been opened for Observables with slides. 
https://github.com/tc39/agendas/pull/1846, https://docs.google.com/presentation/d/1i5_zneksrU7i7ZHcl5EQRzUHGkmXRIQKd-bLfrPRNXY/edit?usp=sharing

[06:51:05.0574] <ryzokuken>
@room starting in 10 minutes!

[07:12:07.0945] <Jesse>
please add yourself to the attendees list in the doc if you're here!

[07:12:38.0299] <Jesse>
(I'm not exactly a newbie when taking notes, but I don't know everyone's abbreviation 100%, I usually go to the attendee list when I'm unsure)

[07:12:49.0595] <dminor>
Question about the next meeting, are we confident enough that A Coru√±a will be in person that delegates can start making travel plans?

[07:13:45.0621] <Michael Ficarra>
it's easier to just keep https://github.com/tc39/notes/blob/main/delegates.txt open

[07:14:22.0674] <Michael Ficarra>
I've already booked my travel üò¨

[07:14:36.0460] <ryzokuken>
yes

[07:15:12.0802] <ryzokuken>
sorry I have no idea why it seemed unclear on the chairs' end: this is most certainly a confirmed meeting, please feel free to book travel

[07:15:33.0476] <ryzokuken>
the interest survey was sent out earlier than usual

[07:16:29.0048] <Michael Ficarra>
it seems weird to have a domain-agnostic "structured data" TC

[07:16:46.0286] <littledan>
tell that to TC49, "programming languages"

[07:16:56.0482] <Michael Ficarra>
I imagine it would require participation from experts in each of the respective (and disparate) domains

[07:17:18.0986] <littledan>
it would, yes. We won't fully found it if we don't get those experts, but initial discussion with the open source communities tends positive

[07:17:22.0680] <Michael Ficarra>
yeah, that's weird and obviously too broad

[07:17:42.0738] <littledan>
well... it's just normal. We also feed into ISO/IEC JTC1 SC22, which is also programming languages...

[07:17:55.0484] <littledan>
note that this TC proposal hasn't been announced publicly

[07:18:03.0865] <littledan>
(at Ecma's request)

[07:18:17.0377] <Michael Ficarra>
I guess you'll have separate TGs that basically don't overlap at all?

[07:21:22.0236] <shu>
what is the upshot of ecma involvement in C#, if that's an analogy here?

[07:22:00.0002] <jschoi>
I‚Äôve been excited about this initiative ever since I heard about it last plenary. 

[07:22:42.0345] <littledan>
the development of C# takes place in https://github.com/dotnet/csharplang yet we standardize it in TC49 later

[07:22:59.0470] <littledan>
TC39's model of doing development in committee is just one possible model, which some TCs follow and others don't

[07:23:01.0090] <shu>
what does one get out of the standardization in TC49

[07:23:52.0324] <Michael Ficarra>
maybe obscure government requirements?

[07:24:00.0987] <littledan>
I don't know much about C#, but for CycloneDX and JSON Schema, there's also need to normatively reference things from other specs, and we've also seen in CycloneDX that creating a standards committee can attract engineering effort to do detailed reviews which just weren't happening on the open source side alone

[07:24:58.0937] <littledan>
I'm very hopeful that we'll get this last sort of value out of the JSON Schema effort, and also that it will help people rally around this version

[07:25:46.0831] <littledan>
yeah but there's also proposed to be a "methodology" TC to find common requirements for such languages and schemas (schemata?)

[07:33:40.0883] <jschoi>
> ECMA404 Status Updates (15m)
> 15m

[07:33:52.0650] <jschoi>
> 15m

[07:34:21.0362] <jschoi>
* It always amuses me how fifteen minutes are allowed to Chip‚Äôs ‚Äúupdate‚Äù.

[07:35:18.0327] <Chris de Almeida>
oh, the agenda numbers for the boilerplate stuff should probably get updated. on the schedule and TCQ it is `1m`

[07:35:49.0284] <Aki>
when i was handling scheduling I used it as agenda timeslot breathing room

[07:36:44.0357] <Steve Hicks>
Chris de Almeida: Not sure what the procedure is or if I'm too late, but I can loosen my constraint to include availability the first hour of Day 4, which if we can swap the two topics that morning would unblock all constraints for Disposable AsyncContext.

[07:37:35.0012] <jschoi>
ü´Å 

[07:42:18.0127] <Chris de Almeida>
ok, we'll see what we can do.  please submit a PR to the agendas repo to update your constraint  üôÇ 

[07:58:07.0218] <Michael Ficarra>
I agree with @shuyuguo:matrix.org: Nicol√≤ is really good at giving clear presentations

[08:06:58.0541] <shu>
i still don't understand mark's concern

[08:07:04.0305] <shu>
it's the promises themselves escaping?

[08:07:10.0214] <shu>
it doesn't seem like a performance thing he's worried about

[08:07:33.0539] <Michael Ficarra>
if a value escapes 262 via a host hook, I consider it accessible to user code

[08:08:12.0266] <shu>
what is the problem in this case if this promise becomes accessible to user code?

[08:08:43.0190] <Michael Ficarra>
no idea

[08:10:32.0913] <littledan>
I'm not sure what Mark meant by "Mathieu will be present at the plenary"--this is the plenary

[08:10:43.0458] <littledan>
more note-takers would be nice!

[08:13:11.0017] <Michael Ficarra>
I understood it as "at some other point during plenary, but not now"

[08:13:40.0377] <Chris de Almeida>
yeah I think he expected him to be here, but is not currently for whatever reason

[08:15:28.0755] <shu>
did he say V8 already does this? sweet

[08:19:42.0197] <Aki>
could the transcriber not be adding all the newlines? 

[08:19:55.0232] <Aki>
or is that a technical constraint for some transcribers but not others?

[08:19:55.0829] <littledan>
we could interrupt the meeting to ask them

[08:20:05.0974] <littledan>
yeah some transcribers have more broken setups than others

[08:20:09.0764] <ryzokuken>
should I?

[08:20:12.0465] <littledan>
and asking them to change it usually leads to confusion on their part

[08:20:16.0838] <littledan>
maybe we should do it anyway?

[08:20:25.0847] <littledan>
we also have some quality variability; this transcriber seems not as good as others

[08:20:43.0811] <littledan>
but we can't tell the person "be better"; we can just tell the company "transcription was good at this time and bad at that time"

[08:21:03.0660] <littledan>
sure, and also say that they can ask for people to go more slowly or for clarification

[08:21:12.0104] <ryzokuken>
okay

[08:21:29.0035] <ryzokuken>
I'll interrupt the presentation after this slide

[08:22:55.0831] <ryzokuken>
let us know if issues persist

[08:22:57.0422] <littledan>
let's write an email to the company. Ujjwal, do you have their contact?

[08:23:02.0842] <ryzokuken>
during the break we could email them

[08:23:04.0280] <ryzokuken>
yeah

[08:23:15.0307] <Jesse>
no notes atm?

[08:23:19.0820] <littledan>
let's also tell them about this quality variability

[08:23:22.0136] <Jesse>
nvm

[08:23:29.0176] <ryzokuken>
are they back Jesse ?

[08:23:31.0592] <Jesse>
yes

[08:23:34.0690] <ryzokuken>
great

[08:24:04.0508] <littledan>
they seem increasingly delayed

[08:24:15.0121] <littledan>
this is a technical issue that they have had previously and fixed...

[08:24:29.0361] <littledan>
eh maybe not so far behind

[08:25:53.0864] <nicolo-ribaudo>
dminor: Could we get to your point at the end of the presentation? (there are still a couple slides not about use cases)

[08:26:05.0552] <nicolo-ribaudo>
* dminor: Could we get to your point at the end of the presentation? (there are still a couple slides not about use cases, specifically about the web integration)

[08:26:17.0823] <dminor>
Ok, sorry, I thought everything had been presented

[08:28:13.0703] <littledan>
To note takers: you can edit the notes to make everything more clear; they are very inaccurate and have a lot of errors. If you put in complete sentences that get across the point, that's better than nonsensical words that might be closer to what was actually said.

[08:35:15.0740] <nicolo-ribaudo>
shu Imagine you have two separate functions: one that takes a callback, and another to actually run the callback taken by the first one.

Old mental model: the context is propagated from the one that takes the callback
New mental model: the context is propagated from the one that runs the callback

[08:35:44.0301] <shu>
that part i got, but i don't understand how the new mental model works with the setTimeout example Andreu gave

[08:35:58.0384] <shu>
how can the new mental model work for setTimeout if the timeout callback isn't the one that captures the AsyncContext?

[08:37:06.0957] <nicolo-ribaudo>
setTimeout both takes the callback, and is the API that you call to ask the browser to at some point run that API. It flows across the awaits, rather than together with the callback

[08:38:52.0326] <ryzokuken>
> When we switched to the next writer, I see that they do not have the correct template in place. I have sent a note off, but she may not see that until this block is completed. I will make sure she has the correct setup in place for the next session.

[08:39:19.0432] <littledan>
that's their response?

[08:39:30.0238] <ryzokuken>
no they emailed me first

[08:39:39.0258] <ryzokuken>
I CC'd you on my response

[08:42:19.0463] <Chris de Almeida>
what's ironic is that Ujjwal's email contains excessive linebreaks üòÑ 

[08:43:01.0991] <ryzokuken>
wait really? it's just two lines total üòõ 

[08:43:13.0297] <ryzokuken>
and my name I guess that's a third line

[08:43:54.0192] <Chris de Almeida>
on my client it's 4 lines 

[08:44:21.0285] <ryzokuken>
oh I guess it's trying to wrap to a certain character limit

[08:52:25.0382] <littledan>
For more on the web integration for AsyncContext: https://github.com/tc39/proposal-async-context/blob/master/WEB-INTEGRATION.md

[08:53:01.0260] <littledan>
For more testimonials from frontend frameworks: https://github.com/tc39/proposal-async-context/blob/master/FRAMEWORKS.md

[08:58:21.0424] <ptomato>
shu: issues that I mentioned: https://github.com/tc39/proposal-intl-era-monthcode/issues/32, https://github.com/tc39/proposal-intl-era-monthcode/issues/30, https://github.com/tc39/proposal-intl-era-monthcode/issues/27, plus various bikeshedding threads about updating the era codes provided by CLDR

[09:17:42.0769] <ljharb>
oof, hard wraps bad

[09:18:21.0875] <ryzokuken>
not my client! I get wrapping while typing and no wrapping while viewing personally.

[09:21:48.0199] <Aki>
Regular reminder to provide Summary and Conclusion in notes. Protip: your summary is generally going to be the summary of what you presented. That means in theory you should be able to write it at the same time you write your slides.

[09:21:48.0948] <Chris de Almeida>
the original email sent was not wrapped.  your response wrapped both the original email in the chain and your new one...  ü§∑

[09:22:57.0225] <jschoi>
I can see the point of https://sembr.org/ at least in version control.

[09:23:25.0550] <ryzokuken>
I love the idea from ptomato where you put the proposed summary as your last slide

[09:23:41.0683] <ptomato>
I didn't do it this time, sorry

[09:23:46.0052] <ryzokuken>
saves you time and you get it 80% or more correct anyway

[09:23:58.0136] <ryzokuken>
you're too cool for it already /s

[09:24:22.0257] <ryzokuken>
but yeah I actually stole the idea from your previous presentations because it made so much sense

[09:30:17.0704] <ljharb>
yeah i'd never heard of that before until tab referenced it in a pattern matching call.

i love hard breaking after the end of a sentence - but i think hard breaking in the middle of a sentence is too arbitrary

[09:30:42.0837] <ljharb>
that really only works for updates tho, right, since you can't safely predict the outcome of advancement?

[09:31:23.0910] <ryzokuken>
skip the advancement but you can still summarize the contents of your presentation 

[09:32:15.0430] <littledan>
yes and the summary should also include the main discussion points that people brought up

[09:32:44.0393] <littledan>
well I like how ptomato put his hoped-for conclusions on consensus in there too

[09:33:46.0854] <ryzokuken>
this but it's a "good ending/bad ending/pacifist ending" type meme video

[09:36:26.0105] <jschoi>
When moving to the next agenda item, should it be a point of order when the second-to-most-recent agenda item has no main discussion points written yet? This would force all agenda items except the most-recent item to have discussion points written down.

[09:43:27.0360] <Michael Ficarra>
please no

[09:43:39.0775] <ljharb>
we've talked about that before, but the general feeling was that that'd be too disruptive and slow down plenary too much

[09:43:48.0410] <Michael Ficarra>
sometimes you're too busy participating in the next topic but can get to it at break or after the meeting

[09:44:03.0596] <Michael Ficarra>
we just don't need hard rules here

[09:44:04.0668] <Chris de Almeida>
_<insert joke about stop coercing things>_

[09:44:22.0876] <ljharb>
the only thing that *must* be written down imo is the outcome of a decision if one is made, the rest is just very very nice to have

[09:44:37.0614] <ljharb>
* the only thing that _must_ be written down imo is the outcome of a decision if one is made (or not made), the rest is just very very nice to have

[09:44:52.0440] <Chris de Almeida>
we have, in the past, paused to actually do it, but we had mixed results and some folks very much did not like it

[09:45:38.0231] <Aki>
false. accurate minutes have to be produced.

[09:45:47.0285] <jschoi>
It could be‚Ä¶a point of order at the next day‚Äôs meeting. (This would not work for the last day‚Äôs meeting.)

[09:46:07.0462] <ljharb>
but they don't have to be verbatim, such that we'd need to pause the meeting to get them down, do they?

[09:46:18.0787] <ljharb>
also isn't the transcriptionist mostly covering that?

[09:46:33.0747] <Aki>
no

[09:46:37.0919] <Aki>
they do not

[09:46:41.0204] <Aki>
no

[09:46:46.0042] <Aki>
the notes are not the minutes

[09:46:57.0522] <Aki>
the minutes are a summary of what was discussed

[09:47:11.0537] <ljharb>
ah ok

[09:49:22.0687] <jschoi>
https://github.com/tc39/notes/blob/af9ce7e48fbb35190b24a042c9b6172ce5c8a1f5/meetings/2024-12/december-04.md#speakers-summary-of-key-points


[09:49:24.0173] <jschoi>
What did the minutes say for this one?

[09:50:06.0973] <jschoi>
Were merely the ‚ÄúConclusions‚Äù (which, unlike the Speaker‚Äôs Summary, were filled out) used?

[09:55:40.0069] <littledan>
no because almost all of the time, none of this is written until after the meeting, but it does get written

[09:55:59.0033] <littledan>
the point of order should be more about whether we have consensus and such

[09:56:19.0528] <littledan>
people generally don't end up wanting to dictate a good summary during the meeting (when they do dictate it, it doesn't tend to be good enough)

[09:57:04.0540] <littledan>
the most helpful thing would be if more people helped with fixing up the notes, both during and after the meeting

[09:57:24.0337] <littledan>
the goal is to be coherent and intelligible and make the important points -- it's OK if you change words to make this happen

[10:00:05.0120] <jschoi>
‚ÄúYou are an amazing technical copyeditor. The following input text is transcribed notes from a technical standards meeting, formatted in Markdown. Reword the dialogue to be coherent, intelligent, and make the important points. It‚Äôs OK if you change words to make this happen. Do not change the acronyms at the beginning of each paragraph. Do not change the headings. <input-text>‚Ä¶‚Äù ü•≤

[10:00:47.0763] <Aki>
actually _not allowed_ believe it or not

[10:00:54.0309] <Aki>
ISO is very clear about this

[10:00:56.0803] <ljharb>
shitposting is for tdz :-p

[10:05:26.0659] <littledan>
the new notetaker is good again!

[10:06:50.0417] <ljharb>
* yeah i'd never heard of that before until tab referenced it in a pattern matching call last year.

i love hard breaking after the end of a sentence - but i think hard breaking in the middle of a sentence is too arbitrary

[10:33:35.0989] <bakkot>
kinda like the idea of having a conventional `.composite()` method which gives you a composite representation of your object

[10:34:16.0189] <bakkot>
when your object is conceptually immutable like Temporal objects then it could cache the result internally

[10:34:50.0212] <Michael Ficarra>
does a chair wanna shift my topics down so they're back-to-back? /cc @softwarechris:matrix.org @usharma:igalia.com

[10:34:54.0334] <jschoi>
bakkot: Did you mean to put a summary about #2600 / Array.fromAsync into the ‚ÄúNormative: Mark sync module evaluation promise as handled‚Äù section?

[10:35:00.0010] <bakkot>
oops

[10:35:12.0929] <Michael Ficarra>
protocol please!

[10:35:28.0634] <bakkot>
fixed

[10:35:30.0426] <ryzokuken>
wait where's your next topic

[10:35:40.0808] <bakkot>
Michael Ficarra: even if there's a protocol it should have a conventional string name

[10:35:55.0022] <Michael Ficarra>
@usharma:igalia.com I mean TCQ

[10:35:56.0892] <bakkot>
but yeah a protocol that `Composite` used could be fun

[10:36:10.0179] <ryzokuken>
oops sorry I moved Kevin's

[10:36:17.0362] <bakkot>
so you look up the symbol key first and if it's there you use that and if not you do the factory function thing

[10:36:21.0088] <ryzokuken>
done

[10:36:26.0774] <ryzokuken>
sorry for the confusion

[10:36:40.0947] <Michael Ficarra>
thanks

[10:37:15.0116] <Michael Ficarra>
TCQ topics should have a "push me lower in the queue" button

[10:39:09.0144] <Chris de Almeida>
https://github.com/bterlson/tcq/issues/8

[10:39:46.0306] <Michael Ficarra>
https://github.com/bterlson/tcq/issues/69

[10:40:15.0814] <Michael Ficarra>
not edit/remove, just move down, it's different

[10:40:34.0181] <Chris de Almeida>
there's also https://github.com/bterlson/tcq/issues/16

[10:41:08.0508] <Chris de Almeida>
I wonder how that TCQ reloaded project is going ü§î

[10:41:59.0709] <Michael Ficarra>
it's a web app, how hard could it possibly be?

[10:52:23.0241] <bakkot>
littledan re "ways to avoid people using these for deep immutable structures", not having syntax will go a long way I think

[10:52:51.0439] <littledan>
I agree, but I also don't know what the bad part is about the possible future evolution that Ashley mentioned

[10:53:07.0865] <littledan>
(I understand "this makes canonicalization unworkable")

[10:54:45.0639] <littledan>
I'm still wondering about the GC thing even if we don't allow them in WeakMaps and WeakRefs. Won't it still be hard to manage the interning table's memory, so you can collect unused things?

[10:56:49.0960] <littledan>
I don't think symbol sorting is a fatal flaw of canonicalization -- we can just ban unregistered symbol keys, like R&T did.

[10:57:35.0142] <bakkot>
Michael Ficarra: your point about "this should use -0 because it's observable" is directly contradicted by your immediately preceding "we don't need to sort because it's only Composite.equals not actual equality"

[10:57:43.0342] <bakkot>
* Michael Ficarra: your point about "this should use SameValue because it's observable" is directly contradicted by your immediately preceding "we don't need to sort because it's only Composite.equals not actual equality"

[10:57:59.0154] <ljharb>
we don't need to sort because the order in which the keys are compared doesn't matter

[10:58:19.0608] <bakkot>
if we don't care about key order for use of set/map/etc, even though it's observable, then we _definitely_ don't have to care about -0 vs 0 in the same context, even though it's observable

[10:58:58.0145] <ljharb>
it's not about ordering for me for -0, it's that you can't get a `-0` key *out* of a Map or value out of a Set, but you can get it out of a Composite.

[10:59:05.0324] <bakkot>
sorry, was having trouble with my mic

[10:59:13.0324] <bakkot>
you can get the ordered keys out too

[10:59:30.0391] <jschoi>

eemeli: Your video is on, just in case this was accidental.

[10:59:59.0580] <bakkot>
* if we don't care about key order for use in set/map/etc, even though it's observable, then we _definitely_ don't have to care about -0 vs 0 in the same context, even though it's observable

[11:00:07.0316] <littledan>
we had such a big fight about people insisting that R&T use SameValueZero, not SameValue, and this made canonicalization and implementations more complex, which was a big factor in the proposal not moving forward. I'm kind of astounded that, after that, we're talking about going in the other direction, when nothing has changed with respect to -0 from that previous proposal.

[11:00:12.0433] <ljharb>
sure. but you can't ever have a `-0` key in a Map, or a `-0` value in a set

[11:00:18.0565] <bakkot>
ok?

[11:00:29.0758] <ljharb>
but you can get a `-0` key out of a Composite

[11:00:30.0231] <bakkot>
I don't know why that implies anything about whether this should use SameValue or SameValueZero

[11:01:04.0574] <littledan>
we could also define canonicalization for Composites and drive things on that, but I don't see the point

[11:01:13.0369] <littledan>
* we could also define normalization in terms of +0 for Composites and drive things on that, but I don't see the point

[11:01:21.0023] <bakkot>
we definitely don't want to canonicalize -0 in composites

[11:01:33.0025] <littledan>
I mean, we could do it just when used as Map/Set keys

[11:01:37.0546] <littledan>
but yeah I agree, that'd be silly

[11:01:45.0228] <ljharb>
to be clear there's at least 2 of us that think that Map/Set using SameValueZero was a mistake, and that we shouldn't further that mistake here

[11:02:14.0212] <littledan>
we should be establishing such understandings of mistakes by consensus, like we did via @@species. Other people feel the opposite way, I think.

[11:02:40.0111] <ljharb>
that would be ideal, sure, but each of us is allowed to hold those kinds of beliefs and use them to inform our positions

[11:02:44.0967] <ljharb>
* that would be ideal, sure, but each of us is allowed to hold those kinds of beliefs and use them to inform our positions even sans consensus

[11:03:45.0164] <Justin Ridgewell>
Isn't it weird that `new Set([0]).has(-0)` and `new Set([Composite(0)]).has(Composite(-0))` would be different?

[11:03:52.0867] <bakkot>
it is a little weird

[11:04:04.0318] <bakkot>
* it is a lot weird

[11:04:20.0094] <ljharb>
a composite is a brand new thing

[11:04:39.0137] <nicolo-ribaudo>
Fyi Mark, `let x = {}; new Object(x) === x` is true

[11:04:47.0730] <bakkot>
the point of a composite is that it _composes_ multiple values for use in Sets etc

[11:05:00.0038] <bakkot>
it should not also change how those things are compared in Sets

[11:05:11.0966] <ljharb>
(also `Promise(promise) === promise` for any promise)

[11:05:14.0378] <ljharb>
* (also `Promise.resolve(promise) === promise` for any promise)

[11:05:33.0025] <ljharb>
composing IS changing that

[11:05:39.0179] <bakkot>
no it isn't

[11:05:56.0667] <Michael Ficarra>
it's not, you've been fooled by the coercion in the example

[11:06:16.0827] <bakkot>
from a users point of view the fact that the coercion happens is irrelevant

[11:06:35.0860] <littledan>
maybe this should be part of our process discussion

[11:06:37.0662] <Michael Ficarra>
it's not because you can look at the Set and see that it does not in fact have `-0`

[11:06:37.0731] <bakkot>
the way users can and do think of this is that Set/Map compare `-0` as equal to `0`

[11:06:47.0484] <ljharb>
that's a strange statement from "stop coercing things" :-p

[11:06:51.0700] <bakkot>
something which ~ no people do

[11:07:08.0060] <ljharb>
if you want to run a topic on it sure, but it's entirely distinct from the consensus topic, if that's what you mean

[11:07:14.0281] <Michael Ficarra>
if you want an actual understanding of what's going on, you do, and that's who we're talking about right now

[11:07:16.0701] <ljharb>
* if you want to run a topic on it in a future plenary sure, but it's entirely distinct from the consensus topic, if that's what you mean

[11:07:35.0346] <bakkot>
no, we're talking about the behavior of `new Set([Composite(0)]).has(Composite(-0))`

[11:08:05.0465] <Michael Ficarra>
that is a statement that appears to me to be *obviously false*

[11:08:11.0773] <Michael Ficarra>
like, look, they're different things

[11:08:14.0327] <bakkot>
just you though

[11:08:40.0990] <Michael Ficarra>
they're symbolically different!

[11:08:47.0385] <bakkot>
who cares?

[11:08:55.0742] <bakkot>
`0 === -0` and Composites are for composing equality for Sets

[11:09:01.0632] <Michael Ficarra>
something weird has to happen to make them the same

[11:09:12.0575] <bakkot>
the weird thing is that `0 === -0`

[11:09:17.0925] <bakkot>
but that thing has already happened

[11:09:33.0732] <shu>
yeah the weird thing is a well known cross-language, widely known IEEE fact?

[11:09:36.0736] <bakkot>
`Composite({ x: 0, y: 1 })` and `Composite({ y: 1, x: 0 })` are also symbolically different

[11:09:51.0996] <bakkot>
but as you very correctly point out, they should still be considered equal for purposes of `Set`

[11:09:58.0434] <bakkot>
because the point of Composites is to compose equality

[11:10:03.0158] <bakkot>
not to also do some weird key ordering stuff

[11:10:22.0681] <ljharb>
right, but what kind of equality. we have 4 i think

[11:10:28.0643] <ljharb>
and the one maps and sets use is the weird one

[11:10:30.0642] <bakkot>
SameValueZero

[11:10:33.0926] <bakkot>
the kind Sets use

[11:10:37.0935] <littledan>
Michael Ficarra: What did you think about all of this when we were discussing R&T previously?

[11:10:39.0966] <ljharb>
right but that's the weird one.

[11:10:52.0448] <bakkot>
we're talking about Sets

[11:10:58.0671] <bakkot>
and other things which already use SameValueZero

[11:10:58.0758] <littledan>
also ljharb I thought you wanted this behavior too?

[11:11:01.0417] <ljharb>
R&T was syntax at that point

[11:11:04.0784] <ljharb>
* R&T was syntax at that point, this is different

[11:11:13.0101] <littledan>
What does it being syntax change?

[11:11:21.0025] <littledan>
you didn't need to use R&T syntax to use the feature

[11:11:22.0694] <ljharb>
composites and R&T are different beasts, i'm not sure why those discussions dictate these

[11:11:31.0162] <ljharb>
sorry, not syntax, primitives

[11:11:53.0567] <littledan>
ah OK thanks for clarifying

[11:11:58.0367] <littledan>
so... why does that change what's appropriate?

[11:12:13.0448] <littledan>
Not saying the discussions dictate it, just trying to follow the logic

[11:12:24.0252] <Michael Ficarra>
these have identity and we're talking about a built-in function, not SameValue or strict equality as applied to them

[11:12:32.0785] <ljharb>
R&T were Map and Set analogues. Composite isn't.

[11:12:49.0486] <ljharb>
so it's not so clear-cut that they match what Map and Set do.

[11:13:04.0434] <ljharb>
* so it's not so clear-cut that they must match what Map and Set do.

[11:13:22.0338] <littledan>
what are Map and Set analogues?

[11:13:24.0486] <bakkot>
the whole point of Composite is for use in Map and Set

[11:13:58.0748] <littledan>
OK, could you trace the next step in the logic here for how it connects to what Map and Set should do?

[11:14:13.0086] <bakkot>
(and things like `includes` which also use SameValueZero)

[11:14:34.0463] <Michael Ficarra>
@bakkot:matrix.org there's nothing like `includes`, it's the only thing in the spec that uses it

[11:14:42.0325] <ljharb>
yeah includes is also weird :-/ `[0].includes(-0)` is obviously wrong, because they're different things

[11:14:45.0515] <Michael Ficarra>
again, SameValueZero is *weird*

[11:15:02.0443] <ljharb>
it's also very very easy to *get* SameValueZero semantics if you want them; it's very very hard to *unget* them

[11:15:06.0300] <bakkot>
it is obviously right because `-0 === 0`

[11:15:11.0010] <ljharb>
* it's also very very easy to _get_ SameValueZero semantics if you want them; it's very very hard to _unget_ them if you don't

[11:15:18.0555] <ljharb>
sure, so `[NaN].includes(NaN)` must be false then?

[11:15:42.0837] <ljharb>
the obviousness isn't about `===` it's about what the literal values are

[11:15:46.0873] <bakkot>
no because if you're asking if something includes NaN, and it does, then the answer is "yes" not "no"

[11:16:02.0345] <ljharb>
and `[0]` doesn't include a negative zero

[11:16:10.0143] <ljharb>
the question is using "is" semantics, not "===" semantics

[11:16:23.0645] <bakkot>
but it does include a zero and -0 is a zero

[11:16:35.0754] <bakkot>
anyway, this ship has sailed

[11:16:38.0676] <ljharb>
* and `[0]` doesn't include a negative zero, it only has a positive zero in it

[11:16:46.0848] <bakkot>
I don't care to convince you that Map and `includes` have the right semantics

[11:17:00.0697] <ljharb>
for the existing things ofc. i'm explaining why they're weird and shouldn't be followed for new things

[11:17:03.0109] <bakkot>
only that they do have the semantics that they do, and that the point of Composite is to compose existing things not change how they work

[11:17:18.0047] <ljharb>
and `-0` and `0` are observably different existing things.

[11:17:31.0104] <ljharb>
i don't see Composites as only for Map and Set, maybe that's the difference

[11:17:43.0470] <ljharb>
it's not `CollectionComposite` or something, it's "compose multiple values"

[11:18:00.0861] <bakkot>
`Composite({ x: 0, y: 1 })` and `Composite({ y: 1, x: 0 })` are also observably different

[11:18:18.0452] <ljharb>
* it's not `CollectionComposite` or something, it's "compose multiple values", which is much broader

[11:18:19.0196] <Michael Ficarra>
Map and Set are not precedent for SameValueZero because 1) they don't use it and 2) there is no observable difference between the cases where they would use them

[11:18:37.0073] <bakkot>
compose for what purpose? to use as a key in a Map or Set

[11:18:39.0328] <kriskowal>
My intuition is that if 0 and -1 are not meaningfully different in the relevant domain, 0n is right there.

[11:18:44.0351] <bakkot>
if you aren't putting them in a Map or Set you can just use a regular object

[11:18:57.0210] <Michael Ficarra>
not via Composite.equals they're not

[11:19:14.0324] <ljharb>
not if i want trivial equality checks like Composite.equal

[11:19:22.0314] <kriskowal>
* My weak intuition is that if 0 and -1 are not meaningfully different in the relevant domain, 0n is right there.

[11:19:35.0265] <bakkot>
well, neither are `Composite({ x: -0 })` and `Composite({ x: 0 })`

[11:20:05.0411] <Michael Ficarra>
we have a choice there, and I say those should be different

[11:20:14.0530] <bakkot>
your argument is circular

[11:20:24.0632] <Michael Ficarra>
we have a completely unconstrained choice, we should not choose to go down the SameValueZero route

[11:20:28.0696] <bakkot>
you say they should be different because they're observably different because you want them to be different

[11:20:45.0107] <bakkot>
* you say they should be different because they're observably different via `Composite.equals` because you want them to be different

[11:20:47.0131] <Michael Ficarra>
yes! I want them to be different!

[11:21:11.0670] <bakkot>
ok but you can't make the argument based on `Composite.equals`

[11:21:22.0746] <bakkot>
because you are arguing what the behavior of `Composite.equals` should be

[11:22:08.0128] <bakkot>
my point is that we all agree that `Composite({ x: 0, y: 1 })` and `Composite({ y: 1, x: 0 })` are observably different, but that this does not imply they should be different for the purposes of `Composite.equals`

[11:22:29.0475] <bakkot>
so "these valeus are observably different" is not sufficient to argue that things should be different from `.equals`

[11:22:47.0727] <Michael Ficarra>
I am not making the argument base on Composite.equals, I am saying that 1) for composites, we need not take into account their SameValue or strict equality when deciding whether keys need to be observably in the same order for Composite.equals, and 2) all non-Composite values should be compared using SameValue because there's nothing else constraining us and that's the best choice

[11:22:50.0789] <bakkot>
* so "these values are observably different" is not sufficient to argue that things should be different from `.equals`

[11:23:26.0311] <bakkot>
the thing constraining us is how Map and Set already work

[11:23:35.0882] <Michael Ficarra>
it's not, and I've explained that quite clearly

[11:23:42.0848] <ljharb>
the way ashley described the argument to `Composite` to me is that the object is just a named list of positional arguments - it could also be `Composite(0, 1)` or `Composite([0, 1])` and be conceptually the same

[11:23:43.0527] <bakkot>
no

[11:23:45.0907] <bakkot>
you have asserted otherwise

[11:23:47.0737] <bakkot>
and yes I know they do not mechanically work that way anymore

[11:23:55.0594] <ljharb>
meaning that conceptually the top-level order is irrelevant for comparison

[11:23:58.0648] <bakkot>
but again, this is completely irrelevant for users

[11:24:17.0789] <ljharb>
for some number of them. but we're users too.

[11:24:21.0838] <bakkot>
for users, you think of Map and  Set as using SameValueZero

[11:24:27.0416] <bakkot>
we even added an editorial note about that

[11:24:28.0033] <Michael Ficarra>
it's unobservable which comparison operation Maps and Sets use! how can it be precedent?

[11:24:30.0379] <ljharb>
and Composite isn't Map or Set.

[11:24:32.0688] <bakkot>
because this is the correct mental model for users to have

[11:24:46.0746] <ljharb>
then that's probably a core point of disagreement

[11:25:39.0916] <shu>
are there key sorting concerns with -0, or just anonymous symbol keys?

[11:25:48.0835] <bakkot>
just anonymous symbol keys

[11:26:02.0105] <ljharb>
that concern only applies if equality is order-dependent, tho, yes?

[11:26:02.0738] <bakkot>
anonymous or same-named

[11:26:16.0612] <Michael Ficarra>
@shuyuguo:matrix.org I don't think anyone wants keys to be sorted, either for comparison or for enumeration

[11:26:24.0435] <bakkot>
well, Shu wanted canonicalization

[11:26:28.0195] <shu>
am i anyone

[11:26:29.0655] <bakkot>
and you can't canonicalize without ordering

[11:26:40.0490] <shu>
i don't think i _want_ ordering per se

[11:26:43.0468] <Michael Ficarra>
ah, fair, I thought we had given up on that

[11:26:46.0659] <shu>
but i also don't care about global communication channel here

[11:27:07.0822] <shu>
so if i strengthen my position on canonicalization we might need to find another way to compromise on that, or be at an impasse

[11:27:11.0530] <ljharb>
so wait, did composite not get stage 1?

[11:27:18.0210] <shu>
it did

[11:27:23.0691] <shu>
these aren't stage 1 concerns afaict?

[11:27:31.0486] <ljharb>
oh ok cool, it's not in the notes yet

[11:27:33.0687] <ljharb>
correct

[11:29:05.0196] <bakkot>
Michael Ficarra ^

[11:29:29.0162] <shu>
man f'ing matrix

[11:29:31.0534] <shu>
can't see the image

[11:29:38.0217] <ljharb>
yes that's the one place

[11:29:46.0276] <bakkot>
see the right hand side

[11:29:52.0328] <bakkot>
where we say "as in Map and Set methods"

[11:29:55.0176] <ljharb>
Map and Set *could* be specified to use it, instead they canonicalize to `+0`, but they're semantically equivalent

[11:30:01.0486] <bakkot>
specifically we did this because it is how users understand it to work

[11:30:06.0830] <Michael Ficarra>
yeah like `has`

[11:30:07.0269] <bakkot>
and it is how users _should_ understand it to work

[11:30:10.0410] <ljharb>
(fwiw i don't think it's relevant that Map/Set aren't written to use it)

[11:30:21.0387] <ljharb>
* (fwiw i don't think it's relevant that Map/Set aren't written to use the AO, they still use SameValueZero)

[11:30:25.0535] <ljharb>
* (fwiw i don't think it's relevant that Map/Set aren't written to use the AO, they still use SameValueZero conceptually)

[11:31:36.0287] <ljharb>
did we even debate that? it was in es2016, and it was only deferred from 2015 for mootools - i suspect the choice was made from the same (imo wrong) intuition that led to Map and Set using it

[11:31:58.0993] <bakkot>
it's a picture of the description of Number::SameValueZero where we say it is "to test for value equality, ignoring the difference between +0 and -0, as in Array, Map, and Set methods"

[11:32:03.0172] <ljharb>
iow i think all 3 of those places were chosen at the same time, pre-ES6, and thus invented a new kind of equality

[11:32:19.0190] <waldemar>
That capybara likes to live dangerously

[11:32:21.0554] <bakkot>
they invented a new, better kind of equality

[11:32:39.0546] <bakkot>
`===` is almost the thing you want, except for `NaN`

[11:32:44.0004] <littledan>
I think the first thing to resolve is whether the overall model that Ashley put out there is a good one (Shu raised doubts which we need to work through), and then the SameValue vs SameValueZero question is a smaller one within that.

[11:32:55.0796] <littledan>
so I'd really like to hear more concerns about that broader question

[11:33:29.0072] <waldemar>
* That capybara (on the slide) likes to live dangerously

[11:33:37.0436] <Michael Ficarra>
replaceability is the right kind of equality

[11:34:07.0727] <littledan>
this would only be met by identity-wise canonicalization as Shu proposed

[11:34:49.0431] <shu>
to repeat: my broader stage 1 question is how commital are people, really, about the keys vs immutable use case? big part of V8's performance feedback was contradictory performance expectations were in play. if you leave the design space flexible enough for a glorious immutable data future, then we're back in the same place

[11:35:17.0582] <shu>
* to repeat: my broader stage 1 question is how commital are people, really, about the keys vs immutable data use case? big part of V8's performance feedback was contradictory performance expectations were in play. if you leave the design space flexible enough for a glorious immutable data future, then we're back in the same place

[11:35:47.0520] <bakkot>
I personally would like to commit to the "composite key" case

[11:35:51.0604] <bakkot>
makes a lot of things simpler

[11:35:54.0162] <bakkot>
no prototypes, for example

[11:36:01.0967] <shu>
and my view is composite keys is cool w/ me. highly skeptical of immutable data

[11:36:08.0314] <littledan>
Queue: 1
Reply: this contradicts your previous topic
Kevin Gibbons
2
New Topic: Why not "new Composite()"?
Eemeli Aro (@mozilla)
3
New Topic: Should either lean in or out more; e.g. "Key" or "Record" rather than "Composite".
Eemeli Aro (@mozilla)
4
New Topic: +1 for stage 1 <EOM, won't be present when this is read>
Jordan Harband (@herodevs @tc39 )
5
New Topic: support stage 1 </end>
Chris de Almeida (@IBM)
6
New Topic: SpiderMonkey team supports Stage 1 <eom>
Daniel Minor (Mozilla Corporation)

[11:37:49.0338] <jschoi>
Invited experts can‚Äôt block; can they give support?

[11:38:11.0634] <shu>
to be frank, my read of ashley's answer on "in the future i'd like my keys and data to be one and the same" is champions aren't completely committed

[11:38:19.0706] <shu>
* to be frank, my read of ashley's answer of "in the future i'd like my keys and data to be one and the same" is champions aren't completely committed

[11:38:31.0143] <shu>
IME you do not design hash table keys to be the same as your data

[11:38:45.0685] <shu>
you need to do work to figure out what are the things you key on

[11:38:49.0430] <bakkot>
not writing a lot of Java huh?

[11:38:57.0957] <shu>
wow do they really do that?

[11:38:58.0088] <littledan>
yes definitely

[11:39:18.0560] <bakkot>
well, Java you define hash and equals and that is the normal way of things

[11:39:35.0619] <bakkot>
and you do that for your normal values

[11:39:39.0423] <Michael Ficarra>
on *everything*, it's ludicrous

[11:39:39.0843] <bakkot>
and then stick them in maps

[11:39:49.0744] <shu>
and you... just key on arbitrarily complex graph-of-objects?

[11:39:57.0747] <bakkot>
uh huh

[11:40:13.0083] <shu>
wtf

[11:40:24.0020] <shu>
what are they doing over there

[11:40:50.0568] <littledan>
I'd like to understand the implications better here

[11:41:26.0467] <rbuckton>
C# is similar, though you also have `IEqualityComparer`

[11:41:36.0479] <littledan>
I mean, how does this differ from keying off an arbitrarily long string?

[11:42:00.0858] <littledan>
(as Ashley explained, there are no cycles, and I guess ropes are dags in general too)

[11:42:07.0020] <shu>
it's what i was saying, but based on my priors that surely, given complex data, one would take care to figure out a _separate_ key structure so you don't walk your entire data on hash collisions, or you don't walk your entire data to compute the hash

[11:42:28.0547] <littledan>
right, agreed

[11:42:46.0077] <waldemar>
TCQ shuffling has been having issues today. My topic got deleted twice. I thought that was intentional and didn't want to add it a third time. MAH resurrected it.

[11:42:50.0682] <littledan>
but, if people just use one of these things as an immutable data structure and not as a key, what's the problem?

[11:43:33.0488] <shu>
oh, because how we implement and optimize the keys use case, which is about shallower DAGs with fewer objects, is very different with deeper DAGs with many objects

[11:43:40.0300] <shu>
and i think they're somewhat opposing

[11:43:47.0666] <Michael Ficarra>
I think maybe it was on purpose because we were running low on time at the end of that topic.

[11:43:50.0981] <shu>
you asked for specifics i had in mind other than canonicalization, and i don't at this time

[11:44:00.0082] <littledan>
yeah I want to dig into this opposition somehow

[11:44:00.0847] <shu>
* you (littledan) asked for specifics i had in mind other than canonicalization, and i don't at this time

[11:44:23.0472] <littledan>
like how this relates to long strings

[11:44:49.0391] <shu>
let me redirect it back to you, do you think canonicalization by itself isn't sufficiently convincing to make the proposal more inflexible?

[11:46:31.0239] <littledan>
I don't quite understand the case for canonicalization. I was wondering about writing a microbenchmark with sets and other affected operations to see how bad it is to add another case to the condition, when it's not taking.

[11:46:40.0086] <littledan>
* I don't quite understand the case for canonicalization. I was wondering about writing a microbenchmark with sets and other affected operations to see how bad it is to add another case to the condition, when it's not taken.

[11:47:18.0325] <shu>
it's not just maps and sets, but also all future algorithms and library designs, right?

[11:49:23.0366] <shu>
one facet of the "don't overload ===" concern from implementers was diffuse cost that make the feature not "pay as you go". this current direction imagines a future where the message to library authors and stdlib algorithms is, "the new === is === + Composite.equals". that future does not penalize _old_ code, which is great! but that future still does not bottleneck the cost to truly only users of Composites, if the new pattern is adopted at scale

[11:49:59.0506] <littledan>
well, I'm having some mental lack of creativity to figure out what future things it will affect. For example, it's not a factor in queues.

[11:49:59.0649] <shu>
that's what i'm thinking through. it is still a strictly better situation than the old one, tbc

[11:50:16.0729] <shu>
well, neither was === an issue in queues...

[11:50:22.0845] <littledan>
I guess in real-world performance, the oldest stuff matters the most

[11:50:43.0014] <littledan>
sure, queues is just an example of "I can't think of anything", maybe you can

[11:50:59.0716] <shu>
so the case for canonicalization is that it very explicitly bottlenecks the performance to the `Composite` constructor

[11:51:15.0257] <shu>
and seems to be a fine tradeoff to me if we truly believe the keys use case

[11:51:18.0473] <Ashley Claymore>
Note: you would only need to walk the entire data on hash collisions if every part of the tree was also a hash collision, as each node would have an individual hash

[11:51:38.0080] <bakkot>
yeah but you do need to do that in the "things are equal" case

[11:51:40.0875] <bakkot>
which comes up a lot

[11:51:47.0095] <shu>
(mark's global communication channel concern notwithstanding, that's a specific technical thing i have no comment on atm)

[11:52:07.0656] <nicolo-ribaudo>
With the captioners we are not using regexps on the notes anymore, right? I'm currently replacing manually a lot of "model"s with "module"s

[11:53:08.0636] <Ashley Claymore>
yeah, the equals case is always the slowest case.
Though you also need to walk the whole thing to canonicalize it.

[11:53:22.0395] <ryzokuken>
btw reflector for the next plenary is posted: https://github.com/tc39/Reflector/issues/558

[11:53:30.0848] <Ashley Claymore>
and you could canonicalize under the hood

[11:53:33.0732] <shu>
yeah, i'm not saying there is a better algorithm available

[11:53:37.0912] <shu>
it's about where that cost shows up

[11:53:49.0993] <Ashley Claymore>
yeah. I think it's a great point

[11:53:51.0711] <shu>
you can't canonicalize under the hood, that's very visible via object identity, no?

[11:54:00.0929] <Ashley Claymore>
I mean internally

[11:54:04.0694] <ryzokuken>
along with a link to the sign-up form within which includes some pretty important questions that would help us organize stuff so please check it out and sign-up if you plan to attend in person.

[11:54:07.0389] <shu>
not sure what you mean

[11:54:08.0327] <Ashley Claymore>
have a seperate pointer

[11:54:13.0282] <shu>
ah

[11:54:14.0088] <ryzokuken>
we'll add more details over the next few days

[11:54:53.0491] <nicolo-ribaudo>
Well ashley I hope for your discussion we didn't have any "model Records", because they have all been Ctrl+H'ed away

[11:55:55.0693] <bakkot>
even for the case of keys I am not convinced it makes sense to pay up front

[11:55:58.0251] <jschoi>
I did want Records for my data models.

[11:56:06.0931] <bakkot>
like `emptySet.has(Composite({ x, y, z }))`

[11:56:41.0346] <littledan>
We told them about this; they should be reflecting that; we should point them to this again and ask them to do better ryzokuken 

[11:57:02.0677] <bakkot>
many languages have composite keys for maps in some form (often through user-provided hash+equals functions) and I think ~ none of them use canonicalization

[11:57:24.0069] <littledan>
can you elaborate on this?

[11:57:24.0417] <bakkot>
so if we bill this as composite keys I think users will expect similar performance characteristics to those languages

[11:57:36.0290] <shu>
hm, i see. like python's tuples you're thinking of?

[11:57:40.0693] <littledan>
are there any particular examples you have in mind?

[11:57:42.0152] <bakkot>
or C++ maps

[11:57:48.0131] <bakkot>
or Java

[11:57:54.0870] <bakkot>
or C#

[11:57:58.0621] <shu>
C++ maps have fully hookable everything

[11:58:10.0534] <shu>
there's just no need to make that decision at the language level is my understanding

[11:58:25.0264] <shu>
but that siad, it's still a signal that popular stdlibs don't provide such functionality

[11:58:37.0018] <bakkot>
fair but the normal way I see people using a C++ map is to have hash and equals functions which compute those values on the fly

[11:58:54.0012] <bakkot>
and maybe cache the hash in the object, depending

[11:59:14.0024] <bakkot>
where "on the fly" means "when the functions are invoked called by the map"

[11:59:16.0219] <Ashley Claymore>
that's what the polyfill does, computes the hash on the first request for it

[11:59:16.0553] <bakkot>
* where "on the fly" means "when the functions are invoked by the map"

[12:00:01.0323] <littledan>
it sounds hard GC-wise to deal with canonicalization--how do you decide whether something is still relevant to include in your global table? I guess the values are all WeakRefs and then you sweep it for tombstones? I thought that would have its own cost.

[12:00:15.0132] <shu>
yeah, it'd be a weak table you'd have to sweep

[12:00:31.0874] <shu>
it has cost in a vaccuum, but it's "just another such table" since this pattern shows up all over the place in v8

[12:00:33.0024] <littledan>
weak by value though, right?

[12:00:33.0481] <shu>
and i imagine other engines

[12:00:37.0975] <shu>
weak by value, yes

[12:01:02.0688] <shu>
but good point on the cost, it ups the barrier of entry

[12:01:35.0543] <littledan>
? Python isn't popular?

[12:02:11.0704] <littledan>
I thought Bradley had a whole list of these things

[12:02:46.0074] <shu>
wat

[12:02:59.0603] <shu>
that was responding to about C++

[12:02:59.0744] <littledan>
Python has composite key functionality, via tuples

[12:03:24.0438] <shu>
my view is python's performance culture as an ecosystem is just... very different

[12:03:24.0840] <littledan>
oh ok

[12:03:37.0704] <shu>
i don't wish to dismiss it out of hand but they deal with performance issues very differently (write c++ libs)

[12:04:11.0057] <littledan>
yes but also, we (Bloomberg) are working with others in the Python community on a JIT...

[12:04:30.0404] <littledan>
(not PyPy, but rather a less cool one that preserves all the things that make Python work well in practice)

[12:04:39.0894] <littledan>
* (not PyPy, but rather a less cool one that preserves all the things that make CPython work well in practice)

[12:05:08.0005] <shu>
sounds fun

[12:06:56.0066] <Michael Ficarra>
I don't like these short days during remote meetings, my work day is pretty much shot anyway, we should just have more meeting time per day and give me back my Thursday

[12:07:44.0136] <Ashley Claymore>
I really like the shorter remote plenary days. I don't have your stamina Michael

[12:08:04.0966] <littledan>
<del>un</del>popular opinion: immutability is good actually and people should use it where it makes sense, rather than making everything mutable by default just because, so we should make it convenient somehow or other (even if it's not through the Composite proposal)

[12:08:35.0963] <littledan>
it's a case of using a less powerful construct because you don't need that extra power

[12:12:14.0580] <jschoi>
JS performance culture in ten years: ‚ÄúWrite WASM libs.‚Äù

[12:12:42.0583] <jschoi>
(This is a joke that I should have put in TDZ.)

[12:12:47.0868] <shu>
then we can design the language differently in 10 years

[12:13:23.0664] <littledan>
what do you mean?

[12:20:19.0164] <jschoi>
Presumably that JavaScript engines deal with performance differently than Python because there is no good recourse for developers that need fast JavaScript. Python has C; JavaScript has WASM. But WASM‚ÄìJavaScript interoperability is still very early, unlike Python and C, and for the foreseeable future the buck for JavaScript performance stops with JavaScript engines. I am guessing on behalf of Shu.

[12:21:14.0740] <eemeli>
> <@michaelficarra:matrix.org> I don't like these short days during remote meetings, my work day is pretty much shot anyway, we should just have more meeting time per day and give me back my Thursday

I'd also prefer longer remote days -- provided that they're based in a European time zone. This week's meetings are ending at 22:00 local time for me, and I'd really rather not work any later.

[12:23:22.0304] <Michael Ficarra>
We all have to make a sacrifice at some point. The next meeting is at 01:00 to 08:00 for our West coast American friends, which seems a lot worse than working past 22:00 to me.

[12:28:11.0501] <jschoi>
Do we not have any notes for the withdrawal of Records/Tuples?

[12:28:12.0963] <Ashley Claymore>
@syg am I right in thinking that v8 already needs to load pointers when doing object equality because the pointer tags don't store if the values might be strings? Or am I mixing up the different engine nan tagging schemes 

[12:29:00.0507] <littledan>
sometimes you have to refresh the google doc

[12:29:31.0162] <Ashley Claymore>
> <@aclaymore:matrix.org> @syg am I right in thinking that v8 already needs to load pointers when doing object equality because the pointer tags don't store if the values might be strings? Or am I mixing up the different engine nan tagging schemes 

shu  is what I meant 

[12:29:44.0730] <Ashley Claymore>
Brain trying to at acronyms 

[12:57:20.0548] <jschoi>
Editors: Should I write the new Array.fromAsync pull request against https://github.com/tc39/ecma262/pull/2942 as it is now, or should I wait until #2942‚Äôs conflicts are resolved? 

[13:24:55.0227] <bakkot>
jschoi we'll talk about it next week, sorry for the lack of guidance

[13:36:40.0361] <bakkot>
ljharb Michael Ficarra: let me make the argument a different way. Suppose I have a game and I'm keeping track of points already visited on a 2D grid by storing `{ x, y }` Composites in a Set. One of the operations in this game is "flip my position across the X or Y axis", implemented of course by negating that coordinate.

If we design this feature such that this results in the origin being duplicated in the "has been visited" Set up to three extra times, we have completely abdicated our responsibility as language designers to make the language usable.

[13:45:33.0929] <Ashley Claymore>
yeah that was one of the examples in the R&T issue thread (if I can find it).

[13:45:59.0955] <Ashley Claymore>
It's a good example of how -0 can easily emerge 

[13:48:18.0454] <Ashley Claymore>
The "easy fix" to this is that we normalize 0, though this is not pleasing for the cases that want to store the sign

[13:49:30.0444] <Ashley Claymore>
Which is why we went with SMZ, it allows the storage but keeps the equality.

[13:52:37.0663] <eemeli>
The next TC39 meeting will be the only one this year that's based on a European timezone, and in November we'll be in Japan. The other four meetings will be on North American time, and half again of those are on Pacific time. If we're going to continue having six meetings a year, participation from Europe would be significantly easier if at least the virtual ones were scheduled on US Eastern Time, if they don't also rotate globally.

[14:04:33.0435] <eemeli>
* The next TC39 meeting will be the only one this year that's based on a European timezone, and in November we'll be in Japan. The other four meetings will be on North American time, and half again of those are on Pacific time. If we're going to continue having six meetings a year, participation from Europe would be significantly easier if at least the virtual ones were scheduled on US Eastern Time and did not extend later than they currently do, if they don't also rotate globally.

[14:25:19.0318] <shu>
for objects there's no additional loads, no: https://source.chromium.org/chromium/chromium/src/+/main:v8/src/codegen/code-stub-assembler.cc;l=15540;drc=3b2367f544f1fbf07f2790c81b02546f73f47467

[14:31:28.0268] <ljharb>
and for your use case and SV, you'd have to check for zero before negating, which is annoying to be sure, and those that want SV would be good.

for your use case and SVZ, you're good, but the ones who want SV have *no recourse*.

so i'm not sure why "SVZ" wouldn't be the one designing the language in an unusable way, because it's the difference between "slightly annoying" and "impossible".

[14:32:04.0103] <bakkot>
one of these causes innocent developers to have to be aware of -0, one of them doesn't

[14:32:10.0927] <bakkot>
-0 is an incredibly niche, specialist thing

[14:32:31.0113] <bakkot>
the complexity of handing it should fall on those incredibly niche specialist applications, not on literally everyone else

[14:33:00.0337] <bakkot>
also "no recourse" is just straightforwardly false; it is trivial to handle by mapping -0 to some other value before creating your composites

[14:33:00.0608] <ljharb>
i agree, *when it's possible to handle it*. but in this case it's not possible to handle it

[14:33:07.0433] <ljharb>
oh hm

[14:33:12.0387] <ljharb>
i mean in your game use case yes, that would work

[14:33:22.0484] <bakkot>
the game use case should not have to think about -0 at all

[14:33:29.0198] <ljharb>
but in a use case where the possible values are "any JS value", it's impossible, because any value needs to be storeable

[14:33:37.0680] <bakkot>
no, you make your own value

[14:33:43.0964] <bakkot>
`let minus_zero = {}`

[14:33:48.0871] <bakkot>
no one else has that specific value

[14:33:50.0072] <bakkot>
done

[14:33:58.0922] <ljharb>
they do as soon as i pass around the composite

[14:34:02.0824] <ljharb>
and they need that value if they want to pass me one

[14:34:14.0550] <bakkot>
you do the mapping at the boundary of your API

[14:34:32.0192] <ljharb>
that wouldn't allow them to use the composite the same way i do

[14:34:42.0992] <ljharb>
iow it's everyone that needs to be able to do this, not just my api

[14:34:49.0799] <ljharb>
(every user of my API, at least)

[14:34:55.0952] <bakkot>
I don't understand what that means

[14:35:01.0019] <bakkot>
can you give an example?

[14:35:29.0869] <ljharb>
i want to give someone a composite like `{ x: -0 }` and have it treated as inequality to `{ x: 0 }`, *and* for `.x` to yield `-0` when appropriate

[14:35:53.0196] <bakkot>
you don't get to decide what equality semantics other people are using?

[14:35:59.0377] <bakkot>
* you don't get to decide what equality semantics other people are using

[14:36:03.0378] <bakkot>
so this desire confuses me

[14:36:12.0865] <ljharb>
hax made a comment about having an "opaque composite"; if that were a thing, then i could make my special -0 sentinel and make a composite for that, and just tell everyone to use that instead of -0 directly.

[14:36:50.0804] <ljharb>
what i mean is, i want an application using my library to be able to use the ergonomics of Composite without forcing them to know about "my placeholder for -0"

[14:37:02.0511] <ljharb>
which imo is worse than the equally rare game scenario people knowing about actual -0

[14:37:23.0193] <bakkot>
right, so you map -0 to minus_zero when they give you something, and map it back when you give it back

[14:37:24.0862] <ljharb>
it's not bad for devs to be aware of things that exist.

[14:37:49.0723] <bakkot>
it's bad to force people to deal with -0 if they are not the incredibly niche cases which actually care

[14:40:28.0447] <ljharb>
i find your contrived game example pretty niche too tbh

[14:40:45.0948] <bakkot>
you find "I want to negate numbers and store pairs of them in a Map" contrived?

[14:40:53.0725] <bakkot>
because that's like... a pretty normal thing to happen

[14:41:07.0764] <ljharb>
what are some other use cases?

[14:41:25.0467] <bakkot>
for... negating numbers?

[14:41:49.0749] <ljharb>
for storing pairs of them in a map, and needing to negate those

[14:42:07.0747] <bakkot>
it doesn't have to be pairs for this to be relevant, it's just "as a component of some larger thing"

[14:44:20.0937] <ljharb>
tbh i'm not convinced that's all that common, people don't really use Maps/Sets at all unless they have object keys. and i'm skeptical naive negation is a common need even when keying on numbers (in any structure). but i'll think more about it

[14:44:56.0500] <bakkot>
people will use Maps / Sets a lot more when we have Composites because that is the whole point of them

[14:45:14.0184] <bakkot>
they become much more useful when we have Composites

[14:52:02.0209] <littledan>
I'm just baffled by the -0 discussion. We spent so long on it previously and arrived at what I thought was the sort of perfect solution (in terms of semantics people wanted -- maybe not perfect for engines given how it messes up canonicalization)

[14:52:10.0577] <littledan>
* I'm just baffled by the -0 discussion. We spent so long on it previously and arrived at what I thought was the sort of perfect solution (in terms of semantics people wanted -- maybe not perfect for engines given how it messes up interning)

[14:52:25.0748] <littledan>
* I'm just baffled by the -0 discussion. We spent so long on it previously and arrived at what I thought was accepted as the perfect solution (in terms of semantics people wanted -- maybe not perfect for engines given how it messes up interning)

[14:52:58.0145] <littledan>
I argued a lot for what ljharb is now saying, and ljharb argued for treating -0 and 0 as equal!

[14:53:23.0029] <littledan>
the use case is the same now as in the previous discussion

[14:58:34.0078] <Michael Ficarra>
@littledan:matrix.org I do think that this is a related but different discussion than R&T though

[14:58:57.0966] <Michael Ficarra>
with R&T we were talking about how SameValue, strict equality, etc would behave with R&Ts

[14:59:19.0886] <Michael Ficarra>
for composites we know how they'll behave: composites have identity and are all inequal to each other

[14:59:56.0879] <Michael Ficarra>
the question is instead about how a built-in function compares them, with the function expected to be used as the comparator for Map/Set

[15:00:19.0852] <Michael Ficarra>
but crucially not for strict equality generally, Object.is, etc

[15:00:43.0537] <littledan>
yes, that's true, so it's all a lower-stakes discussion. but in any case, the use case we're talking about, where the spec uses SameValueZero, coincides.

[15:01:14.0420] <Michael Ficarra>
people have got to stop saying the spec uses SameValueZero for Map/Set, I am going to go insane

[15:01:46.0440] <Michael Ficarra>
https://matrix.to/#/#tc39-delegates:matrix.org/$5S9AmLOrMkmYVQfILr39ydh4fKIe2B-MeJWzlCRE8R8

[15:02:06.0346] <littledan>
OK yes sorry but that's still the case we're talking about

[15:02:35.0407] <littledan>
we still reasoned that, it'd be useful for Maps and Sets to do what's proposed here with respect to this kind of thing

[15:03:23.0704] <Michael Ficarra>
yes, if we have composites, we want Map/Set key comparison to be the same thing that Composite.equal does

[15:03:39.0402] <Michael Ficarra>
but that's in no way constraining us to use SameValueZero

[15:03:50.0016] <Michael Ficarra>
it's constraining us to use *either* SameValue or SameValueZero

[15:04:01.0085] <Michael Ficarra>
and between those two choices, SameValue is better IMO

[15:04:50.0959] <bakkot>
Michael Ficarra https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$y9UQ_IgANImhZBZRwefEUXaCl5pYC8t6YXCpbT51sZU?via=matrix.org&via=mozilla.org&via=igalia.com

[15:04:52.0624] <littledan>
it felt previously like we had consensus (until implementer pushback) to use SameValueZero for this case for R&T. Why did that make sense there but not here?

[15:05:19.0217] <littledan>
(I can't get these message links to work in my Matrix client)

[15:05:26.0515] <Michael Ficarra>
yes yes we can talk about that later

[15:06:07.0348] <bakkot>
(sorry, it's a link to my comment with the example with negation)

[15:06:38.0722] <Michael Ficarra>
right now, I'm trying to make sure we're on the same page that we're *NOT* constrained by Map/Set precedence to use SameValueZero and that the equality we're talking about right now is different than what we were talking about for R&T so that discussion also doesn't constrain us

[15:06:59.0695] <Michael Ficarra>
* right now, I'm trying to make sure we're on the same page that we're *NOT* constrained by Map/Set precedent to use SameValueZero and that the equality we're talking about right now is different than what we were talking about for R&T so that discussion also doesn't constrain us

[15:07:36.0775] <littledan>
ah, OK, so what changed was that the feeling that Map and Set are bad has expanded to more people and so maybe we want to apply that here, and this would be the case regardless of whether it's R&T vs composites (?)

[15:07:49.0495] <Michael Ficarra>
what we *are* constrained by is not breaking current Map/Set semantics if we want it to use Composite.equals, which means that we must use either SameValue or SameValueZero

[15:08:11.0396] <bakkot>
we are not on the same page about this, to be clear

[15:08:17.0485] <bakkot>
I hold that we are constrained by Map/Set precedent

[15:08:20.0046] <bakkot>
I understand you disagree

[15:09:01.0469] <Michael Ficarra>
yes @ljharb:matrix.org pointed out earlier that this was our point of disagreement

[15:09:10.0441] <Michael Ficarra>
that there's some sore of pedagogical argument here about 0/-0

[15:09:42.0112] <Michael Ficarra>
and I don't value that as much as I value how difficult and costly it will be to work around SameValueZero

[15:10:13.0046] <Michael Ficarra>
"difficult" in terms of engineering effort and "costly" in terms of runtime costs

[15:10:15.0495] <bakkot>
well, my main point of disagreement is the thing about exposing `-0` insanity to innocent developers, but the Map/Set precedent is sufficient on its own in my mind

[15:11:27.0328] <Ashley Claymore>
> <@michaelficarra:matrix.org> "difficult" in terms of engineering effort and "costly" in terms of runtime costs

It cuts both ways. If someone wants to create SVZMap if composite equality is SV. That's now difficult and costly 

[15:12:37.0409] <littledan>
the main thing is, almost everyone will use the default, so we need that to work well in practice

[15:13:11.0095] <littledan>
it doesn't really matter what you could implement on top (it matters some, but we also need a good default)

[15:13:22.0803] <Michael Ficarra>
that's true, but that's also more likely to be someone with domain knowledge about what they're putting in rather than a library developer trying to create something generically useful

[15:13:50.0227] <Michael Ficarra>
so in Kevin's example, that would be a game developer who is using floats knowing that floats have a sign bit

[15:14:01.0851] <Michael Ficarra>
that's... not unreasonable to me

[15:14:24.0578] <bakkot>
why would they know about -0?

[15:14:33.0766] <Michael Ficarra>
they're using floats

[15:14:33.0984] <bakkot>
-0 only comes up if you're doing trig or similar

[15:14:43.0449] <Michael Ficarra>
or negation?

[15:14:46.0375] <bakkot>
and only in weird edge cases even then

[15:14:56.0915] <bakkot>
no, I mean, you never have to think about it

[15:15:13.0015] <bakkot>
the value arises but you don't have to think about it unless you're doing like `atan2` or division by zero or whatever 

[15:15:30.0434] <Michael Ficarra>
you never have to think about it when doing arithmetic, but you have to think about it when passing it to APIs that take arbitrary values

[15:15:42.0097] <Michael Ficarra>
well, most arithmetic

[15:16:41.0554] <bakkot>
why?

[15:16:58.0508] <bakkot>
I have never done thought about it and it has never been a problem

[15:17:09.0990] <iain>
FWIW, I have seen this specific pattern while analyzing performance hotspots in SpiderMonkey multiple times, and it's one of the reasons that SM decided to explicitly support this proposal for stage 1. Currently people tend to write `x + ":" + y` and use string keys, which is Not Great.

[15:17:14.0922] <bakkot>
because everything in the language is designed to ensure that remains true

[15:17:16.0844] <Ashley Claymore>
Considering:
0 === -0 and [-0].includes(0), I feel like the vast majority of developers will not expect them to not be equal in Composites 

[15:17:22.0309] <bakkot>
* I have never thought about it and it has never been a problem

[15:18:38.0314] <Michael Ficarra>
I think these are poor arguments because they cut the opposite way with NaNs

[15:19:09.0069] <Michael Ficarra>
that same person will be surprised about NaN not being found, switch to `Object.is`, and now zeroes are inequal

[15:19:20.0940] <bakkot>
NaN will be found with `includes`

[15:19:22.0187] <Michael Ficarra>
üôÉ

[15:19:27.0294] <bakkot>
and with Sets


2025-04-15
[18:23:42.0293] <ljharb>
`Object.is` is the only equality that makes any sense intuitively. the rest are just "it matches <legacy baggage>"

[18:28:08.0828] <bakkot>
you say this but in fact I am pretty sure very nearly everyone would be surprised by a notion of equality in which 0 ‚â† -0

[18:28:27.0541] <bakkot>
so, no, I think you just straightforwardly wrong about that unless your claim is about only your own intuition

[18:28:42.0714] <bakkot>
in which case fine whatever but we should not design the language around your intuition

[19:10:34.0060] <ljharb>
i think everyone's assumption there is because of `==` and `===` and `SameValueZero`'s behavior. `-0` and `0` are obviously different things, so without that baggage (or IEEE's), i claim everyone would assume they're different.

[19:10:47.0602] <ljharb>
tbf, without that baggage there'd be no -0 to begin with

[19:26:04.0101] <bakkot>
the expectation isn't because of `0 === -0`, it's because they expect the result of negating zero to be equal to zero, because that's how it always works

[19:26:31.0125] <bakkot>
IEEE requires that `0 === -0` as a consequence of that, not the other way around

[19:26:51.0677] <bakkot>
the result is that almost no one needs to know about -0 because it behaves identically to 0 except in a few very obscure circumstances

[19:27:38.0363] <bakkot>
if you didn't know that -0 was a special value, and you should not have to know that -0 is a special value unless you are one of the people who cares about those very obscure circumstances, then you would assume that `0 === -0` because you would assume that negating 0 didn't do anything, which assumption is very close to being correct

[19:28:23.0559] <bakkot>
* if you didn't know that -0 was a special value, and you should not have to know that -0 is a special value unless you are one of the people who cares about those very obscure circumstances, then you would assume that `0 === -0` because you would assume that negating 0 didn't do anything the same way `0 === +0`, which assumption is very close to being correct

[19:46:07.0331] <Michael Ficarra>
I would counter that only people who are working with floats should have to think about (and make special accommodations for) the weirdness of floats. People writing generic libraries or using foundational built-in data structures should be able to reason algebraically. It's not worth abandoning that to smooth out the sharp edges of floats for people who arguably will need to learn about them eventually anyway.

[19:54:56.0771] <bakkot>
there are a lot more people who are working with numbers in javascript than there are people writing generic libraries which need to distinguish between -0 and 0

[19:55:48.0827] <bakkot>
people who are using foundational built-in data structures _can_ reason algebraically as long as they don't care about the difference between -0 and 0

[19:55:58.0093] <bakkot>
people who do care about that difference have to care anyway

[19:57:24.0873] <bakkot>
in practice what happens is that the people writing generic libraries or using these data structures do not distinguish between 0 and -0 and this works out for everyone

[19:58:57.0238] <bakkot>
I suspect you could on one hand the total number of people, ever, who both a.) had a case where the difference between 0 and -0 was important to them for reasons other than idealogical purity and b.) were surprised that Sets do not consider those distinct values 

[19:58:59.0761] <bakkot>
possibly on zero hands

[19:59:20.0087] <bakkot>
* I suspect you could count on one hand the total number of people, ever, who both a.) had a case where the difference between 0 and -0 was important to them for reasons other than idealogical purity and b.) were surprised that Sets do not consider those distinct values 

[20:12:52.0784] <justingrant>
Negative zero hands!

[20:13:14.0652] <justingrant>
* Negative zero hands! Which is very different, of course.

[21:44:58.0617] <jschoi>
For what it‚Äôs worth, I checked today with a friend in game dev‚Äîsome who works on physic engines as their job, mostly within Unreal Engine‚Äôs C++/Blueprint APIs, for the past decade. He routinely works with floating points in his physics work. 

He did not know what negative zero was, and he doubted any of his colleagues knew either; he said it seemed like trivia that would never affect his team and that hopefully never need to care about. (He seems to deal with trigonometric discontinuities in other ways before ever encountering a negative zero. Or maybe Unreal has abstracted it away enough that they‚Äôve never needed to care.)

He said he would find it quite annoying if he had to care when a zero is positive or negative while using it as a key in an Unreal TMap container. But he would never use a float as a key anyway and instead would a strict integer type for keys instead. We are not so lucky in JavaScript... 

This of course was a mere convenience sample. Take it for what it‚Äôs worth. 

[21:46:18.0648] <jschoi>
> <@michaelficarra:matrix.org> so in Kevin's example, that would be a game developer who is using floats knowing that floats have a sign bit

For what it‚Äôs worth, I checked today with a friend in game dev‚Äîsome who works on physic engines as their job, mostly within Unreal Engine‚Äôs C++/Blueprint APIs, for the past decade. He routinely works with data structures containing floating points in his physics work.

He did not know what negative zero was, and he doubted any of his colleagues knew either; he said it seemed like trivia that would never affect his team and that hopefully never need to care about. (He seems to deal with trigonometric discontinuities in other ways before ever encountering a negative zero. Or maybe Unreal has abstracted it away enough that they‚Äôve never needed to care.)

He said he would find it quite annoying if he had to care when a zero is positive or negative while using it as a key in an Unreal TMap container. But he would never use a float as a key anyway and instead would a strict integer type for keys instead. We are not so lucky in JavaScript...

This of course was a mere convenience sample. Take it for what it‚Äôs worth.

[21:57:43.0171] <jschoi>
> <@michaelficarra:matrix.org> so in Kevin's example, that would be a game developer who is using floats knowing that floats have a sign bit

 * Regarding Kevin‚Äôs gamedev example and game developers‚Äô domain knowledge of -0:

I checked today with a friend in game dev‚Äîsome who works on physic engines as their job, mostly within Unreal Engine‚Äôs C++/Blueprint APIs, for the past decade. He routinely works with data structures containing floating points in his physics work.

He did not know what negative zero was, and he doubted any of his colleagues knew either; he said it seemed like trivia that would never affect his team and that hopefully never need to care about. (He seems to deal with trigonometric discontinuities in other ways before ever encountering a negative zero. Or maybe Unreal has abstracted it away enough that they‚Äôve never needed to care.)

He said he would find it quite annoying if he had to care when a zero is positive or negative while using it as a key in an Unreal TMap container. But he would never use a float as a key anyway and instead would a strict integer type for keys instead. We are not so lucky in JavaScript...

This of course was a mere convenience sample. Take it for what it‚Äôs worth.

[06:54:49.0657] <ryzokuken>
@room starting in 5 minutes

[07:26:25.0126] <Michael Ficarra>
hang on, can't we store the pre-transaction state in locals and roll it all back in the catch?

[07:26:42.0978] <Michael Ficarra>
is the issue that we may partially roll back because of another OOM?

[07:27:06.0160] <Mathieu Hofman>
Yes in this simple case, but it's not always straightforward to store all state to restore it

[07:28:07.0276] <Mathieu Hofman>
The point was that it's not always obvious where OOM can happen, and an undue burden to be defensive about them

[07:30:16.0295] <naugtur>
The combinations of backup values would grow incredibly fast in real programs' complexity 

[07:30:50.0565] <littledan>
I imagine Chrome filed that WHATWG issue because it *does* implement OOM-fails-fast

[07:31:51.0071] <shu>
whether an OOM is thrown depends on the API

[07:32:00.0275] <littledan>
oh right

[07:32:10.0962] <shu>
like, if you try to make a string that's too big, that probably throws a RangeError even if there's no explicit RangeError check (like in ArrayBuffer allocation)

[07:32:19.0764] <shu>
but almost all "small" allocation OOMs crash

[07:32:53.0552] <shu>
some of it has been added previously because people repeatedly ask

[07:33:08.0966] <littledan>
you mean, cases where it throws rather than crashing?

[07:33:11.0216] <littledan>
would it be possible/desirable to implement the original OOM-fails-fast guarantee? Do we have evidence of web-incompatibility?

[07:33:31.0695] <shu>
yeah, where they ask for it to throw so they can catch it

[07:34:22.0611] <shu>
i think making out-of-stack crash is like incompatible

[07:34:55.0578] <shu>
i don't think it is desirable to _spec_ original OOM-fail-fast

[07:35:17.0519] <shu>
* i think making out-of-stack crash is likely incompatible

[07:35:43.0600] <littledan>
transcriptionist notes are excellent today

[07:35:51.0096] <Michael Ficarra>
I'm not convinced that the current host hook requirement doesn't permit never returning

[07:35:54.0935] <littledan>
thanks for clarifying, Shu

[07:36:28.0792] <shu>
to be clear i think it is useless to have a host hook, and actively harmful to ultimately expose that hook to user code (if i understood what mark's long term plans were earlier in the proposal)

[07:47:17.0585] <Michael Ficarra>
why is it any more likely to be in ecosystem code than `for(;;);`?

[07:53:33.0892] <shu>
"inducing a host to panic" sounds like exploiting a bug to me

[07:53:41.0754] <shu>
there is no sanctioned way to induce a host to panic

[07:55:05.0282] <naugtur>
One strong difference in the browser between infinite loops and panic is infinite loop freezes the UI and panic would inform the user.
The host hook gives the hook power to decide (or even ask the user) how to react.

[07:55:22.0292] <bakkot>
lots of people put panics in languages which have them and ~none of them write defensive infinite loops

[07:55:57.0569] <naugtur>
(we once wrote a defensive I finite loop at MetaMask. Long story)

[07:56:05.0298] <naugtur>
* (we once wrote a defensive infinite loop at MetaMask. Long story)

[07:59:19.0483] <shu>
what we're doing right now does not violate the JS spec, what?

[07:59:53.0974] <kriskowal>
(In the mid-aughts, Google prefaced every JSON HTTP response with `while(true)` to defend against XSS. For all I know, they still do.)

[08:00:30.0099] <Andreu Botella>
I think Mark is arguing that stopping a script execution through any other means than the stack emptying because the execution finished is legal per the JS spec

[08:02:17.0536] <Andreu Botella>
* I think Mark is arguing that stopping a script execution through any other means than the stack emptying because the execution finished is not legal per the JS spec

[08:02:17.0870] <iain>
Making stack overflow crash is definitely not compatible. At one point SM increased our stack limit, and we saw performance reports on games websites using some weird obfuscator that deliberately overflowed the stack as part of its attempt to make itself hard to debug, because it was taking longer to hit the limit.

[08:02:28.0890] <shu>
what i was responding to was mark referred to the current OOM behavior in browsers as "violating the spec"

[08:04:35.0907] <Michael Ficarra>
how does aborting help facilitate transactions?

[08:04:59.0384] <Michael Ficarra>
or does it not become an abort, it becomes a rollback to some previously tagged point?

[08:05:42.0429] <Mathieu Hofman>
In our case, our supervisor worker embargoes all effects from the child worker and commits them once the worker completes its operation

[08:06:33.0338] <Mathieu Hofman>
It currently uses an actual DB transaction to accomplish that, but that's an implementation choice

[08:07:05.0225] <Michael Ficarra>
ah like Golem

[08:08:00.0640] <Michael Ficarra>
(https://www.golem.cloud/)

[08:08:02.0309] <Andreu Botella>
so `self.close()` on dedicated workers doesn't kill the worker, it just prevents new tasks from being enqueued onto the event loop, but you could signal to the parent to kill the worker, and then call it

[08:08:31.0949] <Mathieu Hofman>
(the abortable unit is obviously the worker agent as we don't use SAB)

[08:10:08.0691] <Mathieu Hofman>
Right that's great for implementing `panic`. It doesn't help for OOM

[08:10:23.0731] <littledan>
Can we get someone else helping with notes?

[08:10:42.0750] <Andreu Botella>
I'll help out

[08:12:57.0533] <bakkot>
I am pretty sure `{ object literal } as const` is all of these things Ron is saying

[08:13:13.0689] <bakkot>
TS can infer the closed domain of the keys and values just fine

[08:13:32.0883] <bakkot>
and will prevent you from adding new keys and all

[08:13:43.0602] <littledan>
see https://github.com/rbuckton/proposal-enum/issues/23

[08:14:14.0513] <Michael Ficarra>
@bakkot:matrix.org I'm pretty sure Ron's banking on some of these continuation ideas actually happening though

[08:14:14.0754] <littledan>
Igalia implemented `: enum` as an upgraded version of this, which also does some type system magic that catches further back up

[08:15:00.0046] <littledan>
the most basic thing is that `as const` still requires you to do `const Foo = { /* ... */ } as const; type Foo = Foo[keyof Foo]` which is ugly, and then the type isn't branded at that point

[08:15:27.0694] <littledan>
so I think the TS-only alternative would be more like https://github.com/microsoft/TypeScript/pull/61414

[08:15:28.0257] <bakkot>
oh, `as enum` is neat, sure

[08:15:34.0223] <shu>
sidebar comment is that is very, very risky

[08:15:39.0605] <shu>
see decorators

[08:15:57.0172] <Richard Gibson>
I think it does, though... consider `typeof (len => { try { return "x".repeat(len); } catch(err) {} })(2**53 - 1)`‚Äîthe [spec](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.repeat) requires it to be `"string"` AFAICT, but actual behavior is `"undefined"`

[08:16:01.0615] <bakkot>
I have never found having to use `keyof Foo` to be that painful personally but simplifying seems good

[08:16:37.0928] <littledan>
so far, I get that the advantages are 1) self-references 2) frozenness

[08:17:05.0360] <littledan>
I'd bet that the majority of TS developers who know how to use `enum` do not know how to use `keyof` to achieve the same effect

[08:17:15.0487] <Michael Ficarra>
oh I know, plus I think pretty much all of them have no shot (maybe auto-initialising with symbols would be fine)

[08:18:10.0219] <bakkot>
sure because they can use `enum` instead, so it's not widely taught as a pattern, but if they did not have `enum` they'd learn the other pattern

[08:19:03.0453] <littledan>
maybe, idk, the idiom feels kind of "low level" to me, why should I as a developer have to do this weird TS plumbing for something which is "obvious"

[08:19:22.0102] <littledan>
but none of this relates to whether we should add a JS feature

[08:20:40.0812] <shu>
isn't Ron's whole motivation slide about TS DX?

[08:21:22.0290] <littledan>
yeah, I just mean that bakkot and I were talking about tradeoffs between `: enum` vs the `keyof` idiom, which is entirely *within* TS

[08:21:32.0651] <shu>
ah gotcha

[08:21:37.0284] <Steve Hicks>
This might be less surprising if it were called `Composite.is`?

[08:22:25.0111] <littledan>
To these, I'd add 3) Looking like existing TS enum 4) being a syntax base for further follow-on features

[08:24:23.0176] <bakkot>
3) is not much of an advantage unless we do auto-incrementing, which we are not going to do

[08:27:02.0219] <littledan>
3 actually may be a disadvantage, because of the transition (see set -> define fields)

[08:27:19.0624] <littledan>
why are we not going to do auto-incrementing? (not that I disagree...)

[08:27:45.0932] <bakkot>
because it is very bad and I and several delegates are dead against it for that reason

[08:28:08.0067] <littledan>
right just asking what the reason/badness is

[08:29:22.0908] <bakkot>
ah, see discussion in the vicinity of https://matrixlogs.bakkot.com/TC39_Delegates/2025-02-21#L227

[08:29:32.0230] <littledan>
if this is a feature where TypeScript continues to have custom *runtime* semantics (due to disagreeing with TC39) it makes me significantly less excited about this feature

[08:29:44.0893] <bakkot>
biggest thing is that it makes it way, way too easy to have breaking changes

[08:31:12.0425] <shu>
not sure i follow, how does auto increment increase likelihood of having breaking changes?

[08:31:55.0921] <jschoi>
As an aside, I have to express gratitude over having a Matrix archive website. It‚Äôs been so invaluable over the years for situations just like this.

[08:32:37.0257] <snek>
if you put a new variant not at the end of the enum, it renumbers all the following ones

[08:32:49.0846] <shu>
are you expecting that people will be like `if (val == 42)` and hardcode a particular enum's integer value?

[08:34:00.0774] <shu>
but ... why is that breaking?

[08:34:19.0599] <shu>
are there users of that enum that refer to the raw integer values?

[08:34:23.0190] <snek>
no i think its more like if you have a library and two versions of it are talking to each other

[08:34:32.0598] <bakkot>
yes


[08:34:41.0099] <shu>
oh, you want two libraries with different versions in the same app

[08:34:42.0681] <shu>
got it

[08:34:56.0689] <snek>
well i personally imagine more like talking over http or smth

[08:35:00.0275] <snek>
but in any random scenario 

[08:36:01.0767] <Andreu Botella>
having someone else helping with the notes would help

[08:36:11.0030] <Michael Ficarra>
also people storing enum values in JSON or databases

[08:36:12.0304] <shu>
i'm still having trouble understanding why enum auto-numbering is the footgun. is it something like, the new version of the library is otherwise completely backwards compatible, but they wanted to prepend instead of append an enum value for an orthogonal new feature, and now it's incompatible?

[08:36:31.0852] <shu>
like we deal with these problems in Chrome as well, they're all append only

[08:36:50.0715] <snek>
i mean we can talk about all the times v8 has broken abi compat from inserting variants/members into the middle of existing definitions if you want examples of how this is a footgun :P

[08:36:52.0470] <jschoi>
* Regarding Kevin‚Äôs gamedev example and game developers‚Äô domain knowledge of -0:

I checked today with a friend in game dev‚Äîsome who works on physics engines as their job, mostly within Unreal Engine‚Äôs C++/Blueprint APIs, for the past decade. He routinely works with data structures containing floating points in his physics work.

He did not know what negative zero was, and he doubted any of his colleagues knew either; he said it seemed like trivia that would never affect his team and that would never need to care about. (He seems to deal with mathematical discontinuities in other ways, before ever encountering a negative zero. Or maybe Unreal has abstracted it away enough that they‚Äôve never needed to care.)

He said he would find it quite annoying if he had to care when a zero is positive or negative while using it as a key in an Unreal TMap container. But he would never use a float as a key anyway and instead would use a strict integer type for keys instead. We are not so lucky in JavaScript...

This of course was a mere convenience sample. Take it for what it‚Äôs worth.

[08:36:54.0518] <shu>
removing enum values in general is a breaking change so i assume that's out of scope here

[08:37:17.0952] <Michael Ficarra>
@shuyuguo:matrix.org in a completely closed world, auto-numbering would be fine, but the value of the enum escapes or is stored somewhere, so in practice it's rarely okay to re-number your enum

[08:37:36.0968] <shu>
yes, we can. i don't really know how well we deal with public API enums, probably too cavalierly

[08:37:53.0674] <littledan>
I guess the idea is, it's just too tempting, syntax-wise, to add new values into the beginning or middle

[08:38:22.0208] <shu>
okay thanks

[08:38:45.0871] <snek>
i feel like i would most enjoy the default being unique symbols for each item, unless you explicitly want the value to be serializable in which case you need to bring in your own numbers/strings (or use a decorator?)

[08:38:55.0389] <hax (HE Shi-Jun)>
In real life u might find someone made mistake. For example, in some versions of Monaco editor, I found the enum value changed in the new version and cause bugs in my application.

[08:39:09.0108] <snek>
* i feel like i would most enjoy the default being unique symbols for each item, unless you explicitly want the value to be serializable in which case you need to bring in your own numbers/strings (or use a decorator?). just to get a base level of mindfulness for how your enum is used.

[08:42:29.0742] <Josh Goldberg üíñ>
As a reference, in typescript-eslint's recommended configs there is a rule that bans comparing enum values with non-enum values. That's mostly targeted to stopping developers from relying on specific values of enums.
https://typescript-eslint.io/rules/no-unsafe-enum-comparison
The rule's docs mark a delineation between the two common uses of enums that we've found:
* "Namespaced bag of values": you care about the values (and likely don't auto-number)
* "Opaque identifiers": you explicitly don't want to know about the values (e.g. for auto-numbering)

[08:42:32.0877] <hax (HE Shi-Jun)>
I remember there is a proposal by engines try to remove TDZ anyway?

[08:42:43.0246] <bakkot>
if you maintain the discipline of append-only it's also fine but people don't; they like similar values to be close to each other in the declaration

[08:43:04.0765] <Michael Ficarra>
ü§î there's nothing protecting a user from giving more than 1 enum case the same associated value? that seems bad...

[08:43:08.0668] <shu>
yeah i understand that. there are many warnings about APPEND ONLY DO NOT REMOVE ANYTHING etc

[08:43:59.0209] <Michael Ficarra>
also just alphabetical so they're easier to scan

[08:44:11.0878] <Josh Goldberg üíñ>
I hate to beat the same drum twice in a row, but yes that is also a recommended rule in typescript-eslint üòÖ
https://typescript-eslint.io/rules/no-duplicate-enum-values
Some developers like it for aliasing values. I've personally done this with a `/** @deprecated Use (other name) instead. */` sometimes.

[08:45:24.0365] <bakkot>
yeah so the goal is to not add a feature which requires that whenever you use it

[08:46:10.0917] <shu>
sure, i understand the motivation. my take at this time is how much you'd like to favor public API enum use vs internal enum use

[08:46:47.0116] <Andreu Botella>
can we get some help with the notes?

[08:47:37.0246] <Michael Ficarra>
do we need to raise a PoO for notes?

[08:49:32.0180] <Michael Ficarra>
and attributions!

[08:49:42.0711] <Michael Ficarra>
it's super hard to attribute post-hoc

[08:55:18.0336] <littledan>
yes, and we make errors there sometimes

[08:58:38.0324] <hax (HE Shi-Jun)>
set -> define is very different (much worse) case because it use same syntax but very different semantic. I don't think enum have similar issues.

[09:06:26.0786] <Jesse>
can someone help with the notes? I can't take notes rn -- need to go home, make dinner, and come back to the office in < 60 min

[09:07:09.0935] <ryzokuken>
Jesse could you stick around for a minute or two?

[09:07:19.0395] <ryzokuken>
we should be wrapping up here soon

[09:07:34.0068] <bakkot>
I can take over for the next minute Jesse 

[09:07:36.0851] <bakkot>
go eat

[09:09:21.0334] <ryzokuken>
thanks both

[09:46:09.0589] <rbuckton>
The TypeScript compiler uses this behavior to define ranges for fast tests against `node.kind`, like `FirstKeyword = BreakKeyword, LastKeyword = OfKeyword`, etc., making it very valuable for using enums in performance-critical code.

[09:46:54.0053] <rbuckton>
It's also useful when defining a mask that might only contain a single bit.

[09:51:12.0673] <ljharb>
the typescript compiler's moving to go, though - are there any other JS use cases?

[09:52:09.0717] <snek>
i have done the same thing, in js, not in the typescript compiler

[09:52:30.0499] <rbuckton>
The TypeScript compiler isn't the only case, just the most prominent. I use this behavior in other projects as well.

[09:53:49.0890] <ljharb>
sorry, to clarify - are these use cases performance-critical in the same way as tsc?

[09:55:12.0909] <ryzokuken>
@room back in 5 minutes

[09:55:59.0150] <rbuckton>
Some are, yes. There are plenty of other cases, though. For example, I've used them when building a deserializer for a wire format.

[09:58:40.0098] <Chris de Almeida>
looking for two TC39 heroes to help with the notes  üôè

[10:02:31.0682] <Aki>
Delegates, if you're presenting at a different part of this meeting, maybe consider taking notes now as a way to pay it forward for when you're speaking

[10:06:13.0406] <ljharb>
(i forgot to provide this context: ruben is a node TSC member and core collaborator)

[10:06:31.0390] <Chris de Almeida>
@ljh

[10:06:44.0241] <shu>
bless you

[10:06:49.0246] <Chris de Almeida>
* @ljharb:matrix.org if you can, please update agenda to include link to slides

[10:08:16.0068] <ljharb>
it's a PDF, i'll upload it to the agenda

[10:10:36.0094] <jschoi>
TCQ should be switched to the new agenda item so that people can add to the queue, right?

[10:10:50.0382] <ryzokuken>
looks updated for me

[10:10:56.0611] <ryzokuken>
can you try refreshing?>

[10:11:04.0291] <ljharb>
https://github.com/tc39/agendas/blob/main/2025/2025.04%20-%20Object.propertyCount%20slides.pdf

[10:11:13.0692] <jschoi>
> <@jschoi:matrix.org> TCQ should be switched to the new agenda item so that people can add to the queue, right?

Resolved, thank you. 

[10:12:22.0211] <jschoi>
> <@ljharb:matrix.org> (i forgot to provide this context: ruben is a node TSC member and core collaborator)

Would you like me to add this to the notes, where you introduce him?

[10:12:29.0299] <ljharb>
sure, thanks!

[10:16:12.0858] <snek>
is this even implementable in a way that makes sense with these options?

[10:16:43.0747] <snek>
like unless your object impl is always sorting out these 3 different kinds of keys

[10:16:55.0120] <snek>
it would be expensive to get the counts

[10:17:06.0238] <snek>
* it would be expensive as expensive to get the counts as doing Object.keys etc

[10:17:11.0484] <snek>
* it would be as expensive to get the counts as doing Object.keys etc

[10:17:24.0703] <snek>
* like unless your object impl is storing these 3 different kinds of keys separately

[10:18:00.0855] <bakkot>
this API is excessively fleshed out for a stage 0 proposal

[10:18:10.0138] <Michael Ficarra>
it's probably pretty likely that engines will be differentiating these 3 classes of property keys

[10:18:11.0243] <bakkot>
gotta convey to new delegates to avoid that

[10:18:42.0597] <Chris de Almeida>
it's going for stage 1 or 2

[10:18:49.0342] <Michael Ficarra>
yeah most people who have been participating in committee have gotten that message, but we definitely don't message it to outsiders

[10:19:13.0777] <hax (HE Shi-Jun)>
The alternative  should use `enumerableKeys` and `nonEnumerableKeys`? ü§î

[10:20:19.0324] <bakkot>
I would also like to convey to new delegates to avoid trying to go for stage 2 when there is any nontrivial design space

[10:20:24.0800] <jschoi>
This ‚ÄúExample uses‚Äù slide is important.

[10:20:26.0269] <bakkot>
* I would also like to convey to new delegates to avoid trying to go straight for stage 2 when there is any nontrivial design space

[10:20:33.0816] <jschoi>
Maybe the most important slide.

[10:20:40.0503] <ljharb>
what is the nontrivial part of the design space you see?

[10:20:54.0739] <jschoi>
* This ‚ÄúExample uses‚Äù slide with real-world appearances is important.

[10:20:57.0481] <ljharb>
"one method vs multiple methods" seems trivial to me, as does "how are the api options spelled"

[10:21:01.0243] <Chris de Almeida>
keep in mind Jordan is co-champion on this, so this is not strictly a 'new member' thing

[10:21:03.0696] <bakkot>
which variants of kinds of key we allow you to query for, what the shape of the API is

[10:21:06.0924] <ljharb>
* "one method vs multiple methods" seems trivial to me, as does "how are the api options spelled" and "which api options are included"

[10:21:54.0014] <ljharb>
certainly if you think there's more options than are being presented then it's fine to ensure those are included before stage 2. but the decision which to use likely would be a stage 2 decision imo

[10:22:14.0574] <bakkot>
no I mean I think we should do ~none of the options in the proposal

[10:22:17.0798] <bakkot>
and that's a large design space

[10:22:29.0706] <ljharb>
lol ok well that's def a stage 2 blocking opinion :-)

[10:23:19.0467] <bakkot>
also we are not going to get through the queue on this

[10:23:21.0788] <bakkot>
not even close

[10:24:16.0761] <ptomato>
maybe we should bring Dan Minor's topic forward, so that we can have the rest of the discussion keeping in mind to which degree this pattern is already optimized in practice?

[10:24:22.0593] <Michael Ficarra>
yeah this presentation is taking all the available time

[10:25:54.0673] <jschoi>
TCQ queue rearrangement would be great for situations just like this.

[10:26:28.0304] <jschoi>
Is there a TCQ issue for marking whether your queue item would block the current agenda item or would manifestly affect its conclusion?

[10:26:55.0670] <rbuckton>
If we go over, I do have a hard stop at 2:30pm ET and still need to be present for the Explicit Resource Management topic.

[10:28:11.0479] <ryzokuken>
there's so much to be requested from TCQ but it's still unclear what the status of the rewrite is

[10:28:40.0226] <Chris de Almeida>
hmmm..  might need to move to day 4 if that's a hard constraint

[10:29:23.0348] <rbuckton>
I'm not presenting, but I am the champion so I think it's fairly important I'm present. I have to leave at 2:30 to pick up my daughter, so I don't have any wiggle room.

[10:30:33.0950] <Justin Ridgewell>
+1 to Shu

[10:31:10.0706] <Justin Ridgewell>
Especially the examples with .filter(), I don‚Äôt expect that kind of optimization even in higher tier JITs.

[10:31:48.0360] <Chris de Almeida>
we could swap with `non-extensible` topic, but then I think that affects @ljharb:matrix.org's constraint

[10:32:02.0160] <Michael Ficarra>
what happened to Dan Minor's item?

[10:33:13.0077] <rbuckton>
If we keep it at 2pm and it goes over, I will be back by about 2:50pm if the topic goes the full 30 minutes.

[10:33:25.0940] <littledan>
I think the more relevant optimization here is really just about, this will be done in the runtime without allocating an extra array/iterator. Doesn't need actual *compiler* optimizations.

[10:34:16.0520] <shu>
well, allocation sinking / scalar replacement is a common compiler optimization

[10:37:37.0796] <snek>
v8 doesn't optimize this does it

[10:38:28.0372] <shu>
this particular pattern? nope, not afaik

[10:39:03.0982] <snek>
seems ripe for peep hole reduction

[10:40:24.0082] <shu>
patches welcome

[10:41:34.0983] <littledan>
sure but why would you call propertyCount on something allocated locally?

[10:45:17.0638] <shu>
oh i was thinking of doing scalar replacement on the locally allocated `keys()` array

[10:45:24.0877] <shu>
* oh i was thinking of doing scalar replacement on the length of locally allocated `keys()` array

[10:47:48.0225] <littledan>
oic, yeah sounds hard

[10:49:58.0135] <Bradford Smith>
If you're trying to validate that an Array doesn't have expando properties, couldn't you quite cheaply do `Object.countProperties(arr) - arr.length === 0`?

[10:50:25.0071] <bakkot>
sparse arrays :(

[10:50:40.0385] <Bradford Smith>
drat

[10:51:00.0465] <snek>
just throw if passed a sparse array

[10:51:48.0302] <shu>
this is also a good lesson about over-developing the solution

[10:55:21.0753] <Michael Ficarra>
I am super uncomfortable with granting stage 1 and then later finding out what we've agreed to when it's added to the notes by the champion

[10:55:37.0663] <Michael Ficarra>
I get that we have to move on, but this seems like a failure of our process

[10:55:55.0291] <shu>
@erights Mark Miller (Agoric) MM: i am okay with the problem statement "improving performance of counting properties on objects"

[10:56:18.0502] <shu>
i need to think more about the problem statement "how to detect sparse arrays and built-in Arrays with non-indexed properties"

[10:56:21.0881] <shu>
those are just different problem statements

[10:56:45.0854] <shu>
i dislike the pattern of delegates raising questions about what the actual problem statement is, and the champion saying "yeah just add it to the list, that's one of our problems too"

[10:57:54.0192] <littledan>
maybe we need a brief overflow topic to agree on what we got to Stage 1 on

[10:58:01.0570] <shu>
yeah

[10:58:32.0290] <snek>
is the scope not statically whatever block contains the switch case?

[10:58:42.0259] <shu>
ehh, kinda

[10:59:06.0517] <shu>
but it's a good change that stands alone of implementation opportunities imo

[10:59:15.0886] <snek>
oh switch does add a scope, til

[10:59:23.0352] <shu>
lexical declarations with on-scope-exit in bare case bodies is hateful

[11:00:01.0794] <snek>
oh yeah i'm not arguing in favor of keeping this

[11:00:25.0560] <bakkot>
I _think_ `Array.isSparse` plus `Object.propertyCount` gives you "detecting [non-sparse] arrays with non-indexed properties" as in bradford's example above (basically `return !Array.isSparse(arr) && Object.countProperties(arr) === arr.length + 1`)

[11:00:45.0208] <bakkot>
but yeah they're pretty different problem spaces

[11:01:04.0280] <ljharb>
it's 100% fine with me personally, if part of the stage 1 exploration results are "make a separate `Array.isSparse` proposal"

[11:01:06.0401] <bakkot>
* I _think_ `Array.isSparse` plus `Object.countProperties` gives you "detecting \[non-sparse\] arrays with non-indexed properties" as in bradford's example above (basically `return !Array.isSparse(arr) && Object.countProperties(arr) === arr.length + 1`)

[11:01:11.0633] <littledan>
this issue kind of points to how it'd be nice if we moved some more things to "early" time (or a secret third time in the middle?) in the spec's execution model of the world, so we don't gratuitously require this kind of extra logic

[11:02:12.0427] <ljharb>
* it's 100% fine with me personally, if part of the stage 1 exploration results are "make a separate `Array.isSparse` proposal" (thus removing "index stuff" from this one)

[11:05:13.0515] <Ruben>
The current options are to differentiate `index`, `nonIndexString`, and `symbol` key types with another option to determine if they should be enumerable or not.

Very frequent is the basic case, and I believe no one spoke up against that case: Object.keys(object).length. so enumerable true and index and nonIndexString keys.

Another frequent use case is checking if symbols collected with Object.getOwnSymbols are enumerable or not. That is enumerate true or false and symbol key type.

One more use case is to validate that an array like Object does not contain any non index string properties. This is a huge performance overhead for these cases. That is either index or nonStringKey type and enumerable true. 

I believe the latter is the main question about wanting to solve this with the API or not.

Another use case is to have a fast path for dense arrays by not having to check if an array is sparse. It would allow to skip additional steps. This would be index type and either enumerability.

There are lots of other use cases depending on what a user wants to do. I can collect additional ones if that is requested.

[11:07:54.0152] <bakkot>
Of those use cases, I am at this point only convinced that the basic case is worth solving in the language.

[11:09:10.0517] <Ruben>
Array.isSparse will address the cheaper one of the two index key types use cases I am aware of. The major performance overhead comes when checking for additional non index string properties on array like objects. That is the one Mark also brought up. For most cases, this will make up most CPU time for validating or comparing these arrays.

[11:09:22.0039] <Michael Ficarra>
yes I'm much more comfortable with agreeing to pursue only the first part as part of this proposal, and another case can be made for another proposal

[11:09:52.0290] <ljharb>
would folks be receptive to a separate `Array.isSparse` proposal then?

[11:09:56.0678] <ptomato>
we didn't get around to further queue items but I'd like to point out that if there is one frequent use case where it's worth optimizing propertyCount, consider during stage 1 whether it makes more sense to add an API for that specifically

[11:10:08.0956] <bakkot>
given adequate motivation

[11:10:12.0269] <Michael Ficarra>
I would certainly welcome a presentation that seeks Stage 1 for it

[11:10:54.0467] <Ruben>
I can put such a proposal together. Michael Ficarra: would you like to look into this together with me?

[11:11:13.0384] <Michael Ficarra>
I would not

[11:11:29.0748] <ljharb>
i'm happy to work on it as well, but i'm not sure what bakkot would consider "adequate motivation"

[11:12:48.0841] <bakkot>
you've talked about code needing to check for sparse arrays. I personally have never seen code which needed to check for sparse arrays except maybe some extremely pedantic serialization libraries, so giving examples and explaining why it's important for that code would go a long way.

[11:12:53.0041] <rbuckton>
`static #t = void ...` looks like it should just have been `static { ... }`

[11:14:14.0716] <shu>
yeah exactly

[11:14:41.0669] <Michael Ficarra>
I would be convinced just seeing that a lot of people are doing it, regardless of whether we think it's "good"

[11:15:53.0005] <ljharb>
i mean every user of node's `console.log` or `util.inspect` would benefit from the perf increase such a proposal offers

[11:15:57.0580] <ljharb>
so that one seems pretty empirical

[11:16:43.0747] <bakkot>
I'm especially unconvinced by arguments from performance of node's internals because they always have the option of doing things in C++

[11:16:57.0794] <bakkot>
or zig, or whatever

[11:17:17.0472] <snek>
i don't think util.inspect would benefit, it still has to manually identify sparse runs

[11:17:18.0040] <Ruben>
From what was discussed: I would remove index vs nonIndexString from the implementation. I believe that was the main pain point. Adding Array.isSparse in combination with the keys would allow the main use cases to be addressed

[11:17:18.0132] <Michael Ficarra>
wouldn't we also only care about cases that count properties but avoid enumerating?

[11:17:42.0973] <Ruben>
This also simplifies the implementation by not having to worry about what an index key is

[11:18:16.0940] <Aki>
Which is the German one that shu hasn't been able to reach?

[11:18:44.0551] <ljharb>
with the fast path, only when it finds a sparse thing, so it'd only punish people doing the Bad Thing

[11:19:02.0147] <snek>
but it has to iterate over the array anyway

[11:19:05.0800] <snek>
to print all the things it contains

[11:19:30.0963] <Ruben>
It does that by not allocating the array 

[11:19:47.0105] <shu>
Aki: it's not the websites themselves, but whoever designed the websites for the two sites listed under "Axial": https://github.com/syg/proposal-nonextensible-applies-to-private/issues/1

[11:19:47.0294] <Ruben>
That would otherwise be a huge overhead

[11:20:22.0113] <shu>
it's clear from the HTML source that those two sites were written by the same 3rd party people, so i figured it's not useful to reach out to the sites themselves

[11:20:37.0004] <shu>
well, i _could_ ask them who they used directly but i haven't tried

[11:20:48.0394] <shu>
not sure if they'd respond to english in any case

[11:22:45.0297] <ptomato>
not sure it's in the spirit of the reviewer requirement to speedrun this process?

[11:25:07.0579] <Michael Ficarra>
Mark should've written tests, he could've gone for 3

[11:25:24.0836] <littledan>
probably it's not trivial to update all of test262 for this

[11:25:36.0176] <bakkot>
I almost wrote tests for `getOrInsert` just so it could advance

[11:25:38.0973] <bakkot>
it's so small...

[11:25:40.0588] <Michael Ficarra>
I didn't say it was easy

[11:25:50.0392] <bakkot>
and claude is surprisingly good at writing test262 tests

[11:25:59.0434] <dminor>
Yeah, I'm not sure what the urgency is here.

[11:26:27.0435] <bakkot>
well, there's a little more urgency because this is a breaking change

[11:26:36.0024] <bakkot>
albeit of something which is multiple years old at this point

[11:26:39.0687] <dminor>
Jonas from the University of Bergen already wrote tests -- https://github.com/tc39/test262/pull/4454

[11:26:54.0896] <snek>
i think there's also just a baseline impatience from knowing that you can only advance stuff at meetings. who wants to wait months for what could be immediate?

[11:26:57.0069] <bakkot>
oh nice!

[11:27:05.0269] <jschoi>
And with ‚Äúmonotonously (but not asymptomatically)‚Äù growing use. 

[11:27:07.0132] <bakkot>
glad I didn't then

[11:28:58.0839] <Chris de Almeida>
tbf, he did say 'please'

[11:29:23.0352] <shu>
monotonic not monotonous

[11:31:08.0621] <jschoi>
Yes, you are right. I did an eggcorn. 

[11:37:55.0698] <littledan>
yeah I don't really see this as a source of urgency. But it's more like, if we all agree on it, and it's simple and well-developed, then we can do this multiple advancement thing

[11:40:00.0592] <Michael Ficarra>
the chairs have been doing a really great job lately ‚ù§Ô∏è

[11:40:22.0325] <Chris de Almeida>
> The committee may elide the process based on the scope of a change under consideration, as it sees fit.

[11:41:05.0208] <littledan>
yep, I agree, that's the clause we're invoking

[11:41:05.0807] <Chris de Almeida>
the YOLO clause

[11:41:16.0762] <littledan>
well, no, we're not eliding the process

[11:41:20.0352] <littledan>
we're following it

[11:41:37.0224] <Chris de Almeida>
one of the definitions of elide is 'merge'

[11:42:02.0828] <Chris de Almeida>
so I think we are still eliding?  ü§∑  semantics I suppose

[11:49:12.0024] <jschoi>
Is it considered bad form to add multiple queue items at the same time? 

[11:49:30.0754] <Chris de Almeida>
not at all

[11:49:58.0476] <Chris de Almeida>
what's bad form is to add two topics in one item

[11:50:34.0570] <jschoi>
Is it still alright to add multiple queue items if they‚Äôre added early, before a presentation ends?

[11:50:42.0762] <Chris de Almeida>
yes

[12:01:27.0645] <Andreu Botella>
there is no transcriptionist at this point

[12:22:11.0056] <shu>
Mathieu Hofman: to your question before time ran out, i see a host hook as a layering point for other _specs_. if the other specs that all embed JS today, HTML being foremost, just end up saying that the host hook does implementation-defined behavior, i think it is misleading editorially to add such a host hook

[12:22:37.0033] <shu>
a host hook suggests there is a prescribed or proscribed behavior common to >1 implementation

[12:40:55.0027] <Mathieu Hofman>
I see 2 behavior possible for a host hook:
- Throw an error / abrupt completion
- Stop any forward progress

I would very much like some host being able to be clear what their chosen behavior is. While I understand the Web is not interesting in killing the agent cluster, especially if that involves the main renderer thread, I think it makes sense for other hosts. For example maybe a Cloudflare worker would want to terminate the isolate on OOM? Or a node process could opt-in a similar termination (similar to how you can configure termination on unhandled rejection for example)

[13:24:53.0951] <shu>
a cloudflare worker is not a host in my mental model

[13:25:03.0853] <shu>
we can make it editorially clearer where implementation-defined behavior may occur

[13:25:11.0444] <shu>
but the bar to clear a host hook is when there is an embedder spec

[13:25:39.0391] <shu>
but even implementation-defined is pretty problematic and most likely unimplementable

[13:26:02.0751] <shu>
on mobile OSes, it's not up to the VM to choose. we may be killed by android's OOM-killer even if the engine tries its darndest to resume

[13:27:21.0490] <shu>
so to be clear, i'm arguing against the editorial tool of host hook, not against the general thing of getting something in writing about resources

[13:41:51.0909] <kriskowal>
There‚Äôs a gap for a definition of Host in https://github.com/tc39/how-we-work/blob/main/terminology.md which gives us latitude for interpretation, but by your reckoning, is Node.js or Deno a host?

[13:44:06.0908] <shu>
no

[13:44:25.0882] <shu>
if there is no spec, i don't consider it a host

[13:45:15.0821] <kriskowal>
That is the crux of the disagreement then. I‚Äôd qualify host and specification separately. Perl is, after all, a language.

[13:45:35.0491] <shu>
i consider node and deno implementations

[13:45:54.0598] <shu>
they do not need editorial hooking points in the JS specification if they do not themselves have a specification

[13:50:04.0877] <shu>
kriskowal: https://tc39.es/ecma262/#host

[13:57:25.0749] <kriskowal>
So, informally, WinterTG might constitute a singular host, because it is a specification that further clarifies the implementation of certain host hooks. There‚Äôs no specified notion of an ‚Äúimplementation hook‚Äù, but such things exist outside the realm of specifications.

[13:58:24.0865] <Andreu Botella>
We'd have to agree on whether there's something to specify in that implementation before providing a spec though

[13:58:42.0703] <Andreu Botella>
but yeah, we could do that

[13:58:53.0118] <Andreu Botella>
* We (WinterTC) would have to agree on whether there's something to specify in that implementation before providing a spec though

[13:59:29.0147] <kriskowal>
This framing does help qualify worthiness of consideration, and from that emerges the hooks available to implementations that exist outside specified hooks, regardless of worthiness of consideration.

[14:00:26.0444] <shu>
yeah, if WinterTG produces a spec for all JS runtimes to conform to, then that would be a singular host

[14:00:26.0757] <kriskowal>
That is, puts Node.js on strange footing here, if they for example sought to be able to get a heap snapshot at the exact moment of a reference error.

[14:01:15.0850] <kriskowal>
All JS runtimes seems like a reach. Is not the purpose of a host to differentiate a subset of implementations for more specific considerations?

[14:02:18.0343] <kriskowal>
Take TG-53 as a more concrete example. They specify all manner of things that browsers are not obliged to implement, at the embedded system bindings.

[14:13:15.0017] <shu>
all JS runtimes that seek to conform to whatever WinterTG produces

[15:03:19.0589] <littledan>
*WinterTC

[15:05:09.0232] <shu>
ah sorry yeah

[15:06:03.0925] <littledan>
a lot of the host hooks for WinterTC environments will be provided by the HTML spec, but yeah there might be some which we define differently at the minimum-common-api level

[15:08:15.0374] <littledan>
and there might be some which are defined per-server-environment, in principle

[15:08:36.0100] <littledan>
we haven't worked out everything about how modules work yet; that's a case that will somehow be mixed

[15:13:33.0857] <shu>
kriskowal: to be clear i'm not against calling out editorially that there may be implementation-defined behavior for OOMs

[15:14:43.0968] <shu>
the bigger issue is i don't think it's feasibly implementable for an implementer of JS or embedder of a JS engine to choose "always try to resume" or "always crash agent cluster"

[15:18:59.0953] <kriskowal>
On that, we agree.

[15:19:41.0164] <kriskowal>
I‚Äôm encouraging Mark to make this clear: we do not seek to impose either of those semantics on the web. We‚Äôre seeking a place to stand for non-web ‚Äúimplementations‚Äù.

[15:20:33.0565] <shu>
i think the non-web implementations have a specification, then a host hook is fair game to be discussed. if it's really just _your_ implementation (XS), then i think it's fine to call out the possibility of this behavior editorially, without a host hook

[15:20:44.0271] <shu>
* i think if the non-web implementations have a specification, then a host hook is fair game to be discussed. if it's really just _your_ implementation (XS), then i think it's fine to call out the possibility of this behavior editorially, without a host hook

[15:20:53.0622] <kriskowal>
And also not just for our own transactional wonderland. There are intermediate points in the spectrum from ‚Äúavailability before all else‚Äù and ‚Äútransactions‚Äù.

[15:22:28.0993] <shu>
metapoint here is that i am bemused by mark's worldview to reason at this level of fault tolerance

[15:23:07.0927] <kriskowal>
A specific case I would advocate for as a user of Node.js in any unattended distributed system is to leave a pretty corpse for the autopsy.

[15:23:23.0059] <shu>
i suppose i'm used to a world where UB is a convenient catchall for real world issues like this

[15:24:03.0832] <shu>
but since we strictly speaking do not have UB, the logical conclusion of that interpretation is all real world resource faults must be specified as well. but that seems intractable to me so i think i just never gave it much thought

[15:24:41.0470] <shu>
like, surely solar flares causing random bit flips in your RAM can be meaningfully guarded against by a language specification?

[15:25:05.0873] <shu>
* like, surely solar flares causing random bit flips in your RAM cannot be meaningfully guarded against by a language specification?

[15:25:07.0518] <kriskowal>
I mean, it is pretty spectacular. I‚Äôm bemused that I have the privilege of considering resilience against stack overflow, for an attacker that prepares for a stack n frames below the top in order to force specific invariants to be violated.

[15:25:22.0381] <shu>
but what's your line-drawing exercise, is what i'm asking

[15:26:51.0975] <kriskowal>
at risk of the appearance of being anything less than an expert in this field (hi), what do the initials UB expand to?

[15:27:16.0598] <shu>
undefined behavior

[15:27:22.0879] <kriskowal>
oh, well then.

[15:27:27.0239] <shu>
actually i have no idea if C++ considers real world resource faults to be UB

[15:27:39.0974] <kriskowal>
real world resource faults are all sorts of hell

[15:28:26.0164] <kriskowal>
nevermind OOM, linux sbrk literally never returns an error. it prefers to give you a page you will fault on first touch

[15:28:45.0244] <shu>
well, concrete question for you: what's the principled reason that distinguishes solar flares causing bit flips and OOMs, or are two events in the same category?

[15:29:11.0386] <shu>
or not even solar flares, just freak bit flips. that happens

[15:30:19.0217] <kriskowal>
ah, but *adversarial* solar flares, that‚Äôs the real trick

[15:30:58.0981] <kriskowal>
adversarial solar flares are of course cosmic rays deliberately intended to exploit knowledge about your toolchain in order to force intentional outcomes

[15:31:18.0914] <shu>
what i'm driving at is, if the pedantic interpretation is that implementations of JS today that can OOM _are_ non-conformant because the spec assumes infinite, non-faulty memory

[15:31:25.0974] <kriskowal>
i believe the differentiating line is probability, and whether the threat mechanism can be exploited by an adversary

[15:31:46.0089] <shu>
conformance is not probabalistic

[15:31:59.0675] <shu>
i'm not against having such a notion, to be clear, i think likelihood of conformance is a much more useful measure

[15:32:03.0459] <shu>
but that's not what marking was arguing for

[15:32:56.0584] <kriskowal>
ah, i cannot speak to the broader point about the impossibility of satisfying both of the desirable traits of a system

[15:33:53.0329] <shu>
we should discuss this over drinks, i might even enjoy myself. but i don't think it's a great use of committee time to get an editorial carveout

[15:33:57.0301] <kriskowal>
i am certainly more aligned with the position that we cannot have perfect outcomes in the absolute

[16:33:13.0417] <jschoi>
Would nuclear-weapon EMPs fall under this? Or, really, any artificial EMP‚Ä¶

[16:34:09.0592] <jschoi>
* Would nuclear-weapon EMPs fall under ‚Äúadversarial solar flares‚Äù? Or, really, any artificial EMP‚Ä¶

[16:39:01.0881] <kriskowal>
I mean, if your threat model is deterministic termination, you terminate deterministically.


2025-04-16
[01:06:04.0262] <Mathieu Hofman>
I think the difference is that one (OOMs, panic) is dependent on actions taken by the program, where the other one (solar flares) isn't. For the latter it's the mere existence of the program that maters most, not what it did. The line blurs a little bit for OS OOM killers, but my understanding is that this is fatal to the agent cluster anyway.

[06:57:58.0741] <ryzokuken>
@room starting in >3 mins

[07:00:31.0979] <snek>
matrix pls mark this channel read 

[07:01:29.0666] <sffc>
Working on connecting...

[07:10:47.0596] <Richard Gibson>
**matrix**: `Yes, I have marked this channel red.`

[07:11:13.0617] <ryzokuken>
sorry this functionality doesn't exist for your client

[07:11:18.0649] <snek>
i wish "mark as read" actually did something üòî

[07:11:35.0883] <shu>
jesus i've seen what you've done marking other channels as read and i want it for this channel

[07:14:07.0789] <nicolo-ribaudo>
I just managed to get the number of unread messages in this channel down from 4 to 1 by opening all the old threads in the right sidebar

[07:15:57.0155] <Chengzhong Wu>
tip: there is a button "Mark as read" hidden in the channel list "..." menu. It also marks unread subthreads as read

[07:17:21.0291] <ryzokuken>
the threads interaction is usually what makes the "mark as read" action not work as expected. Another way to fix that is to enable the threads activity center which gives you a popup on the bottom left with all unread threads

[07:17:54.0257] <Jesse>
still working on getting down to 4 digits

[07:18:22.0876] <snek>
in particular its not dismissing mentions in this channel (the two i had above for example). threads unrelated.

[07:18:31.0623] <snek>
* in particular its not dismissing mentions in this channel (the two i had above for example). threads unrelated. only way is to send a message :(

[07:27:02.0962] <Aki>
Y'all if you have a topic on the agenda this meeting, please consider taking a session or two editing the notes.

[07:40:41.0091] <shu>
code unit order is well defined too, isn't it?

[07:43:03.0712] <Michael Ficarra>
@shuyuguo:matrix.org for systems that have encoded the same string in UTF-16, yes

[07:43:41.0087] <shu>
then i guess that's the same question as my one on the queue

[07:43:52.0172] <shu>
i don't really get the portability

[07:44:58.0233] <Michael Ficarra>
portability to systems that use another encoding and don't want to transcode to UTF-16 to figure out sort order?

[07:45:24.0428] <shu>
but your problem is that we don't have utf16, not the sort order?

[07:45:24.0740] <Andreu Botella>
most other systems use UTF-8 (or in the case of python, UTF-32)

[07:45:47.0184] <shu>
like the portability problem i'd have figured is that our strings can be malformed

[07:46:16.0265] <Michael Ficarra>
no I think that's a whole other issue that was not addressed here

[07:46:36.0376] <shu>
what is the portability problem around _sort order_

[07:46:40.0331] <Michael Ficarra>
I think the whole proposal was assuming well-formedness

[07:47:08.0699] <shu>
a concrete example would be good

[07:47:17.0662] <Andreu Botella>
most systems use UTF-8, and sort based on that (or in the case of python, it doesn't use UTF-8 but has an equivalent comparison)

[07:47:22.0686] <Andreu Botella>
most developers don't realize there's a mismatch

[07:47:27.0481] <shu>
give me an example

[07:47:42.0088] <shu>
where you sort some strings in JS, and then... 

[07:47:51.0479] <Michael Ficarra>
oh I think I understand what you mean @shuyuguo:matrix.org: you're asking why they must sort identically on two systems that use different encodings?

[07:48:01.0731] <shu>
yeah, that's not a _portability_ problem to me

[07:48:07.0957] <shu>
i understand different systems have different behaviors

[07:48:10.0415] <shu>
they're different systems!

[07:48:42.0519] <shu>
oh i see, the "portability" here means "portability of lack of surprise when workign with strings across different systems"?

[07:48:47.0559] <bakkot>
yes

[07:48:50.0925] <shu>
not like, code is in non-interoperable

[07:48:54.0105] <Michael Ficarra>
@shuyuguo:matrix.org imagine a page that is server-side rendered with a sorted list of things, then dynamically updated at runtime (say, to add an item) and completely re-orders instead of just appearing to add the one item

[07:49:45.0520] <bakkot>
it is good to be able to implement the same algorithm in JS as in other languages without huge pain

[07:50:04.0958] <Michael Ficarra>
I guess there could be interoperability concerns? If you're like hashing a sorted list, your hash will be different on systems that sort it differently

[07:50:33.0284] <bakkot>
also for me the motivation is not really performance; you _could_ do this in userland the same way you can always do `(a, b) => a - b` but it's super painful

[07:50:46.0054] <bakkot>
this is a very natural way of sorting strings so it should be provided by the language

[07:51:26.0565] <littledan>
yeah I'm really not convinced that this function makes sense to add to JS

[07:53:25.0167] <bakkot>
littledan: because you don't think it comes up or because you think it's easy to do in userland or?

[07:54:08.0872] <littledan>
More the first one, and that it'll be used when it shouldn't be. But sorry I joined in the middle, should not have made such a confident comment, sounds like it maybe does come up

[07:55:00.0410] <nicolo-ribaudo>
When should this _not_ be used? I guess maybe where performance matters, and the engine is encoding the string as UTF-16 and not as UTF-8?

[07:55:23.0592] <bakkot>
if you're not interoperating with other systems then you should not use this

[07:55:33.0801] <bakkot>
for performance reasons if nothing else

[07:56:46.0278] <bakkot>
(do any major engines encode as utf-8? I don't think so? some do one-byte representations for strings with only small codepoints but that's different)

[07:57:30.0044] <msaboff>
This seems like a reasonable and straightforward proposal.  I think this wold be usable for some devs

[07:57:58.0853] <littledan>
it should definitely not be used when interacting with humans. The problem is that, when applied to English, it is almost usable.

[07:58:54.0833] <msaboff>
* This seems like a reasonable and straightforward proposal.  I think this would be usable for some devs

[07:59:08.0951] <msaboff>
* This seems like a reasonable and straightforward proposal.  I think this would be usable for some devs.

[08:00:22.0150] <bakkot>
I want the thing Michael Ficarra is describing (a lexicographic comparator builder and a codepoint iterator) but I still want the thing described here even after we get this

[08:00:29.0866] <bakkot>
* I want the thing Michael Ficarra is describing (a lexicographic comparator builder and a codepoint iterator) but I still want the thing described here even if we get those things

[08:00:45.0996] <Michael Ficarra>
that's totally fair @bakkot:matrix.org

[08:01:36.0915] <sffc>
I saw two use cases for sorting:

1. A total ordering for use in a BTree-like data structure
2. A human-readable ordering

(1) is better served by UTF-16 ordering. (2) is better-served by Intl.Collator.

But I'm reasonably convinced that given how common UTF-8 is on the Web and elsewhere in software, there is value for having a code point ordering function available in the JS standard library, in order to interoperate with those syetems.

[08:02:56.0242] <nicolo-ribaudo>
ryzokuken / Chris de Almeida If this takes less than one hour, the continuation of my topic from Monday has a üîíÔ∏è but can be moved to the end of this slot

[08:03:12.0431] <ryzokuken>
thanks for the heads up

[08:03:20.0156] <Michael Ficarra>
a process discussion taking less than an hour? impossible!

[08:03:21.0127] <nicolo-ribaudo>
* ryzokuken / Chris de Almeida If this takes less than one hour, the continuation of my topic from Monday has a üîíÔ∏è but can be moved to the end of this slot

(assuming Mathieu Hofman will be online and read my answer on GitHub)

[08:03:35.0513] <sffc>
Main risk from my POV is that I don't want developers to see this new shiny function and think they should generally be using it for sorting. It is useful for the fairly narrow use case of interoperating with these external systems.

[08:03:38.0044] <nicolo-ribaudo>
Well Michael said so üòõ

[08:04:55.0521] <Mathieu Hofman>
Actually it isn't but I left the question of lone surrogate for stage 2. Spoiler: use their code unit value to sort them

[08:05:32.0137] <littledan>
if this is for interop with other systems, we'll get our answer pretty objectively

[08:06:10.0352] <bakkot>
I am inclined to treat them as replacement character for sorting purposes, and only use code unit value for breaking ties

[08:06:10.0571] <Michael Ficarra>
yeah, there's an obvious answer

[08:06:31.0984] <bakkot>
because when you convert to a string in the other system it's going to use the replacement character

[08:06:43.0745] <bakkot>
so if you want to match sort order that's how you have to sort

[08:06:55.0782] <Michael Ficarra>
ü§î replacement characters should only really be used when transcoding

[08:08:14.0951] <Mathieu Hofman>
catching up now, sorry things came up in the real world

[08:10:26.0648] <Mathieu Hofman>
I think this is not a real issue. We do have Intl.Collator.prototype.compare, and I expect this would be introduced in that context with use cases

[08:11:28.0122] <Andreu Botella>
the dev outreach, and MDN and so on, should give the three types of comparison and their use cases

[08:23:11.0337] <nicolo-ribaudo>
I got distracted (apparently I left the gas stove on for hours by accident), and I missed the discussion for the second Dan minor point. I agree that blocks based on process not being respected should have a lower bar

[08:23:17.0000] <nicolo-ribaudo>
* I got distracted (apparently I left the gas stove on for hours by accident), and I missed the discussion for the second Dan Minor point. I agree that blocks based on process not being respected should have a lower bar

[08:23:25.0338] <nicolo-ribaudo>
* I got distracted (apparently I left the gas stove on for hours by accident), and I missed the discussion for the second point by Dan Minor. I agree that blocks based on process not being respected should have a lower bar

[08:27:56.0995] <Jesse>
can someone take over for me in the notes in ~5 min?

[08:29:37.0337] <shu>
i... think ecma exists to attract due-paying members?

[08:29:43.0735] <shu>
i don't think they exist to _serve_ us

[08:29:50.0021] <Chris de Almeida>
how about this ecma rule:

[08:29:56.0199] <Chris de Almeida>
> The agenda shall be made available to all members three weeks before each meeting

[08:30:08.0347] <shu>
oh man that'd be awesome

[08:30:13.0459] <ljharb>
serving us is what attracts due-paying members

[08:30:23.0841] <ljharb>
* serving us is what attracts due-paying members (TCs in general, but TC39 more than most)

[08:30:35.0880] <littledan>
we've repeatedly confirmed with the Ecma ExeCom that that can be overridden by TC's. I've proposed changing it and the response is, this isn't necessary.

[08:31:02.0195] <waldemar>
The vast majority of members are non-due-paying

[08:31:06.0219] <shu>
ljharb: what i mean is, let's stipulate IEs have exact same status. why would BigCo join instead of send all its employees as IEs?

[08:31:43.0741] <littledan>
the majority of TC39 participation is dues-paying, though

[08:31:47.0398] <ljharb>
oh sure. but per "any system can be gamed", if ecma sees that happen, they'll revoke the IE status

[08:32:10.0488] <shu>
i don't think "looking at this line in the opex chart to see if we should continue paying it" is even gaming it

[08:32:18.0343] <shu>
it happens as standard procedure every year

[08:32:24.0062] <littledan>
IEs are included in a way that's entirely contingent on Samina's discretion -- this is what the bylaws have always said. The current practice is to give people a year, and then see if they can be convinced to join Ecma.

[08:32:24.0444] <ljharb>
the openjs foundation (and its predecessors) route always made previous secretariats nervous for the same possibility, but it never actually happened

[08:33:06.0902] <Andreu Botella>
will do

[08:33:16.0115] <littledan>
I think OpenJS has made changes over time towards sending people who represent their projects, rather than just anyone (since we have the IE system for other projects)

[08:34:06.0235] <littledan>
long-term IEs make sense when you're representing a particular constituency, e.g., a strategic open source project (or in an Ecma Fellows-like situation). Lots of IEs are more transitional/introductory

[08:34:20.0653] <nicolo-ribaudo>
What if you gain block points by taking notes

[08:34:23.0061] <ljharb>
that's indeed actual policy now, but i don't think historically it's ever violated that policy ¬Ø\_(„ÉÑ)_/¬Ø 

[08:35:06.0256] <Chris de Almeida>
+1

[08:36:27.0293] <shu>
damn okay, was about to tell mark to catch me outside...

[08:36:29.0396] <shu>
guess it's not me

[08:37:04.0475] <ryzokuken>
you jest but I have suggested this in the past

[08:37:58.0202] <Michael Ficarra>
can I pay people to take notes and then transfer their block points to me?

[08:38:32.0499] <Chris de Almeida>
you will need them to block on your behalf... clandestinely

[08:38:48.0696] <nicolo-ribaudo>
That's only valid for green 

[08:38:52.0070] <nicolo-ribaudo>
* That's only valid for green credits

[08:39:06.0947] <littledan>
Ecma needs to be able to explain to prospective members what benefits they will get by joining, so that we can do things like pay Aki for her good support work, and the transcriptionists, and maybe one day sponsor test262. It's a balancing act because we need to make sure that those who can't pay but will make good technical contributions can be involved. (This is a common situation which W3C and Unicode also face and solve similarly.)

[08:40:02.0425] <littledan>
often symbolic things ("do you really get to vote?") are important for people to make their internal arguments in companies

[08:44:56.0168] <Michael Ficarra>
Isn't the continued participation of IEs always dependent on the member that invited them? I don't think a company would want to subjugate themselves like that if they're truly interested in participating.

[08:45:16.0964] <shu>
do we actually check back in?

[08:45:35.0789] <shu>
with the sponsoring company, that is

[08:45:53.0132] <Michael Ficarra>
all IEs are temporary, so they need to be re-sponsored at the very least

[08:46:03.0716] <Chris de Almeida>
yes, and it also becomes an issue if the sponsoring member has left ecma

[08:46:51.0447] <Michael Ficarra>
yeah that's taking on a lot of risks just to save on dues

[08:53:22.0578] <jschoi>
> <@michaelficarra:matrix.org> all IEs are temporary, so they need to be re-sponsored at the very least

How often does Invited Expert status need to be renewed? 

[08:53:42.0028] <Chris de Almeida>
they are reviewed yearly

[08:53:45.0816] <jkup>
I believe the status is meant to be re-evaluated annulaly 

[08:53:51.0611] <jkup>
* I believe the status is meant to be re-evaluated annually

[08:56:01.0410] <jschoi>
Oh boy‚Äîthen thank you to whoever kept my status even when I didn‚Äôt show up for a year or two. 

[08:56:21.0204] <Aki>
i feel like there's a Supreme Court/Andrew Jackson analogy to be made here

[08:56:27.0934] <ryzokuken>
we missed you üòÑ 

[08:57:02.0512] <littledan>
tbh we're falling behind on those reviews/renominations and just leaving people in until we get around to it

[08:57:34.0566] <ryzokuken>
oh wait, did we even have someone sponsor you?

[08:57:57.0528] <ryzokuken>
guess you went from delegate to IE directly and without an explicit sponsor because of the WIP proposals

[08:58:51.0410] <ljharb>
we also didn't used to review/revisit/recertify them at all, it's a relatively recent (and good) thing to do so

[08:59:09.0848] <Michael Ficarra>
@erights:matrix.org, @shuyuguo:matrix.org, and chairs: https://syg.github.io/proposal-nonextensible-applies-to-private/ LGTM, that proposal can advance to 2.7

[08:59:44.0325] <jschoi>
(I promise to try harder to get the University of Utah to join Ecma. I‚Äôm still not sure if it should specifically be by the Department of Computer Science...)

[09:00:41.0699] <littledan>
whatever's easiest for your internal paperwork

[09:01:13.0864] <shu>
i'm being dense, did someone else understand mark's argument?

[09:02:23.0664] <Bradford Smith>
In my experience (since 2020), I don't think I've ever seen an invite expert's lone objection be overruled. I feel like we've been de facto treating them as equivalent to other delegates, even if the Ecma rules say otherwise. Does that observation match with others'?

[09:06:28.0363] <msaboff>
I did not.

[09:06:32.0452] <nicolo-ribaudo>
I think I've seen it being overruled, but through behind the doors discussions 

[09:07:04.0956] <nicolo-ribaudo>
Actually at this point I don't even remember who was IE and who was not

[09:08:05.0992] <Chris de Almeida>
the notion of who is blocking is far less important than the substance of the blocking concern(s)

[09:10:37.0400] <jschoi>
‚ÄúLet it be known that ${organization}, embodied by me, blocks this proposal.‚Äù ‚Äî delegate of organization 

[09:12:34.0606] <Chris de Almeida>
it's not healthy for this committee to say that we don't care about an IE's concerns or that their concerns are any less valid than a delegate's.  or, as some have pointed out, that their reviews are insufficient, or they cannot champion proposals, and so on

[09:12:41.0503] <shu>
IME that statement is false

[09:12:57.0147] <Chris de Almeida>
say more

[09:13:10.0369] <hax (HE Shi-Jun)>
"Because one person could have a non-technical, political reason that they want to block something. It‚Äôs happened in the past, we have seen it; and there‚Äôs no technical resolution that will allow something to move forward." --- I read the notes and I really want to know the real example and check if I agree that or not...

[09:13:43.0922] <shu>
i'll dm

[09:14:53.0750] <jkup>
I'm a bit nervous about the "technical vs. non-technical reason" concept. On one hand it feels like someone could say a technical reason while really wanting to block for "political" reasons. On the other hand I worry a bit about spawning meta discussions around "Was that a technical or political objection?"

[09:15:30.0625] <ryzokuken>
especially given how commonplace it can be in our industry to dismiss things as "non-technical"

[09:15:52.0403] <ryzokuken>
"any concern I disagree with is non-technical" *drops mic* /s

[09:17:18.0875] <shu>
i get the strong sense that the bar against which people are comparing msaboff's proposal is an ideal working mode, not our current working mode

[09:18:45.0760] <shu>
which is unfair to the proposal

[09:22:50.0765] <Michael Ficarra>
@waldemarh:matrix.org @mhofman:matrix.org see https://github.com/endojs/proposal-compare-strings-by-codepoint/issues/6 for my more general approach

[09:34:37.0955] <dminor>
Is objecting to a new feature based upon language complexity or lack of harmony with existing features a technical or non-technical objection? If we can only object based upon narrow technical grounds, I worry that JavaScript will keep growing until it subsumes every feature in every other programming language.

[09:37:16.0678] <littledan>
whenever we get on the topic of "good faith", we're getting into some kind of trouble territory, where we'll soon be talking about politics/bad faith. I think everyone here is consistently doing what they think is best for JavaScript.

[09:37:33.0652] <littledan>
the main thing is, when we disagree, then what do we do?

[09:38:27.0981] <littledan>
Even if we don't raise the bar for blocking from 1 person to 2, we can still have a subsequent discussion in a meeting about whether we want to uphold the block (even if it just takes one person to actually do it).

[09:51:43.0911] <Chris de Almeida>
> when we disagree, then what do we do?

according to our CoC, we try to understand why.  üòä

[09:54:35.0689] <littledan>
yes, and then? that's the question we were trying to answer

[09:59:30.0001] <ryzokuken>
@room we're back in under a minute!

[10:04:02.0359] <nicolo-ribaudo>
I know Eemeli will probably want to speak, I'll try to fill in when he cannot take notes

[10:16:54.0804] <ljharb>
(the queue topic isn't advanced yet fwiw)

[10:46:38.0485] <jschoi>
There seem to be are a lot of missing attendees in the notes‚Äô attendee lists.

[10:46:53.0400] <Chris de Almeida>
people add themselves voluntarily

[10:47:19.0627] <Chris de Almeida>
the secretary maintains an accurate list

[11:03:15.0207] <shu>
what's the point of the list in the notes?

[11:03:25.0633] <littledan>
yeah I would like to remove that

[11:03:45.0566] <littledan>
we always have a lot of people missing; it's not a good record of anything in particular

[11:03:49.0498] <littledan>
we already have the sign-in form

[11:03:54.0054] <snek>
it used to be helpful for notetakers to get the right abbreviation 

[11:04:22.0052] <snek>
perhaps not needed anymore

[11:04:32.0414] <ljharb>
that's always been the only purpose i understood for it

[11:06:56.0307] <ryzokuken>
unfortunately the note-takers at this point is a very small set of regulars but it would be super helpful to keep and maintain if someone new was taking notes for instance

[11:08:02.0580] <bakkot>
we should point note-takers to delegates.txt

[11:08:08.0768] <bakkot>
when I take notes that's always what I look at anyway

[11:08:13.0442] <bakkot>
since it's complete

[11:08:25.0085] <bakkot>
maybe other note takers do something else though

[11:08:28.0697] <Ashley Claymore>
IE's wouldn't appear in delgates.txt right.

[11:08:33.0204] <ljharb>
they would

[11:08:34.0507] <Ashley Claymore>
but yeah otherwise I just use delgates.txt

[11:08:47.0943] <ryzokuken>
every person who has a TLA should appear there

[11:08:54.0214] <ryzokuken>
the name of the file... isn't great

[11:08:59.0446] <ryzokuken>
maybe it should be renamed

[11:09:04.0950] <ryzokuken>
participants.txt 

[11:10:08.0597] <bakkot>
no renaming things!!! üí¢

[11:10:23.0700] <Ashley Claymore>
symlink

[11:12:24.0576] <waldemar>
Option 4: use AI

[11:13:54.0121] <Ashley Claymore>
Can't see an AI in delegates.txt

[11:14:16.0840] <shu>
wait, is comparative testing == testing for injectivity?

[11:14:42.0633] <shu>
are intl functions all injective?

[11:15:59.0060] <snek>
no

[11:20:18.0686] <littledan>
but with MessageFormat, they will be *surjective*

[11:20:32.0127] <littledan>
(via the template which just passes through its string arg)

[11:27:22.0560] <jschoi>
> <@usharma:igalia.com> unfortunately the note-takers at this point is a very small set of regulars but it would be super helpful to keep and maintain if someone new was taking notes for instance

When I took notes in Seattle at my first meeting in a long time, I first checked the notes‚Äô attendees table for abbreviations and failed to find the ones I needed. Then I asked for a link to delegates.txt again. 

[11:28:38.0530] <shu>
LLMs would probably make test262 bots so expensive we'd stop running them lol

[11:28:51.0760] <ptomato>
shu: here's an example of a mini-implementation in test262 https://github.com/tc39/test262/blob/61fcd7bd565e01f795e55080ed9af70b71adb27e/harness/testIntl.js#L2517

[11:29:59.0196] <dminor>
ptomato: nice presentation and discussion

[11:30:12.0249] <ptomato>
thanks!

[11:30:40.0859] <Richard Gibson>
thanks I hate it

[11:30:53.0280] <shu>
i still don't really get it

[11:31:03.0575] <shu>
is it just programmatic goldens?

[11:31:28.0495] <ptomato>
gotta go now but I can elaborate later

[11:58:48.0592] <littledan>
shu: Whether to apply defer inwardly can be decided independently of which syntax choice we make

[11:59:13.0410] <shu>
that sounds right

[11:59:35.0075] <littledan>
(we've gone back and forth on it)

[12:00:03.0589] <littledan>
I feel like, it makes things faster and should work fine in practice for the same reason (that you're not depending on side effects), so let's throw it in

[12:08:23.0353] <sffc>
I mentioned this in TDZ but I think it's important enough to bring over here: the quality of the transcriptions today was quite terrible. Not only was there a very large number of errors (multiple per line), but in some cases whole sentences and key concepts were missing. For example, when Nicolo read off the names of people in the queue who supported Stage 2, that whole section got dropped from the transcription (I tried to re-create it manually). This is not a great note-taker experience. CC littledan 

[12:13:00.0717] <littledan>
ryzokuken: Can you escalate this to Duane?

[12:13:07.0582] <littledan>
it's crazy how variable this is

[12:13:37.0535] <littledan>
because yesterday it was great

[12:20:31.0855] <Ashley Claymore>
the first hour of the 2nd half was OK, but they switched on the hour and the quality stopped significantly 

[12:20:39.0115] <Ashley Claymore>
*dropped 

[12:23:23.0808] <littledan>
thanks, I've escalated this to the transcription company

[12:24:28.0342] <nicolo-ribaudo>
Q: do people also struggle to understand what I say, or is it just the transcription when I speak?

[12:24:47.0843] <nicolo-ribaudo>
* Do people also struggle to understand what I say, or is it just the transcription when I speak?

[12:25:08.0145] <nicolo-ribaudo>
Changing how I speak is difficult, but things like "speak slower" is something I can try to do

[12:26:49.0143] <bakkot>
nicolo-ribaudo I have always understood you fine personally

[12:35:03.0220] <sffc>
I didn't notice a significant difference between number of errors when you were speaking versus others

[14:42:57.0083] <jschoi>
Regarding +0 vs. -0 again, an interesting bug: https://github.com/WebKit/WebKit/commit/2f856d3a253c3ad7d4d0d1ba21e8ec78772c9e26

[14:43:30.0633] <jschoi>
* Regarding +0 vs. -0 again, an interesting bug whose fix just got pushed to Safari Technical Preview: https://github.com/WebKit/WebKit/commit/2f856d3a253c3ad7d4d0d1ba21e8ec78772c9e26

[15:25:04.0168] <ptomato>
> <@pchimento:igalia.com> shu: here's an example of a mini-implementation in test262 https://github.com/tc39/test262/blob/61fcd7bd565e01f795e55080ed9af70b71adb27e/harness/testIntl.js#L2517

Following up on this, here's what I call a "mini-implementation": you write a function in your test file, that imitates the spec algorithm of the method under test, line by line. Then you feed the same test data to that function and to the implementation's method under test. If the output is the same, the test passes

[15:27:15.0124] <ptomato>
It isn't specific to tests for ILD behavior. You could write a test for, e.g. Array.prototype.at in that style

[15:34:44.0641] <Steve Hicks>
As a point of order - would anyone object to bumping the AsyncContext Disposable topic to first thing tomorrow?  IIUC that should not go against any constraints, but will allow me to make the full discussion.  Thanks!

[16:15:10.0744] <ljharb>
that's confusing, the tests pass already in my safari 18.1

[16:18:16.0747] <nicolo-ribaudo>
I recommend trying to reach out to Domenic Farolino (colleague of yours!) and asking him too. It has been historically difficult to coordinate with him to present observables in TC39, so he might have planned around the current time slot

[16:19:44.0607] <nicolo-ribaudo>
* I recommend trying to reach out to Dominic Farolino (colleague of yours!) and asking him too. It has been historically difficult to coordinate with him to present observables in TC39, so he might have planned around the current time slot


2025-04-17
[17:51:38.0306] <bakkot>
it presumably only happens under certain optimization tiers or conditions

[17:52:38.0563] <bakkot>
also the commit which introduced the bug only landed two weeks ago so would not have gone into stable

[20:43:09.0852] <shu>
what i don't get is, since it's ILD, how do you decide what your mock does?

[23:34:24.0622] <ljharb>
for tomorrow: we forgot to get reviewers for `export defer`; can someone ask for that first thing in the morning? thanks!

[23:34:30.0726] <ljharb>
* for day 4: we forgot to get reviewers for `export defer`; can someone ask for that first thing in the morning? thanks!

[23:50:56.0334] <nicolo-ribaudo>
Oh yes thank you üòÖ

[03:32:59.0253] <nicolo-ribaudo>
Does the "Commit suggestion" button for reviews in the ECMA-262 repo also not work for y'all?

[03:33:53.0101] <naugtur>
they tend to work better in the files view than main discussion view.

[03:35:37.0451] <nicolo-ribaudo>
I'm getting the "This diff has recently been updated. Refresh and try again" error in both :/

[03:36:09.0519] <naugtur>
umm.. so did you reload the page?

[03:36:16.0404] <nicolo-ribaudo>
yeo

[03:36:18.0837] <nicolo-ribaudo>
* yep

[03:36:29.0647] <nicolo-ribaudo>
Also, there have not been changes for weeks :P

