2022-11-02
[15:56:33.0083] <bakkot>
PSA: we just landed a commit on ecma262 which tweaks the formatting, which is the sort of thing which causes a lot of merge conflicts. if you have an in-flight PR and you're rebasing on main, you can avoid manually applying the formatting by using the following series of commands:

```
git rebase -i 0090daf^ # 0090daf is the commit where the formatter is applied
git rebase -X theirs 0090daf --exec "npm i && npm run format && git commit --amend -a --no-edit"
git rebase -i main
```
this splits up the rebase into 1) everything before the formatter was applied, 2) the formatter, which will be done for you, 3) everything after the formatter. any conflicts in parts 1 and 3 you will need to handle manually, just like you would in the absence of the formatter (or feel free to ask the editors for help)


2022-11-07
[10:21:20.0830] <shu>
yulia: are we unshipping `group`?

[10:21:26.0878] <shu>
 * yulia: are we unshipping `group`?

[10:49:02.0930] <ljharb>
oof, i hope not - let's at least see if we can fix lastpass first

[10:50:46.0642] <shu>
hm, even if we can i'm still leaning towards unshipping in chrome

[10:51:07.0420] <shu>
because i assume it'll take a while for lastpass's fix to deploy to a large enough % of its customers

[10:53:40.0259] <ljharb>
i'd still want to know what code was breaking on it

[10:54:32.0347] <shu>
+1, the bugzilla comment reads to me as a suspicion, i want to hear it confirmed first

[10:54:53.0377] <shu>
(i mean it sounds likely, but still)

[10:57:37.0180] <yulia>
There is a risk that this may be very hard to catch in codebases, but maybe we just got unlucky with this

[10:58:10.0911] <yulia>
Since chrome is about to ship I didn't think it would be wise to wait on notifying you

[10:58:53.0815] <shu>
indeed, we have a window of a week until i need to request stable respins, which is not good

[10:59:13.0750] <shu>
so much appreciated there

[11:00:29.0058] <shu>
maybe this is the chance to get `groop` after all

[12:12:05.0246] <yulia>
shu: ljharb it... isn't looking good. Two more regressions: https://github.com/tc39/proposal-array-grouping/issues/44

[12:19:51.0959] <Justin Ridgewell>
üò≠

[12:20:58.0470] <Justin Ridgewell>
Is this the same as that Lego site‚Äôs using an array as a hash map?

[12:59:00.0192] <bakkot>
the cloud.ibm.com one appears to be, though it's different code

[13:41:05.0245] <shu>
yulia: thanks!

[13:41:13.0432] <shu>
alas, i am unshipping this

[14:27:57.0824] <bakkot>
sigh

[14:28:19.0179] <bakkot>
that was the only good other name

[14:30:35.0401] <Michael Ficarra>
there's always `smoosh`

[14:30:49.0364] <shu>
what about `bucket`

[14:30:56.0867] <shu>
or the more provocative `buckit`

[14:31:22.0927] <Michael Ficarra>
`smooshIntoBuckets`

[14:31:25.0190] <shu>
buck it, we're doing 5 groups

[14:33:20.0146] <Kris Kowal>
I has a bucket.

[14:33:57.0715] <shu>
the array-as-hash-table use case makes name picking pretty unpredictable

[14:34:01.0969] <shu>
who knows what keys they're using

[15:56:51.0447] <Justin Ridgewell>
Let's introduce a new meta-object protocol called `getAndApply`, and update `Array.p.group` to:
1. Returned undefined for `get` where the receiver is an array instance
2. Return the function for `get` where the receiver is `Array.prototype`
3. Invokes the method when doing `[].group()` (`getAndApply`)

[15:57:17.0188] <Justin Ridgewell>
Then any new array methods can just be hidden from these terrible sites.


2022-11-08
[16:04:49.0314] <Michael Ficarra>
or.... we just choose a different name

[16:05:09.0039] <Michael Ficarra>
and eventually stop trying to put new things on `Array.prototype`

[16:05:27.0416] <Michael Ficarra>
hopefully one day we can have built-in modules or something and then build out a nice stdlib

[16:05:35.0171] <shu>
yeah i do not think we should introduce a new MOP protocol for this

[16:06:15.0885] <Kris Kowal>
Symbol.facetious

[16:06:23.0783] <bakkot>
quite right, we should use the existing `document.all` protocol

[16:06:59.0102] <Michael Ficarra>
I was waiting for someone to bring up `IsHTMLDDA`

[16:27:02.0402] <Justin Ridgewell>
We pre-scan the source text to see if the word ‚Äúgroup‚Äù appears anywhere, and if so, we do not install the method. Group is only accessible through computed property access were the key is not literally the string ‚Äúgroup‚Äù.

[18:16:00.0900] <Jack Works>
> <@shuyuguo:matrix.org> who knows what keys they're using

maybe the engine need to record names that added to the array happens in Web

[18:18:17.0779] <Jack Works>
> <@jridgewell:matrix.org> We pre-scan the source text to see if the word ‚Äúgroup‚Äù appears anywhere, and if so, we do not install the method. Group is only accessible through computed property access were the key is not literally the string ‚Äúgroup‚Äù.

and developers need to use it by `array["gro" + "up"]()` right

[18:30:07.0994] <shu>
> <@jackworks:matrix.org> maybe the engine need to record names that added to the array happens in Web

that sounds way too expensive to be feasible

[18:30:12.0909] <shu>
also privacy and fingerprinting concerns?

[00:58:26.0471] <Jack Works>
> <@shuyuguo:matrix.org> that sounds way too expensive to be feasible

I thought the engine was already doing that today, e.g. metrics of Web API usage

[08:07:13.0378] <shu>
those are known counters, they aren't tracking new strings

[12:32:43.0376] <shu>
yulia: is Nightly shipping change-array-by-copy?

[12:33:23.0528] <shu>
`toSorted`, `toSpliced`, and `toReversed` seem unlikely to be used as keys

[12:33:29.0034] <shu>
but i am not so sure about `with`

[12:56:13.0062] <bakkot>
`with` seems a lot less likely than `group`

[13:00:48.0369] <yulia>
> <@shuyuguo:matrix.org> yulia: is Nightly shipping change-array-by-copy?

only behind a build time flag

[13:32:32.0830] <shu>
okay, thanks

[13:32:50.0427] <shu>
i tried looking for the ibm issue and the other issue on the chromium issue tracker and didn't see anything

[13:34:10.0099] <shu>
canary population is pretty small, but i wonder if there're biases in play with people not filing issues, which would be unfortunate

[13:34:49.0623] <shu>
> <@bakkot:matrix.org> `with` seems a lot less likely than `group`

i agree, guess we'll see

