2022-11-02
[15:56:33.0083] <bakkot>
PSA: we just landed a commit on ecma262 which tweaks the formatting, which is the sort of thing which causes a lot of merge conflicts. if you have an in-flight PR and you're rebasing on main, you can avoid manually applying the formatting by using the following series of commands:

```
git rebase -i 0090daf^ # 0090daf is the commit where the formatter is applied
git rebase -X theirs 0090daf --exec "npm i && npm run format && git commit --amend -a --no-edit"
git rebase -i main
```
this splits up the rebase into 1) everything before the formatter was applied, 2) the formatter, which will be done for you, 3) everything after the formatter. any conflicts in parts 1 and 3 you will need to handle manually, just like you would in the absence of the formatter (or feel free to ask the editors for help)


2022-11-07
[10:21:20.0830] <shu>
yulia: are we unshipping `group`?

[10:21:26.0878] <shu>
 * yulia: are we unshipping `group`?

[10:49:02.0930] <ljharb>
oof, i hope not - let's at least see if we can fix lastpass first

[10:50:46.0642] <shu>
hm, even if we can i'm still leaning towards unshipping in chrome

[10:51:07.0420] <shu>
because i assume it'll take a while for lastpass's fix to deploy to a large enough % of its customers

[10:53:40.0259] <ljharb>
i'd still want to know what code was breaking on it

[10:54:32.0347] <shu>
+1, the bugzilla comment reads to me as a suspicion, i want to hear it confirmed first

[10:54:53.0377] <shu>
(i mean it sounds likely, but still)

[10:57:37.0180] <yulia>
There is a risk that this may be very hard to catch in codebases, but maybe we just got unlucky with this

[10:58:10.0911] <yulia>
Since chrome is about to ship I didn't think it would be wise to wait on notifying you

[10:58:53.0815] <shu>
indeed, we have a window of a week until i need to request stable respins, which is not good

[10:59:13.0750] <shu>
so much appreciated there

[11:00:29.0058] <shu>
maybe this is the chance to get `groop` after all

[12:12:05.0246] <yulia>
shu: ljharb it... isn't looking good. Two more regressions: https://github.com/tc39/proposal-array-grouping/issues/44

[12:19:51.0959] <Justin Ridgewell>
üò≠

[12:20:58.0470] <Justin Ridgewell>
Is this the same as that Lego site‚Äôs using an array as a hash map?

[12:59:00.0192] <bakkot>
the cloud.ibm.com one appears to be, though it's different code

[13:41:05.0245] <shu>
yulia: thanks!

[13:41:13.0432] <shu>
alas, i am unshipping this

[14:27:57.0824] <bakkot>
sigh

[14:28:19.0179] <bakkot>
that was the only good other name

[14:30:35.0401] <Michael Ficarra>
there's always `smoosh`

[14:30:49.0364] <shu>
what about `bucket`

[14:30:56.0867] <shu>
or the more provocative `buckit`

[14:31:22.0927] <Michael Ficarra>
`smooshIntoBuckets`

[14:31:25.0190] <shu>
buck it, we're doing 5 groups

[14:33:20.0146] <Kris Kowal>
I has a bucket.

[14:33:57.0715] <shu>
the array-as-hash-table use case makes name picking pretty unpredictable

[14:34:01.0969] <shu>
who knows what keys they're using

[15:56:51.0447] <Justin Ridgewell>
Let's introduce a new meta-object protocol called `getAndApply`, and update `Array.p.group` to:
1. Returned undefined for `get` where the receiver is an array instance
2. Return the function for `get` where the receiver is `Array.prototype`
3. Invokes the method when doing `[].group()` (`getAndApply`)

[15:57:17.0188] <Justin Ridgewell>
Then any new array methods can just be hidden from these terrible sites.


2022-11-08
[16:04:49.0314] <Michael Ficarra>
or.... we just choose a different name

[16:05:09.0039] <Michael Ficarra>
and eventually stop trying to put new things on `Array.prototype`

[16:05:27.0416] <Michael Ficarra>
hopefully one day we can have built-in modules or something and then build out a nice stdlib

[16:05:35.0171] <shu>
yeah i do not think we should introduce a new MOP protocol for this

[16:06:15.0885] <Kris Kowal>
Symbol.facetious

[16:06:23.0783] <bakkot>
quite right, we should use the existing `document.all` protocol

[16:06:59.0102] <Michael Ficarra>
I was waiting for someone to bring up `IsHTMLDDA`

[16:27:02.0402] <Justin Ridgewell>
We pre-scan the source text to see if the word ‚Äúgroup‚Äù appears anywhere, and if so, we do not install the method. Group is only accessible through computed property access were the key is not literally the string ‚Äúgroup‚Äù.

[18:16:00.0900] <Jack Works>
> <@shuyuguo:matrix.org> who knows what keys they're using

maybe the engine need to record names that added to the array happens in Web

[18:18:17.0779] <Jack Works>
> <@jridgewell:matrix.org> We pre-scan the source text to see if the word ‚Äúgroup‚Äù appears anywhere, and if so, we do not install the method. Group is only accessible through computed property access were the key is not literally the string ‚Äúgroup‚Äù.

and developers need to use it by `array["gro" + "up"]()` right

[18:30:07.0994] <shu>
> <@jackworks:matrix.org> maybe the engine need to record names that added to the array happens in Web

that sounds way too expensive to be feasible

[18:30:12.0909] <shu>
also privacy and fingerprinting concerns?

[00:58:26.0471] <Jack Works>
> <@shuyuguo:matrix.org> that sounds way too expensive to be feasible

I thought the engine was already doing that today, e.g. metrics of Web API usage

[08:07:13.0378] <shu>
those are known counters, they aren't tracking new strings

[12:32:43.0376] <shu>
yulia: is Nightly shipping change-array-by-copy?

[12:33:23.0528] <shu>
`toSorted`, `toSpliced`, and `toReversed` seem unlikely to be used as keys

[12:33:29.0034] <shu>
but i am not so sure about `with`

[12:56:13.0062] <bakkot>
`with` seems a lot less likely than `group`

[13:00:48.0369] <yulia>
> <@shuyuguo:matrix.org> yulia: is Nightly shipping change-array-by-copy?

only behind a build time flag

[13:32:32.0830] <shu>
okay, thanks

[13:32:50.0427] <shu>
i tried looking for the ibm issue and the other issue on the chromium issue tracker and didn't see anything

[13:34:10.0099] <shu>
canary population is pretty small, but i wonder if there're biases in play with people not filing issues, which would be unfortunate

[13:34:49.0623] <shu>
> <@bakkot:matrix.org> `with` seems a lot less likely than `group`

i agree, guess we'll see


2022-11-09
[06:22:58.0899] <rbuckton>
yulia | ü§ï hopefully back in the afternoon: Do you think either you or someone from your organization would have some time in the next few weeks before plenary to discuss Mozilla's position on the Explicit Resource Management proposal?

[06:23:57.0387] <yulia | ü§ï hopefully back in the afternoon>
Sure, we discussed before the last presentation. dminor and I can set something up

[06:24:43.0236] <yulia | ü§ï hopefully back in the afternoon>
before next plenary or? (we will also be in a coruna)

[06:24:50.0387] <rbuckton>
That's fine. As far as scheduling, I'm on the US east coast now. 

[06:25:17.0165] <rbuckton>
Before, if possible. I'd like to be able to advance if that's feasible. 

[06:27:07.0255] <yulia>
ok, i'll set something up


2022-11-10
[17:10:38.0989] <shu>
anyone interested in running an incubator call for BigInt math (round 2) before the next plenary?


2022-11-14
[14:47:04.0181] <bakkot>
ljharb: the tc39 calendar has the plenary as 7 hours long, which is presumably a mistake


2022-11-15
[16:04:21.0486] <ljharb>
fixed i think - since it‚Äôs in person tho isn‚Äôt that right? 10-5?

[16:04:54.0262] <bakkot>
I'm just going off of the agenda

[16:05:59.0758] <ljharb>
ah ok they‚Äôre 10-4

[16:10:58.0701] <shu>
looking forward to falling asleep mid-sentence yall

[11:02:21.0081] <Ashley Claymore>
Apologies to anyone trying to join the R&T monthly meeting. The zoom link appears to have stopped working.
new link in the google doc, linked from the tc39 event


2022-11-16
[04:19:58.0054] <Rob Palmer>
2023 Plenary Schedule is now posted on [the Reflector](https://github.com/tc39/Reflector/issues/453).  There's just one date missing that will be confirmed very soon.


2022-11-17
[17:53:12.0244] <shu>
ljharb: you've been vocal in the past about coercing arguments in the order in which they appear. is there code that you've seen that actually depends on that ordering?

[17:53:56.0053] <shu>
i'm thinking of proposing a breaking change to the order of coercion for Atomics methods like `Atomics.store(ta, idx, val)` to coerce idx, val, *then* validate the TA

[17:54:21.0473] <shu>
with resizable buffers, having to recheck detached/out-of-boundness and reloading the length after each argument coercion is really unfortunate

[17:55:18.0726] <shu>
it's kind of a bugfarm (sometimes security bugs)

[18:31:23.0879] <ljharb>
no code i think the committee would respect, I‚Äôd guess. why is it a bug farm?

[18:31:39.0838] <ljharb>
I‚Äôm confused about the problem it‚Äôd be solving

[18:35:48.0758] <Jack Works>
Agree with shu. Don't think coerce order will break anything 

[18:45:03.0984] <shu>
it's a bug farm because it's easy to forget that coercing `idx` and `val` can detach `ta`

[18:45:15.0655] <shu>
(and with resizable buffers, can resize `ta`)

[18:46:03.0551] <shu>
TA detachment and resizing is a qualitatively worse kind of user code than other arbitrary user code, because code that forget to recheck for detachedness after each argument coercion can end up reading out-of-bounds into the buffer, depending on the implementation

[18:46:12.0006] <shu>
 * TA detachment and resizing is a qualitatively worse kind of user code than other arbitrary user code, because code that forget to recheck for detachedness after each argument coercion can end up reading out-of-bounds into the buffer, depending on the implementation

[18:46:20.0487] <Jack Works>
"easy to forget" do you mean when v8 is optimizing code? 

[18:46:41.0711] <shu>
that, and i also mean engineers or spec authors actually forgetting even when implementing the slow path

[18:46:55.0241] <shu>
i personally missed a bunch of these in the resizable buffers spec draft

[18:48:26.0482] <shu>
TA and Atomics methods depend on the TA being in a valid state, life will just be a lot easier if we can rework these methods to 1) validate once instead of multiple times and 2) after validation, check that no user code can ever be called again until method exit

[18:48:59.0753] <shu>
 * TA and Atomics methods depend on the TA being in a valid state, life will just be a lot easier if we can rework these methods to 1) validate once instead of multiple times and 2) after validation, check that no user code can ever be called again until method exit

[18:50:00.0631] <shu>
> <@ljharb:matrix.org> I‚Äôm confused about the problem it‚Äôd be solving

what i'm solving for is "increasing likelihood of correct implementation, where incorrect implementation is often a security bug and not just misbehavior"

[18:51:52.0837] <shu>
to be clear, user code re-entrancy is a general problem. i'm singling out TAs because TA bugs result in more, and more serious, security bugs

[18:54:07.0978] <Jack Works>
So the ideal order is: idx check, val check, (no user code now), TA check, Atomics.store, (user code again)?

[18:54:37.0225] <shu>
it's a little trickier than that unfortunately, because `val` coercion depends on looking at whether `ta` is a BigInt TA or a non-BigInt TA

[18:55:02.0921] <shu>
so i think the ideal order is: coerce *but not validate* left-to-right, then validate left-to-right

[18:55:54.0505] <Jack Works>
lgtm

[18:55:56.0734] <shu>
so the order is: 1) ensure `ta` has the right internal slots, 2) coerce `idx`, 3) coerce `val`, (no user code after this point) 4) validate `ta`, 5) validate `idx` (if needed for atomic access)

[18:56:08.0694] <shu>
 * so the order is: 1) ensure `ta` has the right internal slots, 2) coerce `idx`, 3) coerce `val`, (no user code after this point) 4) validate `ta`, 5) validate `idx\` (if needed for atomic access)

[18:56:17.0296] <shu>
 * so the order is: 1) ensure `ta` has the right internal slots, 2) coerce `idx`, 3) coerce `val`, (no user code after this point) 4) validate `ta`, 5) validate `idx` (if needed for atomic access)

[19:45:31.0834] <ljharb>
in general, does anything validate besides TAs and Proxy?

[19:45:40.0016] <ljharb>
* in general, does anything validate besides TAs and Proxy?

[22:50:18.0463] <Richard Gibson>
ljharb: I think that depends upon your definition of "validate". For example, there are six opportunities for [String.prototype.split](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.split) to throw an exception (and also observably checks arguments out-of-order)‚Äîdoes that count?

[06:52:58.0584] <ljharb>
im trying to understand she‚Äôs mental model here; it‚Äôs probably fine if TA/Proxy is ‚Äúspecial‚Äù but i still don‚Äôt understand why it‚Äôs not easier to implement correctly if you fully process args left to right

[07:02:48.0197] <Ashley Claymore>
because processing later args can invalidate previous validations

[07:02:55.0893] <Ashley Claymore>
 * because processing later args can invalidate previous validations

[07:30:39.0760] <shu>
ljharb: yeah what Ashley Claymore said. fully left-to-right means you validate `ta`, then validate `idx`, then validate `val`, then need to validate `ta` *again*

[07:31:52.0767] <ljharb>
ahhhhh ok

[07:32:06.0151] <shu>
cause of, you know, `valueOf` and whatnot

[07:32:11.0621] <ljharb>
thanks, that makes sense now, let me think about it

[07:33:17.0256] <shu>
actually in the resizable case it's even dumber

[07:33:36.0960] <shu>
it's validate `ta`, validate `idx`, validate `val`, re-validate `ta`, then also re-validate `idx` because `ta` might not be out of bounds but just shrunk a little bit

[07:34:38.0561] <Ashley Claymore>
`while (somethingCouldChange) validateArgs(...args)`

[08:32:27.0243] <yulia>
rbuckton: just checking, did you see my invite for today?

[08:33:45.0873] <rbuckton>
I did not, no.

[11:34:21.0193] <ljharb>
shu: so, generally i think of "processing" arguments left to right - not necessarily validating them. meaning, i'd maybe expect something like:
1. ensure `ta` is a Typed Array
2. coerce `idx` to a number
3. coerce `val` to whatever it needs to be, if any
4. throw if TA is out of bounds or detached or whatever
5. if needed, validate `val`

thoughts on that?

[11:53:00.0201] <shu>
yes that seems to match what i said above about an "ideal order"

[11:53:11.0321] <shu>
coerce left-to-right, then validate left-to-right

[11:53:18.0486] <shu>
where "coerce" is the phase that can call user code

[11:53:33.0964] <shu>
right now we don't have such a distinction, and we do both at the same time

[11:58:21.0079] <ljharb>
right. my earlier question is because i suspect most things don't actually need to "validate" (or at least, don't need to validate something that could be changed by user code post-coercion), so it doesn't come up often

[12:00:51.0057] <shu>
yeah

[12:01:16.0203] <shu>
so it sounds like you're amenable to having distinct phases like that?

[12:01:20.0671] <shu>
(if web compatible, of course)

[12:03:12.0560] <ljharb>
tentatively yes, i'd just want to make sure there's no weird cases that would arise from applying that rule universally (which might be fine ofc, but it's hard to know in advance)

[12:03:27.0957] <ljharb>
 * tentatively yes, i'd just want to make sure there's no weird cases that would arise from applying that rule universally (which might be fine ofc, but it's hard to know in advance)

[12:11:35.0350] <shu>
i wasn't planning on applying it universally

[12:12:03.0409] <shu>
though i suspect you are right that basically only TAs (and DataViews) and proxies even have a sense of "valid state" at all

[12:12:23.0110] <shu>
but i only really care about TAs and DataViews


2022-11-18
[10:35:02.0136] <Mathieu Hofman>
I was thinking of changing my attendance to the upcoming plenary from remote to in-person. Is it too late to make such a change? Is there still any space at the recommended hotels? And would there be office space on Friday ?

[10:40:18.0412] <nicolo-ribaudo>
There is still space in Hotel Avenida, which is one of the recommended hotels.

For the other questions, ryzokuken

[11:39:10.0147] <ryzokuken>
> <@mhofman:matrix.org> I was thinking of changing my attendance to the upcoming plenary from remote to in-person. Is it too late to make such a change? Is there still any space at the recommended hotels? And would there be office space on Friday ?

I believe we have space. I'll confirm from my colleagues and ping you.

[11:57:50.0648] <Rob Palmer>
Yes, please come in person! There are always no-shows so it would be great to see you Mathieu Hofman 

[13:34:18.0166] <Mathieu Hofman>
Ok great I'll fill up the in person form. 

[13:37:20.0158] <Mathieu Hofman>
 * Ok great I'll fill up the in person form. Should I book the hotel directly or does Igalia facilitates anything?

[13:39:50.0117] <littledan>
ryzokuken: ^

[13:45:09.0484] <ryzokuken>
> <@mhofman:matrix.org> Ok great I'll fill up the in person form. Should I book the hotel directly or does Igalia facilitates anything?

Yeah, we can take care of it for you. I'll reach out via DM

[13:49:08.0620] <Rob Palmer>
@ryzokuken do we have capacity for others who still wish to sign up? 

[13:50:00.0685] <ryzokuken>
Yeah, I'm discussing with Mathieu Hofman right now.

[13:50:18.0432] <littledan>
ryzokuken: I think the question as about further additional people beyond Mathieu

[13:50:30.0029] <ryzokuken>
Oh, well, I'll have to ask.

[13:51:45.0218] <ryzokuken>
Rob Palmer: i think it should be doable but I'll confirm with my colleagues CET morning.

[13:59:39.0508] <Rob Palmer>
Thank you. I hope we can maximize the number of folk who get to try out Spanish food.

[14:00:00.0757] <ryzokuken>
> <@robpalme:matrix.org> Thank you. I hope we can maximize the number of folk who get to try out Spanish food.

As long as they can keep up with Spanish meal timings üôà


2022-11-19
[14:59:52.0287] <ljharb>
does anyone know how i could detach an arraybuffer in an env without postMessage or structuredClone? (non-latest node, essentially)

[15:28:35.0002] <Ashley Claymore>
Maybe via webassembly APIs? Or is that also too new? https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Memory/grow


2022-11-20
[17:48:03.0099] <bakkot>
ljharb: node has supported postMessage for a long time; how old a node are you talking?

[17:54:06.0956] <bakkot>
(there isn't anything in the language itself, so it'll depend on what exactly your host provides)

[20:38:54.0241] <ljharb>
um, even node 19 doesn't have postMessage?

[20:39:46.0947] <ljharb>
 * um, even node 19 doesn't have postMessage?

[20:40:14.0621] <ljharb>
i mean, atm i have no solution in node at all, so wasm would be something

[20:40:59.0689] <ljharb>
node 0.5 has ArrayBuffer at least, so, as old as possible :-)

[00:23:58.0059] <bakkot>
ljharb: ah, sorry, it does but it's hard to get to

[00:24:02.0586] <bakkot>
`(new (require('worker_threads').MessageChannel)).port1.postMessage(null, [y.buffer])`

[00:26:35.0286] <bakkot>
works in 12 but not 10, but there might be a different way of getting at MessageChannel on older versions

[00:30:56.0060] <bakkot>
hm, no, nothing else I can see from a quick glance at https://nodejs.org/docs/latest-v10.x/api/all.html

[00:31:03.0376] <bakkot>
so might not be something you can do in nodes older than 12

[00:31:15.0468] <bakkot>
(or 10 with --experimental-workers)

[09:30:51.0371] <ljharb>
thanks tho, that still helps a lot

[09:31:00.0972] <ljharb>
otherwise i was gonna have to write wasm


2022-11-22
[16:02:37.0888] <Michael Ficarra>
> <@ljharb:matrix.org> otherwise i was gonna have to write wasm

you mean otherwise you were gonna *get* to write wasm

[17:54:18.0889] <rkirsling>
another thing that got reported to every browser individually:
https://bugzilla.mozilla.org/show_bug.cgi?id=1800062
https://bugs.chromium.org/p/v8/issues/detail?id=13469

[17:54:59.0320] <rkirsling>
those should be closable; there might be a web reality bug there but I'm not even certain of that because engine262 matches JSC/V8/SM

[18:05:06.0381] <bakkot>
rkirsling: that's https://github.com/tc39/ecma262/issues/2659

[18:10:10.0478] <rkirsling>
nice

[18:11:26.0381] <rkirsling>
thanks


2022-11-23
[11:26:29.0223] <TabAtkins>
FYI: I've had to delete another abusive comment from Aaron Adams (@aadamsx on GitHub) in the pipeline repo. I'm not specifically seeking any action, because I don't want to bother, just noting it for posterity if they decide to become active again and I need to ask for a ban.

[15:32:33.0283] <ljharb>
delete, not just hide?

[15:32:39.0221] <ljharb>
we generally don't delete things


2022-11-26
[04:06:09.0636] <rkirsling>
seems like it was really good that I presented at JSConf JP; there were a number of people afterwards who were just really excited to get to talk to somebody in TC39 and ask all sorts of questions

[04:06:40.0241] <rkirsling>
hopefully the Japanese JS community will have more chances for that in future :)

[04:26:06.0191] <Rob Palmer>
There is at least one trip planned for next year. September 26-28 is the Tokyo plenary. So far we do not have a community event planned. If you have contacts, that would be helpful.


2022-11-27
[18:04:27.0552] <rkirsling>
indeed! Yosuke Furukawa is the main organizer for JSConf JP so I think he may be able to help us (IIRC littledan was even talking with him pre-pandemic about community outreach)


2022-11-28
[00:50:55.0757] <Rob Palmer>
This week's plenary meeting will be very busy. It is also on CEST (Madrid time) which is super early for US timezone folk.

We have more content than time available. Please consider if you think any agenda items you own could use less time, or could be deprioritized, and then PR the agenda accordingly.

[06:24:43.0626] <Alex Vincent>
FWIW, I _have_ thought about it.  (I'm still basically a newbie here.)  I had requested 30 minutes: 10 for my talk and 20 for discussion, as I hope for advancing my Mass Proxy Revocation proposal to stage 1.  I don't have a feel for how these votes go.  Even if I gave up half the discussion time, that really wouldn't buy very much.

[06:26:32.0256] <Alex Vincent>
 * FWIW, I _have_ thought about it.  (I'm still basically a newbie here.)  I had requested 30 minutes: 10 for my talk and 20 for discussion, as I hope for advancing my Mass Proxy Revocation proposal to stage 1.  I don't have a feel for how these votes go.  Even if I gave up half the discussion time, that really wouldn't buy very much.

[13:23:38.0394] <bakkot>
Kris Kowal: 20 minutes for the Module Harmony discussion seems wildly optimistic

[13:23:47.0824] <bakkot>
looking forward to it though

[13:40:39.0258] <Rob Palmer>
Hey all, we have an unusually large number of personal scheduling constraints for this meeting. This is making it hard to create a viable schedule. The chairs will be reaching out to those affected. 

If you are able to relax your constraints, please do so. It also helps if you can clarify where something is a *weak*preference vs a hard constraint by PRing the agenda.

[14:45:40.0543] <Andrew Brown>
Just to confirm since it's my first time attending: this channel will have a Jitsi URL posted somewhere once the meeting starts tomorrow?

[14:46:00.0042] <ryzokuken>
Andrew Brown: there's a sign-up form for the call link

[14:46:17.0351] <Andrew Brown>
Can you point me to it?

[14:50:01.0273] <ryzokuken>
you're right, there is indeed no link yet in the reflector

[14:50:15.0144] <ryzokuken>
we will send a link to the sign-up form before the meeting

[15:03:38.0111] <ryzokuken>
draft schedule is up! link in the reflector.


2022-11-29
[00:26:47.0914] <littledan>
Are we getting the video conference signup link?

[00:27:49.0101] <littledan>
I take it the meeting starts in half an hour. I don‚Äôt see it on the Reflector

[00:40:38.0502] <Rob Palmer>
It was posted on the Reflector 30mins ago.  Please refresh.

[00:44:11.0167] <Rob Palmer>
We are now admitting people to the Google Meet.  Please use Incognito/Private browsing mode - because that will allow you to specify your name.  So you can call yourself "Name (Affiliation)".

[00:59:00.0140] <Rob Palmer>
We will begin the meeting in one minute!

[00:59:21.0130] <Rob Palmer>
If anyone has any troubles dialling in, please say here.

[01:00:10.0351] <yulia>
Is tcq not working for anyone else?

[01:00:14.0457] <yulia>
I get meeting not available

[01:00:33.0478] <Alex Vincent>
try reloading the page - that worked for me yulia

[01:01:34.0132] <yulia>
I still get meeting not found. should it be TKTK or is the meeting id different?

[01:01:45.0693] <Rob Palmer>
The signin form is available on the Reflector - please can all in-person attendees fill it out too:  https://github.com/tc39/Reflector/issues/446

[01:02:41.0463] <Rob Palmer>
I just fixed the TCQ link on the draft schedule

[01:02:50.0593] <Alex Vincent>
hm, maybe I'd opened it as a fresh link from the Reflector issue

[01:03:00.0879] <rkirsling>
is it an obligation for the host to have a second CoC in play? obviously not a problem if they do have one, but somehow I don't have a recollection of that before

[01:03:04.0405] <yulia>
Found it -- the link is different than the text

[01:03:18.0271] <Robert Pamely>
Is it viable to turn off the lights above the projection screen?

[01:03:28.0929] <Robert Pamely>
Are those lights independent?

[01:03:40.0980] <rkirsling>
 * is it an obligation for the host to have a second CoC in play? obviously not a problem if they do have one, but somehow I don't have a recollection of that before

[01:05:38.0645] <Rob Palmer>
Romulo Cintra: Can you help with lights?

[01:07:01.0825] <Rob Palmer>
Thank you Jason and Ashley and Kevin for volunteering for notes!

[01:07:20.0538] <bakkot>
btw the bot is using a new language model, which hopefully is better

[01:07:22.0404] <bakkot>
we'll see though

[01:07:28.0603] <Romulo Cintra>
> <@robpalme:matrix.org> Romulo Cintra: Can you help with lights?

?

[01:08:06.0157] <Christian Ulbrich>
Romulo Cintra: Thx!

[01:08:06.0852] <Robert Pamely>
Thank you

[01:08:07.0861] <jasew>
That's much better

[01:08:22.0269] <Rob Palmer>
The room is now is dark mode, which helps us to see the projector screen.

[01:09:03.0415] <Romulo Cintra>
üåì

[01:09:11.0385] <nicolo-ribaudo>
Why is the "attendees" section in the notes only for remote people? Having the abbreviations there helps also for in-person attendees

[01:09:23.0534] <Rob Palmer>
it should be for both

[01:10:16.0214] <msaboff>
Please add your name, abbreviation and organization to the attendees section of the notes (each day).

[01:12:06.0207] <Justin Ridgewell>
Rob Palmer: I can't find the sign in form for remote attendees

[01:12:17.0823] <Justin Ridgewell>
Only the in person form

[01:12:20.0710] <ryzokuken>
Justin Ridgewell: it's on the reflector

[01:12:24.0321] <ryzokuken>
please refresh

[01:12:37.0698] <Justin Ridgewell>
I did...

[01:12:41.0617] <ryzokuken>
it was added a short while ago, you might have the old page loaded

[01:13:02.0412] <Rob Palmer>
It's in the video link section

[01:13:22.0226] <Justin Ridgewell>
Ahh, got it

[01:13:30.0800] <Justin Ridgewell>
It's tooooooo early.

[01:14:04.0252] <pipobscure>
BTW TCQ seems to still be on the Welcome/Intro

[01:14:52.0711] <jasew>
ryzokuken

[01:15:06.0217] <jasew>
Thanks

[01:16:32.0661] <rkirsling>
> <@jridgewell:matrix.org> It's tooooooo early.

don't you mean late

[01:16:57.0796] <Justin Ridgewell>
4am in NYC. I just woke up

[01:17:04.0724] <rkirsling>
ohhh right whoops

[01:17:22.0228] <rkirsling>
true dedication

[01:17:40.0359] <msaboff>
> <@jridgewell:matrix.org> 4am in NYC. I just woke up

1am in California!

[01:17:55.0750] <shu>
i went to sleep at 8:30

[01:17:56.0213] <Rob Palmer>
Thank you for your dedication!

[01:18:21.0329] <msaboff>
> <@shuyuguo:matrix.org> i went to sleep at 8:30

That is about when I went to sleep.

[01:18:25.0986] <shu>
i don't want to be dedicated i want to be asleep

[01:20:22.0963] <rkirsling>
> <@shuyuguo:matrix.org> i don't want to be dedicated i want to be asleep

eternal mood

[01:20:40.0763] <rkirsling>
except that it's 6pm in Tokyo for this meeting

[01:20:50.0766] <rkirsling>
I'm now doomed for US meetings instead lol

[01:28:34.0991] <Rob Palmer>
Slides:  https://docs.google.com/presentation/d/1sWm_ynPyH_4XHUVwRuGIB6McALQHZXdENncu7BD1q9Y/

[01:42:46.0509] <Rob Palmer>
If anyone struggles with screen-sharing, please just post a link to your slides here and someone helpful can screenshare on your behalf.

[01:47:10.0309] <rkirsling>
> <@rkirsling:matrix.org> is it an obligation for the host to have a second CoC in play? obviously not a problem if they do have one, but somehow I don't have a recollection of that before

this was a non-rhetorical question re: hosting, btw

[01:48:19.0575] <waldemar>
Is there a list of in-person attendees that the remote folks can see?

[01:48:31.0819] <waldemar>
I can't tell who is in the room at the moment

[01:49:12.0029] <Rob Palmer>
Waldermar, I'll update the notes doc to ensure in-person attendees are listed

[01:50:14.0648] <rbuckton>
I think we actually skipped the "traditional" in-person introductions at the start of the meeting, though that's understandable given how packed the agenda is.

[01:51:15.0044] <Rob Palmer>
we did a quick names-only runaround in the room before the meeting started - I will ensure this goes in the notes

[01:53:42.0548] <Luca Casonato>
waldemar: we have added "in-person" and "remote" labels to the attendee list in the notes

[01:55:38.0344] <rkirsling>
> <@rkirsling:matrix.org> is it an obligation for the host to have a second CoC in play? obviously not a problem if they do have one, but somehow I don't have a recollection of that before

 * this was a non-rhetorical question re: hosting, btw (am I just forgetful/unobservant?)

[01:56:19.0970] <ryzokuken>
> <@rkirsling:matrix.org> this was a non-rhetorical question re: hosting, btw (am I just forgetful/unobservant?)

apologies if you were taken by surprise, I tried to give a heads up in the reflector post

[01:56:51.0052] <rkirsling>
no need for apology, just was curious about it

[01:56:54.0673] <ryzokuken>
this was basically a request by the Igalia CoC committee and the chair group decided to respect it, I'm not sure if a second CoC has been applied in the past.

[02:13:23.0195] <littledan>
What does STR mean?

[02:13:35.0545] <ryzokuken>
it was answered in #tc39-beginners:matrix.org 

[02:13:40.0676] <nicolo-ribaudo>
Steps to reproduce 

[02:13:50.0239] <littledan>
Oh thanks

[02:14:05.0000] <bakkot>
someone want to PR the glossary with that? seems useful

[02:18:26.0580] <Luca Casonato>
> <@bakkot:matrix.org> someone want to PR the glossary with that? seems useful

ill do it

[02:20:43.0998] <rkirsling>
is it used enough to justify? seems like we all shared the same confusion, so it might not be encourageable?

[02:20:52.0544] <rkirsling>
 * is it used enough to justify? seems like we all shared the same confusion, so it might not be encourageable?

[02:21:31.0256] <littledan>
We often say ‚Äútest case‚Äù for this sort of thing

[02:27:48.0410] <Luca Casonato>
https://github.com/tc39/how-we-work/pull/124 <- PR, if we want to merge it.

[02:30:20.0947] <littledan>
‚ÄúgroupedBy‚Äù

[02:34:57.0568] <littledan>
Three options or two?

[02:35:08.0670] <rbuckton>
A static method results in a pretty bad developer experience though. I've had some of the same issues with some of the Temporal APIs

[02:35:44.0532] <rkirsling>
which do you mean?

[02:35:49.0591] <Rob Palmer>
https://github.com/tc39/how-we-work/blob/main/presenting.md#temperature-checks

[02:37:37.0472] <rbuckton>
I discussed this awhile back about the poor DX around things like `Temporal.Duration.compare` being static only, though I haven't followed up. Until something like pipeline advances, it breaks left-to-right reading order.

[02:37:44.0490] <rkirsling>
tbh I feel like this is about more than just the method at hand is the thing

[02:38:19.0875] <rkirsling>
given the difficulty of adding methods to Array in general

[02:38:54.0529] <rbuckton>
I agree there, its disheartening that `Array` is constantly so difficult to extend.

[02:39:05.0424] <Michael Ficarra>
should we consider just pursuing this as an iterator helper method?

[02:40:54.0963] <rbuckton>
Its unfortunate because I believe this is something that belongs on Array.prototype. And this won't be the last time we run into this.

[02:43:51.0620] <Robert Pamely>
What is it that the static methods is consistent with? Object groupBy?

[02:43:57.0409] <rbuckton>
Another way to approach this might have been a `.collect(collector)` a. la. Java collectors (https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html), but that's a completely different proposal

[02:44:38.0590] <rbuckton>
(i.e., `array.collect(Collector.groupBy(keySelector))`)

[02:44:47.0120] <nicolo-ribaudo>
> <@rpamely:matrix.org> What is it that the static methods is consistent with? Object groupBy?

Object.fromEntries, which produces an object given an array

[02:45:01.0169] <Robert Pamely>
Oh I see ok

[02:45:49.0851] <Robert Pamely>
I see that as quite a different helper from groupBy

[02:46:12.0038] <yulia>
did i miss the bit where we had bathroom explainations? cc ryzokuken 

[02:46:16.0019] <Kris Kowal>
I like the suggestion for `Object.groupBy` and `Map.groupBy`, where you select the return type with the constructor.

[02:46:24.0655] <ryzokuken>
> <@yulia:mozilla.org> did i miss the bit where we had bathroom explainations? cc ryzokuken

oops, sorry

[02:46:25.0127] <Robert Pamely>
"Entries" are an array representation of an object. groupBy is an operation on an array.

[02:46:42.0290] <ryzokuken>
I could do that right after this item

[02:46:50.0022] <yulia>
> <@rpamely:matrix.org> "Entries" are an array representation of an object. groupBy is an operation on an array.

couldn't the same argument be made about entries?

[02:47:09.0528] <Robert Pamely>
Entries have to have a specific shape though

[02:47:43.0387] <Robert Pamely>
groupBy is more like reduce than fromEntries

[02:47:48.0643] <rbuckton>
> <@kriskowal:matrix.org> I like the suggestion for `Object.groupBy` and `Map.groupBy`, where you select the return type with the constructor.

I'm not entirely against it, but I'd again rather see something like a formal collector API that those statics could be built off of.

[02:47:51.0246] <Kris Kowal>
> <@rpamely:matrix.org> "Entries" are an array representation of an object. groupBy is an operation on an array.

Of a map (and by implication objects-as-dictionaries, which are map-alike)

[02:48:32.0148] <Kris Kowal>
> <@rbuckton:matrix.org> I'm not entirely against it, but I'd again rather see something like a formal collector API that those statics could be built off of.

Generators-as-collectors come to mind.

[02:48:32.0251] <Robert Pamely>
> <@kriskowal:matrix.org> Of a map (and by implication objects-as-dictionaries, which are map-alike)

Yes I guess specifically Entries are a representation of key-value pairs, which objects and Maps can represent

[02:48:46.0781] <jasew>
> <@kriskowal:matrix.org> I like the suggestion for `Object.groupBy` and `Map.groupBy`, where you select the return type with the constructor.

My understanding is this proposal only adds a static to Array right? Is there an addition to Object and Map also and i missed that?

[02:48:58.0933] <bakkot>
> <@kriskowal:matrix.org> Of a map (and by implication objects-as-dictionaries, which are map-alike)

what is this "of" attached to?

[02:49:18.0927] <bakkot>
> <@jasew:matrix.org> My understanding is this proposal only adds a static to Array right? Is there an addition to Object and Map also and i missed that?

I think it would only add statics to Object and Map, not to Array at all

[02:49:46.0110] <jasew>
I see

[02:50:03.0246] <Robert Pamely>
Given users are used to finding helpers like `reduce` on the array prototype, I don't think it will be obvious to look for these on Object and Map

[02:50:03.0759] <Kris Kowal>
Yes, I believe yulia suggested using Object and Map constructors as receivers _instead of_ Array.

[02:50:16.0462] <yulia>
yeah i think that was just a mistake in the slides

[02:51:38.0919] <Justin Ridgewell>
Yes, it was a typo to have `Array.groupBy` and `Tuple.groupBy`

[02:51:43.0461] <Kris Kowal>
In any case, `X.of` is the good precedent for `X.groupBy`. Both return instances of `X` and have an open range for values of `X`.

[02:51:59.0132] <Justin Ridgewell>
It should just be `Object.groupBy`, `Map.groupBy` (and `WeakMap`), and possibly `Record.groupBy`

[02:52:17.0762] <Kris Kowal>
That is, provides clear guidance for a library `SortedMap.groupBy`

[02:52:18.0285] <jasew>
This makes more sense to me now, thanks for clarifying 

[02:52:24.0871] <jasew>
 * This makes more sense to me now, thanks for clarifying 

[02:52:55.0334] <yulia>
> <@rpamely:matrix.org> Given users are used to finding helpers like `reduce` on the array prototype, I don't think it will be obvious to look for these on Object and Map

Object.entries can be created from a map. There we don't have entriesToObject on the map prototype or array prototype, so I think we have precedent for this. That said, i do understand where you are coming from, I am just agreeing with eemeli that we have similar patterns already

[02:53:24.0027] <bakkot>
`groupBy` is kind of a weird name if this is a static

[02:53:30.0489] <bakkot>
though I don't have a better one

[02:54:35.0546] <jasew>
fromGrouped? like fromEntries? I don't have a better name either

[02:54:53.0506] <Robert Pamely>
> <@jasew:matrix.org> fromGrouped? like fromEntries? I don't have a better name either

The input is not grouped

[02:55:01.0014] <rbuckton>
The Java grouping collector is `groupingBy`, which was one of the options listed as an alternative for the .prototype version, if we're going to change the name anyways

[02:55:30.0163] <bakkot>
if we're ok with `groupingBy` it can probably still be on Array.prototype

[02:55:41.0776] <bakkot>
I doubt that will have conflicts like `group` and `groupBy` did

[02:55:55.0449] <rbuckton>
> <@bakkot:matrix.org> if we're ok with `groupingBy` it can probably still be on Array.prototype

That would be my preference, though I'd lean more towards `.groupedBy` in that case.

[02:56:03.0708] <bakkot>
though `groupingByToMap` is... not... a great name

[02:56:21.0741] <bakkot>
yeah I think I like `groupedBy` personally

[02:56:23.0978] <yulia>
if we continue to go with the prototype, then I don't think we can again just implement it and hope for bugs if there are problems

[02:56:33.0365] <yulia>
is there a more robust way we can test this name?

[02:56:36.0629] <bakkot>
yulia: even with a really weird name like `groupingBy`?

[02:57:01.0758] <rbuckton>
`groupingBy` indicates something that produces a thing will do the grouping (i.e., Java's `Collectors.groupingBy`), where as `groupedBy` indicates something that produces the grouped result.

[02:57:07.0829] <bakkot>
conflicts with `group` and `groupBy` are not too surprising because those are natural names that people might use

[02:57:10.0092] <yulia>
groupingBy and groupToObject is probably safe... but is this really better than it being a static if we are looking for really weird anmes?

[02:57:11.0166] <rkirsling>
Object.groupsFromArray?

[02:57:27.0716] <bakkot>
> but is this really better than it being a static

eh, personally I think so

[02:57:36.0328] <yulia>
Object.toCategories?

[02:57:49.0383] <yulia>
idk

[02:57:51.0684] <bakkot>
statics are quite strange for this

[02:57:51.0909] <jasew>
Something with `from` in the name often implies one type (input) to another (usually the same as the reciever)

[02:57:56.0361] <Robert Pamely>
> <@yulia:mozilla.org> groupingBy and groupToObject is probably safe... but is this really better than it being a static if we are looking for really weird anmes?

One concern with static is chaining too. Without pipeline you lose the ability to easily chain at the end of array operations.

[02:58:20.0847] <yulia>
> <@rpamely:matrix.org> One concern with static is chaining too. Without pipeline you lose the ability to easily chain at the end of array operations.

you would not be chaining array methods anyway

[02:58:31.0337] <bakkot>
sure you would

[02:58:32.0534] <rkirsling>
> <@yulia:mozilla.org> Object.toCategories?

the FP community will surely have our heads üòÇ

[02:58:34.0012] <rbuckton>
As I mentioned earlier, I wonder if a comprehensive check for a more general-purpose `Array.prototype.collect` method would make sense, plus a formalized Collector API.

[02:58:45.0742] <bakkot>
`x.filter().groupBy()` is a pretty common thing to want

[02:59:00.0457] <yulia>
but you would have an object after groupBy

[02:59:00.0795] <Robert Pamely>
`Object.groupBy(arr.filter().map())` vs `arr.filter().map().groupedBy()`

[02:59:06.0116] <rbuckton>
> <@bakkot:matrix.org> `x.filter().groupBy()` is a pretty common thing to want

Yes, I use this pattern all the time with my own libraries.

[02:59:07.0535] <yulia>
ah i see what you folks mean

[02:59:29.0165] <yulia>
thats fair

[02:59:38.0299] <rkirsling>
`groop`

[02:59:45.0801] <bakkot>
> <@rbuckton:matrix.org> As I mentioned earlier, I wonder if a comprehensive check for a more general-purpose `Array.prototype.collect` method would make sense, plus a formalized Collector API.

I am not necessarily opposed to such a thing, but I have a hard time imagining it being as convenient as `groupBy`. `.collect(Collectors.groupBy)` is much worse than `groupedBy`.

[03:00:09.0358] <Robert Pamely>
> <@rkirsling:matrix.org> `groop`

it's called the JS language for a reason

[03:00:36.0122] <yulia>
i mean, we can't even decide on a name for the language so ;)

[03:00:51.0403] <yulia>
officially its ECMAScript, which is the only still-capitalized thing for Ecma international

[03:01:13.0274] <rbuckton>
> <@yulia:mozilla.org> but you would have an object after groupBy

That depends on the implementation. A query/sequence-like `groupBy` would produce an array of groupings (i.e., key/values pairs)

[03:01:13.0628] <Kris Kowal>
Using `groupBy` will be good for discovery.

[03:01:18.0447] <yulia>
so i prefer to think that its still European Computer Manufacturer's Association Script, or, per the sporting world, soccer script

[03:01:25.0508] <yulia>
ill show myself out

[03:01:44.0575] <rkirsling>
has anyone ever tried to align the capitalization of ECMAScript? haha

[03:02:10.0138] <rkirsling>
clearly a task worthy of time and effort üôÑ

[03:02:11.0508] <shu>
you know that's not the OG ecma

[03:02:13.0481] <Robert Pamely>
> <@kriskowal:matrix.org> Using `groupBy` will be good for discovery.

In what sense? Searching docs?

[03:02:16.0966] <shu>
the OG ecma is carton manufacturers

[03:02:21.0993] <shu>
https://www.ecma.org/

[03:02:42.0960] <Kris Kowal>
> <@rpamely:matrix.org> In what sense? Searching docs?

Googling ‚Äúmdn groupBy‚Äù on a lark and finding useful results.

[03:02:43.0399] <rbuckton>
> <@bakkot:matrix.org> I am not necessarily opposed to such a thing, but I have a hard time imagining it being as convenient as `groupBy`. `.collect(Collectors.groupBy)` is much worse than `groupedBy`.

Yes, but if we're considering statics anyways, a `.collect` would preserve LTR reading/method chaining

[03:03:10.0380] <rbuckton>
i.e., `.collect(Map.groupingBy)` for example

[03:03:31.0315] <Robert Pamely>
> <@kriskowal:matrix.org> Googling ‚Äúmdn groupBy‚Äù on a lark and finding useful results.

True, but "mdn group array" is a likely search too

[03:03:37.0343] <bakkot>
well, `.collect(Map,groupingBy, fn)`, really

[03:03:51.0174] <Robert Pamely>
where any solution would be found hopefully..

[03:03:56.0199] <Kris Kowal>
> <@shuyuguo:matrix.org> the OG ecma is carton manufacturers

Carton: the language formerly known as variously ECMAScript and JavaScript.

[03:04:10.0907] <rbuckton>
> <@bakkot:matrix.org> well, `.collect(Map,groupingBy, fn)`, really

Well, if you follow the Java design, `.collect(Map.groupingBy(fn))`

[03:04:25.0096] <bakkot>
> <@kriskowal:matrix.org> Googling ‚Äúmdn groupBy‚Äù on a lark and finding useful results.

no matter what option we do "groupBy" should be mentioned in the docs

[03:04:29.0680] <rbuckton>
> <@kriskowal:matrix.org> Carton: the language formerly known as variously ECMAScript and JavaScript.

That's actually kinda catchy

[03:04:32.0473] <Robert Pamely>
These full on Java suggestions are hurting my eyes

[03:04:44.0618] <bakkot>
re: discoverability, I'm more worried about people being able to do `x.gr...` in the console and get autocomplete which suggests the thing they wanted

[03:04:47.0240] <Rob Palmer>
We will resume the meeting in 56 mins at 13:00 local time.

[03:04:50.0399] <bakkot>
 * re: discoverability, I'm more worried about people being able to do `x.gr...` in the console and get autocomplete which suggests the thing they wanted

[03:04:55.0159] <bakkot>
which only works for proto methods, not static

[03:04:59.0531] <nicolo-ribaudo>
> <@bakkot:matrix.org> well, `.collect(Map,groupingBy, fn)`, really

`.collect(Map, fn)` would also work, with a collectors protocol

[03:08:42.0903] <rkirsling>
> <@kriskowal:matrix.org> Carton: the language formerly known as variously ECMAScript and JavaScript.

cool devs in 2030 only use Carbon and Carton

[03:09:15.0805] <Justin Ridgewell>
Are we changing our mind on static methods?

[03:09:38.0399] <bakkot>
different people always had different opinions I think

[03:09:42.0240] <Justin Ridgewell>
I'm just kinda exhausted with seeing naming conflicts with the ecosystem.

[03:09:49.0515] <bakkot>
I don't have that firm of an opinion at the moment

[03:09:50.0826] <Justin Ridgewell>
`group` was impossible to query for

[03:09:51.0998] <bakkot>
need to think about it more

[03:10:20.0593] <rbuckton>
We could seriously consider something like F#'s computation expressions (something jschoi was looking into) to create query DSLs:

```js
// computation expression example using decorators and do-expression syntax:
const array = ...;
const result = @query do {
  for x in array
  groupBy x.name into y
  select y
};
```

[03:10:33.0137] <rbuckton>
 * We could seriously consider something like F#'s computation expressions (something jschoi was looking into) to create query DSLs:

```js
// computation expression example using decorators and do-expression syntax:
const array = ...;
const result = @query do {
  for x in array
  groupBy x.name into y
  select y
};
```

[03:10:48.0734] <rkirsling>
> <@jridgewell:matrix.org> I'm just kinda exhausted with seeing naming conflicts with the ecosystem.

this is what I'm saying; what I want is a solution that we can also apply to the next time this happens

[03:11:19.0213] <bakkot>
> <@rbuckton:matrix.org> We could seriously consider something like F#'s computation expressions (something jschoi was looking into) to create query DSLs:
> 
> ```js
> // computation expression example using decorators and do-expression syntax:
> const array = ...;
> const result = @query do {
>   for x in array
>   groupBy x.name into y
>   select y
> };
> ```

that is too many things

[03:11:23.0359] <bakkot>
JS does not have room for that

[03:11:26.0114] <bakkot>
 * this language does not have room for that

[03:11:29.0021] <bakkot>
 * JS does not have room for that

[03:12:55.0466] <bakkot>
if any of us had large twitter followings we could poll the community on `Object.groupBy` vs `[].groupedBy`

[03:13:13.0152] <bakkot>
just don't put a joking "break the web" option in or people will take it seriously and get mad that we don't

[03:13:42.0138] <rbuckton>
> <@bakkot:matrix.org> if any of us had large twitter followings we could poll the community on `Object.groupBy` vs `[].groupedBy`

I'm less convinced of the efficacy of twitter polls given the mass exodus of many in the tech community off of that platform and onto platforms like Mastodon.

[03:14:40.0015] <Kris Kowal>
> <@rbuckton:matrix.org> I'm less convinced of the efficacy of twitter polls given the mass exodus of many in the tech community off of that platform and onto platforms like Mastodon.

Or, as we like to call it, the Lemmer Web.

[03:15:02.0367] <Kris Kowal>
(for Christine Lemmer-Webber, one of the authors of ActivityPub)

[03:15:11.0955] <rbuckton>
> <@bakkot:matrix.org> JS does not have room for that

I'm not so sure. `async do {}` is not so far off from what `@async do {}` might be in terms of how `async {}` works in F#.

[03:15:37.0749] <rbuckton>
But even if it is viable, its a long way off.

[03:17:28.0932] <bakkot>
> <@rbuckton:matrix.org> I'm less convinced of the efficacy of twitter polls given the mass exodus of many in the tech community off of that platform and onto platforms like Mastodon.

eh, well, you can run it and see what results you get

[03:17:43.0911] <bakkot>
seems like there are still enough people around to get a decent sample size

[03:18:06.0817] <Justin Ridgewell>
We need scoped prototype methods

[03:18:17.0012] <bakkot>
if we could get decent sample size in the first place, anyway

[03:18:42.0546] <Justin Ridgewell>
```js
{
  "use groupBy";
  [].groupBy; // => function
}
[].groupBy; // => undefined
```


[03:19:00.0397] <littledan>
> <@jridgewell:matrix.org> We need scoped prototype methods

Jake was talking about this too, but how would it work?

[03:19:02.0411] <rbuckton>
> <@jridgewell:matrix.org> We need scoped prototype methods

You mean like https://github.com/tc39/proposal-extensions?

[03:19:31.0508] <Justin Ridgewell>
Similar, but access would still use `.` instead of `::`

[03:19:34.0201] <littledan>
> <@bakkot:matrix.org> if we could get decent sample size in the first place, anyway

Anyway we can do a parallel Mastodon poll!

[03:19:37.0545] <Justin Ridgewell>
Else it's just a pipe.

[03:19:56.0391] <rbuckton>
> <@jridgewell:matrix.org> Else it's just a pipe.

That is the way

[03:20:55.0095] <rbuckton>
If only we could do something like C#'s extension methods, but that requires runtime typing

[03:21:51.0608] <Justin Ridgewell>
> <@littledan:matrix.org> Jake was talking about this too, but how would it work?

Roughly, don't we already have similar tracking for strict property access?

[03:22:04.0879] <Justin Ridgewell>
Just need to track prototype scopes now, for every property access...

[03:22:20.0538] <Justin Ridgewell>
/me runs away

[03:26:40.0726] <rbuckton>
> <@rbuckton:matrix.org> That is the way


We really do need to get pipeline to move forward, and then maybe we could just do this:

```js
import { groupBy } from "std:array";

const result = ar.filter(...) |> groupBy(%, ...);
```

[03:26:53.0088] <littledan>
@bterlson @robpalme @ujjwal Is it too late for me to defer my next topic down the agenda? There is so much good stuff that we might not get a chance to discuss; consensus procedures can wait until next meeting

[03:27:13.0888] <littledan>
Apologies for not marking it as such earlier 

[04:00:13.0284] <rkirsling>
that didn't sound like an √± to me üòõ

[04:00:35.0123] <rkirsling>
just teasin' ya

[04:06:34.0855] <Justin Ridgewell>
Have we restarted? I'm waiting to be admitted

[04:06:50.0962] <rbuckton>
Yes, they started up again.

[04:06:58.0723] <ryzokuken>
apologies, you're in

[04:09:21.0201] <bakkot>
I am trying a new language model for the bot, and it's definitely better, but it's slow enough that it gets behind sometimes, and that tradeoff isn't worth it :(

[04:10:19.0443] <bakkot>
it's google's speech-to-text service, so I'm surprised they have it lag instead of having it run on better hardware and charge more

[04:11:14.0666] <Ashley Claymore>
> <@bakkot:matrix.org> I am trying a new language model for the bot, and it's definitely better, but it's slow enough that it gets behind sometimes, and that tradeoff isn't worth it :(

ah that explains what I was seeing in the first half

[04:11:50.0510] <Ashley Claymore>
hopefully the lag will improve, as the model does seem much better as you say

[04:13:29.0404] <bakkot>
I wish they'd just publish the model so I could rent myself a faster GPU

[04:13:30.0668] <bakkot>
but alas

[04:13:43.0477] <bakkot>
I guess at some point I should try other services

[04:14:36.0736] <Michael Ficarra>
I didn't see deferred evaluation mentioned in Kris Kowal's slides

[04:16:26.0347] <Rob Palmer>
Richard slides:  https://docs.google.com/presentation/d/1vyp3FZ5OIiN1xzKV_y7FZauBMdGow0CW2es4qbOQtgw/edit

[04:16:27.0036] <Kris Kowal>
Indeed, I didn‚Äôt touch on deferred evaluation. Briefly, that‚Äôs motivated by the ability to easily avoid executing the body of unused modules, which is possible and relied upon in practice with CommonJS.

[04:16:35.0709] <Anthony Bullard>
Sorry, I'm running a bit late, could someone admit me when they get a chance?

[04:17:45.0675] <Michael Ficarra>
Kris Kowal: I'm thinking there's overlap between reflection and deferred evaluation anyway

[04:17:56.0376] <Michael Ficarra>
I guess I'll talk about that more when we discuss reflection at this meeting

[04:18:01.0856] <yulia>
Anthony Bullard: are you joining the call?

[04:18:05.0125] <Rob Palmer>
If anyone needs to be admitted to the meeting, please notify ryzokuken here

[04:18:36.0219] <Kris Kowal>
> <@michaelficarra:matrix.org> I guess I'll talk about that more when we discuss reflection at this meeting

I thought this as well, but yulia‚Äôs deferred evaluation goes farther than deferred import.

[04:19:07.0685] <yulia>
yes, Guy and I have been working together on this, but deferred import eval won't be solved just by reflection

[04:19:18.0542] <Kris Kowal>
I think the uses of import reflection for deferring execution are more closely related to the code splitting use case than Yulia‚Äôs proposal, having learned more about the latter since I last presented.

[04:20:33.0589] <yulia>
deferred evaluation explicitly seeks to avoid the async tick by preloading and initializing the module. You can think of it as a dynamic import without the fetch. any async work is done up front as part of the module loading / linking stage

[04:24:29.0498] <Justin Ridgewell>
Bradford Smith: Re your iterable suggestion for groupBy, I think we could actually do that. `Iterator` needs special contiguous-run behavior, but that could be special to `Iterator.groupBy` (pending the Iterator helpers proposal)

[04:25:12.0705] <Rob Palmer>
In the room I have a black leather wallet that was handed in. Let me know if it is yours.

[04:26:02.0842] <Alex Vincent>
Is this potentially a "reserved properties" situation, like the reserved keywords of 262?

[04:26:04.0205] <Michael Ficarra>
Justin Ridgewell: it doesn't *need* to be that way, there's just pretty strong precedent from other languages for groupBy on a representation of a (possibly) infinite sequence to have that behaviour

[04:26:34.0009] <Anthony Bullard>
> <@yulia:mozilla.org> Anthony Bullard: are you joining the call?

I have joined

[04:27:20.0797] <Robert Pamely>
> <@jridgewell:matrix.org> Bradford Smith: Re your iterable suggestion for groupBy, I think we could actually do that. `Iterator` needs special contiguous-run behavior, but that could be special to `Iterator.groupBy` (pending the Iterator helpers proposal)

What does contiguous-run behaviour mean?

[04:27:54.0662] <Christian Ulbrich>
Robert Pamely: Its mine.

[04:28:20.0405] <Robert Pamely>
> <@christianulbrich:matrix.org> Robert Pamely: Its mine.

Guessing you meant to tag Rob Palmer 

[04:28:52.0077] <ryzokuken>
it's right in front of me and rob on the table

[04:28:53.0331] <Justin Ridgewell>
`[1, 2, 1, 1]` in by default groups to a single `{ 1 => [1, 1, 1], 2 => [2] }`, but in infinite iterables it's not possible to collect all values into a key. So instead, you return an iterable `[ [1, [1, 1]], [2, [2]], [1, [1]] ]` grouping contiguous runs of the same key

[04:28:59.0630] <Christian Ulbrich>
Rob Palmer: Exactly :)

[04:29:13.0759] <yulia>
Rob Palmer -- i think waldemar is next?

[04:29:24.0701] <yulia>
he had a topic "factored spec"

[04:29:40.0193] <Rob Palmer>
we messed up the queue by double advancing

[04:29:53.0071] <Justin Ridgewell>
 * `[1, 2, 1, 1]` in by default groups to a single `{ 1 => [1, 1, 1], 2 => [2] }`, but in infinite iterables it's not possible to collect all values into a key. So instead, you return an iterable `[ [1, [1, 1]], [2, [2]], [1, [1]] ]` grouping contiguous runs of the same key

[04:30:15.0807] <Robert Pamely>
> <@jridgewell:matrix.org> `[1, 2, 1, 1]` in by default groups to a single `{ 1 => [1, 1, 1], 2 => [2] }`, but in infinite iterables it's not possible to collect all values into a key. So instead, you return an iterable `[ [1, [1, 1]], [2, [2]], [1, [1]] ]` grouping contiguous runs of the same key

I see thanks for clarifying

[04:31:07.0807] <Justin Ridgewell>
 * `[1, 2, 1, 1]` in by default groups to a single `{ 1 => [1, 1, 1], 2 => [2] }`, but in infinite iterables it's not possible to collect all values into a key. So instead, you return an iterable `[ [1, [1]], [2, [2]], [1, [1, 1]] ]` grouping contiguous runs of the same key

[04:31:56.0498] <rbuckton>
> <@jridgewell:matrix.org> `[1, 2, 1, 1]` in by default groups to a single `{ 1 => [1, 1, 1], 2 => [2] }`, but in infinite iterables it's not possible to collect all values into a key. So instead, you return an iterable `[ [1, [1]], [2, [2]], [1, [1, 1]] ]` grouping contiguous runs of the same key

grouping only contiguous runs seems like a different operation though, needing a different name to indicate the difference in behavior.

[04:32:00.0245] <nicolo-ribaudo>
Wishlist:
- kevin's bot should replace "40 to" with 402
(where can I open a PR for that?)

[04:32:07.0439] <nicolo-ribaudo>
 * Wishlist:
- kevin's bot should replace "40 to" with 402
(where can I open a PR for that?)

[04:33:29.0942] <Robert Pamely>
> <@rbuckton:matrix.org> grouping only contiguous runs seems like a different operation though, needing a different name to indicate the difference in behavior.

I agree. It feels more like batching the same values or something.

[04:34:06.0350] <jasew>
> Wishlist:
> 
> - kevin's bot should replace "40 to" with 402
> (where can I open a PR for that?)

bakkot has an exception list somewhere, so pinging him usually

[04:34:57.0536] <Michael Ficarra>
jasew: nicolo-ribaudo https://github.com/bakkot/transcribe-to-gdocs/blob/master/replacements.js

[04:35:03.0820] <rbuckton>
> <@rpamely:matrix.org> I agree. It feels more like batching the same values or something.

Inside the TypeScript compiler we have a `groupBy` function that maps the input into discrete groups by key, and a `spanMap` function that maps contiguous sequences by key.

[04:35:53.0454] <Robert Pamely>
As it turns out, this has the unfortunate correction in google to "Spain map"

[04:36:39.0416] <rbuckton>
I also called that operation `spanMap` in `@esfx/iter-fn`: https://esfx.js.org/esfx/api/iter-fn.html#_esfx_iter_fn_spanMap_function_1_

[04:36:50.0786] <Christian Ulbrich>
This sounds convincing to me. ECMA262 should be able to be implemented w/o _any_ stuff related to 402.

[04:37:50.0523] <ryzokuken>
`isLeapDay`

[04:37:55.0401] <ryzokuken>
üò¨

[04:38:56.0951] <Michael Ficarra>
rbuckton: I know `span` as the like "single step" version of `group`: https://hackage.haskell.org/package/base-4.17.0.0/docs/Prelude.html#v:span

[04:39:38.0784] <rbuckton>
Yeah, I have the same concept in `@esfx/iter-fn` as well: https://esfx.js.org/esfx/api/iter-fn.html#_esfx_iter_fn_span_function_4_

[04:40:20.0949] <littledan>
Wait, everything goes through plenary, regardless of outcome here

[04:40:33.0985] <Michael Ficarra>
rbuckton:  I think using "span" in the names of both of those operations is weird

[04:40:42.0842] <Michael Ficarra>
 * rbuckton:  I think using "span" in the names of both of those operations is weird

[04:41:36.0803] <rbuckton>
They both operate on contiguous sequences, e.g., a "span"

[04:41:44.0964] <Robert Pamely>
To clarify, why is it necessary to have a different group algorithm on iterators anyway? There are already operations like `every` that would never end on infinite iterators right?

[04:42:28.0023] <Michael Ficarra>
wouldn't we have already run into this issue with `String.prototype.toLocaleLowerCase` and likewise if they hadn't already been in 262 for historical reasons?

[04:42:44.0094] <shu>
littledan: you're right, sorry for being imprecise

[04:42:48.0034] <littledan>
In the web world, extensions are often used specifically to be able to act in cases where one spec wants to add a feature to another without working with all of those people (eg because maybe there isn‚Äôt an active WG). But other times just for factoring as here.

[04:42:53.0337] <Michael Ficarra>
Robert Pamely: it's not necessary, there's just precedent

[04:42:53.0514] <rbuckton>
And many other languages/library implement `.groupBy` over potentially infinite iterables assuming they are finite.

[04:43:36.0989] <shu>
littledan: i really do not see any advantage to requiring extra deliberation for this stuff in 262

[04:43:46.0163] <bakkot>
> <@michaelficarra:matrix.org> jasew: nicolo-ribaudo https://github.com/bakkot/transcribe-to-gdocs/blob/master/replacements.js

that's the file but yes pinging me is correct, rather than a PR

[04:43:58.0521] <rbuckton>
> <@rpamely:matrix.org> To clarify, why is it necessary to have a different group algorithm on iterators anyway? There are already operations like `every` that would never end on infinite iterators right?

 * And many other languages/library implement `.groupBy` over potentially infinite iterables assuming they are finite.

[04:46:59.0628] <shu>
i don't understand what the conclusion was

[04:47:04.0411] <Michael Ficarra>
was anyone other than Mark in the "no" camp?

[04:47:06.0424] <shu>
is the "narrow yes" non-normative notes?

[04:47:07.0430] <bakkot>
> <@rbuckton:matrix.org> grouping only contiguous runs seems like a different operation though, needing a different name to indicate the difference in behavior.

I agree that calling this operation "groupBy" is bad. unfortunately, though, that's the behavior that `groupBy` has for infinite iterators in languages like python and haskell - https://docs.python.org/3/library/itertools.html#itertools.groupby / https://hackage.haskell.org/package/groupBy-0.1.0.0/docs/Data-List-GroupBy.html

I wouldn't want a thing called "groupBy" on Iterator.prototype which does something other than what the groupBy from python's itertools does

[04:47:36.0075] <ryzokuken>
> <@shuyuguo:matrix.org> is the "narrow yes" non-normative notes?

non-normative notes backreferencing 402

[04:47:47.0241] <ryzokuken>
like we do for the `toLocaleString` methods

[04:47:49.0052] <shu>
sgtm, thanks

[04:48:20.0040] <shu>
well not exactly like those i hope?

[04:48:22.0306] <bakkot>
can someone capture that in the notes

[04:48:33.0225] <Michael Ficarra>
yeah not quite like those

[04:48:39.0887] <ryzokuken>
in the same vein, I suppose

[04:48:42.0571] <shu>
`toLocaleString` is like, "this does something, who knows? but really, look at 402"

[04:48:51.0563] <shu>
i hope this is more like "this is added by 402, look at that"

[04:48:56.0282] <Michael Ficarra>
those are mandatory whether or not 402 is implemented, they just have a different behaviour

[04:48:58.0904] <shu>
right

[04:49:03.0851] <ryzokuken>
yeah that's because the stubs exist for toLocaleString

[04:49:05.0130] <Michael Ficarra>
shu: yeah that is my understanding

[04:49:34.0272] <ryzokuken>
so in this case we'll say "these classes might have additional properties that are defined here"

[04:50:06.0249] <shu>
okay i would characterize that as in fact not at all like `toLocaleString`

[04:50:39.0285] <ryzokuken>
hm, perhaps I misunderstood something thing. Richard Gibson could you clarify?

[04:51:00.0302] <bakkot>
> `NOTE: For historical reasons, the strings *"true"* and *"false"* are treated the same as the boolean value *true*.`

[04:51:07.0443] <bakkot>
ah yes, javascript

[04:51:09.0619] <shu>
hell yeah brother

[04:51:59.0396] <ryzokuken>
`"false" === true`

[04:52:05.0480] <bakkot>
I guess I wrote that sentence

[04:52:28.0973] <bakkot>
well, `!!"false" === true`

[04:52:49.0694] <HE Shi-Jun>
I don't have time to comment last topic. I don't have strong opinion on whether 402 could extend 262, i just want to mention in this specific case, it not only an impl choose to impl 402 or not but also which calendars they want to support. for example, if support japanese calendar, it will have era field, if support chinese year calendar, it could have animal field (in the future?), if support both, it will have both fields... So the shape of the prototype may have many varieties.

[04:54:09.0029] <Michael Ficarra>
HE Shi-Jun: why would 402 make individual fields present only when certain locale data is present?

[04:54:18.0783] <Michael Ficarra>
I imagine the data would change but the shapes would be fixed

[04:55:14.0610] <HE Shi-Jun>
Actually I have seen some modifications on such data so only have specific locale to make the binary small.

[04:55:46.0002] <Michael Ficarra>
yes, it is normal to not have some locale data

[04:55:57.0500] <Michael Ficarra>
it would not be okay for 402 to say that the shape of the object changes based on that though

[04:56:25.0896] <Michael Ficarra>
like, I don't think that would pass the TG1 review

[04:56:42.0817] <HE Shi-Jun>
So you mean even an impl do not support japanese year calendar, it should still have era field?

[04:56:57.0143] <Michael Ficarra>
yes

[04:57:39.0321] <HE Shi-Jun>
I'm ok with that, hope 402 have clear spec text for it.

[04:58:00.0302] <ryzokuken>
HE Shi-Jun: we're working out the exact details for this

[04:58:07.0152] <ryzokuken>
check Frank's recent proposal for this

[04:58:08.0607] <rbuckton>
> <@michaelficarra:matrix.org> like, I don't think that would pass the TG1 review

Yeah, I'd lean towards something like a `.getCalendarField("era")`, etc. instead, so that the shape remains stable.

[04:59:12.0233] <HE Shi-Jun>
> <@rbuckton:matrix.org> Yeah, I'd lean towards something like a `.getCalendarField("era")`, etc. instead, so that the shape remains stable.

stable, but not very ergonomics üòÖ

[04:59:43.0958] <bakkot>
in fairness getting the era is not a particularly common operation

[04:59:54.0314] <bakkot>
i expect, anyway

[05:00:14.0660] <rbuckton>
> <@haxjs:matrix.org> stable, but not very ergonomics üòÖ

True, but it also avoids needing to add more properties in the future that are potentially unused based on the locale/calendar in use.

[05:00:26.0496] <Michael Ficarra>
interesting, is era ever placed anywhere other than the end of the date?

[05:01:00.0989] <rbuckton>
It also could be `.calendarData.era`, where `.calendarData` is spec'd as a getter that just returns an empty object by default.

[05:01:13.0613] <shu>
> <@michaelficarra:matrix.org> interesting, is era ever placed anywhere other than the end of the date?

is stardate real

[05:01:18.0582] <HE Shi-Jun>
> <@rbuckton:matrix.org> True, but it also avoids needing to add more properties in the future that are potentially unused based on the locale/calendar in use.

I agree. I just think the original idea to add era is for ergonomics. 

[05:04:10.0062] <Richard Gibson>
> <@usharma:igalia.com> hm, perhaps I misunderstood something thing. Richard Gibson could you clarify?

my understanding of the conclusion is a general self-imposed constraint to not extend ECMA-262 intrinsics in ECMA-402 without an indication of such within ECMA-262. For `Temporal.‚Ä¶.prototype` specifically, I think it will take the form of text like "_An ECMAScript implementation that includes the ECMA-402 Internationalization API may provide additional properties of the <type> prototype object as defined in the ECMA-402 specification._".

[05:04:42.0253] <Andreu Botella>
I wonder whether hiding the era name if it matches the current era by default would work well with the Japanese calendar

[05:06:25.0607] <Michael Ficarra>
Andreu Botella: I didn't think Japanese era provided any kind of disambiguation like gregorian era

[05:08:03.0841] <rkirsling>
era can't be omitted just because it's current, if I understood the idea correctly

[05:08:18.0648] <rkirsling>
like the current year is either 2022 or R4, but not "4"

[05:08:37.0157] <rkirsling>
 * like the current year is either 2022 or R4, but not "4"

[05:36:49.0657] <sffc>
rkirsling: can you post your experience here on https://github.com/tc39/proposal-intl-eradisplay/issues?

[05:39:59.0736] <msaboff>
@shu Did V8 implement RAB.transfer() returning a fixed array?

