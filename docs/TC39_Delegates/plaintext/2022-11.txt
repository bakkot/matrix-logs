2022-11-02
[15:56:33.0083] <bakkot>
PSA: we just landed a commit on ecma262 which tweaks the formatting, which is the sort of thing which causes a lot of merge conflicts. if you have an in-flight PR and you're rebasing on main, you can avoid manually applying the formatting by using the following series of commands:

```
git rebase -i 0090daf^ # 0090daf is the commit where the formatter is applied
git rebase -X theirs 0090daf --exec "npm i && npm run format && git commit --amend -a --no-edit"
git rebase -i main
```
this splits up the rebase into 1) everything before the formatter was applied, 2) the formatter, which will be done for you, 3) everything after the formatter. any conflicts in parts 1 and 3 you will need to handle manually, just like you would in the absence of the formatter (or feel free to ask the editors for help)


2022-11-07
[10:21:20.0830] <shu>
yulia: are we unshipping `group`?

[10:21:26.0878] <shu>
 * yulia: are we unshipping `group`?

[10:49:02.0930] <ljharb>
oof, i hope not - let's at least see if we can fix lastpass first

[10:50:46.0642] <shu>
hm, even if we can i'm still leaning towards unshipping in chrome

[10:51:07.0420] <shu>
because i assume it'll take a while for lastpass's fix to deploy to a large enough % of its customers

[10:53:40.0259] <ljharb>
i'd still want to know what code was breaking on it

[10:54:32.0347] <shu>
+1, the bugzilla comment reads to me as a suspicion, i want to hear it confirmed first

[10:54:53.0377] <shu>
(i mean it sounds likely, but still)

[10:57:37.0180] <yulia>
There is a risk that this may be very hard to catch in codebases, but maybe we just got unlucky with this

[10:58:10.0911] <yulia>
Since chrome is about to ship I didn't think it would be wise to wait on notifying you

[10:58:53.0815] <shu>
indeed, we have a window of a week until i need to request stable respins, which is not good

[10:59:13.0750] <shu>
so much appreciated there

[11:00:29.0058] <shu>
maybe this is the chance to get `groop` after all

[12:12:05.0246] <yulia>
shu: ljharb it... isn't looking good. Two more regressions: https://github.com/tc39/proposal-array-grouping/issues/44

[12:19:51.0959] <Justin Ridgewell>
üò≠

[12:20:58.0470] <Justin Ridgewell>
Is this the same as that Lego site‚Äôs using an array as a hash map?

[12:59:00.0192] <bakkot>
the cloud.ibm.com one appears to be, though it's different code

[13:41:05.0245] <shu>
yulia: thanks!

[13:41:13.0432] <shu>
alas, i am unshipping this

[14:27:57.0824] <bakkot>
sigh

[14:28:19.0179] <bakkot>
that was the only good other name

[14:30:35.0401] <Michael Ficarra>
there's always `smoosh`

[14:30:49.0364] <shu>
what about `bucket`

[14:30:56.0867] <shu>
or the more provocative `buckit`

[14:31:22.0927] <Michael Ficarra>
`smooshIntoBuckets`

[14:31:25.0190] <shu>
buck it, we're doing 5 groups

[14:33:20.0146] <Kris Kowal>
I has a bucket.

[14:33:57.0715] <shu>
the array-as-hash-table use case makes name picking pretty unpredictable

[14:34:01.0969] <shu>
who knows what keys they're using

[15:56:51.0447] <Justin Ridgewell>
Let's introduce a new meta-object protocol called `getAndApply`, and update `Array.p.group` to:
1. Returned undefined for `get` where the receiver is an array instance
2. Return the function for `get` where the receiver is `Array.prototype`
3. Invokes the method when doing `[].group()` (`getAndApply`)

[15:57:17.0188] <Justin Ridgewell>
Then any new array methods can just be hidden from these terrible sites.


2022-11-08
[16:04:49.0314] <Michael Ficarra>
or.... we just choose a different name

[16:05:09.0039] <Michael Ficarra>
and eventually stop trying to put new things on `Array.prototype`

[16:05:27.0416] <Michael Ficarra>
hopefully one day we can have built-in modules or something and then build out a nice stdlib

[16:05:35.0171] <shu>
yeah i do not think we should introduce a new MOP protocol for this

[16:06:15.0885] <Kris Kowal>
Symbol.facetious

[16:06:23.0783] <bakkot>
quite right, we should use the existing `document.all` protocol

[16:06:59.0102] <Michael Ficarra>
I was waiting for someone to bring up `IsHTMLDDA`

[16:27:02.0402] <Justin Ridgewell>
We pre-scan the source text to see if the word ‚Äúgroup‚Äù appears anywhere, and if so, we do not install the method. Group is only accessible through computed property access were the key is not literally the string ‚Äúgroup‚Äù.

[18:16:00.0900] <Jack Works>
> <@shuyuguo:matrix.org> who knows what keys they're using

maybe the engine need to record names that added to the array happens in Web

[18:18:17.0779] <Jack Works>
> <@jridgewell:matrix.org> We pre-scan the source text to see if the word ‚Äúgroup‚Äù appears anywhere, and if so, we do not install the method. Group is only accessible through computed property access were the key is not literally the string ‚Äúgroup‚Äù.

and developers need to use it by `array["gro" + "up"]()` right

[18:30:07.0994] <shu>
> <@jackworks:matrix.org> maybe the engine need to record names that added to the array happens in Web

that sounds way too expensive to be feasible

[18:30:12.0909] <shu>
also privacy and fingerprinting concerns?

[00:58:26.0471] <Jack Works>
> <@shuyuguo:matrix.org> that sounds way too expensive to be feasible

I thought the engine was already doing that today, e.g. metrics of Web API usage

[08:07:13.0378] <shu>
those are known counters, they aren't tracking new strings

[12:32:43.0376] <shu>
yulia: is Nightly shipping change-array-by-copy?

[12:33:23.0528] <shu>
`toSorted`, `toSpliced`, and `toReversed` seem unlikely to be used as keys

[12:33:29.0034] <shu>
but i am not so sure about `with`

[12:56:13.0062] <bakkot>
`with` seems a lot less likely than `group`

[13:00:48.0369] <yulia>
> <@shuyuguo:matrix.org> yulia: is Nightly shipping change-array-by-copy?

only behind a build time flag

[13:32:32.0830] <shu>
okay, thanks

[13:32:50.0427] <shu>
i tried looking for the ibm issue and the other issue on the chromium issue tracker and didn't see anything

[13:34:10.0099] <shu>
canary population is pretty small, but i wonder if there're biases in play with people not filing issues, which would be unfortunate

[13:34:49.0623] <shu>
> <@bakkot:matrix.org> `with` seems a lot less likely than `group`

i agree, guess we'll see


2022-11-09
[06:22:58.0899] <rbuckton>
yulia | ü§ï hopefully back in the afternoon: Do you think either you or someone from your organization would have some time in the next few weeks before plenary to discuss Mozilla's position on the Explicit Resource Management proposal?

[06:23:57.0387] <yulia | ü§ï hopefully back in the afternoon>
Sure, we discussed before the last presentation. dminor and I can set something up

[06:24:43.0236] <yulia | ü§ï hopefully back in the afternoon>
before next plenary or? (we will also be in a coruna)

[06:24:50.0387] <rbuckton>
That's fine. As far as scheduling, I'm on the US east coast now. 

[06:25:17.0165] <rbuckton>
Before, if possible. I'd like to be able to advance if that's feasible. 

[06:27:07.0255] <yulia>
ok, i'll set something up


2022-11-10
[17:10:38.0989] <shu>
anyone interested in running an incubator call for BigInt math (round 2) before the next plenary?


2022-11-14
[14:47:04.0181] <bakkot>
ljharb: the tc39 calendar has the plenary as 7 hours long, which is presumably a mistake


2022-11-15
[16:04:21.0486] <ljharb>
fixed i think - since it‚Äôs in person tho isn‚Äôt that right? 10-5?

[16:04:54.0262] <bakkot>
I'm just going off of the agenda

[16:05:59.0758] <ljharb>
ah ok they‚Äôre 10-4

[16:10:58.0701] <shu>
looking forward to falling asleep mid-sentence yall

[11:02:21.0081] <Ashley Claymore>
Apologies to anyone trying to join the R&T monthly meeting. The zoom link appears to have stopped working.
new link in the google doc, linked from the tc39 event


2022-11-16
[04:19:58.0054] <Rob Palmer>
2023 Plenary Schedule is now posted on [the Reflector](https://github.com/tc39/Reflector/issues/453).  There's just one date missing that will be confirmed very soon.


2022-11-17
[17:53:12.0244] <shu>
ljharb: you've been vocal in the past about coercing arguments in the order in which they appear. is there code that you've seen that actually depends on that ordering?

[17:53:56.0053] <shu>
i'm thinking of proposing a breaking change to the order of coercion for Atomics methods like `Atomics.store(ta, idx, val)` to coerce idx, val, *then* validate the TA

[17:54:21.0473] <shu>
with resizable buffers, having to recheck detached/out-of-boundness and reloading the length after each argument coercion is really unfortunate

[17:55:18.0726] <shu>
it's kind of a bugfarm (sometimes security bugs)

[18:31:23.0879] <ljharb>
no code i think the committee would respect, I‚Äôd guess. why is it a bug farm?

[18:31:39.0838] <ljharb>
I‚Äôm confused about the problem it‚Äôd be solving

[18:35:48.0758] <Jack Works>
Agree with shu. Don't think coerce order will break anything 

[18:45:03.0984] <shu>
it's a bug farm because it's easy to forget that coercing `idx` and `val` can detach `ta`

[18:45:15.0655] <shu>
(and with resizable buffers, can resize `ta`)

[18:46:03.0551] <shu>
TA detachment and resizing is a qualitatively worse kind of user code than other arbitrary user code, because code that forget to recheck for detachedness after each argument coercion can end up reading out-of-bounds into the buffer, depending on the implementation

[18:46:12.0006] <shu>
 * TA detachment and resizing is a qualitatively worse kind of user code than other arbitrary user code, because code that forget to recheck for detachedness after each argument coercion can end up reading out-of-bounds into the buffer, depending on the implementation

[18:46:20.0487] <Jack Works>
"easy to forget" do you mean when v8 is optimizing code? 

[18:46:41.0711] <shu>
that, and i also mean engineers or spec authors actually forgetting even when implementing the slow path

[18:46:55.0241] <shu>
i personally missed a bunch of these in the resizable buffers spec draft

[18:48:26.0482] <shu>
TA and Atomics methods depend on the TA being in a valid state, life will just be a lot easier if we can rework these methods to 1) validate once instead of multiple times and 2) after validation, check that no user code can ever be called again until method exit

[18:48:59.0753] <shu>
 * TA and Atomics methods depend on the TA being in a valid state, life will just be a lot easier if we can rework these methods to 1) validate once instead of multiple times and 2) after validation, check that no user code can ever be called again until method exit

[18:50:00.0631] <shu>
> <@ljharb:matrix.org> I‚Äôm confused about the problem it‚Äôd be solving

what i'm solving for is "increasing likelihood of correct implementation, where incorrect implementation is often a security bug and not just misbehavior"

[18:51:52.0837] <shu>
to be clear, user code re-entrancy is a general problem. i'm singling out TAs because TA bugs result in more, and more serious, security bugs

[18:54:07.0978] <Jack Works>
So the ideal order is: idx check, val check, (no user code now), TA check, Atomics.store, (user code again)?

[18:54:37.0225] <shu>
it's a little trickier than that unfortunately, because `val` coercion depends on looking at whether `ta` is a BigInt TA or a non-BigInt TA

[18:55:02.0921] <shu>
so i think the ideal order is: coerce *but not validate* left-to-right, then validate left-to-right

[18:55:54.0505] <Jack Works>
lgtm

[18:55:56.0734] <shu>
so the order is: 1) ensure `ta` has the right internal slots, 2) coerce `idx`, 3) coerce `val`, (no user code after this point) 4) validate `ta`, 5) validate `idx` (if needed for atomic access)

[18:56:08.0694] <shu>
 * so the order is: 1) ensure `ta` has the right internal slots, 2) coerce `idx`, 3) coerce `val`, (no user code after this point) 4) validate `ta`, 5) validate `idx\` (if needed for atomic access)

[18:56:17.0296] <shu>
 * so the order is: 1) ensure `ta` has the right internal slots, 2) coerce `idx`, 3) coerce `val`, (no user code after this point) 4) validate `ta`, 5) validate `idx` (if needed for atomic access)

[19:45:31.0834] <ljharb>
in general, does anything validate besides TAs and Proxy?

[19:45:40.0016] <ljharb>
* in general, does anything validate besides TAs and Proxy?

