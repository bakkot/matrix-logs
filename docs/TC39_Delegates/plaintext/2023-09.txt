2023-09-01
[21:06:35.0425] <Kris Kowal>
@shu We do a thing in SES that Mark calls ‚Äúenablements‚Äù to compensate for the override mistake which may be of interest: We replace the non-writable property with a getter/setter pair. The prototype is still effectively frozen, but assignment-override works. We‚Äôd be delighted to be in touch.

[09:47:45.0295] <Michael Ficarra>
Kris Kowal: Yes, we considered taking this approach for `Iterator.prototype[Symbol.toStringTag]` because of this exact issue with regenerator-runtime (see https://github.com/tc39/proposal-iterator-helpers/pull/213), but instead decided to just make the property writable

[09:51:04.0788] <ljharb>
this is interesting: https://twitter.com/webreflection/status/1697518069554299121 - isn't there some security thing around SAB that this seems to bypass via wasm?

[09:54:19.0787] <shu>
that's always been the case (since COOP/COEP shipped)

[09:54:28.0257] <shu>
it's explicitly allowed, and wpt uses it in testing

[09:54:52.0234] <shu>
the actual capability is the sharing of memory, not the SAB constructor. without COI you still can't postMessage the buffer across workers

[09:54:54.0258] <bakkot>
the problem isn't getting a SAB, it's being able to share it to workers

[09:55:05.0686] <bakkot>
see step 13.1.1 of https://html.spec.whatwg.org/#structuredserializeinternal

[09:55:59.0074] <shu>
this is my "fault" technically: https://github.com/whatwg/html/issues/4732#issuecomment-598470434

[09:56:13.0482] <shu>
but we did it for compat reasons for chrome users

[09:56:33.0040] <Kris Kowal>
> <@michaelficarra:matrix.org> Kris Kowal: Yes, we considered taking this approach for `Iterator.prototype[Symbol.toStringTag]` because of this exact issue with regenerator-runtime (see https://github.com/tc39/proposal-iterator-helpers/pull/213), but instead decided to just make the property writable

I don‚Äôt think we‚Äôd recommend ‚Äúenablements‚Äù as a general language compensation for override-mistake, but we do recommend replacing certain properties with accessors as a preparation for freezing a prototype in environments that freeze shared prototypes.

[09:59:02.0493] <shu>
the original plan, was, in fact, to make SAB always available

[10:15:48.0853] <ljharb>
ah ok, thanks, that makes sense

[10:50:53.0335] <leobalter>
Stage 3 won't become a silver bullet for proposal changes.

[11:44:00.0713] <Michael Ficarra>
of course, changes can be made in response to implementation feedback

[11:45:14.0401] <Michael Ficarra>
the point of this change is to catch necessary changes before we get to the point of implementation so we don't waste implementers' time, not to have an indicator of rock-solid stability

[14:28:11.0958] <littledan>
Huh, facilitating feature detection seems like a good thing‚Ä¶

[14:28:31.0144] <littledan>
(I saw parts of this controversy but never really followed along closely enough)

[14:30:07.0245] <littledan>
I agree with Leo. Actually, HTML integration is already a requirement in practice, just randomly enforced by certain delegates (including me), and it has been this way for years 

[14:30:14.0064] <littledan>
We should document this

[14:30:32.0088] <littledan>
* I agree with Leo. Actually, HTML integration is already a Stage 3 requirement in practice, just randomly enforced by certain delegates (including me), and it has been this way for years

[14:30:45.0382] <littledan>
It feels funny to have html be special but it just is

[14:30:58.0332] <littledan>
I think that is why we have hesitated to document it so far

[14:33:26.0642] <Michael Ficarra>
littledan: I agree but I don't think it needs to be combined with my proposed process change

[14:34:00.0040] <Michael Ficarra>
as we saw at the last meeting, it is already hard for some delegates to understand the process change

[14:34:04.0304] <littledan>
> <@michaelficarra:matrix.org> littledan: I agree but I don't think it needs to be combined with my proposed process change

Sure they are separate, maybe good for Leo to put this other point on the agenda for this meeting 

[14:34:47.0342] <littledan>
As far as I am concerned, HTML integration is already a requirement, just a poorly documented one, unlike your proposal which is a genuine change in how we work

[14:49:00.0318] <shu>
process or no process my personal resolve going forward is i will block stage 3 on proposals where there's non-trivial amounts of semantics in the integration

[14:49:16.0542] <shu>
 * process or no process my personal resolve going forward is i will block stage 3 on proposals where there's non-trivial amounts of semantics in the integration, and the integration is not yet done

[16:03:50.0015] <shu>
eh, i guess arguably the right way to feature detect is `self.crossOriginIsolated`, not the existence of the SAB constructor

[16:51:42.0541] <Michael Ficarra>
> I can share that our tamper resistance mode is enabled by default

üò©


2023-09-04
[19:43:22.0880] <rkirsling>
> TDZ, what is it good for?
lol shu I expect musical references from you now ü§£

[19:43:27.0365] <rkirsling>
 * > TDZ, what is it good for?

lol shu I expect musical references from you now ü§£

[11:42:06.0252] <shu>
> <@rkirsling:matrix.org> > TDZ, what is it good for?
> 
> lol shu I expect musical references from you now ü§£

it's actually a reference to the original title of War and Peace

[16:49:46.0996] <rkirsling>
all's fair in TDZ


2023-09-05
[10:31:51.0270] <shu>
> <@michaelficarra:matrix.org> > I can share that our tamper resistance mode is enabled by default
> 
> üò©

yes this gives me concern

[14:19:28.0859] <leobalter>
Is Daniel Minor (Mozilla) in this channel?

I've seen the agenda item proposing demotion of ShadowRealms to Stage 2. I'd love if we can link that agenda item to an open (new?) thread in the ShadowRealms repo.

Considering the facts, I'd have to agree with the arguments and recognize there's an amount of work for HTML integration I initially underestimated.

Saying that, we have work with Igalia restarting on this in October 1st. This update is as fresh as today. The budget cut happened initially along the mass layoffs and we are putting it back to order to continue the work here.

Even if the demotion is unavoidable, I'd love we can set a plan for the next steps for what would be expected for re-requesting Stage 3.

Having a thread linked to this agenda item, we can have pre-discussions and champions might be able to draw some estimates as well.

[14:19:53.0941] <leobalter>
littledan shu 

[14:20:02.0197] <leobalter>
 * littledan shu caridy 

[14:20:44.0283] <Kris Kowal>
dminor is here.

[14:20:55.0775] <leobalter>
Thank you, Kris Kowal ! I couldn't find it. 

For the ref: https://docs.google.com/presentation/d/1WJd9g3df_ibVHK3LdoKX2FboDwYQBUBJNxuRAWOYYbM/edit#slide=id.p

[14:24:49.0446] <shu>
i agree with dminor's points

[14:25:13.0337] <shu>
i think a demotion to stage 2 would be precisely to make the criteria for getting back to stage 3 clear

[14:25:28.0082] <shu>
(which is html integration)

[14:25:54.0942] <shu>
so any update Igalia or the champions want to provide on restarting that work would be towards the same goal IMO

[14:26:19.0019] <shu>
but the current state, as the slides say, is not implementable nor shippable

[14:26:38.0222] <shu>
also, recall Apple even had to unship because of a misunderstanding of what the HTML integration involved!

[14:28:32.0691] <leobalter>
I fully understand from this perspective. 

I just wish we had Michael Ficarra's mid-stage.

While we don't have the new stage, hopefully we can agree to settle the current ES-specs as a like-stage-3 quality/stable. Of course this would still be subject to new changes for anything new identified in the HTML integration. Is that agreedable?

[14:28:48.0279] <leobalter>
 * I fully understand from your perspective.

I just wish we had Michael Ficarra's mid-stage.

While we don't have the new stage, hopefully we can agree to settle the current ES-specs as a like-stage-3 quality/stable. Of course this would still be subject to new changes for anything new identified in the HTML integration. Is that agreedable?

[14:29:36.0676] <shu>
yes, i think it'd be good to reaffirm consensus that the 262 spec is fine as-is

[14:29:41.0113] <ljharb>
we've done that twice now, with import assertions and something else

[14:29:50.0753] <shu>
and that there are no further plans to redesign

[14:30:06.0581] <ljharb>
demotion to stage 2, with a consensus about what items are expected to make it re-eligible for stage 3 consensus (implying that other items aren't in scope)

[14:31:05.0364] <leobalter>
I'd propose we keep the proposed ES-spec as is, being the next steps HTML integration with tests.

With the above complete, we reconsider it eligible for Stage 3, formal consensus still needed.

[14:31:45.0158] <shu>
that sgtm. not sure if dminor had more in mind

[14:37:35.0476] <Kris Kowal>
dminor stated that Mozilla‚Äôs position (from last week‚Äôs SES meeting, recording forthcoming) is that they cannot ship without HTML integration fully specified and they are not particular about how the proposal gets staged. It could remain at stage 3 and HTML integration could be a follow-up.

[14:38:12.0449] <Kris Kowal>
They‚Äôre also amenable to backing up to Stage 2. I think Leo‚Äôs proposal fits in that range.

[14:38:39.0250] <Kris Kowal>
 * dminor stated Mozilla‚Äôs position (from last week‚Äôs SES meeting, recording forthcoming) is that they cannot ship without HTML integration fully specified and they are not particular about how the proposal gets staged. It could remain at stage 3 and HTML integration could be a follow-up.

[14:39:18.0499] <shu>
ah i think mine is a little stronger, i would prefer demotion to stage 2 over remaining at stage 3 in the holding pattern waiting on HTML integration

[14:39:39.0090] <leobalter>
This works for me, I haven't discussed this with the other champions yet, but it seems pretty reasonable.

Let me summarize the (pre) agreements I'm proposing:

- The current ES-spec draft is good as is, there are no further plans to redesign.
- We already have the tests for the ES-spec part, so no further Test262 "required".
- HTML integration needs to be complete and include some fair coverage of tests.
- White redesign is not expected, the champions are open for fixes.

I'm doubling down on tests here as I want to make sure it's shippable, a bit more than the formal requirements for Stage 3.

[14:39:44.0592] <Kris Kowal>
That is dminor‚Äôs understanding of your position as well, shu 

[14:40:04.0001] <leobalter>
I'm not sure I'll be able to attend the TC39 meeting, so registering this here in the lack of a thread.

[14:40:09.0027] <leobalter>
 * I'm not sure I'll be able to attend the TC39 meeting, so registering this here in the lack of an open thread.

[14:42:35.0940] <leobalter>
the summary I proposed is in case the demotion to Stage 2 happens. I don't see a better alternative for that right now so it feels like my best option.

[14:55:08.0150] <Kris Kowal>
Mozilla‚Äôs position https://youtu.be/xbrsdwNVYKQ?t=87

[16:13:26.0836] <dminor>
Just to be clear, our position is that we should either demote to Stage 2, or remove the HTML integration from the proposal and keep it at Stage 3. We're not ok with keeping this at Stage 3 without more specification of the HTML integration.

[16:14:16.0792] <dminor>
And V8's position as I understand it, is that removing the HTML integration is not a good idea for the web, so I think that leaves demotion to Stage 2.

[16:14:40.0908] <dminor>
But I'm happy for the details to be worked out in plenary.

[16:15:20.0065] <dminor>
 * Just to be clear, our position is that we should either demote to Stage 2, or remove the HTML integration from the proposal entirely and keep it at Stage 3. We're not ok with keeping this at Stage 3 as it stands.

[16:37:01.0325] <shu>
oh man, cutting it super close with the iterator helpers thing

[16:37:19.0240] <shu>
we were like minutes away from pressing the kill switch button before the GH thread was updated that the upstream fix was rolled out

[16:42:28.0299] <littledan>
This all sounds reasonable to me. I don‚Äôt think anyone is pushing for changes outside of the HTML integration, and our last couple demotions and repromotions gave me confidence that we as a committee can keep promises to ourselves. I am very glad that this is resuming with Igalia next month.

[16:43:31.0279] <littledan>
I don‚Äôt think mficcarra‚Äôs extra stage has anything to do with this. I would basically hope for html integration to be in place to get to the new, earlier stage (though, sure, maybe it is only a fully hard requirement at Stage 3)


2023-09-06
[19:14:53.0128] <leobalter>
ShadowRealms have different use cases, but the ones I need for my company are all Web related. So I agree we can't and shouldn't detach the HTML integration from it.

I also see no advantage of the proposal remaining on Stage 3 if I don't have a fully "ready to implement" status yet.

I concur to believe this committee will act as its best to continue moving the proposal forward even if needs to take a step back.

I'm personally positive with the change and looking forward to continue the HTML integration process with Igalia!

[07:18:10.0825] <dminor>
If we're looking for an issue to continue this conversation, I think this one that my colleague Matt opened a few months ago is the place: https://github.com/tc39/proposal-shadowrealm/issues/386

[07:38:33.0163] <Chris de Almeida>
> <@shuyuguo:matrix.org> we were like minutes away from pressing the kill switch button before the GH thread was updated that the upstream fix was rolled out

oh this is gonna make it after all?  üéâ

[07:54:41.0471] <shu>
> <@softwarechris:matrix.org> oh this is gonna make it after all?  üéâ

yes

[07:55:04.0095] <shu>
but! given that the tamper-resistant mode that freezes intrinsics is turned on by default...

[07:55:12.0451] <shu>
need to be on the lookout for other breakages

[07:56:18.0128] <Chris de Almeida>
ah.. was hoping they would change their impl

[07:57:59.0770] <shu>
they turned it off for the one broken site that was reported

[07:58:32.0345] <shu>
here's to hoping their other customers have a regenerator runtime <2 years old


2023-09-08
[02:37:40.0059] <rkirsling>
it'll take 'til next week before I can get my colleagues to fill out the Doodle but it's safe to say that at least one of the days will have more than 24 people

[02:58:14.0621] <Rob Palmer>
Thanks Ross. Does this also apply to the Wednesday dinner? 

[02:59:38.0958] <Rob Palmer>
Also, the Doodle is just for advertising. If folk want to attend they must fill in the registration for. That's the one I suggest you ask them to fill in if they are coming. 

[04:06:17.0470] <rkirsling>
er whoops. consider "Doodle" a misspeak on my part

[04:06:49.0901] <rkirsling>
I'm not certain that any of the three plan to attend the dinner

[08:12:53.0689] <mgaudet>
Q: If I were looking for well regarded criticism of Proxies as they exist in the language (perhaps retrospective "they were a bad idea"), does anyone have any pointers to things that they may not agree with but think are worthwhile viewpoints to consider (I'm seeking this as background to something I'm rolling around) 

[08:15:39.0570] <mgaudet>
(also, to be clear, I just want to understand the shape of criticism here) 

[10:02:37.0525] <bakkot>
mgaudet: I think Proxies were a bad idea. Basically it comes down to one thing, with two angles, namely, they make code hard to reason about. this means that a.) any implementation, tooling, or library needs to account for the possibility of side-effects in many more places than they otherwise would and b.) anyone trying to read or maintain code which uses them has to reason about the behavior of that code in a fundamentally different way than any other code.

basically, they add an incredible amount of complexity to the language, and the thing you get in exchange - "now objects can have a much wider range of behaviors when interacted with" - isn't even a good thing.

[10:04:08.0614] <mgaudet>
Thank you :) That's a helpful comment. 

[10:04:44.0188] <TabAtkins>
Should've just added `__method_missing__`

[10:44:53.0223] <shu>
why only hook behavior that's missing

[10:45:00.0050] <shu>
`__on_step__`

[11:19:51.0952] <Mathieu Hofman>
I do wish proxies had more strict invariants where it would become inert (traps no longer invoked) once the language invariants says the proxy cannot change its answer anymore. More specifically, there is no good reasons for most proxy traps to be invoked if the proxy is frozen. I guess I'd prefer a mechanism that allows lazily building behavior, but not change that behavior dynamically forever.

[11:22:28.0176] <Chris de Almeida>
> <@bakkot:matrix.org> mgaudet: I think Proxies were a bad idea. Basically it comes down to one thing, with two angles, namely, they make code hard to reason about. this means that a.) any implementation, tooling, or library needs to account for the possibility of side-effects in many more places than they otherwise would and b.) anyone trying to read or maintain code which uses them has to reason about the behavior of that code in a fundamentally different way than any other code.
> 
> basically, they add an incredible amount of complexity to the language, and the thing you get in exchange - "now objects can have a much wider range of behaviors when interacted with" - isn't even a good thing.

this.  1000x this.

[11:36:09.0221] <Richard Gibson>
> <@mhofman:matrix.org> I do wish proxies had more strict invariants where it would become inert (traps no longer invoked) once the language invariants says the proxy cannot change its answer anymore. More specifically, there is no good reasons for most proxy traps to be invoked if the proxy is frozen. I guess I'd prefer a mechanism that allows lazily building behavior, but not change that behavior dynamically forever.

related to that, I think it was huge unwarranted complexity to require observable lookup of methods on the handler inside every operation rather than capturing those methods at proxy instantiation

[12:28:01.0594] <ljharb>
> <@gibson042:matrix.org> related to that, I think it was huge unwarranted complexity to require observable lookup of methods on the handler inside every operation rather than capturing those methods at proxy instantiation

1000% this also, that "live handler object" pattern is absurd


2023-09-09
[16:23:24.0577] <ljharb>
oof, another one https://bugs.chromium.org/p/chromium/issues/detail?id=1480783

[16:32:57.0465] <bakkot>
transcend again, yeah

[16:32:58.0407] <bakkot>
alas


2023-09-10
[18:58:14.0169] <shu>
yeah i'm flipping the kill switch on monday

[18:58:14.0840] <shu>
sigh

[18:58:22.0032] <shu>
bakkot: could you put it on the agenda as well?

[20:31:08.0698] <snek>
shu: are these supposed to be here https://gc.gy/162021598.png

[06:13:01.0613] <Jack Works>
very unlucky. it becomes harder to add new things especially if they're on the prototype.

[06:14:18.0293] <nicolo-ribaudo>
I can try asking to the regenerator maintainer to npm deprecate old regenerator versions

[06:14:32.0136] <nicolo-ribaudo>
* I can try asking to the regenerator maintainer to npm deprecate old regenerator versions if that would help

[07:47:37.0803] <ljharb>
that may help yeah

[09:39:59.0037] <shu>
snek: i believe so, yes

[12:32:18.0373] <bakkot>
shu: done

[12:32:46.0695] <bakkot>
listed you as presenter but presumably michael will have something to say as well


2023-09-11
[12:24:15.0613] <bakkot>
reminder that the deadline to add things to the agenda is in 4 days


2023-09-12
[19:44:18.0271] <shu>
time just gets away from us

[20:01:12.0979] <rbuckton>
Which reminds me. Is anyone interested in taking over as reviewers for https://github.com/tc39/proposal-throw-expressions? Both of my previous reviewers had to step down.
I can ask at plenary as well, but I was hoping to have reviewers and reviews lined up ahead of plenary to potentially advance it to Stage 3...

[20:03:03.0030] <bakkot>
rbuckton: you might consider putting it on the agenda anyway, and if you don't find reviewers before ask in plenary on the first day if anyone can review on short notice

[20:03:08.0187] <bakkot>
the proposal is small enough for that to be practical

[01:12:49.0730] <nicolo-ribaudo>
I can review 

[10:26:45.0819] <Michael Ficarra>
FYI please do not add items to the agenda without listing a presenter


2023-09-13
[03:51:43.0236] <Michael Ficarra>
anybody interested in picking up the date parsing proposal? https://twitter.com/domenic/status/1701888428244173166

[03:51:52.0389] <Michael Ficarra>
this problem isn't going away on its own

[07:54:29.0431] <pipobscure>
I‚Äôd actually plead to leave the problem unresolved and simply declare `Date` as broken.

[07:54:37.0949] <pipobscure>
Temporal already solves the issue.

[07:55:16.0852] <pipobscure>
So the canonical solution should be to migrate away from `Date` to `Temporal` instead of patching and modifying existing `Date` behaviour

[07:55:54.0037] <pipobscure>
Especially as modifying the existing behaviour carries a risk of breaking the Web for anyone that has fixed this issue based on browser identification

[07:56:24.0481] <pipobscure>
(That‚Äôs of course just my highly biased 0.02‚Ç¨)

[07:57:33.0437] <ljharb>
also, it seems like a single project aiming to match another needing to reimplement another engine's date parser, one time, isn't much evidence of it being "needed"

[08:00:32.0116] <Michael Ficarra>
pipobscure: you aren't considering that engine implementors are one audience of the specification

[08:01:11.0609] <Michael Ficarra>
there's no way for a new engine to implement Date.parse in a web-compatible way from scratch via the spec

[08:01:33.0887] <pipobscure>
> <@michaelficarra:matrix.org> pipobscure: you aren't considering that engine implementors are one audience of the specification

I don‚Äôt understand what you mean. Could you explain?

[08:01:58.0970] <pipobscure>
> <@pipobscure:matrix.org> I don‚Äôt understand what you mean. Could you explain?

(as in of course engine implementors are an audience of the spec)

[08:02:11.0116] <Michael Ficarra>
pipobscure: people writing new JS code are not the only ones who may be reading the spec to undstand how APIs are meant to behave

[08:02:22.0832] <pipobscure>
> <@michaelficarra:matrix.org> there's no way for a new engine to implement Date.parse in a web-compatible way from scratch via the spec

That‚Äôs the key part: NEW implementors

[08:02:25.0829] <pipobscure>
True that

[08:03:41.0000] <Michael Ficarra>
Web compatibility depends on particular behaviour of Data.parse that is not encoded in the spec. It is our job to address that.

[08:03:57.0996] <Michael Ficarra>
I don't see how that could be argued

[08:04:05.0318] <pipobscure>
Is there precedence for ‚ÄúLet‚Äôs specify what new implementations should do while leaving all existing implementations alone.‚Äù ?

[08:04:08.0748] <Michael Ficarra>
 * I don't see how that could be argued against

[08:04:24.0582] <Michael Ficarra>
yes, all the time

[08:04:34.0733] <Michael Ficarra>
and it's "precedent"

[08:06:30.0355] <ljharb>
unfortunately attempts to gradually specify that in the past have been blocked, and the requirement seems to be "specify everything all at once, or specify nothing", hence nothing's been done

[08:06:40.0679] <ljharb>
error stacks is in the same boat

[08:50:23.0974] <bakkot>
> <@pipobscure:matrix.org> I‚Äôd actually plead to leave the problem unresolved and simply declare `Date` as broken.

I would love to live in a world where we could get people to stop using old features, but alas I suspect it's not going to happen

[08:50:38.0502] <bakkot>
so I think it's still worth putting effort in, even for existing implementations, so we can avoid stuff like https://bugzilla.mozilla.org/show_bug.cgi?id=1825938

[08:53:02.0147] <shu>
this is like, "we can't have justice, that's why we have the law", except it's "we can't tell people what to do, so we have standards that reflect reality"

[09:17:40.0984] <Michael Ficarra>
okay now that we all agree that clarifying Date.parse is, indeed, still valuable, does anybody want to take up this proposal again?

[09:22:20.0668] <Richard Gibson>
if the goal is "_specify behavior of `Date.parse` that is required for web compatibility but not defined in the specification_", I don't think https://github.com/tc39/proposal-uniform-interchange-date-parsing applies‚Äîit would be a brand new proposal

[09:23:17.0718] <Richard Gibson>
 * if the goal is "_specify behavior of `Date.parse` that is required for web compatibility but not currently documented_", I don't think https://github.com/tc39/proposal-uniform-interchange-date-parsing applies‚Äîit would be a brand new proposal

[09:23:55.0243] <bakkot>
This seems like it could be done somewhat incrementally: make a list of the cases where some implementation has needed to implement any particular behavior, and write that down

[09:24:08.0620] <bakkot>
and then say that things not in one of those forms are implementation-defined

[09:24:17.0453] <bakkot>
and then whenever a new one gets hit, add it to the list

[09:29:49.0931] <Richard Gibson>
in that case no proposal is necessary, just a sequence of web-reality PRs in (ecma262, test262) pairs

[09:37:52.0630] <Michael Ficarra>
Richard Gibson: Sure, a series of PRs would be fine, but I assume the research into what is commonly supported will mostly need to be front-loaded

[10:00:20.0471] <Richard Gibson>
to be frank, I don't see this going anywhere unless it's driven by current major implementations, who have pretty much no incentive. A fringe behavior is generally identified as required for web compatibility by observing breakage when it is changed, and some of those will be required in that sense even if they are not uniform across implementations. "Commonly supported" is a different concept but easier to determine, and if the committee establishes that as the criterion (basically encoding Hyrum's Law as a baseline) then what we'll end up with is an expansion of formats that must be accepted (and how to interpret them in ugly cases like "2023-02-30") and no description of what must‚Äîor even _may_‚Äîbe rejected. Which is somewhat better than the current situation in which the same effectively holds but without documentation, although not by enough to motivate the kind of research you describe.

but anyway, https://tc39.es/proposal-uniform-interchange-date-parsing/cases.html may be a decent starting point for any aspirational Don Quixote out there

[11:37:28.0800] <bakkot>
shu: did you see https://github.com/tc39/proposal-iterator-helpers/issues/286#issuecomment-1718129217 ?

[11:37:43.0780] <shu>
i did

[11:38:09.0028] <shu>
i can confirm the killswitch config is rolled out, but something else is wrong that it's not actually disabling the feature

[12:09:59.0022] <Rob Palmer>
The feature wants to live.

[12:10:41.0375] <Chris de Almeida>
life finds a way


2023-09-14
[17:15:18.0094] <rkirsling>
I believe my colleagues should have responded to the GH org invites a couple days ago

[13:10:14.0720] <Rob Palmer>
Two folk from Sony are registered in addition to yourself, Ross. 


2023-09-15
[19:05:21.0199] <rkirsling>
registered, yeah. I'm not sure why the third hasn't been responding to DMs


2023-09-18
[15:15:07.0962] <bakkot>
ljharb: 5 minutes for the pattern matching update seems... ambitious

[15:19:42.0289] <Michael Ficarra>
I dunno, I can say "here's a gist you should read" pretty quick

[15:36:35.0565] <Michael Ficarra>
üôè as someone whose items are all near the bottom of a full agenda, I am just hoping we make haste and avoid waste wherever we can

[15:57:10.0303] <ljharb>
It‚Äôs not going to be any details, just broad strokes

[16:43:22.0226] <shu>
oh wow we went from a pretty sparse agenda to a really full one

[16:43:32.0105] <shu>
i count 18+ hours

[16:43:46.0746] <shu>
how many working hours do we have?

[16:49:38.0377] <shu>
like 14-15 or so i think? 20 hours - 3 for lunch - 1.5 for coffee breaks - 1 for administrative agenda items


2023-09-19
[18:01:40.0937] <rkirsling>
> <@shuyuguo:matrix.org> oh wow we went from a pretty sparse agenda to a really full one

classic

[09:00:08.0545] <davethegr8>
Why did `promise with resolvers for stage 4 #1453` merge after the deadline to advance?

[09:10:38.0260] <bakkot>
"must be added (and noted as such) along with links to the supporting materials prior to the deadline, or else delegates may withhold consensus for advancement solely on the basis of missing the deadline."

[09:11:23.0710] <bakkot>
i.e. you are still allowed to add things if you really want, just that delegates can object to advancement

[09:11:35.0316] <bakkot>
 * i.e. you are still allowed to add things if you really want, just that delegates can object to advancement on the basis of lateness

[09:14:20.0277] <Chris de Almeida>
it is also noted with the emoji indication:  `‚åõÔ∏è	late addition for stage advancement and/or schedule prioritization`

[09:14:31.0953] <Chris de Almeida>
 * it is also noted with the emoji indication:  `‚åõÔ∏è late addition for stage advancement and/or schedule prioritization`

[09:15:26.0836] <Chris de Almeida>
via Rob on Reflector:

We have ~20 hours of content on the agenda and only ~16 hours of capacity. Meaning ~4 hours of content will likely overflow.

Please consider if you would like to send a PR to reduce the requested timebox of any of your agenda items. Likewise if you would like to proactively designate your item as low priority (i.e. a candidate for overflow to the next meeting if we don't find time for it), please mark it with a ‚¨á emoji.

[09:40:52.0570] <shu>
Rob Palmer: i don't know if you or someone else added the promise withresolvers thing, but i think it's too early for stage 4 just yet

[09:41:31.0232] <shu>
it _just_ shipped and i'd like to wait for it to hit at least beta

[09:53:51.0178] <Chris de Almeida>
peetk: üëÄ

[13:43:06.0631] <peetk>
oopsie daisy -- will revert agenda item

[13:48:30.0988] <ljharb>
no need for a PR, just push up a commit

[13:48:35.0939] <ljharb>
 * (btw no need for a PR, just push up a commit)


2023-09-20
[01:06:48.0715] <rkirsling>
kinda hype for more non-coercion talk tbh

[01:06:57.0351] <rkirsling>
(especially since I missed round one)

[09:08:20.0159] <Michael Ficarra>
rkirsling: If you haven't seen it yet, we have a PR open for what was already decided: https://github.com/tc39/how-we-work/pull/136

[10:31:49.0042] <Chris de Almeida>
related:  https://docs.google.com/presentation/d/e/2PACX-1vSw84uzAT9EWY-xN526UhWpUCzsB8rLQPLfvhavqOf8c-tx6z2DlfrOPpzS61l7JZ9VLohoOUeVSLaa/pub?start=false&loop=false&delayms=3000

[14:04:26.0741] <Chris de Almeida>
üì¢ if you have constraints for this coming plenary, please add them to the agenda md as soon as possible


2023-09-21
[10:09:41.0272] <Chris de Almeida>
```
You will not be able to access your workspaces and other resources on HackMD during the times listed below.

Maintenance Schedule
00:00 to 01:00 on September 24th (UTC)
```


2023-09-22
[21:08:04.0796] <bakkot>
https://mastodon.social/@hailey@hails.org/111105611822853351

[21:08:17.0526] <bakkot>
> How does it work? Turns out oniguruma, the regexp engine ruby uses, supports 'calling' previously defined capture groups with the \g<...> syntax

[21:08:19.0675] <bakkot>
kind of love this

[21:38:45.0957] <rbuckton>
I brought that to committee but it didn't get stage 1

[21:42:33.0651] <rbuckton>
Well, it was part of the big regexp features proposal that I had to break down into smaller proposals. I haven't presented it on its own yet because it seemed like it would have a lower likelihood of success, so it hasn't been a priority 

[21:42:43.0774] <snek>
regex should not have that feature

[21:44:26.0094] <rbuckton>
It's extremely valuable and let's you compose a lot of small reusable patterns. It's very good for parsing ISO-8601 dates to spec

[21:44:42.0143] <snek>
i mean its certainly cool

[21:44:52.0472] <snek>
but i think any complex enough to warrant it should not be a regex anymore

[21:45:03.0702] <snek>
 * but i think anything complex enough to warrant it should not be a regex anymore

[21:45:54.0442] <rbuckton>
It's also present in a lot of engines like Perl, PCRE, Boost.Regex, Oniguruma, and Glib/GRegex

[21:46:07.0477] <rbuckton>
https://rbuckton.github.io/regexp-features/features/subroutines.html

[21:46:38.0684] <rbuckton>
Here's an example of date parsing:

```
(?(DEFINE)
  (?<Year>\d{4}|[+-]\d{5,})
  (?<Month>0[1-9]|1[0-2])
  (?<Day>0[1-9]|2[0-9]|3[01])
)
(?<Date>(?&Year)-(?&Month)-(?&Day)|(?&Year)(?&Month)(?&Day))
```

[21:48:38.0496] <rbuckton>
(that's from Perl, apparently I have the wrong example up for Oniguruma)

[21:49:20.0131] <snek>
ok but like, Temporal.ZonedDateTime.from(s) exists

[21:49:42.0611] <rbuckton>
That's a solution to a singular problem, not the whole domain.

[21:51:05.0155] <rbuckton>
Consider the TypeScript.tmLanguage file used to generate syntax highlighting in many editors. We hacked our own substitution mechanism in to inject a number of reusable regular expressions into the final output file.

[21:51:49.0897] <rbuckton>
(as in, we have named substitutions in the source file, and generate an output `.tmLanguage` file with substitutions applied)

[21:52:08.0353] <snek>
but tree-sitter exists

[21:52:44.0672] <snek>
> <@rbuckton:matrix.org> That's a solution to a singular problem, not the whole domain.

my point is not the specific thing, its that in basically every case, a more comprehensive alternative exists, because complex data generally requires complex handling

[21:55:26.0725] <rbuckton>
More comprehensive in some cases is like using a sledgehammer to smash an ant. Sometimes the tools are a lot bigger than what's needed, and bring in a lot of additional overhead.

[21:55:52.0122] <rbuckton>
Regardless, its not the most important feature on my wishlist of RegExp features, which is why its currently on the backburner.

[21:56:46.0167] <rbuckton>
Sometimes the best tool is the one that's at hand.

[21:58:17.0419] <rbuckton>
I also know I'm among the minority that really enjoys regular expressions.

[21:59:15.0089] <rbuckton>
Sometimes you just want to parse your HTML using a RegExp, you know? /s

[22:03:42.0257] <Chris de Almeida>
You can't parse HTML with RegExp.

[22:09:43.0682] <ljharb>
so sayeth https://stackoverflow.com/a/1732454/632724

[22:57:25.0104] <rbuckton>
The `<center>` cannot hold

[22:57:44.0490] <rbuckton>
it is too late

[22:58:11.0899] <rbuckton>
That stackoverflow post has lived rent free in my head for well over a decade.

[06:10:19.0031] <Michael Ficarra>
now that some of us have arrived in Japan for the meeting next week, can we get a Japan matrix room Chris de Almeida Rob Palmer?

[08:41:07.0485] <Rob Palmer>
Please say if you would like to be in the Japan matrix room and do not see the invite.

[08:41:20.0841] <Rob Palmer>
I have invited everyone who was registered, I think.

[08:42:17.0358] <Willian Martins>
Is this registration for the in people attending in person, correct?

[08:44:24.0353] <Rob Palmer>
yes - it's only in-person that required pre-registration


2023-09-24
[21:07:51.0512] <rbuckton>
I was thinking about the old `.{` operator recently, in terms of how it could potentially be used for extraction and injection as an RCU (read/copy, update) mechanism in the shared structs proposal (or possibly as a follow on). I started tinkering with various ideas for the syntax, and while I have something fairly consistent in mind, I came across a wart related to spread and rest assignments in destructuring syntax:
```js
a = { ...b }; // spread properties of 'b' 
({ ...x } = y); // take the rest of the properties and put them in 'x'
```
One of the ideas I had for `.{` was doing named spread/rest in extraction/injection, in which you would want extraction and injection to be mirrored, and you could either use spread _or_ rest in either operator:
```
b = a.{ x, ...y }; // pick 'x' as 'x', and pick up the rest as 'y'
b = a.{ x, y... }; // pick 'x' as 'x', and spread out 'y'
a.{ x, ...y } = b; // assign 'x' from 'x', and take up the rest as 'y'
a.{ x, y... } = b; // assign 'x' from 'x', and spread out 'y'
```
Which makes me wonder if spread should have been mirrored as `foo...`

[21:09:34.0327] <rbuckton>
 * I was thinking about the old `.{` operator recently, in terms of how it could potentially be used for extraction and injection as an RCU (read/copy, update) mechanism in the shared structs proposal (or possibly as a follow on). I started tinkering with various ideas for the syntax, and while I have something fairly consistent in mind, I came across a wart related to spread and rest assignments in destructuring syntax:

```js
a = { ...b }; // spread properties of 'b' 
({ ...x } = y); // take the rest of the properties and put them in 'x'
```

One of the ideas I had for `.{` was doing named spread/rest in extraction/injection, in which you would want extraction and injection to be mirrored, and you could either use spread _or_ rest in either operator:

```
b = a.{ x, ...y }; // pick 'x' as 'x', and pick up the rest as 'y'
b = a.{ x, y... }; // pick 'x' as 'x', and spread out 'y'
a.{ x, ...y } = b; // assign 'x' from 'x', and take up the rest as 'y'
a.{ x, y... } = b; // assign 'x' from 'x', and spread out 'y'
```

Which makes me wonder if spread should have been written as `foo...`


2023-09-25
[17:46:07.0460] <bakkot>
I do not love the thing where the agenda is structurally set up so that proposals are higher priority than larger discussions

[17:46:14.0074] <bakkot>
seems like it ought to be the other way around

[19:02:28.0327] <littledan>
well, backlog is highest priority, so you can always get a time slice for discussions, just every two meetings

[19:03:10.0603] <littledan>
also if a discussion should block a proposal, it can always be bumped up (on a case by case basis)

[19:06:07.0870] <littledan>
historically, we adopted this prioritization back when we were trying to get out of the pattern of spending all day on some very circular philosophical discussions which should not have blocked proposals

[19:06:37.0177] <littledan>
 * well, overflow from last meeting is highest priority, so you can always get a time slice for discussions, just every two meetings

[19:24:36.0648] <littledan>
if there's a particular discussion that we should prioritize, maybe note that in schedule constraints?

[19:25:01.0685] <littledan>
(personally, when I've put discussions on the agenda in the past, I actually wanted them to be deprioritized generally)

[19:26:30.0768] <littledan>
> <@rbuckton:matrix.org> I was thinking about the old `.{` operator recently, in terms of how it could potentially be used for extraction and injection as an RCU (read/copy, update) mechanism in the shared structs proposal (or possibly as a follow on). I started tinkering with various ideas for the syntax, and while I have something fairly consistent in mind, I came across a wart related to spread and rest assignments in destructuring syntax:
> 
> ```js
> a = { ...b }; // spread properties of 'b' 
> ({ ...x } = y); // take the rest of the properties and put them in 'x'
> ```
> 
> One of the ideas I had for `.{` was doing named spread/rest in extraction/injection, in which you would want extraction and injection to be mirrored, and you could either use spread _or_ rest in either operator:
> 
> ```
> b = a.{ x, ...y }; // pick 'x' as 'x', and pick up the rest as 'y'
> b = a.{ x, y... }; // pick 'x' as 'x', and spread out 'y'
> a.{ x, ...y } = b; // assign 'x' from 'x', and take up the rest as 'y'
> a.{ x, y... } = b; // assign 'x' from 'x', and spread out 'y'
> ```
> 
> Which makes me wonder if spread should have been written as `foo...`

This is definitely interesting, but also makes me a little scared about whether or not people will be able to understand it well

[19:27:34.0532] <rbuckton>
> <@littledan:matrix.org> This is definitely interesting, but also makes me a little scared about whether or not people will be able to understand it well

It's less that I would propose the more complex bits initially, but that I wanted to explore the syntax fully to make sure it remained consistent.

[19:35:52.0718] <rbuckton>
> <@littledan:matrix.org> This is definitely interesting, but also makes me a little scared about whether or not people will be able to understand it well

 * It's less that I would propose the more complex bits initially (if at all), but that I wanted to explore the syntax fully to make sure it remained consistent.

[22:10:26.0709] <littledan>
Rob and I are about to do an AV test in a few minutes. If you want to help out, DM me and I will respond with a Zoom link

[23:11:36.0485] <bakkot>
> <@littledan:matrix.org> if there's a particular discussion that we should prioritize, maybe note that in schedule constraints?

well, concretely, I would like to get to the Stop Coercing Things discussion, since it affects the design of all future proposals

[23:11:48.0591] <bakkot>
And since we started but did not finish the discussion last meeting

[23:12:04.0462] <littledan>
I'm fine with deprioritizing my various "withdraw" topics; they can wait until next meeting

[23:12:06.0878] <bakkot>
But I do not have any related schedule constraints

[23:16:18.0333] <littledan>
I think "I want this to happen this meeting rather than a future meeting" is a constraint you're expressing about the schedule... anyway if you don't think this prioritization is a good fit for one section to document the need, maybe you can document it in a new part of the agenda

[23:17:31.0622] <littledan>
I want to discuss your topic but ultimately there are going to be a lot of different points of view people have about why their topic should be prioritized; if these are all collected in one place, then it will be easier for the chairs to go and solve as many for as many prioritization inputs as possible.

[01:32:43.0366] <Michael Ficarra>
bakkot: You can always jump to the higher-priority "shorter discussions" section by selecting a 30-minute or less time box

[01:33:08.0416] <Michael Ficarra>
we designed the agenda like this on purpose and I like it how it is

[12:38:17.0931] <TabAtkins>
...I'm reading the Temporal docs, and in the `round()` method they say:
> When there is a tie, round away from zero like ceil for positive durations and like floor for negative durations. This is the default, and matches the behaviour of Math.round().

But `Math.round()`, uh, doesn't do that. `Math.round(-1.5)` is -1; it ciels on the half values.

[12:39:35.0332] <TabAtkins>
(I was very confused when I read that because I was pretty sure I specified CSS to use ceil semantics on the halves by default, and I did so because that was JS's behavior. And indeed: <https://drafts.csswg.org/css-values/#round-func>)

[12:40:14.0701] <TabAtkins>
<https://tc39.es/proposal-temporal/docs/duration.html#round> for the Temporal docs reference, scroll down a bit to get to the rounding modes

[12:44:34.0810] <ptomato>
waaaaat

[12:44:39.0740] <Kamil Og√≥rek>
I think this is mostly wording issue from my understanding. `Math.round(-1.5)` performs "floor-like" operation in a sense that it rounds to the nearest "bottom" value. It's not taking the sign into account in the explanation here though.

[12:45:26.0013] <Kamil Og√≥rek>
Obviously -2 is "bottom" for -1.5, but it's 1 for "not signed" -1.5

[12:46:13.0527] <ptomato>
I guess Tab is saying that the behaviour of `Math.round` corresponds to `halfCeil` and not `halfExpand`?

[12:46:23.0260] <ptomato>
(to use the rounding mode terminology)

[12:50:44.0866] <Kamil Og√≥rek>
It looks exactly like that. It always rounds towards +Infinity, for both, positives and negatives now

[12:55:36.0474] <ptomato>
I think Intl.NumberFormat has a default rounding mode of halfExpand too, with this same rationale. I'm not sure which came first, whether Temporal based its default on NumberFormat, or the mistaken belief that Math.round corresponds to halfExpand

[13:48:52.0742] <TabAtkins>
Yes, `Math.round()` defaults to `halfCeil` behavior, not `halfExpand` as the Temporal docs state.

[13:49:44.0163] <TabAtkins>
I don't think it's a misunderstanding on my reading - the docs are pretty explicit about the behavior. They're just wrong about it being "like `Math.round()`", which might be something that they want to fix.

[13:50:12.0222] <TabAtkins>
(Either in the docs, because `halfExpand` is desirable as the default, or in the spec, because `halfCeil` is the actual default behavior in `Math.round()`.)

[14:14:47.0169] <Kamil Og√≥rek>
I didnt mean to say you read it wrong, but rather that maybe person who wrote it used too much of a mental shortcut, which led to a real mistake :)


2023-09-26
[17:23:29.0918] <Rob Palmer>
Good morning from Tokyo.  Plenary begins in 37 minutes.

[17:59:29.0548] <Rob Palmer>
We are starting in one minute!

[18:13:21.0125] <msaboff>
The notes don't have a header for attendee names, org and abbreviation.

[18:13:23.0093] <bakkot>
is tcq down for anyone else?

[18:13:42.0046] <littledan>
yes :( I guess we'll have to go to the google sheets backup?

[18:13:42.0240] <ryzokuken>
just now, I think

[18:13:42.0633] <rkirsling>
yes

[18:13:42.0863] <msaboff>
Yeah, looks down to me.

[18:15:25.0074] <ryzokuken>
back on?

[18:15:46.0836] <msaboff>
LGTM now

[18:17:00.0879] <jkup>
Are the task group reports still on for this first section today?

[18:17:48.0485] <Michael Ficarra>
... we have delegates.txt for that msaboff 

[18:17:51.0397] <littledan>
jkup: Yes

[18:18:10.0700] <sffc>
Would really appreciate having Locale Extensions get onto the agenda in order to surface stakeholders and get a temperature check on the current direction. ( Rob Palmer ryzokuken Chris de Almeida )

[18:18:12.0693] <littledan>
> <@michaelficarra:matrix.org> ... we have delegates.txt for that msaboff

Yeah, I was happy to see this section missing, since we have the sign-in sheets (plural!) in addition to the abbreviations list

[18:18:33.0497] <Michael Ficarra>
yes let's not continue this practice for no reason

[18:18:37.0879] <rkirsling>
ah, perhaps it just needed to be made clear that we no longer need it

[18:18:43.0309] <rkirsling>
I was wondering too

[18:18:46.0225] <littledan>
> <@rkirsling:matrix.org> ah, perhaps it just needed to be made clear that we no longer need it

was the omission on purpose?

[18:19:01.0352] <littledan>
(I don't know either way)

[18:19:09.0666] <rkirsling>
oh sorry, I was inferring that it was

[18:19:16.0376] <rkirsling>
I have no idea

[18:19:34.0072] <ryzokuken>
msaboff should be good to go now

[18:20:04.0847] <Michael Ficarra>
motion to delete it again

[18:20:12.0001] <Rob Palmer>
So to confirm, TCQ appears to be working.

[18:21:09.0140] <msaboff>
> <@usharma:igalia.com> msaboff should be good to go now

Now we just need everyone else to add their names.

[18:21:31.0451] <Rob Palmer>
> <@sffc:mozilla.org> Would really appreciate having Locale Extensions get onto the agenda in order to surface stakeholders and get a temperature check on the current direction. ( Rob Palmer ryzokuken Chris de Almeida )

Is this on the agenda?  If not, please PR it.

[18:22:02.0460] <sffc>
> <@robpalme:matrix.org> Is this on the agenda?  If not, please PR it.

It's in the overflow.

[18:23:40.0002] <ryzokuken>
we'll try to free up as much time as we can as we go and try to bring items from the overflow to discussion

[18:23:59.0808] <bakkot>
"pdf has highest downloads" is meaningless; the editor's draft on github does not have statistics

[18:24:13.0710] <shu>
i am laughing on the inside

[18:29:58.0799] <snek>
i'm pretty sure github pages has some analytics

[18:31:35.0951] <snek>
oh nvm i'm thinking of repo analytics

[18:32:03.0705] <ljharb>
it's nice to have the abbreviation list in the same document, i think

[18:32:08.0342] <ljharb>
 * re notes, it's nice to have the abbreviation list in the same document, i think

[18:33:03.0468] <bakkot>
at some point all the time spent talking about the PDF is going to successfully annoy me enough to do the automation just so we can stop talking about it

[18:33:06.0784] <bakkot>
which was the goal I guess

[18:33:20.0053] <Michael Ficarra>
ljharb: we have tabs; when I am taking notes, I just keep delegates.txt open in a tab

[18:33:36.0204] <ljharb>
true, maybe just a link to the list for easy tab-opening would be better then

[18:33:37.0146] <bakkot>
the PDF is a fair bit of work and it is hard to motivate because I don't use the PDF at all

[18:33:45.0512] <bakkot>
which is why we keep trying to get ECMA to hire people instead

[18:34:27.0534] <shu>
i think, in general, practitioners and implementers that engage with the PDFs are rarely doing so on purpose for checking the behavior of a particular yearly version, and because they missed that there is a draft they should be using

[18:34:52.0498] <ljharb>
i never use the pdf; even when checking a past yearly version i use the HTML form

[18:34:54.0291] <ljharb>
 * i never use the pdf; even when checking a past yearly version i use the HTML version

[18:34:55.0232] <ljharb>
 * i never use the pdf; even when checking a past yearly version i use the HTML versions

[18:34:57.0599] <shu>
so it's primarily for archival purposes, which is mainly consumed by ecma

[18:35:23.0494] <ljharb>
afaik the concerns aren't about archival tho, they're about readability when printed. webpages can be easily archived as PDFs without any additional changes.

[18:35:34.0807] <ljharb>
 * afaik the concerns aren't about archival tho, they're about readability when printed. webpages can be easily archived as PDFs without any additional changes.

do many people even own a printer anymore?

[18:35:41.0214] <shu>
fair, i meant archival-as-printed-physical-artifact

[18:35:43.0258] <littledan>
I agree that practitioners should typically use the editor's draft, but I want to note that the market for "archival purposes" is broader than Ecma and that's a good thing. This is shared with ISO, put in libraries, etc.

[18:36:03.0676] <littledan>
there's been a lot of stuff lost in the past and it's good to have printed artifacts to avoid that

[18:36:48.0402] <littledan>
anyway I think everyone agrees the editors are already doing a lot and no need for this to be all on them

[18:36:52.0376] <snek>
the new font is quite good

[18:37:02.0019] <shu>
_except_ the #

[18:37:04.0141] <shu>
# so weird

[18:37:06.0366] <shu>
oh god

[18:37:17.0609] <snek>
lol

[18:37:21.0371] <shu>
i can't just type the sentence "# so weird", there's Markdown support in Element?

[18:37:38.0431] <ljharb>
`#` so weird

[18:37:48.0229] <snek>
did we check if there is a font variant for `#` in the font we're using?

[18:38:23.0488] <ryzokuken>
is it just the bold `#`?

[18:38:37.0522] <shu>
that's what we thought at first, i think we found out it was the monospace #

[18:39:00.0288] <Michael Ficarra>
https://github.com/tc39/ecmarkup/issues/556

[18:39:09.0165] <Michael Ficarra>
yes, it is all monospace variants

[18:39:16.0939] <bakkot>
https://github.com/IBM/plex/issues/401#issuecomment-1727079001

[18:39:49.0778] <Michael Ficarra>
> > An update for Plex Mono is scheduled for later this year. It will include a reworked version of the # symbol as stylistic alternate.

[18:39:53.0391] <snek>
nice

[18:39:57.0015] <Michael Ficarra>
 * > An update for Plex Mono is scheduled for later this year. It will include a reworked version of the # symbol as stylistic alternate.

