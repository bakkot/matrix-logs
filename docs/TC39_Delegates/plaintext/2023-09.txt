2023-09-01
[21:06:35.0425] <Kris Kowal>
@shu We do a thing in SES that Mark calls ‚Äúenablements‚Äù to compensate for the override mistake which may be of interest: We replace the non-writable property with a getter/setter pair. The prototype is still effectively frozen, but assignment-override works. We‚Äôd be delighted to be in touch.

[09:47:45.0295] <Michael Ficarra>
Kris Kowal: Yes, we considered taking this approach for `Iterator.prototype[Symbol.toStringTag]` because of this exact issue with regenerator-runtime (see https://github.com/tc39/proposal-iterator-helpers/pull/213), but instead decided to just make the property writable

[09:51:04.0788] <ljharb>
this is interesting: https://twitter.com/webreflection/status/1697518069554299121 - isn't there some security thing around SAB that this seems to bypass via wasm?

[09:54:19.0787] <shu>
that's always been the case (since COOP/COEP shipped)

[09:54:28.0257] <shu>
it's explicitly allowed, and wpt uses it in testing

[09:54:52.0234] <shu>
the actual capability is the sharing of memory, not the SAB constructor. without COI you still can't postMessage the buffer across workers

[09:54:54.0258] <bakkot>
the problem isn't getting a SAB, it's being able to share it to workers

[09:55:05.0686] <bakkot>
see step 13.1.1 of https://html.spec.whatwg.org/#structuredserializeinternal

[09:55:59.0074] <shu>
this is my "fault" technically: https://github.com/whatwg/html/issues/4732#issuecomment-598470434

[09:56:13.0482] <shu>
but we did it for compat reasons for chrome users

[09:56:33.0040] <Kris Kowal>
> <@michaelficarra:matrix.org> Kris Kowal: Yes, we considered taking this approach for `Iterator.prototype[Symbol.toStringTag]` because of this exact issue with regenerator-runtime (see https://github.com/tc39/proposal-iterator-helpers/pull/213), but instead decided to just make the property writable

I don‚Äôt think we‚Äôd recommend ‚Äúenablements‚Äù as a general language compensation for override-mistake, but we do recommend replacing certain properties with accessors as a preparation for freezing a prototype in environments that freeze shared prototypes.

[09:59:02.0493] <shu>
the original plan, was, in fact, to make SAB always available

[10:15:48.0853] <ljharb>
ah ok, thanks, that makes sense

[10:50:53.0335] <leobalter>
Stage 3 won't become a silver bullet for proposal changes.

[11:44:00.0713] <Michael Ficarra>
of course, changes can be made in response to implementation feedback

[11:45:14.0401] <Michael Ficarra>
the point of this change is to catch necessary changes before we get to the point of implementation so we don't waste implementers' time, not to have an indicator of rock-solid stability

[14:28:11.0958] <littledan>
Huh, facilitating feature detection seems like a good thing‚Ä¶

[14:28:31.0144] <littledan>
(I saw parts of this controversy but never really followed along closely enough)

[14:30:07.0245] <littledan>
I agree with Leo. Actually, HTML integration is already a requirement in practice, just randomly enforced by certain delegates (including me), and it has been this way for years 

[14:30:14.0064] <littledan>
We should document this

[14:30:32.0088] <littledan>
* I agree with Leo. Actually, HTML integration is already a Stage 3 requirement in practice, just randomly enforced by certain delegates (including me), and it has been this way for years

[14:30:45.0382] <littledan>
It feels funny to have html be special but it just is

[14:30:58.0332] <littledan>
I think that is why we have hesitated to document it so far

[14:33:26.0642] <Michael Ficarra>
littledan: I agree but I don't think it needs to be combined with my proposed process change

[14:34:00.0040] <Michael Ficarra>
as we saw at the last meeting, it is already hard for some delegates to understand the process change

[14:34:04.0304] <littledan>
> <@michaelficarra:matrix.org> littledan: I agree but I don't think it needs to be combined with my proposed process change

Sure they are separate, maybe good for Leo to put this other point on the agenda for this meeting 

[14:34:47.0342] <littledan>
As far as I am concerned, HTML integration is already a requirement, just a poorly documented one, unlike your proposal which is a genuine change in how we work

[14:49:00.0318] <shu>
process or no process my personal resolve going forward is i will block stage 3 on proposals where there's non-trivial amounts of semantics in the integration

[14:49:16.0542] <shu>
 * process or no process my personal resolve going forward is i will block stage 3 on proposals where there's non-trivial amounts of semantics in the integration, and the integration is not yet done

[16:03:50.0015] <shu>
eh, i guess arguably the right way to feature detect is `self.crossOriginIsolated`, not the existence of the SAB constructor

[16:51:42.0541] <Michael Ficarra>
> I can share that our tamper resistance mode is enabled by default

üò©


2023-09-04
[19:43:22.0880] <rkirsling>
> TDZ, what is it good for?
lol shu I expect musical references from you now ü§£

[19:43:27.0365] <rkirsling>
 * > TDZ, what is it good for?

lol shu I expect musical references from you now ü§£

[11:42:06.0252] <shu>
> <@rkirsling:matrix.org> > TDZ, what is it good for?
> 
> lol shu I expect musical references from you now ü§£

it's actually a reference to the original title of War and Peace

[16:49:46.0996] <rkirsling>
all's fair in TDZ


2023-09-05
[10:31:51.0270] <shu>
> <@michaelficarra:matrix.org> > I can share that our tamper resistance mode is enabled by default
> 
> üò©

yes this gives me concern

[14:19:28.0859] <leobalter>
Is Daniel Minor (Mozilla) in this channel?

I've seen the agenda item proposing demotion of ShadowRealms to Stage 2. I'd love if we can link that agenda item to an open (new?) thread in the ShadowRealms repo.

Considering the facts, I'd have to agree with the arguments and recognize there's an amount of work for HTML integration I initially underestimated.

Saying that, we have work with Igalia restarting on this in October 1st. This update is as fresh as today. The budget cut happened initially along the mass layoffs and we are putting it back to order to continue the work here.

Even if the demotion is unavoidable, I'd love we can set a plan for the next steps for what would be expected for re-requesting Stage 3.

Having a thread linked to this agenda item, we can have pre-discussions and champions might be able to draw some estimates as well.

[14:19:53.0941] <leobalter>
littledan shu 

[14:20:02.0197] <leobalter>
 * littledan shu caridy 

[14:20:44.0283] <Kris Kowal>
dminor is here.

[14:20:55.0775] <leobalter>
Thank you, Kris Kowal ! I couldn't find it. 

For the ref: https://docs.google.com/presentation/d/1WJd9g3df_ibVHK3LdoKX2FboDwYQBUBJNxuRAWOYYbM/edit#slide=id.p

[14:24:49.0446] <shu>
i agree with dminor's points

[14:25:13.0337] <shu>
i think a demotion to stage 2 would be precisely to make the criteria for getting back to stage 3 clear

[14:25:28.0082] <shu>
(which is html integration)

[14:25:54.0942] <shu>
so any update Igalia or the champions want to provide on restarting that work would be towards the same goal IMO

[14:26:19.0019] <shu>
but the current state, as the slides say, is not implementable nor shippable

[14:26:38.0222] <shu>
also, recall Apple even had to unship because of a misunderstanding of what the HTML integration involved!

[14:28:32.0691] <leobalter>
I fully understand from this perspective. 

I just wish we had Michael Ficarra's mid-stage.

While we don't have the new stage, hopefully we can agree to settle the current ES-specs as a like-stage-3 quality/stable. Of course this would still be subject to new changes for anything new identified in the HTML integration. Is that agreedable?

[14:28:48.0279] <leobalter>
 * I fully understand from your perspective.

I just wish we had Michael Ficarra's mid-stage.

While we don't have the new stage, hopefully we can agree to settle the current ES-specs as a like-stage-3 quality/stable. Of course this would still be subject to new changes for anything new identified in the HTML integration. Is that agreedable?

[14:29:36.0676] <shu>
yes, i think it'd be good to reaffirm consensus that the 262 spec is fine as-is

[14:29:41.0113] <ljharb>
we've done that twice now, with import assertions and something else

[14:29:50.0753] <shu>
and that there are no further plans to redesign

[14:30:06.0581] <ljharb>
demotion to stage 2, with a consensus about what items are expected to make it re-eligible for stage 3 consensus (implying that other items aren't in scope)

[14:31:05.0364] <leobalter>
I'd propose we keep the proposed ES-spec as is, being the next steps HTML integration with tests.

With the above complete, we reconsider it eligible for Stage 3, formal consensus still needed.

[14:31:45.0158] <shu>
that sgtm. not sure if dminor had more in mind

[14:37:35.0476] <Kris Kowal>
dminor stated that Mozilla‚Äôs position (from last week‚Äôs SES meeting, recording forthcoming) is that they cannot ship without HTML integration fully specified and they are not particular about how the proposal gets staged. It could remain at stage 3 and HTML integration could be a follow-up.

[14:38:12.0449] <Kris Kowal>
They‚Äôre also amenable to backing up to Stage 2. I think Leo‚Äôs proposal fits in that range.

[14:38:39.0250] <Kris Kowal>
 * dminor stated Mozilla‚Äôs position (from last week‚Äôs SES meeting, recording forthcoming) is that they cannot ship without HTML integration fully specified and they are not particular about how the proposal gets staged. It could remain at stage 3 and HTML integration could be a follow-up.

[14:39:18.0499] <shu>
ah i think mine is a little stronger, i would prefer demotion to stage 2 over remaining at stage 3 in the holding pattern waiting on HTML integration

[14:39:39.0090] <leobalter>
This works for me, I haven't discussed this with the other champions yet, but it seems pretty reasonable.

Let me summarize the (pre) agreements I'm proposing:

- The current ES-spec draft is good as is, there are no further plans to redesign.
- We already have the tests for the ES-spec part, so no further Test262 "required".
- HTML integration needs to be complete and include some fair coverage of tests.
- White redesign is not expected, the champions are open for fixes.

I'm doubling down on tests here as I want to make sure it's shippable, a bit more than the formal requirements for Stage 3.

[14:39:44.0592] <Kris Kowal>
That is dminor‚Äôs understanding of your position as well, shu 

[14:40:04.0001] <leobalter>
I'm not sure I'll be able to attend the TC39 meeting, so registering this here in the lack of a thread.

[14:40:09.0027] <leobalter>
 * I'm not sure I'll be able to attend the TC39 meeting, so registering this here in the lack of an open thread.

[14:42:35.0940] <leobalter>
the summary I proposed is in case the demotion to Stage 2 happens. I don't see a better alternative for that right now so it feels like my best option.

[14:55:08.0150] <Kris Kowal>
Mozilla‚Äôs position https://youtu.be/xbrsdwNVYKQ?t=87

[16:13:26.0836] <dminor>
Just to be clear, our position is that we should either demote to Stage 2, or remove the HTML integration from the proposal and keep it at Stage 3. We're not ok with keeping this at Stage 3 without more specification of the HTML integration.

[16:14:16.0792] <dminor>
And V8's position as I understand it, is that removing the HTML integration is not a good idea for the web, so I think that leaves demotion to Stage 2.

[16:14:40.0908] <dminor>
But I'm happy for the details to be worked out in plenary.

[16:15:20.0065] <dminor>
 * Just to be clear, our position is that we should either demote to Stage 2, or remove the HTML integration from the proposal entirely and keep it at Stage 3. We're not ok with keeping this at Stage 3 as it stands.

[16:37:01.0325] <shu>
oh man, cutting it super close with the iterator helpers thing

[16:37:19.0240] <shu>
we were like minutes away from pressing the kill switch button before the GH thread was updated that the upstream fix was rolled out

[16:42:28.0299] <littledan>
This all sounds reasonable to me. I don‚Äôt think anyone is pushing for changes outside of the HTML integration, and our last couple demotions and repromotions gave me confidence that we as a committee can keep promises to ourselves. I am very glad that this is resuming with Igalia next month.

[16:43:31.0279] <littledan>
I don‚Äôt think mficcarra‚Äôs extra stage has anything to do with this. I would basically hope for html integration to be in place to get to the new, earlier stage (though, sure, maybe it is only a fully hard requirement at Stage 3)


2023-09-06
[19:14:53.0128] <leobalter>
ShadowRealms have different use cases, but the ones I need for my company are all Web related. So I agree we can't and shouldn't detach the HTML integration from it.

I also see no advantage of the proposal remaining on Stage 3 if I don't have a fully "ready to implement" status yet.

I concur to believe this committee will act as its best to continue moving the proposal forward even if needs to take a step back.

I'm personally positive with the change and looking forward to continue the HTML integration process with Igalia!

[07:18:10.0825] <dminor>
If we're looking for an issue to continue this conversation, I think this one that my colleague Matt opened a few months ago is the place: https://github.com/tc39/proposal-shadowrealm/issues/386

[07:38:33.0163] <Chris de Almeida>
> <@shuyuguo:matrix.org> we were like minutes away from pressing the kill switch button before the GH thread was updated that the upstream fix was rolled out

oh this is gonna make it after all?  üéâ

[07:54:41.0471] <shu>
> <@softwarechris:matrix.org> oh this is gonna make it after all?  üéâ

yes

[07:55:04.0095] <shu>
but! given that the tamper-resistant mode that freezes intrinsics is turned on by default...

[07:55:12.0451] <shu>
need to be on the lookout for other breakages

[07:56:18.0128] <Chris de Almeida>
ah.. was hoping they would change their impl

[07:57:59.0770] <shu>
they turned it off for the one broken site that was reported

[07:58:32.0345] <shu>
here's to hoping their other customers have a regenerator runtime <2 years old


2023-09-08
[02:37:40.0059] <rkirsling>
it'll take 'til next week before I can get my colleagues to fill out the Doodle but it's safe to say that at least one of the days will have more than 24 people

[02:58:14.0621] <Rob Palmer>
Thanks Ross. Does this also apply to the Wednesday dinner? 

[02:59:38.0958] <Rob Palmer>
Also, the Doodle is just for advertising. If folk want to attend they must fill in the registration for. That's the one I suggest you ask them to fill in if they are coming. 

[04:06:17.0470] <rkirsling>
er whoops. consider "Doodle" a misspeak on my part

[04:06:49.0901] <rkirsling>
I'm not certain that any of the three plan to attend the dinner

[08:12:53.0689] <mgaudet>
Q: If I were looking for well regarded criticism of Proxies as they exist in the language (perhaps retrospective "they were a bad idea"), does anyone have any pointers to things that they may not agree with but think are worthwhile viewpoints to consider (I'm seeking this as background to something I'm rolling around) 

[08:15:39.0570] <mgaudet>
(also, to be clear, I just want to understand the shape of criticism here) 

[10:02:37.0525] <bakkot>
mgaudet: I think Proxies were a bad idea. Basically it comes down to one thing, with two angles, namely, they make code hard to reason about. this means that a.) any implementation, tooling, or library needs to account for the possibility of side-effects in many more places than they otherwise would and b.) anyone trying to read or maintain code which uses them has to reason about the behavior of that code in a fundamentally different way than any other code.

basically, they add an incredible amount of complexity to the language, and the thing you get in exchange - "now objects can have a much wider range of behaviors when interacted with" - isn't even a good thing.

[10:04:08.0614] <mgaudet>
Thank you :) That's a helpful comment. 

[10:04:44.0188] <TabAtkins>
Should've just added `__method_missing__`

[10:44:53.0223] <shu>
why only hook behavior that's missing

[10:45:00.0050] <shu>
`__on_step__`

[11:19:51.0952] <Mathieu Hofman>
I do wish proxies had more strict invariants where it would become inert (traps no longer invoked) once the language invariants says the proxy cannot change its answer anymore. More specifically, there is no good reasons for most proxy traps to be invoked if the proxy is frozen. I guess I'd prefer a mechanism that allows lazily building behavior, but not change that behavior dynamically forever.

[11:22:28.0176] <Chris de Almeida>
> <@bakkot:matrix.org> mgaudet: I think Proxies were a bad idea. Basically it comes down to one thing, with two angles, namely, they make code hard to reason about. this means that a.) any implementation, tooling, or library needs to account for the possibility of side-effects in many more places than they otherwise would and b.) anyone trying to read or maintain code which uses them has to reason about the behavior of that code in a fundamentally different way than any other code.
> 
> basically, they add an incredible amount of complexity to the language, and the thing you get in exchange - "now objects can have a much wider range of behaviors when interacted with" - isn't even a good thing.

this.  1000x this.

[11:36:09.0221] <Richard Gibson>
> <@mhofman:matrix.org> I do wish proxies had more strict invariants where it would become inert (traps no longer invoked) once the language invariants says the proxy cannot change its answer anymore. More specifically, there is no good reasons for most proxy traps to be invoked if the proxy is frozen. I guess I'd prefer a mechanism that allows lazily building behavior, but not change that behavior dynamically forever.

related to that, I think it was huge unwarranted complexity to require observable lookup of methods on the handler inside every operation rather than capturing those methods at proxy instantiation

[12:28:01.0594] <ljharb>
> <@gibson042:matrix.org> related to that, I think it was huge unwarranted complexity to require observable lookup of methods on the handler inside every operation rather than capturing those methods at proxy instantiation

1000% this also, that "live handler object" pattern is absurd


2023-09-09
[16:23:24.0577] <ljharb>
oof, another one https://bugs.chromium.org/p/chromium/issues/detail?id=1480783

[16:32:57.0465] <bakkot>
transcend again, yeah

[16:32:58.0407] <bakkot>
alas


2023-09-10
[18:58:14.0169] <shu>
yeah i'm flipping the kill switch on monday

[18:58:14.0840] <shu>
sigh

[18:58:22.0032] <shu>
bakkot: could you put it on the agenda as well?

[20:31:08.0698] <snek>
shu: are these supposed to be here https://gc.gy/162021598.png

[06:13:01.0613] <Jack Works>
very unlucky. it becomes harder to add new things especially if they're on the prototype.

[06:14:18.0293] <nicolo-ribaudo>
I can try asking to the regenerator maintainer to npm deprecate old regenerator versions

[06:14:32.0136] <nicolo-ribaudo>
* I can try asking to the regenerator maintainer to npm deprecate old regenerator versions if that would help

[07:47:37.0803] <ljharb>
that may help yeah

[09:39:59.0037] <shu>
snek: i believe so, yes

[12:32:18.0373] <bakkot>
shu: done

[12:32:46.0695] <bakkot>
listed you as presenter but presumably michael will have something to say as well


2023-09-11
[12:24:15.0613] <bakkot>
reminder that the deadline to add things to the agenda is in 4 days


2023-09-12
[19:44:18.0271] <shu>
time just gets away from us

[20:01:12.0979] <rbuckton>
Which reminds me. Is anyone interested in taking over as reviewers for https://github.com/tc39/proposal-throw-expressions? Both of my previous reviewers had to step down.
I can ask at plenary as well, but I was hoping to have reviewers and reviews lined up ahead of plenary to potentially advance it to Stage 3...

[20:03:03.0030] <bakkot>
rbuckton: you might consider putting it on the agenda anyway, and if you don't find reviewers before ask in plenary on the first day if anyone can review on short notice

[20:03:08.0187] <bakkot>
the proposal is small enough for that to be practical

[01:12:49.0730] <nicolo-ribaudo>
I can review 

[10:26:45.0819] <Michael Ficarra>
FYI please do not add items to the agenda without listing a presenter


2023-09-13
[03:51:43.0236] <Michael Ficarra>
anybody interested in picking up the date parsing proposal? https://twitter.com/domenic/status/1701888428244173166

[03:51:52.0389] <Michael Ficarra>
this problem isn't going away on its own

[07:54:29.0431] <pipobscure>
I‚Äôd actually plead to leave the problem unresolved and simply declare `Date` as broken.

[07:54:37.0949] <pipobscure>
Temporal already solves the issue.

[07:55:16.0852] <pipobscure>
So the canonical solution should be to migrate away from `Date` to `Temporal` instead of patching and modifying existing `Date` behaviour

[07:55:54.0037] <pipobscure>
Especially as modifying the existing behaviour carries a risk of breaking the Web for anyone that has fixed this issue based on browser identification

[07:56:24.0481] <pipobscure>
(That‚Äôs of course just my highly biased 0.02‚Ç¨)

[07:57:33.0437] <ljharb>
also, it seems like a single project aiming to match another needing to reimplement another engine's date parser, one time, isn't much evidence of it being "needed"

[08:00:32.0116] <Michael Ficarra>
pipobscure: you aren't considering that engine implementors are one audience of the specification

[08:01:11.0609] <Michael Ficarra>
there's no way for a new engine to implement Date.parse in a web-compatible way from scratch via the spec

[08:01:33.0887] <pipobscure>
> <@michaelficarra:matrix.org> pipobscure: you aren't considering that engine implementors are one audience of the specification

I don‚Äôt understand what you mean. Could you explain?

[08:01:58.0970] <pipobscure>
> <@pipobscure:matrix.org> I don‚Äôt understand what you mean. Could you explain?

(as in of course engine implementors are an audience of the spec)

[08:02:11.0116] <Michael Ficarra>
pipobscure: people writing new JS code are not the only ones who may be reading the spec to undstand how APIs are meant to behave

[08:02:22.0832] <pipobscure>
> <@michaelficarra:matrix.org> there's no way for a new engine to implement Date.parse in a web-compatible way from scratch via the spec

That‚Äôs the key part: NEW implementors

[08:02:25.0829] <pipobscure>
True that

[08:03:41.0000] <Michael Ficarra>
Web compatibility depends on particular behaviour of Data.parse that is not encoded in the spec. It is our job to address that.

[08:03:57.0996] <Michael Ficarra>
I don't see how that could be argued

[08:04:05.0318] <pipobscure>
Is there precedence for ‚ÄúLet‚Äôs specify what new implementations should do while leaving all existing implementations alone.‚Äù ?

[08:04:08.0748] <Michael Ficarra>
 * I don't see how that could be argued against

[08:04:24.0582] <Michael Ficarra>
yes, all the time

[08:04:34.0733] <Michael Ficarra>
and it's "precedent"

[08:06:30.0355] <ljharb>
unfortunately attempts to gradually specify that in the past have been blocked, and the requirement seems to be "specify everything all at once, or specify nothing", hence nothing's been done

[08:06:40.0679] <ljharb>
error stacks is in the same boat

[08:50:23.0974] <bakkot>
> <@pipobscure:matrix.org> I‚Äôd actually plead to leave the problem unresolved and simply declare `Date` as broken.

I would love to live in a world where we could get people to stop using old features, but alas I suspect it's not going to happen

[08:50:38.0502] <bakkot>
so I think it's still worth putting effort in, even for existing implementations, so we can avoid stuff like https://bugzilla.mozilla.org/show_bug.cgi?id=1825938

[08:53:02.0147] <shu>
this is like, "we can't have justice, that's why we have the law", except it's "we can't tell people what to do, so we have standards that reflect reality"

[09:17:40.0984] <Michael Ficarra>
okay now that we all agree that clarifying Date.parse is, indeed, still valuable, does anybody want to take up this proposal again?

[09:22:20.0668] <Richard Gibson>
if the goal is "_specify behavior of `Date.parse` that is required for web compatibility but not defined in the specification_", I don't think https://github.com/tc39/proposal-uniform-interchange-date-parsing applies‚Äîit would be a brand new proposal

[09:23:17.0718] <Richard Gibson>
 * if the goal is "_specify behavior of `Date.parse` that is required for web compatibility but not currently documented_", I don't think https://github.com/tc39/proposal-uniform-interchange-date-parsing applies‚Äîit would be a brand new proposal

[09:23:55.0243] <bakkot>
This seems like it could be done somewhat incrementally: make a list of the cases where some implementation has needed to implement any particular behavior, and write that down

[09:24:08.0620] <bakkot>
and then say that things not in one of those forms are implementation-defined

[09:24:17.0453] <bakkot>
and then whenever a new one gets hit, add it to the list

[09:29:49.0931] <Richard Gibson>
in that case no proposal is necessary, just a sequence of web-reality PRs in (ecma262, test262) pairs

[09:37:52.0630] <Michael Ficarra>
Richard Gibson: Sure, a series of PRs would be fine, but I assume the research into what is commonly supported will mostly need to be front-loaded

[10:00:20.0471] <Richard Gibson>
to be frank, I don't see this going anywhere unless it's driven by current major implementations, who have pretty much no incentive. A fringe behavior is generally identified as required for web compatibility by observing breakage when it is changed, and some of those will be required in that sense even if they are not uniform across implementations. "Commonly supported" is a different concept but easier to determine, and if the committee establishes that as the criterion (basically encoding Hyrum's Law as a baseline) then what we'll end up with is an expansion of formats that must be accepted (and how to interpret them in ugly cases like "2023-02-30") and no description of what must‚Äîor even _may_‚Äîbe rejected. Which is somewhat better than the current situation in which the same effectively holds but without documentation, although not by enough to motivate the kind of research you describe.

but anyway, https://tc39.es/proposal-uniform-interchange-date-parsing/cases.html may be a decent starting point for any aspirational Don Quixote out there

[11:37:28.0800] <bakkot>
shu: did you see https://github.com/tc39/proposal-iterator-helpers/issues/286#issuecomment-1718129217 ?

[11:37:43.0780] <shu>
i did

[11:38:09.0028] <shu>
i can confirm the killswitch config is rolled out, but something else is wrong that it's not actually disabling the feature

[12:09:59.0022] <Rob Palmer>
The feature wants to live.

[12:10:41.0375] <Chris de Almeida>
life finds a way


2023-09-14
[17:15:18.0094] <rkirsling>
I believe my colleagues should have responded to the GH org invites a couple days ago

[13:10:14.0720] <Rob Palmer>
Two folk from Sony are registered in addition to yourself, Ross. 


2023-09-15
[19:05:21.0199] <rkirsling>
registered, yeah. I'm not sure why the third hasn't been responding to DMs


2023-09-18
[15:15:07.0962] <bakkot>
ljharb: 5 minutes for the pattern matching update seems... ambitious

[15:19:42.0289] <Michael Ficarra>
I dunno, I can say "here's a gist you should read" pretty quick

[15:36:35.0565] <Michael Ficarra>
üôè as someone whose items are all near the bottom of a full agenda, I am just hoping we make haste and avoid waste wherever we can

[15:57:10.0303] <ljharb>
It‚Äôs not going to be any details, just broad strokes

[16:43:22.0226] <shu>
oh wow we went from a pretty sparse agenda to a really full one

[16:43:32.0105] <shu>
i count 18+ hours

[16:43:46.0746] <shu>
how many working hours do we have?

[16:49:38.0377] <shu>
like 14-15 or so i think? 20 hours - 3 for lunch - 1.5 for coffee breaks - 1 for administrative agenda items


2023-09-19
[18:01:40.0937] <rkirsling>
> <@shuyuguo:matrix.org> oh wow we went from a pretty sparse agenda to a really full one

classic

[09:00:08.0545] <davethegr8>
Why did `promise with resolvers for stage 4 #1453` merge after the deadline to advance?

[09:10:38.0260] <bakkot>
"must be added (and noted as such) along with links to the supporting materials prior to the deadline, or else delegates may withhold consensus for advancement solely on the basis of missing the deadline."

[09:11:23.0710] <bakkot>
i.e. you are still allowed to add things if you really want, just that delegates can object to advancement

[09:11:35.0316] <bakkot>
 * i.e. you are still allowed to add things if you really want, just that delegates can object to advancement on the basis of lateness

[09:14:20.0277] <Chris de Almeida>
it is also noted with the emoji indication:  `‚åõÔ∏è	late addition for stage advancement and/or schedule prioritization`

[09:14:31.0953] <Chris de Almeida>
 * it is also noted with the emoji indication:  `‚åõÔ∏è late addition for stage advancement and/or schedule prioritization`

[09:15:26.0836] <Chris de Almeida>
via Rob on Reflector:

We have ~20 hours of content on the agenda and only ~16 hours of capacity. Meaning ~4 hours of content will likely overflow.

Please consider if you would like to send a PR to reduce the requested timebox of any of your agenda items. Likewise if you would like to proactively designate your item as low priority (i.e. a candidate for overflow to the next meeting if we don't find time for it), please mark it with a ‚¨á emoji.

[09:40:52.0570] <shu>
Rob Palmer: i don't know if you or someone else added the promise withresolvers thing, but i think it's too early for stage 4 just yet

[09:41:31.0232] <shu>
it _just_ shipped and i'd like to wait for it to hit at least beta

[09:53:51.0178] <Chris de Almeida>
peetk: üëÄ

[13:43:06.0631] <peetk>
oopsie daisy -- will revert agenda item

[13:48:30.0988] <ljharb>
no need for a PR, just push up a commit

[13:48:35.0939] <ljharb>
 * (btw no need for a PR, just push up a commit)


2023-09-20
[01:06:48.0715] <rkirsling>
kinda hype for more non-coercion talk tbh

[01:06:57.0351] <rkirsling>
(especially since I missed round one)

[09:08:20.0159] <Michael Ficarra>
rkirsling: If you haven't seen it yet, we have a PR open for what was already decided: https://github.com/tc39/how-we-work/pull/136

[10:31:49.0042] <Chris de Almeida>
related:  https://docs.google.com/presentation/d/e/2PACX-1vSw84uzAT9EWY-xN526UhWpUCzsB8rLQPLfvhavqOf8c-tx6z2DlfrOPpzS61l7JZ9VLohoOUeVSLaa/pub?start=false&loop=false&delayms=3000

[14:04:26.0741] <Chris de Almeida>
üì¢ if you have constraints for this coming plenary, please add them to the agenda md as soon as possible


2023-09-21
[10:09:41.0272] <Chris de Almeida>
```
You will not be able to access your workspaces and other resources on HackMD during the times listed below.

Maintenance Schedule
00:00 to 01:00 on September 24th (UTC)
```


2023-09-22
[21:08:04.0796] <bakkot>
https://mastodon.social/@hailey@hails.org/111105611822853351

[21:08:17.0526] <bakkot>
> How does it work? Turns out oniguruma, the regexp engine ruby uses, supports 'calling' previously defined capture groups with the \g<...> syntax

[21:08:19.0675] <bakkot>
kind of love this

[21:38:45.0957] <rbuckton>
I brought that to committee but it didn't get stage 1

[21:42:33.0651] <rbuckton>
Well, it was part of the big regexp features proposal that I had to break down into smaller proposals. I haven't presented it on its own yet because it seemed like it would have a lower likelihood of success, so it hasn't been a priority 

[21:42:43.0774] <snek>
regex should not have that feature

[21:44:26.0094] <rbuckton>
It's extremely valuable and let's you compose a lot of small reusable patterns. It's very good for parsing ISO-8601 dates to spec

[21:44:42.0143] <snek>
i mean its certainly cool

[21:44:52.0472] <snek>
but i think any complex enough to warrant it should not be a regex anymore

[21:45:03.0702] <snek>
 * but i think anything complex enough to warrant it should not be a regex anymore

[21:45:54.0442] <rbuckton>
It's also present in a lot of engines like Perl, PCRE, Boost.Regex, Oniguruma, and Glib/GRegex

[21:46:07.0477] <rbuckton>
https://rbuckton.github.io/regexp-features/features/subroutines.html

[21:46:38.0684] <rbuckton>
Here's an example of date parsing:

```
(?(DEFINE)
  (?<Year>\d{4}|[+-]\d{5,})
  (?<Month>0[1-9]|1[0-2])
  (?<Day>0[1-9]|2[0-9]|3[01])
)
(?<Date>(?&Year)-(?&Month)-(?&Day)|(?&Year)(?&Month)(?&Day))
```

[21:48:38.0496] <rbuckton>
(that's from Perl, apparently I have the wrong example up for Oniguruma)

[21:49:20.0131] <snek>
ok but like, Temporal.ZonedDateTime.from(s) exists

[21:49:42.0611] <rbuckton>
That's a solution to a singular problem, not the whole domain.

[21:51:05.0155] <rbuckton>
Consider the TypeScript.tmLanguage file used to generate syntax highlighting in many editors. We hacked our own substitution mechanism in to inject a number of reusable regular expressions into the final output file.

[21:51:49.0897] <rbuckton>
(as in, we have named substitutions in the source file, and generate an output `.tmLanguage` file with substitutions applied)

[21:52:08.0353] <snek>
but tree-sitter exists

[21:52:44.0672] <snek>
> <@rbuckton:matrix.org> That's a solution to a singular problem, not the whole domain.

my point is not the specific thing, its that in basically every case, a more comprehensive alternative exists, because complex data generally requires complex handling

[21:55:26.0725] <rbuckton>
More comprehensive in some cases is like using a sledgehammer to smash an ant. Sometimes the tools are a lot bigger than what's needed, and bring in a lot of additional overhead.

[21:55:52.0122] <rbuckton>
Regardless, its not the most important feature on my wishlist of RegExp features, which is why its currently on the backburner.

[21:56:46.0167] <rbuckton>
Sometimes the best tool is the one that's at hand.

[21:58:17.0419] <rbuckton>
I also know I'm among the minority that really enjoys regular expressions.

[21:59:15.0089] <rbuckton>
Sometimes you just want to parse your HTML using a RegExp, you know? /s

[22:03:42.0257] <Chris de Almeida>
You can't parse HTML with RegExp.

[22:09:43.0682] <ljharb>
so sayeth https://stackoverflow.com/a/1732454/632724

[22:57:25.0104] <rbuckton>
The `<center>` cannot hold

[22:57:44.0490] <rbuckton>
it is too late

[22:58:11.0899] <rbuckton>
That stackoverflow post has lived rent free in my head for well over a decade.

[06:10:19.0031] <Michael Ficarra>
now that some of us have arrived in Japan for the meeting next week, can we get a Japan matrix room Chris de Almeida Rob Palmer?

[08:41:07.0485] <Rob Palmer>
Please say if you would like to be in the Japan matrix room and do not see the invite.

[08:41:20.0841] <Rob Palmer>
I have invited everyone who was registered, I think.

[08:42:17.0358] <Willian Martins>
Is this registration for the in people attending in person, correct?

[08:44:24.0353] <Rob Palmer>
yes - it's only in-person that required pre-registration


2023-09-24
[21:07:51.0512] <rbuckton>
I was thinking about the old `.{` operator recently, in terms of how it could potentially be used for extraction and injection as an RCU (read/copy, update) mechanism in the shared structs proposal (or possibly as a follow on). I started tinkering with various ideas for the syntax, and while I have something fairly consistent in mind, I came across a wart related to spread and rest assignments in destructuring syntax:
```js
a = { ...b }; // spread properties of 'b' 
({ ...x } = y); // take the rest of the properties and put them in 'x'
```
One of the ideas I had for `.{` was doing named spread/rest in extraction/injection, in which you would want extraction and injection to be mirrored, and you could either use spread _or_ rest in either operator:
```
b = a.{ x, ...y }; // pick 'x' as 'x', and pick up the rest as 'y'
b = a.{ x, y... }; // pick 'x' as 'x', and spread out 'y'
a.{ x, ...y } = b; // assign 'x' from 'x', and take up the rest as 'y'
a.{ x, y... } = b; // assign 'x' from 'x', and spread out 'y'
```
Which makes me wonder if spread should have been mirrored as `foo...`

[21:09:34.0327] <rbuckton>
 * I was thinking about the old `.{` operator recently, in terms of how it could potentially be used for extraction and injection as an RCU (read/copy, update) mechanism in the shared structs proposal (or possibly as a follow on). I started tinkering with various ideas for the syntax, and while I have something fairly consistent in mind, I came across a wart related to spread and rest assignments in destructuring syntax:

```js
a = { ...b }; // spread properties of 'b' 
({ ...x } = y); // take the rest of the properties and put them in 'x'
```

One of the ideas I had for `.{` was doing named spread/rest in extraction/injection, in which you would want extraction and injection to be mirrored, and you could either use spread _or_ rest in either operator:

```
b = a.{ x, ...y }; // pick 'x' as 'x', and pick up the rest as 'y'
b = a.{ x, y... }; // pick 'x' as 'x', and spread out 'y'
a.{ x, ...y } = b; // assign 'x' from 'x', and take up the rest as 'y'
a.{ x, y... } = b; // assign 'x' from 'x', and spread out 'y'
```

Which makes me wonder if spread should have been written as `foo...`


2023-09-25
[17:46:07.0460] <bakkot>
I do not love the thing where the agenda is structurally set up so that proposals are higher priority than larger discussions

[17:46:14.0074] <bakkot>
seems like it ought to be the other way around

[19:02:28.0327] <littledan>
well, backlog is highest priority, so you can always get a time slice for discussions, just every two meetings

[19:03:10.0603] <littledan>
also if a discussion should block a proposal, it can always be bumped up (on a case by case basis)

[19:06:07.0870] <littledan>
historically, we adopted this prioritization back when we were trying to get out of the pattern of spending all day on some very circular philosophical discussions which should not have blocked proposals

[19:06:37.0177] <littledan>
 * well, overflow from last meeting is highest priority, so you can always get a time slice for discussions, just every two meetings

[19:24:36.0648] <littledan>
if there's a particular discussion that we should prioritize, maybe note that in schedule constraints?

[19:25:01.0685] <littledan>
(personally, when I've put discussions on the agenda in the past, I actually wanted them to be deprioritized generally)

[19:26:30.0768] <littledan>
> <@rbuckton:matrix.org> I was thinking about the old `.{` operator recently, in terms of how it could potentially be used for extraction and injection as an RCU (read/copy, update) mechanism in the shared structs proposal (or possibly as a follow on). I started tinkering with various ideas for the syntax, and while I have something fairly consistent in mind, I came across a wart related to spread and rest assignments in destructuring syntax:
> 
> ```js
> a = { ...b }; // spread properties of 'b' 
> ({ ...x } = y); // take the rest of the properties and put them in 'x'
> ```
> 
> One of the ideas I had for `.{` was doing named spread/rest in extraction/injection, in which you would want extraction and injection to be mirrored, and you could either use spread _or_ rest in either operator:
> 
> ```
> b = a.{ x, ...y }; // pick 'x' as 'x', and pick up the rest as 'y'
> b = a.{ x, y... }; // pick 'x' as 'x', and spread out 'y'
> a.{ x, ...y } = b; // assign 'x' from 'x', and take up the rest as 'y'
> a.{ x, y... } = b; // assign 'x' from 'x', and spread out 'y'
> ```
> 
> Which makes me wonder if spread should have been written as `foo...`

This is definitely interesting, but also makes me a little scared about whether or not people will be able to understand it well

[19:27:34.0532] <rbuckton>
> <@littledan:matrix.org> This is definitely interesting, but also makes me a little scared about whether or not people will be able to understand it well

It's less that I would propose the more complex bits initially, but that I wanted to explore the syntax fully to make sure it remained consistent.

[19:35:52.0718] <rbuckton>
> <@littledan:matrix.org> This is definitely interesting, but also makes me a little scared about whether or not people will be able to understand it well

 * It's less that I would propose the more complex bits initially (if at all), but that I wanted to explore the syntax fully to make sure it remained consistent.

[22:10:26.0709] <littledan>
Rob and I are about to do an AV test in a few minutes. If you want to help out, DM me and I will respond with a Zoom link

[23:11:36.0485] <bakkot>
> <@littledan:matrix.org> if there's a particular discussion that we should prioritize, maybe note that in schedule constraints?

well, concretely, I would like to get to the Stop Coercing Things discussion, since it affects the design of all future proposals

[23:11:48.0591] <bakkot>
And since we started but did not finish the discussion last meeting

[23:12:04.0462] <littledan>
I'm fine with deprioritizing my various "withdraw" topics; they can wait until next meeting

[23:12:06.0878] <bakkot>
But I do not have any related schedule constraints

[23:16:18.0333] <littledan>
I think "I want this to happen this meeting rather than a future meeting" is a constraint you're expressing about the schedule... anyway if you don't think this prioritization is a good fit for one section to document the need, maybe you can document it in a new part of the agenda

[23:17:31.0622] <littledan>
I want to discuss your topic but ultimately there are going to be a lot of different points of view people have about why their topic should be prioritized; if these are all collected in one place, then it will be easier for the chairs to go and solve as many for as many prioritization inputs as possible.

[01:32:43.0366] <Michael Ficarra>
bakkot: You can always jump to the higher-priority "shorter discussions" section by selecting a 30-minute or less time box

[01:33:08.0416] <Michael Ficarra>
we designed the agenda like this on purpose and I like it how it is

[12:38:17.0931] <TabAtkins>
...I'm reading the Temporal docs, and in the `round()` method they say:
> When there is a tie, round away from zero like ceil for positive durations and like floor for negative durations. This is the default, and matches the behaviour of Math.round().

But `Math.round()`, uh, doesn't do that. `Math.round(-1.5)` is -1; it ciels on the half values.

[12:39:35.0332] <TabAtkins>
(I was very confused when I read that because I was pretty sure I specified CSS to use ceil semantics on the halves by default, and I did so because that was JS's behavior. And indeed: <https://drafts.csswg.org/css-values/#round-func>)

[12:40:14.0701] <TabAtkins>
<https://tc39.es/proposal-temporal/docs/duration.html#round> for the Temporal docs reference, scroll down a bit to get to the rounding modes

[12:44:34.0810] <ptomato>
waaaaat

[12:44:39.0740] <Kamil Og√≥rek>
I think this is mostly wording issue from my understanding. `Math.round(-1.5)` performs "floor-like" operation in a sense that it rounds to the nearest "bottom" value. It's not taking the sign into account in the explanation here though.

[12:45:26.0013] <Kamil Og√≥rek>
Obviously -2 is "bottom" for -1.5, but it's 1 for "not signed" -1.5

[12:46:13.0527] <ptomato>
I guess Tab is saying that the behaviour of `Math.round` corresponds to `halfCeil` and not `halfExpand`?

[12:46:23.0260] <ptomato>
(to use the rounding mode terminology)

[12:50:44.0866] <Kamil Og√≥rek>
It looks exactly like that. It always rounds towards +Infinity, for both, positives and negatives now

[12:55:36.0474] <ptomato>
I think Intl.NumberFormat has a default rounding mode of halfExpand too, with this same rationale. I'm not sure which came first, whether Temporal based its default on NumberFormat, or the mistaken belief that Math.round corresponds to halfExpand

[13:48:52.0742] <TabAtkins>
Yes, `Math.round()` defaults to `halfCeil` behavior, not `halfExpand` as the Temporal docs state.

[13:49:44.0163] <TabAtkins>
I don't think it's a misunderstanding on my reading - the docs are pretty explicit about the behavior. They're just wrong about it being "like `Math.round()`", which might be something that they want to fix.

[13:50:12.0222] <TabAtkins>
(Either in the docs, because `halfExpand` is desirable as the default, or in the spec, because `halfCeil` is the actual default behavior in `Math.round()`.)

[14:14:47.0169] <Kamil Og√≥rek>
I didnt mean to say you read it wrong, but rather that maybe person who wrote it used too much of a mental shortcut, which led to a real mistake :)


2023-09-26
[17:23:29.0918] <Rob Palmer>
Good morning from Tokyo.  Plenary begins in 37 minutes.

[17:59:29.0548] <Rob Palmer>
We are starting in one minute!

[18:13:21.0125] <msaboff>
The notes don't have a header for attendee names, org and abbreviation.

[18:13:23.0093] <bakkot>
is tcq down for anyone else?

[18:13:42.0046] <littledan>
yes :( I guess we'll have to go to the google sheets backup?

[18:13:42.0240] <ryzokuken>
just now, I think

[18:13:42.0633] <rkirsling>
yes

[18:13:42.0863] <msaboff>
Yeah, looks down to me.

[18:15:25.0074] <ryzokuken>
back on?

[18:15:46.0836] <msaboff>
LGTM now

[18:17:00.0879] <jkup>
Are the task group reports still on for this first section today?

[18:17:48.0485] <Michael Ficarra>
... we have delegates.txt for that msaboff 

[18:17:51.0397] <littledan>
jkup: Yes

[18:18:10.0700] <sffc>
Would really appreciate having Locale Extensions get onto the agenda in order to surface stakeholders and get a temperature check on the current direction. ( Rob Palmer ryzokuken Chris de Almeida )

[18:18:12.0693] <littledan>
> <@michaelficarra:matrix.org> ... we have delegates.txt for that msaboff

Yeah, I was happy to see this section missing, since we have the sign-in sheets (plural!) in addition to the abbreviations list

[18:18:33.0497] <Michael Ficarra>
yes let's not continue this practice for no reason

[18:18:37.0879] <rkirsling>
ah, perhaps it just needed to be made clear that we no longer need it

[18:18:43.0309] <rkirsling>
I was wondering too

[18:18:46.0225] <littledan>
> <@rkirsling:matrix.org> ah, perhaps it just needed to be made clear that we no longer need it

was the omission on purpose?

[18:19:01.0352] <littledan>
(I don't know either way)

[18:19:09.0666] <rkirsling>
oh sorry, I was inferring that it was

[18:19:16.0376] <rkirsling>
I have no idea

[18:19:34.0072] <ryzokuken>
msaboff should be good to go now

[18:20:04.0847] <Michael Ficarra>
motion to delete it again

[18:20:12.0001] <Rob Palmer>
So to confirm, TCQ appears to be working.

[18:21:09.0140] <msaboff>
> <@usharma:igalia.com> msaboff should be good to go now

Now we just need everyone else to add their names.

[18:21:31.0451] <Rob Palmer>
> <@sffc:mozilla.org> Would really appreciate having Locale Extensions get onto the agenda in order to surface stakeholders and get a temperature check on the current direction. ( Rob Palmer ryzokuken Chris de Almeida )

Is this on the agenda?  If not, please PR it.

[18:22:02.0460] <sffc>
> <@robpalme:matrix.org> Is this on the agenda?  If not, please PR it.

It's in the overflow.

[18:23:40.0002] <ryzokuken>
we'll try to free up as much time as we can as we go and try to bring items from the overflow to discussion

[18:23:59.0808] <bakkot>
"pdf has highest downloads" is meaningless; the editor's draft on github does not have statistics

[18:24:13.0710] <shu>
i am laughing on the inside

[18:29:58.0799] <snek>
i'm pretty sure github pages has some analytics

[18:31:35.0951] <snek>
oh nvm i'm thinking of repo analytics

[18:32:03.0705] <ljharb>
it's nice to have the abbreviation list in the same document, i think

[18:32:08.0342] <ljharb>
 * re notes, it's nice to have the abbreviation list in the same document, i think

[18:33:03.0468] <bakkot>
at some point all the time spent talking about the PDF is going to successfully annoy me enough to do the automation just so we can stop talking about it

[18:33:06.0784] <bakkot>
which was the goal I guess

[18:33:20.0053] <Michael Ficarra>
ljharb: we have tabs; when I am taking notes, I just keep delegates.txt open in a tab

[18:33:36.0204] <ljharb>
true, maybe just a link to the list for easy tab-opening would be better then

[18:33:37.0146] <bakkot>
the PDF is a fair bit of work and it is hard to motivate because I don't use the PDF at all

[18:33:45.0512] <bakkot>
which is why we keep trying to get ECMA to hire people instead

[18:34:27.0534] <shu>
i think, in general, practitioners and implementers that engage with the PDFs are rarely doing so on purpose for checking the behavior of a particular yearly version, and because they missed that there is a draft they should be using

[18:34:52.0498] <ljharb>
i never use the pdf; even when checking a past yearly version i use the HTML form

[18:34:54.0291] <ljharb>
 * i never use the pdf; even when checking a past yearly version i use the HTML version

[18:34:55.0232] <ljharb>
 * i never use the pdf; even when checking a past yearly version i use the HTML versions

[18:34:57.0599] <shu>
so it's primarily for archival purposes, which is mainly consumed by ecma

[18:35:23.0494] <ljharb>
afaik the concerns aren't about archival tho, they're about readability when printed. webpages can be easily archived as PDFs without any additional changes.

[18:35:34.0807] <ljharb>
 * afaik the concerns aren't about archival tho, they're about readability when printed. webpages can be easily archived as PDFs without any additional changes.

do many people even own a printer anymore?

[18:35:41.0214] <shu>
fair, i meant archival-as-printed-physical-artifact

[18:35:43.0258] <littledan>
I agree that practitioners should typically use the editor's draft, but I want to note that the market for "archival purposes" is broader than Ecma and that's a good thing. This is shared with ISO, put in libraries, etc.

[18:36:03.0676] <littledan>
there's been a lot of stuff lost in the past and it's good to have printed artifacts to avoid that

[18:36:48.0402] <littledan>
anyway I think everyone agrees the editors are already doing a lot and no need for this to be all on them

[18:36:52.0376] <snek>
the new font is quite good

[18:37:02.0019] <shu>
_except_ the #

[18:37:04.0141] <shu>
# so weird

[18:37:06.0366] <shu>
oh god

[18:37:17.0609] <snek>
lol

[18:37:21.0371] <shu>
i can't just type the sentence "# so weird", there's Markdown support in Element?

[18:37:38.0431] <ljharb>
`#` so weird

[18:37:48.0229] <snek>
did we check if there is a font variant for `#` in the font we're using?

[18:38:23.0488] <ryzokuken>
is it just the bold `#`?

[18:38:37.0522] <shu>
that's what we thought at first, i think we found out it was the monospace #

[18:39:00.0288] <Michael Ficarra>
https://github.com/tc39/ecmarkup/issues/556

[18:39:09.0165] <Michael Ficarra>
yes, it is all monospace variants

[18:39:16.0939] <bakkot>
https://github.com/IBM/plex/issues/401#issuecomment-1727079001

[18:39:49.0778] <Michael Ficarra>
> > An update for Plex Mono is scheduled for later this year. It will include a reworked version of the # symbol as stylistic alternate.

[18:39:53.0391] <snek>
nice

[18:39:57.0015] <Michael Ficarra>
 * > An update for Plex Mono is scheduled for later this year. It will include a reworked version of the # symbol as stylistic alternate.

[18:40:12.0413] <shu>
watch the stylistic alternate remove the horizontal overlapping segments too

[18:40:32.0895] <rkirsling>
https://tc39.es/ecma262/ is somehow slow to the point of unusable for me

[18:40:42.0626] <snek>
slow how?

[18:40:46.0754] <rkirsling>
like, I'm scrolling and it's just blank

[18:40:51.0631] <Michael Ficarra>
rkirsling: yes it is a very big document

[18:40:52.0445] <bakkot>
try Firefox

[18:40:57.0025] <Michael Ficarra>
^

[18:40:59.0125] <bakkot>
chrome always struggles on long pages

[18:41:11.0273] <snek>
its super responsive for me in firefox, and i'm not even using gpu acceleration

[18:41:14.0179] <Michael Ficarra>
also try the multipage document

[18:41:14.0865] <rkirsling>
this is Safari

[18:41:25.0337] <rkirsling>
but yeah multipage would help

[18:41:31.0602] <Michael Ficarra>
https://tc39.es/ecma262/multipage/

[18:41:32.0392] <bakkot>
`m` to switch!

[18:41:49.0757] <snek>
wow the single page is very good in chrome too

[18:41:57.0658] <snek>
like maybe as good as firefox

[18:42:36.0378] <Michael Ficarra>
firefox is definitely more responsive and loads in maybe 1/10th the time

[18:42:50.0654] <snek>
safari takes like 15 seconds to even show the page

[18:43:09.0559] <snek>
 * safari takes like 15 seconds to even show the top of the page

[18:43:27.0923] <Michael Ficarra>
oof

[18:43:36.0960] <bakkot>
ecma404 is my favorite specification

[18:43:37.0646] <shu>
one day chip will surprise us

[18:43:45.0418] <bakkot>
someday I hope 262 achieves that level of stability

[18:43:57.0125] <shu>
JS is much more like a shark than JSON

[18:44:01.0666] <shu>
i do not hope for that

[18:44:11.0483] <snek>
> <@bakkot:matrix.org> someday I hope 262 achieves that level of stability

there are two ways to achieve this

[18:44:19.0889] <Michael Ficarra>
wasm!

[18:44:43.0855] <bakkot>
> <@shuyuguo:matrix.org> JS is much more like a shark than JSON

... in that it is functionally immortal and will kill you if you show weakness?

[18:45:03.0495] <rkirsling>
something about jumping, probably

[18:45:08.0176] <shu>
no, that if it stops swimming it dies

[18:45:20.0341] <shu>
it's an annie hall reference, i don't actually know if it's true of actual sharks

[18:45:24.0196] <msaboff>
Safari took ~5 seconds for me and this is a 2019 Intel MBP.

[18:45:49.0482] <snek>
it is true of most shark species

[18:46:02.0722] <snek>
there are a few that can pump water through their gills instead of having to swim

[18:46:26.0252] <snek>
> <@msaboff:matrix.org> Safari took ~5 seconds for me and this is a 2019 Intel MBP.

weird i was on m2, maybe i need to use intel

[18:47:00.0421] <snek>
i'd be curious to see how other committees handle security issues

[18:48:41.0222] <Jack Works>
I am curious what vulnerability can happen in ECMAScript since it does not have too much IO

[18:50:00.0974] <snek>
i think the embedded devices folks have added a bunch

[18:50:30.0354] <snek>
actually i guess they're a separate TC now

[18:50:31.0674] <Jack Works>
that's an engine specific thing right? just like v8 bug is v8 only

[18:54:13.0340] <Richard Gibson>
> <@ljharb:matrix.org> true, maybe just a link to the list for easy tab-opening would be better then

there's a "your existing abbreviations" link to delgates.txt in the green box right below the date

[18:54:37.0629] <rkirsling>
> <@jackworks:matrix.org> that's an engine specific thing right? just like v8 bug is v8 only

that's a good point, I have usually thought of security bugs as engine bugs

[18:54:50.0583] <rkirsling>
but my knowledge of security is very weak

[18:58:05.0922] <littledan>
syg: msaboff To be clear, I'm not saying everything needs to be discussed in TC39 plenary, just that Spectre represented an interesting case to review, as it was a vulnerability at the design level rather than in a particular implementation.

[18:59:20.0822] <snek>
it could have been constructive to discuss SAB at a higher level though idk how different the outcome would have been in practice... will be interesting to see what happens in the future i guess, whatever the next intel vulnerability is. 

[18:59:45.0073] <shu>
these are all interesting _properties_ but are not _vulnerabilities_ in my book

[19:00:06.0984] <rkirsling>
vulnerability "potentials"?

[19:00:07.0917] <snek>
in that its about the hardware you're running js on, not js itself?

[19:00:13.0539] <shu>
i don't have any reservations with saying TG3 ought to discuss security properties, and ones that get raised

[19:01:20.0985] <msaboff>
> <@littledan:matrix.org> syg: msaboff To be clear, I'm not saying everything needs to be discussed in TC39 plenary, just that Spectre represented an interesting case to review, as it was a vulnerability at the design level rather than in a particular implementation.

Spectre and Meltdown are issues at the CPU level and not JS design.

[19:02:00.0359] <littledan>
sure, but we worsened them through exposure from TC39. Anyway, yeah, there probably wasn't any meaningful discussion to have here at that point, and I don't think you needed to disclose more

[19:02:01.0034] <snek>
i think its a bit ambiguous. ultimately the design of js is guided by how the hardware we run it on works

[19:02:02.0842] <bakkot>
I am fine with this but would want the disclosure text to make it really clear that we do not expect "vulnerabilities in the language" to really be a thing

[19:02:07.0641] <bakkot>
and saying you probably want something else

[19:06:03.0218] <msaboff>
It just seems a little weird to me that an open standards body would discuss vulnerabilities.  The CVE and other similar processes provide a means for those with issues to address them before bad actors are generally aware of the vulnerability.

[19:06:31.0307] <littledan>
sorry, I probably shouldn't've said anything. I don't feel like you needed to disclose Spectre in any kind of different way.

[19:06:41.0495] <shu>
> <@msaboff:matrix.org> It just seems a little weird to me that an open standards body would discuss vulnerabilities.  The CVE and other similar processes provide a means for those with issues to address them before bad actors are generally aware of the vulnerability.

yes, i have similar vague reservations

[19:06:50.0380] <shu>
but i am not very hooked into the CVE process either

[19:07:17.0428] <snek>
i am interested to see how it goes at least

[19:07:53.0109] <shu>
vulnerabilities at some conceptual level can exist because there's a mismatch between a thing (an implementation) and a source of truth (a spec), and people depend on properties of the source of truth, making it an vulnerability

[19:08:10.0942] <shu>
but i don't know what that means if it is "a vulnerability in the spec" because it _is_ the source of truth

[19:08:34.0173] <shu>
i am very uncomfortable if the mismatch is in fact with unsaid properties that _could_ be depended upon but we have not otherwise explicitly committed to keeping

[19:09:13.0516] <Michael Ficarra>
shu: surely you can imagine that there are assumed invariants about the language that may not actually hold because of the way we have specified it (which then may or may not be reflected in an implementation)

[19:09:47.0491] <shu>
Michael Ficarra: right. i can also imagine that we don't actually unanimously agree on those assumed invariants

[19:10:01.0719] <Michael Ficarra>
of course, and that is work to be done later

[19:10:04.0233] <littledan>
> <@shuyuguo:matrix.org> i am very uncomfortable if the mismatch is in fact with unsaid properties that _could_ be depended upon but we have not otherwise explicitly committed to keeping

Yeah, this is the standing disagreement about what constitutes our security model that I was describing. But I thought we all agreed that SAB had a "vulnerability" at some level, which was addressed by various implementations at non-JS levels

[19:10:33.0521] <bakkot>
I don't think of SAB having a vulnerability?

[19:10:42.0596] <bakkot>
"the language lets you get a high-res timer" is not a vulnerability

[19:10:50.0472] <eemeli>
Not really an issue with the JS spec, but something like the Billion Laughs Attack in XML and YAML could be considered as a spec "vulnerability".

[19:10:54.0634] <bakkot>
"the hardware leaks memory if you have a high-res timer" is a vulnerability

[19:11:15.0592] <littledan>
well, it was part of the exploit, sorry I guess I'm using security words wrong

[19:13:48.0303] <Michael Ficarra>
the editors had already raised concerns about it being a note

[19:14:39.0518] <bakkot>
*262 editors

[19:14:59.0174] <Michael Ficarra>
sorry, 262 editors

[19:15:27.0890] <littledan>
yes this is what I was saying

[19:15:30.0501] <littledan>
(to Mark)

[19:15:42.0206] <bakkot>
... isn't it normative already?

[19:15:46.0374] <bakkot>
it says it's normative on the agenda

[19:15:55.0387] <bakkot>
and in the PR title

[19:19:40.0374] <ryzokuken>
https://github.com/tc39/ecma402/pull/831

[19:19:56.0660] <ryzokuken>
> <@bakkot:matrix.org> ... isn't it normative already?

it's normative

[19:20:34.0915] <ryzokuken>
I guess the consensus is to do things without the non-normative label

[19:21:26.0173] <Michael Ficarra>
everything inside notes is non-normative; everything outside notes is normative

[19:23:26.0455] <bakkot>
some things outside notes are also non-normative, tbf

[19:23:31.0916] <bakkot>
 * some things outside notes are also non-normative

[19:33:52.0954] <Michael Ficarra>
I feel like I'm crazy, this is already what the PR does

[19:34:09.0907] <bakkot>
`'axc'.replace(/x/, '$01') === 'a$01c'`

[19:34:46.0609] <ryzokuken>
> <@michaelficarra:matrix.org> everything inside notes is non-normative; everything outside notes is normative

in that case we could move the text out of the notes

[19:35:48.0685] <ljharb>
> <@michaelficarra:matrix.org> I feel like I'm crazy, this is already what the PR does

it's certainly possible that it's an issue in my impl, but it's practically 1:1 with the spec text ¬Ø\_(„ÉÑ)_/¬Ø 

[19:35:51.0641] <ljharb>
> <@michaelficarra:matrix.org> I feel like I'm crazy, this is already what the PR does

 * it's certainly possible that it's an issue in my impl, but it's practically 1:1 with the spec text ¬Ø\\\_(„ÉÑ)\_/¬Ø

[19:36:11.0584] <ljharb>
> <@bakkot:matrix.org> `'axc'.replace(/x/, '$01') === 'a$01c'`

`'axc'.replace(/(x)/, '$01')` tho

[19:36:11.0756] <Michael Ficarra>
I keep re-reading it and I don't see how you could have any other behaviour

[19:36:35.0985] <bakkot>
ljharb: link your impl?

[19:36:45.0270] <ljharb>
still local since i just wrote it 8 minutes ago

[19:36:56.0550] <ljharb>
i'll share a link if a bit of debugging doesn't reveal the problem on either side

[19:36:59.0845] <Michael Ficarra>
I'm gonna take Occam's razor here

[19:37:30.0201] <msaboff>
Does anyone know how long implementations had this replace behavior? 

[19:37:35.0132] <snek>
? https://gc.gy/163400847.png

[19:38:30.0301] <ljharb>
right, exactly - that shows that `$1` and `$01` both hit the first capture group

[19:38:52.0859] <bakkot>
`'axc'.replace(/(x)/, '‚Ä¢$01‚Ä¢') === 'a‚Ä¢x‚Ä¢c'` maybe makes that easier to see

[19:39:14.0059] <ljharb>
the difference is if you have, say, 12 captures in the regex, and you use `$012` vs `$12`, the former will grab capture 1, followed by a 2; the latter will grab capture 12

[19:39:39.0036] <ljharb>
 * the difference is if you have, say, 12 captures in the regex, and you use `$012` vs `$12`, the former will grab capture 1, followed by a 2; the latter will grab capture 12.

if you have < 11 captures in the regex, `$0\d` and `$\d` are equivalent

[19:40:40.0297] <littledan>
> <@usharma:igalia.com> in that case we could move the text out of the notes

Yes, this is what I was proposing.

[19:42:27.0059] <bakkot>
if we have time which we cannot otherwise use, I am happy to take any >10m slot to get through as much of "stop coercing things" as possible

[19:42:44.0720] <bakkot>
though IIRC someone wanted to be there for that, which makes it harder to do impromptu

[19:43:34.0049] <ryzokuken>
> <@bakkot:matrix.org> if we have time which we cannot otherwise use, I am happy to take any >10m slot to get through as much of "stop coercing things" as possible

we're trying to make enough time to bring it forward, but your flexibility is very much appreciated üòÑ 

[19:47:42.0894] <ljharb>
Michael Ficarra: occam wins again, i fixed it. either way the test262 PR needs coverage for this :-)

[19:48:09.0082] <Michael Ficarra>
üéâ

[19:52:42.0656] <nicolo-ribaudo>
<small>Ladybird, Serenity is the OS</small>

[19:53:18.0466] <rkirsling>
it uh

[19:53:27.0375] <rkirsling>
might be too cold in here, by a bit

[19:53:27.0778] <littledan>
> <@bakkot:matrix.org> if we have time which we cannot otherwise use, I am happy to take any >10m slot to get through as much of "stop coercing things" as possible

I'd like to delay my my three "withdraw" topics until the end of the agenda (likely pushed to another meeting)

[19:54:34.0525] <littledan>
https://chromestatus.com/feature/5073244152922112

[19:54:36.0869] <dminor>
ljharb: https://bugzilla.mozilla.org/show_bug.cgi?id=1841113

[19:54:49.0810] <ryzokuken>
for TG2 proposals, we do this kind of tracking centrally (in a wiki in this case). Would it be useful to do this as part of tc39/proposals or something like that?

[19:58:43.0772] <Andrew Paprocki>
> <@msaboff:matrix.org> Does anyone know how long implementations had this replace behavior?

This is the relevant v8 code I believe https://github.com/v8/v8/blob/main/src/runtime/runtime-regexp.cc#L208-L251

[20:05:27.0153] <Andrew Paprocki>
> <@apaprocki:matrix.org> This is the relevant v8 code I believe https://github.com/v8/v8/blob/main/src/runtime/runtime-regexp.cc#L208-L251

The second digit thing in there appears to be from when replace was first implemented in C++ in 2009: https://github.com/v8/v8/commit/e2af4529c3a5a31eaf21240ffc6fce42f0af2d3b#diff-df9cd537d3ef3350ae6d69fd7067704522b83ff80efdcfd53d2e30870ab977d2R1457-R1465

[20:26:02.0671] <msaboff>
> <@apaprocki:matrix.org> The second digit thing in there appears to be from when replace was first implemented in C++ in 2009: https://github.com/v8/v8/commit/e2af4529c3a5a31eaf21240ffc6fce42f0af2d3b#diff-df9cd537d3ef3350ae6d69fd7067704522b83ff80efdcfd53d2e30870ab977d2R1457-R1465

Seems like a lot of water under the bridge.

[20:27:52.0754] <Jack Works>
I feel it's too cold in the meeting room ü•∂

[20:29:29.0653] <ptomato>
> <@bakkot:matrix.org> though IIRC someone wanted to be there for that, which makes it harder to do impromptu

If you mean me, it was a "best effort" preference to attend; feel free to go ahead if there's a slot

[21:03:57.0194] <ljharb>
> <@usharma:igalia.com> for TG2 proposals, we do this kind of tracking centrally (in a wiki in this case). Would it be useful to do this as part of tc39/proposals or something like that?

we could, but we already track this per proposal - the challenge i think would be the same, people remembering/knowing to update one end from the other

[21:04:33.0827] <ryzokuken>
sure, I'm not sure if centralization like this would make it easier to update/provide information

[21:04:51.0028] <ryzokuken>
but it'd certainly make it easier to find it, although out-of-context

[21:12:54.0973] <bakkot>
https://github.com/tc39/how-we-work/blob/main/terminology.md#override-mistake :)

[21:14:09.0755] <rkirsling>
whoa TIL `> [!NOTE]`

[21:16:08.0470] <ljharb>
it's pretty new, and got a lot of pushback in the first iteration; i think the second iteration addresses most of that tho

[21:17:55.0404] <Andrew Paprocki>
FYI https://docs.transcend.io/docs/consent/reference/privacy-and-security#read-before-using-tamper-resistance

[21:18:16.0613] <bakkot>
Transcend has been great about trying to get their customers upgraded

[21:18:19.0590] <Andrew Paprocki>
"Note that an interaction between Chrome 117, Transcend Consent's Tamper Resistance mode, and versions of regenerator-runtime (a common JavaScript library) older than v0.13.8 can cause errors and could negatively impact your website. To resolve these errors please update airgap.js to version 8.11.11 or higher to automatically disable Tamper Resistance mode. If you're using an earlier version of airgap.js and are unable to update, you can also manually disable Tamper Resistance by setting the the data-tamper-resist="off" attribute on your airgap.js script."

[21:18:39.0787] <Andrew Paprocki>
So they did change the default to now be off

[21:19:52.0210] <Christian Ulbrich>
Yeah SES does also freezing...

[21:19:55.0487] <littledan>
hmm, they didn't make a working tamper-resistant mode?

[21:20:33.0525] <Jack Works>
> <@christianulbrich:matrix.org> Yeah SES does also freezing...

they freeze in the correct way. ses grabs the Iterator from [].values() not global name

[21:21:02.0577] <bakkot>
> <@littledan:matrix.org> hmm, they didn't make a working tamper-resistant mode?

I think they were trying to get a fix out ASAP

[21:21:23.0246] <Andrew Paprocki>
I assume upgrading regenerator-runtime also "fixes" it?

[21:21:31.0055] <bakkot>
correct

[21:21:55.0259] <Christian Ulbrich>
> <@jackworks:matrix.org> they freeze in the correct way. ses grabs the Iterator from [].values() not global name

Good to know, there is a correct way. I did not mean it as criticism, but as a response to nicolo-ribaudo asking, whether some other members are using this strategy...

[21:21:56.0078] <Jack Works>
> <@apaprocki:matrix.org> I assume upgrading regenerator-runtime also "fixes" it?

it will be much harder. many npm libraries bundles regenerator-runtime

[21:21:56.0243] <bakkot>
any version after 0.13.8 (inclusive)

[21:22:34.0263] <Christian Ulbrich>
> <@christianulbrich:matrix.org> Good to know, there is a correct way. I did not mean it as criticism, but as a response to nicolo-ribaudo asking, whether some other members are using this strategy...

Thanks for clarifying!

[21:29:48.0102] <snek>
does pursing a "holistic approach" necessarily preclude the specific pr for this proposal

[21:30:24.0235] <snek>
like say we take some other approach like "freeze but correctly and also without a performance hit somehow", that doesn't fix the existing code that wasn't able to be updated

[21:31:09.0411] <Bradford Smith>
Could someone provide a link to a summary of what "the override mistake" means?

[21:31:23.0000] <bakkot>
https://github.com/tc39/how-we-work/blob/main/terminology.md#override-mistake

[21:31:30.0916] <Bradford Smith>
thx!

[21:38:45.0856] <rbuckton>
Have we considered adding a new descriptor property that, in combination with `[[Writable]]: false` explicitly opts in to a behavior of "if the prototype property is `[[Writable]]: false`, then define the property on the original object being assigned to"? Then workarounds for this become slightly less one-off? I'm not sure if that helps, to be honest.

[21:39:26.0316] <shu>
[[Writable]]: `a secret 3rd thing`

[21:39:39.0961] <snek>
you mean `null`

[21:40:22.0459] <snek>
is it acceptable to the object inheriting though?

[21:40:33.0532] <snek>
or is this something in the domain of the person doing the setting

[21:40:40.0425] <rbuckton>
`[[Shadowable]]: true` or something to that effect

[21:41:01.0261] <snek>
i feel like its something the person doing the setting wants control over, not the object, but idk

[21:41:09.0613] <snek>
maybe nice weird and niche enough that it doesn't matter

[21:41:14.0248] <snek>
 * maybe its weird and niche enough that it doesn't matter

[21:41:31.0624] <ljharb>
if you're doing the setting and want control you'd use Object.defineProperty

[21:41:42.0290] <Jack Works>
> <@rbuckton:matrix.org> `[[Shadowable]]: true` or something to that effect

then the question becomes how you add it. if you change how O.freeze works, you're basically fix the whole override mistake

[21:42:35.0524] <rbuckton>
> <@jackworks:matrix.org> then the question becomes how you add it. if you change how O.freeze works, you're basically fix the whole override mistake

I would consider my suggestion a worst-case scenario if its not possible to change `Object.freeze` or Set semantics themselves.

[21:42:59.0721] <Jack Works>
but old code is using O.freeze so...

[21:43:52.0376] <rbuckton>
Yes, it would be something you would have to opt-in to, and something like `Iterator.prototype.constructor` would opt-in internally.

[21:46:19.0274] <rbuckton>
 * Yes, it would be something you would have to opt-in to, and something like `Iterator.prototype.constructor` would opt-in by default.

[22:16:40.0540] <snek>
thats quite interesting

[22:16:50.0891] <snek>
the done true thing

[22:16:59.0011] <snek>
i think i prefer rust's size hints

[22:17:08.0240] <ljharb>
> <@rbuckton:matrix.org> Yes, it would be something you would have to opt-in to, and something like `Iterator.prototype.constructor` would opt-in by default.

if it's web compat to opt in anything by default, then wouldn't it be web compat to do it everywhere?

[22:26:56.0850] <littledan>
my very intelligent comment: I don't like when it runs out of memory either

[22:27:13.0525] <snek>
always a fan of not running out of memory

[22:27:47.0337] <snek>
bakkot: the done:true size hinting you mentioned, that's not *required* for correct behavior right?

[22:28:29.0049] <rkirsling>
this is the internet, can't we just download more memory

[22:28:36.0324] <rkirsling>
oops wrong channel üòõ

[22:28:53.0241] <ljharb>
you wouldn't download a ram

[22:31:26.0552] <shu>
could someone remind me why do is no longer blocking?

[22:31:34.0250] <shu>
 * could someone remind me why do is no longer blocking for throw expressions?

[22:32:48.0401] <ljharb>
as i recall, throw expressions were considered independently useful even if do expression also existed?

[22:33:17.0938] <shu>
ah, okay, not some technical thing that was resolved, just that we decided it'd be fine to have both

[22:33:54.0520] <snek>
we are doing all this syntax just because of comma operators?

[22:33:57.0793] <snek>
does anyone use comma operators?

[22:34:07.0656] <ljharb>
minifiers and rebels

[22:34:43.0175] <Christian Ulbrich>
Does this mean, that `function(a, b = throw c, c = throw d)` would be _legal_? 

[22:34:54.0175] <nicolo-ribaudo>
No, you have to wrap the first throw

[22:34:59.0507] <nicolo-ribaudo>
 * No, you have to wrap the first throw with this restriction

[22:35:03.0339] <snek>
wait what

[22:35:09.0103] <snek>
oh man yeah we do need to fix this

[22:35:12.0018] <snek>
lol

[22:35:13.0748] <ljharb>
because `c, c = throw d` is a potentially valid expression

[22:35:33.0191] <snek>
you know what i agree with richard

[22:35:38.0637] <snek>
lets take precedence from import and require parens

[22:35:39.0713] <HE Shi-Jun>
so u need to write c = (throw d) ?

[22:35:45.0246] <ljharb>
so it's either `function(a, b = (throw c), c = throw d)` or `function(a, b = throw (c, c = throw d))`

[22:36:01.0671] <ljharb>
> <@devsnek:matrix.org> lets take precedence from import and require parens

mainly from `**`

[22:36:16.0860] <Christian Ulbrich>
_in other words_, how could I write a function, that _throws_ if multiple arguments are not given by using `throw` as a _default value_? Thx. ljharb  ...

[22:36:23.0471] <HE Shi-Jun>
what about `let x = throw c, d = 1` ?

[22:36:36.0806] <ljharb>
same, you'd need `let x = (throw c), d = 1`

[22:36:53.0230] <ljharb>
> <@christianulbrich:matrix.org> _in other words_, how could I write a function, that _throws_ if multiple arguments are not given by using `throw` as a _default value_? Thx. ljharb  ...

wrap each defaulted throw expression in parens, except for the last one

[22:37:00.0713] <HE Shi-Jun>
Seems too strict? 

[22:37:10.0440] <ljharb>
i mean who's going to write that code tho

[22:37:22.0948] <ljharb>
`let x = throw c, d = 1` will throw and never define `d` in either interpretation

[22:37:39.0504] <Christian Ulbrich>
ljharb: But, would `function(a, (b = throw c), (c = throw d))` also work? 

[22:37:45.0760] <ljharb>
> <@christianulbrich:matrix.org> ljharb: But, would `function(a, (b = throw c), (c = throw d))` also work?

yes

[22:37:51.0385] <ljharb>
oh no wait

[22:38:00.0962] <ljharb>
`a, b = (throw c), c = (throw d)`

[22:38:07.0371] <ljharb>
 * `a, b = (throw c), c = (throw d)` - parens aren't around the `=` part.

[22:38:14.0802] <snek>
what on earth

[22:38:16.0809] <ljharb>
so either we require these parens or we totally change how the comma operator works

[22:38:22.0852] <Christian Ulbrich>
Okay, that would be fine with me, I would not want to explain to devs, that the syntax _depends_ on the position of something...

[22:38:36.0400] <HE Shi-Jun>
it's possible in destructing to mean required. `let [x, y = throw new Error(), z] = ...`

[22:38:41.0587] <ljharb>
> <@christianulbrich:matrix.org> Okay, that would be fine with me, I would not want to explain to devs, that the syntax _depends_ on the position of something...

no, just the necessity of the syntax. i'm sure there'd be a linter that either forbids or requires the parens in the terminal case

[22:38:42.0577] <Christian Ulbrich>
 * Okay, that would be fine with me, I would not want to explain to devs, that the syntax _depends_ on the **position** of something...

[22:39:09.0540] <ljharb>
> <@haxjs:matrix.org> it's possible in destructing to mean required. `let [x, y = throw new Error(), z] = ...`

sure, but that's sufficiently rare that wrapping the throw new Error() in parens isn't that big a deal

[22:39:12.0091] <Christian Ulbrich>
> <@ljharb:matrix.org> no, just the necessity of the syntax. i'm sure there'd be a linter that either forbids or requires the parens in the terminal case

Fair enough!

[22:40:11.0496] <HE Shi-Jun>
I agree it's not a big deal, just ask whether we can loose the restriction...

[22:40:35.0578] <nicolo-ribaudo>
> <@haxjs:matrix.org> I agree it's not a big deal, just ask whether we can loose the restriction...

We can if we agree that `x = throw a, b` being different from `throw a, b` is ok

[22:40:51.0938] <nicolo-ribaudo>
(the first one throws `a`, the second one `b`)

[22:41:15.0256] <eemeli>
TCQ is indeed frozen.

[22:41:17.0044] <HE Shi-Jun>
Because in `let x = 1, y = 2` it already not follow comma expression.

[22:41:47.0239] <ljharb>
yeah true, that's not the comma operator so maybe that one would be fine?

[22:42:02.0595] <HE Shi-Jun>
> <@ljharb:matrix.org> yeah true, that's not the comma operator so maybe that one would be fine?

yeah thats what I ask

[22:42:10.0198] <eemeli>
I'd like to reply as well.

[22:42:11.0795] <snek>
i still don't get why we're talking about comma operators in the context of human understandability 

[22:42:30.0941] <snek>
seems like garbage in garbage out

[22:42:33.0851] <ryzokuken>
it's back

[22:44:19.0342] <Chris de Almeida>
can whoever was having TCQ problems check again?

[22:44:37.0113] <Christian Ulbrich>
without `Promise.withStaticResolvers()` we need: `let resolve, promise = new Promise(res => resolve = red)` ... :)

[22:44:43.0642] <nicolo-ribaudo>
Temperature check?

[22:45:02.0099] <HE Shi-Jun>
> <@haxjs:matrix.org> yeah thats what I ask

could someone ask this? I don't have mic today...

[22:46:17.0197] <bradfordcsmith>
Could it work to follow the pattern of `import` for `throw`. Treat it like a function call - require parentheses like `throw(thingTothrow)` - does that help anything?

[22:46:54.0784] <haxjs>
> <@bradfordcsmith:matrix.org> Could it work to follow the pattern of `import` for `throw`. Treat it like a function call - require parentheses like `throw(thingTothrow)` - does that help anything?

no. 

[22:46:55.0991] <ljharb>
oof, `import()` *is* like a function call, and throwing isn't, that doesn't seem like an ideal workaround to me

[22:47:20.0022] <haxjs>
because `throw(x), y` also a valid statement

[22:47:27.0601] <devsnek>
> <@ljharb:matrix.org> oof, `import()` *is* like a function call, and throwing isn't, that doesn't seem like an ideal workaround to me

careful you will upset the call/cc people

[22:47:36.0786] <devsnek>
(i am the call/cc people)

[22:47:57.0705] <jesse>
/me waves to the fellow schmers

[22:48:07.0392] <jesse>
/me  * waves to the fellow schemers

[22:48:34.0537] <ljharb>
what happened to nicolo's queue item?

[22:48:41.0522] <nicolo-ribaudo>
> <@ljharb:matrix.org> what happened to nicolo's queue item?

I was wrong

[22:48:44.0512] <ljharb>
ah k

[22:48:55.0302] <nicolo-ribaudo>
It would be throw using an early error as kevin describes

[22:49:01.0697] <nicolo-ribaudo>
But not with the current lookahead grammar

[22:50:21.0348] <ljharb>
isn't `await`'s super low precedence relevant here?

[22:50:27.0308] <ljharb>
like, `await 1, 2` will never await 2, only 1

[22:50:52.0034] <ljharb>
so if `throw`'s precedence is super low also (above or below await's) then would the problem just go away? (because people trying to USE the comma operator would be forced to paren-wrap, and who cares about that)

[22:51:07.0840] <Michael Ficarra>
ljharb: that's high, no tlow

[22:51:13.0925] <snek>
i appreciate that we have the opportunity to have 3 different precedence keyword unary operators

[22:51:27.0126] <bakkot>
ljharb: the problem is that _statement position_ throw is low precedence

[22:51:31.0698] <Michael Ficarra>
snek: blame allen :-(

[22:51:38.0344] <bakkot>
so `throw 1, 2` already means "throw 2"

[22:51:47.0835] <hax (HE Shi-Jun)>
One question is why choose follow `await` not `yield`

[22:52:02.0157] <rkirsling>
which direction is "high" precedence will _never_ not be confusing

[22:52:38.0784] <snek>
things with higher precedence evaluate first

[22:52:41.0750] <ljharb>
sigh, comma operator's so gross

[22:52:44.0000] <Michael Ficarra>
rkirsling: I think it's person to person, like whether you have left/right and west/east ingrained

[22:52:44.0091] <snek>
simple rule

[22:52:57.0983] <hax (HE Shi-Jun)>
> <@ljharb:matrix.org> sigh, comma operator's so gross

yeah, really want to remove it though impossible

[22:53:15.0513] <littledan>
> <@rkirsling:matrix.org> which direction is "high" precedence will _never_ not be confusing

yeah, this is a confusing-in-the-common case vs in the uncommon case issue. (And throw not being an expression is already being confusing in the common case)

[22:55:39.0071] <bakkot>
if we force you to write parentheses in the ambiguous case then no reader will ever have to be confused

[22:55:44.0959] <bakkot>
so that seems like the best outcome

[22:55:58.0843] <bakkot>
writers occasionally getting a message like "you gotta use parens here" seems like the least evil

[22:56:36.0657] <nicolo-ribaudo>
```
UnaryExpression :
  throw Expression
```
Can somebody remind me why this is not doable?

[22:57:48.0817] <hax (HE Shi-Jun)>
> <@nicolo-ribaudo:matrix.org> ```
> UnaryExpression :
>   throw Expression
> ```
> Can somebody remind me why this is not doable?

I believe it's doable, just introduce some inconsistence and refactor harzard when switch from throw exp/statement

[22:58:20.0483] <nicolo-ribaudo>
> <@haxjs:matrix.org> I believe it's doable, just introduce some inconsistence and refactor harzard when switch from throw exp/statement

Isn't it the way to remove all the refactoring hazards between expressions and statements?

[22:59:00.0780] <hax (HE Shi-Jun)>
nicolo-ribaudo: Maybe I misunderstand ?

[22:59:44.0577] <nicolo-ribaudo>
Throw statements are `throw Expression`, and I'm asking if throw expressions can be the same but with a high precedence on the left side.

[23:00:43.0341] <nicolo-ribaudo>
UnaryExpression precedence on the left, Expression precedence on the right

[23:00:59.0044] <bakkot>
I am not sure that `function f(x = throw a, y){}` throwing `y` is actually a good outcome either

[23:01:26.0144] <nicolo-ribaudo>
> <@bakkot:matrix.org> I am not sure that `function f(x = throw a, y){}` throwing `y` is actually a good outcome either

Oh right I don't want tht

[23:02:46.0833] <rbuckton>
I'm beginning to think the only option is to move `throw` to _Expression_ and just always require parenthesis. Every other option is blocked.

[23:03:56.0898] <rbuckton>
Actually, maybe it isn't? We do some grammar tricks with _UpdateExpression_ and could do something similar

[23:04:33.0646] <rbuckton>
I'll have to think on it.

[23:06:06.0175] <snek>
i'n happy as long as we aren't making things weirder to make comma op more readable

[23:07:36.0364] <rbuckton>
I don't think a grammar-only solution is feasible, as it would also trigger ASI.

[23:11:35.0585] <rbuckton>
If I cannot use an Early Error (per waldemar), and we cannot use _UnaryExpression_ without banning trailing infix punctuators (per bakkot), I do not see another solution aside from always requiring parens. I'm open to other suggestions, though.

[23:17:29.0674] <bakkot>
> <@devsnek:matrix.org> i'n happy as long as we aren't making things weirder to make comma op more readable

to be really clear, my goal is not to make the comma operator more readable. My goal is to ensure that people who have encountered the comma operator previously can read regular code which uses `throw`, including code which does not use the comma operator.

[23:17:32.0335] <littledan>
> <@rbuckton:matrix.org> If I cannot use an Early Error (per waldemar), and we cannot use _UnaryExpression_ without banning trailing infix punctuators (per bakkot), I do not see another solution aside from always requiring parens. I'm open to other suggestions, though.

I agree with your analysis, but I think it's our job as a committee to make this kind of tradeoff

[23:17:56.0941] <littledan>
there are four possibilities at play, and *all* violate one or other goal

[23:18:07.0483] <rbuckton>
waldemar: We use an Early Error to ban optional chain followed by a template literal specifically to avoid ASI. I'm not sure why we wouldn't be able to do the same in this case?

[23:18:12.0412] <littledan>
(the fourth being, don't advance this proposal)

[23:19:44.0428] <rbuckton>
Yes, it might require a number of SS rules, but we have precedence within the specification.

[23:21:11.0166] <nicolo-ribaudo>
> <@rbuckton:matrix.org> I don't think a grammar-only solution is feasible, as it would also trigger ASI.

Can we extend the ASI section to say that it does not apply there? ü§∑

[23:21:37.0304] <rbuckton>
I also suggested that, but waldemar seemed against that as well.

[23:23:02.0542] <bakkot>
> <@nicolo-ribaudo:matrix.org> ```
> UnaryExpression :
>   throw Expression
> ```
> Can somebody remind me why this is not doable?

the other problem with this is that it makes the grammar ambiguous, in e.g. `x && throw a || b`. right now we ensure the grammar is unambiguous everywhere except the annex B regexp grammar.

[23:23:16.0094] <rbuckton>
I could add a grammar to `throw` expressions that consumes all of the infix operators and the expressions that follow, and then report an early error in static semantics.

[23:25:12.0151] <bakkot>
that would still make the grammar ambiguous if it was at Unary precedence

[23:25:29.0899] <bakkot>
and if it as AssignmentExpression precedence then you can't write `a ?? throw b`

[23:25:33.0219] <bakkot>
 * and if it at AssignmentExpression precedence then you can't write `a ?? throw b`

[23:26:17.0105] <bakkot>
(like you can't do `a || yield b`)

[23:26:22.0742] <bakkot>
 * (like you can't do `a ?? yield b`)

[23:26:30.0044] <snek>
oh my 

[23:26:59.0433] <rbuckton>
Or just static semantics rules to each of the infix operators, like:
> ```
> LogicalANDExpression :
>   LogicalANDExpression `&&` BitwiseOrExpressions
> ```
> - It is a Syntax Error if LogicalANDExpression is ThrowExpression
or something to that effect.

[23:27:00.0896] <snek>
this is the first real use of boxed primitives i've seen i think

[23:27:29.0380] <bakkot>
we should not encourage boxed primitives

[23:27:55.0664] <snek>
yeah i'm not sure how i feel about it 

[23:28:05.0102] <bakkot>
> <@rbuckton:matrix.org> Or just static semantics rules to each of the infix operators, like:
> > ```
> > LogicalANDExpression :
> >   LogicalANDExpression `&&` BitwiseOrExpressions
> > ```
> > - It is a Syntax Error if LogicalANDExpression is ThrowExpression
> or something to that effect.

that was my suggestion in the thread but waldemar doesn't like having a bunch of early errors

[23:28:14.0719] <bakkot>
frankly I do not understand the concern about having a bunch of early errors

[23:28:27.0979] <ljharb>
errors are best encountered early

[23:28:37.0714] <rbuckton>
> <@bakkot:matrix.org> frankly I do not understand the concern about having a bunch of early errors

Neither do I, especially since we do the same thing for _OptionalChain_

[23:28:59.0711] <hax (HE Shi-Jun)>
> <@bakkot:matrix.org> (like you can't do `a ?? yield b`)

oh, it's my first time to know it's a syntax error ‚òπÔ∏è

[23:35:28.0585] <rbuckton>
> <@bakkot:matrix.org> that was my suggestion in the thread but waldemar doesn't like having a bunch of early errors

We override ASI via EE for OptionalChain, and we disallow expressions of certain production in `delete`, so we have precedence for both parts of this within the spec as well.

[23:39:46.0290] <bakkot>
in tdz michael said he like the "force you to always use parentheses" option

[23:40:22.0303] <nicolo-ribaudo>
Including cases like `a ?? (throw b)`?

[23:40:30.0681] <bakkot>
Michael Ficarra: ^ ?

[23:40:34.0538] <Michael Ficarra>
not only do I like it, I independently discovered it and thought it was good

[23:40:43.0650] <nicolo-ribaudo>
 * Including cases like `a ?? (throw b);`?

[23:40:49.0513] <bakkot>
If we did that and also made the RHS be a UnaryExpression, then it would be kind of the intersection subset which everyone can live with

[23:40:56.0518] <bakkot>
no new early errors, no ambiguity

[23:41:02.0968] <Michael Ficarra>
üòÅ

[23:41:04.0642] <rkirsling>
I mean `?? throw x` really seems like _the_ core case though

[23:41:12.0633] <bakkot>
and we could, in the future, relax the restriction, if people relax their concerns

[23:41:15.0190] <rbuckton>
I'm not a huge fan of requiring the parenthesis since they wouldn't other be necessary for most cases.

[23:41:24.0306] <bakkot>
 * and using UnaryExpression as the RHS means we could, in the future, relax the restriction, if people relax their concerns

[23:41:26.0530] <Michael Ficarra>
rkirsling: and you can do that, you just need to write parentheses or you get a syntax error

[23:41:28.0434] <rbuckton>
 * I'm not a huge fan of requiring the parenthesis since they wouldn't otherwise be necessary for most cases.

[23:41:46.0406] <rkirsling>
you_cant_just.jpg

[23:42:46.0283] <rbuckton>
If `throw` is at _Expression_ precedence, then we don't need _ThrowStatement_ anymore, since it would be completely covered by _ExpressionStatement_. 

[23:42:47.0344] <bakkot>
(to be clear I would also prefer the early error route, over forcing parens everywhere, but I could live with forcing parens everywhere)

[23:42:59.0791] <snek>
is shane in here

[23:43:10.0093] <rkirsling>
I too had no idea about `?? yield x` though. does that also apply to `?? await x`? 

[23:43:18.0603] <bakkot>
> <@rbuckton:matrix.org> If `throw` is at _Expression_ precedence, then we don't need _ThrowStatement_ anymore, since it would be completely covered by _ExpressionStatement_.

That's true but it would mean that we could not later switch from requiring parens everywhere to only requiring them in some cases

[23:43:27.0928] <nicolo-ribaudo>
> <@rkirsling:matrix.org> I too had no idea about `?? yield x` though. does that also apply to `?? await x`?

no

[23:43:29.0345] <bakkot>
> <@rkirsling:matrix.org> I too had no idea about `?? yield x` though. does that also apply to `?? await x`?

no, `await` is unary precedence

[23:43:36.0475] <bakkot>
`await` and `yield` parse very differently

[23:44:32.0998] <rkirsling>
fair enough

[23:45:03.0887] <rbuckton>
I don't think we need the EE rules for everything, just `+`, `-`, and `/`, the rest could still just be a lookahead restriction.

[23:45:21.0533] <nicolo-ribaudo>
And `/=`

[23:45:26.0932] <Michael Ficarra>
> <@rbuckton:matrix.org> If `throw` is at _Expression_ precedence, then we don't need _ThrowStatement_ anymore, since it would be completely covered by _ExpressionStatement_.

I think that might change its completion value though

[23:45:56.0063] <rbuckton>
> <@michaelficarra:matrix.org> I think that might change its completion value though

They both result in a throw completion?

[23:46:06.0275] <Michael Ficarra>
oh, fair lol

[23:52:11.0313] <waldemar>
> <@ljharb:matrix.org> errors are best encountered early

Exactly! The earliest place to encounter errors is in the grammar.

[23:52:49.0681] <bakkot>
For a user of the language, there is no difference between "in the grammar" and "as an early error"

[23:53:58.0796] <waldemar>
The difference is complexity. In most cases, if you're using early errors, then you're doing something more complicated than what can be expressed in a grammar, and that carries a cost.

[23:54:42.0487] <shu>
where is this gist?

[23:55:09.0900] <bakkot>
The cost is fairly small. Concretely, here's the trilemma: 

- no early errors, `throw` is high precedence: means that `throw a ? b : c` would throw `a`
- no early errors, `throw` is low precedence: means that `x ?? throw y` is illegal
- early errors: means you have a little more complexity in the grammar

[23:55:24.0910] <bakkot>
the third arm of the trilemma seems _obviously_ better than the first two, to me

[23:55:37.0631] <bakkot>
> <@shuyuguo:matrix.org> where is this gist?

https://gist.github.com/bakkot/5a22c8c13ce269f6da46c7f7e56d3c3f

[23:55:43.0245] <rkirsling>
(_wow, I never actually stopped to analyze dilemma into di+lemma before..._)

[23:55:44.0796] <waldemar>
I am concerned about usability. 

[23:55:48.0999] <rbuckton>
I've created https://github.com/tc39/proposal-throw-expressions/pull/18 to show what the Early errors would look like.

[23:56:27.0409] <rbuckton>
Hmm. it didn't publish a rendered spec 

[23:56:35.0768] <littledan>
> <@bakkot:matrix.org> the third arm of the trilemma seems _obviously_ better than the first two, to me

yeah I think I agree that you're kinda unlikely to hit the third one

[23:56:41.0021] <littledan>
I mean, the hazard case of the third one

[23:56:42.0933] <rbuckton>
ah, now it did

[23:57:02.0627] <bakkot>
> <@waldemarh:matrix.org> I am concerned about usability.

As a user, the early errors seem like the most usable option of the three I've listed.

[23:57:14.0532] <shu>
> <@bakkot:matrix.org> https://gist.github.com/bakkot/5a22c8c13ce269f6da46c7f7e56d3c3f

thanks

[23:57:21.0266] <rbuckton>
I only need to add 3 static semantics rules and remove `+`, `-`, `/`, and `/=` from the banned token list.

[23:57:31.0558] <bakkot>
I agree it is a little more complicated, but you have to weigh that against the costs of the other options, which seem a lot worse.

[23:57:42.0024] <hax (HE Shi-Jun)>
Will there be new things need to escape in the future?

[23:58:06.0695] <bakkot>
The idea is, no

[00:01:16.0535] <waldemar>
Either a throw expression can be used in a logical expression or not. Having it sometimes be usable in a logical expression and sometimes not is too confusing.

[00:01:40.0809] <waldemar>
That's what we'd get with the early errors.

[00:01:41.0391] <bakkot>
I think having it usable only as the RHS of a logical expression is completely fine.

[00:01:52.0044] <bakkot>
There is no use case for having it as the LHS of a logical expression.

[00:01:58.0224] <nicolo-ribaudo>
> <@waldemarh:matrix.org> Either a throw expression can be used in a logical expression or not. Having it sometimes be usable in a logical expression and sometimes not is too confusing.

Well it's like `-1 ** 2` vs `1 ** -2`

[00:02:44.0224] <Michael Ficarra>
ryzokuken: can we get the queue cleared out?

[00:02:46.0477] <waldemar>
That analogy is not helpful.

[00:03:03.0673] <nicolo-ribaudo>
It is an expression that can be used only on one side of a binary operator and not on the other

[00:03:21.0841] <ryzokuken>
> <@michaelficarra:matrix.org> ryzokuken: can we get the queue cleared out?

oops, thanks for the reminder

[00:03:23.0932] <waldemar>
How is that relevant?

[00:03:24.0360] <ryzokuken>
should be good now

[00:03:55.0193] <rbuckton>
> <@waldemarh:matrix.org> Either a throw expression can be used in a logical expression or not. Having it sometimes be usable in a logical expression and sometimes not is too confusing.

I don't find the rule "`throw` has to be the right-most thing, unless you parenthesize it" to be that confusing.

[00:04:45.0695] <waldemar>
I do. It violates intuition about how operator precedence works.

[00:06:35.0393] <bakkot>
No user will ever have to learn that `throw` can't be used on the LHS of a logical expression, so they will not have anything to be confused by.

[00:07:02.0248] <bakkot>
The only reason someone would write `throw x || y` is if they were hoping to throw `x || y`, and that isn't the behavior they'd get with higher precedence and no early errors anyway.

[00:07:17.0245] <waldemar>
Parenthesizing `throw expr` as `throw(expr)` is intuitive. Parenthesizing it as `(throw expr)` is not.

[00:07:55.0490] <rbuckton>
> <@waldemarh:matrix.org> Parenthesizing `throw expr` as `throw(expr)` is intuitive. Parenthesizing it as `(throw expr)` is not.

That's precisely why this requires parens for binary expressions on the right side of `throw`.

[00:08:21.0678] <rbuckton>
If you want to throw `a || b` from an expression position, you write `throw (a || b)`

[00:08:52.0340] <waldemar>
I gave a counterexample during the plenary.

[00:12:36.0935] <bakkot>
Can you repeat it here?

[00:13:41.0534] <waldemar>
b && throw(c) || d

[00:14:33.0913] <rbuckton>
to me that would be akin to how we required parens when mixing `??` and `&&` or `||`.

[00:14:43.0909] <rbuckton>
 * to me that would be akin to how we required parens when mixing `??` with `&&` or `||`.

[00:14:56.0077] <waldemar>
But we can mix && and || without requiring parentheses.

[00:15:08.0472] <rbuckton>
`(b && throw c) || d` or `b && (throw c) || d`

[00:15:42.0991] <bakkot>
OK, yes, that's a good example. I retract the claim that no one will have to learn that `throw` can't be used as the LHS of a logical expression, but I stand by the claim that this cost is less than that of having `throw a ? b  : c` throw `a`.

[00:15:48.0161] <rbuckton>
linters would generally push you towards the parens anyways

[00:15:50.0375] <bakkot>
 * OK, yes, that's a good example. I retract the claim that no one will have to learn that `throw` can't be used as the LHS of a logical expression, but I stand by the claim that this cost is less than that of having `throw a ? b : c` throw `a`.

[00:16:24.0181] <bakkot>
Making things illegal with early errors means that you're forced to confront the complexity as early as possible, instead of accidentally writing a program whose behavior is not what you thought.

[00:16:39.0058] <bakkot>
And `throw a ? b : c` seems like a case which will come up a _lot_ if it is not made illegal

[00:17:58.0127] <bakkot>
 * OK, yes, that's a good example. I retract the claim that no one will have to learn that `throw` can't be used on the LHS of a logical expression, but I stand by the claim that this cost is less than that of having `throw a ? b : c` throw `a`.

[00:19:06.0657] <ryzokuken>
I see a black screen

[00:19:09.0020] <ryzokuken>
for some reason

[00:19:18.0606] <ryzokuken>
ah, it fixed itself

[00:19:28.0329] <waldemar>
> <@bakkot:matrix.org> OK, yes, that's a good example. I retract the claim that no one will have to learn that `throw` can't be used on the LHS of a logical expression, but I stand by the claim that this cost is less than that of having `throw a ? b : c` throw `a`.

You can fix that by requiring the `throw(expr)` form.

[00:20:03.0443] <waldemar>
> <@bakkot:matrix.org> OK, yes, that's a good example. I retract the claim that no one will have to learn that `throw` can't be used on the LHS of a logical expression, but I stand by the claim that this cost is less than that of having `throw a ? b : c` throw `a`.

 * You can fix that by requiring the `throw(expr)` form for throw-expressions.

[00:20:50.0915] <bakkot>
Can you elaborate on that?

[00:21:22.0855] <waldemar>
The argument of a throw-expression must be a parenthesized expression.

[00:21:32.0740] <bakkot>
If `throw` is at unary expression precedence, then even if the RHS of `throw` is a ParenthesizedExpression, you would still have `throw (a) ? b : c` being legal

[00:21:35.0753] <waldemar>
Just like the condition of an if-expression must be parenthesized.

[00:22:49.0620] <waldemar>
The first operand of ?: is rarely parenthesized.

[00:28:40.0490] <bakkot>
True, but it would be confusing for readers.

[00:30:40.0566] <bakkot>
Also, personally, I would prefer having `throw` only usable in parentheses, personally. `(throw new Error())` looks a lot more natural, to me, than `throw (new Error())`.

[00:31:25.0056] <bakkot>
 * Also, personally, I would prefer having `throw` only usable in parentheses. `(throw new Error())` looks a lot more natural, to me, than `throw (new Error())`.

[00:31:46.0989] <bakkot>
(And has fewer edge cases.)

[00:33:07.0316] <nicolo-ribaudo>
> <@bakkot:matrix.org> Also, personally, I would prefer having `throw` only usable in parentheses. `(throw new Error())` looks a lot more natural, to me, than `throw (new Error())`.

I somehow want to both üëçÔ∏è and üëéÔ∏è this -- I think you should write `throw` without a trailing space like for dynamic import

[00:33:16.0989] <nicolo-ribaudo>
> <@bakkot:matrix.org> Also, personally, I would prefer having `throw` only usable in parentheses. `(throw new Error())` looks a lot more natural, to me, than `throw (new Error())`.

 * I somehow want to both üëçÔ∏è and üëéÔ∏è this -- I think you should write `throw` without a trailing space like usually done for dynamic import

[00:33:33.0738] <waldemar>
> <@bakkot:matrix.org> Also, personally, I would prefer having `throw` only usable in parentheses. `(throw new Error())` looks a lot more natural, to me, than `throw (new Error())`.

I'd be fine with requiring throw-expressions to use the `(throw expr)` form. It's simple, understandable syntax.

[00:35:38.0540] <nicolo-ribaudo>
I would not block that, always parens is better than, for example, parens-in-function-params-except-for-last-one. I think it looks particularly bad compared to the parens-less version, but better than the current inconsistency with comma-separated lists

[00:37:48.0045] <shu>
real talk my brain is not working very well

[00:37:52.0542] <shu>
please make temperature check real simple

[00:39:33.0450] <hax (HE Shi-Jun)>
seem need to refresh the page to see the temp check

[00:41:55.0709] <nicolo-ribaudo>
TCQ feedback: we have two positive options but just one negative

[00:42:01.0094] <rbuckton>
I do not see the temp check, even after refreshing.

[00:42:14.0976] <rkirsling>
same here

[00:42:20.0216] <rkirsling>
tried in two browsers

[00:42:24.0449] <rkirsling>
no options appear

[00:43:32.0056] <snek>
> <@nicolo-ribaudo:matrix.org> TCQ feedback: we have two positive options but just one negative

this is sort of intentional wrt our working mode but yeah its definitely confusing

[00:44:45.0682] <Bradford Smith>
Isn't the API for a proposal supposed to be mostly settled before moving to stage 2?

[00:45:09.0346] <nicolo-ribaudo>
Well the API is either this or nothing

[00:45:31.0264] <Bradford Smith>
"Possible API to do the clamping logic" doesn't seem settled to me.

[00:45:49.0818] <ljharb>
it'd just be a one-arg function

[00:45:50.0188] <bakkot>
the thing where some specific person needs to say "I withhold consensus" seems like it makes proposals to easy to advance

[00:45:57.0197] <nicolo-ribaudo>
> <@bradfordcsmith:matrix.org> "Possible API to do the clamping logic" doesn't seem settled to me.

There is no interest from anybody to pursue a different API, given that one of the main motivations is consistency

[00:46:08.0478] <snek>
> <@bakkot:matrix.org> the thing where some specific person needs to say "I withhold consensus" seems like it makes proposals to easy to advance

and yet

[00:46:10.0725] <bakkot>
having 40% of the plenary unconvinced does not seem like it should amount to "consensus"

[00:46:35.0884] <snek>
i mean yeah jordan is just being nice

[00:47:04.0498] <snek>
under the pure rules, if jordan wants x and no one has some strong blocker for x, it would move forward

[00:47:16.0836] <bakkot>
the pure rules say "consensus"

[00:47:30.0790] <bakkot>
we have been operating in a mode where, if no one says "I withhold consensus", it is regarded as consensus

[00:47:44.0815] <bakkot>
but that seems absurd after 40% of delegates indicated they were unconvinced

[00:48:13.0521] <rkirsling>
I guess it's a question of whether people need to be "convinced"

[00:48:31.0938] <rkirsling>
as opposed to merely not "convinced of the opposite"

[00:48:46.0828] <bakkot>
there is no "convinced of the opposite" box

[00:48:50.0985] <rkirsling>
right

[00:48:54.0337] <bakkot>
there is an "indifferent" box, though

[00:49:01.0444] <rkirsling>
ah true.

[00:49:27.0382] <snek>
oh man symbol.thenable

[00:49:37.0862] <snek>
i was so upset when this didn't get stage 1

[00:49:52.0834] <snek>
i had an angry thread on twitter

[00:50:10.0838] <nicolo-ribaudo>
What does it mean to withdraw a stage 0 proposal, doesn't our actual process start at stage 1?

[00:50:15.0006] <nicolo-ribaudo>
"Stage 0 is just an idea"

[00:50:56.0171] <snek>
i've seen real code hit this problem 

[00:51:00.0773] <Michael Ficarra>
yeah I think technically stage 0 and withdrawn are ~equivalent

[00:52:11.0418] <Jack Works>
> <@devsnek:matrix.org> i've seen real code hit this problem

i've wrote real code hit this problem and spend hours to find out what happened

[00:52:42.0970] <bakkot>
thenables are like a top-three mistake in JS, after "accepting things of the wrong type" and "existence of object.prototype"

[00:53:05.0446] <snek>
dunno if i'd put them that high but definitely up there

[00:53:07.0219] <hax (HE Shi-Jun)>
I really hope we can have Symbol.thenable or any solution to solve the weird behaivor of module with `then` export.

[00:53:15.0504] <nicolo-ribaudo>
> <@bakkot:matrix.org> thenables are like a top-three mistake in JS, after "accepting things of the wrong type" and "existence of object.prototype"

_with enters the room_

[00:53:27.0943] <bakkot>
> <@haxjs:matrix.org> I really hope we can have Symbol.thenable or any solution to solve the weird behaivor of module with `then` export.

Symbol.thenable wouldn't fix that, since you can't export a symbol name

[00:53:40.0375] <hax (HE Shi-Jun)>
> <@bakkot:matrix.org> thenables are like a top-three mistake in JS, after "accepting things of the wrong type" and "existence of object.prototype"

what the other two?üòÖ

[00:53:40.0792] <Jack Works>
> <@nicolo-ribaudo:matrix.org> _with enters the room_

we have get rid of with in modern world so it no longer be a problem

[00:53:46.0868] <snek>
> <@bakkot:matrix.org> Symbol.thenable wouldn't fix that, since you can't export a symbol name

*yet*

[00:53:51.0795] <nicolo-ribaudo>
`export { true as "@@thenable" }` üòÜ

[00:53:59.0844] <hax (HE Shi-Jun)>
> <@bakkot:matrix.org> Symbol.thenable wouldn't fix that, since you can't export a symbol name

just let module have it automaticlly

[00:54:10.0360] <Jack Works>
> <@haxjs:matrix.org> just let module have it automaticlly

and it breaks user code

[00:54:10.0483] <Michael Ficarra>
> <@bakkot:matrix.org> Symbol.thenable wouldn't fix that, since you can't export a symbol name

*yet*

[00:54:11.0720] <bakkot>
people have already started relying on the current the behavior, so we can't just unconditionally add it to all namespace objects

[00:54:13.0110] <nicolo-ribaudo>
> <@haxjs:matrix.org> just let module have it automaticlly

It breaks modules that currently export `then`

[00:54:26.0687] <snek>
"breaks"

[00:54:42.0261] <snek>
wait no i have to avoid getting into this argument again üòÖ

[00:54:55.0243] <nicolo-ribaudo>
Oh well, you could have `then[Symbol.thenable] = false`

[00:54:59.0192] <nicolo-ribaudo>
 * Oh well, you could have `then[Symbol.thenable] = false` on the funxtion

[00:55:02.0328] <nicolo-ribaudo>
 * Oh well, you could have `then[Symbol.thenable] = false` on the function

[00:55:34.0346] <hax (HE Shi-Jun)>
> <@nicolo-ribaudo:matrix.org> It breaks modules that currently export `then`

yeah maybe some modules use such bug as feature... but i still think we should fix it.

[00:56:02.0232] <bakkot>
if we are willing to break the web I have a lot of higher-priority things I would like to fix

[00:56:11.0840] <snek>
web2 right

[00:56:14.0498] <bakkot>
unfortunately I think we are not willing to break the web, so we can't fix it

[00:56:14.0780] <shu>
msaboff: ljharb: yes, endianness is about the bytes, not the bits. but clamping clamps something between 0 to 255, i think in a DataView method that is like, all about reinterpreting byte buffers, isn't there a possibility for confusion on whether you're clamping the leftmost byte or the rightmost byte of the Number value?

[00:56:33.0666] <shu>
like the other methods don't combine some operation on top of the conversion to and from number formats

[00:56:35.0380] <shu>
am i too jet lagged

[00:58:25.0248] <hax (HE Shi-Jun)>
> <@bakkot:matrix.org> unfortunately I think we are not willing to break the web, so we can't fix it

We first need to figure out whether it really break the web.

[00:58:40.0546] <Christian Ulbrich>
I think, if we have consensus we can do EVERYTHING, how cares about the past. :)

[00:59:16.0957] <hax (HE Shi-Jun)>
Previously, when `at` land, I already point out it conflict with old corejs polyfill, but no one care.

[00:59:20.0834] <Christian Ulbrich>
 * I think, if we have consensus we can do EVERYTHING, who cares about the past. :)

[00:59:47.0508] <hax (HE Shi-Jun)>
IMO, it's really worse than Symbol.thenable.

[00:59:57.0340] <snek>
did it break things?

[01:00:10.0157] <nicolo-ribaudo>
In this case we know people rely on it

[01:00:20.0164] <shu>
> <@devsnek:matrix.org> did it break things?

yes, at that lego site, because they used arrays as hash maps and used `'at'` as a key

[01:00:30.0741] <snek>
we broke lego? :O

[01:00:30.0760] <shu>
but... not in whatever way corejs was doing `at` afaik

[01:00:39.0125] <rkirsling>
bricklink.com, yeah

[01:00:43.0171] <shu>
it was some lego marketplace site

[01:00:47.0083] <Michael Ficarra>
D:

[01:00:53.0375] <shu>
bricklink or something? it had brick in the name

[01:01:01.0582] <msaboff>
> <@shuyuguo:matrix.org> msaboff: ljharb: yes, endianness is about the bytes, not the bits. but clamping clamps something between 0 to 255, i think in a DataView method that is like, all about reinterpreting byte buffers, isn't there a possibility for confusion on whether you're clamping the leftmost byte or the rightmost byte of the Number value?

When I think of clamping, your clamping the value, not part of the value.  i.e. you aren't clamping a specific byte of the value.

[01:01:24.0603] <snek>
so we've got lego and nasa on the list

[01:01:26.0917] <snek>
i wonder what else

[01:01:35.0794] <shu>
msaboff: your intuition matches what jordan said, so i withdraw my withholding of consensus based on the possible confusion

[01:01:46.0543] <shu>
since i am off the mark on my intuition

[01:01:58.0769] <shu>
that said i'd be much comfortable going to stage 2 with a clear direction

[01:02:18.0693] <shu>
not 3 possible choices

[01:02:23.0168] <msaboff>
> <@shuyuguo:matrix.org> that said i'd be much comfortable going to stage 2 with a clear direction

Agree.  A direction and not a menu of directions.

[01:02:50.0056] <Christian Ulbrich>
@snek Wasn't it for `Array.group*` IBM?

[01:06:34.0137] <rbuckton>
`/=` is a strange case for throw expressions. `a ?? throw b /= c` wouldn't be legal even without the token restriction, because `a ?? throw b` isn't a LeftHandSideExpression.

[01:08:33.0004] <nicolo-ribaudo>
With `/=` you have to be very careful about how things get tokenized, before applying the syntactic grammar

[01:09:10.0780] <nicolo-ribaudo>
So we must be careful with saying that it doesn't have the same problem as `/`

[01:11:30.0303] <rbuckton>
The issue is this:
```
throw b
/= c / d
```
is interpreted as `throw b /= c / d`.
But the expression form doesn't allow `throw` on the left of `/=`, so I can't use an EE to get around ASI in that case.

[01:21:08.0719] <rbuckton>
Well, it could work if I added a level between UpdateExpression and LeftHandSideExpression, I guess.

[01:25:24.0620] <rbuckton>
Or just add it to LeftHandSideExpression, since it wouldn't be a valid assignment target anyways.

[06:57:35.0921] <bakkot>
chairs: shu and I are happy to reduce our TDZ/coercing items (respectively) to 45 minutes if it means getting to discuss both items

[06:57:49.0806] <bakkot>
(I am also happy to ok with reducing mine further if that's the only way we can fit it in)

[07:35:45.0519] <Chris de Almeida>
> <@bakkot:matrix.org> chairs: shu and I are happy to reduce our TDZ/coercing items (respectively) to 45 minutes if it means getting to discuss both items

it would be most helpful if we can reduce the timeboxes unconditionally.  this allows us more flexibility to slot things in when time gets freed up

[07:37:19.0713] <Chris de Almeida>
this also increases the likelihood of getting to discuss both items, although we now have time for TDZ already, per time already freed up

[10:19:14.0458] <TabAtkins>
I think we just need a `"use semicolons"` parser switch that turns off ASI honestly.

[12:52:46.0647] <rbuckton>
Avoiding parens for `throw` may end up being more complex than it's worth to try to handle `/=`, but I'm not sure I want to give up on the UnaryExpression precedence. I'm thinking about restricting `throw` to be only valid in _ParenthesizedExpression_ for now, while still leaving it's operand to be _UnaryExpression_. While fairly restrictive for now, it would give us the ability to relax the grammar in the future by either resolving the ASI issue somehow, or widening the operand. 

[13:48:52.0616] <Michael Ficarra>
so this means we use it like an s-expression? üòÅ

[14:29:33.0179] <shu>
Chris de Almeida: then reduce TDZ to 45 mins

[14:30:14.0032] <shu>
Chris de Almeida: further reduce it to 30 minutes if (and only if) that accommodates the coercion item, otherwise keep it at 45

[14:40:32.0549] <Chris de Almeida>
thank you for being flexible!  given these parameters, it's likely we will be able to get to both items in.  still, I'm hopeful that we will gain some time today so that we don't have to compromise too much on the original timboxes

[14:40:36.0689] <Chris de Almeida>
 * thank you for being flexible!  given these parameters, it's likely we will be able to get to both items in.  still, I'm hopeful that we will gain some time today so that we don't have to compromise too much on the original timeboxes

[14:45:54.0907] <Chris de Almeida>
 * thank you for being flexible!  given these parameters, it's likely we will be able to get to both items. still, I'm hopeful that we will gain some time today so that we don't have to compromise too much on the original timeboxes


2023-09-27
[17:01:28.0520] <hax (HE Shi-Jun)>
> <@tabatkins:matrix.org> I think we just need a `"use semicolons"` parser switch that turns off ASI honestly.

Anti proposal: `"no asi harzards"` parser switch that fix ASI hazards according to developer's expectation. (Yeah , it's very very impossible , especially the committee introduced the very serious new hazards in ES2020)

[17:54:49.0093] <ljharb>
i doubt anything that even tacitly encourages omission of semicolons will achieve consensus :-)

[18:01:01.0249] <rbuckton>
I've updated https://github.com/tc39/proposal-throw-expressions/pull/18 to use Static Semantics rules to avoid ASI for `+`, `-`, `/`, and `/=`, in keeping with how we also use Static Semantics rules to avoid ASI for optional chains followed by a template literal on a following line. I don't believe the end result is quite so complex, but I'd appreciate if anyone with time could take a look over it as I am still short a reviewer.

[18:02:14.0400] <rbuckton>
 * I've updated https://github.com/tc39/proposal-throw-expressions/pull/18 to use Static Semantics rules to avoid ASI for `+`, `-`, `/`, and `/=`, in keeping with how we also use Static Semantics rules to avoid ASI for optional chains followed by a template literal on a following line. I don't believe the end result is as complex as was suggested, but I'd appreciate if anyone with time could take a look over it as I am still short a reviewer.

[18:02:25.0385] <ljharb>
i was going to say "tcq needs updating" but i refreshed and it's not loading at all for me

[18:02:28.0740] <Chris de Almeida>
TCQ down for everyone or just me?

[18:02:30.0410] <ljharb>
 * i was going to say "tcq needs updating" but i refreshed and it's not loading at all for me now, just hanging

[18:02:45.0036] <nicolo-ribaudo>
tcqdownforeveryone.status

[18:03:17.0945] <Chris de Almeida>
this would never happen if it was using IBM infra!  `/s`

[18:03:58.0288] <Chris de Almeida>
TCQ appears to be operational once again

[18:04:09.0407] <Chris de Almeida>
ü§û

[18:04:23.0496] <hax (HE Shi-Jun)>
> <@ljharb:matrix.org> i doubt anything that even tacitly encourages omission of semicolons will achieve consensus :-)

yeah , we lost the feasibility forever after ES2020.

[18:05:21.0460] <ljharb>
not because of that, but because some number of us (at least one :-) ) feel that omitting semicolons isn't a good style to encourage.

[18:06:26.0918] <ljharb>
 * not because of that, but because some number of us (at least one üòÑ) feel that omitting semicolons isn't a good style to encourage.

[18:07:26.0481] <ljharb>
 * not because of that, but because some number of us (at least one üòÑ) feel that omitting semicolons ~isn't a good~ is a harmful style to encourage.

[18:07:30.0216] <ljharb>
 * not because of that, but because some number of us (at least one üòÑ) feel that omitting semicolons ~~isn't a good~~ is a harmful style to encourage.

[18:07:33.0583] <ljharb>
 * not because of that, but because some number of us (at least one üòÑ) feel that omitting semicolons ~isn't a good~ is a harmful style to encourage.

[18:09:25.0661] <rkirsling>
we should make a t-shirt

[18:09:35.0487] <rkirsling>
"eat your vegetables and use your semicolons"

[18:09:54.0889] <shu>
you should use your whole colon tbh

[18:10:00.0020] <Christian Ulbrich>
omitting semicolons is `eval()`!

[18:16:56.0618] <Michael Ficarra>
I never know how to understand the feedback "we would like to see this done but are unwilling to dedicate resources to doing it ourselves"

[18:17:20.0621] <Michael Ficarra>
is there not an inherent conflict there?

[18:17:52.0781] <shu>
Michael Ficarra: i think you know in your heart how to understand that feedback

[18:17:59.0549] <hax (HE Shi-Jun)>
> <@ljharb:matrix.org> not because of that, but because some number of us (at least one üòÑ) feel that omitting semicolons ~isn't a good~ is a harmful style to encourage.

While I understand there are always people don't like omitting semicolons, also there are always people don't like to be forced to add semicolons. After all, I believe the original design of the language (by BE) encourage omitting semicolon, just like the most recent new application programming languages (swift, kotlin,  scala3, etc.) Unfortunately BE made some small mistakes and introduce ASI hazards (though the most ASI hazards patterns were not used by any one in early days), but it still fixable IMO, until ES2020 (the best time is ES5 of coz).

