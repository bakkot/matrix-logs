2025-10-01
[10:31:13.0314] <Mathieu Hofman>
Any further details on the 2026 agenda? We need to lock down the week for a company event in January and really need it not to conflict with plenary.

[10:33:30.0886] <Mathieu Hofman>
* Any further details on the 2026 agenda? We need to lock down the week for a company event in January and really need it not to conflict with plenary.

Edit: Well I was just told our event week was decided. Let's hope there is no plenary week of Jan 12

[10:48:28.0570] <Mathieu Hofman>
* Any further details on the 2026 agenda? We need to lock down the week for a company event in January and really need it not to conflict with plenary.

Edit: Well I was just told our event week is about to be decided. Let's hope there is no plenary week of Jan 12 (the most likely candidate so far)


2025-10-02
[07:43:34.0971] <Chris de Almeida>
first 2026 meeting is Jan 20-22

[08:35:50.0241] <eemeli>
Virtual, right? Or so at least I understood from the discussion at the very end of the plenary.

[08:36:05.0046] <nicolo-ribaudo>
Yes

[08:36:06.0543] <Chris de Almeida>
yes, remote-only

[09:40:43.0938] <James M Snell>
I've got a couple of `TypedArray`-related proposals for the agenda next month in Tokyo that I'm looking forward to presenting. Slides are here if anyone wants to get a head start: https://docs.google.com/presentation/d/1RIhMpf4gY2wX0KZcmCUU6i9l9Ay7WBu0vY4vIsJUwTg/edit?slide=id.p#slide=id.p .. We can save discussion for the plenary, just wanted to provide a heads up.

[09:41:30.0642] <James M Snell>
* I've got a couple of `TypedArray`-related proposals for the agenda next month in Tokyo that I'm looking forward to presenting. Slides are here if anyone wants to get a head start: https://docs.google.com/presentation/d/1RIhMpf4gY2wX0KZcmCUU6i9l9Ay7WBu0vY4vIsJUwTg/edit?slide=id.p#slide=id.p .. We can save discussion for the plenary, just wanted to provide a heads up. These would be for Stage 1 consideration.

[09:46:48.0053] <bakkot>
James M Snell: nice. Some feedback: for stage 1 it helps to establish motivation for solving the problem, ideally with several examples. The WritableStream one is good but could use more, others need them too. I think this is especially true for swap16 etc because I can't imagine many applications which would want that and just "this API exists elsewhere" isn't a good enough reason without establishing it does something people need to do

[09:49:41.0088] <James M Snell>
Yeah, over the next week or two I plan to fill in more of those details. The key ones I'm looking to get to Stage 1 now are the concat and find within, so I'll be focusing on those. The others are more background that I'll likely push for later. Mostly included those for additional context tho.... I'd really like to replace most of the use cases for Buffer

[09:51:07.0996] <James M Snell>
the swapN functions are fairly specialized and I've only seen them used in very limited cases so those I can easily see not moving forward on

[11:32:12.0052] <Aki>
I wish TCQ had a route to having a meeting where the attendees didn’t need to log in. So many TCs would benefit from this tool but GitHub is a bridge too far for the old guard 

[11:33:41.0269] <Chris de Almeida>
oh boy do I have the solution for you!

[11:36:28.0620] <Chris de Almeida>
Aki: https://docs.google.com/spreadsheets/d/1xBUuIdmA3f4nY_PsesZfsolGAGnpfop7sxovyGmfM_U/edit?usp=sharing

[11:40:03.0912] <ljharb>
in this TYOOL 2025 they still can't handle having a github account? O.o

[13:19:21.0484] <dminor>
I'm interested in discussing https://github.com/tc39/proposal-error-capturestacktrace at an upcoming TG3, who should I speak to about getting added to the agenda?

[13:20:17.0598] <kriskowal>
I can scribble you in next week. The conveners lurk in #tc39-tg3-security:matrix.org.

[14:50:19.0677] <James M Snell>
I've expanded the concat discussion with a couple more good examples and a link to some prior art based on `Buffer` that sees about 45m+ downloads a week as a reference point


2025-10-03
[22:35:17.0403] <Aki>
These people come from very different backgrounds from the people you're used to working with. Many still work in Word docs with track changes on.

[07:06:35.0540] <rkirsling>
lol I assumed TYOOL was the name of a committee or a conference at first

[08:10:17.0176] <Chris de Almeida>
then `TCQ.xlsx` will be a revelation!

[08:14:08.0570] <Aki>
omg Chris there's still a Word document put together by IEC in the early 2000s that includes a TABLE that SDOs use to make comments on each other's standards. They warn against changing the table column widths bc then when they compile all the comments they don't match

[08:15:55.0523] <Chris de Almeida>
nice

[08:17:24.0776] <Chris de Almeida>
Yea, verily, the _Old Ways_ offer a beacon of hope in this dark and uncertain times.

[08:18:09.0288] <Chris de Almeida>
* Yea, verily, the _Old Ways_ offer a beacon of hope in these dark and uncertain times.


2025-10-04
[19:23:54.0341] <bakkot>
python gets lazy module loading https://pep-previews--4622.org.readthedocs.build/pep-0810/

[20:04:52.0430] <bakkot>
* python proposal for lazy module loading https://pep-previews--4622.org.readthedocs.build/pep-0810/

[00:36:39.0897] <Ashley Claymore>
Nice! There was this one before: https://peps.python.org/pep-0690/
which was opt-out instead of opt-in. But was rejected.
This new one being opt-in (if I'm reading correctly) aligns with how we've approached import-defer


2025-10-10
[09:01:13.0540] <styfle>
Now that we almost have Temporal, has anyone tried to write a proposal for something like `await sleep(d: Duration)`?

[09:09:48.0350] <bakkot>
The binding constraint there was never Temporal, it was having more exposure to actual clocks in the core language

[09:10:23.0412] <bakkot>
Also the conflict with scheduler.wait, now

[09:12:07.0497] <Chris de Almeida - upcoming OOO: Oct 10-14>
namely, setTimeout is not in the language, which is what idiomatically is used for pause/sleep 

[09:15:01.0463] <Chris de Almeida - upcoming OOO: Oct 10-14>
similar story with observables

[09:48:38.0507] <Mathieu Hofman>
The lack of time based scheduling actually runs deep and is leveraged by things like Worklets on the Web, which are agents without an "event-loop" (only promise jobs)

[11:03:31.0956] <styfle>
Hmm, so maybe a better path forward is to propose a change to setTimeout in the html spec so that it accepts Temporal.Duration? Or maybe there’s an easier way to just concert Duration to ms already?

[11:16:12.0528] <bakkot>
yeah `Temporal.Duration.from({ hours: 130, minutes: 20 }).total('millisecond')`

[11:16:36.0003] <bakkot>
as long as you don't need a week or more

[11:17:27.0658] <bakkot>
but yes you could also change `setTimeout`

[12:03:09.0787] <styfle>
* Hmm, so maybe a better path forward is to propose a change to setTimeout in the html spec so that it accepts Temporal.Duration? Or maybe there’s an easier way to just convert Duration to ms already?

[12:05:51.0629] <styfle>
Thanks! Can you explain the “week or more” caveat? 

[12:17:32.0850] <bakkot>
https://tc39.es/proposal-temporal/docs/duration.html#total

[12:17:42.0317] <bakkot>
> Interpreting years, months, or weeks requires a reference point. Therefore, if unit is 'year', 'month', or 'week', or the duration has nonzero 'year', 'month', or 'week', then the relativeTo option is required. For this reason, it's required to use the object (not string) form of totalOf in these cases.


2025-10-13
[13:39:41.0086] <jschoi>
> <@softwarechris:matrix.org> namely, setTimeout is not in the language, which is what idiomatically is used for pause/sleep 

I’ve often wondered how feasible it would be to have an Ecma-262 annex for adding *optional* debounce and throttle methods to Function or Function.prototype, versus adding them somewhere in HTML/WinterTC. (Those two were some of the stars of proposal-function-helpers…)


2025-10-15
[10:39:59.0888] <bakkot>
`import with { type: 'bytes' }` is implemented in esbuild and webpack, neat

[10:40:01.0022] <bakkot>
https://github.com/evanw/esbuild/issues/4292

[10:44:27.0516] <Mathieu Hofman>
How can it be "implemented" without immutable array buffer ?

[10:44:41.0890] <bakkot>
just doesn't do that part

[10:44:51.0529] <bakkot>
as long as you don't try to mutate it you won't observe this anyway

[15:06:57.0364] <Chris de Almeida>
Please see the (private) Reflector post for an update on the first three meetings of 2026:

https://github.com/tc39/Reflector/issues/570

[15:28:36.0075] <sffc>
There was a topic that appeared and disappeared from the agenda about increasing the agenda deadlines from 10 days to something longer like 14 days. If that proposal moves forward, it influences the dates of the TG2 meetings. Are there any plans to move forward with that proposal, or can I assume that the first 3 meetings of 2026 will be having the 10-day agenda deadline?

[15:29:22.0195] <sffc>
* There was a topic that appeared and disappeared from a plenary agenda earlier this year about increasing the agenda deadlines from 10 days to something longer like 14 days. If that proposal moves forward, it influences the dates of the TG2 meetings. Are there any plans to move forward with that proposal, or can I assume that the first 3 meetings of 2026 will be having the 10-day agenda deadline?

[15:33:41.0372] <Chris de Almeida>
I had planned to present that at one point, and I may yet do so. If that does get presented and approved in any form, it would only impact, at best, the following plenary meeting after it was presented.

[15:37:28.0290] <sffc>
ok, in that case I will wait to schedule further TG2 meetings. I will schedule them one plenary at a time.

[15:40:06.0366] <sffc>
It would be helpful for me if we could discuss it sooner rather than later so that I can do TG2 scheduling with a greater horizon. (Reminder: the constraint is that the TG2 meeting should be in advance of the TG1 agenda deadline so that TG2 can approve proposals to advance into TG1.)


2025-10-20
[12:43:26.0493] <bakkot>
with promising results! https://hugovk.dev/blog/2025/lazy-imports/

I suspect it will be less impactful for JS, since we don't tend to do as much startup initialization as Python, but still

[15:27:32.0805] <Rob Palmer>
I think the excessive depth of eager static graphs associated with JS apps - due to package management choices - will balance out any reduction in top-level code.

Jest quoted a 2x win via pervasive lazy loading. But it really is situational based on the heaviness of the module graph you are deferring.


2025-10-25
[05:19:11.0400] <nicolo-ribaudo>
Do you think we could start saving the agenda deadline in the tc39 calendar? :)

[10:24:51.0909] <bakkot>
one of the things in James M Snell's TypedArrays presentations is a `compare` method for TypedArrays. This in theory subsumes a `equals` method, but in practice `equals` can be implemented as a `memcmp` (as long as you don't care about NaN / -0) and `compare` cannot (except for `uint8`; for other types the ordering considered as a byte sequence is not the same as the ordering as int32 or whatever)

is it likely engines could optimize `Int32Array.compare(a, b) === 0` to do a `memcmp`? if not, how would people feel about having an `equals` method also?


2025-10-26
[12:00:44.0630] <snek>
the only reason i want equals is for performance, so if compare can't be as fast i'd still want it


2025-10-27
[17:54:23.0169] <kriskowal>
I’m sure this is excessively pedantic, but `compare(x, y) === 0` isn’t _always_ equivalent to `equals(x, y)` for inequal `x` and `y` that are of the same equivalence class (“rank”). So, apart from performance, another good reason for a separate `equals` is just a good precedent to set.

[17:54:51.0831] <kriskowal>
* I’m sure this is excessively pedantic, but `compare(x, y) === 0` isn’t _always_ equivalent to `equals(x, y)` for inequal `x` and `y` that are of the same equivalence class (“rank”). So, apart from performance, another good reason for a separate `equals` is just that it’s a good precedent to set.

[18:02:34.0261] <James M Snell>
I'm good with that 

[18:31:51.0342] <bakkot>
it is for TypedArrays specifically though

[18:32:19.0080] <bakkot>
but yes Temporal has `.equals` as well as `.compare` for (I think?) partly this reason

[07:24:05.0785] <Rob Palmer>
***Reminder:***  Today is the last day to [sign up](https://github.com/tc39/Reflector/issues/564) for in-person attendance for the 18-20th November plenary meeting in Tokyo.

[07:27:00.0765] <Andreu Botella>
I think I signed up, but not 100% sure. Should I fill the form again?

[07:27:33.0958] <Rob Palmer>
You signed up.  No need to do it again.

[07:53:31.0199] <Rob Palmer>
The signup list matches the people in (or invited to) the TC39 in Tokyo Matrix channel.

[08:03:34.0422] <snek>
Rob Palmer: am I on the list? I would've sworn I signed up but I'm not in the channel 

[08:07:49.0715] <Rob Palmer>
You are not signed up.  The form generates an email receipt.

[08:38:40.0071] <snek>
i submitted it, though i suspect i had already filled it out once before since all the answers were already pre-filled? and i haven't gotten an email confirmation

[08:45:04.0950] <Rob Palmer>
Maybe you are thinking of the interest survey?  Either way, please try again and I will confirm if it shows up.

[09:09:30.0239] <nicolo-ribaudo>
Fwiw I got no email

[10:49:52.0394] <Chengzhong Wu>
If you filed before Sept 12, you might not have a confirmation email. The feature was enabled since then

[12:40:38.0720] <Rob Palmer>
snek: younare now registered 

[12:40:50.0289] <Rob Palmer>
* @devsnek:matrix.org: you are now registered

