2023-03-12
[19:00:52.0741] <Jack Works>
ah

[19:01:01.0146] <Jack Works>
when can we have field declaration in constructor parameter

[19:01:51.0206] <Jack Works>
```js
constructor(#srv) {}
```

rather than

```js
#srv
constructor(srv) {
    this.#srv = srv
}
```

[20:02:28.0439] <ljharb>
what about if you want `this.srv = srv;`?

[21:08:27.0330] <Jack Works>
I don't know ü§£

[01:29:29.0645] <Ashley Claymore>
https://es.discourse.group/t/class-property-parameters/543/12
(Note: this was before I had joined Bloomberg, not a BB proposal)

[07:13:04.0786] <bakkot>
some discussion around `take` being confusing in this thread, with a proposed fix of renaming to `limit`; thoughts? https://github.com/tc39/proposal-iterator-helpers/issues/71#issuecomment-1461841551

[07:13:46.0856] <bakkot>
specifically the confusion is, the subiterator form `take` closes the underlying thing when the subiterator is exhausted, which might confuse people who are wanting to repeatedly take a few items

[07:14:34.0173] <bakkot>
this is a disanalogy with other languages because most things you can call `take` on don't have a notion of "being closed", even iterators

[07:14:37.0750] <bakkot>
cc Michael Ficarra 


2023-03-13
[01:06:56.0495] <bakkot>
ljharb: we have some extra time on the agenda this meeting; if markm's around, do you think we could talk about next steps for making regex escape happen?

[01:07:49.0063] <bakkot>
that is, assuming the next step for that proposal is "talk to the rest of the committee and settle on a design", rather than anything in particular which would need to be done in advance of the meeting

[01:19:48.0498] <bakkot>
(or if anyone has other proposals blocked on similar "we just need to discuss and/or argue about it for a while" issues, this seems like a good time)

[04:41:25.0041] <littledan>
> <@bakkot:matrix.org> (or if anyone has other proposals blocked on similar "we just need to discuss and/or argue about it for a while" issues, this seems like a good time)

Could be fun also to chat about the fundamentals of equality and immutability and what the committee wants there.

[04:43:07.0101] <littledan>
Also, if we are going totally crazy, we could talk about reactivity and signals and observables

[04:43:47.0587] <littledan>
> <@bakkot:matrix.org> (or if anyone has other proposals blocked on similar "we just need to discuss and/or argue about it for a while" issues, this seems like a good time)

 * Could be fun also to chat about the fundamentals of equality and immutability and rekey/compound keys.

[05:08:32.0406] <Jesse>
> <@bakkot:matrix.org> (or if anyone has other proposals blocked on similar "we just need to discuss and/or argue about it for a while" issues, this seems like a good time)

I'm happy to chat about decimal numbers!

[05:13:18.0378] <Jesse>
> <@bakkot:matrix.org> (or if anyone has other proposals blocked on similar "we just need to discuss and/or argue about it for a while" issues, this seems like a good time)

 * I'm happy to chat about numbers (decimal or otherwise)!

[12:36:24.0560] <Michael Ficarra>
‚Ñö?

[12:44:06.0761] <littledan>
‚Ñù?

[12:50:22.0461] <Michael Ficarra>
hopefully not ‚ÑÇ

[15:03:17.0694] <ljharb>
went ahead and added a topic for it


2023-03-14
[01:23:24.0698] <Jesse>
AFAIK there is not current proposal to add ‚ÑÇ to JS ü§£

[01:23:32.0933] <Jesse>
 * AFAIK there is no current proposal to add ‚ÑÇ to JS ü§£

[01:46:42.0155] <nicolo-ribaudo>
https://github.com/tc39/proposal-extended-numeric-literals
"Other numeric types which may be added: [...] Complex numbers" üòõ

[01:48:33.0658] <Andreu Botella>
Next up, quaternions

[01:51:12.0995] <Jesse>
see, there's all sorts of stuff to talk about!

[09:26:19.0632] <Michael Ficarra>
okay, serious question: what advantage do decimals have over rationals?

[09:26:24.0956] <Michael Ficarra>
it seems like rationals would be strictly better

[09:27:20.0136] <Michael Ficarra>
and a rational library is really simple to implement on top of bigints today

[09:36:00.0613] <Jesse>
one concern that comes to mind with rationals would be the normal form representation (unless one wants to expose numerically equal values with different representations). There might be quite a lot of integer division and modulo checks to reduce the numerators and denominators

[09:38:02.0944] <Jesse>
there was a discussion about rationals in proposal-decimal: https://github.com/tc39/proposal-decimal/issues/6

