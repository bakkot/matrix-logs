2023-03-12
[19:00:52.0741] <Jack Works>
ah

[19:01:01.0146] <Jack Works>
when can we have field declaration in constructor parameter

[19:01:51.0206] <Jack Works>
```js
constructor(#srv) {}
```

rather than

```js
#srv
constructor(srv) {
    this.#srv = srv
}
```

[20:02:28.0439] <ljharb>
what about if you want `this.srv = srv;`?

[21:08:27.0330] <Jack Works>
I don't know ü§£

[01:29:29.0645] <Ashley Claymore>
https://es.discourse.group/t/class-property-parameters/543/12
(Note: this was before I had joined Bloomberg, not a BB proposal)

[07:13:04.0786] <bakkot>
some discussion around `take` being confusing in this thread, with a proposed fix of renaming to `limit`; thoughts? https://github.com/tc39/proposal-iterator-helpers/issues/71#issuecomment-1461841551

[07:13:46.0856] <bakkot>
specifically the confusion is, the subiterator form `take` closes the underlying thing when the subiterator is exhausted, which might confuse people who are wanting to repeatedly take a few items

[07:14:34.0173] <bakkot>
this is a disanalogy with other languages because most things you can call `take` on don't have a notion of "being closed", even iterators

[07:14:37.0750] <bakkot>
cc Michael Ficarra 


2023-03-13
[01:06:56.0495] <bakkot>
ljharb: we have some extra time on the agenda this meeting; if markm's around, do you think we could talk about next steps for making regex escape happen?

[01:07:49.0063] <bakkot>
that is, assuming the next step for that proposal is "talk to the rest of the committee and settle on a design", rather than anything in particular which would need to be done in advance of the meeting

[01:19:48.0498] <bakkot>
(or if anyone has other proposals blocked on similar "we just need to discuss and/or argue about it for a while" issues, this seems like a good time)

[04:41:25.0041] <littledan>
> <@bakkot:matrix.org> (or if anyone has other proposals blocked on similar "we just need to discuss and/or argue about it for a while" issues, this seems like a good time)

Could be fun also to chat about the fundamentals of equality and immutability and what the committee wants there.

[04:43:07.0101] <littledan>
Also, if we are going totally crazy, we could talk about reactivity and signals and observables

[04:43:47.0587] <littledan>
> <@bakkot:matrix.org> (or if anyone has other proposals blocked on similar "we just need to discuss and/or argue about it for a while" issues, this seems like a good time)

 * Could be fun also to chat about the fundamentals of equality and immutability and rekey/compound keys.

[05:08:32.0406] <Jesse>
> <@bakkot:matrix.org> (or if anyone has other proposals blocked on similar "we just need to discuss and/or argue about it for a while" issues, this seems like a good time)

I'm happy to chat about decimal numbers!

[05:13:18.0378] <Jesse>
> <@bakkot:matrix.org> (or if anyone has other proposals blocked on similar "we just need to discuss and/or argue about it for a while" issues, this seems like a good time)

 * I'm happy to chat about numbers (decimal or otherwise)!

[12:36:24.0560] <Michael Ficarra>
‚Ñö?

[12:44:06.0761] <littledan>
‚Ñù?

[12:50:22.0461] <Michael Ficarra>
hopefully not ‚ÑÇ

[15:03:17.0694] <ljharb>
went ahead and added a topic for it


2023-03-14
[01:23:24.0698] <Jesse>
AFAIK there is not current proposal to add ‚ÑÇ to JS ü§£

[01:23:32.0933] <Jesse>
 * AFAIK there is no current proposal to add ‚ÑÇ to JS ü§£

[01:46:42.0155] <nicolo-ribaudo>
https://github.com/tc39/proposal-extended-numeric-literals
"Other numeric types which may be added: [...] Complex numbers" üòõ

[01:48:33.0658] <Andreu Botella>
Next up, quaternions

[01:51:12.0995] <Jesse>
see, there's all sorts of stuff to talk about!

[09:26:19.0632] <Michael Ficarra>
okay, serious question: what advantage do decimals have over rationals?

[09:26:24.0956] <Michael Ficarra>
it seems like rationals would be strictly better

[09:27:20.0136] <Michael Ficarra>
and a rational library is really simple to implement on top of bigints today

[09:36:00.0613] <Jesse>
one concern that comes to mind with rationals would be the normal form representation (unless one wants to expose numerically equal values with different representations). There might be quite a lot of integer division and modulo checks to reduce the numerators and denominators

[09:38:02.0944] <Jesse>
there was a discussion about rationals in proposal-decimal: https://github.com/tc39/proposal-decimal/issues/6

[09:45:27.0832] <littledan>
Rationals and decimals are just different data types. A very common and important operation on decimals is rounding in an inherently base-10 way; this operation doesn't really make sense on rationals.

[09:46:03.0526] <littledan>
pervasive rounding is also important to control size blowup (which, as Waldemar, remains a problem anyway for BigDecimal, but is worse for rationals)

[09:55:21.0264] <Michael Ficarra>
I dunno, that thread seems to support rational pretty well IMO

[09:55:51.0000] <Michael Ficarra>
a smart implementation can amortise the GCDs as appropriate for the platform

[09:56:49.0713] <Michael Ficarra>
anyway, we can talk more about it at the meeting next week

[12:15:53.0207] <littledan>
> <@michaelficarra:matrix.org> I dunno, that thread seems to support rational pretty well IMO

Heh my leading comment there is pretty weak. I'd say that the main factor for me is this round operation. Looking forward to discussing more.


2023-03-15
[12:33:42.0916] <Michael Ficarra>
Reminder for anyone attending the meeting next week: prepare for rain. March is Seattle's rainiest month. It will rain every day.

[12:39:42.0961] <littledan>
ljharb: Just curious, was the ordering there deliberate?

[12:41:17.0821] <ljharb>
 ordering?

[12:59:44.0974] <Ashley Claymore>
Extra please I choose the nearest hotel 

[12:59:50.0213] <Ashley Claymore>
* Extra pleased I choose the nearest hotel

[13:04:03.0989] <Michael Ficarra>
yes, the Lotte literally has a covered walkway between its entrance and the F5 Tower entrance

[13:41:49.0134] <littledan>
the RegExp topic comes amid Stage 3 proposals, even though it's Stage 1

[13:41:56.0048] <littledan>
in the agenda

[14:15:35.0948] <ljharb>
sorting is by timebox first, then stage

[14:15:50.0170] <ljharb>
or did i mess that up, and it‚Äôs the reverse? I‚Äôll check 

[14:16:07.0950] <ljharb>
ah you‚Äôre right, my bad, will fix

[14:33:06.0955] <Michael Ficarra>
no need, I fixed it for you already

[14:36:12.0639] <ljharb>
i saw; there were a few others that needed fixing so i rebased and pushed

[15:25:10.0928] <ptomato>
anyone got any recommendations for where to buy a prepaid SIM card nearby the venue?

[15:33:11.0833] <Michael Ficarra>
ptomato: Will you be arriving via the airport? Usually there are kiosks in the airport.

[15:35:01.0903] <ptomato>
I'm coming by train from north of the border üòÑ

[15:37:42.0944] <Michael Ficarra>
Does your carrier not cover US/Canada? Most US carriers cover Canada at least.

[15:39:45.0772] <ptomato>
I have a very cheap carrier which does not cover the US  - I rarely use talk/text unless I'm travelling, in which case I buy a SIM card

[15:45:52.0233] <Michael Ficarra>
I would probably try this 7-Eleven around the corner: https://goo.gl/maps/Qg11dSu9Fcz2LmRy8

[15:46:24.0313] <ptomato>
thanks!

[15:46:28.0818] <Michael Ficarra>
also if you're picking up masks/tests at the local Bartell Drugs, they may carry prepaid SIM cards

[15:47:02.0001] <ptomato>
those I was going to bring, but that's nonetheless a good tip for others maybe!

[15:48:51.0675] <Michael Ficarra>
it also might not be too late to order a prepaid US SIM online and get it delivered before you leave

[15:49:22.0904] <Michael Ficarra>
that might be better if you're worried about being without talk/text/data on your way from the train to F5 Tower

[15:51:20.0763] <Michael Ficarra>
anyway, if none of those suggestions work, just ping one of us and we can help figure something out

[15:52:09.0715] <ptomato>
I'm not too worried about that, I'd probably be using it more for coordination with other attendees

[15:52:12.0270] <ptomato>
thanks!

[15:53:17.0830] <shu>
https://pagersdirect.net/


2023-03-16
[17:34:50.0862] <Chris de Almeida>
ptomato: if your phone has eSim, I've used the ones you can buy online, and worked well

[17:35:00.0061] <Chris de Almeida>
 * ptomato: if your phone has eSIM, I've used the ones you can buy online, and worked well

[17:36:40.0344] <Chris de Almeida>
well - I only used the data-only one that Orange sells and used in Europe, but presumably can get the same for US from them or another carrier

[17:38:45.0960] <Chris de Almeida>
I avoided the resellers like airalo, etc that route all your stuff through middleperson servers


2023-03-20
[07:55:35.0823] <Rob Palmer>
The draft schedule for this week's TC39 plenary has been posted on [the Reflector](https://github.com/tc39/Reflector/issues/461).  Please do not share the link here because this is a public channel with logs.

[09:03:21.0027] <Rob Palmer>
For those folk in Seattle, we have a dedicated Matrix room for logistics of getting around or meeting for dinner.  Please say if you need an invite.


2023-03-21
[08:14:25.0580] <Rob Palmer>
Hello all.  Plenary meeting begins in just under two hours.

For those attending in person in Seattle, please arrive from 09:20 where you will be met in the F5 lobby.  Breakfast will be served on the same floor as the meeting room from 09:30.

[08:33:28.0750] <shu>
i still don't see a zoom link

[08:43:09.0339] <Rob Palmer>
The entry-form containing the zoom link will be posted in the next 30 mins and I will notify here.

[09:20:52.0868] <Jack Works>
why we're always changing the meeting software ü§î

[09:21:19.0509] <Rob Palmer>
The entry form is now available on the Reflector:  https://github.com/tc39/Reflector/issues/461

[09:22:41.0770] <Rob Palmer>
Jack Works: This is due to host room setup.  The room has been built to work with Zoom, e.g. the AV is connected to an inaccessible Zoom server.  We did try to get Google Meet running with no success.

[09:55:26.0947] <Rob Palmer>
We begin in 5 minutes! 

[09:56:12.0048] <Rob Palmer>
This is our room for the week. 

[09:59:43.0211] <ryzokuken>
looks great!

[10:02:21.0178] <shu>
Customer Engagement Center

[10:04:41.0900] <yulia>
looks really fancy

[10:04:50.0899] <yulia>
(im not present in any form today)

[10:09:55.0474] <Anthony Bullard>
Wish I was there

[10:14:55.0648] <msaboff>
@bakkot You should probably advertise somehow that you are recording for the late arrivals.

[10:25:41.0212] <bakkot>
msaboff: I'll say it again in my editor update

[11:09:14.0210] <shu>
dminor: not sure i understand that point. that sounds like mozilla-internal meeting wrangling

[11:09:44.0985] <ryzokuken>
I think the point they tried to make was that what Shane's mentioning now

[11:09:50.0817] <ryzokuken>
TG2 is run very differently

[11:10:03.0712] <ryzokuken>
for one, the agenda isn't set up clearly ahead of time

[11:10:40.0706] <ryzokuken>
we don't use TCQ but do use a simpler Google Meet queue

[11:10:42.0196] <shu>
ah i misunderstood then, it was about how TG2 is run, not mozilla?

[11:11:07.0994] <ryzokuken>
well, a bit of both I thought

[11:11:32.0299] <ryzokuken>
because of how TG2 is run, Mozilla cannot have structured internal discussions about the agenda a week ahead

[11:11:42.0907] <ryzokuken>
(IIUC, dminor will probably correct me)

[11:11:43.0303] <dminor>
Basically, it would be difficult for us to review proposals properly in advance given the way that TG2 is currently run, so we'd prefer to continue to do advancement in the main committee meetings

[11:12:08.0307] <shu>
dminor: okay, thanks

[11:15:28.0133] <littledan>
Async: Please share the link to the slides on test262 funding so we can reference them from the notes.

[11:25:23.0256] <Ashley Claymore>
https://ptomato.name/talks/tc39-2023-03/

[11:25:27.0795] <Ashley Claymore>
agenda and notes updated

[11:28:54.0614] <Rob Palmer>
To meet Justin Grant's schedule constraint, we are suggesting Temporal will be at 13:00 (first thing after lunch)

[11:31:33.0736] <shu>
wow jordan sounds great

[11:31:37.0004] <shu>
kudos to these room mics

[11:31:43.0224] <apaprocki>
Do any other Ecma TCs have shared costs between member companies that attend? Curious if something like specific TC "dues" could work if rolled up into the yearly fee.

[11:32:20.0825] <apaprocki>
A lot of pain in companies contracting out work if they can't do it themselves is the burden of that internal process... 

[11:35:36.0486] <ljharb>
it definitely seems like the primary purpose of member dues is so Ecma, not individual members, can fund shared needs.

[11:59:02.0634] <HE Shi-Jun>
not sure how renaming to limit/skip solve the problem ...

[12:00:10.0701] <Bradford Smith>
do all of the iterator helpers currently close the underlying iterator?

[12:00:36.0477] <rbuckton>
> <@haxjs:matrix.org> not sure how renaming to limit/skip solve the problem ...

I don't think it does, especially given the rather common meaning of `take` across the ecosystem as well as other languages.

[12:01:13.0781] <littledan>
> <@apaprocki:matrix.org> Do any other Ecma TCs have shared costs between member companies that attend? Curious if something like specific TC "dues" could work if rolled up into the yearly fee.

Ecma folks have told me that there have been shared costs historically, and that members handle their own financial things when it comes up

[12:01:15.0674] <rbuckton>
It's rather trivial to write a wrapper for an iterator that doesn't forward `return`

[12:01:21.0874] <littledan>
(and they consider this best practice in general)

[12:01:35.0695] <Rob Palmer>
We will return in one hour.  If any of the remote attendees have feedback on AV etc please say it here.

[12:01:57.0028] <Bradford Smith>
I find "limit" less understandable than "take". If it helps avoid misunderstanding, I would expect that's only because one has to read the docs to understand what it does at all.

[12:10:06.0956] <peetk>
imo "limit" conveys very clearly that the iterator is closed, i guess because it sounds like SQL limit, and obviously SQL queries are not stateful; whereas "take" is much more ambiguous. but i guess this is a minority view!

[12:56:40.0878] <Bradford Smith>
Are there actually any iterator helpers in the proposal that do *not* close the underlying iterator?

[12:58:20.0647] <Justin Ridgewell>
They all either iterate everything (thus closing the underlying), or close when they early exit

[12:58:26.0161] <bakkot>
`take` is special in that `take` ends _before_ exhausting the underlying iterator

[12:58:33.0685] <Bradford Smith>
My general expectation is that if I pass an iterator off to any other code, I should assume it is exhausted and not touch it again myself.

[12:59:20.0898] <bakkot>
whereas if you `map` or something the expectation is that it either you are exhausting it, which will naturally close the underlying iterator, or closing the `map` helper explicitly

[13:00:03.0787] <Justin Ridgewell>
> <@bakkot:matrix.org> `take` is special in that `take` ends _before_ exhausting the underlying iterator

So does `some`, `every`, and `find`

[13:00:33.0166] <bakkot>
Justin Ridgewell: those don't produce new iterators though

[13:00:37.0297] <rbuckton>
Caveat being that `some`, `every`, and `find` return scalar results

[13:00:42.0904] <bakkot>
they are as it were "consumers" rather than "transfomers"

[13:01:58.0247] <rbuckton>
Though `take` ending before exhausting the iterator is a misconception. The fact it calls `return` is more of an optimization than a meaningful difference when it comes to sequence operators.

[13:02:56.0562] <bakkot>
by "an optimization", do you mean relative to the option of manually exhausting the underlying by calling `.next` repeatedly, or something else?

[13:03:09.0091] <rbuckton>
Yes.

[13:03:41.0995] <rbuckton>
If JS had no `.return` and the only way to close an iterator were to exhaust it, I would expect `take` to exhaust the iterator.

[13:04:14.0735] <rbuckton>
So its good that `return` exists, as it allows us to short-circuit such an expensive operation.

[13:05:10.0505] <rbuckton>
But I'm pretty sure that in every example of prior art in the ecosystem, where `take` is used it means "take X items and exhaust/close the underlying iterator"

[13:05:35.0432] <rbuckton>
If the iterator were a database, I would expect `take` to close the connection when completed. 

[13:05:42.0070] <rbuckton>
 * If the iterator were backed by a database, I would expect `take` to close the connection when completed.

[13:05:55.0389] <rbuckton>
The alternative is resource starvation, which is a bad failure state.

[13:06:41.0972] <rbuckton>
If you want "consume X and not close", that operation is normally named something like `read` (at least, where IO is concerned)

[13:10:50.0479] <ljharb>
erights: i finished the iterator helpers "close the underlying iterator" change before lunch, and it passes all the proposed test262 tests as well as my own

[13:13:24.0852] <Rob Palmer>
We are bringing forward  Async Explicit Resource Management to happen this afternoon.  TCQ and draft schedule are updated accordinlgly.

[13:15:38.0745] <Richard Gibson>
rbuckton: isn't your claim about taking more uncommon directly contradicting by the issue that prompted this discussion?

[13:15:47.0087] <Richard Gibson>
 * rbuckton: isn't your claim about taking more being uncommon directly contradicting by the issue that prompted this discussion?

[13:15:54.0997] <Richard Gibson>
 * rbuckton: isn't your claim about taking more being uncommon directly contradicted by the issue that prompted this discussion?

[13:16:54.0435] <rbuckton>
My impression is that the use case in that issue was a misuse of the API. Perhaps `take` may seem confusing in a vacuum, but not with adequate context

[13:19:18.0829] <littledan>
Why is it "Speaker's summary of key points" rather than "summary of key points" in the notes?

[13:19:25.0606] <Luca Casonato>
Didn't get to it due to time, but there is precedence for a `preventClose`/`preventReturn` option on the web: `preventClose` on `ReadableStream.prototype.pipeTo` and `ReadableStream.prototype.pipeThrough`. I am not necessarily in favour of adding that - but if we did, people may already be familiar with the opt out behaviour.

[13:19:32.0976] <littledan>
> <@littledan:matrix.org> Why is it "Speaker's summary of key points" rather than "summary of key points" in the notes?

I haven't really been seeing speakers fill this in; I think note-takers and the committee could fill it in as well

[13:21:25.0270] <Rob Palmer>
It can be written by anyone so please change the title if you like.  The key is that the presenter ought to be at least approving the summary so that we have some kind of responsibility when distributing the load of writing these summaries.

[13:21:49.0589] <rbuckton>
The confusion is a consequence of choosing to build an API that is dependent on `Iterator` vs the notion of an iterable. As I understood it as the proposal was advancing, basing this on `iterator` meant we were in the realm of "one shot" or "single use" iterators, and that any kind of reusable iteration would rely on arrow functions. IIRC, all of the helper methods are exhaustive, either through repeated calls to `.next` or through the use of `.return`. I don't believe `.take` should be substantially different in this regard. I would much rather have an "opt-out" mechanism to avoid closing an iterator than breaking from the norm here.

[13:24:19.0903] <bakkot>
Definitely agreed that `take` not exhausting is not an option

[13:24:32.0268] <bakkot>
the question was just whether a different name could lead people to correctly intuit the semantics

[13:25:11.0716] <shu>
my intuition is no, unless the name is literally, like `takeAndThenClose`

[13:32:43.0097] <rbuckton>
The alternative, `.limit`, only really makes sense for numeric arguments. It becomes much less clear if you later adopt something like `.limitWhile` (vs. `.takeWhile`). 

[13:33:56.0964] <bakkot>
fun fact, Java has both `limit` and `takeWhile`

[13:34:01.0171] <bakkot>
(and no `take`)

[13:36:27.0529] <apaprocki>
64+32 Abseil: https://github.com/abseil/abseil-cpp/blob/master/absl/time/duration.cc#L15-L50

[13:37:43.0324] <rbuckton>
> <@lucacasonato:matrix.org> Didn't get to it due to time, but there is precedence for a `preventClose`/`preventReturn` option on the web: `preventClose` on `ReadableStream.prototype.pipeTo` and `ReadableStream.prototype.pipeThrough`. I am not necessarily in favour of adding that - but if we did, people may already be familiar with the opt out behaviour.

I know that NodeJS has that concept, i.e.`stream.pipeline(streams, { end: true })` https://nodejs.org/dist/latest-v19.x/docs/api/stream.html#streampipelinestreams-options

[13:38:29.0202] <rbuckton>
and `readable.pipe(dest, { end: true })`. I'm not sure about the DOM APIs offhand

[13:39:17.0292] <Luca Casonato>
for DOM it'd be `readable.pipeTo(writable,  { preventClose: true })`

[13:39:47.0175] <rbuckton>
Yeah, I misread your comment as a question, sorry.

[13:49:37.0810] <shu>
waldemar: the core confusion from me is why do you trust multiple implementations to be correct and interoperable here, if you don't trust the spec to be correct (because it's so tricky to get correct)?

[13:49:51.0898] <shu>
like my goal isn't _just_ a correct document, it's correct interopable implementations

[13:52:12.0744] <waldemar>
shu: It sounds like you're trying to fit the spec around one possible (and pretty problematic) implementation. The spec should be implementation-agnostic about internal details.

[13:53:05.0309] <shu>
in this case my understanding is that the bounds the champions are working to put in place are precisely so that it _is_ implementable with that technique

[13:53:07.0106] <waldemar>
I'm also more interested in the ns vs ¬µs question.

[13:53:15.0568] <shu>
(also why is the 64+32 impl problematic?)

[13:54:26.0790] <littledan>
> <@waldemarh:matrix.org> I'm also more interested in the ns vs ¬µs question.

I know that ptomato framed this as "for future discussion" but I don't see any arguments to switch to microseconds at this point.

[13:54:37.0744] <waldemar>
Elementary math: 64+32 can implement integral counts of subseconds. This is obvious.

[13:55:20.0924] <shu>
well, V8's position is still pro microseconds, but we won't block the proposal on it if implementation complexities and bad performance cliffs are addressed

[13:55:27.0356] <waldemar>
Not obvious: spec that explicitly manages two integers implements integral counts of subseconds. It's easy to get carries and overflows wrong, and you can't tell without examining the entire spec.

[13:55:55.0814] <shu>
i agree with you

[13:56:13.0093] <shu>
what i don't get is, why do you think that trickiness is best left for implementations to all figure out via implication?

[13:56:24.0591] <waldemar>
If you just want ¬µs, then you can store durations in flat 64-bit integers and get a much more efficient implementation with a range of >500,000 years.

[13:56:46.0855] <shu>
indeed! *i* just want us

[13:56:56.0920] <shu>
but v8 has not been able to convince the champion group

[13:57:38.0077] <littledan>
> <@waldemarh:matrix.org> If you just want ¬µs, then you can store durations in flat 64-bit integers and get a much more efficient implementation with a range of >500,000 years.

Do we have any information that this difference in performance will be signficant? there's so much other stuff going on anyway

[13:58:05.0253] <shu>
it's a nuanced conversation that's hard to tease apart

[13:58:26.0047] <shu>
it's not just absolute performance, it's the complexity around supporting optimized paths also

[13:58:29.0671] <shu>
it's philosophical objection

[13:58:51.0766] <waldemar>
Whether a difference in performance is significant depends on who is writing the benchmark ‚ò∫

[13:59:09.0649] <shu>
apaprocki has given examples of other systems that support ns that temporal might want to interface with, which i don't really get at all

[13:59:21.0573] <apaprocki>
ns are common enough nowadays that it seems it would be limiting use cases unnecessarily by limiting to ¬µs, e.g. node embeds v8 and would hopefully like to represent filesystem times without losing precision 

[13:59:25.0919] <shu>
those other systems don't have ns as part of a date-time arithmetic library, they're raw ns counts

[13:59:31.0145] <shu>
they're int64s

[13:59:57.0154] <shu>
what i'm saying is it doesn't follow "ns are common enough -> ns need ot be supported in a fully featured date-time arithmetic library" 

[14:00:08.0297] <shu>
you still can just put the raw ns count into a BigInt

[14:02:34.0445] <shu>
V8 position is:

- ideal: us precision, simple bounded arithmetic + storage follows straightforwardly
- can live with: ns precision, with 64+32 being a tried-and-proven implementation technique from e.g. abseil that we can use
- cannot live with: ns precision, bigint math required

[14:02:47.0123] <apaprocki>
> <@shuyuguo:matrix.org> what i'm saying is it doesn't follow "ns are common enough -> ns need ot be supported in a fully featured date-time arithmetic library"

well, take filesystem times.. certainly those are displayed on screens as formatted date times and not counts

[14:02:59.0803] <shu>
great, it's fine to format them

[14:03:12.0989] <shu>
you need to do full arithmetic to ns precision?

[14:03:18.0717] <shu>
how is that useful?

