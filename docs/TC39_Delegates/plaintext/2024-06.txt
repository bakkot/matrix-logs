2024-06-01
[20:29:37.0615] <justingrant>
What's the right process to get consensus on it from TG1 in Helsinki for normative PRs to ECMA-402? Do I add it as a standalone agenda item?  As part of a standing agenda item for 402 changes?  Something else? PR is https://github.com/tc39/ecma402/pull/877

This is mostly a "web reality" change that aligns the spec with how V8 and JSC already behave by tightening under-specified parts of the spec. It also adds forward-looking guidance to handle future issues that may crop up with time zone identifiers.

Ideally I would have asked this question yesterday before the deadline, but I mistakenly believed that all TG2-approved PRs would magically make it into the agenda. Oops. Anyway, I'll add this as a late submission. 

[21:33:25.0929] <bakkot>
I believe you still have two hours before the deadline

[21:34:24.0705] <bakkot>
this is a three-day meeting so the deadline is Saturday rather than Friday (but Saturday in Helsinki, so earlier than it would for meetings in PT)

[01:33:37.0254] <sffc>
Yeah, it should be added under "Needs Consensus PRs". ECMA-402 PRs previously got added automatically, but that practice stopped about a year ago. Now we just make an announcement in the monthly TG2 call to remind champions to add their stuff to the TG1 agenda if it needs TG1 consensus.

[16:11:03.0610] <Rob Palmer>
We still have around 3 hours of spare capacity. So please don't let the agenda deadline stop you from adding more items. 


2024-06-02
[17:12:02.0955] <rbuckton>
I'd hoped to bring back extractors and void bindings for Stage 2 this plenary, but only recently had the time to address feedback from last meeting and I want to give Waldemar time to review the changes intended to address his concerns. I may try to add them as late agenda items since they both seemed fairly close to reaching stage 2 at the last meeting (or, at least that was my impression). 

[15:37:32.0946] <justingrant>
> Yeah, it should be added under "Needs Consensus PRs". ECMA-402 PRs previously got added automatically, but that practice stopped about a year ago. Now we just make an announcement in the monthly TG2 call to remind champions to add their stuff to the TG1 agenda if it needs TG1 consensus.

Serves me right for not listening carefully!  üëÇÔ∏è  I just [submitted](https://github.com/tc39/agendas/pull/1611) a needs-consensus agenda item for that PR.


2024-06-03
[03:19:44.0481] <littledan>
If we seriously have extra time on the agenda, there are a couple wild open discussion topics which might be fun. Emoji-react something if you're interested in them. (Apologies for not raising this before the agenda deadline.)

[03:19:48.0061] <littledan>
Cancellable promises

[03:20:02.0708] <littledan>
Private name declarations outside of classes

[03:34:55.0090] <rbuckton>
> <@littledan:matrix.org> Cancellable promises

Would it make sense to discuss this on https://github.com/tc39/proposal-cancellation? 

[03:37:07.0446] <littledan>
> <@rbuckton:matrix.org> Would it make sense to discuss this on https://github.com/tc39/proposal-cancellation?

oh thanks that gives a lot of helpful references to review. I have been thinking about this area again in the context of AsyncContext, which gives us more options for propagating the cancel token.

[03:37:44.0109] <littledan>
also AbortSignal.any is a very helpful, core capability in this area, which I don't think was there last time we discussed this

[03:40:19.0801] <littledan>
(I guess it basically enables what your previous proposal's `new CancellationTokenSource(linkedTokens?)` does, roughly)

[03:46:36.0415] <rbuckton>
Unfortunately, since `AbortSignal` is outside the purview of TC39 the best forum for that may be WHATWG. 

[03:47:27.0488] <rbuckton>
Though I've long held that cancellation graphs like that are very valuable

[03:47:50.0220] <littledan>
We'll definitely have to collaborate between standards groups to make this happen, but I think you were right to bring this to TC39, and believe we can make some progress together.

[03:49:56.0372] <littledan>
also if we want integration with async/await (e.g., all awaits are implicitly racing with the cancel token), something would need to happen in TC39

[03:50:01.0638] <rbuckton>
I also agree that AsyncContext would have been the way to traffic a cancellation token in the way Yehuda wanted, so long as there was a way to suppress async context flow when needed

[03:50:30.0594] <littledan>
> <@rbuckton:matrix.org> I also agree that AsyncContext would have been the way to traffic a cancellation token in the way Yehuda wanted, so long as there was a way to suppress async context flow when needed

could you say more about this suppression use case?

[03:50:41.0467] <littledan>
I mean, requirements for it

[03:50:47.0027] <rbuckton>
The only avenue given to us at this point is a host hook. 

[03:51:16.0521] <littledan>
IIRC wanting the cancel token to be implicitly propagated was a goal of Domenic's as well

[03:51:41.0981] <rbuckton>
> <@littledan:matrix.org> could you say more about this suppression use case?

Sometimes you *don't* want to propagate the token.

[03:51:55.0355] <rbuckton>
I have to step away, I'll discuss more shortly.

[03:52:03.0559] <littledan>
> <@rbuckton:matrix.org> The only avenue given to us at this point is a host hook.

I hope we can first think about the problem space and what's needed for developers (as you were trying to do) and then we can go from there to "how do we lay this out across the various specs"

[04:02:15.0431] <rbuckton>
With the token as a parameter, it is up to the caller to determine whether to pass the token to a function. If you had a function that invoked a REST API, you might want to allow it to be cancellable in some cases, but not others. If there is no suppression mechanism, then there is no way for the caller to make this determination. The structure of the Cancellation API (so far as that proposal was concerned) ensured an appropriate separation of concerns so that the correct level of control was available with respect to the caller and the call site. 

[04:10:21.0273] <rbuckton>
> <@littledan:matrix.org> (I guess it basically enables what your previous proposal's `new CancellationTokenSource(linkedTokens?)` does, roughly)

One of the major reasons I wanted a linked cancellation graph was to address memory overhead. If cancellation sources could be intrinsically linked, and could be disposed when cancellation was no longer needed, then all of the token subscriptions could be GC'd (incl. the callbacks and closed-over variables that they held).

[04:11:02.0669] <littledan>
> <@rbuckton:matrix.org> With the token as a parameter, it is up to the caller to determine whether to pass the token to a function. If you had a function that invoked a REST API, you might want to allow it to be cancellable in some cases, but not others. If there is no suppression mechanism, then there is no way for the caller to make this determination. The structure of the Cancellation API (so far as that proposal was concerned) ensured an appropriate separation of concerns so that the correct level of control was available with respect to the caller and the call site.

yes, so if we had an AsyncContext variable for the current cancel token, and then a function you could call to set that variable to a fresh token while running a callback, that would achieve suppression, right?

[04:11:20.0600] <littledan>
> <@rbuckton:matrix.org> One of the major reasons I wanted a linked cancellation graph was to address memory overhead. If cancellation sources could be intrinsically linked, and could be disposed when cancellation was no longer needed, then all of the token subscriptions could be GC'd (incl. the callbacks and closed-over variables that they held).

yes, I agree this is important. Do you see AbortSignal.any as solving that issue too?

[04:11:23.0772] <rbuckton>
A fresh token, or no token.

[04:11:51.0719] <rbuckton>
I would have to think about that. IIRC, the issue with `any` is how ownership is controlled for a subgraph.

[04:12:17.0977] <littledan>
> <@rbuckton:matrix.org> I would have to think about that. IIRC, the issue with `any` is how ownership is controlled for a subgraph.

I think `any` has to be used in a sort of opinionated way to make things work

[04:12:48.0595] <littledan>
and your proposed signature sort of already encapsulates that pattern

[04:13:37.0431] <rbuckton>
Let's say I receive a token and want to call another function with both that and my own token. With `any`, I can close *my* source, but since I have no control over the incoming token, the graph can't be GC'd

[04:14:41.0288] <littledan>
which graph do you mean?

[04:16:43.0747] <rbuckton>
```js
function outer(signal) {
  const myController = new AbortController();
  const combined = AbortController.any([signal, myController.signal]);
  const promise = inner(combined.signal);
  ...
  // we've progressed to a point where cancellation shouldn't occur, 
  // but we can't signal that to `inner`
  myController.dispose(); 
}
```

[04:17:03.0949] <rbuckton>
 * ```js
function outer(signal) {
  const myController = new AbortController();
  const combinedSignal = AbortController.any([signal, myController.signal]);
  const promise = inner(combinedSignal);
  ...
  // we've progressed to a point where cancellation shouldn't occur, 
  // but we can't signal that to `inner`
  myController.dispose(); 
}
```

[04:17:22.0439] <rbuckton>
 * ```js
function outer(signal) {
  const myController = new AbortController();
  const combinedSignal = AbortSignal.any([signal, myController.signal]);
  const promise = inner(combinedSignal);
  ...
  // we've progressed to a point where cancellation shouldn't occur, 
  // but we can't signal that to `inner`
  myController.dispose(); 
}
```

[04:17:58.0738] <rbuckton>
Here, even if we think `inner` should keep going, if `signal` is canceled then `combinedSignal` is cancelled.

[04:18:18.0929] <rbuckton>
If `any` returns a signal, then I can't model this relationship using it.

[04:19:34.0859] <rbuckton>
But if `any` returns a controller, then I can exert this level of control:
```js
function outer(signal) {
  const combinedController = AbortController.any([signal]);
  const promise = inner(combinedController.signal);
  ...
  // we've progressed to a point where cancellation shouldn't occur
  combinedController.dispose(); 
}
```

[04:21:02.0607] <rbuckton>
The `new CancellationTokenSource(linkedTokens?)` API allowed you to express this relationship. If you need control over the subgraph, you hold a reference to the source. If you don't need control over the subgraph, you don't hold a reference to the source and just pass along it's `token`.

[04:21:42.0030] <littledan>
Btw did you point this out in any issue on the AbortSignal.any repo?

[04:22:29.0213] <rbuckton>
I wasn't aware of an `AbortSignal.any` repo, but I've definitely discussed it many years ago in TC39 as part of the cancellation proposal.

[04:23:46.0088] <littledan>
This was the repo, but it's already shipping across browsers https://github.com/shaseley/abort-signal-any

[04:24:18.0854] <littledan>
I had trouble following all the aspects of your previous presentation, and was watching this proposal later, and thought it was good and solved the problems you were raising.

[04:26:05.0403] <rbuckton>
Ah, that's unfortunate.

[04:26:19.0641] <littledan>
I have trouble tracing the leak in the above code. It's that it's less apparent that the controller is dead?

[04:26:44.0432] <rbuckton>
No, the problem is that the controller isn't dead in the first example.

[04:27:01.0057] <littledan>
sure, that it isn't dead, so how big of a leak is that?

[04:27:20.0488] <littledan>
it's only referred to by that local variable, and that can be collected once you leave the scope. or is there anything else?

[04:28:06.0034] <littledan>
(I thought solving this particular GC issue was like 80% of the point of AbortSignal.any in the first place)

[04:28:36.0231] <rbuckton>
It's not a leak, it's bigger than that. If I wanted to be able to control whether `inner` could even be cancelled anymore after a certain point, I would not be able to do so in that approach, so it actually affects capabilities, not just memory.

[04:29:00.0966] <rbuckton>
Also, if there is no `dispose()`/`close()` then you're not addressing the GC concern at all.

[04:29:15.0895] <littledan>
how can you do that with the API you're proposing?

[04:29:43.0061] <rbuckton>
It's quite hard to explain in text without drawing a graph :/

[04:57:44.0560] <rbuckton>
Lets assume for a moment that an `AbortController` has a `dispose()` method. In example one, you have an outer abort controller `A` (and signal `a`) and create an inner abort controller `B` (and signal `b`). Calling `AbortSignal.any([a, b])` produces a signal `ab` with the following semantics:
- Aborting `A` aborts `a` and `ab`
- Aborting `B` aborts `b` and `ab` 
- Disposing `A` disposes `a` but not `ab`, because `ab` could still be aborted by `B`.
- Disposing `B` disposes `b` but not `ab`, because `ab` could still be aborted by `A`.

My algorithm reaches a point of no return where I no longer want `inner` to be cancelable, at which point any subscriptions added by `inner` can be collected. Unfortunately, `AbortSignal.any` does not give me this capability since neither `A` nor `B` dominates the token `ab`.

[05:03:15.0189] <rbuckton>
In the `new CancellationTokenSource(linkedTokens?)` approach, you produce a new source/controller that dominates the cancellation interaction with `inner`. You have the same outer controller `A` (and signal `a`), and you wrap it with an inner controller `B(a)` with signal `b(a)`. Signal `b(a)` has the following semantics:

- Aborting `A` aborts `a` and `b(a)`.
- Aborting `B(a)` aborts `b(a)`.
- Disposing `A` disposes `a` but not `b(a)`, because `b(a)` could still be aborted by `B(a)`. However, the link between `B(a)` and a` can be removed and the subscription can be GC'd
- Disposing `B(a)` disposes `b(a)`, but not `a`. Any subscriptions to `b(a)` can be GC'd

[05:03:37.0928] <rbuckton>
 * In the `new CancellationTokenSource(linkedTokens?)` approach, you produce a new source/controller that dominates the cancellation interaction with `inner`. You have the same outer controller `A` (and signal `a`), and you wrap it with an inner controller `B(a)` (with signal `b(a)`). Signal `b(a)` has the following semantics:

- Aborting `A` aborts `a` and `b(a)`.
- Aborting `B(a)` aborts `b(a)`.
- Disposing `A` disposes `a` but not `b(a)`, because `b(a)` could still be aborted by `B(a)`. However, the link between `B(a)` and a\` can be removed and the subscription can be GC'd
- Disposing `B(a)` disposes `b(a)`, but not `a`. Any subscriptions to `b(a)` can be GC'd

[05:04:32.0980] <rbuckton>
 * In the `new CancellationTokenSource(linkedTokens?)` approach, you produce a new source/controller that dominates the cancellation interaction with `inner`. You have the same outer controller `A` (and signal `a`), and you wrap it with an inner controller `B(a)` (with signal `b(a)`). Signal `b(a)` has the following semantics:

- Aborting `A` aborts `a` and `b(a)`.
- Aborting `B(a)` aborts `b(a)`.
- Disposing `A` disposes `a` but not `b(a)`, because `b(a)` could still be aborted by `B(a)`. However, the link between `B(a)` and `a` can be removed and the subscription can be GC'd
- Disposing `B(a)` disposes `b(a)`, but not `a`. Any subscriptions to `b(a)` can be GC'd

[05:08:11.0585] <rbuckton>
So the difference between the two designs is not just one of memory efficiency, but capability. `b(a)` has a capability that `ab` does not.

[05:09:52.0035] <rbuckton>
 * In the `new CancellationTokenSource(linkedTokens?)` approach, you produce a new source/controller that dominates the cancellation interaction with `inner`. You have the same outer controller `A` (and signal `a`), and you wrap it with an inner controller `B(a)` (with signal `b(a)`). Signal `b(a)` has the following semantics:

- Aborting `A` aborts `a` and `b(a)` so long as a link still remains between `a` and `B(a)`.
- Aborting `B(a)` aborts `b(a)`.
- Disposing `A` disposes `a` but not `b(a)`, because `b(a)` could still be aborted by `B(a)`. However, the link between `B(a)` and `a` can be removed and the subscription can be GC'd
- Disposing `B(a)` disposes `b(a)`, but not `a`. Any subscriptions to `b(a)` can be GC'd

[05:10:16.0142] <rbuckton>
 * In the `new CancellationTokenSource(linkedTokens?)` approach, you produce a new source/controller that dominates the cancellation interaction with `inner`. You have the same outer controller `A` (and signal `a`), and you wrap it with an inner controller `B(a)` (with signal `b(a)`). Signal `b(a)` has the following semantics:

- Aborting `A` aborts `a` and `b(a)` so long as a link still remains between `a` and `B(a)`.
- Aborting `B(a)` aborts `b(a)`.
- Disposing `A` disposes `a` but not `b(a)`, because `b(a)` could still be aborted by `B(a)`. However, the link between `B(a)` and `a` can be removed and the subscription can be GC'd.
- Disposing `B(a)` disposes `b(a)`, but not `a`. Any subscriptions to `b(a)` can be GC'd.

[05:27:58.0561] <rbuckton>
I also discuss a lot of this in https://github.com/tc39/proposal-cancellation/blob/master/stage0/README.md, which was pulled out of the explainer when it advanced to stage 1.

[07:52:43.0090] <littledan>
I don't see anything in these docs about disposal. Is disposal really a necessary feature?

[07:57:00.0132] <littledan>
There's some related discussion about being on AbortController vs AbortSignal in https://github.com/shaseley/abort-signal-any/#exposure-through-abortsignal-vs-abortcontroller

[10:03:50.0407] <rbuckton>
> <@littledan:matrix.org> I don't see anything in these docs about disposal. Is disposal really a necessary feature?

See `source.close()` in that stage 0 explainer. I believe it is important, and the lack of it today is wasteful. 

[10:09:56.0125] <rbuckton (traveling)>
https://github.com/tc39/proposal-cancellation/blob/master/stage0%2FREADME.md#sourceclose

[10:17:21.0266] <rbuckton (traveling)>
If you can close/dispose a source, functions that receive the closed token can use more efficency code paths, and registrations that would have introduced closures can be skipped. A source that is left open instead of canceling/closing results in closures holding references to closed over values far longer than necessary. IIRC, AbortSignal doesn't even clean up user code registrations when aborted since user code registrations are event based

[10:18:55.0548] <rbuckton (traveling)>
* If you can close/dispose a source, functions that receive the closed token can use more efficenct code paths, and registrations that would have introduced closures can be skipped. A source that is left open instead of canceling/closing results in closures holding references to closed over values far longer than necessary. IIRC, AbortSignal doesn't even clean up user code registrations when aborted since user code registrations are event based

[10:28:11.0707] <rbuckton (traveling)>
FYI, the most recent iteration of this API is here: https://esfx.js.org/esfx/api/canceltoken.html?tabs=ts

[10:31:45.0010] <rbuckton (traveling)>
Where `CancelToken.race(cancelables)` is the same as `AbortSignal.any`, but `CancelToken.source(cancelables)` is preferred.

[15:00:22.0661] <littledan>
> <@rbuckton:matrix.org> See `source.close()` in that stage 0 explainer. I believe it is important, and the lack of it today is wasteful. 

Oh, I see. This is new for me; I need to think more to understand the implications.


2024-06-04
[03:51:26.0252] <nicolo-ribaudo>
WHATWG adopted a process inspired by our stage-based one:
https://whatwg.org/stages

[07:08:56.0818] <Chris de Almeida>
neat!  I wonder when they'll add 2.7  üßê


2024-06-05
[18:09:06.0532] <Michael Ficarra>
it actually appears it was mostly copied from us before the recent refactoring of the process document and the addition of 2.7

[18:09:09.0905] <Michael Ficarra>
that's a shame

[22:54:19.0718] <littledan>
Actually it matches our new state: tests are required for WHATWG stage 3, which we caught up with when defining Stage 2.7

[03:25:52.0819] <Michael Ficarra>
No, this much more closely matches our process before the 2.7 split. There's no point at which they commit to the specifics of the solution but have not yet created tests and permitted implementation. That was the primary goal of the split. Requiring tests for our stage 3 was only part of it.

