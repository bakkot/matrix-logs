2024-06-01
[20:29:37.0615] <justingrant>
What's the right process to get consensus on it from TG1 in Helsinki for normative PRs to ECMA-402? Do I add it as a standalone agenda item?  As part of a standing agenda item for 402 changes?  Something else? PR is https://github.com/tc39/ecma402/pull/877

This is mostly a "web reality" change that aligns the spec with how V8 and JSC already behave by tightening under-specified parts of the spec. It also adds forward-looking guidance to handle future issues that may crop up with time zone identifiers.

Ideally I would have asked this question yesterday before the deadline, but I mistakenly believed that all TG2-approved PRs would magically make it into the agenda. Oops. Anyway, I'll add this as a late submission. 

[21:33:25.0929] <bakkot>
I believe you still have two hours before the deadline

[21:34:24.0705] <bakkot>
this is a three-day meeting so the deadline is Saturday rather than Friday (but Saturday in Helsinki, so earlier than it would for meetings in PT)

[01:33:37.0254] <sffc>
Yeah, it should be added under "Needs Consensus PRs". ECMA-402 PRs previously got added automatically, but that practice stopped about a year ago. Now we just make an announcement in the monthly TG2 call to remind champions to add their stuff to the TG1 agenda if it needs TG1 consensus.

[16:11:03.0610] <Rob Palmer>
We still have around 3 hours of spare capacity. So please don't let the agenda deadline stop you from adding more items. 


2024-06-02
[17:12:02.0955] <rbuckton>
I'd hoped to bring back extractors and void bindings for Stage 2 this plenary, but only recently had the time to address feedback from last meeting and I want to give Waldemar time to review the changes intended to address his concerns. I may try to add them as late agenda items since they both seemed fairly close to reaching stage 2 at the last meeting (or, at least that was my impression). 

[15:37:32.0946] <justingrant>
> Yeah, it should be added under "Needs Consensus PRs". ECMA-402 PRs previously got added automatically, but that practice stopped about a year ago. Now we just make an announcement in the monthly TG2 call to remind champions to add their stuff to the TG1 agenda if it needs TG1 consensus.

Serves me right for not listening carefully!  üëÇÔ∏è  I just [submitted](https://github.com/tc39/agendas/pull/1611) a needs-consensus agenda item for that PR.


2024-06-03
[03:19:44.0481] <littledan>
If we seriously have extra time on the agenda, there are a couple wild open discussion topics which might be fun. Emoji-react something if you're interested in them. (Apologies for not raising this before the agenda deadline.)

[03:19:48.0061] <littledan>
Cancellable promises

[03:20:02.0708] <littledan>
Private name declarations outside of classes

[03:34:55.0090] <rbuckton>
> <@littledan:matrix.org> Cancellable promises

Would it make sense to discuss this on https://github.com/tc39/proposal-cancellation? 

[03:37:07.0446] <littledan>
> <@rbuckton:matrix.org> Would it make sense to discuss this on https://github.com/tc39/proposal-cancellation?

oh thanks that gives a lot of helpful references to review. I have been thinking about this area again in the context of AsyncContext, which gives us more options for propagating the cancel token.

[03:37:44.0109] <littledan>
also AbortSignal.any is a very helpful, core capability in this area, which I don't think was there last time we discussed this

[03:40:19.0801] <littledan>
(I guess it basically enables what your previous proposal's `new CancellationTokenSource(linkedTokens?)` does, roughly)

[03:46:36.0415] <rbuckton>
Unfortunately, since `AbortSignal` is outside the purview of TC39 the best forum for that may be WHATWG. 

[03:47:27.0488] <rbuckton>
Though I've long held that cancellation graphs like that are very valuable

[03:47:50.0220] <littledan>
We'll definitely have to collaborate between standards groups to make this happen, but I think you were right to bring this to TC39, and believe we can make some progress together.

[03:49:56.0372] <littledan>
also if we want integration with async/await (e.g., all awaits are implicitly racing with the cancel token), something would need to happen in TC39

[03:50:01.0638] <rbuckton>
I also agree that AsyncContext would have been the way to traffic a cancellation token in the way Yehuda wanted, so long as there was a way to suppress async context flow when needed

[03:50:30.0594] <littledan>
> <@rbuckton:matrix.org> I also agree that AsyncContext would have been the way to traffic a cancellation token in the way Yehuda wanted, so long as there was a way to suppress async context flow when needed

could you say more about this suppression use case?

[03:50:41.0467] <littledan>
I mean, requirements for it

[03:50:47.0027] <rbuckton>
The only avenue given to us at this point is a host hook. 

[03:51:16.0521] <littledan>
IIRC wanting the cancel token to be implicitly propagated was a goal of Domenic's as well

[03:51:41.0981] <rbuckton>
> <@littledan:matrix.org> could you say more about this suppression use case?

Sometimes you *don't* want to propagate the token.

[03:51:55.0355] <rbuckton>
I have to step away, I'll discuss more shortly.

[03:52:03.0559] <littledan>
> <@rbuckton:matrix.org> The only avenue given to us at this point is a host hook.

I hope we can first think about the problem space and what's needed for developers (as you were trying to do) and then we can go from there to "how do we lay this out across the various specs"

