2023-12-01
[16:19:11.0540] <Michael Ficarra>
reviewing the notes is like reliving trauma

[16:19:36.0025] <Michael Ficarra>
this is inhumane

[16:20:40.0978] <ljharb>
 * ok, but reducing human use cases to percentages seems not very kind, either way :-) (i'm still convinced it's many more use cases than that considering most use cases i've run into is "a specific time" instead of "a repeating time where the precise time isn't super important")

[16:38:51.0465] <rkirsling>
is 2.7 meant as `Math.ceil(2.62 * 10) / 10`

[16:49:44.0790] <rkirsling>
oh right `Math.floor(Math.E)`

[16:51:02.0338] <rkirsling>
did no one even _mention_ 2.62 this time though? geez, I'm hurt

[16:51:29.0930] <Chris de Almeida>
`Math.round(Math.E * 10) / 10`

[16:52:30.0497] <Chris de Almeida>
but no, the reality was far less clever

[16:52:37.0143] <Chris de Almeida>
```
USA:  CDA says, split the difference.  2.7.  Perhaps we have an option C.  

CDA:  Yeah.  Would the people who prefer 2.9 be happier with 2.7 rather than 2.5?  And same question reversed: for the 2.5 supporters, is 2.7 better than 2.9? 

WH:  Letâ€™s just do 3 temperature checks.  One temperature check each of the three options.  
```

[16:53:47.0253] <rkirsling>
> <@softwarechris:matrix.org> `Math.round(Math.E * 10) / 10`

er yeah, dropped the 10s for some reason; coffee has not adequately entered my system yet

[16:54:51.0902] <Kris Kowal>
Soâ€¦whoâ€™s going to register `naturallog.es` and start blogging proposal advancement?

[16:55:51.0520] <rkirsling>
I mean, if it's 2.7 then I think rounding is going to have to be the go-to explanation, as opposed to "so some people wanted 2.5 and some people wanted 2.9..."

[16:56:12.0937] <rkirsling>
but yeah I'm just shocked that 2.62 didn't even stick in a single person's mind enough to say it out loud :(

[16:56:21.0328] <Kris Kowal>
Itâ€™s less embarrassing. I say run with it.

[16:56:35.0650] <Chris de Almeida>
...porque no los dos...

[16:58:53.0239] <Chris de Almeida>
> <@kriskowal:matrix.org> Itâ€™s less embarrassing. I say run with it.

I think it's great ackchyually -- the folks who wanted, literally, `e`, kind of got it ðŸ™‚

[17:52:35.0962] <rkirsling>
> <@rkirsling:matrix.org> is 2.7 meant as `Math.ceil(2.62 * 10) / 10`

I guess will still describe it this way because it's _literally a stage for test262_

[18:22:16.0300] <rkirsling>
> <@rkirsling:matrix.org> is 2.7 meant as `Math.ceil(2.62 * 10) / 10`

 * I guess I'll probably still describe it to people this way because it's _literally a stage for test262_

[22:42:11.0734] <eemeli>
Asking seriously: Could we at the next meeting ask for consensus on renaming the stage to 2.62, because that is a _really_ good number. As in, if it had been on the table, I never would've even mentioned e.

[22:44:57.0021] <eemeli>
I mean, 2.7 is fine (it's e with an Îµ of under 0.7%, after all), but unlike the choices we actually talked about 2.62 isn't arbitrary.

[23:53:35.0556] <rkirsling>
I made a point of saying it formally in the last meeting: https://github.com/tc39/notes/blob/df1449925841bc77574e8e127611234670275575/meetings/2023-09/september-28.md?plain=1#L1287

[06:52:48.0412] <Chris de Almeida>
counterpoint: overloading 262 / 2.62 to refer to different things will lead to confusion

[08:20:43.0376] <ljharb>
additional counterpoint: repainting a thoroughly painted bikeshed is fun for some, but soul-crushing for others

[08:59:53.0007] <eemeli>
2.62 is something that I'd only present if it really did feel like it could be accepted pretty much unanimously.

[09:21:09.0917] <ethanarrowood>
Has anyone proposed adding a `String.reverse()` in the past? Basically what `string.split("").reverse().join("")` does? 

I tried searching the proposals repo and can't find it but not sure if maybe its somewhere else

[09:29:14.0420] <ethanarrowood>
(And I guess if it hasn't been proposed previously then I know what my first proposal shall be ðŸš€)

[09:35:25.0651] <bakkot>
ethanarrowood: I think having a static `String.reverse` which is fundamentally different from `String.prototype.reverse` would be bad, but you could explore other designs

[09:35:39.0325] <bakkot>
e.g. a prototype `reverseByCodePoints` method, or a second argument to `reverse`

[09:36:22.0346] <bakkot>
that said reversing strings by code points is almost never an actually useful operation (see: combining characters, flag characters, etc), so I think you'd need a _very_ strong motivation

[09:36:29.0742] <ethanarrowood>
Ahh I meant the later `String.prototype.reverse`

[09:37:06.0331] <bakkot>
Ohh I misread you, and assumed `String.prototype.reverse` doesn't exist

[09:37:11.0522] <bakkot>
ok cool. well, I am glad it doesn't per above

[09:37:27.0195] <bakkot>
 * Ohh I misread you, and assumed `String.prototype.reverse` already existed

[09:37:29.0151] <ethanarrowood>
Yeah I assumed it existed too, but found out it doesn't! 

[09:38:47.0062] <nicolo-ribaudo>
It feels like something that could live on Intl together with Collator

[09:39:12.0488] <bakkot>
Does CLDR define how to reverse a string? I don't think so?

[09:39:30.0255] <bakkot>
I mean I guess you could do grapheme segmentation and then reverse that and then join, but I'm not sure that's ever useful

[09:40:25.0289] <bakkot>
More useful than reversing by codepoints, though, I guess

[09:42:24.0950] <ethanarrowood>
I see now why strings are better in languages like Rust. Takes some of this complexity away

[09:44:51.0095] <Ashley Claymore>
<u>https://es.discourse.group/t/string-reverse-method/620/7</u>

[09:45:06.0097] <Ashley Claymore>
(short convo there)

[09:47:13.0132] <bakkot>
Rust strings enforce utf8, which is certainly nice in some ways

[09:47:33.0296] <ethanarrowood>
Yep 

[09:47:49.0905] <bakkot>
though I would say that most of the complexity relevant to what it means to "reverse" a string is inherent to unicode, and/or to written language

[09:48:30.0934] <ethanarrowood>
Okay cool so this maybe could exist on `String.prototype` it would just need to be a very smart algorithm to support complex inputs. Otherwise, it may have to exist on another construct

[09:54:01.0844] <bakkot>
It's not exactly that it needs to be smart, it's that the programmer needs to specify what they mean by "reverse"

[09:54:16.0675] <bakkot>
like, what is the correct output when you "reverse" `"ðŸ‡ºðŸ‡¸"`?

[09:55:20.0246] <ethanarrowood>
My assumption would be "ðŸ‡ºðŸ‡¸"

[10:02:30.0714] <bakkot>
so you want grapheme clusters, presumably, which means that yeah it would need to live in Intl

[10:04:27.0360] <bakkot>
though also I am not sure why you would ever want this

[11:24:14.0395] <rbuckton>
`String.prototype.reverse({ by })` where `by` can be `"char-code"` or `"code-point"`, and Intl can amend this to add `"grapheme-cluster"` or something. Much like `String.prototype.localeCompare` is extended/replaced by Intl?

[12:38:33.0453] <rbuckton>
 * `String.prototype.reverse({ by })` where `by` can be `"char-code"` or `"code-point"`, and Intl can amend this to add `"grapheme-cluster"` or something? Much like `String.prototype.localeCompare` is extended/replaced by Intl?

[13:29:45.0923] <ethanarrowood>
Love that idea rbuckton and maybe it could also default to a "common case"


2023-12-03
[14:53:59.0827] <ljharb>
i like that a lot

[15:22:23.0774] <bakkot>
I still do not understand why anyone wants this

[15:22:26.0546] <bakkot>
why are you reversing strings


2023-12-04
[06:56:44.0374] <rkirsling>
for coding interviews, silly ;)

[07:37:06.0372] <Anthony Bullard>
Trying to remember: do any browser engines actually support TCO right now?

[08:21:34.0251] <Michael Ficarra>
> <@anthonybullard:matrix.org> Trying to remember: do any browser engines actually support TCO right now?

JSC supports PTCs

[13:08:03.0162] <ljharb>
how come `class Foo extends "bar" {}` is valid syntax given that even with return override it can't ever work?

[13:09:08.0596] <littledan>
How come (3)() is valid syntax even though it can't ever work?

[13:09:24.0161] <ethanarrowood>
> <@bakkot:matrix.org> I still do not understand why anyone wants this

Advent of Code of course /s

[13:09:50.0867] <littledan>
we just don't make all the runtime errors into syntax errors, in general. Tools have been doing a good job of filling the gap.

[14:20:23.0539] <rbuckton>
> <@ljharb:matrix.org> how come `class Foo extends "bar" {}` is valid syntax given that even with return override it can't ever work?

Because it will obviously error at runtime? Adding a syntax error would be inconsistent since `class Foo extends Bar` when `Bar` is `"bar"` *can't* be recognized as a syntax error. If we try to ban all the corner cases, we unnecessarily complicate the specification with rules that end up being inconsistent in practice.

If, however, classes had been designed to be statically evaluated, such that you could only extend an identifier that is statically known to be a class, then it would have made sense to make that a syntax error. 

[14:21:23.0021] <rbuckton>
(and the Heritage Clause grammar would have been far more restrictive) 

[14:21:33.0416] <rbuckton>
* (and the HeritageClause grammar would have been far more restrictive) 


2023-12-05
[17:41:56.0007] <ljharb>
i understand the rationale, but i think itâ€™d be better to catch as many things as possible before runtime even if we canâ€™t catch them all.

[18:19:46.0518] <rbuckton>
I think it just adds arbitrary complexity to the spec and to implementations, not to mention the additional overhead during parse and static semantics evaluation, for almost no gain. 

[18:28:15.0924] <rbuckton>
There's a long tail of things in JS that are syntactically valid, but otherwise incorrect, like `3()`, or `f() = 1`, or `null.x`. Banning those syntactically would significantly increase the complexity of both the existing specification text and new proposals. I'm not saying I'm opposed, just that I don't think the costs are worth the benefits.

[19:44:43.0993] <bakkot>
fully agreed with rbuckton , though pedantically: `f() = 1` is actually syntactically _invalid_ per spec but needs to be legal in engines for web-compat reasons; there is a longstanding open issue about this that no one has gotten around to fixing https://github.com/tc39/ecma262/issues/257

[19:57:24.0664] <rbuckton>
That's exactly the kind of complexity that adding additional syntactic bans would litter throughout the whole spec.

[22:52:56.0729] <Jack Works>
> <@ljharb:matrix.org> how come `class Foo extends "bar" {}` is valid syntax given that even with return override it can't ever work?

can you wrap try catch outside of super()?

[22:54:25.0157] <rbuckton>
Yes.

[22:54:50.0442] <rbuckton>
Though `class Foo extends "bar" {}` will throw on class declaration evaluation, so the constructor will never be called

[22:55:09.0339] <rbuckton>
`Uncaught TypeError: Class extends value "bar" is not a constructor or null`

[23:38:15.0062] <ljharb>
> <@rbuckton:matrix.org> That's exactly the kind of complexity that adding additional syntactic bans would litter throughout the whole spec.

i understand that's the choice we've made, but i'm pretty convinced that complexity would be far better in the spec/parsers than where it currently lives, inside linters and engine runtimes

[05:15:55.0549] <littledan>
I donâ€™t think this change would decrease complexity of engine runtimes. They would need their runtime error path anyway, in addition to a new syntax error check

[10:32:52.0533] <Michael Ficarra>
since most people (even those who care) probably don't follow the process-document repo, here is a link to the PR that implements the refactoring we discussed in plenary: https://github.com/tc39/process-document/pull/38

[11:08:54.0048] <littledan>
Is anyone in touch with any Tencent delegates at TC39? Ecma's having trouble getting in touch with them.

[11:21:13.0199] <TabAtkins>
Yeah, I'm also a long-time anti-RCVer. Approval voting gets my vote for "result qualtiy" vs "complexity to explain".

[15:07:49.0886] <Jack Works>
> <@littledan:matrix.org> Is anyone in touch with any Tencent delegates at TC39? Ecma's having trouble getting in touch with them.

let me try

[15:20:57.0914] <littledan>
Thanks


2023-12-06
[20:26:09.0054] <rkirsling>
> <@ljharb:matrix.org> additional counterpoint: repainting a thoroughly painted bikeshed is fun for some, but soul-crushing for others

didn't see this before, but I'm not concerned with the outcome; I was just bummed that a discussion occurred without anybody remembering it (like, even in the discussion above, nobody was like "oh yeah, that happened and we forgot about it!")

[20:26:46.0024] <rkirsling>
I don't usually make a point of saying things on the record, so it would've been nice to have the idea formally shot down or something

[20:28:06.0383] <rkirsling>
 * it's fairly unusual that I make a point of saying things on the record, so it would've been nice to have the idea formally shot down or something

[20:28:16.0573] <rkirsling>
 * it's fairly unusual that I make a point of saying something on the record, so it would've been nice to have the idea formally shot down or something

[10:52:45.0522] <shu>
catching up reading the minutes. i confirm that i support withdrawal of the operator overloading proposal

[15:56:29.0870] <rbuckton>
Michael Ficarra: FYI, I just submitted a PR for test262 tests for the Decorator Metadata proposal, so hopefully you won't need to bring it up for demotion to 2.7 in the February plenary: https://github.com/tc39/test262/pull/3971

[15:57:52.0438] <rbuckton>
@pzuraq said they wouldn't have the opportunity to look at it before then


2023-12-07
[08:55:28.0594] <ethanarrowood>
Where can I find the notes from 99th Plenary? 

[08:58:23.0311] <ljharb>
before they're published, you'd look at the google docs linked on the reflector issue

[08:58:53.0183] <ethanarrowood>
> <@ljharb:matrix.org> before they're published, you'd look at the google docs linked on the reflector issue

Oh I see the links now for the Notes. I missed that before. Thanks!

[09:12:01.0267] <bakkot>
keep in mind that the google docs links should not be shared; they'll be formally published in the notes repo in a couple weeks once everyone has had a chance to review


2023-12-08
[10:36:17.0701] <Rob Palmer>
The invite for the 100th plenary meeting in San Diego is posted ðŸŽ‰

- https://github.com/tc39/Reflector/issues/516

[10:49:59.0009] <Michael Ficarra>
lol I like how the hotel recommendations are either 1) walking distance from the airport or 2) walking distance to the meeting

[10:50:52.0996] <Michael Ficarra>
I've never considered proximity to the airport when choosing a hotel before

[11:56:27.0116] <shu>
love to take morning walks on the tarmac myself

[13:46:55.0838] <TabAtkins>
> <@michaelficarra:matrix.org> I've never considered proximity to the airport when choosing a hotel before

Not having to worry about traffic when you're leaving is a pretty legit benefit, I've found. But it still usually doesn't override having better convenience during the meeting, for me.


2023-12-11
[14:55:08.0009] <bakkot>
nicolo-ribaudo "Deferred import evaluation: deferred re-exports" still needs its conclusion in the notes

[14:55:14.0543] <bakkot>
also everyone else please fix up your notes

