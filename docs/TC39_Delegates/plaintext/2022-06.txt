2022-06-05
[10:23:15.0358] <Rob Palmer>
As a reminder, tomorrow's plenary meeting is on CDT time, meaning UTC-5.  All meeting details are on the Reflector.

https://github.com/tc39/Reflector/issues/430


2022-06-06
[06:50:36.0470] <Rob Palmer>
Another reminder:  Plenary begins in 70mins!

[07:50:27.0098] <ryzokuken>
10 minutes!

[07:59:06.0430] <Rob Palmer>
1 minute until plenary!

[08:02:05.0490] <Rob Palmer>
We have 20 people attending so far

[08:03:07.0092] <yulia | PTO>
hey folks -- i am double booked this morning for the first hour

[08:03:22.0056] <yulia | PTO>
if there are any questions for mozilla, Dan Minor will be present from mozilla -- and I will join after

[08:03:28.0477] <yulia | PTO>
 * if there are any questions for mozilla, Dan Minor will be present from mozilla -- and I will join after

[08:04:08.0646] <littledan>
I'm going to be absent today and joining tomorrow. The schedule looks fine for me, but I'd like to be present during the second time discussing ShadowRealms. Sorry for this information coming late.

[08:04:21.0731] <littledan>
I'm excited to be back!

[08:58:01.0127] <mpcsh>
do we have a draft schedule hackmd?

[08:59:19.0093] <Rob Palmer>
it's linked in the Reflector post

[08:59:24.0424] <snek>
should i see something right now

[08:59:24.0634] <Rob Palmer>
(don't post here)

[09:09:35.0333] <mpcsh>
aha! had to refresh. thank you

[09:20:47.0532] <bakkot>
shu: can you capture the behavior which got consensus in the notes? not just "the pr" but a short summary, in case we find bugs in the PR or whatever

[09:22:33.0268] <shu>
yes, after this item

[09:23:55.0545] <Michael Ficarra>
I always love Justin's presentations, they are very clear

[09:32:56.0630] <bakkot>
snek: one of the possible solutions is to do the same thing as the `await` fast-path, which actually never gets `.then` at all

[09:33:22.0287] <bakkot>
(it just checks IsPromise and `.constructor`, and then assumes `.then` is the built-in `Promise.p.then`)

[09:34:10.0320] <snek>
did you mean to ping me

[09:35:01.0711] <Jack Works>
> <@bakkot:matrix.org> (it just checks IsPromise and `.constructor`, and then assumes `.then` is the built-in `Promise.p.then`)

can we really do that? I think there definitely someone overwriting `then` on the Promise instance...

[09:35:36.0205] <bakkot>
snek: this was re "my prediction is this will end up with us moving the Get("then") into the tick"

[09:35:40.0208] <snek>
oh

[09:35:47.0303] <bakkot>
Jack Works: that's how `await` works, yeah

[09:35:47.0730] <snek>
that's cuz of the security thing

[09:38:10.0576] <Jack Works>
This a bit surprise me. So does that mean Promise from another Realm will have 1 more tick to resolve?

[09:38:24.0312] <bakkot>
per spec, yeah

[09:47:59.0198] <ljharb>
yulia: https://blog.izs.me/2013/08/designing-apis-for-asynchrony/

[09:56:01.0276] <yulia>
my topic is also around this question that shu is asking

[09:56:58.0939] <ljharb>
to be clear: i intensely support making this change for builtins; justin's case for that was quite compelling and convincing

[09:57:45.0071] <shu>
understood, the subtext is i'm asking a "who's doing the work" question

[09:58:19.0560] <yulia>
> <@shuyuguo:matrix.org> understood, the subtext is i'm asking a "who's doing the work" question

which work specifically?

[09:58:22.0977] <shu>
i'm uncomfortable with an outcome that's like "convince me no userland stuff breaks" == "browsers should ship and see before stage 3 because we have no good procedure to figure out if something breaks"

[09:58:38.0119] <shu>
like i don't actually know how to be convinced, myself, that no userland stuff breaks

[09:58:41.0271] <shu>
without shipping and seeing

[09:58:48.0785] <yulia>
my feeling is similar

[09:59:11.0655] <yulia>
but we also have a preference for alternative 1, which would iiuc, side step the concerns around species

[09:59:29.0381] <yulia>
this would be appropriate as a normative pr imo, but requires a way to test this

[09:59:47.0405] <shu>
yeah i have no real preference for fast pathing natives or not

[10:00:37.0699] <ljharb>
the context of that comment was as a needs-consensus PR; doing it as a proposal means that "stage 3" is the time when we'd discover that

[10:01:26.0162] <shu>
i see, so explicitly you're supportive of stage 3 to find out if userland is broken, not blocking stage 3 before being convinced if userland is not broken

[10:01:50.0380] <ljharb>
correct

[10:02:14.0930] <ljharb>
but i would hope that the proposal can investigate both paths, so that if breakage is discovered, the "special-case builtins" path can be quickly shifted to

[10:02:26.0213] <ljharb>
 * but i would hope that the proposal can investigate both paths, so that if breakage is discovered, the "special-case builtins" path can be quickly shifted to

[10:03:16.0085] <shu>
thanks, sgtm

[10:03:46.0428] <bakkot>
I am imagining the thing mark wants is `IsPromise(p) && GetOwnProperty(p, 'then') == undefined && GetPrototypeOf(p) == Promise.prototype`, basically, which seems like an interesting alternative to the current `constructor` fast-path in `await`

[10:04:03.0530] <bakkot>
none of those checks are observable, which is nice

[10:04:47.0740] <bakkot>
(because the IsPromise check screens out proxies, specifically)

[10:06:44.0892] <yulia>
"Conditional Advancement" was the word

[10:06:52.0214] <ljharb>
Justin Ridgewell: please lmk when the repo's made and i'll update the proposals repo

[10:07:35.0955] <ljharb>
btw starting after lunch, i'm going to be sitting in one of the OpenJS rooms at the JW Marriott in Austin for plenary. whoever's in town is more than welcome to join; DM me for details.

[10:57:46.0403] <Rob Palmer>
Plenary resumes in ***2*** mins

[11:11:20.0432] <littledan>
+1 with a similar level of review/confidence as bakkot expressed

[11:11:28.0592] <littledan>
this change seems generally good but I didn't review all the details

[11:11:54.0618] <waldemar>
rbuckton: I have some comments on the RegExp Atomic Operators but won't be able to participate on Thursday. I reviewed all the proposals after the advancement deadline, and at that time I did not see the semantics. I see you added the semantics later but I was camping off-grid in the desert for the last week so I did not get a chance to review those. (Fun fact our group learned the hard way: covid can spread outdoors!)

[11:13:03.0092] <waldemar>
rbuckton: I'm ok with advancing to stage 1 but would prefer not doing the double-advance to stage 2 until I get a chance to review it in detail.

[11:13:58.0307] <shu>
seems like a scheduling conflict, Rob Palmer ^ possible to reschedule that item before Thurs?

[11:14:20.0509] <rbuckton>
> <@waldemarh:matrix.org> rbuckton: I'm ok with advancing to stage 1 but would prefer not doing the double-advance to stage 2 until I get a chance to review it in detail.

That's fine. I may be able to bring it back in July assuming I'm able to attend (I'll be in the middle of a cross-country move so may not be present at the next meeting).

[11:17:06.0203] <rbuckton>
Also, I wrote up the spec text while reviewing the proposal internally with some folks who worked on the implementation in .NET. Fully understand on holding any possible double-advancement given the spec text was added after the deadline.

[11:17:19.0726] <rbuckton>
 * Also, I wrote up the spec text while reviewing the proposal internally with some folks who worked on the implementation in .NET. Fully understand on holding any possible double-advancement given the spec text was added after the deadline.

[11:17:57.0113] <ryzokuken>
> <@waldemarh:matrix.org> rbuckton: I have some comments on the RegExp Atomic Operators but won't be able to participate on Thursday. I reviewed all the proposals after the advancement deadline, and at that time I did not see the semantics. I see you added the semantics later but I was camping off-grid in the desert for the last week so I did not get a chance to review those. (Fun fact our group learned the hard way: covid can spread outdoors!)

would it help if we moved it to another day?

[11:18:18.0324] <waldemar>
I'm available Mon-Thu this week. I have a conflict on Thursday.

[11:18:37.0906] <waldemar>
I'm availabler Mon-Wed this week. I have a conflict on Thursday.

[11:20:57.0443] <snek>
nobody is running sugarjs on tc53 devices right?

[11:21:52.0091] <littledan>
I think we can say here, let it be noted that there is a standing disagreement between Shu and Mark on this question of whether frozen environments should be considered

[11:21:52.0120] <ljharb>
not an old version, surely

[11:22:23.0100] <snek>
what were the bad names that sugarjs uses

[11:24:21.0155] <Mathieu Hofman>
I did not hear a disagreement. I heard the opposite: both agree frozen built-ins environments do exists and should be considered the same as other out in the wild code.

[11:25:01.0826] <shu>
no Mathieu Hofman there's disagreement. i agreed that frozen environments are *a* breakage to consider. i can generalize that disagreement more: the frozen environment breakage is a "second order" breakage to me in that it breaks the users of a library that mutates the environment to be different than the specced standard of 262. i don't want to weigh that very strongly

[11:25:24.0217] <shu>
i certainly do not consider it the same as other out in the wild code

[11:25:29.0523] <shu>
you're not saying your library breaks

[11:25:32.0304] <shu>
you're saying users of your library breaks

[11:27:16.0848] <Mathieu Hofman>
I wasn't asserting there'd be a breakage in user code running in those environments. I was just saying it may be one type of breakage we might witness in the wild

[11:27:47.0839] <littledan>
I think we should note in the minutes that this disagreement continues to exist (for clarity).

[11:28:09.0675] <shu>
but IIUC the only way you can witness that breakage is if _another_ library mutates something that's by-default writable to be not writable

[11:28:12.0753] <Mathieu Hofman>
That it's a risk with a name which may be used as a named prop

[11:29:35.0220] <littledan>
This discussion seems to show that the disagreement continues to exist, as it has for as long as I've been in TC39

[11:29:44.0242] <shu>
+1 to dan's assessment

[11:30:47.0969] <Mathieu Hofman>
(still hopeful for a solution to the override mistake which would make these moot)

[11:31:08.0053] <littledan>
well, Caitlin Potter prototyped it and found web compat issues...

[11:31:18.0729] <littledan>
it's not clear to me what the solution should be, but I hope we can find one

[11:32:42.0358] <Mathieu Hofman>
What was prototyped exactly? I have an approach based on an explicit option bag to `freeze` which would set a slot on the frozen object, which would tweak the `OrdinarySet` step based on the presence of that slot.

[11:33:46.0827] <Mathieu Hofman>
I would love to see if there is prior experiments that would invalidate this idea

[11:34:37.0145] <littledan>
oh yeah what was prototyped was a more direct change of the Set behavior, we didn't try that tweak

[11:35:00.0811] <Richard Gibson>
bakkot: regarding "Where do you get your default time zone?", TL;DR is that we're covered.

More details:

The requirements are described in GetNamedTimeZoneEpochNanoseconds (which returns nanoseconds since epoch for a specific time zone name and local time) similar to the current text in LocalTZA: https://arai-a.github.io/ecma262-compare/?pr=2781#sec-getnamedtimezoneepochnanoseconds (emphasis mine)
> When the input represents a local time occurring more than once because of a negative time zone transition (e.g. when daylight saving time ends or the time zone offset is decreased due to a time zone rule change), the returned List will have more than one element and will be **sorted by ascending numerical value**. When the input represents a local time skipped because of a positive time zone transition (e.g. when daylight saving time begins or the time zone offset is increased due to a time zone rule change), the returned List will be empty. Otherwise, the returned List will have one element.

And specified more precisely in UTC (which interprets its input as a number representing local time and returns milliseconds since epoch): https://arai-a.github.io/ecma262-compare/?pr=2781#sec-utc-t (emphasis mine)
> If possibleInstants is not empty, then… Let disambiguatedInstant be possibleInstants[0]. _[i.e., the chronologically first matching local time]_
> Else [_a local time skipped at a positive time zone transition_], … Let possibleInstants be GetNamedTimeZoneEpochNanoseconds [_corresponding with_] tBefore is the largest integral Number < t for which possibleInstants is not empty (i.e., tBefore represents the last local time before the transition) … Let disambiguatedInstant be the last element of possibleInstants
> …
> t is **interpreted using the time zone offset before the transition**

[11:35:32.0844] <Richard Gibson>
 * bakkot: regarding "Where do you get your default time zone?", TL;DR is that we're covered.

More details:

The requirements are described in GetNamedTimeZoneEpochNanoseconds (which returns a List of nanoseconds since epoch for a specific time zone name and local time) similar to the current text in LocalTZA: https://arai-a.github.io/ecma262-compare/?pr=2781#sec-getnamedtimezoneepochnanoseconds (emphasis mine)

> When the input represents a local time occurring more than once because of a negative time zone transition (e.g. when daylight saving time ends or the time zone offset is decreased due to a time zone rule change), the returned List will have more than one element and will be **sorted by ascending numerical value**. When the input represents a local time skipped because of a positive time zone transition (e.g. when daylight saving time begins or the time zone offset is increased due to a time zone rule change), the returned List will be empty. Otherwise, the returned List will have one element.

And specified more precisely in UTC (which interprets its input as a number representing local time and returns milliseconds since epoch): https://arai-a.github.io/ecma262-compare/?pr=2781#sec-utc-t (emphasis mine)

> If possibleInstants is not empty, then… Let disambiguatedInstant be possibleInstants\[0\]. _\[i.e., the chronologically first matching local time\]_
> Else \[_a local time skipped at a positive time zone transition_\], … Let possibleInstants be GetNamedTimeZoneEpochNanoseconds \[_corresponding with_\] tBefore is the largest integral Number \< t for which possibleInstants is not empty (i.e., tBefore represents the last local time before the transition) … Let disambiguatedInstant be the last element of possibleInstants
> …
> t is **interpreted using the time zone offset before the transition**

[11:35:58.0480] <littledan>
if we do something with freeze, I guess we'd need to figure out the MOP implications. Maybe we could discuss this in an SES call?

[11:36:00.0018] <Richard Gibson>
 * bakkot: regarding "Where do you get your default time zone?", TL;DR is that we're covered.

More details:

The requirements are described in GetNamedTimeZoneEpochNanoseconds (which returns a List of nanoseconds since epoch for a specific time zone name and local time) similar to the current text in LocalTZA: https://arai-a.github.io/ecma262-compare/?pr=2781#sec-getnamedtimezoneepochnanoseconds (emphasis mine)

> When the input represents a local time occurring more than once because of a negative time zone transition (e.g. when daylight saving time ends or the time zone offset is decreased due to a time zone rule change), the returned List will have more than one element and will be **sorted by ascending numerical value**. When the input represents a local time skipped because of a positive time zone transition (e.g. when daylight saving time begins or the time zone offset is increased due to a time zone rule change), the returned List will be empty. Otherwise, the returned List will have one element.

And specified more precisely in UTC (which interprets its input as a number representing local time and returns a single milliseconds since epoch): https://arai-a.github.io/ecma262-compare/?pr=2781#sec-utc-t (emphasis mine)

> If possibleInstants is not empty, then… Let disambiguatedInstant be possibleInstants\[0\]. _\[i.e., the chronologically first matching local time\]_
> Else \[_a local time skipped at a positive time zone transition_\], … Let possibleInstants be GetNamedTimeZoneEpochNanoseconds \[_corresponding with_\] tBefore is the largest integral Number \< t for which possibleInstants is not empty (i.e., tBefore represents the last local time before the transition) … Let disambiguatedInstant be the last element of possibleInstants
> …
> t is **interpreted using the time zone offset before the transition**

[11:36:23.0098] <littledan>
or maybe you mean for preventExtensions in general?

[11:36:24.0379] <Mathieu Hofman>
> <@littledan:matrix.org> if we do something with freeze, I guess we'd need to figure out the MOP implications. Maybe we could discuss this in an SES call?

We did a few weeks ago

[11:36:32.0434] <littledan>
oh oops! I'll try to catch up on notes

[11:37:43.0724] <snek>
today would anything break if we got rid of IsHTMLDDA

[11:38:02.0161] <bakkot>
yes

[11:38:44.0127] <ljharb>
i don't hear any audio at all

[11:38:47.0435] <ljharb>
is it just me?

[11:39:12.0434] <yulia>
yes, refresh

[11:39:13.0363] <yulia>
?

[11:39:15.0358] <ljharb>
k

[11:40:19.0612] <bakkot>
man sugar used all the cool names

[11:40:38.0203] <bakkot>
though I guess `groupBy` was uniquely bad because it made use of it during startup

[11:40:44.0008] <bakkot>
or something like that

[11:40:51.0668] <snek>
`groupedBy`?

[11:41:06.0508] <ljharb>
`gimmeGroups`

[11:41:08.0807] <bakkot>
we just decided to go with `group` I think

[11:41:14.0191] <snek>
so i hear

[11:41:16.0353] <HE Shi-Jun>
Have a question: is findLast/findLastIndex in ES2022 or ES2023?

[11:41:27.0348] <snek>
groupedBy would probably make more sense though if we consider the existence of r&t

[11:41:28.0686] <bakkot>
2023

[11:41:30.0675] <bakkot>
 * 2023

[11:41:34.0319] <bakkot>
2022 is already cut

[11:42:11.0282] <HE Shi-Jun>
Ok. So we need to fix it in tc39/proposals page?

[11:42:28.0291] <ljharb>
yep, thanks, just fixed

[11:48:10.0884] <rbuckton>
> <@usharma:igalia.com> would it help if we moved it to another day?

Is RegExp Atomic Operators going to stay in its current timeslot on Thursday or is it going to be moved up to accommodate Waldemar's schedule?

[11:56:32.0596] <ryzokuken>
rbuckton: working on it now

[12:01:52.0691] <snek>
my opinion continues to be that we should just remove the boundary from shadowrealms

[12:02:49.0283] <ryzokuken>
doesn't that just make them equivalent to contexts?

[12:07:32.0263] <littledan>
I have to leave due to a conflict; here are my queue items for reference:

Copying the .message for non-callable objects seems like a useful and harmless convenience
Note that the web makes errors opaque by design on the cross-origin throw case

[12:11:53.0670] <littledan>
(the web's cross-origin throw case is a little different, having more to do with source location than the origin of the realm)

[12:24:28.0870] <ljharb>
i mean, only a hanfdul of organizations implement ecmascript and it has a pretty big impact

[12:25:20.0464] <ryzokuken>
waldemar: I moved rbuckton's items around, please check out the schedule now

[12:25:38.0142] <ryzokuken>
also, could you please PR your schedule constraints?

[12:26:54.0066] <rbuckton>
ryzokuken: Is there now nothing scheduled tomorrow morning? The pre-lunch agenda is empty.

[12:27:16.0929] <ryzokuken>
I'll move items around, the schedule is in flux

[12:28:09.0119] <ryzokuken>
> <@usharma:igalia.com> also, could you please PR your schedule constraints?

it helps immensely to do that ahead of time, btw

[12:35:46.0565] <Michael Ficarra>
I forgot you could refer to a named capture by its index

[12:36:32.0826] <Michael Ficarra>
I hope most people wouldn't ever intentionally use that capability

[12:36:53.0909] <snek>
i doubt that case happens very often

[12:37:06.0398] <littledan>
Michael Ficarra: yeah this was a sort of explicit design choice. IIRC it seemed like most other languages allowed that, and I didn't see a reason to diverge/skip those ones

[12:37:50.0880] <littledan>
I guess I could've been more clear in explaining that to the committee

[12:37:53.0957] <shu>
so wait what's the proposed behavior for the number references?

[12:38:00.0997] <shu>
they have globally unique numbers but aliased names?

[12:38:03.0391] <Michael Ficarra>
littledan: maybe it could be useful for compilers? but I'd hope a human would realise it's not the best way to express themselves

[12:38:10.0573] <littledan>
> <@shuyuguo:matrix.org> they have globally unique numbers but aliased names?

this is what I would expect

[12:38:16.0879] <shu>
yeah that seems fine to me

[12:38:30.0047] <shu>
global-to-the-RE

[12:38:40.0453] <shu>
would be funnier if it was actually globally unique

[12:38:55.0652] <littledan>
information leak!!!

[12:40:04.0513] <snek>
context? in my regex?

[12:43:31.0126] <snek>
conditional stage 2

[12:56:08.0758] <HE Shi-Jun>
Could the proposed decorator static initializers allow class member decorators change the shape of the class?

[12:58:54.0252] <bakkot>
> <@shuyuguo:matrix.org> they have globally unique numbers but aliased names?

yup, numbers continue to be counted as before

[12:59:20.0049] <ljharb>
if it helps, there's an eslint rule that pushes people to only use names and never numbers; it seems likely people won't be using both

[12:59:35.0849] <shu>
HE Shi-Jun: it shouldn't

[12:59:40.0459] <shu>
if it does that goes against the static redesign

[13:00:20.0373] <snek>
> <@ljharb:matrix.org> if it helps, there's an eslint rule that pushes people to only use names and never numbers; it seems likely people won't be using both

i like to mix it up randomly to keep my teammates on their toes

[13:05:28.0007] <rbuckton>
In general I agree, you usually don't see a mix of both. There are a few cases where this happens more often in other engines, such as when you can use a relative backreference (i.e., `/(?<group>foo(bar|baz)quxx\k'-1'/`) where a name wouldn't be relevant to the resulting captures.

[13:06:02.0739] <rbuckton>
> <@ljharb:matrix.org> if it helps, there's an eslint rule that pushes people to only use names and never numbers; it seems likely people won't be using both

 * In general I agree, you usually don't see a mix of both. There are a few cases where this happens more often in other engines, such as when you can use a relative backreference (i.e., `/(?<group>foo(bar|baz)quxx\k'-1'/`) where a name wouldn't be relevant to the resulting captures.

[13:06:12.0015] <HE Shi-Jun>
> <@shuyuguo:matrix.org> HE Shi-Jun: it shouldn't

It seems if instance decorator could add class initializer, it could ... Maybe I misunderstand the proposal?

[13:08:09.0457] <rbuckton>
The existing `addInitializer` for a class decorator doesn't *prevent* changing the shape after the class is done, but there's far less reason to do so given the most common cases can be handled with something like `accessor`.

[13:08:54.0148] <shu>
HE Shi-Jun: ah right good point, i guess that goes back to the point i made that currently we have the statically analyzable guarantee that "no class decorators means no class initializers", which would be broken here

[13:09:06.0349] <shu>
so not really a fan thus far

[13:10:04.0182] <rbuckton>
Just as instance initializers don't prevent you from attaching a random `this.foo = 1`, and class fields don't prevent you from doing 
```js
function fn() {
  this.foo = 1;
}
class C { x = fn.call(this); }
```



