2022-06-05
[10:23:15.0358] <Rob Palmer>
As a reminder, tomorrow's plenary meeting is on CDT time, meaning UTC-5.  All meeting details are on the Reflector.

https://github.com/tc39/Reflector/issues/430


2022-06-06
[06:50:36.0470] <Rob Palmer>
Another reminder:  Plenary begins in 70mins!

[07:50:27.0098] <ryzokuken>
10 minutes!

[07:59:06.0430] <Rob Palmer>
1 minute until plenary!

[08:02:05.0490] <Rob Palmer>
We have 20 people attending so far

[08:03:07.0092] <yulia | PTO>
hey folks -- i am double booked this morning for the first hour

[08:03:22.0056] <yulia | PTO>
if there are any questions for mozilla, Dan Minor will be present from mozilla -- and I will join after

[08:03:28.0477] <yulia | PTO>
 * if there are any questions for mozilla, Dan Minor will be present from mozilla -- and I will join after

[08:04:08.0646] <littledan>
I'm going to be absent today and joining tomorrow. The schedule looks fine for me, but I'd like to be present during the second time discussing ShadowRealms. Sorry for this information coming late.

[08:04:21.0731] <littledan>
I'm excited to be back!

[08:58:01.0127] <mpcsh>
do we have a draft schedule hackmd?

[08:59:19.0093] <Rob Palmer>
it's linked in the Reflector post

[08:59:24.0424] <snek>
should i see something right now

[08:59:24.0634] <Rob Palmer>
(don't post here)

[09:09:35.0333] <mpcsh>
aha! had to refresh. thank you

[09:20:47.0532] <bakkot>
shu: can you capture the behavior which got consensus in the notes? not just "the pr" but a short summary, in case we find bugs in the PR or whatever

[09:22:33.0268] <shu>
yes, after this item

[09:23:55.0545] <Michael Ficarra>
I always love Justin's presentations, they are very clear

[09:32:56.0630] <bakkot>
snek: one of the possible solutions is to do the same thing as the `await` fast-path, which actually never gets `.then` at all

[09:33:22.0287] <bakkot>
(it just checks IsPromise and `.constructor`, and then assumes `.then` is the built-in `Promise.p.then`)

[09:34:10.0320] <snek>
did you mean to ping me

[09:35:01.0711] <Jack Works>
> <@bakkot:matrix.org> (it just checks IsPromise and `.constructor`, and then assumes `.then` is the built-in `Promise.p.then`)

can we really do that? I think there definitely someone overwriting `then` on the Promise instance...

[09:35:36.0205] <bakkot>
snek: this was re "my prediction is this will end up with us moving the Get("then") into the tick"

[09:35:40.0208] <snek>
oh

[09:35:47.0303] <bakkot>
Jack Works: that's how `await` works, yeah

[09:35:47.0730] <snek>
that's cuz of the security thing

[09:38:10.0576] <Jack Works>
This a bit surprise me. So does that mean Promise from another Realm will have 1 more tick to resolve?

[09:38:24.0312] <bakkot>
per spec, yeah

[09:47:59.0198] <ljharb>
yulia: https://blog.izs.me/2013/08/designing-apis-for-asynchrony/

[09:56:01.0276] <yulia>
my topic is also around this question that shu is asking

[09:56:58.0939] <ljharb>
to be clear: i intensely support making this change for builtins; justin's case for that was quite compelling and convincing

[09:57:45.0071] <shu>
understood, the subtext is i'm asking a "who's doing the work" question

[09:58:19.0560] <yulia>
> <@shuyuguo:matrix.org> understood, the subtext is i'm asking a "who's doing the work" question

which work specifically?

[09:58:22.0977] <shu>
i'm uncomfortable with an outcome that's like "convince me no userland stuff breaks" == "browsers should ship and see before stage 3 because we have no good procedure to figure out if something breaks"

[09:58:38.0119] <shu>
like i don't actually know how to be convinced, myself, that no userland stuff breaks

[09:58:41.0271] <shu>
without shipping and seeing

[09:58:48.0785] <yulia>
my feeling is similar

[09:59:11.0655] <yulia>
but we also have a preference for alternative 1, which would iiuc, side step the concerns around species

[09:59:29.0381] <yulia>
this would be appropriate as a normative pr imo, but requires a way to test this

[09:59:47.0405] <shu>
yeah i have no real preference for fast pathing natives or not

[10:00:37.0699] <ljharb>
the context of that comment was as a needs-consensus PR; doing it as a proposal means that "stage 3" is the time when we'd discover that

[10:01:26.0162] <shu>
i see, so explicitly you're supportive of stage 3 to find out if userland is broken, not blocking stage 3 before being convinced if userland is not broken

[10:01:50.0380] <ljharb>
correct

[10:02:14.0930] <ljharb>
but i would hope that the proposal can investigate both paths, so that if breakage is discovered, the "special-case builtins" path can be quickly shifted to

[10:02:26.0213] <ljharb>
 * but i would hope that the proposal can investigate both paths, so that if breakage is discovered, the "special-case builtins" path can be quickly shifted to

[10:03:16.0085] <shu>
thanks, sgtm

[10:03:46.0428] <bakkot>
I am imagining the thing mark wants is `IsPromise(p) && GetOwnProperty(p, 'then') == undefined && GetPrototypeOf(p) == Promise.prototype`, basically, which seems like an interesting alternative to the current `constructor` fast-path in `await`

[10:04:03.0530] <bakkot>
none of those checks are observable, which is nice

[10:04:47.0740] <bakkot>
(because the IsPromise check screens out proxies, specifically)

[10:06:44.0892] <yulia>
"Conditional Advancement" was the word

[10:06:52.0214] <ljharb>
Justin Ridgewell: please lmk when the repo's made and i'll update the proposals repo

[10:07:35.0955] <ljharb>
btw starting after lunch, i'm going to be sitting in one of the OpenJS rooms at the JW Marriott in Austin for plenary. whoever's in town is more than welcome to join; DM me for details.

[10:57:46.0403] <Rob Palmer>
Plenary resumes in ***2*** mins

[11:11:20.0432] <littledan>
+1 with a similar level of review/confidence as bakkot expressed

[11:11:28.0592] <littledan>
this change seems generally good but I didn't review all the details

[11:11:54.0618] <waldemar>
rbuckton: I have some comments on the RegExp Atomic Operators but won't be able to participate on Thursday. I reviewed all the proposals after the advancement deadline, and at that time I did not see the semantics. I see you added the semantics later but I was camping off-grid in the desert for the last week so I did not get a chance to review those. (Fun fact our group learned the hard way: covid can spread outdoors!)

[11:13:03.0092] <waldemar>
rbuckton: I'm ok with advancing to stage 1 but would prefer not doing the double-advance to stage 2 until I get a chance to review it in detail.

[11:13:58.0307] <shu>
seems like a scheduling conflict, Rob Palmer ^ possible to reschedule that item before Thurs?

[11:14:20.0509] <rbuckton>
> <@waldemarh:matrix.org> rbuckton: I'm ok with advancing to stage 1 but would prefer not doing the double-advance to stage 2 until I get a chance to review it in detail.

That's fine. I may be able to bring it back in July assuming I'm able to attend (I'll be in the middle of a cross-country move so may not be present at the next meeting).

[11:17:06.0203] <rbuckton>
Also, I wrote up the spec text while reviewing the proposal internally with some folks who worked on the implementation in .NET. Fully understand on holding any possible double-advancement given the spec text was added after the deadline.

[11:17:19.0726] <rbuckton>
 * Also, I wrote up the spec text while reviewing the proposal internally with some folks who worked on the implementation in .NET. Fully understand on holding any possible double-advancement given the spec text was added after the deadline.

[11:17:57.0113] <ryzokuken>
> <@waldemarh:matrix.org> rbuckton: I have some comments on the RegExp Atomic Operators but won't be able to participate on Thursday. I reviewed all the proposals after the advancement deadline, and at that time I did not see the semantics. I see you added the semantics later but I was camping off-grid in the desert for the last week so I did not get a chance to review those. (Fun fact our group learned the hard way: covid can spread outdoors!)

would it help if we moved it to another day?

[11:18:18.0324] <waldemar>
I'm available Mon-Thu this week. I have a conflict on Thursday.

[11:18:37.0906] <waldemar>
I'm availabler Mon-Wed this week. I have a conflict on Thursday.

[11:20:57.0443] <snek>
nobody is running sugarjs on tc53 devices right?

[11:21:52.0091] <littledan>
I think we can say here, let it be noted that there is a standing disagreement between Shu and Mark on this question of whether frozen environments should be considered

[11:21:52.0120] <ljharb>
not an old version, surely

[11:22:23.0100] <snek>
what were the bad names that sugarjs uses

[11:24:21.0155] <Mathieu Hofman>
I did not hear a disagreement. I heard the opposite: both agree frozen built-ins environments do exists and should be considered the same as other out in the wild code.

[11:25:01.0826] <shu>
no Mathieu Hofman there's disagreement. i agreed that frozen environments are *a* breakage to consider. i can generalize that disagreement more: the frozen environment breakage is a "second order" breakage to me in that it breaks the users of a library that mutates the environment to be different than the specced standard of 262. i don't want to weigh that very strongly

[11:25:24.0217] <shu>
i certainly do not consider it the same as other out in the wild code

[11:25:29.0523] <shu>
you're not saying your library breaks

[11:25:32.0304] <shu>
you're saying users of your library breaks

[11:27:16.0848] <Mathieu Hofman>
I wasn't asserting there'd be a breakage in user code running in those environments. I was just saying it may be one type of breakage we might witness in the wild

[11:27:47.0839] <littledan>
I think we should note in the minutes that this disagreement continues to exist (for clarity).

[11:28:09.0675] <shu>
but IIUC the only way you can witness that breakage is if _another_ library mutates something that's by-default writable to be not writable

[11:28:12.0753] <Mathieu Hofman>
That it's a risk with a name which may be used as a named prop

[11:29:35.0220] <littledan>
This discussion seems to show that the disagreement continues to exist, as it has for as long as I've been in TC39

[11:29:44.0242] <shu>
+1 to dan's assessment

