2025-02-03
[10:33:34.0590] <nicolo-ribaudo>
Reading through https://news.ycombinator.com/item?id=42876840, it seems like the most wanted proposals are Records&Tuples and pattern matching

[10:59:20.0837] <littledan>
Let's do both of them!

[15:53:29.0839] <Rob Palmer>
It looks like we will get a **Community Event in Seattle** on the evening of **Thursday 20th February.**  Please can folk who are attending volunteer some talks!

- [**Call For Speakers**](https://github.com/tc39/Reflector/issues/550)

SeattleJS are asking us to provide all the content for the evening, so I hope we can deliver lots of exciting talks.


2025-02-05
[17:17:59.0577] <Mathieu Hofman>
Does anyone know why we decided not to look for private fields on the prototype chain of any object? This somewhat came up in 2 different proposal discussions lately: https://github.com/tc39/proposal-class-access-expressions/issues/26 and https://github.com/ljharb/proposal-error-stack-accessor/issues/3 (the latter is for a internal slot but same idea)

[17:21:16.0610] <Mathieu Hofman>
It would likely break a ton of  "brand checks" use cases, but really there isn't an easy way to even create a helper to search the prototype chain as one cannot get a "ref" for the private field.

[17:22:14.0304] <Mathieu Hofman>
* It would likely break a ton of  "brand checks" use cases, but the problem is that there isn't any way to even create a helper to search the prototype chain as one cannot get a "ref" for the private field.

[00:11:46.0608] <Ashley Claymore>
the helper would need to take a callback: `(o) => #p in o`

[06:26:14.0849] <littledan>
It's hard/impossible to truly preserve privacy while also working with prototype chains, especially if you want to stick strictly to object-like semantics and not invent on a new thing. Also, the SES crowd insisted on WeakMap analogy semantics in particular, which has no prototype chain walk.

[08:47:27.0208] <ljharb>
also if it used the prototype chain then they wouldnâ€™t be private fields, theyâ€™d be public ones, because anything can extend anything else at any time

[08:47:38.0688] <ljharb>
* also if it used the prototype chain then they wouldnâ€™t be _private_ fields, theyâ€™d be public ones, because anything can extend anything else at any time

[08:54:50.0475] <littledan>
well, the space of possibilities is large, but yeah we had trouble finding a mechanism that would preserve privacy, have inheritance *and* have a number of other properties that people were interested in

[12:39:40.0329] <Ashley Claymore>
> <@ljharb:matrix.org> also if it used the prototype chain then they wouldnâ€™t be _private_ fields, theyâ€™d be public ones, because anything can extend anything else at any time

And wouldn't have been able to minify them with so much confidence. Local lexical lookup is great for AOT transforms 


2025-02-06
[19:00:39.0895] <Ashley Claymore>

Realising this wasn't about matching other private fields with the same, so the name of the field would all still be local and still minifiable.
it's more that the lookup would have fewer guarantees. Because proxies, walking the proto chain could have side effects and give different answers.
so couldn't assume AOT things like `#p in v === #p in v`

[02:02:06.0779] <Mathieu Hofman>
Yeah the fact that looking up a private field cannot trigger any user code is a nice property. Combined with the fact you wouldn't know which object the value came from is probably sufficient reason for this to have been the right choice.


2025-02-07
[07:49:25.0188] <nicolo-ribaudo>
This is super early, however â€” a few of us will be taking the train to go to the A CoruÃ±a meeting in May (mostly from NL and UK). If anybody traveling from somewhere in western Europe wants to join us please write me a message by the end of February :)

[09:55:25.0724] <Rob Palmer>
- **Reminder:**  The Feb 2025 Plenary deadline for Stage Advancement is in 24 hours!


2025-02-11
[17:14:45.0064] <shu>
do i read RegExp.escape correctly that it doesn't care about lone surrogates? it'll just escape them?

[17:28:11.0708] <bakkot>
yeah

[17:28:43.0991] <bakkot>
I don't know if that means "doesn't care" since it does explicitly handle them

[17:29:09.0286] <bakkot>
but it handles them by escaping them

[19:27:13.0806] <shu>
fair. by "doesn't care" i mean it doesn't error out if input is malformed

[19:27:24.0205] <shu>
malformed by having lone surrogates

[21:25:13.0507] <ljharb>
to me yesthat sounds right 

[21:25:18.0614] <ljharb>
* that sounds right to me yes


2025-02-12
[10:06:37.0764] <TabAtkins>
Given that lone surrogates are valid values in JS strings, that seems like the right behavior, rather than erroring.

[13:51:30.0616] <Mikhail Barash>
Reminder: The [TG5 Workshop](https://github.com/tc39/tg5/blob/main/workshops/2025/106.md) will be held on Friday 21st of February, the day after the plenary meeting. It'll be hosted by F5 (same venue as the plenary).
Among other items on the agenda, we'll have a visitor from UCSD to talk about [the MessageFormat study](https://github.com/tc39/tg5/issues/3) and identify other proposals that might benefit from user studies.
Registration link: https://forms.gle/jBn3XguosNwJsScy6


_What is TG5?_

TG5 is a task group of TC39 that:
- conducts scientific studies on proposals, either "commissioned" by TC39 (e.g., MessageFormat study - to be presented at the upcoming workshop in Seattle), or out of self-driven interest with a clear potential to applicability to TC39
- develops methods, approaches, tools to aid understanding / designing / specifying the language (e.g., executable spec, spec formalisms, navigation within the spec, Proposal Management Tool, etc.)
- considers TC39 within the larger ecosystem of programming language design, specification and standardization (e.g., cross-standards research, language drift, decision-making)


2025-02-13
[18:12:46.0535] <Rob Palmer>
Reminder: Please register for SeattleJS on Thursday evening 20th Feb if you wish to attend!

https://lu.ma/s97y24jd

[23:20:35.0923] <Jesse>
ah, thanks for the reminder!


2025-02-14
[07:55:40.0456] <Michael Ficarra>
if anyone would like to join an A/V test call for next week's meeting at 10:00A Pacific (about 2 hours from now), send me a DM

[08:03:30.0517] <Rob Palmer>
^^^one volunteer requested! 

[08:06:39.0601] <Anthony Bullard>
DM sent


2025-02-16
[19:38:53.0854] <Rob Palmer>
In case anyone has not received or accepted the invite, we have a Seattle Matrix channel for in-person logistics. Please say if you would like an invite.


2025-02-17
[14:36:00.0502] <Chris de Almeida>
ðŸ“£ the draft schedule is available on the meeting issue in Reflector:  https://github.com/tc39/Reflector/issues/547


2025-02-18
[17:09:34.0583] <Chris de Almeida>
in case we forget to mention it tomorrow, please do not ever use the `I'm done speaking` button in TCQ.  thank you!

[17:50:52.0350] <rkirsling>
TC39 rule: never stop speaking

[17:53:36.0804] <Jesse (TC39 ðŸ‡ºðŸ‡¸)>
can we remove the button?

[18:07:55.0392] <Chris de Almeida>
https://github.com/bterlson/tcq/pull/68

[22:57:15.0252] <bakkot>
whatever happened to the rewrite?

[02:02:03.0156] <eemeli>
Looks like Christian Ulbrich and Tom Kopp were working on it here at least up until last June: https://github.com/zalari/tcq/pull/7

[08:11:12.0311] <Rob Palmer>
Sign in form with video link will be posted around 9am PT. 

[09:09:54.0431] <keith_miller>
Is there an ETA for the video link? I still don't see one in the reflector.

[09:20:26.0115] <Rob Palmer>
Not quite.  Michael is still setting up AV.

[09:20:31.0334] <keith_miller>
Oh I forgot these start at 10 not 9 lol

[09:21:25.0553] <Rob Palmer>
correct - there is 38 minutes until go time

[09:46:51.0824] <Rob Palmer>
The video link will be posted on the Reflector very soon

[09:51:13.0229] <Rob Palmer>
The video link is now posted via [the Sign-in form on the Reflector!](https://github.com/tc39/Reflector/issues/547)

[10:03:48.0475] <ljharb>
maybe we should add an actual persistent temperature check to tcq

[10:05:02.0268] <canadahonk>
fwiw its PST (-8) not PDT

[10:05:23.0244] <canadahonk>
* fwiw its PST (-8) not PDT (-7)

[10:13:55.0630] <Aki>
SUMMARIES ARE GOOD

[10:13:57.0322] <Aki>
YAY SUMMARIES

[10:24:42.0596] <Rob Palmer>
If anyone would like to be the TC39 Liaison to IETF please let the Chairs know or reach out to Samina directly.

[10:25:12.0932] <ljharb>
* maybe we should add an actual persistent temperature check to tcq (like, physical room temperature)

[10:26:49.0908] <ryzokuken>
we already liason with the W3C i18n WG for TG2

[10:27:04.0603] <ryzokuken>
and some WGs from Unicode for that matter

[10:27:25.0697] <ryzokuken>
* we already keep track of the W3C i18n WG for TG2

[10:27:41.0170] <eemeli>
Only technically, mind. I've a recurring conflict with their call, and Ben has not been able to attend many of their meetings.

[10:29:02.0854] <Chris de Almeida>
please share resources for where folks should go to get involved in TC55 (matrix room, meeting info, etc)

[10:29:18.0637] <canadahonk>
https://wintertc.org

[10:29:48.0229] <canadahonk>
* https://wintertc.org + https://github.com/wintercg/admin

[10:31:23.0385] <Andreu Botella>
matrix room: #wintertc:matrix.org 

[10:32:15.0900] <Aki>
rock and roll

[10:32:54.0572] <nicolo-ribaudo>
Thanks a lot Aki again for all the help with making sure that our technical work follows what Ecma needs

[10:33:25.0987] <canadahonk>
thank you all ECMA folks ðŸ™‡

[10:36:45.0996] <kriskowal>
Youâ€™re audible, Aki 

[10:36:58.0039] <Chris de Almeida>
oh reminder, there should not be notes during this period

[10:37:09.0406] <Chris de Almeida>
so please remove them and/or tell the transcriptionist to pause

[10:37:13.0970] <Chris de Almeida>
* so please remove them and tell the transcriptionist to pause

[10:37:15.0134] <Ashley Claymore>
it has been paused

[10:37:40.0921] <nicolo-ribaudo>
Don't worry, we manage also with you out of the call!

[10:37:43.0068] <Chris de Almeida>
and don't discuss here ðŸ™‚

[10:37:53.0777] <nicolo-ribaudo>
* Don't worry, we do things right also with you out of the call!

[10:38:04.0238] <Chris de Almeida>
of this, I have no doubt ðŸ™‚

[10:38:32.0863] <nicolo-ribaudo>
You can come back

[10:41:12.0539] <ljharb>
can we make sure the transcription bot, and transcription human, have resumed?

[10:41:35.0032] <nicolo-ribaudo>
The human is back and apparently the bot was not running in the first place

[10:42:09.0404] <Aki>
Now that Google Docs has "export as markdown", is it time to update the agenda item template?

[10:45:28.0593] <Chris de Almeida>
say more

[10:47:15.0668] <Aki>
Allows us to use the standard document styles and get markdown as a result https://snaps.akiro.se/2502_ji3bx.png

[10:49:43.0277] <ljharb>
the only reason the notes items are they way they are, afaik, is for ease of markdown conversion, so it seems fine to change them?

[10:50:20.0533] <Chris de Almeida>
suggest validating the quality of the export first

[10:52:19.0640] <Ashley Claymore>
Maybe we could try on Thursday, when the agenda is light. To reduce 'risk' if the formatting needs manual fix up

[10:53:17.0422] <Aki>
I've used the export for notes for other committees

[10:53:20.0055] <Aki>
I'm very happy with it

[10:58:02.0640] <bakkot>
nicolo-ribaudo: re: linking other web specs, I bet we could figure out how to automatically generate ecmarkup-compatible biblios from web specs if we really want to

[10:58:08.0664] <bakkot>
the ecmarkup biblios are very simple

[10:58:29.0584] <shu>
gotta snipe tab into supporting it in bikeshed

[10:58:58.0974] <nicolo-ribaudo>
Right now we just need to link to URL and fetch so doing it manually is probably less effort than making it work automatically, but if we'll need to link to more stuff I'll look into it

[10:59:16.0474] <nicolo-ribaudo>
Currently we also rely on Infra, but as part of the rewrite we are just going to rely on ECMA-262 built-ins instead

[11:11:01.0538] <Ashley Claymore>
One thing we sometimes do is wrap parts of the transcription in backticks, e.g. when someone references `Object.is`.
Do you know if these would carry-through, or would we need to do this by changing the font?

[11:12:06.0283] <Aki>
it escapes them, but that's a very easy search & replace

[11:12:27.0986] <Aki>
y'all have no idea how many regex search & replaces I do on every meeting's notes

[11:13:14.0152] <bakkot>
have you considered just asking an LLM to "make it good" :D

[11:13:28.0899] <Aki>
ðŸ¤®

[11:13:37.0454] <ljharb>
can't wait to find out what lovecraftian horrors end up being stage 4 due to that

[11:17:40.0453] <Michael Ficarra>
somehow I feel much more comfortable trusting the speech-to-text than I do a text transform, and I can't explain why

[11:18:28.0549] <nicolo-ribaudo>
Probably speach-to-text worst case writes nonsense, rather than plausible-looking wrong stuff

[11:18:47.0844] <bakkot>
the trick with text transforms is to have it generate a diff, which you can then easily review for correctness

[11:19:15.0634] <bakkot>
also no, modern speech-to-text definitely writes plausible-looking wrong stuff a lot

[11:19:31.0417] <Aki>
Eggma showed up a lot in the last TC55 meeting

[11:20:01.0761] <nicolo-ribaudo>
https://docs.google.com/presentation/d/1LjsJhdTIP3wgo1odtVa-qbfyGU5M1W9YMm0AtKnJJKk/edit#slide=id.p

[11:20:21.0239] <bakkot>
https://github.com/bakkot/transcribe-to-gdocs/blob/fb863c5a314d078f2a0c60d26cf8774f08dd068a/replacements.js#L35-L46

[11:20:57.0092] <Michael Ficarra>
eggma is a new one lol

[11:21:28.0735] <bakkot>
(though this list was when using google's old speech-to-text; whisper is much better and I hear gemini is better still although I have not yet gotten around to hooking it up)

[11:24:43.0741] <Aki>
eggman

[11:25:35.0267] <Michael Ficarra>
if Whisper wasn't already better than a human transcriptionist (it probably is), Gemini certainly is

[11:26:12.0574] <ljharb>
coo coo ca choo

[11:27:39.0811] <rbuckton>
Oh, I missed this in my constraints. I need to be present for the Decorators discussion, so if it can remain after the lunch break I would appreciate it. I will add this to the agenda as a late breaking constraint

[11:29:40.0942] <Michael Ficarra>
except for 100%, right?

[11:37:40.0576] <canadahonk>
ðŸ¤“ as someone who has tried/done "professional" transcriptions a while ago, I think Whisper is good at speech-to-text but has terrible/no formatting last I looked

[11:39:13.0606] <bakkot>
50% of the human transcriptionists we've hired have actively harmful formatting (double spaces between sentences, linebreaks every few words, etc), so "no formatting" is still superior

[11:41:53.0931] <canadahonk>
yeah agree with that

[11:46:37.0493] <Ashley Claymore>
Not sure if still true today, but in the past the human transcriptionists seem to handle people talking over each other better. Giving each their own `>>` lines

[11:47:39.0509] <littledan>
Could someone record a conclusion on the chair election in the notes?

[11:48:01.0783] <littledan>
(I'm happy to share the doc link in a DM if anyone needs)

[11:49:02.0892] <canadahonk>
we already have it i believe

[11:51:07.0192] <nicolo-ribaudo>
Nope, this is it:

### Speaker's Summary of Key Points
* List
* of
* things
### Conclusion
* List
* of 
* things


[11:51:08.0712] <littledan>
please edit the notes and add a summary and conclusion section, saying who was elected. It is currently missing.

[11:51:22.0601] <littledan>
I mean, I just pasted that in

[11:51:33.0451] <littledan>
I'm not sure if someone people believe that the earlier text implies the summary/conclusion

[11:51:41.0987] <littledan>
but... I just can't make sense of it

[11:51:45.0756] <canadahonk>
oh I read conclusion as conclusion of opinion oops nvm

[11:51:57.0384] <canadahonk>
* <del>we already have it i believe</del>

[11:51:59.0731] <littledan>
we just don't have a list in the notes of who was elected

[11:52:13.0995] <canadahonk>
i'll do in break if no one else does

[11:52:28.0129] <littledan>
(this is normal -- almost nobody writes their own summary and conclusion without prompting, but I didn't know who to prompt for this topic)

[11:53:01.0177] <nicolo-ribaudo>
Done

[11:57:57.0245] <Chris de Almeida>
presenters!  please note, the topics in the overhead bins have shifted during flight:  https://hackmd.io/dp19kCC5QBeG1W37oESrfQ?view



[13:20:15.0193] <nicolo-ribaudo>
`@babel/plugin-proposal-decorators` is the most downloaded Babel plugin on npm for a proposal. It has (looking at some plugins for proposals that have been around for a while and are among the most downloaded ones):
- 100x the downloads of `@babel/plugin-proposal-explicit-resource-management`
- 40x the downloads of `@babel/plugin-proposal-throw-expressions`
- 80x the downloads of `@babel/plugin-proposal-pipeline-operator`

[13:21:29.0987] <nicolo-ribaudo>
What is the burden with shipping first? Is it that you are the one that's going to find compatibility bugs?

[13:22:40.0489] <eemeli>
littledan: Did you really mean Stage 3, or should that have been 2.7?

[13:23:31.0360] <ljharb>
3 is when it's time to implement and ship, so while ideally things would be blocked at 2.7 if there's no desire to implement, 3 would be fine too

[13:23:44.0619] <ljharb>
but it's definitely subpar to have something be stage 3 that nobody's prioritizing 

[13:23:47.0888] <bakkot>
re the isSafeNumeric item later, Number toString technically allows implementations a choice of outputs in some cases https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-numeric-types-number-tostring

[13:23:51.0503] <bakkot>
does anyone actually... do that

[13:25:40.0604] <James M Snell>
I will say that it's rather frustrating as someone tracking the decorators spec work for some time... what I heard is that implementers don't want to prioritize it because they don't want to be the first to ship, but that they don't want to be the first to ship because the work is not prioritized..... what I'm not hearing at all is do the implementers just not want to implement decorators at all? Is this just a delay tactic to ultimately kill the proposal?

[13:29:21.0623] <rbuckton>
For many syntax features, developers are often comfortable with using a build tool to transform new syntax under the expectation that that transformation step can be removed once evergreen browsers have been updated to support the feature, but that requires those browsers to continue to make progress on shipping those features. Many syntax transformations are fairly cheap, though that's not always the case. Async functions and generators required fairly significant transformations and helper libraries to support, which adds overhead to bundles. The transformed emit for stage 3 decorators can also be quite large, which has a negative impact on bundle size and initial load time.

[13:30:00.0734] <rbuckton>
Even if feature availability is lopsided across browsers, developers can use server-side UA sniffing (or even client side with `import()`) to ship a leaner bundle with native decorators on browsers that support them, and a transformed bundle on browsers that don't. 

[13:31:46.0518] <bakkot>
possible in principle and I wish people did it more, but in practice I have ~never seen server-side UA sniffing for serving scripts with downleveled features to browsers which don't support something

[13:32:44.0614] <ljharb>
i think facebook might do it, but i've never actually seen it

[13:32:47.0359] <rbuckton>
> <@bakkot:matrix.org> possible in principle and I wish people did it more, but in practice I have ~never seen server-side UA sniffing for serving scripts with downleveled features to browsers which don't support something

Isn't this essentially what anyone participating in an Origin Trial would need to do?

[13:33:03.0365] <Michael Ficarra>
> <@bakkot:matrix.org> possible in principle and I wish people did it more, but in practice I have ~never seen server-side UA sniffing for serving scripts with downleveled features to browsers which don't support something

we literally do that

[13:33:22.0427] <snek>
one of the npm-to-web cdns does it, idr the name

[13:33:35.0361] <bakkot>
origin trials are most often APIs which you can just make conditional within a script instead of UA sniffing

[13:34:26.0540] <bakkot>
we do a lot of weird things! but that's a one-off for a particular feature we needed, not a general mechanism for arbitrary features

[13:36:47.0385] <bakkot>
`polyfill.io` did for APIs but that's a slightly different thing than syntax

[13:37:16.0353] <bakkot>
I don't think many places are using npm-to-web CDNs in prod

[13:37:21.0200] <bakkot>
well, presumably lots of hobbyist stuff

[13:37:41.0296] <rbuckton>
> <@bakkot:matrix.org> possible in principle and I wish people did it more, but in practice I have ~never seen server-side UA sniffing for serving scripts with downleveled features to browsers which don't support something

Large scale applications definitely have used both server-side UA sniffing and client-side feature detection to dynamically load content in different engines for performance tweaks.

[13:38:14.0175] <bakkot>
I agree some people do it; we do it. But it's very very rare in my experience, looking at random retailers and hotels and so on.

[13:42:35.0748] <nicolo-ribaudo>
syg: What we are doing with import defer, is that deferred namespace objects guarantee that they will never have a .then property. This doesn't actually change the promises machinery, but makes sure that deferred namesapces are inhert to it

[13:42:38.0360] <rbuckton>
If decorator downlevel emit size is a significant concern, it might be worth that kind of temporary split to produce a leaner bundle when possible. Web performance optimization is a major area of focus for large scale applications.

[13:42:54.0410] <nicolo-ribaudo>
* syg: What we are doing with import defer, is that deferred namespace objects guarantee that they will never have a .then property. This doesn't actually change the promises machinery, but makes sure that deferred namesapces are inert to it. And we can do it because they are already very exotic objects

[13:43:15.0112] <shu>
thanks. still says to me there's a datapoint that we consider "then" a special evil worth special casing

[13:46:01.0179] <littledan>
We did already make Object.prototype be exotic (to have a frozen __proto__) but I agree that exotic with respect to then is an extra form of weirdness

[13:49:42.0084] <bakkot>
Mathieu Hofman: for the Promise.resolve constructor lookup, see https://github.com/tc39/proposal-faster-promise-adoption/issues/1

[13:49:53.0256] <littledan>
For the notes: every time someone says "object dot proto", they mean Object.prototype, right? Not Object.__proto__

[13:50:01.0518] <bakkot>
currently the check is `IsPromise(p) && p.constructor === C`; I think it should be `IsPromise(p) && GetPrototypeOf(p) === C.prototype`

[13:50:07.0052] <littledan>
* For the notes: every time someone says "object dot proto", they mean `Object.prototype`, right? Not `Object.__proto__`

[13:50:30.0595] <bakkot>
GetPrototypeOf usually triggers user code, but can't trigger user code once you pass the IsPromise test

[13:53:13.0977] <Mathieu Hofman>
Yes this is when the "SafePromiseResolve" issue came up last time

[13:54:16.0549] <nicolo-ribaudo>
Are firefox use counters public, with a list of example websites, like Chrome's?

[13:55:04.0843] <Mathieu Hofman>
I basically want to make this check into a "SafePromiseResolve" that fast path promises that do not re-enter, and delay by one tick the ones that may. Then anyone can use that operation, possibly even `await`.

[13:55:51.0309] <Mathieu Hofman>
That's not sufficient if someone overrides `%PromisePrototype%` properties

[13:56:01.0662] <bakkot>
isn't it?

[13:56:03.0529] <Mathieu Hofman>
* That's not sufficient if someone overrides `%PromisePrototype%` `then` and `constructor` properties

[13:56:14.0226] <bakkot>
Promise.resolve does not do a lookup of `.then` on things which pass that check

[13:56:39.0235] <Mathieu Hofman>
It does for `constructor` if I recall.

[13:56:54.0383] <bakkot>
Right, it does `IsPromise(p) && p.constructor === Promise`

[13:57:21.0737] <bakkot>
but if we make it `IsPromise(p) && GetPrototypeOf(p) === C.prototype` then it would not do anything user-observable (on real promises)

[13:57:29.0433] <bakkot>
and I bet we can get away with that

[13:57:50.0359] <bakkot>
this also applies to `await` since it uses the same machinery

[13:58:22.0574] <bakkot>
and `await`  also does not do an actual `.then` lookup at all, it just does a PromiseResolve and then uses the built-in PerformPromiseThen

[13:58:28.0766] <Mathieu Hofman>
`defineProperty(`Promise.prototype`, 'constructor', {get() {} }})`

[13:58:38.0140] <Mathieu Hofman>
* `defineProperty(Promise.prototype, 'constructor', {get() {} }})`

[13:58:45.0710] <Mathieu Hofman>
* `defineProperty(Promise.prototype, 'constructor', {get() {} })`

[13:58:55.0400] <bakkot>
I don't know what that's intended to be a response to

[13:59:08.0031] <bakkot>
I am proposing to change the machinery so nothing ever looks at `.constructor`

[13:59:23.0394] <snek>
what constitutes a brand check

[13:59:32.0831] <snek>
like what granularity 

[13:59:36.0838] <snek>
there are so many ways to organize objects

[13:59:49.0756] <nicolo-ribaudo>
A sync side-effect-free way to tell wether an object has a particular internal slot or not

[13:59:51.0093] <Mathieu Hofman>
Oh, if you think that's web compatible

[14:00:01.0075] <nicolo-ribaudo>
* A sync side-effect-free way to tell wether an object has a particular internal slot or not, for any slot

[14:00:11.0227] <snek>
for *every* internal slot?

[14:00:16.0045] <bakkot>
I give it reasonable odds

[14:00:35.0163] <bakkot>
since the only thing that happens if something starts failing the check is that they get another microtask tick

[14:00:42.0247] <nicolo-ribaudo>
Well, a brand check is for _one_ internal slot, and Jordan would like every internal slot to have a brand check

[14:00:57.0788] <snek>
yeah i mean my question is what the consensus applied to

[14:01:10.0425] <snek>
because there are a lot of internal slots, how does one decide which ones are relevant in this case

[14:01:39.0436] <sffc>
Frank is ill, and I will now be presenting his slides on Intl Locale Info. Rob Palmer Chris de Almeida ryzokuken 

[14:01:55.0301] <Mathieu Hofman>
Yeah I just need to think through the different cases of "subclassing" that the constructor check is meant to handle. 

[14:02:08.0825] <ryzokuken>
hope he recovers soon, thanks for the heads up

[14:02:20.0617] <ljharb>
every internal slot that has observably different behavior, i suppose

[14:02:35.0818] <Mathieu Hofman>
Anyway, I'd be happy with anything that allows anyone (spec or user code) to stop triggering sync code during Promise.resolve

[14:02:47.0438] <ljharb>
and luca's comment seems somewhat related, in that it relates to the overarching goal throughout ES6 of making DOM objects JS-implementable

[14:02:55.0190] <ljharb>
* and luca's comment seems somewhat related, in that it relates to the overarching committee goal throughout ES6 of making DOM objects JS-implementable

[14:03:17.0614] <bakkot>
I am very firmly convinced that the goal of making host things 100% doable in userland was a mistake

[14:03:27.0154] <bakkot>
that gave us Symbol.concatSpreadable and etc

[14:04:09.0117] <bakkot>
_mostly_ doable in userland is good but I think it's probably OK if you can't polyfill this particular behavior?

[14:04:27.0582] <ljharb>
i'm not personally invested in implementable in userland, fwiw

[14:04:27.0707] <bakkot>
like, people probably aren't going to start relying on being able to stick `.then` on your polyfilled webIDL thing

[14:04:39.0733] <ljharb>
are there no webIDL thenables?

[14:04:49.0190] <bakkot>
don't think so

[14:04:50.0423] <ljharb>
because being able to implement one of those seems important for engines implemented in JS?

[14:04:52.0670] <ljharb>
* because being able to implement one of those seems important for engines implemented in JS, if so

[14:04:53.0008] <James M Snell>
if it's not doable in JS then there are a ton of web platform APIs that node.js, deno, etc would have a difficult time implementing this for

[14:05:31.0721] <snek>
though engines implemented in js have their own object graph, so its kind of a moot point

[14:05:33.0287] <bakkot>
I think for node etc you could just have a built-in thing to mark objects as special in this way, and then mark them?

[14:05:46.0049] <bakkot>
as long as V8 exposes this as a bit you can set on an arbitrary object

[14:05:50.0234] <James M Snell>
Such built-in things become rather expensive from a perf cost

[14:06:11.0596] <bakkot>
hm, ok

[14:06:15.0143] <James M Snell>
anything that requires calling down into C++ becomes rather expensive in aggregate

[14:06:56.0408] <bakkot>
it could take a list of objects and just do a single call, if the concern is the number of times you cross the language barrier

[14:06:59.0176] <ljharb>
ones 100% implemented in JS yes, but not in eg node where they use JS to augment (and sometimes polyfill) standard features not implemented in JS

[14:07:06.0555] <shu>
do you need to mark objects often?

[14:07:06.0785] <Andreu Botella>
> <@jasnell:matrix.org> anything that requires calling down into C++ becomes rather expensive in aggregate

there's no reason V8 couldn't have a built-in that gives access to an object containing a lot of internal APIs that can be called from JS

[14:07:10.0049] <shu>
is it like, per instance?

[14:07:51.0182] <shu>
...why... would we do this?

[14:07:58.0526] <canadahonk>
fyi chairs I'm good to present math.clamp from now for scheduling

[14:08:03.0593] <James M Snell>
well, it's not *just* node.js itself. Also thinking about user-land provided polyfills of standardized apis 

[14:09:20.0407] <James M Snell>
at the very least, it seems we have consensus that there's a problem to address here. I think there's likely multiple ways to address it but I want to make sure we do not prematurely take JS polyfillability off the table

[14:10:00.0308] <canadahonk>
is it fine to do the login form twice or if not could someone dm the meeting link?

[14:10:31.0904] <bakkot>
how important do you think it is to be able to polyfill this specific weird behavior? because it feels not that important to me

