2025-02-03
[10:33:34.0590] <nicolo-ribaudo>
Reading through https://news.ycombinator.com/item?id=42876840, it seems like the most wanted proposals are Records&Tuples and pattern matching

[10:59:20.0837] <littledan>
Let's do both of them!

[15:53:29.0839] <Rob Palmer>
It looks like we will get a **Community Event in Seattle** on the evening of **Thursday 20th February.**  Please can folk who are attending volunteer some talks!

- [**Call For Speakers**](https://github.com/tc39/Reflector/issues/550)

SeattleJS are asking us to provide all the content for the evening, so I hope we can deliver lots of exciting talks.


2025-02-05
[17:17:59.0577] <Mathieu Hofman>
Does anyone know why we decided not to look for private fields on the prototype chain of any object? This somewhat came up in 2 different proposal discussions lately: https://github.com/tc39/proposal-class-access-expressions/issues/26 and https://github.com/ljharb/proposal-error-stack-accessor/issues/3 (the latter is for a internal slot but same idea)

[17:21:16.0610] <Mathieu Hofman>
It would likely break a ton of  "brand checks" use cases, but really there isn't an easy way to even create a helper to search the prototype chain as one cannot get a "ref" for the private field.

[17:22:14.0304] <Mathieu Hofman>
* It would likely break a ton of  "brand checks" use cases, but the problem is that there isn't any way to even create a helper to search the prototype chain as one cannot get a "ref" for the private field.

[00:11:46.0608] <Ashley Claymore>
the helper would need to take a callback: `(o) => #p in o`

[06:26:14.0849] <littledan>
It's hard/impossible to truly preserve privacy while also working with prototype chains, especially if you want to stick strictly to object-like semantics and not invent on a new thing. Also, the SES crowd insisted on WeakMap analogy semantics in particular, which has no prototype chain walk.

[08:47:27.0208] <ljharb>
also if it used the prototype chain then they wouldn’t be private fields, they’d be public ones, because anything can extend anything else at any time

[08:47:38.0688] <ljharb>
* also if it used the prototype chain then they wouldn’t be _private_ fields, they’d be public ones, because anything can extend anything else at any time

[08:54:50.0475] <littledan>
well, the space of possibilities is large, but yeah we had trouble finding a mechanism that would preserve privacy, have inheritance *and* have a number of other properties that people were interested in

[12:39:40.0329] <Ashley Claymore>
> <@ljharb:matrix.org> also if it used the prototype chain then they wouldn’t be _private_ fields, they’d be public ones, because anything can extend anything else at any time

And wouldn't have been able to minify them with so much confidence. Local lexical lookup is great for AOT transforms 


2025-02-06
[19:00:39.0895] <Ashley Claymore>

Realising this wasn't about matching other private fields with the same, so the name of the field would all still be local and still minifiable.
it's more that the lookup would have fewer guarantees. Because proxies, walking the proto chain could have side effects and give different answers.
so couldn't assume AOT things like `#p in v === #p in v`

[02:02:06.0779] <Mathieu Hofman>
Yeah the fact that looking up a private field cannot trigger any user code is a nice property. Combined with the fact you wouldn't know which object the value came from is probably sufficient reason for this to have been the right choice.


2025-02-07
[07:49:25.0188] <nicolo-ribaudo>
This is super early, however — a few of us will be taking the train to go to the A Coruña meeting in May (mostly from NL and UK). If anybody traveling from somewhere in western Europe wants to join us please write me a message by the end of February :)

[09:55:25.0724] <Rob Palmer>
- **Reminder:**  The Feb 2025 Plenary deadline for Stage Advancement is in 24 hours!


2025-02-11
[17:14:45.0064] <shu>
do i read RegExp.escape correctly that it doesn't care about lone surrogates? it'll just escape them?

[17:28:11.0708] <bakkot>
yeah

[17:28:43.0991] <bakkot>
I don't know if that means "doesn't care" since it does explicitly handle them

[17:29:09.0286] <bakkot>
but it handles them by escaping them

[19:27:13.0806] <shu>
fair. by "doesn't care" i mean it doesn't error out if input is malformed

[19:27:24.0205] <shu>
malformed by having lone surrogates

[21:25:13.0507] <ljharb>
to me yesthat sounds right 

[21:25:18.0614] <ljharb>
* that sounds right to me yes


2025-02-12
[10:06:37.0764] <TabAtkins>
Given that lone surrogates are valid values in JS strings, that seems like the right behavior, rather than erroring.

[13:51:30.0616] <Mikhail Barash>
Reminder: The [TG5 Workshop](https://github.com/tc39/tg5/blob/main/workshops/2025/106.md) will be held on Friday 21st of February, the day after the plenary meeting. It'll be hosted by F5 (same venue as the plenary).
Among other items on the agenda, we'll have a visitor from UCSD to talk about [the MessageFormat study](https://github.com/tc39/tg5/issues/3) and identify other proposals that might benefit from user studies.
Registration link: https://forms.gle/jBn3XguosNwJsScy6


_What is TG5?_

TG5 is a task group of TC39 that:
- conducts scientific studies on proposals, either "commissioned" by TC39 (e.g., MessageFormat study - to be presented at the upcoming workshop in Seattle), or out of self-driven interest with a clear potential to applicability to TC39
- develops methods, approaches, tools to aid understanding / designing / specifying the language (e.g., executable spec, spec formalisms, navigation within the spec, Proposal Management Tool, etc.)
- considers TC39 within the larger ecosystem of programming language design, specification and standardization (e.g., cross-standards research, language drift, decision-making)


2025-02-13
[18:12:46.0535] <Rob Palmer>
Reminder: Please register for SeattleJS on Thursday evening 20th Feb if you wish to attend!

https://lu.ma/s97y24jd

[23:20:35.0923] <Jesse>
ah, thanks for the reminder!


2025-02-14
[07:55:40.0456] <Michael Ficarra>
if anyone would like to join an A/V test call for next week's meeting at 10:00A Pacific (about 2 hours from now), send me a DM

[08:03:30.0517] <Rob Palmer>
^^^one volunteer requested! 

[08:06:39.0601] <Anthony Bullard>
DM sent


2025-02-16
[19:38:53.0854] <Rob Palmer>
In case anyone has not received or accepted the invite, we have a Seattle Matrix channel for in-person logistics. Please say if you would like an invite.


2025-02-17
[14:36:00.0502] <Chris de Almeida>
📣 the draft schedule is available on the meeting issue in Reflector:  https://github.com/tc39/Reflector/issues/547


2025-02-18
[17:09:34.0583] <Chris de Almeida>
in case we forget to mention it tomorrow, please do not ever use the `I'm done speaking` button in TCQ.  thank you!

[17:50:52.0350] <rkirsling>
TC39 rule: never stop speaking

[17:53:36.0804] <Jesse (TC39 🇺🇸)>
can we remove the button?

[18:07:55.0392] <Chris de Almeida>
https://github.com/bterlson/tcq/pull/68

[22:57:15.0252] <bakkot>
whatever happened to the rewrite?

[02:02:03.0156] <eemeli>
Looks like Christian Ulbrich and Tom Kopp were working on it here at least up until last June: https://github.com/zalari/tcq/pull/7

[08:11:12.0311] <Rob Palmer>
Sign in form with video link will be posted around 9am PT. 

[09:09:54.0431] <keith_miller>
Is there an ETA for the video link? I still don't see one in the reflector.

[09:20:26.0115] <Rob Palmer>
Not quite.  Michael is still setting up AV.

[09:20:31.0334] <keith_miller>
Oh I forgot these start at 10 not 9 lol

[09:21:25.0553] <Rob Palmer>
correct - there is 38 minutes until go time

[09:46:51.0824] <Rob Palmer>
The video link will be posted on the Reflector very soon

[09:51:13.0229] <Rob Palmer>
The video link is now posted via [the Sign-in form on the Reflector!](https://github.com/tc39/Reflector/issues/547)

[10:03:48.0475] <ljharb>
maybe we should add an actual persistent temperature check to tcq

[10:05:02.0268] <canadahonk>
fwiw its PST (-8) not PDT

[10:05:23.0244] <canadahonk>
* fwiw its PST (-8) not PDT (-7)

[10:13:55.0630] <Aki>
SUMMARIES ARE GOOD

[10:13:57.0322] <Aki>
YAY SUMMARIES

[10:24:42.0596] <Rob Palmer>
If anyone would like to be the TC39 Liaison to IETF please let the Chairs know or reach out to Samina directly.

[10:25:12.0932] <ljharb>
* maybe we should add an actual persistent temperature check to tcq (like, physical room temperature)

[10:26:49.0908] <ryzokuken>
we already liason with the W3C i18n WG for TG2

[10:27:04.0603] <ryzokuken>
and some WGs from Unicode for that matter

[10:27:25.0697] <ryzokuken>
* we already keep track of the W3C i18n WG for TG2

[10:27:41.0170] <eemeli>
Only technically, mind. I've a recurring conflict with their call, and Ben has not been able to attend many of their meetings.

[10:29:02.0854] <Chris de Almeida>
please share resources for where folks should go to get involved in TC55 (matrix room, meeting info, etc)

[10:29:18.0637] <canadahonk>
https://wintertc.org

[10:29:48.0229] <canadahonk>
* https://wintertc.org + https://github.com/wintercg/admin

[10:31:23.0385] <Andreu Botella>
matrix room: #wintertc:matrix.org 

[10:32:15.0900] <Aki>
rock and roll

[10:32:54.0572] <nicolo-ribaudo>
Thanks a lot Aki again for all the help with making sure that our technical work follows what Ecma needs

[10:33:25.0987] <canadahonk>
thank you all ECMA folks 🙇

[10:36:45.0996] <kriskowal>
You’re audible, Aki 

[10:36:58.0039] <Chris de Almeida>
oh reminder, there should not be notes during this period

[10:37:09.0406] <Chris de Almeida>
so please remove them and/or tell the transcriptionist to pause

[10:37:13.0970] <Chris de Almeida>
* so please remove them and tell the transcriptionist to pause

[10:37:15.0134] <Ashley Claymore>
it has been paused

[10:37:40.0921] <nicolo-ribaudo>
Don't worry, we manage also with you out of the call!

[10:37:43.0068] <Chris de Almeida>
and don't discuss here 🙂

[10:37:53.0777] <nicolo-ribaudo>
* Don't worry, we do things right also with you out of the call!

[10:38:04.0238] <Chris de Almeida>
of this, I have no doubt 🙂

[10:38:32.0863] <nicolo-ribaudo>
You can come back

[10:41:12.0539] <ljharb>
can we make sure the transcription bot, and transcription human, have resumed?

[10:41:35.0032] <nicolo-ribaudo>
The human is back and apparently the bot was not running in the first place

[10:42:09.0404] <Aki>
Now that Google Docs has "export as markdown", is it time to update the agenda item template?

[10:45:28.0593] <Chris de Almeida>
say more

[10:47:15.0668] <Aki>
Allows us to use the standard document styles and get markdown as a result https://snaps.akiro.se/2502_ji3bx.png

[10:49:43.0277] <ljharb>
the only reason the notes items are they way they are, afaik, is for ease of markdown conversion, so it seems fine to change them?

[10:50:20.0533] <Chris de Almeida>
suggest validating the quality of the export first

[10:52:19.0640] <Ashley Claymore>
Maybe we could try on Thursday, when the agenda is light. To reduce 'risk' if the formatting needs manual fix up

[10:53:17.0422] <Aki>
I've used the export for notes for other committees

[10:53:20.0055] <Aki>
I'm very happy with it

[10:58:02.0640] <bakkot>
nicolo-ribaudo: re: linking other web specs, I bet we could figure out how to automatically generate ecmarkup-compatible biblios from web specs if we really want to

[10:58:08.0664] <bakkot>
the ecmarkup biblios are very simple

[10:58:29.0584] <shu>
gotta snipe tab into supporting it in bikeshed

[10:58:58.0974] <nicolo-ribaudo>
Right now we just need to link to URL and fetch so doing it manually is probably less effort than making it work automatically, but if we'll need to link to more stuff I'll look into it

[10:59:16.0474] <nicolo-ribaudo>
Currently we also rely on Infra, but as part of the rewrite we are just going to rely on ECMA-262 built-ins instead

[11:11:01.0538] <Ashley Claymore>
One thing we sometimes do is wrap parts of the transcription in backticks, e.g. when someone references `Object.is`.
Do you know if these would carry-through, or would we need to do this by changing the font?

[11:12:06.0283] <Aki>
it escapes them, but that's a very easy search & replace

[11:12:27.0986] <Aki>
y'all have no idea how many regex search & replaces I do on every meeting's notes

[11:13:14.0152] <bakkot>
have you considered just asking an LLM to "make it good" :D

[11:13:28.0899] <Aki>
🤮

[11:13:37.0454] <ljharb>
can't wait to find out what lovecraftian horrors end up being stage 4 due to that

[11:17:40.0453] <Michael Ficarra>
somehow I feel much more comfortable trusting the speech-to-text than I do a text transform, and I can't explain why

[11:18:28.0549] <nicolo-ribaudo>
Probably speach-to-text worst case writes nonsense, rather than plausible-looking wrong stuff

[11:18:47.0844] <bakkot>
the trick with text transforms is to have it generate a diff, which you can then easily review for correctness

[11:19:15.0634] <bakkot>
also no, modern speech-to-text definitely writes plausible-looking wrong stuff a lot

[11:19:31.0417] <Aki>
Eggma showed up a lot in the last TC55 meeting

[11:20:01.0761] <nicolo-ribaudo>
https://docs.google.com/presentation/d/1LjsJhdTIP3wgo1odtVa-qbfyGU5M1W9YMm0AtKnJJKk/edit#slide=id.p

[11:20:21.0239] <bakkot>
https://github.com/bakkot/transcribe-to-gdocs/blob/fb863c5a314d078f2a0c60d26cf8774f08dd068a/replacements.js#L35-L46

[11:20:57.0092] <Michael Ficarra>
eggma is a new one lol

[11:21:28.0735] <bakkot>
(though this list was when using google's old speech-to-text; whisper is much better and I hear gemini is better still although I have not yet gotten around to hooking it up)

[11:24:43.0741] <Aki>
eggman

[11:25:35.0267] <Michael Ficarra>
if Whisper wasn't already better than a human transcriptionist (it probably is), Gemini certainly is

[11:26:12.0574] <ljharb>
coo coo ca choo

[11:27:39.0811] <rbuckton>
Oh, I missed this in my constraints. I need to be present for the Decorators discussion, so if it can remain after the lunch break I would appreciate it. I will add this to the agenda as a late breaking constraint

[11:29:40.0942] <Michael Ficarra>
except for 100%, right?

[11:37:40.0576] <canadahonk>
🤓 as someone who has tried/done "professional" transcriptions a while ago, I think Whisper is good at speech-to-text but has terrible/no formatting last I looked

[11:39:13.0606] <bakkot>
50% of the human transcriptionists we've hired have actively harmful formatting (double spaces between sentences, linebreaks every few words, etc), so "no formatting" is still superior

[11:41:53.0931] <canadahonk>
yeah agree with that

[11:46:37.0493] <Ashley Claymore>
Not sure if still true today, but in the past the human transcriptionists seem to handle people talking over each other better. Giving each their own `>>` lines

[11:47:39.0509] <littledan>
Could someone record a conclusion on the chair election in the notes?

[11:48:01.0783] <littledan>
(I'm happy to share the doc link in a DM if anyone needs)

[11:49:02.0892] <canadahonk>
we already have it i believe

[11:51:07.0192] <nicolo-ribaudo>
Nope, this is it:

### Speaker's Summary of Key Points
* List
* of
* things
### Conclusion
* List
* of 
* things


[11:51:08.0712] <littledan>
please edit the notes and add a summary and conclusion section, saying who was elected. It is currently missing.

[11:51:22.0601] <littledan>
I mean, I just pasted that in

[11:51:33.0451] <littledan>
I'm not sure if someone people believe that the earlier text implies the summary/conclusion

[11:51:41.0987] <littledan>
but... I just can't make sense of it

[11:51:45.0756] <canadahonk>
oh I read conclusion as conclusion of opinion oops nvm

[11:51:57.0384] <canadahonk>
* <del>we already have it i believe</del>

[11:51:59.0731] <littledan>
we just don't have a list in the notes of who was elected

[11:52:13.0995] <canadahonk>
i'll do in break if no one else does

[11:52:28.0129] <littledan>
(this is normal -- almost nobody writes their own summary and conclusion without prompting, but I didn't know who to prompt for this topic)

[11:53:01.0177] <nicolo-ribaudo>
Done

[11:57:57.0245] <Chris de Almeida>
presenters!  please note, the topics in the overhead bins have shifted during flight:  https://hackmd.io/dp19kCC5QBeG1W37oESrfQ?view



[13:20:15.0193] <nicolo-ribaudo>
`@babel/plugin-proposal-decorators` is the most downloaded Babel plugin on npm for a proposal. It has (looking at some plugins for proposals that have been around for a while and are among the most downloaded ones):
- 100x the downloads of `@babel/plugin-proposal-explicit-resource-management`
- 40x the downloads of `@babel/plugin-proposal-throw-expressions`
- 80x the downloads of `@babel/plugin-proposal-pipeline-operator`

[13:21:29.0987] <nicolo-ribaudo>
What is the burden with shipping first? Is it that you are the one that's going to find compatibility bugs?

[13:22:40.0489] <eemeli>
littledan: Did you really mean Stage 3, or should that have been 2.7?

[13:23:31.0360] <ljharb>
3 is when it's time to implement and ship, so while ideally things would be blocked at 2.7 if there's no desire to implement, 3 would be fine too

[13:23:44.0619] <ljharb>
but it's definitely subpar to have something be stage 3 that nobody's prioritizing 

[13:23:47.0888] <bakkot>
re the isSafeNumeric item later, Number toString technically allows implementations a choice of outputs in some cases https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-numeric-types-number-tostring

[13:23:51.0503] <bakkot>
does anyone actually... do that

[13:25:40.0604] <James M Snell>
I will say that it's rather frustrating as someone tracking the decorators spec work for some time... what I heard is that implementers don't want to prioritize it because they don't want to be the first to ship, but that they don't want to be the first to ship because the work is not prioritized..... what I'm not hearing at all is do the implementers just not want to implement decorators at all? Is this just a delay tactic to ultimately kill the proposal?

[13:29:21.0623] <rbuckton>
For many syntax features, developers are often comfortable with using a build tool to transform new syntax under the expectation that that transformation step can be removed once evergreen browsers have been updated to support the feature, but that requires those browsers to continue to make progress on shipping those features. Many syntax transformations are fairly cheap, though that's not always the case. Async functions and generators required fairly significant transformations and helper libraries to support, which adds overhead to bundles. The transformed emit for stage 3 decorators can also be quite large, which has a negative impact on bundle size and initial load time.

[13:30:00.0734] <rbuckton>
Even if feature availability is lopsided across browsers, developers can use server-side UA sniffing (or even client side with `import()`) to ship a leaner bundle with native decorators on browsers that support them, and a transformed bundle on browsers that don't. 

[13:31:46.0518] <bakkot>
possible in principle and I wish people did it more, but in practice I have ~never seen server-side UA sniffing for serving scripts with downleveled features to browsers which don't support something

[13:32:44.0614] <ljharb>
i think facebook might do it, but i've never actually seen it

[13:32:47.0359] <rbuckton>
> <@bakkot:matrix.org> possible in principle and I wish people did it more, but in practice I have ~never seen server-side UA sniffing for serving scripts with downleveled features to browsers which don't support something

Isn't this essentially what anyone participating in an Origin Trial would need to do?

[13:33:03.0365] <Michael Ficarra>
> <@bakkot:matrix.org> possible in principle and I wish people did it more, but in practice I have ~never seen server-side UA sniffing for serving scripts with downleveled features to browsers which don't support something

we literally do that

[13:33:22.0427] <snek>
one of the npm-to-web cdns does it, idr the name

[13:33:35.0361] <bakkot>
origin trials are most often APIs which you can just make conditional within a script instead of UA sniffing

[13:34:26.0540] <bakkot>
we do a lot of weird things! but that's a one-off for a particular feature we needed, not a general mechanism for arbitrary features

[13:36:47.0385] <bakkot>
`polyfill.io` did for APIs but that's a slightly different thing than syntax

[13:37:16.0353] <bakkot>
I don't think many places are using npm-to-web CDNs in prod

[13:37:21.0200] <bakkot>
well, presumably lots of hobbyist stuff

[13:37:41.0296] <rbuckton>
> <@bakkot:matrix.org> possible in principle and I wish people did it more, but in practice I have ~never seen server-side UA sniffing for serving scripts with downleveled features to browsers which don't support something

Large scale applications definitely have used both server-side UA sniffing and client-side feature detection to dynamically load content in different engines for performance tweaks.

[13:38:14.0175] <bakkot>
I agree some people do it; we do it. But it's very very rare in my experience, looking at random retailers and hotels and so on.

[13:42:35.0748] <nicolo-ribaudo>
syg: What we are doing with import defer, is that deferred namespace objects guarantee that they will never have a .then property. This doesn't actually change the promises machinery, but makes sure that deferred namesapces are inhert to it

[13:42:38.0360] <rbuckton>
If decorator downlevel emit size is a significant concern, it might be worth that kind of temporary split to produce a leaner bundle when possible. Web performance optimization is a major area of focus for large scale applications.

[13:42:54.0410] <nicolo-ribaudo>
* syg: What we are doing with import defer, is that deferred namespace objects guarantee that they will never have a .then property. This doesn't actually change the promises machinery, but makes sure that deferred namesapces are inert to it. And we can do it because they are already very exotic objects

[13:43:15.0112] <shu>
thanks. still says to me there's a datapoint that we consider "then" a special evil worth special casing

[13:46:01.0179] <littledan>
We did already make Object.prototype be exotic (to have a frozen __proto__) but I agree that exotic with respect to then is an extra form of weirdness

[13:49:42.0084] <bakkot>
Mathieu Hofman: for the Promise.resolve constructor lookup, see https://github.com/tc39/proposal-faster-promise-adoption/issues/1

[13:49:53.0256] <littledan>
For the notes: every time someone says "object dot proto", they mean Object.prototype, right? Not Object.__proto__

[13:50:01.0518] <bakkot>
currently the check is `IsPromise(p) && p.constructor === C`; I think it should be `IsPromise(p) && GetPrototypeOf(p) === C.prototype`

[13:50:07.0052] <littledan>
* For the notes: every time someone says "object dot proto", they mean `Object.prototype`, right? Not `Object.__proto__`

[13:50:30.0595] <bakkot>
GetPrototypeOf usually triggers user code, but can't trigger user code once you pass the IsPromise test

[13:53:13.0977] <Mathieu Hofman>
Yes this is when the "SafePromiseResolve" issue came up last time

[13:54:16.0549] <nicolo-ribaudo>
Are firefox use counters public, with a list of example websites, like Chrome's?

[13:55:04.0843] <Mathieu Hofman>
I basically want to make this check into a "SafePromiseResolve" that fast path promises that do not re-enter, and delay by one tick the ones that may. Then anyone can use that operation, possibly even `await`.

[13:55:51.0309] <Mathieu Hofman>
That's not sufficient if someone overrides `%PromisePrototype%` properties

[13:56:01.0662] <bakkot>
isn't it?

[13:56:03.0529] <Mathieu Hofman>
* That's not sufficient if someone overrides `%PromisePrototype%` `then` and `constructor` properties

[13:56:14.0226] <bakkot>
Promise.resolve does not do a lookup of `.then` on things which pass that check

[13:56:39.0235] <Mathieu Hofman>
It does for `constructor` if I recall.

[13:56:54.0383] <bakkot>
Right, it does `IsPromise(p) && p.constructor === Promise`

[13:57:21.0737] <bakkot>
but if we make it `IsPromise(p) && GetPrototypeOf(p) === C.prototype` then it would not do anything user-observable (on real promises)

[13:57:29.0433] <bakkot>
and I bet we can get away with that

[13:57:50.0359] <bakkot>
this also applies to `await` since it uses the same machinery

[13:58:22.0574] <bakkot>
and `await`  also does not do an actual `.then` lookup at all, it just does a PromiseResolve and then uses the built-in PerformPromiseThen

[13:58:28.0766] <Mathieu Hofman>
`defineProperty(`Promise.prototype`, 'constructor', {get() {} }})`

[13:58:38.0140] <Mathieu Hofman>
* `defineProperty(Promise.prototype, 'constructor', {get() {} }})`

[13:58:45.0710] <Mathieu Hofman>
* `defineProperty(Promise.prototype, 'constructor', {get() {} })`

[13:58:55.0400] <bakkot>
I don't know what that's intended to be a response to

[13:59:08.0031] <bakkot>
I am proposing to change the machinery so nothing ever looks at `.constructor`

[13:59:23.0394] <snek>
what constitutes a brand check

[13:59:32.0831] <snek>
like what granularity 

[13:59:36.0838] <snek>
there are so many ways to organize objects

[13:59:49.0756] <nicolo-ribaudo>
A sync side-effect-free way to tell wether an object has a particular internal slot or not

[13:59:51.0093] <Mathieu Hofman>
Oh, if you think that's web compatible

[14:00:01.0075] <nicolo-ribaudo>
* A sync side-effect-free way to tell wether an object has a particular internal slot or not, for any slot

[14:00:11.0227] <snek>
for *every* internal slot?

[14:00:16.0045] <bakkot>
I give it reasonable odds

[14:00:35.0163] <bakkot>
since the only thing that happens if something starts failing the check is that they get another microtask tick

[14:00:42.0247] <nicolo-ribaudo>
Well, a brand check is for _one_ internal slot, and Jordan would like every internal slot to have a brand check

[14:00:57.0788] <snek>
yeah i mean my question is what the consensus applied to

[14:01:10.0425] <snek>
because there are a lot of internal slots, how does one decide which ones are relevant in this case

[14:01:39.0436] <sffc>
Frank is ill, and I will now be presenting his slides on Intl Locale Info. Rob Palmer Chris de Almeida ryzokuken 

[14:01:55.0301] <Mathieu Hofman>
Yeah I just need to think through the different cases of "subclassing" that the constructor check is meant to handle. 

[14:02:08.0825] <ryzokuken>
hope he recovers soon, thanks for the heads up

[14:02:20.0617] <ljharb>
every internal slot that has observably different behavior, i suppose

[14:02:35.0818] <Mathieu Hofman>
Anyway, I'd be happy with anything that allows anyone (spec or user code) to stop triggering sync code during Promise.resolve

[14:02:47.0438] <ljharb>
and luca's comment seems somewhat related, in that it relates to the overarching goal throughout ES6 of making DOM objects JS-implementable

[14:02:55.0190] <ljharb>
* and luca's comment seems somewhat related, in that it relates to the overarching committee goal throughout ES6 of making DOM objects JS-implementable

[14:03:17.0614] <bakkot>
I am very firmly convinced that the goal of making host things 100% doable in userland was a mistake

[14:03:27.0154] <bakkot>
that gave us Symbol.concatSpreadable and etc

[14:04:09.0117] <bakkot>
_mostly_ doable in userland is good but I think it's probably OK if you can't polyfill this particular behavior?

[14:04:27.0582] <ljharb>
i'm not personally invested in implementable in userland, fwiw

[14:04:27.0707] <bakkot>
like, people probably aren't going to start relying on being able to stick `.then` on your polyfilled webIDL thing

[14:04:39.0733] <ljharb>
are there no webIDL thenables?

[14:04:49.0190] <bakkot>
don't think so

[14:04:50.0423] <ljharb>
because being able to implement one of those seems important for engines implemented in JS?

[14:04:52.0670] <ljharb>
* because being able to implement one of those seems important for engines implemented in JS, if so

[14:04:53.0008] <James M Snell>
if it's not doable in JS then there are a ton of web platform APIs that node.js, deno, etc would have a difficult time implementing this for

[14:05:31.0721] <snek>
though engines implemented in js have their own object graph, so its kind of a moot point

[14:05:33.0287] <bakkot>
I think for node etc you could just have a built-in thing to mark objects as special in this way, and then mark them?

[14:05:46.0049] <bakkot>
as long as V8 exposes this as a bit you can set on an arbitrary object

[14:05:50.0234] <James M Snell>
Such built-in things become rather expensive from a perf cost

[14:06:11.0596] <bakkot>
hm, ok

[14:06:15.0143] <James M Snell>
anything that requires calling down into C++ becomes rather expensive in aggregate

[14:06:56.0408] <bakkot>
it could take a list of objects and just do a single call, if the concern is the number of times you cross the language barrier

[14:06:59.0176] <ljharb>
ones 100% implemented in JS yes, but not in eg node where they use JS to augment (and sometimes polyfill) standard features not implemented in JS

[14:07:06.0555] <shu>
do you need to mark objects often?

[14:07:06.0785] <Andreu Botella>
> <@jasnell:matrix.org> anything that requires calling down into C++ becomes rather expensive in aggregate

there's no reason V8 couldn't have a built-in that gives access to an object containing a lot of internal APIs that can be called from JS

[14:07:10.0049] <shu>
is it like, per instance?

[14:07:51.0182] <shu>
...why... would we do this?

[14:07:58.0526] <canadahonk>
fyi chairs I'm good to present math.clamp from now for scheduling

[14:08:03.0593] <James M Snell>
well, it's not *just* node.js itself. Also thinking about user-land provided polyfills of standardized apis 

[14:09:20.0407] <James M Snell>
at the very least, it seems we have consensus that there's a problem to address here. I think there's likely multiple ways to address it but I want to make sure we do not prematurely take JS polyfillability off the table

[14:10:00.0308] <canadahonk>
is it fine to do the login form twice or if not could someone dm the meeting link?

[14:10:31.0904] <bakkot>
how important do you think it is to be able to polyfill this specific weird behavior? because it feels not that important to me

[14:10:36.0615] <ljharb>
yes, it's fine to do it multiple times

[14:10:57.0415] <ljharb>
i mean hermes still needs to polyfill `Promise.resolve` for react native

[14:10:59.0804] <ljharb>
* i mean hermes still needs to polyfill `Promise.resolve` for react native, using JS

[14:11:18.0090] <James M Snell>
having experienced this issue before *with* a userland polyfilled implementation, I'd personally say it's important

[14:11:52.0607] <ljharb>
* i mean hermes still needs to polyfill `Promise.resolve` for react native, using JS, so they'd need it

[14:12:18.0242] <snek>
technically this does exist, there's a kitchen sink object called the "extras binding"

[14:12:33.0992] <James M Snell>
oh god, please don't expose this to users

[14:12:53.0505] <shu>
snek: for me it's like, can you, with a straight face, say a thing is intended to be a thenable? if not, it'd be nice if we disallowed it to be a thenable at a language level

[14:12:54.0785] <Chengzhong Wu>
it triggers an emotion to see "how important to be spec compliant" in a tc39 channel

[14:13:22.0074] <bakkot>
well like I don't think people should be trying to polyfill `document.all`

[14:13:25.0898] <bakkot>
the language has a lot of weird corners

[14:13:35.0622] <snek>
well with a straight face i would say that modules aren't intended to be thenable. but idk how many people agree with me on this

[14:13:37.0225] <ljharb>
(+1 that subclassing builtins was a mistake)

[14:14:04.0123] <bakkot>
I definitely agree but that ship has sailed

[14:14:08.0269] <bakkot>
we can't now make them not-thenable

[14:14:11.0590] <snek>
* well with a straight face i would say that modules aren't intended to be thenable. but idk how many people agree with me on this (well if anything, based on my original proposal being rejected, i know people don't agree with me)

[14:14:19.0329] <Ashley Claymore>
`.constructor.name.match(/promise|defer/i)`

[14:14:19.0530] <bakkot>
but we did for deferred namespace objects at least

[14:15:17.0239] <ljharb>
i'd love it if we used null proto more aggressively for new spec-created objects; it seems like it'd avoid a whole class of problems

[14:15:33.0105] <snek>
time to merge the `extends null` spec pr?

[14:16:10.0839] <rbuckton>
FYI on terminology, a "thenable" is any object with a `then` method, regardless as to whether it is a promise or matches the Promise/A+ specification. i.e., if `typeof x.then === "function"` it's a "thenable". Being a "thenable" doesn't make it Promise-like.

[14:16:40.0902] <snek>
i'm aware

[14:16:44.0003] <bakkot>
I want this but weren't there still unresolved questions?

[14:17:50.0722] <littledan>
yeah, the PR didn't work at all

[14:18:32.0019] <snek>
the pr /works/, people just don't agree on the behavior

[14:19:02.0497] <rbuckton>
I only mention it because I've been running afoul of developers making the wrong assumption, or assuming the meaning of "thenable" has changed over the years. I'm mostly making the point so it's on the record in the chat log.

[14:19:11.0379] <snek>
like we have a set of test cases (which you can read in the proposal), which delegates don't agree on the output of, or at least didn't last time it was brought up

[14:19:15.0325] <snek>
* like we have a set of test cases (which you can read in the pr), which delegates don't agree on the output of, or at least didn't last time it was brought up

[14:21:27.0706] <ljharb>
as i recall, the options atm are either:
1. `class extends null` not necessarily statically, but `super` is an error in what is syntactically a derived class
2. `class extends null` not necessarily statically, and `super` is a noop

(and i think also either option, but "only statically")

and i think both options had a number of folks whom received an "ick" from it

[14:22:05.0689] <ljharb>
* as i recall (disclaimer: i haven't read the PR in years), the options atm are either:

1. `class extends null` not necessarily statically, but `super` is an error in what is syntactically a derived class
2. `class extends null` not necessarily statically, and `super` is a noop

(and i think also either option, but "only statically")

and i think both options had a number of folks whom received an "ick" from it

[14:22:25.0970] <ljharb>
* as i recall (disclaimer: i haven't read the PR in years), the options atm are either:

1. `class extends null` not necessarily statically, but `super` is an error in what is syntactically a derived class
2. `class extends null` not necessarily statically, and `super` is a noop

(and i think also either option, but "only statically")

and i think each option had a number of folks whom received an "ick" from it

[14:23:02.0636] <nicolo-ribaudo>
Wow reading through that PR I really dislikes what some comments are proposing

[14:23:21.0844] <eemeli>
We're skipping the break?

[14:23:41.0528] <nicolo-ribaudo>
* Wow reading through that PR I really dislike what some comments are proposing

[14:24:01.0468] <ryzokuken>
the break is delayed

[14:24:11.0076] <ryzokuken>
we'll break for 30 at the end of this presentation

[14:24:18.0998] <nicolo-ribaudo>
Charis can you update the agenda item on tcq?

[14:24:35.0576] <ryzokuken>
done, thanks

[14:24:40.0299] <bakkot>
https://github.com/tc39/ecma262/pull/1321 is the `class extends null` PR

[14:24:46.0660] <bakkot>
in case anyone else wants to have opinions

[14:24:55.0419] <bakkot>
or clean it up and bring it back :D

[14:25:49.0474] <snek>
i'm happy to bring it back if people agree on something

[14:25:54.0496] <Rob Palmer>
(Personal opinion) Just going back to the Decorators browser stalemate of "willing-to-ship-but-not-be-first", it makes me worry a tiny bit about the quality of signal Stage 3 is sending to non-browsers.  If it gets unblocked, there's no worry.  If it remains blocked or gets demoted, we will have unfortunately transferred risk to TypeScript that has followed our process and shipped the proposal - which has been a major churn for users of the older version of TS Stage 1 Decorators.

[14:25:55.0769] <snek>
can't solve a paradox

[14:25:56.0766] <Rob Palmer>
  Maybe we could report on developer usage experience from Decorators TS to help inform/motivate browsers to begin shipping.

[14:26:47.0044] <snek>
well until they are open about why they're not shipping it, its kind of unclear what report they need, if any

[14:28:45.0090] <littledan>
This feature does not need to be a speedup to be useful, IMO. (Good to avoid false claims here though)

[14:29:24.0911] <bakkot>
I can't believe css shipped clamp in a different order than every other language

[14:29:32.0382] <bakkot>
that is such a bizarre developer-hostile decision

[14:30:02.0000] <snek>
i didn't know people put min after max

[14:30:06.0773] <bakkot>
is TabAtkins here, can we complain to him

[14:30:09.0445] <bakkot>
* is TabAtkins here, can we complain to them

[14:30:32.0186] <littledan>
CSS should have meeting minutes where they discussed this at some point...

[14:31:41.0942] <bakkot>
apparently a fairly common complaint https://github.com/w3c/csswg-drafts/issues/11427

[14:35:44.0320] <nicolo-ribaudo>
The minutes are at https://github.com/w3c/csswg-drafts/issues/2519#issuecomment-387803089. It seems like it was for alignment with a CSS function that ended up not actually existing (minmax with 3 arguments)

[14:35:57.0296] <bakkot>
uuuuuuuuuuuugh

[14:36:01.0133] <Michael Ficarra>
nice

[14:36:13.0651] <TabAtkins>
What up

[14:36:41.0817] <bakkot>
`clamp` has the wrong argument order, it is different from every other language, this probably means we can't have `Math.clamp`

[14:36:51.0104] <bakkot>
* css `clamp` has the wrong argument order, it is different from every other language, this probably means we can't have `Math.clamp`

[14:37:08.0516] <nicolo-ribaudo>
The question would be "does JS align with CSS, or with all the other non-web languages"

[14:37:09.0050] <snek>
the prior art used in this is painful

[14:37:14.0940] <TabAtkins>
As the issue says, there's both precedents

[14:37:34.0961] <shu>
i thought dbaron had adopted gen z slang but i see that `fr` is a unit :(

[14:38:56.0416] <nicolo-ribaudo>
`new Math.Clamper(min, max).clamp(value)`

[14:39:27.0462] <TabAtkins>
With hindsight, I agree the weight of precedent goes with val first

[14:39:37.0702] <ljharb>
`fr` fr

[14:39:50.0361] <ryzokuken>
`(new (new Math.ClamperFactory(min))(max)).clamp(val)`

[14:40:02.0541] <snek>
`NumberConstrainmentBuilder`

[14:40:12.0477] <ryzokuken>
problem solved

[14:40:20.0496] <ljharb>
don't forget the MathFactory

[14:40:32.0175] <kriskowal>
`BigMath`

[14:40:40.0899] <bakkot>
please take shitposting to tdz

[14:41:32.0299] <littledan>
I just don't think it's so useful to overthink this kind of thing

[14:41:41.0665] <littledan>
* I just don't think it's so useful to overthink this kind of thing (re sffc's comment)

[14:42:15.0682] <littledan>
hindsight? you just shipped this just now!

[14:42:29.0587] <littledan>
(anyway we've been there before)

[14:42:49.0817] <TabAtkins>
We resolved on it six years ago

[14:42:57.0987] <bakkot>
clamp is pretty old at this point https://developer.mozilla.org/en-US/docs/Web/CSS/clamp

[14:43:02.0479] <bakkot>
unfortunately...

[14:43:13.0820] <TabAtkins>
Anyway do the obvious thing in JS 

[14:43:32.0806] <TabAtkins>
Css round() looks nothing like Math.round either

[14:44:21.0722] <bakkot>
fair point!

[14:44:39.0387] <TabAtkins>
Really it's only on the simplest of cases (single argument, or all arguments semantically identical) that we match

[14:45:01.0690] <ljharb>
eemeli: only the ones that start with "to" :-p this one wouldn't

[14:45:31.0855] <eemeli>
It would still be a very radical change.

[14:45:50.0879] <TabAtkins>
Css even fixed JS's dumb mistake with mod() (but still shipped the bad behavior as rem())

[14:46:34.0834] <bakkot>
if we end up shipping rem with the other behavior that would be very funny

[14:46:47.0410] <ljharb>
i'm not sure it'd be "radical" - does anybody have the expectation that "all methods on a thing always return the same kind of thing"?

[14:46:48.0827] <TabAtkins>
I mean JS doesn't name either of them

[14:46:55.0288] <TabAtkins>
So that would be a self own 

[14:47:09.0316] <ljharb>
i'd expect people call one method, and don't know or care about the ones they aren't calling

[14:47:35.0664] <TabAtkins>
And I *did* do significant name research to settle on mod/rem as the name pair 

[14:49:01.0132] <bakkot>
someone used to push regularly for us to add those

[14:49:06.0247] <bakkot>
... possibly Brendan actually?

[14:50:31.0465] <TabAtkins>
We still should!

[14:51:11.0431] <snek>
Symbol.clamp

[14:51:15.0358] <snek>
* System.clamp

[14:51:33.0010] <ljharb>
sffc: being aligned on the motivation is for stage 1. are you objecting to that?

[14:51:33.0112] <eemeli>
Given that we already have `Math.min` and `Math.max`, I don't see how anything other than `Math.clamp` would be better.

[14:51:57.0936] <ljharb>
the main reason i see is that it'd also allow `BigInt.prototype.clamp`

[14:52:08.0942] <ljharb>
* the main reason i see is that it'd also allow `BigInt.prototype.clamp` (and i guess that it resolves the argument ordering question)

[14:52:11.0314] <TabAtkins>
Yeah please do Math.clamp(v, min, max), y'all

[14:52:30.0793] <ljharb>
what would the bigint clamp be then?

[14:52:39.0391] <bakkot>
`BigInt.clamp` 

[14:52:43.0590] <nicolo-ribaudo>
The reason I like a proposal for this is that there is a 50% chance to forget "when doing max(min(...), ...), I need to pass the min to max and the max to min". A built-in function for this is motivated if it makes it easier to pass the right number in the right place

[14:52:50.0634] <ljharb>
then y no `Number.clamp`?

[14:52:58.0768] <bakkot>
because Math is the namespace for the number stuff

[14:53:04.0216] <TabAtkins>
Oh, I'm not in the meeting at I didn't see the context. But yeah sure, BigInt.clamp()

[14:53:11.0262] <snek>
Math.clamp(number|bigint) pls

[14:53:13.0977] <TabAtkins>
And yeah, Math has precedent

[14:53:21.0697] <eemeli>
I think the question about clamping bigints needs to be answered simlutaneously with min() and max() for bigints.

[14:53:36.0922] <bakkot>
those also go on BigInt

[14:53:51.0581] <TabAtkins>
Or the "three bigint arguments" on Math. +1 to eemeli: 

[14:54:07.0348] <ljharb>
and in a world where we also have decimal, suddenly all the Math stuff "should" really be on Number, and Math is just weird legacy baggage?

[14:54:26.0381] <bakkot>
I think Number will always be privileged relative to any other numeric types

[14:54:27.0839] <snek>
are bigints not math

[14:54:29.0868] <bakkot>
so it is ok that it gets two namespaces

[14:54:38.0942] <littledan>
BigInts are not math

[14:54:45.0130] <bakkot>
re: `Math.max(bigint)`, https://github.com/tc39/proposal-bigint-math/issues/23#issuecomment-1275893064

[14:54:49.0548] <bakkot>
I think this is very compelling

[14:54:51.0322] <ljharb>
ah, but `3n + 4n` works

[14:55:00.0740] <bakkot>
> `1n + Math.max(...list)` will throw a TypeError if `list === []`

[14:55:46.0204] <snek>
1 + Math.max(...list) is -Infinity, is that more helpful in practice

[14:56:11.0321] <snek>
* 1 + Math.max(...list) is -Infinity, is that more helpful in practice (not that it isn't the correct thing to return)

[14:56:31.0321] <bakkot>
it's not necessarily more helpful but it is what your code is already designed for

[14:56:42.0098] <bakkot>
and unexpectedly getting a TypeError is pretty weird

[14:56:49.0264] <bakkot>
I don't like the return types of functions to depend on the types of their inputs

[14:56:57.0945] <bakkot>
* also, seperately, I don't like the return types of functions to depend on the types of their inputs

[14:57:01.0580] <bakkot>
* also, separately, I don't like the return types of functions to depend on the types of their inputs

[14:57:09.0138] <nicolo-ribaudo>
I did not mention it because throw-away objects are probably bad, but `Math.max(value, { min, max })` would also be a reasonable option

[14:57:12.0961] <nicolo-ribaudo>
* I did not mention it because throw-away objects are probably bad, but `Math.clamp(value, { min, max })` would also be a reasonable option

[14:57:23.0096] <snek>
but i think at a very high level if we want to continue to separate things out, prototype methods is a probably my preferred solution. cuz then `(a, b) => a.min(b)` works for any numeric types

[14:58:27.0948] <TabAtkins>
> <@nicolo-ribaudo:matrix.org> I did not mention it because throw-away objects are probably bad, but `Math.clamp(value, { min, max })` would also be a reasonable option

Note that the css clamp accepts "none" for its min/max arguments, so that would be a more consistent functionality

[14:59:01.0495] <snek>
this makes me wish again that js had named arguments, separate from option bags

[14:59:10.0095] <TabAtkins>
Allows you to optionally clamp either side without having to either branch your function name or supply infinity

[14:59:58.0147] <rbuckton>
`Math.BigInt.{ min, max, clamp, ...}` is always an option. It's a bit odd to have `Number`-related methods on `Math` but `BigInt` related methods on `BigInt`.

[15:00:00.0421] <eemeli>
Have we actually considered named arguments and dismissed them at some point?

[15:00:25.0589] <TabAtkins>
Yes, sorta

[15:00:34.0905] <TabAtkins>
It's fallen on syntax grounds

[15:01:08.0160] <rbuckton>
In the same vein, `Math.Decimal.{ min, max, clamp, ... }`...

[15:08:42.0087] <TabAtkins>
Specifically, the two obvious syntaxes are `foo(arg1: v)` and `foo(arg1=v)`, and both are problematic.

[15:09:47.0617] <Richard Gibson>
moar punctuation: `foo(arg1:: v)`

[15:09:47.0906] <rbuckton>
I thought it had fallen on "we already have `{ arg1: v }`" grounds

[15:10:56.0754] <rbuckton>
`foo(arg1=v)` definitely is, but why is `foo(arg1: v)` problematic? Something like `foo(arg1:= v)` would work too

[15:11:21.0048] <rbuckton>
Though in some languages, `:=` means "bind and initialize"

[15:11:25.0807] <TabAtkins>
while I was typing it i could recall what was bad about `arg:val`, actually

[15:11:30.0836] <TabAtkins>
* while I was typing it i couldn't recall what was bad about `arg:val`, actually

[15:11:43.0622] <TabAtkins>
i suspect it is just that object bags take the air out of the room

[15:13:03.0544] <rbuckton>
Except that they're extremely inefficient.

[15:13:13.0325] <TabAtkins>
oh yeah they're bad, i agree

[15:13:55.0008] <TabAtkins>
maybe `arg:val` was just becuas eof its nearness to the trinary operator being potentially confusing

[15:14:55.0785] <rbuckton>
C# has both `foo(arg1: x)` and `?:`, it's not especially confusing, IMO.

[15:15:09.0320] <Richard Gibson>
URL fragment directives use `:~:`; we can't do worse than that

[15:15:11.0689] <rbuckton>
Especially since arg binding can only happen at the start of an argument.

[15:16:56.0731] <rbuckton>
Named arguments was an issue that partial application ran up against. Partial application only wants to bind Argument positions, and `foo(x, { y: ? })` is not a valid Argument position, while `foo(x, y: ?)` would be.

[15:18:29.0188] <Ashley Claymore>
a little similar with parameter decorators, they don't work in the same vein for object-bag-as-named-argument-pattern

[15:20:47.0480] <eemeli>
I would find named arguments like `foo(arg: value)` to correspond rather well with the way we can already use `foo({ arg: value })`.

[15:21:46.0734] <TabAtkins>
yeah, it probably is the most natural syntax for js

[15:24:14.0563] <rbuckton>
I think the biggest issue with named arguments is that parameter names aren't preserved in the face of `.bind` and method replacement via decorators.

[15:25:07.0983] <TabAtkins>
i mean, they could be. it's unobservable right now.

[15:25:22.0213] <TabAtkins>
(source visibility doesn't contradict this)

[15:25:58.0099] <rbuckton>
`.bind` could. Decorators could not, not without additional reflection over the method being decorated and some way to dynamically define named arguments.

[15:27:18.0988] <TabAtkins>
tho Python gets by without having either of those preserve names, because it has *args and **kwargs

[15:27:49.0462] <bakkot>
named parameters working automatically (without opt-in from the callee) would break all minifiers which would be kind of a shame

[15:27:49.0577] <TabAtkins>
so a decorator can just take and pass `(*args, **kwargs)` and preserve the arg name beahvior

[15:28:12.0302] <littledan>
I want to repeat my request to the meeting organizers that we enable recording and publishing as a pattern for any presentation

[15:28:14.0549] <bakkot>
`arguments.named`

[15:28:32.0270] <littledan>
it is a very good practice, for transparency and inclusion

[15:28:43.0806] <littledan>
thank you Mark for bringing it in here

[15:29:05.0203] <bakkot>
fwiw I strongly dislike having any public recordings of my voice (though there is at least one now)

[15:29:15.0792] <bakkot>
but would feel somewhat awkward about personally opting out of recording my presentations every single time

[15:29:48.0483] <rbuckton>
for example:
```js
function ignore() {}
function dec(t, c) {
  return ignore
}
class C {
  @dec a(x) {}
  @dec b(y) {}
}
```
`a` and `b` both end up with the same function for the method.

[15:29:56.0222] <bakkot>
I guess we could have some practice of automatically overdubbing but that would be a lot more process

[15:29:59.0722] <kriskowal>
opt-in to record sgtm

[15:30:19.0814] <kriskowal>
opt-out to not-record sbtm

[15:30:33.0193] <rbuckton>
So yeah, named arguments would need to be passed along somehow.

[15:31:28.0641] <ljharb>
fwiw i am concerned about ephemeral spirited in-group discussion, or attempted whimsy in a slide deck, becoming like a conference talk that people can critique forever even as cultural standards shift

[15:31:40.0190] <ljharb>
* fwiw i am concerned about ephemeral spirited in-group discussion, or attempted whimsy spoken aloud, becoming like a conference talk that people can critique forever even as cultural standards shift

[15:31:50.0235] <ljharb>
* fwiw i am concerned about ephemeral spirited in-group discussion, or attempted whimsy spoken aloud, becoming like a conference talk that people can critique forever even as cultural standards shift. opt-in only covers that tho.

[15:32:30.0024] <ljharb>
* fwiw i am concerned about ephemeral spirited in-group discussion, or attempted whimsy spoken aloud, becoming like a conference talk that people can critique forever even as cultural standards shift. opt-in-only covers that tho.

[15:32:34.0603] <bakkot>
I don't think anyone was proposing recording the discussion, just the presentations

[15:32:44.0303] <littledan>
yes, this would be opt-in. (but generally I think the things which look bad in retrospect were already bad at the time.)

[15:33:53.0243] <kriskowal>
otoh, apologizing to forty people is tractable in a way that apologizing to everyone is not

[15:35:12.0410] <eemeli>
Yeah, that does make it sound like it'd break the web.

[15:35:29.0782] <bakkot>
well, not as we usually use the term

[15:36:09.0696] <bakkot>
but it would be pretty annoying for developers and also probably make all websites much larger eventually once the minifiers updated to preserve parameter names

[15:36:18.0027] <bakkot>
* but it would be pretty annoying for developers and also probably make all websites some amount larger eventually once the minifiers updated to preserve parameter names

[15:36:54.0925] <snek>
there are a lot of identifiers they have to preserve anyway

[15:37:10.0359] <Michael Ficarra>
there are?

[15:37:15.0830] <Michael Ficarra>
just `eval`

[15:37:17.0528] <Michael Ficarra>
what else?

[15:37:23.0331] <bakkot>
property names

[15:37:30.0676] <bakkot>
and options bag names

[15:37:34.0098] <Michael Ficarra>
those aren't identifiers, get out of here

[15:38:00.0774] <snek>
🤨 https://gc.gy/d5e67b97-d268-455e-8e3c-9d99b62e7208.png

[15:38:13.0641] <snek>
* 🤨 https://gc.gy/20c632fb-3230-4795-babd-ed57b11c0b22.png

[15:38:35.0092] <bakkot>
IdentifierName is, to be fair, technically not Identifier

[15:39:50.0016] <rbuckton>
imports from packages not bundled, exports exposed to end users, globals

[15:53:40.0713] <littledan>
FWIW I wouldn't mind normative text, requiring that hosts respect the immutability of immutability array buffers (but the assert reading makes sense too)

[15:58:14.0667] <bakkot>
I would probably do something like

> NOTE: Because canonical numeric index properties of a TypedArray backed by an immutable ArrayBuffer are nonconfigurable and nonwritable, the [essential object invariants](link goes here) mean that hosts are prohibited from modifying the values in an immutable ArrayBuffer by any means.

[15:58:36.0973] <waldemar>
If an assert failure makes the spec normatively incorrect, then an assert cannot be informative. Informative text cannot make a spec inconsistent.

[15:59:05.0961] <bakkot>
Why not?

[15:59:13.0391] <littledan>
but, it's text that implies no normative requirements on implementations


2025-02-19
[16:00:07.0645] <waldemar>
I just stated the reason. The definition of "informative" is any text that can be removed without affecting the normative parts of the spec.

[16:00:34.0032] <waldemar>
An assert doesn't fall into that category if it can make a spec normatively inconsistent.

[16:00:34.0749] <bakkot>
Informative text being incorrect seems like it definitionally means the spec is inconsistent.

[16:00:52.0713] <shu>
and assert failure does not make the spec normatively incorrect, it makes it incoherent. incorrect/correct as a category doesn't even arise because it's malformed

[16:01:14.0868] <littledan>
this was very fast advancement for such a significant proposal

[16:01:25.0136] <rbuckton>
An Assertion is a statement that the asserted condition is the only possible state based on how the algorithm is used elsewhere in the specification. It is essentially informative because its absence would have no impact on the spec itself, so long as the spec is coherent.

[16:01:27.0226] <littledan>
(I think that's a good thing -- we're able to act efficiently when it's a good idea)

[16:01:34.0438] <waldemar>
Incorrect = malformed in my comment above.

[16:01:48.0598] <shu>
i see, well, its removal still doesn't affect the malformedness

[16:01:58.0280] <shu>
the spec remains malformed if the only removal is the assert

[16:02:17.0078] <waldemar>
Yes, it does, because the spec might become well-formed with removal of asserts.

[16:02:57.0475] <littledan>
interestingly, the C++ standards committee is currently working through a similar epistemological debate, but at the level of assertions in source code -- should they execute? I heard they decided that the mode is determined by compiler flags (...a very different language philosophy from ours)

[16:03:09.0689] <littledan>
* interestingly, the C++ standards committee is currently working through a similar epistemological debate, but at the level of contracts in source code -- should they execute? I heard they decided that the mode is determined by compiler flags (...a very different language philosophy from ours)

[16:03:32.0467] <James M Snell>
excited to see immutable arraybuffers advancing. There are definitely a number of web API specs that will need to be updated to account for them. I mentioned Web Crypto crypto.randomValues() but BYOB ReadableStream is the other big one. That will need to be updated to reject immutable buffers on reader.read(buf). 

[16:03:45.0689] <canadahonk>
I plan to use compiler flags for whether to include spec asserts or not (I have none currently)

[16:04:21.0912] <James M Snell>
TextEncode encodeInto is another

[16:05:01.0699] <shu>
i guess the nuance here is the assert tells a story about the intended property of the spec. if it doesn't hold, we say the spec is malformed in the sense that the intention doesn't hold. it could be brought back into well-formedness by changing the intent (which is necessarily not reflectable within the text, only tacit). more often, we don't change the intention doesn't change, and it turns out the there is a bug in the spec

[16:05:19.0318] <shu>
* i guess the nuance here is the assert tells a story about the intended property of the spec. if it doesn't hold, we say the spec is malformed in the sense that the intention doesn't hold. it could be brought back into well-formedness by changing the intent (which is necessarily not reflectable within the text, only tacit). more often, we don't change the intention, and it turns out the there is a bug in the spec

[16:05:26.0834] <shu>
* i guess the nuance here is the assert tells a story about the intended property of the spec. if it doesn't hold, we say the spec is malformed in the sense that the intention doesn't hold. it could be brought back into well-formedness by changing the intent (which is necessarily not reflectable within the text, only tacit). more often, we don't change the intention, and it turns out there is a bug in the spec

[16:06:11.0200] <bakkot>
those fall out to SetValueInBuffer, so probably the fix is to update WebIDL to do something else? or make SetValueInBuffer fallible, though that would be a shame

[16:06:17.0622] <bakkot>
https://webidl.spec.whatwg.org/#arraybuffer-write is the relevant thing I think

[16:06:29.0249] <bakkot>
but we definitely need tests as well

[16:06:53.0979] <littledan>
I hope web integration can look into where immutable arraybuffers can be a benefit in some cases, e.g., by avoiding certain cloning when used.

[16:07:03.0513] <shu>
yes, WebIDL is good to call out to see how they want to go

[16:07:13.0279] <shu>
maybe they want an attribute to require buffer sources to be immutable

[16:07:39.0586] <bakkot>
also there are places which take a buffer as an argument and they do a defensive copy

[16:07:42.0969] <bakkot>
and should be updated to not do that

[16:08:16.0689] <shu>
though that's... mostly fine

[16:08:20.0609] <shu>
you can just as-if that away

[16:08:23.0590] <snek>
if an immutable arraybuffer can't be detached, copying it can just be not-copying it

[16:08:28.0785] <snek>
* if an immutable arraybuffer can't be detached, copying it can just be implemented as not-copying it

[16:08:38.0855] <TabAtkins>
Like I said, Python gets by without this happening explicitly, because it has *args and **kwargs, and it's common practice for decorators to make the wrapper function they return take `(*args, **kwargs)` and then call the inner function with the same. That preserves passed function names, without needing the runtime to actually track function names across decorator boundaries. We'd need to add the same to JS, I think, to do named args.

[16:09:10.0211] <littledan>
yes, I think this is important. Even if it's formally just an editorial change, calling out in various specs where they can avoid work in the case of immutable ArrayBuffers makes it more likely that browsers will implement the optimization.

[16:09:28.0948] <bakkot>
I think probably this consists of finding the places which refer to https://webidl.spec.whatwg.org/#dfn-get-buffer-source-copy and updating them

[16:09:31.0115] <rbuckton>
Python also has explicit syntax in the parameter list to denote named vs positional arguments

[16:09:34.0681] <shu>
also agreed there. the amount of as-if optimizations happening on the web spec side is surprisingly little, compared to JS algorithms

[16:09:58.0386] <littledan>
right, people are more likely to implement line-by-line there

[16:10:02.0691] <TabAtkins>
only recently (by default, all args are passable by both index and name), and that doesn't affect the pattern I mentioned anyway

[16:10:33.0961] <TabAtkins>
(but I do think we could apply Python's lessons and go ahead and add "index only" and "name only" arglist section, like they do)

[16:10:48.0682] <kriskowal>
As much as I love this feature of Python when writing Python, I think I would prefer to maintain JavaScript’s rustic aesthetic, rather than rewalk the path to realizing Python needed a delimiter between positional arguments and positional arguments that are eligible to be interpreted as kwargs.

[16:11:59.0174] <TabAtkins>
sure, JS having *just* index-only and name-only is a potential future I think woudl be okay, and means there would be a syntax opt-in for named args so minifiers wouldn't need to change by default

[16:12:20.0619] <TabAtkins>
(you'd have to write `function foo(posarg, **, kwarg1, kwarg2)`)

[16:12:24.0568] <TabAtkins>
or similar

[16:13:56.0974] <kriskowal>
I find it clearer to continue `function foo(posarg, {kwarg1, kwarg2} = {})`.

[16:14:19.0192] <kriskowal>
Given the degree of difference in practice.

[16:14:48.0333] <TabAtkins>
and that's the exact argument that's blocked it in the past ^_^

[16:16:20.0359] <littledan>
it's kind of annoying that keyword arguments have to take place at a particular indexed position... makes it harder to add positional arguments over time, but maybe that's OK.

[16:16:42.0420] <littledan>
but I'm not sure whether it'd be worth it to introduce a whole other named argument system

[16:17:00.0473] <littledan>
just seems like a lot of work

[16:17:08.0918] <Jesse (TC39 🇺🇸)>
`function foo(posarg1 ；{kwarg1, kwarg2} = {} ；posarg2)`

[16:17:47.0037] <TabAtkins>
as has been stated, the lack of named arguments is a minor blocker in a number of dimensions, but it's only a very minor improvement in the base case, so it's harder to argue for since the extra stuff can be dismissed more easily.

[16:19:56.0891] <Erik Marks>
This is a conspiracy by Big ESLint to add more rules to ESLint

[16:20:16.0324] <ljharb>
hey who told you about big eslint

[16:21:03.0657] <Jesse (TC39 🇺🇸)>
for fans only: look again at those semicolons

[16:21:32.0731] <bakkot>
fun fact `for` is a valid function name

[16:21:58.0087] <bakkot>
`function for(x; y=y+1; z) {}`

[16:22:11.0408] <nicolo-ribaudo>
Which JavaScript are you talking about

[16:22:42.0528] <bakkot>
jesse's thing above

[16:22:53.0485] <bakkot>
the `function foo(posarg1 ；{kwarg1, kwarg2} = {} ；posarg2)` one

[16:23:00.0368] <ljharb>
`const f = { for() {} }['for'];` :-P but `function for() {}` is a syntax error

[16:23:30.0620] <snek>
wrong javascript

[16:23:33.0522] <bakkot>
ugh

[16:23:44.0073] <bakkot>
yeah it needs to be a method not a declaration

[16:23:46.0820] <Ashley Claymore>
```
for(of of of);
```

[16:23:47.0315] <bakkot>
I always get that wrong

[16:24:35.0049] <snek>
this is one thing that really bothers me about rust, let me name fields `if` and `return` and such

[16:24:43.0754] <bakkot>
```
class X {
  for(x; y=y+1; z) {}
}
```

[16:24:55.0427] <snek>
not being able to have a field named `type` is enormously annoying. everyone uses `typ` or `r#type`

[16:25:27.0949] <bakkot>
I think that sailed once `await` became an operator which is indistinguishable from property access

[16:25:44.0507] <snek>
i love it and i hate it

[16:26:02.0206] <Richard Gibson>
feedback welcome: https://github.com/tc39/proposal-immutable-arraybuffer/pull/44

[16:26:04.0078] <bakkot>
it's grown on me

[16:32:36.0750] <bakkot>
waldemar re: "ToString is not unique" the spec does allow the last digit to vary, but I'm not sure if any implementations actually differ

[16:32:49.0225] <bakkot>
I think we might be able to fully specify it and thereby resolve that specific issue

[16:33:28.0170] <shu>
is the goal here round-tripping a string representation? and the thing that's stopping people from relying on that because we have some leeway technically?

[16:33:36.0534] <shu>
* is the goal here round-tripping a string representation? and the thing that's stopping people from relying on that is because we have some leeway technically?

[16:34:13.0943] <snek>
it sounds like the goal is "can this string be represented as a number" but semantic misunderstanding or disagreement about what "can be represented" means

[16:34:51.0032] <waldemar>
The problem here is that it's impossible to define a Number-to-String conversion such that the resulting string satisfies isSafeNumeric

[16:34:54.0293] <shu>
yeah, if the "can this be represented" means mathematical value that is... not useful

[16:35:36.0712] <Michael Ficarra>
oh I remember what I wanted to say: it seems inconsistent to say that larger integral values are not "safe" for this purpose

[16:35:45.0678] <Michael Ficarra>
doesn't make any sense

[16:36:37.0063] <littledan>
these sound like reasons to iterate on the definition (significantly) and maybe add a number-to-string-safe operation, but it feels like the stated motivations hold

[16:36:44.0629] <bakkot>
Is it? I think if our ToString fully specified the last digit it would work. The spec previously had a bad definition of isSafeNumeric but under the `MV(string) = MV(ToString(ToNumber(string))` I think it's coherent? Or at least the obvious examples like 0.1 don't fail.

[16:37:28.0946] <Michael Ficarra>
> <@devsnek:matrix.org> it sounds like the goal is "can this string be represented as a number" but semantic misunderstanding or disagreement about what "can be represented" means

yeah I think a lot of lay-people think "can be represented" means "the float represents this number only", which... just isn't the case

[16:37:32.0686] <bakkot>
It is very specific to our specific ToString but afaict that's what they're asking for

[16:37:53.0497] <littledan>
oh! yes, that didn't occur to me

[16:38:04.0692] <waldemar>
The definition of MAX_SAFE_INTEGER is that it's the largest Number x such that x+1 is representable exactly. But Number("0.00000000000000000000000000000025") + 1 is 1, while "0.00000000000000000000000000000025" is considered "safe" by this.

[16:38:11.0109] <Michael Ficarra>
> <@littledan:matrix.org> these sound like reasons to iterate on the definition (significantly) and maybe add a number-to-string-safe operation, but it feels like the stated motivations hold

I think the motivations are so confused, it's hard to say whether they hold or not

[16:38:51.0752] <littledan>
well, I wonder what we should do about the problem space (floats are confusing with respect to value-preserving conversion to/from string)

[16:39:22.0075] <kriskowal>
I would want this problem to be solved with a bank of functions that apply to specific number domains, e.g., `String.representsSafeInteger`, `String.representsSafeNumber`, `String.representsSafeBigInt`, which is less forgiving that the corresponding constructor or parse functions.

[16:39:33.0095] <Michael Ficarra>
> <@littledan:matrix.org> well, I wonder what we should do about the problem space (floats are confusing with respect to value-preserving conversion to/from string)

there's probably interesting things to think about here, but I don't yet see a specific problem being identified

[16:39:36.0160] <bakkot>
oh, yes, I think that conflating this with MAX_SAFE_INTEGER is just incoherent and that part of the proposal should be removed

[16:39:46.0346] <waldemar>
An example that fails: 10000000000000000 cannot be converted to any string for which isSafeNumeric, as defined in the presentation, returns true.

[16:39:48.0588] <littledan>
programmers definitely don't tend to think about floats as a range of underlying reals, even if that's the most sensible way to understand them. The MV tends to correspond more closely to the intuition, I think

[16:39:49.0464] <bakkot>
at least as I understand the proposal it is strictly about round-tripping values, not about doing arithmetic on them

[16:40:49.0586] <ljharb>
`+String(10000000000000000) === 10000000000000000` is true, am i missing some zeroes?

[16:41:08.0636] <ljharb>
i 100% agree that most programmers think about numerical syntax as if they're mathematical values

[16:41:10.0051] <rbuckton>
`string === ToString(ToNumber(string))` isn't the same as `MV(string) === MV(ToString(ToNumber(string)))` given that `MV("1.0")` and `MV("1.00")`  are the same mathematical values but different strings?

[16:41:16.0295] <bakkot>
`10000000000000000 > Number.MAX_SAFE_INTEGER`

[16:41:37.0759] <ljharb>
aha, that's a fair point, decimal/trailing zero normalization, as well as leading zeroes, would be different

[16:41:48.0839] <ljharb>
is that the problem statement here, dealing with those kinds of things?

[16:41:53.0022] <rbuckton>
I think the `MV` is to handle that normalization.

[16:42:02.0210] <snek>
this is likely why they reached for MV, but MV is not exactly that

[16:43:34.0236] <rbuckton>
I assume the goal of `isSafeNumeric` is to validate that the input string can be accurately represented as a `Number` without loss? It can probably be specified more directly.

[16:43:49.0185] <Richard Gibson>
I feel like this is missing a problem statement that differentiates it from https://xkcd.com/927/

[16:43:52.0436] <shu>
we're debating what the champion considers "without loss"

[16:43:57.0738] <waldemar>
When printing a Number into a string that satisfies isSafeNumeric you also have the issue of what to print for things like 1e40 or 1e-30, since this thing rejects exponential notation.

[16:44:12.0146] <shu>
because as strictly read, 0.1 fails (as do 0.2, 0.3 etc)

[16:44:25.0124] <bakkot>
no longer true

[16:44:27.0552] <Jesse (TC39 🇺🇸)>
I wonder if the use cases for this proposal are basically covered by decimal, in that one would just use decimals rather than numbers, but guarded (possibly many times) with `Number.isSafeNumeric`

[16:44:28.0121] <bakkot>
that was true but they fixed it

[16:44:33.0409] <shu>
oh how did they fix it?

[16:44:41.0133] <bakkot>
it's the thing on the screen

[16:44:43.0373] <Michael Ficarra>
see the current slide

[16:44:50.0499] <bakkot>
`MV(string) = MV(ToString(ToNumber(string))`

[16:44:51.0670] <shu>
ah

[16:44:55.0148] <bakkot>
that passes for the string `"0.1"`

[16:45:13.0438] <shu>
yeah then i'm back to jordan's question

[16:45:18.0815] <Michael Ficarra>
I just don't see what passing that is *useful* for

[16:45:19.0716] <shu>
why not do the string roundtripping...?

[16:46:26.0145] <bakkot>
well, consider the input string ".00000000000000000000001"

[16:46:46.0809] <canadahonk>
import attributes has been merged into the spec 🎉 (https://github.com/tc39/ecma262/pull/3057)

[16:47:13.0971] <snek>
its really hard to propose any particular behavior without understanding the intention more

[16:47:35.0646] <ljharb>
true, if you accept inconsistently formatted strings as input, then doing the normalization yourself is hard

[16:47:36.0401] <bakkot>
".00000000000000000000001" toStrings to `1e-23` so it does not satisfy `string === ToString(ToNumber(string)`

[16:48:07.0014] <ljharb>
* ~true, if you accept inconsistently formatted strings as input, then doing the normalization yourself is hard~ oh you weren't talking about the leading zero, nvm

[16:48:07.0479] <shu>
i see, thanks

[16:49:07.0133] <bakkot>
that said if you reject `"1e-23"` as input I'm not sure how you're supposed to produce values which are accepted by this

[16:49:10.0250] <bakkot>
I guess `toFixed`?

[16:49:47.0810] <Michael Ficarra>
> <@canadahonk:matrix.org> import attributes has been merged into the spec 🎉 (https://github.com/tc39/ecma262/pull/3057)

JSON modules incoming

[16:49:53.0183] <bakkot>
though it's hard to know how many digits to use

[16:49:58.0522] <shu>
so the thing i heard was an app would choose to represent input as a double, or to use a userland library. that seems kinda wild to me

[16:50:26.0989] <shu>
to choose representation at runtime like that, given floating point arithmetic

[16:53:28.0111] <shu>
i... don't know how to disentangle that problem statement from "i wish we didn't have floats"

[16:53:35.0483] <rbuckton>
Michael Ficarra: Not when validating input

[16:54:18.0790] <Chris de Almeida>
did Michael Ficarra press the forbidden button?

[16:54:51.0274] <Michael Saboff>
He jumped ahead, is that what the forbidden button does?

[16:55:18.0191] <Chris de Almeida>
`I'm done speaking` is the forbidden button.  otherwise I don't know how the queue jumped

[16:55:20.0733] <Michael Ficarra>
I think he means as if you did the maths on reals

[16:56:37.0280] <Michael Saboff>
Chris de Almeida: Note that I don’t have the forbidden button on my TCQ page.

[16:56:44.0007] <snek>
possible tg5 topic: understanding how ieee754 works

[16:56:52.0240] <Chris de Almeida>
you do if you're currently the one on the queue

[16:57:13.0763] <Chris de Almeida>
meaning 'Speaking`

[16:57:18.0368] <Chris de Almeida>
* meaning `Speaking\`

[16:57:24.0269] <Chris de Almeida>
* meaning `Speaking`

[16:57:36.0376] <Michael Saboff>
> <@softwarechris:matrix.org> you do if you're currently the one on the queue

Should I press it 😏

[16:57:51.0875] <Erik Marks>
Why is the button forbidden?

[16:57:57.0014] <rbuckton>
Slide 4 seems like the clearest example to me. `0.1234567890123456789` cannot be accurately represented in `Number` as it truncates to `0.123456789012345678`. Similarly, `9007199254740993` cannot be represented.

[16:57:58.0026] <Michael Ficarra>
I'm about to adblock the button

[16:58:19.0423] <shu>
rbuckton: suppose you can accurately represent something. what do you do with that number then?

[16:58:19.0580] <Michael Ficarra>
assuming Chrome still permits me to do that

[16:58:30.0091] <shu>
or i suppose, what do you do with that string

[16:58:47.0623] <nicolo-ribaudo>
There is a race condition between you pressing it and the chairs pressing it for you. If the speed at which the chair's signal to stop pressing travels from their eyes to their brain is slower than the hand movement, they are going to press it for the person after

[16:58:48.0505] <Michael Ficarra>
> <@rbuckton:matrix.org> Slide 4 seems like the clearest example to me. `0.1234567890123456789` cannot be accurately represented in `Number` as it truncates to `0.123456789012345678`. Similarly, `9007199254740993` cannot be represented.

see snek's comment above about what "can be represented" means

[16:58:57.0673] <rbuckton>
For me, if it can be accurately represented, the function returns true. If it can't you inform the user (hence the use case for input validation)

[16:59:10.0995] <nicolo-ribaudo>
* There is a race condition between you pressing it and the chairs pressing it for you. If the speed at which the chair's neurons signal to stop pressing travels from their eyes to their brain is slower than the hand movement, they are going to press it for the person after

[16:59:37.0175] <shu>
if it returns true, what do you do with the input?

[17:00:08.0276] <rbuckton>
A better approach, were we to keep the button, would be to just notify the chair that the user is finished.

[17:00:19.0030] <littledan>
Should we do breakout sessions at the end of the meeting? https://github.com/tc39/Reflector/issues/552

[17:00:50.0604] <shu>
would it be possible to have AV support for each breakout session for remote attendees?

[17:00:58.0827] <rbuckton>
You use it? Beyond validating the input, its up to the developer to determine if it can then be safely used with other mathematical operations.

[17:01:06.0963] <littledan>
Yeah, we should be able to do that

[17:01:18.0817] <shu>
i am highly skeptical of that claim

[17:01:21.0444] <littledan>
but we'd probably keep note-taking informal

[17:03:24.0609] <rbuckton>
It can be used for relational comparison at the least, and serialized via JSON. 

[17:03:49.0207] <Jesse (TC39 🇺🇸)>
I think the challenge is that you're stuck in the binary64 world; stuck in that world, things are safe and if you say things aren't safe, you have no recourse to a safe alternative

[17:04:15.0181] <Andreu Botella>
please everyone take a look at the transcription if you have time

[17:04:33.0655] <Andreu Botella>
at some points I was the only one helping with the notes, and I definitely missed a lot of stuff at various points

[17:06:03.0235] <Ashley Claymore>
thanks Andreu Botella !

[17:07:47.0418] <Chris de Almeida>
thank you for your help!  if you ever find that we are not keeping up with the notes properly, please raise a `Point of Order`, so we can pause to rectify 🙏

[17:21:43.0029] <Chris de Almeida>
many thanks to our note takers today 👏👏👏👏👏👏

Andreu Botella
Daniel Ehrenberg
Jesse Alama
Linus Groh
Oliver Medhurst
Shane Carr


[22:17:13.0018] <bakkot>
littledan or whoever else is interested: here's my doc for avoiding allocations in engines for the iterator protocol https://docs.google.com/document/d/1M5S-u3N3vQkVBGFCoaYt_ABPGl0EW16QQrvDBaY2FiE/edit?tab=t.0

[00:55:46.0169] <eemeli>
I missed the isSafeNumeric discussion due to being asleep at the time. If it gets a continuation, it'd be nice if it was earlier rather than later, but that's of course unlikely (mini-rant: For the last few years 4/6 TC39 meetings have been on North American timezones, with 2/6 on Pacific Time. This is not friendly to remote-participation from Europe. It'd be a little bit friendlier if at least the remote PDT meeting was moved to EDT or even further East).

So posting the comments here that I'd have mentioned out loud had I been there:
- I'm generally positive on enabling a developer to verify that WYSIWYG applies to their numeric string.
- I'm not sure that "safe" is the right word here, though we do already have `Number.isSafeInteger`. I was thinking that "precise" or "canonical" could be more apt. The attachment point could also be different, as all of the pre-existing `Number.is*` functions require their input to be a number.
- This seems to correlate very highly with the goals of Decimal, which, if accepted, would also expand the set of strings for which JS can provide a "safe" numerical representation. That proposal is specifically looking to improve the representation of values coming from the real world or elsewhere, which seems like the same domain as this.

[01:04:49.0138] <rkirsling>
interesting. if it's not good for Europe then it'd literally only work for the Americas

[01:07:27.0976] <rkirsling>
* interesting. if it's not good for Europe then it'd literally only work for the Americas
(...though I think you just mean that the last couple hours don't work, which is much better than the entire meeting not working)

[01:44:44.0742] <eemeli>
I'm on Eastern European Time, and this week's meetings start at 20:00 and end at 03:00 for me. I'm used to having plenty of calls with folks on Pacific Time, but those are all scheduled for the morning there; TC39 calls take up the whole day. Comparatively, a meeting on US Eastern Time ends at my midnight, which is still bad but not as horrible.

I do understand the benefits of running the meetings at different times, and the ones in Europe or Asia are about as much fun for North American participants, but it's the regularity of having all of the virtual meetings on North American timezones _and_ having one of them on Pacific Time that seems a bit extra.

[07:08:47.0086] <mgaudet>
(Sorry for late reply just finally getting through backchannel) Sadly, no. In principle I wish they were, but public front end for this has yet to be resourced. We do have -much- public telemetry data (https://glam.telemetry.mozilla.org), but Use Counters specifically don't have a public front end (and I currently have to make my own dashboard for every use counter probe). 

[08:39:13.0834] <Michael Ficarra>
you know, one way we might be able to resolve the "safe numeric string" proposal is for the champion to give us a large list of sample strings and whether they are "safe" and we work backwards from there to try to figure out what they mean

[08:42:46.0540] <Chris de Almeida>
ZiJian Liu: ☝️

[09:59:32.0439] <littledan>
Please nominate breakout session topics here: https://github.com/tc39/Reflector/issues/552

[10:06:00.0795] <bakkot>
it feels somewhat odd to use decimal numbers with imperial units

[10:06:24.0763] <bakkot>
no one says "1.375 inches", it's always "1 3/8 inches"

[10:07:18.0783] <nicolo-ribaudo>
Are those fractions always with a power of 2 as the denominator?

[10:07:58.0203] <snek>
no, they switch to thousandths 

[10:08:15.0922] <littledan>
and sometimes they are thirds!

[10:09:02.0561] <snek>
i'm a huge fan of unit apis. durations and sizes especially in computers.

[10:09:10.0541] <bakkot>
usually powers of 2 though

[10:09:16.0507] <bakkot>
thousandths are mostly only used by machinists

[10:09:37.0282] <Chris de Almeida>
*machinidths

[10:09:37.0441] <ljharb>
i've seen thirds for volumes, but usually for lengths i think i only really see powers of 2?=

[10:09:37.0955] <bakkot>
a thousandth of an inch is pronounced a "thou" and is arguably its own unit

[10:09:38.0665] <ljharb>
* i've seen thirds for volumes, but usually for lengths i think i only really see powers of 2

[10:09:48.0704] <snek>
i mean no one uses 128ths of inches

[10:10:07.0487] <ljharb>
* i've seen thirds for volumes (like ⅓ cup, etc), but usually for lengths i think i only really see powers of 2

[10:14:41.0091] <canadahonk>
whoever else is doing notes y'all are killing it

[10:14:43.0080] <Michael Ficarra>
> <@bakkot:matrix.org> thousandths are mostly only used by machinists

not just used by machinists but also those who employ them, writing specs and tolerances for parts/materials

[10:14:59.0620] <canadahonk>
* whoever else is doing notes y'all are killing it ❤️

[10:15:37.0394] <littledan>
yeah the captioners this meeting are amazing

[10:15:42.0357] <Michael Saboff>
I have woodworking tools that are capable of 1/128” adjustments.

[10:16:36.0687] <Michael Saboff>
And I have used that precision.

[10:17:32.0660] <Rob Palmer>
For folk wanting to attend the SeattleJS Community event in-person on Thursday evening, please respond to [this poll about the NDA requirement.](https://github.com/tc39/Reflector/issues/547#issuecomment-2669412895)
❄️

I need to provide the count and names of delegates by midday today in order to stand a chance of getting an exemption.

[10:19:05.0779] <Michael Saboff>
For some specialties, they’d say 20 thousandths.  

[10:21:12.0091] <Michael Ficarra>
Measure seems more appropriate for 402

[10:21:51.0295] <littledan>
I wouldn't be opposed to this, but worth considering why Temporal should be in 262 and Measure in 402

[10:23:44.0877] <snek>
...i thought temporal was in 402

[10:23:54.0410] <shu>
what are the applications and developers who want to use measure?

[10:24:09.0219] <Michael Ficarra>
> <@devsnek:matrix.org> ...i thought temporal was in 402

Temporal is in a proposal

[10:24:23.0758] <snek>
yeah i mean a proposal for 402

[10:24:34.0861] <littledan>
it's been proposed for addition to 262. The editors should say something if they want it to land in 402 instead...

[10:24:38.0844] <canadahonk>
i thought it was split between basically what needs/doesn't need CLDR

[10:24:40.0694] <Duncan MacGregor>
Think I’ll need to catch up on this committee meeting tomorrow via the notes. Trying to attend remotely in a different time zone is just too tiring after a full day of work.

[10:24:42.0379] <shu>
it's kinda split, some data-dependent stuff _are_ in 402. bulk of it is in 262

[10:25:13.0230] <canadahonk>
at least with test262 there is a load of tests not in 402

