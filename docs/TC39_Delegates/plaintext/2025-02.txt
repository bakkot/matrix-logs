2025-02-03
[10:33:34.0590] <nicolo-ribaudo>
Reading through https://news.ycombinator.com/item?id=42876840, it seems like the most wanted proposals are Records&Tuples and pattern matching

[10:59:20.0837] <littledan>
Let's do both of them!

[15:53:29.0839] <Rob Palmer>
It looks like we will get a **Community Event in Seattle** on the evening of **Thursday 20th February.**  Please can folk who are attending volunteer some talks!

- [**Call For Speakers**](https://github.com/tc39/Reflector/issues/550)

SeattleJS are asking us to provide all the content for the evening, so I hope we can deliver lots of exciting talks.


2025-02-05
[17:17:59.0577] <Mathieu Hofman>
Does anyone know why we decided not to look for private fields on the prototype chain of any object? This somewhat came up in 2 different proposal discussions lately: https://github.com/tc39/proposal-class-access-expressions/issues/26 and https://github.com/ljharb/proposal-error-stack-accessor/issues/3 (the latter is for a internal slot but same idea)

[17:21:16.0610] <Mathieu Hofman>
It would likely break a ton of  "brand checks" use cases, but really there isn't an easy way to even create a helper to search the prototype chain as one cannot get a "ref" for the private field.

[17:22:14.0304] <Mathieu Hofman>
* It would likely break a ton of  "brand checks" use cases, but the problem is that there isn't any way to even create a helper to search the prototype chain as one cannot get a "ref" for the private field.

[00:11:46.0608] <Ashley Claymore>
the helper would need to take a callback: `(o) => #p in o`

[06:26:14.0849] <littledan>
It's hard/impossible to truly preserve privacy while also working with prototype chains, especially if you want to stick strictly to object-like semantics and not invent on a new thing. Also, the SES crowd insisted on WeakMap analogy semantics in particular, which has no prototype chain walk.

[08:47:27.0208] <ljharb>
also if it used the prototype chain then they wouldn’t be private fields, they’d be public ones, because anything can extend anything else at any time

[08:47:38.0688] <ljharb>
* also if it used the prototype chain then they wouldn’t be _private_ fields, they’d be public ones, because anything can extend anything else at any time

[08:54:50.0475] <littledan>
well, the space of possibilities is large, but yeah we had trouble finding a mechanism that would preserve privacy, have inheritance *and* have a number of other properties that people were interested in

[12:39:40.0329] <Ashley Claymore>
> <@ljharb:matrix.org> also if it used the prototype chain then they wouldn’t be _private_ fields, they’d be public ones, because anything can extend anything else at any time

And wouldn't have been able to minify them with so much confidence. Local lexical lookup is great for AOT transforms 


2025-02-06
[19:00:39.0895] <Ashley Claymore>

Realising this wasn't about matching other private fields with the same, so the name of the field would all still be local and still minifiable.
it's more that the lookup would have fewer guarantees. Because proxies, walking the proto chain could have side effects and give different answers.
so couldn't assume AOT things like `#p in v === #p in v`

[02:02:06.0779] <Mathieu Hofman>
Yeah the fact that looking up a private field cannot trigger any user code is a nice property. Combined with the fact you wouldn't know which object the value came from is probably sufficient reason for this to have been the right choice.


2025-02-07
[07:49:25.0188] <nicolo-ribaudo>
This is super early, however — a few of us will be taking the train to go to the A Coruña meeting in May (mostly from NL and UK). If anybody traveling from somewhere in western Europe wants to join us please write me a message by the end of February :)

[09:55:25.0724] <Rob Palmer>
- **Reminder:**  The Feb 2025 Plenary deadline for Stage Advancement is in 24 hours!


2025-02-11
[17:14:45.0064] <shu>
do i read RegExp.escape correctly that it doesn't care about lone surrogates? it'll just escape them?

[17:28:11.0708] <bakkot>
yeah

[17:28:43.0991] <bakkot>
I don't know if that means "doesn't care" since it does explicitly handle them

[17:29:09.0286] <bakkot>
but it handles them by escaping them

