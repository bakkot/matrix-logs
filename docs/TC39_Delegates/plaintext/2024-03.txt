2024-03-05
[12:06:06.0070] <Rob Palmer>
The Interest Survey for the Helsinki June Plenary Meeting has been posted ðŸŽ‰

- https://github.com/tc39/Reflector/issues/525

Finland is famous for Aurora Borealis, the happiest people in the world, very clean tap water, Fazer chocolate, and saunas being mandatory as per buildings regulations.

Please add yourself - it only takes 30s to complete. Responses are requested by Tuesday 12th March.


2024-03-06
[22:54:46.0995] <rkirsling>
oh interesting

[22:55:18.0884] <rkirsling>
browsers are unified in not supporting https://github.com/tc39/test262/blob/main/test/language/expressions/assignment/S11.13.1_A7_T3.js

[22:55:44.0764] <rkirsling>
do I smell another web reality PR opportunity

[23:00:18.0612] <bakkot>
rkirsling: https://github.com/tc39/ecma262/issues/2659

[23:01:02.0950] <bakkot>
actually that's a slightly different issue

[23:01:18.0121] <bakkot>
anyway yes there's some web reality bugs here

[23:01:32.0795] <bakkot>
if you want to figure out the actual semantics in engines and write those down, please do

[23:07:16.0074] <rkirsling>
will put that on my list right after I fix our double-eval of `p` in `o[p] += foo`

[23:08:32.0851] <rkirsling>
(which V8 also does, but that seems "obviously wrong" enough to go ahead and fix)

[23:08:41.0362] <rkirsling>
 * will put that on my list right after I fix JSC's double-eval of `p` in `o[p] += foo`

[23:08:48.0814] <rkirsling>
 * will put that on my list right after I fix our (JSC's) double-eval of `p` in `o[p] += foo`

[23:15:30.0815] <bakkot>
see also https://github.com/tc39/ecma262/issues/1224

[23:15:44.0512] <bakkot>
and https://github.com/tc39/ecma262/issues/467

[23:25:40.0450] <rkirsling>
oh, related to the latter: this is now landed :)
https://github.com/WebKit/WebKit/pull/25158

[23:26:04.0993] <rkirsling>
 * oh, related to the latter: this is now landed :)
https://github.com/WebKit/WebKit/commit/9b945bdd8d46d2755cb115acb4596b3ed14d97eb

[00:02:32.0359] <rkirsling>
...yeah so extending that to `o[p] += 1` was trivial lol

[00:02:33.0956] <rkirsling>
but

[00:02:42.0793] <rkirsling>
 * ...yeah so extending that to `o[p] += 1` was just a copy-paste job lol

[00:03:59.0767] <rkirsling>
what's tricky is that if `o[p] = f()` evaluates `p` before `f` (as it does everywhere, regardless of the double-eval)

[00:04:29.0953] <rkirsling>
then arguing that `o[p] = f()` _should_ evaluate `f` first seems unlikely

[00:04:35.0195] <rkirsling>
probably should just fix it

[00:04:41.0732] <rkirsling>
 * probably should just update impls

[00:05:00.0388] <rkirsling>
(short of it breaking websites, anyway)

[00:05:33.0025] <rkirsling>
 * (short of it breaking websites, which certainly could happen, being web reality and all)

[00:08:30.0033] <rkirsling>
 * what's tricky is that if `o[p] += f()` evaluates `p` before `f` (as it does everywhere, regardless of the double-eval)

[00:44:28.0837] <rkirsling>
...er well, I guess the argument for reality is "get LHS, eval RHS, do operation, set LHS" vs. "eval RHS, set LHS"

[00:44:49.0125] <rkirsling>
and the argument for spec is "but they look so similar"

[07:38:18.0247] <Rob Palmer>
The Interest Survey for the Helsinki June Plenary Meeting has been posted ðŸŽ‰

- https://github.com/tc39/Reflector/issues/525

Finland is famous for Aurora Borealis, the happiest people in the world, very clean tap water, Fazer chocolate, and saunas being mandatory as per buildings regulations.

Please add yourself - it only takes 30s to complete. Responses are requested by Tuesday 12th March.


2024-03-08
[23:42:03.0086] <rkirsling>
> <@rkirsling:matrix.org> ...yeah so extending that to `o[p] += 1` was just a copy-paste job lol

...he said prematurely, before realizing that we needed a new bytecode op in order to not tank the perf of `arr[i]++` and `arr[i] += 1`

[23:43:10.0430] <rkirsling>
> <@bakkot:matrix.org> if you want to figure out the actual semantics in engines and write those down, please do

anyway I think I'm gonna create a new issue for `o[p] = f()` because I'm not seeing it covered precisely elsewhere

[01:12:34.0250] <rkirsling>
done https://github.com/tc39/ecma262/issues/3295

[09:11:01.0161] <Rob Palmer>
The Interest Survey for the Helsinki June Plenary Meeting has been posted ðŸŽ‰

- https://github.com/tc39/Reflector/issues/525

Finland is famous for Aurora Borealis, the happiest people in the world, very clean tap water, Fazer chocolate, and saunas being mandatory as per buildings regulations.

Please add yourself - it only takes 30s to complete. Responses are requested by Tuesday 12th March.


2024-03-10
[11:30:40.0242] <Michael Ficarra>
is anybody else going to be at Wasm I/O this week?


2024-03-12
[06:23:16.0258] <dminor>
For anyone interested in speaking at the standardization session at Future Frontend (https://futurefrontend.com/, the conference occurring the Thur/Fri of the Helsinki plenary), please get in touch with me, I'm trying to pull together a proposed schedule to share with the organizers.

[06:23:58.0023] <dminor>
The session is 90 minutes, the organizers would like a 30 minute panel, so we have space for 60 minutes of talks. I was originally thinking three 20 minute talks, but perhaps we could also do some 10 minute lightning talks as well.

[07:12:00.0837] <Michael Ficarra>
I might be able to put together 20 minutes about iterator helpers


2024-03-14
[11:42:46.0601] <littledan>
What is our current process with respect to web platform integration and the stage process? Do we need full web integration by stage 2.7, or Stage 3? Asking because AsyncContext seems almost ready for advancement to 2.7, with the one missing piece being full DOM integration (specifically, understanding which AsyncContext snapshot various callbacks are called in).

[11:44:45.0237] <littledan>
(significant progress has been made, but it's not at a complete conclusion that everyone can sign off on)

[11:51:04.0225] <littledan>
I think it'd make sense to be OK waiting for Stage 3 for fully final web integration; we as TC39 can conclude on the design and get to 2.7 (so the design has consensus from our perspective), but it might need to be demoted to Stage 2 if a "fatal flaw" is discovered during attempts at web integration. The existence of Stage 3 means that people won't get the wrong idea that it's too stable too early. (We have long asked for web integration for Stage 3, and regretted it when we didn't wait for that; it's not a requirement in the process document, but various committee members hold it up as a requirement on a case-by-case basis)

[11:51:40.0771] <littledan>
 * I think it'd make sense to be OK waiting for Stage 3 for fully final web integration [that is: full web integration is a requirement to get into Stage 3, and so it can still be under development during 2.7]; we as TC39 can conclude on the design and get to 2.7 (so the design has consensus from our perspective), but it might need to be demoted to Stage 2 if a "fatal flaw" is discovered during attempts at web integration. The existence of Stage 3 means that people won't get the wrong idea that it's too stable too early. (We have long asked for web integration for Stage 3, and regretted it when we didn't wait for that; it's not a requirement in the process document, but various committee members hold it up as a requirement on a case-by-case basis)

[11:52:56.0379] <littledan>
 * I think it'd make sense to be OK waiting for Stage 3 for fully final web integration \[that is: full web integration is a requirement to get into Stage 3, and so it can still be under development during 2.7\]; we as TC39 can conclude on the design and get to 2.7 (so the design has consensus from our perspective and we won't make non-implementation-feedback-driven changes), but it might need to be demoted to Stage 2 if a "fatal flaw" is discovered during attempts at web integration. The existence of Stage 3 means that people won't get the wrong idea that it's too stable too early. (We have long asked for web integration for Stage 3, and regretted it when we didn't wait for that; it's not a requirement in the process document, but various committee members hold it up as a requirement on a case-by-case basis)

[11:53:21.0642] <littledan>
 * I think it'd make sense to be OK waiting for Stage 3 for fully final web integration \[that is: full web integration is a requirement to get into Stage 3, and so it can still be under development during 2.7\]; we as TC39 can conclude on the design and get to 2.7 (so the design has consensus from our perspective and we won't make non-implementation-feedback-driven changes), but it might need to be demoted to Stage 2 if a "fatal flaw" is discovered during attempts at web integration. The existence of Stage 3 means that people won't get the wrong idea that it's too stable too early. (We have long asked for web integration as a requirement to enter Stage 3, and regretted it when we didn't wait for that; it's not a requirement in the process document, but various committee members hold it up as a requirement on a case-by-case basis)

[14:51:44.0800] <ljharb>
2.7 seems like a reasonable place to figure out web integration issues prior to signaling stability (earlier's better, obv)


2024-03-15
[09:35:35.0113] <dminor>
(I posted this in another thread, but I'll repeat it here for visibility)

For the AsyncContext proposal, I think I'd want to see host integration specified prior to stage 3. Off hand, this feels like ShadowRealms, where the host integration is a potential can of worms and it would be great to see the DOM side of things as soon as possible.

Since 2.7 signals ready for testing, and I'd want to see tests for affected DOM APIs as well, I think the host integration part needs to be specified prior to 2.7.

[10:19:23.0232] <littledan>
Definitely DOM tests are needed as an entry requirement to Stage 3, I agree. Does that also mean that the full specification of which DOM callback APIs call within which AsyncContext.Snapshot is needed before 2.7, or is it enough to do that, along with the tests, before 3?

[10:19:44.0510] <littledan>
(I'm honestly fine with the 2.7 conclusion, I just want to be unambiguous here)

[10:20:20.0583] <littledan>
(IIRC there was some sort of suggestion during last meeting that it was OK to finalize this just before Stage 3, but I can't find it in the notes; maybe I'm making it up)

[10:27:10.0235] <littledan>
Sounds like we're going with, Stage 2.7 is required for the whole DOM integration proposal, so that there is a good chance for reviews from the right engineers before we declare "stability"

[10:27:17.0553] <littledan>
I'm happy with this conclusion

