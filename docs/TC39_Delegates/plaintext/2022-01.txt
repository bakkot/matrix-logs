2022-01-05
[07:36:20.0739] <jschoi>
https://github.com/tc39/proposal-class-fields is still getting new comments despite it being Stage 4. It should get archived, right?

[07:43:41.0033] <Rob Palmer>
maybe ljharb (our Administrator-to-be) would like to handle that

[07:53:49.0672] <ljharb>
Yup, that is the first thing on my list


2022-01-06
[10:55:24.0433] <jschoi>
FYI, the State of JS people have reached out to TC39 at https://es.discourse.group/t/help-shape-the-contents-of-the-next-state-of-js-survey/1148 asking what sort of questions they should be asking for the upcoming community survey. This might be really useful.

[10:57:36.0268] <jschoi>
* FYI, the State of JS people have reached out to TC39 at https://es.discourse.group/t/help-shape-the-contents-of-the-next-state-of-js-survey/1148 asking what sort of questions they should be asking for the upcoming survey. This might be really useful.

[10:57:42.0056] <jschoi>
* FYI, the State of JS people have reached out to TC39 at https://es.discourse.group/t/help-shape-the-contents-of-the-next-state-of-js-survey/1148 asking what sort of questions they should be asking for the upcoming community survey. This might be really useful.

[10:58:18.0850] <jschoi>
Oh wait, I missed this already in the General chat, whoops.


2022-01-10
[22:54:10.0326] <ljharb>
i'd love a review here: https://github.com/tc39/notes/pull/176 if someone has a sec

[14:44:45.0192] <Michael Ficarra>
Aki bterlson Rob Palmer can one of you take a look at this invited expert issue? https://github.com/tc39/Admin-and-Business/issues/190

[14:45:29.0956] <Rob Palmer>
yep - I will get to it Michael - thank you for the reminder

[14:45:38.0394] <Michael Ficarra>
thanks so much Rob!


2022-01-15
[17:42:13.0315] <waldemar>
Only three proposals made today's deadline for possible advancement at this month's TC39 meeting. Looks like it's going to be a short meeting‚Ä¶

[09:17:48.0808] <ljharb>
i count 4 for advancement, but indeed there'll be a lot of time that could be filled with updates and discussions

[12:00:22.0129] <jschoi>
It might be worth offloading some of the chartered incubator topics into plenary, if there‚Äôs lots of room. https://github.com/tc39/incubator-agendas/issues/22


[12:00:22.0989] <jschoi>

https://github.com/tc39/process-document/pull/33 might also be worth discussing.


2022-01-18
[10:22:10.0438] <shu>
jschoi: agreed, i haven't had time to run any calls at all between last meeting and this one

[10:57:00.0403] <waldemar>
> <@ljharb:matrix.org> i count 4 for advancement, but indeed there'll be a lot of time that could be filled with updates and discussions

Ah, enum for stage 1 was in the "open-ended discussion category" instead of in the proposals.

[11:03:15.0680] <Justin Ridgewell>
I thought TC39 was this week‚Ä¶

[11:03:26.0610] <Justin Ridgewell>
Anyways, TCQ's SSL cert is expired.

[11:03:34.0367] <Justin Ridgewell>
We should fix that before plenary.

[11:03:41.0578] <Justin Ridgewell>
bterlson: ^

[12:52:00.0986] <Rob Palmer>
Bterlson is on it. 

[14:31:39.0444] <waldemar>
What is the "presentation from KAIST research group"? I'd like an idea of what we're planning on discussing for this item. It's hard to prepare or look at background materials without any idea what the topic is.

[14:45:22.0946] <Mathieu Hofman>
Here is a link to their publications: https://plrg.kaist.ac.kr/research/publications

Michael Ficarra might want to ask them if there is anything that might be relevant to look at before their presentation.

Also I believe they have an "as late as possible in the day" scheduling constraint. The 2-3 PM slot probably makes sense for them?

[15:01:18.0938] <bakkot>
waldemar: the most relevant papers are https://dl.acm.org/doi/10.1145/3324884.3416632 and https://ieeexplore.ieee.org/document/9402086


2022-01-19
[17:09:03.0610] <Michael Ficarra>
I've also asked them to post links to resources next to their agenda item once they are prepared

[17:14:25.0572] <Michael Ficarra>
from my invited expert proposal (https://github.com/tc39/Admin-and-Business/issues/187):

[17:14:34.0669] <Michael Ficarra>
> Reason for invitation: These researchers from KAIST presented their recently published works to the TC39 editor group. This work includes automatic generation of a reference implementation, automatic generation of a step-through debugger, and tools for helping editors to catch spec errors. We think this work would be useful to share more broadly with the rest of the committee in a plenary.

[14:07:28.0922] <bakkot>
jschoi: your agenda item for Array.fromAsync does not say it's going for stage 3

[14:07:45.0612] <bakkot>
so people might not be reviewing it in enough detail

[14:10:44.0277] <bakkot>
(the rules for advancement eligibility "Proposals looking to advance to stages 2, 3, or 4 must be added (**and noted as such**)" [emphasis added], so in principle someone can object to advancement on those grounds)

[14:15:27.0997] <bakkot>
also it's currently stage 2; the "stage" column is the stage it _is_, not going for

[14:34:47.0336] <ljharb>
oops

[14:36:16.0859] <ljharb>
i pushed up a change to that, under the assumption it's meant to be for stage 3. if that's not the intention, we can remove it; if someone missed it between the deadline and now due to the mislabeling, we can deal with that as part of the normal process in plenary

[14:36:59.0334] <Luca Casonato>
> <@bakkot:matrix.org> also it's currently stage 2; the "stage" column is the stage it _is_, not going for

Oh darn - I think enum and string split might be wrong too. Should both be 0 in that column then, right?

[14:37:22.0795] <ljharb>
yes, i'll fix those too

[14:37:36.0801] <Luca Casonato>
> <@ljharb:matrix.org> yes, i'll fix those too

thx :-)

[15:48:29.0268] <jschoi>
Yeah, my intent was to go for Stage¬†3. I marked it as such in the pull request but I forgot to add it to the table entry itself. My apologies. üôá


2022-01-24
[01:18:01.0927] <Jack Works>
üëÄ is there drafted agenda for this meeting so I can schedule my sleeping time? thanks!

[03:14:34.0838] <yulia>
jschoi: i have a dumb question, what if promise.all accepted async iterators and returned an array of values, instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async

[03:17:01.0295] <yulia>
 * jschoi: i have a dumb question, what if promise.all accepted async iterators (it already takes iterables), instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async

[05:28:57.0100] <Rob Palmer>
The draft schedule for today's meeting is now posted:  https://hackmd.io/s3ovtgLsTa-QAhFqYTl_YA

[05:29:06.0829] <Rob Palmer>
 * The draft schedule for today's meeting is now posted

[05:29:26.0725] <Rob Palmer>
 * The draft schedule for today's meeting is now posted: https://github.com/tc39/Reflector/issues/411

[05:31:48.0122] <Luca Casonato>
> <@robpalme:matrix.org> The draft schedule for today's meeting is now posted: https://github.com/tc39/Reflector/issues/411

Thanks! üôè

[07:59:53.0759] <jschoi>
> <@yulia:mozilla.org> jschoi: i have a dumb question, what if promise.all accepted async iterators (it already takes iterables), instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async

`Promise.all`‚Äôs current semantics involve parallel awaiting of input values. If some `input` yields `a, b, c`, then `Promise.all(input)` would first drain `input` into its three items `a, b, c`, and then it would simultaneously await `a, b, c`.

Parallel awaiting is impossible when getting values from async iterators; we must sequentially await the values. 

I think it would be quite confusing if `Promise.all` did parallel awaiting on sync inputs and sequential awaiting on async inputs. This is the similar to how it would be confusing if `for await` did parallel awaiting on sync inputs but sequential sequential awaiting on async inputs. Hopefully that makes sense.

[08:00:30.0717] <yulia>
I see, thanks!

