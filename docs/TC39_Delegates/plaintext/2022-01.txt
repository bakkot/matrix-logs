2022-01-05
[07:36:20.0739] <jschoi>
https://github.com/tc39/proposal-class-fields is still getting new comments despite it being Stage 4. It should get archived, right?

[07:43:41.0033] <Rob Palmer>
maybe ljharb (our Administrator-to-be) would like to handle that

[07:53:49.0672] <ljharb>
Yup, that is the first thing on my list


2022-01-06
[10:55:24.0433] <jschoi>
FYI, the State of JS people have reached out to TC39 at https://es.discourse.group/t/help-shape-the-contents-of-the-next-state-of-js-survey/1148 asking what sort of questions they should be asking for the upcoming community survey. This might be really useful.

[10:57:36.0268] <jschoi>
* FYI, the State of JS people have reached out to TC39 at https://es.discourse.group/t/help-shape-the-contents-of-the-next-state-of-js-survey/1148 asking what sort of questions they should be asking for the upcoming survey. This might be really useful.

[10:57:42.0056] <jschoi>
* FYI, the State of JS people have reached out to TC39 at https://es.discourse.group/t/help-shape-the-contents-of-the-next-state-of-js-survey/1148 asking what sort of questions they should be asking for the upcoming community survey. This might be really useful.

[10:58:18.0850] <jschoi>
Oh wait, I missed this already in the General chat, whoops.


2022-01-10
[22:54:10.0326] <ljharb>
i'd love a review here: https://github.com/tc39/notes/pull/176 if someone has a sec

[14:44:45.0192] <Michael Ficarra>
Aki bterlson Rob Palmer can one of you take a look at this invited expert issue? https://github.com/tc39/Admin-and-Business/issues/190

[14:45:29.0956] <Rob Palmer>
yep - I will get to it Michael - thank you for the reminder

[14:45:38.0394] <Michael Ficarra>
thanks so much Rob!


2022-01-15
[17:42:13.0315] <waldemar>
Only three proposals made today's deadline for possible advancement at this month's TC39 meeting. Looks like it's going to be a short meeting‚Ä¶

[09:17:48.0808] <ljharb>
i count 4 for advancement, but indeed there'll be a lot of time that could be filled with updates and discussions

[12:00:22.0129] <jschoi>
It might be worth offloading some of the chartered incubator topics into plenary, if there‚Äôs lots of room. https://github.com/tc39/incubator-agendas/issues/22


[12:00:22.0989] <jschoi>

https://github.com/tc39/process-document/pull/33 might also be worth discussing.


2022-01-18
[10:22:10.0438] <shu>
jschoi: agreed, i haven't had time to run any calls at all between last meeting and this one

[10:57:00.0403] <waldemar>
> <@ljharb:matrix.org> i count 4 for advancement, but indeed there'll be a lot of time that could be filled with updates and discussions

Ah, enum for stage 1 was in the "open-ended discussion category" instead of in the proposals.

[11:03:15.0680] <Justin Ridgewell>
I thought TC39 was this week‚Ä¶

[11:03:26.0610] <Justin Ridgewell>
Anyways, TCQ's SSL cert is expired.

[11:03:34.0367] <Justin Ridgewell>
We should fix that before plenary.

[11:03:41.0578] <Justin Ridgewell>
bterlson: ^

[12:52:00.0986] <Rob Palmer>
Bterlson is on it. 

[14:31:39.0444] <waldemar>
What is the "presentation from KAIST research group"? I'd like an idea of what we're planning on discussing for this item. It's hard to prepare or look at background materials without any idea what the topic is.

[14:45:22.0946] <Mathieu Hofman>
Here is a link to their publications: https://plrg.kaist.ac.kr/research/publications

Michael Ficarra might want to ask them if there is anything that might be relevant to look at before their presentation.

Also I believe they have an "as late as possible in the day" scheduling constraint. The 2-3 PM slot probably makes sense for them?

[15:01:18.0938] <bakkot>
waldemar: the most relevant papers are https://dl.acm.org/doi/10.1145/3324884.3416632 and https://ieeexplore.ieee.org/document/9402086


2022-01-19
[17:09:03.0610] <Michael Ficarra>
I've also asked them to post links to resources next to their agenda item once they are prepared

[17:14:25.0572] <Michael Ficarra>
from my invited expert proposal (https://github.com/tc39/Admin-and-Business/issues/187):

[17:14:34.0669] <Michael Ficarra>
> Reason for invitation: These researchers from KAIST presented their recently published works to the TC39 editor group. This work includes automatic generation of a reference implementation, automatic generation of a step-through debugger, and tools for helping editors to catch spec errors. We think this work would be useful to share more broadly with the rest of the committee in a plenary.

[14:07:28.0922] <bakkot>
jschoi: your agenda item for Array.fromAsync does not say it's going for stage 3

[14:07:45.0612] <bakkot>
so people might not be reviewing it in enough detail

[14:10:44.0277] <bakkot>
(the rules for advancement eligibility "Proposals looking to advance to stages 2, 3, or 4 must be added (**and noted as such**)" [emphasis added], so in principle someone can object to advancement on those grounds)

[14:15:27.0997] <bakkot>
also it's currently stage 2; the "stage" column is the stage it _is_, not going for

[14:34:47.0336] <ljharb>
oops

[14:36:16.0859] <ljharb>
i pushed up a change to that, under the assumption it's meant to be for stage 3. if that's not the intention, we can remove it; if someone missed it between the deadline and now due to the mislabeling, we can deal with that as part of the normal process in plenary

[14:36:59.0334] <Luca Casonato>
> <@bakkot:matrix.org> also it's currently stage 2; the "stage" column is the stage it _is_, not going for

Oh darn - I think enum and string split might be wrong too. Should both be 0 in that column then, right?

[14:37:22.0795] <ljharb>
yes, i'll fix those too

[14:37:36.0801] <Luca Casonato>
> <@ljharb:matrix.org> yes, i'll fix those too

thx :-)

[15:48:29.0268] <jschoi>
Yeah, my intent was to go for Stage¬†3. I marked it as such in the pull request but I forgot to add it to the table entry itself. My apologies. üôá


2022-01-24
[01:18:01.0927] <Jack Works>
üëÄ is there drafted agenda for this meeting so I can schedule my sleeping time? thanks!

[03:14:34.0838] <yulia>
jschoi: i have a dumb question, what if promise.all accepted async iterators and returned an array of values, instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async

[03:17:01.0295] <yulia>
 * jschoi: i have a dumb question, what if promise.all accepted async iterators (it already takes iterables), instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async

[05:28:57.0100] <Rob Palmer>
The draft schedule for today's meeting is now posted:  https://hackmd.io/s3ovtgLsTa-QAhFqYTl_YA

[05:29:06.0829] <Rob Palmer>
 * The draft schedule for today's meeting is now posted

[05:29:26.0725] <Rob Palmer>
 * The draft schedule for today's meeting is now posted: https://github.com/tc39/Reflector/issues/411

[05:31:48.0122] <Luca Casonato>
> <@robpalme:matrix.org> The draft schedule for today's meeting is now posted: https://github.com/tc39/Reflector/issues/411

Thanks! üôè

[07:59:53.0759] <jschoi>
> <@yulia:mozilla.org> jschoi: i have a dumb question, what if promise.all accepted async iterators (it already takes iterables), instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async

`Promise.all`‚Äôs current semantics involve parallel awaiting of input values. If some `input` yields `a, b, c`, then `Promise.all(input)` would first drain `input` into its three items `a, b, c`, and then it would simultaneously await `a, b, c`.

Parallel awaiting is impossible when getting values from async iterators; we must sequentially await the values. 

I think it would be quite confusing if `Promise.all` did parallel awaiting on sync inputs and sequential awaiting on async inputs. This is the similar to how it would be confusing if `for await` did parallel awaiting on sync inputs but sequential sequential awaiting on async inputs. Hopefully that makes sense.

[08:00:30.0717] <yulia>
I see, thanks!

[08:17:33.0102] <jschoi>
* > <@yulia:mozilla.org> jschoi: i have a dumb question, what if promise.all accepted async iterators (it already takes iterables), instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async

`Promise.all`‚Äôs current semantics involve parallel awaiting of input values. If some `input` yields `a, b, c`, then `Promise.all(input)` would first drain `input` into its three items `a, b, c`, and then it would simultaneously await `a, b, c`.

Parallel awaiting is impossible when getting values from async iterators; we must sequentially await for the values. 

I think it would be quite confusing if `Promise.all` did parallel awaiting on sync inputs and sequential awaiting on async inputs. This is the similar to how it would be confusing if `for await` did parallel awaiting on sync inputs but sequential sequential awaiting on async inputs. Hopefully that makes sense.

[09:48:09.0063] <Rob Palmer>
We will start the meeting in 12 minutes!

[10:24:27.0713] <leobalter>
I like the formal votes, but fine with it going without it.

I also have no opposition to ryzokuken being on both roles (402 Editor + TC39 Co-Chair).

[10:50:29.0004] <bakkot>
we could in theory make a bot to download issues but I don't wanna do it

[10:55:19.0300] <bterlson>
bakkot: is the ecmarkup change an API change or breaking in the sense that new things in the biblio will change where links go/what links/etc.?

[10:55:22.0470] <bterlson>
just curious

[10:56:29.0306] <ljharb>
Rick Waldron: can you confirm that https://github.com/tc39/proposal-modules-pragma should become an inactive proposal?

[10:57:41.0978] <Rick Waldron>
ljharb: That was true in 2017. I have no further information that changes that status 

[10:58:00.0772] <ljharb>
ok thanks, i'll update the repo and the proposals list to mark it as such. would you call it "rejected' or "withdrawn"?

[10:58:24.0198] <Rick Waldron>
ljharb: lemme check the notes, one sec. 

[10:59:57.0044] <rbuckton>
possible bot autocorrect needed: "x markup" -> "ecmarkup"

[10:59:58.0341] <bakkot>
bterlson: main change is that the biblio will not be built in, and you'll have to specify `--load-biblio=file/package` to get the biblio

[11:00:08.0548] <bakkot>
so it can be updated independently of ecmarkup

[11:00:28.0513] <bakkot>
(in particular the plan is to release a new biblio with every commit to the spec, or at least every one which affects the biblio)

[11:00:37.0210] <bakkot>
 * (in particularly the plan is to release a new biblio with every commit to the spec, or at least every one which affects the biblio)

[11:01:14.0011] <bakkot>
 * (in particular the plan is to release a new biblio with every commit to the spec, or at least every one which affects the biblio)

[11:01:35.0707] <Rick Waldron>
ljharb: I cannot find discussion of record, but I would not pursue it myself in 2022, or any year... I can't even remember why I thought it was an idea to explore at the time. 

[11:01:49.0425] <Michael Ficarra>
 thank you for the feedback on this topic, sffc :-)

[11:02:05.0559] <Rick Waldron>
> <@rwaldron:matrix.org> ljharb: I cannot find discussion of record, but I would not pursue it myself in 2022, or any year... I can't even remember why I thought it was an idea to explore at the time.

I may have been doing a favor for a community member 

[11:02:16.0837] <ljharb>
> <@rwaldron:matrix.org> ljharb: I cannot find discussion of record, but I would not pursue it myself in 2022, or any year... I can't even remember why I thought it was an idea to explore at the time.

as i recall, it was around the time of the fauxtrage about `.js` and ESM in node

[11:02:27.0483] <ljharb>
i'll mark it as just being "inactive"

[11:02:50.0867] <bterlson>
@bakkot sounds great, it's super annoying for non-262 uses to have the biblio there at all :-P

[11:03:05.0610] <Rick Waldron>
> <@ljharb:matrix.org> as i recall, it was around the time of the fauxtrage about `.js` and ESM in node

Which would TOTALLY support my suspicion that I was "proxy-championing" this

[11:03:14.0968] <yulia>
This is so amazing shu 

[11:03:23.0760] <sffc>
yulia Michael Ficarra Here is a discussion from October (https://github.com/tc39/ecma402/blob/master/meetings/notes-2021-10-07.md#normative-add-new-numbering-system-tnsa) and another from January (https://github.com/tc39/ecma402/blob/master/meetings/notes-2022-01-13.md#normative-add-new-numbering-system-tnsa)

[11:03:32.0345] <Rick Waldron>
That is something I would've done: tell a community member to write a solution and that I would present it in good faith. 

[11:03:36.0564] <shu>
thanks! kevin helped a lot too with the ecmarkup stuff needed

[11:04:14.0248] <Rick Waldron>
But it looks like they never really pushed forward on it, and since I was acting in a proxy role, I wouldn't have done any extra work beyond reporting to committee. 

[11:09:43.0381] <bakkot>
> <@bterlson:matrix.org> @bakkot sounds great, it's super annoying for non-262 uses to have the biblio there at all :-P

there's actually already a `--no-ecma-262-biblio` which tells it not to load it

[11:10:00.0862] <bakkot>
> <@bterlson:matrix.org> @bakkot sounds great, it's super annoying for non-262 uses to have the biblio there at all :-P

 * there's actually already a `--no-ecma-262-biblio` which tells it not to load the built-in one

[11:10:36.0748] <yulia>
sffc: per anba's comment here (https://github.com/tc39/ecma402/pull/614#issuecomment-938638422) i don't think we have any comments but i will clear it with our intl team

[11:13:29.0358] <waldemar>
How do you annotate that something doesn't call user code?

[11:15:11.0540] <bakkot>
waldemar: https://github.com/tc39/ecma262/pull/2548 describes guidance for spec authors, relevant part of which is

> False positives can be manually suppressed with `<emu-meta suppress-effects="user-code">suppressed</emu-meta>`.


[11:15:13.0208] <Michael Ficarra>
waldemar: if you need to do it manually, like this: https://github.com/tc39/ecma262/pull/2548/files#diff-181371b08d71216599b0acccbaabd03c306da6de142ea6275c2135810999805aR18446

[11:15:31.0905] <Michael Ficarra>
but mostly it's implied by `!`

[11:16:22.0246] <shu>
@waldemar: you can wrap the abstract operation / SDO call in `<emu-meta suppress-effects="user-code">AbstractOp()</emu-meta>`, but yeah as Michael Ficarra says `!` implies the suppression

[11:24:28.0695] <shu>
for spec authors, the tests in this file also serve as a good tutorial for how to annotate, but hopefully most spec authors require no additional work: https://github.com/tc39/ecmarkup/blob/main/test/baselines/sources/effect-user-code.html

[11:25:51.0989] <shu>
 * for spec authors, the tests in this file also serve as a good tutorial for how to annotate, but hopefully most spec drafts require no additional work: https://github.com/tc39/ecmarkup/blob/main/test/baselines/sources/effect-user-code.html

[11:39:53.0469] <yulia>
whatwg on polyfils: https://w3ctag.github.io/polyfills/

[11:41:28.0505] <Michael Ficarra>
> <@yulia:mozilla.org> whatwg on polyfils: https://w3ctag.github.io/polyfills/

that document is broken for me

[11:41:29.0544] <shu>
did my queue item get deleted?

[11:42:49.0510] <shu>
Rob Palmer: ^

[11:43:48.0653] <ryzokuken>
> <@michaelficarra:matrix.org> that document is broken for me

took a second for me

[11:44:09.0071] <ryzokuken>
perhaps the CSS load is non-blocking

[11:44:48.0894] <Rob Palmer>
sorry shu I did not see you on the queu

[11:45:10.0266] <Rob Palmer>
put yourself back on and i shall re-order - just tell me where it should go

[11:45:11.0512] <shu>
hm, pretty sure i added myself, guess i'll re-add myself to the end

[11:45:27.0001] <Rob Palmer>
i can move you up

[11:45:38.0124] <yulia>
in that doc they have 
```
* **polyfill**: Emulates a well established feature of the web platform
* **speculative polyfill** (aka 'ponyfill', 'prollyfill', 'nottifill'): Emulates a proposed feature of the web platform
* **library** (aka 'module'): Provides features or functionality not anticipated to be a web platform feature
```

[11:45:39.0977] <shu>
Rob Palmer: after J. S. Choi is done is good

[11:46:34.0026] <Rob Palmer>
actually you're already there!

[11:46:42.0628] <Rob Palmer>
just refresh - tcq bug :-(

[11:47:02.0162] <shu>
oh weird :(

[11:48:10.0060] <yulia>
jschoi:  i didn't have time to respond, but yes feature detection is a problem

[11:49:38.0506] <yulia>
though i wonder if it makes sense to include this in the document. Experiment should be treated as not in production code

[11:50:53.0645] <TabAtkins>
Here's the published version of the TAG finding, which is *not* broken: https://www.w3.org/2001/tag/doc/polyfills/

[11:51:19.0911] <TabAtkins>
Also note that this is *not* WHATWG, it's the W3C TAG.

[11:51:27.0885] <yulia>
I feel like this could be cited?

[11:51:31.0816] <yulia>
 * I feel like this could be cited?

[11:51:34.0838] <ptomato>
> <@tabatkins:matrix.org> Also note that this is *not* WHATWG, it's the W3C TAG.

oh, my bad

[11:51:35.0792] <Michael Ficarra>
I just don't think anything will tangibly change, whatever recommendation we make

[11:51:48.0350] <yulia>
clarity is helpful though

[11:53:39.0092] <Michael Ficarra>
I haven't had time to review the document we're being asked to voice our support for

[11:53:53.0307] <Michael Ficarra>
maybe we come back with a modified proposal that references the document next time?

[11:54:47.0322] <yulia>
Yeah, that makes sense

[11:55:24.0794] <ljharb>
for the specific wording, that's fine, but i still wanted to get consensus on the conceptual change, to avoid distractions in the PR.

[11:57:54.0007] <yulia>
we may need to change 3.5 of that document...

[11:58:46.0322] <ljharb>
3.5?

[11:59:02.0788] <yulia>
https://www.w3.org/2001/tag/doc/polyfills/#detect-and-defer-to-native-implementations

[11:59:35.0811] <Michael Ficarra>
yeah, that sounds like the opposite of what we would advise

[12:00:30.0963] <TabAtkins>
Note that that's explicitly guarded by "past the tipping point", aka things that are already well-decided and implemented in some browsers, and thus very unlikely to change.

[12:01:03.0705] <TabAtkins>
It explicitly warns against doing this before that point, and has examples of the "grab the native if it exists, otherwise use the polyfill" pattern as explicitly discouraged.

[12:02:33.0458] <yulia>
hmmm, maybe we can define tipping point clearly

[12:02:51.0674] <yulia>
but even then , it seems liable to being misinterpretted..

[12:03:27.0080] <Michael Ficarra>
ah, thanks TabAtkins I misread it

[12:24:23.0083] <yulia>
if we need clarifications we can post on the TAGs design issue tracker

[12:25:28.0640] <yulia>
 * I think tab is right, this aligns with our goals it looks like. if we need clarifications we can post on the TAGs design issue tracker

[12:55:04.0167] <yulia>
is ptomato ready to go?

[12:59:04.0913] <ptomato>
I am

[12:59:45.0510] <yulia>
great

[13:18:38.0480] <bakkot>
motion to close this discussion and move on, no one disagrees with the proposal afaict

[13:19:25.0573] <leobalter>
well, I appreciate everyone having clarity on the topics we discuss

[14:15:48.0577] <ljharb>
would this document basically be like a new TG?

[14:16:03.0461] <ljharb>
i can ask that on the queue if it wouldn't derail the ending of the item

[14:17:35.0055] <yulia>
is 404 a tg?

[14:17:38.0938] <yulia>
 * is 404 a tg?

[14:17:40.0456] <ljharb>
i think so

[14:17:48.0169] <ljharb>
actually i dunno, maybe not

[14:17:50.0269] <yulia>
we also have the spec suite as a document

[14:17:54.0864] <yulia>
i see this as closer to one of those

[14:18:01.0730] <ljharb>
since there's just tc39, 402, and security

[14:18:03.0194] <ljharb>
k

[14:18:17.0316] <yulia>
i still want it to be 405

[14:19:22.0568] <shu>
ljharb: i don't see it as a TG, no

[14:19:32.0345] <shu>
the IP-making body is still TG1

[14:19:39.0726] <shu>
it just goes into a separate document than ecma262

[14:20:09.0969] <ljharb>
cool

[14:20:27.0828] <shu>
i don't know how to legally set that up but i'm not too worried about it?

[14:21:21.0151] <ljharb>
can prolly just make a repo for it when we're at that stage, which i'm now empowered to do

[14:54:01.0905] <Bradford Smith>
When did the "structured clone" discussion start? I really thought it started before 2pm. Isn't the time box spent?

[14:55:53.0569] <bakkot>
Bradford Smith: meeting's over

[14:55:59.0121] <bakkot>
this is post-plenary me picking mark's brain

[14:56:29.0831] <Bradford Smith>
oh, thx

[15:49:06.0611] <bakkot>
ljharb: can you use your admin powers to drop a link to https://github.com/bakkot/proposal-duplicate-named-capturing-groups on https://github.com/tc39/proposal-regexp-named-groups/issues/44 ?

[15:50:41.0567] <bakkot>
also, new (small) regex proposal I intend to put together for next meeting: allow capture group names to be re-used (when in different `|` alternatives) rather than enforcing uniqueness in the full regex

https://github.com/bakkot/proposal-duplicate-named-capturing-groups


2022-01-25
[16:46:48.0084] <ljharb>
sure, i can unarchive it if you want to comment it yourself? just lmk

[16:47:25.0974] <ljharb>
> <@bakkot:matrix.org> ljharb: can you use your admin powers to drop a link to https://github.com/bakkot/proposal-duplicate-named-capturing-groups on https://github.com/tc39/proposal-regexp-named-groups/issues/44 ?

 * sure, i can unarchive it if you want to comment it yourself? just lmk

[16:47:50.0717] <ljharb>
also, what happened with the "set method argument internal slot" discussion? i had to drop off

[16:58:10.0293] <ljharb>
 * sure, i can unarchive it if you want to comment it yourself? just lmk, or if we can't coordinate, i can

[19:32:46.0276] <bakkot>
ljharb: if you want to unarchive tonight and ping me I'll link it, or you should feel free to do so on my behalf

[19:33:11.0253] <bakkot>
> <@ljharb:matrix.org> also, what happened with the "set method argument internal slot" discussion? i had to drop off

tl;dr was, for the argument to `Set.prototype.union`, MM does not like the idea of _only_ reaching in to the [[SetData]] internal slot, but would potentially be OK with reaching in to that slot if present and otherwise falling back to the publicly exposed methods (`has`, etc), even though this would technically be a violation of proxy transparency (because for most cases it would still Just Work)

[19:33:12.0903] <ljharb>
bakkot: done now, go nuts

[19:34:24.0206] <ljharb>
bakkot: but the receiver would still have slot access only, yes?

[19:34:32.0427] <bakkot>
yeah, receiver is fine

[19:34:37.0817] <bakkot>
that's already how it works

[19:34:46.0767] <ljharb>
awesome

[19:34:49.0100] <bakkot>
that is, it is already common to access the internal slot of the receiver

[19:34:55.0507] <ljharb>
(re-archived the repo, after your comment; lmk if you need anything else)

[19:35:03.0674] <bakkot>
nope, that was all, thanks

[19:35:17.0532] <bakkot>
though in both the argument case and the receiver case we need to figure out what affordances, if any, we're going to make for subclasses

[08:38:53.0172] <Jack Works>
hi I've read the meeting logs yesterday. I'm interested in reviewing structured clone algr. (cc syg )

[08:40:54.0146] <shu>
Jack Works: sure, will request your review when the draft is ready

[08:49:20.0372] <Jack Works>
üëÄ I set an alarm on 14:00 PST and not be able to present enum before 14:00 cause I'm sleeping.

[08:52:50.0339] <Rob Palmer>
Jack Works: we'll schedule you as late as possible today to help you sleep - so in between 14:00-15:00 PST

[09:57:01.0660] <Rob Palmer>
This is your 4 minute warning: Plenary starts soon

[10:02:18.0016] <ptomato>
I can't do notes right away, but I can in a bit

[10:03:15.0269] <Rob Palmer>
thanks ptomato 

[10:27:03.0089] <bakkot>
Mathieu Hofman: can you confirm the conclusion we have captured in the notes is correct

[10:27:10.0574] <bakkot>
I think so but best to confirm

[10:44:57.0848] <bakkot>
never GCing is always legal, so XS's implementation would still be conformant

