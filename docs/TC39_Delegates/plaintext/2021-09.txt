2021-09-01
[06:37:48.0472] <Ashley Claymore>
change-array-by-copy methods dropped from 10 to 4
https://github.com/tc39/proposal-change-array-by-copy/issues/27

[06:47:37.0167] <bakkot>
do we want to take notes for the "Response to ECMA / LF Proposed Partnership | Michael Saboff" item?

[06:47:54.0207] <bakkot>
I'm never sure for the administrative rather than technical items

[06:50:14.0762] <Rob Palmer>
yes, take notes, but we won't make them publish them publicly

[06:52:44.0375] <Rob Palmer>
the jitsi is open - same passcode as yesterday

[07:44:12.0054] <littledan>
I also strongly support the "safety value" of permissive copyright agreements/forkability

[07:49:47.0242] <shu>
just FYI here's the list of ecma members: https://www.ecma-international.org/about-ecma/members/

[08:08:51.0456] <Michael Ficarra>
ceil, floor, round, trunc, really?

[08:09:11.0847] <bakkot>
I'd actually say that stage 1 shouldn't be about extending Math specifically, just about adding more math operations for bigints

[08:09:31.0082] <ljharb>
"bigint math" indeed doesn't necessarily mean it has to be on `Math`

[08:09:44.0513] <rbuckton>
It could just be on `BigInt`

[08:09:56.0939] <ljharb>
the challenge there is, "why are these things on Number too?"

[08:10:01.0219] <ljharb>
 * the challenge there is, "why aren't these things on Number too?"

[08:10:15.0017] <ljharb>
iow, perhaps most of the Math methods belonged on Number, but here we are

[08:10:21.0410] <ryzokuken>
maybe we could later add aliases on `Number` ðŸ˜€ 

[08:10:52.0748] <rbuckton>
Also possible to introduce a separate global, i.e., `MathN` or `BigMath`, but I'd hate to have to do this over and over if we add more number types in the future.

[08:11:24.0229] <nicolo-ribaudo>
It could be namespaced, `Math.BigInt.*`

[08:11:37.0382] <ryzokuken>
what about `mixedArrayWithNumbersAndBigInts.map(Math.abs)`?

[08:11:49.0483] <ljharb>
 * would have to be `Math.bigint.*` then, thanks to `Temporal.Now`

[08:12:03.0900] <ryzokuken>
wait, isn't it a namespace too?

[08:12:10.0637] <ljharb>
lol nvm, i'm tired and confused myself

[08:12:10.0674] <ryzokuken>
so same capitalization

[08:14:41.0954] <ljharb>
re max/min, `1n < 3` works, so `Math.max(1n, 3)` should work.

[08:15:11.0194] <ljharb>
 * re max/min, `1n < 3` works, so `Math.max(1n, 3)` should work. i see zero concern with "mixing" in max/min

[08:15:24.0493] <ljharb>
 * re max/min, `1n < 3` works, so `Math.max(1n, 3)` should work. i see zero concern with "mixing" in max/min, because there's no accidental precision loss, which was the only motivation for mixing errors i recall

[08:16:02.0655] <ljharb>
 * re max/min, `1n < 3` works, so `Math.max(1n, 3)` should work. i see zero concern with "mixing" in max/min, because there's no accidental precision loss, which was the only motivation for mixing errors that i recall

[08:16:45.0828] <Michael Ficarra>
I fully support "maths operations for BigInts", not so sure about the choice of functions listed here

[08:17:03.0605] <bakkot>
yeah, +1 for excluding transcedentals

[08:18:22.0742] <Jack Works>
support for some kind of NS instead of `bigMax` and `bigMin`

[08:18:29.0027] <bakkot>
though also, +1 for hashing out the exact list in stage 1

[08:19:30.0105] <shu>
i don't know if it's bizarre that arbitrary precision math doesn't "just work"...

[08:19:55.0247] <ljharb>
max/min isn't "arbitrary precision", it's a form of `>` and `<`

[08:20:18.0626] <ljharb>
if i can do `999999999999999999999999999999999999999999999999999999999999999n > 1`, why can't i put those in max or min?

[08:20:40.0241] <danielrosenwasser>
> because there's no accidental precision loss

`10000000000000000000000n < 10000000000000000000000.1`

`> false`

ðŸ¤¨

[08:21:00.0873] <shu>
ljharb: yes, my comment is about unqualified "math"

[08:21:01.0063] <ljharb>
in that case the loss happens on the number creation, not part of the `<`

[08:21:01.0465] <nicolo-ribaudo>
You don't know the return type of `Math.min(x, y)` when `x` is a number and `y` is a bigint

[08:21:37.0181] <danielrosenwasser>
I don't really think it's a problem in practice, but it's not like most people know the behavior off-hand

[08:21:38.0934] <ljharb>
nicolo-ribaudo: the return type is T, the type of your inputs - number if all numbers or non-numbers, bigint if all bigints, number or bigint if both

[08:21:44.0118] <bakkot>
RangeError, surely?

[08:21:45.0488] <danielrosenwasser>
 * I don't really think it's a problem in practice, but it's not like most people know the behavior off-hand

[08:21:52.0464] <bakkot>
I guess TypeError makes sense from one perspective

[08:22:00.0250] <ljharb>
why would it be an error of any kind if `<` with them isn't

[08:22:05.0554] <ljharb>
 * why would it be an error of any kind if `<` with them isn't

[08:22:17.0505] <ljharb>
bigint/number mixing errors are about losing precision _by the mixing_. this is not a problem for max/min, just like it's not one for comparison.

[08:22:34.0789] <ljharb>
 * bigint/number mixing errors are about losing precision _by the mixing_. this is not a problem for max/min, just like it's not one for comparison.

[08:22:35.0780] <Michael Ficarra>
ljharb: you can't `<` with 0 operands

[08:23:13.0572] <ljharb>
sure?

[08:23:35.0998] <Michael Ficarra>
so min/max with 0 arguments should do what?

[08:23:42.0396] <ljharb>
`Math.max()` is `-Infinity`, `Math.max(x)` is `x`, and 2+ operands is where it's useful, and also where it matters

[08:24:12.0732] <ljharb>
i don't see any issue with `Math.max(...x)` possibly returning either type. if you cared about that, you'd already be ensuring `x` has 2+ items.

[08:24:43.0324] <ljharb>
 * i don't see any issue with `Math.max(...x)` possibly returning either type. if you cared about that, you'd already be ensuring `x` has 1+ items.

[08:24:46.0801] <ljharb>
since bigint lacks an ultimate max/min value (infinity) it's nonsensical to put in < 1 items and expect a bigint back, no?

[08:25:06.0047] <Michael Ficarra>
yes, so RangeError

[08:25:17.0627] <ljharb>
if it were a bigint-only method, sure

[08:25:26.0119] <ljharb>
but in this scenario it's a bigint and/or number method.

[08:25:32.0115] <ljharb>
and it already doesn't throw an error, so it can't start now

[08:26:08.0589] <ljharb>
and making a new method, that still mixes (because not allowing mixing here is ridiculous), only to throw an error on 0 items (or maybe to satisfy some type system-like mental model?), doesn't seem sufficiently motivated to me

[08:26:23.0556] <ljharb>
 * and making a new method, that still mixes (because not allowing mixing here is ridiculous), only to throw an error on 0 items (or maybe to satisfy some type system-like mental model?), doesn't seem sufficiently motivated to me

[08:26:31.0710] <Michael Ficarra>
I'm leaning toward new methods on BigInt here

[08:26:41.0393] <bakkot>
sqrt is easy I think, but it's the only obvious sometimes-irrational one which works

[08:26:45.0798] <bakkot>
and cbrt, of course

[08:27:00.0643] <ljharb>
for max and min specifically, i would be staunchly opposed to a bigint-only one. these methods only should allow mixing. and `BigInt.max` allowing both seems odd.

[08:27:11.0655] <ljharb>
 * for max and min specifically, i would be staunchly opposed to a bigint-only one. these methods only should allow mixing. and `BigInt.max` allowing both seems odd.

[08:27:48.0362] <sarahghp>
you can already sort a mixed array, right? 

[08:28:06.0760] <bakkot>
ljharb: the only reason to allow mixing is if you have a list which has both bigint and numbers, which you should not have and it is not clear to me that the language ought to have explicit support for

[08:28:11.0017] <sarahghp>
so then Max and Min is logical

[08:28:22.0434] <ljharb>
i don't understand "should not have"

[08:28:36.0276] <ryzokuken>
me neither, why should you not have mixed arrays?

[08:28:37.0323] <Michael Ficarra>
sarahghp: are you referring to the default sort comparator? you can sort anything

[08:28:55.0605] <Jack Works>
Oh but I have some question about BigInt or Decimals in general

[08:29:01.0897] <ljharb>
 * also the language already has explicit support for it - `mixedArray.reduce((a, b) => a + b)` works fine, eg.

[08:29:41.0020] <Jack Works>
what if I do `1m/3m`? Can I get a infinite precise decimal number to represent `1/3` in Math?

[08:30:04.0119] <ryzokuken>
Jack Works: that's an open question for the bigdecimal proposal

[08:30:15.0436] <ryzokuken>
but for decimal128 that's not as big as issue

[08:30:23.0344] <ryzokuken>
or for fractions

[08:30:31.0998] <sarahghp>
> <@michaelficarra:matrix.org> sarahghp: are you referring to the default sort comparator? you can sort anything

I mean the default sort on array works, and so, as a practitioner, I would expect max and min to work as well. 

[08:30:51.0527] <bakkot>
the default sort on array uses strings

[08:30:52.0796] <HE Shi-Jun>
sounds like we need Fractions? syntax like `1/3r` 

[08:31:03.0564] <bakkot>
that is, sorts by string order

[08:31:11.0600] <ryzokuken>
yeah, either fractions or decimal128 would avoid the 1/3 issue

[08:31:12.0291] <sarahghp>
yes I know why it works, but I am saying from DX not an internal reason why it would be expected to work

[08:31:25.0113] <ryzokuken>
but then there's other issues that bigdecimals solve... it's a complicated tradeoff

[08:31:25.0138] <sarahghp>
 * yes I know why it works, but I am saying from DX not an internal reason why it would be expected to work

[08:32:05.0101] <bakkot>
I do strongly think that a `bigSqrt` should truncate to a bigint rather than returning a number or decimal or anything

[08:33:08.0843] <ryzokuken>
+1 for stage 1.

[08:33:44.0801] <HE Shi-Jun>
not sure we really need `bigMin/bigMax`, it seems `Infinity` is ok for empty... because the worst case is just throw TypeError so no need to have `bigMin/bigMax` if it also throw TypeError ðŸ˜‚

[08:33:47.0794] <Tierney Cyren>
always love to see improved math

[08:34:09.0413] <Jack Works>
and for example, in 6.1.6.2.3 BigInt::exponentiate, it doesn't say what will happen if the result is too big to represent. Should the engine give a rounded/approximated result or should the engine throw a TypeError?

[08:34:56.0012] <HE Shi-Jun>
> <@jackworks:matrix.org> and for example, in 6.1.6.2.3 BigInt::exponentiate, it doesn't say what will happen if the result is too big to represent. Should the engine give a rounded/approximated result or should the engine throw a TypeError?

I suppose it should throw TypeError or OOM ??

[08:35:21.0320] <Rick Waldron>
RangeError

[08:35:40.0536] <bakkot>
I think it currently OOMs

[08:35:48.0234] <Michael Ficarra>
sarahghp: I wouldn't call this "working":
```
[10n, 2].sort()
> [10n, 2]
[10n, 200].sort()
> [10n, 200]
```

[08:35:50.0539] <bakkot>
which, presumably we could fix

[08:35:55.0194] <bakkot>
 * which, presumably we could fix

[08:35:57.0961] <bakkot>
(could, not should)

[08:36:03.0342] <Michael Ficarra>
 * sarahghp: I wouldn't call this "working":
```
[10n, 2].sort()
> [10n, 2]
> [10n, 200].sort()
> Â [10n, 200]
```
```

[08:36:11.0651] <Michael Ficarra>
 * sarahghp: I wouldn't call this "working":
```
[10n, 2].sort()
> [10n, 2]
> [10n, 200].sort()
> Â [10n, 200]
```

[08:36:38.0622] <Rick Waldron>
bakkot: implementations all throw RangeError exceptions. 

[08:36:42.0101] <HE Shi-Jun>
Michael Ficarra: sort (without pass comparator) is always strange ðŸ˜‚

[08:36:47.0162] <bakkot>
Rick Waldron: oh, huh, good to know

[08:37:03.0034] <bakkot>
my recollection is evidently incorrect then

[08:37:08.0955] <sarahghp>
Michael Ficarra: in this case "works" stands for "does not throw error" ðŸ˜†. Since > < works/works on a mixed array too, I think it's an argument for why it's surprising when Math functions throw on BigInt

[08:37:14.0319] <Rick Waldron>
bakkot: 262 specifies it. 

[08:37:21.0314] <bakkot>
huh!

[08:37:23.0770] <Rick Waldron>
https://tc39.es/ecma262/#sec-numeric-types

[08:37:33.0718] <bakkot>
I did not think we ever specified what to do when you hit implementation limits

[08:37:39.0728] <Rick Waldron>
T::exponentiate(x, y) -> T, may throw RangeError

[08:37:42.0254] <bakkot>
I thought we just assumed infinite memory etc

[08:37:45.0495] <bakkot>
TIL.

[08:37:53.0968] <Michael Ficarra>
sarahghp: but `<` and `>` don't Tostring, I'm confused how this is related at all

[08:39:03.0206] <Michael Ficarra>
 * sarahghp: I wouldn't call this "working":
```
[10n, 2].sort()
> [10n, 2]
[10n, 200].sort()
> Â [10n, 200]
```

[08:39:15.0056] <Michael Ficarra>
 * sarahghp: I wouldn't call this "working":
```
[10n, 2].sort()
> [10n, 2]
[10n, 200].sort()
> [10n, 200]
```

[08:40:39.0772] <sarahghp>
Michael Ficarra: I'm saying that from a practitioner perspective, given `[].sort()` and `<` and `>` work on mixed types, it is surprising that `max` and `min` do not. I do understand why it makes sense internally.

[08:43:46.0867] <bakkot>
POO: can we get another note taker?

[08:43:51.0045] <bakkot>
I'm distracted currently

[08:44:01.0115] <bakkot>
missed most of Shu

[08:44:07.0677] <nicolo-ribaudo>
I can help until the break

[08:44:07.0806] <Josh Blaney>
I can help

[08:46:32.0865] <Tierney Cyren>
am I hearing someone's discord notifications lmao

[08:46:41.0882] <Tierney Cyren>
I keep thinking I'm getting pinged

[08:46:42.0196] <ryzokuken>
lol same

[08:46:53.0002] <HE Shi-Jun>
same :)

[08:48:52.0774] <Richard Gibson>
`Math.max(1, 1n)`?

[08:49:33.0009] <bakkot>
Richard Gibson: first-wins, I think

[08:50:34.0255] <Michael Ficarra>
same for `Math.min`?

[08:51:10.0251] <bakkot>
presumably

[08:51:47.0706] <bakkot>
it should be equivalent to "stable-sort by `<`, then take the first element"

[08:52:12.0906] <bakkot>
or, equivalently, a loop which does `if (cur > max) cur = max`

[08:55:25.0726] <Michael Ficarra>
`max = cur`, surely

[08:57:58.0081] <bakkot>
uhhh yeah that one

[08:57:58.0471] <jschoi>
https://github.com/js-choi/proposal-bigint-math/issues/3

[09:06:57.0555] <ptomato>
shu: to expand on something ljharb said in the last remark, there's a lot of transitive code that depends on this pattern, but arguably there's also a lot that _should_ but does not yet, because they haven't realized it's a problem

[09:07:17.0874] <ptomato>
(was going to put this as a reply on the queue, but we were out of time)

[09:07:39.0702] <shu>
i hear you, and that helps convince me this is of higher importance

[09:08:07.0359] <ljharb>
re "holistic": imo, pipeline + method extraction syntax + getIntrinsic would make for a much more ergonomic approach, on top of which perhaps a very ergonomic syntactic solution could be developed if it were warranted

[09:08:21.0903] <shu>
but you know, what i hear is also not that this is _impossible_ today, just that it sucks to have to write

[09:08:39.0949] <ljharb>
very true

[09:08:46.0853] <ljharb>
altho CSP makes some of it impossible

[09:09:04.0308] <shu>
don't put that evil on me

[09:09:05.0876] <ljharb>
 * altho CSP makes some of it impossible (but, "make syntax-reachable intrinsics just be global" would address that part)

[09:09:21.0481] <shu>
i want to remain not touching csp

[09:12:04.0917] <shu>
ljharb: oh one thing i forgot to say was i probably don't want enumeration

[09:12:26.0016] <shu>
so preference from me is separate proposal there

[09:12:37.0674] <jschoi>
> <@ljharb:matrix.org> re "holistic": imo, pipeline + method extraction syntax + getIntrinsic would make for a much more ergonomic approach, on top of which perhaps a very ergonomic syntactic solution could be developed if it were warranted

I plan to collaborate with you and hopefully HE Shi-Jun on a simple method-extraction proposal (https://github.com/js-choi/proposal-bind-operator/).

[09:13:06.0310] <jschoi>
I plan to propose it next meeting. 

[09:14:37.0976] <ljharb>
looking forward to it

[09:15:01.0551] <ljharb>
> <@shuyuguo:matrix.org> ljharb: oh one thing i forgot to say was i probably don't want enumeration

i agree "that preference" means it should be a separate proposal

[09:15:52.0629] <TabAtkins>
Do all the chairs have edit access to Reflector issues? I just learned of the HackMD for the agenda because it was left in the comments for the reflector issue and not put in the initial post as well.

[09:16:14.0874] <ljharb>
all the delegates do

[09:16:19.0198] <shu>
i thought they didn't like posting it because it's usually under significant flux

[09:16:39.0287] <shu>
it's a source of truth in the sense that that's the document they use to coordinate among themselves and to resolve rescheduling conflicts

[09:17:00.0285] <ljharb>
note that some people may not like it if you edit their comments, so best to only do it with explicit permission; for the record everyone is always free to fix my typos, update URLs, add missing info, things like that, as long as it's correct :-p

[09:17:07.0353] <TabAtkins>
i'm hearing in TDZ that it shoudl be trusted over the tcq, so I'm not sure

[09:17:18.0919] <shu>
it should be is my understanding

[09:17:22.0376] <ljharb>
i've only ever used TCQ as a source of "what's happening now"

[09:17:29.0758] <shu>
right

[09:17:31.0277] <ljharb>
 * i've only ever used TCQ as a source of "what's happening now", as opposed to relying on it to predict the future

[09:17:49.0225] <bterlson>
TCQ hasn't been updated with the agenda items we will bring forward, will work on that

[09:20:03.0952] <shu>
bterlson: am i up next? i.e. is it possible to accommodate adam klein's constraint request? it was added pretty late so understandable if not

[09:20:25.0019] <bterlson>
checking

[09:21:28.0611] <bterlson>
shu: confirm you mean the fixed shape item?

[09:21:35.0072] <shu>
i do, yes

[09:22:13.0565] <shu>
adam is unable to make 10-11 AM PT, so if we switch my two items to the last hour that resolves that. just not sure if possible

[09:26:12.0092] <leobalter>
shu in this case I'll need to sync with Caridy too as he should join for this discussion.

[09:26:25.0047] <bterlson>
shu: I think we can make it work, plan to present 1100 PDT

[09:26:27.0000] <leobalter>
 * shu:  in this case I'll need to sync with Caridy too as he should join for this discussion.

[09:26:41.0157] <bterlson>
leobalter: hopefully that will work for caridy?

[09:27:15.0439] <leobalter>
bterlson: I hope so, let me ping him

[09:27:19.0313] <bterlson>
rbuckton: would you be able to present regexp at 1000 PDT?

[09:29:52.0638] <leobalter>
I understand we have overflow for this meeting, but in this case, and I'll miss discussing Jordan's topic "Tightening host restrictions to improve testing". I believe this relates to EcmaScript improvements/fixes and I'm biased to prefer that over new features, but my same bias also wants some of the Stage 1 features.

[09:29:55.0120] <leobalter>
time is unfair

[09:32:53.0069] <bterlson>
The emerging plan is thus: 1:00 EDT RegExp feature parity rbuckton (with ljharb tightening host restrictions as backup in case Ron cannot present), 2:00 EDT fixed shape for objects shu, 2:45 small resizable buffers shu 

[09:33:21.0501] <bterlson>
will update TCQ in a few moments

[09:34:49.0248] <shu>
great, thank you!

[09:36:04.0916] <shu>
sorry for last minute request

[09:36:15.0786] <Rob Palmer>
TCQ is now updated. And HackMD

[09:36:26.0312] <Rob Palmer>
Next is Ron Buckton with RegExp Feature Parity

[09:38:33.0889] <yulia>
please go to the reflector for the result from this morning's session

[09:39:48.0577] <yulia>
i will get dinner

[10:03:09.0413] <Rob Palmer>
Yulia's Reflector post:  https://github.com/tc39/Reflector/issues/397

[10:06:29.0276] <Michael Ficarra>
I have no interest in just importing regexp features wholesale

[10:07:31.0438] <ljharb>
i like some of these features, but parity for the sake of parity does not sound like a good thing to me

[10:08:20.0244] <Michael Ficarra>
same

[10:08:33.0947] <Michael Ficarra>
and we should not be forced to take on unwanted features because some of them are good

[10:08:51.0749] <Michael Ficarra>
these could all be individual proposals

[10:14:17.0046] <littledan>
I think it'd make more sense to choose a specific scope, for bringing something to Stage 1

[10:14:24.0188] <littledan>
like one of these inner proposals

[10:14:45.0243] <Michael Ficarra>
sounds like that's what Ron is looking for now

[10:14:47.0393] <jschoi>
It seems like Ron is proposing forming something like a subcommittee to investigate regex gaps.

[10:14:59.0621] <jschoi>
 * It seems like Ron is proposing forming something like a subcommittee to investigate regex gaps, with individual subsequent proposals.

[10:15:01.0648] <littledan>
OK, that sounds good to me. I'm happy to see discussion reopened here

[10:15:04.0535] <jschoi>
 * It seems like Ron is proposing forming something like a subcommittee to investigate regex gaps, with individual subsequent proposals for identified gaps.

[10:15:27.0557] <Michael Ficarra>
the feature that lets you change the flags in the middle of the pattern scares me quite a bit

[10:15:40.0977] <littledan>
yeah, that's how the committee reacted last time Brian brought it up

[10:15:45.0990] <shu>
well, if ron is actually proposing another TG he should be explicit?

[10:15:51.0972] <jschoi>
 * It seems like Ron is proposing forming something like a subcommittee to investigate regex gaps with regard to other languages, with individual subsequent proposals for identified gaps.

[10:15:57.0622] <Michael Ficarra>
the context-dependency in the regexp grammar is already hard enough for people

[10:16:10.0819] <littledan>
> <@shuyuguo:matrix.org> well, if ron is actually proposing another TG he should be explicit?

I guess this would be more of a temporary ad-hoc set of calls?

[10:17:02.0810] <shu>
stupid question

[10:17:18.0000] <shu>
why are textmate grammar parsers not rewritten to simply not use regexps

[10:19:11.0375] <Justin Ridgewell>
> <@shuyuguo:matrix.org> why are textmate grammar parsers not rewritten to simply not use regexps

Without writing a whole scripting engine?

[10:19:25.0460] <shu>
maybe it's because i don't know what textmate grammars do

[10:19:36.0964] <shu>
textmate grammars themselves have regexps to define what an e.g. identifier should be?

[10:19:45.0616] <jschoi>
Basically. https://macromates.com/manual/en/language_grammars

[10:19:49.0184] <Michael Ficarra>
we don't need any of these textmate things because we have a *language* around our regexps, our language isn't just regexp

[10:19:59.0281] <Justin Ridgewell>
https://github.com/textmate/javascript.tmbundle/blob/master/Syntaxes/Regular%20Expressions%20(JavaScript).tmLanguage

[10:20:30.0478] <Justin Ridgewell>
VIM syntax parsers are very similar

[10:20:39.0013] <bakkot>
there's been a proposal for regex composition, which seems strictly better than this `define` thing

[10:20:44.0814] <Michael Ficarra>
yep

[10:20:59.0097] <littledan>
(also lots of people like RegExp.escape better)

[10:21:16.0595] <littledan>
Context-Free Expressions!

[10:21:24.0271] <shu>
at the whole-stack level, it seems easier to extend TextMate grammars to have functions in place of regexps than to... keep extending regexps?

[10:24:01.0690] <jschoi>
TextMate grammars are a de facto standard, so itâ€™d have to be a de-facto extension from one vendor to do that, hehâ€¦

[10:24:08.0585] <jschoi>
 * TextMate grammars are a de-facto standard, so itâ€™d have to be a de-facto extension from one vendor to do that, hehâ€¦

[10:24:39.0023] <shu>
that seems cheaper to me than changing JS

[10:25:13.0422] <littledan>
I don't see why JS should have part of a TextMate interpreter built-in, even if TextMate won't change

[10:25:30.0006] <littledan>
I think it's more like, TextMate may show that some things are useful

[10:25:35.0663] <littledan>
rather than that, we should completely align

[10:26:05.0706] <shu>
i'm not saying that, i'll try to explain better when the queue item comes up

[10:28:45.0603] <Michael Ficarra>
totally agree with Waldemar here about the x flag

