2021-09-01
[06:37:48.0472] <Ashley Claymore>
change-array-by-copy methods dropped from 10 to 4
https://github.com/tc39/proposal-change-array-by-copy/issues/27

[06:47:37.0167] <bakkot>
do we want to take notes for the "Response to ECMA / LF Proposed Partnership | Michael Saboff" item?

[06:47:54.0207] <bakkot>
I'm never sure for the administrative rather than technical items

[06:50:14.0762] <Rob Palmer>
yes, take notes, but we won't make them publish them publicly

[06:52:44.0375] <Rob Palmer>
the jitsi is open - same passcode as yesterday

[07:44:12.0054] <littledan>
I also strongly support the "safety value" of permissive copyright agreements/forkability

[07:49:47.0242] <shu>
just FYI here's the list of ecma members: https://www.ecma-international.org/about-ecma/members/

[08:08:51.0456] <Michael Ficarra>
ceil, floor, round, trunc, really?

[08:09:11.0847] <bakkot>
I'd actually say that stage 1 shouldn't be about extending Math specifically, just about adding more math operations for bigints

[08:09:31.0082] <ljharb>
"bigint math" indeed doesn't necessarily mean it has to be on `Math`

[08:09:44.0513] <rbuckton>
It could just be on `BigInt`

[08:09:56.0939] <ljharb>
the challenge there is, "why are these things on Number too?"

[08:10:01.0219] <ljharb>
 * the challenge there is, "why aren't these things on Number too?"

[08:10:15.0017] <ljharb>
iow, perhaps most of the Math methods belonged on Number, but here we are

[08:10:21.0410] <ryzokuken>
maybe we could later add aliases on `Number` ðŸ˜€ 

[08:10:52.0748] <rbuckton>
Also possible to introduce a separate global, i.e., `MathN` or `BigMath`, but I'd hate to have to do this over and over if we add more number types in the future.

[08:11:24.0229] <nicolo-ribaudo>
It could be namespaced, `Math.BigInt.*`

[08:11:37.0382] <ryzokuken>
what about `mixedArrayWithNumbersAndBigInts.map(Math.abs)`?

[08:11:49.0483] <ljharb>
 * would have to be `Math.bigint.*` then, thanks to `Temporal.Now`

[08:12:03.0900] <ryzokuken>
wait, isn't it a namespace too?

[08:12:10.0637] <ljharb>
lol nvm, i'm tired and confused myself

[08:12:10.0674] <ryzokuken>
so same capitalization

[08:14:41.0954] <ljharb>
re max/min, `1n < 3` works, so `Math.max(1n, 3)` should work.

[08:15:11.0194] <ljharb>
 * re max/min, `1n < 3` works, so `Math.max(1n, 3)` should work. i see zero concern with "mixing" in max/min

[08:15:24.0493] <ljharb>
 * re max/min, `1n < 3` works, so `Math.max(1n, 3)` should work. i see zero concern with "mixing" in max/min, because there's no accidental precision loss, which was the only motivation for mixing errors i recall

[08:16:02.0655] <ljharb>
 * re max/min, `1n < 3` works, so `Math.max(1n, 3)` should work. i see zero concern with "mixing" in max/min, because there's no accidental precision loss, which was the only motivation for mixing errors that i recall

[08:16:45.0828] <Michael Ficarra>
I fully support "maths operations for BigInts", not so sure about the choice of functions listed here

[08:17:03.0605] <bakkot>
yeah, +1 for excluding transcedentals

[08:18:22.0742] <Jack Works>
support for some kind of NS instead of `bigMax` and `bigMin`

[08:18:29.0027] <bakkot>
though also, +1 for hashing out the exact list in stage 1

[08:19:30.0105] <shu>
i don't know if it's bizarre that arbitrary precision math doesn't "just work"...

[08:19:55.0247] <ljharb>
max/min isn't "arbitrary precision", it's a form of `>` and `<`

