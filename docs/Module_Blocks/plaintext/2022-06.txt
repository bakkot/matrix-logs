2022-06-07
[06:15:25.0845] <Surma>
I feel like the biggest open question is whether module blocks are cached by source position or not. I think it might be most efficient to just have an incubator call about this. Anyone not okay with that? And how do I schedule one officially? ðŸ˜…

[06:15:26.0545] <Surma>
https://github.com/tc39/proposal-js-module-blocks/issues/45

[06:17:14.0183] <Jack Works>
Isn t my `unique` solution good enough? ðŸ˜‚

[06:17:50.0733] <Surma>
Well, Iâ€™m kinda changing my opinion that all module blocks should be cached by source position

[06:18:26.0233] <Surma>
so that would make that extra syntax moot ðŸ˜…

[06:18:44.0052] <Surma>
I hope we can avoid additional syntax

[08:09:15.0238] <ljharb>
an incubator call would be good. to have one, during plenary when incubator call chartering happens, we'd add module blocks. ping shu to give him a heads up

[09:23:33.0248] <Kris Kowal>
Surma: Youâ€™re also welcome at the SES Strategy meetings at 10am Pacific. https://docs.google.com/document/d/1FZ95-NZIQE9fw3A8Sgcz2BKep6MlC_Kng0dlf1ehabQ/edit#heading=h.f8mfwudm59mq

[09:24:35.0060] <Kris Kowal>
Weâ€™re stepping up spec work on Compartments and it would be good to get in sync.

[09:39:24.0251] <Jack Works>
> <@kriskowal:matrix.org> Surma: Youâ€™re also welcome at the SES Strategy meetings at 10am Pacific. https://docs.google.com/document/d/1FZ95-NZIQE9fw3A8Sgcz2BKep6MlC_Kng0dlf1ehabQ/edit#heading=h.f8mfwudm59mq

Is SES meeting still happen in the tc39 meetings week?

[09:41:10.0179] <Kris Kowal>
No SES meeting the week of plenary, ever. We also usually cancel the week after plenary to give folks a rest.


2022-06-22
[05:11:26.0953] <nicolo-ribaudo>
Surma I plan to review the proposal this week; do you still plan to include module function shorthands? Or should I ignore that part?

[05:19:58.0739] <Surma>
I don't think I'll include it in the mvp

[05:20:07.0828] <Surma>
Thanks for taking a look! Really appreciate it

[05:39:17.0173] <littledan>
We had a pretty extensive discussion about module blocks in the "loader" chat

[05:39:49.0898] <littledan>
ultimately it underscored for me the conclusion that we probably want to say, if you postMessage a module block multiple times, you get a different identity/module map entry each time

[05:40:05.0371] <littledan>
nicolo-ribaudo: Did you see this discussion? What did you think?

[05:42:14.0582] <nicolo-ribaudo>
I still haven't caught up with that discussion (it happened during the night for me), but I'll have an opinion by the end of the day

[05:42:39.0509] <littledan>
we can talk it over later today if you want; there was a lot of back-and-forth and it's not necessary that you read it all

[05:43:41.0521] <nicolo-ribaudo>
Oh btw Surma, it would probably be good for you to join the biweekly TC39 Module Loading call (the next one is on July 6th, you can check the TC39 calendar for the time in your local time zone)

[05:45:10.0273] <Surma>
> <@littledan:matrix.org> ultimately it underscored for me the conclusion that we probably want to say, if you postMessage a module block multiple times, you get a different identity/module map entry each time

I haven't caught up, but i agree with the conclusion :D

[05:45:29.0138] <Surma>
> <@nicolo-ribaudo:matrix.org> Oh btw Surma, it would probably be good for you to join the biweekly TC39 Module Loading call (the next one is on July 6th, you can check the TC39 calendar for the time in your local time zone)

I thought i was on the list?? I didn't know one already happened 

[05:45:37.0704] <littledan>
ah OK someone thought you were pushing the other direction

[05:46:53.0220] <Surma>
> <@littledan:matrix.org> ah OK someone thought you were pushing the other direction

No, but one thought experiment I had was what happens if I send a block to a worker, and the worker sends it straight back. Is it desirable that we restore identity? 

[05:48:25.0650] <nicolo-ribaudo>
> <@surma:matrix.org> I thought i was on the list?? I didn't know one already happened

You can find the notes at https://github.com/tc39/Reflector/issues/436#issuecomment-1154620771 (and some slides from Kris in the notes). Mostly Kris presented their vision of how all the proposals interact together by going through the slides, and how some can be re-explained in terms of the others.


2022-06-23
[23:12:39.0236] <Kris Kowal>
Just to register my personal preference regarding module blocks and idempotence: import(module {}) should be analogous to eval. The module should always be evaluated and should not be memoized, even by a gensym. That would provide a consistent experience even in the case where the module gets transported or returned. Also means that the loader doesnâ€™t retain the resulting graph of module instances, so some things could be collected earlier. That doesnâ€™t preclude user code memoizing the result, even using the identity of the block as a memo key. In short, I strongly prefer to avoid inconsistent behavior between local and remote versions of import(block).

[00:25:56.0671] <nicolo-ribaudo>
Kris Kowal On the other hand `import("data:text/javascript, ...")` is memoized, and it's the closest thing we have to module blocks 

[00:27:18.0420] <nicolo-ribaudo>
Even if being a primitive does not suffer from the structured clone problem 

[02:11:09.0321] <littledan>
> <@surma:matrix.org> No, but one thought experiment I had was what happens if I send a block to a worker, and the worker sends it straight back. Is it desirable that we restore identity?

My intuition is, it'd be cool if it did, but also I don't see why anyone should depend on that

[02:12:35.0235] <littledan>
> <@kriskowal:matrix.org> Just to register my personal preference regarding module blocks and idempotence: import(module {}) should be analogous to eval. The module should always be evaluated and should not be memoized, even by a gensym. That would provide a consistent experience even in the case where the module gets transported or returned. Also means that the loader doesnâ€™t retain the resulting graph of module instances, so some things could be collected earlier. That doesnâ€™t preclude user code memoizing the result, even using the identity of the block as a memo key. In short, I strongly prefer to avoid inconsistent behavior between local and remote versions of import(block).

This is a little hard for me to square with, if you use module fragments and have a little module subgraph with a diamond import pattern, you clearly don't expect cloning in that case, or do you?

[07:47:26.0561] <Kris Kowal>
I would expect one fresh instance of each module in the subgraph. The subgraph does not need to be memoized by the loader in order to achieve idempotence within the subgraph.

[07:49:37.0310] <Kris Kowal>
That is to say, I think we agree that importing a module fragment should not produce more than one instance of each of the transitively imported module fragments.

[07:50:21.0857] <Kris Kowal>
But I do think itâ€™s acceptable for each dynamic import of a module fragment to instantiate exactly one fresh copy of the module fragment subgraph.

[08:05:39.0580] <Kris Kowal>
One of the things that I learned from our last conversation, that I quite like, is that every module fragment has an equivalent source text, effectively a single static module record that can be cached on the identity of the fragment. That also implies that it is content addressable and can be cached as a document or in transit. So thereâ€™s a lot to recommend that as a feature of transportability.

[08:06:57.0223] <Kris Kowal>
But caching the content doesnâ€™t necessarily require memoization of the instances. Instantiating a module fragment essentially means instantiating a list of blocks. All of this is of course provisional, assuming that the idea of lexically named module blocks is popular here.

[08:08:47.0932] <Kris Kowal>
 * But caching the content doesnâ€™t necessarily require memoization of the instances. Instantiating a module fragment essentially means instantiating a list of blocks. All of this is of course provisional, assuming that the idea of lexically named module blocks is popular here.

[08:13:55.0898] <Kris Kowal>
But, Iâ€™ll concede this idea holds no water at all if thereâ€™s a hope that itâ€™ll eventually be possible for a module fragment to be imported or exported between modules. If thereâ€™s a hope that would be eventually possible, I think thatâ€™s a very different design world.

