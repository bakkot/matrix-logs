2022-03-01
[13:55:36.0472] <shu>
building up giant regexps to pass to `String#replace` is unreasonably effective

[13:55:43.0674] <shu>
why even write compilers

[14:07:21.0913] <bakkot>
building up giant regexps to pass to String#replace _is_ writing compilers

[14:08:27.0052] <shu>
deep...

[15:07:35.0458] <shu>
bakkot: already using the new biblio to do https://github.com/whatwg/webidl/pull/1111, pretty nice

[15:08:21.0236] <shu>
let me open an issue for bikeshed to incorporate some kind of completion linting...


2022-03-02
[14:32:22.0741] <jmdyck>
is there an editors' meeting?


2022-03-03
[16:02:17.0546] <ljharb>
bakkot: looks like the biblio job failed https://github.com/tc39/ecma262/runs/5400126286?check_suite_focus=true

[16:02:56.0530] <ljharb>
i think it's missing the checkout action

[16:03:13.0033] <ljharb>
one sec, i'll put up a PR

[16:04:00.0255] <bakkot>
beat you to it: https://github.com/tc39/ecma262/pull/2679

[16:04:38.0807] <bakkot>
I wonder what sort of job _doesn't_ need the repo checked out, such that it is not the default behavior

[16:04:50.0083] <ljharb>
ha, ok - my change also avoids setup-node in favor of using the same setup as the rest of the actions

[16:05:10.0887] <bakkot>
setup-node is the standard thing, no?

[16:05:27.0615] <bakkot>
like the one github itself maintains

[16:05:37.0067] <ljharb>
yes

[16:05:56.0484] <ljharb>
not very well, tho :-)

[16:06:20.0184] <bakkot>
I think I'd prefer to stick to the standard thing absent some reason to switch

[16:06:31.0585] <bakkot>
I know this particular setup works for publish jobs, since it's what ecmarkup is already doing

[16:07:05.0961] <ljharb>
the main reason would be consistency with everything else in ecma262

[16:07:08.0694] <ljharb>
but sure

[16:07:31.0371] <bakkot>
We could change the others to match I guess

[16:07:39.0235] <bakkot>
what's the thing you like better about your version?

[16:07:41.0750] <bakkot>
 * what's the thing you like better about your version?

[16:07:45.0687] <ljharb>
sure. but then we might be stuck on an older node for 2 years like setup-node was

[16:08:07.0456] <ljharb>
the main thing i like is that it supports, via nvm, any node version we like, without any explicit maintenance

[16:08:17.0200] <ljharb>
setup-node requires an explicit change for it to support a new version of node

[16:08:42.0578] <bakkot>
ah, for our projects I think that is unlikely to end up mattering

[16:08:43.0499] <ljharb>
(it also abstracts away a bunch of stuff for older nodes that ofc doesn't apply here)

[16:13:36.0790] <ljharb>
https://www.npmjs.com/package/@tc39/ecma262-biblio

[16:14:07.0522] <bakkot>
wait, damn it: `Version 1.0.1`

[16:14:18.0877] <bakkot>
... the clone is shallow, isn't it

[16:14:20.0454] <bakkot>
argh

[16:15:41.0069] <ljharb>
oops, lol yes, it is

[16:15:48.0136] <ljharb>
unless you add a depth thing to the checkout action

[16:16:08.0358] <ljharb>
so, to use it, add `--load-biblio @tc39/ecma262-biblio` to my ecmarkup command, and also install the package?

[16:16:13.0696] <bakkot>
that is a reasonable default but not what I actually wanted

[16:16:15.0371] <bakkot>
indeed!

[16:16:30.0739] <bakkot>
you will need the latest (major) version of ecmarkup, ofc

[16:18:45.0452] <bakkot>
ljharb: https://github.com/tc39/ecma262/pull/2680

[16:19:51.0289] <ljharb>
I’m actually about to head out; ok if i land it in a few hours?

[16:19:54.0815] <shu>
my experience with any and every CI commit is a series of fixups with commit messages like

[16:20:06.0519] <shu>
"argh", "test", "test2", "maybe this works?"

[16:20:24.0966] <bakkot>
ljharb: yeah no rush

[16:20:26.0717] <ljharb>
yeah that’s why i suggested running a dry run on every PR :-p

[16:20:42.0872] <bakkot>
just needs to happen before the next commit lands, so that the build doesn't break

[16:20:50.0480] <bakkot>
 * just needs to happen before the next commit lands, so that the build doesn't break

[16:21:03.0572] <bakkot>
dry run wouldn't've caught this particular thing, alas

[16:21:07.0794] <bakkot>
but yeah would've caught the first one

[16:21:22.0062] <bakkot>
 * but yeah would've caught the first one

[19:55:19.0610] <ljharb>
nah it'd still have done a dry run with the wrong version number, and also a shallow checkout, so i think we'd have seen it

[19:56:08.0788] <ljharb>
 * nah it'd still have done a dry run with the wrong version number, and also a shallow checkout, so i think we'd have seen it

[19:57:05.0623] <ljharb>
Related: should we tweak it so it only publishes a new biblio when the lockfile or the spec changes?

[20:01:31.0992] <ljharb>
and we've got a v1.0.2251

