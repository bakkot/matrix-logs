2021-11-01
[22:47:15.0757] <ljharb>
definitely there's lots of spam PRs github hid

[22:47:25.0274] <ljharb>
where did you get these notifications? i haven't seen any

[22:47:44.0686] <ljharb>
1986 got closed because anne had deleted his fork, so the PR couldn't ever be updated

[22:48:25.0796] <ljharb>
oh maybe i didn't get the notifications because i did the action.

[22:49:02.0043] <ljharb>
so re PR 1508 - that actually has a ref that points to a3bae8cc2ad9da4db1379cf2af683eb115a65f88 (which is also PR 1378)

[22:49:09.0596] <ljharb>
 * so re PR 1508 - that actually has a ref that points to a3bae8cc2ad9da4db1379cf2af683eb115a65f88 (which is also PR 1378)

[22:50:09.0997] <ljharb>
all of the spam PRs' refs are still there forever. one of them, 1642, followed the master branch - meaning, even tho the PR is utterly inaccessible, the PR was from master *to another branch*, so every time master changes, the PR ref moves. but now it's closed, so that ref won't keep changing. so that's nice


2021-11-02
[23:28:42.0737] <bakkot>
finished my formatter, finally: https://github.com/tc39/ecma262/pull/2564


2021-11-03
[22:32:54.0414] <ljharb>
"is finite" seems to be used in the spec for both Number values and also mathematical values. Is that desired?

[23:08:01.0958] <bakkot>
seems fine

[23:08:28.0631] <bakkot>
we give the definition for `finite` for Number values, even

[14:29:48.0178] <bakkot>
gonna be a couple minutes late for editor call, sorry


2021-11-04
[19:25:03.0398] <bakkot>
shu: https://github.com/tc39/ecma262/pull/2566

[07:21:53.0122] <shu>
will look today

[12:41:50.0583] <bakkot>
shu: re: https://github.com/tc39/ecma262/pull/2548, it looks like very nearly every `!`-prefixed call gets the user-code effect suppressed (possibly actually all of them?). maybe worth building that heuristic into ecmarkup?

[13:57:03.0652] <shu>
bakkot: almost all, yes. worth thinking about building it in. it puts the burden of vigilance on us (the PR reviewers) to remember to check if a `!` shouldn't be suppressed. otherwise it puts the burden on authors

[13:57:14.0233] <shu>
putting it on us is probably the right choice

[14:40:46.0069] <shu>
bakkot: Michael Ficarra oh, for the "*default*" stuff, the point is that "*default*" is used only as a [[LocalName]] and not as an [[ExportName]] in ExportEntry Records, and therefore is not user visible?

[14:46:54.0179] <shu>
so if a module exports a value named `"*default*"`, that could be imported, since the magical [[ExportName]] name is `"default"`, which has always been user exposed?

[14:59:13.0612] <bakkot>
yeah exactly

[15:01:50.0746] <bakkot>
(It also gets into the [[BindingName]] of ResolvedBinding Records, but that's basically the same as the [[LocalName]] of ExportEntry Records)

[15:03:30.0496] <shu>
right

[15:03:49.0878] <shu>
whereas `"*"` and `"*namespace*"` leak into [[BindingName]], which is the problem

[15:04:13.0456] <bakkot>
into [[ImportName]], rather

[15:06:06.0263] <shu>
ah right, that's the usual case

[15:06:13.0167] <shu>
the [[BindingName]] problem is for accessing via a namespace object

[15:08:39.0010] <bakkot>
ah, yes, right

[15:10:12.0697] <bakkot>
actually I thinking further I'm not 100% sure `"*namespace*"` is actually a problem, hm

[15:11:25.0971] <bakkot>
`"*"` definitely is though

[15:11:48.0836] <shu>
why isn't "*namespace*" a problem?

[15:12:43.0383] <bakkot>
because the lookup that's happening in step 10 of 10.4.6.8 (module NS [[Get]]) is of the post-resolution name

[15:12:52.0123] <bakkot>
which is strictly internal, same as `"*default*"`

[15:13:55.0842] <bakkot>
[[BindingName]] tells you where to find the binding of interest _within_ the module; it's not the externally-facing name

[15:14:29.0620] <bakkot>
exactly the same same as [[LocalName]] of ExportEntry Records

[15:14:56.0673] <shu>
oh, and `export *` has no [[LocalName]]

