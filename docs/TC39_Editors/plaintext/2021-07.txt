2021-07-01

2021-07-02

2021-07-03

2021-07-04

2021-07-05

2021-07-06

2021-07-07

2021-07-08

2021-07-09
[07:49:56.0017] <Michael Ficarra>
added a sentence to https://github.com/tc39/ecma262/pull/2451/files

[07:50:00.0311] <Michael Ficarra>
I'm pretty happy with that

[07:50:08.0063] <Michael Ficarra>
let me know if it covers what you wanted

[13:38:49.0727] <shu>
i still feel like i wanna read the phrase "template raw value" somewhere


2021-07-10

2021-07-11

2021-07-12

2021-07-13
[17:42:57.0795] <Michael Ficarra>
lol, just saw https://github.com/tc39/ecma262/issues/2454

[18:03:19.0475] <shu>
was pretty good


2021-07-14
[16:10:17.0875] <bakkot>
https://github.com/tc39/ecma262/pull/545 is updated including the ` : ` -> `: ` change we asked for

[16:10:29.0552] <bakkot>
I think it's good to go

[16:10:51.0002] <bakkot>
should get a review from at least one of shu or Michael Ficarra , though

[16:11:12.0553] <bakkot>
also it'll conflict with many open PRs, but I am happy to take care of the rebases


2021-07-15
[17:41:08.0477] <shu>
will review next week or later this week if i decide to work

[18:12:34.0637] <Michael Ficarra>
I've reviewed it in the past, and I really don't expect to find anything new

[18:13:00.0998] <Michael Ficarra>
I can do a really quick once-over to make sure there's nothing stray included if you like

[18:27:28.0654] <bakkot>
Just skim for the syntax and read my description of the diff, basically

[18:27:34.0253] <bakkot>
 * Just skim for the syntax/formatting and read my description of the diff, basically

[18:31:52.0787] <Michael Ficarra>
actually yeah, I see your diff of the rendering, that should be fine

[18:32:08.0645] <Michael Ficarra>
as long as we've not missed any recently-introduced AOs

[18:32:25.0901] <Michael Ficarra>
does ecmarkup ensure we don't define an AO without metadata?

[18:32:52.0130] <Michael Ficarra>
I see my RoundMVResult AO is there

[18:35:07.0523] <bakkot>
Nope, intentionally so that existing PRs still build

[18:35:19.0531] <bakkot>
we'll check manually for a while

[18:35:28.0341] <bakkot>
I'll turn on enforcement at some future point

[18:37:43.0948] <Michael Ficarra>
k yeah it's not the end of the world if we've missed some

[18:37:52.0674] <Michael Ficarra>
I'm gonna just stamp it

[18:38:14.0826] <Michael Ficarra>
... set a reminder to enable enforcement?

[18:38:23.0421] <Michael Ficarra>
maybe best to just have a tracking issue

[18:39:00.0622] <bakkot>
I'll put it in the linting tracking issue

[19:06:08.0751] <Michael Ficarra>
ljharb: did that do anything?

[19:07:26.0594] <Michael Ficarra>
I don't have any clue what these numbers mean

[19:11:48.0208] <ljharb>
now i can post

[19:11:54.0655] <Michael Ficarra>
lol just needed to add more 9s

[19:12:03.0644] <ljharb>
ship it

[19:13:17.0151] <ljharb>
ok so i'll land 545 first, and rebase everything else on top

[21:05:15.0042] <Michael Ficarra>
ljharb: is 2442 a nontrivial rebase?

[21:05:22.0536] <ljharb>
yes

[21:05:30.0009] <Michael Ficarra>
strange

[21:05:33.0782] <ljharb>
i could probably figure it out but it took more judgement than i wanted

[21:05:50.0926] <ljharb>
it's like, 2442 changes adjacent to 545 changes, and git not being good at detecting that

[22:03:47.0271] <ljharb>
does https://github.com/tc39/ecma262/pull/2125 need a post-545 adjustment as well?

[22:09:02.0757] <Michael Ficarra>
probably not, but it needs further review

[22:09:42.0849] <Michael Ficarra>
yeah I don't see any new AOs, so it should be ready to go assuming we get approvals


2021-07-16
[12:13:10.0693] <shu>
Michael Ficarra: bakkot: i wanna do a temperature check among us for moving structured clone into tc39 and owning it (+ the structured clone algorithms for 262 objects)

[12:16:49.0078] <bakkot>
I would be happy with that if HTML is on board

[12:23:17.0873] <shu>
indeed, domenic is the one who reached out to me to do it

[12:23:32.0217] <shu>
i'm thinking of an initial proposal to not expose it programmatically, just to do the refactoring across specs

[12:23:53.0404] <shu>
we'll then split the maintenance responsibilities as 262 owning the cloning algorithms for 262+402 objects, and HTML owns the others, instead of HTML owning everything

[12:24:11.0055] <shu>
the possibly contentious normative thing to hash out is what to throw for errors

[12:37:25.0290] <bakkot>
I'm OK with just deferring to hosts for that personally

[12:38:18.0028] <bakkot>
obviously I'd prefer to throw the appropriate 262 error, but if that's going to be contentious I wouldn't want to fight about it

[12:39:10.0386] <bakkot>
and just saying "throw a host-defined non-exotic value which has Error.prototype somewhere in its prototype chain" works for me

[12:39:11.0668] <bakkot>
or similar

[12:42:16.0282] <bakkot>
(with my user hat on, the precise type of an error basically never matters to me)

[12:45:10.0266] <shu>
beyond being contentious we can't really change it for HTML anyway

[12:45:34.0381] <shu>
> (with my user hat on, the precise type of an error basically never matters to me)

yes, that's my hunch. it seems riskier than error timing, but still not risky in the scheme of things


2021-07-17

2021-07-18

2021-07-19
[19:02:29.0251] <bakkot>
shu: I just reviewed TLA. Mostly looks good. If you still have stuff paged in at all, can you take a look at https://github.com/tc39/ecma262/pull/2408#discussion_r671922954, https://github.com/tc39/ecma262/pull/2408#discussion_r671923292, and https://github.com/tc39/ecma262/pull/2408#discussion_r671931375 ? Those are my only nontrivial comments.

[10:43:40.0300] <shu>
thanks for ping, looking now


2021-07-20
[12:23:40.0641] <ljharb>
it might be good to land the proto one before TLA, but obv yall can pick the order

[12:55:57.0271] <shu>
they don't conflict in any way, do they?

[13:01:59.0845] <ljharb>
i wouldn't expect so. just speaking in terms of "order in which consensus was given"


2021-07-21
[10:40:46.0026] <shu>
bakkot: nice, structured headers landed. rebasing https://github.com/tc39/ecma262/pull/2442 right now and got a question

[10:41:15.0053] <shu>
the HostEnqueueFinalizationRegistryCleanupJob is structured a little oddly

[10:41:58.0008] <shu>
that's what it looks like on a local build

[10:42:49.0081] <shu>
the odness is that the "Let cleanupJob be ..." section needs to come _before_ the description that "[It] is an implementation-defined abstract operation that schedules [...]"

[10:42:54.0929] <shu>
 * the oddness is that the "Let cleanupJob be ..." section needs to come _before_ the description that "[It] is an implementation-defined abstract operation that schedules [...]"

[10:43:38.0387] <shu>
this looks weird currently with an initial sentence "The abstract operation HostEnqueueFinalizationRegistryCleanupJob", then a bunch of stuff, then another sentence of "[It] is an impl-defined abstract operation"

[10:43:56.0341] <shu>
any thoughts on formatting this?

[10:44:56.0067] <shu>
my first thought was to rephrase the "is an implementation-defined abstraction operation that schedules [...]" sentence into a conformance requirement, but it's not really a conformance requirement

[10:50:53.0013] <shu>
hm, i think i will rephrase that sentence to "An implementation of HostEnqueueFinalizationRegistryCleanupJob schedules _cleanupJob_ to be performed at some future time, if possible. It must also conform to the requirements in <emu-xref href="#sec-jobs"></emu-xref>"

[14:17:10.0599] <bakkot>
I like the phrasing it ended up as


2021-07-22
[19:58:52.0883] <ljharb>
Michael Ficarra: is 2125 ready to land?

[20:35:57.0634] <bakkot>
ljharb: no, give me a chance to review

[20:36:03.0004] <bakkot>
I'll get to it tonight and then put the label on

[20:36:57.0805] <ljharb>
Perfect, thanks

[07:36:04.0824] <shu>
so i've never developed a TS project before, how do i actually build ecmarkup? it's complaining that it can't find ecmarkdown

[08:10:42.0397] <shu>
oh i see, i guess i needed to `npm install`, but then how do i use a local copy of ecmarkdown?

[09:54:41.0403] <bakkot>
the official way is to do `npm link` in your local ecmarkdown directory and then `npm link ecmarkdown` in your ecmarkup directory

[12:38:16.0308] <shu>
cool, thanks

[16:10:38.0497] <shu>
i have a WIP of the annotation that works off of reachability of 'Call'

[16:10:57.0086] <shu>
the naive version is producing funny results

[16:12:58.0424] <shu>
it is marking static semantics as calling user code because we use ToString liberally

[16:31:30.0775] <shu>
bakkot: did we make it so that all `emu-clause`s have a `type` attribute?


2021-07-23
[17:20:12.0109] <bakkot>
nope

[17:20:20.0906] <bakkot>
all AOs do, though, of any stripe

[17:20:24.0172] <bakkot>
(I believe)

[17:20:48.0460] <bakkot>
 * all AOs do, though, including SDOs and host-defined AOs and so on

[17:22:43.0936] <shu>
what about all static semantics that also have aoids?

[17:23:14.0439] <shu>
i classified all the the `type="sdo"` into `type="static sdo"` vs `type="dynamic sdo"`, since i need that info to stop propagating the can-call-user-code annotation

[17:23:29.0787] <shu>
but that only works if we already exhaustively marked the SDOs

[20:03:40.0814] <bakkot>
I believe we have exhaustively marked the SDOs, yes

[20:04:07.0098] <bakkot>
SDOs have AOIDs still only because they do not yet have structured headers, since we just wanted to get that PR landed

[20:07:46.0859] <bakkot>
jmdyck: you should be able to speak here now if you're so inclined

[21:00:06.0120] <jmdyck>
cool, thanks

