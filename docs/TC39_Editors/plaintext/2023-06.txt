2023-06-01
[18:41:10.0962] <Michael Ficarra>
ljharb: mind rebasing https://github.com/tc39/ecma262/pull/3046?

[18:41:38.0327] <Michael Ficarra>
also ping bakkot for review on that and https://github.com/tc39/ecma262/pull/2951

[22:09:42.0580] <ljharb>
done

[23:30:00.0826] <ljharb>
bakkot: btw i found my bug with the extra bytes; i was just an idiot and forgot typed arrays aren't concat-spreadable

[08:08:36.0551] <Michael Ficarra>
nobody remembers what is and is not concat spreadable üòû

[09:25:31.0464] <ljharb>
i remember that arrays and nodelists are :-p but yeah i agree it's a dumb protocol, it should just have spread any non-primitive arraylike without a protocol

[15:42:15.0078] <Michael Ficarra>
we haven't been keeping up with Annex F in a while

[15:42:28.0508] <Michael Ficarra>
have we been able to get away with any breaking changes since 2019?

[15:47:25.0483] <bakkot>
that annex is a bit silly given that "add a new method to Array.prototype" is objectively much more likely to break things than dumb completion value edge cases

[16:15:19.0463] <Michael Ficarra>
true

[16:15:27.0887] <Michael Ficarra>
also, a running list isn't all that useful

[16:15:43.0708] <Michael Ficarra>
nobody cares about something that was a "breaking change" years ago and nothing came of it

[16:15:55.0273] <Michael Ficarra>
motion to remove Annex F

[16:18:39.0757] <ljharb>
it's still useful i think, as history

[16:19:00.0330] <ljharb>
if we've made any breaking changes since 2019 i think it'd be good to add them, but i don't know of any, unless you could unicode stuff

[16:22:05.0051] <Michael Ficarra>
I would not count Unicode stuff

[16:22:33.0004] <Michael Ficarra>
wan't like `\k` in RegExps technically breaking bakkot?

[16:22:44.0443] <bakkot>
nope

[16:23:09.0929] <bakkot>
`\k` only means something else if you have a `(?<ident>` somewhere, and that wasn't previously legal

[16:23:20.0278] <bakkot>
so no previously-legal regexp changed meaning

[16:24:59.0293] <Michael Ficarra>
yeah I can't think of anything

[16:25:20.0717] <Michael Ficarra>
the committee blocked all my proposals to make breaking changes üòù

[16:26:36.0316] <ljharb>
lol

[16:26:48.0375] <ljharb>
yeah there were a few of those i wish we'd done, like get rid of regex symbols


2023-06-02
[17:51:29.0113] <Michael Ficarra>
we could really use a better font on the spec

[17:52:19.0331] <Michael Ficarra>
I'd prefer something that dots/slashes zero, but also we could select something with better general legibility

[17:53:35.0463] <Michael Ficarra>
also, it would be better to use a web font so everyone has the same experience instead of using a font list with Windows-exclusive fonts at the highest priority (looking at you, Brian!)

[18:27:47.0130] <Michael Ficarra>
> 6. Let t be ((h * msPerHour + m * msPerMinute) + s * msPerSecond) + milli, performing the arithmetic according to IEEE 754-2019 rules (that is, as if using the ECMAScript operators * and +).

uh, isn't that just how math on Numbers works in the spec? why do we say it like this?

[00:44:36.0541] <bakkot>
we don't generally do nontrivial math on Numbers

[05:51:13.0076] <jmdyck>
If multiplication and division count as nontrivial, I count 7 other places: Day, TimeFromYear, HourFromTime, MinFromTime, SecFromTime, MakeDate, Date.prototype.getTimezoneOffset

[05:55:23.0179] <jmdyck>
Not sure how much bother it would be to shift those to mathematical ops.

[05:58:22.0392] <jmdyck>
side question: is there any interest in having those `<emu-eqn>` ops converted into proper abstract operations?

[08:12:47.0637] <Michael Ficarra>
jmdyck: Yes, I would love that!

[08:13:01.0310] <Michael Ficarra>
I was just thinking about that yesterday

[08:13:40.0875] <Michael Ficarra>
> <@bakkot:matrix.org> we don't generally do nontrivial math on Numbers

that's because we typically desire precise semantics, not float semantics, like here

[08:14:16.0072] <Michael Ficarra>
I don't think that has anything to do with an editorial choice


2023-06-07
[14:32:51.0647] <jmdyck>
Is there a meeting?

[14:38:51.0076] <ljharb>
i'm going to skip it, but i assume others will join

[16:33:45.0700] <Michael Ficarra>
ljharb: https://github.com/tc39/ecma262/pull/3035 is ready to go now, can you merge as soon as you get a chance so we unblock Justin/Temporal?

[16:34:02.0273] <ljharb>
sure, will do shortly


2023-06-08
[11:13:04.0185] <Richard Gibson>
the latest gh-pages job failed; can someone poke and/or fix it?
https://github.com/tc39/ecma262/actions/runs/5205795786

[11:32:26.0398] <bakkot>
re-running...

[11:33:46.0263] <bakkot>
seems to have worked this time

[11:45:20.0211] <Richard Gibson>
thanks


2023-06-11
[20:41:25.0117] <bakkot>
trivial one could use another stamp: https://github.com/tc39/ecma262/pull/2994

[22:16:29.0606] <bakkot>
why do we put `%TypedArray%` in percents when defining it https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%-intrinsic-object

[22:17:39.0636] <bakkot>
we're kind of inconsistent I guess

[22:36:53.0450] <ljharb>
i assume because it's not available as a global

[22:38:35.0710] <bakkot>
neither is AsyncFunction e.g.

[22:39:58.0259] <ljharb>
that should use the % also everywhere, no?

[22:40:16.0319] <ljharb>
TypedArray might be a bit special due to the way they're all defined (NativeError-esque) tho

[06:55:33.0228] <jmdyck>
Yeah, I think GeneratorFunction, AsyncGeneratorFunction, and AsyncFunction should be put in percents.

