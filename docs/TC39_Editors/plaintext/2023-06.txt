2023-06-01
[18:41:10.0962] <Michael Ficarra>
ljharb: mind rebasing https://github.com/tc39/ecma262/pull/3046?

[18:41:38.0327] <Michael Ficarra>
also ping bakkot for review on that and https://github.com/tc39/ecma262/pull/2951

[22:09:42.0580] <ljharb>
done

[23:30:00.0826] <ljharb>
bakkot: btw i found my bug with the extra bytes; i was just an idiot and forgot typed arrays aren't concat-spreadable

[08:08:36.0551] <Michael Ficarra>
nobody remembers what is and is not concat spreadable üòû

[09:25:31.0464] <ljharb>
i remember that arrays and nodelists are :-p but yeah i agree it's a dumb protocol, it should just have spread any non-primitive arraylike without a protocol

[15:42:15.0078] <Michael Ficarra>
we haven't been keeping up with Annex F in a while

[15:42:28.0508] <Michael Ficarra>
have we been able to get away with any breaking changes since 2019?

[15:47:25.0483] <bakkot>
that annex is a bit silly given that "add a new method to Array.prototype" is objectively much more likely to break things than dumb completion value edge cases

[16:15:19.0463] <Michael Ficarra>
true

[16:15:27.0887] <Michael Ficarra>
also, a running list isn't all that useful

[16:15:43.0708] <Michael Ficarra>
nobody cares about something that was a "breaking change" years ago and nothing came of it

[16:15:55.0273] <Michael Ficarra>
motion to remove Annex F

[16:18:39.0757] <ljharb>
it's still useful i think, as history

[16:19:00.0330] <ljharb>
if we've made any breaking changes since 2019 i think it'd be good to add them, but i don't know of any, unless you could unicode stuff

[16:22:05.0051] <Michael Ficarra>
I would not count Unicode stuff

[16:22:33.0004] <Michael Ficarra>
wan't like `\k` in RegExps technically breaking bakkot?

[16:22:44.0443] <bakkot>
nope

[16:23:09.0929] <bakkot>
`\k` only means something else if you have a `(?<ident>` somewhere, and that wasn't previously legal

[16:23:20.0278] <bakkot>
so no previously-legal regexp changed meaning

[16:24:59.0293] <Michael Ficarra>
yeah I can't think of anything

[16:25:20.0717] <Michael Ficarra>
the committee blocked all my proposals to make breaking changes üòù

[16:26:36.0316] <ljharb>
lol

[16:26:48.0375] <ljharb>
yeah there were a few of those i wish we'd done, like get rid of regex symbols


2023-06-02
[17:51:29.0113] <Michael Ficarra>
we could really use a better font on the spec

[17:52:19.0331] <Michael Ficarra>
I'd prefer something that dots/slashes zero, but also we could select something with better general legibility

[17:53:35.0463] <Michael Ficarra>
also, it would be better to use a web font so everyone has the same experience instead of using a font list with Windows-exclusive fonts at the highest priority (looking at you, Brian!)

[18:27:47.0130] <Michael Ficarra>
> 6. Let t be ((h * msPerHour + m * msPerMinute) + s * msPerSecond) + milli, performing the arithmetic according to IEEE 754-2019 rules (that is, as if using the ECMAScript operators * and +).

uh, isn't that just how math on Numbers works in the spec? why do we say it like this?

[00:44:36.0541] <bakkot>
we don't generally do nontrivial math on Numbers

[05:51:13.0076] <jmdyck>
If multiplication and division count as nontrivial, I count 7 other places: Day, TimeFromYear, HourFromTime, MinFromTime, SecFromTime, MakeDate, Date.prototype.getTimezoneOffset

[05:55:23.0179] <jmdyck>
Not sure how much bother it would be to shift those to mathematical ops.

[05:58:22.0392] <jmdyck>
side question: is there any interest in having those `<emu-eqn>` ops converted into proper abstract operations?

[08:12:47.0637] <Michael Ficarra>
jmdyck: Yes, I would love that!

[08:13:01.0310] <Michael Ficarra>
I was just thinking about that yesterday

[08:13:40.0875] <Michael Ficarra>
> <@bakkot:matrix.org> we don't generally do nontrivial math on Numbers

that's because we typically desire precise semantics, not float semantics, like here

[08:14:16.0072] <Michael Ficarra>
I don't think that has anything to do with an editorial choice


2023-06-07
[14:32:51.0647] <jmdyck>
Is there a meeting?

[14:38:51.0076] <ljharb>
i'm going to skip it, but i assume others will join

[16:33:45.0700] <Michael Ficarra>
ljharb: https://github.com/tc39/ecma262/pull/3035 is ready to go now, can you merge as soon as you get a chance so we unblock Justin/Temporal?

[16:34:02.0273] <ljharb>
sure, will do shortly


2023-06-08
[11:13:04.0185] <Richard Gibson>
the latest gh-pages job failed; can someone poke and/or fix it?
https://github.com/tc39/ecma262/actions/runs/5205795786

[11:32:26.0398] <bakkot>
re-running...

[11:33:46.0263] <bakkot>
seems to have worked this time

[11:45:20.0211] <Richard Gibson>
thanks


2023-06-11
[20:41:25.0117] <bakkot>
trivial one could use another stamp: https://github.com/tc39/ecma262/pull/2994

[22:16:29.0606] <bakkot>
why do we put `%TypedArray%` in percents when defining it https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%-intrinsic-object

[22:17:39.0636] <bakkot>
we're kind of inconsistent I guess

[22:36:53.0450] <ljharb>
i assume because it's not available as a global

[22:38:35.0710] <bakkot>
neither is AsyncFunction e.g.

[22:39:58.0259] <ljharb>
that should use the % also everywhere, no?

[22:40:16.0319] <ljharb>
TypedArray might be a bit special due to the way they're all defined (NativeError-esque) tho

[06:55:33.0228] <jmdyck>
Yeah, I think GeneratorFunction, AsyncGeneratorFunction, and AsyncFunction should be put in percents.


2023-06-12
[19:42:41.0557] <bakkot>
shu: https://github.com/tc39/ecma262/pull/3049 lgtm; you have any last things you want to get in for it or should we mark it ready-to-merge?

[00:29:43.0302] <bakkot>
also shu did you want to review https://github.com/tc39/ecma262/pull/2418 or is it ready to land?


2023-06-13
[10:21:30.0467] <shu>
bakkot: i want to do a cursory glance at #2418; #3049 should be ready-to-merge

[10:21:36.0510] <shu>
sorry i've been out due to family


2023-06-15
[08:04:20.0054] <Michael Ficarra>
https://github.com/tc39/ecma262/pull/2418 should be ready now, right?

[10:19:51.0320] <jmdyck>
2418 has a "For each X in Y" rather than "For each X of Y" if you want to fix that before merge

[10:24:03.0590] <jmdyck>
(For me, it doesn't much matter, because the rest of the loop-control is so weird that i need to special-case it anyway)

[10:40:04.0422] <jmdyck>
(There's also a "which" that should be "that", if that's something y'all care about.)

[10:57:24.0946] <jmdyck>
never mind, I can submit a PR 

[14:10:01.0275] <bakkot>
I pushed a commit to https://github.com/tc39/ecma262/pull/3066 if anyone wants to take a quick look before stamping

[14:10:07.0439] <bakkot>
 * I pushed a commit to https://github.com/tc39/ecma262/pull/3066 if anyone wants to take a quick look before stamping as ready to merge

[14:10:14.0826] <bakkot>
though it's trivial enough it probably doesn't need it

[15:19:10.0288] <Michael Ficarra>
jmdyck: Yes, please submit a PR


2023-06-16
[13:43:32.0557] <jmdyck>
Done.


2023-06-21
[12:39:29.0646] <jmdyck>
I won't be at today's meeting.

[13:30:36.0440] <ljharb>
i likely won't either


2023-06-22
[08:38:34.0603] <jmdyck>
@shu: see https://es.discourse.group/t/is-support-for-subnormal-denormalized-numbers-required/1421

[08:41:39.0477] <jmdyck>
(and the linked esdiscuss thread

[08:41:43.0696] <jmdyck>
 * (and the linked esdiscuss thread)


2023-06-23
[07:45:26.0074] <ljharb>
Michael Ficarra: to be clear i'm not, like, refusing to merge it, but if i merge it then we'll have to discuss it in plenary and i'm hopeful to avoid that

[07:46:31.0971] <ljharb>
i feel like we (tc39) either needs to decide the year is important - and then Annex E is critical, backporting bugfixes to the candidate is critical (which yall three haven't wanted to do much this year or in past years), and then it's fine to link to the snapshots - or, the year's just ecma bureaucracy, and we should only do the bare minimum to satisfy ecma, and we should be linking to the living standard on github everywhere we can

[07:47:08.0473] <ljharb>
but for the better part of a decade many delegates have been pushing the narrative that it's a living standard, that what's on github is what matters, etc, and linking to ecma's website undermines that

[07:49:26.0719] <ljharb>
(it'd be a fair point that these links predate the PR and the PR is just updating them, which is fine, but i hadn't realized we were linking to ecma's website in this context still)

[07:50:14.0244] <Michael Ficarra>
ljharb: we considered 2 options: link to the editors' draft and be burdened with updating the reference to the corresponding yearly release when we cut our own yearly release, or just say "the corresponding yearly release" and for the editors' draft, that kind of implies that the corresponding version is also the editors' draft (since you're not currently looking at a yearly release)

[07:50:26.0999] <Michael Ficarra>
we went with the latter because we didn't want that additional maintenance burden

[07:51:49.0829] <ljharb>
why would we have to update it

[07:52:04.0228] <ljharb>
it's good for us if the snapshot on ecma's website points people to the real spec. they can update it if they want to.

[08:11:39.0271] <Michael Ficarra>
when we cut the 2024 edition, it should point to the 2024 edition of 402

[08:11:46.0490] <Michael Ficarra>
not to the editors' draft

[08:12:27.0462] <ljharb>
why?

[08:12:37.0885] <ljharb>
the 2024 edition of 402 is either the same as the draft, or, it's obsolete already

[08:12:52.0263] <ljharb>
we don't want anyone looking at the snapshots, ideally. we only produce those for ecma imo.

[08:13:18.0607] <ljharb>
if we could put a big red warning on the ones on ecma's site pointing people to the latest one, we would

[08:13:19.0927] <Michael Ficarra>
yes, but someone trying to conform to a yearly release should be conforming to the corresponding yearly release of 402

[08:13:32.0650] <Michael Ficarra>
it may not even integrate properly with the editors' draft anymore

[08:13:38.0521] <ljharb>
nobody should be trying to conform to a yearly release

[08:13:58.0865] <Michael Ficarra>
but that is the person we are considering at the moment!

[08:14:02.0062] <ljharb>
but sure, i see the point. i think that's a really easy thing to automate tho, and i'm happy to do it manually once a year compared to having the wrong link the rest of the year

[08:14:53.0109] <Michael Ficarra>
I am concerned about the fragility of that process

[08:15:09.0900] <Michael Ficarra>
I'd maybe be okay with it if we had a CI process that ran on the release branches that could check it or somethign

[08:15:15.0643] <ljharb>
sure, i'm fine with adding that too

[08:16:14.0852] <ljharb>
but also, the downside of that process being skipped is that someone doing a bad thing - trying to conform to a yearly release - *might* have to do a bit of extra work to find a yearly release. and in that scenario, ecma can make manual updates (they've done so in the past)

the downside of keeping the ecma links is that people will be implementing an obsolete snapshot that may contain un-backported spec bugs

[08:16:25.0946] <ljharb>
and i think the latter is far more likely than the former

[08:17:10.0986] <Michael Ficarra>
on Ecma's page about 262, it links to the editors' draft

[08:17:13.0797] <ljharb>
 * but also, the downside of that process being skipped is that someone doing a bad thing - trying to conform to a yearly release - _might_ have to do a bit of extra work to find a yearly release. and in that scenario, ecma can make manual updates to fix the links (they've done so in the past for different href issues)

the downside of keeping the ecma links is that people will be implementing an obsolete snapshot that may contain un-backported spec bugs

[08:17:24.0112] <Michael Ficarra>
maybe the 402 editors should ask Ecma to update their page to also link to the draft

[08:17:24.0512] <ljharb>
which is great, we had to advocate for that as i recall

[08:17:30.0384] <ljharb>
yes, they should

[08:17:39.0855] <Michael Ficarra>
then that should be sufficient

[08:19:15.0189] <ljharb>
that would still be unnecessary indirection

[08:19:28.0461] <ljharb>
but i agree at that point, then this change wouldn't be as harmful as i'm suggesting

[08:20:11.0929] <ljharb>
i can very easily update the build process to replace the tc39.es links for ecma ones before next march, if that fragility is a concern

[08:20:20.0549] <Michael Ficarra>
I will talk to bakkot about it again today and let you know what we decide

[10:28:49.0728] <bakkot>
Linking to the draft version from the annual version is definitely wrong because it is not generally going to be consistent

[10:28:57.0536] <bakkot>
I am OK with any option which does not have that property

[12:10:53.0400] <ljharb>
i agree it's wrong, and would prefer it not be wrong, but i also care the least about that particular bad outcome (and i think it's easy to avoid)

[12:14:49.0382] <Michael Ficarra>
I've opened https://github.com/tc39/ecma402/issues/795


2023-06-27
[17:00:53.0797] <shu>
sorry i'll be out this week as well, on PTO

[17:01:05.0401] <shu>
will take stock of stage 3/4 things to review


2023-06-29
[10:39:38.0535] <ljharb>
the spec doesn't define a "code unit" or a "code point", and there's enough ambiguity that they could either be a string or an integer (since either is easily convertible to the other). what type of thing would you expect them to be?

[10:46:49.0464] <jmdyck>
Depends what you mean by "expect". Over the course of a few PRs, they've become more like an opaque type. E.g., you can't just do arithmetic on a code point, you have to ask for its numeric value and then do arithmetic on that instead.

[10:49:09.0323] <jmdyck>
(I think that transition is not quite complete.)

[11:00:11.0730] <bakkot>
definitely not a string

[11:00:16.0716] <bakkot>
I would not treat them as integers either though

[11:01:53.0815] <ljharb>
what are they, then?

[11:02:40.0976] <jmdyck>
What is a Boolean? What is *undefined*?

[11:02:54.0156] <ljharb>
so its its own primitive type??

[11:02:55.0141] <ljharb>
 * so its its own primitive type?

[11:03:14.0166] <ljharb>
that's a fine answer - like a spec enum - but then, would you say that "how to represent it in JS" is a judgement call?

[11:04:05.0722] <jmdyck>
Isn't "how to represent it" always a judgement call?

