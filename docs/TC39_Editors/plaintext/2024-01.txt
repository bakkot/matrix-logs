2024-01-03
[10:50:51.0541] <shu>
we cancelled today's meeting, right?

[10:50:52.0929] <shu>
i don't remember

[10:51:57.0407] <jmdyck>
yup

[10:52:33.0328] <jmdyck>
and it's not in the TC39 Events Calendar

[10:52:42.0503] <shu>
thanks


2024-01-07
[14:57:40.0796] <bakkot>
shu: do you want to stamp https://github.com/tc39/ecma262/pull/3163#issuecomment-1730375160 or should we just land it

[14:57:45.0656] <bakkot>
it is a very minor tweak


2024-01-10
[14:26:48.0483] <shu>
will be a few mins late


2024-01-11
[08:50:00.0534] <Michael Ficarra>
some of the aliases in `%TypedArray%.prototype.slice`: `count`, `len`, `final`, `limit`, and a long-lived single-letter alias `k`

[08:50:12.0042] <Michael Ficarra>
this would be so much easier to follow with more descriptive aliases

[08:51:04.0332] <shu>
agree, but not as part of the bugfix PR

[09:38:40.0854] <Michael Ficarra>
of course

[09:38:52.0080] <Michael Ficarra>
https://github.com/tc39/ecma262/pull/3245 is ready to stamp now I think


2024-01-17
[13:35:43.0244] <shu>
i'll be 10 minutes late again, hopefully no more

[13:36:00.0273] <shu>
have a weird meeting slot that's 2:20-2:40pm

[14:25:46.0312] <bakkot>
Michael Ficarra and I will wait until 2:40 to show up then


2024-01-23
[13:18:54.0835] <bakkot>
Michael Ficarra: IBM plex just did a release which closed the issue with the weird `#`: https://github.com/IBM/plex/pull/555

[13:19:07.0418] <bakkot>
presumably as a variant glyph

[13:19:10.0374] <bakkot>
you want to update the fonts?

[13:36:28.0882] <Michael Ficarra>
I'm not especially motivated to spend my time that way


2024-01-24
[11:15:49.0888] <shu>
how would this have even happened? https://github.com/tc39/ecma262/issues/3267

[11:16:04.0859] <shu>
it's not like a column got cut off because of page width

[11:16:39.0119] <shu>
oh i suppose the table bled across the page break, so Allen manually broke it up and missed a row

[11:17:48.0277] <bakkot>
that or a bug in the preview of paged.js vs the print-to-pdf function in the browser

[11:18:30.0831] <bakkot>
I know this because literally yesterday I had a printed book show up at my door which I made with paged.js which was missing lines of text at the bottom of a couple pages and it turned out to be because those lines were present in paged.js's preview but not in the PDF generated by doing print-to-pdf from that page

[11:18:43.0660] <shu>
ha

[11:18:49.0544] <shu>
i mean, sorry about your misprinted book

[11:19:08.0531] <bakkot>
it was only $10 and only for me, not actually a problem

[11:20:02.0813] <shu>
that seems pretty affordable

[12:49:53.0883] <Michael Ficarra>
yeah this is likely from allen manually splitting tables across pages and repeating the headers

[13:41:08.0406] <bakkot>
every use of `IteratorStep` in the spec except for elisions in array bindings (`[a, /*hole*/, b] = iterable`) is immediately followed by `"if _result_ is false; do something; else do IteratorValue(_result_)`. places that have special abrupt completion handling (e.g. `PerformPromiceRace`) duplicate the logic for the `IteratorStep` and `IteratorValue` cases.

this is silly. we should make a version of `IteratorStep` which does the `IteratorValue` itself and returns a completion with either `~done~` or `result.value`.

[13:41:38.0843] <bakkot>
i.e. `IteratorStep` should unwrap the value itself in the not-finished case, instead of making the caller do it

[13:48:13.0534] <bakkot>
before and after

[15:17:22.0522] <Michael Ficarra>
omg it actually is...

[15:28:02.0279] <shu>
F

[15:49:47.0561] <ljharb>
i'm confused, why was your flight from denver to SF going to be routed through san diego

[15:50:53.0372] <shu>
we were talking about check the SD flights for using the Boeing MAXes since they're grounding them close to the actual day of the flight, not beforehand

[15:51:07.0781] <shu>
so if you're flying on a route that uses those you'll likely get cancelled on and have to rebook last minute

[15:52:10.0844] <ljharb>
oh shit, gotcha


2024-01-25
[18:27:56.0136] <bakkot>
https://github.com/tc39/ecma262/pull/3268


2024-01-26
[12:59:49.0404] <bakkot>
we have 3 places where we do "1. If foo is an abrupt completion, do some stuff and return. 2. Set foo to foo.[[Value]]".

thoughts on replacing the second line those case to "Set foo to ! foo"?

[13:00:15.0703] <shu>
i'd like that very much

[13:10:38.0946] <bakkot>
https://github.com/tc39/ecma262/pull/3273


2024-01-28
[12:46:26.0776] <ljharb>
shu: am i right that step 1 of https://tc39.es/ecma262/#sec-arraybufferbytelength could also be achieved by using IsFixedLengthArrayBuffer()? (and perhaps checking both slots in there, since the ArrayBufferByteLengthData slot is what's used in the AO)


2024-01-29
[19:57:29.0124] <shu>
ljharb: the second half of the check, you mean? you can check for IsSharedArrayBuffer and !IsFixedLengthArrayBuffer, that currently implies the object must have a  [[ArrayBufferByteLengthData]] internal slot

[19:57:51.0014] <shu>
but i don't see why you wouldn't check for the slot directly instead of obfuscating it via an implication from another slot

[19:58:40.0026] <ljharb>
to me it conveys the meaning better; i had to search for the slot to figure out why it was checking that

[19:58:53.0086] <ljharb>
but gotcha

[12:02:56.0865] <shu>
yeah i can see going both ways on that preference

[12:03:34.0606] <shu>
we got rid of actual brands (i.e. internal slots that serve no other purpose than as indicators of what type something is), but we don't always check for a slot that we're going to be using

[12:03:52.0486] <shu>
sometimes we use brand-like AOs that pick a slot as the brand-like slot

[12:26:07.0167] <jmdyck>
the global object could be a proxy, couldn't it?

[15:21:27.0533] <ljharb>
also, transfer will add IsResizableBuffer which perhaps could be used in more places

[15:23:37.0648] <shu>
why is it adding IsResizableBuffer?

[15:23:59.0902] <shu>
IsResizableBuffer was changed to the negation (IsFixedLengthArrayBuffer) for better readability in a lot of algorithms

[15:25:36.0006] <shu>
also https://github.com/tc39/ecma262/pull/3175 doesn't add that AO currently

