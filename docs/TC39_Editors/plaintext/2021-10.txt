2021-10-01
[11:29:57.0134] <shu>
what i want is to use `let` even for bindings i don't re-assign!

[12:32:10.0584] <bakkot>
yeah, I also hate that rule

[12:32:26.0408] <bakkot>
I think it predates my maintainership

[12:40:14.0044] <bakkot>
oh, no, it's because of typescript

[12:40:31.0687] <bakkot>
typescript, for some reason, has better type inference when using `const`

[12:41:06.0418] <bakkot>
this seems silly to me, since a whole program analysis should be perfectly capable of noticing that a `let`-bound variable is never reassigned and then treating it exactly like `const`

[12:41:09.0238] <bakkot>
but that's the justification

[12:41:35.0027] <shu>
that is strange

[12:41:39.0879] <shu>
the TS inference thing, i mean


2021-10-02
[09:15:54.0847] <ljharb>
that rule is the best, let sucks, but I agree it’s ridiculous that if affects type inference whatsoever

[09:16:05.0811] <ljharb>
* that rule is the best, let sucks, but I agree it’s ridiculous that it affects type inference whatsoever


2021-10-04
[08:28:08.0042] <shu>
let does suck, but so does const!

[08:28:09.0670] <shu>
var forever

[10:54:37.0610] <ljharb>
should probably say that in comic sans tbh

[15:23:47.0803] <Michael Ficarra>
you use var? I just put everything on Object.prototype

[15:51:47.0137] <shu>
i use var because fast

[15:52:08.0813] <shu>
gonna propose to rename `var` to `vroom`

[16:47:02.0007] <bakkot>
shu: ecmarkup PR lgtm; do you want me to cut a release now, or do you want to wait until the ecma262 PR is up in case you discover changes you want to make during that process?

[16:50:31.0913] <shu>
nah let's just land it and iterate/bugfix as we work on adding the annotation in ecma262

[16:50:38.0520] <bakkot>
wfm

[16:50:45.0520] <shu>
just fingers crossed it doesn't require a new approach!

[16:52:31.0373] <shu>
bakkot: you applied your own suggestion, right?

[16:53:26.0976] <bakkot>
yup

[16:53:30.0804] <bakkot>
and pushed up the formatting

[16:53:57.0639] <shu>
great, thanks


2021-10-05
[17:04:11.0194] <bakkot>
published in v9.4.0

[13:14:33.0538] <bakkot>
I forgot to mention I'm out for a week starting tomorrow

[13:14:39.0494] <bakkot>
y'all will need to make a different meeting for the editor call

[13:42:59.0670] <shu>
thanks for the heads up i'll edit the meeting

[13:45:10.0833] <shu>
enjoy your vacation


2021-10-06
[14:13:52.0661] <ljharb>
shu: you're marked "no" on the event btw

[14:15:47.0304] <shu>
i see that

[14:15:52.0849] <shu>
i also cannot change it for some reason, but i can edit the event

[14:16:00.0716] <shu>
(i am planning on attending, and updated the Meet link)

[14:16:07.0724] <ljharb>
weird, and cool thanks

[14:16:58.0424] <shu>
i have the same event copied over to my personal calendar for the popup reminder

[14:17:10.0856] <shu>
i wonder if calendar is seeing there's a conflict and then auto-marking me as no

[14:17:44.0142] <ljharb>
oh yeah probably so

[14:17:58.0549] <ljharb>
i have that feature turned off

[14:18:46.0801] <shu>
no, that's not it

[14:18:50.0025] <shu>
i have no idea

[14:19:01.0787] <shu>
let me remove myself?

[14:19:57.0174] <ljharb>
now you're a maybe

[14:20:49.0658] <shu>
i think that worked

[14:21:02.0816] <ljharb>
LGTM

[14:21:10.0850] <ljharb>
now the important problems are solved

[16:21:16.0101] <ljharb>
thoughts on https://github.com/tc39/ecma262/pull/2144#issuecomment-676783183 versus https://github.com/tc39/ecma262/pull/2144#pullrequestreview-471015688 ?

[16:21:20.0745] <ljharb>
happy to update to whichever yall prefer


2021-10-07
[20:16:28.0279] <Michael Ficarra>
StringIndexOf should be good enough

[21:25:57.0033] <ljharb>
ok, meaning richard's comment

[21:54:36.0454] <ljharb>
k, updated the PR


2021-10-08
[13:30:33.0723] <shu>
another npm noob question: when i ran `npm install` in ecma262, it basically rewrote package-lock.json from version 1 to version 2

[13:30:47.0040] <shu>
i'm guessing i shouldn't actually commit that? am i supposed to run it with some flags? am i using the wrong version of npm?

[13:37:54.0573] <shu>
ljharb: ^

[13:47:16.0178] <bakkot>
shu: yeah, that means you are npm 7 rather than npm 6

[13:47:19.0117] <bakkot>
it doesn't much matter though

[13:47:22.0302] <ljharb>
that's fine, npm 8 is out now too

[14:33:43.0439] <shu>
thanks

[15:00:20.0899] <Michael Ficarra>
eww, check out https://tc39.es/ecma262/multipage/abstract-operations.html#sec-stringtobigint

[15:00:35.0912] <Michael Ficarra>
why did we ever think it was acceptable to specify things that way?

[15:02:42.0980] <jmdyck>
expediency, probably.

[15:02:47.0852] <Michael Ficarra>
also, it returns a BigInt or NaN, which is very weird

[15:03:11.0718] <Michael Ficarra>
jmdyck: it seems like they wanted to save space or something

[15:03:16.0989] <ljharb>
expediency and also bigint was a massive spec, so it probably didn't get a thorough enough review. that seems to be a pattern in large proposals - it's easy to miss issues

[15:03:23.0181] <ljharb>
 * expediency and also bigint was a massive spec, so it probably didn't get a thorough enugh review. that seems to be a pattern in large proposals

[15:03:27.0443] <ljharb>
 * expediency and also bigint was a massive spec, so it probably didn't get a thorough enough review. that seems to be a pattern in large proposals

[15:03:34.0188] <ljharb>
 * expediency and also bigint was a massive spec, so it probably didn't get a thorough enough review. that seems to be a pattern in large proposals - it's easy to miss issues

[15:03:55.0122] <Michael Ficarra>
agree ljharb, the bigger the review, the more weird stuff slips in

[15:04:33.0856] <Michael Ficarra>
in big reviews, it's easier to spot little local issues than big oddities

[15:06:59.0205] <bakkot>
it wouldn't even be that hard to factor out a "string to MV" AO and then use it in both places

[15:07:23.0336] <bakkot>
we already have such an AO but not over this grammar, I guess

[15:08:09.0894] <Michael Ficarra>
bakkot:  PRs welcome

[15:09:21.0621] <jmdyck>
In my notes, I've got some steps. I'd have to check them over.

[15:12:08.0444] <shu>
okay, a first draft of can-call-user-code at https://ci.tc39.es/preview/tc39/ecma262/sha/a5ba1ae3a48e8cffb1e6051bc97dceace591af20/

[15:12:08.0488] <jmdyck>
I'll probably have time this weekend.

[15:12:19.0197] <shu>
press 'u' to toggle the 'UC' annotation on AO links

[15:12:34.0468] <shu>
play around, it's probably way too conservative and we need a bunch of manual supprsesions

[15:13:25.0187] <shu>
somewhat expectedly and unfortunately, everything can call user code

[15:15:23.0018] <ljharb>
the "u" stuff is verryyyyyy slow to respond

[15:15:35.0545] <ljharb>
how are you changing the visibility?

[15:15:46.0565] <ljharb>
the way i'd assume is fastest is a single css class applied or removed to `html` or `body`, and have that class change something that doesn't case a reflow

[15:16:12.0387] <ljharb>
 * the way i'd assume is fastest is a single css class applied or removed to `html` or `body`, and have that class change something that doesn't case a reflow

[15:16:36.0663] <ljharb>
so, i don't see an annotation on https://ci.tc39.es/preview/tc39/ecma262/sha/a5ba1ae3a48e8cffb1e6051bc97dceace591af20/#sec-isregexp even tho it contains a step that has one - is that expected?

[15:16:54.0203] <ljharb>
it'd also be super useful to show the AO-level annotation in the TOC on the left pane, as well

[15:17:44.0570] <shu>
it is a terrible hack

[15:17:55.0234] <shu>
look at the "e-user-code" class

[15:18:04.0863] <shu>
it has a `::before` that has the 'UC'

[15:18:39.0026] <shu>
however, since i can't directly toggle `::before` visibility, i have a big of JS that injects a `<style>` tag with `.e-user-code::before { display: block !important }` when you press `u`

[15:18:47.0712] <shu>
we definitely should not ship with this

[15:18:48.0009] <ljharb>
why can't you?

[15:18:58.0503] <shu>
how... do you?

[15:19:12.0942] <shu>
i can't select for it

[15:19:35.0268] <ljharb>
if you have two `::before` blocks they don't control the same content?

[15:19:48.0945] <ljharb>
i haven't messed with native css in awhile

[15:19:49.0393] <shu>
yes, and that's what i do

[15:19:56.0043] <shu>
with that style injection hack

