2021-10-01
[11:29:57.0134] <shu>
what i want is to use `let` even for bindings i don't re-assign!

[12:32:10.0584] <bakkot>
yeah, I also hate that rule

[12:32:26.0408] <bakkot>
I think it predates my maintainership

[12:40:14.0044] <bakkot>
oh, no, it's because of typescript

[12:40:31.0687] <bakkot>
typescript, for some reason, has better type inference when using `const`

[12:41:06.0418] <bakkot>
this seems silly to me, since a whole program analysis should be perfectly capable of noticing that a `let`-bound variable is never reassigned and then treating it exactly like `const`

[12:41:09.0238] <bakkot>
but that's the justification

[12:41:35.0027] <shu>
that is strange

[12:41:39.0879] <shu>
the TS inference thing, i mean


2021-10-02
[09:15:54.0847] <ljharb>
that rule is the best, let sucks, but I agree it’s ridiculous that if affects type inference whatsoever

[09:16:05.0811] <ljharb>
* that rule is the best, let sucks, but I agree it’s ridiculous that it affects type inference whatsoever


2021-10-04
[08:28:08.0042] <shu>
let does suck, but so does const!

[08:28:09.0670] <shu>
var forever

[10:54:37.0610] <ljharb>
should probably say that in comic sans tbh

[15:23:47.0803] <Michael Ficarra>
you use var? I just put everything on Object.prototype

[15:51:47.0137] <shu>
i use var because fast

[15:52:08.0813] <shu>
gonna propose to rename `var` to `vroom`

[16:47:02.0007] <bakkot>
shu: ecmarkup PR lgtm; do you want me to cut a release now, or do you want to wait until the ecma262 PR is up in case you discover changes you want to make during that process?

[16:50:31.0913] <shu>
nah let's just land it and iterate/bugfix as we work on adding the annotation in ecma262

[16:50:38.0520] <bakkot>
wfm

[16:50:45.0520] <shu>
just fingers crossed it doesn't require a new approach!

[16:52:31.0373] <shu>
bakkot: you applied your own suggestion, right?

[16:53:26.0976] <bakkot>
yup

[16:53:30.0804] <bakkot>
and pushed up the formatting

[16:53:57.0639] <shu>
great, thanks


2021-10-05
[17:04:11.0194] <bakkot>
published in v9.4.0

[13:14:33.0538] <bakkot>
I forgot to mention I'm out for a week starting tomorrow

[13:14:39.0494] <bakkot>
y'all will need to make a different meeting for the editor call

[13:42:59.0670] <shu>
thanks for the heads up i'll edit the meeting

[13:45:10.0833] <shu>
enjoy your vacation


2021-10-06
[14:13:52.0661] <ljharb>
shu: you're marked "no" on the event btw

[14:15:47.0304] <shu>
i see that

[14:15:52.0849] <shu>
i also cannot change it for some reason, but i can edit the event

[14:16:00.0716] <shu>
(i am planning on attending, and updated the Meet link)

[14:16:07.0724] <ljharb>
weird, and cool thanks

[14:16:58.0424] <shu>
i have the same event copied over to my personal calendar for the popup reminder

[14:17:10.0856] <shu>
i wonder if calendar is seeing there's a conflict and then auto-marking me as no

[14:17:44.0142] <ljharb>
oh yeah probably so

[14:17:58.0549] <ljharb>
i have that feature turned off

[14:18:46.0801] <shu>
no, that's not it

[14:18:50.0025] <shu>
i have no idea

[14:19:01.0787] <shu>
let me remove myself?

[14:19:57.0174] <ljharb>
now you're a maybe

[14:20:49.0658] <shu>
i think that worked

[14:21:02.0816] <ljharb>
LGTM

[14:21:10.0850] <ljharb>
now the important problems are solved

[16:21:16.0101] <ljharb>
thoughts on https://github.com/tc39/ecma262/pull/2144#issuecomment-676783183 versus https://github.com/tc39/ecma262/pull/2144#pullrequestreview-471015688 ?

[16:21:20.0745] <ljharb>
happy to update to whichever yall prefer


2021-10-07
[20:16:28.0279] <Michael Ficarra>
StringIndexOf should be good enough

[21:25:57.0033] <ljharb>
ok, meaning richard's comment

[21:54:36.0454] <ljharb>
k, updated the PR


2021-10-08
[13:30:33.0723] <shu>
another npm noob question: when i ran `npm install` in ecma262, it basically rewrote package-lock.json from version 1 to version 2

[13:30:47.0040] <shu>
i'm guessing i shouldn't actually commit that? am i supposed to run it with some flags? am i using the wrong version of npm?

