2023-03-01
[18:13:31.0968] <Michael Ficarra>
thanks, I responded

[21:59:42.0867] <ljharb>
any thoughts on https://github.com/tc39/ecma262/issues/3020#issuecomment-1441743282 ?

[09:57:21.0034] <Michael Ficarra>
yeah I think they're right and the solution is indeed to move the step into the derived path

[11:25:01.0383] <ljharb>
that was what i was suspecting but i find it hard to believe nobody would have noticed that while implementing class fields

[11:30:46.0508] <shu>
why is that hard to believe? ðŸ™ƒ

[13:29:01.0785] <Rob Palmer>
Is it possible that implementations are inefficient today due to the double init? 

[13:30:11.0568] <shu>
no, looks like no implementations do double init

[13:30:23.0740] <shu>
purely a spec bug

[14:32:18.0333] <jmdyck>
Is there a meeting?

[14:33:21.0393] <Michael Ficarra>
yes

[14:35:19.0930] <jmdyck>
"Sorry, we encountered a problem joining this video call."

[14:38:04.0737] <jmdyck>
The URL is the one that ends in pcz?

[14:41:35.0698] <ljharb>
yes

[14:42:40.0869] <jmdyck>
then I guess google just doesn't like me any more.

[15:00:27.0564] <ljharb>
that's very strange. are you logged in to the google account on the invite?

[15:00:41.0206] <ljharb>
(i'd still expect you to be able to get to it if not, to be clear)

[15:01:07.0491] <jmdyck>
I don't think I ever got an invite

[15:06:53.0942] <jmdyck>
Apparently, being logged into google made the difference.

[15:07:36.0994] <jmdyck>
But I'm pretty sure it hasn't been necessary in the past.

[15:14:38.0578] <ljharb>
yeah it shouldn't be

[15:25:00.0482] <Michael Ficarra>
I was logged out when I initially attempted to join, and it let me put a name in and ask to join (I didn't, I logged in, but it would have let me)

[15:25:30.0018] <jmdyck>
That's normally what I get.


2023-03-02
[18:11:24.0719] <Michael Ficarra>
I can't stop thinking about identity ðŸ˜©

[20:12:11.0832] <shu>
go on a bike ride

[20:12:13.0692] <shu>
live in the moment

[20:12:17.0817] <shu>
your identity is your own

[21:48:52.0293] <ljharb>
be grateful nobody's trying to abbreviate it in the spec and figure out the capitalization :-p

[21:48:55.0631] <ljharb>
 * be grateful nobody's trying to abbreviate it in the spec and figure out the capitalization :-p

[09:03:03.0494] <shu>
i get that reference and am triggered


2023-03-04
[06:51:43.0992] <jmdyck>
Github says "Now, GitHub will help potential first-time contributors discover issues labeled with (good first issue)", but ecma262 has the (good first patch) label instead. Is that because we don't want GitHub's help?

[12:27:54.0654] <ljharb>
no, itâ€™s just that the label predates github supporting it


2023-03-07
[08:59:03.0187] <Michael Ficarra>
let's rename it

[08:59:06.0231] <Michael Ficarra>
I'd love some new contributors

[09:07:56.0516] <jmdyck>
re new contributors, note that https://github.com/tc39/ecma262/pull/3025 is the person's first ever PR


2023-03-08
[14:32:19.0914] <shu>
waiting for people to get out of meeting room, will be a minute


2023-03-09
[16:31:48.0405] <shu>
https://github.com/tc39/ecma262/pull/3027 interested in thoughts


2023-03-10
[13:45:57.0570] <ljharb>
any thoughts on jmdyck's comments on https://github.com/tc39/ecma262/pull/2997#pullrequestreview-1335591901 before i merge it?

[14:13:32.0037] <jmdyck>
(I didn't notice that it was already 'ready to merge'.)

[14:30:50.0236] <Michael Ficarra>
I'm fine either accepting them before merge or asking jmdyck to submit a separate PR for them

[14:31:05.0253] <Michael Ficarra>
they don't hurt but also aren't necessary to merge

[15:21:24.0081] <ljharb>
if the suggestions are good as is, i can pull them in as part of rebasing


2023-03-11
[19:23:28.0228] <Michael Ficarra>
yeah they're fine


2023-03-13
[09:32:28.0407] <Michael Ficarra>
we should discuss Istvan's email at the beginning of the next editor call

[10:44:13.0258] <ljharb>
what email?

[12:18:30.0814] <ljharb>
why does he need that info in his slides? both 262 and 402 have separate items for that

[12:18:57.0294] <ljharb>
maybe "Thanks! There's no need to mention either, though, since we both have individual agenda items for that exact purpose."

[12:27:07.0513] <Michael Ficarra>
I don't know, we should talk about it

[14:13:44.0910] <shu>
test

[14:37:18.0190] <shu>
i kept getting "cannot send message"

[14:37:45.0140] <shu>
why don't we just use discord or something, actually?

[15:03:41.0643] <ljharb>
oof, discord's UX is horrific

[15:10:27.0057] <shu>
i'll tell you what else is horrific UX, not being able to send messages

[15:11:40.0686] <ljharb>
ha, true enough

[15:13:37.0956] <shu>
but i don't use discord either actually

[15:30:11.0439] <bakkot>
> <@shuyuguo:matrix.org> why don't we just use discord or something, actually?

we couldn't get them to update their terms of service to allow public logs, which are a requirement from the lawyers

[15:30:28.0773] <bakkot>
personally I would be happy to go back to irc, but alas

[15:30:32.0940] <shu>
me too

[15:30:45.0685] <shu>
ah yes i remember the log thing now

[15:30:51.0662] <shu>
i had stricken that whole episode from memory

[15:34:42.0742] <Michael Ficarra>
it was Feb 2020, so our focus shifted pretty abruptly right afterward


2023-03-15
[14:36:48.0676] <ljharb>
my comcast *and* verizon is down rn so i won't be in the call, lmk if there's any repo stuff

[15:14:30.0264] <Michael Ficarra>
ljharb: We're trying to get the symbols as weakmap keys PR in this week. We'll ping you when it's ready. Can you be on the look out so we can get that merged as soon as it's ready?

[15:37:58.0192] <ljharb>
will do

[16:13:47.0134] <shu>
Michael Ficarra: bakkot https://github.com/tc39/ecma262/pull/3027 PTAL

[16:17:46.0577] <bakkot>
nice, I like it

[16:25:23.0883] <shu>
okay let me rebase #2777 on top of this

[16:27:17.0514] <Michael Ficarra>
okay so the important part of the PR is `Note that Symbols produced by Symbol.for are a special case; they have identity from the perspective of this specification but do not have identity from the perspective of the ECMAScript language.`

[16:27:37.0056] <Michael Ficarra>
I don't know if the reader knows what "but do not have identity from the perspective of the ECMAScript language" means

[16:27:45.0458] <Michael Ficarra>
 * okay so the important part of the PR is "Note that Symbols produced by Symbol.for are a special case; they have identity from the perspective of this specification but do not have identity from the perspective of the ECMAScript language."

[16:27:54.0786] <shu>
i'd say there're 2 important parts: 1) rejiggering the definition of identity to be about "comparison for equality" in the abstract instead of defining an operation over the word "is" and 2) that sentence

[16:28:08.0818] <Michael Ficarra>
I think we should probably talk about what the *consequence* is instead

[16:28:19.0362] <shu>
the consequence?

[16:29:57.0285] <shu>
 think the practical consequence is... you keep using the word "identity" as you understand it, and i correct you where i think we need to distinguish Symbol.for 

[16:30:02.0949] <shu>
which should be exceedingly rare

[16:30:29.0216] <Michael Ficarra>
also it talks about language values as if they're not specification values, but we mix them so thoroughly that I don't think we should really avoid that reality

[16:31:19.0446] <shu>
what

[16:31:33.0696] <shu>
we say "specification or ECMAScript language value" all the time

[16:31:44.0029] <shu>
or am i misunderstanding what you mean by mixing

[16:32:21.0679] <Michael Ficarra>
we do?

[16:32:32.0195] <Michael Ficarra>
not that I see

[16:33:41.0208] <shu>
"Types are further subclassified into ECMAScript language types and specification types"

[16:33:48.0017] <shu>
what do you think that sentence means

[16:34:42.0937] <shu>
like, there's a list of language types, which are inhabited by the language values

[16:34:47.0627] <shu>
and the other stuff are specification types

[16:34:49.0321] <shu>
and spec values

[16:34:56.0743] <Michael Ficarra>
what do we call the type of all values used in the spec?

[16:35:08.0905] <Michael Ficarra>
I have been calling that specification values

[16:35:08.0972] <shu>
i don't think we have need of that word

[16:35:16.0272] <shu>
that is not what specification values as used means

[16:35:32.0016] <shu>
i guess those are just "values" simplicter

[16:36:28.0652] <shu>
"A specification type corresponds to meta-values that are used within algorithms to describe the semantics of ECMAScript language constructs and ECMAScript language types."

[16:36:37.0949] <Michael Ficarra>
I see

[16:42:28.0386] <shu>
with that clarification, any other concerns?

[16:43:57.0399] <Michael Ficarra>
I'm writing a suggestion

[16:45:11.0184] <Michael Ficarra>
I'm thinking something along the lines of "Note that Symbols produced by Symbol.for are a special case; they are compared for equality as if they did not have identity from the perspective of the ECMAScript language."

[16:45:55.0093] <Michael Ficarra>
but then also if we say that they do not have identity from the language perspective, and symbols have no qualities other than their identity, shouldn't the language think that all Symbol.for symbols are the same?

[16:46:29.0671] <shu>
well this is where we fucked up with designing symbols

[16:46:35.0461] <shu>
Symbol.for symbols are really nothing like Symbols

[16:46:41.0209] <shu>
regular Symbols have no other qualities than their identity

[16:46:48.0986] <shu>
Symbol.for symbols have the quality of their string contents

[16:46:56.0653] <shu>
(from the perspective of the language)

[16:46:57.0370] <bakkot>
symbols have descriptions

[16:47:00.0740] <bakkot>
not just identity

[16:47:08.0551] <Michael Ficarra>
okay so they will have a unique [[description]]?

[16:47:18.0034] <bakkot>
and conveniently, all Symbol.for descriptions are unique

[16:47:19.0479] <bakkot>
so yes

[16:48:17.0174] <shu>
in fact i wonder if that would be an editorial improvement

[16:48:19.0584] <Michael Ficarra>
shu: what do you think about my suggestion?

[16:48:54.0773] <bakkot>
(regular symbols also have descriptions, which is a quality other than identity, so "regular Symbols have no other qualities than their identity" isn't true - it's just that they have identity _as well as_ descriptions)

[16:48:56.0079] <shu>
wfm, only quibble is i'd move "from the perspective of the ECMAScript language" to the start of the second clause

[16:50:03.0973] <Michael Ficarra>
bakkot: they may not have a description though, in which case the only thing distinguishing them is their identity

[16:50:15.0038] <shu>
but all Symbol.for symbols certainly do

[16:50:18.0779] <bakkot>
descriptions don't distinguish them but it is a quality they have

[16:50:24.0884] <Michael Ficarra>
but as long as smybol.for symbols all have descriptions and they're all unique, we're good

[16:50:37.0021] <bakkot>
that is the case, yup

[16:50:54.0984] <bakkot>
I don't love the "they are compared for equality as if they did not have identity from the perspective of the ECMAScript language" suggestion though

[16:50:55.0408] <shu>
it is an editorial change if we got rid of the global registry for Symbol.for, tagged those Symbols with a special brand, and then compared Symbols with those brand using their [[Description]]

[16:51:26.0579] <shu>
 * it is an editorial change if we got rid of the global registry for Symbol.for, tagged those Symbols with a special brand, and then compared Symbols with that brand using their \[\[Description\]\]

[16:51:33.0879] <shu>
Michael Ficarra: maybe you can say more why you don't like the sentence as is

[16:51:36.0079] <bakkot>
specifically I don't love that suggestion because it de-emphasizes the important part, which is that Symbol.for symbols can be manifest merely by reference to their qualities

[16:52:08.0772] <bakkot>
in ES code, but not in the spec

[16:52:28.0591] <bakkot>
that is what "have identity from the perspective of this specification but do not have identity from the perspective of the ECMAScript language" means

[16:52:38.0901] <bakkot>
but it is not what "they are compared for equality as if they did not have identity from the perspective of the ECMAScript language" means

[16:53:44.0872] <Michael Ficarra>
bakkot: well that's why in my original approach that's basically what I said

[16:54:05.0669] <bakkot>
we are going with Shu's approach though

[16:54:17.0745] <bakkot>
so that is why I like the thing currently in the PR, and not the thing you suggest

[16:54:37.0399] <Michael Ficarra>
I thought we were going with a hybrid

[16:54:50.0728] <bakkot>
uh

[16:55:07.0851] <bakkot>
ok we don't need to resolve this confusion

[16:55:24.0172] <bakkot>
the important part is: I like shu's PR as-is, for the reason I gave above, and do not like your suggested change to it

[16:55:27.0406] <shu>
we are going with 1) clarified definition of identity to add explanations about "from the perspective of" and 2) a separate predicate that enumerates what can be a weak target

[16:55:33.0398] <Michael Ficarra>
were we not planning on still pulling in https://github.com/acutmore/ecma262/pull/3/files?

[16:55:51.0943] <Michael Ficarra>
yes, Ashley's PR already has that predicate

[16:55:56.0117] <bakkot>
yes we are

[16:56:02.0690] <bakkot>
I'm only talking about shu's PR right now

[16:56:04.0148] <Michael Ficarra>
and my PR adds context onto it, that's all

[16:56:07.0519] <shu>
well, not the changes to the identity section of that PR

[16:56:10.0649] <shu>
the rest of it yes

[16:56:26.0293] <Michael Ficarra>
yes, the changes to the identity section just reverted Ashley's changes, they weren't a suggestiong

[16:56:31.0673] <Michael Ficarra>
 * yes, the changes to the identity section just reverted Ashley's changes, they weren't a suggestion

[16:56:57.0172] <shu>
ah okay, then yes

[16:57:03.0596] <Michael Ficarra>
okay so back to bakkot "specifically I don't love that suggestion because it de-emphasizes the important part, which is that Symbol.for symbols can be manifest merely by reference to their qualities"

[16:57:19.0217] <Michael Ficarra>
considering we will provide that information in context, do you still feel that way?

[16:57:29.0306] <shu>
i do now that kevin points it out

[16:57:42.0213] <bakkot>
yes

[16:57:55.0448] <shu>
the main reason i started down the stratified identity path is because i think identity is the salient concept, and it should be explained at the site of that concept

[16:59:16.0512] <shu>
the location in the text of the predicate can then be purely about describing the behavior by enumerating what can be a weak target; a note can lead back to the identity section that explains the rationale


2023-03-16
[17:00:33.0177] <bakkot>
I gotta run off for the next ~30m

[17:00:35.0195] <Michael Ficarra>
Okay how about "Symbols produced by Symbol.for are a special case: from the perspective of the ECMAScript language, they may be manifest at any point using their description, so they are compared for equality as if they did not have identity."?

[17:00:44.0606] <bakkot>
that wfm

[17:00:53.0088] <bakkot>
maybe

[17:00:58.0140] <shu>
i don't like "as if"

[17:00:58.0978] <bakkot>
will think about it when I get back

[17:01:02.0523] <shu>
they literally do not have identity

[17:01:36.0433] <shu>
Symbols produced by Symbol.for are a special case: from the perspective of the ECMAScript language, they may be manifest at any point using their description, so they do not have identity when compared for equality.

[17:02:00.0866] <Michael Ficarra>
they are values with identity but the strategy used for comparing them does not observe the identity, it follows the other path

[17:02:19.0691] <shu>
i disagree

[17:02:24.0740] <Michael Ficarra>
we could say something like "their identity does not participate in the comparison" or something

[17:02:39.0292] <shu>
i think if we say that, we should go back to actually defining the stratified identities

[17:03:02.0855] <shu>
if we're sticking with a single notion of identity as about equality, but there are different equalities that operate at the language level vs the spec level

[17:03:06.0639] <shu>
there is no "as if"

[17:03:17.0229] <shu>
we defined values to have identity or not have it wrt a particular comparison operation

[17:03:23.0421] <shu>
at the language level, they do not have identity

[17:03:56.0902] <Michael Ficarra>
I don't know how we can say, in the previous sentence, that all Symbols have identity, then try to say that these *do not*.  They can just have identity and be treated as if they didn't, what's the problem?

[17:04:25.0293] <shu>
okay, then we can say "(with the following exception)" in the previous sentence

[17:04:51.0883] <Michael Ficarra>
> we defined values to have identity or not have it wrt a particular comparison operation
I don't interpret it that way

[17:05:00.0257] <shu>
i do?

[17:05:06.0229] <Michael Ficarra>
 * > we defined values to have identity or not have it wrt a particular comparison operation

I don't interpret it that way

[17:05:12.0829] <shu>
dunno what to tell you, this is the start of our disagreement

[17:05:32.0408] <shu>
and we seem to have lost the agreement that there are in fact 2 identities

[17:05:33.0996] <Michael Ficarra>
can you point to where it says that?

[17:06:20.0691] <shu>
i say: "When comparing for equality, values fall into one of two categories."

[17:06:42.0484] <shu>
formally, i mean: values are categorized as having or not having identity, parameterized by the equality operation

[17:06:47.0346] <shu>
i.e. "when comparing for equality"

[17:07:05.0259] <shu>
there are two levels of "when comparing for equality". at the spec level, with "is" and "contains", and at the language level, with SameValue

[17:07:57.0020] <shu>
it so happens this distinction is not useful at all almost all the time, except the few places we talk about Symbol.for

[17:08:13.0552] <shu>
so i agree it's confusing to actually <dfn> two concepts, and instead just add a paragraph that calls out the one place where it differs

[17:08:39.0749] <Michael Ficarra>
okay, the way I read that is that equality operations, whether they be "is" or "SameValue", are defined piecewise over two pieces: values with identity and values without identity

[17:09:00.0230] <shu>
that is not my intention, and that is why i split the paragraphs up the way i did

[17:09:42.0240] <shu>
let's see... 1) do you agree my reading is fine and 2) any suggestions on how to make that reading clearer?

[17:12:13.0575] <Michael Ficarra>
I think we've arrived back at where we were last week. I desire for any quality called identity to be an intrinsic and permanent property, not one that is bestowed on it from the outside in some way.

[17:12:35.0537] <Michael Ficarra>
that's why we settled on the two identities approach being acceptable, even if undesirable because of potential naming confusion

[17:12:48.0824] <shu>
you have a permanent and intrinsic property at each level that do not interfere with each other

[17:13:19.0525] <shu>
moreover, how that property is defined is exactly the same across both levels

[17:13:34.0306] <Michael Ficarra>
it's not intrinsic if it depends on the lens through which you're currently looking at it

[17:13:37.0622] <shu>
i think what you are saying is you desire for "identity" to be entirely axiomatic

[17:13:51.0514] <shu>
it is intrinsic

[17:14:03.0071] <shu>
i'm sorry i don't understand your hangup here

[17:14:58.0057] <shu>
the compromise we reached in the call, i thought, was that we stick with the formal underpinnings of 2 identities, but we just don't call it two different things because the difference is not useful almost all the time

[17:15:26.0176] <shu>
like, the spec necessarily works in 2 layers: the meta spec layer, and the language layer

[17:15:31.0984] <shu>
that doesn't make the language layer less intrinsic

[17:16:19.0563] <Michael Ficarra>
Let's say that the way you formalise identity is through a predicate called `HasIdentity`. If I ask whether something has identity, I need to consult the predicate. I can't just observe the thing and tell. I think that's an inappropriate way to define identity. This hang-up is uniquely about identity because it is the basis of reasoning.

[17:17:14.0065] <shu>
i say that is a ill-formed question to ask

[17:17:51.0626] <shu>
there is no singular identity to ask of an ECMAScript language value, there are necessarily two questions

[17:18:00.0048] <Michael Ficarra>
now we're talking about the identity of the concept of identity

[17:18:03.0046] <shu>
does it have an identity in the spec meta-machinery and an identity in the language

[17:18:04.0164] <shu>
no we're not

[17:18:06.0991] <Michael Ficarra>
there literally is one true identity

[17:18:09.0071] <shu>
concretely, consider a real implementation

[17:18:15.0409] <shu>
i do not ask "do strings have identity"

[17:18:29.0104] <shu>
i ask "does the C++ implementation of JS strings have identity? (yes, they are heap objects)"

[17:18:40.0019] <shu>
or i ask "do JS strings have identity?" (no they don't)

[17:18:48.0398] <shu>
i do not ask "what is the one true identity-ness of strings"

[17:18:53.0167] <shu>
that question doesn't make sense

[17:19:13.0673] <Michael Ficarra>
yes but we are living in the world of spec text, so identity must mean spec identity

[17:19:37.0858] <shu>
okay, then you would in fact prefer that we _do_ define "language identity" as a separate thing

[17:19:44.0488] <shu>
which i feel is important to define for the liveness definition

[17:19:58.0709] <shu>
and not just use "from the perspective of" language

[17:20:43.0433] <Michael Ficarra>
yes, it is unfortunate that the concepts would be named similar things and also be so closely related, but that seems like the only way to satisfy both of us

[17:20:43.0783] <shu>
> yes but we are living in the world of spec text

we aren't, just like in a C++ implementation we don't just care about the identity of the C++ structures

[17:20:48.0944] <shu>
it's a spec text that specifies a language

[17:20:55.0552] <shu>
a surface language

[17:21:14.0022] <shu>
like i don't know how you think about language specifications if you think concepts should pierce the meta-language and surface-language layer

[17:21:17.0052] <shu>
that seems untenable

[17:21:31.0863] <Michael Ficarra>
no, I think *all* concepts are meta-language concepts

[17:21:43.0517] <Michael Ficarra>
and surface concepts aren't directly discussed, they just arise from meta-language

[17:22:12.0114] <Michael Ficarra>
like ECMAScript language values are values within our spec universe

[17:22:32.0389] <Michael Ficarra>
they're just also 1-to-1 with values that are observed within our fiction

[17:22:33.0205] <shu>
that is true in a fundamental way, but that does not mean the surface-language layer concepts cannot be named and have correspondingly close names!

[17:22:49.0606] <Michael Ficarra>
of course, you're correct

[17:23:01.0094] <Michael Ficarra>
they can have close names, it's just a bit unfortunate, that's all

[17:23:19.0878] <shu>
like it's really really hard to not name them when talking about properties like liveness

[17:23:28.0521] <Michael Ficarra>
that's why I was okay with your PR, but I just thought that the naming was unfortunate (and don't really have a better alternative)

[17:23:33.0810] <shu>
to the point where we do our readers (well, our implementers) a huge disservice

[17:23:42.0092] <shu>
because they are thinking about what optimizations and GCs are allowed

[17:24:39.0727] <Michael Ficarra>
I'm still not entirely sure why you weren't okay with instead having the pair of (suitable for use in a weak map, true spec identity) instead of introducing language identity

[17:24:47.0858] <Michael Ficarra>
 * I'm still not entirely sure why you weren't okay with having the pair of (suitable for use in a weak map, true spec identity) instead of introducing language identity

[17:24:57.0149] <shu>
because it made me realize the liveness definition is wrong

[17:25:04.0273] <shu>
or at least, very misleading to me

[17:25:10.0758] <shu>
even if incidentally correct because the domain happens to have been restricted

[17:25:11.0821] <Michael Ficarra>
but can't the definition refer to that pair?

[17:26:09.0275] <shu>
i guess it bottoms out that our mental model of like, the fundamental meta-spec level ontology (or something?) of the spec are very different

[17:26:20.0250] <shu>
and we cannot convince each other

[17:26:29.0512] <shu>
(for why i'm not okay with the pair)

[17:28:02.0888] <bakkot>
I very strongly vote for keeping shu's PR as-is, no matter how unsatisfying michael finds it

[17:28:06.0915] <shu>
> no, I think all concepts are meta-language concepts

this seems to be the crux of it. i most definitely do not think that, nor does the spec as it's been written

[17:28:40.0509] <bakkot>
I don't think we're going to resolve our different ways of looking at this and don't want to spend more time on it

[17:29:06.0762] <shu>
fair, wfm of course, i want to get back to rebasing 2777

[17:29:07.0052] <Michael Ficarra>
bakkot: did you read the conversation? I think we've  resolved it in the same way we resolved it last time.

[17:29:10.0683] <bakkot>
(though I'm fine with adding the "with the following exception" bit)

[17:29:28.0712] <shu>
Michael Ficarra: but kevin also didn't like the extra <dfn>s

[17:29:30.0874] <bakkot>
Michael Ficarra: I did read it and it did not seem resolved?

[17:29:48.0215] <bakkot>
yeah I really do not want to define two notions of identity here

[17:29:51.0620] <shu>
and i tend to agree, it doesn't really help readability

[17:29:53.0317] <bakkot>
I want exactly the thing in the PR

[17:31:09.0134] <Michael Ficarra>
I can't accept something that defines values with conditional identity. The equality operation can be conditional, but identity must be innate and immutable.

[17:31:23.0097] <bakkot>
I think at some point we are going to have to say too bad and land something

[17:31:23.0790] <shu>
michael it is not conditional

[17:31:55.0492] <shu>
yeah i think i'm doing arguing this, let me add the (with the following exception)

[17:31:56.0997] <Michael Ficarra>
identity that depends on the lens through which you are looking at it is conditional in my book

[17:32:11.0744] <shu>
then you should correct your thinking :)

[17:34:10.0307] <Michael Ficarra>
I am not unique in this! I've read a ton on philosophy of identity recently and this is consistent with basically everything I've read. You need identity to be a foundational concept of what *is*, and you can build everything off of that. You can't define it through some predicate or differently based on context, because then how do you even talk about it being that thing?

[17:34:42.0754] <shu>
my brother in christ i work with compiler writers, not philosophers

[17:34:54.0407] <bakkot>
yes, this document is not for philosophers

[17:35:04.0698] <bakkot>
also it just... _is_ conditional? we've said that "does not have identity" means "can be manifest purely by reference to its qualities", and that is true of Symbol.for symbols within the language but not within the specification

[17:35:06.0284] <Michael Ficarra>
yes, but they can teach us some things about building formal logical systems

[17:35:17.0932] <shu>
michael

[17:35:20.0791] <bakkot>
only if we use language in a way that will be coherent to the people who we are addressing

[17:35:22.0948] <shu>
i also regret to inform you you work on javascript

[17:35:24.0209] <bakkot>
which is not philosophers

[17:35:26.0788] <shu>
not the lambda calculus cube

[17:40:12.0705] <shu>
okay i applied all other comments except the last sentence one, so should be gtg. let me continue with rebasing 2777 now

[17:42:08.0765] <Michael Ficarra>
when it comes to these really foundational concepts that the rest of the spec depends on, I think it's fair to try to be rigorous and principled

[17:43:40.0395] <shu>
i think we are very rigorous here

[17:43:45.0477] <shu>
the actual rigor is there are 2 identities

[17:43:55.0689] <shu>
we find it editorially confusing to surface that foundation with 2 different dfns

[17:44:07.0942] <shu>
so we use one word, identity, because in all cases the truth tables they produce are the same

[17:44:14.0310] <shu>
where the truth tables differ, we use a sentence

[17:45:33.0517] <Michael Ficarra>
then why do we have to use identity in that sentence?

[17:45:48.0352] <shu>
which sentence?

[17:46:15.0234] <Michael Ficarra>
is it not the final sentence of the identity section that you were talking about?

[17:46:19.0081] <shu>
are you asking why an english sentence can be ambiguous without context, but also disambiguated with a following sentence?

[17:47:21.0841] <Michael Ficarra>
If you're talking about the final two sentences of the identity section, there is nothing ambiguous, there is just a contradiction.

[17:47:40.0356] <shu>
okay, i see i am not getting through

[17:47:42.0702] <shu>
protest noted

[17:47:46.0393] <shu>
i think you're overruled michael, sorry

[17:48:11.0346] <shu>
i would like to finish this PR and go home

[17:49:50.0437] <bakkot>
I'm gonna stamp it

[17:51:36.0510] <Michael Ficarra>
I am very much not okay with this. I feel this is akin to willfully introducing a spec bug.

[17:54:20.0827] <Michael Ficarra>
We've had plenty of disagreements, but we've always been able to resolve them amicably after some work. I don't think we have any fundamental unresolvable differences here. We even had working solutions! I don't know why we would move forward like this.

[17:54:45.0442] <bakkot>
We do not have a working solution

[17:55:00.0442] <bakkot>
After multiple hours of time spent on this

[17:55:18.0770] <bakkot>
I do not expect we will come to an agreement within another two hours of conversation and I am not willing to spend that time

[17:55:21.0358] <shu>
it's a good test of the escalation path of having an odd-numbered editors in the group

[17:55:45.0464] <shu>
we have talked about not requiring unanimity

[17:57:28.0653] <shu>
i don't see why it's not amicable either, it's just we failed the converge with a compromise?

[17:57:34.0231] <shu>
like i'm not gonna be harboring grudges

[17:57:57.0423] <Michael Ficarra>
Yes, I think it's good that we can resolve small disagreements where no one is particularly passionate. We've done that many times in the past. But I've stated multiple times that a hard requirement for me was for *some* concept to exist (it would be nice to call it identity) that can be used to distinguish any two values in our spec universe, and that concept had to be innate and immutable.

[17:58:37.0268] <bakkot>
"identity from the perspective of the specification" is that thing, no?

[17:58:41.0202] <Michael Ficarra>
The "two identities" solution satisfied that

[17:58:47.0769] <shu>
we still have the two identities solution!

[17:58:51.0276] <shu>
there's just no <dfn>s

[17:59:39.0572] <Michael Ficarra>
we have two comparisons

[17:59:42.0448] <Michael Ficarra>
which is a fine thing

[17:59:51.0339] <Michael Ficarra>
but we also have conditional identity

[17:59:55.0490] <Michael Ficarra>
which is not fine to me

[17:59:57.0621] <shu>
arghghhhh

[18:00:01.0820] <shu>
we have two identities

[18:00:05.0690] <shu>
not a conditional identity

[18:00:22.0065] <Michael Ficarra>
"they have identity from the perspective of this specification but do not have identity from the perspective of the ECMAScript language"

[18:00:29.0810] <shu>
reusing the same english word "identity" doesn't mean the underlying mental model has conditional identity

[18:00:34.0444] <shu>
i will try one last time

[18:01:11.0490] <shu>
consider the <dfn>s to be "identity from the perspective of specification" and "identity from the perspective of ECMAScript language" that correspond exactly to <dfn>specification identity</dfn> and <dfn>language identity</dfn>

[18:01:40.0317] <shu>
almost all the time, it is unambiguous which one "identity" talks about, or it literally doesn't matter, so consider the english word "identity" be an elision for one of the two <dfn>s

[18:01:52.0870] <shu>
where it is confusing, we spell out the full thing

[18:01:58.0784] <shu>
and it is confusing in exactly one place

[18:02:34.0000] <shu>
this is not an any less rigorous or any less formal

[18:02:36.0690] <shu>
but it is more readable

[18:02:54.0468] <shu>
 * this is not an any less rigorous

[18:03:02.0552] <Michael Ficarra>
> and it is confusing in exactly one place

a note in the liveness section?

[18:03:24.0219] <shu>
in the CanBeHeldWeakly section

[18:03:39.0705] <shu>
though liveness could use a note as well, though we discussed already multiple times, it actually doesn't matter there

[18:04:04.0412] <Michael Ficarra>
with my changes, that section doesn't use identity

[18:04:35.0875] <shu>
my current rebase takes your changes as is, except it refers to identity in the note

[18:05:04.0954] <bakkot>
I am fine with dropping the reference to identity within the note, if that would help?

[18:05:15.0258] <bakkot>
 * I am fine with dropping the reference to identity within the note in CanBeHeldWeakly, if that would help?

[18:05:41.0673] <shu>
i'd like it there

[18:06:29.0288] <Michael Ficarra>
okay then I don't understand what your object was to my suggestion of "comparing as if they don't have identity"

[18:07:19.0691] <Michael Ficarra>
if we don't use the identity itself anywhere, and we just use comparison operations that are parameterised by its existence/non-existence, then that should be fine

[18:07:46.0477] <shu>
what do you mean by "don't use the identity itself anywhere", including in the note?

[18:07:54.0206] <shu>
let me actually upload the PR and we can go through that

[18:08:28.0283] <Michael Ficarra>
yeah I don't see a reason why the CanBeHeldWeakly note would need to refer to the identity itself

[18:08:36.0699] <Michael Ficarra>
already in my PR I made it so that it doesn't

[18:08:53.0392] <shu>
yeah it doesn't need to

[18:09:11.0666] <shu>
the reason is i think it captures the rationale. if we don't say that we might as well remove the whole note

[18:09:38.0896] <Michael Ficarra>
I would like to see your alternative note

[18:10:02.0637] <Michael Ficarra>
I think my edit to the note captures the entire rationale

[18:12:17.0238] <shu>
hmm

[18:12:19.0229] <shu>
https://github.com/syg/ecma262/commit/dece95561adbd5d1ef994f32a3f95e6da53ef37e

[18:12:29.0437] <shu>
i can't figure out how to create a clean PR against acutmore's branch

[18:12:33.0764] <shu>
but that commit has it in my repo

