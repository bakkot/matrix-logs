2022-02-03
[16:41:30.0101] <shu>
in the RegExp section, is "character" the same as a code point?

[16:49:26.0425] <jmdyck>
No, it's sort of a union of code point and code unit.

[16:49:57.0933] <shu>
not sure i understand

[16:50:29.0903] <shu>
oh i see, depending on `u` mode?

[16:50:37.0828] <jmdyck>
yeah.

[16:50:45.0457] <jmdyck>
defn is in https://tc39.es/ecma262/#sec-pattern-semantics, 2nd para

[16:52:53.0050] <shu>
thanks

[16:53:15.0125] <jmdyck>
no problem

[15:37:21.0330] <shu>
ljharb: what are your thoughts on moving long-time inactive proposals to a separate category in https://github.com/tc39/proposals?

[15:47:27.0254] <ljharb>
what sort of category?

[15:47:43.0121] <ljharb>
it seems weird to categorize things outside of the process doc

[15:50:15.0299] <ljharb>
what i'd really like to see is inactive proposals moving to "inactive", but that requires the champions to do that, or plenary to decree it

[15:51:08.0615] <shu>
i was thinking "inactive" as the category, yes

[15:51:15.0442] <shu>
i wasn't aware that required consensus

[15:51:22.0560] <ljharb>
there's already an entire inactive.md file for inactive proposals

[15:51:29.0870] <ljharb>
it's that it's up to the champions, or consensus

[15:51:37.0332] <ljharb>
what'd you have in mind to be inactive?

[15:52:03.0813] <shu>
function.sent, for one

[15:53:20.0185] <shu>
maybe we should have a triage agenda item annually or something

[15:53:28.0779] <bakkot>
ljharb: if you have better alternative wording than "a Completion Record normally containing an X", let us know? Michael and I do not have something we like better than that

[15:53:37.0381] <shu>
where we dedicate 30 minutes asking champions if they still plan to pursue a particular proposal

[15:53:49.0714] <ljharb>
shu: i already tried to ask plenary to make function.sent inactive, and hax said he'd champion it

[15:53:58.0728] <ljharb>
anything else?

[15:54:06.0986] <shu>
fair enough

[15:54:13.0684] <shu>
someone should take over hashbang and ask stage 4

[15:54:16.0597] <shu>
those were the two

[15:54:18.0779] <ljharb>
bakkot: i mean, i was thinking `Foo (a, b): NormalCompletion(X)` in the header

[15:54:36.0278] <ljharb>
shu: i'm not sure why bradley doesn't do that tbh. it's probably worth asking him directly

[15:54:44.0822] <shu>
bradley is no longer in TC39, is probably why

[15:54:55.0651] <shu>
switched jobs and the new job isn't in Ecma afaik

[15:54:58.0712] <ljharb>
oh, he could easily be via the node project in OpenJS

[15:55:11.0297] <ljharb>
but you're right, he probably won't make the time

[15:56:17.0750] <bakkot>
`NormalCompletion(X)` means it returns a normal completion

[15:56:20.0121] <bakkot>
which is not true

[15:56:29.0713] <bakkot>
it might return an abrupt completion, but if it returns normally, then the type in the completion is X

[15:56:33.0865] <bakkot>
 * it might return an abrupt completion, but if it returns normally, then the type in the completion is X

[15:58:36.0053] <ljharb>
ah, hm

[15:59:55.0010] <bakkot>
> <@shuyuguo:matrix.org> function.sent, for one

I think Hax actually wanted to pick that one up, IIRC?

[15:59:59.0085] <ljharb>
he did


2022-02-04
[16:00:18.0152] <ljharb>
bakkot: `Foo (a, b): ThrowCompletion | NormalCompletion(x)`?

[16:01:27.0123] <bakkot>
it might be return or break also, sometimes

[16:01:45.0485] <bakkot>
Also we don't use the `|` notation currently, we just say "or"

[16:01:53.0766] <ljharb>
sure, "or" then

[16:01:55.0758] <bakkot>
so some form of prose would be ideal

[16:01:58.0949] <ljharb>
hm

[16:02:09.0508] <ljharb>
but like, "normally containing X" doesn't cover all the alternatives either

[16:02:31.0666] <ljharb>
but it sounds like what you want is "a completion of type normal, containing X, or a completion of another type"? (that isn't a real suggestion, too wordy)

[16:02:40.0057] <bakkot>
that is what it means, yeah

[16:02:40.0581] <ljharb>
 * but it sounds like what you want is "a completion of type normal, containing X, or a completion of another type"? (that isn't a real suggestion, too wordy)

[16:02:48.0136] <bakkot>
that's how I read "normally containing X"

[16:03:01.0783] <ljharb>
to me "normally" implies "but sometimes it doesn't"

[16:03:05.0101] <bakkot>
like, in the normal case, it contains an X; in the non-normal case, all we are saying is that it is a completion record

[16:03:12.0315] <bakkot>
right, sometimes it doesn't

[16:03:15.0038] <ljharb>
lol

[16:03:16.0582] <bakkot>
sometimes it's abrupt rather than normal

[16:03:19.0797] <ljharb>
but i mean it doesn't speak to the [[Type]]

[16:03:32.0991] <ljharb>
the enum value "normal" in there is not connected to the english word "normally" for me

[16:03:43.0390] <bakkot>
they're... the same word?

[16:03:51.0941] <ljharb>
lol i know, but conceptually it reads weird to me

[16:03:56.0211] <bakkot>
fair

[16:04:01.0955] <bakkot>
I have no better alternative though

[16:04:16.0651] <ljharb>
let me think about it, obv if i can't come up with a workable alternative then there's no reason to block on that

[16:04:27.0470] <bakkot>
âˆš

[16:08:21.0961] <Michael Ficarra>
"an abrupt completion or a normal completion containing X" works

[16:08:32.0358] <Michael Ficarra>
allows us to refine it in other ways as well

[16:08:50.0135] <Michael Ficarra>
we type some AOs as "a throw completion" or "an abrupt completion" already anyway

[16:09:01.0978] <bakkot>
that's pretty wordy still...

[16:09:09.0888] <Michael Ficarra>
it's a little bit of work to change to that, but nothing unmanageable

[16:09:21.0481] <Michael Ficarra>
it's a little wordy, but it's a union

[16:09:28.0205] <Michael Ficarra>
what do you expect

[16:11:57.0284] <bakkot>
i expect an alias for the union which is shorter :P

[16:12:02.0407] <bakkot>
like "a completion record normally containing"

[16:12:58.0116] <Michael Ficarra>
I'm gonna stick with that for now

[16:14:11.0112] <ljharb>
i still like `Foo (a, b): ThrowCompletion | NormalCompletion(x)`, and we can make those AOs for break/continue/return if we need them

[16:15:09.0470] <bakkot>
ljharb: to be clear this is for the prose

[16:15:12.0204] <bakkot>
like in

> The abstract operation AtomicReadModifyWrite takes arguments typedArray, index, value, and op (a read-modify-write modification function). op takes two List of byte values arguments and returns a List of byte values.

[16:15:12.0860] <bakkot>
the "and returns a List of byte values" part is the part we are discussing

[16:15:31.0053] <ljharb>
right, i'm still hoping we omit the prose and go with something in the h1 instead

[16:15:37.0833] <ljharb>
but i'll keep trying to think of something for the prose

[16:15:59.0072] <bakkot>
ah, we are not doing that as part of this PR, for sure

[16:16:16.0023] <bakkot>
we'll have a separate marker for "can return abruptly" in the H1, but we will not have the whole type

[16:55:57.0763] <shu>
bakkot: ah, okay

[17:50:20.0573] <jmdyck>
I think it's too easy to read "normally containing X" as meaning roughly "usually containing X" or "typically containing X".

[07:03:15.0085] <Michael Ficarra>
jmdyck: https://github.com/tc39/ecma262/pull/2547 is ready for review now

[07:03:31.0082] <Michael Ficarra>
happy to answer any questions about the editorial philosophy behind any of the changes

[07:03:44.0700] <Michael Ficarra>
I recommend reading the task list in the PR description before review

[07:07:18.0243] <Michael Ficarra>
FYI most of those things in the task list were checked with the assistance of ecmarkup

[07:08:37.0269] <Michael Ficarra>
bakkot will work on cleaning up the code and committing anything that can be reliably automatically checked to ecmarkup before we merge

[07:11:15.0516] <Michael Ficarra>
> <@jmdyck:matrix.org> I think it's too easy to read "normally containing X" as meaning roughly "usually containing X" or "typically containing X".

that's fair, but every usage will link to the definition, which says

> a Completion Record normally containing some type of value refers to a Completion Record that, when it is a normal completion, has a value of that type in its [[Value]] field.


[09:28:20.0625] <jmdyck>
link to definition will help.

[09:28:30.0424] <jmdyck>
Thanks for the heads-up.

[09:28:39.0876] <jmdyck>
When do you hope to land it?

[09:58:16.0321] <Michael Ficarra>
as soon as we can, I guess

[09:58:30.0855] <Michael Ficarra>
I feel quite comfortable with the state of it, personally

[09:58:57.0650] <Michael Ficarra>
and since bakkot helped with the tooling-assisted confirmations, I'm sure he feels pretty comfortable with it too

[10:00:18.0880] <Michael Ficarra>
and I expect that landing the ecmarkup improvements will convince others that it's near enough to correct

[10:01:17.0321] <Michael Ficarra>
there is still room for errors to have crept in, of course

[10:01:35.0470] <Michael Ficarra>
a lot of the checks didn't apply to internal/concrete methods, for example

[10:01:54.0029] <Michael Ficarra>
and we don't actually track types through aliases or anything, so some types might not align

[10:02:34.0394] <Michael Ficarra>
but as far as how completion records are used, I feel good

[10:03:07.0221] <Michael Ficarra>
the remaining thing to review would be the various phrasing decisions or changes we've made, since that can be subjective

[10:56:26.0982] <jmdyck>
Okay, well I should be able to start looking at it (i.e, modifying ecmaspeak to handle+analyze it) this aft.

[11:05:09.0311] <Michael Ficarra>
awesome

[11:24:55.0672] <bakkot>
it's definitely not landing until next week at the earliest

[11:36:42.0529] <jmdyck>
okay, so I've got the weekend at least. :)


2022-02-07
[19:12:23.0518] <jmdyck>
wah, when I try to "Load diff" for #2547, I get "Oops, something went wrong."

[19:13:21.0608] <jmdyck>
It worked for my first review. Maybe it's just bigger enough now.

[19:17:04.0998] <jmdyck>
I guess I'll submit a PR against GH-1796.

[19:31:07.0181] <bakkot>
I think github has a time-to-render limit where it bails if it takes too long, and sometimes it happens to be faster (maybe when it is less busy?)

[19:34:18.0563] <jmdyck>
ah, plausible.

[19:35:33.0540] <jmdyck>
So I've submitted what I've found up to the point of running static type analysis.

[19:36:07.0311] <jmdyck>
It might take a while to adapt that.

[08:53:55.0215] <ljharb>
thoughts on https://github.com/tc39/ecma262/pull/2547#discussion_r800079335 ?

[09:00:53.0516] <Michael Ficarra>
ljharb: I don't like it any better than normally containing

[09:01:09.0552] <Michael Ficarra>
jmdyck: I incorporated/addressed your comments

[09:01:15.0360] <ljharb>
it doesn't strongly imply that the abnormally containing situation is possible, tho

[09:01:21.0031] <ljharb>
"normally" implies that, in english

[09:02:11.0877] <Michael Ficarra>
I think that, as long as we are okay with the fundamentals of that PR, we can merge it once we get the ecmarkup bump in and do any corrections as follow-ups

[09:02:53.0229] <Michael Ficarra>
the spec previously didn't have practically any AO return types, so it's an improvement regardless IMO

[09:03:26.0776] <Michael Ficarra>
ljharb: we should talk about it more in the editor call Wednesday

[09:03:41.0673] <Michael Ficarra>
I will add the label

[09:04:05.0016] <jmdyck>
I prefer iljharb's sugg (or something similar) to "normally containing", because it can be more specific about the abrupt possibilities of the return value.

[09:09:18.0587] <Michael Ficarra>
jmdyck: you're welcome to attend the editor calls if you like, they are open attendance

[09:10:13.0100] <jmdyck>
thanks for the invitation. Where's the attendance info?

[09:12:14.0485] <Michael Ficarra>
it's on the TC39 calendar, which is.... somewhere

[09:13:10.0236] <jmdyck>
maybe somewhere accessible only to delegates?

[09:14:07.0492] <Michael Ficarra>
lol https://github.com/tc39/how-we-work/issues/94

[09:14:19.0983] <Michael Ficarra>
no I am pretty sure the TC39 events calendar is meant to be public

[09:14:48.0631] <Michael Ficarra>
all the events on it other than plenary are all open attendance to my knowledge

[09:15:10.0799] <bakkot>
it links notes documents from plenary while they are in progress, which are definitely not meant to be public

[09:15:48.0938] <jmdyck>
incubator calls are 'publicized' (https://github.com/tc39/incubator-agendas), but I don't see similar for editor calls.

[09:16:08.0067] <Michael Ficarra>
bakkot: it what? on the calendar?

[09:16:16.0301] <bakkot>
Michael Ficarra: y

[09:16:25.0763] <bakkot>
if you go to the events for plenary meetings

[09:16:50.0284] <bakkot>
jmdyck: I'll DM you the link for the call; it's stable and is at 2:30-3:30 PST every Wednesday except weeks when there is plenary

[09:17:14.0464] <Michael Ficarra>
we should talk to the chairs about making sure the events calendar can be shared publicly

[09:18:22.0039] <bakkot>
I guess I should say PT rather than PST. Or America/Los_Angeles to be more precise

[09:21:14.0140] <ljharb>
hm, yeah i'm not sure if it's meant to be broadly public or not, but either way jmdyck should be able to see it

[09:24:26.0111] <jmdyck>
okay, i'll try to join this week.

[09:24:55.0369] <jmdyck>
do you normally get non-editor attendees?

[09:27:09.0534] <Michael Ficarra>
sometimes champions drop by for editorial feedback on stuff they're working on

[09:27:20.0480] <Michael Ficarra>
we also had the KAIST researchers first present to the editor group

[09:34:35.0084] <bakkot>
a majority of meetings it's me, michael, shu, jordan, and no others

[09:35:31.0369] <Michael Ficarra>
I figured it was just a lack of interest typically, but now I'm thinking the lack of discoverability might've had something to do with it

[09:35:46.0208] <Michael Ficarra>
like I always assumed jmdyck just didn't want to attend the call


2022-02-08
[16:54:24.0648] <jmdyck>
I got static type analysis to complete on 2547! Next step will be to look at the results.

[16:56:31.0777] <shu>
my take is i'm not enthusiastic about going out and eliciting broad-spectrum feedback from committee for editorial decisions, unlike in incubator calls, where that's the whole point

[16:56:48.0114] <shu>
but the editor calls aren't closed rooms, and people can certainly come if they have something editorial to discuss

[16:56:58.0012] <shu>
(replying to the publicity of calls)

[17:00:52.0173] <jmdyck>
Based on what I can see, it seems like you wouldn't get much feedback even if you did elicit it. 

[17:01:38.0770] <shu>
heh, probably true

[17:02:40.0723] <shu>
the Old Fear was Allen popping up and pushing for something

[17:02:50.0393] <shu>
but that never really happened anyway, i suppose

[09:13:25.0764] <ljharb>
nah he was good about that

[09:13:52.0163] <ljharb>
in the early days of "more than one editor" we pushed pretty hard to get people to show up, and precisely zero people showed up for years after the first meeting or two

[14:25:03.0620] <jmdyck>
My static type analysis of 2547 is turning up some stuff.

[15:45:55.0322] <bakkot>
jmdyck: not terribly surprising, given that your analysis is much more complete than ours


2022-02-15
[11:04:53.0702] <Michael Ficarra>
jmdyck shu ljharb: https://github.com/tc39/ecma262/pull/2547 should be ready for (hopefully final) review now

[11:05:25.0193] <Michael Ficarra>
we incorporated the changes discussed in the last editor call

[11:05:49.0933] <jmdyck>
looking at it now, got one small thing.

[11:06:41.0082] <bakkot>
in particular we are now using `either` to disambiguate `or` and we are using `a normal completion containing X or an abrupt completion` rather than `a Completion Record normally containing`

[11:16:23.0983] <jmdyck>
oh, i don't have that last commit yet.

[11:19:00.0409] <jmdyck>
 * oh, i don't have that last commit yet.

[11:30:56.0692] <ljharb>
it seems like it still has the phrase "normally"; but let me load the full diff to be sure

[11:31:14.0194] <ljharb>
 * it seems like it still has the phrase "normally"; but let me load the full diff to be sure

[11:32:00.0579] <Michael Ficarra>
ah yes, I need to remove the definition we added for "normally containing"

[11:32:12.0523] <Michael Ficarra>
there's also a use in one of the host ops, I'll address it

[11:33:16.0933] <ljharb>
BigInt::exponentiate and friends still have it

[11:33:43.0285] <ljharb>
 * BigInt::exponentiate and friends still have it

[11:34:07.0881] <Michael Ficarra>
thanks, addressing those too

[11:34:54.0553] <ljharb>
also, the comment thread on package.json says there should be a major ecmarkup bump included in the PR as well, is that still the case?

