2023-11-08
[06:00:42.0905] <jmdyck>
Let me see if I've got this straight...

[06:01:30.0673] <jmdyck>
Symbols can be put into 3 categories:

[06:01:39.0294] <jmdyck>
- Well-known symbols

[06:03:29.0800] <jmdyck>
- Symbols created by the Symbol constructor

[06:03:51.0419] <jmdyck>
- Symbols created by Symbol.for

[06:13:14.0866] <jmdyck>
Symbols created by the Symbol constructor have language identity, the others don't. So Symbols created by Symbol() are suitable for use as a weak reference, and the others aren't, *except* that well-known symbols are.

[06:16:33.0948] <jmdyck>
So in the one place that the spec uses the concept of 'language identity' (in the Note for CanBeHeldWeakly), it isn't even exactly the necessary concept.

[07:00:31.0994] <jmdyck>
(Actually, the 'Identity' section implies that well-known symbols *have* language identity, but I don't see how that could be. E.g., you can manifest @@match just by saying `Symbol.match`.)

[11:42:08.0770] <jmdyck>
so.... any thoughts on whether well-known symbols have language identity?

[11:46:19.0540] <shu>
they do

[11:46:38.0171] <shu>
kinda by fiat, i guess

[11:46:45.0500] <shu>
let me see if i can dig up any discussion

[11:48:58.0985] <shu>
i cannot dig up discussion

[11:49:52.0872] <jmdyck>
So how to reconcile that with the ability to manifest them without prior reference?

