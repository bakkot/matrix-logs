2021-09-01
[11:43:33.0373] <ljharb>
cancel the editor meeting today, i presume?

[11:46:45.0519] <bakkot>
y


2021-09-02

2021-09-03

2021-09-04

2021-09-05

2021-09-06

2021-09-07

2021-09-08
[13:55:46.0240] <shu>
i shouldn't have taken a break from looking at ecmarkup and ecmarkdown, now i gotta page everything back in


2021-09-09

2021-09-10
[11:51:07.0467] <shu>
bakkot: i'm doing something kind of cursed with the reals. opinions on the following? i'm fixing a bug in the resizable buffers proposal for %TypedArray%.prototype.slice in a way i want to increment a TA index by 1/element size inside a loop that does bytewise copy

[11:51:13.0492] <shu>
that TA index is an MV

[11:51:17.0845] <shu>
so... this is fine, but it seems cursed

[16:12:16.0275] <bakkot>
oof

[16:12:33.0364] <bakkot>
I am fine with it as a mathematician but that's scary as a thing-to-ask-machines-to-implement

[16:13:14.0501] <bakkot>
I guess it's not so bad when element size is a power of 2, which it presumably is here?

[16:13:35.0516] <bakkot>
but still, is there a way to rephrase it to increment by 1 instead, and count when have incremented enough times, or something to that effect?

[16:14:05.0754] <bakkot>
I am much happier with having the loop counter be integral if possible, even if it entails doing a division in the body of the loop

[16:18:35.0787] <shu>
i feel the same way

[16:18:43.0541] <shu>
so in the end i refactored to get around it

[16:18:52.0519] <shu>
it wasn't one of those observable loops

[16:18:54.0198] <shu>
but still


2021-09-11

2021-09-12

2021-09-13
[16:59:30.0825] <ljharb>
bakkot i assume i should land https://github.com/tc39/ecma262/pull/2504 as separate commits?


2021-09-14
[17:37:09.0682] <bakkot>
I have no preference; whichever you'd prefer / is easier is fine by me

[17:59:02.0342] <ljharb>
doesn't make a difference; i'll keep them separate

[17:59:21.0717] <ljharb>
bakkot: altho actually there's a rebase conflict, so if you could rebase it first that'd be great :-)

[17:59:33.0156] <ljharb>
 * bakkot: altho actually there's a merge conflict, so if you could rebase it first that'd be great :-)

[18:41:16.0135] <bakkot>
ljharb: done

[18:41:23.0096] <ljharb>
thanks

[09:11:14.0289] <Michael Ficarra>
handy link for finding PRs awaiting your review: https://github.com/tc39/ecma262/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-desc+-reviewed-by%3A%40me+review%3Aapproved+-label%3A%22editor+call%22+draft%3Afalse+-label%3A%22ready+to+merge%22

[09:39:52.0990] <Michael Ficarra>
let's use assignment or something for PR review pings and save editor call for stuff we legitimately want to discuss during the call

[09:40:24.0402] <Michael Ficarra>
right now, I see issues that I would review if not for the editor call label because I assume there's some nuance to be discussed

[09:43:06.0386] <ljharb>
is assignment going to be noticed more than being in the "reviewers" list?

[09:43:58.0025] <ljharb>
we might not even need review pings if people reflexively looked at the "awaiting review by you" list: https://github.com/tc39/ecma262/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-desc+-label%3A%22editor+call%22+draft%3Afalse+-label%3A%22ready+to+merge%22+review-requested%3A%40me

[09:43:58.0317] <Michael Ficarra>
I think it sends me a notification whenever I get assigned, so I assume so

[09:44:31.0304] <ljharb>
it sends you one when you're requested to review as well, but that doesn't seem to get things on people's queue consistently

[09:48:27.0231] <ljharb>
i'm going to make a meta commit to change "twelfth" to "thirteenth" for #2516; ok to push directly, or would you prefer a PR?

[09:53:40.0696] <ljharb>
 * i'm going to make a meta commit to change "twelfth" to "thirteenth" for #2516; ok to push directly, or would yall prefer a PR?

[09:59:58.0632] <Michael Ficarra>
I think both should be PRs

[10:10:37.0873] <ljharb>
sounds good

[10:11:11.0885] <Michael Ficarra>
on the latter point, I don't think we need to go into so much detail about UTF-8

[10:11:21.0465] <ljharb>
https://github.com/tc39/ecma262/pull/2517

[10:11:26.0273] <Michael Ficarra>
I added editor call label to discuss dropping most of that comment

[10:11:29.0751] <Michael Ficarra>
*note

[10:11:46.0724] <ljharb>
removing the detail seems fine to me, i'm only concerned that like unicode, an external group might have introduced normative changes without us realizing

[10:33:19.0432] <shu>
name bikeshedding: for the options object AOs in 402 that'll end up being in 262 now with Temporal

[10:34:16.0551] <shu>
what should we call those? do we just call those "options objects" without qualification? 262's options bags don't behave like that and behave differently from function to function (like Error constructor checking presence of `cause` with `Has`)

[10:35:02.0868] <Michael Ficarra>
shu: link to such an AO?

[10:37:03.0387] <shu>
https://tc39.es/ecma402/#sec-getoptionsobject and the AOs below it

[10:37:11.0991] <shu>
Temporal uses them as well

[10:40:48.0471] <ljharb>
"options object" seems fine, and `cause` is a special case (but would happen again whenever `undefined` is a valid value in an options bag)

[10:44:59.0185] <shu>
what about the options i'm adding with resizable buffers?

[10:45:20.0342] <shu>
i... guess they could use those, actually? i need to look closer

[10:45:50.0805] <shu>
anyway i guess the bigger normative question is when this gets pulled in via temporal, are we on board with using this style of options objects by default

[10:46:17.0094] <bakkot>
what is meant by "this style"

[10:51:19.0441] <shu>
the one in 402

[11:27:08.0646] <bakkot>
meaning, undefined is equivalent to empty object bag w/ null proto, non-object is type-error? that seems like a reasonable choice

[11:27:13.0609] <bakkot>
 * meaning, undefined is equivalent to empty object bag w/ null proto, non-object is TypeError? that seems like a reasonable choice

