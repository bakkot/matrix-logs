2021-02-04
[19:40:25.0000] <Bakkot>
shu: btw https://github.com/tc39/ecma262/pull/2189 is just waiting for your stamp, I think

[19:40:30.0000] <Bakkot>
no particular rush though


2021-02-05
[16:59:39.0000] <shu>
i will do it to procrastinate working on higher priority stuff

[18:19:07.0000] <ljharb>
shu: is there any nobler cause, really?

[09:08:40.0000] <ljharb>
are we tracking things like how https://tc39.es/ecma262/#sec-runtime-semantics-iswordchar-abstract-operation doesn't take `InputLength` and `Input` as an argument?

[09:21:55.0000] <Bakkot>
we've discussed it but I don't think there's an issue specifically for it

[09:22:22.0000] <Bakkot>
wait, I lied

[09:22:23.0000] <Bakkot>
https://github.com/tc39/ecma262/issues/1884

[09:27:04.0000] <ljharb>
ah ok cool

[12:35:58.0000] <shu>
ooh #1668 is quite big


2021-02-06
[12:59:19.0000] <Bakkot>
gonna label a few things as es2021, just so we don't forget

[13:05:58.0000] <ljharb>
thanks

[13:06:10.0000] <ljharb>
i'm verifying 2189 against my es-abstract impls/tests rn

[13:07:10.0000] <ljharb>
Bakkot: btw - not part of 2189 atm, but what do you think about Number::sameValueZero doing the zero checks and then just returning `Number::sameValue(x, y)`?

[13:10:56.0000] <Bakkot>
hmmm

[13:11:10.0000] <Bakkot>
very mild preference for the current state I guess, but only very mild

[13:11:18.0000] <Bakkot>
were the algorithms any more complicated than they were I'd be in favor of changing

[13:11:49.0000] <Bakkot>
actually I retract the very mild preference; I am entirely neutral

[13:12:53.0000] <Bakkot>
another option is to just add a NOTE describing the differences

[13:23:50.0000] <ljharb>
i ask because 2189 changes https://ci.tc39.es/preview/tc39/ecma262/sha/e4b6ca86d0318c06c7976e558a8066a6782b2931/#sec-numeric-types-number-subtract (subtract) to be in terms of add/unaryMinus, and i really like it

[13:24:43.0000] <ljharb>
but i totally agree that for sameValue/sameValueZero for Numbers - it doesn't really matter - but i also really like that the overarching SameValue{,Zero} algorithms call into the same shared AO

[13:32:29.0000] <Bakkot>
yeah, I can see the merits

[13:32:38.0000] <Bakkot>
the other side is that it adds another layer of indirection

[13:32:56.0000] <Bakkot>
for me those balance out pretty precisely, given the simplicity of the algorithms

[13:32:58.0000] <Bakkot>
hence my /shrug

[13:33:50.0000] <ljharb>
fair


2021-02-07
[17:27:10.0000] <Bakkot>
shu: I'm pretty sure Clinger's paper is actually from 1990, not 1999

[17:27:45.0000] <Bakkot>
https://www.researchgate.net/publication/2295884_How_to_Read_Floating_Point_Numbers_Accurately claims 99, but it's listed in the PLDI 1990 proceedings

[17:28:28.0000] <Bakkot>
and the conclusion of the paper talks about the work starting in 1989; I don't think it actually took a decade

[17:28:37.0000] <Bakkot>
(PLDI 1990 proceedings: https://dl.acm.org/doi/proceedings/10.1145/93542)

[20:26:25.0000] <shu>
ah hmm

[20:26:43.0000] <shu>
then perhaps there was intention behind not referencing it bormatively

[20:26:46.0000] <shu>
normatively lol

[23:08:54.0000] <Bakkot>
"Bormative"

[15:43:11.0000] <Bakkot>
I want to start adding descriptions for SDOs along the lines of the ones for AOs

[15:43:23.0000] <Bakkot>
but how to talk about the production?

[15:43:25.0000] <Bakkot>
it's not an argument

[15:44:30.0000] <Bakkot>
"associated production"?

[15:45:15.0000] <Bakkot>
currently thinking something "The syntax-direct operation Foo takes no arguments. It determines whether the associated production is a Foo. It performs the following steps when called:"

[15:45:17.0000] <Bakkot>
maybe?

[15:45:22.0000] <Bakkot>
suggestions welcomed


2021-02-09
[11:44:37.0000] <shu>
Bakkot: "matched production"?

[11:45:01.0000] <shu>
SDOs are basically tree pattern matchers


2021-02-10
[11:39:49.0000] <shu>
Bakkot: does https://tc39.es/ecma262/#sec-regexp.prototype-@@split look like overfull hbox to yuo

[11:40:16.0000] <Bakkot>
yup

[11:40:21.0000] <ljharb>
it does for me on safari

[11:41:31.0000] <Bakkot>
my guess is that the code with the array near the bottom is pushing the container to be too larger

[11:42:00.0000] <ljharb>
confirmed, deleting that node fixes it

[11:42:31.0000] <shu>
makes sense

[11:44:21.0000] <ljharb>
we could run prettier on the array :-p

[11:50:25.0000] <Bakkot>
just gotta set `overflow: auto` on .note-contents, I think

[14:31:34.0000] <shu>
Bakkot: another meeting running over, will be a few mins late

[14:31:37.0000] <shu>
ljharb: 6

[14:31:39.0000] <shu>
^

[14:33:03.0000] <ljharb>
kk


2021-02-11
[18:58:11.0000] <Bakkot>
shu you should probably review https://github.com/tc39/ecma262/pull/2253 at some point too

[18:58:22.0000] <Bakkot>
no rush, just don't want to forget about it

[21:38:45.0000] <shu>
roger


2021-02-12
[17:49:53.0000] <ljharb>
the only reason https://github.com/tc39/ecma262/pull/2116 was on editor call was for review, right? if so, it seems ready to merge

[17:55:15.0000] <Bakkot>
yup

[17:55:17.0000] <Bakkot>
fixed the labels

[17:55:24.0000] <Bakkot>
to reflect that

[19:11:43.0000] <ljharb>
thanks

[09:42:51.0000] <ljharb>
Bakkot: did michael come up with a bikeshed color for https://github.com/tc39/ecma262/pull/1623/ ?

[09:43:03.0000] <Bakkot>
no we never did

[09:48:41.0000] <ljharb>
he re-added the editor call label


2021-02-17
[09:04:44.0000] <shu>
ljharb: Bakkot: fyi could you prioritize https://github.com/tc39/proposal-class-static-block/pull/38 so ron could merge it?

[09:43:40.0000] <Bakkot>
√


2021-02-18
[08:45:35.0000] <michaelficarra>
FYI I contacted 4 different "book layout/formatting" services for quotes

[08:46:33.0000] <michaelficarra>
https://bookdesigners.com/

[08:46:33.0000] <michaelficarra>
https://www.bookbaby.com/book-formatting/

[08:46:33.0000] <michaelficarra>
https://damonza.com/other-services/formatting-and-layout/

[08:46:33.0000] <michaelficarra>
https://www.polgarusstudio.com/format-your-book/

[08:46:47.0000] <michaelficarra>
I sent them this message:

[08:46:55.0000] <michaelficarra>
> Hello, I am one of the editors of ECMA-262, a formal specification published by Ecma International to standardise the programming language commonly known as JavaScript. We author our specification as a website using HTML. You can view it at https://tc39.es/ecma262/. Annually, Ecma International publishes a new version of this document (and makes a small print run). We, the editors of ECMA-262, provide Ecma Internati

[08:46:55.0000] <michaelficarra>
h a PDF that is produced through the web browser's print-to-PDF functionality. This has some shortcomings with layout that we believe you may be able to overcome with a more manual layout process. For example, long tables get split across pages, sometimes breaking in the middle of a row and without repeating header rows. We estimate that this document is on the order of 1000 pages. It contains technical diagrams, mathe

[08:46:55.0000] <michaelficarra>
notation, and code. The table of contents and section cross-references are already automatically generated, but no page numbers are used within the document. We can start the process as early as March and would like it completed before June. If we are pleased with the result, we would like to establish a long-term relationship for creating this print-ready PDF annually. Would you be able to help us with our needs?

[08:47:58.0000] <michaelficarra>
I received a response from Polgarus last night (they're Australian, so makes sense)

[08:48:38.0000] <michaelficarra>
they wanted a link to prior years' PDFs (which I sent) and the desired print size (which I answered A4)

[09:12:51.0000] <ljharb>
nice

[09:19:55.0000] <shu>
thanks for doing the legwork

[09:20:17.0000] <shu>
i have concerns that Polgarus's strength isn't in technical typesetting, given what they say on their page


2021-02-19
[09:53:19.0000] <michaelficarra>
I received a response from Damonza yesterday. They expressed confidence that they'd be able to help us out, and also wanted to see previous editions. I sent them the same link.


2021-02-20
[20:26:21.0000] <ljharb>
Bakkot: should i close this tab, or is https://bakkot.github.io/ecma262-issues/ easy to update?

[20:26:49.0000] <Bakkot>
ljharb probably you should close it

[20:27:05.0000] <Bakkot>
i manually went through every open issue and PR and categorized them subjectively

[20:27:06.0000] <ljharb>
lol k

[20:27:10.0000] <Bakkot>
and updating involves doing the same thing again

[20:27:16.0000] <Bakkot>
but now I just keep that list in my head basically

[20:27:27.0000] <ljharb>
fair

[20:28:10.0000] <Bakkot>
I guess the ones which are still open are probably still approximately correct


2021-02-22
[15:42:05.0000] <michaelficarra>
another response from Damonza:

[15:42:16.0000] <michaelficarra>
> Our Formatting team have reviewed the file. It is massive and incredibly technical. We can certainly help with that but unfortunately we will not be able to provide a fixed quote on this because we're unsure of the time it will take vs the state of the manuscript when we receive it. Nevertheless we are sure we can deliver the project successfully and would charge an hourly rate for the head formatter. Our rate is $60

[15:42:16.0000] <michaelficarra>
after the first pass we will be able to better indicate the remaining time it will take. Having not yet seen the state of the manuscript, it is difficult to provide a time estimate but can do so shortly after we receive it. Please let us know if you have any questions.

[15:49:36.0000] <michaelficarra>
my response to them:

[15:49:44.0000] <michaelficarra>
> The link I sent was what we will provide as the manuscript: https://tc39.es/ecma262 We are fine with an hourly rate. Do you have a ballpark estimate at least? Would it be closer to 50 hours? 100 hours? 200 hours?

[15:50:54.0000] <michaelficarra>
I'm worried that I haven't heard back from the other 2 companies

[15:51:11.0000] <michaelficarra>
we may not have too much choice here


2021-02-23
[18:53:46.0000] <michaelficarra>
Damonza estimates ~100 hours at $60/hr

[18:54:02.0000] <michaelficarra>
Polgarus estimates $800

[19:17:03.0000] <ljharb>
800 is very different than 6000

[19:17:06.0000] <ljharb>
which one of them is way off

[12:16:05.0000] <michaelficarra>
yeah and at the same time they said "It would be a very time-intensive job, so unfortunately the quote is very high as a result"

[12:17:35.0000] <ljharb>
which said that, the 800, or the 6000?

[12:22:21.0000] <michaelficarra>
the $800

[13:07:53.0000] <ljharb>
weird

[15:10:22.0000] <Bakkot>
ljharb shu: btw I made a multipage build of the spec: https://bakkot.github.io/ecma262-previews/multipage-builds/multipage/

[15:10:31.0000] <Bakkot>
or rather, taught ecmarkup how to do so

[15:11:03.0000] <Bakkot>
want to start serving it alongside the main spec as soon as michael stamps the ecmarkup PR

[15:12:25.0000] <ljharb>
we should definitely have a link on the top of each one that points to the other

[15:13:01.0000] <Bakkot>
I think probably we should switch the "about" and "contrbuting" paragraphs that are at the very top

[15:13:04.0000] <ljharb>
looks like pages could maybe have some bottom padding https://bakkot.github.io/ecma262-previews/multipage-builds/multipage/conformance.html#sec-conformance.normative-optional

[15:13:16.0000] <ljharb>
agreed; about should come first

[15:13:17.0000] <Bakkot>
and then we can put it in the "about"

[15:13:40.0000] <ljharb>
wfm

[15:13:43.0000] <Bakkot>
hah, yeah, I can add some space at the bottom

[15:14:05.0000] <ljharb>
hmm, scrolling in the sidebar isn't preserved when i change pages

[15:14:09.0000] <Bakkot>
the "about" is only in the intro section, for the multipage build; that is probably OK?

[15:14:13.0000] <ljharb>
no good way to preserve it, but it's jarring

[15:14:21.0000] <Bakkot>
hmmm

[15:14:26.0000] <Bakkot>
it's doable

[15:14:36.0000] <Bakkot>
I already do something similar to preserve the state of the references pane

[15:14:36.0000] <ljharb>
i think that's fine for the multipage build, unless we want to put it at the top of the sidebar

[15:14:55.0000] <ljharb>
if we do preserve the scroll position of the sidebar, it'd be cool to also preserve open/closed state of everything

[15:15:10.0000] <Bakkot>
yeah, that's equally doable

[15:16:07.0000] <Bakkot>
there would be a bit of lag before the old state reasserted itself

[15:16:23.0000] <Bakkot>
you can see this if you open the references pane and then navigate to a different page

[15:16:25.0000] <Bakkot>
takes a second to pop up

[15:36:19.0000] <ljharb>
hm

[15:37:06.0000] <ljharb>
huh, this is unrelated, but i think https://tc39.es/ecma262/#sec-asi-cases-with-no-lineterminator-here is supposed to be nested under https://tc39.es/ecma262/#sec-interesting-cases-of-automatic-semicolon-insertion

[15:43:55.0000] <ljharb>
filed https://github.com/tc39/ecma262/pull/2323 for that

[15:45:24.0000] <ljharb>
and https://github.com/tc39/ecma262/pull/2324 for the about swpa

[15:45:26.0000] <ljharb>
*swap


2021-02-26
[08:43:15.0000] <ljharb>
https://github.com/tc39/proposal-error-cause was added to the agenda for stage 3

