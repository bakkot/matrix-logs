2020-03-25
[15:39:22.0000] <globbot>
channel logging requested by ljharb: https://freenode.logbot.info/tc39-editor-group

[15:40:22.0000] <globbot>
channel logging requested by ljharb: https://freenode.logbot.info/tc39-editor-group


2020-03-26
[18:20:06.0000] <shu>
i'm always surprised by the amount of typing these folks who participate in the GH threads put out

[08:52:13.0000] <shu>
Bakkot: ljharb: o no, now #1919

[08:52:55.0000] <Bakkot>
:(

[08:58:08.0000] <shu>
i sure wish i was a perpetual motion machine

[10:14:04.0000] <ljharb>
sigh

[10:30:25.0000] <shu>
i am very confused about istvan's urgency

[10:30:32.0000] <ljharb>
same

[14:51:53.0000] <shu>
ljharb: do you understand istvan's citation of the rules?

[14:51:56.0000] <shu>
i need a ELI5 i think

[15:06:50.0000] <ljharb>
i think so

[15:06:59.0000] <ljharb>
it explains why istvan has mentioned a 3 week rule at the last couple meetings that we've all ignored

[15:07:17.0000] <ljharb>
we do 10 days for proposals, not 3 weeks, and we've never cared about having any waiting period for the final spec

[15:07:34.0000] <ljharb>
so if he says "some members complained", plenary is the place to do that, and nobody has to my knowledge

[15:12:26.0000] <shu>
thanks

[15:12:33.0000] <shu>
i think the more relevant rebuttal is your second bit

[15:12:55.0000] <shu>
the final spec usually isn't new info to be presented to the TC

[15:13:03.0000] <shu>
though this normative PR is an exception, i guess, and that's why istvan brought itup?

[15:13:37.0000] <Bakkot>
if it's going to cause issues I am fine with letting that PR slip to the next edition

[15:13:57.0000] <Bakkot>
I do not have any strong feelings about this, I just thought it would be nice to cut it with a minimum of known bugs.

[15:14:24.0000] <shu>
agree, i'm more worried about that istvan is on a completely different page

[15:14:35.0000] <shu>
and who are these members who care about when a particular ES version is cut

[15:15:01.0000] <shu>
maybe they're the ecma members not participating in TC39 who consume the yearly pdfs, but who are they?

[15:16:22.0000] <Bakkot>
Japan?

[15:16:24.0000] <Bakkot>
I think Japan

[15:17:53.0000] <ljharb>
yeah but why would they care about how much time *we* had to look at it first

[15:31:52.0000] <shu>
okay so from dan's answer it seems like it's a bunch of work for us to justify to execom/ga why we wanna cut ES2020 until after the meeting?

[15:32:02.0000] <shu>
so if nobody feels very strongly about the PR i guess we just cut it now, before the meeting?

[15:32:43.0000] <Bakkot>
sgtm

[15:51:48.0000] <shu>
"Because not it causes Catch-22

[15:51:48.0000] <shu>
https://en.wikipedia.org/wiki/Catch-22

[15:51:48.0000] <shu>
And this causes Sunk cost

[15:51:48.0000] <shu>
https://en.wikipedia.org/wiki/Sunk_cost"

[15:52:03.0000] <shu>
:chefkiss:

[15:52:11.0000] <shu>
need that as a slide for some proposal

[16:06:43.0000] <ljharb>
sure, i'll cut it now then

[16:22:31.0000] <ljharb>
k so i'm writing the intro prose for 2020, thoughts on: "ECMAScript 2020 introduced `globalThis`, a universal way to access the global `this` value, and increased standardization of `for-in` enumeration order, as well as adding two new syntax features to improve working with “nullish” values (`null` or `undefined`) : nullish coalescing, a value selection operator; and optional chaining, a property access and function

[16:22:31.0000] <ljharb>
invocation operator that short-circuits if the value to access/invoke is nullish." ?

[16:22:44.0000] <ljharb>
mainly, is that wildly inaccurate, or "¯\_(ツ)_/¯"

[16:23:20.0000] <ljharb>
(i still have to write some for 4 other proposals)

[16:24:19.0000] <ljharb>
actually i'm going to tweak it a bit more anyways (thoughts still welcome)

[16:47:02.0000] <ljharb>
shu: Bakkot: what email address do you (and michael) want in the spec for you?

[16:49:01.0000] <shu>
syg⊙gc

[16:49:11.0000] <shu>
don't want people hunting me down for spec questions in personal inbox :P

[16:51:36.0000] <ljharb>
lol k

[16:52:10.0000] <ljharb>
rest assured, the mailto links have the ULTIMATE in spam protection, "ljharb at gmail dot com"

[16:52:47.0000] <shu>
Bakkot: ljharb: hm, so, i think realistically, the only way i'll find time to review https://github.com/tc39/ecma262/pull/1914 is sampling-based

[16:55:51.0000] <shu>
Bakkot: it might be easier to point me to the code that generated this and have me review that

[16:56:21.0000] <Bakkot>
shu: it was a lot of manual work after running a 15,000 line static analysis

[16:56:35.0000] <Bakkot>
so, no, it will not be easier to review that

[16:57:04.0000] <shu>
ah, nevermind then

[16:57:05.0000] <Bakkot>
I think this probably does not require everyone's signoff, since it's strictly editorial

[16:57:13.0000] <Bakkot>
Michael gave it a pretty careful review

[16:57:16.0000] <shu>
okay, then please don't wait for mine

[16:57:18.0000] <shu>
awesome

[16:57:27.0000] <shu>
with tc39 prep and other stuff i just won't have time :(

[16:57:38.0000] <ljharb>
i'd prefer it to wait until after the meeting anyways

[16:57:47.0000] <ljharb>
if it lands before the normative change we're waiting on, cherrypicking it into 2020 will be a pain

[16:57:51.0000] <ljharb>
(maybe)

[16:58:27.0000] <ljharb>
also, once this one lands, pulling in additional editorial things to 2020 will be hard too

[16:59:15.0000] <ljharb>
Bakkot: email?


2020-03-27
[17:27:57.0000] <Bakkot>
ljharb ?

[17:28:15.0000] <Bakkot>
as in, what email address do I use for tc39 work? bakkot⊙gc

[17:28:34.0000] <Bakkot>
why?

[17:37:15.0000] <shu>
what email you'd like to appear in the spec, i think

[17:38:07.0000] <Bakkot>
ah

[17:38:11.0000] <Bakkot>
bakkot@gmail, yes

[17:38:23.0000] <Bakkot>
ugh

[17:38:24.0000] <Bakkot>
actually

[17:38:26.0000] <Bakkot>
kevin.gibbons@gmail

[17:38:40.0000] <Bakkot>
I guess

[17:38:48.0000] <Bakkot>
I don't know I have like two hundred email addresses

[17:39:38.0000] <Bakkot>
if it's just going to be a link, bakkot@

[17:39:44.0000] <Bakkot>
if it's going to appear as text, kevin.gibbons@

[18:08:42.0000] <Bakkot>
ljharb: do you want to review https://github.com/tc39/ecma262/pull/1914 ?

[18:09:01.0000] <Bakkot>
this isn't a request, to be clear, I'm asking because I will push some commits which make it a bit harder to review once everyone who intends to review has done soo

[18:10:17.0000] <ljharb>
i can review commit by commit, you can push if you like

[18:10:55.0000] <Bakkot>
several of the commits are on the order of hundreds of lines, so I dunno if you really want to do that

[18:11:07.0000] <Bakkot>
I guess I can organize them more sensibly

[22:17:44.0000] <ljharb>
either way :-) thanks

[22:17:58.0000] <ljharb>
Bakkot: please do ask michael what email he wants to use, as well. i used bakkot@ for you, since it's not displayed as text

[22:22:47.0000] <Bakkot>
ljharb: asked, will let you know what he says

[22:25:17.0000] <ljharb>
ty

[22:25:38.0000] <ljharb>
he will be pleased to learn that once he gives me an email address, he will have successfully landed the word "smoosh" in the spec

[09:08:28.0000] <Bakkot>
ljharb: ecma262-editor-list⊙mfm

[09:11:44.0000] <shu>
show off

[10:08:15.0000] <ljharb>
lol ty

[12:28:08.0000] <Bakkot>
I landed https://github.com/bterlson/ecmarkup/pull/185 but still do not have npm release permissions; ljharb or someone want to do the honors?

[12:48:54.0000] <ljharb>
sure

[12:49:14.0000] <ljharb>
Bakkot: patch?

[12:49:21.0000] <Bakkot>
yeah patch sounds good

[12:49:24.0000] <ljharb>
or is the exit one breaking

[12:49:42.0000] <Bakkot>
it might break someone but only if they are relying on it exiting cleanly for malformed input, which, I would consider that to be relying on a bug

[12:50:11.0000] <ljharb>
cool

[12:52:40.0000] <ljharb>
v3.19.1 is out

[12:52:47.0000] <Bakkot>
thank


2020-03-30
[10:38:22.0000] <ljharb>
so what's wrong with "untagged unions"? i get why if the key is the same, pivoting on the type of the key would suck, but what's wrong with `{ a: A } | { b: B }`?

[10:45:56.0000] <Bakkot>
general answer: idk, feels gross

[10:46:09.0000] <ljharb>
no concrete reasons, just feels gross?

[10:46:36.0000] <Bakkot>
in this specific case there is advantage to the field being of the same name for both cases, which is that if you don't care about the extra microtask tick you can just `await waitAsync().value`

[10:48:11.0000] <shu>
ljharb: untagged unions are hard to justify design wise imo, given the general design principle of "always a promise or never a promise"

[10:48:45.0000] <shu>
the upshot of that design principle means to me, instanceof checks on return to deal with promises is in general not okay

[10:49:01.0000] <shu>
and if it that's not okay, i don't understand why an untagged union _is_ okay

[10:49:12.0000] <shu>
because in practice you're asking users to write instanceof checks

[10:49:47.0000] <shu>
whereas a tagged union is you're asking users to check a flag, which is morally kinda the same but practically okay, because we switch on properties sometimes?

[10:50:21.0000] <Bakkot>
shu: in this example you'd be asking users to write a hasOwnProperty check, not an instanceof check

[10:50:33.0000] <shu>
wait, did i misunderstand

[10:50:42.0000] <Bakkot>
`{ a: A } | { b: B }`

[10:50:45.0000] <shu>
{ promise } | { value } or something?

[10:50:59.0000] <shu>
oh no that's... yeah no that's a 3rd option that's worse

[10:51:31.0000] <ljharb>
shu: yes, instanceof isn't ok, but typeof on a primitive is ok

[10:51:52.0000] <shu>
that's also not what committee decided last time as recorded in SYNC-RESOLVE

[10:51:55.0000] <ljharb>
ok so you want the key to always be `value`

[10:52:09.0000] <shu>
the old design was Promise | string, but i guess that also ran up against the always-or-never-a-promise problem

[10:52:11.0000] <ljharb>
and you're saying that if it's `{ value: string | Promise }`, then they have to introspect the value in order to know which it is

[10:52:24.0000] <Bakkot>
I guess it just kind of feels weird to make users compute which branch they're in instead of just telling them which branch they're in

[10:52:25.0000] <ljharb>
whereas if it's a flag, that's somehow better/different

[10:52:26.0000] <ljharb>
?

[10:52:26.0000] <shu>
ljharb: right, i thought that's what you were saying

[10:52:38.0000] <shu>
ljharb: yeah what bakkot said

[10:52:52.0000] <ljharb>
i guess it just feels redundant to me

[10:53:41.0000] <shu>
why is it redundant?

[10:54:21.0000] <shu>
like a lot of things are computable from other things, i think the high-order bit here isn't redundancy but the code you're asking people to write for the 80% use case

[10:56:22.0000] <shu>
also i kind of resist the framing that it's typeof instead of instanceof

[10:56:43.0000] <shu>
for this API i can't imagine a division other than primitive-object

[10:57:21.0000] <ljharb>
right that's what i mean tho

[10:57:25.0000] <shu>
but in general i don't see the pattern of "inferring what branch you're based on a typeof check" having the primitive-object divide

[10:57:26.0000] <ljharb>
you'd check `typeof result.value`

[10:57:32.0000] <ljharb>
hm

[10:57:36.0000] <shu>
like really the important thing here that it's a Promise

[10:57:39.0000] <ljharb>
i guess i'm not thinking primitive-object

[10:57:42.0000] <shu>
not that it's an object

[10:57:43.0000] <ljharb>
i'm thinking string-promise

[10:57:52.0000] <shu>
yeah but that's not a typeof check

[10:57:52.0000] <ljharb>
and that no other type would ever be possible here

[10:58:01.0000] <shu>
you *can* use a typeof check as a standin

[10:58:04.0000] <ljharb>
typeof is how you'd robustly determine if it's a string, or the other thing

[10:58:16.0000] <shu>
ah, so you're thinking string or not string?

[10:58:22.0000] <shu>
i'm thinking of it more like Promise, or not promise

[10:58:29.0000] <shu>
(thus why i named the property async)

[10:58:42.0000] <ljharb>
right, string or not string

[10:58:50.0000] <ljharb>
or rather, string, or promise for string

[10:59:03.0000] <ljharb>
i don't assume anyone would use this api expecting a third kind of thing

[10:59:12.0000] <shu>
right, for this api i wouldn't either

[10:59:29.0000] <ljharb>
ftr i do sort of see the logic in giving an explicit boolean rather than making them do the actual check, even tho it's an easy one

[10:59:41.0000] <ljharb>
mainly just wondering if there's a super strong push in that direction

[10:59:46.0000] <ljharb>
or rather, why

[10:59:49.0000] <shu>
anyway i still prefer a flag, if we get to it this meeting we can discuss it then

[11:00:21.0000] <shu>
honestly

[11:00:55.0000] <shu>
it's probably because untagged unions are rare in most of PL

[11:01:28.0000] <shu>
same in compilers, harder to compile, harder to get guarantees for, etc

[11:01:45.0000] <shu>
in JS that's not strictly true because things are boxed and have tags anyway

[11:02:11.0000] <ljharb>
maybe that's why it feels fine to me

[11:02:12.0000] <shu>
but there are many "tags" and it's a confused mental model: there's the typeof tag, the instanceof tag, which is mutable

[11:02:15.0000] <Bakkot>
rare except C/C++ code written more than ten years ago (before this particular discipline became pervasive), which has burned everyone who has ever gotten near it

[11:02:21.0000] <shu>
right

[11:03:03.0000] <ljharb>
right, only typeof and internal slot checks are reliable

[11:03:19.0000] <ljharb>
(and truthiness, modulo document.all)

[11:03:27.0000] <Bakkot>
hasownproperty is reliable just awkward

[11:03:48.0000] <ljharb>
reliably if you `Object.prototype.hasOwnProperty.call`, and you've cached a copy of the function, but true

[11:03:55.0000] <shu>
the main advantage i think is a clear mental model with an easy to type check

[11:03:57.0000] <ljharb>
hm, ok

[11:04:01.0000] <Bakkot>
that's the same conditions as for the internal property checks though

[11:04:48.0000] <ljharb>
very true

[11:19:28.0000] <Bakkot>
as a reader of code, if I saw `let val = ret.async ? await ret.val : ret.val` I would know what was going on, whereas if I saw `let val = typeof ret.val === 'string '? ret.val : await ret.val` I would have to go look up the API to know what was going on

[11:19:42.0000] <Bakkot>
this I think is the main reason I feel better about tagged unions, in general

[11:20:31.0000] <ljharb>
that's a decently persuasive argument

[11:20:40.0000] <ljharb>
thanks

[16:20:09.0000] <Bakkot>
ljharb: so I guess if we're cutting the spec now we should remove from the editors update the bit about deciding to hold the spec until we resolved my normative PR

[16:20:30.0000] <ljharb>
actually i was holding off anyways

[16:20:34.0000] <ljharb>
what does a day or two matter

[16:20:36.0000] <Bakkot>
oh, cool

[16:20:39.0000] <Bakkot>
sgtm

[16:20:46.0000] <ljharb>
if this was an issue, istvan should have raised it much sooner

[16:21:03.0000] <ljharb>
and he claims an "important" tc39 member has an issue with wanting the full 3 weeks, but plenary is where they should be raising that objection


2020-03-31
[17:05:27.0000] <shu>
also he said the chair group is aware

[17:05:48.0000] <shu>
presumably they would've communicated something to us if it was more important?

[17:14:55.0000] <ljharb>
also that

[10:24:04.0000] <ljharb>
shu: it'd make me feel better to have your stamp on https://github.com/tc39/ecma262/pull/1925 before i land it

[10:24:18.0000] <shu>
ljharb: looking

[10:24:22.0000] <ljharb>
ty

[10:25:38.0000] <shu>
yeah okay that looks like a straight up bug

[10:56:43.0000] <ljharb>
woot https://github.com/tc39/ecmarkup/

[13:23:46.0000] <ljharb>
https://github.com/tc39/ecma262/pull/1928, whenever anyone gets a moment. no rush

[13:49:43.0000] <shu>
do we actually think this blocks ES2020

[13:49:48.0000] <ljharb>
¯\_(ツ)_/¯

[13:50:06.0000] <shu>
i do not get the sense this actually blocks ES2020

[13:50:17.0000] <ljharb>
i'm going to spare my opinion points on this one

[13:50:36.0000] <ljharb>
if it blocks, fine, but we do have to resolve it today; if it doesn't block, great

[14:09:15.0000] <Bakkot>
waldemar thinks it does

[14:09:20.0000] <Bakkot>
I regret ever bringing this up

[14:18:22.0000] <shu>
lol

[14:18:45.0000] <shu>
i am confused the fervor and speed with which waldemar took up this torch

[14:18:50.0000] <shu>
i feel like he heard "this blocks es2020"

[14:19:01.0000] <shu>
instead of "we just wanted an answer to decide if it makes 2020 or not"

[14:20:32.0000] <Bakkot>
I have already wasted a minimum of five, maybe six figures' worth of engineer time on this topic which will affect a total of maybe twenty real people for the remainder of humanity's existence, all of whom are tooling authors

[14:20:58.0000] <ljharb>
sounds like you're a job creator

[15:31:43.0000] <ljharb>
oops, https://github.com/tc39/ecma262/pull/1892/ isn't approved

[15:40:08.0000] <ljharb>
wasn't it mark who wants to be able to freeze the object

[15:40:25.0000] <ljharb>
i thought mark was why there's a more powerful hook

[16:58:28.0000] <shu>
do we need consensus to cut a spec?

[16:58:45.0000] <ljharb>
i think so

[16:58:55.0000] <ljharb>
i mean, i could cut it, but we have to have consensus to send it to ecma

[16:59:02.0000] <ljharb>
and waldemar will likely withhold that

