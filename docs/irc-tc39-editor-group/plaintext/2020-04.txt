2020-04-01
[17:01:10.0000] <michaelficarra>
yep we definitely do

[17:07:08.0000] <Bakkot>
talking to saboff

[17:07:14.0000] <ljharb>
kk

[17:08:51.0000] <Bakkot>
lmk if I need to join yours

[17:09:12.0000] <ljharb>
will do

[17:09:27.0000] <shu>
breakout rooms are terrible

[17:20:28.0000] <Bakkot>
msaboff has an argument for me which I am hoping will convince matias and shane, which is that the `/(<?\uLEAD\uTRAIL.)/u` form is allowed by the current spec (arguably) and also implementations and so changing that should not have ever been in scope for the current PR

[17:20:40.0000] <ljharb>
which means what

[17:21:07.0000] <Bakkot>
which means matias and shane cannot achieve their consistency-with-identifiers goal, at least not as a result of this PR

[17:21:16.0000] <Bakkot>
so hopefully we can all agree on the thing Waldemar wanted

[17:21:21.0000] <Bakkot>
or, one of the two things he wanted

[17:21:28.0000] <Bakkot>
one of which is, I think, more coherent

[17:21:45.0000] <Bakkot>
richard didn't one the one I am going to suggest but he was the only person who expressed that preference and he said he would not block over it

[17:21:53.0000] <Bakkot>
going to put together some slides

[17:23:04.0000] <shu>
i am giving up the meta argument with waldemar for today since the technical discussion isn't letting up, though i think it's a very bad precedent to set that we given any weight to the yearly version

[17:23:13.0000] <shu>
that we give*

[17:23:39.0000] <Bakkot>
yeah

[17:24:02.0000] <Bakkot>
in the future I will keep in mind to not bring up anything even remotely controversial january or march

[17:24:17.0000] <shu>
and equally bad is that "we must fix any bugs that's brought to our attention at highest priority"

[17:24:25.0000] <shu>
that is not how any real world project works

[17:51:02.0000] <shu>
what do you think, as the editor group, when we broach the regexp topic again, we say a little spiel about our perceived importance of the yearly stamp and the impact it has on known bugs

[17:54:34.0000] <shu>
i'm thinking something like, we nor the committee have treated the yearly cuts to be a cohesive product, only a rubberstamp-in-time. fixing known bugs before deadline is aspirational but explicitly not required. learning from software releases, the advantage of a rolling release is that we reduce risk by spreading it out and ignoring it.

[17:56:31.0000] <shu>
 we consciously moved away from the big-releases model after ES5 after all so there are fewer artificial time pressures

[18:01:02.0000] <Bakkot>
I worry that the thing Waldemar will hear is that we want to invalidate his concerns

[18:01:29.0000] <Bakkot>
like, that's a true thing and it would be a good thing for the committee to understand, I just worry that saying it will not have the effect of them understanding that but instead of arguing about process

[18:04:47.0000] <shu>
that is a valid worry

[18:05:10.0000] <shu>
but is also kind of the point, his concern that this should gate ES2020 because bugfixes are paramount *is* invalid imo

[18:20:39.0000] <shu>
i have another idea to float to waldemar and committee

[18:21:41.0000] <shu>
we cut it, and propose to waldemar that he work with istvan to also publish an erratum if necessary

[19:12:59.0000] <ljharb>
maybe that’d be more useful after this is resolved, assuming it can be?

[19:13:34.0000] <ljharb>
also given that this is a spec bug, we can add it to 2020 after the original cut, as errata

[19:13:50.0000] <ljharb>
iow, we can cut without it, and then fix it before June, and it’ll still be in 2020

[20:05:56.0000] <shu>
i emailed waldemar 1:1 as a googler to try to presuade him on pragmatic points

[20:05:58.0000] <shu>
we'll see

[20:06:09.0000] <shu>
ljharb: i have a favor to ask of your github fu

[20:06:22.0000] <shu>
ljharb: how do i generate the list of all PRs i reviewed since a date?

[20:37:12.0000] <Bakkot>
slides for tomorrow: https://docs.google.com/presentation/d/1COuuP_0fxK_s8-H8AScDMjMzKSEiAlAnOi4snP-OiHY/edit#slide=id.g82bd3e5bae_0_23

[20:37:29.0000] <Bakkot>
really hoping I can convince matias / shane / richard to agree to this before we come back tomorow

[20:37:33.0000] <Bakkot>
would make life much easier

[20:57:34.0000] <ljharb>
shu: https://github.com/tc39/ecma262/pulls?q=is%3Apr+reviewed-by%3Asyg in general

[20:58:23.0000] <ljharb>
https://github.com/tc39/ecma262/pulls?q=is%3Apr+is%3Aopen+reviewed-by%3A%40me is for “yourself”, generically

[20:58:35.0000] <ljharb>
not sure if they have search syntax for “after a date”

[21:00:00.0000] <ljharb>
Bakkot: so, the contrary position to yours would be, on the second to last slide, those would be syntax errors?

[21:00:57.0000] <Bakkot>
I don't think anyone's advocated for that. mattias wants /(?<\ud835\udc9c>.)/ to be a syntax error and /(?<\u{1d49c}>.)/ to be legal; richard wants the other way around.

[21:08:37.0000] <ljharb>
lol oh

[21:08:44.0000] <ljharb>
so there’s 3 positions?

[21:09:39.0000] <Bakkot>
at a minimum, yes

[09:33:17.0000] <shu>
Bakkot: mind summarizing what your plan of attack is?

[09:33:40.0000] <shu>
i think my attempts to engage waldemar 1:1 on pragmatic grounds for decoupling spec cutting were unsuccessful

[09:34:03.0000] <Bakkot>
my plan of attack is, weep

[09:34:13.0000] <ljharb>
shu: any outcome from the post-meeting chat last night? sounds like no

[09:34:16.0000] <shu>
and what about when there are no more tears left

[09:34:36.0000] <shu>
ljharb: i also peaced out because bradley and waldemar seemed like they were talking past each other

[09:35:18.0000] <Bakkot>
I think I might have gotten Mattias to the point where he is annoyed enough about the state of the design space that he is willing to accept a non-ideal (from his perspective) solution

[09:35:33.0000] <Bakkot>
(this truly is a painful design space)

[09:35:59.0000] <shu>
i have been actively not retaining any technical details about this

[09:37:51.0000] <Bakkot>
if it gets the end of our timebox without resolution I am going to say I regard it as a failure of our consensus-building process (in that it has wasted too much time, if nothing else) and ask for a formal vote

[09:38:18.0000] <shu>
oOoo

[09:42:15.0000] <shu>
i think that'll ruffle a lot of feathers and you'll be looking at increased spiraling into a super heated process discussion

[09:42:25.0000] <Bakkot>
well

[09:42:36.0000] <Bakkot>
if it gets to the end of the timebox that seems unavoidable.

[09:42:43.0000] <shu>
you are correct that it already is a big failure of consensus building process and a huge waste of our time

[09:42:54.0000] <Bakkot>
and "call for a formal vote if you think consensus-building has failed" is, at least, formally part of our process

[09:43:43.0000] <shu>
yeah though untested in practice

[09:49:25.0000] <shu>
did we say we'll revisit it today or tomorrow

[09:49:27.0000] <shu>
today, right?

[09:53:38.0000] <Bakkot>
today, yes

[09:53:43.0000] <Bakkot>
so we can post the spec tonight and vote tomorrow

[09:57:38.0000] <shu>
yeah

[10:01:57.0000] <Bakkot>
also it's meeting time already

[10:03:38.0000] <shu>
alas yes

[10:45:16.0000] <shu>
myles reached out to me and said he'd like to add "voting on 2020 spec" to the agenda by end of day

[10:45:28.0000] <shu>
it's our decision whether we request 2020 to have the regex fix or not have it

[10:45:56.0000] <shu>
i strongly believe resolution of that should be decoupled from 2020

[10:47:09.0000] <ljharb>
me as well

[10:47:19.0000] <ljharb>
what i would prefer is to first establish that we can cut 2020 without the fix

[10:47:27.0000] <ljharb>
and then, if we can resolve the fix, it's in, if not, it's in 2021

[10:47:40.0000] <shu>
i think we're beyond that kind of contingent language

[10:47:47.0000] <ljharb>
hm, ok

[10:47:48.0000] <shu>
we should just say 2020 doesn't have the fix

[10:47:53.0000] <ljharb>
ok

[10:47:54.0000] <ljharb>
let's do that

[10:47:58.0000] <shu>
we have spent so much time both on the process discussion and the actual discussion

[10:48:03.0000] <shu>
with no end result afaict

[10:48:30.0000] <shu>
well, also i guess, if it's EOD

[10:48:33.0000] <Bakkot>
I am starting to have hope that we can resolve the concrete issue

[10:48:44.0000] <shu>
then it'll be after the actual technical item timebox is done

[10:48:50.0000] <shu>
so we'll have the answer to jordan's question anyway

[10:49:08.0000] <ljharb>
SGTM

[10:49:30.0000] <ljharb>
i'm totally fine with saying "no fix in 2020" and then getting a fix and then saying "ok, now the fix will be in 2020, cool?"

[10:49:40.0000] <ljharb>
* also

[10:50:44.0000] <Bakkot>
if we can get a fix then we don't have to have the fight about not having a fix

[10:50:53.0000] <shu>
right

[10:50:58.0000] <shu>
waiting till after timebox makes sense

[10:51:45.0000] <michaelficarra>
I don't think we're going to come to a resolution on this topic

[10:51:59.0000] <ljharb>
kk

[10:52:04.0000] <michaelficarra>
the possible solutions are too disparate and we haven't had time to take in all the consequences

[10:52:23.0000] <Bakkot>
michaelficarra I am hopeful we can if you, personally, stay out of it

[10:52:33.0000] <michaelficarra>
woah woah woah

[10:52:53.0000] <Bakkot>
richard and mathias, I believe, are willing to go along with the "just allow all the escapes" proposal I am going to lead with, even though neither of them likes it

[10:52:55.0000] <Bakkot>
waldemar is too

[10:53:02.0000] <shu>
Bakkot: ugh apparently chairs haven't put it on the agenda, i requested 30 mins for today

[10:53:04.0000] <michaelficarra>
I am by no means the only supporter of proposal 4

[10:53:04.0000] <Bakkot>
so it's just you

[10:53:13.0000] <shu>
i am sure we requested yesterday...

[10:53:23.0000] <Bakkot>
proposal 4 could be an extension of my "allow all escapes" proposal

[10:53:29.0000] <Bakkot>
so if you want that you can approve my proposal

[10:53:41.0000] <Bakkot>
and you can bring proposal 4 up at a later time

[10:53:44.0000] <michaelficarra>
it's less motivated once we take one of the other approaches

[10:53:58.0000] <Bakkot>
sure but not less motivated if we take my approach

[10:54:04.0000] <Bakkot>
so, just vote for my proposal without raising the issue

[10:54:08.0000] <michaelficarra>
which proposal number is the one you support?

[10:54:38.0000] <Bakkot>
allow both \u\u and \u{} in group names in both kinds of regular expressions

[10:54:41.0000] <Bakkot>
which is I think number 1

[10:55:45.0000] <michaelficarra>
with what semantics for \u{} in non-u regexps?

[10:56:31.0000] <Bakkot>
in group names, that the mean the same thing as they do in u regexes

[10:56:38.0000] <Bakkot>
i.e. are decoded to the corresponding code point

[10:57:01.0000] <michaelficarra>
I can accept it

[10:57:15.0000] <michaelficarra>
it's weird

[10:58:57.0000] <Bakkot>
great

[11:02:17.0000] <shu>
i am up for anything as long as we can stop talking about it

[11:19:43.0000] <Bakkot>
michaelficarra are you ok with allowing both `\u\u` and `\u{}` in group names in u-mode regexes, but only `\u\u` in non-u-mode?

[11:19:51.0000] <Bakkot>
mathias has said this is his preference, between those two

[11:23:14.0000] <michaelficarra>
yes that's fine

[11:23:23.0000] <michaelficarra>
it's less weird than your preference

[11:24:16.0000] <Bakkot>
unfortunately saboff doesn't want that one

[11:24:18.0000] <Bakkot>
aaaargh

[11:29:35.0000] <michaelficarra>
😤

[11:31:56.0000] <Bakkot>
(he points out, fairly, that \u{} is most likely to be used by devs)

[11:41:41.0000] <michaelficarra>
in non-u regexen

[11:41:44.0000] <michaelficarra>
?

[11:43:01.0000] <Bakkot>
in group names, yes

[11:43:31.0000] <Bakkot>
if you are in the unenviable position of using a non-BMP code point in a group name, it is reasonable to reach for \u{} because you are thinking of the group name as being code-like, rather than regex-like.

[11:44:28.0000] <michaelficarra>
and also using a non-u regexp because…?

[11:45:05.0000] <Bakkot>
they're using regexes to process 16-bit scalar values rather than text, presumably

[11:45:12.0000] <Bakkot>
I've done that

[11:45:25.0000] <Bakkot>
works fine

[11:45:34.0000] <Bakkot>
is fast

[13:40:02.0000] <shu>
ljharb: is there a cut without the fix?

[13:40:27.0000] <shu>
ljharb: is that https://github.com/tc39/ecma262/tree/es2020?

[13:42:09.0000] <ljharb>
shu: yep, altho i've been continually rebasing and force pushing that on top of master

[13:45:48.0000] <michaelficarra>
ljharb: nice

[13:46:22.0000] <ljharb>
i also have some unpushed master commits that make master be 2021

[13:46:26.0000] <ljharb>
michaelficarra: you will be pleased to see that the word "smoosh" will be in the spec after i push those ^

[13:47:53.0000] <michaelficarra>
oh wow

[13:48:04.0000] <michaelficarra>
oh is that because of my Twitter handle?

[13:49:37.0000] <ljharb>
rofl yes

[13:49:43.0000] <Bakkot>
wait why are you linking our twitter handles

[13:49:47.0000] <Bakkot>
I thought it would be our github ones

[13:49:56.0000] <ljharb>
let me check

[13:50:14.0000] <ljharb>
it's been twitter for awhile, so that's what i used

[13:50:19.0000] <ljharb>
i can change it to github if you prefer

[13:52:43.0000] <Bakkot>
Github seems more relevant

[13:52:51.0000] <Bakkot>
since the spec is developed there

[13:52:58.0000] <Bakkot>
(also I don't post on my twitter)

[13:54:09.0000] <ljharb>
cool, updated for you

[13:54:14.0000] <ljharb>
shu: michaelficarra: do you have a preference?

[13:54:40.0000] <shu>
you can use whatever's on the editor update slides

[13:55:49.0000] <ljharb>
shu: both github and twitter for everyone is on there; want me to list both?

[13:55:57.0000] <shu>
ah, just twitter i guess

[13:56:40.0000] <ljharb>
kk

[13:57:28.0000] <michaelficarra>
I don't care which

[13:57:43.0000] <michaelficarra>
Twitter I suppose, since that'll get smooshMap into the spec

[13:58:15.0000] <ljharb>
haha k

[13:59:06.0000] <Bakkot>
if everyone else is doing twitter I'm fine with being consistent with them

[13:59:34.0000] <ljharb>
totally up to you, they don't have to be consistent

[13:59:46.0000] <Bakkot>
if everyone else is doing twitter I will do twitter

[13:59:51.0000] <ljharb>
kk

[14:00:54.0000] <shu>
dan and chair group want to move vote to tomorrow, keeping timebox for regexp stuff today

[14:00:55.0000] <shu>
we cool with that?

[14:01:45.0000] <michaelficarra>
as long as it happens at this meeting

[14:02:37.0000] <ljharb>
^

[14:02:40.0000] <Bakkot>
yeah

[15:56:19.0000] <ljharb>
2 more stamps on https://github.com/tc39/ecma262/pull/1892 and we can get it in

[16:21:21.0000] <Bakkot>
phew

[16:21:44.0000] <ljharb>
unicode regexes, escaped

[16:22:02.0000] <michaelficarra>
Bakkot: I got what I wanted

[16:22:57.0000] <Bakkot>
ljharb shu michaelficarra: to confirm, the plan is to fix my PR, merge it, also merge import.meta, and cut 2020 tonight, with the vote tomorrow, yes?

[16:23:31.0000] <shu>
your PR?

[16:23:36.0000] <shu>
(the rest of the plan sounds accurate)

[16:23:43.0000] <Bakkot>
"my PR" = the regex escape thing

[16:23:58.0000] <ljharb>
Bakkot: yes, that is the plan

[16:23:59.0000] <shu>
oh i'm sorry i saw "ljharb" and thought it was jordan who said the thing

[16:24:02.0000] <shu>
Bakkot: yep, agree

[16:24:59.0000] <michaelficarra>
Bakkot: get that PR updated ASAP so we have time to review

[16:25:05.0000] <Bakkot>
will do

[16:25:28.0000] <ljharb>
import.meta needs one more approval also

[16:26:05.0000] <michaelficarra>
I'll review it following the meeting

[16:26:13.0000] <michaelficarra>
like today's meeting I mean

[16:26:22.0000] <ljharb>
perf

[16:26:23.0000] <michaelficarra>
34 minutes

[16:33:55.0000] <Bakkot>
ljharb we're gonna merge https://github.com/tc39/ecma262/pull/1869 without tests

[16:33:58.0000] <Bakkot>
I hope you are ok with this

[16:34:08.0000] <ljharb>
lol yes

[16:34:21.0000] <ljharb>
i'll update the label post-merge, when tests eventually land

[16:38:10.0000] <michaelficarra>
uh oh, we've had issues with merging needs-consensus PRs without tests before

[16:38:13.0000] <michaelficarra>
as in, we got it wrong

[16:38:27.0000] <ljharb>
i mean, you do have a bunch of test cases in your slides

[16:38:32.0000] <ljharb>
could we put up a PR with those?

[16:42:25.0000] <Bakkot>
https://github.com/tc39/ecma262/pull/1869 is updated, PTAL

[16:42:37.0000] <michaelficarra>
it shouldn't be too hard to whip up a test262 PR for it

[16:42:40.0000] <Bakkot>
michaelficarra I am not especially worried that we will get this wrong, because the PR enumerated cases

[16:42:47.0000] <michaelficarra>
the testing matrix isn't too big

[16:42:49.0000] <Bakkot>
but I can try to put together at least a simple PR

[16:43:03.0000] <Bakkot>
the test matrix has... 24 entries, I think?

[16:43:35.0000] <Bakkot>
(u, non-u) x (raw, \u\u, \u{}) x (capture group name, name in backreference)

[16:43:37.0000] <michaelficarra>
{ IdentifierName, not IdentifierName } x { surrogates, full code point } x { u flag, no u flag }

[16:43:52.0000] <Bakkot>
ah, yeah, also the name vs non-name

[16:43:53.0000] <Bakkot>
so 48

[16:44:00.0000] <michaelficarra>
easy

[16:44:19.0000] <Bakkot>
oh I missed (in a literal, in the ctor)

[16:44:41.0000] <michaelficarra>
the RegExp ctor?

[16:44:45.0000] <Bakkot>
yeah

[16:44:49.0000] <michaelficarra>
that doesn't matter

[16:44:53.0000] <Bakkot>
uh

[16:44:55.0000] <Bakkot>
it's spec'd

[16:44:58.0000] <ljharb>
it has different escaping

[16:45:01.0000] <ljharb>
it's probably good to test it

[16:45:04.0000] <Bakkot>
it does not

[16:45:07.0000] <Bakkot>
it has the same escaping

[16:45:19.0000] <ljharb>
well, i mean like the thing you type into the file has more backslashes

[16:45:30.0000] <michaelficarra>
you can use string escapes though to just pass the literals 😭

[16:45:36.0000] <ljharb>
lol true

[16:45:54.0000] <michaelficarra>
why would anyone double-escape it lol

[16:46:05.0000] <Bakkot>
michaelficarra: btw never point out to waldemar that templates cannot be asciified

[16:46:15.0000] <Bakkot>
tagged templates

[16:46:19.0000] <michaelficarra>
why?

[16:46:23.0000] <ljharb>
lol could you give him a program and challenge him to asciify it

[16:46:24.0000] <michaelficarra>
they can't

[16:46:56.0000] <michaelficarra>
it bugs me much more that they prevent embedding programs in HTML than that they prevent shipping your program as pure ASCII

[16:47:03.0000] <Bakkot>
I am worried he will come to the committee and ask us to fix it, and I want to never think about this again


2020-04-02
[17:24:09.0000] <michaelficarra>
oh man I realised something that we didn't discuss about the named capture groups

[17:24:21.0000] <ljharb>
oh noes

[17:24:41.0000] <ljharb>
/me dives in slow motion shouting "nooooo"

[17:25:04.0000] <michaelficarra>
backreferences in non-u regexp are outside the <> but behave differently than the adjacent pattern

[17:25:20.0000] <michaelficarra>
we only ever talked about defining the NCG, not referencing it

[17:25:29.0000] <michaelficarra>
I don't know if everyone understood that consequence

[17:25:34.0000] <michaelficarra>
I certainly didn't think of it

[17:25:45.0000] <Bakkot>
they're still wrapped in `<>`

[17:25:48.0000] <ljharb>
so does that mean that now, we'll have NCGs that can't be backreferenced?

[17:25:56.0000] <Bakkot>
ljharb no I made them match of course

[17:25:59.0000] <ljharb>
or are the names in the backreference always wrapped in <>

[17:26:00.0000] <ljharb>
ok

[17:26:07.0000] <Bakkot>
the names in the backreference are wrapped in <>

[17:26:22.0000] <Bakkot>
wait am I wrong about that

[17:26:30.0000] <Bakkot>
no

[17:26:33.0000] <Bakkot>
I am not wrong about that

[17:26:35.0000] <Bakkot>
ok

[17:26:46.0000] <ljharb>
ok good

[17:26:52.0000] <michaelficarra>
oh okay \k<name>, got it

[17:26:55.0000] <Bakkot>
michaelficarra yeah

[17:26:56.0000] <michaelficarra>
okay so not as unexpected

[17:27:20.0000] <michaelficarra>
alright let's assume that nobody would've been surprised by that then

[17:27:26.0000] <Bakkot>
that was what I was assuming

[17:27:31.0000] <Bakkot>
by, not including it in my presentations

[17:27:53.0000] <michaelficarra>
Bakkot: you should probably use each of the names you're testing in a backreference as well

[17:28:03.0000] <Bakkot>
per above: (u, non-u) x (raw, \u\u, \u{}) x (capture group name, name in backreference)

[17:28:11.0000] <Bakkot>
the third clause there is exactly that

[17:28:20.0000] <michaelficarra>
you don't need separate tests, but sure

[17:28:36.0000] <Bakkot>
I want to make sure they enforce it for both

[17:28:43.0000] <Bakkot>
if they're not separate they could only enforce it for \k

[17:28:45.0000] <michaelficarra>
oh good call, for failing tests

[17:28:50.0000] <ljharb>
\u{1f64f}

[17:29:01.0000] <ljharb>
(took me a second but that was in reply to the "assuming")

[19:13:16.0000] <shu>
Bakkot: "they" don't have animacy requirements do they

[19:15:17.0000] <Bakkot>
sure they do, that's why we have it

[19:16:07.0000] <Bakkot>
we only use "they", "he", or "she" for people, animals, groups thereof, or ships

[19:16:15.0000] <Bakkot>
(gender in english is weird)

[19:16:38.0000] <Bakkot>
I guess we use "they" for groups of arbitrary things

[19:17:06.0000] <Bakkot>
so that should be "we only use 'he', 'she', and singular 'they' for people, animals, and ships"

[19:18:59.0000] <Bakkot>
I've been learning russian, which builds animated-ness into its declesion rules. so I am extra sensitive to this

[19:24:44.0000] <ljharb>
"it" makes more sense

[19:24:56.0000] <ljharb>
altho "they" kind of works too because in the spec we talk about hosts/impls as if they're animate entities

[19:25:08.0000] <ljharb>
implementations decide, eg, and only animate things decide

[19:25:40.0000] <Bakkot>
we speak of programs deciding but it would be weird to refer to a program as "they"

[19:25:53.0000] <ljharb>
i'm open to that argument

[19:26:10.0000] <ljharb>
altho "programs, they decide" doesn't seem weird to me

[19:26:28.0000] <ljharb>
so maybe singular they is more sensitive to being weird for non-animate things

[19:26:29.0000] <Bakkot>
if it's plural, yes, because we use "they" for all groups

[19:26:33.0000] <ljharb>
right

[19:26:51.0000] <Bakkot>
the case here is "consider a program x. they decide to do y"

[19:26:53.0000] <Bakkot>
that's clearly wrong

[19:27:17.0000] <Bakkot>
even though the program is neither male nor female

[19:28:11.0000] <ljharb>
yeah i'd say "it decides", true

[19:32:09.0000] <ljharb>
Bakkot: your regex PR has some conflicts and needs to be rebased; mind doing that?

[19:32:14.0000] <Bakkot>
how

[19:32:17.0000] <ljharb>
i have no idea

[19:32:35.0000] <ljharb>
oh wait

[19:32:36.0000] <ljharb>
one sec

[19:32:49.0000] <Bakkot>
ah, yeah, you probably just need to rebase

[19:32:56.0000] <Bakkot>
sorry

[19:32:57.0000] <Bakkot>
refresh

[19:33:03.0000] <ljharb>
`Normative: Use CharacterValue for RegExpUnicodeEscapeSequence` is the proper commit title?

[19:33:10.0000] <Bakkot>
hm

[19:33:12.0000] <Bakkot>
no, not anymore

[19:33:34.0000] <ljharb>
give me a commit message / retitle the PR?

[19:34:03.0000] <Bakkot>
Normative: Fully specify legal escape sequences in RegExp capture group names

[19:34:05.0000] <Bakkot>
renamed the PR as well

[19:34:08.0000] <ljharb>
ty

[19:34:29.0000] <Bakkot>
might be worth having the commit message

[19:34:38.0000] <Bakkot>
say that the effect of the PR is that all of

[19:34:55.0000] <ljharb>
sure, i'll add whatever you like

[19:35:08.0000] <Bakkot>
all of /(?<\ud835\udc9c>.)/ /(?<\ud835\udc9c>.)/u /(?<\u{1d49c}>.)/ /(?<\u{1d49c}>.)/u /(?<𝒜>)/ /(?<𝒜>)/u

[19:35:09.0000] <Bakkot>
are legal

[19:35:26.0000] <ljharb>
kk

[19:36:18.0000] <ljharb>
pushed; look ok?

[19:36:33.0000] <Bakkot>
hm

[19:36:37.0000] <Bakkot>
let me wordsmith for a sec

[19:36:48.0000] <ljharb>
ofc

[19:37:14.0000] <ljharb>
feel free to push your changes, or lmk what to update it to, whatever's easier for you

[19:38:45.0000] <Bakkot>
This commit makes the Early Errors for RegExpIdentifierStart and RegExpIdentifierPart fully specified, with the semantics that Unicode escape sequences of the form `\u LeadSurrogate \u TrailSurrogate` as well as \u { CodePoint }` are legal in named capture group names for both Unicode and non-Unicode regular expressions.

[19:38:54.0000] <Bakkot>
I am still not entirely sure how your commits work

[19:38:59.0000] <Bakkot>
you have not given us a script

[19:39:11.0000] <ljharb>
totally fair, at this point i'm just rebasing and force pushing

[19:39:22.0000] <ljharb>
but you can do whatever you want to the PR, i can always clean it up before landing

[19:39:27.0000] <ljharb>
(which a script would do)

[19:39:30.0000] <Bakkot>
ah, yeah

[19:39:41.0000] <Bakkot>
but yeah that message; please take care of it

[19:39:45.0000] <Bakkot>
I don't want to fire up git

[19:39:51.0000] <ljharb>
all set, TAL and lmk

[19:40:33.0000] <Bakkot>
crap, missed a `

[19:40:38.0000] <Bakkot>
This commit makes the Early Errors for RegExpIdentifierStart and RegExpIdentifierPart fully specified, with the semantics that Unicode escape sequences of the form `\u LeadSurrogate \u TrailSurrogate` as well as `\u { CodePoint }` are legal in named capture group names for both Unicode and non-Unicode regular expressions.

[19:40:43.0000] <Bakkot>
also the explicit list is not necessary

[19:41:23.0000] <ljharb>
k, both fixed

[19:41:45.0000] <Bakkot>
lgtm

[19:42:14.0000] <ljharb>
word

[19:45:53.0000] <ljharb>
k, merged :-) let's get a test PR up tho tomorrow if possible, even if it's not complete

[20:13:13.0000] <shu>
Bakkot: ty for the 24 hr+ effort here

[20:13:31.0000] <shu>
much appreciated

[20:13:42.0000] <shu>
expressed a little out of guilt that i have been trying to avoid the whole situation

[20:14:15.0000] <Bakkot>
no worries

[20:14:27.0000] <Bakkot>
tbh it's probably one of those things which goes faster with fewer people involved

[20:14:46.0000] <ljharb>
one of those 99% of things

[08:38:43.0000] <michaelficarra>
ugh I just noticed a bug in Kevin's PR from last night

[08:38:54.0000] <michaelficarra>
I'll send a PR fixing it real quick, I hope that's not a problem ljharb

[08:43:39.0000] <shu>
can someone please print the pdf and link it to the agenda

[08:43:45.0000] <shu>
dan keeps asking

[08:50:23.0000] <Bakkot>
michaelficarra is it https://github.com/tc39/ecma262/pull/1869 ?

[08:50:37.0000] <Bakkot>
michaelficarra if you have a different bug / fix, lmk

[08:52:31.0000] <michaelficarra>
Bakkot: no

[08:52:37.0000] <michaelficarra>
also, I don't think we need to make that change

[08:52:50.0000] <michaelficarra>
the problem is that CharacterValue returns a Number value and we're comparing to strings

[08:53:18.0000] <michaelficarra>
I'm trying to write it in terms of SV and define SV for RegExpUnicodeEscapeSequence right now

[08:53:29.0000] <michaelficarra>
but I'm also on a call for work so I'm kind of going crazy

[08:53:33.0000] <michaelficarra>
help?

[08:54:10.0000] <michaelficarra>
also there's a lot of definitions that can take advantage of the chain rule but aren't

[08:54:14.0000] <michaelficarra>
both CharacterValue and SV

[08:55:36.0000] <Bakkot>
michaelficarra my pr changes it to `It is a Syntax Error if the CharacterValue of |RegExpUnicodeEscapeSequence| is not the code point value of *"$"*, *"_"*, or some code point matched by the |UnicodeIDStart| lexical grammar production.`

[08:56:08.0000] <michaelficarra>
oh jeez, I didn't read

[08:56:16.0000] <michaelficarra>
I thought it was just his prose comment

[08:56:42.0000] <Bakkot>
it was not

[08:56:44.0000] <Bakkot>
left the prose

[08:56:49.0000] <Bakkot>
prose comment is describing the algorithm

[08:57:17.0000] <Bakkot>
the actual problematic part of the spec is "Let pText be the sequence of code points resulting from interpreting each of the 16-bit elements of P as a Unicode BMP code point. UTF-16 decoding is not applied to the elements.", which needs to remain as it is

[08:57:34.0000] <Bakkot>
this part of the spec is properly cursed

[08:57:48.0000] <michaelficarra>
ugh I'm sorry I missed this stuff in my review

[08:57:59.0000] <Bakkot>
same

[08:58:05.0000] <Bakkot>
I shouldn't've tried to write it so quickly

[08:58:16.0000] <michaelficarra>
I am having a proper panic attack right now

[08:58:41.0000] <Bakkot>
it's fine we can file erratta

[09:01:51.0000] <michaelficarra>
why do we need the `[~U] UnicodeLeadSurrogate UnicodeTrailSurrogate`?

[09:01:53.0000] <michaelficarra>
Bakkot ^

[09:02:00.0000] <michaelficarra>
it's always going to be an error

[09:03:44.0000] <Bakkot>
no it isn't

[09:04:07.0000] <Bakkot>
michaelficarra read the new early error rules

[09:04:53.0000] <michaelficarra>
ooohh I see

[09:06:08.0000] <Bakkot>
also I definitely slightly misled people in my presentation yesterday because I misunderstood the current spec because I did not realize the parsing rules for these productions treated non-bmp code points as being two code points

[09:06:24.0000] <Bakkot>
but I do not intend to reopen the question

[09:06:56.0000] <michaelficarra>
I think you're missing a CharacterValue definition

[09:07:04.0000] <Bakkot>
hm

[09:07:05.0000] <Bakkot>
where?

[09:07:56.0000] <michaelficarra>
oh no, nvm

[09:09:54.0000] <Bakkot>
also I feel like I should point out to you that this PR causes there to be both "LeadSurrogate" meaning "Hex4Digitsbut only if the SV of Hex4Digits is in the inclusive range 0xD800 to 0xDBFF and also "UnicodeLeadSurrogate" meaning "any Unicode code point in the inclusive range 0xD800 to 0xDBFF"

[09:10:02.0000] <Bakkot>
I do not feel great about having both of those names but don't have a better fix

[09:12:52.0000] <michaelficarra>
we could call it RegExpLeadSurrogate?

[09:13:14.0000] <michaelficarra>
oh wait it's the other way around lol

[09:13:20.0000] <michaelficarra>
greeeeaaaat

[09:13:35.0000] <Bakkot>
also, crap, I just realized this still has a bug

[09:13:37.0000] <Bakkot>
wait

[09:13:39.0000] <Bakkot>
no it doesn't ignore me

[09:13:40.0000] <Bakkot>
it's fine

[09:13:46.0000] <michaelficarra>
I *think* it's good

[09:13:51.0000] <michaelficarra>
but now I'm walking on eggshells as well

[09:14:40.0000] <Bakkot>
I guess the easy fix for naming is to rename `LeadSurrogate` to `HexLeadSurrogate` or something

[09:16:52.0000] <michaelficarra>
I was thinking the same thing

[09:17:03.0000] <michaelficarra>
I'd support that renaming

[09:17:09.0000] <michaelficarra>
let's keep it to a separate PR though

[09:20:46.0000] <Bakkot>
oops

[09:20:52.0000] <Bakkot>
just pushed a commit to this PR

[09:20:56.0000] <Bakkot>
I can back it out and make a new PR though

[09:21:55.0000] <michaelficarra>
Bakkot: https://github.com/tc39/ecma262/pull/1932/files#r402442153

[09:22:43.0000] <Bakkot>
michaelficarra sure

[09:24:01.0000] <Bakkot>
michaelficarra done

[09:39:34.0000] <michaelficarra>
Bakkot: this makes sense, right? https://github.com/tc39/ecma262/pull/1933

[09:40:02.0000] <michaelficarra>
I'm surprised there were so many low hanging ones in the 4 operations I thought to look through

[09:40:52.0000] <Bakkot>
I don't think it hurts to have these

[09:42:48.0000] <michaelficarra>
it makes the SDO look more complicated than it is

[09:45:42.0000] <ljharb>
ok good morning

[09:46:03.0000] <ljharb>
Bakkot: so 1932 should go in and 1929 is no longer needed?

[09:46:13.0000] <Bakkot>
ljharb yup

[09:46:34.0000] <ljharb>
k, and 1933 must go in as well

[09:46:37.0000] <ljharb>
and 1931?

[09:46:55.0000] <Bakkot>
1933 does not need to go in

[09:47:07.0000] <Bakkot>
1931 probably should I guess

[09:47:09.0000] <ljharb>
ok

[09:47:15.0000] <Bakkot>
1933 is strictly editorial; 1931 is a bug fix

[09:47:15.0000] <ljharb>
i can get 1933 in as well if you think it's ok to

[09:47:17.0000] <ljharb>
got it

[09:47:25.0000] <Bakkot>
frankly I want to stop putting things in

[09:47:37.0000] <ljharb>
understood

[09:47:37.0000] <Bakkot>
so my preference is to leave 1933 out

[09:47:46.0000] <ljharb>
k, on it

[09:47:53.0000] <Bakkot>
thanks

[09:48:08.0000] <Bakkot>
next year we are definitely feature-freezing the spec in January

[09:48:23.0000] <Bakkot>
I guess this was bugfix

[09:48:25.0000] <Bakkot>
but still

[09:48:46.0000] <ljharb>
agreed

[09:48:52.0000] <shu>
this is just waldemar

[09:48:56.0000] <ljharb>
next year we'll cut it in january, at least

[09:49:10.0000] <shu>
there would have been zero problems if we didn't explicitly say, we'd like to get it in for es2020

[09:49:14.0000] <ljharb>
true

[09:49:19.0000] <shu>
if we just waited for consensus or no consensus, then added or not added it to the cut

[09:49:43.0000] <shu>
now we know to not mention that

[09:49:59.0000] <Bakkot>
indeed

[09:54:34.0000] <Bakkot>
I will maybe not be on the call for the first hour because someone just put an interview on my calendar at work

[09:54:54.0000] <ljharb>
fun, k

[09:54:55.0000] <Bakkot>
s/maybe//

[09:55:11.0000] <shu>
is it for a position to do with JS

[09:55:14.0000] <shu>
just pull them in

[09:56:26.0000] <Bakkot>
lol

[10:00:40.0000] <ljharb>
shu: fill the blank: "import.meta is a ____-populated object available in modules"

[10:05:12.0000] <ljharb>
(host or implementation, i mean)

[10:07:34.0000] <ljharb>
Bakkot: or you if you have an idea

[10:07:39.0000] <ljharb>
otherwise i'll just pick one

[10:10:59.0000] <shu>
host

[10:13:03.0000] <ljharb>
ty

[11:13:12.0000] <Bakkot>
ljharb thanks for cutting the release!

[11:13:16.0000] <ljharb>
np

[11:13:25.0000] <Bakkot>
action item for us sometime in the next year: document this better

[11:13:27.0000] <ljharb>
i had to get a free trial of Adobe Acrobat to do the page numbers correctly

[11:13:32.0000] <Bakkot>
amazing

[11:13:46.0000] <Bakkot>
action item for us for sometime in the next year: make that not be the case

[11:14:38.0000] <Bakkot>
I like that the gh-pages commits still come from bterlson

[11:14:39.0000] <ljharb>
good luck :-p

[11:14:43.0000] <ljharb>
haha yeah

[11:14:53.0000] <Bakkot>
seriously considering having ecmarkup output latex

[11:16:45.0000] <ljharb>
annnd smoosh is now in the spec https://tc39.es/ecma262/ :-p

[11:17:22.0000] <shu>
Bakkot: figure-2.uxf to tikz pls

[11:18:05.0000] <shu>
unless there's a new hotness instead of tikz

[13:11:02.0000] <Bakkot>
ljharb fwiw "reuse existing PRs" is not something I have ever hear of

[13:11:08.0000] <Bakkot>
certainly I would usually ask someone to open a new PR

[13:11:25.0000] <ljharb>
¯\_(ツ)_/¯ i won't ask him to do it again

[13:11:39.0000] <ljharb>
in this case it feels like the same kind of change responding to the same change

[13:11:49.0000] <ljharb>
i wouldn't expect to reuse a conceptually different pr

[13:13:05.0000] <Bakkot>
ah, the change itself is actually almost totally unrelated

[13:13:12.0000] <ljharb>
a new pr is better then

[13:13:18.0000] <Bakkot>
it's different fixes for related PRs

[13:13:24.0000] <ljharb>
k

[15:31:17.0000] <shu>
ljharb: you have access to tc39-transfers, right?

[15:31:27.0000] <ljharb>
yep

[15:31:30.0000] <ljharb>
i made you an editor on your thing

[15:31:32.0000] <shu>
could you move incubator-agendas to tc39 and make it private so only delegates can access? would appreciate

[15:31:42.0000] <shu>
ah, i can do that?

[15:31:47.0000] <ljharb>
an admin i mean

[15:31:49.0000] <ljharb>
you can make it private

[15:31:56.0000] <ljharb>
i can't move it to tc39 tho

[15:32:00.0000] <shu>
i have access to the Settings page, but it says:

[15:32:01.0000] <shu>
Please ask one of the owners to upgrade tc39-transfer if you want to make this repository private.

[15:32:10.0000] <shu>
i guess an org thing

[15:32:13.0000] <ljharb>
ah, right. yeah

[15:32:27.0000] <ljharb>
let me check

[15:34:16.0000] <ljharb>
i assume ecma must be paying for tc39 then

[15:34:20.0000] <shu>
yeah

[15:34:27.0000] <ljharb>
ping a chair to bounce it, and then you can make it private since you're an admin on it

[15:34:34.0000] <shu>
only for microsoft to pay back some dues

[15:34:39.0000] <shu>
what a world

[15:36:48.0000] <ljharb>
haha

[15:42:38.0000] <shu>
is hubs still happening i'm finishing up some stuff

[15:43:50.0000] <ljharb>
yep

[16:00:35.0000] <ljharb>
shu: https://github.com/tc39/incubator-agendas is in tc39 now, you should be able to take it private

[16:00:49.0000] <ljharb>
add the "delegates" and "invited experts" teams to read or write

[16:01:17.0000] <shu>
ljharb: thanks

[16:01:29.0000] <shu>
ljharb: i decided to keep it public in the end and leave the private stuff centralized in Reflector

[16:01:48.0000] <ljharb>
makes sense

[16:01:54.0000] <ljharb>
can you add the next call to the TC39 calendar?

[16:02:06.0000] <ljharb>
https://calendar.google.com/calendar/embed?src=mozilla.com_l7b50itpaa9bnrvr61nebqrne8%40group.calendar.google.com&ctz=America%2FLos_Angeles

[16:02:10.0000] <shu>
sure

[16:02:42.0000] <ljharb>
thanks

[16:04:58.0000] <shu>
how... do i do that?

[16:05:05.0000] <shu>
i think i don't have write access?

[16:05:46.0000] <ljharb>
hm

[16:05:54.0000] <ljharb>
oh, add it to your gcal firest

[16:05:56.0000] <ljharb>
*first

[16:06:01.0000] <shu>
okay, i did

[16:06:20.0000] <shu>
but that only subscribes me to viewing it i think

[16:06:31.0000] <ljharb>
oh hm

[16:06:44.0000] <ljharb>
maybe someone needs to give you perms. dan?

[16:07:07.0000] <shu>
i'll email dan and chair group

[16:07:47.0000] <ljharb>
cool


2020-04-06
[14:08:21.0000] <ljharb>
so i can't figure out where in ecmarkup the `<script src="ecmarkup.js"></script>`, for example, gets added

[14:08:47.0000] <ljharb>
specifically, if you pass `--assets=inline` or omit cssOut/jsOut, it shouldn't be added at all, but it seems to always be there

[14:11:51.0000] <shu>
https://github.com/tc39/ecmarkup/blob/master/src/Spec.ts#L325-L349 ?

[14:12:31.0000] <shu>
if you're asking about ecma262 itself

[14:12:33.0000] <shu>
that script tag isn't added

[14:12:35.0000] <shu>
that's just in the source

[14:12:46.0000] <shu>
i think the only time that ecmarkup adds a script tag is for inlining

[14:15:34.0000] <ljharb>
ohhh you mean like, in the actual spec.

[14:15:41.0000] <ljharb>
thanks, that makes sense

[14:16:28.0000] <shu>
yeah what assets a spec refers to is just part of the spec, there's no autolinking that happens when you do js-out

[14:16:34.0000] <shu>
though it LOOKS like there's magic that skips inlining

[14:16:37.0000] <shu>
i don't know how that works at all

[14:16:58.0000] <ljharb>
yeah looks like it adds a script tag only if the URL matches the "out" param

[14:17:04.0000] <ljharb>
sorry only if it doesn't

[14:17:22.0000] <ljharb>
for deploy previews i want everything fully inlined, but for the real spec i want it separate

[14:18:03.0000] <ljharb>
seems like this stuff is incomplete in ecmarkup

[14:18:20.0000] <shu>
that's about ~40k extra, why inline?

[14:20:21.0000] <ljharb>
so i can stream a single block of text to the deploy preview thing i'm trying to build

[14:20:30.0000] <ljharb>
but yeah hm, i suppose separate files is fine too

[16:58:53.0000] <shu>
FYI i'm going to push to master to correct the capitalization of my name


2020-04-07
[17:01:08.0000] <ljharb>
shu: sure, prefix with Meta:, and sorry about that

[17:01:21.0000] <shu>
yep, did prefix with Meta:

[17:01:28.0000] <shu>
np i never use the second part of my first name anyways

[17:01:35.0000] <ljharb>
hm, i'm not sure if i copied that from somewhere or just guessed wrong

[17:01:54.0000] <ljharb>
probably me

[17:12:39.0000] <Bakkot>
ljharb: now that my name is on the spec the urge to hit the "squash and merge" button is getting nearly overwhelming

[17:14:22.0000] <ljharb>
i'm working on it

[17:14:38.0000] <ljharb>
there shouldn't be anything that's mergeable and unmerged tho rn

[20:17:38.0000] <shu>
ljharb: Bakkot: i propose starting this week, should there be things that are mergeable with enough reviews, that we squash and merge until the script becomes available

[20:19:07.0000] <shu>
it's been a quarter, and it's not like we're opposed to the idea of keeping the git metadata around, but there's no good project management reason to gate merging on it until either 1) the script appears or 2) other stakeholders pipe up that care about the metadata

[21:14:42.0000] <ljharb>
i suppose we could, it just kind of sucks for me :-)

[21:15:05.0000] <ljharb>
but also, how long is anything mergeable actually waiting around? like is this proposal solving a real problem?

[16:39:53.0000] <shu>
how do you all feel about how to describe normative optionality

[16:40:02.0000] <shu>
should we put it in a central place?

[16:40:21.0000] <shu>
both at a central place and per section that is normative optional?

[16:41:17.0000] <ljharb>
like with inlining annex b?

[16:41:31.0000] <ljharb>
seems like each place that's normative optional would just call it out with a visually distinct, and also greppable, notation

[16:43:23.0000] <shu>
annex b is kind of odd because there's the inflight proposal to inline parts of it

[16:43:30.0000] <shu>
distinct visual style sgtm

[16:48:49.0000] <shu>
practically there's also a distinction between Annex B's normative optionality and SAB and cleanupSome's normative optionality

[16:49:14.0000] <shu>
annex b's is that if a host implements it, annex b behavior is there for every execution of the host in every environment

[16:49:30.0000] <shu>
SAB and cleanupSome's is, the host can decide per execution due to some environment factors (headers, main threadedness, etc)

[16:49:52.0000] <shu>
i think it's useful to call this out

[16:49:54.0000] <shu>
thoughts

[16:53:17.0000] <ljharb>
hm

[16:53:30.0000] <ljharb>
i mean, i think it's important to say "this is required if a web browser, optional if not"

[16:53:51.0000] <ljharb>
and it's also important to say "this is optional period" or "this must be provided or omitted based on some condition" (like SAB, i think?)

[16:54:23.0000] <ljharb>
but i don't think grouping them by those requirements is necessarily helpful; typically you'll be reading the spec with some criteria in mind, so either you can grep for it, or you can macro it in your head to something

[16:55:22.0000] <shu>
i agree grouping them by those requirements isn't helpful

[16:55:35.0000] <shu>
i'm saying i'd like different verbiage

[16:55:42.0000] <shu>
the only one we have now is "normative but optional"

[16:56:01.0000] <shu>
i'd like to also introduce "normative but optional during Realm creation"

[16:56:39.0000] <shu>
it's kind of the same semantic meaninglessness problem we have in hosts-vs-implementations

[16:56:44.0000] <shu>
in that from ecma's pov it's the same difference

[16:56:46.0000] <ljharb>
"during realm creation"?

[16:56:52.0000] <ljharb>
not sure what the difference is

[16:57:02.0000] <shu>
well, what i said: that it's conditional per execution of the host

[16:57:08.0000] <shu>
instead of per host

[16:57:48.0000] <shu>
(and in the other direction, not normative optional per evaluation step, for instance, where it can just suddenly materialize in the middle of evaluation)


2020-04-08
[17:01:03.0000] <ljharb>
i mean, certainly the host/implementation shouldn't be altering the builtins during execution

[17:01:11.0000] <ljharb>
i hope there's no examples of that

[17:20:56.0000] <shu>
agree

[17:21:16.0000] <shu>
but the phrase "normative but optional" is kind of vague is the point

[20:59:27.0000] <ljharb>
that’s true

[20:59:34.0000] <ljharb>
I’m down for a better phrase, for sure

[11:10:33.0000] <ljharb>
i may be a bit late for the call (or need to duck out early). i've got a notary coming to the house to sign stuff and they're only available during the call :-/

[12:04:04.0000] <shu>
anyone can become a notary

[12:04:08.0000] <shu>
get your partner to become a notary

[12:06:16.0000] <ljharb>
lol in this case i don't get to select the notary unless i want to pay for it

[15:44:11.0000] <shu>
Bakkot: ljharb: domenic's dissapointment is basically that he thinks it's a useful distinction to draw when discussing things

[15:44:36.0000] <Bakkot>
is there anywhere other than host hooks vs not-host-hooks where this comes up?

[15:44:46.0000] <shu>
and i agree, but i'm okay with what's decided given that we can clarify the usefulness of the distinction in the front matter

[15:45:08.0000] <shu>
i think his opinion is wrong for the limited scope of ecma262, if we link to upstream specs

[15:45:21.0000] <shu>
he's really worried about general discussion in standards of not distinguishing hosts vs implementations

[15:45:31.0000] <shu>
he's really = he's actually

[15:45:33.0000] <shu>
is my take

[15:50:13.0000] <shu>
in the notes, i'm still going to refer to html as a "host specification"

[15:50:23.0000] <shu>
"implementation specification" sounds like a nonsense phrase

[16:09:49.0000] <ljharb>
Bakkot: for https://github.com/tc39/ecma262/pull/1914, do you want 3 separate commits, or squashed together?

[16:09:59.0000] <ljharb>
i'm cool with either

[16:10:08.0000] <Bakkot>
squashed

[16:10:59.0000] <ljharb>
kk, want to get me a commit message or should i write one

[16:11:04.0000] <ljharb>
(mostly copying the OP)

[16:36:52.0000] <Bakkot>
ljharb no message is necessary but the first couple sentences of the OP would suffice if you want one: "This unifies the wording used to introduce abstract operations. The intent is that the new wording should provide all and only the information in the current wording (except in a couple cases where the existing wording is obviously wrong)."

[16:37:08.0000] <ljharb>
cool, thanks


2020-04-09
[18:33:37.0000] <Bakkot>
ljharb re: "how long is anything mergeable actually waiting around", I would have clicked the squash and merge button on https://github.com/tc39/ecma262/pull/1935 just now if you had not been asking us to wait for your script

[19:19:45.0000] <ljharb>
Bakkot: right but that's not mergeable yet, since it doesn't have 3/4 editors approving it

[19:19:56.0000] <Bakkot>
we only need 3/4 for substantive changes

[19:20:15.0000] <Bakkot>
we said it was at our discretion for smaller things

[19:20:28.0000] <ljharb>
sure, i wouldn't consider this a smaller thing, so maybe we need to get on the same page about that

[19:20:38.0000] <ljharb>
fixing an english typo, or a variable name, or something, seems small to me

[19:20:50.0000] <ljharb>
a PR that needs 6 commits in it doesn't seem small

[19:22:24.0000] <Bakkot>
it is a collection of typo fixes, and has no other contents

[19:22:41.0000] <Bakkot>
there are several typos and therefore several commits, but none of them are substantive

[19:22:51.0000] <ljharb>
i'll give it another look, but that wasn't my impression

[19:23:28.0000] <Bakkot>
https://github.com/tc39/ecma262/pull/1935/commits

[11:15:42.0000] <shu>
okay i have had a very stressful morning discussing host vs implementation with anne

[11:21:39.0000] <Bakkot>
whoosh

[11:21:42.0000] <Bakkot>
did you learn things?

[11:21:51.0000] <shu>
yes

[11:22:02.0000] <shu>
he is very unhappy about standardizing on the word implementation

[11:26:25.0000] <shu>
more importantly, i learned that i think the disagreement is not just it's misleading to implementers

[11:26:37.0000] <shu>
which is what i was trying to fix

[11:26:51.0000] <shu>
but he actually wants to normatively distinguish

[11:27:15.0000] <shu>
so as to preclude e.g. exponentiate from being able to have additional requirements imposed upon it

[11:27:23.0000] <Bakkot>
well

[11:27:24.0000] <shu>
this is clearly not a thing we have consensus for

[11:27:26.0000] <Bakkot>
that is not a thing we can do

[11:27:41.0000] <shu>
imposed upon it by hosts i mean

[11:27:52.0000] <shu>
i think anne's mental model is something like

[11:28:11.0000] <shu>
"host hooks" == conferring the right to change behavior to hosts

[11:28:38.0000] <Bakkot>
we can say what it means to be a conforming implementation of JS, but we definitely cannot tell other standards bodies that they are not allowed to require people attempting to meet that standard that they have to pick some behavior for something we leave implementation-defined

[11:28:42.0000] <Bakkot>
that is not really within our power

[11:28:45.0000] <ljharb>
only within the documented constraints tho, which i'm invested in being as constrained as possible

[11:28:48.0000] <shu>
my mental model is the phrase "implementation/host-defined" confers the right, host hooks is just one structured mechanism we have

[11:28:59.0000] <Bakkot>
yeah, same

[11:29:13.0000] <Bakkot>
and host hooks are an explicit place for people to look

[11:29:44.0000] <shu>
editorially, anne is super super against host specs overriding e.g. exponentiate

[11:29:53.0000] <shu>
which he calls monkeypatching and considers extremely bad practice for specs

[11:30:01.0000] <Bakkot>
well, that's nice, he and domenic should not do that then

[11:30:07.0000] <ljharb>
that sounds like something i agree with

[11:30:16.0000] <ljharb>
but yeah, like, if it hurts when you do that, don't do it

[11:30:31.0000] <shu>
i don't know how to satisfy the stakeholders here

[11:30:44.0000] <shu>
so i'm going to page this out until our next call

[11:30:47.0000] <ljharb>
ok

[11:30:48.0000] <Bakkot>
√

[11:30:51.0000] <shu>
it is giving me undue stress for no gain

[11:32:10.0000] <shu>
this is also actually super topical

[11:32:20.0000] <shu>
for the compartments proposal

[11:32:58.0000] <shu>
like if the goal of that proposal is *actually* full virtualizability

[11:33:07.0000] <shu>
enumerating host hooks ain't it

[11:33:18.0000] <ljharb>
agreed

[11:33:29.0000] <shu>
it's also a super bad idea

[11:33:46.0000] <shu>
i do not want to expose host hooks or most impl-defined operations to be overrideable by script

[11:34:23.0000] <Bakkot>
some of them, maybe. the CSP one (to become more restrictive only). not so much the promise scheduling one, I think.

[11:36:33.0000] <ljharb>
some of them definitely make sense. but not the majority


2020-04-10
[16:54:56.0000] <ljharb>
btw if you get an email from a “Paul Krill” asking about the spec, please ignore it - Brian suggested the same to me.


2020-04-11
[17:39:15.0000] <shu>
how ominous

[21:18:59.0000] <ljharb>
lol he's a journalist for infoworld

[21:41:24.0000] <Bakkot>
"Paul Krill is an editor at large at InfoWorld, focusing on coverage of application development (desktop and mobile) and core web technologies such as Java"

[21:41:29.0000] <Bakkot>
everything about that sentence is incredible

[21:45:06.0000] <ljharb>
it occurs to me too late that that these logs are public and may be googleable O.O

[21:48:09.0000] <Bakkot>
hah

[21:48:11.0000] <Bakkot>
ah, well

[21:52:04.0000] <ljharb>
for some fun reading, i've located https://www.infoworld.com/article/2937716/its-official-ecmascript-6-is-approved.html and https://www.infoworld.com/article/2837425/ecmascript-6-returns-javascript-to-original-intent.html and https://www.infoworld.com/article/3246058/whats-new-in-ecmascript-2018.html (which talks about the "The ECMAScript 23018 specification", and `prototype.finally`)


2020-04-13
[09:47:08.0000] <shu>
ljharb: i don't know about opendoor, but in every company i've worked for, the default response to any press is just "talk to the press team, thank you"

[10:27:50.0000] <ljharb>
for inquiries about my employer, sure

[11:39:14.0000] <ljharb>
Bakkot: can you ping michael to review https://github.com/tc39/ecma262/pull/1697 ?

[11:40:35.0000] <Bakkot>
done

[11:40:48.0000] <Bakkot>
he points out it has reviews from shu and me, so if you approve you should just merge it

[11:42:47.0000] <ljharb>
i'm not confident, that's why i wanted him to review :-)

[11:42:54.0000] <ljharb>
(else i'd have merged it when you stamped)

[13:00:14.0000] <ljharb>
we have two uses of "constructable" in the spec, and it looked wrong to me (like it should be "constructible") and i googled and found https://github.com/WICG/construct-stylesheets/issues/90 - any thoughts on if i fired off a quick editorial PR to adjust them?

[13:41:30.0000] <Bakkot>
go for it

[13:41:44.0000] <Bakkot>
do we have a PR tag for "spelling"?

[13:42:20.0000] <Bakkot>
cf https://github.com/tc39/ecma262/pull/1856

[13:45:51.0000] <ljharb>
https://github.com/tc39/ecma262/pull/1945 no label i know of, but feel free to make one

[16:04:35.0000] <shu>
allen really rustlin my jimmies over here

[16:07:09.0000] <ljharb>
oh noes, i haven't been reading

[16:07:31.0000] <ljharb>
where?

[16:13:21.0000] <shu>
https://twitter.com/awbjs/status/1249817461337116672

[16:14:02.0000] <ljharb>
oh noes, fibs

[16:16:38.0000] <ljharb>
Bakkot: lol does michael prefer able?

[16:29:28.0000] <Bakkot>
whoooooo knows

[16:32:56.0000] <Bakkot>
shu lol

[16:33:28.0000] <Bakkot>
> It isn’t about when the FiB interop fix should be applied.

[16:34:00.0000] <Bakkot>
I wonder what he thinks does determine that

[16:34:06.0000] <Bakkot>
like, what other predicate

[16:36:12.0000] <shu>
i mean the rest of the steps are literally indented

[16:36:33.0000] <Bakkot>
yeah it clearly is in fact the predicate which determines that

[16:36:42.0000] <Bakkot>
but I wonder what other predicate there even could be, in principle

[16:36:46.0000] <shu>
ah yes

[16:37:24.0000] <Bakkot>
shu: btw while you have this stuff paged in you may wish to take a look at https://github.com/tc39/ecma262/issues/1942 / https://github.com/tc39/ecma262/pull/1943

[16:37:54.0000] <shu>
hooo boy

[16:38:02.0000] <shu>
maybe after i finish what i'm currently doing


2020-04-14
[18:09:14.0000] <shu>
Bakkot: lgtm, but how come we spell it initialize everywhere and not initialise

[18:09:47.0000] <shu>
to be clear i don't want any commonwealth spelling at all

[18:10:16.0000] <shu>
but i thought the split was US spelling for API names, commonwealth for prose

[18:56:20.0000] <ljharb>
for able vs ible, both are correct for UK or US

[18:56:37.0000] <ljharb>
and z is correct for us but acceptable for UK, iirc


2020-04-15
[14:29:30.0000] <ljharb>
i'll be a few minutes late, on another call


2020-04-16
[20:03:55.0000] <Bakkot>
if we do the SDO reorg, then we can have top-level sections called Syntax and Semantics

[20:03:56.0000] <Bakkot>
this pleases me

[20:05:03.0000] <Bakkot>
(that is, one called syntax and one called semantics)

[09:45:28.0000] <shu>
can i have a layering section called Pragmatics

[09:53:35.0000] <ljharb>
lol

[14:32:07.0000] <shu>
oof it took me 2 hours to write 3 short paragraphs about host vs implementation

[16:33:16.0000] <shu>
https://github.com/tc39/ecma262/pull/1951 gooooooood luck i'm going to avoid reading comments for a week

[16:36:04.0000] <ljharb>
oo

[16:37:47.0000] <ljharb>
shu: `artefact` vs `artifact`?

[16:38:36.0000] <ljharb>
6 vs 0, gross

[16:38:42.0000] <shu>
commonwealth baby

[16:39:14.0000] <shu>
you can write a petition to the queen

[16:39:54.0000] <ljharb>
https://grammarist.com/spelling/artefact-artifact/ says "The British preference for artefact is a new development. The two forms vied for ascendancy in British writing through much of the 20th century until artefact finally gained the upper hand around 1990."

[16:40:14.0000] <shu>
well this is ES2021, not ES1989

[16:40:18.0000] <ljharb>
just like the modern british accent, americans are again more authentically british than the brits themselves

[16:40:20.0000] <shu>
though ES1989 sounds cooler

[16:40:31.0000] <ljharb>
ES1985, set to the theme song of stranger things


2020-04-17
[17:39:55.0000] <Bakkot>
shu I see you have failed at "avoid reading comments"

[17:40:49.0000] <shu>
i did :(

[17:45:49.0000] <Bakkot>
unrelated: you know how we said that we wanted to include grammar parameters for early errors?

[17:45:54.0000] <Bakkot>
did we also want to do that for SDOs?

[17:46:12.0000] <Bakkot>
because there's 1051 places in the spec that an early error or SDO is defined without the relevant grammar parameters

[17:46:27.0000] <Bakkot>
which is... a lot

[17:51:37.0000] <Bakkot>
(only 80 of them are in early errors)

[17:59:15.0000] <shu>
1051 is a lot

[18:00:02.0000] <shu>
what in the world does https://github.com/tc39/ecma262/pull/1951#issuecomment-614969552 mean

[18:09:37.0000] <shu>
you know what i realized

[18:10:06.0000] <shu>
these discussions are just the JS spec nerd version of https://forum.bodybuilding.com/showthread.php?t=107926751&page=1

[21:37:50.0000] <ljharb>
Bakkot: https://github.com/tc39/ecma262/pull/1697 is also waiting on michael's review; i don't feel comfortable approving it myself

[21:38:43.0000] <ljharb>
shu: lol did you have that thread saved for reference

[11:02:26.0000] <shu>
this is just such a waste of time

[11:02:30.0000] <shu>
i regret taking this on

[11:05:44.0000] <ljharb>
so you regret hosting this discussion

[12:18:01.0000] <Bakkot>
New rule: if someone wants us to change a thing they have to make the PR themselves and also deal with the random people who will comment on it with opinions

[12:20:04.0000] <shu>
that's really rule 1 of any OSS project i think

[12:20:07.0000] <shu>
"pay your dues"

[12:20:14.0000] <shu>
but people forget

[12:20:18.0000] <shu>
i need to be better about disengaging

[12:20:52.0000] <shu>
Bakkot: also to drag you into this but you might have an opinion on https://github.com/tc39/proposal-promise-any/pull/59

[12:21:01.0000] <shu>
given you designed it originally

[12:21:12.0000] <Bakkot>
@shu I +1'd your latest comment, that is my opinion on it

[12:21:48.0000] <shu>
ah, didn't see, good enough for me

[12:21:50.0000] <Bakkot>
I don't feel all that strongly; this is one of those things that I expect to affect approximately zero real people ever

[12:21:56.0000] <Bakkot>
but my intuition matches yours

[12:22:20.0000] <shu>
it affects maintainability of impls fwiw

[12:22:25.0000] <shu>
but definitely true for not affecting users

[13:10:21.0000] <ljharb>
are there any examples of builtin methods in 262 where the args aren't evaluated in order, at least within ES6+?

[13:10:57.0000] <ljharb>
and am i wrong that WebIDL mandates that argument normalization/coercion/validation be done in order? i thought we talked about that for like 5 minutes in dan's IDL presentation

[13:12:17.0000] <Bakkot>
ecma-262 has approximately zero builtin subclasses, so it would not be a particularly useful data source either way.

[13:12:56.0000] <Bakkot>
Also other languages exist. I don't think it makes sense to assume that a very weak precedent in ecma-262 should necessarily override a very stong precedent in other languages.

[13:13:51.0000] <ljharb>
it has 6 error subclasses but they have the same signature as the superclass

[13:14:06.0000] <Bakkot>
but anyway also yes, for example https://tc39.es/ecma262/#sec-%typedarray%.from checks that its second argument, mapfn, is callable before checking that its first argument, source, is object-coercible

[13:14:32.0000] <ljharb>
interesting

[13:14:42.0000] <ljharb>
my understanding is also that it's a very strong precedent in html tho, based on dan's IDL presentation

[13:15:22.0000] <ljharb>
i see that Array.from matches typed array's .from as well

[13:15:58.0000] <ljharb>
i'm still very confused why it affects maintainability from an impl perspective

[13:16:23.0000] <Bakkot>
seems like a question one ought to trust the implementers about, unless you feel like digging into some C++ today

[13:16:25.0000] <Bakkot>
I sure as hell don't

[13:17:49.0000] <ljharb>
surely i don't either, but i have to understand how important it is from an impl perspective to compare to my perspective

[13:20:31.0000] <shu>
ljharb: the implementation maintainability argument is the same argument as the argument that super() is expected to be the first thing that a subclass constructor does in OO languages

[13:20:58.0000] <shu>
ljharb: when implementing these spec subclasses as actual subclasses, it is natural to, well, reflect the class hierarchy down into the implementation language

[13:21:08.0000] <shu>
like C++

[13:21:52.0000] <shu>
well, not actual C++ classes but still organized in an OO way in the implementation

[13:22:40.0000] <shu>
in implementation languages, it's very natural to call a superclass constructor first

[13:23:04.0000] <shu>
the superclass constructor is a natural unit of code

[13:23:20.0000] <shu>
to split logic *across* it makes things harder to reason about

[13:23:31.0000] <shu>
in general you want to be sure the superclass portion of yourself is nice and initialized before you start doing other things

[13:23:42.0000] <ljharb>
then why are private fields not introspectable, since that's how all other languages do it

[13:23:51.0000] <shu>
what

[13:23:51.0000] <Bakkot>
:|

[13:23:54.0000] <shu>
how does that follow

[13:23:56.0000] <ljharb>
iow it sounds like you're saying that idioms from other languages should dictate how JS idioms work

[13:24:06.0000] <shu>
no, that's how you're interpreting what i'm saying

[13:24:21.0000] <Bakkot>
he is explaining why this question affects maintainability from an impl perspective

[13:24:23.0000] <Bakkot>
which is what you asked

[13:24:30.0000] <ljharb>
frankly i don't care what other languages do, except as to provide agnostic justifications to help us make a choice

[13:24:31.0000] <ljharb>
ok

[13:24:53.0000] <shu>
i think you SHOULD care what languages do as data points that may or may not be influential absent other factors

[13:24:58.0000] <ljharb>
so you're saying that because JS classes are often in impls written as C++ classes, we should make C++ expectations impose a pattern on the JS spec?

[13:25:03.0000] <shu>
no

[13:25:18.0000] <ljharb>
ok, clearly i'm missing your point :-/

[13:25:36.0000] <shu>
first, we all agree that the specific ordering of arguments being processed doesn't affect users, right?

[13:25:49.0000] <ljharb>
it affects developers

[13:25:55.0000] <shu>
unless you're passing in proxies, it's not observable

[13:26:23.0000] <ljharb>
ToString is trivially observable if you pass a symbol by mistake

[13:26:34.0000] <shu>
but how does that affect developers

[13:26:41.0000] <ljharb>
if i pass a, b, and c, and i see that b is wrong, i assume a is right

[13:26:48.0000] <ljharb>
("see" via an exception, i mean)

[13:27:05.0000] <ljharb>
i read LTR and i expect validation to be done the same way

[13:27:06.0000] <shu>
i think that's you personally

[13:27:09.0000] <shu>
i really don't think that's how things work

[13:27:21.0000] <shu>
functions in general do not consume in order

[13:27:30.0000] <shu>
if i see an error related to b, that doesn't tell me jack about a

[13:27:36.0000] <shu>
do not consume arguments in order

[13:27:52.0000] <ljharb>
i remain convinced that the majority of functions in 262 do

[13:28:11.0000] <Bakkot>
even if that were true, there... exist... other functions?

[13:28:12.0000] <ljharb>
https://tc39.es/ecma262/#sec-string.prototype.slice is the first one i thought of, and it checks receiver, and then each arg in order

[13:28:20.0000] <shu>
i remain unconvinced you have extrapolated a coincidental pattern to be a pattern that should be adhered to

[13:28:32.0000] <shu>
and i am very, very strongly of the opinion that you drew an incorrect conclusion

[13:28:36.0000] <ljharb>
i'm pretty sure allen's said it was an intentional ES6 design decision

[13:28:39.0000] <ljharb>
i'll try to dig it up

[13:28:51.0000] <shu>
i am going to disengage now because i don't know what's going on

[13:28:58.0000] <shu>
we don't design the language on adhering to truisms like this

[13:29:32.0000] <ljharb>
we do design it based on consistency, often

[13:29:58.0000] <ljharb>
whether we'd have followed the truism if we started now doesn't usually matter when we can't change the old ones

[13:30:12.0000] <shu>
there is a deeper consistency which you are asserting to not matter under the banner of e.g. "i don't care what other languages do"

[13:30:21.0000] <shu>
also we've been trying to point out that there is no consistency anyway

[13:30:22.0000] <ljharb>
JS consistency is what's important

[13:31:55.0000] <shu>
jordan, there's no agreement that this is a JS consistency

[13:32:00.0000] <shu>
you have asserted it as such

[13:32:33.0000] <ljharb>
ok

[13:34:40.0000] <shu>
seeing how i've failed to convince you or get on the same page, we can talk about it on a video chat next week to a strict timebox, and failing that, happy to bring to plenary, though i don't think it's a good use of plenary time

[13:34:53.0000] <ljharb>
sounds good


2020-04-21
[17:19:05.0000] <shu>
ljharb: are you free tomorrow for us to talk about the AggregateError issue on VC?

[17:19:21.0000] <shu>
strictly timeboxed to 30 mins preferably

[17:25:58.0000] <ljharb>
i could do 1 with a hard stop at 1:30?

[17:36:03.0000] <shu>
sgtm

[17:36:08.0000] <shu>
i'll make a calendar item

[13:41:14.0000] <shu>
ljharb: so i think what you were referring to in webidl is the "To convert a Web IDL argument list [...]" section of https://heycam.github.io/webidl/#es-user-objects

[13:48:17.0000] <shu>
and that mental model makes sense for an IDL, in that there's an "argument adapter" step; the interface's types first need to be adapted to the implementation language

[13:49:32.0000] <shu>
the difference in the AggregateError case is that it's all within JS. there's no expectation of an argument adapter wrapping your functions

[13:52:55.0000] <shu>
i'd also argue the IterableToList is not really about argument type adaption in the IDL sense; you're massaging input to store it

[14:04:23.0000] <ljharb>
the "to list" part, you're right; the "GetIterator" tho imo is adapting

[14:50:29.0000] <shu>
i can see an argument for that, though it'd be even weirder for JS to split that operation apart

[14:51:48.0000] <shu>
anyway we didn't have time to discuss next steps

[14:51:49.0000] <ljharb>
agree, i'm just saying that the higher order bit in that spec line is "get iterator" not "to list"

[14:57:03.0000] <shu>
but the point is there is no "argument adapter" expectation in things that are already in JS

[14:57:11.0000] <shu>
unlike things that go through an IDL layer

[15:07:52.0000] <ljharb>
the reason i bring up web IDL is 1) mental model "evidence", which i know is a fuzzy concept overall, but mainly 2) how much do we want to leave open the future possibility of using web IDL in 262

[15:10:09.0000] <shu>
web idl is for sure not suitable for 262, which is why dan had originally proposed something like JS IDL

[15:11:15.0000] <shu>
i highly doubt AggregateError makes a difference for futureproofing for some kind of IDL

[15:11:31.0000] <shu>
vs existing APIs, if by future possibility you mean some kind of mass conversion to use an IDL

[15:15:03.0000] <ljharb>
yes, that's what i meant

[15:15:10.0000] <ljharb>
ok, that's good to know then


2020-04-22
[14:32:58.0000] <ljharb>
meeting?

[15:32:09.0000] <ljharb>
sorry, had a new call coming in

[15:53:02.0000] <ljharb>
shu: Bakkot: any conclusions after i dropped?

[15:53:09.0000] <Bakkot>
No we all left

[15:54:19.0000] <ljharb>
lol oh

[15:55:00.0000] <ljharb>
at any rate altho i +1'd domenic's comment, and would be fine with having only JS number values in the spec,  i don't know enough about the topic to have a strong opinion, so i'll go with whatever you all prefer

[15:58:20.0000] <shu>
i think the only realistic way to get correctness that we can reason about is to perform all the operations on mathematical values and convert back and forth

[15:58:40.0000] <shu>
so the editorial question comes down to what's the tradeoff for the explicitness and the verbosity of those conversions

[15:59:27.0000] <ljharb>
makes sense

[15:59:28.0000] <shu>
and i think my position there is probably not as strong as i came off during the call

[16:00:09.0000] <shu>
if a tool by default transformed 1 + 2 to 1_RR +_RR + 2_RR if no explicit subscript is otherwise given, i'm probably fine with that

[16:00:55.0000] <shu>
though even that might a approach a level of mathematical formalism here that would turn off future spec contributors

[16:01:48.0000] <shu>
but also maybe not

[16:02:06.0000] <shu>
or maybe even raise the bar in a way that's desirable

[16:02:07.0000] <shu>
*shrug*

[16:02:31.0000] <Bakkot>
I definitely lean towards explicit conversions and having `0` mean the mathematical value

[16:02:40.0000] <Bakkot>
I don't think there will actually end up being that many conversions

[16:02:49.0000] <Bakkot>
most of them will be wrapped up in abstract operations

[16:02:53.0000] <shu>
ah, true

[16:03:49.0000] <shu>
can we play typography tricks

[16:05:57.0000] <Bakkot>
fun fact: we define 𝔽 but literally never use it

[16:09:08.0000] <shu>
man what is test262 doing

[16:10:02.0000] <shu>
oh wait, i must've missed this consensus...

[16:11:01.0000] <Bakkot>
wait for what

[16:11:18.0000] <Bakkot>
I stopped following test262 a while ago

[16:11:29.0000] <shu>
https://github.com/tc39/test262/pull/2548

[16:12:02.0000] <shu>
when did we talk about this? i do not remember

[16:12:39.0000] <Bakkot>
https://github.com/tc39/notes/blob/master/meetings/2020-02/february-4.md#remove-steps-2-and-4-from-proxycreate

[16:13:06.0000] <shu>
must've been real quick, notes were that there was no objection

[16:13:13.0000] <shu>
with no discussion

[16:27:37.0000] <shu>
ljharb: https://github.com/tc39/ecma262/issues/1964#issuecomment-618082050 there ya go

[16:59:12.0000] <ljharb>
yeah the ProxyCreate thing was quick


2020-04-23
[17:00:22.0000] <ljharb>
shu: thanks

[17:08:02.0000] <shu>
ljharb: Bakkot: i got the sense from the previous 2 calls you are fine with my preferred position on the job invariants, where we special-case it per hook

[17:08:13.0000] <Bakkot>
yup, that seemed reasonable to me

[17:09:30.0000] <shu>
seems like gus disagrees in https://github.com/tc39/ecma262/pull/1934 and might not do the work along that direction, so just as a heads up i might close it and write a separate PR

[17:09:45.0000] <shu>
not right now, but sometime before the next call

[17:10:17.0000] <Bakkot>
√

[17:10:52.0000] <ljharb>
yes that also sounds fine with me

[17:11:04.0000] <ljharb>
altho it seems like the slots need to be set up regardless; the only question is constraining their values?

[17:11:45.0000] <shu>
that's a separate editorial question

[17:12:04.0000] <shu>
execution contexts are these old things with components instead of slots

[17:12:13.0000] <shu>
what do we assume the initial state of components is?

[17:13:26.0000] <ljharb>
hm, ok

[17:14:07.0000] <ljharb>
i'm thinking about like [[Realm]]

[17:14:54.0000] <shu>
but it is not actually [[Realm]]

[17:15:00.0000] <shu>
it is the Realm component of an execution context

[17:15:25.0000] <shu>
i don't actually know what the expectation is if we touch a component and it hasn't been explicitly set

[17:15:32.0000] <shu>
do you think it's undefined? do you think it asserts?

[17:16:03.0000] <shu>
(i would've thought the former)

[19:26:19.0000] <ljharb>
i would assume the former

[19:26:26.0000] <ljharb>
like everything else in the spec and the language

[19:26:34.0000] <ljharb>
(except private fields, i suppose)

[20:38:57.0000] <Bakkot>
I think that's supposed to not happen

[21:57:41.0000] <ljharb>
which, that's it's not set?

[21:58:29.0000] <Bakkot>
accessing a component which has not been set, yes

[07:49:22.0000] <ljharb>
https://github.com/tc39/ecma262/pull/1814 needs some reviews

[16:00:08.0000] <shu>
√

[16:00:22.0000] <shu>
editorially looks fine; as i said i must've missed the agenda item since it went by so quick

[16:00:39.0000] <shu>
it's also nice the title is "remove steps 2 and 4" and the PR removes steps 2 and 4 :O

[16:00:43.0000] <shu>
:)*


2020-04-26
[10:36:01.0000] <Bakkot>
ljharb: https://github.com/tc39/ecma262/pull/1866#discussion_r415352617

[10:42:17.0000] <ljharb>
Why not the negative condition?

[10:43:43.0000] <Bakkot>
Why the negative condition?

[10:44:17.0000] <Bakkot>
The point of writing it this way is that it suggests that the error thrown could be one of those errors, rather than just a generic one

[10:44:34.0000] <Bakkot>
(without actually requiring it because we don't really require anything about which error gets thrown, as a rule)

[12:22:13.0000] <ljharb>
hm, ok, that’s fair

[12:22:21.0000] <ljharb>
i guess the assert is fine


2020-04-27
[11:06:10.0000] <Bakkot>
can one of you give me publish permissions for ecmarkup on npm?

[11:28:43.0000] <shu>
if you can walk me through how to do it

[11:32:34.0000] <shu>
the extent of what i know is adding collaborators for the project, and you are already a collaborator for ecmarkup

[11:37:19.0000] <ljharb>
yes, one sec

[11:38:05.0000] <ljharb>
Bakkot: yeah you're already listed as a maintainer in https://www.npmjs.com/package/ecmarkup/access

[11:38:25.0000] <ljharb>
not sure why it doesn't show up on the package page, maybe because you don't have an avatar

[12:01:54.0000] <Bakkot>
huh, I show up on https://www.npmjs.com/package/ecmarkdown

[12:04:08.0000] <shu>
that's so weird

[12:04:19.0000] <shu>
i don't see you on the right-hand side but do see you under /access

[12:04:24.0000] <shu>
let's remove you and re-invite...

[12:04:59.0000] <shu>
Bakkot: i reinvited, but maybe you need to accept?

[12:32:28.0000] <ljharb>
the package page is under weird caching rules, that might not even do it

[12:32:33.0000] <ljharb>
i think publishing a version would probably do it tho


2020-04-29
[22:42:13.0000] <ljharb>
heads up that the netlify deploy preview might stop working tomorrow. i've got a working (with one major caveat) replacement solution ready, but the caveat is that the service doesn't want an unauthenticated upload endpoint, and there's no way to do auth with PRs from forks.

[15:36:27.0000] <bakkot>
I just noticed https://tc39.es/ecma262/#sec-ecmascript-specification-types spells abstract closure as "Abstract Closure", with caps, which does not get linked and is not use anywhere else in the spec

[15:40:13.0000] <shu>
good catch

[15:40:20.0000] <shu>
i'll lowercase it

[15:49:50.0000] <shu>
https://github.com/tc39/ecma262/pull/1979

[15:50:43.0000] <ljharb>
hmm, now the list looks weird

[15:50:50.0000] <ljharb>
should it instead be capitalized everywhere else?

[15:50:53.0000] <bakkot>
yeah it feels like the other direction might be better?

[16:03:17.0000] <shu>
it's not capitalized because Abstract Operation isn't capitalized

[16:03:42.0000] <ljharb>
that's not a first-class thing tho

[16:04:09.0000] <shu>
and so neither are the abstract operations themselves but AOs are always AlternateCaps

[16:05:36.0000] <shu>
i'll make a PR for all caps and we can make a judgment on how it looks compared to current

[16:05:41.0000] <shu>
err, not all caps, but capitalized

[16:06:44.0000] <ljharb>
sure ¯\_(ツ)_/¯ 1979 is a strict improvement for now regardless, it just struck me as weird in situ in the list

[16:19:03.0000] <shu>
both probably look fine

[16:19:13.0000] <shu>
i have no strong preference, will leave to y'all to decide

[16:23:11.0000] <ljharb>
given michael's re-stamp, and kevin's explicit support, i think i'll land it as it is, capitalized

[16:29:36.0000] <shu>
sgtm

[16:45:09.0000] <shu>
what a twist, the branch name is lowercase-abstract-closure, but it capitalizes it

[16:45:26.0000] <bakkot>
the branch is in re: lowercase-abstract-closure(s)


2020-04-30
[17:19:29.0000] <bakkot>
ljharb: https://github.com/tc39/ecma262/pull/1978 is an example of a thing which probably does not need to wait for more than one or two approvals

[17:45:01.0000] <shu>
hm, i can't really make sense when GH displays review comments inline when you're looking at individual commits of a PR

[17:45:20.0000] <shu>
i found some comments very confusing until i realized they only applied to the final diff

[19:56:20.0000] <ljharb>
bakkot: true enough

[00:58:22.0000] <ljharb>
k https://github.com/tc39/ecma262/pull/1980 is ready, and just in time; netlify disabled the account an hour ago. i'll merge it in the morning, and any PRs rebased after that will have the new deploy preview.

[06:53:22.0000] <bakkot>
ljharb is there not authentication on this?

[06:59:18.0000] <bakkot>
otherwise looks pretty slick though!

[07:00:05.0000] <bakkot>
i especially like that we get a custom URL

[07:08:42.0000] <ljharb>
no, not just yet, but the build for a sha is immutable and it only works for our org. in the medium term begin will build a GitHub app, and then it’ll be authenticated

[07:09:16.0000] <ljharb>
and the service does check that the PR and SHA exist the first time it gets a build

[07:13:06.0000] <bakkot>
ah, that makes me feel better

[07:13:58.0000] <bakkot>
I am extremely leery of running totally open file servers; if they have to open a PR to do the upload I am a lot less worried about it

[07:17:11.0000] <ljharb>
i mean, they could wait for an open PR and then try to beat Travis to the upload

[07:17:33.0000] <ljharb>
but begin and i thought that was a reasonably unlikely risk that this was fine for the short term

[07:19:04.0000] <bakkot>
yeah seems fine

[10:14:01.0000] <ljharb>
anyone want to stamp it? i'll land it regardless soon, but it's nice to have a stamp

[11:05:39.0000] <bakkot>
approved

[11:08:38.0000] <ljharb>
ty

