2020-12-01
[10:18:10.0000] <ljharb>
ps travis is going super slow, or i'd have landed like 10 things last night; i'm going to pursue migrating to actions sooner than later

[10:25:47.0000] <Bakkot>
yeah it's having a bad time


2020-12-02
[12:03:13.0000] <shu>
btw dan wants to join us this meeting to talk about typesetting needs

[12:03:21.0000] <shu>
is that fine?

[12:07:39.0000] <Bakkot>
wfm

[12:21:21.0000] <ljharb>
sure. typesetting?

[12:21:37.0000] <ljharb>
like as in physical printing?

[13:39:25.0000] <shu>
i have no idea


2020-12-03
[22:26:24.0000] <ljharb>
typesetting email lgtm


2020-12-07
[13:08:07.0000] <shu>
Bakkot: have you had a chance to review the typesetter email?


2020-12-13
[10:07:23.0000] <Bakkot>
shu: would be good to get your stamp on https://github.com/tc39/ecma262/pull/2210


2020-12-16
[11:56:03.0000] <ljharb>
do we even want ecmarkdown to be packaged on debian? we only publish it to npm. https://github.com/tc39/ecmarkdown/issues/83

[12:07:24.0000] <Bakkot>
he also opened https://github.com/rbuckton/reflect-metadata/issues/126

[12:08:10.0000] <Bakkot>
but no others

[12:08:14.0000] <Bakkot>
I have no idea what's going on here

[12:08:55.0000] <Bakkot>
anyway I'll tag it as a matter of principle

[12:09:03.0000] <Bakkot>
would have already if I'd remembered

[12:10:18.0000] <Bakkot>
maybe they're just trying to ship with a full copy of npm?

[12:10:28.0000] <Bakkot>
or everything on npm which is a dependent of at least one package, anyway

[12:10:41.0000] <Bakkot>
wonder how much code that would be

[12:20:07.0000] <shu>
i see no real harm in letting distros package whatever they want

[12:20:11.0000] <shu>
if all they're asking for is tags

[12:36:29.0000] <ljharb>
i guess in these cases, since we only care about tc39 consumers, it's fine

[12:36:50.0000] <ljharb>
i actively discourage separate packaging of all my packages since it increases maintenance burden, and it's often a substandard experience.

[12:37:06.0000] <ljharb>
if you install nvm via homebrew, for example, it doesn't work properly.

[12:44:01.0000] <shu>
i see

[12:49:19.0000] <ljharb>
also, installing node itself via apt gives you a broken node

[14:32:22.0000] <Bakkot>
we are doing the editor call this week, right?

[14:33:29.0000] <Bakkot>
shu ping

[14:33:32.0000] <ljharb>
y

[15:53:44.0000] <Bakkot>
shu the question about numbers is

[15:53:46.0000] <Bakkot>
Are there any strings of digits (maybe including a decimal point) with more than 20 significant digits such that the three algorithms "set everything after the 20th significant digit to a 0, then choose the nearest float", "set everything after the 20th significant digit to a 0, increment the digit in the 20th place, then choose the nearest float", and "choose the nearest float" produce three distinct values, rather than

[15:53:47.0000] <Bakkot>
 just two? (You can get two from e.g. "100000000000000008191".)


2020-12-17
[16:13:50.0000] <shu>
Bakkot: thanks

[16:15:20.0000] <Bakkot>
I guess to be pedantic you have to specify how to break ties when choosing the nearest float, which you should do with roundTiesToEven

[16:15:30.0000] <Bakkot>
though I doubt it affects anything here

[16:19:45.0000] <Bakkot>
also to be clear 'float' means double

[08:29:52.0000] <shu>
Bakkot: i didn't get anything back very definitive

[08:30:18.0000] <shu>
the two concrete suggestions were: 1) reformulate the question for float32 and enumerate all float32 values

[08:30:28.0000] <shu>
though i don't actually understand that because the input domain is strings

[08:30:34.0000] <shu>
i don't see how enumerating all float32s would help

[08:30:44.0000] <shu>
and if we found an answer for float32, hope that it generalizes to float64?

[08:31:03.0000] <shu>
and 2) read clinger's classic paper :)

[09:25:48.0000] <Bakkot>
alas

[09:25:55.0000] <Bakkot>
I guess I will attempt to figure it out on my own

[09:26:02.0000] <Bakkot>
I convinced myself of it for integers

[09:27:17.0000] <Bakkot>
specifically, the difference between the round-down and the round-up cases is always going to be strictly less than the difference between the two floats of that magnitude, so the intermediate one (produce by not rounding) must end up as one of those two

[09:27:29.0000] <Bakkot>
I suspect that generalizes to fractions, but I need to check

[09:27:36.0000] <Bakkot>
and I also need to look at subnormals as a distinct case

[09:28:04.0000] <Bakkot>
also, shu, you were the one who suggested the "It is considered an editorial error" phrasing in my lookahead PR; do you have thoughts on https://github.com/tc39/ecma262/pull/2254#issuecomment-747451174?

[09:55:39.0000] <shu>
reading

[11:15:23.0000] <shu>
fwiw i asked Raymond Toy, who knows a lot about ieee754 apparently

[11:15:30.0000] <shu>
or who has a reputation of knowing

[11:15:52.0000] <shu>
he didn't really know, but did get concerned that we still haven't yet tightened up the Math special functions to have a lower bound on accuracy :)

[11:17:07.0000] <ljharb>
shu: i believe the last consensus we have on that is "we want to do it, but none of us are expert enough to know how to specify it"

[11:17:27.0000] <ljharb>
shu: so if this person's an expert in it and wants to see it happen, they can be the change :-p

[11:17:37.0000] <shu>
raymond's suggestion in the past was to pin it to the accuracy provided by fdlibm

[11:17:50.0000] <shu>
which i don't love but who knows, maybe the best we can do

[11:23:55.0000] <shu>
Bakkot: oh, one thing Raymond said was that's particularly relevant here is

[11:24:04.0000] <shu>
we know this rounding languages goes to 1st edition, which is 1997

[11:24:26.0000] <shu>
Clinger's classic paper https://www.researchgate.net/publication/2295884_How_to_Read_Floating_Point_Numbers_Accurately is 1999

[11:25:07.0000] <shu>
it also seems true that the implementation reality is divorced from what the spec says about rounding

[11:25:27.0000] <shu>
so raymond's suggestion is, can we just change the spec to reference Clinger's algorithm instead

[11:25:49.0000] <shu>
instead of spend time disambiguating some inferior solution the 1st edition folks wrote up

[11:31:50.0000] <Bakkot>
I am not all that excited about trying to make a normative change here, tbh

[11:32:16.0000] <shu>
fair enough

[11:32:29.0000] <shu>
none of us wants to do the empirical work of figuring out what implementations do


2020-12-22
[18:57:37.0000] <Bakkot>
shu did you want to stamp https://github.com/tc39/ecma262/pull/2254 ?

[18:58:04.0000] <Bakkot>
since you did not like claudepache's suggestion and michael and I are neutral on it I'm not intending to make any changes to it

[19:08:48.0000] <shu>
i am on pto this week

[19:09:26.0000] <shu>
feel free to merge it, i don’t recall anything other than nits last i looked (when i replied)

[19:10:20.0000] <shu>
can’t easily stamp right now


2020-12-26
[21:17:52.0000] <ljharb>
Bakkot: is https://github.com/tc39/ecma262/pull/2045 ready to merge once those edits are mage?

[21:17:54.0000] <ljharb>
*made

[21:19:08.0000] <Bakkot>
think so!

[21:23:50.0000] <ljharb>
cool, should i make them and land it, or should i wait for jack

[21:25:25.0000] <Bakkot>
I have no preference

[21:25:38.0000] <ljharb>
k, i can land it then

[21:27:13.0000] <ljharb>
oh actually it's got a merge conflict, i'll let jack do it then

