2020-06-01
[08:35:15.0000] <michaelficarra>
are we going to have just one of us present the 262 slides?

[08:35:21.0000] <michaelficarra>
if so, who?

[08:36:03.0000] <shu>
jordan likes doing them but i imagine we'll pipe up for a particular item that we can better present than he

[08:37:32.0000] <Bakkot>
yeah, I want to talk about the linter part

[08:37:47.0000] <Bakkot>
michael maybe you want to do the SDO restructuring part? or I could do it

[08:37:58.0000] <Bakkot>
huh, jordan's offline, that's weird

[08:38:16.0000] <michaelficarra>
feel free to take anything off my hands

[08:39:24.0000] <shu>
let's see, is there anything i should present...

[08:40:43.0000] <shu>
doesn't look like anything for me to say

[08:41:25.0000] <Bakkot>
I'll talk about the sdo restructuring

[08:53:04.0000] <shu>
oh i guess the host/implementation stuff maybe should've been on here as an "upcoming" item, but i made a whole agenda item for it because of the contentiousness

[08:53:28.0000] <ljharb>
def needs an agenda item

[08:53:34.0000] <ljharb>
shu: want me to mention that item after kevin is done?

[08:53:50.0000] <shu>
ljharb: i can mention it real quick

[08:53:57.0000] <ljharb>
kk

[09:49:41.0000] <michaelficarra>
> 	•	spec editor signoff (https://github.com/michaelficarra, since the other editors are a champion or stage 2 reviewers)

[09:49:41.0000] <michaelficarra>
	•	

[09:49:47.0000] <michaelficarra>
lol dammit

[09:50:10.0000] <ljharb>
:-p

[09:50:20.0000] <ljharb>
you have been voluntold

[09:50:57.0000] <ljharb>
i'm planning to ask for stage 3 in the next meeting tho, so if all three of yall could stamp it whenever you have time that'd be great :-)

[09:51:34.0000] <michaelficarra>
I'll review when I see it on the agenda

[09:51:43.0000] <ljharb>
ha, fair


2020-06-03
[11:20:40.0000] <ljharb>
shu: this slide right here says "this proposal shall be withdrawn", that's where i saw it (when we discussed it previously)

[11:21:07.0000] <shu>
ljharb: i'm missing context, sorry i must've forgotten a recent convo

[11:21:19.0000] <ljharb>
re this current proposal, no worries if you don't recall


2020-06-05
[15:32:57.0000] <Bakkot>
did we ever fix or track the `for(async of` issue Waldemar raised?

[15:37:44.0000] <ljharb>
p sure not fix

[15:37:52.0000] <ljharb>
i think there may be an issue in 262 but not certain

[15:38:13.0000] <Bakkot>
can't track down the issue

[15:38:17.0000] <Bakkot>
guess I'll open a new one

[15:41:37.0000] <ljharb>
sgtm

[15:44:25.0000] <Bakkot>
https://github.com/tc39/ecma262/issues/2034


2020-06-08
[20:33:04.0000] <Bakkot>
shu finally got time to review https://github.com/tc39/ecma262/pull/1984

[20:33:13.0000] <Bakkot>
I like the approach in general but had some wordsmithing stuff

[11:29:22.0000] <shu>
Bakkot: cool, thanks for the heads up, will address before editor call


2020-06-09
[21:54:29.0000] <ljharb>
as soon as i get test262 tests up for `#foo in obj` i'm going to add it to the agenda for stage 3 for july; it'd be great to have yalls review on it asap


2020-06-10
[22:15:50.0000] <Bakkot>
ljharb https://github.com/tc39/ecma262/pull/1781 is good to merge I think

[22:16:22.0000] <Bakkot>
https://github.com/tc39/ecma262/pull/1912 has a typo but is otherwise good

[22:16:45.0000] <ljharb>
ok, i was waiting for one more on 1781, want to actually stamp it?

[22:16:50.0000] <ljharb>
nbd ofc

[22:18:39.0000] <Bakkot>
I approved it subsequent to the most recent change

[22:18:48.0000] <ljharb>
ah k

[22:19:08.0000] <ljharb>
oh right, that was where i requested like 1 second after you stamped

[22:19:11.0000] <ljharb>
cool, landing

[22:19:15.0000] <Bakkot>
yup yup

[22:19:18.0000] <ljharb>
(once tests pass)


2020-06-11
[18:13:49.0000] <shu>
how do BigInt objects work in the spec?

[18:14:17.0000] <shu>
i was reviewing the PR that adds %BigInt.prototype%

[18:14:48.0000] <shu>
that seems fine, but the only mention i could find of how BigInt objects are created is https://tc39.es/ecma262/#sec-toobject

[18:15:23.0000] <shu>
the other primitive objects referenced there have explicit steps that hook up the various primitive constructors' prototypes

[18:15:25.0000] <shu>
BigInts don't

[21:52:37.0000] <ljharb>
I’d expect the same machinery numbers have

[21:52:56.0000] <ljharb>
it very well might be an oversight tho, that was a very large PR


2020-06-12
[18:44:32.0000] <Bakkot>
ljharb: re: having the lint and build jobs separate, is there an easy way to tell travis that if step 1 fails it should still run step 2 before failing the job?

[18:44:47.0000] <Bakkot>
specifically, I don't want it to pass just because step 2 passed

[18:45:11.0000] <Bakkot>
(I ask because you seem to have experience with travis, but I can probably google it if you don't know off  the top of your head)

[18:52:21.0000] <ljharb>
if both can run in parallel, then both have to succeed for the overarching job to succeed, and both will run even if one fails

[18:52:49.0000] <ljharb>
if it’s a serial stage tho then i think it won’t run the second if the first fails (I’m less familiar with stages)

[19:07:13.0000] <Bakkot>
hmmm

[19:07:22.0000] <Bakkot>
how attached are you to having different stages for build vs upload

[19:07:31.0000] <Bakkot>
because this would be trivial as a single line bash script or wahtever

[19:07:43.0000] <Bakkot>
just hard to coordinate across stages

[19:20:23.0000] <ljharb>
at the moment not attached at all

[19:20:30.0000] <ljharb>
actually hmm

[19:20:35.0000] <ljharb>
so, there's like three phases

[19:20:39.0000] <ljharb>
in phase 1 (now) it doesn't matter

[19:20:53.0000] <ljharb>
in phase 3 (full checks API integration) it doesn't matter, because the linting errors will be shown inline, so it's as clear as it can get

[19:21:17.0000] <ljharb>
somewhere in the middle i'm worried it might be less confusing to have a separate PR status for linting failures

[19:21:29.0000] <ljharb>
but maybe, now that the checks API is a thing we can integrate with, that's not useful to optimize for

[19:21:32.0000] <ljharb>
(phase 2, i mean)

[19:22:50.0000] <Bakkot>
yeah, this would be easy to undo

[19:23:14.0000] <Bakkot>
basically what I am thinking is, if the build-with-lint fails, rerun it without linting and then run the upload job and then fail the travis job

[19:23:37.0000] <Bakkot>
this involves redoing some work, but only when the build fails, so I don't really care

[19:23:39.0000] <ljharb>
hm

[19:23:44.0000] <ljharb>
i mean we don't even need the fallback

[19:23:52.0000] <ljharb>
we could run two jobs: build+upload, and build+lint

[19:23:54.0000] <ljharb>
in parallel

[19:24:02.0000] <ljharb>
it'd be repeated work but that's travis's resources

[19:24:06.0000] <Bakkot>
true

[19:24:27.0000] <Bakkot>
either approach works for me

[19:25:32.0000] <Bakkot>
I do not know enough about how to make travis do things in parallel to try implementing the second approach myself, though

[19:27:04.0000] <ljharb>
i can try to make that change if you throw me a branch name

[19:27:53.0000] <ljharb>
right now there's one "include" job with 2 stages, but i can add a second "include" job with one stage that also lints (or with the second stage as a noop)

[19:28:31.0000] <Bakkot>
I don't have a branch around already, if that's what you're asking for

[19:28:56.0000] <Bakkot>
"errors-what-errors" would make a fine name if you are asking for help with naming

[19:30:23.0000] <ljharb>
oh lol ok

[19:30:46.0000] <Bakkot>
this was all theoretical; I haven't done any work yet

[19:30:54.0000] <ljharb>
yeah i can do that later tonight. add `--lint-spec` in the linting job?

[19:46:18.0000] <Bakkot>
`build-master` currently does `--lint-spec`; my plan was to add a new `build-without-lint` that was just a copy-paste of that job without that flag passed

[19:46:45.0000] <Bakkot>
I'd normally do something fancy with shell variables, but this needs to work on windows I guess

[19:55:41.0000] <ljharb>
gotcha, that should be fine

[19:55:47.0000] <ljharb>
i'll shoot you a travis link later tonight

[20:00:11.0000] <Bakkot>
ok actually I have now read some docs

[20:00:15.0000] <Bakkot>
I suspect I can make this work myself

[20:02:23.0000] <Bakkot>
yeah ok that was totally trivial, assuming this works: https://github.com/tc39/ecma262/pull/2044

[20:03:07.0000] <Bakkot>
(commit intentionally adds a linting error to the spec to confirm the upload still works, which will of course need to be fixed before merging)

[20:03:26.0000] <ljharb>
will take a look in an hour or three

[20:03:56.0000] <Bakkot>
yeah, that seems to have worked, cool

[20:06:20.0000] <Bakkot>
no rush on reviewing

[20:44:40.0000] <Bakkot>
also, apparently github's implementation for inline linting errors basically does not work for OSS projects

[20:45:04.0000] <Bakkot>
in particular, if I understand correctly, it cannot be made to add inline linting errors to PRs which come from forks

[22:13:50.0000] <ljharb>
i think we'd need a Github App, created by an org admin

[22:13:55.0000] <ljharb>
oh, right

[22:14:17.0000] <ljharb>
so in order to have it work on PRs from forks we'd need to do the same thing as the Begin deploy preview; ie, make a separate microservice to do the API calls

[22:14:32.0000] <ljharb>
we have free infra there for life, we just have to write the code :-/

[22:55:32.0000] <ljharb>
i'm going to go ahead and land 2044, minus the linting error

[22:57:54.0000] <Bakkot>
sgtm

[22:58:57.0000] <ljharb>
tweaked the scripts also so there's only one ecmarkup invocation

[23:01:47.0000] <Bakkot>
if that does what it looks like, great

[23:02:13.0000] <Bakkot>
that solution did not occur to me

[23:03:55.0000] <ljharb>
i have spent an unhealthy amount of time on both travis configs and npm run-scripts ¯\_(ツ)_/¯

[23:04:30.0000] <Bakkot>
for all of our internal stuff anything nontrivial I commit as a script to the directory

[23:04:48.0000] <Bakkot>
because messing with the scripts gets painful fast


2020-06-15
[12:27:31.0000] <Bakkot>
ljharb: ping on https://github.com/tc39/ecma262/pull/2022

[12:30:35.0000] <ljharb>
Bakkot: i'm waiting on jmdyck to get back to me about squashing it down

[12:30:49.0000] <ljharb>
since he's seemed to prefer doing that himself recently

[12:31:08.0000] <Bakkot>
ljharb did you mean to leave a comment asking about that?

[12:31:28.0000] <Bakkot>
because I don't think it's obvious from the PR that you are expecting jmdyck to take action here

[12:32:16.0000] <ljharb>
no, i PMmed him on irc

[12:32:19.0000] <ljharb>
i can leave a comment tho if you want

[12:36:55.0000] <Bakkot>
ah, ok

[12:37:16.0000] <Bakkot>
fwiw in this case I don't think it makes sense to squash; they're pretty unrelated fixes

[12:37:52.0000] <ljharb>
hm, ok - they're all super tiny so it didn't seem useful to keep them separate

[12:38:03.0000] <ljharb>
but i can jsut land all 4 commits too

[13:18:32.0000] <Bakkot>
I am fan of having unrelated changes in discrete commits, as a rule, no matter how small

[13:19:07.0000] <Bakkot>
don't care enough that I'd manually separate them if someone made a PR where they were all in a single commit, but if someone has already gone to that work I'm happy to accept it

[13:19:55.0000] <ljharb>
philosophically i agree with you

[14:31:39.0000] <Bakkot>
I am suddenly unable to publish ecmarkup

[14:31:48.0000] <Bakkot>
npm ERR! 404 Not Found - PUT https://registry.npmjs.org/ecmarkup - Not found

[14:31:48.0000] <Bakkot>
npm ERR! 404  'ecmarkup⊙3' is not in the npm registry.

[14:31:48.0000] <Bakkot>
npm ERR! 404 You should bug the author to publish it (or use the name yourself!)

[14:32:09.0000] <Bakkot>
this has apparently been a known issue for five years? https://github.com/npm/npm/issues/7932

[14:32:19.0000] <Bakkot>
anyway if someone else can pull, build, publish, I'd appreciate it

[14:32:27.0000] <ljharb>
hm

[14:32:37.0000] <Bakkot>
oh, I think it's a new issue though: https://github.com/npm/cli/issues/1433

[14:32:37.0000] <ljharb>
there were 2 issues filed on npm in the last 2 hours similar to this

[14:32:40.0000] <Bakkot>
yeah

[14:32:41.0000] <ljharb>
so they might be having registry problems yeah

[14:32:45.0000] <ljharb>
i can try tho

[14:32:56.0000] <Bakkot>
I  was looking at the wrong issue trackers

[14:33:14.0000] <Bakkot>
apparently npm.community is closed despite being listed as the public issue tracker on https://www.npmjs.com/support

[14:33:17.0000] <Bakkot>
get your shit together, npm

[14:33:44.0000] <ljharb>
yeah npm.community was a whole cluster

[14:34:05.0000] <ljharb>
it's good they shut it down and switched back to github; it's embarrassing it's been well over a year and all the inbound links aren't updated

[14:34:16.0000] <ljharb>
ftr i'm getting the same publishing error

[14:34:27.0000] <Bakkot>
fun times all around

[14:36:55.0000] <Bakkot>
(It looks like it was only closed in November, btw, which despite all evidence to the contrary was less than a year ago)

[14:37:30.0000] <Bakkot>
(I too intuitively believe "november 2019" was a minimum of three years ago)

[14:40:11.0000] <ljharb>
you have me there

[14:41:47.0000] <ljharb>
with some napkin math, in "hours at home" time it's been 6 months since february

[14:41:59.0000] <ljharb>
and that's only counting work time

[15:03:24.0000] <shu>
OTOH we have some words from oscar wilde

[15:03:27.0000] <shu>
https://www.gutenberg.org/files/921/921-h/921-h.htm

[15:03:36.0000] <shu>
". . . Suffering is one very long moment.  We cannot divide it by seasons. "

[16:06:59.0000] <shu>
hm

[16:07:09.0000] <shu>
question about the "if <arg> is present" language

[16:07:13.0000] <shu>
consider https://tc39.es/ecma262/#sec-%asyncfromsynciteratorprototype%.next

[16:07:27.0000] <shu>
IteratorNext, in step 5, checks for whether _value_ is present or not

[16:07:47.0000] <shu>
the intention seems to be that %AsyncFromSyncIteratorPrototype%.next() perfectly forwards the presence of _value_

[16:08:08.0000] <shu>
but this doesn't seem clear to me, since in step 5 the call just looks like IteratorNext(syncIteratorRecord, value)

[16:08:18.0000] <shu>
that is, in step 5 it just looks like it's actually passing value

[16:12:57.0000] <Bakkot>
shu: see https://github.com/tc39/ecma262/pull/1776

[16:13:33.0000] <shu>
ah i forgot about this

[16:13:38.0000] <shu>
thanks for the reminder

[16:13:42.0000] <ljharb>
i'm waiting on browsers telling me it's web compat

[16:14:03.0000] <shu>
i guess wrappers don't actually come up all that often

[16:14:04.0000] <ljharb>
altho actually nvm i got that

[16:14:13.0000] <ljharb>
all i need is one shipping implementation

[16:14:28.0000] <shu>
i was musing if we should have some kind of "perfect forwarding" notion in the spec

[16:16:03.0000] <shu>
ljharb: i see both JSC and SM forwarding the absence

[16:16:08.0000] <ljharb>
oh hm - this is already shipped in firefo

[16:16:09.0000] <ljharb>
x

[16:16:18.0000] <shu>
though JSC releases so rarely i don't know

[16:16:22.0000] <ljharb>
my safari 12 doesn't

[16:16:30.0000] <shu>
my local JSC shell does

[16:16:41.0000] <ljharb>
i'm not on the latest mac os tho, so i'm not sure if i have latest safari

[16:18:48.0000] <shu>
i... can't imagine that this will be web incompatible

[16:18:55.0000] <shu>
guess i'll just implement it

[16:20:21.0000] <ljharb>
yay

[16:27:02.0000] <ljharb>
k, https://github.com/tc39/ecma262/pull/1776 now is ready for reviews :-)


2020-06-16
[17:19:15.0000] <ljharb>
Bakkot: https://twitter.com/npmstatus/status/1272682471679619072?s=21

[17:25:14.0000] <Bakkot>
ljharb: yeah, already did the publish (as a prerequisite for the PR bumping it in ecma-262)

[17:49:46.0000] <ljharb>
Oh right, duh


2020-06-17
[14:34:49.0000] <michaelficarra>
ljharb: you coming to the editor call?

[14:35:01.0000] <ljharb>
oh snap, yes brt

[14:35:10.0000] <michaelficarra>
Kevin can't make it, and without you we don't have quorum

[16:07:04.0000] <shu>
bakkot_: ljharb: i forgot to bring up this during the call

[16:07:26.0000] <shu>
i see a lot of activity around me trying to update terminology in codebases to be more respectful

[16:07:33.0000] <shu>
we could undertake a similar effort for the spec

[16:08:14.0000] <shu>
a quick scan shows that we already avoided most of the terminology that's been highlighted elsewhere

[16:08:39.0000] <shu>
e.g. we don't have any instances of blacklist/whitelist

[16:08:54.0000] <shu>
since we opted for the tc39ism of "unscopables"

[16:09:40.0000] <shu>
one word that we do use that may warrant thinking about is Native, like NativeError and NativeFunction

[16:10:00.0000] <shu>
your feelings of the connotation of native aside, it is a not a clear term to begin with

[16:28:33.0000] <ljharb>
totally unrelated to the push for inclusivity, i would actually prefer getting rid of that entire NativeError magic in the spec anyways

[16:28:45.0000] <ljharb>
not in favor of repeated boilerplate, but something else i haven't thought of yet

[16:28:57.0000] <ljharb>
re the intrinsics, bounce 2 is https://github.com/heycam/webidl/issues/897

[16:34:36.0000] <shu>
ljharb: yeah, i can see it being independently motivated and a good thing to do regardless

[16:35:13.0000] <ljharb>
altho i haven't heard any complaints about the word "native", it'll be a nice thing to avoid being on the wrong side of, if such a movement were to crop up

[16:36:42.0000] <shu>
i think it is just pretty confusing

[16:36:51.0000] <shu>
every VM i've worked on have a very confusing notion of "native" too

[16:37:00.0000] <shu>
SpiderMonkey had two contradictory ones!

[16:37:09.0000] <shu>
native objects were JS objects, while native functions were C++ functions


2020-06-18
[17:01:31.0000] <bakkot_>
ideally I'd like a name which suggests it is a thing-to-be-replaced

[17:01:37.0000] <bakkot_>
even "FooError" would be better than "NativeError"

[21:12:51.0000] <ljharb>
agreed, but i'd rather find a way to avoid the name magic

[21:12:56.0000] <ljharb>
we have 7 error types, let's have 7 error types


2020-06-19
[23:04:55.0000] <ljharb>
shu: can you help me understand why https://ecma-international.org/ecma-262/8.0/#sec-issharedarraybuffer and https://ecma-international.org/ecma-262/8.0/#sec-isdetachedbuffer don't return false if the object lacks the internal slot (they assert instead)? also if the slot being null always means it's detached, why doesn't IsSharedArrayBuffer call into IsDetachedArrayBuffer?

[23:06:49.0000] <Bakkot>
they're only ever passed things with the slot; why would you have logic for what to do when the slot isn't there?

[23:06:53.0000] <Bakkot>
dead code is bad

[23:11:20.0000] <ljharb>
typically the predicate abstract operations are written to match their names ¯\_(ツ)_/¯

[23:12:46.0000] <Bakkot>
I don't think being named `Is` implies the function's domain is all possible values, rather than some subset of them

[23:13:01.0000] <Bakkot>
`IsStringPrefix` only deals with strings, `IsExtensible` only deals with objects

[23:13:27.0000] <Bakkot>
IsStrictReference only deals with references

[23:13:38.0000] <Bakkot>
(also the other Is*Reference methods)

[23:13:41.0000] <ljharb>
hm, ok, i'm convinced

[23:45:43.0000] <shu>
SABs cannot be detached

[23:50:38.0000] <shu>
i guess there’s no reason to not call IsDetachedArrayBuffer

[23:50:55.0000] <shu>
as it is written now it’s kind of roundabout

[23:51:28.0000] <shu>
it’d be clearer to check if the data is a Shared Data Block and assert otherwise it is null or a Data Block, instead of the other way around

[23:51:36.0000] <ljharb>
seems like it could be even simpler - "if it's a shared data block, return true. else return false"

[08:00:05.0000] <shu>
yeah

[08:00:32.0000] <shu>
that is what it is with extra asserts

[09:19:50.0000] <ljharb>
gotcha. what's the benefit of ensuring, in the predicate, that the slot doesn't contain the wrong type of value?

[10:23:18.0000] <shu>
the same value as asserts anywhere else

[10:24:02.0000] <shu>
clarity of intent, mainly

[10:24:26.0000] <shu>
concretely in this case, the asserts are exhaustive of all possible values in that slot

[10:24:55.0000] <shu>
so when any of the type changes, the hope would be that it shows up in a grep, i guess

[10:25:52.0000] <shu>
this is maybe more important practically for AB and SAB code in that a bug of omission here would be security critical if naively translated to an implementation

[10:25:56.0000] <shu>
but that's reaching a bit

[10:27:35.0000] <shu>
the exhaustiveness is good for ABs because binary data is an area where we wanna be sure, at a glance, that semantics are _really_ bounded

[11:54:55.0000] <ljharb>
shu: soooo isn't this the same as my assertions that [[Capability]] holds a PromiseCapability?

[11:55:10.0000] <ljharb>
for clarity of intent?


2020-06-20
[18:19:31.0000] <shu>
ljharb: not exactly, because there’s more than one type (shared data block vs data block

[18:19:49.0000] <shu>
and moreover, a “null”

[18:22:22.0000] <shu>
it’s a judgment to be sure, but asserting exhaustiveness is redundant verbosity if there’s one possible type of value

[18:22:28.0000] <shu>
imo

[18:38:27.0000] <ljharb>
in the capability case it can sometimes be undefined or a PromiseCapability

[21:03:31.0000] <shu>
fair enough—that’s a slightly bigger state space

[21:05:46.0000] <shu>
i doubt we can make a hard and fast rule, but >= 2 types with nullability seems like a good rule of thumb

[21:08:20.0000] <ljharb>
I’m totally fine with that.


2020-06-23
[11:51:30.0000] <ljharb>
i notice that https://tc39.es/ecma262/#sec-bigintbitwiseop takes two bigints, but passes them into modulo, which is a math function. is this something that caio's PR should be handling? (i haven't looked at it yet)

[14:24:33.0000] <shu>
bakkot_: how do we write grammar that has both flags *and* an _opt?

[14:24:45.0000] <shu>
`Prod[+In]?` does not work apparently

[14:25:25.0000] <shu>
ooh i see an example of this in 262, let's see how that's done

[14:27:56.0000] <shu>
nevermind, that works fine, there was a stray space


2020-06-24
[13:03:08.0000] <shu>
review ping for https://github.com/tc39/ecma262/pull/1984, would be nice to merge soon

[14:19:00.0000] <bakkot_>
will put it on the top of my stack

[15:33:39.0000] <ljharb>
https://github.com/tc39/ecma262/pull/2050 and https://github.com/tc39/ecma262/pull/2057 and https://github.com/tc39/ecma262/pull/2061 could use some reviews as well

[15:34:06.0000] <ljharb>
also i put https://github.com/tc39/proposal-private-fields-in-in on the agenda for stage 3, so it'd be great to get reviews of it

[15:50:33.0000] <shu>
bakkot_: i am not sure that verbiage prohibits concurrent executing agents that happen to share objects

[15:52:40.0000] <shu>
we can restrict random bit flips, but i think there is something to be said about actually restricting sharing. concurrent agents that all happen to be faithfully executing the steps of the spec seems to be allowed by the proposed restriction, right?

[15:55:03.0000] <shu>
outside of shared data blocks, i think we need to actually say that the closures of objects in different agents are disjoint


2020-06-25
[19:26:24.0000] <shu>
all: got an initial draft of the host-vs-impls rewrite up

[19:26:58.0000] <shu>
turns out there're not *that* many places that HTML further defines: https://github.com/tc39/ecma262/pull/1951/files#diff-3540caefa502006d8a33cb1385720803R43417


2020-06-26
[11:41:14.0000] <shu>
i'm having trouble with long line diffs on the GH ui as well.

[11:41:30.0000] <shu>
ljharb: is your review on https://github.com/tc39/ecma262/pull/1951 s/an host/a host/g?

[11:41:58.0000] <ljharb>
yep

[11:42:04.0000] <ljharb>
i should have stopped at once and commented that, sorry

[11:42:11.0000] <ljharb>
*at one

[11:43:33.0000] <shu>
no worries

[11:43:44.0000] <shu>
sometimes GH highlights the one character that's changed, sometimes it doesn't

[11:43:49.0000] <shu>
i guess it gives up if the line length is too long

[11:44:00.0000] <ljharb>
that's probably accurate

[12:06:00.0000] <shu>
what is title?

[12:06:04.0000] <shu>
<emu-xref title>

[12:08:49.0000] <ljharb>
it seems like it's implicit actually when omitted

[12:09:14.0000] <ljharb>
`<emu-xref href="#sec-unary-minus-operator" title></emu-xref>` etc is in the spec

[12:09:35.0000] <ljharb>
i think at one time it was required for an empty xref to have a display name, but maybe it was changed to be on by default

[12:13:31.0000] <shu>
yeah i've never typed it explicitly

[12:16:19.0000] <ljharb>
i guess omit it, we should probably remove the existing ones

[12:50:19.0000] <bakkot_>
https://tc39.es/ecmarkup/#emu-xref

[12:50:24.0000] <bakkot_>
"title: Optional: If present, xref will be filled in with the referenced clause's title. Otherwise, the clause's section number is used."

[13:14:27.0000] <ljharb>
aha, thanks

[13:14:53.0000] <ljharb>
then i think my suggestion was right :-)

[13:52:13.0000] <shu>
https://twitter.com/jfbastien/status/928131144234790912

[13:52:14.0000] <shu>
hmmmm

[13:55:58.0000] <ljharb>
lol

[14:00:19.0000] <shu>
we are really behind the curve here


2020-06-28
[20:16:22.0000] <bakkot_>
shu: another round of comments on https://github.com/tc39/ecma262/pull/1984

[20:16:26.0000] <bakkot_>
it's getting there for sure

[20:34:43.0000] <ljharb>
shu: be great to get another review on https://github.com/tc39/ecma262/pull/1776 so i can land it :-)

[21:06:30.0000] <bakkot_>
ljharb: https://github.com/tc39/ecma262/pull/2060 doesn't really need a third reviewer, IMO

[21:06:38.0000] <bakkot_>
(I just approved it)

[21:50:00.0000] <shu>
ljharb: bakkot_: will put at head of queue monday

[21:50:08.0000] <shu>
please ping me again if i don’t get to it monday

[21:50:23.0000] <bakkot_>
√

[21:50:48.0000] <shu>
i implemented 1776 so pretty sure it’s good, but i don’t want to lgtm it now until i do another once over

[22:16:35.0000] <ljharb>
thanks, will do

[22:17:01.0000] <ljharb>
bakkot_: i saw you stamped it, thanks :-)


2020-06-29
[15:25:03.0000] <shu>
bakkot_: ping

[15:27:15.0000] <bakkot_>
shu pong

[15:27:31.0000] <shu>
bakkot_: fixing up the promise invariants thing, had the following musing

[15:28:06.0000] <shu>
i'm changing the "propagates active script/module" thing to also be a property of executions at a particular time

[15:28:46.0000] <shu>
the musing is, the second bulletpoint as i have now which imposes some additional structure on the execution context stack *could* be rephrased as an assert inside GetActiveScriptOrModule() itself

[15:28:56.0000] <shu>
now, our position is that asserts are strictly editorial

[15:29:32.0000] <shu>
does that cease to be so if i write something like "Perform host-defined steps s.t. GetActiveScriptOrModule() is _script_"?

[15:30:22.0000] <shu>
i.e. it's clear that the intent is that the host does steps that would not trip the assert

[15:30:25.0000] <bakkot_>
hmm, intersting

[15:30:28.0000] <shu>
but should it be spelled out

[15:31:14.0000] <bakkot_>
my answer is that one ought not speak of the result of `GetActiveScriptOrModule()` without first ensuring that the asserts it contains are not violated

[15:31:52.0000] <bakkot_>
(so, no, asserts are still editorial)

[15:32:49.0000] <bakkot_>
if you add an assert and the host could trip it, you should say "such that [the conditions of the assert hold] and GetActiveScriptOrModule() is _script_`"

[15:32:57.0000] <bakkot_>
so that it is meaningful to talk about `GetActiveScriptOrModule`

[15:33:10.0000] <shu>
yes, that's the current approach in the PR

[15:33:30.0000] <shu>
well, and that the assert isn't even spelled out in the AO itself

[15:34:16.0000] <shu>
i'll leave it as is then

[15:58:00.0000] <shu>
what are the exact rules of dfn autolinking

[15:59:02.0000] <bakkot_>
uhh somewhat complicated

[15:59:40.0000] <bakkot_>
it must be a literal match, on word boundaries, and in a different section

[16:00:05.0000] <bakkot_>
there's casing rules but I don't know them

[16:04:15.0000] <shu>
i see

[16:13:56.0000] <shu>
ljharb: where are the uses of https://tc39.es/ecma262/#sec-%asyncfromsynciteratorprototype%.throw within ecma262?

[16:14:33.0000] <shu>
ljharb: #1776 has the note on throw: "In this specification, _value_ is always provided, but is left optional for consistency with <emu-xref title href="#sec-%asyncfromsynciteratorprototype%.return"></emu-xref>"

[16:17:20.0000] <ljharb>
shu: like in `YieldExpression: yield* AssignmentExpression`, it does `Call(throw, iterator, « received.[[Value]] »).`

[16:18:07.0000] <shu>
i see

[16:18:22.0000] <ljharb>
actually that might be the only place

[16:18:36.0000] <shu>
i'm not sure if that note is necessary -- it's a user-visible prototype function

[16:18:52.0000] <shu>
justifying why it has a certain shape based on all uses within ecma262 itself is odd

[16:19:28.0000] <ljharb>
i agree, but i added it in response to kevin's comment https://github.com/tc39/ecma262/pull/1776#discussion_r440506745

[16:20:18.0000] <shu>
oh i missed that first part, the entire object is unobservable?

[16:20:34.0000] <shu>
because these adapters can't ever escape outside of the syntax parts that need them?

[16:20:41.0000] <shu>
then this note is justified

[16:20:44.0000] <ljharb>
yes

[16:20:50.0000] <shu>
thanks for the link

[16:20:54.0000] <ljharb>
np

[16:21:07.0000] <ljharb>
i'll unresolve that thread so it's visible for future readers

[16:21:14.0000] <shu>
lgtm

[16:21:23.0000] <ljharb>
woot, landing

[16:39:30.0000] <shu>
what is that squirrel detective!

[16:39:49.0000] <bakkot_>
https://www.quora.com/On-GitHub-what-is-the-significance-of-the-Ship-It-squirrel

[16:40:06.0000] <bakkot_>
(the immediate answer is, it's what you get when you type `:shipit:` in a PR)

[16:40:55.0000] <shu>
i have never seen that before

[16:40:58.0000] <shu>
i guess i don't use GH enough

