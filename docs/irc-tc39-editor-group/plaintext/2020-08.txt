2020-08-01
[19:00:10.0000] <Bakkot>
ljharb: the thing where the commit history gets lost because you force-push it down to one commit makes it much harder to track down how something was introduced to the spec

[19:00:20.0000] <Bakkot>
would like to register my continued dislike of this tradeoff

[19:05:34.0000] <Bakkot>
sorry, I guess I should say, specifically the mixing of the commit history with the PR comments as a single linear flow

[19:54:25.0000] <ljharb>
for which PR?

[20:05:01.0000] <Bakkot>
https://github.com/tc39/ecma262/pull/2030 in this case

[20:16:00.0000] <ljharb>
So that one was just two commits - you can jump to https://github.com/tc39/ecma262/commit/4886f4c6a362b48d23bffbc6d05f35e4803c5ecb from my “force push” timeline entry, and click “parent” until you hit master

[20:16:20.0000] <Bakkot>
yeah, I can see the commit histrry, and I can see the PR history, as independent streams

[20:16:28.0000] <Bakkot>
however, I lose the mixed history as a single linear flow

[20:17:21.0000] <Bakkot>
contrast, say, https://github.com/tc39/ecmarkup/pull/234, where you can see at what point michael reviewed, and what the subsequent commits were


2020-08-05
[14:38:59.0000] <ljharb>
turns out https://github.com/tc39/ecma262/pulls?q=label%3A%22editor+call%22 works but https://github.com/tc39/ecma262/pulls?q=label%3A%22editor+call%22 doesn't

[15:11:02.0000] <ljharb>
https://github.com/tc39/ecma262/pull/2126


2020-08-07
[16:04:32.0000] <ljharb>
shu: planning to land https://github.com/tc39/ecma262/pull/1984 tonight unless anyone has any further comments; lmk if i should hold off


2020-08-08
[17:47:15.0000] <shu>
ljharb: thanks, nothing from my side


2020-08-09
[14:00:42.0000] <Bakkot>
ljharb https://github.com/tc39/ecma262/pull/2092 is a straightforward bug; I don't think we need to get more than two stamps

[14:15:01.0000] <ljharb>
you were the third ¯\_(ツ)_/¯ but k, noted

[14:21:40.0000] <Bakkot>
s/need/needed/

[14:21:50.0000] <Bakkot>
shu: reviewed https://github.com/tc39/ecma262/pull/2086

[14:52:50.0000] <Bakkot>
ljharb https://github.com/tc39/ecma262/pull/2065/files#r467632962

[15:01:42.0000] <Bakkot>
ljharb if you're up for reviewing https://github.com/tc39/ecma262/pull/2015 it needs one more stamp

[15:02:14.0000] <Bakkot>
it's a straight refactor; you don't need to do any reasoning about atomics

[15:03:08.0000] <Bakkot>
also shu or ljharb https://github.com/tc39/ecma262/pull/2014 needs one more stamp

[15:03:26.0000] <Bakkot>
(and also a rebase but I'm going to wait on that)

[15:47:10.0000] <Bakkot>
ljharb ping on https://github.com/tc39/ecma262/pull/1228 also

[15:47:42.0000] <Bakkot>
(It feels weird to stamp since I wrote the text which is currently there, but you can consider me the author for purposes of counting to three)

[15:49:24.0000] <Bakkot>
also https://github.com/tc39/ecma262/pull/1402

[16:05:38.0000] <Bakkot>
shu: commented on https://github.com/tc39/ecma262/pull/1908


2020-08-10
[22:02:56.0000] <ljharb>
k, taking a look at these

[22:04:47.0000] <ljharb>
Bakkot: ok so to be clear, would it be ok if i updated 835 to be https://github.com/tc39/ecma262/commit/8e56f87a235130a319a8adcc4b99bd4acc336aef on top of 2015, and then 2015 could land and 835 be closed, assuming we don't want to take that third commit?

[22:05:15.0000] <ljharb>
also do you want those two commits on 2105 kept separate, or, ok to combine

[23:34:00.0000] <Bakkot>
uhhh I would prefer you not mess with 835, but that's mostly aesthetic

[23:34:25.0000] <ljharb>
i suppose i could leave it, but if it's just your PR plus the commit you dropped, what's the downside?

[23:34:28.0000] <Bakkot>
commits in 2015 are probably separate

[23:35:13.0000] <ljharb>
k

[23:35:39.0000] <Bakkot>
the downside is the same downside there always is: you render relevant information more difficult to access and make discussions nonsensical

[23:36:07.0000] <Bakkot>
e.g. 2015 talks about "two of the three commits in that PR; the third, 8e56f87 [...]" and that will not make sense if you change what's in that PR

[23:36:19.0000] <ljharb>
i mean, it'd end up with 3 commits in 835, no?

[23:36:28.0000] <Bakkot>
I don't like rewriting what's in a PR unless there's a good reason for it

[23:36:29.0000] <ljharb>
just 2 of them would end up on master and the third wouldn't

[23:36:52.0000] <Bakkot>
but three different commits than what's currently there, and the reference would no longer make sense

[23:37:09.0000] <ljharb>
i mean i'd update the commit sha

[23:37:24.0000] <Bakkot>
please do not edit my comments, what!

[23:37:28.0000] <ljharb>
lol, ok

[23:37:35.0000] <ljharb>
i edit people

[23:37:37.0000] <Bakkot>
uh

[23:37:38.0000] <Bakkot>
don't do that

[23:37:40.0000] <Bakkot>
wtf

[23:37:41.0000] <ljharb>
*people's comments on repos i manage all the time

[23:37:47.0000] <Bakkot>
please never, ever do that

[23:37:49.0000] <ljharb>
ok

[23:38:00.0000] <Bakkot>
mine or anyone else's

[23:38:05.0000] <ljharb>
i mean, making a link that my force push broke point to the thing it intended to point to? what's wrong with that

[23:38:09.0000] <ljharb>
github shows the edit history anyways

[23:38:21.0000] <Bakkot>
you are editing _my words_

[23:38:25.0000] <Bakkot>
they are not yours to edit

[23:38:37.0000] <ljharb>
that's not github's nor the entire open source industry's position, but ok

[23:38:38.0000] <ljharb>
noted

[23:38:48.0000] <Bakkot>
that is the position of much of the open source industry

[23:39:03.0000] <ljharb>
anyone with triage+ access on any repo can edit anyone's words at any time, and often does

[23:39:21.0000] <Bakkot>
strongly dispute "often"

[23:39:23.0000] <ljharb>
github started showing the edit history to combat those who edit maliciously

[23:39:43.0000] <ljharb>
i mean, we can compare our anecdotal experiences, but obv that's not going to convince either

[23:39:51.0000] <ljharb>
i'll certainly not edit your comments given your position

[23:40:00.0000] <Bakkot>
don't edit anyone else's either unless we talk about it first

[23:40:03.0000] <ljharb>
but alternatively i could just suggest you edit your comment to point to the updated sha

[23:40:04.0000] <Bakkot>
I feel very, very strongly about this

[23:40:45.0000] <ljharb>
to sidestep the whole editing question, your comment would still end up being correct and sensical that way

[23:40:58.0000] <Bakkot>
yeah I just would prefer we not have to edit things

[23:41:07.0000] <Bakkot>
things are already in a coherent state

[23:41:49.0000] <Bakkot>
PRs should be a historical record

[23:41:51.0000] <ljharb>
they'd end up in a coherent state also

[23:42:07.0000] <ljharb>
that's not what anything in git is. git has no concept of history.

[23:42:15.0000] <Bakkot>
PRs are not a part of git

[23:42:15.0000] <ljharb>
there are no historical records, only changelogs.

[23:42:34.0000] <ljharb>
sure, they're a part of github. that's allowed to be overwritten, because they're based on the mental models of git.

[23:42:39.0000] <Bakkot>
disagree

[23:42:42.0000] <ljharb>
which does not contain any concept of "history"

[23:42:45.0000] <Bakkot>
they are not based on the mental models of git

[23:42:48.0000] <ljharb>
lol k

[23:42:53.0000] <Bakkot>
they are, specifically, an augment to git

[23:43:02.0000] <ljharb>
i'm happy to get one of the founders of github to comment on that if it would convince you

[23:43:08.0000] <ljharb>
otherwise obv we won't agree

[23:43:20.0000] <Bakkot>
That would not convince me, no.

[23:43:24.0000] <ljharb>
no part of git or github or any git-connected world has a concept of history ¯\_(ツ)_/¯

[23:43:24.0000] <Bakkot>
PR are the social process by which the changes in the git rep happen

[23:43:27.0000] <ljharb>
sure

[23:43:47.0000] <ljharb>
and certainly on any given repo, socially, the group can agree on anything they want

[23:43:48.0000] <Bakkot>
they are a historical record of how that happens unless someone like you comes in and blows that away

[23:44:11.0000] <ljharb>
sure, that's also true

[23:44:18.0000] <ljharb>
the question is whether that history is ever valuable

[23:44:22.0000] <Bakkot>
yes?

[23:44:23.0000] <Bakkot>
yes.

[23:44:32.0000] <Bakkot>
like, what, of _course_ it is valuable.

[23:44:44.0000] <ljharb>
between 835 and 2015, the only thing that's valuable is the diff between them

[23:44:50.0000] <Bakkot>
knowing why and how changes happened is incredibly valuable

[23:44:56.0000] <ljharb>
2015 has to be rebased to be landed; if 835 isn't rebased, the diff is nonsensical;

[23:45:19.0000] <ljharb>
sensible later review requires everything or nothing be rebased

[23:45:32.0000] <ljharb>
and "merge conflicts" requires that *something* be rebased

[23:45:36.0000] <ljharb>
(in general terms)

[23:45:46.0000] <Bakkot>
no it does not, you can just go look at the commits in each branch and understand the authorial intent in each case

[23:46:05.0000] <ljharb>
in some cases sure, *you* can

[23:46:16.0000] <ljharb>
but not in all cases, and certainly not everybody

[23:46:50.0000] <Bakkot>
it is strictly easier to understand what's going on if you can see how things happened at the time instead of some later person's rewrite of what happened

[23:47:47.0000] <ljharb>
i'm sure there's some cases where that's true. but my experience shows me that the majority of the time, it's not

[23:48:24.0000] <Bakkot>
my experience differs, and also my preference aligns with what the entire rest of the ecosystem does

[23:48:31.0000] <ljharb>
yeah that's totally untrue

[23:48:41.0000] <ljharb>
unless you've done some survey i'm unaware of

[23:48:53.0000] <ljharb>
anyways it sounds like you want to leave 835 untouched, which is fine, altho if anba had responded properly itd have been rebased anyways

[23:49:15.0000] <ljharb>
i don't think anybody will care about the history of "anba didn't respond to his github notifications" ¯\_(ツ)_/¯

[23:49:26.0000] <Bakkot>
why not? it's what happened

[23:49:34.0000] <ljharb>
sure but why does that matter

[23:49:46.0000] <Bakkot>
because it's... what... happened?

[23:49:48.0000] <ljharb>
1, 5, 10, 50 years from, now why would anybody care about that

[23:49:59.0000] <ljharb>
it's git. history isn't important, only the sum of atomic changes is important.

[23:50:08.0000] <ljharb>
we're not using svn for a reason

[23:50:11.0000] <Bakkot>
because they are interested in understanding the social process by which a change occurred in the way it did?

[23:50:41.0000] <Bakkot>
again, PRs are not git

[23:50:55.0000] <ljharb>
sure, they're just a for-profit company that might not even be around in a decade

[23:51:08.0000] <ljharb>
something that's not even properly back-up-able

[23:51:47.0000] <ljharb>
whereas the git repo and the PR refs fetched from it are easily preservable forever

[23:51:58.0000] <Bakkot>
yes but those things are missing almost all of the context

[23:52:30.0000] <ljharb>
right, any context not in git is likely to be irretrievably lost anyways

[23:53:33.0000] <Bakkot>
eventually the universe will succumb to entropy and there will be no meaningful information anywhere

[23:53:51.0000] <Bakkot>
that does not mean that destroying context right now is harmless

[23:54:08.0000] <ljharb>
lol sure, the slope is slippery

[23:54:51.0000] <Bakkot>
the slope is not slippery, that's the point, things which are useful now should be preserved even though the unvierse will eventually end and indeed even if github might go under in a decade

[23:55:16.0000] <ljharb>
i guess we disagree on them being useful at all

[23:55:34.0000] <ljharb>
when i later come across the closed 835, all i'll care about is "what part of this didn't land"

[23:55:44.0000] <Bakkot>
I am perfectly happy to believe that you never find them useful, I would just like you to believe me that I find them extremely useful

[23:55:45.0000] <ljharb>
not rebasing it makes it harder for me to figure that out

[23:56:01.0000] <ljharb>
right but it's not "zero for me" vs "useful to you"

[23:56:14.0000] <ljharb>
it's "worse for me" vs "better for you", which is why it's not an objective resolution

[23:56:20.0000] <Bakkot>
sure

[23:56:36.0000] <ljharb>
if i didn't care either way i'd certainly pick the form you preferred

[23:56:36.0000] <Bakkot>
again, you are literally the only person I have ever encountered with this preference

[23:58:48.0000] <ljharb>
there's not many people that manage as many repos as i do

[00:00:22.0000] <Bakkot>
that seems like a non sequitur

[00:01:12.0000] <Bakkot>
like, isn't that kind of the point? there's a whole bunch of people in the world who are participating in the OS ecosystem, and of all of them, you and you alone are in this unique place where you care about this particular thing

[00:01:49.0000] <ljharb>
that you've talked to, sure

[00:03:18.0000] <ljharb>
the PR ref thing i think i originally found from https://gist.github.com/piscisaureus/3342247 fwiw

[00:04:34.0000] <Bakkot>
have you ever encountered anyone who shared your preference for destroying the history in every PR upon merging?

[00:04:48.0000] <Bakkot>
I have certainly never seen another JS repo not maintained by you which did that

[10:33:06.0000] <ljharb>
not since github added squashmerge/rebasemerge, because everyone i've encountered simply doesn't care what's left on the PR at all and never looks at it again. but prior to that, yes, i didn't invent this preference, i adopted it :-)

[10:47:17.0000] <Bakkot>
"everyone i've encountered simply doesn't care what's left on the PR at all and never looks at it again" - how do you know that? that sounds pretty fantastical to me - maintainers look at closed PRs all the time, in my experience

[10:50:55.0000] <Bakkot>
specifically, they look at closed PRs to understand the social process by which a change was added, which is easier to do if the PR correctly capture the history of that process

[10:51:40.0000] <Bakkot>
and yes things were different before the was squashmerge etc, but the difference was that you had to squash the branch to get the right changes on master, whereas now that is no longer the case

[10:53:35.0000] <ljharb>
what i mean is, i never heard any complaints prior to squashmerge/rebasemerge about the PR lacking the original commits

[10:54:00.0000] <ljharb>
and i've never seen any mention of the motivation being "so you can leave them on the PR", only so they didn't have to use the command line to get the commits to be squashed/rebsaed

[10:54:02.0000] <ljharb>
*rebased

[10:54:24.0000] <ljharb>
i doubt even the github engineers that implemented it were thinking of that; i think this was just the easiest way to implement it.

[10:58:08.0000] <Bakkot>
no one complained prior to github supporting doing it right because it was obviously necessary given the constraints of github

[10:59:02.0000] <ljharb>
that is certainly a theory

[10:59:17.0000] <ljharb>
i would assume most people would have just used merge commits if that mattered tho

[10:59:39.0000] <Bakkot>
merge commits are widely understood to be terrible

[10:59:42.0000] <ljharb>
true

[10:59:51.0000] <ljharb>
either way, github shows force pushes now, so you can still get to the original commit chain

[11:00:01.0000] <ljharb>
and each commit will have the comments on it

[11:00:23.0000] <Bakkot>
yes, but you can't easily see its relationship to the linear discussion in the PR

[14:20:11.0000] <shu>
Bakkot: on 2014, the naming scheme is that UTF16 as a modifier doesn't apply past the immediate noun, given jmdyck's comments?

[14:20:58.0000] <Bakkot>
yeah, that was the idea

[14:21:20.0000] <shu>
then lgtm

[14:21:40.0000] <Bakkot>
it's not really a "scheme", 'cause that only applies to `UTF16SurrogatePairToCodePoint`

[14:21:49.0000] <Bakkot>
and I guess in that case you can read it either way and it's ok

[14:22:24.0000] <Bakkot>
either "convert this UTF16 surrogate pair to a code point" or "convert this surrogate pair to a code point according to UTF16 rules" would be correct

[14:22:45.0000] <shu>
for #1908, i'd really *really* like some "can call arbitrary user code" visual aid on AO calls

[14:22:53.0000] <shu>
might end up being a lot of places though

[14:23:07.0000] <shu>
but that's just JS i guess

[14:23:28.0000] <shu>
that's kinda like our exception correctness

[14:23:35.0000] <Bakkot>
yeah, that'd be good

[14:23:46.0000] <Bakkot>
with 545 (the metadata PR) we'd have a good place to put it

[14:25:42.0000] <shu>
woo

[14:25:49.0000] <Bakkot>
and it would be straightforward to build a "highlight AO calls which can call JS" button on top of that

[14:25:58.0000] <Bakkot>
probably wouldn't want it on by default, just have a toggle in the UI somewhere or something

[14:26:04.0000] <shu>
yeah

[14:26:16.0000] <shu>
next up, nouser a la noexcept

[16:57:46.0000] <ljharb>
Bakkot: on https://github.com/tc39/ecma262/pull/2014, do you want all those commits to say separate? i don't care either way, just lmk

[16:58:00.0000] <Bakkot>
ljharb one commit I think

[16:58:41.0000] <ljharb>
cool


2020-08-11
[15:10:54.0000] <ljharb>
going to do a quick `s/oldid=/oldids=` directly to master, if that's ok (re jmdyck's comment in #tc39)

[15:11:10.0000] <Bakkot>
wfm

[15:11:29.0000] <Bakkot>
(assuming it's a push rather than a force-push, of course)

[15:11:35.0000] <ljharb>
oh yes definitely

[15:12:05.0000] <ljharb>
(force pushing to master would invalidate the pr ref i'm so concerned about preserving, so i *definitely* wouldn't be doing that)

[15:13:50.0000] <Bakkot>
yup, figured as much, just making sure

[15:55:27.0000] <Bakkot>
ljharb I'm not sure that https://github.com/tc39/ecma262/pull/2086 should be marked as normative

[15:55:30.0000] <Bakkot>
rather than layering

[15:55:32.0000] <Bakkot>
shu, thoughts?

[15:56:12.0000] <ljharb>
whoops, hm

[15:56:25.0000] <ljharb>
i had already hit the push command

[15:56:50.0000] <Bakkot>
eh, whatever then

[15:57:05.0000] <ljharb>
good call tho, i'll try to pay attention to that in the future

[15:57:19.0000] <shu>
i think there can be both normative layering and editorial layering changes

[15:57:39.0000] <shu>
this one added a new point where browser hosts could insert new observable behavior where there was none before

[15:57:50.0000] <shu>
some layering changes are formalizing already allowed observable behavior via hooks

[15:58:58.0000] <Bakkot>
shu specifically I am wondering about the naming of the commit

[15:59:05.0000] <Bakkot>
I would have gone with "Layering: [etc]", personally

[15:59:09.0000] <shu>
Bakkot: in that case then layering is more appropriate, i agree

[16:06:59.0000] <ljharb>
that was my bad then

[16:07:50.0000] <Bakkot>
not a big deal


2020-08-12
[16:11:21.0000] <shu>
i am going to take my own advice and get off irc until the next plenary, i'll join for editor calls

[16:11:42.0000] <shu>
ping me on telegram or email syg⊙gc if you need some urgent

[16:15:49.0000] <Bakkot>
shu how do you feel about twitter dms

[16:16:07.0000] <shu>
literally any dm on any platform is fine


2020-08-18
[23:10:39.0000] <Bakkot>
ljharb when pushing new commits to a branch prior to merging, please add them as distinct commits so it is possible to review them

[23:10:42.0000] <Bakkot>
this is re: https://github.com/tc39/ecma262/pull/2021

[23:11:07.0000] <ljharb>
the "view changes" button didn't work?

[23:11:08.0000] <Bakkot>
sorry, "prior to merging" meaning, during the review process rather than immediately before landing

[23:11:16.0000] <ljharb>
sure, understood

[23:11:41.0000] <Bakkot>
which "view changes" button?

[23:11:43.0000] <ljharb>
the only diff from when you last looked at it is adopting all of michael's suggestions, fwiw

[23:11:58.0000] <Bakkot>
sure, it's just that I would like to be able to review that myself

[23:12:05.0000] <ljharb>
there's a "view changes" button next to a bunch of the events; that's supposed to show you the diff since that point

[23:12:13.0000] <ljharb>
it certainly may not work every time tho

[23:12:14.0000] <Bakkot>
ah, those break when you force-push

[23:12:28.0000] <ljharb>
ah k

[23:12:46.0000] <ljharb>
i've found they work most of the time, but they definitely break sometimes

[23:12:58.0000] <ljharb>
but sure, i'll wait to do that until immediately prior to merging

[23:14:19.0000] <Bakkot>
thank


2020-08-21
[18:04:30.0000] <Bakkot>
ljharb: https://github.com/tc39/ecma262/pull/2112 needs another stamp but is otherwise ready

[18:16:45.0000] <Bakkot>
ljharb https://github.com/tc39/ecma262/pull/2029 is also good to go

[20:39:31.0000] <ljharb>
awesome, will get to those tonight

[20:48:34.0000] <Bakkot>
https://github.com/tc39/ecma262/pull/2143 too

[22:04:33.0000] <ljharb>
i'll wait for shu on 2112

[22:06:09.0000] <ljharb>
Bakkot: on 2143, do you want 2, or 3 commits for this one?

[22:12:57.0000] <Bakkot>
3 is good

[22:13:12.0000] <Bakkot>
probably whitespace first, then the bump, then the unrelated times symbol one

[22:13:25.0000] <Bakkot>
(the last of which ought to have been its own PR, strictly speaking, I was just too lazy)

[22:19:45.0000] <ljharb>
sgtm

[14:01:53.0000] <ljharb>
looks like we have the goahead to update https://github.com/tc39/ecma262/pull/2043

[14:58:37.0000] <Bakkot>
will try to get to it this weekend


2020-08-22
[16:09:09.0000] <Bakkot>
PTAL: https://github.com/tc39/ecma262/pull/2151


2020-08-23
[09:59:30.0000] <ljharb>
i thought we were going to take over the original PR

[09:59:38.0000] <ljharb>
(ie, the same thing that would have happened if rick had done the work)

[11:03:27.0000] <Bakkot>
like I said in the PR message, I opened it as its own PR so that reviewers can more easily see the differences between the two

[13:15:46.0000] <Bakkot>
ljharb https://github.com/tc39/ecma262/pull/2139 appears to be good to land

[13:16:32.0000] <Bakkot>
though I guess maybe we should wait on shu for https://github.com/tc39/ecma262/pull/2139#discussion_r474273479

[13:43:07.0000] <ljharb>
ah ok, i won't land it yet then

[13:43:20.0000] <ljharb>
it seems like his only issue was resolved, but there's no rush

[13:44:23.0000] <Bakkot>
I agree, I just want to check that he agrees too

[13:45:44.0000] <Bakkot>
ljharb btw, you know eslint: is there seriously not a built-in rule which would forbid stuff like `let a = b[c++]` and `while (x = y) {}` and so on?

[13:46:13.0000] <ljharb>
i mean, i think the common advice has been "never use ++ or -- in any context" for a very long time

[13:46:19.0000] <ljharb>
it was one of the earliest crockford rules in jslint

[13:46:37.0000] <ljharb>
so altho it seems like a reasonable subset of the plusplus rule, i assume nobody's asked for it

[13:46:47.0000] <Bakkot>
even then, that would only be half of it

[13:47:00.0000] <ljharb>
for the assignment, what doesn't https://eslint.org/docs/rules/no-cond-assign cover?

[13:47:25.0000] <ljharb>
i suppose it might not cover non-conditional expression positions?

[13:47:34.0000] <Bakkot>
I am meaning to refer to all kinds of assignments occurring in expression position

[13:47:40.0000] <Bakkot>
there are many expression positions

[13:47:43.0000] <ljharb>
indeed

[13:47:50.0000] <ljharb>
seems like a good rule to exist, i'd use it

[13:48:08.0000] <ljharb>
my assumption for that one is that very few people actually misuse assignment in that fashion enough for it to have come up, but ¯\_(ツ)_/¯

[13:48:38.0000] <ljharb>
for the latter, at least, since it can catch bugs and isn't "style", seems worth an issue to eslint

[13:49:23.0000] <Bakkot>
I no longer have any faith that issue suggestions to eslint will get read, but I guess I might as well

[13:51:28.0000] <Bakkot>
oh, yeah, they formalized that: https://eslint.org/blog/2020/05/changes-to-rules-policies

[13:51:42.0000] <Bakkot>
time to start my own repo of rules, I guess

[13:51:48.0000] <ljharb>
they formalized no new style rules

[13:51:57.0000] <ljharb>
but the assignment in expression position isn't style

[13:52:13.0000] <Bakkot>
that's not what that says

[13:52:19.0000] <Bakkot>
"New rules are limited - we will only accept new rules when they relate to new ECMAScript features that reached stage 4 in the preceding 12 months."

[13:52:22.0000] <ljharb>
oh, hm

[13:52:32.0000] <ljharb>
yeah, snap

[13:52:48.0000] <ljharb>
it's a terrible policy (like their stage 4 one) because it's still way too painful to get rules adopted when they're not in core :-(

[13:52:58.0000] <Bakkot>
I guess we did technically add a new assignment form in the last 12 months!

[13:53:04.0000] <Bakkot>
yeah...

[13:53:14.0000] <Bakkot>
need a well-accepted place for community rules

[13:53:24.0000] <Bakkot>
*well known

[13:54:02.0000] <ljharb>
more than that tho; eslint needs an ergonomic way to consume them

[13:54:06.0000] <ljharb>
the current way is peer dep hell

[13:54:35.0000] <Bakkot>
really? I have always just added the package as a dev-dep then added the plugin and the rule to the config

[13:54:47.0000] <ljharb>
sorry i meant, in a shared config

[13:54:51.0000] <ljharb>
to use them directly, you're right

[13:55:07.0000] <ljharb>
but the real value is packaging up multiple plugins so people only have to use your wrapper

[13:55:43.0000] <Bakkot>
does making it a direct dependency of your wrapper not do the right thing?

[13:56:09.0000] <ljharb>
nope

[13:56:15.0000] <Bakkot>
:(

[13:56:22.0000] <ljharb>
because of possible duplication if the app depends on it both directly and via the shared config

[13:56:34.0000] <ljharb>
which is why the airbnb config has `install-peerdeps` instructions in its readme

[13:56:49.0000] <Bakkot>
duplication being a problem because... bloat in node_modules, or some other reason?

[13:57:05.0000] <ljharb>
not bloat, because "the reason npm is great", which is that you *can* have duplicates in the tree :-)

[13:57:35.0000] <ljharb>
any plugin system tho requires singleton-like behavior, which can only be truly solved with peer deps

[13:58:45.0000] <Bakkot>
ah, the problem being that the plugin ends up added twice?

[13:58:54.0000] <Bakkot>
which breaks eslint somehow?

[13:59:25.0000] <ljharb>
it would break because the config is shared, so if you had a rule config that required 1.1, and 1.0 ended up being used by eslint, it'd crash

[13:59:43.0000] <ljharb>
or if the versions crossed majors, you might silently have different behavior than you intended

[14:00:50.0000] <Bakkot>
crossing majors seems like an unresolvable issue, but I wonder if the non-major conflicts could be resolved by eslint just choosing the later version if you try to add a plugin twice

[14:01:41.0000] <ljharb>
eslint would have to be able to find both, and `require` is contextual

[14:01:42.0000] <Bakkot>
though, actually, real fix is to stop requiring singleton-like behavior

[14:01:47.0000] <ljharb>
right

[14:02:00.0000] <ljharb>
eslint could solve it by making shared configs prefix rules

[14:02:06.0000] <ljharb>
ie, `airbnb/import/order`

[14:02:13.0000] <Bakkot>
it shouldn't really be a problem to resolve plugins relative to the config file which names them

[14:02:18.0000] <ljharb>
and then you could configure `import/order` *or* `airbnb/import/order`

[14:02:28.0000] <ljharb>
i don't really understand why eslint hasn't solved this tbh

[14:02:48.0000] <ljharb>
there is an RFC that i think was merged that'll be out in some v7 minor that they claim solves it, but i won't know for sure til i set up the airbnb config with it

[14:03:18.0000] <Bakkot>
oh, neat

[14:04:15.0000] <Bakkot>
I assume the reason they haven't solved it is because it's a bunch of work

[14:04:18.0000] <Bakkot>
that's usually the reason

[14:04:44.0000] <ljharb>
that seems likely


2020-08-24
[14:29:10.0000] <shu>
i will be on IRC for rest of the day today, i have 3pm-6pm blocked for reviews i've lagged on


2020-08-25
[22:02:32.0000] <ljharb>
anyone have thoughts on squashing vs preserving https://github.com/tc39/ecma262/pull/2112/commits ? yall reviewed it so you have the context

[22:11:52.0000] <Bakkot>
preserve; cf https://github.com/tc39/ecma262/pull/2112#issuecomment-677980985

[22:19:28.0000] <ljharb>
ah great, thanks

[22:21:12.0000] <ljharb>
should i wait for shu's questions to be answered before landing?

[22:21:58.0000] <ljharb>
also, https://github.com/tc39/ecma262/pull/2065 is now rebased and ready for final review

[22:24:24.0000] <Bakkot>
I guess wait a bit on that question, yeah

[22:24:41.0000] <Bakkot>
have 2065 in my todo

[22:25:18.0000] <ljharb>
ack on both, ty


2020-08-26
[15:03:00.0000] <ljharb>
things that need review: https://github.com/tc39/ecma262/pull/2110 , https://github.com/tc39/ecma262/pull/2065

[16:22:48.0000] <ljharb>
i pulled https://github.com/tc39/ecma262/pull/2155 out of https://github.com/tc39/ecma262/pull/2154; it's a good change anyways, and it'd be good to get it in so the normative PR is easier to review


2020-08-27
[15:18:21.0000] <ljharb>
someone was confused about AsyncFunction and thought it was supposed to be a global: https://github.com/kangax/compat-table/issues/1670#issuecomment-682121112 thoughts on a more explicit link between "a constructor" and "whether it's a global"?

[15:34:44.0000] <Bakkot>
For the constructors which aren't globals, I think adding a bullet in their introduction which says "is not available as a property of the global object" or something might make sense, sure

[15:35:03.0000] <Bakkot>
in place of the usual "is the initial value of the "X" property of the global object." bullet

[15:36:25.0000] <ljharb>
makes sense to me too

[15:36:31.0000] <ljharb>
i'll make a PR


2020-08-30
[20:02:16.0000] <Bakkot>
ljharb deploy previews seem to be broken: https://github.com/tc39/ecma262/pull/2159

[20:03:34.0000] <ljharb>
hm, k taking a look

[20:07:12.0000] <ljharb>
preview's fixed, looking into it with Begin

[20:07:34.0000] <Bakkot>
sweet, thanks

[20:18:02.0000] <ljharb>
looks like a transient github api error on the serverside of the begin app. a rerun fixed it, so ¯\_(ツ)_/¯

[20:21:15.0000] <Bakkot>
hurray, computers

[20:21:59.0000] <Bakkot>
for being digital objects, the day-to-day experience of computers sure does involve an awful lot of obnoxious nondeterminism

