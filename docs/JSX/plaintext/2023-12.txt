2023-12-01
[18:01:55.0381] <David Brito>
> <@mhofman:matrix.org> I am ok exploring the problems of representing tree structures, but I am very skeptical it should take the shape of new syntax. Tagged templates litterals were added to the language to solve exactly this kind of problem, and the fact they have been used exactly for this same use case by other frameworks show JSX is not the only viable approach.

I think that tagged templates for representing tree structures comes at the cost of runtime parsing and processing of the template. Unlike jsx which is already structured on the desired way as an object structure.

[18:11:46.0967] <Mathieu Hofman>
In both cases it's text that has to be parsed. If the tag is built-in, I don't see the difference.

[18:19:05.0251] <David Brito>
> <@mhofman:matrix.org> In both cases it's text that has to be parsed. If the tag is built-in, I don't see the difference.

Would it then be some kind of special case of tagged templates with it's own specific call semantics?

[18:23:32.0501] <Mathieu Hofman>
No, why? The tag function gets passed an array of strings, and has to parse those according to the DSL it implements. If the function is natively implemented, the parsing can be as efficient as parsing the string of JS source code. Also the string array is immutable with unique identity, so the parsing can be cached.

[18:27:45.0117] <David Brito>
I see your what you mean.

[18:37:46.0387] <Jack Works>
https://facebook.github.io/jsx/#sec-why-not-template-literals

well, the problem I think tagged template literal have, is exactly stated in the JSX doc

[18:40:33.0798] <snek>
if tagged templates make me write ${Component} everywhere i'm never going to use them over a babel transform

[18:51:21.0520] <Mathieu Hofman>
On the other hand, the special semantics of tag names in JSX are weird at best. From what I recall, some html tags do not require scoped references for tags by relying on the custom element registry. Of course making that generic enough yet ergonomic is the hard problem 

[18:56:56.0253] <Anthony Bullard>
The rule is simple:  tag names that start with capital letters are references to a function/component, all others are rendered by the pragma

[18:57:26.0517] <Anthony Bullard>
Pragma being createElement in React, and h in many others 

[18:58:12.0400] <David Brito>
Mathieu Hofman How  do you propose to handle type checking of props/attributes with the tagged template approach?

[18:58:17.0161] <Anthony Bullard>
Though that would seem to be strange new semantics to add to the JavaScript language itself

[19:02:42.0920] <David Brito>
> <@anthonybullard:matrix.org> The rule is simple:  tag names that start with capital letters are references to a function/component, all others are rendered by the pragma

Tag names with a member expression are also rendered by the pragma.

Eg.
```
<animated.div>
```

[19:02:46.0162] <snek>
i think i am still of the opinion that js should not standardize any html/xml syntax stuff. as cool as it would be to write directly in browsers, i just don't think its worth it (and it would be weird to exist outside of browsers?)

[19:13:55.0867] <Anthony Bullard>
I have no super strong opinions, but I also write tons of little apps (and one large one) using h functions(and some helpers)

[19:14:14.0539] <Anthony Bullard>
I find it nice to create my own HTML DSL

[19:23:25.0608] <Mathieu Hofman>
> <@davbrito:matrix.org> Mathieu Hofman How  do you propose to handle type checking of props/attributes with the tagged template approach?

Type checking and other syntax highlighting are technically possible today with tagged templates, as long as the tooling can infer the parser needed for the tagged template content.

[22:27:18.0535] <ljharb>
understanding DSLs are a fundamental blocker because it's not the default

[22:27:36.0228] <ljharb>
if you have to *do* something for your editor and tools to understand your DSL, it's a nonstarter

[22:27:42.0621] <ljharb>
 * if you have to _do_ something for your editor and tools to understand your DSL, it's mostly a nonstarter

[22:28:07.0405] <ljharb>
jsx wasn't all that viable until everyone just started defaulting to enabling/supporting it

