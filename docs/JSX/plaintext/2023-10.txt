2023-10-21
[03:14:07.0035] <eemeli>
I wonder if "just" adding JSX to the syntax would cause any actual conflicts with the existing use of `<` for less-than comparisons? According to its [spec](https://facebook.github.io/jsx/), the JSXElement and JSXFragment are added as new PrimaryExpressions.

[08:38:29.0663] <Mathieu Hofman>
I would love to understand why JSX would need to be added as syntax, and why a built-in template tag litteral is not sufficient to support these use cases. I do realize some cases would require a little more verbose escaping, and that IDEs would need to get better at understanding DSLs in template tags, but that doesn't seem like a fundamental blocker to me. There have been a lot of discussions on this topic in ES Discourse, and I still don't understand the requirement for new syntax besides familiarity with JSX.

[13:41:07.0408] <eemeli>
Besides any other reasons, one aspect of JSX that I observe is that it works really well as a suburb for representing an XML-ish structure in JS. Since its release almost a decade ago, I think the only real change to the syntax has been the addition of fragments. Rather than inspiring alternatives, it's been adopted pretty much directly by a number of other front-end frameworks.

So given that a tagged template literal is in many ways easier to implement than something like JSX, I would point at the popularity of JSX and the rarity of comparable template literal solutions as a really strong indicator of the strength of the syntax.

[13:41:24.0698] <eemeli>
* Besides any other reasons, one aspect of JSX that I observe is that it works really well as a syntax for representing an XML-ish structure in JS. Since its release almost a decade ago, I think the only real change to the syntax has been the addition of fragments. Rather than inspiring alternatives, it's been adopted pretty much directly by a number of other front-end frameworks.

So given that a tagged template literal is in many ways easier to implement than something like JSX, I would point at the popularity of JSX and the rarity of comparable template literal solutions as a really strong indicator of the strength of the syntax.

