2023-10-21
[03:14:07.0035] <eemeli>
I wonder if "just" adding JSX to the syntax would cause any actual conflicts with the existing use of `<` for less-than comparisons? According to its [spec](https://facebook.github.io/jsx/), the JSXElement and JSXFragment are added as new PrimaryExpressions.

[08:38:29.0663] <Mathieu Hofman>
I would love to understand why JSX would need to be added as syntax, and why a built-in template tag litteral is not sufficient to support these use cases. I do realize some cases would require a little more verbose escaping, and that IDEs would need to get better at understanding DSLs in template tags, but that doesn't seem like a fundamental blocker to me. There have been a lot of discussions on this topic in ES Discourse, and I still don't understand the requirement for new syntax besides familiarity with JSX.

[13:41:07.0408] <eemeli>
Besides any other reasons, one aspect of JSX that I observe is that it works really well as a suburb for representing an XML-ish structure in JS. Since its release almost a decade ago, I think the only real change to the syntax has been the addition of fragments. Rather than inspiring alternatives, it's been adopted pretty much directly by a number of other front-end frameworks.

So given that a tagged template literal is in many ways easier to implement than something like JSX, I would point at the popularity of JSX and the rarity of comparable template literal solutions as a really strong indicator of the strength of the syntax.

[13:41:24.0698] <eemeli>
* Besides any other reasons, one aspect of JSX that I observe is that it works really well as a syntax for representing an XML-ish structure in JS. Since its release almost a decade ago, I think the only real change to the syntax has been the addition of fragments. Rather than inspiring alternatives, it's been adopted pretty much directly by a number of other front-end frameworks.

So given that a tagged template literal is in many ways easier to implement than something like JSX, I would point at the popularity of JSX and the rarity of comparable template literal solutions as a really strong indicator of the strength of the syntax.

[14:43:10.0018] <Rob Palmer>
Whilst I agree that the popularity is a very strong signal of the need for some solution, there's been significant interest in evolving JSX with a new version for a long time, so I suspect what we have today is not the final form.


2023-10-22
[20:14:32.0384] <Jack Works>
> <@mhofman:matrix.org> I would love to understand why JSX would need to be added as syntax, and why a built-in template tag litteral is not sufficient to support these use cases. I do realize some cases would require a little more verbose escaping, and that IDEs would need to get better at understanding DSLs in template tags, but that doesn't seem like a fundamental blocker to me. There have been a lot of discussions on this topic in ES Discourse, and I still don't understand the requirement for new syntax besides familiarity with JSX.

basically, same reason as type annotation. they want to unfork the language, so let's do the same with JSX. why template literal does not work is documented in JSX spec https://facebook.github.io/jsx/#sec-why-not-template-literals

[20:34:56.0956] <Mathieu Hofman>
Right that argument is the one about verbosity of escaping that I mention. I would say the example given in that spec is biased because JSX has somewhat magical treatment of tags. I am not convinced that tag names should be dynamically bound to the surrounding context, which means they may not need to be escaped in the first place. And the note about syntax highlighting does not refer to an intrinsic limitation of tagged templates, tools could parse tagged templates litterals.

[23:08:31.0891] <snek>
i think the only thing i would want to fix about jsx is `className`

[23:08:43.0615] <snek>
everything else is perfect

[00:23:53.0943] <Ashley Claymore>
That's React not JSX ðŸ˜‰

[00:25:09.0061] <Ashley Claymore>
https://preactjs.com/guide/v10/differences-to-react/#raw-html-attributeproperty-names

[00:33:50.0767] <Ashley Claymore>
> <@robpalme:matrix.org> Whilst I agree that the popularity is a very strong signal of the need for some solution, there's been significant interest in evolving JSX with a new version for a long time, so I suspect what we have today is not the final form.

adding to this ^^
https://github.com/facebook/jsx/issues/65

