2025-02-02
[02:56:29.0670] <Aapo Alasuutari>
> <@ljharb:matrix.org> i mean it’s a data property, not sure that’s where I’d draw the silly line personally

I mean, it's an unconfigurable, unenumerable but writable property that mostly assumes you're only writing integers into it, but allows you to write anything whatsoever into it and then observe that write going through. If you were to define RegExp today, I would assume you'd use a setter kind of system that coerces to integer during writing instead of like it works now where coercion happens when the value gets used.

I definitely think it's silly :)

[09:25:43.0250] <bakkot>
if we were to define it today there would not be a mutable `lastIndex` property on regexps because that is an insane thing to exist

[09:26:50.0875] <bakkot>
but given the current design, the coercion (or at least validation) needs to happen on read rather than on write because you can make your own totally bespoke regexps and the machinery has to be tolerant of your bespoke regexp having a non-integral `lastIndex`

[09:30:19.0803] <Andreu Botella>
surely everyone agrees that thenables and matchables are a great idea


2025-02-04
[15:37:26.0629] <Meghan Denny>
what is the "order of property creation" for function objects

[15:37:45.0946] <Meghan Denny>
* what is the property creation order of property creation for functions

[15:37:55.0189] <Meghan Denny>
* what is the property creation order for functions

[15:40:52.0773] <Meghan Denny>
`Object.keys(Object.getOwnPropertyDescriptors(function () {}))` yields something different in chrome than it does firefox and safari 


2025-02-05
[16:20:02.0671] <iain>
Note that SpiderMonkey lazily initializes properties on functions, so you will get a different result if you access a property before enumerating them (eg `function foo() {}; foo.name; Object.keys(...` will give `["name", "prototype", "length"]`)

[18:41:54.0553] <ljharb>
sounds like we have potentially 3 different behaviors then, and we should make some test262 tests

[18:45:14.0780] <ljharb>
in chrome/node i get `[ 'length', 'name', 'arguments', 'caller', 'prototype' ]` and in safari `["length", "name", "prototype"]` and firefox `[ "prototype", "length", "name" ]`, which is 2 orders, and 2 sets of names, in what's probably a fun little venn diagram

[19:22:02.0462] <Meghan Denny>
another fun point: discovered this because i separately ran into that on safari the first time you call it it'll return `["length", "name", "prototype"]` and if you call it again on the same function it'll return `["prototype", "name", "length"]` hehe

[19:22:12.0623] <Meghan Denny>
* another fun point: discovered this because i separately ran into that on safari atm the first time you call it it'll return `["length", "name", "prototype"]` and if you call it again on the same function it'll return `["prototype", "name", "length"]` hehe

[23:11:37.0363] <snek>
this is giving me some serious deja vu

[23:15:58.0225] <snek>
maybe this one https://github.com/tc39/ecma262/pull/2116

[23:17:22.0055] <snek>
oh no it was this one https://github.com/tc39/ecma262/pull/1490


2025-02-07
[10:17:24.0272] <rickbutton>
does anyone off top-of-head recall the historical reasons behind why the Array prototype methods always throw when attempting to assign a non-writable length property, regardless of strictness, unlike the runtime semantics of an `Assignment

[10:17:31.0386] <rickbutton>
* does anyone off top-of-head recall the historical reasons behind why the Array prototype methods always throw when attempting to assign a non-writable length property, regardless of strictness, unlike the runtime semantics of an `AssignmentExpression`?

[10:50:03.0827] <bakkot>
all built-in functions are supposed to be imagined to be implemented in strict mode code

[10:50:59.0411] <bakkot>
it would be more strange if their behavior differed depending on whether they were called from strict mode or not, so it has to be one or the other, and behaving as if they were strict seems like the obvious choice


2025-02-11
[10:58:58.0789] <Michael Ficarra>
I love this research into making JIT-generated code more secure: https://dl.acm.org/doi/10.1145/3694715.3695949

[10:59:07.0685] <Michael Ficarra>
it actually seems surprisingly practical as well


2025-02-12
[23:51:37.0552] <snek>
Chengzhong Wu: why does the import source call in v8 assert that the object is a wasm module object?

[01:00:46.0707] <Chengzhong Wu>
> <@devsnek:matrix.org> Chengzhong Wu: why does the import source call in v8 assert that the object is a wasm module object?

Wasm module is the only type of module source at the moment

[01:02:42.0303] <Chengzhong Wu>
There is no host defined module source yet

