2023-12-02
[09:30:58.0591] <jschoi>
Is there a way to view a rendered version of pull requests to ECMA-262, preferably with marked-up deltas? For example, reading a rendered version of https://github.com/tc39/ecma262/pull/2942/files.

[09:51:48.0892] <bakkot>
jschoi: at the bottom, click "show all checks", then scroll down to "Begin.com build preview â€” Preview ready!" and click the "details" button

[09:52:32.0590] <bakkot>
for rendered _diffs_, you can use https://arai-a.github.io/ecma262-compare/

[09:52:51.0651] <bakkot>
e.g. https://arai-a.github.io/ecma262-compare/?pr=2942

[09:53:15.0993] <jschoi>
Thank you!


2023-12-03
[07:19:09.0594] <Jack Works>
objection to "tla is not a breaking change"

[07:19:17.0689] <Jack Works>
 * objection to "adding tla is not a breaking change"

[11:48:18.0778] <snek>
yeah i find that to be extremely dumb

[11:50:21.0405] <snek>
html should just queue tasks until either the module is done evaluating or until a listener is added

[11:50:48.0334] <snek>
 * html should just queue events until either the module is done evaluating or until a listener is added

[11:55:21.0011] <snek>
 * html should just queue events until either the module is done evaluating or until a listener is added, or just not support modules as a serviceworker entrypoint


2023-12-04
[02:24:17.0106] <annevk>
"just"... I think SW had module support before TLA.

[10:25:48.0975] <littledan>
Disabling TLA in SW was a deliberate restriction; we had a whole discussion about it


2023-12-05
[20:23:28.0118] <Mathieu Hofman>
I still don't understand why service workers can't wait until all modules have fully evaluated to deliver the events. The implementations ought to be capable of detecting when the evaluation won't make further forward progress, and error if the module graph has not been fully evaluated, indicating a top level await is suspended on an event to be delivered, which should be the only violation.

[22:51:46.0660] <Jack Works>
yes they can, but I think that will be a deficit in the user experience (I don't know but I think web requests are blocked until sw initialized)

[00:57:57.0302] <annevk>
Indeed, a goal with SWs is that the runtime can be instantiated and discarded quickly. If instantiation needs to be awaited, that would go counter to those goals. https://github.com/w3c/ServiceWorker/issues/1407 has a bunch of the background.

[04:45:22.0446] <Mathieu Hofman>
But a top level await does not necessarily mean an actual delay. It could be as short as a microtask for a resolved promise. A typical use case is awaiting a dynamic import, which is arguably equivalent to a static import (besides ahead of time module graph analysis).
IMO discouraging bad patterns should not disable part of the language, it could instead be done the same way other bad patterns are discouraged: metrics and perf reports.

[04:59:05.0002] <littledan>
SWs make many other compromises of this type


2023-12-08
[09:57:38.0443] <bakkot>
FAQ is now public: https://github.com/tc39/faq/

[11:02:22.0519] <littledan>
maybe we should make this part of tc39.es [once its content is more mature], or linked from it


2023-12-09
[21:58:13.0398] <sirisian>
A pull request with the word types. Awesome, my kind of discussion.


2023-12-10
[16:05:07.0642] <sirisian>
bakkot: I never considered that f<a>() syntax issue. For some reason I thought there was a clever workaround. It can't use context, so a different syntax would need to be used entirely? Not sure if you follow TS stuff, did they talk about that a lot?

[16:06:23.0577] <sirisian>
I should have figured given Actionscript 3's design and the whole Vector.<T> syntax.

[16:56:56.0388] <bakkot>
any attempt to actually pull in TS syntax for types would need to choose a different syntax for generic invocation, yes

[16:57:38.0339] <bakkot>
I wasn't there when TS syntax was originally chosen but I imagine they didn't think it actually mattered given how they intended TS to be used, which was entirely reasonable of them

[05:34:19.0074] <Ashley Claymore>
The more recent conversations in types-as-comments have thought about using "turbo-fish" for passing a type parameter. `new Map::<number, number>()`


2023-12-11
[09:17:57.0038] <TabAtkins>
Yeah, "writing the comparisons `f < a > ()` is a ridiculous thing to do" is a totally reasonable call for a language that's not JS itself.

[09:32:53.0971] <nicolo-ribaudo>
`>` is just JavaScript's [abjunction operator](https://en.wikipedia.org/wiki/Material_nonimplication), so it makes perfectly sense to use it with a boolean expression on its lhs :)

