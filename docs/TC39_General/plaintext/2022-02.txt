2022-02-01
[22:51:09.0734] <sideshowbarker>
jmdyck: FYI, I made further changes based on review comments from other MDN writers. If/when you have time to take a look at the current text, that’d be much welcome.

[05:46:18.0256] <jmdyck>
sideshowbarker: I think the "For example" para has a problem where it says `and you change that to {"list":["oil","flour","sugar"]}`, because it depends on how one imagines accomplishing that change. I read it as (say) `copy[1] = {"list": ...}`, but I'm guessing you meant it as `copy[1].list = ["oil"...]`. The first isn't 'visible' to the original, the second is.

[06:57:18.0971] <sideshowbarker>
> <@jmdyck:matrix.org> sideshowbarker: I think the "For example" para has a problem where it says `and you change that to {"list":["oil","flour","sugar"]}`, because it depends on how one imagines accomplishing that change. I read it as (say) `copy[1] = {"list": ...}`, but I'm guessing you meant it as `copy[1].list = ["oil"...]`. The first isn't 'visible' to the original, the second is.

Ah yes, thanks, I'll fix that

[09:04:02.0766] <sideshowbarker>
jmdyck: thanks again — now updated

[10:52:52.0346] <devsnek>
this is some pretty wild spam https://gc.gy/111446560.png

[10:53:49.0706] <ptomato>
looks like the body text and username are scraped from the tc39 discourse

[10:57:34.0492] <bakkot>
oh hey, node shipped fetch! (experimentally)

[14:33:06.0306] <rickbutton>
> <@devsnek:matrix.org> this is some pretty wild spam https://gc.gy/111446560.png

looks like spammers are starting to use gpt lol

[14:33:46.0644] <rickbutton>
either that or kevin's bot has become sentient and we all need to be very worried


2022-02-04
[17:48:59.0928] <sideshowbarker>
looking at https://github.com/mdn/content/issues/12679

[17:49:58.0563] <sideshowbarker>
comments in that issue or here would be welcome

[17:50:27.0801] <sideshowbarker>
in https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block#block_scoping_rules_with_let_const_or_function_declaration_in_strict_mode MDN says:
>  In strict mode, starting with ES2015, functions inside blocks are scoped to that block. Prior to ES2015, block-level functions were forbidden in strict mode.

[17:50:55.0970] <sideshowbarker>
I am looking for where in the spec such a requirement is actually stated

[17:51:32.0730] <sideshowbarker>
I don’t seem to find it in the Appendix C summary https://tc39.es/ecma262/multipage/strict-mode-of-ecmascript.html

[17:52:03.0131] <sideshowbarker>
 * I don’t seem to find it in the Appendix C summary https://tc39.es/ecma262/multipage/strict-mode-of-ecmascript.html

[17:54:46.0435] <jmdyck>
See https://tc39.es/ecma262/#sec-block-level-function-declarations-web-legacy-compatibility-semantics

[17:58:55.0225] <jmdyck>
So "Prior to ES2015, block-level functions were forbidden in strict mode." is technically correct, but misleading, because they were also forbidden in non-strict mode. (Forbidden by spec, not by implementation, that is.)

[18:08:12.0933] <Jessidhia>
ah, and this is the part that implements the block scoping <https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-blockdeclarationinstantiation> (3b)

[18:20:50.0595] <jmdyck>
Re not finding it in Annex C: It looks like Annex C doesn't mention differences between strict and non-strict that only arise due to Annex B stuff.

[13:04:25.0267] <pokute>
New Babel version with decorators that conform to the latest version of the proposal came out a few days ago https://babeljs.io/blog/2022/02/02/7.17.0#decorators-14004httpsgithubcombabelbabelpull14004-13681httpsgithubcombabelbabelpull13681 , but there has been no news about it on twitter or even Decorator proposal repo!

Next step according to Decorators proposal's standardization plan is to collect feedback on the transpiler implementation, but we can't do it if no-one tests it out. (Unless no comments / testers is treated as no objections and it thus proceeds forward). Drum up the social media and other channels! Make people excited about decorators!


2022-02-05
[22:24:44.0559] <loganfsmyth>
In case anyone has thoughts: https://stackoverflow.com/questions/70973827/is-there-a-mistake-in-ecmascript-spec-relating-to-unicode-code-points

[22:33:09.0177] <devsnek>
i think the spec is saying exactly what you do

[22:33:20.0585] <devsnek>
> When a stream of code points is to be parsed as an ECMAScript Script or Module, it is first converted to a stream of input elements by repeated application of the lexical grammar;

[22:34:56.0857] <devsnek>
i think this is the section of the spec that defines what it means to actually "parse sourceText using goalSymbol"

[22:42:11.0351] <bakkot>
yup, that's my reading too


2022-02-06
[09:10:23.0805] <devsnek>
is it "allowed" for an implementation to set the value of [[ImportMeta]] to some arbitrary value before the logic of loading import.meta runs, effectively short circuiting it? 

[09:10:45.0041] <devsnek>
i should say this question isn't so much about import.meta specifically as it is about the "short circuiting" of intended semantics


2022-02-07
[13:45:36.0061] <jschoi>
Notes for the post-plenary ad-hoc dataflow meeting have been published at https://github.com/tc39/incubator-agendas/blob/master/notes/2022/01-27.md. 

[14:37:05.0490] <shu>
thank you very much for taking notes and publishing them!


2022-02-10
[23:13:26.0611] <bakkot>
does anyone know why is propertyIsEnumerable

[23:13:31.0173] <bakkot>
like, why does that... exist

[23:14:08.0561] <bakkot>
Object.prototype has like a dozen properties total and one of them is `propertyIsEnumerable`, which I have never in my life wanted

[03:53:28.0414] <Florian Scholz>
MDN users are reporting that tc39.es is 404'ing. https://github.com/mdn/content/issues/12889. Did anything change? (all of the JS docs link to this host)

[03:54:07.0127] <Luca Casonato>
Florian Scholz: Chairs have already been notified - hopefully it'll be taken care of soon :-)

[03:55:12.0012] <Florian Scholz>
Luca Casonato: wonderful, bedankt!

[05:17:52.0960] <jmdyck>
@bakkot: propertyIsEnumerable was added in ES3, if that helps.

[05:18:50.0618] <ryzokuken>
> <@floscholz:mozilla.org> MDN users are reporting that tc39.es is 404'ing. https://github.com/mdn/content/issues/12889. Did anything change? (all of the JS docs link to this host)

it's fixed

[07:27:34.0263] <ljharb>
bakkot: I’ve definitely used it. Before es5, it was the only way to differentiate enumerability, of the length property in particular.


2022-02-11
[00:52:12.0479] <sideshowbarker>
comments welcome at https://github.com/mdn/content/issues/12908 or here
> It is not clear what `return` in a `forEach` iteration is supposed to do.

[00:52:46.0009] <sideshowbarker>
 * comments welcome at https://github.com/mdn/content/issues/12908 or here
> It is not clear what `return` in a `forEach` iteration is supposed to do.

[01:00:12.0697] <Andreu Botella>
isn't that expected?

[01:00:43.0917] <Andreu Botella>
returning skips the rest of the callback, but not subsequent iterations, because they're different runs of the callback

[01:01:08.0886] <Andreu Botella>
the issue only comes when porting code that uses a for loop to code using `forEach`

[01:08:25.0928] <annevk>
I suspect what they're asking for is for the article to point out you cannot break out of the loop.

[04:18:02.0466] <Ashley Claymore>
There is already a section for this that says: "There is no way to stop or break a forEach() loop other than by throwing an exception"
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#sect2 

[04:18:33.0635] <Ashley Claymore>
maybe it could be even more explicit?

[04:46:27.0920] <annevk>
Good point, dunno then.

[05:08:44.0074] <sideshowbarker>
OK, thanks all — yeah, seems like the OP just had the expectation that the `return` would break out of the `forEach()`. So I guess I’ll add something to the _“There is no way to stop or break a `forEach()` loop other than by throwing an exception”_ note explicitly saying that a `return` will not break out of the `forEach()` but will instead just return from the current call to the callback function, and the continue the loop.

[06:17:09.0504] <Jessidhia>
the easy workaround is to use `.every()` and `return true` to continue and `return false` to break

[06:17:39.0553] <Jessidhia>
but feels weird since it’s not a function supposed to be side effectful 

[06:18:05.0855] <Jessidhia>
* the easy workaround is to use `every` and `return true` to continue and `return false` to break

[06:18:19.0373] <Jessidhia>
* the easy workaround is to use `.every()` and `return true` to continue and `return false` to break

