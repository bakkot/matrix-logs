2022-09-02
[14:23:35.0122] <iain>
Working on implementing Atomics.waitAsync: the spec text doesn't appear to say anything about what happens to a WaiterRecord if the agent that called waitAsync to create it terminates before it is notified. My initial expectation is that it would be removed from the WaiterList, but testing Chrome's implementation seems to indicate that there's still an entry

[14:24:53.0562] <iain>
(Methodology: create two workers, each of which calls Atomics.waitAsync on the same location, then terminate the first one. Atomics.notify has to be called twice to resolve the promise in the second worker, implying that the first worker's WaiterRecord is still hanging around)

[14:25:11.0720] <iain>
Is this the intended behaviour?

[15:58:39.0931] <shu>
yes, this is unfortunately a known leak

[15:58:45.0478] <shu>
i think there's some kind of lazy sweeping

[15:59:33.0553] <shu>
as for what the specified semantics are, i think it is currently underspecified. ecma262 doesn't really have a concept of "agent terminated"

[15:59:41.0357] <shu>
 * as for what the specified semantics are, i think it is currently underspecified. tc39 doesn't really have a concept of "agent terminated"

[15:59:48.0013] <shu>
 * as for what the specified semantics are, i think it is currently underspecified. ecma262 doesn't really have a concept of "agent terminated"

[16:02:03.0416] <shu>
it's not clear to me right now how easy it is to do this kind of sweeping eagerly

[16:02:13.0132] <shu>
iain: can it be done in Firefox easily?

[16:02:46.0497] <shu>
i agree with your intuition, it'd be nice if terminated agents made those entries disappear

[16:02:55.0793] <shu>
but like, how do you define when it's terminated?

[16:05:06.0289] <iain>
shu: I don't have any of it working yet in Firefox, so it's hard to say for sure how difficult it would be

[16:05:45.0049] <iain>
I thought I had a plan for clearing entries out when the runtime was shut down, but as I type this I realize that my current design only handles entries with an associated timeout

[16:09:14.0657] <iain>
But in any case, we already have code that cleans up when the runtime/context goes away: https://searchfox.org/mozilla-central/source/js/src/vm/JSContext.cpp#221

[16:11:10.0621] <iain>
In my test I just used `worker.terminate()`

[16:22:26.0297] <iain>
Actually, I don't understand why [this code](https://source.chromium.org/chromium/chromium/src/+/main:v8/src/execution/futex-emulation.cc;l=876;drc=2d80b7b69c11da0716326b7fdc15568fc30820c2) in V8 doesn't already clean out the waiter when the isolate for the terminated worker thread goes away

[16:48:19.0969] <shu>
huh, that's a good question

[16:48:28.0861] <shu>
it's been a while, could you please file an issue if you have a testcase handy?


2022-09-03
[17:34:37.0034] <iain>
shu: https://bugs.chromium.org/p/v8/issues/detail?id=13258

[17:39:55.0618] <jmdyck>
github appears to be down

[17:42:17.0113] <jmdyck>
yay, it's back up.

[18:32:27.0116] <shu>
iain: thank you!


2022-09-05
[12:05:06.0137] <nicolo-ribaudo>
Sorry for the refs spam in https://github.com/tc39/ecma262/pull/2819 ðŸ˜…

[12:06:17.0197] <nicolo-ribaudo>
I didn't realize that linking an issue/PR in our release notes means that it gets flooded by dependabot refs

[12:06:29.0669] <nicolo-ribaudo>
 * I didn't realize that linking an issue/PR in our release notes means that it gets flooded by dependabot refs

[12:26:22.0593] <bakkot>
yet another way dependabot is bad

[14:10:04.0004] <snek>
>735 hidden items

[14:11:43.0378] <snek>
its still going

[14:11:54.0636] <snek>
is this just gonna roll over to all 40k repos or whatever


2022-09-06
[20:21:29.0754] <Domenic>
I want to give a shout out to nicolo-ribaudo for some really exemplary work interfacing with a grouchy host maintainer (me) in https://github.com/whatwg/html/pull/8253#issuecomment-1236820949 . He went above and beyond to address my questions in detail, as well as ones I didn't ask, and totally flipped my feelings on the proposal. ðŸŽ‰ðŸš€

[01:23:19.0313] <nicolo-ribaudo>
> 3858 hidden items

[10:40:14.0224] <James DiGioia (mAAdhaTTah on GH)>
it just keeps going

[11:48:42.0231] <Michael Ficarra>
this is fine

