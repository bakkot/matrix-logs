2024-10-02
[22:36:09.0957] <rkirsling>
wait I don't think I realized that it's legal to return random crap from a constructor

[22:37:22.0625] <rkirsling>
so `class C { foo() { return 3; } constructor() { return [1]; } }` in an uninstantiable class then? (in the sense that you can call `new C()` but you can never get "a `C`")

[22:37:39.0164] <rkirsling>
does that have a non-illegitimate usage?

[22:38:02.0907] <rkirsling>
 * so `class C { foo() { return 3; } constructor() { return [1]; } }` is an uninstantiable class then?
(in the sense that you can call `new C()` but you can never get "a `C`")

[22:39:04.0984] <rkirsling>
 * so `class C { foo() { return 3; } constructor() { return [1]; } }` is an uninstantiable class then?
(in the sense that you can call `new C()` but you can never get "a `C`" and you could only access `foo` via `C.prototype`)

[22:40:02.0974] <rkirsling>
 * so `class C { foo() { return 3; } constructor() { return [1]; } }` is an uninstantiable class then?
(in the sense that you can call `new C()` but you can never get "a `C`", so `foo` could only be accessed via `C.prototype`)

[08:15:26.0788] <Aapo Alasuutari>
> <@rkirsling:matrix.org> so `class C { foo() { return 3; } constructor() { return [1]; } }` is an uninstantiable class then?
> (in the sense that you can call `new C()` but you can never get "a `C`", so `foo` could only be accessed via `C.prototype`)

Returning an object is valid.

[08:16:47.0222] <rkirsling>
it is valid code, yes, otherwise I wouldn't be talking about it lol

[08:19:06.0972] <bakkot>
depends on what you mean by "illegitimate". i believe the functionality is there so you could match es5-style "classes" which did the same thing. also lets you wrap the return value in a Proxy or whatever

[08:20:31.0769] <bakkot>
these days the only real use I see for it is to stamp private fields on existing objects (`class id { constructor(x){ return x } }; class stamp { #priv; constructor(o){ super(o) } }; new stamp(foo); // foo now has .#priv`

[08:20:36.0076] <bakkot>
the "return override trick"

[08:20:40.0225] <bakkot>
but this is hateful and you shouldn't do it

[08:41:33.0407] <shu>
loathsome return override

[09:01:31.0331] <rkirsling>
yeah by legitimate I meant not hateful/loathsome 😅 thanks for confirming

[09:01:54.0232] <rkirsling>
I learned this from Shu's Shared Structs deck

[09:02:03.0112] <rkirsling>
* (I learned this from Shu's Shared Structs deck)

[09:17:11.0251] <Michael Ficarra>
I think it was used for like "decorating" a constructor back in the day

[09:17:30.0574] <Michael Ficarra>
something like `C = doParameterValidation(C);`

[09:20:10.0294] <Michael Ficarra>
but while that is a use case for return override in functions, it is not a use case for return override in class constructors

[09:20:20.0950] <Michael Ficarra>
that feature probably should've been left on the ES2015 cutting room floor

[12:03:39.0498] <Bradford Smith>
A factory function is better, but I have seen the "return from constructor" feature used to allow `new Foo(x)` to always return the same object for a given `x` value.

[12:04:26.0599] <shu>
that's high-level hating

[12:04:35.0728] <shu>
why would you want `new` to not be actually new


2024-10-05
[21:49:11.0458] <Tushar Vaswani>

Hey guys I was reading about environment records and lexical environment and I got a confusion. Don't know if this is the right channel to discuss about this. But basically my question is this:

If we have this code:

{
    const x = 2;
    var y = 3;
}

console.log(x); // will fail
console.log(y); // will work fine

Then here x was part of lexical environment(and ultimately environment record) of the block. That's why it will not be accessible outside the block.

But var is accessible becasue it's not block scoped. So does that mean it's not stored in environment record of block and stored directly in global environment record (and global object basically?) or in both global environment record and environment record of block.

[21:49:28.0654] <Tushar Vaswani>
 * 
Hey guys I was reading about environment records and lexical environment and I got a confusion. Don't know if this is the right channel to discuss about this. But basically my question is this:

If we have this code:

```js
{
    const x = 2;
    var y = 3;
}

console.log(x); // will fail
console.log(y); // will work fine
```

Then here x was part of lexical environment(and ultimately environment record) of the block. That's why it will not be accessible outside the block.

But var is accessible becasue it's not block scoped. So does that mean it's not stored in environment record of block and stored directly in global environment record (and global object basically?) or in both global environment record and environment record of block.

[21:51:33.0444] <rkirsling>
yeah, `var` effectively "doesn't see" `{}`

[21:53:04.0827] <Tushar Vaswani>
> <@rkirsling:matrix.org> yeah, `var` effectively "doesn't see" `{}`

Thanks for help, so that basically means it will be be stored in global environment record only?

[21:54:00.0086] <Tushar Vaswani>
I am mainly confused because its not clearly outlined in spec

[21:54:05.0630] <Tushar Vaswani>
 * I was mainly confused because its not clearly outlined in spec

[21:55:23.0191] <rkirsling>
yeah, "lexical" refers to the `{}`, `let`, `const` mechanism

[21:55:45.0030] <rkirsling>
`var` just knows about function scopes and global scope

[21:55:51.0177] <Jessidhia>
that depends on strict mode and on whether it’s inside or outside a function body

[21:56:26.0859] <Jessidhia>
it won’t be global on a strict mode script… IIRC

[21:58:27.0791] <Tushar Vaswani>
> <@rkirsling:matrix.org> `var` just knows about function scopes and global scope

Thanks that makes a lot more sense now

[22:01:10.0967] <Tushar Vaswani>
> <@jessidhia:matrix.org> it won’t be global on a strict mode script… IIRC

so does that mean we wont be able to access var variables outside block in strict mode?

[22:02:24.0524] <Tushar Vaswani>
Well actually maybe I misunderstood it because I just tried it and it seems to work still:

```js
"use strict";
{
    var a = 1;
    console.log(a);
}
console.log(a);
```

[22:03:37.0861] <rkirsling>
you'd want to check `globalThis.a` but I do think it works, yeah

[22:03:49.0080] <rkirsling>
 * you'd want to check `globalThis.a` but I do think it works, yeah

[22:04:25.0768] <Tushar Vaswani>
> <@rkirsling:matrix.org> you'd want to check `globalThis.a` but I do think it works, yeah

yeah even that is printing the value


2024-10-06
[17:53:36.0425] <Mathieu Hofman>
```js
(function() {
"use strict";
{
    var a = 1;
    console.log(a); //1
}
console.log(a); // 1
})();
console.log(globalThis.a); // undefined
```

[18:40:22.0841] <rkirsling>
that shouldn't require "use strict" though


2024-10-08
[19:37:33.0719] <sachag>
I noticed TC39 is in Tokyo, feel free to ping me if any one of you come through Kyoto, or want info about the area!

[11:55:42.0810] <sirisian>
This is probably obvious, but in the decorator proposal if I have ```class A { @f a = 1; }``` it's not possible to access the initial value 1 without creating an instance? Is that more a reflection feature for later? Was mulling over how to turn a class with annotations into a JSON object (including their initial/default values) without creating an instance. I'm reminded of a Java project I saw before that extracted defaults to then create JSON structures that were fed to a UI. I could do class ```A { @f(1) a = 1; }```. addInitializer runs for the instance. Something like an addDefinitionInitializer would maybe be what I'd expect or is that too complex if it's like a function call?


2024-10-09
[18:06:00.0798] <littledan>
> <@sirisian:matrix.org> This is probably obvious, but in the decorator proposal if I have ```class A { @f a = 1; }``` it's not possible to access the initial value 1 without creating an instance? Is that more a reflection feature for later? Was mulling over how to turn a class with annotations into a JSON object (including their initial/default values) without creating an instance. I'm reminded of a Java project I saw before that extracted defaults to then create JSON structures that were fed to a UI. I could do class ```A { @f(1) a = 1; }```. addInitializer runs for the instance. Something like an addDefinitionInitializer would maybe be what I'd expect or is that too complex if it's like a function call?

The thing is, the initializer can refer to this, which (for a subclass) can be based on things like constructor params. So I think passing an argument to the constructor is the way to go.

[18:24:03.0785] <sirisian>
That is a really solid point. I was too focused on constants. Forgot you can use just do b = this.a * 2; and other things.

[08:12:05.0910] <Jùnliàng Huáng>
Is the behaviour of the regex `/\p{ASCII}/iv` supposed to be changed by https://github.com/tc39/proposal-regexp-v-flag/issues/30? Specifically, should `/\p{ASCII}/iv.test("\u017F")` returns `false` given that `/\p{ASCII}/iu.test("\u017F")` returns `true`? Reading the spec I figured the input `\u017F` should be folded to `s` by the Canonicalize in the character set matcher, and therefore should match `\p{ASCII}` . But both V8 and JSC reject it.


2024-10-10
[19:48:51.0420] <canadahonk>
how does it work with author vs champion?

[19:49:57.0413] <ljharb>
often they're the same people, but sometimes the author isn't a delegate and can't champion

[19:49:59.0635] <Chris de Almeida>
they are often the same, but authors author it and champions argue it

[19:50:12.0104] <ljharb>
and sometimes a new champion takes over an old proposal and the old champion is still the author

[19:50:31.0400] <canadahonk>
so if someone authored a proposal and I want to champion and potentially edit, I would be champion and me and the other would both be authors, right

[19:50:56.0821] <ljharb>
yep

[19:51:00.0287] <Chris de Almeida>
maybe, depends how much you add to it

[19:51:05.0383] <canadahonk>
sure

[19:51:09.0393] <Michael Ficarra>
very likely

[19:51:09.0599] <ljharb>
no hard rubric tho, just a judgement call

[19:51:15.0263] <canadahonk>
 * sure, but generally

[19:52:04.0804] <Chris de Almeida>
champions must be on committee and authors needn't

[19:56:57.0232] <canadahonk>
also should only `spec.emu` be used today (not `spec.html`)?

[19:57:34.0516] <shu>
you can name it whatever you want

[19:57:35.0883] <shu>
i like html

[19:57:43.0178] <shu>
ain't nobody know what emu is

[19:57:47.0637] <Richard Gibson>
spec.sgml

[19:58:01.0262] <keith_miller>
Isn't it a bird?

[19:58:05.0878] <Andreu Botella (at TC39, 🕐 JST)>
spec.ostrich

[19:58:24.0349] <canadahonk>
spec.spec

[20:01:41.0923] <Meghan Denny>
emu comes from <https://github.com/tc39/ecmarkup>

[20:02:37.0735] <Meghan Denny>
i used to think it was a bikeshed fork but im not sure if thats true/when it happened if it did

[20:03:32.0623] <linusg>
file extensions are bloat: https://github.com/whatwg/html/blob/main/source

[20:03:49.0634] <ljharb>
name it whatever you want, but the template repo starts it out as `spec.emu`

[21:07:48.0847] <Domenic>
> <@meghanbun:matrix.org> i used to think it was a bikeshed fork but im not sure if thats true/when it happened if it did

emu was from-scratch, built by Brian Terlson. IIRC, based on discussions between him and I at a Redmond TC39 shortly after ES6 publication. I had done Ecmarkdown, he did Ecmarkup.

[21:08:05.0269] <canadahonk>
random spec check: is "the extended mathematical value of" used in place of ℝ() only when the earlier spec does not handle +-Infinity?

[21:08:14.0884] <canadahonk>
 * random spec check: is "the extended mathematical value of" used in place of ℝ() only when the earlier steps do not handle +-Infinity?

[21:57:15.0279] <canadahonk>
intros in spec for proposals with only one clause, yay or nay

[21:58:45.0764] <bakkot>
I like to have a link to the github

[21:58:48.0568] <bakkot>
not everyone bothers

[21:59:10.0504] <canadahonk>
oh yeah that's nice

[21:59:44.0015] <canadahonk>
also is there an actual standard ;) / template for proposal's readme somewhere?

[22:02:00.0135] <bakkot>
nope

[22:03:17.0950] <Michael Ficarra>
@canadahonk:matrix.org I've developed this pattern over time: https://github.com/tc39/proposal-iterator-sequencing

[22:03:40.0979] <Michael Ficarra>
it changes a bit as the proposal goes through the stages

[22:04:00.0239] <Michael Ficarra>
earlier stages focus more on the open design space and later stages focus more on the design we ended up with

[22:04:56.0436] <canadahonk>
neat

[22:11:36.0369] <ljharb>
(fwiw the spec link will be on the right hand side, so it's arguably redundant to include it in the readme)

[22:14:19.0518] <bakkot>
the link on the RHS is not always to the spec; on proposals with a playground or docs it's usually those

[22:14:29.0459] <bakkot>
and the link on the RHS doesn't say what it is

[22:15:30.0978] <ljharb>
ah, that's fair. most proposals only have the spec link tho

[22:15:55.0426] <Richard Gibson>
what I really wish were more common is links to GitHub from the rendered spec, as in https://tc39.es/proposal-json-parse-with-source/

[22:16:14.0249] <ljharb>
yeah true, that'd be a good addition to ecmarkup actually

[22:17:35.0220] <Richard Gibson>
what, you don't like this?
```
shortname: &lt;a href="https://github.com/tc39/proposal-json-parse-with-source"&gt;proposal-json-parse-with-source&lt;/a&gt;
```

[22:18:37.0808] <ljharb>
oh interesting, that's workable i guess. i was thinking more of like the upper right dog-ear corner with a github logo

[22:19:14.0462] <Michael Ficarra>
> <@bakkot:matrix.org> the link on the RHS is not always to the spec; on proposals with a playground or docs it's usually those

yeah like https://github.com/tc39/proposal-joint-iteration#joint-iteration

[22:20:51.0681] <Michael Ficarra>
> <@ljharb:matrix.org> oh interesting, that's workable i guess. i was thinking more of like the upper right dog-ear corner with a github logo

yeah I have that on my demo pages https://tc39.es/proposal-joint-iteration/demo/

[22:23:29.0384] <ljharb>
i like https://github.com/tholman/github-corners a bit better

[22:23:55.0346] <Richard Gibson>
there's also the dead-simple approach taken by ecma262 itself
```
<div id="metadata-block">
  <h1>About this Specification</h1>
  …
  <ul>
    <li>GitHub Repository: <a href="https://github.com/tc39/ecma262">https://github.com/tc39/ecma262</a></li>
```

[22:24:08.0685] <ljharb>
not fancy enough :-p

[22:30:21.0239] <Richard Gibson>
https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExOG15N2NncXc5eWYzd2NhaGF4eXA5dm1pM2doZGk0aTJmYW5wNTFzNyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9cw/WcYnTzdrjQphdu33xs/giphy.gif

[22:31:39.0444] <Michael Ficarra>
get github to update their official recommendations and I'll change it https://github.blog/news-insights/the-library/github-ribbons/

[23:31:26.0389] <Aapo Alasuutari>
> <@canadahonk:matrix.org> spec.spec

spec.lgtm

