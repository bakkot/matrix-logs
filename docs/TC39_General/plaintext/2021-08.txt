2021-08-01
[20:47:37.0468] <bakkot>
Domenic: tracking that specifically at https://github.com/tc39/ecmarkup/issues/116, though it's not my highest priority


2021-08-02

2021-08-03

2021-08-04
[11:52:56.0139] <sideshowbarker>
help with https://github.com/mdn/content/issues/7593 would be much welcome

[11:53:27.0800] <sideshowbarker>
 * help with https://github.com/mdn/content/issues/7592 would be much welcome

[11:54:34.0062] <sideshowbarker>
…even if just a comment added to this issue (short of a patch/PR)

[11:55:30.0002] <jmdyck>
ES doesn't define ServiceWorker.

[11:57:10.0755] <jmdyck>
Though there might be people here who could help anyway.

[11:58:16.0779] <sideshowbarker>
jmdyck: sorry yeah I initially pasted in the wrong URL — the right one is actually https://github.com/mdn/content/issues/7592

[11:59:04.0440] <jmdyck>
Ah! I didn't notice the change.

[11:59:46.0046] <bakkot>
sideshowbarker: commented

[12:00:30.0693] <bakkot>
shu: do you know if there is an existing bug for v8 failing to throw on `new BigInt64Array( new Int32Array(0) )`

[12:00:43.0432] <bakkot>
it does (correctly) when `s/0/1/`

[12:01:01.0982] <bakkot>
I guess I'll just open one and let it get triaged

[12:02:47.0634] <shu>
no idea, the list of TA-related historical issues that're technically non-compliant with ecma262 is large and forboding, and mostly not worth the risk to try to fix

[12:03:18.0307] <shu>
though BigInt64Array is a new type...

[12:05:04.0845] <bakkot>
yeah, this is specifically an error which should happen when converting to (or from) one of the new Big* arrays, not a historical thing

[12:11:22.0143] <shu>
yeah, file it and assign it to me

[12:13:00.0975] <bakkot>
lol I get a 500 when trying to open an issue

[12:13:06.0337] <bakkot>
where do I file bugs in the bugtracker

[12:14:26.0782] <shu>
it... wfm?

[12:14:53.0011] <bakkot>
worked this time: https://bugs.chromium.org/p/v8/issues/detail?id=12052

[12:15:11.0926] <bakkot>
I can't assign to you because I still don't have a Chromium account

[12:30:03.0779] <shu>
wait what is [[ContentType]]

[12:30:19.0158] <shu>
it's just to distinguish bigint or not bigint?

[12:30:28.0809] <bakkot>
yup

[12:31:18.0009] <shu>
hm, would've been clearer to encode that directly by casing on the element type rather than a field named [[ContentType]]

[12:39:56.0799] <bakkot>
possibly even in an AO?

[12:40:00.0165] <bakkot>
PRs welcome :P

[12:47:14.0045] <jmdyck>
origin story: https://github.com/tc39/ecma262/pull/1515#discussion_r305633166


2021-08-05
[16:18:38.0882] <rkirsling>
it appears the Temporal.Duration polyfill and spec are out of alignment on the case `new Temporal.Duration().toString({ fractionalSecondDigits: 2})`

[16:18:42.0913] <rkirsling>
 * it appears the Temporal.Duration polyfill and spec are out of alignment on the case `new Temporal.Duration().toString({ fractionalSecondDigits: 2 })`

[16:21:00.0603] <rkirsling>
 * it appears the Temporal.Duration polyfill and spec are out of alignment on the case `new Temporal.Duration().toString({ fractionalSecondDigits: 2 })` (_where 2 can be anything between 1 and 9_)

[16:37:14.0320] <rkirsling>
(in particular, step 13 of https://tc39.es/proposal-temporal/#sec-temporal-temporaldurationtostring is super unambiguous)

[16:39:24.0834] <ptomato>
that looks like a spec bug. probably we missed that case when adding fractionalSecondDigits. if you file an issue for it, I'll try and include it in the presentation for August TC39 plenary

[16:48:19.0897] <rkirsling>
ah okay


2021-08-06
[17:02:55.0763] <rkirsling>
https://github.com/tc39/proposal-temporal/issues/1697

[11:01:25.0023] <jschoi>
Does anyone know of any way to view the most popular NPM packages that depend on a specific NPM package, other than downloading a Gzemnid dataset? (npmjs.com can sort packages by popularity in its name search, and it can list the dependees of a specific package, but it can’t do both at the same time.)

[11:08:58.0116] <jschoi>
(Use case: Trying to find maximally impactful real-world examples of a library’s usage in the wild.)

[11:09:33.0621] <jschoi>
* (Use case: Trying to find maximally impactful real-world examples of a library’s usage in the wild, while writing a proposal explainer.)

[11:11:48.0316] <jschoi>
Also, I might be confused, but has https://gzemnid.nodejs.org/datasets/ not been updated since 2019?

[13:14:11.0512] <Justin Ridgewell>
Hacker News is linking to a new IETF for UUID formats: https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format

[13:30:50.0686] <ryzokuken>
Looks pretty neat! UUID v6 perhaps? 

[13:31:18.0696] <ryzokuken>
(in the meantime, I still find 99% of UUID usages in the wild being v4)

[13:31:30.0934] <ryzokuken>
* (in the meantime, I still find 95% or more of UUID usages in the wild being v4)

[13:38:23.0588] <ptomato>
is "the integral part of _x_", where _x_ is a mathematical value, valid ecma262-speak?

[13:39:47.0310] <ptomato>
the only instance I can find in the current text is in the prose description of Math.trunc

[13:40:28.0283] <ptomato>
similarly, there are no references to "the fractional part of _x_"

[15:11:50.0544] <jmdyck>
ptomato: I think you'd be better off using floor(x) and (x modulo 1), assuming that the semantics for x<0 are what you want.

[15:13:24.0213] <jmdyck>
If they're *not* what you want, then you might have to define it, rather than just saying "the integral/fractional part". 

[15:19:35.0674] <ptomato>
they are not, which is how I landed on this question

[15:19:51.0777] <ptomato>
I've currently got something like "Let _y_ be the mathematical value whose sign is the sign of _x_ and whose magnitude is _x_ modulo 1"

[15:20:07.0261] <ptomato>
for the fractional part

[15:20:29.0598] <ptomato>
which is a mouthful!

[15:22:36.0854] <jmdyck>
I don't even think it'

[15:22:41.0973] <jmdyck>
 * I don't even think it's what you want.

[15:23:37.0676] <jmdyck>
e.g. -3.1 modulo 1 is 0.9, so you'd be saying that the fractional part of -3.1 is -0.9

[15:25:47.0448] <ptomato>
ah. the magnitude should be abs(_x_) modulo 1, then

[15:49:25.0251] <TabAtkins>
Alternately, "Let y be the mathematical value resulting from x - the integral part of x", or however exactly you spec-ese that.


2021-08-07

2021-08-08
[23:32:33.0510] <bakkot>
shu: you may be interested in https://bugzilla.mozilla.org/show_bug.cgi?id=1724618 in the context of proposal-rm-builtin-subclassing

[23:47:58.0455] <bakkot>
and also https://github.com/chakra-core/ChakraCore/issues/6736, https://github.com/Moddable-OpenSource/moddable/issues/680, and https://github.com/oracle/graaljs/issues/488


2021-08-09
[13:14:22.0162] <bakkot>
yulia: I pushed up a handful of minor editorial tweaks to the TLA PR (see https://github.com/tc39/ecma262/pull/2408/commits; my first one was "adopt 545-style structured headers for new AOs", which you can ignore) - can you take a look over those when you get a chance? I think editors are all happy with it now, otherwise

[13:14:42.0975] <bakkot>
No rush though; I'll keep it rebased

